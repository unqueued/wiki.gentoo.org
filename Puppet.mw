<languages />
<translate>

<!--T:43-->
{{Metadata|abstract=Puppet is a configuration management system written in Ruby. It can be used for automating machine deployments.}}

<!--T:1-->
{{InfoBox stack
|{{InfoBox homepage|https://puppetlabs.com/puppet/puppet-open-source|header=true}}
|{{InfoBox wikipedia|Puppet (software)}}
|{{InfoBox ohloh}}
}}

<!--T:2-->
'''Puppet''' is a configuration management system written in [[Ruby]]. It can be used for automating machine deployments.

== Installation == <!--T:3-->

<!--T:44-->
Puppet is provided by the {{Package|app-admin/puppet}} package.

<!--T:45-->
Currently, there is no distinction between server and client, so the basic installation procedure is the same for both.

=== Emerge === <!--T:46-->

<!--T:4-->
First, install Puppet via {{c|emerge}}:

<!--T:47-->
{{Emerge|app-admin/puppet}}

== Configuration and setup == <!--T:5-->

<!--T:48-->
Puppet is mainly configured through {{Path|/etc/puppet/puppet.conf}} in an INI-style format. Comments are marked with a hash sign (<code>#</code>).

<!--T:49-->
The configuration file is separated into several sections, or blocks:

<!--T:6-->
* <code>[main]</code> contains settings that act as a default for all parts of Puppet, unless overridden by settings in any of the following sections:
** <code>[master]</code> is used for settings applying to the Puppetmaster ({{c|puppet master}}), or CA tool ({{c|puppet cert}})
** <code>[agent]</code> is used for settings applying to the Puppet agent ({{c|puppet agent}})

<!--T:7-->
A more in-depth explanation, as well as a list of further blocks used is available in the [http://docs.puppetlabs.com/guides/configuring.html official Puppet documentation].
Also, there is a [http://docs.puppetlabs.com/references/stable/configuration.html list of all configuration] options, some of which of course make only sense when applied to either server or client.

=== Server (Puppetmaster) Setup === <!--T:8-->

<!--T:41-->
The default configuration put by the Ebuild into {{Path|puppet.conf}} can be used as-is. For Puppet 2.7.3, the server-related parts look like this:

<!--T:42-->
{{FileBox|filename=/etc/puppet/puppet.conf|title=Server-related default configuration|lang=ini|1=
[main]
    # The Puppet log directory.
    # The default value is '$vardir/log'.
    logdir = /var/log/puppet
  
    # Where Puppet PID files are kept.
    # The default value is '$vardir/run'.
    rundir = /var/run/puppet
  
    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
    ssldir = $vardir/ssl
}}

==== Setting up the file server ==== <!--T:11-->

<!--T:50-->
To be able to send files to the clients, the file server has to be configured. This is done in {{Path|/etc/puppet/fileserver.conf}}. By default, there are no files being served.

<!--T:12-->
{{FileBox|filename=/etc/puppet/fileserver.conf|title=Setting the <tt>files</tt> share|lang=ini|1=
[files]
    path /var/lib/puppet/files
    allow 192.168.0.0/24
}}

<!--T:13-->
The snippet above sets up a share called <tt>files</tt> (remember this identifier, as it will need to be referenced later), looking for files in {{Path|/var/lib/puppet/files}} and only available for hosts with an IP from the 192.168.0.0/24 network. Any of the IP addresses, CIDR notation, and host names (including wildcards like <code>*.domain.invalid</code>) can be used here. The <tt>deny</tt> command can be used to explicitly deny access to certain hosts or IP ranges.

==== Starting the puppetmaster daemon ==== <!--T:14-->

<!--T:51-->
{{Note|It is recommended that the Puppetmaster is reachable from the clients using the host name <code>puppet</code>. However, the name can be overridden, which of course causes configuration effort.}}

<!--T:15-->
{{Important|At this point, the host name as seen from the clients should be the same as the output of {{c|hostname -f}}. To achieve this, the {{Path|/etc/hosts}} file might have to be adjusted, or a new certificate can be created manually as [[#Manually generating certificates|explained below]].}}

<!--T:16-->
With the basic configuration as well as an initial file server configuration, we can start the Puppetmaster daemon using its OpenRC init script:

<!--T:52-->
{{RootCmd|/etc/init.d/puppetmaster start}}

<!--T:17-->
During the first start, Puppet generates an SSL certificate for the Puppetmaster host and places it into the directory configured through the <var>ssldir</var> variable, as configured above.

<!--T:18-->
It listens on Port <code>8140/TCP</code>, make sure that there are no firewall rules obstructing access from the clients.

==== A simple manifest ==== <!--T:19-->

<!--T:53-->
Manifests, in Puppet's terminology, are the files in which the client configuration is specified.
The documentation contains a [http://docs.puppetlabs.com/guides/language_guide.html comprehensive guide] about the manifest markup language.

<!--T:20-->
As a simple example, let's create a ''message of the day'' (motd) file on the client. On the puppetmaster, create a file inside the <tt>files</tt> share created earlier:

<!--T:21-->
{{FileBox|filename=/var/lib/puppet/files/motd|title=MOTD file on the server|1=
Welcome to this Puppet-managed machine!
}}

<!--T:22-->
Then, we have to create the main manifest file in the {{Path|manifests}} directory. It is called <tt>site.pp</tt>:

<!--T:23-->
{{FileBox|filename=/etc/puppet/manifests/site.pp|title=Main manifest on the server|lang=ruby|1=
node default {
  file { '/etc/motd':
    source => 'puppet:///puppet/files/motd'
  }
}
}}

<!--T:24-->
The <tt>default</tt> ''node'' (the name for a client) definition is used in case there is no specific <tt>node</tt> statement for the host.
We use a <tt>file</tt> resource and want the {{Path|/etc/motd}} file on our clients to contain the same thing as the <tt>motd</tt> file in the <tt>files</tt> share on the host <code>puppet</code>. If the puppetmaster is only reachable using another host name, adapt the <tt>source</tt> URI accordingly.

=== Client configuration === <!--T:25-->

<!--T:54-->
{{Important|The client '''must''' have the '''same major and minor version''' as the Puppetmaster. Using a 2.7.1 Puppetmaster with 2.7.2 clients is fine, but using 2.6 for the server and 2.7 for clients can cause unexpected issues at any time.}}

<!--T:26-->
{{Note|If the puppetmaster is not reachable via <code>puppet</code>, set <code>server{{=}}&lt;the hostname&gt;</code> to the actual host name in {{Path|/etc/puppet/puppet.conf}} in the <code>[main]</code> section.}}

<!--T:27-->
During the first execution of the Puppet agent, wait for the certificate to be signed by the puppetmaster. To request a certificate, and execute the first configuration run, execute:

<!--T:28-->
{{RootCmd|puppet agent --test --waitforcert 60|prompt=root@client #
|output=<pre>
info: Creating a new certificate request for client
info: Creating a new SSL key at /var/lib/puppet/ssl/private_keys/client.pem
notice: Did not receive certificate
</pre>}}

<!--T:29-->
Before the client can connect, authorize the certificate request on the server. The client should appear in the list of nodes requesting a certificate:

<!--T:55-->
{{RootCmd|puppet cert --list
|prompt=root@server #
|output=client}}

<!--T:30-->
Now, we grant the request:

<!--T:56-->
{{RootCmd|puppet cert --sign client
|prompt=root@server #}}

<!--T:31-->
The client will check every 60 seconds whether its certificate has already been issued. After that, it continues with the first configuration run:

<!--T:57-->
{{GenericCmd|<pre>
info: Caching catalog for client
info: Applying configuration version '1317317379'
notice: /Stage[main]//Node[default]/File[/etc/motd]/ensure: defined content as '{md5}30ed97991ad6f591b9995ad749b20b00'
notice: Finished catalog run in 0.05 seconds
</pre>}}

<!--T:32-->
When this message pops up, all went well. Now check the contents of the {{Path|/etc/motd}} file on the client:

<!--T:58-->
{{Cmd|cat /etc/motd
|prompt=user@client $
|output=Welcome to this Puppet-managed machine!}}

==== OpenRC ==== <!--T:59-->

<!--T:33-->
Start the puppet agent as a deamon and have it launch on boot:

<!--T:60-->
{{RootCmd|/etc/init.d/puppet start
|rc-update add puppet default
|prompt=root@client #}}

==== Systemd ==== <!--T:61-->

<!--T:62-->
Conversely, when running systemd:

<!--T:63-->
{{RootCmd|systemctl start puppet
|systemctl enable puppet
|prompt=root@client #}}

== Other topics == <!--T:34-->

=== Manually generating certificates === <!--T:35-->

<!--T:64-->
To manually generate a certificate, use the {{c|puppet cert}} utility.
It will place all generated certificates into the <var>ssldir</var> defined directory as set in the puppet configuration and will sign them with the key of the local Puppet Certificate Authority (CA).

<!--T:36-->
An easy case is the generation of a certificate with '''only one Common Name:'''

<!--T:65-->
{{RootCmd|puppet cert --generate host1}}

<!--T:37-->
If the certificate has to be valid for '''multiple host names''', use the <code>--certdnsnames</code> parameter and separate the additional host names with a colon:

<!--T:66-->
{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

<!--T:38-->
This example will generate a certificate valid for the three listed host names.

=== Refreshing agent certificates === <!--T:67-->

<!--T:68-->
This is the process used to manually refresh agent certificates.

<!--T:69-->
# (on master) {{RootCmd|puppet cert clean ${AGENT_HOSTNAME} }}
# (on agent) {{RootCmd|rm /etc/puppet/ssl/{certs,certificate_requests}/${AGENT_HOSTNAME}.pem}}
#* This will cause the Puppet agent to regenerate the CSR with the existing SSL key.
#* The old certificate is no longer valid, as it was nuked on the master.
#* When one of the above steps is forgotten, an error will pop up about the certificate mis-matching between agent and master.
#* To replace the SSL keys (optional): {{RootCmd|rm /etc/puppet/ssl/{public,private}_keys/${AGENT_HOSTNAME}.pem}}
# (on agent) {{RootCmd|puppet agent --onetime --no-daemonize --verbose --test --waitforcert 30}}
#* When using auto-signing, no further steps are needed.
# (on master) {{RootCmd|puppet cert list ${AGENT_HOSTNAME} }}
# Verify that the fingerprint listed in the previous two outputs matches
# (on master) {{RootCmd|puppet cert sign ${AGENT_HOSTNAME} }}
# (on agent) {{RootCmd|puppet agent --onetime --no-daemonize --verbose --test}}

=== Managing slots with puppet === <!--T:39-->

<!--T:70-->
While the default portage provider in puppet does support slots there are puppet modules available which also have this functionality.

For instance, with {{Package|app-admin/puppet}} version 4.6.0 and higher, and/or {{Package|app-admin/puppet-agent}}, the slot functionality is supported like to:

{{CodeBox|title=Defining an absent slotted package|1=
    package { 'dev-lang/python:3.3': ensure => absent }
}}

Additional modules are:
* [https://github.com/gentoo/puppet-portage puppet-portage]
* [https://github.com/whatbox/PortageGT PortageGT]

== External resources == <!--T:40-->

<!--T:72-->
* [http://puppetlabs.com/ Upstream website]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]

</translate>

[[Category:Server]]
[[Category:Security]]
