'''Puppet''' is a configuration management system written in Ruby. It can be used for automating machine deployments.

== Installation ==

Puppet is provided by the Gentoo package {{Package|app-admin/puppet}}.
Currently, there is no distinction between server and client, so the basic installation procedure is the same for both.

First, install Puppet via <tt>emerge</tt>:
{{RootCmd|emerge -va puppet}}

== Configuration and Setup ==

Puppet is mainly configured through <tt>/etc/puppet/puppet.conf</tt> in an INI-style format. Comments are marked with a hash sign (<tt>#</tt>).
The configuration file is separated into several sections, or blocks:

* <tt>[main]</tt> contains settings that act as a default for all parts of Puppet, unless overridden by settings in any of the following sections:
** <tt>[master]</tt> is used for settings applying to the Puppetmaster (<tt>puppet master</tt>), or CA tool (<tt>puppet cert</tt>)
** <tt>[agent]</tt> is used for settings applying to the Puppet agent (<tt>puppet agent</tt>)

A more in-depth explanation, as well as a list of further blocks used is available in the [http://docs.puppetlabs.com/guides/configuring.html official Puppet documentation].
Also, there is a [http://docs.puppetlabs.com/references/stable/configuration.html list of all configuration] options, some of which of course make only sense when applied to either server or client.

=== Server (Puppetmaster) Setup ===

The default configuration put by the Ebuild into <tt>puppet.conf</tt> can be used as-is. For Puppet 2.7.3, the server-related parts look like this:

{{File|/etc/puppet/puppet.conf|Server-related default configuration|<pre>
[main]
    # The Puppet log directory.
    # The default value is '$vardir/log'.
    logdir = /var/log/puppet

    # Where Puppet PID files are kept.
    # The default value is '$vardir/run'.
    rundir = /var/run/puppet

    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
    ssldir = $vardir/ssl
</pre>}}

==== Setting up the file server ====
To be able to send files to the clients, the file server has to be configured. This is done in <tt>/etc/puppet/fileserver.conf</tt>. By default, there are no files being served.

{{File|/etc/puppet/fileserver.conf|Setting the <tt>files</tt> share|<pre>
[files]                                                                                                                                                                                                                                                                   
    path /var/lib/puppet/files                                                                                                                                                                                                                                               
    allow 192.168.0.0/24</pre>}}

The snippet above sets up a share called <tt>files</tt> (remember this identifier, as it will need to be referenced later), looking for files in <tt>/var/lib/puppet/files</tt> and only available for hosts with an IP from the 192.168.0.0/24 network. You can use IP addresses, CIDR notation, and host names (including wildcards like <tt>*.domain.invalid</tt>) here. The <tt>deny</tt> command can be used to explicitly deny access to certain hosts or IP ranges.

==== Starting the Puppetmaster daemon ====

{{Note|It is recommended that the Puppetmaster is reachable from the clients using the host name <tt>puppet</tt>. However, the name can be overridden, which of course causes configuration effort.}}

{{Important|At this point, the host name as seen from the clients should be the same as the output of <tt>hostname -f</tt>. You might have to adjust <tt>/etc/hosts</tt> to achieve this, or manually create a new certificate as [[#Manually_generating_certificates|explained below]].}}

With the basic configuration as well as an initial file server configuration, we can start the Puppetmaster daemon using its init script:
{{RootCmd|/etc/init.d/puppetmaster start}}

During the first start, puppet generates an SSL certificate for the Puppetmaster host and places it into the <tt>ssldir</tt>, as configured above.

It listens on Port 8140/TCP, make sure that there are no firewall rules obstructing access from the clients.

=== Client Configuration ===

{{Important|The client '''must''' have the '''same major and minor version''' as the Puppetmaster. Using a 2.7.1 Puppetmaster with 2.7.2 clients is fine, but using 2.6 for the server and 2.7 for clients can cause unexpected issues at any time.}}

== Other Topics ==
=== Puppet Dashboard ===



=== Manually generating certificates ===

To manually generate a certificate, you can use the <tt>puppet cert</tt> utility.
It will place all generated certificates into the <tt>ssldir</tt> as set in the puppet configuration and will sign them with the key of your local Puppet Certificate Authority (CA).

An easy case is the generation of a certificate with '''only one Common Name:'''
{{RootCmd|puppet cert --generate host1}}

If you need to have '''multiple host names''' the certificate is valid for, use the <tt>--certdnsnames</tt> parameter and separate the additional host names with a colon:
{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

This example will generate a certificate valid for the three listed host names.

== See also ==
* [http://puppetlabs.com/ Upstream website]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]
