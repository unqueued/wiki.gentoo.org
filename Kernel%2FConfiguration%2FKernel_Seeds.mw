{{InfoBox stack
|{{InfoBox homepage|http://elilabs.com/~pappy/|header=true}}
}}

Kernel seeds are pre-made kernel configuration files. They are not necessary to use when configuring a kernel, but they, along with tools such as [[genkernel]], are helpful for users who may be unfamiliar with configuring the Linux kernel.

__TOC__

== Concepts ==
Once upon a time a Gentoo user by the name of Pappy had an idea. Since configuring the Linux kernel can take much time out of a person's day, why not share generic configuration files with other users? Sharing a configuration file is as easy as putting a link to the file on the internet for any user to download. In Pappy's own words, Kernel Seeds are a "sane {{c|make defconfig}} for the real world."

What are the benefits of using Kernel Seed?
* Most default settings will be automatically configured.
* Time can be saved; using a pre-configured Seed is more efficient than starting without a {{Path|.config}} file.

What are the hindrances of using Kernel Seeds?
* Negates learning the "tough stuff" for the user.
* In many cases users need to perform additional configuration steps in order to make the Seed bootable; seeds are not bootable "out-of-the-box".
* Usually the process (see below) takes longer than using Genkernel.

== Configuration ==
Setting up the environment to use a Kernel Seed is not difficult at all, it's as simple a copying the {{Path|.config}} file off the web into the current set of Kernel sources.

Verify the symlink is set to the newest emerged Kernel sources:
{{RootCmd|eselect kernel list}}

Substitute <code><number></code> in the next command with the desired Kernel sources number (left column) in the list printed by the previous command:
{{RootCmd|eselect kernel set <number>}}

Grab the Kernel Seed configuration file off the internet by using a utility of choice. {{c|wget}} ({{Package|net-misc/wget}}) is used in the next example:

{{RootCmd|wget [Kernel-Seed-URL] -O /usr/src/linux/.config}}

Figure out what additional drivers the system will need by inspecting the PCI and USB devices with the appropriate tools. Installing {{Package|sys-apps/pciutils}} and {{Package|sys-apps/usbutils}} will be required for this step, as they contain the utilities for the task at hand.

{{RootCmd
|lspci -nnk
|lsusb -vv
}}

View the output generated from {{c|lspci}} and {{c|lsusb}}. Add any needed drivers to the kernel configuration by using the menu target of choice ({{c|menuconfig}}, {{c|xconfig}}, {{c|gconfig}}):

{{RootCmd|make menuconfig}}

Once everything is set, run the the following make commands to built the new kernel:

{{RootCmd|make && make modules_install}}

Verify {{Path|/boot}} is mounted (if applicable) and then install the newly build sources to the {{Path|/boot}} location:

{{RootCmd
|mount /boot
|make install
}} 

If needed, perform additional steps to add the new kernel to the system's boot loader. Supposing the system uses [[GRUB2]]:

{{RootCmd|grub2-mkconfig -o /boot/grub/grub.cfg}}

Reboot the system. After (if) the system reboots successfully look at the output of {{c|dmesg}}. A full log be can viewed by looking at the dmesg log file located at {{Path|/var/log/dmesg}} with the pager of choice.

== See also ==

* [[Genkernel]] - Gentoo's kernel generation tool.
