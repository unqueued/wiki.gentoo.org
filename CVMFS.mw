{{InfoBox stack
|{{InfoBox homepage|http://cernvm.cern.ch/portal/filesystem|header=true}}
}}

CVMFS is a FUSE module which implements an HTTP read-only filesystem.

== Concepts ==

==CVMFS server setup ==

To get an cvmfs server system working you will need the following steps.

=== Kernel with aufs options enabled ===

The {{Package|sys-kernel/aufs-sources}} contains Linux Kernel with the aufs support module. First, you must install this package:

{{RootCmd|emerge -av sys-kernel/aufs-sources}}

Note that in order to use {{c|genkernel}} to generate Linux kernel and initramfs, you must:

{{RootCmd
|cd /usr/src
| rm -fr linux
| ln -s linux-3.10.25-aufs linux
| genkernel --menuconfig all
}}
{{Note|{{Path|linux}} is a symbolic link to the real kernel source.}}

{{KernelBox|
File systems  --->
      [*] FUSE (Filesystem in Userspace) support
      [*] miscellaneous filesystems  --->
       [*]   Aufs (Advanced multi layered unification filesystem) support
       [*]     Detect direct branch access (bypassing aufs)
       [*]     NFS-exportable aufs
       [*]     Readdir in userspace
       [*]     Show whiteouts
       [*]     Ramfs (initramfs/rootfs) as an aufs branch
       [*]     Fuse fs as aufs branch
       [ ]     Debug aufs
}}

=== Apache server configuration ===

The cvmfs server utility will use {{Path|/srv/cvmfs}} as storage location. Therefore, the <code>DocumentRoot</code> should be config to the <code>/srv</code>.
{{FileBox|filename=/etc/apache2/vhosts.d/default_vhost.include|lang=apache|1=
DocumentRoot "/srv"

<Directory "/srv">
    ....
</Directory>
}}

{{RootCmd|/etc/init.d/apache2 restart}}

=== Create CVMFS repository ===

1. Build and install cvmfs

Download cvmfs code from github [https://github.com/cvmfs/cvmfs cvmfs].

The cvmfs build system uses cmake.  In order to compile and install, run from the source directory.

{{RootCmd| mkdir -p build
| cd build
| cmake ../
| make
| make install
}}

2. Create the two directories and ensure adequate space.

* /cvmfs
* /srv

3. Create a new cvmfs server "file system" and repository structure:

{{RootCmd|cvmfs_server mkfs my.test.repo}}

If there is an error in creation, remove the repository:
{{RootCmd|cvmfs_server rmfs my.test.repo}}

=== Repository update ===

In cvmfs server, switch repo to a copy-on-write enabled cvmfs volume.
{{RootCmd|cvmfs_server tansaction}}

Then, make the necessary changes to the repository.

Run <kbd>cvmfs_server publish</kbd> to finalize your new repository revision, or run <kbd>cvmfs_server abort</kbd> to clear all changes and start over again.
{{RootCmd|cvmfs_server publish}}

==CVMFS client setup ==

=== Installation ===

Install the cvmfs package from [https://github.com/cvmfs/cvmfs cvmfs]. See the above section.

Install the [[AutoFS|AutoFS]]. Typically, mounting of cvmfs repositories is handled by AutoFS. For Gentoo, you must both install autofs utility and open kernel option.

Check the {{Path|/etc/auto.master}} has contains <code>/cvmfs /etc/auto.cvmfs</code>. Then, do the base setup:
{{RootCmd|cvmfs_config setup}}

Create {{Path|/etc/cvmfs/default.local}} to set base options of cvmfs client:
{{FileBox|filename=/etc/cvmfs/default.local|title=minimal sample of config|1=
CVMFS_REPOSITORIES=your.cvmfs.repo
CVMFS_CACHE_BASE = /path/to/your/cache
CVMFS_RELOAD_SOCKETS = /path/to/your/cache
CVMFS_SERVER_URL = http://cvmfs-stratum-one.cern.ch/cvmfs/your.cvmfs.repo
CVMFS_HTTP_PROXY = DIRECT
}}

Then, use the {{c|cvmfs2}} command line to mount cvmfs to local for example:
{{RootCmd|cvmfs2 -o config{{=}}/etc/cvmfs/default.local your.cvmfs.repo path/to/mount/cvmfs}}

At last, check if cvmfs mounts correctly.
{{RootCmd|cvmfs_config probe}}

=== Reload the updated repository ===

Internally cvmfs checks for file system updates once per hour by default. You can certainly configure a lower update interval. In order to force frequent catalog updates, you can set the configuration variable <code>CVMFS_MAX_TTL</code> to a value in seconds. But be warned, that a very short TTL might result in high load on your server infrastructure.

if you want to invest a bit of scripting, you can also use <kbd>cvmfs_talk remount</kbd> or <kbd>cvmfs_config reload</kbd> to trigger a reload of the newest snapshot (without service interruption).

[[Category:Filesystems]]
