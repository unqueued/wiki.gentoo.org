==Preface: Prefix on Cygwin==
How to bootstrap Gentoo Prefix on Cygwin?
===Overview===
At the beginning you find some general advices and how to set up Cygwin. Those chapters that cover the bootstrapping process are divided into a "Walkthrough" followed by "Issue" handlings in case if something goes wrong.<br />
As recommended by the Prefix team follow the [http://www.gentoo.org/proj/en/gentoo-alt/prefix/bootstrap-solaris.xml Solaris Process]. Be advised to follow that document in parallel in a second browser view. This wiki page is kind of an overlay.<br />
{{Note|Running Prefix on Interix is the way recommended by the Prefix team.<br />
The team considers Cygwin not as stable as Interix.<br />
If you want good support choose the well established way to run Prefix on Interix.<br />
Prefix on Cygwin is definitly experimental. It's your personal advanture.}}

Sadly as of 2014 unless you are running Windows [version] Ultimate, Windows [server edition version], or < Windows 7 Interix or SFU(Services for UNIX) is not available for your environment. <br/>
(if anyone finds a way pop into #gentoo-prefix on freenode I'm sure they would love to hear your solution)

===What is this?===
For the beginning this is rather a log of a single users efforts to install Gentoo Prefix on Cygwin. There is no report that anybody has done that successfully before, but [http://www.mail-archive.com/gentoo-osx@lists.gentoo.org/msg00746.html Nimish Pachapurkar got quite far]. Maybe he did it, we don't know.<br />
There was also a project "Gentoo on Cygwin" which is unmaintained as of 2008. Note the difference to "Gentoo Prefix on Cygwin". "Gentoo Prefix on Cygwin" is not a project itself but simply a try to run the well maintained "Gentoo Prefix" sources on Cygwin. However the [http://www.gentoo-wiki.info/HOWTO_Gentoo_on_Cygwin old project] may give some solutions where matters get difficult.<br />
So this is a work of progress by nature. If the little pioneer gives up half the way, his experiences should not fully be lost. Hence, here they go in the hope that they may be of use for others that follow his trail.
===Why?===
By running Prefix on Cygwin you get the same runtime environment on Windows that you can also have on Linux or Mac. It brings much more options than a Java runtime environment and it requires less resources than a virtual machine. Additionally you can compile any program yourself by using Gentoos mature emerge installer. Finally all this happens in the userspace and makes you independent from the admin. Nothing compares to this.
==General issue handling==
Before you start with bootstrapping have a look a this general strategies when you run into trouble. Having this strategies in mind will save you a lot of time.
===First aid===
Try this as far as the directories or files are already istalled.
* Assure your Windows editor files are all set to unix format. 
* close open files while emerging
* <code>source ~/bootstrap.rc</code>
* <code>env-update && source ~/gentoo/etc/profile</code>
* <code>hash -r</code>
* Cygwin: rebaseall

===Cygwin and DLLs===
===Rebasing packages===

If you know how to use <code>ldd</code> great! it has been said that DLLs referencing memory lower than about 0x60000000 need to be rebased.

If you start not seeing your files or things start acting funny, close all your Cygwin terminals and do these commands. Try what you were doing again. Then, ask for help.
open a windows command shell (cmd):
<pre>
C:\> path_to_cygwin\bin\ash /bin/rebaseall
</pre>
This only rebases DLL installed with "setup.exe" but, it is good enough to get you started again if you happen to need to wipe your prefix and start over.

Windows/Cygwin have often troubles with memory addresses of moved DLL [[wikipedia:Portable Executable #Relocations|See PE]]. Especially with those of Perl and Python. As you may know emerge uses Python to do its grunt work and will fail if one or more of its libraries have moved without every involved DLL knowing.

The "rebaseall" script was made just for this purpose. It hides the (most) gory details of non-global-offset-style executables <br />


for more information you can look up the readme here:
<pre>
$ less /usr/share/doc/rebase/README
</pre>

====Creating a DLL list for the rebase program====
Create a script to generate <code>rebase.lst</code>.
<pre>
$ MRL='/home/prefix/makeRebaseList.sh'
$ touch $MRL && chmod +x $MRL
$ echo '#/bin/bash' >> $MRL
$ echo 'BASE=/home/prefix' >> $MRL
$ echo 'rm ${BASE}/rebase.lst' >> $MRL
$ echo 'find ${BASE}/gentoo/bin/ -name *.dll -o -name *.so >> ${BASE}/rebase.lst' >> $MRL
$ echo 'find ${BASE}/gentoo/lib/ -name *.dll -o -name *.so >> ${BASE}/rebase.lst' >> $MRL
$ echo 'find ${BASE}/gentoo/usr/bin -name *.dll -o -name *.so >> ${BASE}/rebase.lst' >> $MRL
$ echo 'find ${BASE}/gentoo/usr/lib -name *.dll -o -name *.so >> ${BASE}/rebase.lst' >> $MRL
</pre>

OR
open a new file and put this in it:
(assuming you have a ${BASE} already set in your env)
<pre>
#!/bin/bash

# Note the single bracket redirection in the first line removes the previous file.
find ${BASE}/gentoo/tmp/bin/ -name *.dll -o -name *.so > ${BASE}/rebase.lst
find ${BASE}/gentoo/tmp/lib/ -name *.dll -o -name *.so >> ${BASE}/rebase.lst
find ${BASE}/gentoo/tmp/usr/bin -name *.dll -o -name *.so >> ${BASE}/rebase.lst
find ${BASE}/gentoo/tmp/usr/lib -name *.dll -o -name *.so >> ${BASE}/rebase.lst

#remove these bottom lines after you are finished bootstraping
find ${BASE}/gentoo/tmp/bin/ -name *.dll -o -name *.so >> ${BASE}/rebase.lst
find ${BASE}/gentoo/tmp/lib/ -name *.dll -o -name *.so >> ${BASE}/rebase.lst
find ${BASE}/gentoo/tmp/usr/bin -name *.dll -o -name *.so >> ${BASE}/rebase.lst
find ${BASE}/gentoo/tmp/usr/lib -name *.dll -o -name *.so >> ${BASE}/rebase.lst
</pre>

Running the script:
<pre>
~/makeRebaseList.sh
</pre>
Result:
<pre>
~/rebase.lst
</pre>

====Rebase all with user list====
Use the -T option to set the user list. Open a windows command shell (cmd):
<pre>
C:\> path_to_cygwin\bin\ash /bin/rebaseall -T /home/prefix/rebase.lst
</pre>
or make a [insertmemehere].bat with the above plus PAUSE on the next line.

===Gentoo issues===
====Strategies to debug====
*Emerge packages one-by-one: <code>emerge --oneshot --ask xxx-yyy/zzz</code>
*Execute single emerge steps: <code>ebuild path/to/ebuild [configure|compile|install|merge]</code>
*Go to work directory and try: <code>./configure</code> followed by <code>make</code> and <code>make install</code>.
====QA complaints: explicit EPREFIX but target not found====
Symptom:
<pre>
QA Notice: the following files use invalid (possible non-prefixed) shebangs:
some/path:/shebang/path (explicit EPREFIX but target not found)
</pre>
Reason: This was a [http://bugs.gentoo.org/show_bug.cgi?id=334271 meanwhile fixed bug]. Reason is <code>nano -w /home/prefix/gentoo/usr/lib/portage/bin/misc-functions.sh</code> in function <code>install_qa_check_prefix()</code>:
<pre>
# does the shebang start with ${EPREFIX}, and does it exist?
if [[ ${line[0]} == ${EPREFIX}/* ]] ; then
  if [[ ! -e ${ROOT}${line[0]} && ! -e ${D}${line[0]} ]] ; then                   ## <---- This line. ##
    # hmm, refers explicitly to $EPREFIX, but doesn't exist,
    # if it's in PATH that's wrong in any case
</pre>
Solution: Fabian Groffen writes: Ok, I see, <code>${ROOT%/}</code> is probably the right thing to use here. Same for <code>${D}</code>, should be <code>${D%/}</code>.
====QA complaints: in PATH but target not found====
Symptom:
<pre>
QA Notice: the following files use invalid (possible non-prefixed) shebangs:
some/path:/shebang/path (in PATH but target not found)
...
</pre>
Reason: A package has missing <code>${EPREFIX}</code> in the first line of some bash scripts.<br />
Workaround: Disable death penalty for shebang issues. Interpreters are usually found in PATH.<br />
End of <code>nano -w ~/gentoo/usr/lib/portage/bin/misc-functions.sh</code> function <code>install_qa_check_prefix()</code>:
<pre>
install_qa_check_prefix() {
[...]
#           die "Aborting due to QA concerns: invalid shebangs found"
    fi
}
</pre>
====QA complaints of missing gen_usr_ldscript====
<pre>
* QA Notice: Missing gen_usr_ldscript for libbz2.so
[...]
*      [[
</pre>
Workaround: Disable this quality check. We don't need gen_usr_ldscript at all on windows.<br />
Lines 438 of <code>~/gentoo/usr/lib/portage/bin/misc-functions.sh</code>:
<pre>
# [[ ${abort} == "yes" ]] && die "add those ldscripts"
</pre>
====unable to read SONAME====
Symptom:
<pre>
gen_usr_ldscript: unable to read SONAME from libiconv.so
</pre>
Reason: <code>gen_usr_ldscript</code> doesn't cover cygwin and the default case doesn't work.<br />
Solution: Don't use this for Cygwin. Simply return for now. Edit <code>nano -w /home/prefix/gentoo/usr/portage/eclass/toolchain-funcs.eclass</code> line 518:
<pre>
gen_usr_ldscript() {
   return 0
}
XXXgen_usr_ldscript() {
</pre>
====Collisions====
Sympton: Collisions while installing a package.<br />
Reason: Often a previous installation did break.<br />
Solution:
<pre>
env FEATURES="-collision-protect" CHOST="i686-pc-cygwin" emerge --oneshot --nodeps libiconv
</pre>
====cannot find *.so or *.dll====
Symptom: a package can't find it's library<br />
Reason: On windows shared libraries have to be in PATH.<br />
Solution: Extend the PATH. See [[#extend_PATH_for_shared_libries]] and [[#Profile_setup]].
====Warnings you can ignore====
<pre>
* QA Notice: Package has poor programming practices which may compile
*            fine but exhibit random runtime failures.
* src/pch.c:116: warning: implicit declaration of function "setmode"
</pre>
<pre>
/home/prefix/gentoo/usr/lib/portage/bin/ebuild-helpers/prepstrip: line 98: scanelf: command not found
/home/prefix/gentoo/usr/lib/portage/bin/ebuild-helpers/prepstrip: line 186: scanelf: command not found
</pre>
<pre>
gcc: unrecognized option '-R/home/prefix/gentoo/usr/lib'
gcc: unrecognized option '-R/home/prefix/gentoo/lib'
</pre>
<pre>
[something] seems to ignore the --datarootdir setting
</pre>
==Installing Cygwin==
Cygwin comes with a full featured installer that explains itself. http://www.cygwin.org/setup.exe
===Space and pathes===
Before installing Cygwin consider the pathname. Create a windows user account without whitespace in the username. Not all scripts can handle whitespace in pathes. Have enough free space, minimum 4 GB, take 10 GB if available.<br />
Let's assume you choose "prefix" as username and you install Cygwin on P:\cygwin (mnemo for Prefix Cygwin).
<pre>
Windows perspective: P:\cygwin\home\prefix
Cygwin perspective:  /home/prefix
</pre>
===User and permissions===
Install Cygwin from the same windows account that you will use to run it. This way you avoid some trouble with user permissions and administration.
===Basical packages===
<pre>
gcc4, wget, make, patch, python
</pre>
For fast edits from the shell install an editor of your choice:
<pre>
vim, nano, pico, ... 
</pre>
Install a terminal that supports copy&paste:
<pre>
mintty
</pre>
{{Note|Have a native windows editor available. ALWAYS set format to unix or your scriprts will break mysteriously! For example use [http://notepad-plus-plus.org Notepad++] and in the menu set "Format > Convert to unix".}}
==Initial bootstrapping==
===Walkthrough Part I===
====$BASE, $EPREFIX and $OVERLAY====
Define directories:
<pre>
export BASE=${HOME}
export EPREFIX=${BASE}/gentoo
export OVERLAY=${BASE}/overlay
</pre>
You can play with this.

====.bashrc setup====
To set up your environment write this variables to the bottom of <code>~/.bashrc</code>.

<pre>
$ echo "alias ls='ls -hF --color=tty'"  >> ${HOME}/.bashrc
$ echo "BASE='${BASE}'" >> ${HOME}/.bashrc
$ echo "EPREFIX='${EPREFIX}'" >> ${HOME}/.bashrc
$ echo "OVERLAY='${OVERLAY}'" >> ${HOME}/.bashrc
$ echo 'export PATH="${EPREFIX}/lib:${EPREFIX}/usr/lib:${EPREFIX}/usr/bin:${EPREFIX}/bin:${EPREFIX}/tmp/usr/bin:${EPREFIX}/tmp/bin:/usr/bin:/bin"' >> ${HOME}/.bashrc
</pre>

Then source your newly edited .bashrc
<pre>
$ source ${HOME}/.bashrc
</pre>

====Download bootstrap-prefix.sh====
The initial bootsstrapping is done by bootstrap-prefix.sh. Fetch it and make it executable.
<pre>
$ cd ${BASE} && wget http://rsync8.prefix.bitzolder.nl/hg/prefix-tree/raw-file/default/scripts/bootstrap-prefix.sh
$ chmod +x ${BASE}/bootstrap-prefix.sh
</pre>
====Easy Mode====
run<code>./bootstrap-prefix.sh</code> without any options and it goes into interactive mode doing the hard work for you. If you would like to do it on your own ignore this step. 
====Tree setup====
Setup the Portage tree
<pre>
$ ${BASE}/bootstrap-prefix.sh ${EPREFIX} tree
</pre>

====Portage setup====
Download and install portage
<pre>
$ ${BASE}/bootstrap-prefix.sh ${EPREFIX} portage
</pre>
<code>${EPREFIX}/tmp/etc/make.globals</code> Prepare this file for bootstraping.<br/>
<code>${EPREFIX}/tmp/etc/</code>: Make a symlink named make.profile here to <code>${EPREFIX}/usr/portage/profiles/prefix/windows/cygwin/1.7/x86</code>.<br />
<code>less ${OVERLAY}/profiles/prefix/cygwin/make.defaults</code>: Some values have automatically been added for: <code>CPPFLAGS</code>, <code>LDFLAGS</code>, <code>USE</code>, <code>FEATURES</code>.

====Profile setup====
<pre>
# make sure to be using bash, not zsh, as it doesn't expand the quotes in the following commands correctly
file=${EPREFIX}/etc/make.conf
# Empty the file
$ > $file
echo 'CFLAGS="-O2 -pipe"' >> $file
echo 'CXXFLAGS="${CFLAGS}"' >> $file
echo 'MAKEOPTS="-j3"'     >> $file
# Extend PATH to find libraries on Windows
echo 'DEFAULT_PATH="${DEFAULT_PATH}:'"${EPREFIX}/lib:${EPREFIX}/usr/lib"'"' >> $file
# The base profile sets ACCEPT_KEYWORDS=x86 and we don't have that in prefix.
echo 'ACCEPT_KEYWORDS="-x86 ~x86-linux"'  >> $file
# Fix -R warnings
echo 'LDFLAGS="-L${EPREFIX}/usr/lib -L${EPREFIX}/lib"' >> $file
</pre>
{{Note|There is no RPATH on Windows. See [[http://bugs.gentoo.org/show_bug.cgi?id=336653 Bug 336653]].}}

====Overlay setup====
To customize some ebuilds create an overlay.
<pre>
mkdir -p ${OVERLAY}/profiles
echo "Cygwin overlay" > ${OVERLAY}/profiles/repo_name
mkdir -p ${EPREFIX}/etc
echo "PORTDIR_OVERLAY='${OVERLAY}'" >> ${EPREFIX}/etc/make.conf
</pre>

===Issues===
There are never not issues =)

==Oneshot emergings==
===Walkthrough Part II===
====Cygwin installations====
<code>Run setup.exe</code> to install following packages:
<pre>
* automake (autoconf and perl will be included)
* sources of coreutils
* libiconv
</pre>
====Fix QA complaints====
See: [[#QA_complaints:_explicit_EPREFIX_but_target_not_found]], [[#QA_complaints:_in_PATH_but_target_not_found]], [[#QA_complaints_of_missing_gen_usr_ldscript]]
<pre>
 file=${EPREFIX}/usr/lib/portage/bin/misc-functions.sh

 sed -i 's/${ROOT}${line/${ROOT%\/}${line/' $file
 sed -i 's/${D}${line/${D%\/}${line/' $file

 sed -i 's/\(.*die.*invalid shebangs.*\)/#\1/' $file

 sed -i 's/\(.*add those ldscripts.*\)/#\1/' $file
</pre>
====Disable gen_usr_ldscript====
Edit <code>nano -w ${EPREFIX}/usr/portage/eclass/toolchain-funcs.eclass</code> line 518:
<pre>
gen_usr_ldscript() {
       return 0;
}
XXXgen_usr_ldscript() {
</pre>
====emerge sed====

The magic sauce needed to get emerge to run without bootstrap-prefix.sh is<code>export PYTHONPATH="${EPREFIX}/tmp/usr/lib/portage/pym/"</code> without this you will be left high and dry when you do your emerge.
if you would like to keep your configs out of the ${EPREFIX}/tmp dir then you should set PORTAGE_CONFIGROOT=${EPREFIX}

<pre>
emerge --oneshot sed
</pre>
Here is where you begin filtering your ebuild blockages
You should have done rebaseall after you have installed python. If not do it now to be able to run emerge.<br />
results:
<pre>
bin/sed.exe
</pre>

====emerge ncurses====
the program cmp is needed for ether this build or the previous it is avalable through cygwin as diff-tools?
this particular build also requires a pid command for the tmp/usr/portage/bin/helper-functions.sh script.

<pre>
emerge --oneshot ncurses
</per>
results:
<pre>
usr/lib/libform.a
usr/lib/libform.dll.a
usr/lib/libmenu.a
usr/lib/libmenu.dll.a
usr/lib/libncurses++.a
usr/lib/libncurses.a
usr/lib/libncurses.dll.a
usr/lib/libpanel.a
usr/lib/libpanel.dll.a
</pre>
<pre>
usr/bin/captoinfo.exe -> tic.exe*
usr/bin/clear.exe*
usr/bin/cygform5.dll*
usr/bin/cygmenu5.dll*
usr/bin/cygncurses5.dll*
usr/bin/cygpanel5.dll*
usr/bin/infocmp.exe*
usr/bin/infotocap.exe -> tic.exe*
usr/bin/ncurses5-config*
usr/bin/reset.exe -> tset.exe*
usr/bin/tic.exe*
usr/bin/toe.exe*
usr/bin/tput.exe*
usr/bin/tset.exe*
</pre>

====emerge bash====
<pre>
emerge --oneshot bash
</pre>
results:
<pre>
bin/bash.exe
</pre>
====emerge wget====
<pre>
emerge --oneshot wget
</pre>
results:
<pre>
usr/bin/wget.exe
</pre>
====emerge baselayout-prefix====
<pre>
emerge --oneshot --nodeps baselayout-prefix
</pre>
results:
<pre>
sbin/depscan.sh  
sbin/env-update.sh  
sbin/functions.sh  
sbin/runscript.sh
</pre>
<pre>
etc/env.d/00basic
etc/env.d/99basic
etc/profile
</pre>
====update ~/.bashrc====
Now we source ${EPREFIX}/etc/profile when entering a shell.
<pre>
echo "source ${EPREFIX}/etc/profile" >> ${HOME}/.bashrc
source ${HOME}/.bashrc
</pre>
====extend PATH for shared libries====
In windows shared libraries are searched in PATH.
<pre>
echo "PATH=\"${EPREFIX}/usr/lib:${EPREFIX}/lib:${EPREFIX}/opt/bin:${EPREFIX}/usr/sbin:${EPREFIX}/sbin\"" >> ${EPREFIX}/etc/env.d/00basic
env-update && source ${EPREFIX}/etc/profile
echo "PATH: $PATH"
</pre>
The DEFAULT_PATH has already been set in [[#Profile_setup]]
====emerge xz-utils====
<pre>
emerge --oneshot xz-utils
</pre>
results:
<pre>
usr/lib/liblzma.dll.a
usr/lib/liblzma.la
usr/bin/cyglzma-0.dll
usr/bin/lz*
usr/bin/xz*
</pre>
Note: Only few installed programs have an .exe suffix.
====emerge m4====
<pre>
emerge --oneshot m4
</pre>
results:
<pre>
/usr/bin/m4.exe
</pre>
====emerge flex====
<pre>
emerge --oneshot flex
</pre>
results:
<pre>
usr/bin/flex.exe
usr/bin/lex
usr/lib/libfl.a
usr/lib/libfl_pic.a
usr/include/FlexLexer.h
</pre>
====emerge bison====
<pre>
emerge --oneshot bison
</pre>
results:
<pre>
usr/bin/bison.exe
usr/bin/yacc
usr/bin/yacc.bison
</pre>
====emerge gnuconfig====
<pre>
emerge --oneshot gnuconfig
</pre>
results:
<pre>
usr/share/gnuconfig/config.guess
usr/share/gnuconfig/config.sub
</pre>
====emerge binutils-config====
<pre>
emerge --oneshot --nodeps binutils-config
</pre>
results:
<pre>
usr/bin/binutils-config
usr/lib/misc/binutils-config/binutils-config.h
usr/lib/misc/binutils-config/create-ldwrapper
usr/lib/misc/binutils-config/libbinutils-config.a
</pre>
====emerge binutils====
Check Cygwins libiconv is already installed.
<pre>
ls /usr/lib/libiconv.la && emerge --oneshot binutils
</pre>
results:
<pre>
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/addr2line.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/ar.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/as.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/c++filt.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/dlltool.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/dllwrap.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/elfedit.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/gprof.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/ld.bfd.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/ld.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/nm.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/objcopy.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/objdump.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/ranlib.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/readelf.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/size.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/strings.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/strip.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/windmc.exe
usr/i686-pc-cygwin1.7/binutils-bin/2.20.51.0.8/windres.exe
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/include/ansidecl.h
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/include/bfd.h
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/include/bfdlink.h
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/include/dis-asm.h
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/include/libiberty.h
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/include/symcat.h
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/ldscripts/i386pe.x
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/ldscripts/i386pe.xa
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/ldscripts/i386pe.xbn
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/ldscripts/i386pe.xn
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/ldscripts/i386pe.xr
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/ldscripts/i386pe.xu
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/libbfd.a
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/libbfd.la
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/libiberty.a
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/libopcodes.a
usr/lib/binutils/i686-pc-cygwin1.7/2.20.51.0.8/libopcodes.la
</pre>
====emerge gmp====
<pre>
emerge --oneshot gmp
</pre>
results:
<pre>
usr/include/gmp.h
usr/include/gmpxx.h
usr/lib/libgmp.a
usr/lib/libgmp.la
usr/lib/libgmpxx.a
usr/lib/libgmpxx.la
</pre>
====emerge mpfr====
<pre>
emerge --oneshot mpfr
</pre>
results:
<pre>
usr/include/mpf2mpfr.h
usr/include/mpfr.h
usr/lib/libmpfr.a
usr/lib/libmpfr.la
</pre>
====emerge gcc-config====
<pre>
emerge --oneshot gcc-config
</pre>
results:
<pre>
usr/bin/gcc-config
usr/lib/misc/gcc-config.exe
</pre>
====emerge gcc====
If GCC doesn't emerge here use Cygwins for now and wait for a new version of GCC.
====emerge coreutils====
Check Cygwins <code>automake</code>, <code>autoconf</code>, <code>perl</code> and the sources of <code>coreutils (8.5-2)</code> are already installed.
<pre>
ls /usr/bin/ | grep automake
ls /usr/bin/ | grep autoconf
ls /usr/bin/ | grep perl
</pre>
Create overlay first:
<pre>
mkdir -p ${OVERLAY}/sys-apps/coreutils/
cp ${EPREFIX}/usr/portage/sys-apps/coreutils/coreutils-8.5.ebuild ${OVERLAY}/sys-apps/coreutils/
ln -s ${EPREFIX}/usr/portage/sys-apps/coreutils/files/ ${OVERLAY}/sys-apps/coreutils/files
</pre>
Adapt <code>nano -w ${OVERLAY}/sys-apps/coreutils/coreutils-8.5.ebuild</code>.
<pre>
src_unpack() {
 unpack ${A}
 cd "${S}"
 # apply the cygwin patch
 epatch /usr/src/coreutils-8.5-2.src.patch
 einfo "Running autoreconf:"
 autoreconf
 [... patches go here ... ]
 # disable this interix patch as it conflicts:
 # epatch "${FILESDIR}"/${PN}-8.5-interix-warn-mount.patch
 [... patches go here ... ]
 mkdir -p man/install.td/
 cp /bin/install.exe.manifest man/install.td/install.exe.manifest
 mkdir src
 cp /bin/install.exe.manifest src/ginstall.exe.manifest
 cp /bin/install.exe.manifest ${EPREFIX}/usr/bin/install.exe.manifest
}
</pre>
Alternative use sed expressions for this.
<pre>
file=${OVERLAY}/sys-apps/coreutils/coreutils-8.5.ebuild
# apply the cygwin patch
sed -i '/cd "${S}"/a\\n\tepatch /usr/src/coreutils-8.5-2.src.patch\n\tautoreconf\n' $file
# disable interix patch as it conflicts
sed -i 's/\(.*interix-warn-mount.patch.*\)/#\1/' $file
# install exe.minifests (yes, sed is in reverse order here with intent)
sed -i '/cross-compiler && touch/a\\tcp /bin/install.exe.manifest ${EPREFIX}/usr/bin/install.exe.manifest' $file
sed -i '/cross-compiler && touch/a\\tcp /bin/install.exe.manifest man/install.td/install.exe.manifest' $file
sed -i '/cross-compiler && touch/a\\tcp /bin/install.exe.manifest src/ginstall.exe.manifest' $file
sed -i '/cross-compiler && touch/a\\tmkdir -p man\/install.td/' $file
sed -i '/cross-compiler && touch/a\\n\tmkdir src' $file
</pre>
<br />
<br />
Rebuild the ebuild manifest before emerging:
<pre>
ebuild ${OVERLAY}/sys-apps/coreutils/coreutils-8.5.ebuild digest
emerge --oneshot coreutils
</pre>
Make sure you run <code>hash -r</code> in your active shells when done.<br />
results:
<pre>
bin/basename.exe
bin/cat.exe
bin/chgrp.exe
bin/chmod.exe
bin/chown.exe
bin/chroot.exe
bin/cp.exe
bin/cut.exe
bin/date.exe
bin/dd.exe
bin/df.exe
bin/dir.exe
bin/dirname.exe
bin/du.exe
bin/echo.exe
bin/env.exe
bin/expr.exe
bin/false.exe
bin/head.exe
bin/ln.exe
bin/ls.exe
bin/mkdir.exe
bin/mkfifo.exe
bin/mknod.exe
bin/mktemp.exe
bin/mv.exe
bin/pwd.exe
bin/readlink.exe
bin/rm.exe
bin/rmdir.exe
bin/seq.exe
bin/sleep.exe
bin/sort.exe
bin/stty.exe
bin/sync.exe
bin/tail.exe
bin/touch.exe
bin/tr.exe
bin/true.exe
bin/tty.exe
bin/uname.exe
bin/vdir.exe
bin/wc.exe
bin/yes.exe
</pre>
<pre>
usr/bin/arch.exe
usr/bin/base64.exe
usr/bin/basename
usr/bin/chcon.exe
usr/bin/chroot
usr/bin/cksum.exe
usr/bin/comm.exe
usr/bin/csplit.exe
usr/bin/cut
usr/bin/dir
usr/bin/dircolors.exe
usr/bin/dirname
usr/bin/du
usr/bin/env
usr/bin/expand.exe
usr/bin/expr
usr/bin/factor.exe
usr/bin/fmt.exe
usr/bin/fold.exe
usr/bin/head
usr/bin/hostid.exe
usr/bin/id.exe
usr/bin/install.exe
usr/bin/join.exe
usr/bin/link.exe
usr/bin/logname.exe
usr/bin/md5sum.exe
usr/bin/mkfifo
usr/bin/mktemp
usr/bin/nice.exe
usr/bin/nl.exe
usr/bin/nohup.exe
usr/bin/nproc.exe
usr/bin/od.exe
usr/bin/paste.exe
usr/bin/pathchk.exe
usr/bin/pinky.exe
usr/bin/pr.exe
usr/bin/printenv.exe
usr/bin/printf.exe
usr/bin/ptx.exe
usr/bin/readlink
usr/bin/runcon.exe
usr/bin/seq
usr/bin/sha1sum.exe
usr/bin/sha224sum.exe
usr/bin/sha256sum.exe
usr/bin/sha384sum.exe
usr/bin/sha512sum.exe
usr/bin/shred.exe
usr/bin/shuf.exe
usr/bin/sleep
usr/bin/sort
usr/bin/split.exe
usr/bin/stat.exe
usr/bin/sum.exe
usr/bin/tac.exe
usr/bin/tail
usr/bin/tee.exe
usr/bin/test.exe
usr/bin/timeout.exe
usr/bin/touch
usr/bin/tr
usr/bin/truncate.exe
usr/bin/tsort.exe
usr/bin/tty
usr/bin/uname
usr/bin/unexpand.exe
usr/bin/uniq.exe
usr/bin/unlink.exe
usr/bin/users.exe
usr/bin/vdir
usr/bin/wc
usr/bin/who.exe
usr/bin/whoami.exe
usr/bin/yes
usr/bin/[.exe
</pre>
====emerge findutils====
<pre>
emerge --oneshot findutils
</pre>
results:
<pre>
usr/bin/find.exe
usr/bin/oldfind.exe
usr/bin/xargs.exe
</pre>
====emerge tar====
<pre>
emerge --oneshot tar
</pre>
results:
<pre>
bin/tar.exe
usr/bin/gtar
usr/sbin/backup-tar
usr/sbin/backup.sh
usr/sbin/dump-remind
usr/sbin/restore-tar
usr/sbin/rmt.exe
</pre>
====emerge grep====
<pre>
emerge --oneshot grep
</pre>
results:
<pre>
bin/egrep.exe
bin/fgrep.exe
bin/grep.exe
</pre>
====emerge patch====
<pre>
cp /bin/patch.exe.manifest /home/prefix/gentoo/usr/bin/
emerge --oneshot patch
</pre>
results:
<pre>
usr/bin/patch.exe
usr/bin/patch.exe.manifest
</pre>
====emerge gawk====
Create overlay first:
<pre>
mkdir -p ${OVERLAY}/sys-apps/gawk/
cp ${EPREFIX}/usr/portage/sys-apps/gawk/gawk-3.1.7.ebuild ${OVERLAY}/sys-apps/gawk/
ln -s ${EPREFIX}/usr/portage/sys-apps/gawk/files/ ${OVERLAY}/sys-apps/gawk/files
</pre>
Comment out filefuncs in <code>nano -w ${OVERLAY}/sys-apps/gawk/gawk-3.1.7.ebuild</code>.
<pre>
# cp -r "${FILESDIR}"/filefuncs "${SFFS}" || die "cp failed"
</pre>
Rebuild the manifest before emerging:
<pre>
ebuild ${OVERLAY}/sys-apps/gawk/gawk-3.1.7.ebuild digest
env FEATURES="-collision-protect" emerge --oneshot gawk
</pre>
results:
<pre>
bin/awk -> 
bin/gawk ->
bin/igawk ->
bin/pgawk ->
bin/gawk-3.1.7.exe
bin/pgawk-3.1.7.exe
usr/bin/awk ->
usr/bin/gawk ->
usr/bin/igawk ->
usr/bin/pgawk ->
usr/bin/igawk-3.1.7
usr/bin/pgawk-3.1.7.exe
usr/include/awk/awk.h
usr/include/awk/config.h
usr/include/awk/custom.h
usr/include/awk/dfa.h
usr/include/awk/floatmagic.h
usr/include/awk/getopt.h
usr/include/awk/getopt_int.h
usr/include/awk/gettext.h
usr/include/awk/hard-locale.h
usr/include/awk/mbsupport.h
usr/include/awk/protos.h
usr/include/awk/random.h
usr/include/awk/regex.h
usr/include/awk/regex_internal.h
usr/lib/misc/awk/grcat.exe
usr/lib/misc/awk/pwcat.exe
</pre>
====emerge make====
<pre>
emerge --oneshot make
</pre>
results:
<pre>
usr/bin/gmake.exe
usr/bin/make ->
</pre>
====emerge file====
<pre>
emerge --oneshot --nodeps file
</pre>
results:
<pre>
usr/bin/cygmagic-1.dll
usr/bin/file.exe
usr/include/magic.h 
usr/lib/libmagic.a
usr/lib/libmagic.dll.a
usr/lib/libmagic.la
</pre>
====emerge eselect====
<pre>
emerge --oneshot eselect
</pre>
results:
<pre>
usr/bin/bashcomp-config
usr/bin/eselect
usr/bin/kernel-config
usr/bin/profile-config
usr/bin/rc-config
usr/share/eselect/libs/*.bash
usr/share/eselect/modules/*.eselect
</pre>
====emerge pax-utils====
<pre>
emerge --oneshot pax-utils
</pre>
results:
<pre>
usr/bin/dumpelf.exe
usr/bin/lddtree
usr/bin/pspax.exe
usr/bin/scanelf.exe
usr/bin/scanmacho.exe
usr/bin/symtree
</pre>
===Issues===
====bash: missing curses====
Symptom: When calling <code>emerge --oneshot --nodeps bash</code> emerge dies.<br />
Reason: Missing curses.<br />
Solution 1: install with dependencies<br />
<pre>
emerge --oneshot --ask bash
</pre>
This will emerge ncurses first.<br />
Solution 2: Install Cygwins <code>libncurses-devel</code>.
====binutils: missing libiconv.la====
When calling <code>emerge --oneshot --nodeps binutils</code> emerge dies:
<pre>
libtool: link: '/usr/lib/libiconv.la' is not a valid libtool archive
</pre>
Reason: Only the runtime of <code>libiconv</code> is installed .<br />
Solution: Install Cygwins <code>libiconv</code>.
{{Note|To emerge <code>libiconv</code> first is possible but it isn't found. The Cygwin <code>libintl.la</code> is linked against <code>/usr/lib/libiconv.la</code> and it is to early to emerge <code>gettext</code> which contains <code>libintl.la</code>.}}
====gcc: missing gmp and mpfr====
Symptom: When calling <code>emerge --oneshot --nodeps gcc</code> emerge dies:
<pre>
GCC requires GMP 4.1+ and MPFR 2.3.2+
</pre>
Reason: Only the runtimes are installed.<br />
Solution: Install Cygwins <code>libgmp-devel</code> and <code>libmpfr-devel</code>.
Solution 2: Emerge libraries before.
<pre>
emerge --oneshot --ask mpfr
</pre>
====gcc: libstdc++-v3 breaks====
Symptom: It always breaks during compilation of libstdc++-v3.<br />
Reason: Unknown. This bug solved in later versions.<br />
Solution: Simply use Cygwins GCC for initial bootstrapping.<br />
====coreutils: Permission denied====
Symptom: When calling <code>emerge --oneshot coreutils</code> emerge dies:
<pre>
./ginstall ginstall.exe '/home/prefix/gentoo/var/tmp/portage/sys-apps/coreutils-8.5/image//home/prefix/gentoo/usr/bin/./install.exe'
/usr/bin/bash: line 18: ./ginstall: Permission denied
</pre>
Dies with a similar message, when creating installs manpage.<br />
Reason: This is due to windows user account control (UAC) on newer machines.<br />
Solution: The solution is to put a manifest into the directory of the install binary.
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
 <assemblyIdentity version="1.0.0.0" 
    processorArchitecture="X86"
    name="Cygwin.coreutils.install"
    type="win32"/>
 <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
   <security>
     <requestedPrivileges>
       <requestedExecutionLevel level="asInvoker" uiAccess="false"/>
     </requestedPrivileges>
   </security>
 </trustInfo>
</assembly>
</pre>
You can copy it from <code>/usr/bin/install.exe.manifest</code>. But how to get it into the directory when <code>.../work/...</code> is deletet at the beginning of emerge? Adapt <code>~/gentoo/usr/portage/sys-apps/coreutils/coreutils-8.5.ebuild </code>function <code>src_unpack</code>.<br />
All in all you have to copy the manifest into three places:
<pre>
src_upack {
 unpack ${A}
 cd "${S}"
 [... patches go here ... ]
 mkdir -p man/install.td/
 cp /usr/bin/install.exe.manifest man/install.td/install.exe.manifest
 mkdir src
 cp /usr/bin/install.exe.manifest src/ginstall.exe.manifest
 cp /usr/bin/install.exe.manifest /home/prefix/gentoo/usr/bin/install.exe.manifest
 [...]  
}
</pre>
Mind the "g" of <code>src/ginstall.exe.manifest</code>.<br />
Rebuild the ebuild manifest:
<pre>
ebuild ~/gentoo/usr/portage/sys-apps/coreutils/coreutils-8.5.ebuild digest
</pre>
====coreutils: missing perl====
Symptom: When calling <code>emerge --oneshot coreutils</code> emerge dies:
<pre>
perl is needed and is missing at your system
</pre>
Solution: Install Cygwins perl
====coreutils: breaks following emergings====
Symptom: After emerging of coreutils succeeding emergings break. The files <code>config.status</code> get corrupted during generation.<br />
This is reproducable. Tested with wget. config.status is partly truncated and partly out of order. The file is always broken in exactly the same way.<br />
Reason: unknown
<pre>
Solution: Attach the cygwin patch.
1.) install Cygwins sources of coreutils
2.) install Cygwins autoconf
3.) install Cygwins automake
4.) adapt the ebuild
5.) rebuild the manifest
</pre>
Adapt <code>~/gentoo/usr/portage/sys-apps/coreutils/coreutils-8.5.ebuild</code> function <code>src_unpack</code>.
<pre>
src_unpack() {
 unpack ${A}
 cd "${S}"
 epatch /usr/src/coreutils-8.5-2.src.patch
 einfo "Running autoreconf:"
 autoreconf
 [...]  
 # Disable this interix patch as it conflicts:
 # epatch "${FILESDIR}"/${PN}-8.5-interix-warn-mount.patch
}
</pre>
Rebuild the ebuild manifest:
<pre>
ebuild ~/gentoo/usr/portage/sys-apps/coreutils/coreutils-8.5.ebuild digest
</pre>
====patch: Permission denied====
Symptom: After compiling patch with <code>emerge --oneshot patch</code> you can't emerge any more because patching doesn't work.<br />
Reason: This is due to windows user account control (UAC) on newer machines.<br />
Solution: Put a manifest into the directory of the patch binary.
<pre>
cp /bin/patch.exe.manifest /home/prefix/gentoo/tmp/usr/bin/
cp /bin/patch.exe.manifest /home/prefix/gentoo/usr/bin/
</pre>
See coreutils for how to put it to the ebuild.
====gawk-3.1.7: [filefuncs.so.0.0.1] Error 1====
Symptom: While <code>emerge --oneshot gawk</code> emerge dies:
<pre>
i686-pc-cygwin-gcc -L/home/prefix/gentoo/usr/lib -R/home/prefix/gentoo/usr/lib -L/home/prefix/gentoo/lib -R/home/prefix/gentoo/lib -o filefuncs.so.0.0.1 -shared -Wl,-soname -Wl,filefuncs.so.0 filefuncs.o
filefuncs.o:filefuncs.c:(.text+0x1e): undefined reference to `_make_builtin'
[...]
filefuncs.o:filefuncs.c:(.text+0x10f1): undefined reference to `_update_ERRNO'
collect2: ld returned 1 exit status
make: *** [filefuncs.so.0.0.1] Error 1
</pre>
Reason: Gentoos filefuncs handling [http://www.gossamer-threads.com/lists/gentoo/user/217515 Understanding the details]<br />
Workaround: Comment out filefuncs in <code>ebuild ~/gentoo/usr/portage/sys-apps/gawk/gawk-3.1.7.ebuild</code>.
<pre>
# cp -r "${FILESDIR}"/filefuncs "${SFFS}" || die "cp failed"
</pre>
Mind to update the digest manifest.
