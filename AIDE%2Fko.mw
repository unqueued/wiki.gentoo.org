<languages />


{{Metadata|abstract=AIDE는 고급 침입 탐지 환경을 의미하며, 파일과 다른 자원을 검사하고, 이 파일에 대한 정보를 데이터베이스에 저장하는 프로그램입니다. 시스템을 다시 검사하면 (가능한한 원하지 않는) 수정사항을 인증하고 이러한 문제를 보고할 수 있습니다.}}

== AIDE ==

AIDE는 "고급 침입 탐지 환경"을 의미하며, 파일과 다른 자원을 검사하고, 이 파일에 대한 정보를 데이터베이스에 저장하는 프로그램입니다. 여기서 언급하는 정보에는 해시 정보, 파일 크기, 소유자 등이 있습니다. 프로그램에서는 데이터베이스를 활성화하고, 시스템을 다시 검사하며 이전에 저장한값과 결과를 비교합니다. 값이 다르면, 파일을 바꾸고 바뀐 내용을 보고합니다.

=== Installation and configuration ===

젠투에서는 USE 플래그를 설정한 다음에 '''aide'''를 쉽게 설치할 수 있습니다. 이때 지원하는 USE 플래그는 다음과 같습니다:

{{USEflag|package=app-forensics/aide
|acl
|audit++yes
|curl
|mhash++yes
|nls++yes
|postgres
|prelink
|selinux
|static
|xattr++yes
|zlib++yes
}}

그리고 프로그램을 설치하는 방법은:

{{Emerge|app-forensics/aide}}

''aide'' 프로그램에 대한 설정 파일은 처음에 보신 바와 같이 주눅들게 하지는 않습니다. 기본 파일은 {{Path|/etc/aide/aide.conf}}에 있지만 원할 경우 설정 파일을 따로 분리하여 여러개를 쉽게 만들 수 있습니다. 몇가지 변수에 따라, 설정 파일에는 파일의 어떤 특징을 검사할지(해시만 검사할거냐, inode 정보 등까지 할것이냐)와 어떤 파일을 검사할지에 대한 간단한 표기내용이 들어있습니다.

일단 먼저 변수를 들여다보도록 하겠습니다.

{{File|aide.conf|변수|<pre>
database=file:/var/lib/aide/aide.db
database_out=file:/var/lib/aide/aide.db.new
</pre>}}

이 매개변수는 알려진 값("database")이 들어있는 데이터베이스를 어디에 저장할지 새로운 데이터베이스를 만든다면 어디에 만들어 저장할지("database_out")에 대한 정보기 들어있습니다. 보통 이 변수들이 같은 곳을 가리키지 않도록 하고, 대신 한 위치에서 다른 위치로 생성한 데이터베이스를 직접 복사하는것을 추천합니다.

이제, 이 변수값을 그대로 내버려두고, 나중에 다시 살펴보기로 하겠습니다.

{{File|aide.conf|간단한 표기|<pre>
Binlib = p+i+n+u+g+s+b+m+c+md5+sha1
Logs = p+i+n+u+g+S
...
</pre>}}

무얼 확인할지에 대한 간단한 표기 사항이 있습니다. 각 문자에 대해서는  기본 {{Path|aide.conf}} 파일에 설명되어 있으므로, 이 내용을 전부 문서화 하지 않고, 몇가지 내용에 대해서만 알려드리도록 하겠습니다.  '''p'''는 권한(permissions), '''i'''는 inode 번호, '''n'''은 (강)연결 갯수, '''u'''는 사용자 정보, '''g'''는 그룹 정보, '''s'''는 파일 크기(또는 '''S'''를 표기하기도 하는데 파일 크기가 늘어나는 것보단 줄어드는 것을 허용하지 않을 경우), '''b'''는 블록 갯수, '''m'''은 수정 시간 등이며, 추측하실 바와 같이 '''md5'''나 '''sha-1'''는 MD5와 SHA-1 체크섬을 의미합니다.

이러한 간단한 표기 사항은 각 파일을 검사하기 위해 어떤 요소를 확인하는데 사용합니다. 

{{File|aide.conf|scan targets|<pre>
/bin Binlib
/sbin Binlib
/var/log Logs
...
</pre>}}

This is the overview of which directories to scan, and what to scan for. In the above three lines example, we tell AIDE to scan the {{Path|/bin}} and {{Path|/sbin}} locations and take the measures identified earlier in the ''Binlib'' short-hand notation. The {{Path|/var/log}} location should use the ''Logs'' scan measures.

AIDE supports regular expressions and you are allowed to "remove" matches. For instance, if you want to scan {{Path|/var/log}} but not {{Path|/var/log/portage}} then you can include an exclusion set as well:

{{File|aide.conf|other scan targets|<pre>
/var/log Logs
!/var/log/portage
</pre>}}

=== Initialization and frequent scanning ===

First we need to initialize the database once. 

{{RootCmd|aide --init --config{{=}}/etc/aide/aide.conf|output=<pre>
AIDE, version 0.14.2
  
### AIDE database at /var/lib/aide/aide.db.new initialized.
</pre>}}

Once initialized, we can copy over the database file.

{{RootCmd|cd /var/lib/aide; cp aide.db.new aide.db}}

With the database now available, we can scan the entries again for potential modifications:

{{RootCmd|aide --check --config{{=}}/etc/aide/aide.conf|output=<pre>
AIDE, version 0.14.2
  
### All files match AIDE database. Looks okay!
</pre>}}

When a file modification is occurred, you will get a notification:

{{RootCmd|aide --check --config{{=}}/etc/aide/aide.conf|output=<pre>
AIDE found differences between database and filesystem!!
Start timestamp: 2013-04-11 15:31:02
  
Summary:
  Total number of files:        318
  Added files:                  0
  Removed files:                0
  Changed files:                2
  
  
---------------------------------------------------
Changed files:
---------------------------------------------------
  
changed: /etc/pam.d
changed: /etc/pam.d/run_init
  
---------------------------------------------------
Detailed information about changes:
---------------------------------------------------
  
  
Directory: /etc/pam.d
  Mtime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:01
  Ctime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:01
  
File: /etc/pam.d/run_init
  Size     : 205                              , 208
  Mtime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:00
  Ctime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:01
  Inode    : 394203                           , 394053
  MD5      : Mm0KPzpPt63eqGClTJ/KaQ==         , eLUrP2BsIq25f3AZX+dlBA==
  SHA1     : NrQtsUeOsXS4RHUq+ejYBne5V6E=     , 5A6ef6VJCcMiqEjKQ7e9xkBNZB8=
</pre>}}

== Best Practices ==

=== Be clear with what to scan ===

The default AIDE configuration is useful, but you'll need to fine-tune it to suit your needs. It is important to know which files to scan and why.

For instance, if you want to scan for all authentication-related files but not for other files, you can use a configuration like so:

{{File|aide.conf|authentication-related scan targets|<pre>
# SELinux policy and settings
/etc/selinux ConfFiles
# Authentication databases
/etc/passwd ConfFiles
/etc/shadow ConfFiles
/etc/nsswitch.conf ConfFiles
# Authentication configuration
/etc/pam.d ConfFiles
/etc/securetty ConfFiles
/etc/security ConfFiles
# PAM libraries
/lib(64)?/security Binlib
</pre>}}

=== Keep the database offline and read-only ===

A second important aspect is that you really want the result database to be stored off-line when you don't need it, and use it in read-only modus when you do. This gives some protection against a malicious user, that might already have compromised the machine, to also modify the results database. For instance, you can provide the result database on a read-only NFS mount (for servers) or read-only medium (when you have physical access to the machine) such as CD/DVD or read-only USB sticks.

When you have the database on such location, update the {{Path|aide.conf}} file to have ''database='' point to this new location.

=== Do offline scanning ===

If you can, try using offline scanning methods for the system. In case of virtual platforms, you might be able to take a snapshot of the system, mount this snapshot (read-only) and then run the aide scan on the mounted file system.

{{RootCmd|losetup /dev/loop0 /srv/virt/gentoo.img
|vgscan
|vgchange -ay
|mount -o ro /dev/volgrpX/volumeY /mnt/image
|chroot /mnt/image
|aide --check --config{{=}}/path/to/aide.conf
|exit
|umount /mnt/image
|vgchange -an /dev/volgrpX
|losetup -d /dev/loop0}}

The above approach uses a chroot. This is only needed when the initial file system has been scanned from the live system and you want to perform an offline validation. If you did your initial scan offline, then your {{Path|aide.conf}} will point to the mount point already and the database will use these paths immediately, so then you do not have the need for chrooting.

== More information ==

* [[Integrity/Concepts]] talks about the concepts related to system integrity


[[Category:Server and Security]]
