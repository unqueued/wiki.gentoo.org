<languages />


{{Metadata|abstract=AIDE는 고급 침입 탐지 환경을 의미하며, 파일과 다른 자원을 검사하고, 이 파일에 대한 정보를 데이터베이스에 저장하는 프로그램입니다. 시스템을 다시 검사하면 (가능한한 원하지 않는) 수정사항을 인증하고 이러한 문제를 보고할 수 있습니다.}}

== AIDE ==

AIDE는 "고급 침입 탐지 환경"을 의미하며, 파일과 다른 자원을 검사하고, 이 파일에 대한 정보를 데이터베이스에 저장하는 프로그램입니다. 여기서 언급하는 정보에는 해시 정보, 파일 크기, 소유자 등이 있습니다. 프로그램에서는 데이터베이스를 활성화하고, 시스템을 다시 검사하며 이전에 저장한값과 결과를 비교합니다. 값이 다르면, 파일을 바꾸고 바뀐 내용을 보고합니다.

=== 설치 및 설정 ===

젠투에서는 USE 플래그를 설정한 다음의 <tt>aide</tt> 설치과정은 쉽습니다. 이때 지원하는 USE 플래그는 다음과 같습니다:

{{USEflag|package=app-forensics/aide
|acl
|audit++yes
|curl
|mhash++yes
|nls++yes
|postgres
|prelink
|selinux
|static
|xattr++yes
|zlib++yes
}}

그리고 프로그램을 설치하는 방법은:

{{Emerge|app-forensics/aide}}

<tt>aide</tt> 프로그램에 대한 설정 파일은 처음에 보신 바와 같이 주눅들게 하지는 않습니다. 기본 파일은 {{Path|/etc/aide/aide.conf}}에 있지만 원할 경우 설정 파일을 따로 분리하여 여러개를 쉽게 만들 수 있습니다. 몇가지 변수에 따라, 설정 파일에는 파일의 어떤 특징을 검사할지(해시만 검사할지, inode 정보 등까지 검사할지)와 어떤 파일을 검사할지에 대한 간단한 표기내용이 들어있습니다.

일단 먼저 변수를 들여다보도록 하겠습니다.

{{FileBox|filename=aide.conf|title=변수|1=
database=file:/var/lib/aide/aide.db
database_out=file:/var/lib/aide/aide.db.new
}}

이 매개변수는 알려진 값(<code>database</code>)이 들어있는 데이터베이스를 어디에 저장할지 새로운 데이터베이스를 만들었을 때 어디에 저장할지(<code>database_out</code>)에 대한 정보가 들어있습니다. 보통 이 변수들이 같은 곳을 가리키지 않도록 하고, 대신 한 위치에서 다른 위치로 생성한 데이터베이스를 직접 복사하는것을 추천합니다.

이제, 이 변수값을 그대로 내버려두고, 나중에 다시 살펴보기로 하겠습니다.

{{FileBox|filename=aide.conf|title=간단한 표기|lang=ini|1=
Binlib = p+i+n+u+g+s+b+m+c+md5+sha1
Logs = p+i+n+u+g+S
...
}}

확인할 요소에 대한 간단한 표기법이 있습니다. 각 문자에 대해서는  기본 {{Path|aide.conf}} 파일에 설명되어 있지만, 다음 테이블을 통해 일반적으로 사용하는 방법을 간단히 살펴보도록 하겠습니다.

{| class="table"
! 약자
! 설명
|-
| <code>p</code>
| 퍼미션
|-
| <code>i</code>
| inode 번호
|-
| <code>n</code>
| (하드)링크 갯수
|-
| <code>u</code>
| 사용자 정보
|-
| <code>g</code>
| 그룹 정보
|-
| <code>s</code>
| 크기
|-
| <code>S</code>
| 크기 (커지는건 상관 없음 - 갑자기 작아질때만 보고함)
|-
| <code>b</code>
| 블록 갯수
|-
| <code>m</code>
| 실행 횟수
|}

또한 <code>md5</code>와 <code>sha1</code>는 각각 MD5 체크섬과 SHA-1 체크섬을 취한다는 점을 분명히 의미합니다.

이러한 간단한 표기 사항은 각 파일을 검사하기 위해 어떤 요소를 확인하는데 사용합니다. 

{{FileBox|filename=aide.conf|title=scan targets|1=
/bin Binlib
/sbin Binlib
/var/log Logs
...
}}

This is the overview of which directories to scan, and what to scan for. In the above three lines example, we tell AIDE to scan the {{Path|/bin}} and {{Path|/sbin}} locations and take the measures identified earlier in the <code>Binlib</code> short-hand notation. The {{Path|/var/log}} location should use the <code>Logs</code> scan measures.

AIDE supports regular expressions and users are allowed to "remove" matches. For instance, to scan {{Path|/var/log}} but not {{Path|/var/log/portage}} then include an exclusion set like so:

{{FileBox|filename=aide.conf|title=other scan targets|1=
/var/log Logs
!/var/log/portage
}}

=== 초기화 및 잦은 검사 ===

먼저 데이터베이스를 한번 초기화해야 합니다. 

{{RootCmd|aide --init --config{{=}}/etc/aide/aide.conf|output=<pre>
AIDE, version 0.14.2
  
### AIDE database at /var/lib/aide/aide.db.new initialized.
</pre>}}

초기화를 하고 나면, 데이터베이스 파일을 다른곳으로 복사할 수 있습니다.

{{RootCmd|cd /var/lib/aide; cp aide.db.new aide.db}}

이제 데이터베이스를 사용할 수 있으므로, 잠재적인 수정 사항을 다시 검사할 수 있습니다:

{{RootCmd|aide --check --config{{=}}/etc/aide/aide.conf|output=<pre>
AIDE, version 0.14.2
  
### All files match AIDE database. Looks okay!
</pre>}}

When a file modification occurred, a notification will be sent out:

{{RootCmd|aide --check --config{{=}}/etc/aide/aide.conf|output=<pre>
AIDE found differences between database and filesystem!!
Start timestamp: 2013-04-11 15:31:02
  
Summary:
  Total number of files:        318
  Added files:                  0
  Removed files:                0
  Changed files:                2
  
  
---------------------------------------------------
Changed files:
---------------------------------------------------
  
changed: /etc/pam.d
changed: /etc/pam.d/run_init
  
---------------------------------------------------
Detailed information about changes:
---------------------------------------------------
  
  
Directory: /etc/pam.d
  Mtime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:01
  Ctime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:01
  
File: /etc/pam.d/run_init
  Size     : 205                              , 208
  Mtime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:00
  Ctime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:01
  Inode    : 394203                           , 394053
  MD5      : Mm0KPzpPt63eqGClTJ/KaQ==         , eLUrP2BsIq25f3AZX+dlBA==
  SHA1     : NrQtsUeOsXS4RHUq+ejYBne5V6E=     , 5A6ef6VJCcMiqEjKQ7e9xkBNZB8=
</pre>}}

== 모범 사례 ==

=== 검사 대상을 확실히 하십시오 ===

The default AIDE configuration is useful, but it needs to be fine-tuned to suit the users' needs. It is important to know which files to scan and why.

For instance, to scan for all authentication-related files but not for other files, use a configuration like so:

{{FileBox|filename=aide.conf|title=authentication-related scan targets|1=
# SELinux policy and settings
/etc/selinux ConfFiles
# Authentication databases
/etc/passwd ConfFiles
/etc/shadow ConfFiles
/etc/nsswitch.conf ConfFiles
# Authentication configuration
/etc/pam.d ConfFiles
/etc/securetty ConfFiles
/etc/security ConfFiles
# PAM libraries
/lib(64)?/security Binlib
}}

=== 데이터베이스를 오프라인 상태 및 읽기 전용으로 유지하십시오 ===

A second important aspect is that the result database should be stored off-line when not needed, and use it in read-only modus when the database is needed. This gives some protection against a malicious user, that might already have compromised the machine, to also modify the results database. For instance, provide the result database on a read-only NFS mount (for servers) or read-only medium (when physical access to the machine is possible) such as CD/DVD or read-only USB sticks.

After storing the database on such location, update the {{Path|aide.conf}} file to have <code>database=</code> point to this new location.

=== 오프라인 상태에서 검사하십시오 ===

If applicable, try using offline scanning methods for the system. In case of virtual platforms, it might be possible to take a snapshot of the system, mount this snapshot (read-only) and then run the aide scan on the mounted file system.

{{RootCmd|losetup /dev/loop0 /srv/virt/gentoo.img
|vgscan
|vgchange -ay
|mount -o ro /dev/volgrpX/volumeY /mnt/image
|chroot /mnt/image
|aide --check --config{{=}}/path/to/aide.conf
|exit
|umount /mnt/image
|vgchange -an /dev/volgrpX
|losetup -d /dev/loop0}}

The above approach uses a chroot. This is only needed when the initial file system has been scanned from the live system and the administrator wants to perform an offline validation. If the initial scan was done offline, then the {{Path|aide.conf}} file will point to the mount point already and the database will use these paths immediately, so then there is no need for chrooting.

== See also ==

* [[Integrity/Concepts]]  에서는 시스템 무결성과 관련한 개념을 다룹니다


[[Category:Server and Security]]
