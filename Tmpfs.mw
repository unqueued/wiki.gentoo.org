<languages />
<translate>

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

==Introduction==

'''tmpfs''' ('''t'''e'''mp'''orary '''f'''ile '''s'''ystem) is a virtual [[filesystem]] to store files in memory. 

{{Important|The volatile memory can't keep the files after shutdown, reboot or crash. Only store recoverable files in tmpfs.}}

In GNU/Linux ramfs ('''r'''andom '''a'''ccess '''m'''emory '''f'''ile '''s'''ystem) has been replaced by tmpfs as the old ramfs did not handle well when the system run out of memory. tmpfs allows the filesystem to grow dynamically when it needs more space until it hits the pre-set maximum value it has been allocated; after that it will use swap space if it is available.

There are many ways and many things we can use the temporary file system in GNU/Linux, one being the {{Path|/tmp}} directory which does not need to physically store non-volatile data. It doesn't matter that this data is wiped out after a reboot as you are booting up a new session which will be creating and writing new cache data and so on into the {{Path|/tmp}} directory.

{{Important|If you use systemd to boot instead of OpenRC your {{Path|/tmp}} directory is mounted by default as a tmpfs, see section below on systemd to either disable this and mount it manually in {{Path|/etc/fstab}}.}}

== Installation ==
You need to activate the following kernel options:
{{KernelBox|1=
File systems  --->
     Pseudo filesystems  --->
          [*] Tmpfs virtual memory file system support (former shm fs)
          [ ] Optional drivers
}}

{| class="table"
|+ Optional drivers
|-
! Option
! Description
|-
| Tmpfs POSIX Access Control Lists
| Enable [[Wikipedia:Access control list#Filesystem ACLs|ACL]] permissions.
|-
| Tmpfs extended attributes
| Enable metadata support.
|}

=== Usage ===
Generation and mounting of tmpfs in one step: 
{{RootCmd|mount -t tmpfs tmpfs /MOUNTPOINT}}

You can specify the mount option ''size'' to control the maximum size of the filesystem (default: half of your memory). Note that tmpfs doesn't reserve this memory, but allocates only the needed memory.


===systemd===

When using systemd the {{Path|/tmp}} directory is mounted by default as tmpfs and given a default size which is deemed big enough for your usage but not so big it will chew up too much RAM.

You can view mounted temporary filesystems using the following command:

{{RootCmd|findmnt --target /tmp}}

This will show you if the {{Path|/tmp}} mount-point is a tmpfs filesystem and will show you the set size of said filesystem.

If you want to disable this and take back control of the directory and have it controlled through your {{Path|/etc/fstab}} then we can do this by disabling the automatic mount from systemd and adding it to our {{Path|/etc/fstab}}.

{{RootCmd|systemctl mask tmp.mount}}
This command will now not mount {{Path|/tmp}} as a tmpfs and will automatically default back to your block device i.e. your HDD/SSD. We can now add a new line in our {{Path|/etc/fstab}} which will create a tmpfs for {{Path|/tmp}} manually.

{{FileBox|filename=/etc/fstab|title=tmpfs fstab example|1=
tmpfs /tmp tmpfs rw,nosuid,noatime,nodev,size=4G,mode=1777 0 0
}}

===OpenRC===

OpenRC is the same as for systemd only we omit having to disable systemd from mounting the {{Path|/tmp}} directory manually. This means it is as simple as adding the mount point into your {{Path|/etc/fstab}}.

{{FileBox|filename=/etc/fstab|title=tmpfs fstab example|1=
tmpfs /tmp tmpfs rw,nosuid,noatime,nodev,size=4G,mode=1777 0 0
}}

===Other directories to consider===

Here are a few other directories the user may mount as a tmpfs in order to boost the system performance.
Use the {{c|findmnt}} command to check if they are already use tmpfs before you attempt to manually mount them in {{Path|/etc/fstab}}.

{{RootCmd|findmnt --target /<directory-to-check>}}

{| class="table table-striped table-condensed"
|-
! Directory !! Purpose
|-
| {{|{{Path|/run}}  || Run-time variable data. Information about the running system since last boot, e.g., currently logged-in users and running daemons.
|-
| {{|{{Path|/var/run}}  || Run-time variable data. This directory contains system information data describing the system since it was booted.
|-
| {{|{{Path|/var/lock}}  || Lock files. Files keeping track of resources currently in use.
|-
|}

==Conclusion==
The outcome of using a temporary filesystem for non volatile files such as the {{Path|/tmp}} directory is that the system has a very fast and very responsive access to caching files and stored session media. 
This also helps when you use a browser to surf the web as cookies can be stored on this volatile media speeding up the browser and on every reboot they are scrubbed or wiped from RAM.
If you intend on keeping your temporary files for analytics then use of the tmpfs for {{Path|/tmp}} and other directories which are used similarly may not be for you. Remember all data stored in the tmpfs mount point will be lost when the system is rebooted or powered down.

==Advancements in Technology==

There has been some new offerings from the tech giants including a not as fast as RAM but faster than SSD technology to be used as cache drives. These devices are usually incorporated on a PCIe add-in card and have either a adaptor from PCIe to M.2 slot or the entire memory device is embedded into the PCIe card.

So if you need a non-volatile high speed versatile solution that is faster than SSD/SAS/SATA then these high speed solutions are something you should look into. 
Of course you would not be mounting these devices with tmpfs but instead using a conventional partitioning filesystem and then mounting the appropriate mount-point to the device such as /dev/sd* /tmp and so on.

Technology such as the Intel 3Dx Optaine memory cache can be used for task like this but this technology although more versatile than SSD it is still subject to wearing out. It does however provide a brilliant midway point that will only get better as the technology progresses in the future and provide us with a much faster much snappier computing experience when setup correctly.

== See also ==

* [[Portage TMPDIR on tmpfs]]
</translate>

[[Category:Filesystems]]
