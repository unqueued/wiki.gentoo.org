<languages />

<div class="mw-translate-fuzzy">
{{Metadata|abstract=이 글은 새 커널로 업그레이드 하는 과정을 설명합니다.}}
</div>

<div class="mw-translate-fuzzy">
이 글은 새 커널([[kernel/ko|kernel]])로 업그레이드 하는 과정을 설명합니다.
</div>

<div class="mw-translate-fuzzy">
== 새 커널 설치 및 활용 ==
</div>

<div class="mw-translate-fuzzy">
새 커널 소스를 설치했을 때 커널 업그레이드를 하는 것이 좋습니다. 새 커널 소스는 가끔 {{c|emerge -a --update --deep --with-bdeps=y --newuse @world}} 명령을 실행하거나, 직접 설치할 경우에 설치됩니다.
</div>

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse @world}}

Of course, they can be installed directly using the next command (replace ''gentoo-sources'' with whatever version of the kernel that is in-use):

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse sys-kernel/gentoo-sources}}

새 커널 소스 설치 과정은 사용자에게 새 커널을 제공하는 과정이 아닙니다. 새 소스 코드로부터 새 커널을 만들어 설치한 다음 시스템을 다시 부팅하여 새 커널을 활성화해야합니다.

<div class="mw-translate-fuzzy">
새 소스 코드에서 새 커널을 만드는 과정은 기본적으로 시스템을 설치할 때 커널을 만드는 과정과 동일합니다. 다른 점이 있다면 이전 커널로부터 새 커널에서 쓸 설정을 가져올 수 있다는 점입니다. 이전 설정을 사용하면 모든 커널 옵션을 전반적으로({{c|make menuconfig}}와 비슷) 다시 설정하지 않아도 됩니다.
</div>

<div class="mw-translate-fuzzy">
커널의 설정은 커널 소스 코드가 담긴 디렉터리에 {{Path|.config}} 파일로 저장합니다. 새 커널은 이전 커널에서는 없는 새 옵션이나 기능을 가지고 있거나 이전 커널에서 더 이상 지니고 있지 않을 기능 또는 옵션이 빠져있습니다. 커널 설정은 커널의 기능 또는 옵션을 활성화 할 지 말 지를 지정하고 커널이 넣고 빌드할 건지 모듈로 빌드하여 커널 실행 과정에서 요청하면 불러올 건지를 결정합니다. 따라서 새 커널의 설정 파일은 이전 커널의 설정에 없는 설정 파일의 새 항목을 지니고 있고 이전 커널의 설정 파일에 있던 항목이 더 이상 없을 수도 있습니다.
</div>

바뀐 설정 파일을 다루려면, 이전 커널의 설정 파일을 새 설정에서 사용할 수 있는 설정으로 변환해야합니다. 이 글에서는 이전 커널의 설정을 새 커널에 맞게 변환하고,  새 커널 소스 코드로 커널을 만드는 방법을 보여드리겠습니다.

<div class="mw-translate-fuzzy">
== 현재 커널 설정 백업 ==
</div>

커널 설정을 백업하여 이전 설정이 없어지지 않도록 하는 방식이 현명합니다. 이 과정을 모두 넘기고 나면 대부분의 사용자는 시스템에 가장 걸맞는 설정을 하기 위해  충분한 시간동안 정성을 쏟고, 분명하게, 설정 정보를 잃고 싶지 않습니다.

현재 커널 설정을 백업하는건 쉽습니다:

<div class="mw-translate-fuzzy">
{{RootCmd|cd /usr/src/linux
|cp .config ~/kernel-config-`uname -r`|}}
</div>

제공한 커널 소스코드의 심볼릭 링크를 올바르게 설정하고 나면, 현재 사용중인 커널의 설정을 내 폴더 최상위 위치에 복사하고, 현재 실행 중인 리눅스 커널의 버전을  {{Path|kernel-config-}} 다음에 붙인 이름을 커널 설정 파일의 이름으로 붙입니다.

== Configuration ==

<div class="mw-translate-fuzzy">
== 새 커널 소스에 심볼릭 링크 설정 ==
</div>

{{Path|/usr/src/linux}} 심볼릭 링크는 언제든 현재 사용하는 커널 소스를 가리킵니다. 다음 세가지 방법 중 하나로 끝낼 수 있습니다:

#  <code>USE="symlink"</code> USE 플래그를 활용하여 커널 소스 설치
# eselect로 링크 설정
# 직접 심볼릭 링크 업데이트

<div class="mw-translate-fuzzy">
=== symlink USE 플래그로 커널 소스 설치하기 ===
</div>

이 과정은 {{Path|/usr/src/linux}} 심볼릭 링크가 새로 설치한 커널 소스코드를 가리키도록 합니다.

필요하다면, 두가지 방식 중 한가지 방법으로 고칠 수 있습니다.

<div class="mw-translate-fuzzy">
=== eselect로 링크 설정 ===
</div>

<div class="mw-translate-fuzzy">
{{c|eselect}}로 심볼릭 링크를 설정하려면:
</div>

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

이 명령의 결과에서 존재하는 커널 소스코드 목록을 출력합니다. 애스터리스크(*)는 선택한 소스 코드를 나타냅니다.

커널 소스를 (예를 들어 두번째 항목 처럼)바꾸려면 다음 명령을 실행하십시오:

{{RootCmd|eselect kernel set 2}}

<div class="mw-translate-fuzzy">
=== 심볼릭 링크 직접 업데이트 ===
</div>

심볼릭 링크를 직접 설정하려면:

<div class="mw-translate-fuzzy">
{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}
</div>

==== Moving to the new folder ====

Now that the symbolic link has been modified, change the working directory to the new kernel folder.

{{RootCmd|cd /usr/src/linux}}

{{Note|This command is still necessary even if the working directory was already {{Path|/usr/src/linux}} when the symlink was modified. Until the new symlink is actually followed, the console will still be in the ''old'' kernel's directory.}}

<div class="mw-translate-fuzzy">
== 이전 커널 설정 복사 ==
</div>

<div class="mw-translate-fuzzy">
이전 커널의 설정을 새 커널의 설정으로 복사해야 합니다. 이전 커널의 설정은 다음 여러 곳에서 찾을 수 있습니다:
</div>

<div class="mw-translate-fuzzy">
* [[procfs]] 파일 시스템에서 현재 커널로부터 ''Enable access to .config through /proc/config.gz'' 옵션을 활성화 했다면:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}
</div>

* From the old kernel. This will only work when the old kernel was compiled with CONFIG_IKCONFIG:
: {{RootCmd|/usr/src/linux/scripts/extract-ikconfig /path/to/old/kernel >/usr/src/linux/.config}}

<div class="mw-translate-fuzzy">
* {{Path|/boot}} 디렉터리에 설정 파일을 설치했다면:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}
</div>

* 현재 동작 중인 커널의 디렉터리에서:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

* In the {{Path|/etc/kernels/}} directory, if <code>SAVE_CONFIG="yes"</code> is set in {{Path|/etc/genkernel.conf}} and {{c|[[genkernel]]}} was previously used:
: {{RootCmd|cp /etc/kernels/kernel-config-x86_64-3.14.14-gentoo /usr/src/linux/.config}}

<div class="mw-translate-fuzzy">
== 새 커널 설정 ==
</div>

<div class="mw-translate-fuzzy">
이전 커널의 설정을 새 커널에서 활용하려면 변환해야합니다. 이 변환 과정은 {{c|make silentoldconfig}} 또는 {{c|make olddefconfig}} 명령을 실행하여 처리할 수 있습니다.
</div>

<div class="mw-translate-fuzzy">
=== make silentoldconfig ===
</div>

{{Important|{{c|make silentoldconfig}} is being removed as of linux version 4.19, it will be replaced by {{c|make syncconfig}}.}}

<div class="mw-translate-fuzzy">
다음 설정은 {{c|make config}}로 텍스트 기반 설정처럼 진행할 수 있습니다. 새 설정 옵션에 대한 선택권을 줍니다. 예를 들면:
</div>

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

<div class="mw-translate-fuzzy">
줄 마지막에 '''(NEW)''' 문자열은 이 옵션이 새로 들어왔음을 의미하는 표시입니다. 각괄호 안에 남길 수 있는 답을 남기십시오. ''Y''es, ''N''o, ''m''odule 이 있으며, 도움말을 보기 위한 ''?''가 있습니다. 대문자 답변을 추천합니다(여기서는 ''Y'' 입니다). 도움말에서는 옵션 또는 드라이버에 대해 설명합니다.
</div>

<div class="mw-translate-fuzzy">
안타깝게도 {{c|make silentoldconfig}}은 각각의 옵션에 대한 더 많은 정보를 - 도움말 옆에 - 상황 설명 처럼 보여주지 않으므로, 올바른 대답을 주기는 가끔은 어렵습니다. 이런 경우 진행하는 가장 좋은 방법은 [[Kernel/Configuration/ko#.EC.84.A4.EC.A0.95_.EB.8F.84.EA.B5.AC|그래픽 커널 설정 도구]]중 하나를 통해 옵션 이름을 기억한 다음 내용을 바꾸는 것입니다.
</div>

<div class="mw-translate-fuzzy">
=== make olddefconfig ===
</div>

<div class="mw-translate-fuzzy">
대화식 진행을 원치 않는다면(어떤 질문도 하지 않음), {{c|make olddefconfig}}를 활용하십시오:
</div>

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

==== make help ====

Use {{c|make help}} to see other conversion methods available:

{{RootCmd|make help}}

== 빌드 ==

<div class="mw-translate-fuzzy">
{{Important|외부 커널 모듈을 설치했다면(nvidia 또는 zfs의 경우), 커널을 빌드하기 전에  [[Kernel/Upgrade/ko#.EC.99.B8.EB.B6.80_.EC.BB.A4.EB.84.90_.EB.AA.A8.EB.93.88_.EB.8B.A4.EC.8B.9C_.EC.84.A4.EC.B9.98|하단]]에서 설명한 바와 같이 {{c|make modules_prepare}} 명령을 실행할 필요가 있습니다. 일부 모듈은 커널을 빌드하기 전에 설치하거나 준비할 수 없습니다.}}
</div>

{{Important|새 커널 파일 이름에 맞게 [[Bootloader|부트로더]]를 다시 설정하는 절차를 잊지 마시고, initramfs는 이미 사용중인 경우에도 마찬가지로 다시 빌드하십시오.}}

이 단계에서 다음 단계는 [[Kernel/Configuration#Build|직접 설정하기]] 글에 있습니다.

=== Automated build and installation ===

It is possible to automatically build and install the newly emerged kernel using Portage hooks. While other approaches are also possible, the following is based on genkernel and gentoo-sources package. It requires the following prerequisites:

# {{c|genkernel all}} is able to build and install the kernel to which the {{Path|/usr/src/linux}} symlink points into <code>$BOOTDIR</code> and the bootloader.
# The <code>symlink</code> use flag is set for the kernel ebuild.

If those are fulfilled, simply install a <code>post_pkg_postinst</code> Portage hook as shown below.

{{FileBox|title=Automated kernel build and installation portage hook|filename=/etc/portage/env/sys-kernel/gentoo-sources|lang=bash|1=post_pkg_postinst() {
	CURRENT_KV=$(uname -r)
	# Check to see if genkernel has been run previously for the running kernel and use that config
	if [[ -f "${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" ]] ; then
		genkernel --kernel-config="${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" all
	elif [[ -f "${EROOT}/usr/src/linux-${CURRENT_KV}/.config" ]] ; then # Use latest kernel config from current kernel
		genkernel --kernel-config="${EROOT}/usr/src/linux-${CURRENT_KV}/.config" all
	elif [[ -f /proc/config.gz ]] ; then # Use known running good kernel
		zcat /proc/config.gz >> "${EROOT}/tmp/genkernel.config"
		genkernel --kernel-config="${EROOT}/tmp/genkernel.config" all
		rm "${EROOT}/tmp/genkernel.config"
	else # No valid configs known
		genkernel all
	fi
}
}}

<div class="mw-translate-fuzzy">
== 외부 커널 모듈 다시 설치 ==
</div>

{{Note|The modules_prepare step is not required if building an entire kernel as this function is done as part of the standard process.}}

[[:Category:Binary kernel modules|이진 커널 모듈]] 같은 어떤 외부 커널 모듈은 각각의 새 커널에 대해 다시 빌드해야 할 대가 있습니다. 아직 커널을 빌드하지 않았다면 외부 커널 모듈을 빌드하기 위해 우선 준비해야합니다:

{{RootCmd|make modules_prepare}}

<div class="mw-translate-fuzzy">
''@module-rebuild'' 셋을 사용하여 꾸러미를 다시 빌드할 수 있습니다:
</div>

{{Emerge|@module-rebuild}}

<div class="mw-translate-fuzzy">
== 빌드 문제 해결 ==
</div>

<div class="mw-translate-fuzzy">
현재 커널을 다시 하는 동안 빌드에 문제가 있음을 경험했을 경우 커널 소스를 정리하는데 도움이 필요합니다. 동작중에 {{Path|.config}} 파일을 제거하므로 먼저 백업했는지 확인하십시오. 백업에 {{Path|.bak}} 또는 {{Path|~}} 접미사를 사용하면 {{c|make distclean}}에서 지우므로 사용하지 마십시오.
</div>

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

<div class="mw-translate-fuzzy">
== 오래된 커널 제거 ==
</div>

[[Kernel/Removal|커널 제거]] 글을 보십시오. 

== See also ==

* {{See also|Genkernel}}

== 외부 자료 ==

<div class="mw-translate-fuzzy">
* [http://kernelnewbies.org/LinuxChanges 일부 새 기능 설명이 있는 커널 변경 기록]
</div>

[[Category:Kernel]]
