<languages />

{{Metadata|abstract=이 글은 새 커널로 업그레이드 하는 과정을 설명합니다.}}

이 글은 새 커널([[kernel/ko|kernel]])로 업그레이드 하는 과정을 설명합니다.

== 새 커널 설치 및 활용 ==

새 커널 소스를 설치했을 때 커널 업그레이드를 하는 것이 좋습니다. 새 커널 소스는 가끔 {{c|emerge -a --update --deep --with-bdeps=y --newuse @world}} 명령을 실행하거나, 직접 설치할 경우에 설치됩니다.

새 커널 소스 설치 과정은 사용자에게 새 커널을 제공하는 과정이 아닙니다. 새 소스 코드로부터 새 커널을 만들어 설치한 다음 시스템을 다시 부팅하여 새 커널을 활성화해야합니다.

새 소스 코드에서 새 커널을 만드는 과정은 기본적으로 시스템을 설치할 때 커널을 만드는 과정과 동일합니다. 다른 점이 있다면 이전 커널로부터 새 커널에서 쓸 설정을 가져올 수 있다는 점입니다. 이전 설정을 사용하면 모든 커널 옵션을 전반적으로({{c|make menuconfig}}와 비슷) 다시 설정하지 않아도 됩니다.

커널의 설정은 커널 소스 코드가 담긴 디렉터리에 {{Path|.config}} 파일로 저장합니다. 새 커널은 이전 커널에서는 없는 새 옵션이나 기능을 가지고 있거나 이전 커널에서 더 이상 지니고 있지 않을 기능 또는 옵션이 빠져있습니다. 커널 설정은 커널의 기능 또는 옵션을 활성화 할 지 말 지를 지정하고 커널이 넣고 빌드할 건지 모듈로 빌드하여 커널 실행 과정에서 요청하면 불러올 건지를 결정합니다. 따라서 새 커널의 설정 파일은 이전 커널의 설정에 없는 설정 파일의 새 항목을 지니고 있고 이전 커널의 설정 파일에 있던 항목이 더 이상 없을 수도 있습니다.

바뀐 설정 파일을 다루려면, 이전 커널의 설정 파일을 새 설정에서 사용할 수 있는 설정으로 변환해야합니다. 이 글에서는 이전 커널의 설정을 새 커널에 맞게 변환하고,  새 커널 소스 코드로 커널을 만드는 방법을 보여드리겠습니다.

== 현재 커널 설정 백업 ==

커널 설정을 백업하여 이전 설정이 없어지지 않도록 하는 방식이 현명합니다. 이 과정을 모두 넘기고 나면 대부분의 사용자는 시스템에 가장 걸맞는 설정을 하기 위해  충분한 시간동안 정성을 쏟고, 분명하게, 설정 정보를 잃고 싶지 않습니다.

현재 커널 설정을 백업하는건 쉽습니다:

{{RootCmd|cd /usr/src/linux
|cp .config ~/kernel-config-`uname -r`|}}

제공한 커널 소스코드의 심볼릭 링크를 올바르게 설정하고 나면, 현재 사용중인 커널의 설정을 내 폴더 최상위 위치에 복사하고, 현재 실행 중인 리눅스 커널의 버전을  {{Path|kernel-config-}} 다음에 붙인 이름을 커널 설정 파일의 이름으로 붙입니다.

== 새 커널 소스에 심볼릭 링크 설정 ==

The symlink {{Path|/usr/src/linux}} should always point to the directory that holds the sources of the kernel which currently runs. This can be done in one of three ways:

# Installing the kernel sources with <code>USE="symlink"</code>
# Setting the link with eselect
# Manually updating the symbolic link

=== Installing the kernel sources with the symlink USE flag ===

This will make the {{Path|/usr/src/linux}} point to the newly installed kernel sources.

If necessary, it can still be modified later with one of the other two methods.

=== eselect로 링크 설정 ===

{{c|eselect}}로 심볼릭 링크를 설정하려면:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

This outputs the available kernel sources. The asterisk indicates the chosen sources.

To change the kernel sources, e.g. to the second entry, do:

{{RootCmd|eselect kernel set 2}}

=== 심볼릭 링크 직접 업데이트 ===

심볼릭 링크를 직접 설정하려면:

{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

== 이전 커널 설정 복사 ==

이전 커널의 설정을 새 커널의 설정으로 복사해야 합니다. 이전 커널의 설정은 다음 여러 곳에서 찾을 수 있습니다:

* [[procfs]] 파일 시스템에서 현재 커널로부터 ''Enable access to .config through /proc/config.gz'' 옵션을 활성화 했다면:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}

* {{Path|/boot}} 디렉터리에 설정 파일을 설치했다면:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* 현재 동작 중인 커널의 디렉터리에서:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

== 새 커널 설정 ==

이전 커널의 설정을 새 커널에서 호라용하려면 변환해야합니다. 이 변환 과정은 {{c|make silentoldconfig}} 또는 {{c|make olddefconfig}} 명령을 실행하여 처리할 수 있습니다.

{{c|make silentoldconfig}} 명령은 새 옵션의 선택지를 제시하지만, {{c|make olddefconfig}}는 그렇지 않습니다. 둘 다 사용하시지 마시고, 둘 중 하나만 사용하십시오.

=== make silentoldconfig ===

다음 설정은 {{c|make config}}로 텍스트 기반 설정처럼 진행할 수 있습니다. 새 설정 옵션에 대한 선택권을 줍니다. 예를 들면:

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

줄 마지막에 '''(NEW)''' 문자열은 이 옵션이 새로 들어왔음을 의미하는 표시입니다. 각괄호 안에 남길 수 있는 답을 남기십시오. ''Y''es, ''N''o, ''m''odule 이 있으며, 도움말을 보기 위한 ''?''가 있습니다. 대문자 답변을 추천합니다(여기서는 ''Y'' 입니다). 도움말에서는 옵션 또는 드라이버에 대해 설명합니다.

안타깝게도 {{c|make silentoldconfig}}은 각각의 옵션에 대한 더 많은 정보를 - 도움말 옆에 - 상황 설명 처럼 보여주지 않으므로, 올바른 대답을 주기는 가끔은 어렵습니다. 이런 경우 진행하는 가장 좋은 방법은 [[Kernel/Configuration/ko#.EC.84.A4.EC.A0.95_.EB.8F.84.EA.B5.AC|그래픽 커널 설정 도구]]중 하나를 통해 옵션 이름을 기억한 다음 내용을 바꾸는 것입니다.

=== make olddefconfig ===

If interactivity is not wanted (no questions should be asked), then use <tt>make olddefconfig</tt>:

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

== 빌드 ==

{{Important|When external kernel modules are installed (like nvidia or zfs), it may be necessary to run <tt>make modules_prepare</tt> as described [[Kernel/Upgrade#Reinstall external kernel modules|below]] before building the kernel. Some modules cannot be installed or prepared before the kernel has been built.}}

{{Important|Do not forget to reconfigure the [[Bootloader|bootloader]] to account for the new kernel filenames, and rebuild the initramfs if one is used as well.}}

이 단계에서 다음 단계는 [[Kernel/Configuration#Build|직접 설정하기]] 글에 있습니다.

== 외부 커널 모듈 다시 설치 ==

[[:Category:Binary kernel modules|이진 커널 모듈]] 같은 어떤 외부 커널 모듈은 각각의 새 커널에 대해 다시 빌드해야 할 대가 있습니다. 아직 커널을 빌드하지 않았다면 외부 커널 모듈을 빌드하기 위해 준비하는것이 급선무일 것입니다:

{{RootCmd|make modules_prepare}}

''@module-rebuild'' 셋을 사용하여 꾸러미를 다시 빌드할 수 있습니다:

{{Emerge|@module-rebuild}}

== 빌드 문제 해결 ==

현재 커널을 다시 하는 동안 빌드에 문제가 있음을 경험했을 경우 커널 소스를 정리하는데 도움이 필요합니다. 동작중에 {{Path|.config}} 파일을 제거하므로 먼저 백업했는지 확인하십시오. 백업에 {{Path|.bak}} 또는 {{Path|~}} 접미사를 사용하면 {{c|make distclean}}에서 지우므로 사용하지 마십시오.

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

== 오래된 커널 제거 ==

[[Kernel/Removal|커널 제거]] 글을 보십시오. 

== 외부 자원 ==

* [http://kernelnewbies.org/LinuxChanges 일부 새 기능 설명이 있는 커널 변경 기록]

[[Category:Kernel]]
