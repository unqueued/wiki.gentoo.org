<languages />
<translate>
{{InfoBox stack
|{{InfoBox homepage|http://www.gnu.org/software/grub/|header=true}}
|{{InfoBox wikipedia}}
}}
'''GRUB2''' is a bootloader with support for modern day computer systems. It is meant to replace the older [[GRUB]] bootloader (now referred to as "GRUB Legacy"). GRUB2 has an entirely separate codebase from GRUB Legacy and boasts features such as a new shell-like syntax which permits advanced scripting capabilities. Current GRUB Legacy users are encouraged to migrate their systems to GRUB2.

Upgrading to GRUB 2 might be done out of necessary, as it allows:
* Booting from UEFI platforms.
* Booting from GPT partitioned drives without needing a hybrid MBR (hybrid MBR can enabled as needed for compatibility or portability).
* Booting from a [[btrfs]] formatted {{Path|/boot}} partition.
* Booting directly from a btrfs raid set without needing an [[initramfs]] for early mount setup.
* Booting directly from logical volume management (such as LVM2).
* Booting with support for DM-RAID (RAID 0, 1, 4, 5, 6, 9 and 10).
* Booting from encrypted devices (LUKS).

For a shotgun approach, see [[GRUB2 Quick Start]].

== Installation ==
The {{Package|sys-boot/grub}} package is slotted. Both grub-0.97 (GRUB Legacy) and grub-2.00 may be installed at the same time, however only one version of GRUB may be installed in a MBR at a time.

By default, GRUB2 will guess a default platform target at build time. This may be overridden by setting the <code>GRUB_PLATFORMS</code> variable in {{Path|make.conf}}.

{{FileBox|filename=/etc/portage/make.conf|title=Example of setting GRUB_PLATFORMS variable for EMU, EFI, and PC support|lang=bash|1=
GRUB_PLATFORMS="emu efi-32 efi-64 pc"
}}

The following platforms are supported depending on the target CPU:

</translate>
{| class="table"
!
! colspan="7" | Target
|-
! Platform
! i386
! ia64
! mips
! mipsel
! powerpc
! spac64
! x86_64
|-
! arc
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! coreboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! efi
| {{Yes}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
|-
! emu
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! ieee1275
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{Yes}}
| style="background: PaleTurquoise;  text-align: center" | 32-bit
|-
! loongson
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! multiboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu-mips
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
|-
! pc
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
|}
<translate>

To install '''GRUB Legacy''' (grub-0.97) or to keep it installed after an upgrade, call emerge with the "0" slot on the end of the package atom. Doing so will add <code>sys-boot/grub:0</code> to Portage's {{Path|world}} file:

{{Emerge|sys-boot/grub:0|params=--noreplace}}

To prevent mounting of the {{Path|/boot}} partition during installation, export the <code>DONT_MOUNT_BOOT</code> variable.

To install GRUB2 use the normal emerge syntax:

{{Emerge|sys-boot/grub:2|params+=--newuse}}

Optionally, install <tt>os-prober</tt> utility (provided through the {{Package|sys-boot/os-prober}} package) to have GRUB2 probe for other operating systems when running the <tt>grub2-mkconfig</tt> command. In most instances, this will enable GRUB2 to automatically detect other operating systems (Windows 7, Windows 8.1, etc.).

{{Emerge|sys-boot/os-prober|params+=--newuse}}

== Configuration ==

GRUB2 does not require manually maintaining a boot option configuration. Instead it can optionally generate a configuration file ({{Path|/boot/grub/grub.cfg}}) using the <tt>grub2-mkconfig</tt> command. This utility will parse the scripts in {{Path|/etc/grub.d/}} and the settings file in {{Path|/etc/default/grub}}.

{{Warning|The <tt>grub2-mkconfig</tt> utility does not work properly when using DM-Raid. Unless manual configuration of the scripts in {{Path|/etc/grub.d/}} is performed after installation the system will be left in a non-bootable state. Verify a working boot section exists in {{Path|/etc/grub.d/}} ''before'' restarting the system, otherwise <tt>grub2-mkconfig</tt> will insert entries verbatim which will result in a silly lapse of concentration could lead to extra work restoring a broken system.
}}

=== GRUB2's Configuration File ===

In Gentoo, the main configuration file for controlling GRUB2 can be found in the {{Path|/etc/}} folder at {{Path|/etc/default/grub}}. The following variables can be set to control how GRUB2 will function:

* <code>GRUB_FONT</code> - Sets a path to a PF2 font for GRUB2 to use.
:PF2 fonts can be created using the <kbd>grub2-mkfont</kbd> utility.
:For example, to create a GRUB2 PF2 font from a TTF (True Text Font) called {{Path|DroidSansMonoSlash.ttf}} run:
:{{RootCmd|grub2-mkfont /usr/share/fonts/droid/DroidSansMonoSlashed.ttf --size{{=}}20 --output /boot/grub/fonts/DroidSansMonoSlashed20.pcf}}
:To use the newly created font, set the <code>GRUB_FONT</code> variable to the font's location. <code>GRUB_FONT=/boot/grub/fonts/DroidSansMonoSlashed20.pcf</code>

* <code>GRUB_DEFAULT</code> - Defines the default menu entry selected on boot. May be a numeric index, a menu title, or "saved". Defaults to first detected entry.

* <code>GRUB_TIMEOUT</code> - Delay (in seconds) before booting default menu entry. Set to 0 to wait indefinitely. The default is 5 seconds.

*<code>GRUB_DISABLE_RECOVERY</code> - If set to true, recovery menu entries will not be generated. On Linux, recovery entries pass "single" on the kernel command line.

* <code>GRUB_CMDLINE_LINUX</code> - Parameters to be passed on the kernel command line for all Linux menu entries.

* <code>GRUB_CMDLINE_LINUX_DEFAULT</code> - Parameters to be passed on the kernel command line for non-recovery Linux menu entries.

* <code>GRUB_DISABLE_LINUX_UUID</code> - If true, ${GRUB_DEVICE} is passed in the root parameter on the kernel command line. If false, ${GRUB_DEVICE_UUID} is passed in the root parameter on the kernel command line when an initramfs is available.

* <code>GRUB_GFXPAYLOAD_LINUX</code> - Controls the video mode in which the Linux kernel starts. May be set to "text", "keep", or a display resolution.

* <code>GRUB_DEVICE</code> - The initial root device (i.e. the kernel's <code>root=</code> parameter). Set this if you want to override <kbd>grub2-mkconfig</kbd> command's root device auto-detection. For example, <code>GRUB_DEVICE=/dev/ram0</code> will force <code>root=/dev/ram0</code> to be used in the kernel command line.

* <code>GRUB_DISABLE_SUBMENU</code> - set to y to list all kernel options instead of compacting them under an "Advanced options" section

=== grub2-mkconfig Scripts ===

The directory {{Path|/etc/grub.d/}} contains the scripts that <tt>grub2-mkconfig</tt> uses to generate a {{Path|grub.cfg}} file. By default the contents of this directory should be similar to the following:

{{Cmd|ls /etc/grub.d/|output=<pre>
00_header  10_linux  20_linux_xen  30_os-prober  40_custom  41_custom README
</pre>}}

By default GRUB2 will use all scripts when installed. To disable any of the scripts simply remove the executable bit from the script's file permissions using the <kbd>chmod</kbd> command. In the following example every script but {{Path|00_header}} and {{Path|10_linux}} are disabled:

{{RootCmd|chmod -x /etc/grub.d/<nowiki>{</nowiki>20_linux_xen,30_os-prober,40_custom,41_custom<nowiki>}</nowiki>}}

After the configuration has been established, run the <kbd>grub2-mkconfig</kbd> utility with the <kbd>-o</kbd> option pointing to the output file located at {{Path|/boot/grub/grub.cfg}} (this is GRUB2's default output location):

{{RootCmd|grub2-mkconfig -o /boot/grub/grub.cfg|output=<pre>
Generating grub.cfg ...
Found linux image: /boot/vmlinuz-3.3.0-gentoo
done
</pre>}}

Each time the <tt>grub2-mkconfig</tt> utility is called a new configuration will be generated. 

{{Important|If <tt>grub2-mkconfig</tt> does not report found entries then no entries were found. In this case GRUB2 will offer no boot selections when upon system restart which may be a tricky, time consuming situation to resolve. Make sure the output is satisfactory before restarting the system.}}

== BIOS MBR and BIOS GPT ==
Installing GRUB2 in BIOS MBR or BIOS GPT mode is reminiscent of installing Legacy GRUB, the main difference is that GRUB2 uses new GRUB2 additions. If a GPT partition table is present on the system, a small BIOS boot partition will need to be created. 1 MiB will be enough to work but 2-4 MiB is a more safe option. This BIOS boot partition will hold the stage 2 of the bootloader. BIOS boot partitions do not need formatted with a filesystem; the <kbd>grub2-install</kbd> command will overwrite any pre-existing filesystem with one of it's own.

To set a partition as a BIOS partition use the command line tool <kbd>parted</kbd> ({{Package|sys-block/parted}}) by typing (change 1 to the number of the partition you want to mark as a BIOS Boot partition!):
{{RootCmd|set 1 bios_grub on|prompt=(parted) |color=white}} 

More specifically, the following type of layout will work for BIOS GPT, and it is easier to use the curses-based <kbd>cgdisk</kbd> utility ({{Package|sys-apps/gptfdisk}}). Create the first partition at sector 2048, leaving the first 1 MiB of disk space free for MBRs, etc.). Provide it with an additional 4096 to 8192 sectors (2-4 MiB) for size. Set the type code to <code>0xEF02</code> and give it a label of "gptbios" (effectively what the bios_grub command does when using <kbd>parted</kbd>). Continue adding partitions as needed ({{Path|/boot}}, {{Path|/}}, etc.).

If a {{Path|/boot}} partition is needed, start by mounting the {{Path|/boot}} parition:
{{RootCmd|mount /boot}}

Run the <kbd>grub2-install</kbd> to copy the relevant files to {{Path|/boot/grub}}. On the PC platform, this also installs a boot image to the Master Boot Record (MBR) or a partition's boot sector. <kbd>grub2-install</kbd> accepts a <kbd>--target</kbd> option to set the CPU architecture and system platform. If unspecified, <kbd>grub2-install</kbd> will attempt to guess the correct at the correct values; on an AMD64/x86 system it will use "i386-pc" by default. <kbd>grub2-install</kbd> also accepts a <kbd>--boot-directory</kbd> option to tell the GRUB2 installer which directly to look for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

If all goes well, after running the <kbd>grub2-install</kbd> command an output such as the one below is to be expected:
{{RootCmd|grub2-install /dev/sda|output=<pre>Installation finished. No error reported.</pre>}}

=== Partitioning and Preparing Boot Disk ===
Before installing GRUB2 to a boot medium (internal disk, a removable device, etc.) some special care should be given while preparing and partitioning the boot device. The type of special care depends on the boot type involved: BIOS ''or'' UEFI. BIOS booting can be easily achieved using one of three methods:

1. Booting from disk partitioned with an existing MBR boot scheme.
2. Booting using GPT with a protective MBR.
3. Booting a hybrid MBR (useful if dual booting is involved with a GPT unaware Operating System such as Windows).

A different kind of special care should be provided when using UEFI. GPT is part of the UEFI specification. UEFI specification states is mandatory to use GPT partitioned disk.

When dual booting with Windows, be aware that Windows cannot boot from either a BIOS MBR ''or'' a GPT partitioned disk using an EFI platform. In the latter case, dual booting Windows is not difficult. In the former case, it can be difficult to dual boot with Windows on a GPT partitioned disk that uses a hybrid MBR.

Before going further, consider backing up the boot device MBR. Presuming the MBR resides on the {{Path|/dev/sda}} device, the following command could be used to backup the MBR:
{{RootCmd|dd if{{=}}/dev/sda of{{=}}/root/sda.mbr bs{{=}}512 count{{=}}1}}

Or to simply its boot loader with something (here one can go as far as 446 bytes):
{{RootCmd|dd if{{=}}/dev/sda of{{=}}/root/sda.mbr bs{{=}}440 count{{=}}1}}

{{Note|If the bootloader in question is GRUB Legacy or GRUB2 in a traditional ''BIOS'' - MBR setup, then, to make a wise choice, the whole first track (63 sectors) should be backed up. GRUB Legacy's stage1_5 is roughly 10KB and GRUB2's {{Path|core.img}} is roughly 25KB (without additional modules). These files are embedded in the gap (free space) before the first partition on the device specified in the installation procedure.}}

Booting in full [U]EFI mode requires an <code>[0x]EF00</code> (EFI System Partition) partition, while booting from ''BIOS'' - GPT mode requires an <code>[0x]EF02</code> (bios_boot) partition. GRUB (either GRUB2 or a patched GRUB Legacy) requires an additional <code>[0x]EE00</code> protective partition in the protective MBR (if present) in order to recognize a GPT partitioned disk. This protective partition should be listed in the MBR first (in the case of a hybrid MBR configuration). Booting in ''BIOS'' - MBR mode does not require any additional partition; however, a gap (free space, a couple of sectors) should be left vacant in order to embed the {{Path|core.img}} before the first partition (if installing on a traditional {{Path|/dev/sd<char>}} manner) or before the specified partition (if installing on a {{Path|/dev/sd<char><int>}} manner).

The following is the output of pressing the {{Key|p}} key using the <kbd>gdisk</kbd> utility on a GPT partitioned disk with both a BIOS boot [0xEF02] partition and an EFI [0xEF00] partition:

{{RootCmd|gdisk /dev/sdc|output=<pre>
GPT fdisk (gdisk) version 0.8.1

Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present

Found valid GPT with protective MBR; using GPT.

Command (? for help): p
Disk /dev/sdc: 976773168 sectors, 465.8 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): AA369F4D-37A4-4C0D-A357-DC24B99A6337
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 976773134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       828377087   395.0 GiB   8E00  Linux LVM
   2       828377088       891291647   30.0 GiB    0700  Microsoft basic data
   3       891291648       975177727   40.0 GiB    0700  Microsoft basic data
   4       975177728       976754687   770.0 MiB   8300  Linux filesystem
   5       976754688       976756735   1024.0 KiB  EF02  BIOS boot partition
   6       976756736       976773134   8.0 MiB     EF00  EFI System

Command (? for help): 
</pre>}}

{{Note|Note the <code>0x</code> hexadecimal prefix does not need entered for GPT when using <kbd>fdisk</kbd>.}}

Using the same setup, the <kbd>parted</kbd> utility gives an output with slightly different syntax:

{{RootCmd|parted /dev/sdc|output=<pre>
GNU Parted 3.0
Using /dev/sdc
(parted) print
...
Sector size (logical/physical): 512B/512B
Partition Table: gpt

Number  Start   End    Size    File system  Name                  Flags
 1      1049kB  424GB  424GB                Linux LVM             lvm
 2      424GB   456GB  32.2GB               Microsoft basic data
 3      456GB   499GB  42.9GB               Microsoft basic data
 4      499GB   500GB  807MB   ext2         Linux filesystem
 5      500GB   500GB  1049kB               BIOS boot partition   bios_grub
 6      500GB   500GB  8396kB               EFI System            boot

(parted)
</pre>}}

Creating partitions in <kbd>gdisk</kbd> is straight forward for users already familiar with the <kbd>fdisk</kbd> partitioning utility. After starting <kbd>gdisk</kbd>, type {{Key|n}} (for new) in the main menu, provide beginning and end sectors (if needed), then set the partition type <code>EF00</code> for an EFI system partition.

== UEFI GPT ==

=== UEFI Partition ===
For UEFI GPT boot using GRUB2, the system ''must'' have a dedicated EFI partition containing a FAT filesystem.

{{Important|UEFI GPT setup is entirely different ''and incompatible'' with the steps listed in the two BIOS modes above. Attempting to somehow combine BIOS mode with the steps to come will result in a broken system.}}

The EFI partition can ''replace'' having a {{Path|/boot}} partition on {{Path|/dev/sda1}} by having a {{Path|/boot/efi}} partition on {{Path|/dev/sda1}}. This is to say a successful EFI boot scenario using GRUB2 ''can'' operate with two partitions total (three total if a swap partition is needed): a root partition and an EFI partition. Using this configuration, the {{Path|/boot}} '''folder''' will be located in the root {{Path|/}} '''partition''' (at {{Path|/boot}}) and the EFI '''partition''' will mount ''in'' the boot '''folder''' (at {{Path|/boot/efi}}). For further clarification, see the example {{Path|/etc/fstab}} file below.

{{FileBox|filename=/etc/fstab|title=Example of an UEFI capable {{Path|/etc/fstab}} file with a swap partition:|
<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
/dev/sda2		none		swap		sw		0 0
/dev/sda3		/		ext4		noatime		0 1
</pre>}}

Generating a 100MB partition for {{Path|/boot/efi}} should provide plenty of space for holding multiple <code>.efi</code> files (multiple entries will most likely not be needed; most systems will only use one).

Create the partition using the partitioning [[Partition#GUID_Partition_Table|tool of choice]]. The <kbd>gdisk</kbd> ({{Package|sys-apps/gptfdisk}}) and <kbd>parted</kbd> ({{Package|sys-block/parted}}) tools utilities nicely for this purpose. When using the <kbd>gdisk</kbd> utility, be sure to use type <code>EF00</code>.

Proceed to create a FAT filesystem on the EFI system partition using <kbd>mkdosfs</kbd> and add it to {{Path|/etc/fstab}} by following the example below:

{{RootCmd|mkdosfs -F 32 -n efi-boot /dev/sda1
|mkdir /boot/efi
|echo '/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2' >> /etc/fstab
|mount /boot/efi}}

=== Install BRUB2 for UEFI ===
{{RootCmd|grub2-install --target{{=}}x86_64-efi}}
This should install Grub2 in {{Path|/boot/grub}}, copy the core image to {{Path|/boot/efi/EFI/gentoo/grubx64.efi}}, and call <kbd>efibootmgr</kbd> to add a boot entry.

{{Note|In case the information in the install section above was glazed over, it is helpful to [[GRUB2#Installation|set the GRUB_PLATFORMS variable]] in {{Path|/etc/portage/make.conf}} This will assist Grub2 in determining what options to use when detecting the proper EFI target. For 32-bit EFI systems use "<code>efi-32</code>". For 64-bit use "<code>efi-64</code>".}}

{{Important|In order for GRUB2 to install properly, the EFI directory ''must'' be mounted ''and'' the <code>efivars</code> kernel module present in the kernel before the <code>grub2-install</code> command will complete successfully.}}

=== Alternative: Using the Default UEFI Firmware Location ===

If the system's UEFI firmware fails to find GRUB2's EFI bootloader file, using the default bootloader location should provide a working solution. This circumvents the boot menu managed by <kbd>efibootmgr</kbd> and thus offers reduced functionality, but is less error prone. Do do this, verify the EFI partition is mounted at {{Path|/boot/efi}} then copy the file {{Path|grubx64.efi}} located at {{Path|/boot/efi/EFI/gentoo/grubx64.efi}} to {{Path|/boot/efi/EFI/BOOT/BOOTX64.EFI}} This example assumes a 64-bit EFI system, adjust accordingly for 32-bit EFI systems.

== Hybrid GPT MBR ==
Dual booting with operating systems that are blind to a GPT-partitioned disk requires a tricky workaround.
{{Warning|''WARNING:'' Playing with a hybrid MBR can be confusing; make no assumptions about the reliability of the instructions in this sub-section. Consider the advice found here as guidance for experimentation; not official documentation!}} 

Some operating systems lack ability to boot from anything but '''BIOS''' - MBR (includes all versions of Microsoft Windows prior to Windows Vista). It should be noted that support for 32-bit (as opposed to 64-bit) UEFI is less than perfect for certain machines.

GRUB2 supports booting from GPT and MBR partition tables via the <code>part_gpt</code> and <code>part_msdos</code> modules. However, a successful setup and GRUB2's ability to boot correctly depends both on loaded partition modules and on correctly installing GRUB2. A determining factor in how GRUB2 is installed ('''BIOS''' - MBR vs '''BIOS''' - GPT) is the presence of a EE00 (GPT protective) partition as the first partition in the MBR.  

With a hybrid MBR, GRUB2 will install '''if''' the first partition in the MBR table is an <code>EE00</code> partition. An <code>EF02</code> partition should be present anywhere in the disk and not necessarily in the MBR list to leave enough open sectors embed the {{Path|core.img}} file to the disk.
{{Note|In this case one does ''not'' have to add/list an <code>EE00</code> partition in the hybrid MBR list manually, <kbd>gdisk</kbd> will provide a prompt to list one if booting with GRUB2 before displaying the provided list (up to 3 partitions) by the user.}}

Creating a hybrid MBR is easy using <kbd>gdisk</kbd>: At the main menu press the {{Key|r}} key (for recovery and transformation), then press {{Key|h}} key (CHS recompute), then enter the series of partitions (less or equal to 3) in the order they should be be listed in the MBR. Finally enter the hexadecimal partition type without the <code>0x</code> prefix or accept the defaults by repeatedly pressing the {{Key|y}} key. Enable only a single boot flag as found the following example:

{{RootCmd|gdisk /dev/sdg|output=<pre>
GPT fdisk (gdisk) version 0.8.1

Partition table scan:
  MBR: MBR only
  BSD: not present
  APM: not present
  GPT: present

Found valid MBR and GPT. Which do you want to use?
 1 - MBR
 2 - GPT
 3 - Create blank GPT

Your answer: 2</pre>}}

{{RootCmd|gdisk /dev/sdg|output=<pre>
...
Using GPT and creating fresh protective MBR.

Command (? for help): r
Recovery/transformation command (? for help): p
Disk /dev/sdg: 625142448 sectors, 298.1 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): 744E8BF3-39A4-4908-8646-AC2E5661C8CF
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 625142414
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       566233087   270.0 GiB   8300  Linux filesystem
   2       566233088       625142414   28.1 GiB    0700  Microsoft basic data
Recovery/transformation command (? for help): h

WARNING! Hybrid MBRs are flaky and dangerous! If you decide not to use one,
just hit the Enter key at the below prompt and your MBR partition table will
be untouched.

Type from one to three GPT partition numbers, separated by spaces, to be
added to the hybrid MBR, in sequence: 2 1
Place EFI GPT (0xEE) partition first in MBR (good for GRUB)? (Y/N): N


Creating entry for GPT partition #2 (MBR partition #1)
Enter an MBR hex code (default 07): 
Set the bootable flag? (Y/N): Y

Creating entry for GPT partition #1 (MBR partition #2)
Enter an MBR hex code (default 83): 
...
Unused partition space(s) found. Use one to protect more partitions? (Y/N): N

Recovery/transformation command (? for help): o

Disk size is 625142448 sectors (298.1 GiB)
MBR disk identifier: 0x00000000
MBR partitions:

Number  Boot  Start Sector   End Sector   Status      Code
   1      *      566233088    625142414   primary     0x07
   2                  2048    566233087   primary     0x83
   4                     1         2047   primary     0xEE


Recovery/transformation command (? for help): w</pre>}}

Verify successful operation by listing the devices.

{{Note|In the example above, {{Key|N}} was used to answer the safe questions because without that <kbd>/fdisk -l /dev/sdg</kbd> will list the MBR partition list just fine but listing the block devices with a <kbd>ls /dev</kbd> wouldn't list the partitions and more annoying: the partitions wouldn't be listed in DOS/BIOS.}}

{{Note|I had to manually remove the <code>EE00</code> (GPT protective) partition in the MBR list for that drive using <kbd>fdisk</kbd>, because <kbd>fdisk</kbd> listed that partition as being the third one. And I couldn't get the BIOS/DOS recognize the partition table with its presence. This is quite weird (as the previous output shows) because the MBR partition table was correctly recognized when the hybrid MBR was freshly created. I had to reload GPT partition table from a file and re-hybridize the MBR a second time after a few experiments.}}

And finally install GRUB2. See the Troubleshooting section below for possible issues not listed in the notes above.

== Chainloading ==
GRUB2 was built with a truly improved chainload mode when compared to GRUB Legacy. The new ISO (or loop) chainload mechanism makes chainloading a breeze. It is actually possible to chainload ISO images (LiveCD/DVDs) with GRUB Legacy, however there exists no way to pass kernel cmd line arguments before boot. In any case, the ISO images in question should be built keeping kernel cmd line arguments in mind. The SystemRescueCd or, on a lesser extent, Gentoo Minimal LiveCD. Without kernel cmd line options, booting ISO images with GRUB2 will fail in the physical media check/test stage of the ISOs boot process. Gentoo liveCD is handy because it has a minimal shell which lets the user mount the squashed image to the correct location and then press the {{Key|Esc}} key to continue the boot process. This makes it possible to have a handy way to install an operating system with everything in RAM, especially for "light weight" LiveCDs. No more need to listen to a whining CD/DVD drive on each new command!

=== ISO images ===
To chainload an ISO with custom or default kernel cmdline arguments, an entry similar to (or exactly like) the following can be added to GRUB2's {{Path|grub.cfg}} file:
{{CodeBox|<pre>
menuentry "SYSRESCUECD" {
	set iso=/systemrescuecd-x86-3.8.1.iso
	loopback loop ${iso}
	linux  (loop)/isolinux/rescue64 nomodeset vga=791 docache setkmap=fr isoloop=${iso}
	initrd (loop)/isolinux/initram.igz
}</pre>}}

For a permanent and automatic entry to GRUB2's {{Path|grub.cfg}} file, a custom script could be added to the {{Path|/etc/grub.d}} script location:
{{FileBox|filename=/etc/grub.d/50_isofile|<pre>
#!/bin/sh
exec tail -n +3 $0

menuentry "GRUB4DOS" {
	linux /grub4dos-0.4.4/grub.exe --config-file=/menu.lst
}

menuentry "SYSRESCUECD" {
	set iso=/systemrescuecd-x86-3.8.1.iso
	loopback loop ${iso}
	linux  (loop)/isolinux/rescue64 nomodeset vga=791 docache setkmap=fr isoloop=${iso}
	initrd (loop)/isolinux/initram.igz
}

menuentry "STG3-AMD64" {
	set cmdline="dokeymap looptype=squashfs loop=/image.squashfs cdroot"
	loopback loop /stg3-amd64-<DATE>.iso
	linux  (loop)/isolinux/gentoo $cmdline root=/dev/ram0 init=/linuxrc initrd=gentoo.igz
	initrd (loop)/isolinux/gentoo.igz
}
</pre>}}

Do not forget to make the script executable:

{{RootCmd|chmod +x /etc/grub.d/50_isofile}}

Finally regenerate GRUB2's {{Path|grub.cfg}} file using <kbd>grub2-mkconfig</kbd> command.

=== Another Bootloader ===
Chainloading another bootloader to GRUB2 is fairly easy if support in GRUB2 for the specific bootloader in question. Otherwise, one could use a ''man in the middle'' (in other works "another bootloader") to do the task.  In the latter case, one could use GRUB4DOS as it has functionalities similar to GRUB Legacy. This is required when loading another bootloader like TrueCrypt becomes problematic in a single multiboot disk. Otherwise something as simple as the following example is enough to boot another disk that uses a "Custom Super Bootloader":

{{CodeBox|<pre>
menuentry "Custom Super Bootloader Example" {
     insmod part_msdos
     insmod chain
     chainloader (hd1,1)+1
}
</pre>}}

=== TrueCrypt ===
To make a long story short GRUB2 cannot chainload a disk with TrueCrypt in the MBR or Rescue CD image located in encrypted partitions. For other boot loaders this is perfectly possible, feasible; it even works with GRUB Legacy. It also works with [https://sites.google.com/site/grubdos/ GRUB4DOS] (which could be used as workaround; see {{Bug|385619}} for more information) If attempting to boot from an single disk that contains a TrueCrypt partition use the above GRUB4DOS menu entry as a starting point. The infamous `invalid signature' await the more adventurous ones who attempt to do so using GRUB2. 

Since GRUB2 has problems with attempting to boot an encrypted TrueCrypt partition, use either GRUB Legacy or GRUB4DOS as workaround. GRUB4DOS has an interface very similar to GRUB Legacy and menu.lst entry which can be used to chainload the TrueCrypt bootloader or to boot a Rescue CD (from an encrypted partition on the same disk). An executable with <code>grldr</code> in the {{Path|/}} root of the booting device is required, plus a menu.lst. See below for a menu entry example. Chainloading TrueCrypt bootloader on a '''separate''' disk is relatively simple and can be done in GRUB2 like any other bootloader.

{{CodeBox|<pre>
title Windows7-TrueCrypt-BIOS/MBR
find --set-root /truecrypt_rescue_image.iso
map --mem /truecrypt_rescue_image.iso (hd32)
map (hd0) (hd1)
map (hd1) (hd0)
map --hook
root (hd32)
chainloader (hd32)
</pre>}}

{{Note|The remapping may not be necessary if the system has a single boot disk. The mapping '''is''' necessary before chainloading TrueCrypt bootloader in the case that the boot disk (hd1 as shown in the example above) should appear as the primary boot device (hd0), otherwise TrueCrypt would fail to boot because the correct disk will not be found.}}

Another workaround cited on the bug is to boot from TrueCrypt as the main boot loader and then hit the {{Key|Esc}} to chainload the following partition (if one exists) or the following disk.

=== Windows (MSDOS based boot loaders) ===
If Windows (or any other MSDOS based bootloaders) are on another disk partitioned with a MSDOS partition layout with its bootloader within the MBR, then it should be possible to boot using a simple menu entry as the previous example in the [[GRUB2#Chainloading#Another_Bootloader]] section.  '''This''' section describes how to probe and manually specify a Windows partition for booting.  This use case is encountered when multiple Windows operating systems are installed on a single hard disk.

Microsoft Windows 8 (and above versions) are no longer installed using MSDOS partitions by default, however they do maintain backwards compatibility with BIOS MBR systems. In order to specify Windows 8 (and above) to use MSDOS partitioning the install DVD needs to be booted in BIOS mode (a non-UEFI boot mode) in order for Windows to install into MSDOS partitions. Manually create a MSDOS partition layout, then manually boot the Windows DVD using a BIOS option in the boot menu list. Sometimes it is necessary in the BIOS firmware configuration tool to disable UEFI mode completely in order to force BIOS MBR mode.

Opinions differ on whether MBR (MSDOS) or GPT EFI is partition schemes are better. MBR is older, it's limited to using no greater than 3TB drives and can only have four primary partitions (more if logical partitions are used). GTP EFI has newer, up to date standards, and is compatible with drives greater than 3TB. GPT EFI can have as many primary partitions as desired, however not all motherboard hardware has support for EFI firmware options. It might be best to stick with the simple MSDOS option until extra disk space is absolutely needed.

{{Note|When installing Windows 8 into GPT partitions, unlike Linux and other operating systems, Windows 8 requires a UEFI partition in order to use a GPT partition layout.}}

==== MSDOS Partitions ====
{{Note|Complications will arise if Windows is in another partition of the disk and the partition is encrypted (with TrueCrypt for example), or simply if a hybrid MBR is involved.}}

{{Note|If a dual boot system using MBR is the end goal, it is easiest to install Windows on a separate disk. However, if Windows will be installed to a disk with a pre-existing Linux installation, then creating a backup the MBR (or at least the bootloader portion) '''before''' installing Windows will ensure a recovery option exists. Windows '''will''' overwrite any existing MBR structure rendering a "Windows only" boot.}}

The simplest way to dual boot Windows (or MS-DOS) is to add an MBR menu entry to GRUB2's {{Path|grub.cfg}} file for each Windows operating system installed.

Windows 7 example the {{Path|grub.cfg}} file:

{{CodeBox|<pre>menuentry "Windows 7 BIOS MBR" {
     insmod part_msdos
     insmod ntldr
     insmod ntfs
     ntldr (hd0,msdos1)/bootmgr
}</pre>}}

A Windows XP example the {{Path|grub.cfg}} file:

{{CodeBox|<pre>menuentry "Windows XP BIOS MBR" {
     insmod part_msdos
     insmod ntldr
     insmod ntfs
     ntldr (hd0,msdos1)/ntldr
}</pre>}}

An entry for a GPT hybrid MBR works bit different than the previous '''BIOS''' - MBR examples. Booting multiple versions of Windows can be achieved with remapping and/or hiding partitions with GRUB2's <code>parttool</code> option:

{{CodeBox|<pre>menuentry "Windows 7 BIOS MBR" {
     insmod part_msdos
     insmod chain
     parttool hd1,msdos1 hidden+ boot-
     parttool hd1,msdos2 hidden- boot+
     chainloader (hd1,msdos2)+1
}</pre>}}

{{Note|Remapping the disk with <code>parttool</code> in the manner above is only required if multiple Windows systems are installed on the same disk.}}

Remapping the devices to set the primary boot disk to additional disks can be achieved by setting the {{Path|grub.cfg}} file to something like the following example:

{{CodeBox|<pre>menuentry "Windows 7 BIOS MBR" {
     insmod part_msdos
     insmod chain
     drivemap hd0 hd1
     chainloader (hd1,msdos2)+1
}</pre>}}

===== Probing =====
GRUB2 is capable of automatically finding Windows partitions and assigning the root partitions. The Windows partition must first be mounted before the probe will be successful. See notes at the end of this section concerning missing {{Path|C:\bootmgr}} and {{Path|C:\Boot}} files and folders; it is wise to make these folders do exist before trying to boot Windows using GRUB2.

Probing feature requires {{Package|sys-boot/os-prober}} package which is not initially pulled in when installing GRUB2.
{{Emerge
|sys-boot/os-prober
|params+=--newuse
}}

{{RootCmd|1=grub2-probe --target=hints_string /mnt/windows7/bootmgr
|output=<pre>--hint-bios=hd1,msdos1 --hint-efi=hd1,msdos1 --hint-baremetal=ahci1,msdos1</pre>}}

{{RootCmd|1=grub2-probe --target=fs_uuid /mnt/windows7/bootmgr|
output=<pre>2ABF87DC395CFC02</pre>}}

From the output provided by the above two commands, the ''search'' line within GRUB2's {{Path|grub2.cfg}} file (below) can be constructed. Remapping the drive and partition as the first hard drive and first partition will make Windows XP or Windows 8 more free of silent errors while loading. Also note from the previously covered <code>ntldr</code> module usage, specifying the $root prefix is no longer needed. Using it will generate boot errors.

{{CodeBox|<pre>menuentry 'Microsoft Windows 7 or Windows 8 (on sdb1)' --class windows {
        insmod part_msdos
        insmod ntfs
        insmod search_fs_uuid
        insmod ntldr
        search --fs-uuid --set=root --hint-bios=hd1,msdos1 --hint-efi=hd1,msdos1 --hint-baremetal=ahci1,msdos1 2ABF87DC395CFC02
        drivemap (hd1,msdos1) (hd0,msdos1)
        #Or, "drivemap (hd1,msdos2) (hd0,msdos1)" for those with Windows installed on sdb2)
        ntldr /bootmgr
}</pre>}}

{{Important|If the {{Path|C:\bootmgr}} and the {{Path|C:\Boot}} folders for which the bootmgr file is linked do not exist, the files need to be installed using an Administrator <kbd>cmd.exe</kbd> shell (escalated command prompt). Regeneration should be possible by using this command: {{Cmd|prompt=C:\>|color=white|bcdboot c:\Windows /s c:}}}}

Seeing a boot error message concerning a missing bootmgr file after attempting to boot one of the previously mentioned {{Path|grub.cfg}} entries is the indication the {{Path|C:\Boot}} folder is missing. This happens when using Windows 8 since the {{Path|C:\Boot}} folder does not seem to be generated by default.

==== GPT Partitions ====
In the case the Windows bootloader was overwritten with GRUB2 or if {{Path|bootmgr}} doesn't do the trick, a UEFI dual boot could be achieved using the following menu entry:

{{CodeBox|<pre>menuentry "Windows 7 UEFI/GPT" {
    insmod part_gpt
    insmod search_fs_uuid
    insmod chain
    search --fs-uuid --no-floppy --set{{=}}root 28cf-35de
    chainloader ($root)/EFI/MICROSOFT/BOOT/bootmgfw.efi
}</pre>}}

== Extended Features ==

=== Enabling Resume Swap for Suspend ===
Open up {{Path|/etc/default/grub}} with root privileges and add: 

{{CodeBox|<pre>GRUB_CMDLINE_LINUX="resume=/dev/sdXY"</pre>}} 

Where ''XY'' is the swap partition location, which can be found by running the <code>fdisk</code> command:

{{RootCmd|fdisk -l}} 

If it appears UUID labels are being used in {{Path|/etc/default/grub}} instead of a device path then enter the UUID instead. In order to update the menulist with the startup information that was changed in GRUB2's configuration file ({{Path|/etc/default/grub}}) run: 

{{RootCmd|grub2-mkconfig -o /boot/grub/grub.cfg}}

=== Chroot ===
When a separate {{Path|/boot}} partition exists, be sure to mount the target root partition before chrooting, but do not the {{Path|/boot}} partition until '''after''' chrooting to the new environment. This is required because <kbd>grub2-mkconfig</kbd> will not detect {{Path|/boot}} as a separate partition and will assume {{Path|/boot}} and root are on the same partition.

=== Booting from LVM, RAID and/or Encrypted Volumes ===

This section is based on converting a non-UEFI, MBR partition based system to boot from a GPT RAID enabled disk. It is currently incomplete, and partially edited from the previous version.

{{Note|In '''BIOS''' - MBR disks, leave a space at the start of the disk for GRUB2 to be installed. The conventional 32 kilobytes (63 sectors of 512 bytes) is not enough for GRUB2 when RAID is enabled, the space should be at least 1MB (the first primary partition should start on or after sector 2048). Most disk partition utilities automatically perform this operation.

On '''BIOS''' - GPT disks, explicit allocation of space for the GRUB2 BIOS boot partition must be provided. Create a disk at least 1 MB in size, type <code>EF02</code> (BIOS boot partition). (This will not be used in a UEFI system, so you could use the same space for the EFI partition (type <code>EF00</code>) when swapping the disk between systems)

For the following three code blocks, first observe the output of GRUB2 installing on the first few sectors (only 63 sectors of 512 bytes) of a disk. Installing with limited sectors will cripple GRUB2's operation making it incapable of supporting complex disk setups such as RAID and ultimately unable to boot the system. GRUB2's outpout on the second block (a disk with 2048 sectors free before the first primary partition) displays adequate output. The output from GRUB2 in the third block shows the <code>EF02</code> partition (without which GRUB2 will refuse to install).
}}

{{CodeBox|title=Code block 1|<pre>Disk /dev/sda: 160.0 GB, 160000000000 bytes, 312500000 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x000cfe45

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *          63    48821534    24410736   8e  Linux LVM</pre>}}

{{CodeBox|title=Code block 2|<pre>Disk /dev/sda: 320.1 GB, 320072933376 bytes, 625142448 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0009d633

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048      499711      248832   8e  Linux LVM</pre>}}

{{CodeBox|title=Code block 3|<pre>GPT fdisk (gdisk) version 0.8.8

Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present

Found valid GPT with protective MBR; using GPT.
Disk /dev/sdb: 5860533168 sectors, 2.7 TiB
Logical sector size: 512 bytes
Disk identifier (GUID): 47915407-BA7E-4869-8D3E-3CB44F5FDA12
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 5860533134
Partitions will be aligned on 2048-sector boundaries
Total free space is 1050590 sectors (513.0 MiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048         1050623   512.0 MiB   EF02  BIOS boot partition
   2         1312768        68421631   32.0 GiB    8200  Linux swap
   3        68683776       270010367   96.0 GiB    8300  root
   4       270272512       471599103   96.0 GiB    8300  var
   5       471861248      5860533134   2.5 TiB     8300  home</pre>}}

==== Booting from LVM Logical Volumes ====
GRUB2 supports booting from an [[LVM]] partition however the <code>device-mapper</code> USE flag must be set in order to activate this feature.

{{FileBox|filename=/etc/portage/package.use|<pre>
sys-boot/grub:2 device-mapper
</pre>}}

If GRUB2 is currently installed, re-emerge it using the <tt>--newuse</tt> option:

{{Emerge
|sys-block/grub:2
|params+=--newuse
}}

Next tell GRUB2 to pre-load the <code>lvm</code> module:

{{RootCmd|echo "GRUB_PRELOAD_MODULES{{=}}lvm" >> /etc/default/grub}}

Finally (re)generate a GRUB2 {{Path|grub.cfg}} file using the <kbd>grub2-mkconfig</kbd> command.

==== Booting from RAID Array ====

After considerable grief, the following working configuration was obtained. 

The system has three hard drives. /dev/sda is the original MBR Windows Vista disk, untouched apart from installing GRUB2 onto it. /dev/sdb and /dev/sdc are configured identically.

{{CodeBox|<pre>GPT fdisk (gdisk) version 0.8.10

Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present

Found valid GPT with protective MBR; using GPT.
Disk /dev/sdc: 1953525168 sectors, 931.5 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): CB232664-F98D-45C0-8111-2AC526D5EA61
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 1953525134
Partitions will be aligned on 2048-sector boundaries
Total free space is 509918 sectors (249.0 MiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048        67110911   32.0 GiB    8200  Linux swap
   2        67110912        67127295   8.0 MiB     EF02  BIOS boot partition
   3        67373056       402917375   160.0 GiB   8300  Linux filesystem
   4       403179520      1953525134   739.3 GiB   8300  Linux filesystem</pre>}}

sdb3/sdc3 are raided together to make the / partition.

sdb4/sdc4 are raided together to make the /home partition.

{{CodeBox|<pre>menuentry 'Gentoo GNU/Linux, with Linux x86_64-3.14.14-gentoo' --class gentoo --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-x86_64-3.14.14-gentoo-advanced-8bb0e52c-d524-4af8-ac08-f3c9238c6040' {
	load_video
	set gfxpayload=keep
	insmod gzio
	insmod part_msdos
	insmod part_gpt
	insmod diskfilter
	insmod mdraid1x
	insmod ext2
	set root='mduuid/660afb13150e817a0cdd36476d5b2c51'
	if [ x$feature_platform_search_hint = xy ]; then
	  search --no-floppy --fs-uuid --set=root --hint='mduuid/660afb13150e817a0cdd36476d5b2c51'  8bb0e52c-d524-4af8-ac08-f3c9238c6040
	else
	  search --no-floppy --fs-uuid --set=root 8bb0e52c-d524-4af8-ac08-f3c9238c6040
	fi
	echo	'Loading Linux x86_64-3.14.14-gentoo ...'
	linux	/boot/kernel-3.14.14-gentoo domdadm root=UUID=8bb0e52c-d524-4af8-ac08-f3c9238c6040 ro  
	echo	'Loading initial ramdisk ...'
	initrd	/boot/initramfs-genkernel-x86_64-3.14.14-gentoo
}

menuentry 'Gentoo GNU/Linux mirror 2' --class gentoo --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-simple-8bb0e52c-d524-4af8-ac08-f3c9238c6040' {
        load_video
        insmod gzio
        insmod part_msdos
        insmod part_gpt
	insmod mdraid1x
        insmod ext2
        set root=(mduuid/660afb13:150e817a:0cdd3647:6d5b2c51)
        if [ x$feature_platform_search_hint = xy ]; then
	          search --no-floppy --fs-uuid --set=root --hint-bios=hd1,msdos2 --hint-efi=hd1,msdos2 --hint-baremetal=ahci1,msdos2 --hint='hd1,msdos2'  8bb0e52c-d524-4af8-ac08-f3c9238c6040
          else
		  search --no-floppy --fs-uuid --set=root 660afb13:150e817a:0cdd3647:6d5b2c51
        fi
	echo    'Loading Linux 3.14.14-gentoo ...'
	linux   /boot/kernel-3.14.14-gentoo domdadm root=/dev/disk/by-id/md-uuid-660afb13:150e817a:0cdd3647:6d5b2c51 ro
	echo    'Loading initial ramdisk ...'
	initrd  /boot/initramfs-genkernel-x86_64-3.14.14-gentoo
}
</pre>}}

<code>insmod part_gpt</code> (or <code>insmod part_msdos</code>) is needed otherwise GRUB2 will not be able to read the partition table.

<code>insmod mdraid1x</code> is required for RAID v1.1 or higher. If using RAID v0.9 or v1.0 the RAID module might not be needed (<code>mdraid09</code> for v0.9) because the RAID information is stored at the end of the partition. Any references to <code>insmod raid</code> are obsolete.

<code>insmod ext2</code> is required for ext partitions. For a other file systems substitute the appropriate module.

<code>set root='mduuid/660afb13150e817a0cdd36476d5b2c51'</code> tells GRUB2 what root device Linux will be using.

At this point, GRUB2 is ready to hand over control to Linux. Any errors up to this point (missing modules, missing boot partition, etc.) are problems with GRUB2 not the Linux kernel. Onward from this point, it is safe to narrow errors down to Linux.

Linux is unable to assemble RAID assemblies in the kernel. It must call out to user-space tools; if the root partition is a RAID set, an initramfs '''must''' be used.

{{Warning|Do '''not''' use <kbd>genkernel</kbd> utility to generate a kernel when using a RAID set for the root partition.
}}

Make sure the kernel is configured correctly. Especially make sure that <code>CONFIG_FHANDLE</code> variable is set (this is why genkernel> must not be used - genkernel will reset the value of <code>CONFIG_FHANDLE</code> and reap havoc upon the RAID set).

Compile the kernel manually by running the following commands as root:

{{RootCmd
|cd /usr/src/linux
|make
|make modules_install
|make install
}}

At this point it is probably a good idea to <kbd>emerge udev</kbd> - and make sure all warnings are fixed! This is how I picked up on FHANDLE, before that the raid was randomly losing devices (separate from, but confused with, it losing the root device led to a real puzzle).

Use the <kbd>genkernel</kbd> utility to generate an initramfs:

{{RootCmd
|genkernel --mdadm --disklabel all --install initramfs
}}

{{Note| The <tt>--mdadm</tt> option is needed to make the initramfs RAID-aware, and apparently the <tt>--disklabel</tt> option is needed to view disk UUIDs.}}

The linux and initrd lines in {{Path|/boot/grub/grub.cfg}} should now load the Linux kernel. Add the <code>domdadm</code> parameter to the Linux kernel cmdline in GRUB2. Without it the RAID set will not assemble and the Linux kernel will not find the root device.

Note that the second boot option contains a deliberate error. Linux will be unable to find root device by itself and will drop into the GRUB2 shell. ''This is needed.''

The first boot option correctly assembles the root RAID set at boot time, and boots successfully. Any attempt to access the root device from user space will fail as if the RAID set does not exist. This breaks GRUB2, and making the mistake of trying to run <kbd>grub2-install</kbd> on top of these errors will break GRUB boot altogether. Make sure Rescue CD and a copy of the Gentoo handbook are easily available before attempting to use a RAID set on the root disk.

The second option drops into a GRUB2 shell. Running <kbd>ls /dev/md*</kbd> will show that initrd has found the RAID set devices, and giving it the device, eg /dev/md127, will boot into a fully working system with userspace access to the boot device.

Put these into a {{Path|/etc/grub.d}} script at the first available opportunity.

Further documentation on this subject, along with booting from encrypted physical volumes, is close to null. 

Any further documentation from a user that has successfully booted a system from a RAID array welcome to complete add a RAID boot section to this article.

{{Note|Booting from RAID is only relevant for BIOS [boot]. EFI users shall roll out their custom initramfs or use an initramfs package available out there. Depending on your setup, you may use either a BIOS - MBR or a BIOS - GPT combination. Here is an example to a BIOS - GPT setup with {{Path|/boot}} and <code>root</code> {{Path|/}} in a RAID-1 configuration [http://sinodun.com/2010/07/installing-grub2-on-gnulinux-software-raid/] and Xen on RAID-5.}}

{{Note|The <kbd>grub2-mkdevicemap</kbd> command and UUID re-setting have been removed and are no longer distributed with GRUB2. The UUID problem GRUB2 once had no longer appears to be an issue. Installing to two devices in a RAID-1 configuration seemed to work with no problems; This is the command that was successful <kbd>grub2-install /dev/sda && grub2-install /dev/sdb</kbd> (after creating the expected </code>EF02</code> BIOS boot partition).}}

{{Important|If this is a new installation of Gentoo, be sure to <kbd>emerge mdadm</kbd> in the chrooted environment before attempting to install GRUB2 as described in the note above, otherwise it will fail with '''"Path {{Path|/boot/grub}} is not readable by GRUB on boot. Installation is impossible. Aborting."'''  After installing the <kbd>mdadm</kbd> tool, GRUB2 can correctly read the RAID devices. The <kbd>grub2-install /dev/sda</kbd> and <kbd>grub2-install /dev/sdb</kbd> should work as expected on a RAID-1 array comprised of {{Path|/dev/sda2}} and {{Path|/dev/sdb2}} for boot.}}

Booting from a RAID array is very similar to booting from a LVM Logical Volume aside from RAID specific terminology and syntax of RAID partitioned volume.

{{CodeBox|<pre>...
     insmod raid
#    and load the related `mdraid' module `mdraid09' for RAID arrays with version 0.9 metadata, and `mdraid1x' for arrays with version 1.x metadata.
     insmod mdraid09
     set root=(md0p1)
#    or the following for an unpartitioned RAID array
     set root=(md0)
...</pre>}}

{{Note|A bleeding edge RAID user might emerge the live ebuild to get the latest bit of fixes and updates.}}

{{Note|A NVidia (dm_nv) specific module for RAID 3/5, so something like `insmod dm_nv' is necessary for NVidia related hardware.}}

This should work with a simple software RAID setup. However, the author has no idea or what command, if any exit at the moment of writing, to use to assemble an array such as <kbd>mdadm --assemble --scan /dev/md0</kbd> that an initramfs could take care of.

==== Booting from LUKS I havePhysical Volume ====

Tell GRUB2 to look for cryptodisks:
{{RootCmd|echo "GRUB_CRYPTODISK_ENABLE{{=}}y" >> /etc/default/grub}}

(Re)generate the {{Path|grub.cfg}} with the <code>grub2-mkconfig</code> utility.

{{Important|In grub 2.02 and greater, this parameter was renamed to <code>GRUB_ENABLE_CRYPTODISK</code>}}

=== Booting from Network (PXE) ===
For more information on network booting with GRUB2, read the official "[https://www.gnu.org/software/grub/manual/grub.html#Network Network (PXE)]" section from the GNU software manual.

=== Using Framebuffer Display ===
To have GRUB2 use a [[framebuffer]] graphical display, re-emerge GRUB with the <code>truetype</code> USE flag enabled. This will install a default True Type font as well as a font conversion utility.
{{Emerge|--newuse sys-boot/grub:2}}

Proceed to configure the default GRUB2 configuration file located at {{Path|/etc/default/grub}} For example:

{{FileBox|filename=/etc/default/grub|title=Framebuffer related settings|lang=bash|1=
…
# Set resolution and color depth
GRUB_GFXMODE=1366x768x32

# Keep resolution when loading the kernel
GRUB_GFXPAYLOAD_LINUX=keep

# Set a background image
GRUB_BACKGROUND="/boot/grub/bg.png"

# Use a custom font, converted using grub2-mkfont utility
GRUB_FONT="/boot/grub/fonts/roboto.pf2"
}}

In order to find out what display modes the system's graphics card supports, use the following commands on the GRUB2 shell:

{{Cmd|prompt=(grub)|color=white|insmod all_video|videoinfo
}}

== Troubleshooting ==
First off, checkout if you have an EFI02 (GPT disk) or bios_grub ([G]parted) for '''BIOS''' - GPT installation or enough gap before the first partition of the disk or the boot partition for '''BIOS''' - MBR installation before firing up `grub2-install' command. This will spare you some time.

Secondly, checkout if {{Path|/boot/grub/grub.cfg}} was correctly generated with <kbd>grub2-mkconfig</kbd> or generate one yourself with a custom menuentry. Refer to previous section for more information. Do not fail to do this simple check before rebooting!

=== GPT Hybrid MBR Workaround ===
GRUB2 requires an <code>EE00</code> partition type at the first listing in the MBR partition list entry, howver it may pose a problem when booting other operating systems on the same disk (especially Windows). A workaround is available in order to recognize a GPT partitioned disk with (or without) hybrid MBR. Removing any protective <code>EE00</code> partition with the <kbd>fdisk</kbd> command.
{{Warning|Not NOT USE gdisk to remove the <code>EE00</code> partition! The <kbd>gdisk</kbd> command does not work because a "fake" partition exists to protect the main GPT table while booted in '''BIOS''' - MBR mode.}}

Use other disk tools such as <kbd>parted</kbd> ({{Package|sys-block/parted}}) or <kbd>gparted</kbd> ({{Package|sys-block/gparted}}) to resize after that. Otherwise use gdisk to add protective <code>EE00</code> partitions to protect at least GPT main and backup the partition before using any non-GPT aware tools if necessary.

Another issue should be addressed when attemping to use a GPT Hybrid MBR configuration: Windows (MSDOS based bootloaders) may not find suitable partitions to boot from if there is a <code>EE00</code> partition protecting the GPT main partition table (sectors 1-2047). If this happens remove the protective <code>EE00</code> partition before getting a valid MBR partition list in [MS]DOS tools (to format a partition for example, the tools recognized a GPT partitioned disk at least). And ''then'' use gdisk to recompute the CHS value for hybrid MBR (in the ''recovery and transformation'' menu, or in the ''expert'' section of gdisk's main menu).

=== Repopulating EFI Boot Manager Entries ===

{{Note|The following examples presumes a '''32-bit''' EFI GRUB2 install, adjust accordingly for 64-bit EFI.}}

In case the Boot Manager entries need to be restored, they can be re-added without invoking <kbd>grub-install</kbd>. Load the <code>efivars</code> kernel module and install {{Package|sys-boot/efibootmgr}}:
	 
{{RootCmd|modprobe efivars}}

{{Emerge|sys-boot/efibootmgr}}

Next add a boot menu entry:

{{RootCmd|efibootmgr --create --gpt --disk /dev/sda --part 1 --write-signature --label "gentoo" --loader "\\EFI\\gentoo\\grubx86.efi"}}

=== Installation Errors ===

==== grub2-install: Error: Cannot find EFI directory. ====

{{Note|The following examples presumes a '''64-bit''' EFI GRUB2 install, adjust accordingly for 32-bit EFI.}}

'''Error message:'''

{{RootCmd|grub2-install --target{{=}}x86_64-efi|output=<pre>
grub2-install: error: cannot find EFI directory.
</pre>}}

'''Resolution:'''

Properly setting the <code>GRUB_PLATFORMS</code> variable in {{Path|/etc/portage/make.conf}} (the first time!) as listed above would have resolved this error. Set the <code>GRUB_PLATFORMS</code> variable then re-emerge GRUB2 using the following command:
{{Emerge
|--newuse
|sys-boot/grub:2}}

In the case this error persists try forcing the install to the EFI directory by issuing the grub2-install command with correct parameters for the <tt>--target</tt> and <tt>--efi-directory</tt> options:
{{RootCmd|grub2-install --target{{=}}x86_64-efi --efi-directory{{=}}/boot}}

==== Attempting to Install GRUB2 to a Disk or Partition ====

'''Error message:'''

{{RootCmd|grub2-install /dev/sda1 |output=<pre>
Attempting to install GRUB to a partition disk or to a partition.  This is a BAD idea.
Embedding is not possible.  GRUB can only be installed in this setup by using blocklists. 
However, blocklists are UNRELIABLE and their use is discouraged.
</pre>}}

'''Possible explanations followed by resolutions:'''

# A {{Path|/boot}} partition is not mounted, run (as root) <kbd>mount /boot</kbd>
# Attempting to install GRUB2 with a traditional ''BIOS'' - GPT setup. This could mean there is not any <code>EF02</code> or <code>bios_boot</code> partition to embed the {{Path|core.img}} file. Creating a little partition of a few hundreds kilobytes may be enough, although it is good practice to align this partition to 2048 sectors to avoid a performance penalty with the disk. A 1 MiB partition should work well.
# Attempting to install GRUB2 in a partition e.g. {{Path|/dev/sda5}} using a ''BIOS'' - MBR setup (who did try it to ''BIOS'' - GPT?), simply add <tt>--force</tt> option switch to force install. It should behave with enough gap before the first sector of first partition or by using the <kbd>chattr</kbd> command (as described in the [[GRUB2#BIOS_MBR|''BIOS'' - MBR instructions above]]). It is also possible to destroy the partition boundary and the LUKS or LVM2 header (if one exists).
# If <kbd>grub2-install</kbd> does not print any errors message or if the error message is about scanning disk files and several platforms are enabled in {{Path|/etc/portage/make.conf}} while nothing is installed on the disk, then edit the {{Path|/sbin/grub2-install}} script with a text editor of choice. Change the <code>platform</code> variable to appropriate platform for the current use case. The platform ''must'' be rightly set when emerging {{Package|sys-boot/grub}}, else it will be incorrectly configured in the {{Path|/sbin/grub2-install}} script. For example, to set the platform for "PC", change <code>platform=qemu</code> to <code>platform=pc</code>.
{{Note|Step 4 is true for sys-boot/grub-1.99x only... for sys-boot/grub-2.x the correct file to investigate can be found at {{Path|/etc/grub.d/00_header}}, transform{{=}}"s,grub,grub2-qemu," to transform{{=}}"s,grub,grub2," for example, to install rightly with grub2-$platform-install.}}

==== No Post-MBR Gap (Free Space) ====

'''Error message:'''

{{RootCmd|grub2-bios-setup|output=<pre>
grub-setup: warn: This msdos-style partition label has no post-MBR gap; embedding won't be possible!
grub2-bios-setup: warn: Embedding is not possible. GRUB can only be installed in this setup by using blocklists.
            However, blocklists are UNRELIABLE and its use is discouraged.
grub2-bios-setup: error: If you really want blocklists, use --force.
</pre>}}

'''Explanation:'''

This error means, that GRUB2 could not find the usual gap between the MBR and first partition of a disk. It is possible that the gap does not exist. Some tools (e.g. LiveUSB disk installer) format disks so that the first partition starts at sector 1 instead of 2048. 

'''Resolution:'''

Repartitioning the disk should resolve the issue.

Some visualization-based blockdevices can also cause problems. See [http://bbs.archlinux.org/viewtopic.php?pid=581760#p581760 this post] from the Arch Linux forum for more information.

==== Embedding Area is Unusually Small ====

'''Error message:'''

{{RootCmd|grub2-install /dev/sda|output=<pre>
grub2-install: warn: Your embedding area is unusually
small. core.img won't fit in it.
grub2-install: warn: Embedding is not possible. GRUB can
only be installed in this setup by using blocklists. However,
blocklists are UNRELIABLE and their use is discouraged.
grub2-install: error: will not proceed with blocklists.
</pre>}}

'''Explanation:'''

There is not enough room at the beginning of the disk ''before'' the first partition.

'''Resolution:'''

In general this is a bit of trouble to fix. One or more partitions need to be resized in order to leave some free space at the beginning of the drive. The [http://gparted.sourceforge.net/livecd.php GParted LiveCD] or Gentoo-based [[http://sourceforge.net/projects/systemrescuecd/ SystemRescueCD]] are excellent tools to make this job less difficult.

If the swap partition is the first partition on the disk (e.g. {{Path|/dev/sda1}}) it is possible to simply remove the existing swap space partition and re-partition the space. This resolution would avoid the need for booting into a live medium in order to resize a root ({{Path|/}}) partition. 

Begin by disabling the swap partition and launching fdisk:

{{RootCmd|swapoff /dev/sda1
|fdisk /dev/sda}}

This should bring up the fdisk prompt, where the following commands can be entered to shrink the partition found on {{Path|/dev/sda1}}:

* {{Key|x}} - extra functionality
* {{Key|b}} - move beginning of data in a partition
* {{Key|1}} - Choose the first partition
* {{Key|4096}} - New beginning of data (1-8000369, default 63)
* {{Key|w}} - write table to disk and exit

A number smaller than 4096 may work, but 4096 is a wise choice.

Next, reformat the swap partition, and re-enable it:

{{RootCmd|mkswap /dev/sda1
|swapon /dev/sda1}}

It should now be possible to install GRUB2 onto {{Path|/dev/sda}}.

== DualBoot Gentoo and FreeBSD [MBR] ==

Change the <code>40_custom</code> grub.d script located at {{Path|/etc/grub.d/40_custom}} to:  

{{FileBox|filename=/etc/grub.d/40_custom|title=Adding DualBoot|<nowiki>
menuentry "FreeBSD" --class freebsd --class bsd --class os {
 insmod ufs2
 insmod bsd
 set root=(hd0,1)
 kfreebsd /boot/kernel/kernel
 kfreebsd_loadenv /boot/device.hints
 set kFreeBSD.vfs.root.mountfrom=ufs:/dev/ada0s1a
 set kFreeBSD.vfs.root.mountfrom.options=rw
 set kFreeBSD.hw.psm.synaptics_support=1
}
</nowiki>}}

{{Path|/dev/sda1}} or <pre>(hd0,1)</pre> is the partition in which FreeBSD resides. If the normal <code>UFS</code> install was used for the FreeBSD partition then {{Path|/dev/sda1}} is a container (something like a logical partition). It consists of the swap and root partition. Verify the <code>40_custom</code> script is executable by running <code>ls -la /etc/grub.d/40_custom</code>. If the executable bit is not set then set it using the <code>chmod u+x 40_custom</code> command.  

Next install GRUB2 using the <kbd>grub2-install</kbd> command and update GRUB2's mkconfig file:
{{RootCmd|grub2-install /dev/sda
|grub2-mkconfig -o /boot/grub/grub.cfg}}  
  
Unless modified by the end user, script files in located in {{Path|/etc/grub.d}} are executable and will be read by GRUB2 to create boot configuration files ({{Path|grub.cfg}}).

== External Resources ==
* [https://www.gnu.org/software/grub/manual/grub.html GNU GRUB 2 manual page]
* [http://www.rodsbooks.com/gdisk/bios.html Legacy BIOS issues with GPT article]
* [http://www.rodsbooks.com/gdisk/hybrid.html GPT and Hybrid MBR article]
* [http://www.rodsbooks.com/gdisk/ GPT fdisk utility page]
* [https://wiki.archlinux.org/index.php/GRUB2 Arch Linux GRUB2 wiki article]
* [https://fedoraproject.org/wiki/GRUB_2?rd=Grub2#Encountering_the_dreaded_GRUB_2_boot_prompt Fedora GRUB2 wiki article : Encountering the dreaded GRUB2 boot prompt]
* [https://help.ubuntu.com/community/UEFIBooting ubuntu UEFI booting help]
* [http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr]

[[Category:Bootloaders]]

</translate>
