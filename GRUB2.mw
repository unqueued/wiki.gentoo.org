{{Warning|GRUB2 GRUB2 is in development but still quite stable if I may say aside from some weird issues as the infamous `invalid signature' and thus rightly masked in portage.}}
== Introduction ==
GRUB2 is next generation, a complete rewrite, of GRUB LEGACY popular GNU/Linux boot loader. The new version has a new shell like syntax which permit advanced scripting capabilities unlike the LEGACY version. So, even seasoned GRUB LEGACY users should take a look at what GRUB2 can do to take advantage of the powerful shell like scripting along with new features.

Upgrading to GRUB 2 might be necessary as it allows:
* booting from UEFI;
* booting from GPT partitioned drives without even needing an akward hybrid MBR, even though one can one for compatibility/portability reasons;
* booting from directly logical volume management such as LVM2 support;
* booting from raid DM-RAID support 4, 6 and 10;
* and booting from encrypted devices, LUKS I assume because the inexistent documentation despite the cypther/hsh modules being there: so no guidance on a howto for the moment.

== Installation ==

GRUB2 is both hard masked and in development, so one has to both keywords and unmask the package as the following before merging the package.
{{RootCmd
|echo '<nowiki>=</nowiki>sys-boot/grub-1.99* **' >> /etc/portage/package.keywords
|echo 'sys-boot/grub:2' >> /etc/portage/package.unmask
|emerge -av sys-boot/grub:2}}
{{Note|Note the equal sign and the version number range unmasked because many new user ask all the time, and rightly with that, about not wanting to merge the live version and that, happen when sys-boot/grub:2 is unmasked like the following line. Unmask the version number range that fit you best of course.}}
{{RootCmd|echo '<nowiki>>=</nowiki>sys-boot/grub-1.99 **' >> /etc/portage/package.keywords}}
Else, one would have to undergo a manual configure, make and make install on his/her own which won't be covered by this modest contribution.

== Configuration ==

=== Partitioning and preparing boot disk ===
Before installing GRUB2 to the boot media a little care should be taken when preparing and partitioning the boot device be it an internal disk or be it a removable device. This depend on the boot type involved: BIOS or UEFI.
BIOS booting can be easily achieved with either booting from disk partitioned with the aging MBR or with GPT with a protective MBR or a hybrid MBR if dual booting is involved with GPT unaware OS like MSDOS/Windows. It's another story for UEFI as GPT is part of UEFI specification and it's mandatory to use GPT partitioned in this case. 

If dual booting is involved with Windows which cannot boot from anything else but BIOS/MBR or else on GPT partitioned disk only on EFI hardware. In the later case dual booting Windows is simple and the former is trickier a GPT partitioned disk and a hybrid MBR. More on this subject will come later.

Before going further, one could back the boot device MBR with something like:
{{RootCmd|dd if<nowiki>=</nowiki>/dev/sda of<nowiki>=</nowiki>/root/sda.mbr bs<nowiki>=</nowiki>512 count<nowiki>=</nowiki>1}}
or simply its boot loader with something like (here one can go as far as 446 bytes):
{{RootCmd|dd if<nowiki>=</nowiki>/dev/sda of<nowiki>=</nowiki>/root/sda.mbr bs<nowiki>=</nowiki>440 count<nowiki>=</nowiki>1}}

Here, one has to make a [0x]ef00 partition type. Here is an example of such a GPT partitioned disk with BIOS boot [0xef02] partition and an EFI [0xef00] partition. Here the output of the `p' command in gdisk main menu.
{{RootCmd|gdisk /dev/sdc|output=<pre>
GPT fdisk (gdisk) version 0.8.1

Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present

Found valid GPT with protective MBR; using GPT.

Command (? for help): p
Disk /dev/sdc: 976773168 sectors, 465.8 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): AA369F4D-37A4-4C0D-A357-DC24B99A6337
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 976773134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       828377087   395.0 GiB   8E00  Linux LVM
   2       828377088       891291647   30.0 GiB    0700  Microsoft basic data
   3       891291648       975177727   40.0 GiB    0700  Microsoft basic data
   4       975177728       976754687   770.0 MiB   8300  Linux filesystem
   5       976754688       976756735   1024.0 KiB  EF02  BIOS boot partition
   6       976756736       976773134   8.0 MiB     EF00  EFI System

Command (? for help): 
</pre>}}
{{Note|Note that do not have to enter the `0x' hexadecimal prefix in GPT fdisk.}}
parted gives a somewhat different output with a slightly different semantics for the same device, here is the output.
{{RootCmd|parted /dev/sdc|output=<pre>
GNU Parted 3.0
Using /dev/sdc
(parted) print
...
Sector size (logical/physical): 512B/512B
Partition Table: gpt

Number  Start   End    Size    File system  Name                  Flags
 1      1049kB  424GB  424GB                Linux LVM             lvm
 2      424GB   456GB  32.2GB               Microsoft basic data
 3      456GB   499GB  42.9GB               Microsoft basic data
 4      499GB   500GB  807MB   ext2         Linux filesystem
 5      500GB   500GB  1049kB               BIOS boot partition   bios_grub
 6      500GB   500GB  8396kB               EFI System            boot

(parted)
</pre>}}
Creating partions in gdisk is pretty straight and quick forward for somebody who use fdisk. Just type `n' in the main menu provide a beginning and end if need be and then type the partition type ef00 for EFI for example. That's all.

=== UEFI installation ===

Before setting up UEFI boot, one has to partition the boot device with a GPT compatible disk tools like GPT fdisk or gdisk, parted or gparted (a gtk gui) or other tools that I did not bother to try at this point. It's advised to have something greater than 200MB and maybe smaller than 500MB for multi boot systems. GPT disk is a powerfull tools than can be used to setup a few advanced settings like hybrid MBR or the number of alignment sectors. The default 2048 sectors (1MiB) is a sane default which will permit to make use of sector 34-2048 to embed GRUB2 core.img for example if one forgot to leave some space for BIOS boot partition.

Let's move to installing GRUB2 and setting up an EFI boot entry. I do not have an EFI board so EFI specifc boot steps is not tested!

First, create a filesystem and a mount point for the EFI partition with something like:
{{RootCmd|mkdosfs -F 32 -n efi-boot /dev/sda1
|mkdir /boot/efi
|echo 'LABEL<nowiki>=</nowiki>efi-boot /boot/efi vfat defaults 0 2' >> /etc/fstab
|mount /boot/efi
|mkdir -p /boot/efi/<nowiki>{</nowiki>EFI/BOOT,GRUB2<nowiki>}</nowiki>}}

{{Note|Note that I use /boot/efi as a mount assuming there's a classic `/boot' mount for BIOS boot, otherwise one can make use of `/boot' without the `/efi' sub-directory. The `-F 32' switch is for creating FAT32 and `-n efi-boot' the LABEL of the filesystem. Adapt it to your needs.}}

And then install GRUB2 (x86 users should replace x86_64 by i386)
{{RootCmd|grub_efi_x86_64-install --root-directory<nowiki>=</nowiki>/boot/efi --boot-directory<nowiki>=</nowiki>/boot/efi/EFI --bootloader-id<nowiki>=</nowiki>GRUB2 --no-floppy}}
or install everything manually if something goes wrong.
{{RootCmd|cp -a /lib/grub2/x86_64-efi/* /boot/efi/GRUB2/}}
{{Note|To override the default boot loader, according to UEFI 2 specification, one has to run the following command. This is handy when one cannot add an EFI boot entry as the utility will fails if `/sys/firmware/efi/vars/' is not empty.}}
{{RootCmd|cp /boot/efi/GRUB2/grub.efi /boot/EFI/BOOT/BOOTX64.EFI}}
{{Note|According to UEFI 2 specifications, the default bootloader location is `[EFI System Partition]\EFI\BOOT\BOOTx64.EFI' for 64bit systems (and `[...\BOOTIA32.EFI]' for 32bit systems).}}

It might  be necessary to build a customized core.img with a few builtin modules to be safe or to satisfy specific requirements.

{{RootCmd|grub2-mkimage -p /grub2 -o /boot/efi/GRUB2/grub.efi -O x86_64-efi ext2 fat lvm part_msdos part_gpt search_fs_uuid}}

Before any attempt to add a menu entry to EFI boot menu, inserting EFI module and merge the utility is necessary.
{{RootCmd|modprobe efivars
|echo 'sys-boot/efibootmgr **' >> /etc/portage/package.keywords
|emerge -av sys-boot/efibootmgr}}
And then add an boot menu entry.
{{RootCmd|efibootmgr --create --gpt --disk /dev/sda --part 1 --write-signature --label "GRUB2" --loader "\\EFI\\GRUB2\\grub.efi"}}

=== BIOS/MBR installation ===

Installing in this mode is straight forward as it's just like the legacy GRUB with new GRUB2 additions. Care should be taken for the first partition alignment. GRUB2 uses the gap between the MBR and the first partition to embed its core.img. If the disk is partitioned with recent tools, fdisk for example, the first partition should aligned to 2048 sector boundary. So the installation will go just fine. Otherwise, GRUB2 will rely on the `/boot' device to load core.img. In this later case something like:
{{RootCmd|mount /boot
|chattr -i /boot/grub2/core.img
|grub2-install --boot-directory<nowiki>=</nowiki>/boot --no-floppy /dev/sda
|chattr +i /boot/grub2/core.img}}
the chattr commands are there to prevent core.img being moved by filesystem maintainance tools.

If using another specific bootloader like TrueCrypt bootloader which is problematic with GRUB2 at the moment, and then need to boot another OS, it's necessary in that case to install GRUB2 to a partition with something like:
{{RootCmd|grub2-install --boot-directory<nowiki>=</nowiki>/boot --no-floppy --force /dev/sda5}}
Just ensure to have enough gape before that partition or else... mount boot and use something similar to the previous example.

=== BIOS/GPT partitioned disk without hybrid MBR installation ===

This setting is maybe the simplest methode in this guide along with a plain BIOS/MBR setup, well, assuming that at least if an EF02 type partition was created with a GPT compatible tools. 
A simple command like the following is enough to get everything fine and running.
{{RootCmd|mount /boot
|grub2-install --modules<nowiki>=</nowiki>"part_gpt fat ext2" --no-floppy /dev/sda}}
And everything should goes as expected. I couldn't install GRUB2 without an EF02 partition although sector 34-2047 and about the same unused amount free sector at the end were left. You're warned!

=== BIOS/GPT partitioned disk and with hybrid MBR installation ===

Multi booting OSs that aren't aware of GPT partitioned disk, e.g. Windows 7 or Windows XP for those who still use that thing--that's because MSDOS/Windows cannot boot from anything else than BIOS/MBR aside from MSDOS/Windows 7 and possibly 8 from EFI platforms,--require this tricky workaround. The thing to keep in mind is that playing with a hybrid MBR can be tricky so, nothing in this sub-section should be taken as solid rock working but rather simply guidances to experiment to get something working.

First of, GRUB2 should boot and should recognize a partition table be it GPT or MBR simply by loading the associated module (part_gpt or part_msods). So it should be expected to be able to boot on BIOS/MBR or BIOS/GPT depending on GRUB2 loaded module? Nothing is far from the truth, because, the previous sections outlined the differences between installing GRUB2 on BIOS/MBR and BIOS/GPT. I don't know how grub2-install behave when trying to install in BIOS/MBR mode with an EF02 (or bios_boot in parted terms) partition because I did not simply try it. 

Actually there's simple thing that would determine grub2-install to install in BIOS/MBR or BIOS/GPT: it's the presence of a EE00 (GPT protective) and being the first partition in the MBR with that. With a hybrid MBR, GRUB2 will install just fine if and only if the first partition in the MBR table is an EE00 partition. An EF02 partition should be present anywhere in the disk and not necesseraly in the MBR list to leave a few room to embed core.img in the disk tough. 
{{Note|In this case one do ''not'' have to add/list an EE00 partition in the hybrid MBR list manually, gdisk will prompt you to list one first if booting with GRUB2 before listing the provided list (up to 3 partition) by the user.}}

Creating a hybrid MBR is easy with gdisk: just hit `r' (recovery and transformation) in the main, then hit `h' (CHS recompute) in that menu, and then enter a series of partition (less or equal to 3) in the order you want it to be, and then enter the hexadecimal partition type without the `0x' prefix or accept the default with hitting repeatedly with `Y', and enable only a single boot flag as the following example.

{{RootCmd|gdisk /dev/sdg|output=<pre>
GPT fdisk (gdisk) version 0.8.1

Partition table scan:
  MBR: MBR only
  BSD: not present
  APM: not present
  GPT: present

Found valid MBR and GPT. Which do you want to use?
 1 - MBR
 2 - GPT
 3 - Create blank GPT

Your answer: 2</pre>}}

{{RootCmd|gdisk /dev/sdg|output=<pre>
...
Using GPT and creating fresh protective MBR.

Command (? for help): r
Recovery/transformation command (? for help): p
Disk /dev/sdg: 625142448 sectors, 298.1 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): 744E8BF3-39A4-4908-8646-AC2E5661C8CF
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 625142414
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       566233087   270.0 GiB   8300  Linux filesystem
   2       566233088       625142414   28.1 GiB    0700  Microsoft basic data
Recovery/transformation command (? for help): h

WARNING! Hybrid MBRs are flaky and dangerous! If you decide not to use one,
just hit the Enter key at the below prompt and your MBR partition table will
be untouched.

Type from one to three GPT partition numbers, separated by spaces, to be
added to the hybrid MBR, in sequence: 2 1
Place EFI GPT (0xEE) partition first in MBR (good for GRUB)? (Y/N): N


Creating entry for GPT partition #2 (MBR partition #1)
Enter an MBR hex code (default 07): 
Set the bootable flag? (Y/N): Y

Creating entry for GPT partition #1 (MBR partition #2)
Enter an MBR hex code (default 83): 
...
Unused partition space(s) found. Use one to protect more partitions? (Y/N): N

Recovery/transformation command (? for help): o

Disk size is 625142448 sectors (298.1 GiB)
MBR disk identifier: 0x00000000
MBR partitions:

Number  Boot  Start Sector   End Sector   Status      Code
   1      *      566233088    625142414   primary     0x07
   2                  2048    566233087   primary     0x83
   4                     1         2047   primary     0xEE


Recovery/transformation command (? for help): w</pre>}}

And then check out if the operation was successful or not by listing the devices.
{{Note|I answered most safe questions to `N' because without that `/fdisk -l /dev/sdg' will list the MBR partion list just fine but listing the block devices with a `ls /dev' wouldn't list the partions and more annoying: the partions wouldn't be listed in DOS/BIOS.}}

{{Note|I had to manually remove the EE00 (GPT protective) partition in the MBR list for that drive with fdisk, because fdisk listed that partition as being the third one. And I couldn't get the BIOS/DOS recognize the partition table with its presence. This is quite weird (as the previous output shows) because the MBR partition table was correctly recognized when the hybrid MBR was freshly created. I had to reload GPT partition table from a file and re-hybridize the MBR a second time after a few experiments.}}

And finally install GRUB as usual. Everything should be fine at this point. See troubleshooting section for possible issues not listed on the previous Notes and comments.

== Multiboot ==

=== Chainloading ===
=== Windows dualboot ===

== Troubleshooting and Quirks ==

=== Fancy theming ===
=== GPT Hybrid MBR workaround ===

== References ==

* [https://www.gnu.org/software/grub/manual/grub.html GNU GRUB 2 manual page]
* [http://www.rodsbooks.com/gdisk/bios.html Legacy BIOS issues with GPT]
* [http://www.rodsbooks.com/gdisk/hybrid.html GPT and Hybrid MBR]
* [http://www.rodsbooks.com/gdisk/ GPT fdisk/gdisk utility page]
* [https://wiki.archlinux.org/index.php/GRUB2 Arch Linux GRUB2 wiki]
* [https://help.ubuntu.com/community/UEFIBooting ubuntu UEFI booting help]
