<languages />


{{Metadata|abstract=AIDE ('''''A'''dvanced '''I'''ntrusion '''D'''etection '''E'''nvironment'') はホストベースの侵入検出システムです。AIDE はファイルと他の資源をスキャンしデータベース内にこれらファイルの情報を保存します。保存対象の情報は、ファイルのハッシュ値やファイルサイズ、所有者、変更日時、作成日時などのような主だったファイルの属性等です。最初にデータベースを作成した後、AIDE は再びシステムをスキャンし、新しいスキャン結果と保存された前回の値を比較し直します。値が異なる場合はファイルが変更され、変更は報告されます。この AIDE は、ファイルのスナップショットを都度比較してファイルが改竄されたかどうかを検出するものです。}}

AIDE ('''''A'''dvanced '''I'''ntrusion '''D'''etection '''E'''nvironment'') はホストベースの侵入検知システムです。AIDE はファイルや他リソースをスキャンし、データベース内にこれらファイルの情報について保存します。保存する情報はハッシュ値、ファイルサイズ、所有者、編集日時、作成日時等のような主だったファイルの属性値です。データベースを最初に作ったら、AIDE はそれからシステムを再スキャンして、前回の保存した値と今回のスキャン結果を比較します。もし値が前回と異なった場合は変更があったと報告します。AIDE の背景にある考え方は、スナップ書と同市を比較して改ざんファイルを見つけることです。

__TOC__

== インストール ==

=== USE フラグ ===

USE フラグを次のように設定すると {{Package|app-forensics/aide}} のインストールは簡単です。
{{USEflag|package=app-forensics/aide}}

USE flag changes specific to a certain package should be defined in the {{Path|/etc/portage/package.use}} file, or a text file inside a directory called {{Path|/etc/portage/package.use}}. For example, when using a {{Path|/etc/portage/package.use}} ''file'':

{{FileBox|filename=/etc/portage/package.use|title=Enable zlib support for AIDE|1=<pre>
app-forensics/aide zlib
</pre>}}

=== Emerge ===

After the USE flags have been set, install the software:

{{Emerge|app-forensics/aide}}

== 設定 ==

=== 概要 ===

The configuration file for {{Package|app-forensics/aide}} is not as daunting as it might seem at first sight. The default file is stored at {{Path|/etc/aide/aide.conf}} but administrators can easily create multiple configuration files if necessary. Besides a few variables, the configuration file contains short-hand notations for what aspects of files to scan for (only hashes, or also inode information, etc.) and which files to scan.

Take look at the database variables:

{{FileBox|filename=aide.conf|title=変数|1=
database=file:/var/lib/aide/aide.db
database_out=file:/var/lib/aide/aide.db.new
}}

The first line in the example above (<code>database</code>) defines where the location of database that contains the known values. The second line (<code>database_out</code>) defines where to store new databases when another is generated. It is generally recommended against having these variables point to the same database (having the same paths for each variable). If one database is to overwrite another, the best method is to ''manually copy'' over the generated database from one location to the other. For example, to overwrite the first database with the second, this command could be used:

{{RootCmd|cp /var/lib/aide/aide.db.new /var/lib/aide/aide.db}}

For now, leave the database variables as they are; they will be covered in more detail later in the article.

Next, consider the variables which are short-hand notations for what information to record in the database.

{{FileBox|filename=aide.conf|title=AIDE configuration using shorthand notation|lang=ini|1=
Binlib = p+i+n+u+g+s+b+m+c+md5+sha1
Logs = p+i+n+u+g+S
...
}}

{{Note|It should be obvious that <code>md5</code> and <code>sha1</code> mean that MD5 and SHA-1 checksums are taken (respectively).}}

The letters are described in the default {{Path|aide.conf}} file, but for convenience the following table provides an overview of the most common options:

{| class="table"
! Short
! Description
|-
| <code>p</code>
| Permissions
|-
| <code>i</code>
| inode number
|-
| <code>n</code>
| Number of (hard)links
|-
| <code>u</code>
| User information
|-
| <code>g</code>
| Group information
|-
| <code>s</code>
| Size
|-
| <code>S</code>
| Size (only report when the size is suddenly smaller - growing is allowed)
|-
| <code>b</code>
| Block count
|-
| <code>m</code>
| Modification time
|}

Next is an overview of which directories to scan, and what to scan for. In three line example to follow, AIDE is instructed to scan the {{Path|/bin}} and {{Path|/sbin}} directories via the measures identified in the <var>Binlib</var> short-hand notation variable. The {{Path|/var/log}} file will display the scan measures defined in the <var>Logs</var> variable defined above.

{{FileBox|filename=aide.conf|title=対象をスキャンする|1=
/bin Binlib
/sbin Binlib
/var/log Logs
...
}}

AIDE supports regular expressions and users are allowed to "remove" matches. For instance, to scan {{Path|/var/log}} but not {{Path|/var/log/portage}} then make an exclusion set by using the <code>!</code> (exclamation point) before the excluded path(s):

{{FileBox|filename=aide.conf|title=他のスキャン対象|1=
/var/log Logs
!/var/log/portage
}}

=== 詳細オプション ===

The configuration file is based on regular expressions, macros and rules for files and directories. Users experienced with the [https://www.tripwire.org/ tripwire solution] will have no difficulties dealing with AIDE's configuration file. The following macros are available:

{| class="table table-striped table-condensed" style="width: auto;"
|-
! Macro !! Description !! Syntax
|-
| <code>ifdef</code> || If defined || <code>@@ifdef "name"</code>
|-
| <code>ifndef</code> || If not defined || <code>@@ifndef "name"</code>
|-
| <code>define</code> || Define a variable || <code>@@define "name" "value"</code>
|-
| <code>undef</code> || Undefine a variable || <code>@@undef "name"</code>
|-
| <code>ifhost</code> || if "hostname" || <code>@@ifhost "hostname"</code>
|-
| <code>ifnhost</code> || if not "hostname" || <code>@@ifnhost "hostname"</code>
|-
| <code>endif</code> || Endif must be used after any of the above macros except define and undef || <code>@@endif</code>
|}

These macros become very handy when dealing with multiple Gentoo boxes, while using the same configuration on all. Not all machines run the same services or even have the same users.

Next we have a set of flags which identify the permissions, file properties, checksums, cryptographic hashes, ... to validate on files and directories.

{| class="table table-striped table-condensed" 
|-
! Flag !! Description
|-
| <code>p</code> || permissions
|-
| <code>i</code> || inode
|-
| <code>n</code> || number of links
|-
| <code>u</code> || user
|-
| <code>g</code> || group
|-
| <code>s</code> || size
|-
| <code>b</code> || block count
|-
| <code>m</code> || mtime
|-
| <code>a</code> || atime
|-
| <code>c</code> || ctime
|-
| <code>S</code> || check for growing size
|-
| <code>md5</code> || md5 checksum
|-
| <code>sha1</code> || sha1 checksum
|-
| <code>rmd160</code> || rmd160 checksum
|-
| <code>tiger</code> || tiger checksum
|-
| <code>R</code> || <code>p+i+n+u+g+s+m+c+md5</code>
|-
| <code>L</code> || <code>p+i+n+u+g</code>
|-
| <code>E</code> || Empty group
|-
| <code><nowiki>></nowiki></code> || Growing logfile <code>p+u+g+i+n+S</code>
|}

If AIDE is compiled with mhash support, then the following flags can be used as well:

{| class="table table-striped table-condensed"
|-
! Flag !! Description
|-
| <code>haval</code> || haval checksum
|-
| <code>gost</code> || gost checksum
|-
| <code>crc32</code> || crc32 checksum
|}

=== Initialization and frequent scanning ===

For a basic AIDE setup, a database must be initialized. This is performed using the <code>--init</code> option. To make sure AIDE uses the configuration settings defined in the sections before, be sure to pass the <code>--config</code> option pointed to the correct configuration file:

{{RootCmd|aide --init --config{{=}}/etc/aide/aide.conf|output=<pre>
AIDE, version 0.14.2
  
### AIDE database at /var/lib/aide/aide.db.new initialized.
</pre>}}

Once initialized, any pre-existing database files can be copied over:

{{RootCmd|cd /var/lib/aide; cp aide.db.new aide.db}}

With a new database available, the entries can be scanned again (now or at a later date) using the <code>--check</code> option. This will create another database containing any modifications that have made to the file system since the first database has been created. Be sure to use the <code>--config</code> option pointed to the same configuration file that the first database was created with:

{{RootCmd|aide --check --config{{=}}/etc/aide/aide.conf|output=<pre>
AIDE, version 0.14.2
  
### All files match AIDE database. Looks okay!
</pre>}}

If file modification(s) occurred, a notification will be sent out:

{{RootCmd|aide --check --config{{=}}/etc/aide/aide.conf|output=<pre>
AIDE found differences between database and filesystem!!
Start timestamp: 2013-04-11 15:31:02
  
Summary:
  Total number of files:        318
  Added files:                  0
  Removed files:                0
  Changed files:                2
  
  
---------------------------------------------------
Changed files:
---------------------------------------------------
  
changed: /etc/pam.d
changed: /etc/pam.d/run_init
  
---------------------------------------------------
Detailed information about changes:
---------------------------------------------------
  
  
Directory: /etc/pam.d
  Mtime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:01
  Ctime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:01
  
File: /etc/pam.d/run_init
  Size     : 205                              , 208
  Mtime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:00
  Ctime    : 2013-04-09 22:11:18              , 2013-04-11 15:31:01
  Inode    : 394203                           , 394053
  MD5      : Mm0KPzpPt63eqGClTJ/KaQ==         , eLUrP2BsIq25f3AZX+dlBA==
  SHA1     : NrQtsUeOsXS4RHUq+ejYBne5V6E=     , 5A6ef6VJCcMiqEjKQ7e9xkBNZB8=
</pre>}}

== Best practices ==

=== Be clear on what to scan ===

The default AIDE configuration is useful, but it needs to be fine-tuned to suit the users' needs. It is important to know which files to scan and why.

For instance, to scan for all authentication-related files but not for other files, use a configuration like so:

{{FileBox|filename=aide.conf|title=authentication-related scan targets|1=
# SELinux policy and settings
/etc/selinux ConfFiles
# Authentication databases
/etc/passwd ConfFiles
/etc/shadow ConfFiles
/etc/nsswitch.conf ConfFiles
# Authentication configuration
/etc/pam.d ConfFiles
/etc/securetty ConfFiles
/etc/security ConfFiles
# PAM libraries
/lib(64)?/security Binlib
}}

=== Keep the database offline and read-only ===

A second important aspect is that the result database should be stored offline when ''not'' needed and should be used in read-only mode when the database ''is'' needed. This gives some protection against a malicious user that might have compromised the machine to modify the results database. For instance, provide the result database on a read-only NFS mount (for servers) or read-only medium (when physical access to the machine is possible) such as a CD/DVD or a read-only USB drive.

After storing the database on a read-only location, update the {{Path|aide.conf}} file to have <code>database</code> point to this new location.

=== オフラインスキャン ===

If applicable, try using offline scanning methods for the system. In case of virtual platforms, it might be possible to take a snapshot of the system, mount this snapshot (read-only) and then run the aide scan on the mounted file system.

{{RootCmd|losetup /dev/loop0 /srv/virt/gentoo.img
|vgscan
|vgchange -ay
|mount -o ro /dev/volgrpX/volumeY /mnt/image
|chroot /mnt/image
|aide --check --config{{=}}/path/to/aide.conf
|exit
|umount /mnt/image
|vgchange -an /dev/volgrpX
|losetup -d /dev/loop0}}

The above approach uses {{c|chroot}}. This is only needed when the initial file system has been scanned from the live system and the administrator wants to perform an offline validation. If the initial scan was done offline, then the {{Path|aide.conf}} file will point to the mount point already and the database will use these paths immediately, so then there is no need for chrooting.

== 参考 ==

* [[Integrity/Concepts]] talks about the concepts related to system integrity

== 外部の情報 ==

* [http://archive09.linux.com/articles/113919 AIDE の使い方チュートリアル (Linux.com)]
* [http://www.symantec.com/connect/articles/securing-linux-aide Securing Linux with AIDE article (Symantec.com)]


[[Category:Server and Security]]
