{{InfoBox stack
|{{InfoBox homepage|http://smarden.org/runit/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox ohloh}}
}}

'''runit''' is an init replacement with service monitoring. It can be used in conjunction with OpenRC as an alternative to sysvinit.

== Installation ==
=== Useflags ===
{{USEflag|package=sys-process/runit
|static
}}

=== Emerge ===

{{emerge|runit}}

== Post-Install Configuration ==

=== PID 1 &mdash; init replacement ===

Runit can be used as the system init. To do this, simply add <tt>'''init=/sbin/runit-init'''</tt> to your bootloader's command line and reboot. You can leave sysvinit installed and go back to it at any time by reverting the change.

Out of the box, runit-init has a very minimal configuration which will only get you to a console login. Although it would be optimal to have all your daemons started up in a single consistent way, you're free to mix and match between runit and OpenRC as you like. Your initscripts can be found in the "default" runlevel, which can be started  automatically on boot with the existing "local" service:

{{FileBox|filename=/etc/local.d/rc-default.start|title=Start up the default runlevel after boot|lang=bash|1=
#!/bin/sh
rc default}}
{{RootCmd|chmod u+x /etc/local.d/rc-default.start}}
{{RootCmd|rc-update add local boot}}

If you prefer to do it manually:

{{RootCmd|rc default}}

==== Init Stage 1 ====

This stage should take care of system initialization and be short and sane to avoid any possible system or comand hang because there is no safety net in this stage&mdash;holding the power button or unpluging the power cable would be the only workaround.

{{FileBox|filename=/etc/runit/1|title=Stage-1|lang=bash|1=#!/bin/sh
# System one time tasks initialization

PATH=/sbin:/usr/sbin:/bin:/usr/bin
RUNLEVEL=S rc sysinit

touch /etc/runit/stopit
chmod 0 /etc/runit/stopit
}}

==== Init Stage 2 ====

This stage should ''exec'' into ''runsvdir'' (supervisor utility) in order to have PID 2 hold the supervised process tree.

{{FileBox|filename=/etc/runit/2|title=Stage-2|lang=bash|1=

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin
SV_SVCDIR=/etc/service
SV_RUNDIR=/run/runsvdir

RUNLEVEL=S rc boot
if grep -q nonetwork /proc/cmdline; then
   rc nonetwork
elif grep -q single /proc/cmdline; then
   rc single
else
   rc default
fi

mkdir -p /run
rm -fr "${SV_RUNDIR}"
cp -a "${SV_SVCDIR}" "${SV_RUNDIR}"

exec env - PATH=$PATH \
runsvdir "${SV_RUNDIR}" \
'log: .........................................................................'
}}

See the forums thread to know the details about why boot and default run levels are included in stage 2 rather in stage 1.
Simply put, ''CTRL-ALT-DEL'' signal is inactive on stage 1, so this will prevent to have to hold the power switch in case something goes wrong and hang when doing further system initialization&mdash;an extended boot run level.

And lastly, copying ''/service/'' directory to a tmpfs based filesystem would prevent unecessary disk seeks related to runtime service supervision. And this is a sane default becasue many init systems&mdash;like OpenRC&mdash;does this as well. Further (disk seek) optimization could be achieved by copying whole service directories instead of symlinking them from ''/etc/sv''.

==== Init Stage 3 ====

Stage should take care of system halt and reboot.

{{FileBox|filename=/etc/runit/3|title=Stage-3|lang=bash|1=
#!/bin/sh
exec >/dev/console 2>&1
PATH=/sbin:/usr/sbin:/bin:/usr/bin
SV_RUNDIR=/run/runsvdir

echo 'Waiting for getties to stop...'
sv -w 10 force-shutdown ${SV_RUNDIR}/getty-*
echo 'Waiting for services to stop...'
sv -w 300 force-shutdown ${SV_RUNDIR}/*

echo 'Shutdown...'
if test -x /etc/runit/reboot; then
   RUNLEVEL=6 rc reboot
else
   RUNLEVEL=0 rc shutdown
fi
}}

See [[Runit#External Ressources]] for another OpenRC friendly implementation.

==== SysVinit Reboot and Shutdown Compatibility Service ====

Runit isn't directly compatible with sysvinit's "telinit", "halt", "poweroff", "reboot" and "shutdown" commands, however many programs (e.g. desktop environments) expect to be able to call some of these. It's possible to emulate the interface they need [https://forums.gentoo.org/viewtopic-p-7610342.html#7610342 with a simple script].

If all else fails, use <tt>'''runit-init 0'''</tt> to shut down or <tt>'''runit-init 6'''</tt> to reboot.

=== As a system service ===

Runit can supervise processes without running as init, or even necessarily as root:

{{Cmd|mkdir /path/to/service-dir/}}
{{GenericCmd|(Create your service directories and run scripts here, using the same layout as /etc/runit/runsvdir/all/)}}
{{Cmd|chmod a+x /path/to/service-dir/*/run}}

OpenRC can start this for you using <tt>/etc/init.d/local</tt> (see <tt>/etc/local.d/README</tt> for more details):

{{FileBox|filename=/etc/local.d/runsvdir.start|lang=bash|1=
#!/bin/sh
# Remember to add --user if you don't want to run as root!
start-stop-daemon --start --background --make-pidfile \
    --pidfile /run/runsvdir.pid \
    --exec /usr/bin/runsvdir -- /path/to/service-dir/
}}
{{FileBox|filename=/etc/local.d/runsvdir.stop|lang=bash|1=
#!/bin/sh
start-stop-daemon --stop --pidfile /run/runsvdir.pid
}}

== Process Supervision ==

Like [[Daemontools]], [[Daemontools-encore]] or [[S6]] for that matter,
Runit can be used to supervise long lived processes, or rather ''daemons'' to be precise, be it used as PID 1 or not.
This usage will ensure process management easy with ''sv'' utility if need be. Daemons would be restarted automatically if necessary after a crash or by an accidental signal mis-usage.
So, keeping a few processes,&mdash;like [[SSH]] daemon,&mdash;alive becomes an easy task.
Just keep in mind that taking care of stage 1, 2 and 3 (system ''initialisation'',
''normal'' functional state and system ''halt'' respectively) should be considered seriously when using ''runit-init'' as PID 1.
This is especially easy when using OpenRC power and flexibility for such an ''easy''&mdash;in this case&mdash;task.
See the following sub-section for more info on usable implementaion or the forums thread for a variation of it.

This latter use case,&mdash;bypassing SysVinit [[Comparison of init systems|init]],&mdash;and its treatment is extatly similar to what should be done whith [[S6]].

== OpenRC friendly setup ==

A supervision scripts [https://github.com/tokiclover/supervision-scripts framework] inspired by the original ''supervision-scripts'', see [[#External Ressources]], by Avery Payne is available.
This framework aims to get a KISS supervision suite which work out of the box with an almost empty service directory and log directory: a symlink of ''sv/SERVICE/run'' to ''sv/.opt/run'' and ''sv/SERVICE/log/run'' to ''sv/.opt/run-log'' would be enough for most cases.
Similarly, getty,--be it agetty, mingetty or fgetty (the latter would require either an edit of the default configuration, or adding a ''sv/SERVICE/OPTIONS'' configuration file)--work out of the box.

All in all, easy and no environment variable (file) x local (''sv/SERVICE/env'') & global (''sv/.env'') environment directory x (number of) services useless disk seeks! A single ''OPTIONS'' configuration file for each service is prefered here--with a default (''sv/.opt/SVC_OPTIONS'') file.

And a [[Runit]] bundled directory with functional ''stage'' 1, 2 and 3 along with ''ctrlaltdel'' written with [[OpenRC]] in mind is available as well, notwithstanding the compatibilty mode offered by setting ''RC_OPTS=Yes'' in ''OPTIONS'' configuration file!

Tired to re-write the same (''./run'') thing over and over again?! Check this out! Do not want to wear out the (system boot) disk for no good reason?! Try it out!

== External Resources ==
* [https://wiki.archlinux.org/index.php/runit Arch Linux Wiki]
* [https://forums.gentoo.org/viewtopic-p-7605220.html Gentoo Forums]
* [https://bitbucket.org/avery_payne/supervision-scripts/ supervision-scripts]: a large, modular collection of scripts that can be used with runit.
* [https://github.com/tokiclover/supervision-scripts Supervision Scripts Framework with an OpenRC friendly stage 1, 2, and 3 for Runit]

[[Category:Init_systems]]
[[Category:Process Supervision]]
