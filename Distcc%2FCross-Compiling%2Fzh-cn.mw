<languages />


{{Metadata|abstract=本文向你展示如何配置distcc在不同的处理器架构之间进行交叉编译。}}

本文向你展示如何配置distcc在不同的处理器架构之间进行交叉编译。

== 使用distcc进行交叉编译 ==

=== 介绍 ===

{{c|distcc}} is a tool that lets you share the burden of software compiling across several networked computers. As long as the networked boxes are all using the same toolchain built for the same processor architecture, no special {{c|distcc}} setup is required. 

'''This guide provides instructions on how to configure distcc to compile for different architectures.''' 

=== 安装必要的工具 ===

First, you will need to emerge {{c|crossdev}} on all the machines that will be involved in the compiling process. {{c|crossdev}} is a tool that makes building cross-architecture toolchains easy. Its usage is straightforward: {{c|crossdev -t sparc}} will build a full cross-toolchain targeting the Sparc architecture. This includes binutils, gcc, glibc, and linux-headers. 

You will need to emerge the proper cross-toolchain on all the helper boxes. If you need more help, try running {{c|crossdev --help}}.

如果你想对交叉工具链进行微调，这里有个脚本可以在命令行中输出要在帮助编译的机器上安装的交叉开发包的的确切版本（这个脚本需要在目标机器上运行）。

{{CodeBox|title=Script to fine-tune cross development tools|lang=bash|1=
#! /bin/bash
A="binutils" ; B=`eselect $A show` ; BINUTILS_VER=`echo $B {{!}} cut -d- -f5-` 
A=`/usr/bin/gcc-config -c` ; B=`echo $A {{!}} cut -d- -f5` ; GCC_VER=`equery l sys-devel/gcc {{!}} grep $B {{!}} cut -d- -f3-`
KERNEL_VER=`uname -r {{!}} sed s/-gentoo//`
A="sys-libs/glibc" ; B=`equery l $A` ; LIBC_VER=`echo $B {{!}} cut -d- -f3-`
echo "crossdev --b =$BINUTILS_VER --g =$GCC_VER --k =$KERNEL_VER --l =$LIBC_VER -t `uname -m`"
}}

Next, you will need to emerge {{c|distcc}} on all the machines that will be involved in the process. This includes the box that will run emerge and the boxes with the cross-compilers. Please see the [[Distcc|Gentoo Distcc Documentation]] for more information on setting up and using {{c|distcc}}.

{{Note|Current versions of {{c|crossdev}} have a <code>-S</code> (<code>--stable</code>) flag for installing only stable versions of compiler tools.  (ie. {{c|crossdev -t i686-pc-linux-gnu --stable --ex-gcc --ex-gdb --portage --pretend}}). Without this option, {{c|crossdev}} installs the latest experimental compiler tools packages! Otherwise, the above script is no longer needed, unless specific versions of package tools and/or headers have been unmasked.}}

=== 架构相关说明 ===

{{Note|Obtain the architecture name by looking at the compile target's <var>CHOST</var> variable within {{Path|/etc/make.conf}}. When mangling the architecture name for the {{c|crossdev -t}} option, {{c|crossdev}} will merrily guess and install tools using the mangled architecture name for folder names within {{Path|/usr}} (ie. {{Path|/usr/i686-pc-linux-gnu/}}, {{Path|/usr/i686-linux-gnu/}}, ...). To resolve this, specify each mangled architecture/folder name to {{c|crossdev --clean}} for uninstalling, or manually remove the folders from the system.}}

==== Intel x86 subarchitectures ====

If you are cross-compiling between different subarchitectures for Intel {{Keyword|x86}} (e.g. i586 and i686), you must still build a full cross-toolchain for the desired <var>CHOST</var>, or else the compilation will fail. This is because i586 and i686 are actually different CHOSTs, despite the fact that they are both considered "x86." Please keep this in mind when you build your cross-toolchains. For example, if the target box is i586, this means that you must build i586 cross-toolchains on your i686 helper boxes. 

==== SPARC ====

Using {{c|crossdev -t sparc}} might fail with one of the following errors:

{{CodeBox|title=运行crossdev -t sparc时出现的错误|1=
linker with -z relro support required
support for the tls_model attribute is required
this configuration requires -mlong-double-128 support
}}

如果发生上述错误，尝试使用下面的命令：

{{Cmd|crossdev --lenv "CC{{=}}sparc-unknown-linux-gnu-gcc" -t sparc-unknown-linux-gnu}}

=== 配置distcc以便正确的交叉编译 ===

In the default distcc setup, cross-compiling will ''not'' work properly. The problem is that many builds just call {{c|gcc}} instead of the full compiler name (e.g. {{c|sparc-unknown-linux-gnu-gcc}}). When this compile gets distributed to a distcc helper box, the native compiler gets called instead of your shiny new cross-compiler. 

Fortunately, there is a workaround for this little problem. All it takes is a wrapper script and a few symlinks on the box that will be running {{c|emerge}}. We'll use a Sparc box as an example. Wherever you see <code>sparc-unknown-linux-gnu</code> below, you will want to insert your own <var>CHOST</var> value (<code>x86_64-pc-linux-gnu</code> for an AMD64 box, for example). When you first emerge distcc, the {{Path|/usr/lib/distcc/bin}} directory looks like this: 

{{Note/zh-cn|下面的操作只需要在运行emerge的机器上执行，不要在帮助交叉编译的机器上运行。}}

{{RootCmd|cd /usr/lib/distcc/bin
|ls -l|output=<pre>
total 0
lrwxrwxrwx  1 root root 15 Dec 23 20:13 c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 cc -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 gcc -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc
</pre>
}}

这里你需要做： 

{{RootCmd|rm c++ g++ gcc cc}}

Next, we'll create the new script on this box. Fire up your favorite editor and create a file with the following text in it, then save it as {{Path|sparc-unknown-linux-gnu-wrapper}}. Remember to change the <var>CHOST</var> value (in this case, <code>sparc-unknown-linux-gnu</code>) to the actual <var>CHOST</var> of the box that will be running the emerge. 

{{CodeBox|title=新的封装脚本|lang=bash|1=
#!/bin/bash
exec /usr/lib/distcc/bin/sparc-unknown-linux-gnu-g${0:$[-2]} "$@"
}}

接下来，将此脚本设置为可执行，并创建适当的符号链接： 

{{RootCmd|chmod a+x sparc-unknown-linux-gnu-wrapper
|ln -s sparc-unknown-linux-gnu-wrapper cc
|ln -s sparc-unknown-linux-gnu-wrapper gcc
|ln -s sparc-unknown-linux-gnu-wrapper g++
|ln -s sparc-unknown-linux-gnu-wrapper c++}}

当你完成以后，{{Path|/usr/lib/distcc/bin}}看起来像这样： 

{{RootCmd|ls -l|output=<pre>
total 4
lrwxrwxrwx  1 root root 25 Jan 18 14:20 c++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 cc -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 g++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 gcc -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Jul 27 10:52 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc
-rwxr-xr-x  1 root root 70 Jan 18 14:20 sparc-unknown-linux-gnu-wrapper
</pre>
}}

{{Note|With new distcc versions, the following steps are unnecessary—you can emerge distcc on the client with the <code>crossdev</code> USE flag set instead to achieve the same result.}}

然后我们要确保这些封装脚本在升级distcc包之后不会被替换成之前的符号链接。我们可以提通过在{{Path|/etc/portage/bashrc}}中添加下面的 代码来实现：

{{FileBox|filename=/etc/portage/bashrc|lang=bash|1=
case ${CATEGORY}/${PN} in
<pre>                 sys-devel/distcc | sys-devel/gcc)</pre>
			if [ "${EBUILD_PHASE}" == "postinst" ]; then
				/usr/local/sbin/distcc-fix &
			fi
		;;
esac
}}

Then create this file:

{{FileBox|filename=/usr/local/sbin/distcc-fix|lang=bash|1=
<pre>#!/bin/bash	                
 
sleep 20
# We extract $TUPLE from make.conf to avoid editing the script for each architecture.
TUPLE=$(portageq envvar CHOST)
cd /usr/lib/distcc/bin
rm cc c++ gcc g++ ${TUPLE}-wrapper
echo '#!/bin/bash' > ${TUPLE}-wrapper
echo "exec ${TUPLE}-g\${0:\$[-2]}" "\"\$@\"" >> ${TUPLE}-wrapper
chmod 755 ${TUPLE}-wrapper
ln -s ${TUPLE}-wrapper cc
ln -s ${TUPLE}-wrapper c++
ln -s ${TUPLE}-wrapper gcc
ln -s ${TUPLE}-wrapper g++</pre>
}}

Give it the proper permissions:

{{RootCmd|chmod 755 /usr/local/sbin/distcc-fix}}

恭喜，你已经有一个可以工作的交叉编译的配置了（希望如此）。

=== 这是如何工作的 ===

When {{c|distcc}} is called, it checks to see what it was called as (e.g. <code>i686-pc-linux-gnu-gcc</code>, <code>sparc-unknown-linux-gnu-g++</code>, etc.) When distcc then distributes the compile to a helper box, it passes along the name it was called as. The distcc daemon on the other helper box then looks for a binary with that same name. If it sees just {{c|gcc}}, it will look for {{c|gcc}}, which is likely to be the native compiler on the helper box, if it is not the same architecture as the box running {{c|emerge}}. When the ''full'' name of the compiler is sent (e.g. <code>sparc-unknown-linux-gnu-gcc</code>), there is no confusion.

== 故障排除 ==

This section covers a number of common problems when using {{c|distcc}} for cross-compiling.

==== 远程主机 distccd 编译错误 ====

When receiving the message <code>COMPILE ERRORS</code> within a remote host's {{Path|/var/log/distccd.log}} file, see the above notes concerning specifying the correct architecture name (ie. {{c|crossdev -t $TARGET}}).

Another solution is to uninstall and re-install {{c|crossdev}} compiler tools, using the {{c|crossdev --clean}} option, or ensuring {{Path|/usr/$TARGET}} no longer exists, and then completely reinstall the cross compiler.

It might also be wise to edit the remote host's {{Path|/usr/$TARGET/etc/portage/make.conf}}, and ensure the contents of the <var>CFLAGS</var> variable are similar on all computers or hosts performing compiler operations. Also make sure the <var>USE</var> flags for the cross compiler are sufficient: if you built GCC with <code>USE=graphite</code> on the client, you need a line like <code>cross-i686-pc-linux-gnu/gcc graphite</code> in {{Path|/etc/portage/package.use}} too.

==== Failed to exec $TARGET-unknown-linux-gnu-gcc: No such file or directory ====

封装脚本也许无法执行，即使有正确的权限：

{{CodeBox|title=封装脚本的出错信息|1=
distcc[6195] (dcc_execvp) ERROR: failed to exec i686-unknown-linux-gnu-gcc: No such file or directory
}}

要解决这一问题，请确保创建的封装脚本包含目标架构的全名：

{{Cmd|ls -alh /usr/lib/distcc/bin/c++|output=<pre>
/usr/lib/distcc/bin/c++ ->./i686-pc-linux-gnu-wrapper
</pre>}}

[[Category:Compilation]]
{{Migrated|originalauthors=Andrew Gaffney, Joshua Saddler}}
