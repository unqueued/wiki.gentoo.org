<languages />
{{InfoBox stack
|{{InfoBox homepage|http://www.gnu.org/software/grub/|header=true}}
|{{InfoBox wikipedia|GNU_GRUB#GRUB 2}}
|{{InfoBox gitweb|http://git.savannah.gnu.org/cgit/grub.git/|raw=true}}
|{{InfoBox odoc|http://www.gnu.org/software/grub/grub-documentation.html}}
}}

'''GRUB2'''는 최신 컴퓨터 시스템을 지원하는 부트로더입니다. 이는 종전의 [[GRUB]] 부트로더(현재는 "GRUB Legacy"라고 함)를 대체함을 의미합니다. GRUB2는 GRUB Legacy와는 달리 코드 기반이 완전히 다르며, 고급 스크립팅 기능을 사용할 수 있는 새로운 쉘-유사 문법 같은 기능을 뽐냅니다. 현재 GRUB Legacy 사용자는 GRUB2로 이전하시는 것이 좋습니다.

한방에 접근하시려면 [[GRUB2 Quick Start]]를 보십시오.

== 설치 ==

{{Package|sys-boot/grub}} 꾸러미는 슬롯으로 나누었습니다. grub-0.97 ([[GRUB|GRUB Legacy]])와 grub-2.00는 동시에 설치할 수 있지만 한번에 버전 하나만 MBR에 설치합니다.

=== 선행 과정 ===

기본적으로 GRUB2는 빌드 시간에 기본 플랫폼 대상을 추측합니다. {{Path|make.conf}}의 <var>GRUB_PLATFORMS</var> 변수를 설정하여 우선 적용할 수 있습니다.

{{FileBox|filename=/etc/portage/make.conf|title=EMU, EFI, PC를 지원하도록 GRUB_PLATFORMS 변수를 설정하는 예제|lang=bash|1=
GRUB_PLATFORMS="emu efi-32 efi-64 pc"
}}

대상 CPU에 따라 다음 플랫폼을 지원합니다:

{| class="table"
!
! colspan="7" | Target
|-
! Platform
! i386
! ia64
! mips
! mipsel
! powerpc
! spac64
! x86_64
|-
! arc
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! coreboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! efi
| {{Yes}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
|-
! emu
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! ieee1275
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{Yes}}
| style="background: PaleTurquoise;  text-align: center" | 32-bit
|-
! loongson
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! multiboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu-mips
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
|-
! pc
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
|}

{{Note|<var>GRUB_PLATFORMS</var> 변수 값을 바꿀 때마다 GRUB2 이진 파일 상태가 바뀌게 다시 이머지해야합니다. [[#Emerge|emerge 섹션]] 하단의 <code>--newuse --deep</code> 옵션을 활용했는지 확인하십시오.}}

=== Emerge ===

GRUB2를 설치하려면 일반적인 {{c|emerge}} 문법을 사용하십시오:

{{Emerge|sys-boot/grub:2|params+=--newuse --deep}}

=== 추가 프로그램 ===

추가로, {{c|os-prober}} 유틸리티({{Package|sys-boot/os-prober}} 꾸러미에 있음)를 설치하여 {{c|grub-mkconfig}} 명령을 실행할 때 GRUB2가 다른 운영체제도 찾을 수 있도록 하십시오. 대부분의 경우, 이런 조치를 통해 GRUB2에서 다른 운영체제를 자동으로 감지하는 동작을 활성화합니다(Windows 7, 8.1, 10 등).

{{Emerge|sys-boot/os-prober|params+=--newuse}}

GRUB2(그리고 추가로 {{Package|sys-boot/os-prober}}도) 설치는 부트 로더를 자동으로 활성화하지 않습니다. 단지 이 설치 과정은 운영체제에 프로그램을 설치하는 과정일 뿐이지만, 시스템 자체에 부트 로더를 설치(하여 시스템을 부팅할 때 부트로터를 사용)하려면, [[#.EC.84.A4.EC.A0.95|설정]] 부분에서 다루는 추가 과정을 거쳐야합니다.

== 설정 ==

GRUB2 설정에 중요한 두가지 부분이 있습니다:

# GRUB2 프로그램을 시스템의 부트로더로 설치합니다.
# GRUB2 부트로더 자체를 설정합니다.

GRUB2 프로그램의 설치는 시스템 형태에 따르며, [[#.EB.B6.80.ED.8A.B8_.EB.A1.9C.EB.8D.94_.EC.84.A4.EC.B9.98|부트로더 설치]] 에서 다룹니다. 우선 부트로더 자체 설정을 다루겠습니다.

=== 주 설정 파일 ===

{{c|grub-mkconfig}} 스크립트는 grub 설정을 만들 때 사용합니다.  {{Path|/etc/grub.d/*}}에 있는 설정 파일과  {{Path|/etc/default/grub}} 설정 파일에서 함께 사용하여 최종적으로 GRUB2 자체에서 사용하는 유일한 설정 파일 {{Path|/boot/grub/grub.cfg}}를 만듭니다. 

{| class="table"
|-
! File !! Format !! Edits recommended? !! Description
|-
| {{Path|/usr/sbin/grub-mkconfig}} || POSIX shell script || {{No}} || Installed as part of the {{Package|sys-boot/grub}}:2 package. Run this script to generate {{Path|/boot/grub/grub.cfg}} after configuring the files described below.
|-
| {{Path|/boot/grub/grub.cfg}} || GRUB2 shell script || {{No}} || The file generated by {{c|grub-mkconfig}}. This file is evaluated by GRUB2's built-in script interpreter and doesn't necessarily support all POSIX commands or syntax. See the [https://www.gnu.org/software/grub/manual/grub.html#Shell_002dlike-scripting scripting reference] in the GRUB manual for supported features. Be aware that modifications to this file won't persist to the next time grub-mkconfig is run.
|-
| {{Path|/etc/grub.d/*}} || POSIX shell scripts || {{Partial|Maybe}} || Each script under {{Path|/etc/grub.d/*}} that has its execute bit set is evaluated in sequence, and the stdout is concatenated to form the final {{Path|/boot/grub/grub.cfg}} (or whatever file is given to the {{c|grub-mkconfig}} <code>-o</code> option). These scripts use the current system shell and therefore can use any supported syntax. Ideally they should be POSIX-compatible scripts, and the output script must be compatible with the GRUB2 interpreter. It may be necessary to disable or add scripts. For instance, to add menu items that couldn't be automatically generated.
|-
| {{Path|/boot/grub/custom.cfg}} || GRUB2 shell script || {{Partial|Maybe}} || The /etc/grub.d/41_custom script will reference this file to be read in at boot time if it exists.  This file provides a place to add additional entries or commands and does not require regeneration of the main grub.cfg file.
|-
| {{Path|/etc/default/grub}} || POSIX shell script || {{Yes}} || In most cases this is the only file that should be modified directly. It is mainly used to assign variables used by the scripts in {{Path|/etc/grub.d}} to generate a working configuration file. See [[GRUB2/Config_Variables|GRUB2 configuration variables]] or the [https://www.gnu.org/software/grub/manual/grub.html#Simple-configuration official reference] for supported variables.
|}

GRUB2 does not require the administrator to manually maintain a boot option configuration (as is the case with boot loaders such as [[GRUB|GRUB Legacy]] and [[LILO]]). Instead it can generate its configuration file ({{Path|/boot/grub/grub.cfg}}) using the {{c|grub-mkconfig}} command. This utility will use the scripts in {{Path|/etc/grub.d/}} and the settings in {{Path|/etc/default/grub}}.

{{Warning|The {{c|grub-mkconfig}} utility does not work properly when using software RAID. Manual configuration of the scripts in {{Path|/etc/grub.d/}} is necessary, as otherwise after installation the system will be left in a non-bootable state.
}}

After modifying one or more settings, run the {{c|grub-mkconfig}} utility with the <code>-o</code> option pointing to the output file located at {{Path|/boot/grub/grub.cfg}} (this is GRUB2's default output location):

{{RootCmd|grub-mkconfig -o /boot/grub/grub.cfg|output=<pre>
Generating grub.cfg ...
Found linux image: /boot/vmlinuz-3.3.0-gentoo
done
</pre>}}

Each time the {{c|grub-mkconfig}} utility is called a new configuration will be generated. 

{{Warning|If {{c|grub-mkconfig}} does not report any found entries then no entries were found. In this case GRUB2 will offer no boot selections when upon system restart which may be a tricky, time consuming situation to resolve. Make sure the output is satisfactory before restarting the system.}}

=== 설정 매개 변수 ===

{{Path|/etc/default/grub}}에 있는 다음 변수는 GRUB2를 동작하도록 설정하는 일반적인 변수입니다:

{| class="table"
! Variable
! Explanation
! Default value
|-
| <var>GRUB_DEFAULT</var>
| Defines the default menu entry selected on boot. May be a numeric index, a menu title, or "saved". 
| Defaults to first detected entry.
|-
| <var>GRUB_TIMEOUT</var> 
| Delay (in seconds) before booting default menu entry. Set to <code>0</code> to boot immediately or <code>-1</code> to wait indefinitely. 
| The default is 5 seconds.
|-
| <var>GRUB_CMDLINE_LINUX</var>
| Parameters to be passed on the kernel command line for all Linux menu entries. For instance, to support hibernation, users will need to add <code>GRUB_CMDLINE_LINUX="resume=/dev/sdXY"</code> with {{Path|/dev/sdXY}} being the swap partition.
| 
|-
| <var>GRUB_CMDLINE_LINUX_DEFAULT</var>
| Parameters to be passed on the kernel command line for non-recovery Linux menu entries.
| 
|-
| <var>GRUB_DEVICE</var> 
| The initial root device (i.e. the kernel's <code>root=</code> parameter). Set this to override the {{c|grub-mkconfig}} command's root device auto-detection. For example, <code>GRUB_DEVICE=/dev/ram0</code> will force <code>root=/dev/ram0</code> to be used in the kernel command line.
| 
|}

좀 더 완벽한 내용은 [[GRUB2/Config_Variables|GRUB2 설정 변수]]<sup>en</sup> 하위 페이지를 참고하십시오.

After modifying the parameters, regenerate the GRUB2 configuration file with {{c|grub-mkconfig}}.

=== 설정 스크립트 활성화/활성 해제 ===

The directory {{Path|/etc/grub.d/}} contains the scripts that {{c|grub-mkconfig}} uses to generate a {{Path|grub.cfg}} file. By default the contents of this directory should be similar to the following:

{{Cmd|ls /etc/grub.d/|output=<pre>
00_header  10_linux  20_linux_xen  30_os-prober  40_custom  41_custom README
</pre>}}

GRUB2는 실행하도록 표시한 설치 스크립트를 사용(기본적으로 이미 다 갖춰져 있음)합니다. 일부 스크립트의 사용 여부를 해제하려면, {{c|chmod}} 명령을 사용하여 간단하게 스크립트 파일 권한의 실행 비트를 제거하십시오. 다음 예제에서는 모든 스크립트 중 {{Path|00_header}}와 {{Path|10_linux}} 스크립트의 실행 여부를 비활성화합니다:

{{RootCmd|chmod -x /etc/grub.d/<nowiki>{</nowiki>20_linux_xen,30_os-prober,40_custom,41_custom<nowiki>}</nowiki>}}

스크립트를 수정한 후(또는 실행 비트를 제거한 후), {{c|grub-mkconfig}} 명령으로 GRUB 설정 파일을 다시 만드십시오.

=== 설정 스크립트 다루기 ===

일부 기능이나 GRUB2 기능은 설정 스크립트를 수정할 때 살펴볼 수 있습니다. 예를 들어 FreeBSD와 듀얼 뷰팅을 하려 할 때, 기능이 동작하도록 하려면 다음 처리 절차가 필요합니다.

{{Path|/etc/grub.d/40_custom}} 스크립트를 다음 내용으로 바꾸십시오:  

{{FileBox|filename=/etc/grub.d/40_custom|title=듀얼 부팅 추가|<pre>
menuentry "FreeBSD" --class freebsd --class bsd --class os {
 insmod ufs2
 insmod bsd
 set root=(hd0,1)
 kfreebsd /boot/kernel/kernel
 kfreebsd_loadenv /boot/device.hints
 set kFreeBSD.vfs.root.mountfrom=ufs:/dev/ada0s1a
 set kFreeBSD.vfs.root.mountfrom.options=rw
 set kFreeBSD.hw.psm.synaptics_support=1
}
</pre>}}

{{Path|/dev/sda1}} 또는 <code>(hd0,1)</code>은 FreeBSD가 있는 공간입니다. 일반 UFS 설치를 FreeBSD 공간 용도로 사용한다면 {{Path|/dev/sda1}} 은 컨테이너(논리 공간)가 됩니다. 컨테이너에는 스왑 공간과 루트 공간이 있습니다.  {{c|ls -la /etc/grub.d/40_custom}}를 실행하여 {{Path|40_custom}} 스크립트가 실행 가능한지 확인하십시오. 만약 실행 비트를 설정하지 않았다면 {{c|chmod u+x 40_custom}} 명령으로 설정하십시오.  

다음 {{c|grub-install}}  명령으로 GRUB2를 설치하고 GRUB2의 설정 파일을 업데이트하십시오:

{{RootCmd|grub-install /dev/sda
|grub-mkconfig -o /boot/grub/grub.cfg}}

== 부트 로더 설치==

GRUB2 시스템 부트로더 설치는 시스템을 어떻게 부팅할것인지([[BIOS]]냐 UEFI냐), 부트로더가 올라간 디스크에 어떻게 설치하고 분할하느냐(MBR 또는 GPT 분할 배치)에 달려있습니다.

이 게시글은 다음 상황을 다룹니다:

* [[#BIOS with MBR|BIOS와 MBR]]
* [[#BIOS with GPT|BIOS와 GPT]]
* [[#UEFI with GPT|UEFI와 GPT]]

시스템에 맞는 설치 과정을 선택하십시오.

=== BIOS와 MBR ===

{{Note|시스템을 마이크로소프트 윈도우와 듀얼 부팅을 수행한다면, 시스템에 UEFI 펌웨어가 ''없는지'' 확인하십시오. 이럼에도 '기존 BIOS' 모드로 부팅한다면, 마이크로소프트 윈도우가 부팅을 거부합니다.}}

{{Path|/boot}} 위치가 있는지 확인하시고 이 위치에서 분할 공간을 사용한다면 마운트했는지 확인하십시오:

{{RootCmd|mount /boot}}

{{c|grub-install}} 명령을 실행하여 관련 파일을 {{Path|/boot/grub}}에 복사하십시오. PC 플랫폼에서는 주 부트 레코드(MBR)에 부팅 이미지를 설치하거나 디스크 공간의 부트 섹터에 설치합니다. 잘 동작한다면, {{c|grub-install}}을 실행한 다음의 출력 결과는 다음과 같습니다:

{{RootCmd|grub-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

{{c|grub-install}} 명령은 CPU 아키텍처와 시스템 플랫폼을 설정할 때 <code>--target</code> 옵션을 받아들입니다. 설정하지 않으면 {{c|grub-install}}에서 적당한 값을 추측하려듭니다. {{Keyword|amd64}}/{{Keyword|x86}} 시스템에서는 기본적으로 <code>i386-pc</code> 설정 값을 사용합니다. 또한 {{c|grub-install}} 명령에서는  GRUB2 설치 관리자에게 <code>--boot-directory</code> 옵션으로 GRUB2 부팅 파일을 찾을 때 살펴볼 디렉터리 값을 넘기기도 합니다. 기본 값은 현재 {{Path|/boot}} 디렉터리지만 루트 공간을 옮기려 할 경우 쓸모있습니다.

==== BIOS용 MBR 분할 ====

첫번째 분할 공간 이전에 충분한 공간을 두었는지 확인하십시오. 첫번째 2048 섹터에 최소한 1MiB 디스크 여유공간을 두어 주 부트 레코드를 넣어야 합니다. ''BIOS 부팅 파티션'' 이라고 하는 추가 공간을 만드는 것이 좋습니다(만 추천하지는 않습니다). 이 공간은 정의할 필요만 있을 뿐, 포맷하지는 않습니다.

[[Handbook:Main_Page/ko|젠투 설치 절차]]를 따랐다면 BIOS 부팅 공간은 이미 존재합니다.

=== BIOS와 GPT ===

{{Note|시스템을 마이크로소프트 윈도우와 듀얼 부팅을 수행한다면, 시스템에 UEFI 펌웨어가 ''없는지'' 확인하십시오. 이럼에도 '기존 BIOS' 모드로 부팅한다면, 마이크로소프트 윈도우가 부팅을 거부합니다. 또한 이전 마이크로소프트 윈도우 시스템은 GPT를 지원하지 않습니다. MBR-GPT 혼합 방식을 사용하는 방안으로 접근할 수 있는데, 이 방식으로 접근하려면 [[Hybrid partition table]]<sup>en</sup>을 참고하십시오.}}

{{Path|/boot}} 공간이 필요하면, {{Path|/boot}} 공간을 마운트하고 시작하십시오:

{{RootCmd|mount /boot}}

잘 동작한다면, {{c|grub-install}}을 실행 출력 결과는 다음과 같습니다:

{{RootCmd|grub-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

{{c|grub-install}} 명령은 CPU 아키텍처와 시스템 플랫폼을 설정할 때 <code>--target</code> 옵션을 받아들입니다. 설정하지 않으면 {{c|grub-install}}에서 적당한 값을 추정합니다. {{Keyword|amd64}}/{{Keyword|x86}} 시스템에서는 기본적으로 <code>i386-pc</code> 설정 값을 사용합니다. 또한 {{c|grub-install}} 명령에서는 GRUB2 부팅 파일을 찾을 때  살펴볼 디렉터리를 GRUB2 설치 관리자에 알려줄 <code>--boot-directory</code> 옵션을 받아들이기도 합니다. 기본값은 현재 {{Path|/boot}} 디렉터리지만 루트 공간을 옮기려 할 경우 쓸모있습니다.

==== BIOS용 GPT 분할 ====

GPT 파티션 테이블이 시스템에 있을 경우, <code>EF02</code> 형식(<code>EF00</code> 형식의 ''EFI 시스템 파티션(ESP)와는 다름'')의 작은 ''BIOS 부트 파티션''이 있어야합니다. 충분한 1MiB 공간이 있어야 동작할 텐데, 2-4MiB 설정 값이 안전한 선택입니다. BIOS 부트 파티션은 부트로더 스테이지 2를 유지합니다. BIOS 부트 파티션은 파일 시스템으로 포맷할 필요가 없습니다. {{c|grub-install}}  명령이 기존 파일시스템을 다른 어떤 자체 파일 시스템으로 덮어씁니다.

{{Important|{{Path|/boot}}에 마운트한 일반 공간과 BIOS 부트 파티션이 동일하지 ''않습니다''. {{Path|/boot}} 경로와 BIOS 부팅 공간은 다른 공간이며, 개별적으로 다루어야합니다. BIOS 부트 파티션은 일반 공간처럼 시스템에 마운트하면 ''안됩니다''(예: {{Path|/etc/fstab}}에 정의하면 안됩니다). {{Path|/boot}} 공간은 문제없이 마운트''할 수 있''으며, {{Path|/etc/fstab}} 파일에 나타날 수 있습니다.}}

디스크 공간을 BIOS 파티션으로 만들려면 {{c|parted}} ({{Package|sys-block/parted}}) 도구를 활용하여 다음을 입력하십시오(<code>1</code> 값을 BIOS 부팅 파티션으로 표시할 공간의 번호로 바꾸십시오!):

{{RootCmd|set 1 bios_grub on|prompt=(parted) |color=white}}

{{Package|sys-apps/gptfdisk}}의 {{c|cgdisk}} 유틸리티에서는 공간 형식을 <code>0xEF02</code>로 설정하고 레이블을 <code>gptbios</code>로 설정하시면 됩니다.

EFI 시스템 파티션은 필요하지 않지만, 나중에 시스템 마더보드를 UEFI 보드로 업그레이드 했을 때, BIOS 부트 파티션이 EFI 시스템 파티션으로 변환하기에 크기가 충분한 지 확인할 때 민감할 수 있습니다.

다음 내용은 {{c|gdisk}} 유틸리티에서 GPT 방식으로 디스크 공간 분할을 수행하여 BIOS 부트 [0xEF02] 파티션과 EFI [0xEF00] 파티션으로 나눈 후, {{Key|p}} 키를 눌렀을 때의 출력 화면입니다:

{{RootCmd|gdisk /dev/sdc|output=<pre>
GPT fdisk (gdisk) version 0.8.1
 
Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present
 
Found valid GPT with protective MBR; using GPT.
 
Command (? for help): p
Disk /dev/sdc: 976773168 sectors, 465.8 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): AA369F4D-37A4-4C0D-A357-DC24B99A6337
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 976773134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)
 
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       828377087   395.0 GiB   8E00  Linux LVM
   2       828377088       891291647   30.0 GiB    0700  Microsoft basic data
   3       891291648       975177727   40.0 GiB    0700  Microsoft basic data
   4       975177728       976754687   770.0 MiB   8300  Linux filesystem
   5       976754688       976756735   1024.0 KiB  EF02  BIOS boot partition
   6       976756736       976773134   8.0 MiB     EF00  EFI System
 
Command (? for help): 
</pre>}}

{{Note/ko|{{c|fdisk}} 명령을 사용할 때, GPT 공간을 설정할 경우 <code>0x</code> 16진수 접두부는 입력하지 않아도 됩니다.}}

동일한 설정을 활용하여, {{c|parted}} 유틸리티에서 약간 다른 문법으로 출력하겠습니다:

{{RootCmd|parted /dev/sdc|output=<pre>
GNU Parted 3.0
Using /dev/sdc
(parted) print
...
Sector size (logical/physical): 512B/512B
Partition Table: gpt
  
Number  Start   End    Size    File system  Name                  Flags
 1      1049kB  424GB  424GB                Linux LVM             lvm
 2      424GB   456GB  32.2GB               Microsoft basic data
 3      456GB   499GB  42.9GB               Microsoft basic data
 4      499GB   500GB  807MB   ext2         Linux filesystem
 5      500GB   500GB  1049kB               BIOS boot partition   bios_grub
 6      500GB   500GB  8396kB               EFI System            boot
  
(parted)
</pre>}}

{{c|gdisk}} 에서 공간을 분할하는 것은 {{c|fdisk}} 공간 분할 유틸리티를 사용해본 사용자들에게는 이미 익숙하기 때문에 간단합니다. {{c|gdisk}}를 시작한 후 초기 메뉴에서 {{Key|n}}(새로 만들기)를 입력한 후, (필요하다면) 시작, 끝 섹터를 입력하고, 공간 형식을 EFI 시스템 파티션으로 만들기 위해 <code>EF00</code>로 입력하십시오.

[[Handbook:Main_Page/ko|젠투 설치 절차]]를 이미 따른 사용자라면 이미 적당한 공간 분할 설정을 끝냈을겁니다.

=== UEFI와 GPT ===

{{Path|/boot}} 위치가 있는지 확인하시고 이 위치에서 분할 공간을 사용한다면 마운트했는지 확인하십시오:

{{RootCmd|mount /boot}}

{{c|grub-install}} 명령을 실행하여 관련 파일을  {{Path|/boot/grub}}에 복사하십시오. {{Path|/boot/grub}}에 GRUB2를 설치하며 {{Path|/boot/efi/EFI/gentoo/grubx64.efi}} 핵심 이미지를 복사하고 부팅 항목에 추가할 [[Efibootmgr/ko|efibootmgr]]를 호출합니다.

{{RootCmd|grub-install --efi-directory{{=}}/boot/efi|output=<pre>
Installation finished. No error reported.
</pre>}}

위 명령은 vfat 형식의 [[EFI System Partition|EFI 시스템 파티션]](ESP)를 {{Path|/boot/efi}}에 마운드했다 가정합니다. ESP를 {{Path|/boot}}레 직접 마운트했다면, <code>--efi-directory=/boot</code> 옵션을 사용하십시오. 

{{c|grub-install}} 명령은 CPU 아키텍처와 시스템 플랫폼을 설정할 때 <code>--target</code> 옵션을 받아들입니다. 이 옵션을 설정하지 않으면 {{c|grub-install}}에서 적당한 값 추정을 시도합니다. AMD64 UEFI 부팅 시스템에서는 기본적으로 <code>x86_64-efi</code> 설정 값을 사용합니다. 또한 {{c|grub-install}} 명령에서는 GRUB2 부팅 파일을 찾을 때  살펴볼 디렉터리를 GRUB2 설치 관리자에 알려줄 <code>--boot-directory</code> 옵션을 받아들이기도 합니다. 기본 값은 현재 {{Path|/boot}} 디렉터리지만 루트 공간을 옮기려 할 경우 쓸모있습니다.

==== UEFI용 GPT 분할  ====

GRUB2에서 UEFI GPT 부팅을 수행할 때, 시스템은 FAT 파일 시스템으로 제공하는 EFI 파티션을 보유''해야 합니다''.

{{Path|/dev/sda1}}에 {{Path|/boot/efi}} 공간을 만들면 {{Path|/dev/sda1}} 의 {{Path|/boot}} 공간으로 EFI 공간을 ''바꿀'' 수 있습니다. GRUB2의 성공적인 UEFI 부팅 시나리오에서 루트 공간과 EFI 공간, 두 개의 공간을(swap 공간이 필요하다면 전부 세개) 다룰 ''수 있습니다''. 이 설정을 사용하면 {{Path|/boot}} ''폴더''를 ({{Path|/boot}}의)루트 {{Path|/}} ''공간''에 넣고 EFI ''공간''을 ({{Path|/boot/efi}}의)boot ''폴더에'' 마운트 합니다. 확실히 이해하려면 하단의 {{Path|/etc/fstab}} 파일을 살펴보십시오.

{{FileBox|filename=/etc/fstab|title=스왑 공간이 있는 {{Path|/etc/fstab}} 파일에 UEFI 기능 설정 예제|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
/dev/sda2		none		swap		sw		0 0
/dev/sda3		/		ext4		noatime		0 1
</pre>}}

{{Path|/boot/efi}}의 100MB 공간을 만들때는 여러 {{Path|*.efi}} 파일을 저장할 충분한 공간을 확보해야합니다(항목 여러개는 필요하지 않을지도 모릅니다. 대부분의 시스템은 한개만 사용할테니까요).

공간을 분할할 [[Partition#GUID_Partition_Table|선택한 도구]]를 활용하여 저장 공간을 분할하십시오. {{c|gdisk}}({{Package|sys-apps/gptfdisk}})와 {{c|parted}} ({{Package|sys-block/parted}}) 도구는 이러한 목적에 안성맞춤입니다. {{c|gdisk}} 유틸리티를 사용할 때는, <code>EF00</code> 형식을 사용하는지 확인하십시오.

다음 예제와 같이 {{c|mkdosfs}}로 EFI 시스템 파이션에 FAT 파일 시스템을 만들고  {{Path|/etc/fstab}}에 추가하십시오:

{{RootCmd|mkdosfs -F 32 -n efi-boot /dev/sda1
|mkdir /boot/efi}}

{{FileBox|filename=/etc/fstab|title=/boot/efi 마운트 항목 추가|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
</pre>}}

{{RootCmd|mount /boot/efi}}

{{Note/ko|{{Path|/etc/portage/make.conf}} 에 <var>GRUB_PLATFORMS</var> 변수를 설정하면 도움이 될 수 있습니다. GRUB2에서 적당한 EFI 타겟을 감지할 때 사용할 옵션을 결정하도록 도움을 줍니다. 32비트 UEFI 시스템에서는 <code>efi-32</code>를, 64비트 UEFI 시스템에서는 <code>efi-64</code>를 씁니다.}}

{{Important/ko|GRUB2를 제대로 설치하려면 EFI 디렉터리를 ''반드시'' 마운트 해야''하며'', {{c|grub-install}}  명령을 제대로 실행하려면 <code>efivars</code> 커널 모듈을 불러와야합니다.}}

==== 대안: 기본 UEFI 펌웨어 위치 사용 ====

시스템 UEFI 펌웨어에서 GRUB2 EFI 부트로더 파일 찾기에 실패했다면, 사용 중인 기본 부트로더 위치를 동작 방안으로 제공해야합니다. 이런 조치를 통해 [[Efibootmgr|efibootmgr]]에서 관리하는 부팅 메뉴를 피하여 기능성이 줄어들 수는 있지만, 오류에 덜 취약합니다. 이렇게 하려면 EFI 공간을 {{Path|/boot/efi}} 에 마운트한 후 {{Path|/boot/efi/EFI/gentoo/grubx64.efi}}의 {{Path|grubx64.efi}} 파일을 {{Path|/boot/efi/EFI/BOOT/BOOTX64.EFI}}로 복사하십시오. 이 예제는 64-bit UEFI 시스템을 가정하였으므로, 32-bit UEFI 시스템에서는 시스템의 환경에 따라 조절하십시오.

== 외부 기능 ==

GRUB2는 강력한 부트로더로 만들어주는 수많은 기능이 있습니다. 다음과 같은 기능을 지원합니다:

* UEFI 플랫폼에서 부팅.
* GPT 방식으로 공간을 나눈 드라이브에서 MBR 혼합 방식을 사용하지 않는 부팅(MBR 혼합 방식은 호환성, 이식성 측면에서 원하는 대로 활성화할 수 있음).
* [[btrfs]]로 포맷한 {{Path|/boot}} 공간 부팅.
* [[btrfs]] RAID 셋에서 마운트 설정을 하지 않고도 [[initramfs]] 없이 바로 부팅.
* ([[LVM|LVM2]] 와 같은) 논리 볼륨 관리자에서 바로 부팅.
* DM-RAID 지원 부팅(RAID 0, 1, 4, 5, 6, 9, 10).
* 암호화 장치(LUKS) 부팅.

일부 몇가지 기능을 자세히 설명하도록 하겠습니다.

=== 체인 로딩 ===

GRUB2에서는 GRUB Legacy에 비하면 확실히 체인 로딩 모드가 바뀌었습니다. 다른 부트 로더를 체인 로딩하려면, <code>chainloader</code> 옵션을 사용하십시오.

{{FileBox|filename=/boot/grub/grub.cfg|title=다른 부트로더 체인 로딩|<pre>
menuentry "Custom Super Bootloader Example" {
     insmod part_msdos
     insmod chain
     chainloader (hd1,1)+1
}
</pre>}}

체인 로딩에 대한 더 많은 내용은 [[GRUB2/Chainloading|체인 로딩]]<sup>en</sup> 하위 페이지를 살펴보십시오.

=== 프레임버퍼 화면 사용 ===

GRUB2에서 [[framebuffer]] 그래픽 화면을 사용하려면 GRUB에 <code>truetype</code> USE 플래그를 활성화 한 상태에서 다시 이머지하십시오. 글꼴 변환 유틸리티와 함께 기본 트루타입 글꼴을 설치합니다.

{{Emerge|--newuse sys-boot/grub:2}}

{{Path|/etc/default/grub}}에 있는 기본 GRUB2 설정 파일 설정을 진행하십시오. 예를 들면:

{{FileBox|filename=/etc/default/grub|title=프레임버퍼 설정|lang=bash|1=
# Set resolution and color depth
GRUB_GFXMODE=1366x768x32
 
# Keep resolution when loading the kernel
GRUB_GFXPAYLOAD_LINUX=keep
 
# Set a background image
GRUB_BACKGROUND="/boot/grub/bg.png"
 
# Use a custom font, converted using grub-mkfont utility
GRUB_FONT="/boot/grub/fonts/roboto.pf2"
}}

시스템 그래픽 카드에서 어떤 디스플레이 모드를 지원하는지 찾아보려면 GRUB2 쉘에서 다음 명령을 사용하십시오:

{{Cmd|prompt=(grub)|color=white|insmod all_video|videoinfo}}

== 문제 해결 ==

대부분의 문제는 공간 배치를 올바르게 처리했는지 확인하여 해결할 수 있습니다. 디스크의 첫번째 공간 이전에 충분한 공간을 두었는지 확인하거나, 추가적으로 ''BIOS 부트 파티션''이 존재하는지 확인하십시오. 또한 {{c|grub-mkconfig}} 명령으로  {{Path|/boot/grub/grub.cfg}} 파일을 제대로 만들었거나, 개별 메뉴 항목을 제대로 만들었는지 검증하십시오.

GRUB2 문제 해결 내용을 찾아보려면 [[GRUB2/Troubleshooting|문제 해결]]<sup>en</sup> 하위 게시글을 참고하십시오.

== 추가 참조 ==

몇가지 개별적인 GRUB2 자료가 있습니다:

* [[GRUB2/Chainloading|체인 로딩]] 에서는 GRUB2에서 다른 부트로더로 부팅하는 방법을 설명합니다. 듀얼 부팅 시스템을 꾸리거나 GRUB2에서 ISO 파일을 설정해야 할 경우에 읽어보셔야 합니다.
* [[GRUB2/AdvancedStorage|고급 저장 장치]] 에서는 소프트웨어 RAID, 논리 볼륨, 암호화 파일 시스템과 같은 좀 더 고급 기술을 사용한 저장장치를 사용하는 경우, GRUB2를 설치하고 사용할 때 필요한 단계를 문서화했습니다.
* [[GRUB2/Config_Variables|설정 변수]]에서는 {{Path|/etc/default/grub}} 파일 같은 곳에서 사용하는 GRUB2 설정 변수의 완전한 목록을 문서화했습니다. 
* [[GRUB2/Troubleshooting|문제 해결]]에서는 일반적인 GRUB2 오류의 목록을 (해결책과 함께) 나타냅니다.
* [[Hybrid_partition_table|혼합형 분할 테이블]]

== 외부 자료 ==

더 많은 정보는 다음 링크를 보십시오:

* [https://www.gnu.org/software/grub/manual/grub.html GNU GRUB 2 manual page]
** [https://www.gnu.org/software/grub/manual/grub.html#Network Network (PXE) section of GRUB2]
* [http://www.rodsbooks.com/gdisk/bios.html Legacy BIOS issues with GPT article]
* [http://www.rodsbooks.com/gdisk/hybrid.html GPT and Hybrid MBR article]
* [http://www.rodsbooks.com/gdisk/ GPT fdisk utility page]
* [https://wiki.archlinux.org/index.php/GRUB2 Arch Linux GRUB2 wiki article]
* [https://fedoraproject.org/wiki/GRUB_2?rd=Grub2#Encountering_the_dreaded_GRUB_2_boot_prompt Fedora GRUB2 wiki article : Encountering the dreaded GRUB2 boot prompt]
* [https://help.ubuntu.com/community/UEFIBooting ubuntu UEFI booting help]
* [http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr]
* [http://daniel-lange.com/archives/75-Securing-the-grub-boot-loader.html A blog post entry on locking specific GRUB2 boot entries with a password]


[[Category:Bootloaders]]
