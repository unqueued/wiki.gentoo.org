<languages />

{{Metadata|abstract=この文書は、ユーザーによるMySQLのセットアップと使用を手助けします。}}

この文書は、ユーザーによるMySQLのセットアップと使用を手助けします。

== MySQL をはじめる ==

=== 背景 ===

MySQL は様々なアプリケーションで使用されている人気のあるデータベースサーバーです。SQL は (S)tructured (Q)uery (L)anguage (訳注: 構造化クエリー言語)を意味しており、MySQL はこれを他のプログラムとのやりとりに使っています。それに加えて、MySQL はユーザーに追加機能を提供するため独自の拡張された SQL 機能を有しています。この文書では、MySQL の初期インストール、データベースやテーブルのセットアップ、新しいユーザーの作成をする方法を見ていきます。それでは、インストールの方法から始めましょう。 

=== MySQL のインストール ===

まず、システムに MySQL がインストールされていることを確認してください。MySQL の特定の機能が必要な場合は、インストールをうまく調整するために必要なUSEフラグを有効化しているか確認してください。 

{{Emerge|mysql}}

インストールが完了すると、以下の通知が表示されるはずです: 

{{CodeBox|title=MySQL の einfo メッセージ|1=
You might want to run:
"emerge --config =dev-db/mysql-[version]"
if this is a new install.
}}

今回は新規インストールなのでこのコマンドを実行します。MySQL データベースの設定中に何か尋ねられた場合には <code>ENTER</code> を押す必要があります。設定ではデータベース、テーブル、ユーザー、権限などの管理情報を含む MySQL のメインデータベースをセットアップします。ここでは、できる限り root パスワードを変更することが推奨されています。必ずこれを行ってください、さもないとたまたまやってきた誰かがデフォルト設定の MySQL サーバーを乗っ取ってしまうかもしれません。 

{{RootCmd|emerge --config {{=}}dev-db/mysql-[version]|output=<pre>
 * MySQL DATADIR is /var/lib/mysql
 * Press ENTER to create the mysql database and set proper
 * permissions on it, or Control-C to abort now...
 
   Preparing db table
   Preparing host table
   Preparing user table
   Preparing func table
   Preparing tables_priv table
   Preparing columns_priv table
   Installing all prepared tables
 
   To start mysqld at boot time you have to copy support-files/mysql.server
   to the right place for your system
 
   PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
   To do so, issue the following commands to start the server
   and change the applicable passwords:
 
   /etc/init.d/mysql start
   /usr/bin/mysqladmin -u root -h pegasos password 'new-password'
   /usr/bin/mysqladmin -u root password 'new-password'
   Depending on your configuration, a -p option may be needed
   in the last command. See the manual for more details.
</pre>}}

{{Note|上のコマンドがホスト名が localhost に設定されているという理由で中断された場合には、ホスト名をたとえば ''gentoo'' などの別の名前に変更してください。{{Path|/etc/conf.d/hostname}} ファイルを更新してから {{Path|/etc/init.d/hostname}} を再起動します。}}

MySQL についての ebuild 特有でない情報の一部は、この文書をできるだけ一貫したものに保つためにここでは省略しています。

{{Important|mysql-4.0.24-r2 以降では設定フェーズ内でパスワードを入力します。これにより、root パスワードがより安全になります。}}

設定スクリプトがパスワードを設定するために実行すべきコマンドを出力していますから、それらを今実行してください。 

OpenRC をお使いの場合はこのコマンドを実行します:

{{RootCmd|/etc/init.d/mysql start|output=<pre>
 * Re-caching dependency info (mtimes differ)...
 * Starting mysqld (/etc/mysql/my.cnf) ...        [ ok ]
</pre>}}

systemd をお使いの場合は代わりに以下のコマンドを実行してください:

{{RootCmd|systemctl restart mysqld.service}}

その後、root パスワードを設定します:

{{RootCmd|/usr/bin/mysqladmin -u root -h localhost password 'new-password'}}

MySQL サーバーにログインして、root パスワードが正しく設定されているか確かめることができます: 

{{Cmd|mysql -u root -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 4 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

<code>-u</code> スイッチでログインしようとしているユーザーを指定します。<code>-h</code> スイッチでホストを指定します。リモートサーバーをセットアップしているのでない限り、これは通常 localhost です。最後に <code>-p</code> は、データベースへのアクセスのためにパスワードを入力することを mysql クライアントに通知します。<code>mysql></code> プロンプトに注目してください。ここがすべてのコマンドを入力する場所です。これで root ユーザーとして mysql プロンプトに入れたので、データベースのセットアップに進めます。

{{Important|mysql のデフォルトインストールは開発環境のシステムを対象としています。より安全なデフォルト設定にする場合、 /usr/bin/mysql_secure_installation を実行するとよいでしょう。}}

== データベースのセットアップ ==

=== データベースの作成 ===

既にログインして mysql プロンプトが表示されています。まず、今あるデータベースを見てみましょう。これを行うには、<code>SHOW DATABASES</code> コマンドを使用します。 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| mysql    |
| test     |
+----------+
2 rows in set (0.09 sec)
</pre>
}}

{{Important|MySQL のコマンドはセミコロン -- <code>;</code> -- で終わることを覚えておいてください。}}

既にテストデータベースが一つ作成されていますが、ここでは自分で作ってみましょう。データベースは <code>CREATE DATABASE</code> コマンドを使って作成します。"gentoo" という名前で作成します。 

{{Cmd|CREATE DATABASE gentoo;|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.08 sec)
</pre>
}}

応答から、コマンドがエラーなく実行されたことが分かります。この場合、1行が変更されました。これはメインの mysql データベースを指しており、そこで全データベースのリストが保持されています。背景の詳細についてはさほど気にする必要はありません。最後の数字はクエリーがどれくらいの速さで実行されたかを表します。<code>SHOW DATABASES</code> コマンドを再度実行して、データベースが作成されたことを確認できます。 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| gentoo   |
| mysql    |
| test     |
+----------+
3 rows in set (0.00 sec)
</pre>
}}

実際にデータベースが作成されています。新しい gentoo データベースでテーブルの作成をするためには、それを現在のデータベースとして選択する必要があります。このためには <code>USE</code> コマンドを使います。<code>USE</code> コマンドは現在のデータベースとして使用したいデータベースの名前をとります。もう一つの選択肢は、これをコマンドラインの <code>-D</code> スイッチの後に設定することです。それでは gentoo データベースに切り替えましょう。 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Database changed
</pre>
}}

現在のデータベースが先ほど作成した gentoo データベースになりました。これでテーブルの作成や情報の挿入を始めることができます。

== MySQL のテーブルでの作業 ==

=== テーブルの作成 ===

MySQL の構造の中には、データベース、テーブル、レコード、そしてフィールドがあります。データベースはテーブルをまとめており、テーブルはレコードをまとめており、レコードはフィールドをまとめており、フィールドが実際の情報を格納しています。ユーザーは、この構造に従って情報へアクセスする方法を選択します。私たちはここまでデータベースを扱ってきましたが、ここからはテーブルについての作業をしていきましょう。まず、<code>SHOW TABLES</code> コマンドを使ってデータベースと同様にテーブルを一覧表示できます。現在 gentoo データベースにはテーブルがないので、このコマンドは以下のように出力します: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
Empty set (0.00 sec)
</pre>
}}

これは、テーブルを作成する必要があることを意味します。そのためには、<code>CREATE TABLE</code> コマンドを使用します。しかしながら、このコマンドは単純な <code>CREATE DATABASE</code> コマンドとはかなり違います。このコマンドは引数のリストをとります。その形式は以下の通りです: 

{{CodeBox|title=CREATE TABLE の構文|lang=sql|1=
CREATE TABLE [table_name] ([field_name] [field_data_type]([size]));
}}

'''table_name''' は作成したいテーブルの名前です。今回は <code>developers</code> という名前のテーブルを作成してみましょう。このテーブルには開発者の名前(name)、電子メール(email)、そして仕事(job)を格納します。

'''field_name''' にはフィールドの名前を含めます。今回は3つの名前が必要です: name、email、そして job です。

'''field_data_type''' は格納する情報の型です。利用可能な様々な型が [http://dev.mysql.com/doc/mysql/en/column-types.html MySQL Column Types Page] にあります。今回は、すべてのフィールドで <code>VARCHAR</code> データ型を使用します。<code>VARCHAR</code> は文字列を扱う場合において最も単純なデータ型の一つです。 

'''size''' は1つのフィールドが格納するデータの大きさです。今回は128とします。これは、そのフィールドが128バイトの <code>VARCHAR</code> データを持てることを意味します。これについてはさらなる幾らかの技術的説明が先ほどのサイトで提供されていますが、さしあたってはこれを128文字と考えて構いません。これでテーブルの作成方法が分かったので、やってみましょう。 

{{Cmd|CREATE TABLE developers ( name VARCHAR(128), email VARCHAR(128), job VARCHAR(128));|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.11 sec)
</pre>
}}

正常にテーブルが作成できたようです。<code>SHOW TABLES</code> コマンドで確認してみましょう: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+------------------+
| Tables_in_gentoo |
+------------------+
| developers       |
+------------------+
1 row in set (0.00 sec)
</pre>
}}

はい、これが作成したテーブルです。しかしながら、セットアップしたフィールドの型についての情報がないようです。それを見るには、 <code>DESCRIBE</code> コマンド(または短縮して <code>DESC</code>)を使用します。このコマンドは引数としてテーブルの名前をとります。developers テーブルについてどのように表示されるか見てみましょう: 

{{Cmd|DESCRIBE developers;|prompt=mysql&gt; |output=<pre>
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| name  | varchar(128) | YES  |     | NULL    |       |
| email | varchar(128) | YES  |     | NULL    |       |
| job   | varchar(128) | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
</pre>
}}

ここには様々なフィールドとその型が表示されます。また、このガイドの範囲外のいくつかの追加属性も表示されます。詳細については、[http://dev.mysql.com/doc/mysql/en/ MySQL Reference Manual] を参照してください。これで、作業をするテーブルができました。次はデータを挿入してみましょう。

=== MySQL Database にデータを挿入する ===

テーブルに初期データを挿入する(またはデータを追加する)には <code>INSERT</code> コマンドを使用します。<code>CREATE TABLE</code> のように、このコマンドにも特有のフォーマットがあります: 

{{CodeBox|title=INSERT の構文|lang=sql|1=
INSERT INTO table (col1, col2, ...) VALUES('value1', 'value2', ...);
}}

このコマンドはテーブルにレコードを追加するために使われます。table は情報を入力したいテーブルを含みます。テーブルの名前の後には、データを挿入したい列のリストと、テーブルに挿入したい値を含む <code>VALUES()</code> が続きます。すべての列に値を挿入する場合には、値を列が定義された順番どおりに書けば列のリストを省略できます。今回はデータを developers テーブルに挿入します。サンプルレコードを挿入してみましょう: 

{{Cmd|INSERT INTO developers VALUES('Joe Smith', 'joesmith@gentoo.org', 'toolchain');|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.06 sec)
## (If you don't know the order of the columns in the table or want to insert an incomplete record)
mysql> INSERT INTO developers (job, name) VALUES('outsourced', 'Jane Doe');
Query OK, 1 row affected (0.01 sec)
</pre>
}}

返された結果によるとレコードは正しく挿入されたようです。では、複数のレコードを入力したい場合にはどうすればよいでしょう？ それが <code>LOAD DATA</code> コマンドが働く場面です。このコマンドはレコードをタブ区切りのファイルから読み込みます。ホームディレクトリーでレコードを含むファイルを編集してそれを試してみましょう。このファイルを {{Path|records.txt}} とします。以下は一例です: 

{{CodeBox|title=~/records.txt|1=
John Doe	johndoe@gentoo.org	portage
Chris White	chriswhite@gentoo.org	documentation
Sam Smith	samsmith@gentoo.org	amd64
}}

{{Important|あなたが今扱っているのがどんなデータなのか、しっかり把握しておいてください。ファイルの内容が確かでない場合には、<code>LOAD DATA</code> の使用は非常に危険です！}}

現在の <code>LOAD DATA</code> コマンドはかなり長い定義を持っていますが、ここでは最も単純な形式を使います。 

{{CodeBox|title=LOAD DATA の構文|lang=sql|1=
LOAD DATA LOCAL INFILE '/path/to/filename' INTO TABLE table;
}}

{{Path|/path/to/filename}} は使用するファイルのディレクトリーおよびファイル名です。table はテーブルの名前です。今回はファイルが {{Path|~/records.txt}}、table が developers になります。 

{{Cmd|LOAD DATA LOCAL INFILE '~/records.txt' INTO TABLE developers;|prompt=mysql&gt; |output=<pre>
Query OK, 3 rows affected (0.00 sec)
Records: 3  Deleted: 0  Skipped: 0  Warnings: 0
</pre>
}}

{{Important|何かしらの奇妙な挙動が生じた場合、各フィールドがタブで区切られていることを確認してください。情報を別のソースから入力ファイルに貼り付けた場合、タブがスペースに変換されているかもしれません。}}

うまくいきました。しかしながら、これでは単にレコードを挿入するだけで、MySQL のコントロールはまったくできません。多くのウェブアプリケーションは MySQL を手早く簡単にセットアップするために sql スクリプトを使用します。sql スクリプトを使用したい場合、mysql をバッチモードで実行するか、またはファイルをソースとして読み込む必要があります。これは mysql をバッチモードで実行する例です: 

{{Cmd|mysql -u root -h localhost -p < sqlfile}}

<code>LOAD DATA</code> と同様、{{Path|sqlfile}} が何をするのか必ず理解しておいてください。''さもないと、あなたのデータベースへのセキュリティ侵害が生じる可能性があります！'' sql ファイルを使用するもう一つの方法は <code>source</code> コマンドです。このコマンドは mysql のインタラクティブモード中に mysql コマンドを sql ファイルから実行します。sql ファイルをソースとして読み込む方法は以下の通りです: 

{{Cmd|source sqlfile;|prompt=mysql&gt; }}

sql ファイルの実行を求めるウェブアプリケーションを見つけた場合には、その作業をするために上の2つのコマンドを使用できます。これでテーブルのセットアップは済みましたが、それではフィールドのチェックはどうやるのでしょう？ クエリーを使ってテーブル検索をすることでこれを行っていきます。 

=== クエリーを使って MySQL のテーブルを閲覧する ===

クエリーはすべての SQL データベースの主要機能の一つです。テーブル内のデータを有用な形に変換するのに役立ちます。多くのクエリーは <code>SELECT</code> コマンドを使って実行されます。<code>SELECT</code> コマンドはかなり複雑なので、この文書ではコマンドの3つの基本的な形式のみを見ていきます。 

{{CodeBox|title=SELECT の形式|lang=sql|1=
## (テーブル内のすべての項目を選択する)
SELECT * FROM table;
## (テーブル内の特定の項目を選択する)
SELECT * FROM table WHERE field=value;
## (特定のフィールドを選択する)
SELECT field1,field2,field3 FROM table [WHERE field=value];
}}

最初の形式を簡単に見てみましょう。これは比較的単純で、テーブル全体を表示します。実行して、これまでにどのようなデータを持っているか見てみましょう。 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

以前に <code>INSERT</code> で挿入したデータと <code>LOAD DATA</code> で挿入したデータ両方が表示されています。では、今度は Chris White のレコードだけが必要だとします。これは、以下で示すように select の2つめの形式で実現できます。 

{{Cmd|SELECT * FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+---------------+
| name        | email                 | job           |
+-------------+-----------------------+---------------+
| Chris White | chriswhite@gentoo.org | documentation |
+-------------+-----------------------+---------------+
1 row in set (0.08 sec)
</pre>
}}

期待した通り、探していた特定の項目が選択されました。今度は、人の名前ではなく、仕事(job)と電子メール(email)アドレスだけが必要な場合を考えます。これは、以下で示すように3番目の形式で実現できます。 

{{Cmd|SELECT email,job FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-----------------------+---------------+
| email                 | job           |
+-----------------------+---------------+
| chriswhite@gentoo.org | documentation |
+-----------------------+---------------+
1 row in set (0.04 sec)
</pre>
}}

この選択方法は、後々わかることですが大量の情報を扱う場合には特に、管理がはるかに容易です。さて、現在は mysql の root ユーザーになっているので MySQL データベースで望むことを何でもできる無制限の権限があります。サーバー環境では、一ユーザーがそのような特権を持っていることにはかなり問題があります。データベースで誰が何をするのか制御するために、特権を設定しましょう。 

== MySQL における特権 ==

=== GRANT で特権を付与する ===

特権は、データベース、テーブル、その他ほとんどすべてのものに対してユーザーが持っているアクセス権の種類です。現在の gentoo データベースでは、権限により MySQL の root アカウントが唯一そこにアクセス可能なアカウントです。それでは、gentoo データベースにアクセスしてその中の情報を扱える、もう少し一般的な2つのユーザー guest と admin を作成しましょう。guest アカウントは制限されたアカウントにします。できるのはデータベースから情報を得ること、それだけです。admin は root と同様のコントロールができますが、gentoo データベースについてのみにします(メインの mysql データベースにはできない)。始める前に、幾分簡略化した <code>GRANT</code> コマンドの形式をよく見てみましょう。 

{{CodeBox|title=GRANT の構文|lang=sql|1=
GRANT [privileges] ON database.* TO '[user]'@'[host]' IDENTIFIED BY '[password]';
}}

{{Note|<code>GRANT</code> はユーザーを作成する方法とされています。しかし、MySQL の新しいバージョンでは <code>CREATE_USER</code> 関数が含まれています。ただし推奨されているのはいまも <code>GRANT</code> です。}}

まず割り当てたい特権を決めます。これまでに学んできたものに関して設定できる特権には以下のようなものがあります: 

* <code>ALL</code> - このデータベースのコントロールについてすべての特権を与える
* <code>CREATE</code> - ユーザーにテーブルの作成を許可する
* <code>SELECT</code> - ユーザーにテーブルへのクエリーを許可する
* <code>INSERT</code> - ユーザーにテーブルへのデータの挿入を許可する
* <code>SHOW DATABASES</code> - ユーザーにデータベースの一覧表示を許可する
* <code>USAGE</code> - ユーザーは何も特権を持たない
* <code>GRANT OPTION</code> - ユーザーに特権の付与を許可する

{{Note|MySQLをウェブアプリケーションとやりとりするために実行している場合、必要になる許可はたいてい <code>CREATE</code>、<code>SELECT</code>、<code>INSERT</code> (これらについてはここで議論しています)、<code>DELETE</code>、<code>UPDATE</code> (これらの詳細な情報については [http://dev.mysql.com/doc/mysql/en/grant.html MySQL Reference Manual - GRANT and REVOKE Syntax] を見てください) のみです。多くの人々が実際には必要でないのにすべての権限を付与するという誤りを犯しています。このような権限で一般的な操作に問題があるか確かめるには、アプリケーションの開発者に確認してください。}}

admin ユーザーには ALL がよいでしょう。guest ユーザーは読み取り専用アクセスのため <code>SELECT</code> で十分です。'''database''' はユーザーにこれらの権限を持たせたいデータベースです。この例では、gentoo が database になります。.* はすべてのテーブルを意味します。お望みなら、テーブルごとにアクセス権を適用できます。'''user''' はユーザーの名前、'''host''' はユーザーのアクセス元のホスト名です。多くの場合、これは localhost です。最後に、'''password''' はユーザーのパスワードです。これで情報が揃いましたから、ユーザーを作成していきましょう。 

{{Cmd|GRANT ALL ON gentoo.* TO 'admin'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

{{Cmd|GRANT SELECT ON gentoo.* TO 'guest'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

これでユーザーがセットアップできたので、それらをテストします。まずコマンドプロンプトで <code>quit</code> と入力して mysql を終了します: 

{{Cmd|quit|prompt=mysql&gt; }}

これでコンソールに戻ってきました。次でセットアップしたユーザーが何をできるか見てみましょう。

=== ユーザーの権限をテストする ===

今度は guest ユーザーとしてログインを試みます。現在、guest ユーザーは <code>SELECT</code> 特権のみを持っています。これは基本的には検索のみができ、それ以外は何もできないということになります。では、guest アカウントとしてログインしてください。 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 6 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

それではユーザーの制約をテストします。gentoo データベースに切り替えてください: 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
</pre>
}}

想定していない何らかの操作をしてみましょう。テーブルの作成を試みます。 

{{Cmd|CREATE TABLE test (test VARCHAR(20), foobar VARCHAR(2));|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

このように、ユーザーが適切なアクセス権を持っていないためこの関数は失敗します。しかしながら、唯一付与したアクセス権は <code>SELECT</code> 文です。それを試してみましょう: 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

コマンドは成功し、ユーザー権限でできることがちょっと理解できましたね。しかしながら、私たちは同様に admin アカウントも作成しました。これは、すべての権限を付与されたユーザーにも限界があることを示すために作成したものです。次は MySQL を終了し admin としてログインします。 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u admin -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 7 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

はじめに、admin ユーザーで新しいデータベースの作成を試みます。この admin ユーザーはroot MySQL アカウントと似たアクセス権を持ち、選択したあらゆる種類の gentoo データベースへの変更をすることができます。ここでは、ユーザーのメイン MySQL データベースへのアクセスをテストします。以前、特定のデータベースの権限のみを設定したことを思い出してください。 

{{Cmd|CREATE DATABASE gentoo2;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'admin@localhost' to database 'gentoo2'
</pre>
}}

実際に admin ユーザーは gentoo データベースでのあらゆる権限に関わらずメイン MySQL データベースでデータベースを作成することはできません。しかしそれでも、admin アカウントを以下のデータ挿入の例で示すように gentoo データベースの変更に使用することはできます。 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql> INSERT INTO developers VALUES('Bob Simmons', 'bobsimmons@gentoo.org', 'python');
Query OK, 1 row affected (0.08 sec)
</pre>
}}

admin ユーザーはこのデータベースに好きなだけアクセスできます。さて、しばしばユーザーの権限を取り除かなければならないことがあります。問題のあるユーザーの場合もあれば、退職した従業員の場合もあるでしょう。<code>REVOKE</code> コマンドを使ってユーザーの権限を無効にする方法を見ていきましょう。 

=== REVOKE コマンドでユーザーのアクセス権を削除する ===

<code>REVOKE</code> コマンドはユーザーのアクセス権を否定するのに使います。すべてのアクセス権を否定することも、特定のアクセス権を否定することもできます。実際のところ、そのフォーマットは <code>GRANT</code> とよく似ています。 

{{CodeBox|title=REVOKE の構文|lang=sql|1=
REVOKE [privileges] ON database.* FROM '[user]'@'[host]';
}}

ここにあるオプションは <code>GRANT</code> コマンドの節で説明されています。しかしながらこの節では、ユーザーのアクセスをすべて否定します。guest アカウントがセキュリティー上何らかの問題を発生させたことに気付いたと仮定します。すべての特権の取り消しが決まりました。root としてログインし、必要な作業をしましょう。 

{{Cmd|REVOKE ALL ON gentoo.* FROM 'guest'@'localhost';|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

{{Note|この例では、ユーザーのアクセス権は単純なのでデータベースごとの取消しで問題ありません。しかし、より大規模なケースではたいてい gentoo.* ではなく *.* を使用して他のすべてのデータベースへのアクセスも削除することになるでしょう。}}

それでは、mysql を終了して guest ユーザーとしてログインしてください。 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 9 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

ログインすることはできましたが、gentoo へのアクセス権はもはや無くなっています。 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

これで、問題のあるユーザーはもはや gentoo データベースにアクセスできなくなりました。ユーザーがまだログインできることに留意してください。これは、ユーザーがメインの MySQL データベースに残っているためです。<code>DELETE</code> と MySQL ユーザーテーブルを使ってアカウントを完全に削除する方法を見ていきましょう。 

=== DELETE を使用してアカウントを削除する ===

MySQL ユーザーテーブルはすべてのユーザーと彼らに関する情報のリストです。root としてログインしていることを確認してください。それではメイン MySQL データベースを使用します。 

{{Cmd|USE mysql;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql>
</pre>
}}

mysql データベースにどのようなテーブルがあるか見てみましょう: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+-----------------+
| Tables_in_mysql |
+-----------------+
| columns_priv    |
| db              |
| func            |
| host            |
| tables_priv     |
| user            |
+-----------------+
6 rows in set (0.00 sec)
</pre>
}}

user テーブルが私たちが探しているものです。しかしながら、ユーザーテーブルは30の様々なフィールドがあり、読むのはとても大変です。話を単純にするために、<code>SELECT</code> 文の3つ目のバージョンを使いましょう。探しているのは Host と User です。 

{{Cmd|SELECT Host,User FROM user WHERE User {{=}} 'guest';|prompt=mysql&gt; |output=<pre>
+-----------+-------+
| Host      | User  |
+-----------+-------+
| localhost | guest |
+-----------+-------+
1 row in set (0.00 sec)
</pre>
}}

これで情報が手に入りましたから、guest ユーザーを取り除くことができます。これは、<code>DELETE</code> コマンドで行うことができ、構文は以下の通りです。 

{{CodeBox|title=DELETE の構文|lang=sql|1=
DELETE FROM table WHERE field='value';
}}

<code>DELETE</code> が <code>SELECT</code> 文にフォーマットの点でやや似ていることに気付いたでしょうか。この例では、field が User、value が guest になります。これにより user が guest である user テーブルのレコードが削除され、guest ユーザーアカウントが正常に削除されます。やってみましょう: 

{{Cmd|DELETE FROM user WHERE User{{=}}'guest';|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.07 sec)
</pre>}}

{{Cmd|FLUSH PRIVILEGES;|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

うまくいったようです。ログアウトして guest ユーザーとしてログインを試みてください。 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
ERROR 1045: Access denied for user: 'guest@localhost' (Using password: YES)
</pre>
}}

Our user is now successfully deleted! 

=== Conclusion ===

While this guide focuses mainly on setting up MySQL on the command line, a few alternatives are available in GUI form: 

* [http://www.phpmyadmin.net/home_page/ phpMyAdmin] - Popular php based MySQL administration tool.
* [http://sourceforge.net/projects/mysqlnavigator/ mysqlnavigator] - QT frontend to MySQL.
* [http://gmyclient.sourceforge.net/ gmyclient] - A GNOME based MySQL client.
* [http://www.knoda.org/ knoda] - A KDE MySQL client.

This ends the MySQL introductory tutorial. I hope this gives you a better understanding of the basics behind MySQL and getting a database set up.

[[Category:Database]]  {{Migrated|originalauthors=Chris White, Shyam Mani, Xavier Neys}}
