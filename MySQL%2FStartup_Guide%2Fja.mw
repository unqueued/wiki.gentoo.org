<languages />

{{Metadata|abstract=この文書は、ユーザーによるMySQLのセットアップと使用を手助けします。}}

この文書は、ユーザーによるMySQLのセットアップと使用を手助けします。

== MySQL をはじめる ==

=== 背景 ===

MySQL は様々なアプリケーションで使用されている人気のあるデータベースサーバーです。SQL は (S)tructured (Q)uery (L)anguage (訳注: 構造化クエリー言語)を意味しており、MySQL はこれを他のプログラムとのやりとりに使っています。それに加えて、MySQL はユーザーに追加機能を提供するため独自の拡張された SQL 機能を有しています。この文書では、MySQL の初期インストール、データベースやテーブルのセットアップ、新しいユーザーの作成をする方法を見ていきます。それでは、インストールの方法から始めましょう。 

=== MySQL のインストール ===

まず、システムに MySQL がインストールされていることを確認してください。MySQL の特定の機能が必要な場合は、インストールをうまく調整するために必要なUSEフラグを有効化しているか確認してください。 

{{Emerge|mysql}}

インストールが完了すると、以下の通知が表示されるはずです: 

{{CodeBox|title=MySQL の einfo メッセージ|1=
You might want to run:
"emerge --config =dev-db/mysql-[version]"
if this is a new install.
}}

今回は新規インストールなのでこのコマンドを実行します。MySQL データベースの設定中に何か尋ねられた場合には <code>ENTER</code> を押す必要があります。設定ではデータベース、テーブル、ユーザー、権限などの管理情報を含む MySQL のメインデータベースをセットアップします。ここでは、できる限り root パスワードを変更することが推奨されています。必ずこれを行ってください、さもないとたまたまやってきた誰かがデフォルト設定の MySQL サーバーを乗っ取ってしまうかもしれません。 

{{RootCmd|emerge --config {{=}}dev-db/mysql-[version]|output=<pre>
 * MySQL DATADIR is /var/lib/mysql
 * Press ENTER to create the mysql database and set proper
 * permissions on it, or Control-C to abort now...
 
   Preparing db table
   Preparing host table
   Preparing user table
   Preparing func table
   Preparing tables_priv table
   Preparing columns_priv table
   Installing all prepared tables
 
   To start mysqld at boot time you have to copy support-files/mysql.server
   to the right place for your system
 
   PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
   To do so, issue the following commands to start the server
   and change the applicable passwords:
 
   /etc/init.d/mysql start
   /usr/bin/mysqladmin -u root -h pegasos password 'new-password'
   /usr/bin/mysqladmin -u root password 'new-password'
   Depending on your configuration, a -p option may be needed
   in the last command. See the manual for more details.
</pre>}}

{{Note|上のコマンドがホスト名が localhost に設定されているという理由で中断された場合には、ホスト名をたとえば ''gentoo'' などの別の名前に変更してください。{{Path|/etc/conf.d/hostname}} ファイルを更新してから {{Path|/etc/init.d/hostname}} を再起動します。}}

MySQL についての ebuild 特有でない情報の一部は、この文書をできるだけ一貫したものに保つためにここでは省略しています。

{{Important|mysql-4.0.24-r2 以降では設定フェーズ内でパスワードを入力します。これにより、root パスワードがより安全になります。}}

設定スクリプトがパスワードを設定するために実行すべきコマンドを出力していますから、それらを今実行してください。 

OpenRC をお使いの場合はこのコマンドを実行します:

{{RootCmd|/etc/init.d/mysql start|output=<pre>
 * Re-caching dependency info (mtimes differ)...
 * Starting mysqld (/etc/mysql/my.cnf) ...        [ ok ]
</pre>}}

systemd をお使いの場合は代わりに以下のコマンドを実行してください:

{{RootCmd|systemctl restart mysqld.service}}

その後、root パスワードを設定します:

{{RootCmd|/usr/bin/mysqladmin -u root -h localhost password 'new-password'}}

MySQL サーバーにログインして、root パスワードが正しく設定されているか確かめることができます: 

{{Cmd|mysql -u root -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 4 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

<code>-u</code> スイッチでログインしようとしているユーザーを指定します。<code>-h</code> スイッチでホストを指定します。リモートサーバーをセットアップしているのでない限り、これは通常 localhost です。最後に <code>-p</code> は、データベースへのアクセスのためにパスワードを入力することを mysql クライアントに通知します。<code>mysql></code> プロンプトに注目してください。ここがすべてのコマンドを入力する場所です。これで root ユーザーとして mysql プロンプトに入れたので、データベースのセットアップに進めます。

{{Important|mysql のデフォルトインストールは開発環境のシステムを対象としています。より安全なデフォルト設定にする場合、 /usr/bin/mysql_secure_installation を実行するとよいでしょう。}}

== データベースのセットアップ ==

=== データベースの作成 ===

既にログインして mysql プロンプトが表示されています。まず、今あるデータベースを見てみましょう。これを行うには、<code>SHOW DATABASES</code> コマンドを使用します。 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| mysql    |
| test     |
+----------+
2 rows in set (0.09 sec)
</pre>
}}

{{Important|MySQL のコマンドはセミコロン -- <code>;</code> -- で終わることを覚えておいてください。}}

既にテストデータベースが一つ作成されていますが、ここでは自分で作ってみましょう。データベースは <code>CREATE DATABASE</code> コマンドを使って作成します。"gentoo" という名前で作成します。 

{{Cmd|CREATE DATABASE gentoo;|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.08 sec)
</pre>
}}

応答から、コマンドがエラーなく実行されたことが分かります。この場合、1行が変更されました。これはメインの mysql データベースを指しており、そこで全データベースのリストが保持されています。背景の詳細についてはさほど気にする必要はありません。最後の数字はクエリーがどれくらいの速さで実行されたかを表します。<code>SHOW DATABASES</code> コマンドを再度実行して、データベースが作成されたことを確認できます。 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| gentoo   |
| mysql    |
| test     |
+----------+
3 rows in set (0.00 sec)
</pre>
}}

実際にデータベースが作成されています。新しい gentoo データベースでテーブルの作成をするためには、それを現在のデータベースとして選択する必要があります。このためには <code>USE</code> コマンドを使います。<code>USE</code> コマンドは現在のデータベースとして使用したいデータベースの名前をとります。もう一つの選択肢は、これをコマンドラインの <code>-D</code> スイッチの後に設定することです。それでは gentoo データベースに切り替えましょう。 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Database changed
</pre>
}}

現在のデータベースが先ほど作成した gentoo データベースになりました。これでテーブルの作成や情報の挿入を始めることができます。

== MySQL のテーブルでの作業 ==

=== テーブルの作成 ===

MySQL の構造の中には、データベース、テーブル、レコード、そしてフィールドがあります。データベースはテーブルをまとめており、テーブルはレコードをまとめており、レコードはフィールドをまとめており、フィールドが実際の情報を格納しています。ユーザーは、この構造に従って情報へアクセスする方法を選択します。私たちはここまでデータベースを扱ってきましたが、ここからはテーブルについての作業をしていきましょう。まず、<code>SHOW TABLES</code> コマンドを使ってデータベースと同様にテーブルを一覧表示できます。現在 gentoo データベースにはテーブルがないので、このコマンドは以下のように出力します: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
Empty set (0.00 sec)
</pre>
}}

これは、テーブルを作成する必要があることを意味します。そのためには、<code>CREATE TABLE</code> コマンドを使用します。しかしながら、このコマンドは単純な <code>CREATE DATABASE</code> コマンドとはかなり違います。このコマンドは引数のリストをとります。その形式は以下の通りです: 

{{CodeBox|title=CREATE TABLE の文法|lang=sql|1=
CREATE TABLE [table_name] ([field_name] [field_data_type]([size]));
}}

'''table_name''' は作成したいテーブルの名前です。今回は <code>developers</code> という名前のテーブルを作成してみましょう。このテーブルには開発者の名前(name)、電子メール(email)、そして仕事(job)を格納します。

'''field_name''' にはフィールドの名前を含めます。今回は3つの名前が必要です: name、email、そして job です。

'''field_data_type''' は格納する情報の型です。利用可能な様々な型が [http://dev.mysql.com/doc/mysql/en/column-types.html MySQL Column Types Page] にあります。今回は、すべてのフィールドで <code>VARCHAR</code> データ型を使用します。<code>VARCHAR</code> は文字列を扱う場合において最も単純なデータ型の一つです。 

'''size''' は1つのフィールドが格納するデータの大きさです。今回は128とします。これは、そのフィールドが128バイトの <code>VARCHAR</code> データを持てることを意味します。これについてはさらなる幾らかの技術的説明が先ほどのサイトで提供されていますが、さしあたってはこれを128文字と考えて構いません。これでテーブルの作成方法が分かったので、やってみましょう。 

{{Cmd|CREATE TABLE developers ( name VARCHAR(128), email VARCHAR(128), job VARCHAR(128));|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.11 sec)
</pre>
}}

正常にテーブルが作成できたようです。<code>SHOW TABLES</code> コマンドで確認してみましょう: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+------------------+
| Tables_in_gentoo |
+------------------+
| developers       |
+------------------+
1 row in set (0.00 sec)
</pre>
}}

はい、これが作成したテーブルです。しかしながら、セットアップしたフィールドの型についての情報がないようです。それを見るには、 <code>DESCRIBE</code> コマンド(または短縮して <code>DESC</code>)を使用します。このコマンドは引数としてテーブルの名前をとります。developers テーブルについてどのように表示されるか見てみましょう: 

{{Cmd|DESCRIBE developers;|prompt=mysql&gt; |output=<pre>
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| name  | varchar(128) | YES  |     | NULL    |       |
| email | varchar(128) | YES  |     | NULL    |       |
| job   | varchar(128) | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
</pre>
}}

ここには様々なフィールドとその型が表示されます。また、このガイドの範囲外のいくつかの追加属性も表示されます。詳細については、[http://dev.mysql.com/doc/mysql/en/ MySQL Reference Manual] を参照してください。これで、作業をするテーブルができました。次はデータを挿入してみましょう。

=== MySQL Database にデータを挿入する ===

テーブルに初期データを挿入する(またはデータを追加する)には <code>INSERT</code> コマンドを使用します。<code>CREATE TABLE</code> のように、このコマンドにも特有のフォーマットがあります: 

{{CodeBox|title=INSERT の構文|lang=sql|1=
INSERT INTO table (col1, col2, ...) VALUES('value1', 'value2', ...);
}}

このコマンドはテーブルにレコードを追加するために使われます。table は情報を入力したいテーブルを含みます。テーブルの名前の後には、データを挿入したい列のリストと、テーブルに挿入したい値を含む <code>VALUES()</code> が続きます。すべての列に値を挿入する場合には、値を列が定義された順番どおりに書けば列のリストを省略できます。今回はデータを developers テーブルに挿入します。サンプルレコードを挿入してみましょう: 

{{Cmd|INSERT INTO developers VALUES('Joe Smith', 'joesmith@gentoo.org', 'toolchain');|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.06 sec)
## (If you don't know the order of the columns in the table or want to insert an incomplete record)
mysql> INSERT INTO developers (job, name) VALUES('outsourced', 'Jane Doe');
Query OK, 1 row affected (0.01 sec)
</pre>
}}

According to our return result, it appears that the record was inserted correctly. What if we want to input more information than just one record? That's where the <code>LOAD DATA</code> command comes into play. This loads records from a tab separated file. Let's try that by editing a file in our home directory with the records. We'll call this file {{Path|records.txt}} . Here's a sample: 

{{CodeBox|title=~/records.txt|1=
John Doe	johndoe@gentoo.org	portage
Chris White	chriswhite@gentoo.org	documentation
Sam Smith	samsmith@gentoo.org	amd64
}}

{{Important|Be sure you know what data you're dealing with. It's very unsafe to use <code>LOAD DATA</code> when you are uncertain of the file's contents!}}

Now the <code>LOAD DATA</code> command has a somewhat elongated definition, but we'll use the simplest form here. 

{{CodeBox|title=LOAD DATA Syntax|lang=sql|1=
LOAD DATA LOCAL INFILE '/path/to/filename' INTO TABLE table;
}}

{{Path|/path/to/filename}} is the directory and filename that will be used. table is the name of our table. In this case, our file is {{Path|~/records.txt}} and the table is developers. 

{{Cmd|LOAD DATA LOCAL INFILE '~/records.txt' INTO TABLE developers;|prompt=mysql&gt; |output=<pre>
Query OK, 3 rows affected (0.00 sec)
Records: 3  Deleted: 0  Skipped: 0  Warnings: 0
</pre>
}}

{{Important|If you come up with any strange behavior, make sure your fields are separated by tabs. If you paste information into your infile from another source, it may convert your tabs to spaces.}}

That worked well. However, this simply inserts records, and does not give you any sort of control over MySQL. Many web applications use sql scripts in order to setup MySQL quickly and easily. If you want to use an sql script, you'll need to run mysql in batch mode, or source the file. Here's an example of running mysql in batch mode: 

{{Cmd|mysql -u root -h localhost -p < sqlfile}}

Like <code>LOAD DATA</code> , be sure you can tell what {{Path|sqlfile}} does. ''Failure to do so may cause your database to be compromised!'' Another way you can accomplish this is to use the <code>source</code> command. This command will run mysql commands from an sql file while in the mysql interactive mode. Here is how to source an sql file: 

{{Cmd|source sqlfile;|prompt=mysql&gt; }}

If you see a web application wanting you to run an sql file, the two above commands can be used to accomplish that task. We have our table setup, so how do we check our fields? We do this by searching our table with queries. 

=== Browsing MySQL Tables With Queries ===

Queries are one of the main features of any SQL database. They help us turn data in our tables into something useful. Most queries are done with the <code>SELECT</code> command. The <code>SELECT</code> command is fairly complex, and we're only going to look at three main forms of the command in this document. 

{{CodeBox|title=SELECT forms|lang=sql|1=
## (Select all entries in a table)
SELECT * FROM table;
## (Select specific entries in a table)
SELECT * FROM table WHERE field=value;
## (Select specific fields)
SELECT field1,field2,field3 FROM table [WHERE field=value];
}}

Let's take a quick look at the first form. It's relatively simple and gives you an overall look of your table. We'll go ahead and run it to see what data we have so far. 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

We see both the data we inserted through <code>INSERT</code> and those inserted by <code>LOAD DATA</code> present. Now, let's say that we just want to see the record for Chris White. We can do so with the second form of select as shown below. 

{{Cmd|SELECT * FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+---------------+
| name        | email                 | job           |
+-------------+-----------------------+---------------+
| Chris White | chriswhite@gentoo.org | documentation |
+-------------+-----------------------+---------------+
1 row in set (0.08 sec)
</pre>
}}

As expected, the specific entry that we were looking for has been selected. Now, let's say we only wanted to know the person's job and email address, not their name. We can do so with the third form of <code>SELECT</code> as shown here. 

{{Cmd|SELECT email,job FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-----------------------+---------------+
| email                 | job           |
+-----------------------+---------------+
| chriswhite@gentoo.org | documentation |
+-----------------------+---------------+
1 row in set (0.04 sec)
</pre>
}}

This method of selection is a lot easier to manage, expecially with larger amounts of information, as we'll see later on. Right now, being the root mysql user, we have unlimited permissions to do what we wish with the MySQL database. In a server environment, a user with such privileges can be quite problematic. In order to control who does what with the databases, we setup privileges. 

== MySQL Privileges ==

=== Granting Privileges with GRANT ===

Privileges are what kind of access users have to databases, tables, pretty much anything. Right now in the gentoo database, the MySQL root account is the only account that can access it, given its permissions. Now, let's create two somewhat generic users, guest and admin, who will access the gentoo database and work with the information in it. The guest account will be a restricted one. All it will be able to do is get information from the database, and that's it. admin will have the same control as root, but only for the gentoo database (not the main mysql databases). Before we start on that, let's have a closer look at this somewhat simplified format of the <code>GRANT</code> command. 

{{CodeBox|title=GRANT Syntax|lang=sql|1=
GRANT [privileges] ON database.* TO '[user]'@'[host]' IDENTIFIED BY '[password]';
}}

{{Note|<code>GRANT</code> is considered to be the way to create a user. Later versions of MySQL, however, do contain a<code>CREATE_USER</code> function, though<code>GRANT</code> is still preferred.}}

First we have the privileges we wish to assign. With what we've learned so far, here are some of the privileges you can set: 

* <code>ALL</code> - Gives the all privilege control for the database
* <code>CREATE</code> - Allows users to create tables
* <code>SELECT</code> - Allows users to query tables
* <code>INSERT</code> - Allows users to insert data into a table
* <code>SHOW DATABASES</code> - Allows users to see a list of databases
* <code>USAGE</code> - User has no privileges
* <code>GRANT OPTION</code> - Allows users to grant privileges

{{Note|If you're running MySQL to communicate data to a web application, <code>CREATE</code> , <code>SELECT</code> , <code>INSERT</code> (discussed here), <code>DELETE</code> and <code>UPDATE</code> (for further infomation look up the [http://dev.mysql.com/doc/mysql/en/grant.html MySQL Reference Manual - GRANT and REVOKE Syntax] section) are the only permissions you will most likely need. A lot of people make the mistake of granting all permissions when it's not really necessary. Check with the application developers to see if such permissions will cause issues with general operation.}}

For our admin user, ALL will do. For the guest user, <code>SELECT</code> will be sufficient for read only access. '''database''' is the database we wish the user to have these permissions on. In this example, gentoo is the database. The .* means all tables. If you wanted to, you could apply per table access. '''user''' is the name of the user and '''host''' is the hostname the user will be accessing from. In most cases, this will be localhost. Finally, '''password''' is the user's password. Given the information, let's go ahead and create our users. 

{{Cmd|GRANT ALL ON gentoo.* TO 'admin'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

{{Cmd|GRANT SELECT ON gentoo.* TO 'guest'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

Now that we have the users setup, let's test them out. First we quit mysql by typing <code>quit</code> at the command prompt: 

{{Cmd|quit|prompt=mysql&gt; }}

We're now back at the console. Now that we have our users setup, let's go ahead and see what they can do.

=== Testing User Permissions ===

We shall now attempt to login as the guest user. Currently, the guest user has <code>SELECT</code> only privileges. This basically comes down to being able to search and nothing more. Go ahead and login with the guest account. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 6 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Now we should test the user restriction(s). Let's switch to the gentoo database: 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
</pre>
}}

Now let's try to do something we are not supposed to. We'll attempt to create a table. 

{{Cmd|CREATE TABLE test (test VARCHAR(20), foobar VARCHAR(2));|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

As you can see, this function fails, as our user does not have the appropriate access. However, one access we did grant is the <code>SELECT</code> statement. Let's go ahead and try that: 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

The command succeeds, and we're given a glimpse of what user permissions can do. We did, however, create an admin account as well. This was created to show that even all permissions granted users can still have limitations. Go ahead and quit MySQL and login as the admin. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u admin -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 7 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

To begin, we'll try creating a new database with our admin user. This admin user will have access similiar to the root MySQL account, and will be able to do any kind of modification to the gentoo database it chooses. This will test the user's access to the main MySQL database. Remember ealier that we only set permissions to a specific database. 

{{Cmd|CREATE DATABASE gentoo2;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'admin@localhost' to database 'gentoo2'
</pre>
}}

Indeed, the admin user cannot create databases on the main MySQL database, despite all his permissions on the gentoo database. However, we're still able to use the admin account to modify the gentoo database, as shown here by this example data insertion. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql> INSERT INTO developers VALUES('Bob Simmons', 'bobsimmons@gentoo.org', 'python');
Query OK, 1 row affected (0.08 sec)
</pre>
}}

The admin user can access the database as they please. Now sometimes, we need to get rid of user permissions. This could be anything from a problematic user to a retired employee. Let's take a look at how to disable user permissions with the <code>REVOKE</code> command. 

=== Removing User Access With The REVOKE Command ===

The <code>REVOKE</code> command lets us deny access to a user. We can either deny full access, or specific access. In fact, the format is very similiar to <code>GRANT</code> . 

{{CodeBox|title=REVOKE Syntax|lang=sql|1=
REVOKE [privileges] ON database.* FROM '[user]'@'[host]';
}}

Options here are explained in the <code>GRANT</code> command section. In this section however, we're going to deny full access to a user. Let's say we find out the guest account is causing some problems security wise. We decide to revoke all privileges. We login as root and do the needful. 

{{Cmd|REVOKE ALL ON gentoo.* FROM 'guest'@'localhost';|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

{{Note|In this case, user access is simple, so per database revoking is not a problem. However, in larger cases, you would most likely be using *.* instead of gentoo.* to remove user access to all other databases.}}

Now let's quit and attempt to login as a guest user. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 9 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Although we're able to login, our access to gentoo is now gone. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

And our problematic user is no longer able to access the gentoo database. Please note that the user was still able to login. That is because they remain in the main MySQL database. Let's take a look at how to completely remove an account with <code>DELETE</code> and the MySQL user table. 

=== Removing Accounts Using DELETE ===

The MySQL user table is a listing of all users and information about them. Make sure you're logged in as root. Then go ahead and use the main MySQL database. 

{{Cmd|USE mysql;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql>
</pre>
}}

Now let's see what tables the mysql database has: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+-----------------+
| Tables_in_mysql |
+-----------------+
| columns_priv    |
| db              |
| func            |
| host            |
| tables_priv     |
| user            |
+-----------------+
6 rows in set (0.00 sec)
</pre>
}}

The user table is the table we're after. However, the user table contains 30 different fields, making it very hard to read. In order to make things easier to read, we'll go ahead and use the third version of the <code>SELECT</code> statement. The fields we're after are Host and User. 

{{Cmd|SELECT Host,User FROM user WHERE User {{=}} 'guest';|prompt=mysql&gt; |output=<pre>
+-----------+-------+
| Host      | User  |
+-----------+-------+
| localhost | guest |
+-----------+-------+
1 row in set (0.00 sec)
</pre>
}}

Now that we have our information, we can get rid of the guest user. This is done with the <code>DELETE</code> command and the syntax is shown below. 

{{CodeBox|title=DELETE Syntax|lang=sql|1=
DELETE FROM table WHERE field='value';
}}

You may notice that <code>DELETE</code> is somewhat similiar to the <code>SELECT</code> statement in its format. In this case, the field will be User, and the value guest. This will delete the record in the user table where the user is guest, successfully deleting our guest user account. Let's go ahead and do that: 

{{Cmd|DELETE FROM user WHERE User{{=}}'guest';|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.07 sec)
</pre>}}

{{Cmd|FLUSH PRIVILEGES;|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

It seems to have worked ok. Let's test by logging out and attempting to login as our guest user. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
ERROR 1045: Access denied for user: 'guest@localhost' (Using password: YES)
</pre>
}}

Our user is now successfully deleted! 

=== Conclusion ===

While this guide focuses mainly on setting up MySQL on the command line, a few alternatives are available in GUI form: 

* [http://www.phpmyadmin.net/home_page/ phpMyAdmin] - Popular php based MySQL administration tool.
* [http://sourceforge.net/projects/mysqlnavigator/ mysqlnavigator] - QT frontend to MySQL.
* [http://gmyclient.sourceforge.net/ gmyclient] - A GNOME based MySQL client.
* [http://www.knoda.org/ knoda] - A KDE MySQL client.

This ends the MySQL introductory tutorial. I hope this gives you a better understanding of the basics behind MySQL and getting a database set up.

[[Category:Database]]  {{Migrated|originalauthors=Chris White, Shyam Mani, Xavier Neys}}
