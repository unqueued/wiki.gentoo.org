== Converting to a "Native" btrfs Based System ==
This exercise is an update to the original example for re-basing a gentoo installation's root filesystem to use btrfs [[Btrfs_system_root|found here]].  In this case, the existing system is a mirror set using two 2tb drives at /dev/sda and /dev/sdb.  Two fresh 2tb drives have been added at /dev/sdc and /dev/sdd.  In the original exercise, the mdadm array was kept to mirror the /boot partitions on the two drives, while the rest of the partitions were converted to btrfs subvolumes.

This second exercise explores the use of grub2 to fully convert the mirror set to use the multi-volume functionality of btrfs, implementing /boot as a mirrored btrfs filesystem and forgoing the need to use an initramfs file on /boot to provide early userspace mounting of the root subvolume.  We also will be using the gptfdisk ebuild tools to make a GPT based partition table on the new mirror set in place of a legacy MBR table.

One of the lessons learned here is that grub2 ( 2.00_p5107-r2 here) and the current kernel (3.10.25 here) are not quite up to the job of directly booting a filesystem in a btrfs subvolume, at least, not one in a multi-disc set.  However it is able to find a simple filesystem on the default volume of a multi-disc set.

=== Partitioning ===
Emerge gptfdisk if you don't already have it.  It provides the gdisk, sgdisk and cgdisk utilities for manipulating GPT partitions.  These correspond to the legacy fdisk, sfdisk and cfdisk utilities for MBR tables.

We followed the writeup on grub2 [[GRUB2|here]] to put together the following GPT scheme that GRUB2 can use and got it working after a false start or two.

{{RootCmd|cgdisk|output=<pre>
                                                          cgdisk 0.8.6

                                                      Disk Drive: /dev/sdc
                                                   Size: 3907029168, 1.8 TiB

Part. #     Size        Partition Type            Partition Name
----------------------------------------------------------------
            1.8 TiB     free space

    [ Align  ]  [ Backup ]  [  Help  ]  [  Load  ]  [  New   ]  [  Quit  ]  [ Verify ]  [ Write  ]

(Choosing new)
First sector (40-3907029134, default = 40): 2048
Size in sectors or {KMGTP} (default = 3907027087): 6144
Hex code or GUID (L to show codes, Enter = 8300): EF02
Enter new partition name, or <Enter> to use the current name:
grub2biosboot

(resulting display)

                                          cgdisk 0.8.6

                                      Disk Drive: /dev/sdc
                                   Size: 3907029168, 1.8 TiB

Part. #     Size        Partition Type            Partition Name
----------------------------------------------------------------
            1007.0 KiB  free space
   1        3.0 MiB     BIOS boot partition       grub2biosboot
            1.8 TiB     free space

    [ Align  ]  [ Backup ]  [  Help  ]  [  Load  ]  [  New   ]  [  Quit  ]  [ Verify ]  [ Write  ]

(arrowing to highlight the 1.8TiB freespace entry and choosing New)


First sector (8192-3907029134, default = 8192):
Size in sectors or {KMGTP} (default = 3907020943): 500M
Hex code or GUID (L to show codes, Enter = 8300): 
Enter new partition name, or <Enter> to use the current name:
boot

(resulting display)

                                          cgdisk 0.8.6

                                      Disk Drive: /dev/sdc
                                   Size: 3907029168, 1.8 TiB

Part. #     Size        Partition Type            Partition Name
----------------------------------------------------------------
            1007.0 KiB  free space
   1        3.0 MiB     BIOS boot partition       grub2biosboot
   2        500.0 MiB   Linux filesystem          boot
            1.8 TiB     free space

    [ Align  ]  [ Backup ]  [  Help  ]  [  Load  ]  [  New   ]  [  Quit  ]  [ Verify ]  [ Write  ]


(arrowing to highlight the 1.8TiB freespace entry again and choosing New)

First sector (1032192-3907029134, default = 1032192): 
Size in sectors or {KMGTP} (default = 3905996943):
Hex code or GUID (L to show codes, Enter = 8300): 
Enter new partition name, or <Enter> to use the current name:
root


(resulting display)

                                          cgdisk 0.8.6

                                      Disk Drive: /dev/sdc
                                   Size: 3907029168, 1.8 TiB

Part. #     Size        Partition Type            Partition Name
----------------------------------------------------------------
            1007.0 KiB  free space
   1        3.0 MiB     BIOS boot partition       grub2biosboot
   2        500.0 MiB   Linux filesystem          boot
   3        1.8 TiB     Linux filesystem          root

    [ Align  ]  [ Backup ]  [  Help  ]  [  Load  ]  [  New   ]  [  Quit  ]  [ Verify ]  [ Write  ]

</pre>}}

The grub2biosboot partition was what got missed on the first round and thus got added later.

* '''1007.0KiB free space''' - Will eventually get the boot record and leave enough of a gap for grub2 to park its bios.
* '''biosboot''' - The partition type 0xEF02 (BIOS boot partition) must be set in order for grub2 to find it and use it.  Some web pages suggest using EF00 (EFI System), but this will not work with the current version of grub2.  The bare minimum for this size is 1mb, but some pages suggest using at least 2mb.  We err on the side of caution and future bloat.
* '''boot''' - GRUB2 will take about 32mb more of /boot than you may be used to so the usual suggestion of 200mb in days past is now more like 300mb - 500mb depending on how many kernels and initramfs filesystems you like to keep around.  Set the partition type to the default which is 0x8300 for Linux.
* '''root''' - We took the default for size to allocate the rest of the drive to the root partition.  Once again the type is set to 0x8300.

The resulting table looks like the following in gdisk:

{{RootCmd|gdisk /dev/sdc|output=<pre>
GPT fdisk (gdisk) version 0.8.6

Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present

Found valid GPT with protective MBR; using GPT.

Command (? for help): p
Disk /dev/sdc: 3907029168 sectors, 1.8 TiB
Logical sector size: 512 bytes
Disk identifier (GUID): A5C43D4A-ED5A-4173-BDC0-5D632C0BAEEF
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 3907029134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048            8191   3.0 MiB     EF02  grub2biosboot
   2            8192         1032191   500.0 MiB   8300  boot
   3         1032192      3907029134   1.8 TiB     8300  root

Command (? for help): 
</pre>}}

{{Note|You may not see the "MBR: protective" indication in the output unless an MBR has been written to the drive at least once.}}

Repeat the same partitioning on /dev/sdd.  Similar to sfdisk, the sgdisk utility has the ability to dump the GPT table to a file and then reload that.  However the output is binary, so we just went ahead and used cgdisk to create the same layout on /dev/sdd.


== Filesystem Creation ==
Since this is a two disk simple mirror, we specify raid1 for both metadata and data when making the two filesystems.  If you have more than two drives, the current stable versions of kernel (3.10.25) and btrfs-progs (3.12-r1) now also make raid5 and raid6 available for options alongside raid1 and raid10.

{{RootCmd|mkfs -t btrfs -L BOOT -m raid1 -d raid1 /dev/sdc2 /dev/sdd2|output=<pre>
SMALL VOLUME: forcing mixed metadata/data groups

WARNING! - Btrfs v3.12 IS EXPERIMENTAL
WARNING! - see http://btrfs.wiki.kernel.org before using

Turning ON incompat feature 'mixed-bg': mixed data and metadata block groups
Turning ON incompat feature 'extref': increased hardlink limit per file to 65536
Created a data/metadata chunk of size 8388608
adding device /dev/sdd2 id 2
fs created label BTBOOT on /dev/sdc2
        nodesize 4096 leafsize 4096 sectorsize 4096 size 1000.00MiB
Btrfs v3.12

</pre>}}
{{RootCmd|mkfs -t btrfs -L BTROOT -m raid1 -d raid1 /dev/sdc3 /dev/sdd3|output=<pre>

WARNING! - Btrfs v3.12 IS EXPERIMENTAL
WARNING! - see http://btrfs.wiki.kernel.org before using

Turning ON incompat feature 'extref': increased hardlink limit per file to 65536
adding device /dev/sdd3 id 2
fs created label BTROOT on /dev/sdc3
        nodesize 16384 leafsize 16384 sectorsize 4096 size 3.64TiB
</pre>}}


===Root Volume===
We mount the default volume for the root partition on /mnt/newmirror but will be putting the actual contents into subvolumes with different btrfs features enabled or disabled.
{{RootCmd|mkdir /mnt/newmirror}}
{{RootCmd|mount -t btrfs -o defaults,noatime,compress{{=}}lzo,autodefrag /dev/sdc3 /mnt/newmirror}}


The new root filesystem will go onto a subvolume (activeroot) which is created on the mirror and then mounted to /mnt/newroot
{{RootCmd|mkdir /mnt/newroot}}
{{RootCmd|btrfs subvol create /mnt/newmirror/activeroot}}
{{RootCmd|mount -t btrfs -o defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}activeroot /dev/sdc3 /mnt/newroot}}



We mount the existing root filesystem to /mnt/rawroot and use tar to transfer things over while avoiding the dynamic stuff.

{{RootCmd|mkdir /mnt/rawroot}}
{{RootCmd|mount --bind / /mnt/rawroot}}
{{RootCmd|cd /mnt/rawroot}}
{{RootCmd|tar cvpf - . {{!}} (cd /mnt/newroot; tar xpf -)|output=<pre>

40 or so gb worth of stuff in the output log goes by
</pre>}}


===Boot Volume===
At this point /mnt/newroot/boot and the mountpoints for the other subvolumes we will be creating are already in place from the tar.  We keep the mount options simple for /mnt/newroot/boot.

{{RootCmd|mount -t btrfs -o defaults,noatime /dev/sdc1 /mnt/newroot/boot}}
{{RootCmd|cd /boot}}
{{RootCmd|tar cvpf - . {{!}} (cd /mnt/newroot/boot; tar xpf -)|output=<pre>

short and sweet output log goes by
</pre>}}


===Other Volumes===
/home is an obvious candidate for a subvolume, but they are easy to create and manage so you will probably have others.  In our example we have the following:

* '''/home'''
* '''/distfiles''' - It doesn't do any good to enable compression strategies for a directory which just has compressed tarballs for the most part.
* '''/vm''' - Keeping your virtual machine store in a separate volume eases snapshotting and migrations.  We will enable compression here.  At various points in btrfs history the use of autodefrag had impacts and issues on vm performance.
* '''/vmcrypt''' - If the VM uses drive encryption, the whole compression strategy gets blown out of the water.


{{RootCmd|btrfs subvol create /mnt/newmirror/home}}
{{RootCmd|mount -t btrfs -o defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}home /dev/sdc3 /mnt/newroot/home}}
{{RootCmd|btrfs subvol create /mnt/newmirror/distfiles}}
{{RootCmd|mount -t btrfs -o defaults,noatime,autodefrag,subvol{{=}}distfiles /dev/sdc3 /mnt/newroot/distfiles}}
{{RootCmd|btrfs subvol create /mnt/newmirror/vm}}
{{RootCmd|mount -t btrfs -o defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}vm /dev/sdc3 /mnt/newroot/vm}}
{{RootCmd|btrfs subvol create /mnt/newmirror/vmcrypt}}
{{RootCmd|mount -t btrfs -o defaults,noatime,autodefrag,subvol{{=}}vmcrypt /dev/sdc3 /mnt/newroot/vmcrypt}}


This process takes place overnight and a good bit of the next day, so we will gloss over it



==Chrooting into /mnt/newroot==
We will chroot into the new root filesystem for the next set of steps:

* '''Updating the kernel to use an embedded initram filesystem'''
* '''Edit the fstab'''
* '''Installing grub2 in place of grub0.97'''

===Pre-chroot Preparation===
