<languages />

{{Metadata|abstract=この記事は、新しいバージョンのLinuxカーネルにアップグレードすることについて説明しています。}}

この記事は[[Article description::新しいバージョンのLinux[[kernel|カーネル]]にアップグレードすること]]について説明しています。

== インストール ==

新しいカーネルのソースがインストールされたときは、カーネルを更新するといいかもしれません。新しいカーネルのソースは、次のコマンドでシステムを更新するときにインストールされることがあります。

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse @world}}

勿論、次のコマンドを使って直接インストールすることが可能です（"gentoo-sources"を現在使用しているカーネルのパッケージに変えてください）：

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse sys-kernel/gentoo-sources}}

新しいカーネルのソースをインストールしても、新しいカーネルが提供されるわけではありません。新しいソースから新しいカーネルを組み立てて、インストールして、実際に新しいカーネルを稼働させるためにシステムを再起動する必要があります。

新しいソースから新しいカーネルを作成する作業は、システムをインストールするときにカーネルを作成したときと基本的には同じ流れです。異なる点は、新しいカーネルのコンフィグを作るのに古いカーネルのコンフィグを利用できるという点です。古いコンフィグを利用すれば、ユーザは {{c|make menuconfig}} などを使ってすべてのカーネルオプションを再度設定しなおさずに済みます。

<div class="mw-translate-fuzzy">
カーネルコンフィグは、カーネルソースがあるディレクトリの下の {{Path|.config}} という名前のファイルに保存されています。新しいカーネルは、古いカーネルにはないオプションや機能を備えていることや、古いカーネルにあったオプションや機能がなくなっていることがあります。カーネルコンフィグは、カーネルの機能やオプションが、有効か無効か、カーネルに組み込まれるか、カーネルの稼働中に必要に応じてロードできるモジュールとして構築されるかを指定するものです。したがって、新しいカーネルのコンフィグファイルには、古いカーネルのコンフィグファイルには無い新しいエントリがあったり、古いカーネルのコンフィグファイルにあったエントリがなくなっていたりすることがあります。
</div>

こうしたコンフィグファイルの変更に対応するために、古いカーネルのコンフィグファイルを新しいカーネルで使えるコンフィグに変換する必要があります。この記事では、古いカーネルのコンフィグファイルを変換して、新しいカーネルソースから新しいカーネルを作成する方法について示します。

== 現在のカーネル設定のバックアップ ==

以前の設定ファイルをなくさないよう、カーネル設定のバックアップを取ることが賢明です。だって、多くのユーザーがシステムにとって最良な設定を探すのにかなりの時間を掛けていますし、設定情報を失うのは望んでいないですからね。

現在のカーネル設定のバックアップを取ることは簡単です：

{{RootCmd|cp /usr/src/linux/.config ~/kernel-config-`uname -r`}}

カーネルソースまでのシンボリックリンクが正しくセットされているとするならば、このコマンドは現在使用されているカーネルの設定ファイルをrootのホームディレクトリに、{{Path|kernel-config-}}の後に現在のLinuxカーネルのバージョンが続く名前に変更してコピーします。

== 設定 ==

=== 新しいカーネルソースへのシンボリックリンク設定 ===

{{Path|/usr/src/linux}} のシンボリックリンクは常に、現在使用中のカーネルソースが入っているディレクトリへ張られるべきです。このシンボリックリンクを張るのは、以下の3つの方法のいずれかで可能です。

# <code>USE="symlink"</code>としてカーネルソースをインストールする
# eselectでリンクをセットする
# 手動でシンボリックリンクを更新する

==== symlinkのUSEフラグを有効にしてカーネルソースをインストール ====

これによって{{Path|/usr/src/linux}}のリンク先が、新しくインストールされるカーネルソースになります。

If necessary, it can still be modified later with one of the other two methods.

==== eselectを使った設定 ====

{{c|eselect}}によるシンボリックリンクの設定

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

利用可能なカーネルソースが出力されており、*が現在使われているソースを表しています。

カーネルソースを2番に変えるには次のようにします :

{{RootCmd|eselect kernel set 2}}

==== シンボリックリンクの手動更新 ====

シンボリックリンクを手動で設定するならば、次のコマンドを実行してください：

{{RootCmd|ln -sf /usr/src/linux-3.16.3-gentoo /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

==== 新しいフォルダへ移動 ====

シンボリックリンクが更新されたので、作業ディレクトリを新しいカーネルのフォルダに移動しましょう。

{{RootCmd|cd /usr/src/linux}}

{{Note|このコマンドはもしシンボリックリンクが変更された時、作業ディレクトリが既に{{Path|/usr/src/linux}}であっても必要です。新しいシンボリックリンクに実際に従うまでは、コンソールは"古い"カーネルのディレクトリに居続けます。}}

=== 現行のカーネル設定のコピー ===

古いカーネルの設定ファイルを新しいカーネルのフォルダに移動させなければなりません。先程{{Path|/root}}に保存したバックアップに加えて、古い設定ファイルはいくつかの場所にあります。

* In the [[procfs]] filesystem, if the kernel option ''Enable access to .config through /proc/config.gz'' (CONFIG_IKCONFIG_PROC) was activated in the present kernel:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}

* From the old kernel. This will only work when the old kernel was compiled with CONFIG_IKCONFIG:
: {{RootCmd|/usr/src/linux/scripts/extract-ikconfig /path/to/old/kernel >/usr/src/linux/.config}}

* In the {{Path|/boot}} directory, if the configuration was installed there:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* In the kernel directory of the currently-running kernel:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

* In the {{Path|/etc/kernels/}} directory, if <code>SAVE_CONFIG="yes"</code> is set in {{Path|/etc/genkernel.conf}} and {{c|[[genkernel]]}} was previously used:
: {{RootCmd|cp /etc/kernels/kernel-config-x86_64-3.14.14-gentoo /usr/src/linux/.config}}

=== .configファイル ===

To use the configuration of the old kernel with the new kernel, it needs to be converted.  The conversion can be done by running either {{c|make silentoldconfig}} or {{c|make olddefconfig}}. Use either, not both.

==== make silentoldconfig ====

{{Important|{{c|make silentoldconfig}} is being removed as of linux version 4.19, it will be replaced by {{c|make syncconfig}}.}}

The following configuration is like the text based configuration with {{c|make config}}.  For new configuration options, the user is asked for a decision. For example:

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

The string ''(NEW)'' at the end of the line marks this option as new. Left to the string in square brackets are the possible answers: ''Y''es, ''n''o, ''m''odule or ''?'' to show the help. The recommend (i.e. default) answer is capitalized (here ''Y''). The help explains the option or driver.

Unfortunately {{c|make silentoldconfig}} doesn't show a lot more information for each option, such as the context, so it is sometimes difficult to give the right answer. In this case the best way to go is to remember the option name and revise it afterwards through one of the [[Kernel/Configuration#Configuration tools|graphical kernel configuration tools]].

==== make olddefconfig ====

If all new configuration options should be set to their recommended (i.e. default) values use {{c|make olddefconfig}}:

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

==== make help ====

Use {{c|make help}} to see other conversion methods available:

{{RootCmd|make help}}

== ビルド ==

{{Important|When external kernel modules are installed (like nvidia or zfs), it may be necessary to run {{c|make modules_prepare}} as described [[Kernel/Upgrade#Reinstalling external kernel modules|below]] before building the kernel. Some modules cannot be installed or prepared before the kernel has been built.}}

{{Important|Do not forget to reconfigure the [[Bootloader|bootloader]] to account for the new kernel filenames, and rebuild the initramfs if one is used as well.}}

For this step, follow the steps in the [[Kernel/Configuration#Build|manual configuration]] article.

=== Automated build and installation ===

It is possible to automatically build and install the newly emerged kernel using Portage hooks. While other approaches are also possible, the following is based on genkernel and gentoo-sources package. It requires the following prerequisites:

# {{c|genkernel all}} is able to build and install the kernel to which the {{Path|/usr/src/linux}} symlink points into <code>$BOOTDIR</code> and the bootloader.
# The <code>symlink</code> use flag is set for the kernel ebuild.

If those are fulfilled, simply install a <code>post_pkg_postinst</code> Portage hook as shown below.

{{FileBox|title=Automated kernel build and installation portage hook|filename=/etc/portage/env/sys-kernel/gentoo-sources|lang=bash|1=post_pkg_postinst() {
	CURRENT_KV=$(uname -r)
	# Check to see if genkernel has been run previously for the running kernel and use that config
	if [[ -f "${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" ]] ; then
		genkernel --kernel-config="${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" all
	elif [[ -f "${EROOT}/usr/src/linux-${CURRENT_KV}/.config" ]] ; then # Use latest kernel config from current kernel
		genkernel --kernel-config="${EROOT}/usr/src/linux-${CURRENT_KV}/.config" all
	elif [[ -f /proc/config.gz ]] ; then # Use known running good kernel
		zcat /proc/config.gz >> "${EROOT}/tmp/genkernel.config"
		genkernel --kernel-config="${EROOT}/tmp/genkernel.config" all
		rm "${EROOT}/tmp/genkernel.config"
	else # No valid configs known
		genkernel all
	fi
}
}}

<div class="mw-translate-fuzzy">
== 外部のカーネルモジュールの再インストール ==
</div>

{{Note|The modules_prepare step is not required if building an entire kernel as this function is done as part of the standard process.}}

Any external kernel modules, such as [[:Category:Binary kernel modules|binary kernel modules]], need to be rebuilt for each new kernel. If the kernel has not been built yet, it has to first be prepared for the building of the external kernel modules:

{{RootCmd|make modules_prepare}}

Packages containing kernel modules can be rebuilt using the <code>@module-rebuild</code> set:

{{Emerge|@module-rebuild}}

=== Solving build problems ===

When experiencing build problems while rebuilding the current kernel, it might help to sanitize the kernel sources. Make sure to backup the {{Path|.config}} file first, as the operation will remove it. Make sure not to use a {{Path|.bak}} or {{Path|~}} suffix as backup as {{c|make distclean}} will clean those up as well.

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

<div class="mw-translate-fuzzy">
== 古いカーネルの削除 ==
</div>

[[Kernel/Removal|kernel removal]]を参照してください。 

== See also ==

* {{See also|Genkernel}}

== External resources ==

* [https://kernelnewbies.org/LinuxChanges kernel changelog with some explanations of new features]

[[Category:Kernel]]
