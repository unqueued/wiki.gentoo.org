<languages />

{{Metadata|abstract=この記事は、新しいバージョンのLinuxカーネルにアップグレードすることについて説明しています。}}

この記事は[[Article description::新しいバージョンのLinux[[kernel|カーネル]]にアップグレードすること]]について説明しています。

== インストール ==

新しいカーネルのソースがインストールされたときは、カーネルを更新するといいかもしれません。新しいカーネルのソースは、次のコマンドでシステムを更新するときにインストールされることがあります。

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse @world}}

勿論、次のコマンドを使って直接インストールすることが可能です（"gentoo-sources"を現在使用しているカーネルのパッケージに変えてください）：

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse sys-kernel/gentoo-sources}}

新しいカーネルのソースをインストールしても、新しいカーネルが提供されるわけではありません。新しいソースから新しいカーネルを組み立てて、インストールして、実際に新しいカーネルを稼働させるためにシステムを再起動する必要があります。

新しいソースから新しいカーネルを作成する作業は、システムをインストールするときにカーネルを作成したときと基本的には同じ流れです。異なる点は、新しいカーネルのコンフィグを作るのに古いカーネルのコンフィグを利用できるという点です。古いコンフィグを利用すれば、ユーザは {{c|make menuconfig}} などを使ってすべてのカーネルオプションを再度設定しなおさずに済みます。

カーネルコンフィグは、カーネルソースがあるディレクトリの下の {{Path|.config}} という名前のファイルに保存されています。新しいカーネルは、古いカーネルにはないオプションや機能を備えていることや、古いカーネルにあったオプションや機能がなくなっていることがあります。カーネルコンフィグは、カーネルの機能やオプションが、有効か無効か、カーネルに組み込まれるか、カーネルの稼働中に必要に応じてロードできるモジュールとして構築されるかを指定するものです。したがって、新しいカーネルのコンフィグファイルには、古いカーネルのコンフィグファイルには無い新しいエントリがあったり、古いカーネルのコンフィグファイルにあったエントリがなくなっていたりすることがあります。

こうしたコンフィグファイルの変更に対応するために、古いカーネルのコンフィグファイルを新しいカーネルで使えるコンフィグに変換する必要があります。この記事では、古いカーネルのコンフィグファイルを変換して、新しいカーネルソースから新しいカーネルを作成する方法について示します。

== 現在のカーネル設定のバックアップ ==

以前の設定ファイルをなくさないよう、カーネル設定のバックアップを取ることが賢明です。だって、多くのユーザーがシステムにとって最良な設定を探すのにかなりの時間を掛けていますし、設定情報を失うのは望んでいないですからね。

現在のカーネル設定のバックアップを取ることは簡単です：

{{RootCmd|cp /usr/src/linux/.config ~/kernel-config-`uname -r`}}

カーネルソースまでのシンボリックリンクが正しくセットされているとするならば、このコマンドは現在使用されているカーネルの設定ファイルをrootのホームディレクトリに、{{Path|kernel-config-}}の後に現在のLinuxカーネルのバージョンが続く名前に変更してコピーします。

== 設定 ==

=== 新しいカーネルソースへのシンボリックリンク設定 ===

{{Path|/usr/src/linux}} のシンボリックリンクは常に、現在使用中のカーネルソースが入っているディレクトリへ張られるべきです。このシンボリックリンクを張るのは、以下の3つの方法のいずれかで可能です。

# <code>USE="symlink"</code>としてカーネルソースをインストールする
# eselectでリンクをセットする
# 手動でシンボリックリンクを更新する

==== symlinkのUSEフラグを有効にしてカーネルソースをインストール ====

これによって{{Path|/usr/src/linux}}のリンク先が、新しくインストールされるカーネルソースになります。

If necessary, it can still be modified later with one of the other two methods.

==== eselectを使った設定 ====

{{c|eselect}}によるシンボリックリンクの設定

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

利用可能なカーネルソースが出力されており、*が現在使われているソースを表しています。

カーネルソースを2番に変えるには次のようにします :

{{RootCmd|eselect kernel set 2}}

==== シンボリックリンクの手動更新 ====

シンボリックリンクを手動で設定するならば、次のコマンドを実行してください：

{{RootCmd|ln -sf /usr/src/linux-3.16.3-gentoo /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

==== 新しいフォルダへ移動 ====

シンボリックリンクが更新されたので、作業ディレクトリを新しいカーネルのフォルダに移動しましょう。

{{RootCmd|cd /usr/src/linux}}

{{Note|このコマンドはもしシンボリックリンクが変更された時、作業ディレクトリが既に{{Path|/usr/src/linux}}であっても必要です。新しいシンボリックリンクに実際に従うまでは、コンソールは"古い"カーネルのディレクトリに居続けます。}}

=== 現行のカーネル設定のコピー ===

古いカーネルの設定ファイルを新しいカーネルのフォルダに移動させなければなりません。先程{{Path|/root}}に保存したバックアップに加えて、古い設定ファイルはいくつかの場所にあります。

* [[procfs]]ファイルシステムの場合、カーネルのオプション''Enable access to .config through /proc/config.gz'' (CONFIG_IKCONFIG_PROC)が前のカーネルで有効になっている場合：
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}

* 古いカーネルから。これは古いカーネルがCONFIG_IKCONFIGを有効にしてコンパイルされている場合のみ有効です:
: {{RootCmd|/usr/src/linux/scripts/extract-ikconfig /path/to/old/kernel >/usr/src/linux/.config}}

* 設定が{{Path|/boot}}にインストールされている場合：
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* 現在使用されているカーネルのディレクトリの中:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

* もし{{Path|/etc/genkernel.conf}}内で<code>SAVE_CONFIG="yes"</code>と設定され、過去に{{c|[[genkernel]]}}を使用していた場合、{{Path|/etc/kernels/}}ディレクトリの中：
: {{RootCmd|cp /etc/kernels/kernel-config-x86_64-3.14.14-gentoo /usr/src/linux/.config}}

=== .configファイル ===

古いカーネルの設定を新しいカーネルで使用する場合、設定を変換する必要があります。変換は{{c|make silentoldconfig}}か{{c|make olddefconfig}}を実行することで可能です。どちらかを使用してください、両方ではありません。

==== make silentoldconfig ====

{{Important|{{c|make silentoldconfig}}はlinuxバージョン4.19より削除され、{{c|make syncconfig}}に取って代わられます。}}

The following configuration is like the text based configuration with {{c|make config}}.  For new configuration options, the user is asked for a decision. For example:

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

最後の''(NEW)''は、このオプションが新しいオプションであることを示しています。左の角括弧内の文字は選択可能な設定です：''Y''es、''n''o、''m''odule，あるいは''?''を入力してヘルプを表示します。推奨される（すなわちデフォルトの）設定は大文字で表示されます（ここでは''Y''）。ヘルプではオプションやドライバの説明がされます。

Unfortunately {{c|make silentoldconfig}} doesn't show a lot more information for each option, such as the context, so it is sometimes difficult to give the right answer. In this case the best way to go is to remember the option name and revise it afterwards through one of the [[Kernel/Configuration#Configuration tools|graphical kernel configuration tools]].

==== make olddefconfig ====

もし、すべての新しい設定オプションを推奨される（すなわちデフォルトの）値に設定する場合、{{c|make olddefconfig}}を使用してください。

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

==== make help ====

他の利用可能な変換方法を見るには、{{c|make help}}を実行してください：

{{RootCmd|make help}}

== ビルド ==

{{Important|When external kernel modules are installed (like nvidia or zfs), it may be necessary to run {{c|make modules_prepare}} as described [[Kernel/Upgrade#Reinstalling external kernel modules|below]] before building the kernel. Some modules cannot be installed or prepared before the kernel has been built.}}

{{Important|新しいカーネルのファイル名を参照させるために[[Bootloader|ブートローダー]]を再設定することを忘れないでください。そして、もしinitramfsを使用していた場合、こちらも同様に再設定することを忘れないでください。}}

このステップに関しては、[[Kernel/Configuration#Build|ビルド]]のページに従ってください。

=== Automated build and installation ===

It is possible to automatically build and install the newly emerged kernel using Portage hooks. While other approaches are also possible, the following is based on genkernel and gentoo-sources package. It requires the following prerequisites:

# {{c|genkernel all}} is able to build and install the kernel to which the {{Path|/usr/src/linux}} symlink points into <code>$BOOTDIR</code> and the bootloader.
# The <code>symlink</code> use flag is set for the kernel ebuild.

If those are fulfilled, simply install a <code>post_pkg_postinst</code> Portage hook as shown below.

{{FileBox|title=Automated kernel build and installation portage hook|filename=/etc/portage/env/sys-kernel/gentoo-sources|lang=bash|1=post_pkg_postinst() {
	CURRENT_KV=$(uname -r)
	# Check to see if genkernel has been run previously for the running kernel and use that config
	if [[ -f "${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" ]] ; then
		genkernel --kernel-config="${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" all
	elif [[ -f "${EROOT}/usr/src/linux-${CURRENT_KV}/.config" ]] ; then # Use latest kernel config from current kernel
		genkernel --kernel-config="${EROOT}/usr/src/linux-${CURRENT_KV}/.config" all
	elif [[ -f /proc/config.gz ]] ; then # Use known running good kernel
		zcat /proc/config.gz >> "${EROOT}/tmp/genkernel.config"
		genkernel --kernel-config="${EROOT}/tmp/genkernel.config" all
		rm "${EROOT}/tmp/genkernel.config"
	else # No valid configs known
		genkernel all
	fi
}
}}

=== 外部のカーネルモジュールの再インストール ===

{{Note|もしカーネル全体をビルドするのなら、modules_prepareは必要ありません。この機能は通常のプロセスの一部だからです。}}

例えば[[:Category:Binary kernel modules|バイナリカーネルモジュール]]のようなすべての外部カーネルモジュールは、それぞれの新しいカーネルに対して再ビルドされる必要があります。もしまだカーネルをビルドしていないのならば、外部カーネルモジュールのビルドのためにカーネルを準備しなければなりません。

{{RootCmd|make modules_prepare}}

カーネルモジュールを含むパッケージは<code>@module-rebuild</code>をセットすることで再ビルドできます：

{{Emerge|@module-rebuild}}

=== ビルドの問題の解決 ===

もし、現在のカーネルの再ビルド中に問題が発生したのであれば、カーネルソースをきれいにすることが役に立つかもしれません。初めに{{Path|.config}}ファイルのバックアップを取ることを忘れないでください。以下のコマンドはこのファイルを削除するからです。{{Path|.bak}}や{{Path|~}}をファイル名の後ろにつけないでください。{{c|make distclean}}はこれらの拡張子や接尾辞を持つファイルも削除するからです。

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

== 削除 ==

[[Kernel/Removal|kernel removal]]を参照してください。 

== 参考 ==

* {{See also|Genkernel}}

== 外部資料 ==

* [https://kernelnewbies.org/LinuxChanges kernel changelog with some explanations of new features]

[[Category:Kernel]]
