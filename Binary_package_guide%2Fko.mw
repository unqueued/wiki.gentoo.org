<languages />
{{Metadata|abstract=포티지는 바이너리 꾸러미 빌드 및 설치를 지원합니다. 이 안내서는 바이너리 꾸러미 호스트를 만들고 바이너리 꾸러미를 활용하는 방법을 설명합니다.}}

일상의 ebuild 지원 요소 말고도, 포티지에서는 바이너리 꾸러미 빌드 및 설치를 지원합니다.
이 안내서에서는 바이너리 꾸러미를 만들고, 설치하는 방법, 그리고 바이너리 꾸러미 서버를 설정하는 방법을 설명합니다.

== 도입부 ==

관리자가 젠투의 바이너리 꾸러미 설치를 선호하는 몇가지 이유가 있습니다.

# 무엇보다도, 관리자가 ''유사 최신 시스템을 유지''할 수 있습니다. 모든 소스코드를 컴파일 한다는 건 상당한 시간 소모를 야기합니다. 일부가 느려질 가능성이 있다 하더라도 하나의 시스템에서 모든 소스코드를 컴파일 하고 다른 시스템에서는 바이너리 꾸러미를 재사용할 수 있을 경우 수많은 유사 시스템을 관리하는 일이 굉장히 쉬워질 수 있습니다.
# 두번째 이유는 ''안전한 업데이트 수행''입니다. 임무가 중요한 시스템에서는 가능한한 사용 가능한 상태를 유지하는 것이 중요합니다. 이 작업은 모든 업데이트를 우선 처리하는 스테이지 서버에서 처리할 수 있으며, 스테이지 서버 상태가 괜찮아지면 중요한 시스템에 적용할 수 있습니다. 다른 접근 방식으로는, 동일 시스템 내에서의 chroot 환경의 업데이트로 처리하고 실제 시스템에 만든 바이너리를 사용하는 방법이 있습니다.
# 세번째 이유는 ''백업''으로서의 의미가 있기 때문입니다. 가끔은 바이너리 꾸러미가 망가진 시스템(예: 컴파일러 망가짐)을 복구하는 유일한 수단이 될 수 있습니다. 바이너리 꾸러미 서버든, 로컬 머신 어디든 바이너리 꾸러미를 둔다면 굉장한 도움이 될 수 있습니다.
# 마지막으로, 이 방식은 ''상당히 오래된 시스템''의 업데이트를 지원합니다. 바이너리 꾸러미를 활용하면 굉장히 오래된 시스템을 업데이트 하는 작업을 매우 쉽게 처리할 수 있습니다. 설치하고 업데이트할 빌드 타임에 관계없이 바이너리 꾸러미를 쉽게 설치할 수 있으며, 빌드 과정상의 실패 상황을 피해갈 수 있습니다.

이 안내서에서는, 다음 내용에 집중했습니다
* 바이너리 꾸러미 만들기
* 바이너리 꾸러미를 클라이언트에 배포하기
* 바이너리 꾸러미 사용하기
* 바이너리 꾸러미 유지 관리하기

바이너리 꾸러미를 다루는 몇가지 고급주제를 더 다루는 것으로 마치겠습니다.

{{Note/ko|이 안내서에서 다루는 모든 도구는 별도로 명시하지 않는 한, {{Package|sys-apps/portage}}의 일부입니다.}}

== 바이너리 꾸러미 만들기 ==

바이너리 꾸러미를 만드는 세가지 주요 방법은 다음과 같습니다:
# 일반 설치 과정 후, <code>quickpkg</code> 사용하기
# <code>--buildpkg (-b)</code> 옵션으로 emerge 처리 과정에 명시하기
# 포티지 FEATURES 변수에 <code>buildpkg</code>값을 넣어 자동으로 처리하기

이 모든 세가지 방식은 <code>PKGDIR</code> 변수에서 가리치는 디렉터리에 바이너리 꾸러미를 만듭니다(기본값은 {{Path|/usr/portage/packages}}).

=== quickpkg 사용하기 ===

<code>quickpkg</code> 프로그램은 하나 이상의 의존 요소(또는 꾸러미 집합)를 취하며, 일치하는 모든 ''설치한'' 꾸러미에 대한 바이너리 꾸러미를 만듭니다.

예를 들어, 설치한 모든 GCC 버전에 대해 바이너리 꾸러미를 만든다면:

{{RootCmd|quickpkg sys-devel/gcc}}

모든 기 설치 꾸러미의 바이너리 꾸러미를 만들려면 <code>*</code> 글롭을 사용하십시오:

{{RootCmd|quickpkg "*/*"}}

이 방식을 활용하는데 있어 위험성을 내포하고 있습니다. 설정 파일에서 문제가 될 수 있는 설치 파일에 의존합니다. 관리자는 종종 프로그램을 설치한 후 설정 파일을 편집합니다. 이 방법은 중요한 또는 비밀 데이터를 꾸러미에 포함할 수 있기 때문에 <code>quickpkg</code>는 기본적으로 CONFIG_PROTECT 방식을 통해 보호한 설정 파일은 포함하지 ''않습니다''. 마찬가지로 설정 파일을 포함하려면, <code>--include-config</code> 또는 <code>--include-unmodified-config</code> 옵션을 사용하십시오.

=== --buildpkg 이머지 옵션 사용하기 ===

<code>emerge</code>로 프로그램을 설치할 때, <code>--buildpkg (-b)</code>를 사용하여 포티지에게 바이너리 꾸러미를 만들도록 요청할 수 있습니다:

{{Emerge|params+=--buildpkg|sys-devel/gcc}}

바이너리 꾸러미를 만들기''만'' 하고 라이브 시스템에 소프트웨어를 설치하지 ''않도록'' 요청할 수 있습니다. 이렇게 하려면 <code>--buildpkgonly (-B)</code> 옵션을 활용하시면 됩니다:

{{Emerge|params+=--buildpkgonly|sys-devel/gcc}}

그러나 후자 방식으로 접근할 경우 빌드시 의존 관계가 걸린 요소를 모두 설치해야 합니다.

=== buildpkg 기능을 활용하여 자동으로 처리하기 ===

대부분의 일반적인 방법은 <code>emerge</code>로 언제 패키지를 설치했든지간에 바이너리 꾸러미를 자동으로 만드는 것입니다. 이렇게 하려면, 다음과 같이 {{Path|/etc/portage/make.conf}}의 FEATURES에 ''buildpkg''를 설정하면 됩니다:

{{File|/etc/portage/make.conf|buildpkg 기능 활성화|<pre>
FEATURES="${FEATURES} buildpkg"
</pre>}}

포티지가 프로그램을 설치할 때마다, 마찬가지로 바이너리 꾸러미를 만듭니다.

=== 일부 꾸러미 생성 제외 ===

일부 꾸러미 또는 카테고리를 선택하여 포티지가 바이너리 꾸러미를 만들지 않게 할 수 있습니다. 이머지 과정에서 <code>--buildpkg-exclude</code> 옵선을 사용하면 됩니다:

{{RootCmd|emerge -uDN @world --buildpkg --buildpkg-exclude "virtual/* sys-kernel/*-sources"}}

이 방법은 존재하는 바이너리 패키지를 취하는데 조금 또는 어떠한 이득조차도 없이 꾸러미를 취득하는데 활용할 수 있습니다. 리눅스 커널 소스 꾸러미 또는 업스트림 바이너리 꾸러미가 예가 될 수 있습니다({{Package|www-client/firefox-bin}}과 같이 ''-bin''으로 끝나는 꾸러미).

== 바이너리 꾸러미 호스트 설정==

포티지는 바이너리 꾸러미를 다운로드할 다양한 프로토콜, FTP, FTPS, HTTP, HTTPS, SSH를 지원합니다. 이 특징은 바이너리 꾸러미 호스트 구현에 대한 다양한 가능성의 여지를 남겨놓았습니다.

그러나 포티지에서는 바이너리 꾸러미 배포에 있어 특별한 방식을 제공하는 것은 아닙니다. 요청한 설정에 따라 추가 프로그램을 설치할 필요가 있습니다.

=== 웹기반 바이너리 꾸러미 호스트 ===

바이너리 꾸러미를 배포하는 일반적인 접근 방식은 웹기반 바이너리 꾸러미 호스트를 만드는 것입니다.

({{Package|www-servers/lighttpd}}와 같은) 웹 서버를 사용하시고, <code>PKGDIR</code> 위치 값을 설정하여 읽기 권한을 부여하십시오.

다음, 클라이언트에서 이 설정값에 맞춰 <code>PORTAGE_BINHOST</code> 값을 설정하십시오:

{{File|/etc/portage/make.conf|웹기반 바이너리 꾸러미 호스트 사용하기|<pre>
PORTAGE_BINHOST="http://binhost.genfic.com/Packages"
</pre>}}

=== SSH 바이너리 꾸러미 호스트 ===

바이너리 꾸러미를 인증 방식으로 제공하려면 SSH 사용을 고려할 수 있습니다.

SSH를 사용할 때, 원격 바이너리 꾸러미 호스트로 연결할 경우 리눅스 사용자의 SSH 키를(설치 과정처럼 뒤에서 무슨 일로 처리해야 할 경우 암호 없이) 사용할 수 있습니다.

이 과정을 수행하려면, 포티지 사용자의 SSH 키를 서버에서 허용했는지 확인해야 합니다:

{{RootCmd|cat portage.id_rsa.pub >> /home/binpkguser/.ssh/authorized_keys}}

<code>PORTAGE_BINHOST</code> 변수 값은 다음과 같이 바뀔 수 있습니다:

{{File|/etc/portage/make.conf|SSH 접근 용도로 PORTAGE_BINHOST 설정하기|<pre>
PORTAGE_BINHOST="ssh://binpkguser@yourbinhostserver/usr/portage/packages"
</pre>}}

=== NFS 내보내기 ===

내부 네트워크에서 바이너리 꾸러미를 사용한다면, NFS를 통해 꾸러미를 내보내고 클라이언트에서 마운트하는 일련의 과정이 쉽습니다.

{{Path|/etc/exports}} 파일은 다음과 같이 바꿀 수 있습니다:

{{File|/etc/exports|꾸러미 디렉터리 내보내기|<pre>
/usr/portage/packages                            2001:db8:81:e2::/48(ro,no_subtree_check,root_squash) 192.168.100.1/24(ro,no_subtree_check,root_squash)
</pre>}}

이 과정이 끝나면 클라이언트에서는 해당 위치를 마운트할 수 있습니다. {{Path|/etc/fstab}} 예제 항목은 다음과 같습니다:

{{File|/etc/fstab|꾸러미 폴더 마운트 항목|<pre>
binhost:/usr/portage/packages      /usr/portage/packages    nfs    defaults    0 0
</pre>}}


== 바이너리 꾸러미 사용하기 ==

For binary packages to be usable on other systems they must fulfill some requirements.
* The client and server architecture and [[CHOST]] must match.
* The <code>CFLAGS</code> and <code>CXXFLAGS</code> that were used to build the binary packages must be compatible with all clients.
* USE flags for processor specific features (like MMX, SSE,...) have to be carefully selected; all clients need to support them.

{{Important/ko|포티지는 요구사항이 일치하는지 검증할 수 없습니다. 전반적인 설정을 유지하는 것은 관리자의 책임입니다.}}

Next to these, portage ''will'' check if the binary package is built using the same USE flags as expected on the client. If a package is built with a different USE flag combination, portage will either ignore the binary package (and use source-based build) or fail, depending on the options passed on to <code>emerge</code> (see [[#Installing binary packages|Installing binary packages]]).

On clients, a few configuration changes are needed in order for the binary packages to be used.

=== 바이너리 꾸러미 설치 ===

There are a few options that can be passed on to the <code>emerge</code> command that inform portage about using binary packages.

; <code>---usepkg (-k)</code>
: Try to use the binary package(s) in the locally available packages directory. Useful when using NFS-mounted binary package hosts. If the binary package is not found, a regular (source-based) installation will be done.
; <code>--usepkgonly (-K)</code>
: Similar to <code>--usepkg (-k)</code> but fail if the binary package cannot be found.
; <code>--getbinpkg (-g)</code>
: Download the binary package from a remote binary package host. If the binary package is not found, a regular (source-based) installation will be done.
; <code>--getbinpkgonly (-G)</code>
: Similar to <code>--getbinpkg (-g)</code> but fail if the binary package cannot be downloaded.

In order to automatically use binary package installations, the appropriate option can be added to the <code>EMERGE_DEFAULT_OPTS</code> variable:

{{File|/etc/portage/make.conf|바이너리 꾸러미 자동으로 가져오고 존재하지 않을 경우 실패로 처리|<pre>
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --getbinpkgonly"
</pre>}}

There is a portage feature that automatically implements the equivalent of <code>--getbinpkg (-g)</code> without the need for updating the <code>EMERGE_DEFAULT_OPTS</code> variable: ''getbinpkg''.

{{File|/etc/portage/make.conf|getbinpkg 포티지 기능 활성화|<pre>
FEATURES="${FEATURES} getbinpkg"
</pre>}}

=== 바이너리 꾸러미 호스트에서 꾸러미 가져오기 ===

When using a binary package host, clients need to have the <code>PORTAGE_BINHOST</code> variable set. Otherwise the client will not know where the binary packages are stored (and how to retrieve them).

{{File|/etc/portage/make.conf|PORTAGE_BINHOST 설정 |<pre>
PORTAGE_BINHOST="http://binhost.genfic.com/packages"
</pre>}}

<code>PORTAGE_BINHOST</code> 변수는 공백 구분 URI 값을 사용합니다. 이를 통해 관리자가 다양한 바이너리 꾸러미 서버를 동시에 활용할 수 있습니다. URI는 항상 반드시 {{Path|Packages}} 파일이 위치한 디렉터리를 가리켜야합니다.

{{Note|The support for multiple binary package servers is somewhat incomplete. If several servers serve a binary package for the same package version, then only the first one will be considered. This can be problematic when these binary packages differ in their USE configuration and the USE configuration of a later binary package would match the systems configuration.}}

=== 수정한 바이너리 꾸러미 재설치 ===

The <code>--rebuilt-binaries</code> option to <code>emerge</code> will reinstall every binary that has been rebuild since the package was installed. This is useful in case rebuilding tools like <code>revdep-rebuild</code> or <code>python-updater</code> are run on the binary package server.

A related option is <code>--rebuilt-binaries-timestamp</code>. It causes emerge not to consider binary packages for a re-install if those binary packages have been built before the given time stamp. This is useful to avoid re-installing all packages, if the binary package server had to be rebuild from scratch but <code>--rebuilt-binaries</code> is used otherwise.

=== 추가 클라이언트 설정 ===

Next to the ''getbinpkg'' feature, portage also listens to the ''binpkg-logs'' feature. This one controls if log files for successful binary package installations should be kept. It is only relevant if <code>PORT_LOGDIR</code> is set and is enabled by default.

Similar to excluding binary packages for a certain set of packages or categories, clients can be configured to exclude binary package installations for a certain set of packages or categories.

To accomplish this, use the <code>--usepkg-exclude</code> option:

{{RootCmd|emerge -uDNg @world --usepkg-exclude "sys-kernel/gentoo-sources virtual/*"}}


== 바이너리 꾸러미 관리 ==

바이너리 꾸러미를 내보내고 배포하는 작업은 실제로 바이너리 꾸러미 목록을 유지하지 않을 경우 불필요한 저장소 낭비를 초래할 수 있습니다.

=== 오래된 바이너리 꾸러미 제거 ===

{{Package|app-portage/gentoolkit}} 꾸러미에서 <code>eclean</code>이라고 하는 프로그램을 제공합니다. 이 프로그램에서는 포티지 관련 변수 파일을 관리할 수 있게 하는데 다운로드한 소스코드 파일 뿐만 아니라 바이너리 꾸러미에 대해서도 관리합니다.

다음 명령은 ebuild에 관계없는 모든 각각의 바이너리 꾸러미를 제거합니다:

{{RootCmd|eclean packages}}

자세한 내용은 [[Eclean]] 게시물을 읽어보십시오.

활용할 수 있는 또 다른 도구로는 {{Package|app-portage/portage-utils}}의 <code>qpkg</code>가 있습니다. 그러나 이 도구는, 설정할 수 있는 범위가 약간 좁습니다.

(바이너리 꾸러미를 저장한 서버에서 사용하는 개념 차원에서)''사용하지 않는'' 바이너리 꾸러미를 지우려면:

{{RootCmd|qpkg -c}}

=== 꾸러미 파일 관리 ===

꾸러미 디렉터리 내부에 {{Path|Packages}}라는 파일이 있습니다. 이 파일은 꾸러미 디렉터리의 모든 바이너리 꾸러미 메타데이터 캐시로 동작합니다. 포티지가 바이너리 꾸러미를 디렉터리에 추가할 때마다 파일을 업데이트합니다. 이와 비슷하게 <code>eclean</code>에서 바이너리 꾸러미를 제거할 때 {{Path|Packages}} 파일을 업데이트합니다.

어떤 이유로 인해 바이너리 꾸러미를 단순하게 삭제했거나 꾸러미 디렉터리로 복사했다든지, {{Path|Packages}} 파일이 깨졌다거나 삭제됐다면, 다시 만들어야 합니다. 이 작업은 <code>emaint</code>로 처리할 수 있습니다:

{{RootCmd|emaint binhost --fix}}

== 고급 주제 ==

=== 꾸러미 디렉터리 스냅샷 만들기 ===

When deploying binary packages for a large number of client systems it might become worthwhile to create snapshots of the packages directory. The client systems then don't use the packages directory directly but use binary packages from the snapshot.

Snapshots can be created using the {{Path|/usr/lib64/portage/bin/binhost-snapshot}} tool. It takes four arguments, 
# a source directory (the path to the packages directory), 
# a target directory (that must not exist),
# a URI, and 
# a binary package server directory.

꾸러미 디렉터리의 파일은 대상 디렉터리로 복사합니다. 그 다음 주어진 URI의 바이너리 꾸러미 서버 디렉터리(네번째 매개변수)에 {{Path|Packages}} 파일을 만듭니다.

Client systems need to use an URI that points to the binary package server directory. From there they will be redirected to the URI that was given to <code>binhost-snapshot</code>. This URI has to refer to the target directory.

=== 바이너리 꾸러미 형식 이해 ===

포티지가 만든 바이너리 꾸러미의 파일 이름은 tbz2로 끝납니다. 이 파일은 두부분으로 나눕니다:
# 시스템에 설치할 파일을 보관한 .tar.bz2 파일
# 메타데이터, ebuild, 환경 파일을 보관한 .xpak 파일

파일 형식의 설명을 보려면 <code>man xpak</code> 를 참고하십시오.

{{Package|app-portage/portage-utils}} 에 tbz2와 xpak 형식의 파일을 나누거나 만들 수 있는 몇가지 도구가 있습니다.

다음 명령은 tbz2를 {{Path|.tar.bz2}} 파일과 {{Path|.xpak}} 파일로 나눕니다:

{{Cmd|qtbz2 -s <package>.tbz2}}

<code>qxpak</code>을 활용하여 xpak 파일을 검사할 수 있습니다.

내용을 조회하려면:

{{Cmd|qxpak -l <package>.xpak}}

다음 명령은 이 꾸러미에 대한 USE 플래그를 활성화 하는 {{Path|USE}} 파일의 압축을 풉니다:

{{Cmd|qxpak -x package-manager-0.xpak USE}}

=== PKGDIR 배치 ===

현재 사용하는 버전 2 형식은 다음 배치를 따릅니다:

{{Code|Packages 디렉터리 배치 (버전 2)|<pre>
PKGDIR
`+- Packages
 +- app-accessibility/
 |  +- pkg1-version.tbz2
 |  `- pkgN-version.tbz2
 +- app-admin/
 |  `- ...
 `- ...
</pre>}}

{{Path|Packages}}는 첫 바이너리 꾸러미 디렉터리 배치(버전 1)에 비해 주된 개선이 이루어진 부분(이며 버전 2를 사용하는 바이너리 꾸러미 디렉터리를 확인하는 포티지기능의 시발점입니다). 버전 1에서는 모든 바이너리 꾸러미를 단일 디렉터리({{Path|All/}}이라고 함)에서 제공했으며, 항목 분류 디렉터리에는 {{Path|All/}} 디렉터리에 있는 바이너리 꾸러미의 심볼릭 링크만 지니고 있었습니다.

=== quickunpkg로 꾸러미 해제하기 ===

Zoobab이 tbz2 파일을 빨리 풀어내기 위해 [https://github.com/zoobab/quickunpkg quickunpkg]라고 하는 간단한 명령줄 도구를 작성했습니다.


[[Category:Portage]]
