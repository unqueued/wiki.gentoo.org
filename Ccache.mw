{{InfoBox stack
|{{InfoBox homepage|https://ccache.dev/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox package|dev-util/ccache}}
}}

{{c|ccache}} [[Article description::helps avoid repeated recompilation for the same C and C++ object files by fetching result from a cache directory.]]

Compiler cache is typically useful for:

* Developers who rebuild the same/similar codebase multiple times and use {{Path|[[:/etc/portage/patches]]}} to test patches.
* Users who frequently play with USE-flag changes and end up rebuilding the same packages multiple times.
* Users who use live ebuilds extensively.
* Installing very big ebuilds, such as Chromium or LibreOffice, without fear of losing multiple hours of code compilation due to a failure.

== Installation ==

=== Emerge ===

{{Emerge|dev-util/ccache}}

== Configuration ==

=== Initial setup ===

Create the cache directory:

{{RootCmd
|mkdir -p /gentoo/ccache
|chown root:portage /gentoo/ccache
|chmod 2775 /gentoo/ccache
}}

Set initial configuration file:

{{FileBox|filename=/gentoo/ccache/ccache.conf|1=
# Maximum cache size to maintain
max_size = 100.0G

# Allow others to run 'ebuild' and share the cache.
umask = 002

# Preserve cache across GCC rebuilds and
# introspect GCC changes through GCC wrapper.
compiler_check = %compiler% -v

# I expect 1.5M files. 300 files per directory.
cache_dir_levels = 3
}}

Enable {{c|ccache}} support in {{Path|make.conf}}:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
FEATURES{{=}}"${FEATURES} ccache"
CCACHE_DIR{{=}}"/gentoo/ccache"
}}

Done! From now on all builds will try to reuse object files from {{Path|/gentoo/ccache}} cache.

== Man page ==

Manual page for {{Package|dev-util/ccache}} (see {{c|man ccache}}) is a great source of various knobs to make caching more robust and aggressive.

== General notes ==

{{c|ccache}} works by prepending {{Path|/usr/lib/ccache/bin}} to <var>PATH</var> variable:

{{Cmd|ls -l /usr/lib/ccache/bin|output=<pre>
...
c++ -> /usr/bin/ccache
c99 -> /usr/bin/ccache
x86_64-pc-linux-gnu-c++ -> /usr/bin/ccache
...
</pre>}}

<code>FEATURES="ccache"</code> triggers the same behavior in {{c|portage}}.

You can also enable {{c|ccache}} for your current user and reuse the same cache directory:

{{FileBox|filename=~/.bashrc|lang=bash|1=
export PATH{{=}}"/usr/lib/ccache/bin${PATH:+:}$PATH"
export CCACHE_DIR{{=}}"/gentoo/ccache"
}}

== Useful variables and commands ==

Some variables:

* Variable <var>CCACHE_DIR</var> points to cache root directory.
* Variable <var>CCACHE_RECACHE</var> allows evicting old cache entries with new entries:

{{RootCmd|CCACHE_RECACHE{{=}}yes emerge --oneshot cat/pkg}}

See {{c|man ccache}} for many more variables.

Some commands:

* Command {{c|ccache -s}} shows cache hit statistics:

{{Cmd|CCACHE_DIR{{=}}/gentoo/ccache ccache -s|output=<pre>
cache directory                     /gentoo/ccache
primary config                      /gentoo/ccache/ccache.conf
secondary config      (readonly)    /etc/ccache.conf
stats zero time                     Fri Sep  7 07:24:24 2018
cache hit (direct)                114988
cache hit (preprocessed)           38254
cache miss                        246428
cache hit rate                     38.34 %
...
files in cache                    603419
cache size                          16.9 GB
max cache size                     100.0 GB
</pre>}}

* Command {{c|ccache -C}} drops all caches:

{{Cmd|CCACHE_DIR{{=}}/gentoo/ccache/ ccache -C}}

See {{c|man ccache}} for many more commands.

== Gentoo specifics/gotchas ==

=== {{c|gcc}} is a wrapper ===

For {{Package|sys-devel/gcc-config}} before {{c|2.0}} {{c|gcc}} used to be a wrapper binary. This means by default ccache is not safe to use and leads to errors like {{Bug|640958}}. {{Package|sys-devel/gcc-config-2.0}} will fix it.

To pass through a binary I suggest using

{{FileBox|filename=ccache.conf|1=
compiler_check = %compiler% -v
}}

in all your {{Path|ccache.conf}} files. <code>-v</code> also has a nice side-effect of not invalidating your cache if compiler itself was rebuilt without version changes.

== Caveats ==

Before using advanced {{c|ccache}} options make sure you understand what is being used as a cache key by {{c|ccache}}. By default these are:

* Timestamp and size of a compiler binary (beware of shell and binary wrappers)
* Compiler options used
* Contents of a source file
* Contents of all include files used for compilation

== See also ==

* {{See also|Handbook:AMD64/Working/Features#Caching_compilation_objects}}
