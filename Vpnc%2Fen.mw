<languages />


{{Metadata|abstract=This document details how to connect a workstation to a Cisco VPN concentrator utilizing vpnc to manage the connection.}}

This document details how to connect a workstation to a Cisco VPN concentrator utilizing vpnc to manage the connection.

== Introduction ==

This document is meant for users who want to connect to their office network from home or during travel. Many companies utilize Cisco 3000 VPN concentrators for their VPN needs, and I am willing to bet that most Linux newbies think that they are forced to use Windows to connect to them. Well, this document explains that connecting to a Cisco VPN is definitely possible and will hopefully enable to setup a working tunnel using a Gentoo workstation or laptop. 

=== What this document is ===

* A guide to the basic workings of vpnc
* A discussion of DNS and routing issues that relate to VPNs
* Examples of managing VPN sessions
* Useful tips and tricks (hopefully)

=== What this document is not ===

* An in-depth guide to VPN/encryption technologies
* A feature by feature explanation of vpnc

=== Assumptions ===

The assumptions made at this point are: 

* Gentoo is installed
* Internet access is available and configured
* The connection is towards a Cisco 3000 VPN concentrator
* Configuring, building, and installing a new kernel is not a daunting task for the reader

== Installation ==

=== Kernel ===

In order for Linux to be able to open a VPN connection ''Universal TUN/TAP device driver support'' must be enabled in the kernel. What is it and why is it needed? Below is a relatively straight forward explanation from the kernel configuration dialog: 

{{CodeBox|title=Enable TUN/TAP device driver (<var>CONFIG_TUN</var>)|1=
TUN/TAP provides packet reception and transmission for user space
programs. It can be viewed as a simple Point-to-Point or Ethernet
device, which instead of receiving packets from a physical media,
receives them from user space program and instead of sending packets
via physical media writes them to the user space program.
  
When a program opens /dev/net/tun, driver creates and registers
corresponding net device tunX or tapX. After a program closed above
devices, driver will automatically delete tunXX or tapXX device and
all routes corresponding to it.
}}

To verify that the kernel has TUN/TAP support, grep the kernel's configuration file: 

{{RootCmd|grep "TUN" /usr/src/linux/.config|output=<pre>
CONFIG_INET_TUNNEL=m
# CONFIG_INET6_TUNNEL is not set
# CONFIG_IPV6_TUNNEL is not set
(TUN/TAP enabled as a module)
CONFIG_TUN=m
# CONFIG_8139TOO_TUNE_TWISTER is not set
</pre>
}}

As can be seen above, <code>CONFIG_TUN=m</code> is compiled as a module. If it is disabled in the setup, enable it in the kernel of choice, rebuild, install, reboot and return to this document before continuing with the next steps. 

{{KernelBox|title=Configuration location in the kernel configuration dialog|1=
Device Drivers  --->
  Network device support  --->
    [*] Universal TUN/TAP device driver support
}}

If TUN/TAP support is built directly into the kernel, {{c|dmesg}} output should look like the following: 

{{RootCmd|dmesg {{!}} grep TUN|output=<pre>
Universal TUN/TAP device driver 1.5 (C)1999-2002 Maxim Krasnyansky
</pre>
}}

If TUN/TAP support is built as a module, then first load the <code>tun</code> module: 

{{RootCmd|modprobe tun
|lsmod|output=<pre>
Module                  Size  Used by
tun                     7296  0
</pre>
}}

Now that the <code>tun</code> module is loaded, check {{c|dmesg}} output. Something like the following should show up: 


{{RootCmd|dmesg {{!}} grep TUN|output=<pre>
Universal TUN/TAP device driver 1.5 (C)1999-2002 Maxim Krasnyansky
</pre>
}}

=== Emerge ===

Now that a working kernel setup is completed, install the {{Package|net-misc/vpnc}} package: 

{{Emerge|net-misc/vpnc}}

Make sure to check the supported USE flag combinations and see if they apply to the environment. When encountering a problem later with the following error, enable the <code>hybrid-auth</code> USE flag: 

{{CodeBox|title=vpnc complaining about hybrid/cert mode|1=
vpnc was built without openssl: Can't do hybrid or cert mode.
}}

== Configuration ==

In order to make the following sections more clear, we need an example setup to work from. For the purpose of this exercise, we will assume that the home network consists out of several computers. All computers are on the 192.168.0.0 / 255.255.255.0 network. The LAN in question is run by a Gentoo box using an iptables firewall, DHCP, caching DNS, etc ... and it masquerades the LAN behind the public IP address it receives from an ISP. A workstation is also on the LAN from which the VPN into the office will be configured. 

Our example workstation configuration looks like the following: 

{{FileBox|filename=/etc/resolv.conf|1=
nameserver      192.168.0.1
}}

{{FileBox|filename=/etc/hosts|1=
127.0.0.1       desktop localhost
192.168.0.1     router
192.168.2.2     mediacenter
}}

{{RootCmd|ifconfig -a|output=<pre>
eth0      Link encap:Ethernet  HWaddr 00:11:2F:8D:08:08
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::211:2fff:fe8d:808/64 Scope:Link
          UP BROADCAST NOTRAILERS RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:3657889 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2305893 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:2193722103 (2092.0 Mb)  TX bytes:1415104432 (1349.5 Mb)
          Interrupt:185 Memory:fac00000-0
  
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:35510 errors:0 dropped:0 overruns:0 frame:0
          TX packets:35510 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:16023838 (15.2 Mb)  TX bytes:16023838 (15.2 Mb)
</pre>}}

{{RootCmd|netstat -r|output=<pre>
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
192.168.0.0     *               255.255.255.0   U         0 0          0 eth0
loopback        desktop         255.0.0.0       UG        0 0          0 lo
default         router          0.0.0.0         UG        0 0          0 eth0
</pre>
}}

=== vpnc ===

Now that you have <code>vpnc</code> installed and we have an example to work from, let's discuss the basics of setting up <code>vpnc</code> . The configuration file for <code>vpnc</code> connection settings can be located in a couple places, depending on how many profiles you want to setup. By default, <code>vpnc</code> looks first for {{Path|/etc/vpnc/default.conf}} for its connection settings. If it doesn't find that file, then it looks for {{Path|/etc/vpnc.conf}} . This setup will only address a single profile example and will use the configuration file location {{Path|/etc/vpnc.conf}} . Make sure you do ''not'' have a {{Path|/etc/vpnc/default.conf}} file.

{{FileBox|filename=/etc/vpnc.conf|1=
IPSec gateway vpngateway.domain.org
IPSec ID group_id
IPSec secret group_password
Xauth username network_signon
Xauth password network_password
}}

The configuration file example above should be modified to reflect the appropriate values for the local setup. The gateway option <code>vpngateway.domain.org</code> can be a fully qualified domain name or an IP address. The ID and secret options should be given  by a network administrator. If this information cannot be obtained but a working setup on a Windows box is available which utilizes the official Cisco VPN client, then it suffices to export the profile. The user name and password options are for the normal network sign-on, such as a Windows NT domain account. 

When the profile is exported from a Windows machine, then the result is most likely a file ending in {{Path|.pcf}} . This file will have all the necessary information. Below is an example: 

{{FileBox|filename=profile.pcf|1=
[main]
Description=
Host=VPNGATEWAY.DOMAIN.ORG
AuthType=1
GroupName=group_id
GroupPwd=
enc_GroupPwd=F3256220AA200A1D532556024F4F314B0388D48B0FBF2DB12
EnableISPConnect=0
ISPConnectType=0
ISPConnect=FOOBAR
ISPCommand=
Username=
SaveUserPassword=0
UserPassword=
enc_UserPassword=
NTDomain=
EnableBackup=0
BackupServer=
EnableMSLogon=1
MSLogonType=0
EnableNat=1
TunnelingMode=0
TcpTunnelingPort=10000
CertStore=0
CertName=
CertPath=
CertSubjectName=
CertSerialHash=00000000000000000000000000000000
SendCertChain=0
VerifyCertDN=
DHGroup=2
ForceKeepAlives=0
PeerTimeout=90
EnableLocalLAN=0
EnableSplitDNS=1
ForceNetLogin=0
}}

In the above example, we can see entries for <code>Host</code>, <code>GroupName</code>, and <code>enc_GroupPwd</code>. The <code>Username</code> and <code>UserPassword</code> may or may not be exported depending on the setup. To generate a working vpnc configuration out of it, use <code>pcf2vpnc</code>, included with vpnc. 

{{Note|The password can be decrypted with the help from the {{c|cisco-decrypt}} program, shipped with the latest vpnc.}}

=== Testing the setup ===

Now that a configuration is in place it is time to test the setup. To start {{c|vpnc}} do the following: 

{{RootCmd|vpnc|output=<pre>
Enter password for username@vpngateway.domain.org:
VPNC started in background (pid: 14788)...
</pre>
}}

The above command output shows that, once {{c|vpnc}} (as root) is executed, a prompt comes up asking for a password. After entering the password (which will not be echoed to the terminal), the {{c|vpnc}} process will automatically become a background process. 

{{Note|If the <code>Xauth password</code> option is specified in the vpnc config file, then at vpnc startup no password will be asked. Additionally, if vpnc needs some extra options not specified in the configuration file, or if something is forgotten, don't worry, it will ask for it.}}

{{RootCmd|ifconfig -a|output=<pre>
eth1      Link encap:Ethernet  HWaddr 00:11:2F:8D:08:08
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::211:2fff:fe8d:808/64 Scope:Link
          UP BROADCAST NOTRAILERS RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:2101119 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1577559 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1757862627 (1676.4 Mb)  TX bytes:732200131 (698.2 Mb)
          Interrupt:177 Memory:faa00000-0
  
sit0      Link encap:IPv6-in-IPv4
          NOARP  MTU:1480  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
  
tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
          inet addr:192.168.160.42  P-t-P:192.168.160.42  Mask:255.255.255.255
          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1412  Metric:1
          RX packets:1 errors:0 dropped:0 overruns:0 frame:0
          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:500
          RX bytes:60 (60.0 b)  TX bytes:616 (616.0 b)
</pre>
}}

{{RootCmd|netstat -r|output=<pre>
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
vpn01.domain.or router          255.255.255.255 UGH    1500 0          0 eth1
192.168.0.0     *               255.255.255.0   U         0 0          0 eth1
loopback        desktop         255.0.0.0       UG        0 0          0 lo
default         *               0.0.0.0         U         0 0          0 tun0
</pre>
}}

As you can see from the above command output(s), <code>vpnc</code> has done the following: 

* Created the tun0 network interface, a virtual interface to handle the traffic across the VPN tunnel
* Obtained the IP address for the tun0 device from the VPN provider
* Set the default route to the VPN gateway

At this point, the workstation is capable of communicating with hosts via the VPN. Because {{c|vpnc}} sets the default route to the VPN gateway, all network traffic will travel across the VPN, even if it destined for the Internet or elsewhere not specifically specified by additional routes. For some, this basic type of connection may be satisfactory, but for most, additional steps need to be taken. 

Additional things that might be interesting to have: 

* DNS for the VPN
* A routing setup that will only send traffic destined for the VPN down the virtual tunnel. This way, browsing the Internet will originate directly from the local network even when connected to the VPN, without the personal web/p2p etc. traffic going across the tunnel.
* A script to manage all this, because {{c|vpnc}} just doesn't do enough by default.

To end the VPN session, execute {{c|vpnc-disconnect}}. An example is shown below. 

{{Note|Don't disconnect yet, because we have additional things to test. The example below is just for informational purposes.}}

{{RootCmd|vpnc-disconnect|output=<pre>
Terminating vpnc daemon (pid: 26250)
</pre>
}}

=== Set up DNS ===

Unfortunately, {{c|vpnc}} doesn't handle the setup and management of DNS for the newly established tunnel. The user is left to decide how DNS should be handled. Although {{Path|/etc/resolv.conf}} can be written during the connection, that would utilize the VPN DNS for all DNS queries regardless of whether or not the traffic is destined for the VPN tunnel. This is a very functional solution and if all that is needed is to connect to the tunnel, work, and then disconnect, read no further. But, to be able to leave the tunnel connected for lengthy periods of time without the work DNS servers handling requests for the personal traffic, read on. 

The ideal setup would allow users to separate the DNS queries into two categories: VPN-related and other. Under this setup, all VPN-related DNS queries would be answered by DNS servers located at the other end of the VPN tunnel and all other queries would continue to be answered by local or ISP supplied DNS servers. This is the setup that will be demonstrated here. 

{{Note|We will consider VPN-related DNS queries to be any query belonging to the example.org domain, such as host1.example.org or server1.example.org.}}

So how to make sure that requests made to hosts on the example.org domain get sent to VPN supplied DNS servers? Well, first install a local DNS server, but don't worry, it's much easier than it sounds. There are several software packages that can handle the type of setup we desire, but for the purposes of this demonstration, {{c|dnsmasq}} will be utilized. Let's emerge it now: 

{{Note|This DNS server software will not be available to the network, and will only answer requests from localhost, <code>127.0.0.1</code>.}}

{{Emerge|net-dns/dnsmasq}}

Next add an option to {{c|dnsmasq}}'s startup options. Edit the following option and substitute .example.org with the appropriate domain and the IP address with a valid DNS server that belongs to the VPN tunnel. 

{{FileBox|filename=/etc/conf.d/dnsmasq|1=
# See the dnsmasq(8) man page for possible options to put here.
DNSMASQ_OPTS="-S /.example.org/192.168.125.10"
}}

Next, make sure that the first entry in {{Path|/etc/resolv.conf}} is the local host <code>127.0.0.1</code>, followed by the location of the backup DNS servers that should handle the DNS traffic in case {{c|dnsmasq}} fails to start, or if it needs to forward a DNS query it doesn't currently have in its cache. An example {{Path|/etc/resolv.conf}} is shown below. 

{{FileBox|filename=/etc/resolv.conf|1=
nameserver 127.0.0.1
nameserver 192.168.0.1
}}

Now that a rule is setup for the VPN tunnel DNS, start {{c|dnsmasq}}. 

{{RootCmd
|/etc/init.d/dnsmasq start
|rc-update add dnsmasq default
}}

=== The routing table ===

The ideal scenario would be if only the traffic destined for the VPN tunnel would travel across the link. At this point, a VPN tunnel setup exists and all traffic will travel across the tunnel, unless additional routes are specified. In order to fix this situation, know what networks are available on the VPN. The easiest way to find out the needed information is to ask a network administrator, but sometimes they are reluctant to answer such questions. If the local network admin doesn't provide the needed information, some trial and error experiments will be required. 

When the VPN tunnel was started, vpnc set the default route to the tunnel. So set the default route back to normal, so that things work as expected. 

{{RootCmd|route add default gw 192.168.0.1}}

Earlier, when DNS services were being configured for the VPN, a DNS server was specified to handle the example.org domain. Add a route for the 192.168.125.0 subnet so that DNS queries will work:

{{RootCmd|route add -net 192.168.125.0 netmask 255.255.255.0 dev tun0}}

At this point, any additional routes for known networks (such as for the subnet 192.168.160.0, which includes the IP address received by the TUN/TAP virtual device) should be added. If a friendly network administrator gave the required info, great. Otherwise, start pinging hosts that will be connected to frequently, to give an idea about what the routing table should look like. 

{{Note|Due to the setup, when using VPN network services by name, specify the fully qualified domain name, for instance: webserver1.example.org}}

{{RootCmd|ping intranet1.example.org|output=<pre>
PING intranet1.example.org (172.25.230.29) 56(84) bytes of data.
  
--- intranet1.example.org ping statistics ---
18 packets transmitted, 0 received, 100% packet loss, time 16997ms
</pre>
}}

As you can see from the above example, the ping probes to <code>intranet1.example.org</code> were unsuccessful. So we need to add a route for that subnet. 

{{RootCmd|route add -net 172.25.230.0 netmask 255.255.255.0 dev tun0}}

A few ping and route commands later, and the system should be well on its way to a well working routing table. 

=== Manage the connection ===

==== Calling vpnc when needed ====

Next is an example script to manage the VPN connection. Execute it (as root) from an xterm to start a connection to the VPN. Then all that is left to do is to press return to disconnect the VPN. Obviously this needs to be modified on the current setup, remembering to add all the additional routes that may be necessary. 

{{FileBox|filename=sessionmgmt.sh|title=Example session management script|lang=bash|1=
#!/bin/bash
  
source /sbin/functions.sh
  
ebegin "Connecting to the VPN"
vpnc
eend
  
ebegin "Modifying the routing table"
route add default gw 192.168.0.1
route add -net 172.25.230.0 netmask 255.255.255.0 dev tun0
route add -net 192.168.160.0 netmask 255.255.255.0 dev tun0
route add -net 192.168.125.0 netmask 255.255.255.0 dev tun0
eend
  
einfo "Press any key to disconnect ..."
  
read $disconnect
  
ebegin "Disconnecting from the VPN"
vpnc-disconnect
eend
ebegin "Reconfiguring the default routing table"
route add default gw 192.168.0.1
eend
  
einfo "VPN should now be disconnected"
}}

==== Start vpnc on boot ====

Version 0.4.0-r1 of vpnc contains an init script ( {{Path|/etc/init.d/vpnc}} ) which can handle multiple configurations. The default script looks for {{Path|/etc/vpnc/vpnc.conf}} , but as many configurations as can be imagined are possible. Before and after shutdown and start-up custom-made scripts can be executed that are connected by their name to the corresponding init script (since version 0.5.1-r1). Their names end in {{Path|-preup.sh}} , {{Path|-postup.sh}} , {{Path|-predown.sh}} and {{Path|-postdown.sh}} , stored in the {{Path|/etc/init.d/scripts.d/}} directory. The general naming scheme is sketched in the following table. 

{| class="table table-striped table-condensed" style="text-align: left;" 
|- 
! Init script name
! Needed configuration file
! Pre-up script name
|- 
| {{Path|/etc/init.d/vpnc}}
| {{Path|/etc/vpnc/vpnc.conf}}
| {{Path|/etc/vpnc/scripts.d/vpnc-preup.sh}}
|- 
| {{Path|/etc/init.d/vpnc.work}}
| {{Path|/etc/vpnc/work.conf}}
| {{Path|/etc/vpnc/scripts.d/work-preup.sh}}
|-
|}

Add vpnc to default runlevel with the following commands (in this case for the standard configuration). Do not forget to add the tun module (if built that way) to the kernel's autoload mechanism at startup. 

{{RootCmd|rc-update add vpnc default}}

To not have to save the password in the configuration file, tell the init script to show all output and prompts on standard output by editing {{Path|/etc/conf.d/vpnc}}. Set the <var>VPNCOUTPUT</var> variable to <code>yes</code> or <code>no</code>, where its default is to not display screen output. 

{{Note|The init scripts don't handle DNS separation, but can use custom scripts to achieve that.}}

== Tips and tricks ==

=== Graphical remote access ===

When looking for a Linux application that supports RDP (Remote Desktop Protocol) then give {{Package|net-misc/grdesktop}} a try. It is a GUI app written in GTK+ that fits in well with a Gnome desktop, but doesn't require it. As an alternative to the GUI configuration dialog that grdesktop provides, just install {{Package|net-misc/rdesktop}}. Ultimately, grdesktop is just a frontend for rdesktop. 

If you are a KDE user, you might want to try <code>kvpnc</code> . It a appears to be a very mature VPN management GUI. 

To connect to a Windows machine which doesn't have a DNS entry, but for which the address of an available WINS server is known, use a tool called {{c|nmblookup}} to query the WINS server for the host name of the machine to connect to. Unfortunately, {{Package|net-fs/samba}} needs to be installed to get it, but when working with boxes running Windows installing samba is usually a given, because it includes several other useful tools. 

{{Emerge|net-fs/samba}}

When samba and its tools are installed, test {{c|nmblookup}} by asking the WINS server at IP address 192.168.125.11 about a host named wintelbox1. 

{{RootCmd|nmblookup -U 192.168.125.11 -R 'wintelbox1'|output=<pre>
querying wintelbox1 on 192.168.125.11
172.25.230.76 wintelbox1
</pre>
}}

=== Custom scripts on boot ===

The custom-made scripts for the {{Path|init.d}} file can be used to setup a user-defined routing for the vpnc connection. The examples below show how to setup the routing table so that only connections to 123.234.x.x are routed over the VPN and all other connections use the default gateway. The example uses {{Path|work-preup.sh}} to save the current default gateway before starting vpnc (which resets the default gateway using the VPN connection). Once vpnc has been started, {{Path|work-postup.sh}} deletes this new default gateway, restores the old default gateway and sets the route for all connections to 123.234.x.x to use the vpnc connection. 

{{FileBox|filename=/etc/vpnc/scripts.d/work-preup.sh|lang=bash|1=
#!/bin/sh
route -n | grep -E '^0.0.0.0 ' | cut -c 17-32 >/var/tmp/defaultgw
}}

{{FileBox|filename=/etc/vpnc/scripts.d/work-postup.sh|lang=bash|1=
#!/bin/sh
route del -net 0.0.0.0 netmask 0.0.0.0 dev tun1
route add default gw $(cat /var/tmp/defaultgw)
route add -net 123.234.0.0 netmask 255.255.0.0 dev tun1
}}

The example scripts assume that the vpnc connection uses tun1 as tun device. Set the device name in the connection's configuration file. 

{{FileBox|filename=/etc/vpnc/work.conf|1=
Interface name tun1
IPSec gateway vpn.mywork.com
Pidfile /var/run/vpnc.work.pid
}}

== External resources ==

*  [http://www.unix-ag.uni-kl.de/~massar/vpnc/ vpnc homepage]
*  [http://home.gna.org/kvpnc/en/index.html kvpnc homepage] 
*  [http://www.nongnu.org/grdesktop/ grdesktop homepage] 
{{Migrated|originalauthors=David H. Askew, Christian Faulhammer, Thomas Fischer, nightmorph}}
