{{InfoBox stack
|{{InfoBox homepage|https://github.com/gentoo/gentoo/pulls|header=true}}
}}

__NOTOC__

[[File:Cycle of usercontributions.png|300px|thumbnail|right|Workflow of a user contribution. The green arrows show the path of contribution. Grey arrows are optional, possible access directions.]]

=== Step 0 variant a: User configures the local repository ===
Clone the github mirror of the Gentoo repository under the remote name "upstream".
{{Cmd|git clone -o upstream git@github.com:gentoo/gentoo.git}}
Fork the [https://github.com/gentoo/gentoo Gentoo repository on GitHub] and then add it under the remote name "github" to your local repository. [[File:Github fork.png|frameless|right]]

{{Cmd|git remote add github <UrlOfYourFork.git>}}

=== Step 0 variant b: using git as the main portage tree ===
{{Warning|This setup is not fully functional since the plain developer repository as obtained from github lacks the metadata generated for the official tree.}}

{{rootCmd|mkdir /etc/portage/repos.conf/}}
{{rootCmd|vim /etc/portage/repos.conf/gentoo.conf}}
Add the following to the file:
    [gentoo]
    location = /usr/portage
    sync-type = git
    sync-uri = https://github.com/gentoo/gentoo.git
    auto-sync = yes
    sync-user = portage:portage

{{rootCmd|vim /etc/portage/repo.postsync.d/99-user-dev-perms}}
Add the following, changing <dev_user_name>.
    #!/bin/bash
    USER_NAME=<dev_user_name>
    find /usr/portage/ -type d -exec setfacl -m u:$USER_NAME:rwx {} \;
    find /usr/portage/ -type f -exec setfacl -m u:$USER_NAME:rw {} \;
    find /usr/portage/.git -type d -exec setfacl -m u:$USER_NAME:rwx {} \;
    find /usr/portage/.git -type f -exec setfacl -m u:$USER_NAME:rw {} \;
{{rootCmd|chmod +x /etc/portage/repo.postsync.d/99-user-dev-perms}}

Then sync the tree.
{{rootCmd|emerge --sync}}

Fork the [https://github.com/gentoo/gentoo Gentoo repository on GitHub] and then add it under the remote name "github" to your local repository. [[File:Github fork.png|frameless|right]]

Add your remote fork you created under the remote name "github" to your local repository.

=== Step 1: set up the repo's config ===
{{Cmd
|cd <overlay_path>
|git remote add github <YOURURLHERE>
|git config --local user.name "Your Full Name"
|git config --local user.email "example@domain.tld"
|git config --local pull.ff only
|git config --local pull.rebase preserve
|git config --local push.default simple}}

=== Step 2: GPG Configuration ===
{{Cmd|vim ~/.gnupg/gpg.conf}}
Add the following:
    keyserver hkps://hkps.pool.sks-keyservers.net
    keyserver-options ca-cert-file=/usr/share/gnupg/sks-keyservers.netCA.pem
    keyserver-options no-honor-keyserver-url
    cert-digest-algo SHA512
    default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
Now to generate the key:
{{Cmd|gpg --full-generate-key}}
    Select the algorithm
    Set the key size
    Specify how long the key should be valid (No more then 5 years)
    Confirm the information is correct
    Set your name
    set your email
    Set your passphrase, and confirm it.
It might take some time if you've chosen a high bit length key.<br>
<br>
Upload your key to the keyserver.
{{Cmd|gpg --keyserver pool.sks-keyservers.net --send-key example@domain.tld}}
To get your GPG key run this command.  It should be the top line (starting with pub).  If you have more than one key with the UID you will need to select the correct key yourself (from the list of returned keys).

{{Cmd|gpg --list-public-keys --keyid-format 0xlong example@domain.tld}}

You want the keyID from the line that starts with 'pub' and what is after the algorithm and the / eg:
     pub   rsa4096/0x000000000000000

{{Cmd|git config --local user.signingkey 0x000000000000000
|git config --local commit.gpgsign 1
|git config --local push.gpgsign 0}}

=== Step 3: User updates the local repository ===
[[File:Circular workflow step1.png|200px|frameless|right]]
Say you are making changes to package app-foo/bar.  Create a local branch with your changes:
{{Cmd|git checkout -b app-foo/bar master}}
Make your changes and make sure to run [[repoman]] to check for basic errors:
{{Cmd|repoman -dx full}}
Then commit your changes (if you're closing some bugs on Bugzilla, you can mention them here as suggested by [https://www.gentoo.org/glep/glep-0066.html#commit-messages GLEP66]):
{{cmd|repoman ci}}

=== Step 4: User makes a pull request ===
[[File:Circular workflow step2.png|200px|frameless|right]]
Now that you've made your changes and updated your local branch, it's time to send it off to GitHub and make a PR (Pull Request) to the Gentoo Developers.

Start by pushing the branch with your changes to your GitHub repository:
{{Cmd|git push github app-foo/bar}}
Then [https://help.github.com/articles/creating-a-pull-request/ create a pull request] from your GitHub repository's local branch to the Gentoo repository's master branch.
When your changes have been merged, you may delete your local repository's branch with:
{{Cmd|git branch -d app-foo/bar}}

=== Step 5: Developer fetches the PR and reviews ===
[[File:Circular workflow step3.png|200px|frameless|right]]

{{Cmd|curl -s -L "https://github.com/gentoo/gentoo/pull/1.patch" &#124; git am -S|prompt=dev $}}
{{Cmd|repoman full -x|prompt=dev $}}
{{Cmd| # tests|prompt=dev $}}

=== Step 6: Developer merges to the tree ===
[[File:Circular workflow step4.png|200px|frameless|right]]

{{Cmd|git push --signed origin master|prompt=dev $}}

=== References ===
* [https://www.gentoo.org/glep/glep-0063.html GLEP 63]
* [https://www.gentoo.org/glep/glep-0066.html GLEP 66]
* {{See also|Gentoo git workflow}}
* {{See also|Gentoo GitHub}}
* {{See also| Project:GitHub/Pull requests}}
