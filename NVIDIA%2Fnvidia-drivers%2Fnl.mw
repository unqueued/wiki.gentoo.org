<languages />

{{Metadata|abstract=nvidia-drivers contains the proprietary graphics driver for NVIDIA graphic cards. An open source alternative is nouveau.}}

<div class="mw-translate-fuzzy">
'''x11-drivers/nvidia-drivers''' is de commerciÃ«le grafische driver voor nVidia grafische kaarten. Een open-bron alternatief is [[nouveau]].
</div>

<div class="mw-translate-fuzzy">
De nVidia drivers in Portage zijn door nVidia vrijgegeven en worden ten opzichte van een Linux kernel gecompileerd. Ze bevatten een binair stuk logica dat het merendeel van de ondersteuning biedt om met de grafische kaart te spreken. De drivers bevatten twee onderdelen: een kernel module en een X11 driver. Beide delen zitten in hetzelfde pakket. Door de methode die nVidia toepast om hun drivers te bundelen ga je enkele keuzes moeten maken alvorens je de drivers installeert.
</div>

<div class="mw-translate-fuzzy">
De '''nvidia-drivers''' bevatten de laatste drivers van nVidia die ''alle'' kaarten ondersteunen, met daarin verschillende beschikbare versies afhankelijk van hoe oud je grafische kaart is. Het pakket maakt gebruik van een eclass om te detecteren welk soort kaart je aan het draaien bent zodat de correcte versie wordt geinstalleerd.
</div>

<div class="mw-translate-fuzzy">
== Driver Compatibiliteit ==

Het {{Package|x11-drivers/nvidia-drivers}} pakket ondersteunt een breed gamma aan beschikbare nVidia kaarten. Meerdere versies zijn beschikbaar voor installatie, afhankelijk van de kaart(en) die je hebt. Voor meer informatie, zie het [http://www.nvidia.com/object/IO_32667.html What's a legacy driver? (Engels)] document op de nVidia site om te weten te komen welke versie van nvidia-drivers je moet gebruiken. Een vrij nette manier om dit te ontdekken is door het interactieve formulier dat [http://www.nvidia.com/Download/Find.aspx hier] aangeboden is te gebruiken. Typ de grafische kaart in die je hebt (let wel op de Legacy optie in het 'Product type' veld) en je zal uiteindelijk de best ondersteunde versie onder het formulier zien.
</div>

The {{Package|x11-drivers/nvidia-drivers}} package supports a range of available NVIDIA cards. Multiple versions are available for installation, depending on the card(s) that the system has. See the official NVIDIA documentation, [http://www.nvidia.com/object/IO_32667.html What's a legacy driver?], to find out what version of {{Package|x11-drivers/nvidia-drivers}} should be used. A pretty decent way to find this out through [http://www.nvidia.com/Download/Find.aspx an interactive form]. Enter the graphics card that is used by the system (mind the Legacy option in the 'Product Type' field) and the form should end up with the best supported version.

<div class="mw-translate-fuzzy">
Als je je kaart als een oude kaart hebt geidentificeerd dan kan het zijn dat je meer recente versies van {{Package|nvidia-drivers}} zal moeten maskeren, bijvoorbeeld:

{{RootCmd|echo ">x11-drivers/nvidia-drivers-174" >> /etc/portage/package.mask}}
</div>

{{FileBox|filename=/etc/portage/package.mask|title=Masking drivers with version higher than 174|1=
>x11-drivers/nvidia-drivers-174
}}

<div class="mw-translate-fuzzy">
Herinner je eraan dat Gentoo niet de 71.86.xx versies aanbiedt. Als je een kaart hebt die deze drivers nodig heeft raden we je aan om de [[nouveau]] driver te gebruiken.
</div>

== Installation ==

<div class="mw-translate-fuzzy">
== Kernel ==

Zoals hierboven vermeld, de nVidia kernel driver installeert en draait enkel op de kernel waarmee hij gebouwd is. Ze installeert als een kernel module, dus is het belangrijk dat je kernel het laden van kernel modules ondersteunt (zie onderstaand).
</div>

As mentioned above, the NVIDIA kernel driver installs and runs against the current kernel. It builds as a module, so the kernel must support the loading of kernel modules (see below).

<div class="mw-translate-fuzzy">
De kernel module (nvidia.ko) bevat een particulier deel (ook wel bekend als de "binaire blob") dewelke jouw grafische kaart(en) bestuurt, en een open source deel die tijdens uitvoering de kernel en het particulier deel aan elkaar plakt ("glue"). Deze moeten goed samen te werken om te vermijden dat je data zou kunnen verliezen (door kernel paniek, X servers die vastlopen met niet opgeslagen data in X applicaties) en zelfs hardware problemen (zoals bijvoorbeeld verhitting of andere stroom beheer gerelateerde problemen).
</div>

<div class="mw-translate-fuzzy">
=== Kernel Compatibiliteit ===
Eens in de zoveel tijd veranderd een nieuw uitgebrachte kernel zijn interne driver structuur (en: ABI), dit betekent dat alle drivers die deze structuur gebruiken veranderd moeten worden om deze nieuwe structuur te ondersteunen. Voor open source drivers, en in het bijzonder die dat met de kernel gedistribueerd worden, zijn deze verandering vrij triviaal om op te lossen omdat de aanroepen tussen de drivers en de andere delen van de kernel vrij gemakkelijk ingekeken kunnen worden. Voor particuliere drivers zoals nvidia.ko, werkt het iets anders. Wanneer een interne drivers structuur veranderd, kan je niet zomaar de kleeflaag ("glue") veranderen, omdat je niet echt weet hoe de kleeflaag door het particuliere deel gebruikt word. Als je er toch in slaagt om dingen mooi te doen werken, riskeer je alsnog dat de nvidia.ko in jouw nieuw, niet ondersteunde kernel mogelijk tot het verlies van data of problemen met hardware leidt.
</div>

From time to time, a new kernel release changes the internal ABI for drivers, which means all drivers that use those ABIs must be changed accordingly. For open source drivers, especially those distributed with the kernel, these changes are nearly trivial to fix since the entire chain of calls between drivers and other parts of the kernel can be reviewed quite easily. For proprietary drivers like nvidia.ko, it doesn't work quite the same. When the internal ABIs change, then it is not possible to merely fix the "glue", because nobody knows how the glue is used by the proprietary part. Even after managing to patch things up to have things seem to work nicely, the user still risks that running nvidia.ko in the new, unsupported kernel will lead to data loss and hardware failure.

<div class="mw-translate-fuzzy">
Wanneer een nieuwe, niet compatibele kernel versie word vrijgegeven, is het mogelijk het beste om met de laatst ondersteunde kernel versie te blijven werken. Het duurt voor Nvidia enkele weken om een nieuwe particuliere versie vrij te geven waarvan ze denken dat deze klaar is voor algemeen gebruik. Wacht het gewoon even af. Als je desondanks toch tegen alle waarschuwingen in wil gaan, dan bieden de nvidia-drivers ebuilds ondersteuning voor het epatch_user commando van eutils.eclass: Dit staat toe om  nvidia-drivers te patchen en op de een of andere manier toch te doen werken met de laatste, niet compatibele kernel versie die je zo graag wil draaien. Let hier wel mee op want de nvidia-drivers onderhouders en Nvidia zullen geen support bieden wanneer je problemen oploopt. De garantie van je hardware verloopt mogelijk, Gentoo's onderhouders gaan zich niet bezig houden met het oplossen van zulke problemen omdat enkel Nvidia over de mogelijkheden beschikt om de particuliere driver te debuggen, en de kernel onderheuders (zowel die van Gentoo als die van Linux) zullen zeker geen ondersteuning willen bieden aan particuliere drivers, of eender welk "bedorven" systeem dat hierdoor problemen heeft opgedaan.
</div>

If {{c|genkernel all}} was used to configure the kernel, then everything is all set. If not, double check the kernel configuration so that this support is enabled:

{{KernelBox|title=Enable loadable module support|1=
[*] Enable loadable module support --->
}}

Je moet tevens ''Memory Type Range Register'' in je kernel activeren:

{{KernelBox|title=Enable MTRR support|1=
Processor type and features --->
   [*] MTRR (Memory Type Range Register) support
}}

Als je een AGP gebaseerde grafische kaart bezit, dan kan je optioneel '''agpgart''' ondersteuning aanzetten in de configuratie van de kernel; oftewel compileer je het dan in de kernel of maak je er een module van. Als je agpgart niet in de kernel compileert, dan zullen de drivers hun eigen '''agpgart''' implementatie gebruiken, genaamd '''NvAGP'''.  Op sommige systemen zal je merken dat dit meer performant is dan de agpgart in de kernel; terwijl op andere systemen, het minder performant zal werken. Je zal dit voor jouw eigen systeem moeten evalueren om zelf de implementatie te kiezen die de beste performantie biedt voor jou. Als je niet zeker bent wat te doen, gebruik dan de implementatie in de kernel:

{{KernelBox|title=Enable agpgart support|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note/nl|Op een amd64 systeem zal de IOMMU de keuze van de agpgart optie bepalen.}}

{{Important|For x86 and AMD64 processors, the in-kernel [[framebuffer]] driver conflicts with the binary driver provided by NVIDIA. When compiling the kernel for these CPUs, completely remove support for the in-kernel driver as shown:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Now make sure the nouveau driver is disabled:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        < > Nouveau (nVidia) cards
}}
}}

A framebuffer alternative is [[uvesafb]], which can be installed parallel to {{Package|x11-drivers/nvidia-drivers}}. 

{{Important|For x86 and AMD64 processors, the [[uvesafb]] driver conflicts with the binary driver provided by NVIDIA above 361.28 versions.}}

For (U)EFI systems, uvesafb will not work. Be warned that enabling ''efifb'' support in kernel (<code>CONFIG_FB_EFI=y</code>) causes intermittent problems with the initialization of the NVIDIA drivers. There is no known alternative framebuffer for (U)EFI systems.

The '''nvidia-drivers''' ebuild automatically discovers the kernel version based on the {{Path|/usr/src/linux}} symlink. Please ensure that this symlink is pointing to the correct sources and that the kernel is correctly configured. Please refer to the "Configuring the Kernel" section of the [[Handbook:Main_Page|Gentoo Handbook]] for details on configuring the kernel.

First, choose the right kernel source using {{c|eselect}}. When using {{Package|sys-kernel/gentoo-sources}} version 3.7.10 for instance, the kernel listing might look something like this:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the kernel that the symbolic link points to.

If the symlink is not pointing to the correct sources, update the link by selecting the number of the desired kernel sources, as in the example above.

{{RootCmd|eselect kernel set 1}}

== Configuration ==

=== Drivers === 

Now it's time to install the drivers. First follow the [[Xorg/Guide|X Server Configuration Guide]] and set <code>VIDEO_CARDS="nvidia"</code> in {{Path|/etc/portage/make.conf}}. During the installation of the X server, it will then install the right version of {{Package|x11-drivers/nvidia-drivers}}.

<div class="mw-translate-fuzzy">
{{Note/nl|De drivers kunnen worden geinstalleerd met de '''gtk''' USE flag in te stellen in {{Path|/etc/portage/make.conf}}. Dit zal '''media-video/nvidia-settings''' installeren, een handig grafisch gereedschap programma om de verschillende aspecten van uw nVidia grafische kaart te controleren en te configureren.}}
</div>

<div class="mw-translate-fuzzy">
{{Important/nl|Telkens u [http://www.gentoo.org/doc/nl/kernel-upgrade.xml een nieuwe kernel compileert] of een huidige opnieuw compileert, zal u de nVidia kernel modules moeten herinstalleren om deze werkend te houden. Een gemakkelijke manier om op de hoogte te blijven van externe kernel modules (zoals '''nvidia-drivers''') is '''sys-kernel/module-rebuild''' te installeren. Eens dit pakket is geÃ¯nstalleerd, kan u simpel '''module-rebuild populate''' uitvoeren om de module database automatisch in te vullen met een lijst van pakketten die herbouwd dienen te worden. Eens je klaar bent met het compileren of opnieuw compileren van de kernel, kan je simpelweg '''module-rebuild rebuild''' uitvoeren om de drivers te herbouwen voor jouw nieuwe kernel.}}
</div>

<div class="mw-translate-fuzzy">
Eens de installatie gedaan is voer je '''modprobe nvidia''' uit om de kernel module in het geheugen te laden. Als dit een upgrade is dien je eerst de module te verwijderen.
{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}
</div>

== Drivers ==
Het is nu tijd om de drivers te installeren. U kan dit doen door eerst de [http://www.gentoo.org/doc/en/xorg-config.xml X Server Configuratie] te volgen en er op te letten dat u '''VIDEO_CARDS="nvidia"''' instelt in {{Path|/etc/portage/make.conf}}. Wanneer u de X server dan installeert, zal dit de juiste versie van '''nvidia-drivers''' installeren voor u.

<div class="mw-translate-fuzzy">
Om te vermijden dat je manueel de module moet laden bij het opstarten, wil je mogelijk deze automatisch laten laden elke keer je systeem opstart, wijzig dus {{Path|/etc/conf.d/modules}} en voeg er '''nvidia''' aan toe.
</div>

<div class="mw-translate-fuzzy">
{{Important/nl|Als je '''agpgart''' als een module hebt gecompileerd, dan dien je deze ook toe te voegen aan {{Path|/etc/conf.d/modules}}.}}
</div>

=== Kernel module signing (optional) ===

{{Note|The information in this section in unnecessary for systems that do not implement signed kernel modules. Feel free to skip it.}}

If secure boot kernel signing is used, then the NVIDIA kernel modules need to be signed before they can be loaded.

This can be accomplished by using the kernel-provided {{c|perl}} script as follows.

{{RootCmd|/usr/src/linux/scripts/sign-file sha512 /usr/src/linux/certs/signing_key.priv /usr/src/linux/certs/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|/usr/src/linux/scripts/sign-file sha512 /usr/src/linux/certs/signing_key.priv /usr/src/linux/certs/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

As of driver version 358.09 a new module has been made to handle monitor mode setting and for this driver version this module must also be signed.

{{RootCmd|/usr/src/linux/scripts/sign-file sha512 /usr/src/linux/certs/signing_key.priv /usr/src/linux/certs/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Once the modules are signed, the driver will load as expected on boot up. This module signing method can be used to sign other modules too - not only the nvidia-drivers. Just modify the path and corresponding module accordingly.

=== The X server ===

Once the appropriate drivers are installed, configure the X server to use the <code>nvidia</code> driver instead of the default <code>nv</code> driver.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Run {{c|eselect}} so that the X server uses the NVIDIA GLX libraries:

{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Enabling global nvidia support ===

Some tools, such as {{Package|media-video/mplayer}} and {{Package|media-libs/xine-lib}}, use a local USE flag called <code>xvmc</code> which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in <code>xvmc</code> in the USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to {{Package|media-video/mplayer}} and/or {{Package|media-libs/xine-lib}} in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the <code>nvidia</code> USE flag, so it might be a good idea to add it to {{Path|/etc/portage/make.conf}}.

Then, run {{c|emerge -uD --newuse @world}} to rebuild the applications that benefit from the USE flag change.

=== Using the nVidia settings tool ===

NVIDIA also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as part of {{Package|x11-drivers/nvidia-drivers}} with the <code>tools</code> USE flag set.

=== OpenGL/OpenCL inschakelen ===

To enable OpenGL and OpenCL though the device, run:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Make sure that the Xorg server is not running during these changes.

== Usage ==

<div class="mw-translate-fuzzy">
== Je grafische kaart testen ==
Om je nVidia kaart te testen, start X en voer '''glxinfo''' uit, welke deel uit maakt van het '''x11-apps/mesa-progs''' pakket. Het zou moeten weergeven dat '''direct rendering''' geactiveerd is:
{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}
</div>

To test the NVIDIA card, fire up X and run {{c|glxinfo}}, which is part of the {{Package|x11-apps/mesa-progs}} package. It should say that direct rendering is activated:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

<div class="mw-translate-fuzzy">
Om de FPS te controleren, voer je '''glxgears''' uit.
</div>

== Problemen Oplossen ==

For an overview of the currently open bugs reported against the {{Package|x11-drivers/nvidia-drivers}} package, take a look at the {{Bug|nvidia-drivers|search=package}}.

=== FATAL: modpost: GPL-incompatible module *.ko uses GPL-only symbol ===

When the ebuild is complaining about the 'mutex_destroy' GPL-only symbol:

{{RootCmd|emerge nvidia-drivers|output=<pre>
FATAL: modpost: GPL-incompatible module nvidia.ko uses GPL-only symbol 'mutex_destroy' 
</pre>}}

Be sure to disable <var>CONFIG_DEBUG_MUTEXES</var> in the kernel's {{Path|.config}} file, as suggested by [https://forums.gentoo.org/viewtopic-p-7964326.html this forum thread].

=== Driver fails to initialize when MSI interrupts are enabled ===

The Linux NVIDIA driver uses Message Signaled Interrupts (MSI) by default. This provides compatibility and scalability benefits, mainly due to the avoidance of IRQ sharing. Some systems have been seen to have problems supporting MSI, while working fine with virtual wire interrupts. These problems manifest as an inability to start X with the NVIDIA driver, or CUDA initialization failures.

MSI interrupts can be disabled via the NVIDIA kernel module parameter <code>NVreg_EnableMSI=0</code>. This can be set on the command line when loading the module, or more appropriately via the distribution's kernel module configuration files (such as those under {{Path|/etc/modprobe.d/}}).

For instance:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=0660 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

<div class="mw-translate-fuzzy">
=== 2D werkend krijgen op machines met 4 GB of meer geheugen ===
Als je problemen hebt met de nVidia 2D acceleratie dan is dat mogelijk omdat je geen schrijf-combinerend bereik (EN: write-combining range) met MTRR hebt opgezet. Om dit na te gaan, controleer je de inhoud van {{Path|/proc/mtrr}}:
{{RootCmd|cat /proc/mtrr}}
</div>

When NVIDIA 2D acceleration is giving problems, then it is likely that the system is unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

<div class="mw-translate-fuzzy">
Elke lijn zou "write-back" of "write-combining" moeten bevatten. Als je een lijn ziet met "uncachable" dan zal je een instelling in je BIOS moeten veranderen om dit op te lossen.
</div>

<div class="mw-translate-fuzzy">
Start opnieuw op en ga in de BIOS, vind dan de MTRR instellingen (mogelijk onder "CPU Settings"). Verander de instelling van "continuous" (continu) naar "discrete" (discreet) en start opnieuw op in Linux. Je zou nu moeten zien dat er geen "uncachable" meer te zien is en dat de 2D acceleratie nu werkt zonder enige problemen.
</div>

<div class="mw-translate-fuzzy">
=== Wanneer ik een kernel module probeer te laden, krijg ik "no such device" (geen apparaat gevonden) ===
Dit wordt gewoonlijk veroorzaakt door een van de volgende problemen:
</div>

This is usually caused by one of the following issues:

<div class="mw-translate-fuzzy">
1. Je hebt helemaal geen nVidia grafische kaart. Controleer de '''lspci''' output om na te gaan of je wel degelijk een nVidia grafische kaart geÃ¯nstalleerd hebt en gedetecteerd wordt.
</div>

=== Xorg zegt dat het geen schermen kan vinden ===

Als je jouw systeem opstart en een zwart scherm of een console ziet in plaats van een grafische interface; dan kan je {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} drukken als je nog geen console hebt en vervolgens inloggen. Daarna voer je uit:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

om de uitvoer van Xorg te kunnen zien. Als een van de eerste foutmeldingen vermeldt dat Xorg geen schermen kan vinden, dan volg je deze stappen om je probleem op te lossen.

Het zou voldoende moeten zijn om het volgende commando uit te voeren alvorens opnieuw te starten:

{{RootCmd|/opt/bin/nvidia-xconfig}}

Maar als dat niet werkt, voer dan {{c|lspci}} uit en je zal je grafische kaart kunnen vinden die als volgt start:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: Merk en model van je grafische kaart
 . . . 
</pre>
}}

Neem het eerste stuk, <code>01.00.0</code> en plaats het in {{Path|/etc/X11/xorg.conf}} met de <code>BusID</code> optie:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# Dit is niet het volledige bestand, maar slechts het te wijzigen deel.
# Dit bestand zou reeds moeten bestaan door het uitvoeren van nvidia-xconfig.
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering is not enabled ===

If direct rendering does not work, it may be because the kernel has Direct Rendering Manager enabled, which conflicts with the driver. See the direct rendering status by following instructions in the section [[#Testing the card|Testing the card]].

First, disable Direct Rendering Manager (<code>CONFIG_DRM</code>) in the kernel :

{{KernelBox|title=Disabling Direct Rendering Manager|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Next, rebuild {{Package|x11-drivers/nvidia-drivers}} since the driver may have built against the kernel DRM symbols. It should fix the problem.

=== Video playback stuttering or slow ===

Lately there seems to be some breaking with playback of some types of video with the NVIDIA binary drivers, causing slow video playback or significant stuttering. This problem seems to be occurring within the Intel CPU Idle replacement instead of the common ACPI CPU idling method for certain CPU's.

Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVIDIA Powermizer feature, or setting Powermizer to maximum performance within {{c|nvidia-settings}} has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <code>mplayer-nodeint</code> with something similar to <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> as a work around.)

=== No vertical synchronization (no VSync, tearing) in OpenGL applications ===

Adding the following option to the screen section prevents tearing on GTX 660, 660 Ti, and probably some other GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

<div class="mw-translate-fuzzy">
== Expert Configuratie ==
</div>

=== Documentatie ===

Het {{Package|x11-drivers/nvidia-drivers}} pakket komt ook met een gedetailleerde documentatie. Deze documentatie is geinstalleerd in {{Path|/usr/share/doc}} en kan worden bekeken met behulp van het volgende commando:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Kernel module parameters ===

De <code>nvidia</code> kernel module accepteert enkele parameters (opties) dewelke je kan gebruiken om de experimenteren met de werking van de driver. De meeste parameters zijn vermeld in de documentatie. Om parameters toe te voegen of te veranderen, wijzig je het bestand {{Path|/etc/modprobe.d/nvidia.conf}}. Vergeet niet om {{c|update-modules}} uit te voeren na het wijzigen van dit bestand, en vergeet ook niet dat je de <code>nvidia</code> module zal moeten herladen voor dat deze nieuwe instellingen enig effect zullen hebben.

{{Warning|Pay close attention to this section as these kernel options can enable features that the hardware may or may not support. These options are not forgiving, so be careful with the parameters. Do not made any changes without validating and double-checking that the change is needed.}}

{| class="table table-condensed table-striped"
|-
! Attribute !! Default !! Description
|-
| <code>NVreg_DeviceFileUID</code> || <code>0</code> || Modify the user ID for the device file. The default value sets it to the {{c|root}} user. Setting this to another user ID will make the driver module create the device file with access available to that user ID.
|-
| <code>NVreg_DeviceFileGID</code> || <code>27</code> || Modify the Group ID for the device file. The default value sets it to the {{c|video}} group.
|-
| <code>NVreg_DeviceFileMode</code> || Undefined || Set the permissions for the device file. A value of 0660 grants the owner and group-owner read-write access while other users cannot access the device file.
|-
| <code>NVreg_ModifyDeviceFiles</code> || <code>1</code> || Instruct the driver to enable or disable dynamic device file management.
|-
| <code>NVreg_EnablePCIeGen3</code> || <code>0</code> || Enable PCIe Gen 3.x support. If the system supports this 8GT high speed bus then enable it with this module option flag. When this is enabled but the system does not support Gen 3.0, the behavior of the system can become irratic and unstable. Some have even reported damage to hardware enabling this when it is not properly supported. By default the Nvidia driver is set to use PCIe Gen 2.x for compatibility reasons.
|-
| <code>NVreg_UsePageAttributeTable</code> || <code>0</code> || This is one of the latest and newest additions to the Nvidia driver modules option. It allows the driver to take full advantage of the PAT technology - a newer way of allocating memory, replacing the older Memory Type Range Register (MTRR) method. The PAT method creates a partition type table at a specific address mapped inside the register and utilizes the memory architecture and instruction set more efficiently and faster. If the computer supports PAT and the feature is enabled in the kernel then this flag can be enabled. Without PAT support, users may experience unstable performance and even crashes if this is enabled. So be careful with these options.
|-
| <code>NVreg_EnableVia4x</code> || <code>0</code> || Enable AGP 4x mode in the the NVIDIA driver on Via-chipset-powered systems. Some of these hardware configurations would not work properly in AGP 4x mode when others would. The default leaves it at AGP 2x mode.
|-
| <code>NVreg_EnableALiAGP</code> || <code>0</code> || On ALi1541 and ALi1647 chipsets, AGP support is by default disabled by the NVIDIA drivers. The value specifies the speed factor to use, so the values 1, 2, 4 and 8 represent AGP 1x, 2x, 4x and 8x respectively. NVIDIA does not recommend changing the value as it may lead to unstable systems.
|-
| <code>NVreg_ReqAGPRate</code> || Unspecified || Forces the AGP mode on the driver. For instance, a value of 1 means AGP 1x, while a value of 4 means AGP 4x.
|-
| <code>NVreg_NvAGP</code> || || Changes the AGP Gart mode setting. Possible values are: <code>0</code> (Disable), <code>1</code> (Enable using NVIDIAs internal AGP-Gart), <code>2</code> (Enable using the Linux kernel AGP-Gart) and <code>3</code> (Enable and use any available, but try th NVIDIA internal one first).
|-
| <code>NVreg_EnableAGPSBA</code> || <code>0</code> || Disables (<code>0</code>) or enables (<code>1</code>) AGP Side Banding. For stability reasons, the setting is by default disabled, but the setting can be enabled for testing and debugging purposes. This is not supported by NVIDIA though.
|-
| <code>NVreg_EnableAGPFW</code> || <code>0</code> || Enables AGP Fast-Writes when set to <code>1</code>. Depending on the system's chipset this may cause stability issues if enabled.
|-
| <code>NVreg_Mobile</code> || <code>0</code> || Through this setting, users can force the EDID information for particular systems. This workaround is provided for mobile GPU's where EDID information is either non-functional or disabled. Potential values are <code>0</code> (Auto detection of the correct setting), <code>1</code> (Dell notebooks), <code>2</code> (non-Compa1 Toshiba laptops), <code>3</code> (All other notebooks/laptops), <code>4</code> (Compa1 Toshiba laptops) or <code>5</code> (Gateway machines).
|-
| <code>NVreg_RemapLimit</code> || <code>60</code> || Maximum amount of system memory remapping. It specifies the amount of memory that the driver will be allowed to remap through the IOMMU/SWIOTLB on a 64-bit system. Only use it if the IOMMU or SMIOTLB is larger than 64mb. NVIDIA recommends to subtract 4mb from the total amount of memory to use. For instance, the default value is <code>60</code> which is in fact 64mb. To set it to 128mb, set the value to <code>124</code>.
|-
|<code>NVreg_UpdateMemoryTypes</code> || <code>0</code> || Tweak the use of page table attributes. Possible values are: <code>0</code> (Nvidias logic mechanism), <code>1</code> (Enable the use of changed page table attributes) and <code>2</code> (Disable the use of page table attributes).
|-
|<code>NVreg_InitializeSystemMemoryAllocations</code> || <code>1</code> || Tell the NVIDIA driver to clear system memory allocations prior to using it for the GPUs. Disabling can give a slight performance boost but at the cost of increased security risks. By default the driver will wipe the allocated by zeroing out its content.
|-
| <code>NVreg_UseVBios</code> || <code>1</code> || Enable or disable the use of the video BIOS int10 code. Set to <code>0</code> to disable.
|-
| <code>NVreg_RMEdgeIntrCheck</code> || Unspecified || Enable or disable checking for edge-triggered interrupts.
|-
| <code>NVreg_EnableMSI</code> || <code>0</code> || Enable or disable PCIe-MSI capabilities. Enable this to use MSI interrupts instead of wired interrupts.
|-
| <code>NVreg_MapRegistersEarly</code> || <code>0</code> || If set to <code>1</code>, allow the driver to map the memory locations early when the system is probing the hardware instead of the default option of doing this when loaded by {{c|modprobe}} or during {{c|startx}}. This is a debugging feature.
|-
| <code>NVreg_RegisterForACPIEvents</code> || <code>1</code> || Enable the driver to register with the ACPI of the system to receive ACPI events. This can be disabled (<code>0</code>) when issues occur with ACPI or while debugging an issue. 
|}

<div class="mw-translate-fuzzy">
Wijzig {{Path|/etc/modprobe.d/nvidia.conf}} met je favoriete tekst editor:
{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}
</div>

{{RootCmd|update-modules}}

Ontlaad de <code>nvidia</code> module...

{{RootCmd|modprobe -r nvidia}}

<div class="mw-translate-fuzzy">
... en laad het terug opnieuw in:
{{RootCmd|modprobe nvidia}}
</div>

{{RootCmd|modprobe nvidia}}

=== Geavanceerde X configuratie ===

De GLX laag heeft ook een heleboel opties die geconfigureerd kunnen worden. Deze bepalen de configuratie van de TV uitgang, meerdere schermen, detectie van de frequentie van de monitor, en zo voort... Deze beschikbare opties zijn ook gedetailleerd vermeld in de documentatie.

<div class="mw-translate-fuzzy">
Als je wens een van deze opties te gebruiken, zal je deze in de relevante Device sectie van het X configuratie bestand dienen te vermelden (gewoonlijk {{Path|/etc/X11/xorg.conf}}). Bijvoorbeeld, stel dat ik het introductie logo wil uitzetten:
</div>

{{FileBox|filename=/etc/X11/xorg.conf|title=Schakel het introductie logo uit.|1=
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

<div class="mw-translate-fuzzy">
== Zie ook ==
* [[nouveau & nvidia-drivers switching|Het wisselen tussen nouveau & nvidia-drivers (Engels)]]
</div>

<div class="mw-translate-fuzzy">
== Bedankt ==
We zouden graag de volgende auteurs en redacteurs willen bedanken voor hun contributies aan deze handleiding: Sven Vermeulen, Joshua Saddler, M Curtis Napier en Chris Gianelloni.
</div>

{{Migrated|originalauthors={{Dev|SwifT}}, {{Dev|nightmorph}}, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
