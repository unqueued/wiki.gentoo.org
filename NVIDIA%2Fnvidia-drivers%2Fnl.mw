<languages />
'''nvidia''' is de commerciële grafische driver voor nVidia grafische kaarten. Een open-bron alternatief is [[nouveau]]

De nVidia drivers in Portage zijn door nVidia vrijgegeven en worden ten opzichte van een Linux kernel gecompileerd. Ze bevatten een binair stuk logica dat het merendeel van de ondersteuning biedt om met de grafische kaart te spreken. De drivers bevatten twee onderdelen: een kernel module en een X11 driver. Beide delen zitten in hetzelfde pakket. Door de methode die nVidia toepast om hun drivers te bundelen ga je enkele keuzes moeten maken alvorens je de drivers installeert.

De '''nvidia-drivers''' bevatten de laatste drivers van nVidia die ''alle'' kaarten ondersteunen, met daarin verschillende beschikbare versies afhankelijk van hoe oud je grafische kaart is. Het pakket maakt gebruik van een eclass om te detecteren welk soort kaart je aan het draaien bent zodat de correcte versie wordt geinstalleerd.

== Driver Compatibiliteit ==

Het {{Package|x11-drivers/nvidia-drivers}} pakket ondersteunt een breed gamma aan beschikbare nVidia kaarten. Meerdere versies zijn beschikbaar voor installatie, afhankelijk van de kaart(en) die je hebt. Voor meer informatie, zie het [http://www.nvidia.com/object/IO_32667.html What's a legacy driver? (Engels)] document op de nVidia site om te weten te komen welke versie van nvidia-drivers je moet gebruiken.

Als je je kaart als een oude kaart hebt geidentificeerd dan kan het zijn dat je meer recente versies van {{Package|nvidia-drivers}} zal moeten maskeren, bijvoorbeeld:

{{RootCmd|echo ">x11-drivers/nvidia-drivers-174" >> /etc/portage/package.mask}}

Herinner je eraan dat Gentoo niet de 71.86.xx versies aanbiedt. Als je een kaart hebt die deze drivers nodig heeft raden we je aan om de [[nouveau]] driver te gebruiken.

== Kernel ==

Zoals hierboven vermeld, de nVidia kernel driver installeert en draait enkel op de kernel waarmee hij gebouwd is. Ze installeert als een kernel module, dus is het belangrijk dat je kernel het laden van kernel modules ondersteunt. Als je '''genkernel all' hebt gebruikt om de kernel te configureren, dan ben je al klaar. Zoniet, kijk dan zeker je kernel configuratie na zodat deze ondersteuning actief is:

{{Kernel||<pre>
Loadable module support --->
  [*] Enable loadable module support
</pre>
}}

Je moet tevens ''Memory Type Range Register'' in je kernel activeren:

{{Kernel||<pre>
Processor and Features --->
  [*] MTRR (Memory Type Range Register) support
</pre>
}}

Als je een AGP gebaseerde grafische kaart bezit, dan kan je optioneel '''agpgart''' ondersteuning aanzetten in de configuratie van de kernel; oftewel compileer je het dan in de kernel of maak je er een module van. Als je agpgart niet in de kernel compileert, dan zullen de drivers hun eigen '''agpgart''' implementatie gebruiken, genaamd '''NvAGP'''.  Op sommige systemen zal je merken dat dit meer performant is dan de agpgart in de kernel; terwijl op andere systemen, het minder performant zal werken. Je zal dit voor jouw eigen systeem moeten evalueren om zelf de implementatie te kiezen die de beste performantie biedt voor jou. Als je niet zeker bent wat te doen, gebruik dan de implementatie in de kernel:
{{Kernel||<pre>
Device Drivers --->
    Graphics Support --->
        -*- /dev/agpgart (AGP Support) --->
</pre>}}

{{Note/nl|Op een amd64 systeem zal de IOMMU de keuze van de agpgart optie bepalen.}}

{{Important/nl|Voor x86 en AMD64 processoren, kan de [[framebuffer]] driver in de kernel conflicteren met de beschikbare binaire driver van nVidia. Als je de kernel wil compileren voor deze processoren, zal je volledig de ondersteuning voor nVidia framebuffers uit de kernel moeten verwijderen zoals hier getoond:
{{Kernel||<pre>
Device Drivers --->
    Graphics Support --->
        <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
</pre>}}
}}

Een alternatieve framebuffer is [[uvesafb]], dewelke gelijktijdig kan geïnstalleerd worden met de nvidia-drivers.

De '''nvidia-drivers''' ebuild ondekt uw kernel versie automatisch gebaseerd op de symbolische link {{Path|/usr/src/linux}}. Wees er zeker van dat de symbolische link naar de juiste kernel broncode verwijst en dat de kernel correct is geconfigureerd. De "Configuring the Kernel" sectie van het [http://www.gentoo.org/doc/en/handbook/ Gentoo Handboek] kan bekeken worden voor meer informatie over hoe de kernel geconfigureerd kan worden.

Eerst wijst u de juist kernel broncode aan met '''eselect'''. Stel dat je '''gentoo-sources-3.7.10''' wil gebruiken, dan zou de lijst met kernels er uit moeten zien zoals:
{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In bovenstaande output zal u opmerken dat de '''linux-3.7.10-gentoo''' kernel is gemarkeed met een ster ('''*''') om aan te tonen dat het om een kernel gaat waar de symbolische link {{Path|/usr/src/linux}} naar verwijst.

Als de symbolische link niet naar de juiste broncode verwijst, zal u deze kunnen veranderen door de juiste nummer van uw gewennste kernel broncode te kiezen; zoals in het bovenstaande voorbeeld.
{{RootCmd|eselect kernel set 1}}

== Drivers ==
Het is nu tijd om de drivers te installeren. U kan dit doen door eerst de [http://www.gentoo.org/doc/en/xorg-config.xml X Server Configuratie] te volgen en er op te letten dat u '''VIDEO_CARDS="nvidia"''' instelt in {{Path|/etc/portage/make.conf}}. Wanneer u de X server dan installeert, zal dit de juiste versie van '''nvidia-drivers''' installeren voor u.

{{Note/nl|De drivers kunnen worden geinstalleerd met de '''gtk''' USE flag in te stellen in {{Path|/etc/portage/make.conf}}. Dit zal '''media-video/nvidia-settings''' installeren, een handig grafisch gereedschap programma om de verschillende aspecten van uw nVidia grafische kaart te controleren en te configureren.}}

{{Important/nl|Telkens u [http://www.gentoo.org/doc/nl/kernel-upgrade.xml een nieuwe kernel compileert] of een huidige opnieuw compileert, zal u de nVidia kernel modules moeten herinstalleren om deze werkend te houden. Een gemakkelijke manier om op de hoogte te blijven van externe kernel modules (zoals '''nvidia-drivers''') is '''sys-kernel/module-rebuild''' te installeren. Eens dit pakket is geïnstalleerd, kan u simpel '''module-rebuild populate''' uitvoeren om de module database automatisch in te vullen met een lijst van pakketten die herbouwd dienen te worden. Eens je klaar bent met het compileren of opnieuw compileren van de kernel, kan je simpelweg '''module-rebuild rebuild''' uitvoeren om de drivers te herbouwen voor jouw nieuwe kernel.}}

Eens de installatie gedaan is voer je '''modprobe nvidia''' uit om de kernel module in het geheugen te laden. Als dit een upgrade is dien je eerst de module te verwijderen.
{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Om te vermijden dat je manueel de module moet laden bij het opstarten, wil je mogelijk deze automatisch laten laden elke keer je systeem opstart, wijzig dus {{Path|/etc/conf.d/modules}} en voeg er '''nvidia''' aan toe.

{{Important/nl|Als je '''agpgart''' als een module hebt gecompileerd, dan dien je deze ook toe te voegen aan {{Path|/etc/conf.d/modules}}.}}

=== De X Server ===
Eens de juiste drivers zijn geïnstalleerd zal je de X Server dienen te configureren zodat deze de '''nvidia''' driver gebruikt in plaats van de standaard '''nv''' driver.
{{VIDEO_CARDS/xorg.conf|nvidia}}

Gebruik '''eselect''' om X Server de nVidia GLX libraries te doen gebruiken:
{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===
{{VIDEO_CARDS/Permissions|nvidia}}

== Testing your Card ==
To test your nVidia card, fire up X and run '''glxinfo''', which is part of the '''mesa-progs''' package. It should say that direct rendering is activated:
{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

To monitor your FPS, run '''glxgears'''.

== Enabling nvidia Support ==
Some tools, such as '''mplayer''' and '''xine-lib''', use a local USE flag called '''xvmc''' which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in '''xvmc''' in your USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to '''media-video/mplayer''' and/or '''media-libs/xine-lib''' in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the '''nvidia''' USE flag, so you may want to add it to {{Path|/etc/portage/make.conf}}.

Then, run '''emerge -uD --newuse @world''' to rebuild the applications that benefit from the USE flag change.

=== Using NVidia Settings Tool ===
nVidia also provides you with a settings tool. This tool allows you to monitor and change graphical settings without restarting the X server and is available through Portage as '''media-video/nvidia-settings'''. As mentioned earlier, it will be pulled in automatically if you install the drivers with the '''gtk''' USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== Enable Opengl/Opencl ===

To enable opengl and opencl.

{{RootCmd|eselect opengl set nvidia}}
{{RootCmd|eselect opencl set nvidia}}

Setting opengl will require your systems x11 to not be running.

== Troubleshooting ==
* {{Bug|nvidia-drivers|search=package}}

=== Getting 2D to work on machines with 4Gb or more memory ===
If you are having troubles with the nVidia 2D acceleration it is likely that you are unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:
{{RootCmd|cat /proc/mtrr}}

Every line should contain "write-back" or "write-combining". If you see a line with "uncachable" in it you will need to change a BIOS setting to fix this.

Reboot and enter the BIOS, then find the MTRR settings (probably under "CPU Settings"). Change the setting from "continuous" to "discrete" and boot back into Linux. You will now find out that there is no "uncachable" entry anymore and 2D acceleration now works without any glitches.

=== When I attempt to load the kernel module, I receive a "no such device" ===
This is usually caused by one of the following issues:

1.  You don't have an nVidia card at all.  Check '''lspci''' output to confirm that you have an nVidia graphics card installed and detected.

2.  The currently installed version of x11-drivers/nvidia-drivers does not support your graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at http://www.geforce.com/drivers.  See the [[NVidia/nvidia-drivers#Which_version.3F|Which Version]] section above.

3.  Another kernel driver has control of the hardware.  Check '''lspci -k''' to see if another driver like "nouveau" is bound to the graphics card.  If so, you will need to disable or blacklist this driver.

=== Xorg says it can't find any screens ===
When you boot up your computer and end up with a black screen or a console prompt instead of your GUI; you can press Ctrl+Alt+F2 to bring up a console prompt if you don't already have one. Then you can run:
{{RootCmd| /etc/init.d/xdm stop}}
{{Cmd| startx}}
to see the output of Xorg. If one of the first errors is that Xorg can't find any screens, then follow these steps to resolve your issue.<br />
It should be enough to run the following command before rebooting:
{{Cmd| nvidia-xconfig}}
But if that doesn't work, run lspci and you'll find your video card starts off like this:
01:00.0 VGA compatible controller: make and model of videocard <br />
Take the first bit, ''01.00.0'' and put it in your /etc/X11/xorg.conf with the BusID option:
{{File|/etc/X11/xorg.conf||<pre>
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection


</pre>}}

== Expert Configuration ==

=== Documentation ===
The nVidia driver package also comes with comprehensive documentation. This is installed into '''/usr/share/doc''' and can be viewed with the following
command:
{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.gz}}

=== Kernel module parameters ===
The '''nvidia''' kernel module accepts a number of parameters (options) which you can use to tweak the behaviour of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file '''/etc/modprobe.d/nvidia.conf'''. Remember to run '''update-modules''' after modifying this file, and bear in mind that you will need to reload the '''nvidia''' module before the new settings take effect.

Edit /etc/modprobe.d/nvidia.conf in your favourite editor:
{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Update module information:
{{RootCmd|update-modules}}

Unload the nvidia module...
{{RootCmd|modprobe -r nvidia}}

...and load it once again:
{{RootCmd|modprobe nvidia}}

=== Advanced X configuration ===
The GLX layer also has a plethora of options which can be configured. These control the configuration of TV out, dual displays, monitor frequency detection, etc. Again, all of the available options are detailed in the documentation.

If you wish to use any of these options, you need to list them in the relevant Device section of your X config file (usually '''/etc/X11/xorg.conf'''). For example, suppose I wanted to disable the splash logo:

{{File|/etc/X11/xorg.conf|Disable the splash logo|<pre>
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
</pre>}}

== Acknowledgements ==
We would like to thank the following authors and editors for their contributions to this guide: Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni.

== See also ==
* [[nouveau & nvidia-drivers switching]]

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
