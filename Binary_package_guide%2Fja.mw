<languages />
{{Metadata|abstract=Portageを使用してバイナリパッケージをビルドしインストールすることもできます。このガイドではバイナリパッケージを作成し、インストールし、それらを配信するサーバーの設置方法を説明します。}}

Portage は、通常の ebuild のほかに、バイナリーパッケージの作成とインストールにも対応しています。
このガイドでは、バイナリーパッケージの作成方法、インストール方法、バイナリーパッケージサーバーのセットアップ方法について説明します。

== はじめに ==

いくつかのシステム管理者はGentooでバイナリパッケージのインストールを使用するのに多くの理由があります。

# まず第一に、管理者が複数の同様のシステムを更新された状態に維持することが可能になります。 ソースからすべてをコンパイルする必要があるのは、時間の浪費になりえます。 もし、ただひとつのシステムですべてをコンパイルして他のシステムでバイナリパッケージを再利用できれば、いくつかの似たようなシステム(そのうちいくらかには古いハードウェアがあるかもしれません)を管理するのはとても楽になるでしょう。
# 第二の理由は、安全な更新を行うことです。 ミッションクリティカルなシステムのためには、使用可能な状態で可能な限りありつづけることが重要です。 これは、すべての更新を一番最初に自分自身に行うステージングサーバーによって実現できます。 ステージングサーバが良好な状態になると、その次に更新が重要なシステムに適用することができます。 このアプローチの変化形として、同じシステムのchroot環境で更新を行い、そこで作成されたバイナリを実際のシステムで用いるという方法もあります。
# 第三の理由は、バックアップとしてです。 多くの場合、バイナリパッケージが壊れたシステム（すなわち、壊れたコンパイラ）を回復する唯一の方法です。 事前にコンパイルされたバイナリをバイナリパッケージサーバ上やローカルで持つことは、ツールチェーンが壊れた場合には大きな助けになるでしょう。
# 最後に、非常に古いシステムを更新する助けにもなります。 非常に古いシステムを更新する作業は、バイナリパッケージを使用することで大幅に楽になります。 バイナリパッケージではビルド時の依存関係を更新/インストールする必要がないので、通常は古いシステムにバイナリパッケージをインストールするのは助けになります。 また、バイナリパッケージは事前にコンパイルされているので、ビルド工程での失敗も避けられます。

このガイドでは、次のトピックに焦点を当てます。: 

* バイナリパッケージの作成方法;
* バイナリパッケージのクライアントへの配信方法;
* バイナリパッケージの使用方法;
* バイナリパッケージの管理方法.

最後に、バイナリパッケージの扱い方に関するいくつかの高度な話題を扱います。

{{Note|このガイドで使用するツールは、特に断りがなければ、すべて{{Package|sys-apps/portage}}に含まれます。}}

== バイナリパッケージを作成する ==

バイナリパッケージを作成する主な方法は3つあります：

# 通常のインストール後、{{c| quickpkg}}のアプリケーションを使用する
# {{c| emerge}}時に<code>--buildpkg (-b)</code>オプションを明示する
# Portageの<var>FEATURES</var>変数で値<code>buildpkg</code>を使用して自動的に作成する

これらの三つの方法のうちいずれをとっても<var>PKGDIR</var>変数よって指定されるディレクトリにバイナリパッケージが作成されます。 (デフォルトでは{{Path|/usr/portage/packages}}です)

=== quickpkg を利用する ===

{{c|quickpkg}}は一つ以上のdependency atom (あるいはパッケージセット)を取り、そのatomと一致するインストールされたパッケージに対するバイナリパッケージを作成します。

例えば、すべてのインストールされたGCCのバージョンのバイナリパッケージを作るには

{{RootCmd|quickpkg sys-devel/gcc}}

システム上のインストールされたすべてのパッケージに対してバイナリパッケージを作成する場合は、<code>*</code> globを以下のように使います:

{{RootCmd|quickpkg "*/*"}}

この方法には注意すべき点があります。それは、インストールされたファイルを元にしてバイナリパッケージが作成され、コンフィグファイルをパッケージに含める際に問題となるかもしれないことです。システム管理者はパッケージをインストールした後にコンフィグファイルを編集することがあります。重要な(、ひょっとしたら機密の)情報の漏洩を防止する観点から、{{c|quickpkg}}はデフォルトでは<var>CONFIG_PROTECT</var>によって保護さされたコンフィグファイルをバイナリパッケージに含めません。これらのコンフィグファイルを含めるには、<code>--include-config</code> or <code>--include-unmodified-config</code> オプションを使用してください。

=== emerge のオプションに --buildpkg を使用する ===

{{c|emerge}}でソフトウェアをインストールするときに、 Portageに<code>--buildpkg (-b)</code>オプションを通すことによってバイナリパッケージを同時に作成することもできますː

{{Emerge|params+=--buildpkg|sys-devel/gcc}}

システムにはソフトウェアをインストールせずに、バイナリパッケージのみを作成することもできます。この場合は<code>--buildpkgonly (-B)</code>オプションを通してください:

{{Emerge|params+=--buildpkgonly|sys-devel/gcc}}

しかしながら、後者のアプローチでは、すべてのビルド時依存が事前にインストールされている必要があります。

=== buildpkgをPortageの機能として実行する ===

パッケージがPortageによってインストールされるたびにバイナリパッケージを自動的に作成するもっとも一般的な方法は、以下のようにして{{Path|/etc/portage/make.conf}}で設定できる<code>buildpkg</code>機能を利用することです:

{{FileBox|filename=/etc/portage/make.conf|title=Portageのbuildpkg機能を有効化する|lang=bash|1=
FEATURES="buildpkg"
}}

この機能を有効にすると、Portageがソフトウェアをインストールするたびに、同様にバイナリパッケージも作成します。

=== いくつかのパッケージの作成を除外する ===

Portageに、いくつかの選択したパッケージやカテゴリについてバイナリパッケージを作成しないよう通知することができます。これは、<code>--buildpkg-exclude</code>オプションをemergeに渡すことにより行います:

{{RootCmd|emerge -uDN @world --buildpkg --buildpkg-exclude "virtual/* sys-kernel/*-sources"}}

これは、バイナリパッケージを利用可能にすることにほとんど、あるいはまったく利益がないパッケージについて使用できます。例として、Linuxカーネルソースパッケージやアップストリームのバイナリパッケージ({{Package|www-client/firefox-bin}}のように''-bin''で終わるもの)があります。

== バイナリパッケージホストを構成する ==

Portageは、バイナリパッケージのダウンロードのための多くのプロトコルをサポートしています: FTP、FTPS、HTTP、HTTPSおよびSSH。このことは、多くのバイナリパッケージホストの実装を可能にする余地を与えます。

しかしながら、Portageでは、バイナリパッケージを配布する"既存の枠組みから外れる"方法は提供されていません。決めた構成によって、追加のソフトウェアのインストールが必要になるでしょう。

=== ウェブベースのバイナリパッケージホスト ===

バイナリパッケージを配布する一般的なアプローチの一つは、ウェブベースのバイナリパッケージホストを作成することです。

[[lighttpd]] ({{Package|www-servers/lighttpd}})のようなウェブサーバーを使用し、{{Path|/etc/portage/make.conf}}の<var>PKGDIR</var>ディレクトリへの読み込みアクセスを提供するよう設定します。

{{FileBox|filename=/etc/lighttpd/lighttpd.conf|title=lighttpd の設定例|lang=bash|1=
# add this to the end of the standard configuration
server.modules += ( "mod_alias" )
alias.url = ( "/packages" => "/usr/portage/packages/" )
}}

そして、クライアントシステムで、それに対応する<var>PORTAGE_BINHOST</var>変数を設定します:

{{FileBox|filename=/etc/portage/make.conf|title=ウェブベースのバイナリパッケージホストを使用する|lang=bash|1=
PORTAGE_BINHOST="http://binhost.example.com/packages"
}}

=== SSH バイナリパッケージホスト ===

バイナリパッケージへのより認証されたアプローチを提供するため、SSHの使用も考慮できます。

SSHを使用する場合、LinuxのrootユーザーのSSH鍵(インストールはバックグラウンドで行われる必要があるため、パスフレーズなしのもの)をリモートのバイナリパッケージホストへの接続に使用できます。

これを実現するには、rootユーザーのSSH鍵がサーバーで許可されていることを確認してください。これは、SSHに対応したバイナリホストに接続する各マシンのために行う必要があります:

{{RootCmd|cat root.id_rsa.pub >> /home/binpkguser/.ssh/authorized_keys}}

そして、<var>PORTAGE_BINHOST</var>変数は以下のようになります:

{{FileBox|filename=/etc/portage/make.conf|title=PORTAGE_BINHOSTをSSHアクセス用に設定する|lang=bash|1=
PORTAGE_BINHOST="ssh://binpkguser@binhostserver/usr/portage/packages"
}}

{{Note|{{Path|~/.ssh/config}}にあるSSH設定ファイルをポートやユーザー名の設定に使用しないでください。この場所はPortageがクライアントへのパッケージのrsyncを試みる際には無視されます。その代わりに、すべてのオプションを<var>PORTAGE_BINHOST</var>変数に正しくセットしてください。}}

=== NFSエクスポート ===

内部ネットワークでバイナリパッケージを使用する場合、パッケージをNFSを通じてエクスポートし、クライアントでそれをマウントするのがより簡単かもしれません。

{{Path|/etc/exports}}ファイルは以下のようになります:

{{FileBox|filename=/etc/exports|title=パッケージのディレクトリをエクスポート|1=
/usr/portage/packages   2001:db8:81:e2::/48(ro,no_subtree_check,root_squash) 192.168.100.1/24(ro,no_subtree_check,root_squash)
}}

その後、クライアントでその場所をマウント可能です。{{Path|/etc/fstab}}エントリーの例は以下のようになります:

{{FileBox|filename=/etc/fstab|title=パッケージフォルダーのマウントの例|1=
binhost:/usr/portage/packages      /usr/portage/packages    nfs    defaults    0 0
}}

== バイナリーパッケージを使用する ==

バイナリパッケージが他のシステムで利用可能であるためには、いくつかの要件を満たす必要があります:

* クライアントとサーバーのアーキテクチャおよび<var>[[CHOST]]</var>は一致していなければなりません。
* バイナリパッケージのビルドに使用された<var>CFLAGS</var>および<var>CXXFLAGS</var>変数は、すべてのクライアントとの間で互換性がなければなりません。
* プロセッサ特有の命令セット機能(たとえば、MMX、SSEなど)のためのUSEフラグは注意深く選択しなければなりません: すべてのクライアントがそれらをサポートしている必要があります。

{{Important|Portageは、これらの要件が満たされているか検証することができません。これらの設定を守るのはシステム管理者の責任です。}}

次に、Portageは、バイナリパッケージがクライアントにおいて期待されるのと同じUSEフラグを用いてビルドされているかチェックします。パッケージが異なるUSEフラグの組み合わせでビルドされている場合、実行の際に{{c|emerge}}コマンドに渡されたオプションによって、Portageはそのバイナリパッケージを無視する(そしてソースベースのビルドを使用する)か、あるいは失敗します([[#バイナリーパッケージをインストールする|バイナリーパッケージをインストールする]]を参照してください)。

クライアントでは、バイナリパッケージが使用されるようにするために、いくつかの設定の変更が必要です。

== バイナリーパッケージをインストールする ==

{{c|emerge}}に渡せる、Portageにバイナリパッケージの使用について通知するオプションがいくつかあります:

{| class="table table-condensed table-striped"
|-
! scope="col" width="20%" | オプション 
! 説明
|-
| <code>--usepkg</code> <code>(-k)</code> || ローカルで使用可能な{{Path|packages}}ディレクトリ内のバイナリパッケージの利用を試みます。[[NFS]]や[[SSHFS]]でマウントされたバイナリパッケージホストを使用する場合に有用です。バイナリパッケージが見つからない場合は、通常の(ソースベースの)インストールが行われます。
|-
| <code>--usepkgonly</code> <code>(-K)</code> || <code>--usepkg (-k)</code>と似ていますが、バイナリパッケージが見つけられない場合には失敗します。
|-
| <code>--getbinpkg</code> <code>(-g)</code> || リモートのバイナリパッケージホストからバイナリパッケージをダウンロードします。バイナリパッケージが見つからない場合は、通常の(ソースベースの)インストールが行われます。
|-
| <code>--getbinpkgonly</code> <code>(-G)</code> || <code>--getbinpkg (-g)</code>と似ていますが、バイナリパッケージがダウンロードできない場合には失敗します。このオプションは、''pre-built''バイナリパッケージのみを利用したい場合に有用です。
|}

バイナリパッケージによるインストールを自動的に利用するために、適切なオプションを<var>EMERGE_DEFAULT_OPTS</var>変数に追加することができます:

{{FileBox|filename=/etc/portage/make.conf|title=自動的にバイナリパッケージを取得し、パッケージが利用可能でない場合には失敗する|lang=bash|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --getbinpkgonly"
}}

<var>EMERGE_DEFAULT_OPTS</var>変数を<code>--getbinpkg</code>という値を用いて更新しなくても、<code>--getbinpkg (-g)</code>と同様のことを自動的に実行するPortageの機能があります:

{{FileBox|filename=/etc/portage/make.conf|title=<var>FEATURES</var>変数でgetbinpkgを有効化する|lang=bash|1=
FEATURES="getbinpkg"
}}

=== パッケージをバイナリパッケージホストから取得する ===

バイナリパッケージホストを使用する場合、クライアントでは<var>PORTAGE_BINHOST</var>がセットされている必要があります。さもないと、クライアントはバイナリパッケージがどこに保管されているかわからず、Portageがそれらを取得できないという結果をもたらします。

{{FileBox|filename=/etc/portage/make.conf|title=PORTAGE_BINHOSTをセットする|lang=bash|1=
PORTAGE_BINHOST="http://binhost.example.com/packages"
}}

<var>PORTAGE_BINHOST</var>変数は、スペースで区切られたURIのリストを使用します。これにより、管理者は複数のバイナリパッケージサーバーを同時に使用できます。URIは、{{Path|Packages}}ファイルが存在するディレクトリを常に指していなければなりません。

{{Note|複数のバイナリパッケージサーバーのサポートはやや不完全です。複数のサーバーが同じパッケージバージョンのバイナリパッケージを提供している場合、最初の1つのみが考慮されます。このことは、それらのバイナリパッケージでUSE変数の設定に違いがあり、かつ後の方のバイナリパッケージのUSE変数の設定がシステムの設定と一致する場合に問題となりえます。}}

=== 改変したバイナリーパッケージを再インストールする ===

<code>--rebuilt-binaries</code>オプションを{{c|emerge}}に渡すと、パッケージがインストールされた後に再ビルドされたすべてのバイナリが再インストールされます。これは、{{c|revdep-rebuild}}や{{c|python-updater}}のような再ビルドツールがバイナリパッケージサーバー上で実行された場合に有用です。

関連するオプションの1つが<code>--rebuilt-binaries-timestamp</code>です。これにより、emergeは与えられたタイムスタンプよりも前にビルドされたバイナリパッケージを再インストールにおいて考慮しなくなります。これは、バイナリパッケージサーバーはいちから再ビルドする必要があるが、その他の点で<code>--rebuilt-binaries</code>が使用される場合に、全てのパッケージが再インストールされるのを回避するために有用です。

=== 追加のクライアント設定 ===

<code>getbinpkg</code>機能に次いで、Portageは<code>binpkg-logs</code>機能にも対応します。この機能は、成功したバイナリパッケージのインストールについてのログファイルを保持するかどうかを制御します。これは<var>PORT_LOGDIR</var>変数がセットされている場合のみ意味があり、またデフォルトでは有効化されています。

特定のパッケージやカテゴリのセットについてバイナリパッケージを除外するのと同様に、クライアントにおいて、特定のパッケージやカテゴリのセットについてバイナリパッケージのインストールを除外するように設定することができます。

これを実現するには、<code>--usepkg-exclude</code>オプションを使用します:

{{RootCmd|emerge -uDNg @world --usepkg-exclude "sys-kernel/gentoo-sources virtual/*"}}

こうした追加の設定をemergeの実行ごとに有効にするには、{{Path|make.conf}}ファイル内の<var>EMERGE_DEFAULT_OPTS</var>変数にオプションを追加します:

{{FileBox|title=emergeの設定をすべての実行で有効化する|filename=/etc/portage/make.conf|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --usepkg-exclude 'sys-kernel/gentoo-sources virtual/*'"
}}

== バイナリーパッケージを管理する ==

バイナリパッケージのリストが活発に管理されていない場合、バイナリパッケージのエクスポートや配布はストレージの無駄な消費につながります。

=== 不用なバイナリーパッケージを削除する ===

{{Package|app-portage/gentoolkit}}パッケージでは、{{c|eclean}}というアプリケーションが提供されています。これにより、ダウンロードされたソースコードファイルのようなPortageに関する可変ファイルだけでなく、バイナリパッケージも管理することができます。

以下のコマンドは、該当するebuildがインストール済みebuildのリポジトリの中にないバイナリパッケージをすべて削除します:

{{RootCmd|eclean packages}}

詳細は [[Eclean]] の記事を読んでください。

もう一つの利用可能なツールは、{{Package|app-portage/portage-utils}}パッケージの{{c|qpkg}}ツールです。しかしながら、このツールはやや設定可能性において劣ります。

''使用されていない''バイナリパッケージ(バイナリパッケージが保管されているサーバーによって使用されているかという意味で)をクリーンアップするには:

{{RootCmd|qpkg -c}}

=== Packages のファイルを管理する ===

パッケージディレクトリ内には、{{Path|Packages}}と呼ばれる[[wikipedia:Manifest_file|マニフェストファイル]]が存在します。このファイルは、パッケージディレクトリ内のすべてのバイナリパッケージのメタデータのキャッシュとして機能します。このファイルは、Portageがバイナリパッケージをディレクトリに追加するたびに更新されます。同様に、{{c|eclean}}はバイナリパッケージを削除する際にこのファイルを更新します。

なんらかの理由でパッケージが単に削除されたりパッケージディレクトリにコピーされたりした場合、または{{Path|Packages}}ファイルが破損したり削除されたりした場合には、ファイルを再作成する必要があります。これには{{c|emaint}}コマンドを利用します:

{{RootCmd|emaint binhost --fix}}

== 高度な話題 ==

=== Creating snapshots of the packages directory ===

When deploying binary packages for a large number of client systems it might become worthwhile to create snapshots of the packages directory. The client systems then do not use the packages directory directly but use binary packages from the snapshot.

Snapshots can be created using the {{Path|/usr/lib64/portage/python2.7/binhost-snapshot}} or {{Path|/usr/lib64/portage/python3.3/binhost-snapshot}} tool. It takes four arguments:

# A source directory (the path to the packages directory).
# A target directory (that must not exist).
# A URI.
# A binary package server directory.

The files from the package directory are copied to the target directory. A {{Path|Packages}} file is then created inside the binary package server directory (fourth argument) with the provided URI.

Client systems need to use an URI that points to the binary package server directory. From there they will be redirected to the URI that was given to {{c|binhost-snapshot}}. This URI has to refer to the target directory.

=== Understanding the binary package format ===

Binary packages created by Portage have the file name ending with {{Path|.tbz2}}. These files consist of two parts:

# A {{Path|.tar.bz2}} archive containing the files that will be installed on the system.
# A {{Path|xpak}} archive containing package metadata, the ebuild, and the environment file.

See {{c|man xpak}} for a description of the format.

In {{Package|app-portage/portage-utils}} some tools exists that are able to split or create {{Path|tbz2}} and {{Path|xpak}} files.

The following command will split the {{Path|tbz2}} into a {{Path|.tar.bz2}} and an {{Path|.xpak}} file:

{{Cmd|qtbz2 -s <package>.tbz2}}

The {{Path|.xpak}} file can be examined using the {{c|qxpak}} utility.

To list the contents:

{{Cmd|qxpak -l <package>.xpak}}

The next command will extract a file called {{Path|USE}} which contains the enabled USE flags for this package:

{{Cmd|qxpak -x package-manager-0.xpak USE}}

=== PKGDIR の構成 ===

The currently used format version 2 has the following layout:

{{CodeBox|title=Packages directory layout (version 2)|1=
PKGDIR
`+- Packages
 +- app-accessibility/
 {{!}}  +- pkg1-version.tbz2
 {{!}}  `- pkgN-version.tbz2
 +- app-admin/
 {{!}}  `- ...
 `- ...
}}

The {{Path|Packages}} file is the major improvement (and also the trigger for Portage to know that the binary package directory uses version 2) over the first binary package directory layout (version 1). In version 1, all binary packages were also hosted inside a single directory (called {{Path|All/}}) and the category directories only had symbolic links to the binary packages inside the {{Path|All/}} directory.

=== quickunpkg を用いて展開する ===

Zoobab wrote a simple shell tool named [https://github.com/zoobab/quickunpkg quickunpkg] to quickly unpack {{Path|tbz2}} files.


[[Category:Portage]]
