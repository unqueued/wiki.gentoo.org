<languages />
{{Metadata|abstract=Portageを使用してバイナリパッケージをビルドしインストールすることもできます。このガイドではバイナリパッケージを作成し、インストールし、それらを配信するサーバーの設置方法を説明します。}}

Next to the usual support for ebuilds, Portage supports building and installing binary packages. This guide explains how to create them, install them, and how to setup a binary package server.

== はじめに ==

いくつかのシステム管理者はGentooでバイナリパッケージのインストールを使用するのに多くの理由があります。

# まず第一に、それは、管理者が更新された同様のシステムを維持することができます。 ソースからすべてをコンパイルするために持つことは時間の浪費になることができます。 唯一のシステムは、ソースからすべてをコンパイルする必要があり、他のシステムにはバイナリパッケージを再利用する場合、いくつかの同様のシステムを維持し、おそらくそれらのいくつかは、古いハードウェアで、はるかに容易にすることができます。
# 第二の理由は、安全な更新を行うことです。 ミッションクリティカルなシステムのためには、可能な限り使用可能な滞在することが重要です。 これは、それ自体に最初にすべての更新を行い、ステージングサーバーで行うことができます。 ステージングサーバは良好な状態になると更新が次に重要なシステムに適用することができます。 このアプローチの変形は、同じシステム上のchroot環境で更新を行うと、実際のシステムであっ作成したバイナリを使用することです。
# 第三の理由は、 バックアップの通りです。 多くの場合、バイナリパッケージが壊れたシステム（すなわち、壊れたコンパイラ）を回復する唯一の方法です。 いずれかの周りにプリコンパイルされたバイナリバイナリパッケージサーバ上またはローカルを持つことは、壊れたツールチェーンの場合には大きな助けとすることができます。
# 最後に、それはまた、 非常に古いシステムの更新をサポートしています。 非常に古いシステムを更新する作業が大幅にバイナリパッケージを使用して緩和することができます。 これらはビルド時の依存関係を更新/インストールする必要はありませんので、古いシステム上でバイナリパッケージをインストールするには、通常は便利です。 彼らは事前にコンパイルされているので、バイナリパッケージもビルドプロセスの失敗を回避します。

このガイドでは、次のトピックに焦点を当てます。: 

* バイナリパッケージの作成方法;
* バイナリパッケージのクライアントへの配信方法;
* バイナリパッケージの使用方法;
* バイナリパッケージの管理方法.

終わり近くにバイナリパッケージを扱うには、いくつかのより高度なトピックがカバーされます。

{{Note|このガイドで使用するツールは、特に断りがなければ、すべて{{Package|sys-apps/portage}}に含まれます。}}

== バイナリーパッケージを作成する ==

バイナリパッケージを作成するための3つの主な方法があります：

# 通常のインストール後、<tt>quickpkg</tt>のアプリケーションを使用して、
# 明示的に使用して出てくる動作中に<code>--buildpkg (-b)</code>オプションを。
# 自動的を使用することにより<code>buildpkg</code> Portageの機能として。

これらの三つの方法のうちいずれをとっても<var>PKGDIR</var>変数よって指定されるディレクトリにバイナリパッケージが作成されます。 (デフォルトでは{{Path|/usr/portage/packages}}です)

=== quickpkg を利用する ===

{{c|quickpkg}}は一つ以上のdependency atom (あるいはパッケージセット)を取り、そのatomと一致するインストールされたパッケージに対するバイナリパッケージを作成します。

例えば、すべてのインストールされたGCCのバージョンのバイナリパッケージを作るには

{{RootCmd|quickpkg sys-devel/gcc}}

システム上のインストールされたすべてのパッケージに対して場なりパッケージを作成する場合は、<code>*</code> globを以下のように使います:

{{RootCmd|quickpkg "*/*"}}

この方法には注意すべき点があります。それは、インストールされたファイルを元にしてバイナリパッケージが作成され、コンフィグファイルをパッケージに含める際に問題となるかもしれないことです。システム管理者はパッケージをインストールした後にコンフィグファイルを編集することがあります。重要な(、ひょっとしたら機密の)情報の漏洩を防止する観点から、{{c|quickpkg}}はデフォルトでは<var>CONFIG_PROTECT</var>によって保護さされたコンフィグファイルをバイナリパッケージに含めません。これらのコンフィグファイルを含めるには、<code>--include-config</code> or <code>--include-unmodified-config</code> オプションを使用してください。

=== emerge のオプションに --buildpkg を使用する ===

{{c|emerge}}でソフトウェアをインストールするときに、 Portageに<code>--buildpkg (-b)</code>オプションを通すことによってバイナリパッケージを同時に作成することもできますː

{{Emerge|params+=--buildpkg|sys-devel/gcc}}

システムにはソフトウェアをインストールせず、バイナリパッケージのみを作成することもできます。この場合は<code>--buildpkgonly (-B)</code>オプションを通してください:

{{Emerge|params+=--buildpkgonly|sys-devel/gcc}}

The latter approach however requires all build time dependencies to be previously installed.

=== Implementing buildpkg as a Portage feature ===

The most common way to automatically create binary packages whenever a package is installed by Portage is to use the <code>buildpkg</code> feature, which can be set in {{Path|/etc/portage/make.conf}} like so:

{{FileBox|filename=/etc/portage/make.conf|title=Enabling Portage's buildpkg feature|lang=bash|1=
FEATURES="${FEATURES} buildpkg"
}}

この機能を有効にすると、Portageがソフトウェアをインストールするたびに、それは同様にバイナリパッケージを作成します。

=== Excluding creation of some packages ===

It is possible to tell Portage not to create binary packages for a select few packages or categories. This is done by passing the <code>--buildpkg-exclude</code> option to emerge:

{{RootCmd|emerge -uDN @world --buildpkg --buildpkg-exclude "virtual/* sys-kernel/*-sources"}}

This could be used for packages that have little to no benefit in having a binary package available. Examples would be the Linux kernel source packages or upstream binary packages (those ending with ''-bin'' like {{Package|www-client/firefox-bin}}).

== Setting up a binary package host ==

Portage supports a number of protocols for downloading binary packages: FTP, FTPS, HTTP, HTTPS and SSH. This leaves room for many possible binary package host implementations.

There is, however, no "out-of-the-box" method provided by Portage for distributing binary packages. Depending on the desired setup additional software will need to be installed.

=== Web based binary package host ===

A common approach for distributing binary packages is to create a web-based binary package host.

Use a web server such as [[lighttpd]] ({{Package|www-servers/lighttpd}}) and configure it to provide read access to {{Path|/etc/portage/make.conf}}'s <var>PKGDIR</var> location.

{{FileBox|filename=/etc/lighttpd/lighttpd.conf|title=lighttpd の設定例|lang=bash|1=
# add this to the end of the standard configuration
server.modules += ( "mod_alias" )
alias.url = ( "/packages" => "/usr/portage/packages/" )
}}

Then, on the client systems, configure the <var>PORTAGE_BINHOST</var> variable accordingly:

{{FileBox|filename=/etc/portage/make.conf|title=Using a web-based binary package host|lang=bash|1=
PORTAGE_BINHOST="http://binhost.genfic.com/packages"
}}

=== SSH binary package host ===

To provide a more authenticated approach for binary packages, one can consider using SSH.

When using SSH, it is possible to use the Portage Linux user's SSH key (without passphrase as the installations need to happen in the background) to connect to a remote binary package host.

To accomplish this, make sure that the Portage user's SSH key is allowed on the server. This will need to happen for each machine that will connect to the SSH capable binary host:

{{RootCmd|cat portage.id_rsa.pub >> /home/binpkguser/.ssh/authorized_keys}}

The <var>PORTAGE_BINHOST</var> variable could then look like so:

{{FileBox|filename=/etc/portage/make.conf|title=Setting up PORTAGE_BINHOST for SSH access|lang=bash|1=
PORTAGE_BINHOST="ssh://binpkguser@binhostserver/usr/portage/packages"
}}

{{Note|1=Don't use ssh's config in {{Path|~/.ssh/config}} for setting ports or username as it'll be ignored when portage tries to rsync the packages back onto the client. Instead set all the options correctly in the <var>PORTAGE_BINHOST</var> variable.}}

=== NFS exported ===

When using binary packages on an internal network, it might be easier to export the packages through NFS and mount it on the clients.

The {{Path|/etc/exports}} file could look like so:

{{FileBox|filename=/etc/exports|title=パッケージのディレクトリをエクスポート|1=
/usr/portage/packages                            2001:db8:81:e2::/48(ro,no_subtree_check,root_squash) 192.168.100.1/24(ro,no_subtree_check,root_squash)
}}

On the clients, the location can then be mounted. An example {{Path|/etc/fstab}} entry would look like so:

{{FileBox|filename=/etc/fstab|title=Entry for mounting the packages folder|1=
binhost:/usr/portage/packages      /usr/portage/packages    nfs    defaults    0 0
}}

== バイナリーパッケージを使用する ==

For binary packages to be usable on other systems they must fulfill some requirements:

* The client and server architecture and <var>[[CHOST]]</var> must match.
* The <var>CFLAGS</var> and <var>CXXFLAGS</var> variables used to build the binary packages must be compatible with all clients.
* USE flags for processor specific features (like MMX, SSE,...) have to be carefully selected; all clients need to support them.

{{Important|Portage can not validate if these requirements match. It is the responsibility of the system administrator to guard these settings.}}

Next to these, Portage will check if the binary package is built using the same USE flags as expected on the client. If a package is built with a different USE flag combination, Portage will either ignore the binary package (and use source-based build) or fail, depending on the options passed to the {{c|emerge}} command upon invocation (see [[#Installing binary packages|Installing binary packages]]).

On clients, a few configuration changes are needed in order for the binary packages to be used.

== バイナリーパッケージをインストールする ==

There are a few options that can be passed on to the {{c|emerge}} command that inform Portage about using binary packages:

{| class="table table-condensed table-striped"
|-
! Option !! Description
|-
| <code>--usepkg</code> <br /> <code>(-k)</code> || Tries to use the binary package(s) in the locally available {{Path|packages}} directory. Useful when using [[NFS]] or [[SSHFS]] mounted binary package hosts. If the binary packages are not found, a regular (source-based) installation will be performed.
|-
| <code>--usepkgonly</code> <br /> <code>(-K)</code> || Similar to <code>--usepkg (-k)</code> but fail if the binary package cannot be found. This option is useful if only ''pre-built'' binary packages are to be used.
|-
| <code>--getbinpkg</code> <br /> <code>(-g)</code> || Download the binary package(s) from a remote binary package host. If the binary packages are not found, a regular (source-based) installation will be performed.
|-
| <code>--getbinpkgonly</code> <br /> <code>(-G)</code> || Similar to <code>--getbinpkg (-g)</code> but will fail if the binary package(s) cannot be downloaded. This option is useful if only ''pre-built'' binary packages are to be used.
|}

In order to automatically use binary package installations, the appropriate option can be added to the <var>EMERGE_DEFAULT_OPTS</var> variable:

{{FileBox|filename=/etc/portage/make.conf|title=Automatically fetching binary packages and fail if not available|lang=bash|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --getbinpkgonly"
}}

There is a Portage feature that automatically implements the equivalent of <code>--getbinpkg (-g)</code> without the need for updating the <var>EMERGE_DEFAULT_OPTS</var> variable: <code>getbinpkg</code>

{{FileBox|filename=/etc/portage/make.conf|title=Enabling getbinpkg as Portage feature|lang=bash|1=
FEATURES="${FEATURES} getbinpkg"
}}

=== Pulling packages from a binary package host ===

When using a binary package host, clients need to have the <var>PORTAGE_BINHOST</var> variable set. Otherwise the client will not know where the binary packages are stored which results in Portage being unable to retrieve them.

{{FileBox|filename=/etc/portage/make.conf|title=Setting PORTAGE_BINHOST|lang=bash|1=
PORTAGE_BINHOST="http://binhost.genfic.com/packages"
}}

The <var>PORTAGE_BINHOST</var> variable uses a space-separated list of URIs. This allows administrators to use several binary package servers simultaneously. The URI must always point to the directory in which the {{Path|Packages}} file resides.

{{Note|The support for multiple binary package servers is somewhat incomplete. If several servers serve a binary package for the same package version, then only the first one will be considered. This can be problematic when these binary packages differ in their USE variable configuration and the USE variable configuration of a later binary package would match the systems configuration.}}

=== 改変したバイナリーパッケージを再インストールする ===

Passing the <code>--rebuilt-binaries</code> option to {{c|emerge}} will reinstall every binary that has been rebuilt since the package was installed. This is useful in case rebuilding tools like {{c|revdep-rebuild}} or {{c|python-updater}} are run on the binary package server.

A related option is <code>--rebuilt-binaries-timestamp</code>. It causes emerge not to consider binary packages for a re-install if those binary packages have been built before the given time stamp. This is useful to avoid re-installing all packages, if the binary package server had to be rebuild from scratch but <code>--rebuilt-binaries</code> is used otherwise.

=== Additional client settings ===

Next to the <code>getbinpkg</code> feature, Portage also listens to the <code>binpkg-logs</code> feature. This one controls if log files for successful binary package installations should be kept. It is only relevant if the <var>PORT_LOGDIR</var> variable has been set and is enabled by default.

Similar to excluding binary packages for a certain set of packages or categories, clients can be configured to exclude binary package installations for a certain set of packages or categories.

To accomplish this, use the <code>--usepkg-exclude</code> option:

{{RootCmd|emerge -uDNg @world --usepkg-exclude "sys-kernel/gentoo-sources virtual/*"}}

== バイナリーパッケージを管理する ==

Exporting and distributing the binary packages will lead to useless storage consumption if the binary package list is not actively maintained.

=== 不用なバイナリーパッケージを削除する ===

In the {{Package|app-portage/gentoolkit}} package an application called {{c|eclean}} is provided. It allows for maintaining Portage-related variable files, such as downloaded source code files, but also binary packages.

The following command will remove all binary packages that have no corresponding ebuild:

{{RootCmd|eclean packages}}

詳細は [[Eclean]] の記事を読んでください。

Another tool that can be used is the {{c|qpkg}} tool from the {{Package|app-portage/portage-utils}} package. However, this tool is a bit less configurable.

To clean up ''unused'' binary packages (in the sense of used by the server on which the binary packages are stored):

{{RootCmd|qpkg -c}}

=== Packages のファイルを管理する ===

Inside the packages directory, a file called {{Path|Packages}} exists. This file acts as a cache for the metadata of all binary packages in the packages directory. The file is updated whenever Portage adds a binary package to the directory. Similarly, {{c|eclean}} updates it when it removes binary packages.

If for some reason binary packages are simply deleted or copied into the packages directory, or the {{Path|Packages}} file gets corrupted or deleted, then it must be recreated. This is done using {{c|emaint}} command:

{{RootCmd|emaint binhost --fix}}

== Advanced topics ==

=== Creating snapshots of the packages directory ===

When deploying binary packages for a large number of client systems it might become worthwhile to create snapshots of the packages directory. The client systems then do not use the packages directory directly but use binary packages from the snapshot.

Snapshots can be created using the {{Path|/usr/lib64/portage/python2.7/binhost-snapshot}} or {{Path|/usr/lib64/portage/python3.3/binhost-snapshot}} tool. It takes four arguments:

# A source directory (the path to the packages directory).
# A target directory (that must not exist).
# A URI.
# A binary package server directory.

The files from the package directory are copied to the target directory. A {{Path|Packages}} file is then created inside the binary package server directory (fourth argument) with the provided URI.

Client systems need to use an URI that points to the binary package server directory. From there they will be redirected to the URI that was given to {{c|binhost-snapshot}}. This URI has to refer to the target directory.

=== Understanding the binary package format ===

Binary packages created by Portage have the file name ending with {{Path|.tbz2}}. These files consist of two parts:

# A {{Path|.tar.bz2}} archive containing the files that will be installed on the system.
# A {{Path|xpak}} archive containing package metadata, the ebuild, and the environment file.

See {{c|man xpak}} for a description of the format.

In {{Package|app-portage/portage-utils}} some tools exists that are able to split or create {{Path|tbz2}} and {{Path|xpak}} files.

The following command will split the {{Path|tbz2}} into a {{Path|.tar.bz2}} and an {{Path|.xpak}} file:

{{Cmd|qtbz2 -s <package>.tbz2}}

The {{Path|.xpak}} file can be examined using the {{c|qxpak}} utility.

To list the contents:

{{Cmd|qxpak -l <package>.xpak}}

The next command will extract a file called {{Path|USE}} which contains the enabled USE flags for this package:

{{Cmd|qxpak -x package-manager-0.xpak USE}}

=== PKGDIR の構成 ===

The currently used format version 2 has the following layout:

{{CodeBox|title=Packages directory layout (version 2)|1=
PKGDIR
`+- Packages
 +- app-accessibility/
 {{!}}  +- pkg1-version.tbz2
 {{!}}  `- pkgN-version.tbz2
 +- app-admin/
 {{!}}  `- ...
 `- ...
}}

The {{Path|Packages}} file is the major improvement (and also the trigger for Portage to know that the binary package directory uses version 2) over the first binary package directory layout (version 1). In version 1, all binary packages were also hosted inside a single directory (called {{Path|All/}}) and the category directories only had symbolic links to the binary packages inside the {{Path|All/}} directory.

=== quickunpkg を用いて展開する ===

Zoobab wrote a simple shell tool named [https://github.com/zoobab/quickunpkg quickunpkg] to quickly unpack {{Path|tbz2}} files.


[[Category:Portage]]
