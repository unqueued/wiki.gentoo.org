User patches provide a way for users to apply patches to ebuilds. This is useful for the rare cases of site-specific patches, but also for testing patches before sending them to upstream or to the Gentoo bug tracker. The feature is provided by many ebuilds, either by calling <code>epatch_user</code> explicitly or by inheriting an eclass and relying on its default implementation of <code>src_prepare</code>. Current Gentoo policy does not require ebuilds to use <code>epatch_user</code>, its usage is at the package maintainer's discretion. There is also a way to enable it for all ebuilds.

== Enabling /etc/portage/patches for all ebuilds ==

If an ebuild does not call <code>epatch_user</code>, and you still wish to apply user patches, you can do that using [[_/etc/portage/bashrc|/etc/portage/bashrc]] and hooks provided by [[Portage]]. Candidates are <code>post_src_unpack</code>, <code>pre_src_prepare</code> or <code>post_src_prepare</code>. The first two have the advantage of being run before <code>eautoreconf</code> (or similar) and the last two have the advantage of being run in the right directory, so only <code>pre_src_prepare</code> shares those advantages.

Normally only ebuilds inheriting <code>eutils</code> can access <code>epatch_user</code>, so you would need to test for its presence and non-eutils ebuilds wouldn't get patched at all. There's a trick of pulling in only the necessary bits from <code>eutils.eclass</code>, running <code>epatch_user</code> and dropping them.

With <code>pre_src_prepare</code> and the above trick, you don't need to play with changing directories, you can support all ebuilds whether they import <code>eutils</code> or not, and you get your patches applied as soon as possible in the chain. While it might still be better to have this feature as
part of portage, the following snippet should cover everyday needs pretty well.

{{FileBox|filename=/etc/portage/bashrc||1=<nowiki>
pre_src_prepare() {
    if ! type epatch_user > /dev/null 2>&1; then
        local names="epatch_user epatch evar_push evar_push_set evar_pop estack_push estack_pop"
        source <(awk "/^# @FUNCTION: / { p = 0 } /^# @FUNCTION: (${names// /|})\$/ { p = 1; } p { print  }" /usr/portage/eclass/eutils.eclass)
    fi

    epatch_user

    for name in $names; do
        unset $name
    done
}</nowiki>
}}

== Adding user patches ==

First you need to choose the location for your patches, depending on the package name and the versions it is intended for. You can use the following locations plus you can optionally append <code>:${SLOT}</code> to any of them.

* <code>/etc/portage/patches/${CATEGORY}/${P}</code>
* <code>/etc/portage/patches/${CATEGORY}/${PN}</code>
* <code>/etc/portage/patches/${CATEGORY}/${P}-${PR}</code>

Examples:

* <code>/etc/portage/patches/dev-lang/python</code>
* <code>/etc/portage/patches/dev-lang/python:3.4</code>
* <code>/etc/portage/patches/dev-lang/python-3.4.2</code>
* <code>/etc/portage/patches/dev-lang/python-3.3.5-r1</code>

First you need to create the directory.

{{RootCmd|mkdir -p /etc/portage/patches/dev-lang/python-3.3.5-r1}}

Now you have your directory ready and you can drop the patches
there. Only files with <code>.patch</code> suffix are considered
and they are applied in the order determined by their name.

Note that <code>epatch_user</code> attempts to apply them repeatedly
with a prefix stripped up to a different number of slashes.

== Using a git directory as a source of patches ==

Instead of creating the directory, you can create a symlink to a git
directory in your system.

{{RootCmd|mkdir -p /etc/portage/patches/sys-libs && ln -s /home/user/projects/glibc /etc/portage/patches/sys-libs/glibc}}

{{Note| When using FEATURES <code>userpriv</code>(eg. in {{Path|/etc/portage/make.conf}}), portage drops root privileges to <code>portage:portage</code> which means that the folder that the symlink points to  must be accessible by the user or group ''portage'' otherwise the patches will be silently ignored and not applied(file {{Path|epatch_user.log}} contains the string ''none''); 
ie. in our case, all the folders of {{Path|/home/user/projects/glibc}} are already accessible due to o+rx . But in the case you are root and using this path {{Path|/root/projects/glibc}} then /root, unlike /home, is inaccessible due to u+rx permissions...}}

Now, in the git directory, you can do your usual work and when you're
finished, just remove all the patches from the previous run and use <code>git format-patch</code> to create
a patchset from your branch based on another known branch.

{{Cmd|rm -f *.patch && git format-patch origin/master}}

This solution relies on the fact that only files ending with <code>.patch</code> are processed in the patch directory.

== Adding support for user patches to your ebuilds ==

It's up to the maintainer of the ebuild to decide when exactly is <code>epatch_user</code> called. It would typically be in <code>src_prepare</code> together with patches specified in the ebuild itself and the build system actions like <code>eautoreconf</code>. To best accomodate user patches that would later be suitable for submitting upstream, it should be the very first action. Note that without changing the ebuild, the user can only force it to be called earlier, not later.

As a maintainer, you often get <code>epatch_user</code> for free by inheriting an eclass. Then it's you who can either force it to be run earlier or rely on the eclass to do that. For example, <code>qt4-build.eclass</code> calls <code>epatch_user</code> after applying other patches in its implementation of <code>src_prepare</code>.

When the ebuild ends up calling <code>epatch_user</code> multiple times (e.g. because the maintainer called it explicitly but also used an eclass that calls it), the first call creates {{Path|${T}/epatch_user.log}} and subsequent calls have no effect.
