<languages />

{{Metadata|abstract=SSH (Secure Shell) est un programme de terminal chiffré qui remplace le classique outil telnet sur les systèmes d'exploitation du type Unix.}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) est un programme de terminal chiffré qui remplace [[Wikipedia:telnet|telnet]] , l'outil classique des systèmes d'exploitation du type Unix.

In addition to remote terminal access provided by the main '''ssh''' binary, the SSH suite of programs has grown to include other tools such as '''scp''' ('''s'''ecure '''c'''o'''p'''y) and '''sftp''' ('''s'''ecure '''f'''ile '''t'''ransfer '''p'''rotocol).

À l'origine, SSH n'était pas libre. Cependant, de nos jours, la mise en œuvre la plus populaire de SSH, qui constitue un standard de fait, est l'OpenSSH de [http://www.openbsd.org/ OpenBSD]. Cette version est pré-installée sur Gentoo.

== Installation ==

La plupart des déploiements ont déjà OpenSSR installé (via le paquet {{Package|net-misc/openssh}}). Ce paquet utilise les options suivantes de la variable USE :

{{USEflag|paquet=net-misc/openssh
|bindist
|hpn
|pam
|tcpd
|kerberos
|ldap
|libedit
|selinux
|skey
|static
|X
|X509
}}

Après avoir changé les options de la variable USE, n'oubliez pas de recompiler OpenSSH :

{{emerge|net-misc/openssh}}

== Exécuter OpenSSH ==

=== Serveur ===

Ajoutez openssh au niveau d'exécution par défaut si cela n'a pas encore été fait.

{{RootCmd|rc-update add sshd default}}

Démarrez le démon sshd avec la commande :

{{RootCmd|/etc/init.d/sshd start}}

Le serveur OpenSSH peut être contrôlé comme tout autre service géré par [[OpenRC]] :

{{RootCmd|/etc/init.d/sshd start
|/etc/init.d/sshd stop
|/etc/init.d/sshd restart}}

{{Note|Les connexions actives au serveur SSH ne sont pas affectées lors de l'exécution de la commande <code>/etc/init.d/sshd restart</code>.}}

== Configuration ==

=== Créer les clés ===

Pour vous fournir un shell sécurisé, des clés de chiffrage sont utilisées pour le chiffrage, le déchiffrage et les fonctionnalités de  hâchage offertes par SSH. 

Au premier démarrage du service SSH, des clés systèmes sont générées. Les clés peuvent être régénérées via la commande <code>ssh-keygen</code>.

{{Note|Remplacez  <code>SecretPassphrase</code> dans les exemples par votre propre phrase de passe.}}

Pour générer les clés utilisées par la version 1 du protocole SSH (qui n'est normalement plus activé et a été rendu obsolète au profit de la version 2 du protocole) :

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "SecretPassphrase"}}

Pour générer les clés les clés pour la version 2 du protocole SSH (algorythmes DSA et RSA):

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N "SecretPassphrase"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "SecretPassphrase"}}

=== Configuration du serveur ===

Le serveur SSH est ordinairement configuré dans le fichier {{Path|/etc/ssh/sshd_config}}, bien qu'il soit aussi possible de compléter la configuration dans le fichier {{Path|/etc/conf.d/sshd}} d'OpenRC, y compris le changement de l'emplacement du fichier de configuration. Pour une information détaillée sur la manière de configurer le serveur, reportez-vous à la [[man page|page de manuel]] de ''sshd_config''.

Vous devriez également étudier ce [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html guide] pour une configuration centrée sur la sécurité.

=== Configuration du client ===

Le client '''ssh''' et les programmes en relation ('''scp''', '''sftp''', etc.) peuvent être configuré grâce aux fichiers suivants :
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

For more information read the <code>ssh_config</code> manual:

{{Cmd|man ssh_config}}

=== Passwordless Authentication ===

Handy for [[git]] server management.

==== Client ====

On the client run the following command:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== Server ====

Make sure an account for the user exists on the server, and then place the clients' {{Path|id_rsa.pub}} file into the {{Path|~/.ssh/authorized_keys}} file.

==== Single Machine Testing ====

The above procedure can be tested out locally:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

== Troubleshooting ==

There are 3 different levels of debug modes that can help troubleshooting issues. With ''-v'' ssh prints debugging messages about its progress.  This is helpful in debugging connection, authentication, and configuration problems.  Multiple -v options increase the verbosity.  The maximum is 3.

{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== Death of Long-lived Connections ===

Many internet access devices perform network address translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network.  Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, though the '''ssh''' client program has not exited.

Pour résoudre ce problème, les clients OpenSSH et les serveurs peuvent être configurés pour envoyer un message invisible , ou  'keep alive (maintenir en vie)', qui vise à maintenir et à confirmer l'état vivant du lien. 
* Pour activer keep alive '''pour tous les clients se connectant à votre serveur local ''', définissez ''ClientAliveInterval 30'' (ou une autre valeur en secondes) dans le fichier  {{Path|/etc/ssh/sshd_config}}.
* Pour activer  keep alive '''pour tous les serveurs auxquels se connecte votre client local''', définissez ''ServerAliveInterval 30'' (ou une autre valeur en secondes) dans le fichier  {{Path|/etc/ssh/ssh_config}}.

=== X11 Forwarding Not Forwarding or Tunneling! ===

<b>Problem</b>: After you have made the necessary changes to the configuration files for permitting X11 Forwarding, you find X applications are executing on the server and are not being forwarded to the client.

<b>Solution</b>: What is likely occurring during SSH login into the remote server or host, the <code>$DISPLAY</code> variable is either being unset or is being set after the SSH session sets it.

Test for this scenario as follows after logging in remotely:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

You should get something similar to "localhost:10.0" or "localhost2.local:10.0" using server side <code>X11UseLocalhost no</code> setting.  If you're getting the usual ":0.0", check to make sure you are not unsetting or initializing the <code>$DISPLAY</code> variable within {{Path|$HOME/.bash_profile}}. If so, remove or comment your custom initialization of <code>$DISPLAY</code> or prevent {{Path|bash_profile}} from executing during SSH login:

{{Cmd|ssh -t me@localhost2 bash --noprofile}}

A trick would be to alias this within {{Path|bashrc}}.

== Intrusion Prevention ==
ssh is a commonly attacked service.  [[sshguard]] & [[fail2ban]] monitor logs and black list remote users who have repeatedly failed to login.

== See also ==
* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo documentation, have a look at all 3 parts.
* [[Keychain|Gentoo Linux Keychain Guide]]
* [[autossh]] - Detects when SSH connections drop and auto-reconnects.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
