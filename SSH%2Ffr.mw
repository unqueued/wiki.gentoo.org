<languages />

{{Metadata|abstract=SSH (Secure Shell) est un programme de terminal chiffré qui remplace le classique outil telnet sur les systèmes d'exploitation du type Unix.}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) est un programme de terminal chiffré qui remplace [[Wikipedia:telnet|telnet]] , l'outil classique des systèmes d'exploitation du type Unix.

En plus de l'accès par terminal distant procuré par le binaire principal <tt>ssh</tt> la suite de programmes SSH s'est développée pour inclure d'autres outils tels que <tt>scp</tt> ('''S'''ecure '''C'''opy '''P'''rogram, pour ''programme de copie sécurisée'') et <tt>sftp</tt> ('''S'''ecure '''F'''ile '''T'''ransfer '''P'''rotocol, pour ''protocole de transfert de fichier sécurisé'').

À l'origine, SSH n'était pas libre. Cependant, de nos jours, la mise en œuvre la plus populaire de SSH, qui constitue un standard de fait, est l'OpenSSH de [http://www.openbsd.org/ OpenBSD]. Cette version est pré-installée sur Gentoo.

== Installation ==

=== Vérifier l'installation ===

Most deployments of Gentoo Linux will already have OpenSSH installed on the system. This can be checked by running the {{c|ssh}} command. If it is installed a usage statement should be printed:

{{Cmd|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

If no usage statement is printed {{c|ssh}} is either corrupted or not installed. It is also possible that a user is simply rebuilding OpenSSH to include a new USE configuration. Whatever the case, proceed on to view possible USE settings.

=== Options de la variable USE ===

{{USEflag|package=net-misc/openssh}}

=== Emerge ===

Une fois les paramètres USE changés, n'oubliez pas d'installer (ou de recompiler) OpenSSH.

{{emerge|net-misc/openssh|params+=--changed-use}}

== Configuration ==

=== Créer des clés ===

Pour vous fournir un shell sécurisé, des clés de chiffrage sont utilisées pour le chiffrage, le déchiffrage et les fonctionnalités de hâchage offertes par SSH.

Au premier démarrage du service SSH, des clés systèmes seront générées. Les clés peuvent être (ré)générées via la commande <tt>ssh-keygen</tt>.

Pour générer les clés utilisées par la version 1 du protocole SSH (qui n'est normalement plus activé et a été rendu obsolète au profit de la version 2 du protocole), utilisez :

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "PassphraseSecrete"}}

Pour générer les clés les clés pour la version 2 du protocole SSH (algorythmes DSA et RSA):

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N "PassphraseSecrete"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "PassphraseSecrete"}}

=== Configuration du serveur ===

Le serveur SSH est ordinairement configuré dans le fichier {{Path|/etc/ssh/sshd_config}}, bien qu'il soit aussi possible de compléter la configuration dans le fichier {{Path|/etc/conf.d/sshd}} d'OpenRC, y compris le changement de l'emplacement du fichier de configuration. Pour une information détaillée sur la manière de configurer le serveur, reportez-vous à la [[man page|page de manuel]] de ''sshd_config''.

Les utilisateurs cherchant une configuration centrée sur la sécurité devraient se référer [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html guide de Sven].

=== Configuration du client ===

Le client <tt>ssh</tt> et les programmes en relation (<tt>scp</tt>, <tt>sftp</tt>, etc.) peuvent être configuré grâce aux fichiers suivants :
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

Pour une information plus complète reportez-vous à la page de manuel {{Path|ssh_config}}:

{{Cmd|man ssh_config}}

=== Authentification sans mot de passe ===

Pratique pour la gestion du serveur [[git]].

==== Client ====

Sur votre client, exécutez :

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! ).       |
+-----------------+
</pre>}}

==== Serveur ====

Make sure an account for the user exists on the server, and then place the clients' {{Path|id_rsa.pub}} file into the server's {{Path|~/.ssh/authorized_keys}} file in the user's home directory.

==== Single machine testing ====

La procédure mentionnée ci-dessus peut être testée localement :

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

=== Intrusion prevention ===

SSH is a commonly attacked service. Tools such as [[sshguard]] and [[fail2ban]] monitor logs and black list remote users who have repeatedly attempted, yet failed to login. Utilize them as needed to secure a frequently attacked system.

== Usage ==

=== Services ===

==== OpenRC ====

Add the OpenSSH daemon to the default runlevel:

{{RootCmd|rc-update add sshd default}}

Start the sshd daemon with:

{{RootCmd|rc-service sshd start}}

The OpenSSH server can be controlled like any other [[OpenRC]]-managed service:

{{RootCmd
|rc-service sshd start
|rc-service sshd stop
|rc-service sshd restart
}}

{{Note|Active SSH connections to the server remain unaffected when issuing {{c|rc-service sshd restart}}.}}

==== Systemd ====

To have the OpenSSH daemon start when the system starts:

{{RootCmd|systemctl enable sshd.service|output=<pre>
Created symlink from /etc/systemd/system/multi-user.target.wants/sshd.service to /usr/lib64/systemd/system/sshd.service.
</pre>}}

To start the OpenSSH daemon now:

{{RootCmd|systemctl start sshd.service}}

To check if the service has started:

{{RootCmd|systemctl status sshd.service}}

== Troubleshooting ==

There are 3 different levels of debug modes that can help troubleshooting issues. With the <code>-v</code> option SSH prints debugging messages about its progress. This is helpful in debugging connection, authentication, and configuration problems. Multiple <code>-v</code> options increase the verbosity. Maximum verbosity is three levels deep.

{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== Death of long-lived connections ===

Many internet access devices perform Network Address Translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network. Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, even though the {{c|ssh}} client program has not exited.

In order to resolve the issue, OpenSSH clients and servers can be configured to send a 'keep alive', or invisible message aimed at maintaining and confirming the live status of the link:

* To enable keep alive ''for all clients connecting to your local server'', set <code>ClientAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/sshd_config}} file.
* To enable keep alive ''for all servers connected to by your local client'', set <code>ServerAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/ssh_config}} file.

=== X11 forwarding, not forwarding, or tunneling ===

'''Problem''': After having made the necessary changes to the configuration files for permitting X11 forwarding, it is discovered X applications are executing on the server and are not being forwarded to the client.

'''Solution''': What is likely occurring during SSH login into the remote server or host, the <var>DISPLAY</var> variable is either being unset or is being set ''after'' the SSH session sets it.

Test for this scenario perform the following after logging in remotely:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

The output should be something similar to <code>localhost:10.0</code> or <code>localhost2.local:10.0</code> using server side <code>X11UseLocalhost no</code> setting. If the usual <code>:0.0</code> is not displayed, check to make sure the <var>DISPLAY</var> variable within {{Path|~/.bash_profile}} is not being unset or re-initializing. If it is, remove or comment out any custom initialization of the <var>DISPLAY</var>variable to prevent the code in {{Path|~/.bash_profile}} from executing during a SSH login:

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

Be sure to substitute <code>larry</code> in the command above with the proper username.

A trick that works to complete this task would be to define an alias within the users' {{Path|~/.bashrc}} file.

== See also ==

* [[Keychain|Gentoo Linux Keychain Guide]]
* [[autossh]] - Detects when SSH connections drop and auto-reconnects.
* [[SCP]] - A Secure Copy Program that comes with the SSH suite.
* [[SFTP]] - Secure File Transfer Protocol client that comes with the SSH suite.
* [[SSHFS]] - A FUSE based SSH powered mount client.

== External resources ==

* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo documentation, have a look at all 3 parts.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
