This article is intended for porters who want to add SharkBait support for a device that's not currently supported. In this article, you will be given the general idea on how to adapt parts that are crucial for SharkBait system to work on a device. The following components will be covered:

* Preinit. [https://github.com/KireinaHoro/preinit repository home]
* SharkBait-setup. [https://github.com/KireinaHoro/sharkbait-setup repository home]
* Kernel sources. (<code>sys-kernel/${BOARD_NAME}-sources</code>) [https://github.com/KireinaHoro/android/tree/master/sys-kernel/angler-sources example]
* Kernel headers. (<code>sys-kernel/linux-headers-${BSP_VERSION}</code>) [https://github.com/KireinaHoro/android/tree/master/sys-kernel/liunx-headers example]

__TOC__

== Preinit ==

Preinit performs early initialization of the device to load the Gentoo init (OpenRC as of current). The following directory structure is required for a supported device (<code>angler</code> as an example here) is as follows:

<pre>angler
├── bootimg.cfg
├── initramfs
│   ├── init
│   └── (other contents in initramfs)
└── Makefile</pre>
* <code>bootimg.cfg</code> defines offsets for kernel and initramfs, as well as kernel commandline options. Porters should adapt what they get when dissecting <code>boot.img</code> for their device and make the following modifications:
** remove <code>bootsize</code> option so that abootimg does not complain about a boot.img bigger than the original one (though this is unlikely to be the case).
** add <code>androidboot.selinux=permissive</code> to the boot commandline to set SELinux to permissive.
* <code>initramfs</code> holds the minimal initramfs that correctly mounts filesystems and <code>switch_root</code> to load Gentoo init.
** <code>initramfs/init</code> is required. The <code>angler</code> init is a shell script that does the necessary jobs, but any executable file should work.
** Mind the permissions: kernel won't be able to execute an <code>init</code> that's not executable, which would result in a boot failure.
* <code>Makefile</code> enables processing the <code>initramfs</code> programmatically before <code>installkernel</code> packs it up.
** This will be useful for things like <code>busybox</code> installation, runtime-specific things, etc.
** <code>installkernel</code> will call <code>make</code> in the device directory (<code>angler</code> in the directory hierarchy). Read the example <code>Makefile</code> so that you handle the paths correctly.

== SharkBait-setup ==

SharkBait-setup handles the setup of the Android container. The following directory structure is required for a supported device (<code>angler</code> as an example here) is as follows:

<pre>angler
├── disable_encryption.sh
├── fstab.android
├── patches
│   ├── fstab.angler.patch
│   └── (other patches to apply to Android rootfs)
└── serial-consoles (if any)</pre>
* <code>disable_encryption.sh</code> is ran on the helper workstation and disables encryption for the partition where the Gentoo root will reside in.
** For devices that does not support encryption or have the Gentoo root in a partition that's not encrypted, this script should just print a notice and return 0.
** '''Warn users about data wipe and wait for 10 seconds for a Ctrl-C!'''
* <code>fstab.android</code> is appended to the Gentoo fstab and contain mountpoints that are necessary for Android.
** Android's <code>vold</code> should not handle any internal mounts any more (external mounts such as OTG or SD card may still be managed by <code>vold</code>); make sure all required mounts are present.
** It is strongly recommended to mount to <code>/var/lib/android</code> and then bind into the LXC rootfs for ease when accessing the Android partitions and extra security. Refer to the example <code>fstab.android</code> file for <code>angler</code> to get a better understanding of this.
* <code>patches</code> holds patches that will be applied to the real Android rootfs via <code>patch -p0</code>, extracted from the current boot.img present on the device.
** Disable all partition mounts in <code>fstab.$DEVICE.patch</code> or equivalent file.
** Put more patches that are required here, such as patches on <code>init.rc</code> to properly handle cgroups issues introduced by containerization. Refer to <code>init.rc.patch</code> for <code>angler</code> for more information on this topic.
* <code>serial-consoles</code> defines serial consoles that are available on the device, if there is any. This file will be appended to <code>/etc/inittab</code>.

== Kernel sources ==

The kernel source package of a device packages the source tree from the vendor. A ebuild for <code>sys-kernel/${BOARD_NAME}-sources</code> is required; read the [https://github.com/KireinaHoro/android/blob/master/sys-kernel/angler-sources/angler-sources-3.10.73.ebuild ebuild for <code>angler-sources</code>] for reference. Only the package name, version, and the git repo URL would require adapting; the other parts of the ebuild do not need modification.

The following modifications on the source tree are required for a working kernel:

* Apply [https://github.com/KireinaHoro/android_kernel_huawei_angler/commit/be819350157b2aadcbc8db7001119130f0e51bad.patch this patch] on the tree to enable <code>installkernel</code> function.
* Supply a valid <code>defconfig</code> with LXC features enabled. See [https://github.com/KireinaHoro/android_kernel_huawei_angler/blob/sharkbait/arch/arm64/configs/sharkbait_angler_defconfig the example for angler] and [https://wiki.gentoo.org/wiki/LXC#Kernel_options_required LXC on Gentoo Wiki] for reference.
* Make sure that the kernel '''compiles''' and '''boots correctly''' with (relatively) new compilers from Gentoo.
* Regularly merge upstream changes.

== Kernel headers ==

Kernel headers that match the device kernel source ease the process of compiling cross-compile toolchains for Android targets. The [https://github.com/KireinaHoro/android/blob/master/sys-kernel/linux-headers/linux-headers-3.10.73.ebuild ebuild for <code>angler</code>] should be a clear example, with only the need to modify the version number and the git repo URL.

== Test the port ==

Make sure the port boots correctly. You may need a serial console to debug boot failures. Also, check that all the hardware functions work properly (camera, bluetooth, etc.); if that's not the case point it out when submitting a merge request so that we can look into the issue. Happy hacking!
