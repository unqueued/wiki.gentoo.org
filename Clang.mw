{{InfoBox stack
|{{InfoBox homepage|http://clang.llvm.org/|header=true}}
|{{InfoBox wikipedia}}
}}

{{Package|sys-devel/clang}} is a compiler for C family of languages using LLVM as a backend and optimizer. It aims to be GCC compatible yet stricter.

== Before using ==

=== Common notes ===

Please note that although clang tries to be compatible with gcc, not all packages build correctly with it. Although some of them simply fail to build, there are also cases when packages build fine but ''fail horribly'' when run.

The main place for looking up known failures with clang is {{Bug|408963}}. If you hit one not reported on our Bugzilla already, please open a new bug report and make it block 408963.

If you'd like to try to build parts of your system with clang, the first good thing to do would be enabling tests via ''FEATURES=test''. Note that many developers don't actually care about their own tests, and as a result you are likely to get many false positives. Because of this, you may need to compare the results with a gcc build.

=== Common issues ===

==== Use of GNU extensions without proper -std= ====

Some packages tend to use GNU extensions in their code without specifying ''-std='' appropriately. GCC allows that usage, yet clang disables some of more specific GNU extensions by default.

If a particular package relies on such extensions being available, you will need to append the correct ''-std='' flag to it:

* ''-std=gnu89'' for C89/C90 with GNU extensions,
* ''-std=gnu99'' for C99 with GNU extensions,
* ''-std=gnu++98'' for C++:1998 with GNU extensions.

A common symptom of this problem are multiple definitions of inline functions like this:

    /usr/bin/x86_64-pc-linux-gnu-ld: error: ../mpi/.libs/libmpi.a(mpi-bit.o): multiple definition of '_gcry_mpih_add'
    /usr/bin/x86_64-pc-linux-gnu-ld: ../mpi/.libs/libmpi.a(mpi-add.o): previous definition here
    /usr/bin/x86_64-pc-linux-gnu-ld: error: ../mpi/.libs/libmpi.a(mpi-bit.o): multiple definition of '_gcry_mpih_add_1'
    /usr/bin/x86_64-pc-linux-gnu-ld: ../mpi/.libs/libmpi.a(mpi-add.o): previous definition here
    /usr/bin/x86_64-pc-linux-gnu-ld: error: ../mpi/.libs/libmpi.a(mpi-bit.o): multiple definition of '_gcry_mpih_cmp'
    /usr/bin/x86_64-pc-linux-gnu-ld: ../mpi/.libs/libmpi.a(mpi-add.o): previous definition here
    /usr/bin/x86_64-pc-linux-gnu-ld: error: ../mpi/.libs/libmpi.a(mpi-bit.o): multiple definition of '_gcry_mpih_sub'
    /usr/bin/x86_64-pc-linux-gnu-ld: ../mpi/.libs/libmpi.a(mpi-add.o): previous definition here

This is because clang uses C99 inline rules by default which do not work with gnu89 code. To work around it, you most likely have to pass ''-std=gnu89''.

== Using clang in Gentoo ==

=== Using clang with portage ===

Although Gentoo package tree is not designed to be used with compiler other than GCC, clang can be enforced on most of the packages through ''CC'' and ''CXX'' variables.

Please note, however, that many of Gentoo packages still don't build with clang and a few don't work correctly after being built. That's why we suggest using {{Path|/etc/portage/env}} file to enable the use of clang per-package.

In order to do that, first create a new environment override to use:

{{FileBox|filename=/etc/portage/env/clang|title=Environment override named ''clang''|<pre>
CC=clang
CXX=clang++
</pre>}}

Then you can enable use of clang for packages using ''[[:/etc/portage/env|/etc/portage/package.env]]'' file:

{{FileBox|filename=/etc/portage/package.env|title=Enabling ''clang'' for ''app-foo/bar'' and ''app-bar/baz''|
app-foo/bar clang
app-bar/baz clang
}}

If you have {{Package|app-portage/flaggie}} installed, the {{Path|/etc/portage/package.env}} file could be modified using:

{{RootCmd|flaggie app-foo/bar app-bar/baz +clang}}

=== Enabling link-time optimizations ===

The link-time optimization feature defers optimizing the resulting executables to linking phase. This can result in better optimization of packages but isn't standard behavior in Gentoo yet. In order to use LTO we must first install LLVM with the gold linker plugin so clang can pass the -plugin flag to the linker. 

Set the gold flag in the llvm package so portage knows to include the gold plugin.

{{RootCmd
|echo /etc/portage/package.use sys-devel/llvm gold
}}


Now emerge llvm and check the use flags to make sure your changes went into effect.

{{RootCmd|emerge sys-devel/llvm|output=<pre>

These are the packages that would be merged:

Calculating dependencies... done!
[ebuild     U  ] sys-devel/llvm-3.8.0-r3:0/3.8.0::gentoo [3.8.0-r2:0/3.8.0::gentoo] USE="clang gold libffi python static-analyzer xml -debug -doc -libedit -lldb -multitarget -ncurses -ocaml {-test}" ABI_X86="32 (64) (-x32)" PYTHON_TARGETS="python2_7" VIDEO_CARDS="-radeon" 0 KiB      

Total: 1 package (1 upgrade), Size of downloads: 0 KiB

Would you like to merge these packages? [Yes/No]
</pre>
}}


We must set gold as the default linker since it allows clang to pass the -plugin flag. By default, Gentoo uses the bfd linker. As of July 2016, the bfd linker bundled with binutils does not support passing the -plugin as seen below.

{{RootCmd|/usr/bin/ld -plugin|output=<pre>
/usr/bin/ld: unrecognized option '-plugin'
/usr/bin/ld: use the --help option for usage information
</pre>
}}


Using the sys-devel/binutils-config package, we'll set ld to default to ld.gold instead of ld.bfd.

{{RootCmd|binutils-config --linker ld.gold|output=<pre>
* Setting default linker to ld.gold for x86_64-pc-linux-gnu-2.25.1 ...
</pre>
}}


Once ld is set to gold, check the -plugin flag to see if it works.

{{RootCmd|/usr/bin/ld -plugin|output=<pre>
/usr/bin/ld: -plugin: missing argument
/usr/bin/ld: use the --help option for usage information
</pre>
}}


Great! It works. If you want to switch back to the default linker change the command from ld.gold to ld.bfd.

{{RootCmd|binutils-config --linker ld.bfd|output=<pre>
* Setting default linker to ld.bfd for x86_64-pc-linux-gnu-2.25.1 ...
</pre>
}}


Now that we're done setting up the gold linker, we can create a new environment override profile for LTO enabled clang. We do this by passing the -flto flag to clang which in turn passes the -plugin flag to the linker.<ref>http://llvm.org/docs/GoldPlugin.html</ref> You need to set optimization flags when linking because that's where clang needs them.

{{FileBox|filename=/etc/portage/env/clang-lto|title=Environment override named ''clang-lto''|
<nowiki>
CC="clang"
CXX="clang++"
CFLAGS="${CFLAGS} -flto"
CXXFLAGS="${CXXFLAGS} -flto"
LDFLAGS="${LDFLAGS} -Ox" #please use whichever optimization level you're comfortable with
</nowiki>
}}


Now you can set ''package.env'' overrides using LTO enabled clang.

{{FileBox|filename=/etc/portage/package.env|title=Enabling ''clang'' for ''app-foo/bar'' and ''app-bar/baz''|
app-foo/bar clang-lto
app-bar/baz clang-lto
}}

=== Using clang with distcc ===

In order to use clang on distcc client, additional symlinks have to be created in ''/usr/lib*/distcc/bin'':

{{RootCmd|ln -s /usr/bin/distcc /usr/lib/distcc/bin/clang|ln -s /usr/bin/distcc /usr/lib/distcc/bin/clang++}}

=== Using clang with ccache ===

Automatic with `>=ccache-3.9-r3`, when `clang` is already installed at emerge time.

[[Category:Core system]]
