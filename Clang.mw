{{Package|sys-devel/clang}} is a compiler for C family of languages using LLVM as a backend and optimizer. It aims to be GCC compatible yet stricter.

== Using clang with portage ==

Although Gentoo package tree is not designed to be used with compiler other than GCC, clang can be enforced on most of the packages through ''CC'' and ''CXX'' variables.

Please note, however, that many of Gentoo packages still don't build with clang and a few don't work correctly after being built. That's why we suggest using ''/etc/portage/env'' file to enable the use of clang per-package.

In order to do that, first create a new environment override to use:

{{File|/etc/portage/env/clang|Environment override named ''clang''|<pre>
CC=clang
CXX=clang++
</pre>}}

Then you can enable use of clang for packages using ''[[:/etc/portage/env|/etc/portage/package.env]]'' file:

{{File|/etc/portage/package.env|Enabling ''clang'' for ''app-foo/bar'' and ''app-bar/baz''|<pre>
app-foo/bar clang
app-bar/baz clang
</pre>}}

If you have {{Package|app-portage/flaggie}} installed, the ''/etc/portage/package.env'' file could be modified using:

{{RootCmd|flaggie app-foo/bar app-bar/baz +clang}}

== Enabling link-time optimizations ==

The ''link-time optimization'' feature defers optimizing the resulting executables to linking phase. This can result in better optimization of packages but is unsupported in Gentoo yet, and many packages simply fail to build.

When using LTO, clang compiles units into LLVM byte-code rather than machine code. In order to support linking such object files, the [[gold]] linker must be installed and set as the default linker, as it does support plugins.

Similarly, ''ar'' needs plugin support as well. Sadly, binutils ar doesn't support passing '--plugin'' option before the actual command. Thus, we need to create a wrapper for it:

{{File|/usr/local/bin/clang-ar|ar wrapper for LLVM plugin|<pre>
#!/bin/sh
firstarg=${1}
shift

exec /usr/bin/ar "${firstarg}" --plugin /usr/lib/llvm/LLVMgold.so "${@}"
</pre>}}

If that's done, you can create a new environment override profile for LTO-enabled clang:

{{File|/etc/portage/env/clang-lto|Environment override named ''clang-lto''|<pre>
CC='clang'
CXX='clang++'
CFLAGS="${CFLAGS} -O4"
CXXFLAGS="${CXXFLAGS} -O4"
LDFLAGS="${LDFLAGS} -Wl,-plugin,/usr/lib/llvm/LLVMgold.so"
AR='/usr/local/bin/clang-ar'
RANLIB=':'
</pre>}}

Note that the link-time optimizations were indirectly enabled here via ''-O4''. If you don't want to enable other optimizations enforced by ''-O3'', please use ''-flto'' instead. You may also need to adjust the libdir path.

== Using clang with distcc ==

In order to use clang on distcc client, additional symlinks have to be created in ''/usr/lib*/distcc/bin'':

{{RootCmd|ln -s /usr/bin/distcc /usr/lib/distcc/bin/clang|ln -s /usr/bin/distcc /usr/lib/distcc/bin/clang++}}

[[Category:Core system]]
