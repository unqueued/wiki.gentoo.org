<languages />
키보드 배치는 키보드의 스캔코드를 프로그램에 보낼 문자에 대응합니다. 키보드 배치는 또한 키 자체의 문자를 출력하지 않지만 다음 키 입력의 출력을 수정하는 복잡한 전달 과정을 수행할 수도 있으며 이를 데드키라고 합니다. QWERTY 키보드가 ASCII 집합 외부에 있는 문자를 입력할 수 있는 것처럼 비 QWERTY 키보드를 지원하려면 적당한 키보드 배치 설정이 필요합니다.

== Text-mode ==

=== OpenRC ===

문서로 설명이 잘 되어 있지만 상당히 이해하기 힘든 {{Path|/etc/conf.d/keymaps}}  파일을 편집하십시오. 이 파일에는 <var>keymap</var> 변수의 값 {{Path|/usr/share/keymaps/i386/qwerty/}}에 나타나는 적당한 키보드 배치를 설정해야 하며 추가로 <var>extended_keymaps</var>  변수의 값 {{Path|/usr/share/keymaps/i386/include/}} 디렉터리와 같은 적당한 포함 디렉터리 경로에서 추가적으로 파일을 설정할 수 있음을 보여줍니다.

{{FileBox|filename=/etc/conf.d/keymaps|title=예제 설정|1=
keymap="us"
extended_keymaps=""
}}

마지막으로 부팅 실행 레벨에  {{Path|/etc/init.d/keymaps}}를 추가하십시오.

{{RootCmd|rc-update add keymaps boot}}

{{Note|터미널에 비 ASCII 문자를 표시하려면 {{Path|/etc/conf.d/consolefont}}를 편집해야 할 수도 있습니다.}}

==== 개별 키보드 배치 ====

개별 키 배치를 만들려면 {{Path|/usr/share/keymaps}}의 제공 키 배치를 살펴보십시오:

{{Cmd|vi <keymap file>.map
|gzip <keymap file>.map}}

{{RootCmd|mv <keymap file>.map /usr/share/keymaps/<some directory>}}

여기에 제시한 예제는 U.S. QWERTY 키 배치에서 정방향 슬래시와 어퍼스트로피 키를 서로 바꾼 점만 제외하고 모든 면이 동일한 개별 키 배치입니다:

{{FileBox|filename=/usr/share/keymaps/i386/qwerty/swap_slash_apostrophe.map.gz|title=예제 키 배치|1=
include "us.map"
 
keycode  40 = slash            question
keycode  53 = apostrophe       quotedbl
}}

{{Warning|키 코드는 시스템별로 다릅니다.}}

키에 할당한 키 코드를 찾으려면 {{c|dumpkeys}} 출력 내용을 보십시오:

{{Cmd|dumpkeys -l}}

위 명령으로 키를 찾지 못했다면 다음 명령을 실행하십시오:

{{Cmd|showkey}}

그냥 키를 누르면 키 코드가 나타납니다. 과정이 끝났다면 몇 초 기다리시면 {{c|showkey}} 프로그램이 닫힙니다.

=== systemd ===

[[systemd/ko|systemd]]는 {{Path|/etc/vconsole.conf}} 설정 파일을 활용하며 터미널 글꼴과 키보드 배치 설정을 넣습니다만 OpenRC에 들어있는 고급 설정 몇가지가 빠져있습니다. OpenRC에서 지원하는 관련 변수에 따라 올바른 값을 동일하게 넣어야합니다.

{{FileBox|filename=/etc/vconsole.conf|title=예제 설정|1=
KEYMAP=pl2
FONT=LatArCyrHeb-16
}}

== X11 ==

최신 X11 프로그램은 보통 libXklavier를 사용하며("klavier"는 "키보드"의미를 지닌 독일어) {{c|setxkbmap}}으로 설정할 수 있습니다. 게다가 X11에서는 가상 터미널에서 지원하는 키보드 배치보다 더 많은 키보드 배치 셋을 지원합니다. 적당한 데스크톱 환경에서는 자체적으로 자체 키보드 배치를 관리한다는 점을 알아두어야합니다. 앞에서 언급한 프로그램이 직접 활용할 필요는 없어졌지만, 키보드 배치 관리 프로그램에 문제가 있거나 기능이 빠졌을 경우 이를 다루는 일이 간단해질 수 있습니다.

=== KDE4 ===

{{Path|시스템 설정}}을 열고 {{Path|입력 장치}} 모듈을 찾아보십시오.

=== 일반 데스크톱 환경 ===

{{Path|~/.xprofile}}을 편집하고 해당 위치에서 {{c|setxkbmap}}를 부르거나 Xorg 설정 파일에서 키보드를 설정하십시오(예제는 [[#.EC.9D.BC.EB.B0.98_X11|하단 참조]]).

{{Note|그놈 3 최근 버전에서는 더이상 libXklavier를 활용하지 않으므로 이 설정은 더이상 동작하지 않거나 그놈 설정을 대체합니다. 이와 비슷하게 다른 데스크톱 환경에서도 초기화 또는 키보드 배치 변경에 있어 libXklavier 설정을 덮어쓸 수도 있습니다.}}

{{Warning|{{Path|~/.xprofile}}은 디스플레이 관리자에서 로깅할 때 이 파일을 지원할 경우에만 참고하는 비표준 파일이며(GDM, KDM, LightDM, LXDM, SDDM에서만 시험함), 모든 일반 배포판에서 이 파일을 지원하는 것 같지만 개별 배포판에 한정하는 것 같습니다.}}

=== lxpanel의 키보드 배치 처리자 ===

{{Package|lxde-base/lxpanel}} 에서는 키보드 배치 처리자를 패널 항목으로 제공합니다.

[[File:Lxpanel_kyboard_layout_handler.png]]

=== 일반 X11 ===

==== setxkbmap 활용 ====

여기서 바꾼 설정은 임시적이며 사용자가 X11을 다시 시작하기 전까지 지속됩니다. 보통 X 서버를 시작할 때마다 적당한 매개 변수를 설정하는 시작 스크립트에서 명령을 호출할 수 있습니다.

기존 설정을 요청한 다음:

{{Cmd|setxkbmap -query}}

키보드 배치를 설정하시고:

{{Cmd|setxkbmap lv}}

키보드 배치, 형식, 모델을 설정하십시오:

{{Cmd|setxkbmap lv apostrophe -model logiultrax}}

Finding the supported layouts and variants or values of other xkb properties does not appear to be possible with this application, although most of them are listed in the {{Path|/usr/share/X11/xkb/rules/base.lst}} file. To get the most complete list seems to be possible only by examining other files in {{Path|/usr/share/X11/xkb/}}. For sake of sanity, it is advised to use of a proper desktop environment with its own keyboard layout management.

==== 시스템 범위 설정 배치 및 단축키 활용 ====

This method is recommended for configurations without desktop environments, in other words just X11 with a window manager. Create the {{Path|[[Xorg/Guide#Configuring_the_keyboard|10-keyboard.conf]]}} file and configure it with the appropriate keyboard settings.

{{FileBox|filename=/etc/X11/xorg.conf.d/10-keyboard.conf|title=US 및 브라질 키보드 배치 예제|lang=xorg_conf|1=
Section "InputClass"
    Identifier "keyboard-all"
    Driver "evdev"
    Option "XkbLayout" "us,br"
    Option "XkbVariant" ",abnt2"
    Option "XkbOptions" "grp:shift_toggle,grp_led:scroll"
    MatchIsKeyboard "on"
EndSection
}}

The example above configures US and Brazilian keyboard layouts with {{Key|Left Shift}}+{{Key|Right Shift}} as shortcut to alternate between them. Brazilian layout is signalled by Scroll Lock LED on the keyboard.

===== 가능한 추가 설정 =====

There are a number of variants and options available which can be used while configuring the keyboard mappings. Most of those can be found in the {{Path|/usr/share/X11/xkb/rules/base.lst}} file.

For example, the US layout with possibility to write some international characters can be configured by using the variant <code>altgr-intl</code>:

{{FileBox|filename=/etc/X11/xorg.conf.d/10-keyboard.conf|title=US 키보드 배치용 AltGr-국제형 변형|lang=xorg_conf|1=
...
    Option "XkbLayout" "us,br"
    Option "XkbVariant" "altgr-intl,abnt2"
...
}}

{{Key|Right Alt}} is then used as a modifier for typing international characters.

Xorg provides the option to type international and various symbol characters by composition - which means by pressing ''compose key'' followed by a sequence of characters. To enable composition add the <code>compose:<compose_key></code> option:

{{FileBox|filename=/etc/X11/xorg.conf.d/10-keyboard.conf|title=단축키 활성화|lang=xorg_conf|1=
...
Option "XkbOptions" "grp:shift_toggle,grp_led:scroll,compose:sclk"
...
}}

The <code>compose:sclk</code> option above configures {{Key|Scroll Lock}} as compose key. With this setting:

* {{Key|Scroll Lock}}를 누르고 'oo'를 입력하면 도 기호 '°'가 나옴
* {{Key|Scroll Lock}}를 누르고 'oc'를 입력하면 저작권 기호 '©'가 나옴
* {{Key|Scroll Lock}}를 누르고 ':&#41;'를 입력하면 웃는 얼굴 기호 '☺' 가 나옴
* {{Key|Scroll Lock}}를 누르고 '^2'를 입력하면 위첨자 2 ('²')가 나옴
* {{Key|Scroll Lock}}를 누르고 '_2'를 입력하면 아래첨자 2 ('₂')가 나옴
* {{Key|Scroll Lock}}를 누르고 'di'를 입력하면 지름 기호 '⌀'가 나옴

... and many more. The {{Path|/usr/share/X11/locale/compose.dir}} file lists all possible composition sources.

=== X 키보드 배치 개선 ===

This is necessary when more far-reaching changes have to be made to the keyboard layout, such as adding key assignments, or adding actions to function keys. Since such changes are actually enhancements to the source files of a package, it is recommended to use the [[_/etc/portage/patches|epatch_user mechanism]] so that these amendments are preserved when the package is next updated.

==== 기본 원리 ====

The relevant Gentoo package is {{Package|x11-misc/xkeyboard-config}}. Configuring a keyboard under X is more complicated than doing the same for a virtual console. The pertinent configuration files can be found in {{Path|/usr/share/X11/xkb}} in these subdirectories:

; {{Path|keycodes}}
: These files associate key codes with symbolic names - it is unlikely that anyone wants to change this.
; {{Path|geometry}}
: This is the physical shape of the keyboard, used by some software for drawing diagrams of it - it is also unlikely that anyone wants to change this.
; {{Path|types}}
: The files here create "types". Used in a key declaration, a type specifies which combinations of shift keys can be used with the key.
; {{Path|symbols}}
: These files specify the actual key assignments.
; {{Path|compat}}
: The files here specify "actions" (such as switching to a virtual terminal), giving them names, which can be assigned to keys.
; {{Path|rules}}
: These files, given parameters such as the keyboard type, and a language, activate the appropriate specifications in the other directories.

A fuller description of the files in these directories can be found at [http://www.charvolant.org/~doug/xkb/html/index.html An Unreliable Guide to XKB Configuration by Doug Palmer]. It is a lot better than its name suggests. Further documentation can be found at xkeyboard-config's home page at [http://www.freedesktop.org/wiki/Software/XKeyboardConfig/ freedesktop.org].

Xkb gives keys names like "<AC01>" which means "key in the '''A'''lphanumeric area, in row '''C''' (i.e. third row from the bottom, the row CapsLock is on), and key number '''01''', the first key at the left of the row". This key is {{Key|A}} in an English layout. Keys in other areas have other names, such as "<FK05>" for {{Key|F5}}, or "<LCTL>" for the left control key.

==== 키 할당 추가 ====

As an example, this section will enhance the British English keyboard layout such that typing {{Key|a}}, {{Key|o}}, or {{Key|u}} with {{Key|AltGr}} will generate the German umlaut letters ä, ö, and ü. It should also do the Right Thing for the upper case versions. The keys to enhance are {{Key|A}} (<AC01>), {{Key|O}} (<AD09>) and {{Key|U}} (<AD07>). (The character ß is already assigned to {{Key|AltGr}}+{{Key|S}}.)

The names of the umlauted letters in xkb are "adiaeresis" and so on. These names can be found in the file {{Path|/usr/include/X11/keysymdef.h}}, though the leading "XK_"s have to be removed to get the names.

Identify the right file in the {{Path|symbols}} directory. Most of these files are named as two letter country codes (such as {{Path|gb}} for Great Britain) so guess the one which matches the keyboard layout currently selected in X. In this example, {{Path|symbols/gb}} is enhanced.

With the information above, create new entries by copying the existing scheme in {{Path|symbols/gb}}. In this example, these entries should be added into the section called "basic". From its content, it is easy to guess that the four items in the braces and brackets within the entry for each key are for regular (without other key combinations), {{Key|Shift}}, {{Key|AltGr}}, and {{Key|Shift}}+{{Key|AltGr}} respectively:

{{FileBox|filename=/usr/share/X11/xkb/symbols/gb|title=일반 키 항목|1=
    key <AE02>	{ [         2,   quotedbl,  twosuperior,    oneeighth]	};
}}

추가 설정을 넣고 나면, 섹션의 내용은 다음과 같습니다:

{{FileBox|filename=/usr/share/X11/xkb/symbols/gb|title=영국 영어 키보드 개선 예제|1=
default  partial alphanumeric_keys
xkb_symbols "basic" {
 
    // Describes the differences between a very simple en_US
    // keyboard and a very simple U.K. keyboard layout defined by
    // the SVR4 European Language Supplement and sometimes also
    // known as the IBM 166 layout.
 
    include "latin"
 
    name[Group1]="English (UK)";
 
    key <AE02>	{ [         2,   quotedbl,  twosuperior,    oneeighth ]	};
    key <AE03>	{ [         3,   sterling, threesuperior,    sterling ]	};
    key <AE04>	{ [         4,     dollar,     EuroSign,   onequarter ]	};
 
    key <AC11>	{ [apostrophe,         at, dead_circumflex, dead_caron]	};
    key <TLDE>	{ [     grave,    notsign,          bar,          bar ]	};
 
    key <BKSL>	{ [numbersign, asciitilde,   dead_grave,   dead_breve ]	};
    key <LSGT>	{ [ backslash,        bar,          bar,    brokenbar ]	};
 
// Keys inserted by ACM, 2015-10-23.
    key <AD07>  { [         u,          U,   udiaeresis,   Udiaeresis ] };
    key <AD09>  { [         o,          O,   odiaeresis,   Odiaeresis ] };
    key <AC01>  { [         a,          A,   adiaeresis,   Adiaeresis ] };
// End of insertion 2015-10-23
    include "level3(ralt_switch_multikey)"
};
}}

Having saved this file, restart X Windows. A typical desktop environment, XFCE, re-reads the above configuration files each time it starts. Should there be errors, error messages will be written to the normal {{Path|stderr}} - if X Windows is started from the command line, {{Path|stderr}} will be the virtual terminal it was started from.

==== 기능 키에 동작 할당 ====

As an example, add the actions "switch to virtual terminal n" (where n > 12) to the function keys {{Key|F1}} - {{Key|F12}} when {{Key|Ctrl}}, {{Key|Alt}}, and {{Key|Shift}} are all selected. The same effect should also occur when {{Key|AltGr}} and {{Key|Fn}} are selected.

First, search for the file in the {{Path|symbols}} directory which handles the existing assignments for the Function keys. This file is {{Path|symbols/srvr_ctrl}}. The entry in this file for {{Key|F1}}, which is intended to be modified, is:

{{FileBox|filename=/usr/share/X11/xkb/symbols/srvr_ctrl|title={{Key|F1}} 키용 기존 항목|1=
    key <FK01> {
	type="CTRL+ALT",
	symbols[Group1]= [ F1, F1, F1, F1, XF86_Switch_VT_1 ]
    };
}}

There are two things to note with this entry:
* It is of type "CTRL+ALT"; it thus takes the standard four shift key settings with {{Key|Shift}} and {{Key|AltGr}}, plus a fifth setting of {{Key|Ctrl}}+{{Key|Alt}}. Since the goal is to use {{Key|Ctrl}}+{{Key|Alt}}+{{Key|Shift}}, and there is no suitable existing type, a new one needs to be created.
* The "action" <code>XF86_Switch_VT_1</code> is just a defined symbol in the xkb system. Its semantics are given to it by an entry in a file in the {{Path|compat}} directory, namely {{Path|compat/xfree86}}. There is no symbol <code>XF86_Switch_VT_13</code> (or higher) - instead, steal the otherwise unused existing symbols F13, F14, ..., F24.

===== 새 CTRL+ALT+SHIFT 형식 만들기 =====

Having located "CTRL+ALT" in {{Path|types/pc}}, it is easy enough to copy it, rename the copy to "CTRL+ALT+SHIFT" and extend this to allow the modifier key combination {{Key|Ctrl}}+{{Key|Alt}}+{{Key|Shift}}. The result looks like this:

{{FileBox|filename=/usr/share/X11/xkb/types/pc|title=새 형식 만들기|1=
    type "CTRL+ALT+SHIFT" {
        modifiers = Control+Alt+Shift+LevelThree;
        map[None] = Level1;
        map[Shift] = Level2;
        map[LevelThree] = Level3;
        map[Shift+LevelThree] = Level4;
        map[Control+Alt] = Level5;
        map[Shift+Control+Alt] = Level6;
        preserve[Shift] = Shift;
        preserve[Shift+LevelThree] = Shift;
        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
        level_name[Level5] = "Ctrl+Alt";
        level_name[Level6] = "Ctrl+Alt+Shift";
    };
}}

===== F13, ..., F24 심볼 활성화 =====

The symbol <code>XF86_Switch_VT_1</code> is swiftly located in {{Path|compat/xfree86}}. It is a simple matter to copy its form, creating assignments for the symbols F13, ..., F24. The definition for the first of these symbols, F13, in {{Path|compat/xfree86}} then looks like:

{{FileBox|filename=/usr/share/X11/xkb/compat/xfree86|title=심볼에 동작 할당|1=
    interpret  F13 {
        action = SwitchScreen(Screen=13, !SameServer);
    };
}}

F14, ..., F24 키에 대한 유사 정의는 이 파일에 넣어야합니다.

===== {{Key|F1}}, ..., {{Key|F12}} 키 심볼 항목 수정 ====

Now that the new type CTRL+ALT+SHIFT and definitions for the symbols F13, ..., F24 are defined, amend the key definitions for the function keys in {{Path|symbols/srvr_ctrl}}. The one for {{Key|F1}} is mentioned below, analogous definitions also need to be inserted for the other function keys:

{{FileBox|filename=/usr/share/X11/xkb/symbols/srvr_ctrl|title=기능 키 재정의|1=
    key <FK01> {
	type="CTRL+ALT+SHIFT",
	symbols[Group1]= [ F1, F1, F13, F1, XF86_Switch_VT_1, F13 ]
    };
}}

{{Path|types/pc}}, {{Path|compat/xfree86}}, {{Path|symbols/srvr_ctrl}} 설정을 바꾸고 나면 X 서버를 다시 시작하고 X 에서 13번 가상 터미널로 바로 전환하면 위의 설정대로 활용할 수 있습니다 -  물론 [[Handbook:AMD64/Working/Initscripts/ko#init_.EB.8F.99.EC.9E.91_.EB.B0.A9.EC.8B.9D|/etc/inittab]](또는 systemd의 동급 항목)에서 설정한 대로 나타납니다.
