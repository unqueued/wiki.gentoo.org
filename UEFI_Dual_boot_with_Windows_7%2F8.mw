==== Prerequisites: ====
A UEFI computer with Windows 7 x64 or Windows 8 x64 installed on a gpt partitioned hard drive and booting in uefi mode. [http://www.rodsbooks.com/efi-bootloaders/secureboot.html Secure Boot disabled in BIOS.]
If the hard drive is empty, try [http://msdn.microsoft.com/en-us/library/windows/hardware/gg463140.aspx Installing Windows on UEFI Systems] first.

==== Use Windows to shrink a windows partition to make room for Gentoo (if needed). ====
===== WINDOWS 7: =====
# Press the Windows-r to open the "Run" dialog, and enter diskmgmt.msc OR go to Control Panel/Administrative Tools and open Computer Management. Select the "Disk Management" option under "Storage" from the tree menu on the left.
# Right click on the target partition and choose “shrink volume”
# Provide the size of the shrink
===== WINDOWS 8: =====
# Press Windows-x (windows key and x key simultaneously).
# Choose “Disk Management”
# Right click on the target partition and choose “shrink volume”
# Provide the size of the shrink
==== Download and install rEFInd in Windows ====
[http://www.rodsbooks.com/refind/getting.html Get rEFInd]<br />
Extract refind-bin-{version}.zip to a handy location. Suggest C:\. <br />
[http://www.rodsbooks.com/refind/installing.html#windows Get directions; then install rEFInd from Windows to the Windows EFI System partition (ESP)]<br />
For simpler booting in some configurations, ensure that you've installed EFI filesystem drivers for the partition that holds your Linux kernel.<br />
[http://www.flickr.com/photos/96868680@N04/ Screenshots]<br />

==== Obtain UEFI bootable linux media ====
[http://www.sysresccd.org/Download Get a System Rescue Cd iso]<br /> Knoppix 7.2 is not a suitable substitute.
Create a System Rescue Cd or [http://www.sysresccd.org/Sysresccd-manual-en_How_to_install_SystemRescueCd_on_an_USB-stick System Rescue USB flash drive]<br />
Mount the sysresccd or sysrescusb and restart the computer. The CD or USB should appear as a choice in the rEFInd menu. If the cd/usb does not appear in the rEFInd menu, select "Reboot to Computer Setup Utility", then in the BIOS screen check for an entry for the cd/usb that is marked as "UEFI". Select that entry as the first boot choice.<br />

==== Install Gentoo. ====
Exceptions/additions to the [http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?style=printable&full=1 Gentoo Handbook]:<br />
===== Use gdisk instead of fdisk or parted to create gentoo partitions. =====
'''START OF GDISK EXAMPLE:'''
 gdisk /dev/sda<br />
 GPT fdisk (gdisk) version 0.8.6
 
 Partition table scan:
 MBR: protective
 BSD: not present
 APM: not present
 GPT: present
 
 Found valid GPT with protective MBR; using GPT.
 
 Command (? for help): p
 Disk /dev/sda: 500118192 sectors, 238.5 GiB
 Logical sector size: 512 bytes
 Disk identifier (GUID): C72786B7-C1FB-4A60-8F5F-216FA9097A98
 Partition table holds up to 128 entries
 First usable sector is 34, last usable sector is 500118158
 Partitions will be aligned on 2048-sector boundaries
 Total free space is 123357805 sectors (58.8 GiB)
 
 Number  Start (sector)    End (sector)  Size       Code  Name
 1            2048          616447   300.0 MiB   2700  Basic data partition
 2          616448          821247   100.0 MiB   EF00  EFI system partition
 3          821248         1083391   128.0 MiB   0C01  Microsoft reserved part
 4         1083392       376762367   179.1 GiB   0700  Basic data partition
 
 Command (? for help): n
 Partition number (5-128, default 5):
 First sector (34-500118158, default = 376762368) or {+-}size{KMGTP}: 
 Last sector (376762368-500118158, default = 500118158) or {+-}size{KMGTP}: +100M
 Current type is 'Linux filesystem'
 Hex code or GUID (L to show codes, Enter = 8300): 
 Changed type of partition to 'Linux filesystem'
 Entering GPTPart::SetName(const UnicodeString...)
 
 Command (? for help): n
 Partition number (6-128, default 6): 
 First sector (34-500118158, default = 376967168) or {+-}size{KMGTP}:
 Last sector (376967168-500118158, default = 500118158) or {+-}size{KMGTP}: +1G
 Current type is 'Linux filesystem'
 Hex code or GUID (L to show codes, Enter = 8300): 8200
 Changed type of partition to 'Linux swap'
 Entering GPTPart::SetName(const UnicodeString...)
 
 Command (? for help): n
 Partition number (7-128, default 7): 
 First sector (34-500118158, default = 379064320) or {+-}size{KMGTP}: 
 Last sector (379064320-500118158, default = 500118158) or {+-}size{KMGTP}: 
 Current type is 'Linux filesystem'
 Hex code or GUID (L to show codes, Enter = 8300): 
 Changed type of partition to 'Linux filesystem'
 Entering GPTPart::SetName(const UnicodeString...)
 
 Command (? for help): p
 Disk /dev/sda: 500118192 sectors, 238.5 GiB
 Logical sector size: 512 bytes
 Disk identifier (GUID): C72786B7-C1FB-4A60-8F5F-216FA9097A98
 Partition table holds up to 128 entries
 First usable sector is 34, last usable sector is 500118158
 Partitions will be aligned on 2048-sector boundaries
 Total free space is 2014 sectors (1007.0 KiB)
 
 Number  Start (sector)    End (sector)  Size       Code  Name
 1            2048          616447   300.0 MiB   2700  Basic data partition
 2          616448          821247   100.0 MiB   EF00  EFI system partition
 3          821248         1083391   128.0 MiB   0C01  Microsoft reserved part
 4         1083392       376762367   179.1 GiB   0700  Basic data partition
 5       376762368       376967167   100.0 MiB   8300  Linux filesystem
 6       376967168       379064319   1024.0 MiB  8200  Linux swap
 7       379064320       500118158   57.7 GiB    8300  Linux filesystem
 
 Command (? for help): w
 
 Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING
 PARTITIONS!!
 
 Do you want to proceed? (Y/N): y
 OK; writing new GUID partition table (GPT) to /dev/sda.
 The operation has completed successfully.
'''END OF GDISK EXAMPLE'''
Make file systems:<br />
 mkfs.ext2 /dev/sda5
 mkfs.ext4 /dev/sda7
 mkswap /dev/sda6
 swapon /dev/sda6
As long as the EFI stub kernel is in an ext2, ext3, ext4, ReiserFS, Btrfs, or fat32 file system rEFInd will find it and add it to the menu.<br /> 

Run blkid:<br />
'''EXAMPLE RETURN:''' /dev/sda7: UUID="1f43e373-f923-4ec2-a62e-6a0d98927583" TYPE="swap" PARTLABEL="Linux filesystem" PARTUUID="92d3d504-9e7e-4c3d-9e56-15e3bd43511b"<br />
The / partition PARTUUID will be used in the kernel configuration in the form root=PARTUUID=92d3d504-9e7e-4c3d-9e56-15e3bd43511b . Keep it handy.<br />
<br />
Continue with the handbook through "7. Configuring the Kernel".<br />

===== Kernel configuration: =====
Use either "7.b. Default: Manual Configuration" or "7.c. Alternative: Using genkernel" but start genkernel with 'genkernel --menuconfig all' vice just 'genkernel all'. The kernel name produced by genkernel in /boot will start with kernel- ; as rEFInd looks for vmlinuz or bzImage as the first word in linux kernel names, either replace or prepend kernel- with vmlinuz- or bzImage- in /boot. In addition to the items specified in the handbook or set by genkernel, enable the following:<br />
In menuconfig:<br />
<br />
General setup<br />
CONFIG_BLK_DEV_INITRD=y<br />
CONFIG_INITRAMFS_SOURCE=""<br />
CONFIG_RD_GZIP=y<br />
CONFIG_RD_BZIP2=y<br />
CONFIG_RD_LZMA=y<br />
CONFIG_RD_XZ=y<br />
CONFIG_RD_LZO=y<br />
CONFIG_RD_LZ4=y<br />
<br />
-*- Enable the block layer  ---><br />
Partition Types  ---><br />
[*]   PC BIOS (MSDOS partition tables) support<br />
[*]   EFI GUID Partition support<br />
<br />
Processor type and features  ---><br />
[*] EFI runtime service support<br />
[*]   EFI stub support<br />
[*] Built-in kernel command line                                                             <br />
(root=PARTUUID=92d3d504-9e7e-4c3d-9e56-15e3bd43511b ro) Built-in kernel command string  EXAMPLE USE CORRECT PARTUUID FOUND WITH BLKID<br />
[*]   Built-in command line overrides boot loader arguments  <br />
<br />
Firmware Drivers  ---><br />
<*> EFI Variable Support via sysfs<br />
<br />
Device Drivers  ---><br />
Graphics support  ---><br />
<*> Support for frame buffer devices  ---><br />
[*]   EFI-based Framebuffer Support<br />
<br />
File systems  ---><br />
Pseudo filesystems  ---><br />
-*- /proc file system support                                                                   <br />
[*]   /proc/kcore support                                                                       <br />
[*] Tmpfs virtual memory file system support (former shm fs)                                    <br />
[*]   Tmpfs POSIX Access Control Lists                                                          <br />
-*-   Tmpfs extended attributes                                                                 <br />
[*] HugeTLB file system support                                                                 <br />
<*> Userspace-driven configuration filesystem<br />
<br />

If an initramfs is to be used, add an initrd="/boot/<your initramfs name>" to the kernel configuration item "CONFIG_CMDLINE" as in the following example:<br />
Processor type and features ---><br />
[*] Built-in kernel command line <br />
(initrd=/boot/initramfs root=PARTUUID=92d3d504-9e7e-4c3d-9e56-15e3bd43511b ro) Built-in kernel command string EXAMPLE USE CORRECT PARTUUID FOUND WITH BLKID<br />
[*] Built-in command line overrides boot loader arguments <br />

If systemd is to be used, add "init=/usr/lib/systemd/systemd" to the kernel configuration item "CONFIG_CMDLINE" as in the following example:<br />
Processor type and features ---><br />
[*] Built-in kernel command line <br />
(root=PARTUUID=92d3d504-9e7e-4c3d-9e56-15e3bd43511b ro init=/usr/lib/systemd/systemd quiet) Built-in kernel command string EXAMPLE USE CORRECT PARTUUID FOUND WITH BLKID<br />
[*] Built-in command line overrides boot loader arguments <br />

If systemd and an initramfs are to be used; example:<br />
Processor type and features ---><br />
[*] Built-in kernel command line <br />
(initrd=/boot/initramfs root=PARTUUID=92d3d504-9e7e-4c3d-9e56-15e3bd43511b ro init=/usr/lib/systemd/systemd quiet) Built-in kernel command string EXAMPLE USE CORRECT PARTUUID FOUND WITH BLKID<br />
[*] Built-in command line overrides boot loader arguments <br />

Use make && make modules_install && make install to build a manual kernel. Finish the handbook. No need to emerge or install grub or lilo or grub2. REFInd will act as boot manager. <br />
[[Category:Bootloaders]]
