==== Prerequisites: ====
A UEFI computer with Windows 7 x64 or Windows 8 x64 installed on a gpt partitioned hard drive and booting in uefi mode. [http://www.rodsbooks.com/efi-bootloaders/secureboot.html Secure Boot disabled in BIOS.]
==== Use Windows to shrink a windows partition to make room for Gentoo (if needed). ====
===== WINDOWS 7: =====
Type "disk management" in the search window<br />
Select "Create and format hard disk partitions" from the top of the list<br />
Right click on the target partition and choose “shrink volume”<br />
Provide the size of the shrink<br />
===== WINDOWS 8: =====
Press Windows-x (windows key and x key simultaneously).<br />
Choose “Disk Management”<br />
Right click on the target partition and choose “shrink volume”<br />
Provide the size of the shrink<br />
==== Download and install rEFInd in Windows ====
[http://sourceforge.net/projects/refind/files/0.6.12/refind-bin-0.6.12.zip/download Get rEFInd]<br />
Extract refind-bin-0.6.12.zip to a handy location. Suggest C:\. <br />
[http://www.rodsbooks.com/refind/installing.html#windows Get directions; then install rEFInd from Windows to the Windows EFI System partition (ESP)]<br />
[http://www.flickr.com/photos/96868680@N04/ Screenshots]<br />

==== Obtain UEFI bootable linux media ====
[http://www.sysresccd.org/Download Get a System Rescue Cd iso]<br />
Create a System Rescue Cd or [http://www.sysresccd.org/Sysresccd-manual-en_How_to_install_SystemRescueCd_on_an_USB-stick System Rescue USB flash drive]<br />
Mount the sysresccd or sysrescusb and restart the computer. The CD or USB should appear as a choice in the rEFInd menu.<br />
==== Install Gentoo. ====
Exceptions/additions to the [http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?style=printable&full=1 Gentoo Handbook]:<br />
===== Use gdisk instead of fdisk or parted to create gentoo partitions. =====
'''START OF GDISK EXAMPLE:'''<br />
gdisk /dev/sda<br />
GPT fdisk (gdisk) version 0.8.6<br />
<br />
Partition table scan:<br />
MBR: protective<br />
BSD: not present<br />
APM: not present<br />
GPT: present<br />
<br />
Found valid GPT with protective MBR; using GPT.<br />
<br />
Command (? for help): p<br />
Disk /dev/sda: 500118192 sectors, 238.5 GiB<br />
Logical sector size: 512 bytes<br />
Disk identifier (GUID): C72786B7-C1FB-4A60-8F5F-216FA9097A98<br />
Partition table holds up to 128 entries<br />
First usable sector is 34, last usable sector is 500118158<br />
Partitions will be aligned on 2048-sector boundaries<br />
Total free space is 123357805 sectors (58.8 GiB)<br />

Number  Start (sector)    End (sector)  Size       Code  Name
1            2048          616447   300.0 MiB   2700  Basic data partition<br />
2          616448          821247   100.0 MiB   EF00  EFI system partition<br />
3          821248         1083391   128.0 MiB   0C01  Microsoft reserved part<br />
4         1083392       376762367   179.1 GiB   0700  Basic data partition<br />
<br />
Command (? for help): n<br />
Partition number (5-128, default 5): <br />
First sector (34-500118158, default = 376762368) or {+-}size{KMGTP}: <br />
Last sector (376762368-500118158, default = 500118158) or {+-}size{KMGTP}: +100M<br />
Current type is 'Linux filesystem'<br />
Hex code or GUID (L to show codes, Enter = 8300): <br />
Changed type of partition to 'Linux filesystem'<br />
Entering GPTPart::SetName(const UnicodeString...)<br />

Command (? for help): n<br />
Partition number (6-128, default 6): <br />
First sector (34-500118158, default = 376967168) or {+-}size{KMGTP}:<br /> 
Last sector (376967168-500118158, default = 500118158) or {+-}size{KMGTP}: +1G<br />
Current type is 'Linux filesystem'<br />
Hex code or GUID (L to show codes, Enter = 8300): 8200<br />
Changed type of partition to 'Linux swap'<br />
Entering GPTPart::SetName(const UnicodeString...)<br />
<br />
Command (? for help): n<br />
Partition number (7-128, default 7): <br />
First sector (34-500118158, default = 379064320) or {+-}size{KMGTP}: <br />
Last sector (379064320-500118158, default = 500118158) or {+-}size{KMGTP}: <br />
Current type is 'Linux filesystem'<br />
Hex code or GUID (L to show codes, Enter = 8300): <br />
Changed type of partition to 'Linux filesystem'<br />
Entering GPTPart::SetName(const UnicodeString...)<br />
<br />
Command (? for help): p<br />
Disk /dev/sda: 500118192 sectors, 238.5 GiB<br />
Logical sector size: 512 bytes<br />
Disk identifier (GUID): C72786B7-C1FB-4A60-8F5F-216FA9097A98<br />
Partition table holds up to 128 entries<br />
First usable sector is 34, last usable sector is 500118158<br />
Partitions will be aligned on 2048-sector boundaries<br />
Total free space is 2014 sectors (1007.0 KiB)<br />
<br />
Number  Start (sector)    End (sector)  Size       Code  Name<br />
1            2048          616447   300.0 MiB   2700  Basic data partition<br />
2          616448          821247   100.0 MiB   EF00  EFI system partition<br />
3          821248         1083391   128.0 MiB   0C01  Microsoft reserved part<br />
4         1083392       376762367   179.1 GiB   0700  Basic data partition<br />
5       376762368       376967167   100.0 MiB   8300  Linux filesystem<br />
6       376967168       379064319   1024.0 MiB  8200  Linux swap<br />
7       379064320       500118158   57.7 GiB    8300  Linux filesystem<br />
<br />
Command (? for help): w<br />
<br />
Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING<br />
PARTITIONS!!<br />
<br />
Do you want to proceed? (Y/N): y<br />
OK; writing new GUID partition table (GPT) to /dev/sda.<br />
The operation has completed successfully.<br />
'''END OF GDISK EXAMPLE'''<br />
Make file systems:<br />
mkfs.ext2 /dev/sda5<br />
mkfs.ext4 /dev/sda7<br />
mkswap /dev/sda6<br />
swapon /dev/sda6<br />
As long as the EFI stub kernel is in an ext2, ext3, ext4, reiser, or fat32 file system rEFInd will find it and add it to the menu.<br /> 

Run blkid:<br />
'''EXAMPLE RETURN:''' /dev/sda7: UUID="1f43e373-f923-4ec2-a62e-6a0d98927583" TYPE="swap" PARTLABEL="Linux filesystem" PARTUUID="92d3d504-9e7e-4c3d-9e56-15e3bd43511b"<br />
The / partition PARTUUID will be used in the kernel configuration in the form root=PARTUUID=92d3d504-9e7e-4c3d-9e56-15e3bd43511b . Keep it handy.<br />
<br />
Continue with the handbook through "7. Configuring the Kernel".<br />
===== Kernel configuration: =====
Use either "7.b. Default: Manual Configuration" or "7.c. Alternative: Using genkernel" but start genkernel with 'genkernel --menuconfig all' vice just 'genkernel all'. In addition to the items specified in the handbook or set by genkernel, enable the following:<br />
In menuconfig:<br />
-*- Enable the block layer  ---><br />
Partition Types  ---><br />
[*]   PC BIOS (MSDOS partition tables) support<br />
[*]   EFI GUID Partition support<br />
<br />
Processor type and features  ---><br />
[*] Built-in kernel command line                                                             <br />
(root=PARTUUID=92d3d504-9e7e-4c3d-9e56-15e3bd43511b) Built-in kernel command string  EXAMPLE USE CORRECT PARTUUID FOUND WITH BLKID<br />
[*]   Built-in command line overrides boot loader arguments  <br />
<br />
Firmware Drivers  ---><br />
<*> EFI Variable Support via sysfs<br />
<br />
Device Drivers  ---><br />
Graphics support  ---><br />
<*> Support for frame buffer devices  ---><br />
[*]   EFI-based Framebuffer Support<br />
<br />
File systems  ---><br />
Pseudo filesystems  ---><br />
-*- /proc file system support                                                                   <br />
[*]   /proc/kcore support                                                                       <br />
[*] Tmpfs virtual memory file system support (former shm fs)                                    <br />
[*]   Tmpfs POSIX Access Control Lists                                                          <br />
-*-   Tmpfs extended attributes                                                                 <br />
[*] HugeTLB file system support                                                                 <br />
<*> Userspace-driven configuration filesystem<br />
<br />

UEFI does not support loading a separate initramfs for your kernel. So if you need an initramfs, it has to be built into the kernel via CONFIG_INITRAMFS_SOURCE. It must be an uncompressed CPIO archive with .cpio filename extension.<br />
Example of converting a genkernel built initramfs: xzcat /boot/initramfs-genkernel-x86_64-3.9.6-gentoo > /boot/initramfs.cpio<br />
<br />
If an initramfs is used, enable these additional kernel configuration items:<br />
General setup  ---><br />
[*] Initial RAM filesystem and RAM disk (initramfs/initrd) support              <br />
(initramfs.cpio) Initramfs source file(s)                                       <br />
(0)     User ID to map to 0 (user root) (NEW)                                   <br />
(0)     Group ID to map to 0 (group root) (NEW)                                 <br />
Built-in initramfs compression mode (None)  ---> <br />
<br />
Use make && make modules_install && make install to build a manual kernel. Finish the handbook. No need to emerge or install grub or lilo or grub2. REFInd will act as boot manager. <br />
[[Category:Bootloaders]]
