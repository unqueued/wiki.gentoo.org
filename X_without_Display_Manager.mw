Usually, the X11 session is started by a [[display manager]]. However, when running a single-user system you may find display managers an unnecessary waste of resources. Fortunately, you can start X11 session without a display manager.

== Starting X11 from console ==

=== Using startx ===
The standard X11 distribution contains ''startx'', a small script which can be used to start X11 session from a terminal (it's installed by {{Package|x11-apps/xinit}}).

In order to start X11 this way, type in:
{{Cmd|startx}}

This will start the X11 server with default options and try to find an X11 session (e.g. a desktop environment) to start.

If you'd like to specify the session (program to start) yourself, you can do so as an argument to startx:
{{Cmd|startx /usr/bin/startxfce4}}

You can also pass X11 server options, by preceding them with a double dash:
{{Cmd|startx -- vt7}}

=== Using a dedicated session runner ===
Some of the desktop environments provide their own replacements for ''startx''. For example, Xfce4 provides ''startxfce4'':
{{Cmd|startxfce4 -- vt7}}

== Starting X11 automatically ==

=== Starting X11 on console login ===
To avoid having to type the ''startx'' command over and over again, you may decide that a login to a specific vt should start X11. One of the ways to achieve that is to put a code like the following into your shell's RC (e.g. ''~/.bashrc''):

{{File|~/.bashrc|X11 autostart with login on vt8|<pre>
if [[ ! ${DISPLAY} && ${XDG_VTNR} == 8 ]]; then
    exec startx
fi
</pre>}}

The ''XDG_VTNR'' variables specifies the VT number. If you'd like to use another VT, adjust the number accordingly.

The additional ''DISPLAY'' check is necessary since the snippet will be executed on each new interactive shell. Since ''XDG_VTNR'' will be set to the same value in the shells started within the X11 session (e.g. terminals), it is necessary to prevent them from trying to start X11.

The ''exec'' command causes the login shell to be replaced by the X11 session. This means that the user won't be able to use the shell used to start X11 anymore, and whenever the X11 session terminates, user will be logged back out. If you'd prefer to remain being logged in into vt, remove the ''exec'' word.

{{Note|The ''DISPLAY'' check is fairly fragile. For example, if you ''unset DISPLAY'' in a terminal and start bash afterwards, it will try to start X11.}}

=== X11 autologin with systemd ===

==== Method 1 ====
In order to obtain complete X11 autologin, you can use the getty/login autologin feature along with the fore-mentioned trick.

First, create a new service file like the following:
{{File|/etc/systemd/system/x11.service|An example service file for X11 autologin|<pre>
[Unit]
After=systemd-user-sessions.service

[Service]
ExecStart=/sbin/mingetty --autologin username --noclear tty8 38400

[Install]
WantedBy=multi-user.target
</pre>}}

with ''username'' replaced by your username, and ''tty8'' being the tty you want the X11-starting login to be performed on. It should be noted that this tty will be used for login & console output, and X11 can be started on any other tty.

{{Note|This way can only be used for vt7+. Earlier vts are used by default getty generator and require a different kind of hackery.}}

Afterwards, add the fore-mentioned snippet to your bashrc (with the same vt specified), enable the service:
{{RootCmd|systemctl enable x11.service}}

In order to avoid relying on the ''DISPLAY+XDG_VTNR'' trick to determine whether to start X11, we can extend the two above approaches by using a dedicated environment variable to distinguish the specific shell where X11 is to be started.

First, create a dedicated ''login'' wrapper:
{{File|/usr/local/sbin/x11login|X11 vt login wrapper|<pre>
#!/bin/sh
exec /bin/login "${@}" START_X11=1
</pre>}}

This causes the user to be logged in with ''START_X11=1'' environment variable set. Then, tell getty to use that file instead of the default ''/bin/login'':

{{File|/etc/systemd/system/x11.service|X11 autologin service using login wrapper|<pre>
[Unit]
After=systemd-user-sessions.service

[Service]
ExecStart=/sbin/mingetty --autologin username --loginprog=/usr/local/sbin/x11login --noclear tty8 38400

[Install]
WantedBy=multi-user.target
</pre>}}

Finally, modify bashrc (or equivalent) to use the variable rather than guessing:
{{File|~/.bashrc|X11 autostart checking dedicated variable|<pre>
if [[ ${START_X11} == 1 ]]; then
    unset START_X11
    exec startx
fi
</pre>}}

Remember to unset the variable before starting X11 -- otherwise all the X11 terminals would have it set and try to spawn another X11 session.

==== Method 2 ====

In another way, you can use su and xinit for direct login in X.

Service example:

{{File|/etc/systemd/system/xinit-login.service|An example service file for X11 autologin using su and xinit|<pre>
[Unit]
After=systemd-user-sessions.service

[Service]
ExecStart=/bin/su username -l -c /usr/bin/xinit -- VT08

[Install]
WantedBy=multi-user.target
</pre>}}

You can use startx rather than xinit.

[[Category:Display manager]]
[[Category:X.Org]]
