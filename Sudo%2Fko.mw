<languages />

{{Metadata|abstract=sudo 명령은 일반 사용자가 암호를 입력하지 않고도 가능하게 루트 권한으로 몇가지(또는 전부의)명령을 실행하는 등의 상황에서 권한 상승을 설정하는 간단하고 안전한 수단을 제공합니다.}}

{{InfoBox stack
|{{InfoBox homepage|http://www.sudo.ws/|header=true}}
|{{InfoBox wikipedia|sudo}}
}}

{{c|sudo}} 명령은 일반 사용자가 암호를 입력하지 않고도 가능하게 루트 권한으로 몇가지(또는 전부의)명령을 실행하는 등의 상황에서 권한 상승을 설정하는 간단하고 안전한 수단을 제공합니다.

일부 사용자에게 루트 권한을 전부 주지 않고도 시스템의 관리 과정을 수행하도록 하려면 sudo를 사용하는 것이 가장 탁월한 선택입니다. sudo를 통해서라면 누가 무엇을 할 수 있을지 통제할 수 있습니다. 이 안내서에서는 이 멋진 수단에 대한 간단한 소개를 드리고자 합니다.

__TOC__

이 글은 간단한 소개글을 의도합니다. {{Package|app-admin/sudo}} 꾸러미는 여기서 언급한 내용보다 훨씬 더 강력한 기능을 보유하고 있습니다. 다른 사용자 처럼 파일을 편집하는 기능({{c|sudoedit}}), 스크립트 내에서 실행하는(따라서 백그라운드에서 실행하거나 키보드 대신 표준 입력을 통해 암호 입력을 받을 수 있음), 등의 기능이 있습니다. 

더 많은 내용은 <tt>sudo</tt> 와 <tt>sudoers</tt> 설명서 페이지를 읽어보십시오.

== 설치 ==

=== USE 플래그 ===

{{USEflag|package=app-admin/sudo}}

=== Emerge === 

{{Emerge|app-admin/sudo}}

== 설정 == 

=== 활동 기록 === 

{{c|sudo}}의 또 다른 장점은 프로그램을 실행하는 어떤 시도 과정(성공/실패)을 기록할 수 있다는 점입니다. 누가 10시간동안 삽질하도록 치명적인 실수를 했는지 추적할 때 유용합니다 :&#41; 

=== 권한 부여 === 

시스템 관리자는 {{Package|app-admin/sudo}} 꾸러미로 사용자들이 보통 실행하지 말아야 할 하나 이상의 프로그램을 실행할 수 있도록 권한을 줄 수 있게 합니다. <code>setuid</code> 사용할 때와는 달리 {{c|sudo}}는 ''누가'', ''언제'' 각각의 명령을 실행할 수 있는지 세밀하게 관리할 수 있습니다. 

{{c|sudo}}로 ''누가'' 프로그램을 실행할 수 있는지 분명한 목록을 만들 수 있습니다. setuid 비트를 설정하면 어떤 사용자든(어떤 그룹의 사용자든, 권한 설정에 따라) 이 프로그램을 실행할 수 있습니다. 사용자가 프로그램을 실행하려 할 때 암호를 입력하라고 요구(할 수 있거나 해야)합니다. 

{{c|sudo}} 설정은 {{Path|/etc/sudoers}} 파일에서 관리합니다. 이 파일은 {{c|nano /etc/sudoers}}, {{c|vim /etc/sudoers}} 또는 사용하고자 하는 편집기로 편집해서는 안됩니다. 이 파일의 내용을 바꾸려면 {{c|visudo}}를 사용하십시오. 

이 도구는 설정 파일을 두 명의 시스템 관리자가 동시에 편집하고 있는지 확인하고 파일의 권한을 보존하며 파일에 치명적인 실수를 하지 않도록 문법을 확인하는 역할을 수행합니다. 

=== 기본 문법 ===

{{c|sudo}} 를 다루는데 있어 상당히 어려운 부분은 {{Path|/etc/sudoers}} 문법입니다. 기본 문법은 다음과 같습니다: 

{{CodeBox|title=/etc/sudoers 기본 문법|1=
user  host = commands
}}

이 문법은 {{c|sudo}}에게 <code>user</code>가 인증하였으며, <code>host</code> 시스템에서 로그인한 사용자가 명시한 <code>commands</code>의 어떤 명령이든 루트 권한으로 실행할 수 있음을 말합니다. 좀더 실제적인 예제를 들면 확실히 이해할 수 있을지도 모르겠습니다. 다음 예제에서는 ''larry'' 사용자가 localhost에 로그인하면 {{c|emerge}}를 실행할 수 있습니다: 

{{CodeBox|title=/etc/sudoers 실제 예제|1=
larry  localhost = /usr/bin/emerge
}}

{{Note|호스트 이름은 {{c|hostname}} 명령에서 반환하는 값과 일치해야합니다.}}

{{Warning|사용자가 타인의 권한을 올려줄 수 있는 프로그램을 실행하지 못하게 하십시오. 예를 들면 {{c|emerge}} 실행 권한을 사용자에게 주면 시스템 루트 권한을 완전히 넘겨준다는 이야기인데 {{c|emerge}}는 사용자의 고급 권한을 실시간으로 파일 시스템 상에서 바꿀 수 있기 때문입니다. {{c|sudo}} 사용자를 믿지 못하겠다면 어떤 권한도 주지 마십시오.}}

사용자 이름은 그룹 이름으로 분류할 수 있습니다. 이 경우 <code>%</code> 기호로 시작하는 그룹 이름을 적어야합니다. 예를 들어 <tt>wheel</tt> 그룹의 임의의 사용자에게 {{c|emerge}} 실행을 허용하려면: 

{{CodeBox|title=wheel 그룹 사용자에게 emerge 실행 허가|1=
%wheel  localhost = /usr/bin/emerge
}}

You can extend the line to allow for several commands (instead of making a single entry for each command). For instance, to allow the same user to not only run <tt>emerge</tt> but also <tt>ebuild</tt> and <tt>emerge-webrsync</tt> as root: 

{{CodeBox|title=다중 명령|1=
larry  localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
}}

You can also specify a precise command and not only the tool itself. This is useful to restrict the use of a certain tool to a specified set of command options. The <tt>sudo</tt> tool allows shell-style wildcards (AKA meta or glob characters) to be used in path names as well as command-line arguments in the sudoers file. Note that these are ''not'' regular expressions. 

시험을 위해 다음 명령을 입력해보겠습니다: 

{{Cmd|sudo emerge -uDN world|output=<pre>
We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:
  
    #1&#41; Respect the privacy of others.
    #2&#41; Think before you type.
    #3&#41; With great power comes great responsibility.
  
Password: ## (Enter the user password, not root!)
</pre>
}}

The password that <tt>sudo</tt> requires is the user's own password. This is to make sure that no terminal that you accidentally left open to others is abused for malicious purposes. 

You should know that <tt>sudo</tt> does not alter the <code>${PATH}</code> variable: any command you place after <tt>sudo</tt> is treated from ''your'' environment. If you want the user to run a tool in for instance {{Path|/sbin}} he should provide the full path to <tt>sudo</tt>, like so: 

{{Cmd|sudo /usr/sbin/emerge-webrsync}}

=== LDAP 기본 문법 === 

LDAP 기능을 지원하려면 {{c|ldap}} 및 {{c|pam}} USE 플래그가 필요합니다.

When using sudo with LDAP, sudo will read configuration from LDAP Server as well.
So you will need to edit two files.

{{FileBox|filename=/etc/ldap.conf.sudo|title=끝나면 꼭 chmod 400 명령으로 처리하십시오|1=
# See ldap.conf(5) and README.LDAP for details
# This file should only be readable by root
  
# supported directives: host, port, ssl, ldap_version
# uri, binddn, bindpw, sudoers_base, sudoers_debug
# tls_{checkpeer,cacertfile,cacertdir,randfile,ciphers,cert,key}
  
host ldap.example.com
port 389
  
base dc=example,dc=com
  
uri ldap://ldap.example.com/
#uri ldapi://%2fvar%2frun%2fopenldap%2fslapd.sock
  
ldap_version 3
#ssl start_tls
  
sudoers_base ou=SUDOers,dc=example,dc=com
#sudoers_debug 2
  
bind_policy soft
}}

{{FileBox|filename=/etc/nsswitch.conf|title=sudoers에 다음 줄을 추가하십시오|1=
sudoers:     ldap files
}}

또한 sudo 에 다음 LDAP 항목을 추가해야 합니다.

{{Note|보안 문제로 sudoers 브랜치를 트리 상단에 놓도록 설계했습니다. 따라서 이 LDAP 브랜치에 읽기/쓰기 접근 권한을 다르게 줄 수 있습니다}}

{{CodeBox|title=sudo용 LDAP 항목|lang=ldif|1=
version: 1
DN: ou=SUDOers,dc=example,dc=com
objectClass: organizationalUnit
objectClass: top
objectClass: domainRelatedObject
associatedDomain: example.com
ou: SUDOers
  
DN: cn=defaults,ou=SUDOers,dc=example,dc=com
objectClass: top
objectClass: sudoRole
cn: defaults
description: Default sudoOption's go here
sudoOption: env_reset
  
DN: cn=root,ou=SUDOers,dc=example,dc=com
objectClass: top
objectClass: sudoRole
cn: root
sudoCommand: ALL
sudoHost: ALL
sudoUser: root
  
DN: cn=%wheel,ou=SUDOers,dc=example,dc=com
objectClass: top
objectClass: sudoRole
cn: %wheel
sudoCommand: ALL
sudoHost: ALL
sudoOption: !authenticate
sudoUser: %wheel
}}

{{CodeBox|title=wheel 그룹의 LDAP 항목|lang=ldif|1=
version: 1
DN: cn=wheel,ou=Group,dc=example,dc=com
objectClass: top
objectClass: posixGroup
cn: wheel
description: Wheel Group
gidNumber: 10
memberUid: useradmin1
memberUid: root
}}

sudoer LDAP 설정은 다른 설정을 하는 파일과 비슷합니다. 아래 링크에 있는 sudo LDAP 글을 더 읽어보십시오<ref name="test">[http://www.sudo.ws/sudo/sudoers.ldap.man.html] Sudoers 맨 페이지</ref>.

<references />

=== 별칭 사용 ===

In larger environments having to enter all users over and over again (or hosts, or commands) can be a daunting task. To ease the administration of {{Path|/etc/sudoers}} you can define ''aliases''. The format to declare aliases is quite simple: 

{{CodeBox|title=/etc/sudoers에 별칭 선언|1=
Host_Alias hostalias = hostname1, hostname2, ...
User_Alias useralias = user1, user2, ...
Cmnd_Alias cmndalias = command1, command2, ...
}}

One alias that always works, for any position, is the <code>ALL</code> alias (to make a good distinction between aliases and non-aliases it is recommended to use capital letters for aliases). As you might undoubtedly have guessed, the <code>ALL</code> alias is an alias to all possible settings. 

A sample use of the <code>ALL</code> alias to allow ''any'' user to execute the <tt>shutdown</tt> command if he is logged on locally is: 

{{CodeBox|title=일부 사용자에게 shutdown 실행 허가|lang=bash|1=
ALL  localhost = /sbin/shutdown
}}

Another example is to allow the user <tt>larry</tt> to execute the <tt>emerge</tt> command as root, regardless of where he is logged in from: 

{{CodeBox|title=위치에 상관 없이 사용자에게 프로그램 실행 허가|1=
larry   ALL = /usr/bin/emerge
}}

More interesting is to define a set of users who can run software administrative applications (such as <tt>emerge</tt> and <tt>ebuild</tt>) on the system and a group of administrators who can change the password of any user, except root! 

{{CodeBox|title=사용자와 명령에 별칭 사용|1=
User_Alias  SOFTWAREMAINTAINERS = swift, john, danny
User_Alias  PASSWORDMAINTAINERS = swift, sysop
Cmnd_Alias  SOFTWARECOMMANDS    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  PASSWORDCOMMANDS    = /usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root
  
SOFTWAREMAINTAINERS  localhost = SOFTWARECOMMANDS
PASSWORDMAINTAINERS  localhost = PASSWORDCOMMANDS
}}

=== 비 루트 실행 ===

It is also possible to have a user run an application as a different, non-root user. This can be very interesting if you run applications as a different user (for instance <tt>apache</tt> for the web server) and want to allow certain users to perform administrative steps as that user (like killing zombie processes). 

Inside {{Path|/etc/sudoers}} you list the user(s) in between <code>(</code> and <code>)</code> before the command listing: 

{{CodeBox|title=비 루트 실행 문법|1=
users  hosts = (run-as) commands
}}

For instance, to allow <tt>larry</tt> to run the <tt>kill</tt> tool as the <tt>apache</tt> or <tt>gorg</tt> user: 

{{CodeBox|title=비 루트 실행 예제|1=
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill
  
larry   ALL = (apache, gorg) KILL
}}

With this set, the user can run <tt>sudo -u</tt> to select the user he wants to run the application as: 

{{Cmd|sudo -u apache pkill apache}}

You can set an alias for the user to run an application as using the <code>Runas_Alias</code> directive. Its use is identical to the other <code>_Alias</code> directives we have seen before. 

=== 암호 및 기본 설정 ===

By default, <tt>sudo</tt> asks the user to identify himself using his own password. Once a password is entered, <tt>sudo</tt> remembers it for 5 minutes, allowing the user to focus on his tasks and not repeatedly re-entering his password. 

Of course, this behavior can be changed: you can set the <code>Defaults:</code> directive in {{Path|/etc/sudoers}} to change the default behavior for a user. 

기본 5분값을 0(기억하지 않음)으로 바꾸려면: 

{{CodeBox|title=제한 시간 값 바꾸기|1=
Defaults:larry  timestamp_timeout=0
}}

A setting of <code>-1</code> would remember the password indefinitely (until the system reboots). 

A different setting would be to require the password of the user that the command should be run as and not the users' personal password. This is accomplished using <code>runaspw</code>. In the following example we also set the number of retries (how many times the user can re-enter a password before <tt>sudo</tt> fails) to <code>2</code> instead of the default 3: 

{{CodeBox|title=사용자 명령 대신 루트 암호 요구|1=
Defaults:john   runaspw, passwd_tries=2
}}

Another interesting feature is to keep the <code>DISPLAY</code> variable set so that you can execute graphical tools: 

{{CodeBox|title=DISPLAY 변수 값 유지|1=
Defaults:john env_keep=DISPLAY
}}

You can change dozens of default settings using the <code>Defaults:</code> directive. Fire up the <tt>sudoers</tt> manual page and search for <code>Defaults</code>. 

If you however want to allow a user to run a certain set of commands without providing any password whatsoever, you need to start the commands with <code>NOPASSWD:</code>, like so: 

{{CodeBox|title=암호를 묻지 않고 루트 권한으로 emerge 를 실행하도록 허용|1=
larry     localhost = NOPASSWD: /usr/bin/emerge
}}

=== 배시 자동 완성 ===

sudo에 bash 명령 완성 기능을 사용하려는 사용자는 다음 명령을 한번 실행하십시오.

{{Cmd|sudo echo "complete -cf sudo" >> $HOME/.bashrc}}

=== Z쉘 명령 완성 ===

sudo에 zsh 명령 완성 기능을 사용하려는 사용자는 {{Path|.zprofile}} 와 {{Path|.zshrc}}에 각각 다음 내용을 설정할 수 있습니다

{{FileBox|filename=.zprofile|title=zshell 명령 완성 추가|lang=bash|1=
if [[ $EUID != 0 ]]; then
    typeset -xT SUDO_PATH sudo_path
    typeset -U sudo_path 
    sudo_path=({,/usr/local,/usr}/sbin(N-/))
    alias sudo="sudo env PATH=\"SUDO_PATH:$PATH\""
fi
}}

{{FileBox|filename=.zshrc|title=zshell 명령 완성 추가|lang=bash|1=
zstyle ':completion:*:sudo:*' environ PATH="$SUDO_PATH:$PATH"
}}

위 내용으로 바꾸면, {{Path|/sbin}}, {{Path|/usr/sbin}}, {{Path|/usr/local/sbin}} 위치에 있는 값은 'sudo' 다음에 놓은 명령에 대한 명령 완성 기능을 쉘에서 사용할 수 있습니다.

== 사용법 ==

=== 권한 확인 ===

자신의 권한을 알아보려면 {{c|sudo -l}}를 실행하십시오: 

{{Cmd|sudo -l|output=<pre>
User larry may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z0-9_-]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
</pre>
}}

{{Path|/etc/sudoers}} 에 암호를 입력할 필요가 없는 명령이 있다면, 항목에 있는 명령에 암호를 요구하지 않습니다. 그렇지 않아 항목에 없어 기억하지 않으면 암호를 물어봅니다. 

=== 암호 입력 제한 시간 미리 연장 ===

기본적으로 사용자가 {{c|sudo}}로 자신의 암호로 진입하면 5초간 기억합니다. 사용자가 이 기간보다 더 길게 세션을 유지하길 바란다면 {{c|sudo}}에서 암호를 다시 묻기 전에 {{c|sudo -v}} 명령을 실행하여 타임 스탬프를 다시 설정하고, 5분을 다시 세도록 할 수 있습니다. 

{{Cmd|sudo -v}}

반대로, {{c|sudo -k}} 명령으로 타임스탬프를 없앨 수 있습니다. 


[[Category:Software]]
