<languages />

Ce guide vous explique comment créer et configurer des nœuds sans disque avec Gentoo Linux.

== Introduction ==

=== À propos de ce guide ===

Ce guide vous aide à configurer des stations ''sans disque'' utilisant la distribution Gentoo Linux. Nous essayons de rendre ce guide aussi facile d'utilisation que possible  et apportons à nouveau venu à Linux tout ce dont il a besoin, parce que chacun d'entre nous en a été un d'une certaine manière. Alors qu'un utilisateur expérimenté pourrait très facilement faire la synthèse des nombreux guides disponibles sur les nœuds sans disque et la mise en réseau, nous espérons que ce guide facilitera l'installation pour tous les utilisateurs intéressés, qu'ils soient chevronnés ou pas. 

=== Qu'est-ce qu'une machine sans disque ? ===

Une machine sans disque est un PC dépourvu des périphériques de démarrage habituels tels que des disques durs, des disquettes ou des CD-ROMs. Le nœud sans disque démarre à partir du réseau et nécessite un serveur qui lui fournit de l'espace de stockage tout comme le ferait un disque dur local. Désormais, nous appellerons le serveur ''maître'', et la machine sans disque l'''esclave''. Le nœud esclave a besoin d'un adaptateur réseau qui prend en charge le démarrage PXE ou Etherboot ; consultez [http://www.etherboot.org Etherboot.org] pour la liste des matériels prenant en charge cette fonctionnalité. La plupart des cartes modernes prennent en charge PXE et beaucoup d'adaptateurs embarqués sur les cartes mère feront aussi l'affaire. 

=== Avant de vous lancer ===

Vous devriez avoir Gentoo installé sur votre nœud ''maître'' et assez de place sur le ''maître'' pour y stocker le système de fichiers du nœud ''esclave'' que vous voulez héberger. Assurez-vous que vous disposez également d'une interface vers l'Internet séparée de la connexion au réseau local. 

== Configurer le maître et les esclaves ==

=== À propos des noyaux ===

Le noyau est le logiciel qui se trouve entre votre matériel et le reste du logiciel que vous avez chargé sur votre machine, essentiellement, le cœur d'un système d'exploitation basé sur un noyau. Lorsque votre ordinateur est démarré, le BIOS exécute les instructions trouvées dans l'espace de démarrage réservé de votre disque dur. Ces instructions sont typiquement un chargeur de démarrage qui charge votre noyau. Dès lors qu'il est chargé, le noyau prend en charge tous les processus. 

Pour plus d'informations sur les noyau et sur leur configuration, reportez-vous au [http://www.tldp.org/HOWTO/Kernel-HOWTO.html kernel HOWTO] . 

=== Configurer le noyau du maître  ===

Le noyau du maître peut être aussi important et aussi personnalisé que vous le souhaitez, mais il y a quelques options du noyau que vous devez sélectionner. Rendez-vous dans la configuration de votre noyau en tapant : 

{{RootCmd|cd /usr/src/linux
|make menuconfig}}

Vous devriez obtenir une interface graphique grise et bleue qui offre une alternative sûre à l'édition manuelle du fichier  {{Path|/usr/src/linux/.config}}. Si votre noyau fonctionne actuellement correctement, vous devriez en sauvegarder le fichier de configuration en sortant de l'interface et en tapant : 

{{RootCmd|cp .config .config_working}}

Rendez-vous dans les sous-menus suivants et assurez-vous que les items listés sont cochés  pour être compilés dans le noyau (pas en tant que module). Les options indiquées ci-dessous sont celles correspondant à un noyau de version 2.6.10. Si vous utilisez une version différente, le texte ou/et l'ordre des menus pourraient être différents. Assurez-vous que vous sélectionnez au moins les options indiquées ci-dessous. 

{{Kernel|Options du noyau du maître|<pre>
Code maturity level options  --->
  [*] Prompt for development and/or incomplete code/drivers
  
Device Drivers --->
  Networking options --->
    <*> Packet socket
    <*> Unix domain sockets
    [*] TCP/IP networking
    [*]   IP: multicasting
    [ ] Network packet filtering (replaces ipchains)
  
File systems --->
  Network File Systems  --->
    <*> NFS server support
    [*]   Provide NFSv3 server support
</pre>}}

Si vous voulez accéder à l'Internet via votre maître et/ou avoir un pare-feu sûr, assurez-vous d'ajouter la prise en charge des ''iptables''.

{{Kernel|Activer la prise en charge des iptables |<pre>
  [*] Network packet filtering (replaces ipchains)
  IP: Netfilter Configuration  --->
    <*> Connection tracking (required for masq/NAT)
    <*> IP tables support (required for filtering/masq/NAT)
</pre>
}}

Si vous voulez utiliser le filtrage des paquets, vous pouvez ajouter le reste des modules plus tard. Assurez-vous de lire le chapitre [http://www.gentoo.org//doc/fr/security/security-handbook.xml?part=1&chap=12 Pare-feu]  du manuel de sécurité Gentoo pour savoir comment configurer le filtrage de manière appropriée. 

{{Note|Ces options de configuration du noyau s'ajoutent aux options spécifiques à votre matériel, elles ne les remplacent pas.}}

Après avoir configuré le noyau maître, vous devez le compiler. Tapez ceci : 

{{RootCmd|make && make modules_install
|cp arch/i386/boot/bzImage /boot/bzImage-master}}

Ensuite, ajoutez une entrée pour ce nouveau noyau dans {{Path|lilo.conf}} ou {{Path|grub.conf}} selon le chargeur de démarrage que vous utilisez et faites de ce nouveau noyau le noyau par défaut. Maintenant que la nouvelle bzimage a été copiée dans votre répertoire ''boot'', il ne vous reste plus qu'à redémarrer le système afin de charger ces nouvelles options. 

=== À propos du noyau de l'esclave ===

Il est recommandé de compiler le noyau esclave sans module, c'est-à-dire avec les options compilées en dur parce qu'il est difficile et inutile de charger des modules lors d'un démarrage via le réseau. et parceDe plus, ce noyau doit être aussi compact que possible pour démarrer plus rapidement. Nous allons compiler le noyau esclave au même endroit que le noyau maître. 

Pour éviter toute confusion et toute perte de temps, il vaut mieux garder une copie de la configuration du noyau maître comme ceci : 

{{RootCmd|cp /usr/src/linux/.config /usr/src/linux/.config_master}}

Nous devons maintenant configurer le noyau des nœuds esclaves de la même façon que pour le noyau maître. Si vous préférez repartir d'une configuration vierge, vous pouvez réinitialiser {{Path|/usr/src/linux/.config}} comme ceci : 

{{RootCmd|cd /usr/src/linux
|cp .config_master .config}}

Ensuite, utilisez l'interface de configuration en tapant : 

{{RootCmd|cd /usr/src/linux
|make menuconfig}}

Assurez-vous que les options suivantes sont sélectionnées pour une compilation dans le noyau et PAS comme module : 

{{Kernel|Options du noyau des esclaves|<pre>
Code maturity level options  --->
  [*] Prompt for development and/or incomplete code/drivers
  
Device Drivers --->
  [*] Networking support
  Networking options --->
    <*> Packet socket
    <*> Unix domain sockets
    [*] TCP/IP networking
    [*]   IP: multicasting
    [*]   IP: kernel level autoconfiguration
    [*]     IP: DHCP support (NEW)
  
File systems --->
  Network File Systems  --->
    <*> file system support
    [*]   Provide NFSv3 client support
    [*]   Root file system on NFS
</pre>
}}

{{Note| Configurer un serveur BOOTP est une alternative au serveur DHCP.}}

{{Important|I Il est important de compiler votre adaptateur réseau dans le noyau des nœuds (plutôt que d'en faire un module). Toutefois, l'utilisation de modules pour les nœuds diskless n'est généralement pas un problème.}}

Compilons le noyau esclave. Vous devez prendre garde à ne pas écraser les modules que vous avez compilés pour le nœud maître. Faites : 

{{RootCmd|cd /usr/src/linux
|make}}

Maintenant, créez le répertoire qui va accueillir le système de fichiers des nœuds esclaves sur le maître et copiez-y le fichier bzImage. Nous utilisons  {{Path|/diskless}}, mais vous pouvez utiliser un autre nom. 


{{Note|Si vous utilisez plusieurs architectures, vous voudrez peut-être sauvegarder chaque fichier config sous le nom {{Path|.config_arch}} . Faites de même avec les images : sauvegardez chacune d'elles dans le répertoire {{Path|/diskless}} sous le nom  {{Path|bzImage_arch}}.}}


{{RootCmd|mkdir /diskless
|cp /usr/src/linux/arch/i386/boot/bzImage /diskless}}

=== Configurer un système de fichiers préliminaire pour l'esclave ===

Les systèmes de fichiers des nœuds maître et esclaves peuvent subir de nombreuses adaptations. Concentrons-nous d'abord sur les fichiers de configuration et les points de montage. Nous avons besoin d'un répertoire sous {{Path|/diskless}}  pour le premier nœud esclave. Chaque esclave a besoin de son propre système de fichiers racine (''root'') parce que certains fichiers ne peuvent pas être communs à plusieurs machines sans causer de graves problèmes. Peu importe les noms des sous-répertoires, vous pouvez, par exemple, les nommer d'après les adresses IP, car elles sont uniques et évitent les confusions. Dans cet exemple, l'adresse IP du premier nœud esclave est <code>192.168.1.21</code> : 

{{RootCmd|mkdir /diskless/192.168.1.21}}

Certains fichiers de configuration de {{Path|/etc}} doivent être modifiés pour les esclaves. Copiez d'abord le répertoire {{Path|/etc}}  du maître dans le nouveau répertoire destiné au nœud esclave : 

{{RootCmd|cp -r /etc /diskless/192.168.1.21/etc}}

Le système de fichiers est encore incomplet, il lui manque différents points de montage. Pour les créer tapez : 

{{RootCmd|mkdir /diskless/192.168.1.21/home
|mkdir /diskless/192.168.1.21/dev
|mkdir /diskless/192.168.1.21/proc
|mkdir /diskless/192.168.1.21/tmp
|mkdir /diskless/192.168.1.21/mnt
|chmod a+w /diskless/192.168.1.21/tmp
|mkdir /diskless/192.168.1.21/mnt/.initd
|mkdir /diskless/192.168.1.21/root}}

{{RootCmd|mkdir /diskless/192.168.1.21/sys
|mkdir /diskless/192.168.1.21/var
|mkdir /diskless/192.168.1.21/var/empty
|mkdir /diskless/192.168.1.21/var/lock
|mkdir /diskless/192.168.1.21/var/log
|mkdir /diskless/192.168.1.21/var/run
|mkdir /diskless/192.168.1.21/var/spool
|mkdir /diskless/192.168.1.21/usr
|mkdir /diskless/192.168.1.21/opt
}}

La plupart de ces noms devraient vous être familiers. Les points tels que {{Path|/dev}} , {{Path|/proc}} ou {{Path|/sys}} seront utilisés au démarrage de l'esclave, les autres seront montés un peu plus tard. Vous devez également indiquer le nom de machine de l'esclave dans le fichier {{Path|/diskless/192.168.1.21/etc/conf.d/hostname}} . Les programmes, bibliothèques et autres fichiers seront copiés au bon endroit plus loin dans ce guide. En fait, ce sera juste avant de démarrer l'esclave. 

Bien que les fichiers de périphériques de {{Path|/dev}}  soient créés par <code>udev</code>  plus loin, vous devez créer l'entrée {{Path|console}}. Si vous ne le faites pas, vous verrez l'erreur ''« unable to open initial console »''. 

{{RootCmd|mknod /diskless/192.168.1.21/dev/console c 5 1}}

== Configurer le  serveur DHCP  ==

=== À propos du serveur DHCP  ===

DHCP signifie ''Dynamic Host Configuration Protocol'' (protocole dynamique de configuration des hôtes). Le serveur DHCP est le premier ordinateur contacté par les nœuds esclaves quand ils démarrent par le système PXE via le réseau. La principale fonction d'un serveur DHCP est d'attribuer des adresses IP. Un tel serveur peut attribuer des adresses en se basant sur les adresses MAC des cartes réseau (N.D.T. : l'adresse MAC est censée être unique pour chaque carte sur le marché et est attribuée par le constructeur). Une fois l'adresse attribuée, le serveur DHCP indique au nœud esclave où il peut obtenir son noyau et son système de fichiers préliminaire. 

=== Avant de commencer ===

Vous devez vérifier plusieurs choses avant de poursuivre. D'abord, vérifions si votre connexion réseau fonctionne : 

{{RootCmd|ifconfig eth0 multicast
|ifconfig -a}}

Vous devez vérifier que vous avez un périphérique ''eth0'' qui fonctionne. Vous devriez voir quelque chose comme ceci : 

{{Code|Un périphérique eth0 fonctionnant correctememt |<pre>
eth0      Link encap:Ethernet  HWaddr 00:E0:83:16:2F:D6
          inet addr:192.168.1.1  Bcast:192.168.1.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:26460491 errors:0 dropped:0 overruns:2 frame:0
          TX packets:32903198 errors:0 dropped:0 overruns:0 carrier:1
          collisions:0 txqueuelen:100
          RX bytes:2483502568 (2368.4 Mb)  TX bytes:1411984950 (1346.5 Mb)
          Interrupt:18 Base address:0x1800
</pre>
}}

L'option MULTICAST est essentielle. Si vous ne l'avez pas, vous devez recompiler votre noyau avec cette option activée dans sa configuration. 

=== Installer le serveur  DHCP ===

Si votre réseau n'a pas encore de serveur DHCP, vous devez en installer un : 

{{Emerge|dhcp}}

Si un serveur DHCP est déjà installé sur votre réseau, vous devez modifier sa configuration pour permettre un démarrage via PXE. 

=== Configurer le serveur  ===

Le serveur DHCP est configuré grâce au seul fichier {{Path|/etc/dhcp/dhcpd.conf}}. Le répertoire{{Path|/etc/dhcp}} devrait contenir un exemple que vous pouvez utiliser comme point de départ : 

{{RootCmd|cp /etc/dhcp/dhcpd.conf.sample /etc/dhcp/dhcpd.conf
|nano -w /etc/dhcp/dhcpd.conf}}

Le fichier de configuration est organisé et indenté comme ceci : 

{{Code|Exemple de présentation du  dhcpd.conf |<pre>
# global options here
ddns-update-style none;
shared-network LOCAL-NET {
  # shared network options here
  subnet 192.168.1.0 netmask 255.255.255.0 {
    # subnet network options here
    host slave{
        # host specific options here
    }
    group {
        # group specific options here
    }
  }
}
</pre>
}}

La mention <code>shared-network</code> est facultative et est réservée pour des adresses IP que vous voulez attribuer aux nœuds qui font partie de votre réseau. Vous devez avoir au moins une section <code>subnet</code> et la section facultative <code>group</code>  permet de définir des options communes aux nœuds spécifiés dans la section <code>subnet</code>. Voici un exemple de {{Path|dhcpd.conf}} complet : 

{{Code|Exemple de fichier dhcpd.conf|<pre>
#
# Exemple de fichier  dhcpd.conf pour les clients sans disque
#
  
# Désactiver le  DNS dynamique
ddns-update-style none;
  
# Supposons qu'une passerelle par défaut pour le trafic IP suffise 
option routers 192.168.1.1;
  
# Procure les information DNS aux clients
option domain-name-servers 192.168.1.1;
option domain-name "mydomain.com";
  
# Spécifie le serveur TFTP à utiliser
next-server 192.168.1.1;
  
# Declare une option de  tampon spécifique au constructeur pour les clients  PXE :
# Code 1: adress IP Multicast du serveur de fichier de démarrage 
# Code 2: port UDP que le clien devrait surveiller pour les réponse MTFTP
# Code 3: port UDP que les serveurs  MTFTP utilisent pour écouter les requêtes  MTFTP 
# Code 4: Nombre de secondes pendant lesquelles un client doit écouter avant d'essayer
#  de  démarrer un nouveau transfert  MTFTP 
# Code 5: Nombre de secondes pendant lesquelles un client doit écouter avant d'essayer
#  de redémarrer un  transfert  MTFTP 
  
option space PXE;
option PXE.mtftp-ip               code 1 = ip-address;
option PXE.mtftp-cport            code 2 = unsigned integer 16;
option PXE.mtftp-sport            code 3 = unsigned integer 16;
option PXE.mtftp-tmout            code 4 = unsigned integer 8;
option PXE.mtftp-delay            code 5 = unsigned integer 8;
option PXE.discovery-control      code 6 = unsigned integer 8;
option PXE.discovery-mcast-addr   code 7 = ip-address;
  
# Déclare le sous-réseau où se trouvera notre nœud sans disque 
subnet 192.168.1.0 netmask 255.255.255.0 {
  
  # Procure aux clients PXE l'information appropriée
  class "pxeclient" {
    match if substring(option vendor-class-identifier, 0, 9) = "PXEClient";
    vendor-option-space PXE;
  
    # Au moins une option PXE spécifique au constructeur  doit être définie
    # afin que la ROM de démarrage du client  réalise que nous adhérons au protocole  PXE
    # serveur.  Nous définissons l'adresse IP MCAST à  0.0.0.0 pour dire à la ROM de démarrage 
    # que nous ne pouvons pas fournir le  multicast TFTP.
  
    option PXE.mtftp-ip 0.0.0.0;
  
    # Le nom du fichier que la ROM de démarrage devrait télécharger.
    filename "pxelinux.0";
  }
  
  # Procure aux clients  Etherboot l'information appropriée
  class "etherboot" {
    match if substring(option vendor-class-identifier, 0, 9) = "Etherboot";
    filename "vmlinuz_arch";
  }
  
  # Ajoutez une déclaration d'hôte pour chacun des hôtes sans disque
  host slave21 {
    hardware ethernet 00:02:A5:04:3B:66;
    fixed-address 192.168.1.21;
  }
}
</pre>
}}

{{Note| Rien n'empêche d'utiliser PXE boot et Etherboot ensemble. L'exemple ci-dessus est un exemple ; en cas de problème, veuillez consulter la documentation de DHCPd.}}

L'option  <code>next-server</code> indique l'adresse IP de la machine à laquelle le nœud esclave doit demander le fichier <code>filename</code> après avoir reçu son adresse IP. Cette adresse est l'adresse du serveur TFTP, généralement la même que celle du nœud maître. Le nom du fichier spécifié dans l'option <code>filename</code>  est relatif au répertoire {{Path|/diskless}} si votre serveur TFTP est configuré comme indiqué plus loin dans ce guide. La section <code>host</code>  contient l'adresse matérielle (ou « MAC address ») de votre carte réseau et l'option <code>fixed-address</code>  permet d'y associer l'adresse IP spécifiée. L'ensemble des options du fichier {{Path|dhcpd.conf}} n'ont pas leur place dans ce guide, mais sont évidemment disponibles dans les pages man. 

{{Cmd|man dhcpd.conf}}

=== Démarrer le serveur DHCP ===

Avant de lancer le script d'initialisation de DHCP, vous devez modifier le fichier {{Path|/etc/conf.d/dhcp}} pour qu'il ressemble à ceci : 

{{Code|Exemple de fichier /etc/conf.d/dhcp|<pre>
IFACE="eth0"
# Insert any customizations needed
</pre>
}}

La variable <code>IFACE</code> indique le péripherique réseau sur lequel votre serveur DHCP va tourner. Dans notre cas, c'est <code>eth0</code>. Il peut être intéressant d'ajouter des valeurs à <code>IFACE</code> si le serveur est équipé de plusieurs cartes réseau. Pour démarrer le serveur DHCP, faites : 

{{RootCmd|/etc/init.d/dhcp start}}

Pour faire démarrer le serveur DHCP automatiquement par votre machine, faites : 

{{RootCmd|rc-update add dhcp default}}

=== Dépanner le serveur  DHCP ===

Quand un nœud esclave démarre correctement, vous devriez voir des messages ressemblant à ce qui suit  à la fin du fichier {{Path|/var/log/messages}} sur le maître : 

{{Code|Exemple d'entrée de journalisation créée par dhcp|<pre>
DHCPDISCOVER from 00:00:00:00:00:00 via eth0
DHCPOFFER on 192.168.1.21 to 00:00:00:00:00:00 via eth0
DHCPREQUEST for 192.168.1.21 from 00:00:00:00:00:00 via eth0
DHCPACK on 192.168.1.21 to 00:00:00:00:00:00 via eth0
</pre>
}}

{{Note|Ce fichier peut aussi vous aider à trouver les adresses MAC des nœuds esclaves.}}

Si vous voyez le message ci-dessous, cela indique que le serveur DHCP émet bien sur le réseau, mais qu'il y a une erreur dans le fichier de configuration. 

{{Code|Exemple d'erreur du serveur dhpc |<pre>
no free leases on subnet LOCAL-NET
</pre>
}}

Chaque fois que vous modifiez le fichier de configuration, vous devez relancer le serveur DHCP comme ceci : 

{{RootCmd|/etc/init.d/dhcpd restart}}

== Configurer le serveur TFTP et le chargeur de démarrage  Linux PXE et/ou Etherboot ==

=== À propos du serveur TFTP   ===

TFTP signifie « ''Trivial File Transfer Protocol'' ». Le serveur TFTP va fournir un noyau et un système de fichiers aux nœuds esclaves. Tous les noyaux des esclaves et leur système de fichiers seront stockés sur le serveur TFTP. Il est donc recommandé de l'installer sur le nœud maître. 

=== Installer le serveur TFTP  ===

Un serveur TFTP reconnu est celui compris dans le paquet tftp-hpa. Il se trouve qu'il a été écrit par le même auteur que SYSLINUX et ils fonctionnent très bien ensemble. Faites : 

{{Emerge|tftp-hpa}}

=== Configurer le serveur TFTP  ===

Modifiez le fichier {{Path|/etc/conf.d/in.tftpd}}. Vous devez y indiquer le répertoire principal servi par le serveur TFTP avec l'option <code>INTFTPD_PATH</code> . Les éventuelles options de la ligne de commande utilisée pour lancer le serveur viennent après  <code>INTFTPD_OPTS</code>. Votre fichier devrait ressembler à ceci : 

{{Code| Exemple de fichier /etc/conf.d/in.tftpd|<pre>
INTFTPD_PATH="/diskless"
INTFTPD_OPTS="-l -v -s ${INTFTPD_PATH}"
</pre>
}}

L'option <code>-l</code> indique que le serveur doit écouter lui-même sur le réseau, ce qui vous évite d'utiliser inetd. L'option <code>-v</code> demande au serveur de fournir plus de messages dans son journal. L'option <code>-s </code> spécifie le répertoire racine du serveur. 

=== Démarrer le serveur TFTP ===

Pour démarrer le serveur tftp tapez : 

{{RootCmd|/etc/init.d/in.tftpd start}}

Ce script va lancer le serveur TFTP avec les options spécifiées dans le fichier {{Path|/etc/conf.d/in.tftpd}}. Si voulez que le serveur TFTP soit lancé au démarrage de votre machine, faites : 

{{RootCmd|rc-update add in.tftpd default}}

=== About PXELINUX ===

This section is not required if you are only using Etherboot. PXELINUX is the network bootloader equivalent to LILO or GRUB and will be served via TFTP. It is essentially a tiny set of instructions that tells the client where to locate its kernel and initial filesystem and allows for various kernel options. 

=== Before you get started ===

You will need to get the pxelinux.0 file which comes in the SYSLINUX package by H. Peter Anvin. You can install this package by typing: 

{{Emerge|syslinux}}

=== Setting up PXELINUX ===

{{Note|This isn't needed for Etherboot}}

Before you start your tftp server you need to setup pxelinux. First copy the pxelinux binary into your {{Path|/diskless}} directory: 

{{RootCmd|cp /usr/share/syslinux/pxelinux.0 /diskless
|mkdir /diskless/pxelinux.cfg
|touch /diskless/pxelinux.cfg/default}}

This will create a default bootloader configuration file. The binary {{Path|pxelinux.0}} will look in the {{Path|pxelinux.cfg}} directory for a file whose name is the client's IP address in hexadecimal. If it does not find that file it will remove the rightmost digit from the file name and try again until it runs out of digits. Versions 2.05 and later of syslinux first perform a search for a file named after the MAC address. If no file is found, it starts the previously mentioned discovery routine. If none is found, the {{Path|default}} file is used. 

{{Code|Files that PXE looks for in pxelinux.cfg/ in sequence|<pre>
## (Leading 01 means Ethernet, next bytes match our slave's MAC address)
01-00-40-63-c2-ca-c9
  
## (Assigned IP in hexadecimal)
C0A80115
C0A8011
C0A801
C0A80
C0A8
C0A
C0
C
  
default
</pre>
}}

{{Note|These are all in lowercase.}}

Let's start with the {{Path|default}} file: 

{{Code|Sample pxelinux.cfg/default|<pre>
DEFAULT /bzImage
APPEND ip=dhcp root=/dev/nfs nfsroot=192.168.1.1:/diskless/192.168.1.21
</pre>
}}

The <code>DEFAULT</code> tag directs pxelinux to the kernel bzImage that we compiled earlier. The <code>APPEND</code> tag appends kernel initialisation options. Since we compiled the slave kernel with <code>NFS_ROOT_SUPPORT</code> , we will specify the nfsroot here. The first IP is the master's IP and the second IP is the directory that was created in {{Path|/diskless}} to store the slave's initial filesystem. 

=== About Etherboot ===

{{Note|This isn't required if you are using PXE boot.}}

Etherboot boots network boot images from a TFTP server. As the PXE this is equivalent to LILO or GRUB. The <code>mknbi</code> utility enables you to create different images using different options. 

=== Before you get started ===

You will need to get the <code>mknbi</code> (utility for making tagged kernel images useful for netbooting) package to create your Etherboot images. This tool will create a preconfigured kernel image from your original kernel. This contains the boot options as shown further down. 

{{Emerge|mknbi}}

=== Setting up Etherboot ===

In this section we will create a simple etherboot image. As the dhcp server gives out the clients root-path in the "option root-path" dhcp.conf, we do not have to include this here. More details can be found in the mknbi manual. 

{{Cmd|man mknbi}}

Making the boot images. This will create a ELF bootable image capable of passing dhcp and the rootpath to the kernel. Also forcing the kernel to browse the network for a dhcp server. 

{{RootCmd|mkelf-linux -ip{{=}}dhcp /diskless/bzImage > /diskless/vmlinuz }}

{{Note|For the arch specific images you have to type <code>bzImage_arch</code> and <code>vmlinuz_arch</code> .}}

=== Troubleshooting the network boot process ===

There are a few things you can do to debug the network boot process. Primarily you can use a tool called <code>tcpdump</code> . To install <code>tcpdump</code> type: 

{{Emerge|tcpdump}}

Now you can listen to various network traffic and make sure your client/server interactions are functioning. If something isn't working there are a few things you might want to check. First make sure that the client/server is physically connected properly and that the networking cables are not damaged. If your client/server is not receiving requests on a particular port make sure that there is no firewall interference. To listen to interaction between two computers type: 

{{RootCmd|tcpdump host client_ip and server_ip}}

You can also use <code>tcpdump</code> to listen on particular port such as the tftp port by typing: 

{{RootCmd|tcpdump port 69}}

A common error you might receive is: "PXE-E32: TFTP open time-out". This is probably due to firewall issues. If you are using <code>TCPwrappers</code> , you might want to check {{Path|/etc/hosts.allow}} and {{Path|etc/hosts.deny}} and make sure that they are configured properly. The client should be allowed to connect to the server. 

== Configuring the NFS server ==

=== About the NFS server ===

NFS stands for Network File System. The NFS server will be used to serve directories to the slave. This part can be somewhat personalized later, but right now all we want is a preliminary slave node to boot diskless. 

=== About Portmapper ===

Various client/server services do not listen on a particular port, but instead rely on RPCs (Remote Procedure Calls). When the service is initialised it listens on a random port and then registers this port with the Portmapper utility. NFS relies on RPCs and thus requires Portmapper to be running before it is started. 

=== Before you start ===

The NFS Server needs kernel level support so if you don't have this you should recompile your master's kernel. To double check your master's kernel configuration type: 

{{RootCmd|grep NFS /usr/src/linux/.config_master}}

You should see output that looks something like this if your kernel has been properly configured: 

{{Kernel|Proper NFS specific options in the master's kernel configuration|<pre>
CONFIG_PACKET=y
# CONFIG_PACKET_MMAP is not set
# CONFIG_NETFILTER is not set
CONFIG_NFS_FS=y
CONFIG_NFS_V3=y
# CONFIG_NFS_V4 is not set
# CONFIG_NFS_DIRECTIO is not set
CONFIG_NFSD=y
CONFIG_NFSD_V3=y
# CONFIG_NFSD_V4 is not set
# CONFIG_NFSD_TCP is not set
</pre>
}}

=== Installing the NFS server ===

The NFS package that can be acquired through portage by typing: 

{{Emerge|nfs-utils}}

This package will emerge a portmapping utility, nfs server, and nfs client utilities and will automatically handle initialisation dependencies. 

=== Configuring the NFS server ===

There are three major configuration files you will have to edit: 

{{Code|Nfs configuration files|<pre>
/etc/exports
/diskless/192.168.1.21/etc/fstab
/etc/conf.d/nfs
</pre>
}}

The {{Path|/etc/exports}} file specifies how, to who and what to export through NFS. The slave's fstab will be altered so that it can mount the NFS filesystems that the master is exporting. 

A typical {{Path|/etc/exports}} for the master should look something like this: 

{{Code|Sample master /etc/exports|<pre>
# one line like this for each slave
/diskless/192.168.1.21   192.168.1.21(sync,rw,no_root_squash,no_all_squash)
# common to all slaves
/opt   192.168.1.0/24(sync,ro,no_root_squash,no_all_squash)
/usr   192.168.1.0/24(sync,ro,no_root_squash,no_all_squash)
/home  192.168.1.0/24(sync,rw,no_root_squash,no_all_squash)
# if you want to have a shared log
/var/log   192.168.1.21(sync,rw,no_root_squash,no_all_squash)
</pre>
}}

The first field indicates the directory to be exported and the next field indicates to who and how. This field can be divided in two parts: who should be allowed to mount that particular directory, and what the mounting client can do to the filesystem: <code>ro</code> for read only, <code>rw</code> for read/write; <code>no_root_squash</code> and <code>no_all_squash</code> are important for diskless clients that are writing to the disk, so that they don't get "squashed" when making I/O requests. The slave's fstab file, {{Path|/diskless/192.168.1.21/etc/fstab}} , should look like this: 

{{Code|Sample slave fstab|<pre>
# these entries are essential
master:/diskless/192.168.1.21   /         nfs     sync,hard,intr,rw,nolock,rsize=8192,wsize=8192    0 0
master:/opt                     /opt      nfs     sync,hard,intr,ro,nolock,rsize=8192,wsize=8192    0 0
master:/usr                     /usr      nfs     sync,hard,intr,ro,nolock,rsize=8192,wsize=8192    0 0
master:/home                    /home     nfs     sync,hard,intr,rw,nolock,rsize=8192,wsize=8192    0 0
none                            /proc     proc    defaults                                     0 0
# useful but superfluous
master:/var/log                 /var/log  nfs     hard,intr,rw                                 0 0
</pre>
}}

In this example, ''master'' is just the hostname of the master but it could easily be the IP of the master. The first field indicates the directory to be mounted and the second field indicates where. The third field describes the filesystem and should be NFS for any NFS mounted directory. The fourth field indicates various options that will be used in the mounting process (see mount(1) for info on mount options). Some people have had difficulties with soft mount points so we made them all hard, but you should look into various {{Path|/etc/fstab}} options to make your cluster more efficient. 

The last file you should edit is {{Path|/etc/conf.d/nfs}} which describes a few options for nfs when it is initialised and looks like this: 

{{Code|Sample master /etc/conf.d/nfs|<pre>
# Config file for /etc/init.d/nfs
  
# Number of servers to be started up by default
RPCNFSDCOUNT=8
  
# Options to pass to rpc.mountd
RPCMOUNTDOPTS=""
</pre>
}}

You should change <code>RPCNFSDCOUNT</code> to the number of diskless nodes on the network. 

=== Starting the NFS server ===

You should start the nfs server with its init script located in {{Path|/etc/init.d}} by typing: 

{{RootCmd|/etc/init.d/nfs start}}

If you want to this script to start when the system boots simply type: 

{{RootCmd|rc-update add nfs default}}

== Completing the slave filesystem ==

=== Copy the missing files ===

We will now make the slave's file system in sync with the master's and provide the necessary binaries while still preserving slave specific files. 

{{RootCmd|rsync -avz /bin /diskless/192.168.1.21
|rsync -avz /sbin /diskless/192.168.1.21
|rsync -avz /lib /diskless/192.168.1.21}}

{{Note|The reason for rsync -avz instead of cp is to maintain symlinks and permissions.}}

=== Configure diskless networking ===

In order to prevent the networking initscript from killing the connection to your NFS server, you will need to add an option to {{Path|/etc/conf.d/net}} on your diskless client's filesystem. 

{{Code|Editing /etc/conf.d/net|<pre>
config_eth0=( "noop" )
</pre>
}}

{{Note|For more information, please read {{Path|/usr/share/doc/openrc-*/net.example.bz2}} .}}

=== Initialisation scripts ===

You need as many init scripts under {{Path|/diskless/192.168.1.21/etc/runlevels}} as you need services on your diskless nodes. It all depends on what you want your slaves to do. 

{{Warning|Do not use the <code>rc-update</code> program to add or remove scripts from the slave runlevels when logged on your master. This would change your master runlevels. You need to create the links manually or log into your slave nodes using ssh or connect a screen and keyboard to your slave.}}

{{Code|Typical slave runlevels|<pre>
/diskless/192.168.1.21/etc/runlevels/:
total 16
drwxr-xr-x    2 root     root         4096 2003-11-09 15:27 boot
drwxr-xr-x    2 root     root         4096 2003-10-01 21:10 default
drwxr-xr-x    2 root     root         4096 2003-03-13 19:05 nonetwork
drwxr-xr-x    2 root     root         4096 2003-02-23 12:26 single
  
/diskless/192.168.1.21/etc/runlevels/boot:
total 0
lrwxrwxrwx    1 root     root           20 2003-10-18 17:28 bootmisc -> /etc/init.d/bootmisc
lrwxrwxrwx    1 root     root           19 2003-10-18 17:28 checkfs -> /etc/init.d/checkfs
lrwxrwxrwx    1 root     root           17 2003-10-18 17:28 clock -> /etc/init.d/clock
lrwxrwxrwx    1 root     root           22 2003-10-18 17:28 domainname -> /etc/init.d/domainname
lrwxrwxrwx    1 root     root           20 2003-10-18 17:28 hostname -> /etc/init.d/hostname
lrwxrwxrwx    1 root     root           22 2003-10-18 17:28 localmount -> /etc/init.d/localmount
lrwxrwxrwx    1 root     root           19 2003-10-18 17:28 modules -> /etc/init.d/modules
lrwxrwxrwx    1 root     root           18 2003-10-18 17:28 net.lo -> /etc/init.d/net.lo
lrwxrwxrwx    1 root     root           20 2003-10-18 17:28 netmount -> /etc/init.d/netmount
lrwxrwxrwx    1 root     root           21 2003-10-18 17:28 rmnologin -> /etc/init.d/rmnologin
lrwxrwxrwx    1 root     root           19 2003-10-18 17:28 urandom -> /etc/init.d/urandom
  
/diskless/192.168.1.21/etc/runlevels/default:
total 0
lrwxrwxrwx    1 root     root           23 2003-10-18 17:28 consolefont -> /etc/init.d/consolefont
lrwxrwxrwx    1 root     root           19 2003-10-18 17:28 distccd -> /etc/init.d/distccd
lrwxrwxrwx    1 root     root           19 2003-10-18 17:28 keymaps -> /etc/init.d/keymaps
lrwxrwxrwx    1 root     root           17 2003-10-18 17:28 local -> /etc/init.d/local
lrwxrwxrwx    1 root     root           16 2003-10-18 17:28 sshd -> /etc/init.d/sshd
lrwxrwxrwx    1 root     root           21 2003-10-18 17:28 syslog-ng -> /etc/init.d/syslog-ng
lrwxrwxrwx    1 root     root           17 2003-10-18 17:28 vixie-cron -> /etc/init.d/vixie-cron
  
/diskless/192.168.1.21/etc/runlevels/nonetwork:
total 0
lrwxrwxrwx    1 root     root           17 2003-10-18 17:28 local -> /etc/init.d/local
  
/diskless/192.168.1.21/etc/runlevels/single:
total 0
</pre>
}}

Now is a good time to boot your slave and cross your fingers. It works? Congratulations, you are now the proud owner of (a) diskless node(s) :) 

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Michael Andrews
* Kristian Jerpetjoen
* Sven Vermeulen
* Xavier Neys
