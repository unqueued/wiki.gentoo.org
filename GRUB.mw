{{InfoBox stack
|{{InfoBox homepage|http://www.gnu.org/software/grub/grub-legacy.html|header=true}}
|{{InfoBox wikipedia|GNU_GRUB#GRUB version 1 (GRUB legacy)}}
|{{InfoBox odoc|http://gnu.org/software/grub/manual/legacy/}}
}}

{{Note|For GRUB version 2, see [[GRUB2]].}}

'''GRUB''' ('''GR'''and '''U'''nified '''B'''ootloader) is Gentoo's default [[bootloader]] on x86 and amd64. This article is about GRUB version 1, also known as Grub Legacy or Grub1. GRUB version 2 is a completely reworked and fundamentally different bootloader, and will not be covered in this article.

== Installation ==

=== USE flags ===

{{USEflag|package=sys-boot/grub}}

=== Emerge ===

{{Emerge|sys-boot/grub:0}}

Specifying slot 0 ensures that world updates will not install GRUB 2 (slot 2) unless specified.

== Configuration ==

=== Considerations ===

Hard Disk numbering starts from one.

Instead of installing GRUB in the MBR, it is possible to install to a partition.

GRUB gets boot information from the BIOS, and can chainload other boot loaders, even if Linux can't see them. An example is a BIOS supported software RAID. When a physical drive is set up as 2 logical drives, the second logical drive starts in the middle of the physical drives. Without dmraid, Linux does not see that second logical drive. But GRUB can chainload Windows on it.

If installing Windows and Linux on a computer with two drives, it may be desirable to install each OS on one of the disks. Before installing, change the boot order in the BIOS. After installation, make the Windows disk the second disk and use GRUB to chainload it. This way, by reinstalling Windows, the MBR of the first disk will not get affected and if GRUB can't boot, it is still possible to boot Windows by changing the boot order in the BIOS.

When chainloading Windows, GRUB needs to know the active Windows partition, which is not always the same as the partition which Windows labels as the ''startpartition''.

=== USB disks ===

The key to understand GRUB is to remember, in what environment GRUB is running.

Suppose there are 3 internal SATA disks. A Gentoo is running on them and the goal is to install GRUB now on an external USB hard disk to boot a version of Gentoo, which is installed on the second partition of the USB disk.

The Linux system has the following device names:

* {{Path|/dev/sda}}, {{Path|/dev/sdb}} and {{Path|/dev/sdc}}: internal drives
* {{Path|/dev/sdd}}: USB disk

The configuration of GRUB, which is read while booting, is stored in {{Path|/boot/grub/grub.conf}}. {{Path|menu.lst}} in the same directory is a symlink to {{Path|grub.conf}}.

The kernel and the Linux system of the USB drive is installed in {{Path|/dev/sdd2}}. Following the example, now edit {{Path|/mnt/sdd2/boot/grub/grub.conf}}, if the mounted USB partition is on {{Path|/mnt/sdd2}}.

When GRUB boots from the USB disk, for GRUB itself it is the first hard disk. It should be written in {{Path|grub.conf}}:

{{FileBox|filename=grub.conf|1=
default 0
timeout 10

title gentoo USB
root (hd0,1)
kernel /boot/kernel-3.4.9 rootwait root=/dev/sdd2
}}

In contrast, the kernel sees the USB disk as {{Path|/dev/sdd}}, the <code>root=</code> kernel parameter has to contain <code>/dev/sdd2</code>.

{{Tip|The <code>rootwait</code> parameter can be passed so that the kernel will wait until the USB disk is ready. The same applies for the installation of GRUB.}}

Here pass GRUB the names, under which Linux sees it now. First chroot into {{Path|/mnt/sdd2}}. Fire up GRUB, passing the root of the USB Linux with

{{Cmd
|root (hd3,1)
|prompt=grub>
|color=white
}}

Then tell GRUB to install on the MBR of the USB disk with:

{{Cmd
|setup (hd3)
|prompt=grub>
|color=white
}}

Consequence: To boot the USB disk, regardless of how many disks are installed, there is a requirement of using an initramfs or something else.

If the <code>root=</code> parameter doesn't match the actual configuration, all is not lost. It is possible to edit the lines before booting.
How this can be done, is explained in
[[Knowledge Base:Adjusting GRUB settings for a single boot session]]

To get the USB disk boot without initramfs regardless of the number of installed disks, use a GPT partition table and the <code>root=PARTUUID=</code> kernel parameter as explained in this external link:
[https://archives.gentoo.org/gentoo-user/message/35eb3187ef8be8a23cdec253b66b5a59 Mounting root partition by UUID (no initrd needed)] 

Since kernel 3.8 and newer it is possible to use MBR 32-bit UUID, so it's possible to use a MBR partition table as well.

In this case PARTUUID refer to an MBR partition using the format SSSSSSSS-PP, where SSSSSSSS is a zero-filled hex representation of the 32-bit "NT disk signature", and PP is a zero-filled hex representation of the 1-based partition number.

To get "NT disk signature" one possibility is using fdisk:
{{RootCmd|fdisk -l /dev/sdd}}
The output will be something like <code>Disk identifier: 0x2d6b036c</code>, so assuming root partition is {{Path|/dev/sdd2}}, the resulting line will be <code>root=PARTUUID=2d6b036c-02</code><br />
More info is available here: [http://lxr.linux.no/#linux+v3.8/init/do_mounts.c#L190 Description of PARTUUID feature]

=== Using LABEL or UUID ===

Kernel boot parameters are <code>real_root=LABEL=</code> or <code>real_root=UUID=</code>.

Requires [[initramfs]].

Refer to [[Install Gentoo on a bootable USB stick]] for examples using lilo or sylinux.

== See also ==

* [[GRUB Error Reference]]
* [[Knowledge_Base:Adjusting_GRUB_settings_for_a_single_boot_session|Adjusting GRUB settings for a single boot session]]
* [[Install_Gentoo_on_a_bootable_USB_stick|Install Gentoo on a bootable USB stick]]
* [[GRUB2]] - Grub version 2.

[[Category:Bootloaders]]
