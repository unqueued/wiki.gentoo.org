<languages/>

{{InfoBox stack
|{{InfoBox homepage|http://www.linux-pam.org/|header=true}}
|{{InfoBox wikipedia|Linux_PAM}}
|{{InfoBox project|PAM}}
}}

PAM, steht für '''P'''luggable '''A'''uthentication '''M'''odules (anknüpfbare Zugangs Module) und ist ein modularer Ansatz für Autorisation. Es ermöglicht (Drittanbieter-) Diensten, ein Authentifizierungsmodul für ihren Dienst bereitzustellen, das dann auf PAM-fähigen Systemen verwendet werden kann. Dienste, die PAM zur Authentifizierung verwenden, können diese Module sofort verwenden, ohne dass eine Neuerstellung erforderlich ist.

== Einleitung ==

Die Authentifizierungsverwaltung (Teil der Zugriffsverwaltung) auf einem Linux-Server kann über PAM (Pluggable Authentication Modules) abgewickelt werden. Mit PAM müssen Dienste keine Authentifizierungsdienste selbst bereitstellen. Sie verlassen sich stattdessen auf die im System verfügbaren PAM-Module. Jeder Dienst kann eine andere PAM-Konfiguration verwenden, wenn er möchte, obwohl die Authentifizierung meistens von Diensten ähnlich gehandhabt wird. Durch den Aufruf von PAM-Modulen können Dienste die Zwei-Faktor-Authentifizierung sofort unterstützen, sofortige zentralisierte Authentifizierungs-Repositorys verwenden und vieles mehr.

PAM bietet eine flexible, modulare Architektur für die folgenden Dienste:

* Authentifizierungsverwaltung - Überprüfung ob ein Benutzer, der versucht, ein Benutzerkonto zu authentifizieren, tatsächlich der Benutzer ist.
* Kontenverwaltung - Überprüfung ob das Kennwort des Benutzers abgelaufen ist oder ob der Benutzer auf diesen Dienst zugreifen darf.
* Sitzungsverwaltung - Ausführen bestimmter Aufgaben beim Anmelden oder Abmelden eines Benutzers (Überwachung, Einhängen von Dateisystemen usw.).
* Passwortverwaltung - Eine Schnittstelle für das Zurücksetzen von Passwörtern und dergleichen.

{{Note|PAM bietet keine Dienstleistungen für Berechtigungen an. In der Regel erfolgen Berechtigungen innerhalb einer Anwendung. Einige Anwendungen unterstützen gruppenbasierte Berechtigungen (wenn Sie Mitglied einer Gruppe sind, können Sie die entsprechenden Berechtigungen erhalten). Ein verbreiteter (aber nicht so häufiger als PAM) Ansatz ist die Unterstützung von NSS (Name Service Switch). NSS ähnelt PAM in seinen Gestaltungsprinzipien. Tatsächlich werden Berechtigungen auf Linux-Systemen über die NSS-Bibliotheken abgewickelt.}}

=== Principles behind PAM ===

When working with PAM, administrators quickly find out what the principles are that PAM works with.

The first one is ''back-end independence''. Applications that are PAM-aware do not need to incorporate any logic to deal with back-ends such as databases, LDAP service, password files, WS-Security enabled web services or other back-ends that have not been invented yet. By using PAM, applications segregate the back-end integration logic from their own. All they need to do is call PAM functions.

Another principle is ''configuration independence''. Administrators do not need to learn how to configure dozens of different applications on how to interact with an LDAP server for authentication. Instead, they use the same configuration structure provided by PAM.

The final principle, which is part of the PAM name, is its ''pluggable architecture''. When new back-ends need to be integrated, all the administrator has to do is to install the library for this back-end (by placing it in the right directory on the system) and configure this module (most of the modules use a single configuration file). From that point onward, the module is usable for applications. Administrators can configure the authentication to use this back-end and usually just need to restart the application.

=== How PAM works ===

Applications that want to use PAM link with the PAM library (libpam) and call the necessary functions that reflect the above services. Other than that, the application does not need to implement any specific features for these services, as it is all handled by PAM. So when a user wants to authenticate itself against, say, a web application, then this web application calls PAM (passing on the user id and perhaps password or challenge) and checks the PAM return to see if the user is authenticated and allowed access to the application. It is PAMs task underlyingly to see where to authenticate against (such as a central database or LDAP server).

The strength of PAM is that everyone can build PAM modules to integrate with any PAM-enabled service or application. If a company releases a new service for authentication, all it needs to do is provide a PAM module that interacts with its service, and then all software that uses PAM can work with this service immediately: no need to rebuild or enhance those software titles.

== Configuration ==

Another important aspect of PAM is that it supports chaining of multiple modules. Let's look at a PAM configuration file for an unnamed service:

{{FileBox|filename=/etc/pam.d/someservice|title=Example PAM configuration file for a service called "someservice"|1=
# Authentication
auth         required        pam_env.so
auth         required        pam_ldap.so
# Account management
account      required        pam_ldap.so
# Password management
password     required        pam_ldap.so
# Session management
session      optional        pam_loginuid.so
session      required        pam_selinux.so close
session      required        pam_env.so
session      required        pam_log.so level=audit
session      required        pam_selinux.so open multiple
session      optional        pam_mail.so
}}

We see that the configuration file is structured in the four service domains that PAM supports: authentication, account management, password management and session management.

Each of the sections in the configuration file calls one or more PAM modules. For instance, {{Path|pam_env.so}} sets the environment variable which can be used by subsequent modules. The return code provided by the PAM module, together with the control directive (required or optional in the above example), allow PAM to decide how to proceed.

=== Control directives ===

PAM supports the following control directives.

{| class="table table-striped table-condensed"
! Control
! Description
|-
| <code>required</code>
| The provided PAM module must succeed in order for the entire service (such as authentication) to succeed. If a PAM module fails, other PAM modules are still called upon (even though it is already certain that the service itself will be denied).
|-
| <code>requisite</code>
| The provided PAM module must succeed in order for the entire service to succeed. Unlike ''required'', if the PAM module fails, control is immediately handed back and the service itself is denied.
|-
| <code>sufficient</code>
| If the provided PAM module succeeds, then the entire service is granted. The remainder of the PAM modules is not checked. If however the PAM module fails, then the remainder of the PAM modules is handled and the failure of this particular PAM module is ignored.
|-
| <code>optional</code>
| The success or failure of this particular PAM module is only important if it is the only module in the stack.
|}

Chaining of modules allows for multiple authentications to be done, multiple tasks to be performed upon creating a session and more.

=== Managing PAM configuration files ===

As the PAM configuration files control the authentication steps in an application, it is very important to safely manage the configuration files. These are generally stored in {{Path|/etc/pam.d/}}.

In larger enterprises, or security-sensitive systems, any modification of PAM configuration files should be properly audited.

The same goes for the location where the PAM modules themselves are stored ({{Path|/lib/security}} or {{Path|/lib64/security}}).

== PAM and Gentoo ==

Applications that can support PAM conditionally will use the <code>pam</code> USE flag. Although it is possible to run Gentoo systems without PAM (by setting <code>USE="-pam"</code>), but the default is to run with PAM support enabled.

== See also ==

* [[Security Handbook/PAM|PAM (Security Handbook)]]
* [[Pam_ssh_agent_auth|PAM ssh agent module]] article explaining how to install and configure a custom PAM module that authenticates through the SSH public key infrastructure
* The [[Google_Authenticator|Google authenticator]] article explains how to install and use the google authenticator application for authenticating through PAM

== External resources ==

* [https://devmanual.gentoo.org/tasks-reference/pam/index.html Working with PAM], a section inside the Gentoo developer manual


[[Category:Core_system]]
