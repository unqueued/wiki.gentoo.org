This is a project to support libc inside a [[Project:Prefix|Prefix]], codenamed ''RAP'' (Rap Ain't Prefix). See also [[Project:Android]]. A general use case is for Prefix on RHEL 5 (CentOS 5 ans SL 5), where the host glibc-2.5 is too old to support modern features as fortify ({{Bug|289757}}). 

Classical Prefix is based on rpath but it does not give you the freedom having your own sys-libs/glibc, supposedly a recent-one (you must stay with glibc provided by the host operating system). Many packages in Gentoo Linux will not compile against archaic glibc, say 2.13. Many utilites need at least 2.17. Also binary packages like Oracle java JRE/SDK need more recent glibc.

So then there is a Prefix/libc (sysroot method, called Gentoo::RAP).

Finally, at some point there will be another implementation of Prefix/libc approach (native paths method, experimental). It is developed by @redlizard. In the future it will be merged with Prefix/libc (sysroot method, aka Gentoo::RAP).

In terms of source repositories, Gentoo::Prefix uses its own portage tree (as an overlay), hosted by Fabian Groffen. This overlay contains packages that we need, or modifications that aren't yet finalised/merged with the main gentoo tree.  However, Gentoo Prefix users need a way to update their trees.  Since the Prefix tree is a union of the main gentoo tree, overlaid with the prefix overlay, this is non-trivial to obtain (like e.g. git clone).  One simply needs rsync generation.  The scripts for this can be found in the scripts dir of the prefix overlay. Gentoo infra doesn't want to run this for us.  They said in the past they did want to, for us, but never got back, or only want to do it in a simply way (e.g. the git clone/pull).

Gentoo::RAP uses the main Gentoo x86 portage tree so you get more recent packages. However, there is usually a small set of altyered ebuilds, patches and eclasses in a RAP overlay.

Gentoo::Prefix portage tree from Fabian has many patches but the package versions are quickly outdating compared to the main repo. In contrary, Gentoo::RAP tries to override only some classes from the bare Gentoo code base and simply relies on the latest and greatest portage tree. Of note, bash package has some overrrides, time to time pushed into the main gentoo-x86 repo. In summary, on Gentoo::RAP you might hit programming errors in ebuilds and eclasses which Fabian already discovered and fixed in his repo.

Both bootstrap scripts will fetch quite a lot of tarball, with the portage tree, with package sources. There is no easy way to pre-fetch all the stuff you will need beforehand, and be off-line. Watch ({{Bug|586152}}) for improvements.

Bug reports in Gentoo::Prefix have a separate category at bugs.gentoo.org while Gentoo::RAP issues can go along all other bug report tagged as "Current packages". Current issues with mostly ebuilds not respecting $EPREFIX variable can be seen here: https://bugs.gentoo.org/buglist.cgi?quicksearch=EPREFIX&list_id=3399810 . Some might be already fixed in Fabian's tree.

bootstrap-rap.sh will nicely copy /etc/{passwd,hosts} from the host system setup, while bootstrap.sh is not that advanced. Well, read on that at the end of this document, it is not needed because Gentoo::Prefix does not provide the separate/additional glibc.

The differences between the three approaches are summarized in this table.

{| class="wikitable" style="text-align: center"
!
! [[Project:Prefix/Bootstrap|Prefix-rpath]] (classic)
! [[Prefix/libc]] (sysroot method)
! Prefix/libc (native paths method, experimental)
|-
| feature name || prefix-rpath || prefix-standalone ||
|-
| linux profile || prefix/linux || prefix/linux-standalone ||
|-
| linux keyword || ~ARCH-linux || ARCH ~ARCH ||
|-
| portage tree || [https://gitweb.gentoo.org/repo/proj/prefix.git prefix.git] || [https://gitweb.gentoo.org/repo/gentoo.git/ gentoo.git] overlaid with [https://gitweb.gentoo.org/proj/android.git/ android.git] ||
|-
| {{Package|sys-devel/gcc}} || || EXTRA_ECONF+=(--with-sysroot=$EPREFIX) but do not pass --sysroot to ld, prefix dynamic loader || change NATIVE_SYSTEM_HEADER_DIR, STANDARD_STARTFILE_PREFIX, prefix dynamic loader
|-
| {{Package|sys-devel/binutils}} || || prefixify NATIVE_LIB_DIRS || --with-lib-path=${EPREFIX}/usr/lib:${EPREFIX}/lib
|-
| {{Package|sys-devel/binutils-config}} || inject -rpath and -R ||
|-
| {{Package|sys-libs/glibc}} || {{No}} || {{Yes}} prefixify hardcoded /etc,/usr,/var,/bin || {{Yes}}
|-
| bootstrap || [http://rsync.prefix.bitzolder.nl/scripts/bootstrap-prefix.sh bootstrap-prefix.sh] || [http://dev.gentoo.org/~heroxbd/bootstrap-rap.sh bootstrap-rap.sh] ||
|}

== Installation ==

Download the Gentoo RAP [http://dev.gentoo.org/~heroxbd/bootstrap-rap.sh bootstrap-rap.sh]. You can use various ways to obtain the script and get it to a place where you can execute it. Once in position, preform the following commands:
{{Cmd|chmod 755 bootstrap-rap.sh | ./bootstrap-rap.sh | output=<pre>
(follow the instructions)</pre>
}}

That's all! The script will guide you through the full process, and tells you how to start your freshly bootstrapped Gentoo RAP system if it successfully runs up till the end. In normal cases, you don't need any more than just this.

=== Manual Installation ===
RAP can also be installed manually as
{{Cmd|export EPREFIX{{=}}"$HOME/gentoo" # replace with your EPREFIX|export PATH{{=}}"$EPREFIX/usr/bin:$EPREFIX/bin:$EPREFIX/tmp/usr/bin:$EPREFIX/tmp/bin:/usr/bin:/bin"|chmod 755 bootstrap-rap.sh|./bootstrap-rap.sh $EPREFIX stage1|./bootstrap-rap.sh $EPREFIX stage2|./bootstrap-rap.sh $EPREFIX stage3}}
{{Cmd|hash -r|emerge -e system|mkdir -p "${EPREFIX}"/usr/portage/scripts|wget https://gitweb.gentoo.org/repo/proj/prefix.git/plain/scripts/startprefix.in -O "${EPREFIX}"/usr/portage/scripts/startprefix.in|./bootstrap-rap.sh $EPREFIX startscript}}

Refer to [[Project:Prefix/Manual_Bootstrap|Prefix/Manual_Bootstrap]] for more details.

== Tested Distributions ==
At the moment, RAP supports Linux distributions only.  The following tables tracks the tested distributions with the script. Feel free to add your own.

{| class="table sortable table-striped table-condensed"
|-
! Distribution !! Version !! ARCH !! linux !! glibc !! gcc !! binutils !! Tester !! Works till !! ARCH of RAP !! Last tried
|-
| CentOS || 7.2 || amd64 || 4.3.0 || 2.17 || 4.8.5 || 2.23.52 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20160608
|-
| CentOS || 6.8 || amd64 || 2.6.32 || 2.12 || 4.4.7 || 2.20.51 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20160604
|-
| CentOS || 6.8 || amd64 || 2.6.32 || 2.12 || 4.4.6 || 2.20.51 || [[User:xdej|xdej]] || {{Yes|the end}} || amd64 || 20160606
|-
| CentOS || 5.6 || x86 || 2.6.18 || 2.5 || 4.1.2 || 2.17.50 || [[User:xdej|xdej]] || {{Yes|the end}} || x86 || 20160606
|-
| Debian || sid || amd64 || 4.3.0 || 2.22 || 5.3.1 || 2.26 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20160603
|-
| Debian || 7.10 || amd64 || 3.16.0 || 2.13 || 4.7.2 || 2.22 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20160615
|-
| Debian || 7.10 || amd64 || 3.16.0 || 2.13 || 4.7.2 || 2.22 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || x86 || 20160608
|-
| Debian || 7.11 || x86 || 3.16.0 || 2.13 || 4.7.2 || 2.22 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || x86 || 20160608
|-
| Debian || 8.4 || amd64 || 3.16.0 || 2.19 || 4.9.2 || 2.25 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20160607
|-
| Devuan || 1.0 beta || amd64 || 3.16.0 || 2.19 || 4.9.2 || 2.25 || [[User:lightbringer|lightbringer]] || {{Yes|the end}} || amd64 || 20160622
|-
| Fedora || 10 || x86 || 2.6.27 || 2.9 || 4.3.2 || 2.18.50 || [[User:heroxbd|heroxbd]] ||{{Yes|the end}}|| x86 || 20160604
|-
| Gentoo || ~ || amd64 || 4.3.0 || 2.20 || 5.3.0 || 2.26 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20160605
|-
| Gentoo || 13.0 || amd64 || 3.8.13 || 2.15 || 4.6.3 || 2.23.1 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20160608
|-
| RHEL || 7.2 || amd64 || 3.10.0 || 2.17 || 4.8.5 || 2.23.52 || [[User:heroxbd|heroxbd]] ||  {{Yes|the end}} || amd64 || 20160720
|-
| RHEL || 6.4 || amd64 || 2.6.32 || 2.12 || 4.4.7 || 2.20.51 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20160615
|-
| RHEL || 5.10 || amd64 || 2.6.18 || 2.5 || 4.1.2 || 2.17.50 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20160615
|-
| Ubuntu || 14.04 || amd64 || 3.13.0 || 2.19 || 4.8.4 || 2.24 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20160615
|-
| Ubuntu || 16.04 || amd64 || 4.4.0 || 2.23 || 5.3.1 || 2.26 || [[User:prefixer|prefixer]] || {{Yes|the end}} || amd64 || 20160616
|-
| Arch ||  2016.06.01 || amd64 || 4.5.4 || 2.23 || 6.1.1 || 2.26.0 || yangsheng6810 || {{Yes|the end}} || amd64 || 20160615
|-
| openSUSE || 42.1 || amd64 || 3.16.36 || 2.19 || 4.8.5 || 2.26.1 || [[User:heroxbd|heroxbd]] || {{Yes|the end}} || amd64 || 20161116
|}

== Tips ==
=== Compile Inside Memory ===
On a cluster node with large memory and shared network filesystem, compiling in a memory tmpfs can be significantly faster.  /dev/shm is mounted as tmpfs by many distributions. For example:
{{FileBox|filename=EPREFIX/etc/portage/make.conf|1=
PORTAGE_TMPDIR=/dev/shm
}}
Before calling bootstrap-rap.sh, it can be done with
{{Cmd|export PORTAGE_TMPDIR{{=}}/dev/shm}}

=== Add an en_US.UTF-8 locale ===
We are having our own libc, the locales should be generated in Prefix.  Add an entry to EPREFIX/etc/locale.gen
{{FileBox|filename=EPREFIX/etc/locale.gen|1=
...
en_US.UTF-8 UTF-8
...
}}
Then generate the locale by
{{Cmd|locale-gen|output=<pre>
 * Using locale.gen from ROOT /auto/external/buffalo/data02a/gentoo/etc/
 * Generating locale-archive: forcing # of jobs to 1
 * Generating 1 locales (this might take a while) with 1 jobs
 *  (1/1) Generating en_US.UTF-8
 * Generation complete
</pre>}}

For more details, refer to the [[Handbook:Parts/Installation/Base#Configure_locales|handbook]].

=== Use a nearby mirror ===
The bootstrap script needs to download quite a bit.  It can be accelerated by using a Gentoo mirror nearby.  To use a mirror, GENTOO_MIRRORS should be set both in the environment
{{Cmd|export GENTOO_MIRRORS{{=}}http://mirrors.tuna.tsinghua.edu.cn/gentoo|./bootstrap-rap.sh}}
and make.conf:
{{FileBox|filename=EPREFIX/etc/portage/make.conf EPREFIX/tmp/etc/portage/make.conf|1=
...
GENTOO_MIRRORS{{=}}http://mirrors.tuna.tsinghua.edu.cn/gentoo
}}
Replace http://mirrors.tuna.tsinghua.edu.cn/gentoo with your favorite mirror.
For more details, refer to [[GENTOO_MIRRORS]].

The rsync mirror is set in repos.conf
{{FileBox|filename=EPREFIX/etc/portage/repos.conf|1=
...
[gentoo]
...
sync-type = rsync
sync-uri = rsync://mirrors.tuna.tsinghua.edu.cn/gentoo-portage
}}
Replace rsync://mirrors.tuna.tsinghua.edu.cn/gentoo-portage with your favorite mirror.  Refer to [https://wiki.gentoo.org/wiki//etc/portage/repos.conf repos.conf] for details.

== Troubleshooting ==
RAP is expected to run on a wild variety of environments.  Let's document here the problems met during the bootstrap and the solutions made.
It is very funny to see how many host systems are badly screwed.
=== /bin/tar exists but does not work. The working one is in /usr/local/bin ===
{{Cmd|/bin/tar|strace /bin/tar|output=<pre>
bash: /bin/tar: Permission denied
execve("/bin/tar", ["/bin/tar"], [/* 142 vars */]) = -1 EACCES (Permission denied)</pre>}}

Solution: edit the script to prepend /usr/local/bin to PATH.

{{FileBox|filename=bootstrap-rap.sh|1=
        # the standard path we want to start with, override anything from
        # the user on purpose
-       PATH="/usr/bin:/bin"
+       PATH="/usr/local/bin:/usr/bin:bin"
}}
=== Username becomes invalid inside RAP ===
RAP has its own glibc, which performs independent name service from the host. The uid to username mapping is managed by nss of glibc. If we install a new glibc, we are making a new set of mappings. That is not needed to be done by the Gentoo::Prefix approach (which does not provide a separate glibc).

The bootstrap script first tries to generate ''passwd'' and ''group'' from getent and links host /etc/{passwd,group} as fallback,
{{Cmd|getent passwd > ${EPREFIX}/etc/passwd {{!}}{{!}} ln -s /etc/passwd ${EPREFIX}/etc/passwd |getent group > ${EPREFIX}/etc/group {{!}}{{!}} ln -s /etc/group ${EPREFIX}/etc/group }} 

If usernames are provided by LDAP, sometimes it is configured so that a normal user cannot query the entire passwd or group by getent.  In that case portage breaks, will not be able to resolve the username and group.   An quick fix is to show yourself to Prefix by specifying who you are,
{{Cmd|alias id{{=}}$(which -a id {{!}} tail -n1) # use host id|alias getent{{=}}$(which -a getent {{!}} tail -n1) # use host getent|getent passwd $(id -u) > "${EPREFIX}/etc/passwd"|getent group $(id -g) > "${EPREFIX}/etc/group"}}
But other uses on the host cannot be resolved.  To get a fair sample of all users on the system, enumerate the /home directory,
{{Cmd|alias getent{{=}}$(which -a getent {{!}} tail -n1) # use host getent|alias stat{{=}}$(which -a stat {{!}} tail -n1) # use host stat|for d in /home/*; do stat -c '%u' $d; done {{!}} sort -u {{!}} xargs getent passwd > "${EPREFIX}/etc/passwd"|for d in /home/*; do stat -c '%g' $d; done {{!}} sort -u {{!}} xargs getent group > "${EPREFIX}/etc/group"}}

Another solution is to use host nss_ldap library. (''nss'' is part of glibc, which resolves uid/gid.)
{{Cmd|LIBDIR{{=}}$(portageq envvar LIBDIR_$(portageq envvar ABI))|ln -s /${LIBDIR}/libnss_ldap.so.2 ${EPREFIX}/${LIBDIR}/}}
Then set nsswitch to query ldap.
{{FileBox|filename=EPREFIX/etc/nsswitch.conf|1=
passwd: ldap compat
group: ldap compat
}}

== See Also ==
A similar project, [http://sourceforge.net/projects/gentooandroid/ Gentoo On Unrooted Android]


== FAQ ==
'''What is Gentoo:Prefix not good for?'''

You will have problem running java binaries, it needs I think glib-2.17. If you host glibc is older, you are out of luck. It has no multilib support so forget about running acroread through it.

'''Can Gentoo::RAP execute 32bit and 64bit binaries?'''

No, the profile used in it is amd64-oly.

'''Any pressing issue with Gentoo::RAP?'''

Java support. You have to patch manually $EPREFIX/usr/portage/eclass/java-utils-2.eclass from {{Bug|595002}}. Because the file does not belong to any package it will be overwritten by the not yet fixed file from portage tree, so after every 'emerge --sync' you have to reapply the patch. Further, most apps using java-config and Apache ant still have issues. But it would be only worse if you tried Gentoo::Prefix instead (you would not get even that far). 


'''Can I emerge myself glibc on Prefix?'''

No.

'''Are there any other special=difficult libs, like iconv, icu, readline, or is only glibc being the main problem?'''

Seems you can install all these on Gentoo::Prefix except the glibc.

'''Can I switch from Gentoo:Prefix to RAP?'''

No idea, probably not.

'''Can I switch from RAP to the third thingie ("Prefix/libc (native paths method, experimental)"), whatever that does?'''

Will be merged into RAP, once fully working.

'''Can I move binaries to another host?'''

It sounds one can understand that the binaries with -rpath compiled in may not work on another system unless LD_LIBRARY_PATH redirects the paths, but what about Gentoo:RAP binaries. Can they be moved? Could I check something in the binaries using "ldd or some elfutils program" to learn more? They use a modified loader with a hardcoded path, so only if you put them into very same place?

Install elfutils on your hosting operating system. See for example:

{{Cmd|
ldd $gentoo__rap/bin/bash
eu-readelf --relocs $gentoo__rap/bin/bash
eu-readelf --all $gentoo__rap/bin/bash
}}
