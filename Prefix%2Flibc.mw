This is a project to support libc inside a [[Prefix]], so call "RAP" (Rap Ain't Prefix). See also [[Project:Android]]. A general use case is for Prefix on RHEL 5 (CentOS 5 ans SL 5), where the host glibc-2.5 is too old to support modern features as fortify.

Before this project, Prefix is based on rpath mechanism. The differences are summerized in this table.

{| class="wikitable" style="text-align: center"
!
! Prefix-rpath
! Prefix-libc (sysroot method)
! Prefix-libc (native paths method)
|-
| {{Package|sys-devel/libtool}} || || EXTRA_ECONF="--with-sysroot=$EPREFIX" ||
|-
| {{Package|sys-devel/gcc}} || || EXTRA_ECONF="--with-sysroot=$EPREFIX" || change NATIVE_SYSTEM_HEADER_DIR, STANDARD_STARTFILE_PREFIX, dynamic loader
|-
| {{Package|sys-devel/binutils}} || || EXTRA_ECONF="--with-sysroot=$EPREFIX" || --with-lib-path=${EPREFIX}/usr/lib:${EPREFIX}/lib
|-
| {{Package|sys-devel/binutils-config}} || inject -rpath and -R || inject --dynamic-linker ||
|-
| {{Package|sys-libs/glibc}} || {{No}} || {{Yes}} || {{Yes}}
|-
| linker scripts hack || No need|| Yes || No need
|}
{{note|linker scripts hack: need to strip EPREFIX in linker scripts like libc.so shipped with {{Package|glibc}} to prevent double prefix caused by sysroot-enabled ld. At the time of writing (19 Jun, 2013), only glibc is affected and needs a hack.}}

Provided a rpath variant of Gentoo Prefix (Prefix-rapth), we can roll out a libc variant Prefix (Prefix-libc) with the following guide. It applies to a Gentoo Prefix on RHEL-5.6 amd64, for other setups it should be similar. Feel free to documents corner cases here.

{{warning|This a development in progress. Do not follow this guide blindly without knowing what your are doing. The steps described below may screw up your existing Prefix installation.}}

== Using heroxbd's overlay ==
This is a developer's overlay by heroxbd. The changes will be reviewed and included in the official tree gradually. As of Jun 16, 2013, the overlay includes sys-devel/binutils-config (for injecting --dynamic-linker and for disabling cross-eprefix target library... {{Bug|473706}}), sys-devel/gcc-config ({{Bug|473712 }}), sys-libs/glibc <strike>({{Bug|473484}}</strike> {{Bug|473728}}) and profile amd64/with-libc ({{Bug|473730}}).

Let's add heroxbd's overlay with [[Layman]] from app-portage/layman,

{{Cmd|layman -a heroxbd}}

Make sure overlays from layman are effective,

{{File|${EPREFIX}/etc/portage/make.conf|populate overlay in make.conf|<pre>
...
source /gentoo/var/lib/layman/make.conf
...
</pre>}}

replace /gentoo with your own $EPREFIX.

Details for playing with layman can be found at [[Layman]].

== Set Up Environmental Variables ==
Assume $EPREFIX represents, the new path, Prefix-libc, and $BPREFIX represents, the old path, Prefix-rpath.
{{note|Always recalulate your EPREFIX with realpath to make sure it is an absolute offset with no symlink involved.}}

* copy over etc
{{Cmd|cp -a {$BPREFIX,$EPREFIX}/etc}}
* use amd64/rap profile
{{Cmd|rm $EPREFIX/etc/portage/make.profile; ln -s @OVERLAY@/profiles/default/linux/amd64/13.0/rap $EPREFIX/etc/portage/make.profile}}
@OVERLAY@ being the overlay of heroxbd. If you got it via layman, it would located at $EPREEFIX/var/lib/layman/heroxbd.
* clear out unnecessary USE flags in make.conf or package.use. We need a minimal set for bootstrap
* copy portage data
{{Cmd|mkdir -p $EPREFIX/usr/share/portage; rsync -a {$BPREFIX,$EPREFIX}/usr/share/portage/}}
* used by portage to override EPREFIX
{{Cmd|export PORTAGE_OVERRIDE_EPREFIX{{=}}$EPREFIX}}
* add PATH of new Prefix
{{Cmd|export PATH{{=}}"$EPREFIX/bin:$EPREFIX/sbin:$EPREFIX/usr/bin:$EPREFIX/usr/sbin:$PATH"}}
* clear out gcc toolchain PATH like $BPREFIX/usr/x86_64-pc-linux-gnu/gcc-bin/4.7.2, as it will confuse gcc-config later

== Set Up New Toolchain ==
The host libc (e.g. glibc-2.5 for RHEL 5) might be very old. There are many incompatibilities(e.g. [http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52922 this bug]) as time goes. Here we take extra care not to mix new and old toolchain. The process mimics that of building of cross toolchain.

glibc becomes incompatible in both library and include. gcc has to be installed '''after''' glibc in that it needs to get its internal fixinclude from new glibc in new Prefix during build.

=== sys-devel/binutils ===

* emerge binutils
{{Emerge|--nodeps sys-devel/binutils::heroxbd}}
Verify the new ld dose not have $EPREFIX/{usr/,}lib in runpath.
{{Cmd|readelf -d $EPREFIX/usr/$(portageq envvar CHOST)/binutils-bin/2.23/ld <nowiki>|</nowiki> grep Library<pre>
 0x000000000000000f (RPATH)              Library rpath: [/home/benda/gnto/usr/lib/binutils/x86_64-pc-linux-gnu/2.23:/gpfshome/home/benda/gentoo/usr/x86_64-pc-linux-gnu/lib/gcc:/gpfshome/home/benda/gentoo/usr/x86_64-pc-linux-gnu/lib:/gpfshome/home/benda/gentoo/lib:/gpfshome/home/benda/gentoo/usr/lib]
 0x000000000000001d (RUNPATH)            Library runpath: [/home/benda/gnto/usr/lib/binutils/x86_64-pc-linux-gnu/2.23:/gpfshome/home/benda/gentoo/usr/x86_64-pc-linux-gnu/lib/gcc:/gpfshome/home/benda/gentoo/usr/x86_64-pc-linux-gnu/lib:/gpfshome/home/benda/gentoo/lib:/gpfshome/home/benda/gentoo/usr/lib]
</pre>}}
* emerge binutils-config dependencies first
{{Emerge|--nodeps sys-apps/baselayout-prefix}}

Symlink the bash from old Prefix
{{Cmd|ln -s {$BPREFIX,$EPREFIX}/bin/bash}}

binutils-config 
{{Emerge|--nodeps sys-devel/binutils-config::heroxbd}}

=== sys-libs/glibc ===
* Before glibc, some of >=gcc-4.3 dependence library needs to be emerged first, otherwise they will fail during configure because of incompatibility of new and old glibc.
{{Emerge|--nodeps dev-libs/mpc::heroxbd dev-libs/mpfr::heroxbd dev-libs/gmp sys-libs/zlib dev-libs/libffi}}

* A minimal python is needed for portage. Notice the python version should be the same in both EPREFIX and BPREFIX, otherwise compatibility issues may happen, like [http://stackoverflow.com/questions/16301735/importerror-cannot-import-name-maxrepeat-with-cx-freeze python-2.7.5 vs python-2.7.3].
{{Cmd|env USE{{=}}"-*" emerge --ask --nodeps dev-lang/python app-admin/eselect-python}}

* Our present ld in old Prefix injects runpath into all ELF, which causes assertion failure in glibc. Use raw ld in old Prefix to circumvent this.
{{Cmd|ln -sf $BPREFIX/usr/$(portageq envvar CHOST)/{binutils-bin/2.23,bin}/ld}}

* Off and go.
{{Emerge|--nodeps sys-kernel/linux-headers sys-libs/glibc::heroxbd}}

* Inspect $EPREFIX/etc/ld.so.conf, and general ld.so.cache
{{Cmd|ldconfig}}

* In old Prefix, revert back to ld wrapper
{{Cmd|binutils-config 1}}
replace 1 with a proper alternative.

=== sys-devel/gcc ===
* Going all the way here, gcc is nice and easy.
{{Emerge|--nodeps sys-devel/gcc::heroxbd}}
* Finally gcc-config
{{Emerge|--nodeps sys-devel/gcc-config::heroxbd}}

== Set Up New Portage ==

* In order not to draw in perl, which is hard to bootstrap across Prefix
{{Emerge|--nodeps sys-devel/automake dev-util/intltool dev-libs/glib app-crypt/mhash sys-devel/autoconf}}

* Emerge portage
{{Emerge|--nodeps sys-apps/portage}}

{{Note|nss is part of glibc, which resolves uid/gid. If your user is in LDAP, be sure to set up nss_ldap against glibc in new Prefix. Host nss_ldap library may be too old to be loaded by new glibc. Failure of interpreting uid/gid may result in disfunctional portage.}}

* From now on we will use new portage
{{Cmd|hash -r}}
and copy over the repo
{{Cmd|cp -a {$BPREFIX,$EPREFIX}/usr/portage}}

== Finialize ==
* startprefix
{{Cmd|sed "s,$BPREFIX,$EPREFIX,g" $BPREFIX/startprefix > $EPREFIX/startprefix}}
* open a new terminal and start fresh
{{Cmd|@NEW-PREFIX@/startprefix}}
* We have all the building blocks, the final step goes
{{Emerge|@system}}
followed by
{{Emerge|--emptytree @world}}
Sit back, have a cup of tea, and watch the marvel emerges.

== See Also ==
A similar project, [http://sourceforge.net/projects/gentooandroid/ Gentoo On Unrooted Android]
