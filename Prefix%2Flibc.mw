This is a project to support libc inside a [[Prefix]]. See also [http://www.awa.tohoku.ac.jp/~benda/projects/android.html Gentoo on Android]. A general use case is for Prefix on RHEL 5 (CentOS 5 ans SL 5), where the host glibc-2.5 is too old to support modern features as fortify.

Before this project, Prefix is based on rpath mechanism. The differences are summerized in this table.

{| class="wikitable" style="text-align: center"
!
! Prefix-rpath
! Prefix-libc (sysroot method)
! Prefix-libc (native paths method)
|-
| {{Package|sys-devel/libtool}} || || EXTRA_ECONF="--with-sysroot=$EPREFIX" ||
|-
| {{Package|sys-devel/gcc}} || || EXTRA_ECONF="--with-sysroot=$EPREFIX" || change NATIVE_SYSTEM_HEADER_DIR, STANDARD_STARTFILE_PREFIX, dynamic loader
|-
| {{Package|sys-devel/binutils}} || || EXTRA_ECONF="--with-sysroot=$EPREFIX" || --with-lib-path=${EPREFIX}/usr/lib:${EPREFIX}/lib
|-
| {{Package|sys-devel/binutils-config}} || inject -rpath and -R || inject --dynamic-linker ||
|-
| sys-libs/glibc || {{No}} || {{Yes}} || {{Yes}}
|-
| linker scripts hack || No need|| Yes || No need
|}
{{note|linker scripts hack: need to strip EPREFIX in linker scripts like libc.so shipped with {{Package|glibc}} to prevent double prefix caused by sysroot-enabled ld.}}

Provided a rpath variant of Gentoo Prefix (Prefix-rapth), we can roll out a libc variant Prefix (Prefix-libc) with the following guide. It applies to a Gentoo Prefix on RHEL-5.6 amd64, for other setups it should be similar. Feel free to documents corner cases here.

{{warning|This a development in progress. Do not follow this guide blindly without knowing what your are doing. The steps described below may screw up your existing Prefix installation.}}

== Using heroxbd's overlay ==
This is a developer's overlay by heroxbd. The changes will be reviewed and included in the official tree gradually. As of Jun 16, 2013, the overlay includes sys-devel/binutils-config (for injecting --dynamic-linker and for disabling cross-eprefix target library... see below), sys-devel/gcc-config (for a bug fix) and sys-libs/glibc (for Prefix support).

Let's add heroxbd's overlay with [[Layman]] from app-portage/layman,

{{Cmd|layman -a heroxbd}}

Make sure overlays from layman are effective,

{{File|${EPREFIX}/etc/portage/make.conf|populate overlay in make.conf|<pre>
...
source /gentoo/var/lib/layman/make.conf
...
</pre>}}

replace /gentoo with your own $EPREFIX.

Details for playing with layman can be found at [[Layman]].

== Set Up Environmental Variables ==
Assume $EPREFIX represents, the new path, Prefix-libc, and $BPREFIX represents, the old path, Prefix-rpath.
{{note|Always recalulate your EPREFIX with realpath to make sure it is an absolute offset with no symlink involved.}}

* copy over etc
{{Cmd|cp -a {$BPREFIX,$EPREFIX}/etc}}
* use amd64/with-libc profile
{{Cmd|rm $EPREFIX/etc/portage/make.profile; ln -s @OVERLAY@/profile/prefix/linux/amd64/with-libc $EPREFIX/etc/portage/make.profile}}
@OVERLAY@ being the overlay of heroxbd, if you got it via layman, it would located at $EPREEFIX/var/lib/layman/heroxbd.
* clear out unnecessary USE flags in make.conf or package.use. We need a minimal set for bootstrap
* copy portage data
{{Cmd|rsync -a {$BPREFIX,$EPREFIX}/usr/share/portage/}}
* used by portage to override EPREFIX
{{Cmd|export PORTAGE_OVERRIDE_EPREFIX{{=}}$EPREFIX}}
* disable collision-protect for bootstrap
{{Cmd|export FEATURES{{=}}"-collision-protect"}}
* add PATH of new Prefix
{{Cmd|export PATH{{=}}"$EPREFIX/bin:$EPREFIX/sbin:$EPREFIX/usr/bin:$EPREFIX/usr/sbin:$PATH"}}
* clear out gcc toolchain PATH like $EPREFIX/usr/x86_64-pc-linux-gnu/gcc-bin/4.7.2, as it will confuse gcc-config later

== Set Up New Toolchain ==
The host libc (e.g. glibc-2.5 for RHEL 5) might be very old. There are many incompatibilities(e.g. [http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52922 this bug]) as time goes. Here we take extra care not to mix new and old toolchain. The process mimics that of building of cross toolchain.

glibc becomes incompatible in both library and include. binutils has to be installed '''before''' glibc in that the configure test attempts to load libc.so from new Prefix, which conflict with old ld.so (the dynamic linker). gcc has to be installed '''after''' glibc in that it needs to get its internal fixinclude from new glibc in new Prefix during build.

=== sys-devel/binutils ===
* In another terminal, for old prefix, emerge binutils-config from heroxbd's overlay with USE="-dynl -targetlib"
{{Cmd|env USE{{=}}"-dynl -targetlib" emerge sys-devel/binutils-config}}

These are two temperary USE flags, -dynl for not injecting --dynamic-linker, -targetlib for preventing libraries in Prefix-libc to be mixed with Prefix-rpath
* emerge binutils
{{Emerge|--nodeps sys-devel/binutils}}
Verify the new ld dose not have $EPREFIX/{usr/,}lib in runpath.
{{Cmd|readelf -d $EPREFIX/usr/$(portageq envvar CHOST)/binutils-bin/2.23/ld <nowiki>|</nowiki> grep Library<pre>
 0x000000000000000f (RPATH)              Library rpath: [/home/benda/gnto/usr/lib/binutils/x86_64-pc-linux-gnu/2.23:/gpfshome/home/benda/gentoo/usr/x86_64-pc-linux-gnu/lib/gcc:/gpfshome/home/benda/gentoo/usr/x86_64-pc-linux-gnu/lib:/gpfshome/home/benda/gentoo/lib:/gpfshome/home/benda/gentoo/usr/lib]
 0x000000000000001d (RUNPATH)            Library runpath: [/home/benda/gnto/usr/lib/binutils/x86_64-pc-linux-gnu/2.23:/gpfshome/home/benda/gentoo/usr/x86_64-pc-linux-gnu/lib/gcc:/gpfshome/home/benda/gentoo/usr/x86_64-pc-linux-gnu/lib:/gpfshome/home/benda/gentoo/lib:/gpfshome/home/benda/gentoo/usr/lib]
</pre>}}
* emerge binutils-config
dependencies first
{{Emerge|--nodeps sys-apps/baselayout-prefix app-shells/bash app-admin/eselect app-admin/eselect-sh}}
binutils-config which injects dynamic-linker
{{Emerge|--nodeps sys-devel/binutils-config<pre>
[ebuild  N     ] sys-devel/binutils-config-3-r03.2  USE="dynl targetlib -sunld"</pre>}}
make sure dynl USE flags is enabled.

=== sys-libs/glibc ===
* Before glibc, some of >=gcc-4.3 dependence library needs to be emerged first, otherwise they will fail during configure because incompatibility of new and old glibc.
{{Emerge|--nodeps dev-libs/mpc dev-libs/mpfr dev-libs/gmp sys-libs/zlib}}

* Our present ld in old Prefix injects runpath into all ELF, which causes assertion failure in glibc. Use raw ld in old Prefix to circumvent this.
{{Cmd|ln -sf $BPREFIX/usr/x86_64-pc-linux-gnu/{binutils-bin/2.23,bin}/ld}}

* Off and go.
{{Emerge|--nodeps sys-kernel/linux-headers sys-libs/glibc}}

* In old Prefix, revert back to ld wrapper if you like
{{Cmd|binutils-config 1}}
replace 1 with a proper alternative.

=== sys-devel/gcc ===
* Going all the way here, gcc is simple and easy.
{{Emerge|--nodeps sys-devel/gcc}}
* Finally gcc-config
{{Emerge|--nodeps sys-devel/gcc-config}}

== Set Up New Portage ==
Now we have a working toolchain, including glibc, armed with sysroot support. Time to unleash the power of portage.

* In order not to draw in perl, which is hard to bootstrap across Prefix
{{Emerge|--nodeps sys-devel/automake dev-util/intltool dev-libs/glib app-crypt/mhash sys-devel/autoconf}}

* Emerge portage with dependence
{{Cmd|env USE{{=}}"-* python2" PYTHON_TARGETS{{=}}python2_7 emerge --ask sys-apps/portage}}

Disable all use flags to get a minimum portage, PYTHON_TARGETS is required by the new python-r1 eclass. It may fail during to process. Run eselect python when necessary.

* From now on we will use new portage
{{Cmd|hash -r}}
and copy over the repo
{{Cmd|cp -a {$BPREFIX,$EPREFIX}/usr/portage}}

== Finialize ==
* startprefix
{{Cmd|sed "s,$BPREFIX,$EPREFIX,g" $BPREFIX/startprefix > $EPREFIX/startprefix}}
* open a new terminal and start fresh
{{Cmd|@NEW-PREFIX@/startprefix}}
* We have all the building blocks, the final step goes
{{Emerge|@system}}
followed by
{{Emerge|--emptytree @world}}
Sit back, have a cup of tea, and watch the marvel emerges.
