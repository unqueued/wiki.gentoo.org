<languages />

{{Dated|date=March 3rd, 2015}}
{{InfoBox stack
|{{InfoBox homepage|https://gnupg.org/|header=true}}
|{{InfoBox wikipedia|GNU_Privacy_Guard|text=Wikipedia}}
}}

{{Metadata|abstract=이 안내서는 젠투 리눅스 사용자에게 보안 통신용 도구인 GnuPG 기본 사용 방법을 알려드립니다.}}

이 안내서는 젠투 리눅스 사용자에게 보안 통신용 도구인 GnuPG 기본 사용 방법을 알려드립니다.

== 도입부 ==

=== 이 안내서에서 무얼 배울 수 있을까 ===

이 안내서에서는 독자 여러분이 공용키 암호화 기법, 암호화, 디지털 서명에 대해 잘 알고 있음을 가정합니다. 만약 그렇지 않다면  [http://www.gnupg.org/documentation/guides.html 공식 GnuPG 핸드북] 2장을 따로 보시고 이 글로 다시 돌아오십시오. 

이 안내서에서는 젠투 사용자에게 GnuPG 설치 방법, 키 쌍 만드는 방법, 키 모음에 키 추가하는 방법, 키 서버에 공용키를 제출하고 서명, 암호화, 검증, 보내고 받은 메시지 해독에 대한 모든 내용을 알려드립니다. 독자 여러분께서는 다른 사람들이 메시지 내용을 훔쳐보는걸 막기 위해 어떻게 파일을 암호화 하는지도 배웁니다.

== 설치 ==

=== USE 플래그 ===

{{USEflag|package=app-crypt/gnupg}}

=== Emerge ===

{{Emerge|app-crypt/gnupg}}

=== 다른 프로그램 ===

At a very basic level GnuPG must be emerged. Many applications today have some sort of support for PGP, so having <code>crypt</code> as a USE variable is a good idea. When desiring an email client capable of using GnuPG any of the following options are well suited:
* PinePGP ({{Package|mail-client/pinepgp}}); 
* [[Mutt]] ({{Package|mail-client/mutt}}) — A small but very powerful text-based mail client; 
* [[Thunderbird]] ({{Package|mail-client/thunderbird}}) — Mozilla's e-mail solution; 
* [[Evolution]] ({{Package|mail-client/evolution}}) — A GNOME Microsoft Outlook work alike; 
* [[KMail]] ({{Package|kde-base/kmail}}) — KDE's mail client. 
**Installing KGPG ({{Package|kde-base/kgpg}}) might be of interest when using the KDE desktop environment. This small program allows for the generation of key pairs, importing keys from ASCII files, signing imported keys, exporting keys, among a few other nifty features.

== 사용법 ==

=== Generating a key and adding keys to a public keyring ===

==== 키 만들기 ====

To create a key, use the <tt>gpg --gen-key</tt> command. The first time it is run, it will create some directories essential to the correct operation and implementation of GnuPG; run it again to create the keys: 

{{Cmd|gpg --gen-key|output=<pre>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.
  
Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
   Your selection? 1
</pre>
}}

Here the type of key can be chosen. Most users will go for the default RSA and RSA. Next is the key size - remember that bigger is better but do not use a size larger than 2048 with DSA/ElGamal keys. Generally 2048 is more than enough for normal email communication.

After size comes the expiration date. Here smaller is better, but most users can go for a key that never expires, or for an expiration date of around 2 or 3 years. 

{{CodeBox|title=키 크기 지정|<nowiki>
RSA keypair will have 1024 bits.
RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048) 2048
Requested keysize is 2048 bits       
Please specify how long the key should be valid.
         0 = key does not expire
 <n>= key expires in n days
 <n>w = key expires in n weeks
 <n>m = key expires in n months
 <n>y = key expires in n years
 Key is valid for? (0) 0
Key does not expire at all
</nowiki>
}}

Now it is time to enter some personal information about the key's user. When sending a public key to other users it is important to an real email address here (as opposed to a fake e-mail address). 

{{CodeBox|title=사용자 정보 입력|
Is this correct (y/n)? y
                          
GnuPG needs to construct a user ID to identify your key.
  
Real name: Larry the cow
Email address: larry@gentoo.org
Comment: Gentoo's own
You selected this USER-ID:
"Larry the cow (Gentoo's own) <larry@gentoo.org>"
  
Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O 
You need a Passphrase to protect your secret key.    
  
Enter passphrase: 
}}

Now enter a key passphrase twice. It is a good idea to use a strong password. If someone is able to get a hold of the associated private key and cracks the password they will be able to impersonate the user by sending signed messages just as the user would. The malicious user could dupe the victims contacts into believing the e-mails or messages were sent by the victim. This could cause major problems.

Next, GnuPG will generate a key. Moving the mouse, browsing the web, or having streaming audio in the background will help speed up the process because will help GnuPG generate random data thereby increasing the security of the key pair.

==== 폐기 인증 만들기 ====

{{Important|This part is very important and must done ''NOW''.}}

After creating the keys a revocation certificate should be created. Doing this allows the user to revoke the key in case something nasty happens (think of a malicious user gaining control of the key/passphrase). 

{{Cmd|gpg --list-keys|output=<pre>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 Larry the cow (Gentoo's own) <larry@gentoo.org>
sub  2048g/96D6CDAD 2002-12-08
</pre>}}

{{Cmd|gpg --output revoke.asc --gen-revoke 75447B14|output=<pre>
sec  1024D/75447B14 2002-12-08   Larry the cow (Gentoo's own) <larry@gentoo.org>
  
Create a revocation certificate for this key? y
Please select the reason for the revocation:   
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision? 1
Enter an optional description; end it with an empty line:
> Someone cracked me and got my key and passphrase
>
Reason for revocation: Key has been compromised
Someone cracked me and got my key and passphrase
Is this okay? y
  
You need a passphrase to unlock the secret key for
user: "Larry the cow (Gentoo's own) <larry@gentoo.org>"
1024-bit DSA key, ID 75447B14, created 2002-12-08
  
ASCII armored output forced.
Revocation certificate created.
  
Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
</pre>
}}

{{c|gpg --list-keys}} 명령은 공용 키 모음의 키를 보여줍니다. 키 ID를 볼 때 이 명령을 사용해서 폐기 인증을 만들 수 있습니다. 모든 키를 {{Path|.gnupg}} 디렉터리에, 안전한 매체(안전한 위치에 보관할 CD-R 또는 USB 드라이브)에 폐기 인증을 복사하시는 것이 좋습니다. {{Path|revoke.asc}} 파일은 키를 폐기할 때 사용할 수 있으며, 한 번 사용하고 나면 나중에 다시 사용할 수 없음을 기억하십시오. 

{{Note|If a user has several email addresses they would like to use with the key, the user can run <tt>gpg --edit-key <USER_ID></tt> then use the <tt>adduid</tt> command. It will ask the user for the name, email, and comment of the second ID to be used.}}

==== 키 내보내기 ====

키를 내보내려면 {{c|gpg --armor --output larry.asc --export  <nowiki>larry@gentoo.org</nowiki>}}와 같이 입력하십시오. 거의 언제든 키 ID 또는 키를 식별할 만한 문자열(여기서는 이메일 주소를 사용합니다)을 사용할 수 있습니다. Larry는 이제 친구에게 보내거나 웹 페이지에 넣어 다른 사람들이 Larry와 안전하게 통신할 수 있게 하는 {{Path|larry.asc}} 파일을 가집니다. 

==== 키 가져오기 ====

공용 키 모음에 파일을 추가하려면 다음 단계를 거쳐야합니다:
# 먼저 키를 가져온 다음, 
# 키 지문을 확인해야 합니다. 
# 지문을 인정한 다음, 검증해야 합니다.

{{Note|키를 검증할 때 만전을 기해야 합니다. 공용키 암호화에 있어 가장 취약할 때입니다. }}

이제 Luis Pinto(원 저자의 친구)의 공용키를 공용 키 모음에 추가해보도록 하겠습니다. 친구를 불러 키 지문을 요청한 다음, <tt>fpr</tt> 명령으로 출력한 지문과 비교하도록 하겠습니다. 키를 확인하고 나면 공용 키 모음에 추가합니다. 이 경우, Luis의 키는 2003년 12월 1일에 무효화되며, 유효기간이 경과하는 날에 키가 필요하면 다시 요청할 것입니다. 

{{Cmd|gpg --import luis.asc|output=<pre>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>}}

{{Cmd|gpg --list-keys|output=<pre>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 Larry the cow (Gentoo's own) <larry@gentoo.org>
sub  2048g/96D6CDAD 2002-12-08
  
pub  1024D/462405BB 2002-12-01 Luis Pinto <lmpinto@student.dei.uc.pt>
uid                            Luis Pinto <lmpinto@dei.uc.pt>
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]
</pre>}}

{{Cmd|gpg --edit-key lmpinto@dei.uc.pt|output=<pre>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.
  
gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto <lmpinto@dei.uc.pt>
(2). Luis Pinto <lmpinto@student.dei.uc.pt>
</pre>}}

{{Cmd|fpr|prompt=Command> |output=<pre>
pub  1024D/462405BB 2002-12-01 Luis Pinto <lmpinto@dei.uc.pt>
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
</pre>}}

{{Cmd|sign|prompt=Command> |output=<pre>
Really sign all user IDs? y
                           
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
  
     Luis Pinto <lmpinto@dei.uc.pt>
     Luis Pinto <lmpinto@student.dei.uc.pt>
  
This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) Y
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".
  
   (0) I will not answer. (default)
   (1) I have not checked at all.
   (2) I have done casual checking.
   (3) I have done very careful checking.
  
   Your selection? 3
Are you really sure that you want to sign this key
with your key: "Larry the cow (Gentoo's own) <larry@gentoo.org>"
  
I have checked this key very carefully.
  
Really sign? y
              
You need a passphrase to unlock the secret key for
user: "Larry the cow (Gentoo's own) <larry@gentoo.org>"
1024-bit DSA key, ID 75447B14, created 2002-12-08
</pre>}}

{{Cmd|check|prompt=Command> |output=<pre>
uid  Luis Pinto <lmpinto@dei.uc.pt>
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   Larry the cow (Gentoo's own) <larry@gentoo.org>
uid  Luis Pinto <lmpinto@student.dei.uc.pt>
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   Larry the cow (Gentoo's own) <larry@gentoo.org>
</pre>
}}

=== 키 서버와의 키 교환 ===

==== 키 서버로 키 보내기 ====

이제 키를 만들었으니, 키 서버로 보내 보도록 하는게 어떨까 합니다. 키 서버는 전세계에 널려있고, 대부분의 키 서버들끼리 공용키를 주고받습니다. 이 예제에서 Larry 소의 키를 keys.gnupg.net 서버로 보내겠습니다. 키를 보낼 때 HTTP를 사용하므로 HTTP 트래픽에 대해 프록시를 사용한다면 이 설정( <tt><nowiki>export http_proxy=http://proxy_host:port/</nowiki></tt> )을 잊지 마십시오. 키를 보내는 명령은 다음과 같습니다. {{c|gpg --keyserver keys.gnupg.net --keyserver-options honor-http-proxy --send-key 75447B14}} 여기서 <code>75447B14</code>는 키 ID입니다.  HTTP  프록시가 필요하지 않다면 ''<code>--keyserver-options honor-http-proxy</code>'' 옵션을 뺄 수 있습니다. 

Sending other people's keys that Larry has signed signed to the key server is also a good idea. We could send Luis Pinto's key to the key server. This way someone who trusts Larry's key can use the signature that he has placed there to trust Luis's key. 

==== 키 서버에서 키 가져오기 ====

Now we are going to search for Gustavo Felisberto's key and add it to the keyring of Larry the cow (just in case you did not notice Gustavo Felisberto is the author this guide :)). 

{{Cmd|gpg --keyserver keys.gnupg.net --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net|output=<pre>
gpg: searching for "humpback@felisberto.net" from hkp server keys.gnupg.net
(1)	Gustavo Felisberto <humpback@gmail.com>
	Gustavo Felisberto <humpback@gentoo.org>
	Gustavo Felisberto <humpback@gentoopt.org>
	Gustavo Felisberto <gustavo@felisberto.net>
	Gustavo Felisberto <humpback@gentoo-pt.org>
	Gustavo Felisberto <humpback@felisberto.net>
	Gustavo Felisberto <gustavo@student.dei.uc.pt>
	Gustavo Felisberto <humpback@student.dec.uc.pt>
	Gustavo Felisberto (apt-get install anarchy) <humpback@felisberto.net>
	  1024 bit DSA key B9F2D52A, created: 2002-12-06
(2)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key 26471D8F, created: 2001-09-05
(3)	Gustavo Felisberto <humpback@altavista.net>
	  1024 bit DSA key E97E0B46, created: 1999-08-04, expires: 2000-08-04 (expired)
(4)	Gustavo A.S.R. Felisberto <humpback@altavista.net>
	  1024 bit DSA key B59AB043, created: 1998-12-10
(5)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key 39EB133D, created: 1998-08-27
(6)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key AE02AF87, created: 1998-06-15
Enter number(s), (N)ext, or (Q)uit > 1
gpg: requesting key B9F2D52A from hkp server keys.gnupg.net
gpg: key B9F2D52A: public key "Gustavo Felisberto <humpback@felisberto.net>" imported
gpg: 3 marginal(s) needed, 1 complete(s) needed, classic trust model
gpg: depth: 0  valid:   4  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 4u
gpg: next trustdb check due at 2015-06-28
gpg: Total number processed: 1
gpg:               imported: 1
</pre>
}}

From the server response it is possible to see few keys have been submitted to the key server, however only <code>B9F2D52A</code> is used. Now Larry the cow can get the key and sign it if he trusts it.

=== GPG 에이전트 사용 ===

==== GPG 에이전트가 무엇인가요? ====

Sometimes working with certain applications requires the use of a GPG key very frequently, which means that a passphrase must be frequently entered. In the past many applications supported a passphrase caching mechanism. This would make life easier for users because passphrases were automatically entered. However, this disallowed sharing this cache across programs (how secure would that be?) and forced applications to reinvent the wheel over and over again. 

A GPG agent is a separate application that GPG uses to cache the passphrase in a standard and secure way. It allows applications to use GPG concurrently: if the passphrase is entered while working in one application, the other application can work with GPG without reiterating the request for the passphrase to unlock the key — if the GPG Agent is configured to allow so, of course. 

Gentoo provides a few GPG agent applications. The {{Package|app-crypt/gnupg}} package contains what could be considered the reference one, and will be the primary choice used in this article.

==== gpg-agent와 pinentry 설정  ====

GnuPG includes <tt>gpg-agent</tt>. Pinentry ({{Package|app-crypt/pinentry}}) is a helper application that <tt>gpg-agent</tt> uses to request the passphrase in a graphical window. It comes in three flavors: it can popup a window using the GTK+, QT, or curses libraries (depending on the USE flags set in {{Path|/etc/portage/make.conf}}). 

If {{Package|app-crypt/pinentry}} was installed with more than one popup window type, it is possible to choose between the windows with the <tt>eselect pinentry</tt> command: 

{{RootCmd|eselect pinentry list|output=
<pre>
Available pinentry implementations:
  [1]   pinentry-gtk-2 *
  [2]   pinentry-curses
  [3]   pinentry-qt4
</pre>
}}

{{RootCmd|eselect pinentry set 1}}

Now create a file called {{Path|~/.gnupg/gpg-agent.conf}} and enter the following lines which define the default timeout of the passphrase (e.g. 30 minutes) and the application to be called for when the passphrase should be retrieved the first time (e.g. the GTK+ version of Pinentry). 

{{FileBox|filename=~/.gnupg/gpg-agent.conf|
pinentry-program /usr/bin/pinentry-gtk-2
no-grab
default-cache-ttl 1800
}}

이제 적당한 때에 에이전트를 사용하도록 GnuPG를 설정하겠습니다. {{Path|~/.gnupg/gpg.conf}}를 편집하여 다음 줄을 추가하십시오. 

{{FileBox|filename=~/.gnupg/gpg.conf|title=GPG 에이전트를 사용하도록 GnuPG 설정|
use-agent
}}

Now the system is (almost) ready to use the GPG agent.

==== GPG 에이전트 자동으로 시작하기 ====

If KDE is used as the desktop environment, edit the following {{Path|/etc/kde/startup/agent-startup.sh}} (system-wide) or {{Path|~/.kde4/env/gpg-agent.sh}} (local user) file. Add the following command to the appropriate file to have KDE automatically starting the GPG Agent: 

{{FileBox|filename=/etc/kde/startup/agent-startup.sh|title=KDE가 GPG 에이전트를 자동으로 시작하도록 하기|lang=bash|1=
eval "$(gpg-agent --daemon)"
}}

Additionally, uncomment the following lines in {{Path|/etc/kde/shutdown/agent-shutdown.sh}} (system-wide) or add it to {{Path|~/.kde4/shutdown/gpg-agent.sh}} (local user): 

{{FileBox|filename=/etc/kde/shutdown/agent-shutdown.sh|KDE에서 GPG 에이전트를 끄도록 설정|lang=bash|1=
if [ -n "${GPG_AGENT_INFO}" ]; then
  kill $(echo ${GPG_AGENT_INFO} | cut -d':' -f 2) >/dev/null 2>&1
fi
}}

When using a desktop environment other than KDE, put that line (the same as mentioned above) in the {{Path|~/.xinitrc}} file (if the <tt>startx</tt> command is used to invoke the GUI) or the {{Path|~/.xsession}} file (if XDM, GDM, KDM are used).

=== 문서 작성시 활용하기 ===

=== 암호화 및 서명 ===

Lets say that Larry has a file he wishes to send Luis. Larry can encrypt it, sign it, or encrypt it and sign it. Encrypting means that only Luis will be able to open it. The signature tells Luis that it was really Larry who created the file. 

The next three commands will do just that: encrypt, sign and encrypt/sign. 

{{Cmd|gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt
|gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign
|gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign}}

This will create binary files. When wishing to create ASCII files, just add a <code>--clearsign</code> option to the beginning of the command. 

==== 해독 및 서명 검증====

Suppose that Larry has received a file which is encrypted to him. The command used to decrypt it is <tt>gpg --output document --decrypt encrypted_doc.gpg</tt>. This will decrypt the document and verify the signature (if there is one). 

==== 키 없이 암호화 및 해독 ====

It is possible to encrypt files using passwords instead of keys. The password itself will function ''as'' the key — it will be used as a ''symmetric cypher''. The file can be encrypted using <tt>gpg --symmetric</tt>; decrypting uses the same command as mentioned previously. 

{{Cmd|gpg --output document.gpg --symmetric document}}

GnuPG에서는 암호를 물어보고 암호 검증을 수행할 것입니다.

==== 고급 기능 ====

GnuPG에는 몇가지 고급 기능이 있습니다. 이를 찾아보려면 {{Path|~/.gnupg/gpg.conf}} 파일을 열어보십시오. 

{{FileBox|filename=~/.gnupg/gpg.conf|
#keyserver x-hkp://keys.gnupg.net
#keyserver-options auto-key-retrieve include-disabled include-revoked
}}

Search for the above two lines and uncomment them. With this modification made, any time GnuPG needs to check a signature and does not find the public key on the local keyring it will contact the key server at [http://keys.gnupg.net:11371/ keys.gnupg.net] in attempt to fetch the public key from from the server. 

Another nice command is <tt>gpg --refresh-keys</tt>. This will contact the key server defined in the configuration file and refresh the public keys in the local key ring from there. It is capable of searching for revoked keys, new IDs, and new signatures on keys. It is a wise idea run this command once or twice a month; if a user revokes their key this can provide a notification the key can no longer be trusted.

=== GnuPG 인터페이스 ===

==== 전자메일 서명 정보 ====

GnuPG를 전자메일과 함께 사용하는 95%의 목적은 보내는 메시지를 서명하고 암호화 하거나 서명/암호화 한 메시지를 읽는데 있습니다.

GnuPG로 전자 메일을 서명/암호화 하는데 두가지 방법이 있는데, 예전 방법과 최근의 방법입니다. 예전 방법대로는 메시지는 평문으로 나타나지만, 가능한 형식을 갖추지 않고, 첨부한 파일에 대해서는 서명 및 암호화를 하지 않습니다. 여기에 예전 방식대로의 메시지 서명 예를 들도록 하겠습니다: 

{{CodeBox|title=평문 서명|<nowiki>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1
  
Test message
  
-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.8 for non-commercial use
  
iQA/AwUBP8461jMX0745gR7AEQIEOwCg011GbufXO3ED3FkLWXmfzg7xm1cAoJD0
0EU3Kd2EKNCqataEqM5qjpPs
=LchZ
-----END PGP SIGNATURE-----
</nowiki>
}}

HTML을 인식하는 기능을 갖춘 GUI 기반 전자메일 읽기 프로그램에게는 오늘날 이 방식대로 주고 받는 메시지가 썩 좋은 방식이 아닙니다. 

To solve this an addition to the MIME (Multipurpose Internet Mail Extensions) was created. This adds a field to the email that tells the mail reader that the full content of the message is signed and/or encrypted. The problem with this is that not all mail readers support such features. Some even mess up the content (Microsoft's Outlook is famous for not working with this). 

==== Kgpg ====

Kgpg ({{Package|kde-base/kmail}})는 GnuPG용으로 사용하는 멋들어진 GUI 프로그램입니다. 주 화면에는 서명 또는 암호화 한 테그트를 붙여넣을 수 있고, 그 반대도 가능합니다. 복호화할 ASCII로 이루어진 텍스트도 입력할 수 있습니다. 

From within the main screen text decrypted (a password is needed), files encrypted, and pasted text can be signed.

==== Seahorse ====

Seahorse ({{Package|app-crypt/seahorse}})는 그놈 데스크톱용 GnuPG GUI 인터페이스를 목표로 합니다. 이 프로그램은 빠르게 발전을 거듭해왔지만, kgpg나 명령줄 버전의 프로그램에서 대부분의 중요하다고 생각되는 기능이 빠져있습니다. 

==== KMail ====

If the <code>crypt</code> USE flag is set, KMail will be compiled with gpg support, and will be able to encrypt and decrypt inline PGP mails automatically as well as encrypting OpenPGP/MIME mails. To decrypt OpenPGP/MIME mails as well (most users want) a GPG agent must be running. 

To verify if KMail is properly configured navigate to {{Path|Settings → Configure KMail → Security → Crypto Backends}}. A GpgME-based backend should be listed and the OpenPGP checkbox should be checked. If it is listed but grayed out, click on {{Path|Rescan}}. If the GpgME-based backend remains grayed out, KMail is not working properly. 

When unable to get KMail to behave, see the [https://userbase.kde.org/KMail/PGP_MIME official KMail PGP page] for more information. 

==== Claws-Mail ====

[[Claws Mail|이 메일 클라이언트]]<sup style="color: #ff0077">en</sup>는 큰 용량의 메일함에 ''매우'' 빠르게 동작하며, GPG와 상당히 잘 동작하고, 메일 보기 프로그램에 바라는 세련된 모든 기능이 다 들어있습니다. 유일한 문제라면 예전 PGP 서명으로는 동작하지 않기 때문에 이런 메일을 받게 되면 서명을 직접 확인해야 합니다. 

To use a GPG key with [[Claws Mail|Claws-Mail]] navigate to {{Path|account configuration → privacy tab}}. Once there choose which key to use, most users should go with the default key.

=== 마무리 생각과 고마운 사람들 ===

=== 몇가지 문제 ===

I had some problems with photos in keys. Check the version you are using. If you have GnuPG 1.2.1-r1 and up you are probably OK, older versions may have problems. Also most key servers do not like keys with photos, so you are better if you don't add photos. 

The latest versions of GnuPG do not seem to work with the <tt>gpg --send-keys</tt> that was used to send all keys in a keyring to the public server. 

=== 여기에 없는 내용 ===

<tt>gpg</tt> is a very complex tool, it lets user do much more than what has been covered here. This document is for users who are new to GnuPG. For more information check out the [http://www.gnupg.org official GnuPG website]. 

This article does not cover tools such as <tt>pgp4pine</tt>, <tt>gpgpine</tt>, <tt>evolution</tt>, and or Windows GPG tools.

=== 고마운 사람들 ===

John Michael Ashley의 [http://www.gnupg.org GnuPG 핸드북]은 초보자들에게 굉장히 좋은 책입니다. 

Swift(Sven Vermeulen)가 이 글을 다시 작성하라고 독촉해주었습니다. 

<nowiki>#gentoo-doc</nowiki> 에 있는 팀원 모두들 대단했어요. 

Tiago Serra는 절 개인 정보 분야를 다시 맏게 해주었습니다.


[[Category:Server and Security]] {{Migrated|originalauthors=Gustavo Felisberto, John P. Davis, Sven Vermeulen, nightmorph}}
