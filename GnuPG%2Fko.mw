<languages />

{{Dated|date=March 3rd, 2015}}
{{InfoBox stack
|{{InfoBox homepage|https://gnupg.org/|header=true}}
|{{InfoBox wikipedia|GNU_Privacy_Guard|text=Wikipedia}}
}}

{{Metadata|abstract=이 안내서는 젠투 리눅스 사용자에게 보안 통신용 도구인 GnuPG 기본 사용 방법을 알려드립니다.}}

이 안내서는 젠투 리눅스 사용자에게 보안 통신용 도구인 GnuPG 기본 사용 방법을 알려드립니다.

== 도입부 ==

=== 이 안내서에서 무얼 배울 수 있을까 ===

이 안내서에서는 독자 여러분이 공용키 암호화 기법, 암호화, 디지털 서명에 대해 잘 알고 있음을 가정합니다. 만약 그렇지 않다면  [http://www.gnupg.org/documentation/guides.html 공식 GnuPG 핸드북] 2장을 따로 보시고 이 글로 다시 돌아오십시오. 

이 안내서에서는 젠투 사용자에게 GnuPG 설치 방법, 키 쌍 만드는 방법, 키 모음에 키 추가하는 방법, 키 서버에 공용키를 제출하고 서명, 암호화, 검증, 보내고 받은 메시지 해독에 대한 모든 내용을 알려드립니다. 독자 여러분께서는 다른 사람들이 메시지 내용을 훔쳐보는걸 막기 위해 어떻게 파일을 암호화 하는지도 배웁니다.

== 설치 ==

=== USE 플래그 ===

{{USEflag|package=app-crypt/gnupg}}

=== Emerge ===

{{Emerge|app-crypt/gnupg}}

=== 다른 프로그램 ===

간단한 수준에서 GnuPG를 이머지해야 합니다. 오늘날 많은 프로그램이 PGP 같은 기능을 지원하기에, USE 변수에 <code>crypt</code> 플래그를 추가하는 것이 좋습니다. 전자메일 클라이언트에서 GnuPG 기능을 활용을 고려한다면 다음 선택지가 적절할 수 있습니다:
* PinePGP ({{Package|mail-client/pinepgp}}); 
* [[Mutt]] ({{Package|mail-client/mutt}}) — 작고 강력한 텍스트 기반 메일 클라이언트;
* [[Thunderbird]] ({{Package|mail-client/thunderbird}}) — 모질라 전자메일 솔루션;
* [[Evolution]] ({{Package|mail-client/evolution}}) — 그놈의 마이크로소프트 아웃룩 유사 동작 클라이언트;
* [[KMail]] ({{Package|kde-base/kmail}}) — KDE 메일 클라이언트
** KDE 데스크톱 환경을 사용한다면  KGPG ({{Package|kde-base/kgpg}}) 설치에 관심있을 수도 있습니다. 이 작은 프로그램은 세련된 몇 가지 기능을 갖추고 있는데, 키 쌍을 만들고, ASCII 파일에서 키를 가져오고, 가져온 키에 서명하고, 키를 내보냅니다.

== 사용법 ==

=== 공용 키 모음에 키 만들고 추가하기 ===

==== 키 만들기 ====

키를 만들려면 그냥 {{c|gpg --gen-key}}를 실행하십시오. 처음에 실행할 때 몇가지 디렉터리를 만듭니다. 키를 만들려면 다시 실행하십시오: 

{{Cmd|gpg --gen-key|output=<pre>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.
  
Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
   Your selection? 1
</pre>
}}

사용하려는 키의 형식을 선택할 수 있습니다. 대부분 사용자는 기본 RSA 와 RSA를 사용합니다. 그 다음은 키 크기 입니다. 크면 클수록 좋지만, DSA/ElGamal 키로는 2048비트 이상 사용할 수 없습니다. 보통 전자메일 통신에서는 2048 비트면 충분합니다.

경과 기간이 도래하면, 조금 작은 키가 낫지만, 대부분 사용자는 유효 기간을 없애거나 2~3년 정도 설정할 수 있습니다. 

{{CodeBox|title=키 크기 지정|<nowiki>
RSA keypair will have 1024 bits.
RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048) 2048
Requested keysize is 2048 bits       
Please specify how long the key should be valid.
         0 = key does not expire
 <n>= key expires in n days
 <n>w = key expires in n weeks
 <n>m = key expires in n months
 <n>y = key expires in n years
 Key is valid for? (0) 0
Key does not expire at all
</nowiki>
}}

이제 키 사용자의 신상 정보를 입력할 때입니다.  다른 사용자에게 공용키를 보낼 때 (가짜 전자메일 주소가 아닌)실제 전자메일 주소가 중요합니다. 

{{CodeBox|title=사용자 정보 입력|
Is this correct (y/n)? y
                          
GnuPG needs to construct a user ID to identify your key.
  
Real name: Larry the cow
Email address: larry@gentoo.org
Comment: Gentoo's own
You selected this USER-ID:
"Larry the cow (Gentoo's own) <larry@gentoo.org>"
  
Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O 
You need a Passphrase to protect your secret key.    
  
Enter passphrase: 
}}

이제 암호를 두 번 입력하십시오. 강력한 암호를 활용하는 것이 좋습니다. 관련 개인키를 취득하여 암호를 깰 수 있다면 실제 사용자처럼 메시지를 암호화해서 사용자를 속일 수 있습니다. 악의적인 사용자는 신뢰하는 전자메일 또는 메시지가 범죄 희생양이 보낸 것처럼 속여 연락처의 모든 대상 사용자에게 보냅니다. 이런 약점은 주된 문제로 대두됩니다.

그러면, GnuPG가 키를 만듭니다. 마우스를 움직이거나, 웹을 탐색하거나, 백그라운드에서 오디오 스트리밍을 재생하면 이러한 절차를 빨리 진행할 수 있게 하는데 GnuPG에서 키 쌍의 보안성을 강화할 임의 데이터를 만들 때 도움이 되기 때문입니다.

==== 폐기 인증 만들기 ====

{{Important|이 부분은 굉장히 중요하므로 ''지금 당장'' 해야합니다.}}

키를 만들고 나면 철회 인증서를 만들어야합니다. 이 철회 인증서는 사용자로 하여금 고약한 일을 겪게 될 경우 (악의적인 사용자가 키/암호 제어권을 얻었다고 가정한다면) 키를 깰 수 있도록 합니다. 

{{Cmd|gpg --list-keys|output=<pre>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 Larry the cow (Gentoo's own) <larry@gentoo.org>
sub  2048g/96D6CDAD 2002-12-08
</pre>}}

{{Cmd|gpg --output revoke.asc --gen-revoke 75447B14|output=<pre>
sec  1024D/75447B14 2002-12-08   Larry the cow (Gentoo's own) <larry@gentoo.org>
  
Create a revocation certificate for this key? y
Please select the reason for the revocation:   
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision? 1
Enter an optional description; end it with an empty line:
> Someone cracked me and got my key and passphrase
>
Reason for revocation: Key has been compromised
Someone cracked me and got my key and passphrase
Is this okay? y
  
You need a passphrase to unlock the secret key for
user: "Larry the cow (Gentoo's own) <larry@gentoo.org>"
1024-bit DSA key, ID 75447B14, created 2002-12-08
  
ASCII armored output forced.
Revocation certificate created.
  
Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
</pre>
}}

{{c|gpg --list-keys}} 명령은 공용 키 모음의 키를 보여줍니다. 키 ID를 볼 때 이 명령을 사용해서 폐기 인증을 만들 수 있습니다. 모든 키를 {{Path|.gnupg}} 디렉터리에, 안전한 매체(안전한 위치에 보관할 CD-R 또는 USB 드라이브)에 폐기 인증을 복사하시는 것이 좋습니다. {{Path|revoke.asc}} 파일은 키를 폐기할 때 사용할 수 있으며, 한 번 사용하고 나면 나중에 다시 사용할 수 없음을 기억하십시오. 

{{Note|이 키를 활용할 전자 메일 주소가 여러개가 있다면 {{c|gpg --edit-key <nowiki><USER_ID></nowiki>}} 명령을 실행한 후 {{c|adduid}} 명령을 사용할 수 있습니다. 이름, 전자메일 주소, 사용할 두번째 ID에 대한 설명을 물어봅니다.}}

==== 키 내보내기 ====

키를 내보내려면 {{c|gpg --armor --output larry.asc --export  <nowiki>larry@gentoo.org</nowiki>}}와 같이 입력하십시오. 거의 언제든 키 ID 또는 키를 식별할 만한 문자열(여기서는 이메일 주소를 사용합니다)을 사용할 수 있습니다. Larry는 이제 친구에게 보내거나 웹 페이지에 넣어 다른 사람들이 Larry와 안전하게 통신할 수 있게 하는 {{Path|larry.asc}} 파일을 가집니다. 

==== 키 가져오기 ====

공용 키 모음에 파일을 추가하려면 다음 단계를 거쳐야합니다:
# 먼저 키를 가져온 다음, 
# 키 지문을 확인해야 합니다. 
# 지문을 인정한 다음, 검증해야 합니다.

{{Note|키를 검증할 때 만전을 기해야 합니다. 공용키 암호화에 있어 가장 취약할 때입니다. }}

이제 Luis Pinto(원 저자의 친구)의 공용키를 공용 키 모음에 추가해보도록 하겠습니다. 친구를 불러 키 지문을 요청한 다음, <tt>fpr</tt> 명령으로 출력한 지문과 비교하도록 하겠습니다. 키를 확인하고 나면 공용 키 모음에 추가합니다. 이 경우, Luis의 키는 2003년 12월 1일에 무효화되며, 유효기간이 경과하는 날에 키가 필요하면 다시 요청할 것입니다. 

{{Cmd|gpg --import luis.asc|output=<pre>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>}}

{{Cmd|gpg --list-keys|output=<pre>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 Larry the cow (Gentoo's own) <larry@gentoo.org>
sub  2048g/96D6CDAD 2002-12-08
  
pub  1024D/462405BB 2002-12-01 Luis Pinto <lmpinto@student.dei.uc.pt>
uid                            Luis Pinto <lmpinto@dei.uc.pt>
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]
</pre>}}

{{Cmd|gpg --edit-key lmpinto@dei.uc.pt|output=<pre>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.
  
gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto <lmpinto@dei.uc.pt>
(2). Luis Pinto <lmpinto@student.dei.uc.pt>
</pre>}}

{{Cmd|fpr|prompt=Command> |output=<pre>
pub  1024D/462405BB 2002-12-01 Luis Pinto <lmpinto@dei.uc.pt>
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
</pre>}}

{{Cmd|sign|prompt=Command> |output=<pre>
Really sign all user IDs? y
                           
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
  
     Luis Pinto <lmpinto@dei.uc.pt>
     Luis Pinto <lmpinto@student.dei.uc.pt>
  
This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) Y
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".
  
   (0) I will not answer. (default)
   (1) I have not checked at all.
   (2) I have done casual checking.
   (3) I have done very careful checking.
  
   Your selection? 3
Are you really sure that you want to sign this key
with your key: "Larry the cow (Gentoo's own) <larry@gentoo.org>"
  
I have checked this key very carefully.
  
Really sign? y
              
You need a passphrase to unlock the secret key for
user: "Larry the cow (Gentoo's own) <larry@gentoo.org>"
1024-bit DSA key, ID 75447B14, created 2002-12-08
</pre>}}

{{Cmd|check|prompt=Command> |output=<pre>
uid  Luis Pinto <lmpinto@dei.uc.pt>
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   Larry the cow (Gentoo's own) <larry@gentoo.org>
uid  Luis Pinto <lmpinto@student.dei.uc.pt>
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   Larry the cow (Gentoo's own) <larry@gentoo.org>
</pre>
}}

=== 키 서버와의 키 교환 ===

==== 키 서버로 키 보내기 ====

이제 키를 만들었으니, 키 서버로 보내 보도록 하는게 어떨까 합니다. 키 서버는 전세계에 널려있고, 대부분의 키 서버들끼리 공용키를 주고받습니다. 이 예제에서 Larry 소의 키를 keys.gnupg.net 서버로 보내겠습니다. 키를 보낼 때 HTTP를 사용하므로 HTTP 트래픽에 대해 프록시를 사용한다면 이 설정( <tt><nowiki>export http_proxy=http://proxy_host:port/</nowiki></tt> )을 잊지 마십시오. 키를 보내는 명령은 다음과 같습니다. {{c|gpg --keyserver keys.gnupg.net --keyserver-options honor-http-proxy --send-key 75447B14}} 여기서 <code>75447B14</code>는 키 ID입니다.  HTTP  프록시가 필요하지 않다면 ''<code>--keyserver-options honor-http-proxy</code>'' 옵션을 뺄 수 있습니다. 

또한 Larry가 서명한 다른 사람의 키를 키 서버에 보내는건 좋은 방안입니다. Luis Pinto의 키를 키 서버로 보낼 수 있었습니다. 이런 방법을 통해 Larry의 키를 믿는 사람이 Luis 의 키를 믿을 수 있게 둔 서명을 사용할 수 있습니다. 

==== 키 서버에서 키 가져오기 ====

이제 Gustavo Felisberto의 키를 검색하고 Larry the cow의 키 모음에 추가하도록 하겠습니다((그냥 이 경우에는 Gustabo Felisberto가 이 안내서의 작성자 임을 알아채지 못합니다 :)) 

{{Cmd|gpg --keyserver keys.gnupg.net --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net|output=<pre>
gpg: searching for "humpback@felisberto.net" from hkp server keys.gnupg.net
(1)	Gustavo Felisberto <humpback@gmail.com>
	Gustavo Felisberto <humpback@gentoo.org>
	Gustavo Felisberto <humpback@gentoopt.org>
	Gustavo Felisberto <gustavo@felisberto.net>
	Gustavo Felisberto <humpback@gentoo-pt.org>
	Gustavo Felisberto <humpback@felisberto.net>
	Gustavo Felisberto <gustavo@student.dei.uc.pt>
	Gustavo Felisberto <humpback@student.dec.uc.pt>
	Gustavo Felisberto (apt-get install anarchy) <humpback@felisberto.net>
	  1024 bit DSA key B9F2D52A, created: 2002-12-06
(2)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key 26471D8F, created: 2001-09-05
(3)	Gustavo Felisberto <humpback@altavista.net>
	  1024 bit DSA key E97E0B46, created: 1999-08-04, expires: 2000-08-04 (expired)
(4)	Gustavo A.S.R. Felisberto <humpback@altavista.net>
	  1024 bit DSA key B59AB043, created: 1998-12-10
(5)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key 39EB133D, created: 1998-08-27
(6)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key AE02AF87, created: 1998-06-15
Enter number(s), (N)ext, or (Q)uit > 1
gpg: requesting key B9F2D52A from hkp server keys.gnupg.net
gpg: key B9F2D52A: public key "Gustavo Felisberto <humpback@felisberto.net>" imported
gpg: 3 marginal(s) needed, 1 complete(s) needed, classic trust model
gpg: depth: 0  valid:   4  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 4u
gpg: next trustdb check due at 2015-06-28
gpg: Total number processed: 1
gpg:               imported: 1
</pre>
}}

서버 응답에서 키 서버로 몇가지 키를 제출했음을 볼 수 있습니다만, 현재 ''<code>B9F2D52A</code>'' 만을 사용합니다. 이제 Larry the cow가 키를 받을 수 있고 키를 믿을 수 있다면 키에 서명할 수 있습니다.

=== GPG 에이전트 사용 ===

==== GPG 에이전트가 무엇인가요? ====

가끔 몇가지 프로그램을 다루다보면 GPG키를 빈번하게 사용하도록 요구하는데, 이는 암호를 자주 입력해야 한다는 의미입니다. 예전에는 대부분의 프로그램에서 암호 캐싱 기술을 지원했습니다. 이 기술은 암호를 자동으로 입력하므로 사용자에게 매우 편리했습니다. 그러나 프로그램 사이에서 이 캐시를 공유(보안이 어떻게 될까요?)하게끔 하는건 허락되지 않으며 프로그램에 하던 동작을 계속 하도록 강제하기도 합니다. 

GPG 에이전트는 GPG가 안전한 표준 방식으로 암호를 캐싱하도록 사용하는 별개의 프로그램입니다. 이 프로그램은 다른 프로그램이 GPG를 동시에 사용하도록합니다. 어떤 프로그램 사용 중에 암호를 입력하면 다른 프로그램은 키 잠금을 풀기 위해 암호를 재차 요구하지 않고도 동작할 수 있습니다. GPG 에이전트가 이걸 허용하도록 했느냐면, 물론입니다. 

젠투에서는 GPG 에이전트 프로그램을 제공합니다. {{Package|app-crypt/gnupg}} 꾸러미에 참조할 것으로 간주할 수 있는 요소를 넣었으며, 이 문서에서 주로 활용합니다.

==== gpg-agent와 pinentry 설정  ====

GnuPG에는 {{c|gpg-agent}}가 있습니다. ({{Package|app-crypt/pinentry}})는 {{c|gpg-agent}}가 그래픽 창 환경에서 암호를 요구할때 사용하는 도우미 프로그램입니다. 다음 세가지 방식이 들어있습니다. GTK+, QT, curses 라이브러리를 사용하여 창을 띄울 수 있습니다({{Path|/etc/portage/make.conf}}의 USE 플래그에 의존). 

한가지 이상의 창 띄우기 방식으로 {{Package|app-crypt/pinentry}}를 설치했다면 {{c|eselect pinentry}} 명령으로 방식을 선택할 수 있습니다. 

{{RootCmd|eselect pinentry list|output=
<pre>
Available pinentry implementations:
  [1]   pinentry-gtk-2 *
  [2]   pinentry-curses
  [3]   pinentry-qt4
</pre>
}}

{{RootCmd|eselect pinentry set 1}}

이제 {{Path|~/.gnupg/gpg-agent.conf}} 파일을 만들고, 암호 입력 기본 제한시간을 정의하는 다음 줄을 입력한 후 (pinentry GTK+ 버전의 경우) 처음에 암호를 가져와야 하는경우 프로그램을 호출하도록 해보겠습니다. 

{{FileBox|filename=~/.gnupg/gpg-agent.conf|
pinentry-program /usr/bin/pinentry-gtk-2
no-grab
default-cache-ttl 1800
}}

이제 적당한 때에 에이전트를 사용하도록 GnuPG를 설정하겠습니다. {{Path|~/.gnupg/gpg.conf}}를 편집하여 다음 줄을 추가하십시오. 

{{FileBox|filename=~/.gnupg/gpg.conf|title=GPG 에이전트를 사용하도록 GnuPG 설정|
use-agent
}}

이제 GPG 에이전트 사용 준비가 (거의) 되었습니다.

==== GPG 에이전트 자동으로 시작하기 ====

KDE를 데스크톱 환경으로 사용한다면, 다음 {{Path|/etc/kde/startup/agent-startup.sh}}를 편집하여 (시스템 전체) 또는 {{Path|~/.kde4/env/gpg-agent.sh}} (로컬 사용자) 파일의 주석을 제거하십시오. 다음 명령을 적당한 파일에 추가하여 KDE를 시작할 때 자동으로 GPG 에이전트를 시작할 수 있게 하십시오: 

{{FileBox|filename=/etc/kde/startup/agent-startup.sh|title=KDE가 GPG 에이전트를 자동으로 시작하도록 하기|lang=bash|1=
eval "$(gpg-agent --daemon)"
}}

또한, {{Path|/etc/kde/shutdown/agent-shutdown.sh}} (시스템 범위)의 다음 줄을 제거하거나, 이 줄을 {{Path|~/.kde4/shutdown/gpg-agent.sh}} (로컬 사용자)에 추가하십시오: 

{{FileBox|filename=/etc/kde/shutdown/agent-shutdown.sh|KDE에서 GPG 에이전트를 끄도록 설정|lang=bash|1=
if [ -n "${GPG_AGENT_INFO}" ]; then
  kill $(echo ${GPG_AGENT_INFO} | cut -d':' -f 2) >/dev/null 2>&1
fi
}}

KDE가 아닌 각기 다른 데스크톱 환경을 사용한다면, (GUI 환경을 실행할 때 {{c|startx}}를 사용하는 경우) {{Path|~/.xinitrc}} 또는 (XDM, GDM, KDM을 사용한다면){{Path|~/.xsession}}에 (위에 적힌대로) 해당 내용을 추가하십시오.

=== 문서 작성시 활용하기 ===

=== 암호화 및 서명 ===

이제 Larry에게 보내려는 파일이 있다고 해보겠습니다. 이걸 암호화 할 수 있고, 서명할 수도 있으며, 심지어는 암호화와 서명을 동시에 할 수도 있습니다. 암호화는 Larry만이 열 수 있음을 의미하며, 서명은 Larry에게 이 파일을 만든 진짜 사람이 여러분임을 알려줍니다. 

다음 세가지 명령으로 암호화, 서명, 그리고 암호화 및 서명을 처리할 수 있습니다. 

{{Cmd|gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt
|gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign
|gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign}}

이 명령으로 이진 파일을 만듭니다. ASCII 파일을 만들려면 명령 시작 부분에 <code>--clearsign</code>만 추가하십시오. 

==== 해독 및 서명 검증====

Larry가 암호화 된 파일을 받았다고 가정해보겠습니다. 해독할 명령은 {{c|gpg --output document --decrypt encrypted_doc.gpg}}입니다. 이 명령으로 문서를 해독하고 서명(이 있다면)을 검증합니다. 

==== 키 없이 암호화 및 해독 ====

키 대신 암호를 사용하여 파일을 암호화 할 수 있습니다. 글쎄요, 암호 자체는 키 처럼 동작합니다 - ''대칭 암호''처럼 사용합니다. {{c|gpg --symmetric}} 명령을 활용하여 파일을 암호화 할 수 있습니다. 해독할 때는 이전에 우리가 이야기 했던 대로 같은 명령을 사용하시면 됩니다. 

{{Cmd|gpg --output document.gpg --symmetric document}}

GnuPG에서는 암호를 물어보고 암호 검증을 수행할 것입니다.

==== 고급 기능 ====

GnuPG에는 몇가지 고급 기능이 있습니다. 이를 찾아보려면 {{Path|~/.gnupg/gpg.conf}} 파일을 열어보십시오. 

{{FileBox|filename=~/.gnupg/gpg.conf|
#keyserver x-hkp://keys.gnupg.net
#keyserver-options auto-key-retrieve include-disabled include-revoked
}}

두 줄을 찾아서 주석 표시를 지워보십시오. 수정한 설정을 통해 GnuPG에서는 언제든지 서명을 확인하려 하며, 로컬 키 모음에 공용키를 찾으려 하지 않을 것이고, [http://keys.gnupg.net:11371/ keys.gnupg.net] 서버에 요청하여  공용키를 가져오려 시도합니다. 

다른 괜찮은 명령으로는 {{c|gpg --refresh-keys}}가 있습니다. 이 명령은 설정 파일에 지정한 키 서버와 연결하여 로컬 키 모음의 공용키를 새로 고칩니다. 폐기한 키, 새 ID, 새 서명을 검색할 수 있습니다. 한 달에 한 두번은 이 명령을 실행하는게 좋습니다. 어떤 사람이 자신의 키를 버리면 키 자체에서 더 이상 신뢰할 수 없음을 알릴 수 있습니다.

=== GnuPG 인터페이스 ===

==== 전자메일 서명 정보 ====

GnuPG를 전자메일과 함께 사용하는 95%의 목적은 보내는 메시지를 서명하고 암호화 하거나 서명/암호화 한 메시지를 읽는데 있습니다.

GnuPG로 전자 메일을 서명/암호화 하는데 두가지 방법이 있는데, 예전 방법과 최근의 방법입니다. 예전 방법대로는 메시지는 평문으로 나타나지만, 가능한 형식을 갖추지 않고, 첨부한 파일에 대해서는 서명 및 암호화를 하지 않습니다. 여기에 예전 방식대로의 메시지 서명 예를 들도록 하겠습니다: 

{{CodeBox|title=평문 서명|<nowiki>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1
  
Test message
  
-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.8 for non-commercial use
  
iQA/AwUBP8461jMX0745gR7AEQIEOwCg011GbufXO3ED3FkLWXmfzg7xm1cAoJD0
0EU3Kd2EKNCqataEqM5qjpPs
=LchZ
-----END PGP SIGNATURE-----
</nowiki>
}}

HTML을 인식하는 기능을 갖춘 GUI 기반 전자메일 읽기 프로그램에게는 오늘날 이 방식대로 주고 받는 메시지가 썩 좋은 방식이 아닙니다. 

이러한 추가 문제를 해결하기 위해 MIME(다중 목적 인터넷 메일 확장)을 만들었습니다. 이 규약을 통해 메일 보기 프로그램에 메시지 전체 내용을 서명했는지 암호화했는지를 알려주는 필드를 추가했습니다. 이에 대한 문제는 모든 메일 보기 프로그램이 이 기능을 지원하지 않는다는 점입니다. 일부 내용을 잘라버리기도 합니다(마이크로소프트 아웃룩은 이 기능을 지원하지 않기로 유명한 프로그램입니다). 

==== Kgpg ====

Kgpg ({{Package|kde-base/kmail}})는 GnuPG용으로 사용하는 멋들어진 GUI 프로그램입니다. 주 화면에는 서명 또는 암호화 한 테그트를 붙여넣을 수 있고, 그 반대도 가능합니다. 복호화할 ASCII로 이루어진 텍스트도 입력할 수 있습니다. 

주 화면에서 문장(암호도 적어야 합니다) 해독, 다른 파일의 암호화, 새 문장 서명을 할 수 있습니다.

==== Seahorse ====

Seahorse ({{Package|app-crypt/seahorse}})는 그놈 데스크톱용 GnuPG GUI 인터페이스를 목표로 합니다. 이 프로그램은 빠르게 발전을 거듭해왔지만, kgpg나 명령줄 버전의 프로그램에서 대부분의 중요하다고 생각되는 기능이 빠져있습니다. 

==== KMail ====

<code>crypt</code> USE 플래그를 설정했다면 KMail은 gpg 지원을 포함하여 컴파일 하며, OpenPGP/MIME 메일을 암호화하고, 자체 PGP 메일을 자동으로 암호화/해독 할 수 있습니다. OpenPGP/MIME 메일을 마찬가지로 해독하려면(대부분 사용자들이 원하는 대로) GPG 에이전트를 실행하고 있어야 합니다. 

{{Path|Settings → Configure KMail → Security → Crypto Backends}}로 이동하여 KMail을 제대로 설정했는지 확인하십시오. GpgME 기반 백엔드 목록을 볼 수 있어야 하고, OpenPGP 확인 상자에 표시할 수 있어야 합니다. 목록에는 있는데 회색으로 표시되어 있다면, {{Path|Rescan}}을 누르십시오. GpgME 기반 백엔드가 그래도 회색으로 표시되어 있다면, KMail이 제대로 동작하고 있는 것은 아닙니다. 

KMail에서 이 기능을 쓸 수 없다면, [https://userbase.kde.org/KMail/PGP_MIME 공식 KMail PGP 페이지] 에서 더 많은 내용을 알아보십시오. 

==== Claws-Mail ====

[[Claws Mail|이 메일 클라이언트]]<sup style="color: #ff0077">en</sup>는 큰 용량의 메일함에 ''매우'' 빠르게 동작하며, GPG와 상당히 잘 동작하고, 메일 보기 프로그램에 바라는 세련된 모든 기능이 다 들어있습니다. 유일한 문제라면 예전 PGP 서명으로는 동작하지 않기 때문에 이런 메일을 받게 되면 서명을 직접 확인해야 합니다. 

[[Claws Mail|Claws-Mail]]에서 gpg 키를 사용하려면 {{Path|계정 설정 → 개인정보 탭}}으로 이동하십시오. 어떤 키를 사용할 지 선택했으면 대부분 사용자에게 기본 키를 넣어 보내야합니다.

=== 마무리 생각과 고마운 사람들 ===

=== 몇가지 문제 ===

키에 들어간 사진에 약간의 문제가 있습니다. 어떤 버전을 사용하는지 확인하십시오. GnuPG 1.2.1-r1 이상이면 괜찮습니다, 그러나 그 이전의 버전이라면 문제가 있을 수 있습니다. 또한 대부분의 키 서버에서는 키랑 사진이 붙어있는걸 별로 좋아하지 않으므로, 사진을 추가하지 않는다면 괜찮습니다. 

GnuPG 최신 버전에서는 공용 서버로 키 모음의 모든 키를 보내는데 사용하던 {{c|gpg --send-keys}} 명령이 동작하지 않는 것 같습니다. 

=== 여기에 없는 내용 ===

<tt>gpg</tt>는 매우 복잡한 도구라, 사용자는 여기서 다룬 내용 보다 더 많은 작업을 처리 할 수 있습니다. 이 문서는 GnuPG 초보자용입니다. 더 많은 내용은 [http://www.gnupg.org 공식 GnuPG 웹사이트]를 참고하세요. 

이 문서는 <tt>pgp4pine</tt>, <tt>gpgpine</tt>, <tt>evolution</tt> 그리고 윈도우즈 GPG 도구를 다루지 않습니다.

=== 고마운 사람들 ===

John Michael Ashley의 [http://www.gnupg.org GnuPG 핸드북]은 초보자들에게 굉장히 좋은 책입니다. 

Swift(Sven Vermeulen)가 이 글을 다시 작성하라고 독촉해주었습니다. 

<nowiki>#gentoo-doc</nowiki> 에 있는 팀원 모두들 대단했어요. 

Tiago Serra는 절 개인 정보 분야를 다시 맏게 해주었습니다.


[[Category:Server and Security]] {{Migrated|originalauthors=Gustavo Felisberto, John P. Davis, Sven Vermeulen, nightmorph}}
