<languages />

<translate>

<!--T:101-->
{{Metadata|abstract=This guide is meant to be a repository of alternative Gentoo installation methods, for those with special installation needs such as lack of a CD-ROM or a computer that can't boot CDs.}}

<!--T:1-->
This guide is meant to be a repository of alternative Gentoo installation methods, for those with special installation needs such as lack of a CD-ROM or a computer that cannot boot CDs.

== About this guide == <!--T:2-->

<!--T:3-->
If the standard boot-from-CD install method doesn't work (or just impossible to use, or is just disliked), some help can be found here. This guide serves to provide a repository of alternative Gentoo Linux installation techniques to those who need them. Or, if preferred, it serves as a place to put wacky installation methods. If there is an installation method that has been found useful, or the reader has devised an amusing way of installing Gentoo, please don't hesitate to write something up here, in this article.

== Booting the Install CD with Smart BootManager == <!--T:4-->

<!--T:5-->
Download Smart BootManager available from [http://btmgr.sourceforge.net/download.html http://btmgr.sourceforge.net/download.html]. Linux source or binary format and windows {{Path|.exe}} versions are available as well as many language packs. However, at this time, the preferred method would be to use the binary format, as the source will not compile with newer versions of NASM. 

<!--T:6-->
Either compile the package from source or just grab the binary. There are several options that can be utilized while creating a boot floppy, as seen below. 

<!--T:7-->
{{Invocation|sbminst --help|output=<pre>
sbminst [-t theme] [-d drv] [-b backup_file] [-u backup_file]
  
   -t theme       select the theme to be used, in which the theme could be:
                    us = English theme       de = German theme
                    hu = Hungarian theme     zh = Chinese theme
                    ru = Russian theme       cz = Czech theme
                    es = Spanish theme       fr = French theme
                    pt = Portuguese theme
  
   -d drv         set the drive that you want to install Smart BootManager on;
                  for Linux:
                    /dev/fd0 is the first floppy driver,
                    /dev/hda is the first IDE harddisk driver.
                    /dev/sda is the first SCSI harddisk driver.
                  for DOS:
                    0   is the first floppy drive
                    128 is the first hard drive;
  
   -c             disable CD-ROM booting feature;
  
   -b backup_file backup the data that will be overwritten for
                  future uninstallation;
  
   -u backup_file uninstall Smart BootManager, should be used alone;
  
   -y             do not ask any question or warning.
</pre>}}

<!--T:8-->
Use {{c|sbminst}} to build the boot floppy:

<!--T:9-->
{{RootCmd|sbminst -t us  -d /dev/fd0}}

<!--T:10-->
{{Note|Replace {{Path|fd0}} with the correct floppy device name.}}

<!--T:11-->
Now simply place the floppy in the floppy drive of the computer, as well as placing the Install CD in the CD-ROM and boot the computer. 

<!--T:12-->
The Smart BootManager dialog will appear. Select the CD-ROM and press the {{Key|Enter}} (Return) key to boot the Install CD. Once booted proceed with the standard installation instructions. 

<!--T:13-->
Further information on Smart BootManager may be found at [http://btmgr.sourceforge.net/ http://btmgr.sourceforge.net/].

== Installation from non-Gentoo LiveCDs == <!--T:14-->

=== Introduction === <!--T:15-->

<!--T:16-->
{{Important|The Gentoo developers cannot provide support if something goes wrong with a non-Gentoo LiveCD, as there's no way to fix, troubleshoot, or document every quirk of every LiveCD out there. Only Gentoo LiveCDs are officially supported. Please visit the [https://forums.gentoo.org/ Gentoo Forums] for community help when running into problems with alternative installation media.}}

<!--T:17-->
Users can boot other LiveCDs besides the Gentoo-provided CDs. Regardless, these LiveCDs provide a functional environment to use while compiling and installing Gentoo. The instructions provided here should work in principle with just about any other LiveCD. 

<!--T:18-->
There are too many LiveCDs out there to [https://distrowatch.com/search.php list], but an option might be to try out [http://www.knoppix.org/ Knoppix]. It provides a full graphical desktop, with office applications, web browsers, and games to keep busy. Knoppix is only available for {{Keyword|x86}} users, so depending on the user's requirements another LiveCD or method may need to be used. 

<!--T:19-->
{{Warning|Be aware that if anything is saved in the LiveCD's home directory while waiting for the Gentoo system to install, it will not be available when rebooting into Gentoo. Be sure to save important files on the hard disk or on some other computer!}}

=== Installation instructions === <!--T:20-->

<!--T:21-->
Boot from the LiveCD. Open a terminal and run {{c|su -}} so the password can be changed. This allows to set the root password for the CD. The sshd daemon can now be configured for remote login if required. Next, creating the {{Path|/mnt/gentoo}} mount point is necessary. 

<!--T:22-->
{{RootCmd|mkdir /mnt/gentoo}}

<!--T:23-->
At this point, the standard install documentation can be picked up at [[Handbook:AMD64/Installation/Disks|Preparing the Disks]]. However, when asked to mount the proc system, issue the following command instead: 

<!--T:24-->
{{RootCmd|mount -o bind /proc /mnt/gentoo/proc}}

<!--T:25-->
When unpacking the [[stage tarball]] in [[Handbook:AMD64/Installation/Stage#Unpacking_the_stage_tarball|Unpacking the stage tarball]], be sure to use the following {{c|tar}} command options to ensure that proper group IDs are enforced on the unpacked stage: 

<!--T:26-->
{{RootCmd|tar --numeric-owner --xattrs -xvjpf stage3-*.tar.bz2 -C /mnt/gentoo }}

<!--T:103-->
If Ubuntu is being used, note that {{Path|/dev/shm}} is a symbolic link to {{Path|/run/shm}}. It must be bind-mounted or a tmpfs mount has to be set at this location (within the chroot path). To bind-mount the location, run the following command (before chrooting):

<!--T:104-->
{{RootCmd|mount --rbind /run/shm /mnt/gentoo/run/shm}}

<!--T:105-->
This is to avoid {{Bug|496328}} where Python sees <code>sem_open()</code> as broken (due to lack of {{Path|/dev/shm}}) and Portage seeing that as an error (technically Python configuration would continue and build assuming the <var>POSIX_SEMAPHORES_NOT_ENABLED</var> variable has been enabled but this would lead to a very undesired Python build).

<!--T:27-->
Once ready to chroot into the unpacked stage in [[Handbook:AMD64/Installation/Base|Installing Base System]], a different chroot command sequence will need to be used. This ensures that the environment variables are properly setup. 

<!--T:28-->
{{Note|Some LiveCDs use a funny environment setup, hence the {{c|env -i}} option for
cleaning it up to a reasonable state.}}

<!--T:29-->
{{RootCmd
|chroot /mnt/gentoo /bin/env -i TERM{{=}}$TERM /bin/bash
|env-update
|source /etc/profile
|export PS1{{=}}"(chroot) $PS1"
}}

<!--T:30-->
Finally, know that some Portage <var>FEATURES</var> may not work in the LiveCD. Especially watch out for <code>userpriv</code> and <code>usersandbox</code> values. If there are errors, try disabling some or all of the optional <var>FEATURES</var>.

== Diskless install using PXE and kernel/initrd/squashfs from the LiveCD == <!--T:106-->

<!--T:107-->
This method is easier to configure than PXE boot based on iSCSI or NFS. Multiple machines can boot from the same set of images distributed via TFTP and can be easily extended to also work over HTTP or other protocol.

<!--T:127-->
Having a nice router or one capable of running open source firmware such as [https://lede-project.org/ LEDE], the successor to [https://openwrt.org/ OpenWRT], is one way to centralize TFTP and DHCP. Getting the firmware online could be an uphill battle, depending on your experience.

<!--T:108-->
Some other distributions including Fedora already distribute images needed to bootstrap a live or installation CD. With Gentoo, this is not the case. Instead, users need to

<!--T:124-->
# Extract kernel, initrd and [[SquashFS|squashfs]] from the live CD.
# Patch initrd contents.
# Merge squashfs into initrd.

<!--T:125-->
Only then can a PXE based boot loader be configured that will load the images and boot into a live system.

<!--T:128-->
There are different flavors of PXE, but all of them are going to need the kernel and initrd file, so let's create those files now. Download the [https://www.gentoo.org/downloads/ minimal installation CD]. Then, execute the following script as root. The new files '''initrd''' and '''kernel''' will be created in your specified output directory.

</translate>

{{CodeBox|title=pxe-craft-initrd|lang=bash|1=
#!/bin/bash -e
# Create initrd from a Gentoo Minimal Install CD for PXE boot
# Note. Embedding the squashfs image into the ramdisk is quite a dirty workaround
# link from 2010: https://ercpe.de/blog/how-to-boot-a-gentoo-livecd-via-pxe

print-usage() {
  echo "Usage: $0 <output-dir> <gentoo-iso>" >&2
}

# Example Invocation
# ./pxe-craft-initrd gentoopxe install-amd64-minimal-20190327T214503Z.iso

outdir="$1"
image="$2"
tmp="$outdir/tmp"

if [ $(id -u) -ne "0" ]; then
  echo "You must run as root or with sudo. This is necessary for the loop mount" && 
  print-usage &&
  exit 2
fi

test -z "$outdir" -o -z "$image" && print-usage && exit 1
test -e "$tmp" && echo "Temporary path '$tmp' already exists." >&2 && exit 1

iso="$tmp/iso"
initrd="$tmp/initrd.dir"

# prepare directories
mkdir -p "$outdir" "$tmp" "$iso" "$initrd/mnt/cdrom"

# extract files from ISO image
mount -o ro,loop "$image" "$iso"
cp "$iso"/{image.squashfs,boot/gentoo,boot/gentoo.igz} "$tmp"
umount "$iso"

# rename kernel
mv "$tmp/gentoo" "$tmp/kernel"

# patch initramfs and add squashfs to it
xz -dc "$tmp/gentoo.igz" {{!}} ( cd "$initrd" && cpio -id )
patch -d "$initrd" -p0 <<'EOF'
--- init.orig	2019-03-29 11:27:49.383915780 +0300
+++ init	2019-03-29 11:29:25.642114271 +0300
@@ -491,10 +491,6 @@
 		CHROOT=${NEW_ROOT}
 	fi
 
-	if [ /dev/nfs != "$REAL_ROOT" ] && [ sgimips != "$LOOPTYPE" ] && [ 1 != "$aufs" ] && [ 1 != "$overlayfs" ]; then
-		bootstrapCD
-	fi
-
 	if [ "${REAL_ROOT}" = '' ]
 	then
 		warn_msg "No bootable medium found. Waiting for new devices..."
@@ -636,7 +632,7 @@
 		else
 			bad_msg "Block device ${REAL_ROOT} is not a valid root device..."
 			REAL_ROOT=""
-			got_good_root=0
+			got_good_root=1
 		fi
 	done
 
@@ -718,8 +714,6 @@
 	[ -z "${LOOP}" ] && find_loop
 	[ -z "${LOOPTYPE}" ] && find_looptype
 
-	cache_cd_contents
-
 	# If encrypted, find key and mount, otherwise mount as usual
 	if [ -n "${CRYPT_ROOT}" ]
 	then
EOF
cp "$tmp/image.squashfs" "$initrd/mnt/cdrom"
( cd "$initrd" && find . -print {{!}} cpio -o -H newc {{!}} gzip -9 -c - ) > "$tmp/initrd"

mv "$tmp"/{kernel,initrd} "$outdir"
rm -rf "$tmp"
}}

<translate>

<!--T:129-->
If you know what you're doing, you can be on your way! Enjoy Gentoo on PXE. Otherwise, see below for more directions depending on the PXE flavor you're using.

=== TFTP === <!--T:130-->

<!--T:131-->
This will be needed in tandem with a DHCP server for most PCs equipped with PXE boot. However, realize that you could use iPXE to boot without a TFTP or DHCP server! See [http://ipxe.org/ ipxe.org] for info on embedding scripts, chainloading, and manual booting. There are still merits to TFTP booting such as wide-range device support, so let's get to serving TFTP!

<!--T:110-->
Install {{Package|net-ftp/tftp-hpa}}, make sure it serves {{Path|/tftproot}} and start it.

<!--T:113-->
Now the TFTP boot service is ready, so the next step is to configure a DHCP service. 

=== DHCP === <!--T:132-->

<!--T:133-->
Setting up a DHCP server on the same machine is possible - just make sure that the booted machines are connected to it. Or just tweak the configuration of an existing router.

<!--T:114-->
Example configuration for OpenWRT DHCP service follows:

<!--T:115-->
{{FileBox|filename=/etc/config/dhcp|1=
config boot linux                   
        option filename boot/grub/i386-pc/core.0
        option servername boot
        option serveraddress 84.246.161.86
}}

<!--T:134-->
From here, directions will change depending on what flavor your PXE is (i.e. SYSLINUX, GRUB, iPXE). 


=== SYSLINUX ===

{{CodeBox|title=pxelinux.cfg/default|1=
label gentoo rescue
        kernel gentoopxe/kernel
        append initrd=gentoopxe/initrd root=/dev/ram0 init=/linuxrc loop=/image.squashfs looptype=squashfs cdroot=1 real_root=/
}}


=== GRUB === <!--T:135-->

<!--T:136-->
After executing the '''pxe-craft-initrd-kernel''' script, run the following '''pxe-install-grub''' to output proper files into your tftp root directory.

<!--T:137-->
{{CodeBox|title=pxe-install-grub|lang=bash|1=
#!/bin/bash -xe
# prepare boot data
 
print-usage() {
  echo "Usage: $0 -i [initrd-file] -k [kernel-file] <tftproot>" >&2
}
 
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
 
case $key in
    -i{{!}}--initrd)
    initrd="$2"
    shift # past argument
    shift # past value
    ;;
    -k{{!}}--kernel)
    kernel="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters
 
tftproot="$1"
 
test ! -e "$initrd" && echo "initrd Not found" && print-usage && exit 1
test ! -e "$kernel" && echo "kernel Not found" && print-usage && exit 1
test -z "$tftproot" && echo "tftproot not specified" && print-usage && exit 1
                                                                          
echo "initrd:$initrd"
echo "kernel:$kernel"
echo "tftproot:$tftproot"
 
grub-mknetdir -v --net-directory="$tftproot"
cat > "$tftproot/boot/grub/grub.cfg" <<'EOF'
menuentry "Gentoo Live" {
    linux /boot/kernel root=/dev/ram0 init=/linuxrc loop=/image.squashfs looptype=squashfs cdroot=1 real_root=/
    initrd /boot/initrd
}
EOF
 
cp "$kernel" "$initrd" "$tftproot/boot"
}}


=== iPXE === <!--T:138-->

<!--T:139-->
Here are relevant stanzas for iPXE.

<!--T:140-->
{{CodeBox|title=gentoo-pxe-boot|1=
#!ipxe                                                                    
menu THRONG OF BAZ                                                       
item --gap LAN
item gentoo Gentoo x86_64 minimal
 
:gentoo                                                                   
set g http://baz.com/ipxe/gentoo                                        
kernel ${g}/kernel root=/dev/ram0 init=/linuxrc loop=/image.squashfs looptype=squashfs cdroot=1 real_root=/
initrd ${g}/initrd                                                        
boot
}}


== Diskless install using PXE boot and NFS == <!--T:31-->

=== Requirements === <!--T:32-->

<!--T:33-->
PXE (Preboot eXecution Environment) is a method for booting computers over a PXE-capable network interface (and using a PXE-supporting BIOS). In case the system does not support PXE boot from the network interface or BIOS, PXE can also be used as a boot method from block devices (like CDs or USBs). In such cases, a minimal boot environment mimics the PXE supporting network card (see also [http://etherboot.org Etherboot/gPXE]). 

=== Server base setup === <!--T:34-->

<!--T:35-->
Create directories: The first thing to do is to create the directories where the diskless system will be stored. Create a directory called {{Path|/diskless}} which houses a directory for each diskless client. For the remainder of this howto, the client that is being worked on will be called 'eta'. 

<!--T:36-->
{{RootCmd|mkdir -p /diskless/eta}}

<!--T:37-->
DHCP and TFTP setup: The client will get boot information using DHCP and download all the required files using TFTP. 

<!--T:38-->
For dhcpd, just run {{c|emerge dhcp}} (or any other DHCP server of choice). Make sure that the correct interface is selected in {{Path|/etc/conf.d/dhcpd}}, and configure it accordingly. Then, add the following on {{Path|/etc/dhcp/dhcpd.conf}}. 

<!--T:39-->
{{Note|This provides a static IP address for the client and the path of a PXE boot image, here {{Path|pxegrub}}. The MAC address of the ethernet card of the client in the example has to be replaced with the correct MAC address, as well as the directory where the client files will be stored.}}

<!--T:40-->
{{FileBox|filename=dhcpd.conf|1=
option option-150 code 150 = text ;
ddns-update-style none ;
host eta {
hardware ethernet 00:00:00:00:00:00;
fixed-address ip.add.re.ss;
option option-150 "/eta/boot/grub.lst";
filename "/eta/boot/pxegrub";
}
}}

<!--T:41-->
Next configure the interface in {{Path|/etc/conf.d/net}} so that it doesn't get cleared at bootup. See {{Path|/usr/share/doc/openrc-*/net.example.bz2}} for more information. 

<!--T:42-->
{{FileBox|filename=/etc/conf.d/net|title=Ensure the interface (here eth0 as example) is not reconfigured at boot|lang=bash|1=
config_eth0="noop"
}}

<!--T:43-->
For TFTP, emerge {{Package|net-ftp/tftp-hpa}}. In {{Path|/etc/conf.d/in.tftpd}}, put the following: 

<!--T:44-->
{{FileBox|filename=in.tftpd|lang=bash|1=
INTFTPD_PATH="/diskless"
INTFTPD_USER="nobody"
INTFTPD_OPTS="-u ${INTFTPD_USER} -l -vvvvvv -p -c -s ${INTFTPD_PATH}"
}}

<!--T:116-->
Emerge GRUB:

<!--T:117-->
{{Emerge|sys-boot/grub}}

<!--T:118-->
Once GRUB is compiled, create the diskless client's boot directory:

<!--T:119-->
{{RootCmd|grub2-mknetdir --net-directory{{=}}/diskless/eta}}

<!--T:120-->
Original way was to copy the PXE image to the diskless client but the path does not seem to exit anymore.

<!--T:121-->
{{RootCmd
|mkdir /diskless/eta/boot
|cp /usr/lib/grub/pxegrub /diskless/eta/boot/pxegrub
}}

<!--T:122-->
Then edit its {{Path|grub.lst}} config file.

<!--T:123-->
{{RootCmd|nano -w /diskless/eta/boot/grub.lst}}

<!--T:47-->
{{FileBox|filename=grub.lst|lang=bash|1=
default 0
timeout 30
  
title=Diskless Gentoo
root (nd)
kernel /eta/bzImage ip=dhcp root=/dev/nfs nfsroot=ip.add.re.ss:/diskless/eta
  
# For the nfsroot option, the IP address is the one of the server and
the directory is the one where the diskless client files are located (on the server).
}}

<!--T:48-->
NFS is quite easy to configure. The only thing that has to be done is to add a line on the {{Path|/etc/exports}} config file: 

<!--T:49-->
{{FileBox|filename=/etc/exports|lang=bash|1=
/diskless/eta eta(rw,sync,no_root_squash)
}}

<!--T:50-->
One important thing to do now is to modify the {{Path|/etc/hosts}} file to fit requirements. 

<!--T:51-->
{{FileBox|filename=/etc/hosts|lang=bash|1=
127.0.0.1 localhost
192.168.1.10 eta.example.com eta
192.168.1.20 sigma.example.com sigma
}}

=== Creating the system on the server === <!--T:52-->

<!--T:53-->
A next step is to reboot the server with a Gentoo installation CD (although experienced administrators can continue without if they are sufficiently versed in Gentoo installations). Follow the standard install procedure as explained in the [[Handbook:Main_Page|Gentoo Handbook]] BUT with the following differences: when mounting the file system, execute the next step (where {{Path|sdaX}} is the partition where the {{Path|/diskless}} directory was created).

<!--T:54-->
{{RootCmd|mount /dev/sdaX /mnt/gentoo}}

<!--T:126-->
Mounting any other partition is not needed as all of the files will reside in the {{Path|/diskless/eta}} directory. 

<!--T:55-->
This example uses a stage3 tarball. Mount {{Path|/proc}} to the diskless directory and chroot into it to continue with the install. Then follow the installation manual until kernel configuration. 

<!--T:56-->
{{Warning|Be very careful when extracting the stage tarball to its destination, so as to not end up extracting over an existing installation.}}

<!--T:57-->
{{RootCmd
|cd /mnt/gentoo/diskless/eta/
|tar -xvjpf  /mnt/cdrom/gentoo/stage3-*.tar.bz2
|mount -t proc /proc /mnt/gentoo/diskless/eta/proc
|cp /etc/resolv.conf /mnt/gentoo/diskless/eta/etc/resolv.conf
|chroot /mnt/gentoo/diskless/eta/ /bin/bash
|env-update
|source /etc/profile
}}

<!--T:58-->
When doing the {{c|make menuconfig}} of the kernel configuration, don't forget to enable the following options with the others recommended into the install guide. 

<!--T:59-->
{{KernelBox|title=Necessary options for diskless installations|1=
- The network card device support
(In the kernel, *not* as a module!)
  
-*- Networking support --->  
  Networking options --->
    [*] TCP/IP networking
    [*] IP: kernel level autoconfiguration
    [*] IP: DHCP support
    [*] IP: BOOTP support
  
File systems --->
  [*] Network File Systems --->
    <*> NFS file system support
    [*] Provide NFSv3 client support
    [*] Root file system on NFS
}}

<!--T:60-->
Save the kernel in the chrooted {{Path|/}} (not in {{Path|/boot}}) according to the pxegrub setting defined earlier. Next configure the diskless client's {{Path|/etc/fstab}}. 

<!--T:61-->
{{FileBox|filename=/etc/fstab|1=
/dev/cdroms/cdrom0 /mnt/cdrom iso9660 noauto,ro 0 0
}}

<!--T:62-->
Now to prevent the client from running a filesystem check: 

<!--T:63-->
{{RootCmd
|touch /fastboot
|echo "touch /fastboot" >> /etc/conf.d/local.start
}}

<!--T:64-->
Install {{Package|net-fs/nfs-utils}} since the client will heavily depend on it: 

<!--T:65-->
{{Emerge|net-fs/nfs-utils}}

<!--T:66-->
Do not install another bootloader because there is already one - pxegrub. Simply finish the install and restart the server. Start the services that are needed to boot the new client: DHCP, TFTPD, and NFS. 

<!--T:67-->
{{RootCmd
|service dhcp start
|service in.tftpd start
|service nfs start
}}

=== Booting the new client === <!--T:68-->

<!--T:69-->
For the new client to boot properly, the BIOS and the network card need to be configured to use PXE as the first boot method - before CD-ROM or floppy. For help with this consult the hardware manuals or manufacturers website. The network card should get an IP address using DHCP and download the GRUB PXE image using TFTP. Then, a nice black and white GRUB bootmenu should be displayed from where users can select the kernel to boot and press the {{Key|Enter}} (Return) key. If everything is okay the kernel should boot, mount the root filesystem using NFS and provide a login prompt. Enjoy.

== Installing Gentoo from an existing Linux distribution == <!--T:70-->

=== Requirements === <!--T:71-->

<!--T:72-->
In order to install Gentoo from an existing Linux distribution it needs to have the chroot command installed, and have a copy of the Gentoo installation or ISO that's desired to install. A network connection is highly recommended as otherwise the installation can only work with the files available in the installation media. By the way, a tarball is just a file ending in {{Path|.tbz}} or {{Path|.tar.gz}}. Let's get started!

=== Overview === <!--T:73-->

<!--T:74-->
First allocate a partition to Gentoo by resizing an existing Linux partition, mount the partition, untar the tarball to the partition that is mounted, chroot inside the pseudo-system and start building. Once the bootstrap process is done, do some final configuration on the system so as to make sure it boots, then reboot and use Gentoo. 

=== How to make space for Gentoo? === <!--T:75-->

<!--T:76-->
The root partition is the filesystem mounted under {{Path|/}}. The first example shows the output of {{c|mount}} on a system. The second example uses {{c|df}} (disk free) to see how much space there is left and how it will be resized. Note that resizing the root partition is not mandatory! Anything else supported by the resizer can be resized, but let's talk about that later. 

<!--T:77-->
{{RootCmd|mount|output=<pre>
/dev/sdb2 on / type ext3 (rw)
none on /proc type proc (rw)
none on /dev/pts type devpts (rw,gid=5,mode=620)
none on /dev/shm type tmpfs (rw,nodev,nosuid,noexec)
</pre>}}

<!--T:78-->
{{RootCmd|df -h|output=<pre>
Filesystem           Size Used Avail Use% Mounted on
/dev/sdb2            4.0G 1.9G  2.4G  82% /
none                  38M    0   38M   0% /dev/shm
</pre>
}}

<!--T:79-->
As can be seen, the partition mounted as {{Path|/}} named {{Path|/dev/sdb2}} has 2.4 GB free. In this case, it was decided to be resized as to leave 400 MB of free space, therefore allocating 2 GB for Gentoo. Not bad, it could have quite some stuff installed. However, 1 GB is deemed enough for most users. So now partition this thing!

=== Building parted to resize partition === <!--T:80-->

<!--T:102-->
{{Warning|This section is outdated and will be removed when the older parted versions have left the Gentoo Portage tree. The ability to resize partitions has been removed from parted, as explained [https://www.gnu.org/software/parted/manual/html_node/Command-explanations.html here].}}

<!--T:81-->
{{Package|sys-block/parted}} is extremely useful for resizing partitions. It is included on the minimal installation CD.

<!--T:82-->
{{Note|There are other tools for doing resize of partitions as well, but an elaborate description of these tools is outside the scope of this guide.}}

<!--T:83-->
Look up on that page the type of file system to resize and see if {{c|parted}} can do it. If not: tough luck, some partitions might need to be destroyed to make space for Gentoo, and reinstall back. Go ahead by downloading the software and install it. In the next step, a problem arises. The Linux root partition needs to be resized, therefore a floppy disk with a minimal Linux system must be booted and to use a previously-compiled parted copied to a diskette in order to resize {{Path|/}}. If the partition can be unmounted while still running in Linux then the following steps are not needed. Just compile parted and run it on a chosen unmounted partition to resize. Here's how it was done on this system. 

<!--T:84-->
{{Important|Make sure that the operations that are required for partitioning are supported by parted!}}

<!--T:85-->
Get the mininux boot/root disk (a 2.4-powered mini Linux distribution on a floppy - free of charge) from [http://mininux.free.fr/uk/ http://mininux.free.fr/uk/], create a floppy as suggested in the Documentation that accompanies the software package and insert a new floppy in the drive for the next step. 

<!--T:86-->
{{Note|Note again that Linux is synonym of "There's one more way to do it". The objective is to run parted on an unmounted partition so it can do its work. A boot/root diskset other than mininux can be used. This step might not even be needed to do at all: there may only be the need to umount the filesystem to repartition in the Linux session and run parted on it.}}

<!--T:87-->
{{RootCmd|mkfs.minix /dev/fd0|output=<pre>
480 inodes
1440 blocks
Firstdatazone=19 (19)
Zonesize=1024
Maxsize=268966912
</pre>
}}

<!--T:88-->
Proceed with the build of parted. Download and untar the utility, and {{c|cd}} into the corresponding directory. Now run the following set of commands to build the utility and copy it to the floppy disk. 

<!--T:89-->
{{RootCmd
|mkdir /floppy
|mount -t minix /dev/fd0 /floppy
|export CFLAGS{{=}}"-O3 -pipe -fomit-frame-pointer -static"
|./configure
|make
|cp parted/parted /floppy
|umount /floppy
}}

<!--T:90-->
Time to reboot and resize the partition. Do this only after taking a quick look at the parted documentation on the GNU website. The resize should take under 30 minutes for the largest hard-drives, be patient. Reboot the system with the mininux boot disk (just pop it inside), and once logged in, switch the disk in the drive with the utility disk that was created above and type {{c|mount /dev/fd0 /floppy}} to have parted under {{Path|/floppy}}. Run parted to be able to resize the partition. Once this lengthy process is done, continue with installing Gentoo. Reboot back into the old Linux system for now. The drive to operate on is the drive containing the partition that is going to be resized. For example, if the partition to be resized is {{Path|/dev/sda3}}, the drive is {{Path|/dev/sda}}. 

<!--T:91-->
{{RootCmd|mount /dev/fd0 /floppy 
|cd /floppy
|./parted <drive>}}

<!--T:92-->
{{Cmd|print|prompt=(parted) |output=<pre>
Disk geometry for /dev/sdb: 0.000-9787.148 megabytes
Disk label type: msdos
Minor    Start       End     Type      Filesystem  Flags
1          0.031   2953.125  primary   ntfs
3       2953.125   3133.265  primary   linux-swap
2       3133.266   5633.085  primary   ext3
4       5633.086   9787.148  extended
5       5633.117   6633.210  logical
6       6633.242   9787.148  logical   ext3</pre>}}

<!--T:93-->
{{Cmd|help resize|prompt=(parted) |output=<pre>
(parted)  help resize 
  resize MINOR START END        resize filesystem on partition MINOR
  
        MINOR is the partition number used by Linux.  On msdos disk labels, the
        primary partitions number from 1-4, and logical partitions are 5
        onwards.
        START and END are in megabytes
</pre>}}

<!--T:94-->
{{Cmd|resize 2 3133.266 4000.000|prompt=(parted) }}

<!--T:95-->
{{Important|Be patient! The computer is working! Just look at the hard drive LED on the case to see its activity. This should take between 2 and 30 minutes.}}

<!--T:96-->
Once the resize has finished, boot back into the old Linux as described. Then go to [[Handbook:AMD64/Installation/Disks|The Gentoo Handbook: Preparing the Disks]] and follow the instructions. When chrooting, use the following command to flush the environment: 

<!--T:97-->
{{RootCmd
|env -i HOME{{=}}$HOME TERM{{=}}$TERM chroot /mnt/gentoo /bin/bash
|/usr/sbin/env-update
|source /etc/profile
}}

<!--T:98-->
Enjoy!
</translate>

[[Category:Core system]] {{Migrated|originalauthors=Gerald Normandin Jr., Travis Tilley, Oleg Raisky, Alex Garbutt, Alexandre Georges, Magnus Backanda, Faust A. Tanasescu, Daniel Ahlberg, Ken Nowack, Tiemo Kieft, Benny Chuang, Jonathan Smith, nightmorph}}
