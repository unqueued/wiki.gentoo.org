{{Important|This is WIP while I am consolidating my notes and logs. I will remove this note once everything is placed here that I am consolidating/reconstructing. [[User:Yamakuzure|Yamakuzure]] ([[User talk:Yamakuzure|talk]]) 10:07, 8 February 2018 (UTC)}}

This article describes how to [[Article description::get Portage to build usable Qt/Gtk-apps on Cygwin]].
----
== Preface ==
Before reading this, you should be familiar with "[[Prefix|Gentoo Prefix]]" and "[[Prefix/Cygwin|Prefix on Cygwin]]".

It would be useful, if you already set up a Cygwin/X system and bootstrapped a Gentoo Prefix on it. However, reading about the theory might be enough, as you'd have to throw it away later anyway. ;-)
----
== Cygwin/X ==

Before thinking about bootstrapping, a working Cygwin/X system should be at hand. This is not as trivial as one might think. For best results some things should run as daemons, like they do on any GNU/Linux system.
But as you are on Windows, this means you have to set up some of the Daemons as Windows Services.

Don't panic, that one is easier than you think.
----
=== Basic installation ===

I am using the cygwin setup.exe directly using a windows command prompt. That is quicker than searching&clicking every package together.

The following commands can be used to install a Cygwin/X system, that already enables Audio, adds a tray icon, dbus support, Kerberos ticketing, private key management, postfix setup, ssh access, system message logging and an xdg-menu-icon.

I bet you didn't know half of that was possible, right? Me neither until a couple of weeks ago...

Important: The *-devel packages are chosen so the later Gentoo prefix does not need concurrent packages to what is running anyway, or what is almost impossible to build on cygwin using portage. We'll tell portage via package.provided what's what.

You can combine the package lists, of course, and install everything at once.
----
==== Basic system ====
Install a rudimentary system that let's you start an X-Server and bootstrap Gentoo:
{{Cmd|setup-x86_64.exe -P gcc-g++,git-svn,libdconf-devel,libfam-devel,libgcr-base3-devel,libgcr-ui3-devel,libicu-devel,libusb-devel,nano,wget,xinit,xorg-server-devel,xwin-xdg-menu|prompt=C:\cygwin>}}
----
==== Avahi Support ====
{{Cmd|setup-x86_64.exe -P avahi,libavahi-client-devel,libavahi-common-devel,libavahi-core-devel,libavahi-glib-devel|prompt=C:\cygwin>}}
----
==== dbus Daemon ====
{{Cmd|setup-x86_64.exe -P dbus,libdbus-glib_1-devel,libdbus1-devel,libdbusmenu-glib-devel,libdbusmenu-gtk-devel,libdbusmenu-gtk3-devel|prompt=C:\cygwin>}}
----
==== Tray Indicator ====
{{Cmd|setup-x86_64.exe -P libindicator-devel,libnotify-devel,notification-daemon,trayer|prompt=C:\cygwin>}}
----
==== Pulse Audio ====
{{Cmd|setup-x86_64.exe -P libpulse-devel,pasystray,pulseaudio-module-x11|prompt=C:\cygwin>}}
----
====  Kerberos ====
{{Cmd|setup-x86_64.exe -P krb5-auth-dialog,krb5-workstation|prompt=C:\cygwin>}}
----
==== Extras ====
{{Cmd|setup-x86_64.exe -P gnome-keyring,openssh,postfix,syslog-ng|prompt=C:\cygwin>}}
----
=== Switching the user context without password ===
Daemons must be able to switch user context. Either to gain special privileges or to drop unneeded privileges.

For the full details please see the corresponding [https://www.cygwin.com/cygwin-ug-net/ntsec.html#ntsec-nopasswd1 part in the cygwin ntsec guide].

For the daemons you see above, we need two methods. The first is to configure cyglsa, the second is to add some dummy users to Windows.
----
==== Enabling LSA authentication ====
Start a Cygwin64 Terminal with Administrator privileges and issue the following command:
{{Cmd |/usr/bin/cyglsa-config |collapse-output=true |output=Warning: Registering the Cygwin LSA authentication package requires<br />administrator privileges!  You also have to reboot the machine to<br />activate the change.<br /><br />Are you sure you want to continue? (yes/no) yes<br /><br />Cygwin LSA authentication package registered.<br /><br />Activating Cygwin's LSA authentication package requires to reboot.}}
But before rebooting the machine, you can add the dummy users mentioned above.
----
==== Adding dummy users ====
Actually this is only one group and two users.

If you want to use postfix, do the following:

# Right click on the Windows start button.
# Select "''Computer Management''"
# Expand "''Local Users and Groups''" 
# Select "''Users''"
# Add a new user named "''postfix''", any password, with "''User cannot change password''" and "''Password never expires''" checked. Make it a member of your general "''Users''" group.
# Select "''Groups''"
# Add a new group named "''postdrop''"
# Add "''postfix''" and your local user to the group.

At least you need the "''nobody''" user:

# Repeat Steps 1-4 above
# Add a new user named "''nobody''" , any password, with "''User cannot change password''" and "''Password never expires''" checked. Make it a member of your general "''Users''" group.

That's it. The installation of openssh daemon will add a sshd user, and cygserver will add a cyg_server user. Everything else will use the SYSTEM account.
----
=== Making the daemons work ===
In order for the system daemons to work, Windows must be told how to start them, and when. Here are the steps needed for the various daemons. Please make sure that LSA authentication is installed (see above) and Windows was rebooted. Further the dummy users mentioned above should be set up already.
----
==== Cygwin Server ====
This is needed for IPC message queues, semaphores and shared memory support. More information is available on the [https://cygwin.com/cygwin-ug-net/using-cygserver.html Cygserver page].

# {{Cmd|/usr/bin/cygserver-config}} Just follow the on-screen information.
# Go into the windows services panel and search for "''CYGWIN cygserver''".
# In its properties Change "''Startup type''" to "''Automatic (Delayed Start)''". The normal automatic start may be too fast. If it is, you get weird UID->Name resolutions.
----
==== dbus system bus ====
It is good to have a system bus. Most applications run fine with a session bus only, but a system bus makes live much easier.

# {{Cmd|/usr/bin/messagebus-config}} Just follow the on-screen information
# Go into the windows services panel and search for "''CYGWIN D-Bus system service''".
# In its properties Change "''Startup type''" to "''Automatic (Delayed Start)''".
# Open a command (CMD) prompt with administrator privileges and add cygserver to the dependencies: {{Cmd|prompt=C:\WINDOWS\system32>|sc config messagebus depend{{=}} cygserver}}The {{C|depend{{=}}}} is a keyword, there really must be a space between it and the dependency list!
----
==== syslog-ng system logger ====
With this you get {{C|/var/log/messages}} back.

# {{Cmd|/usr/bin/syslog-ng-config}} Just follow the on-screen information.
# Go into the windows services panel and search for "''CYGWIN syslog-ng''".
# In its properties Change "''Startup type''" to "''Automatic (Delayed Start)''".
# Open a command (CMD) prompt with administrator privileges and add cygserver to the dependencies: {{Cmd|prompt=C:\WINDOWS\system32>|sc config syslog-ng depend{{=}} cygserver}}The {{C|depend{{=}}}} is a keyword, there really must be a space between it and the dependency list!
----
==== Avahi Daemon ====
Well... yeah... You must decide whether you need this, or not...

# {{Cmd|/usr/sbin/avahi-daemon-config}} Just follow the on-screen information.
# Go into the windows services panel and search for "''CYGWIN Avahi service''".
# In its properties Change "''Startup type''" to "''Automatic (Delayed Start)''".
# Open a command (CMD) prompt with administrator privileges and add dbus to the dependencies: {{Cmd|prompt=C:\WINDOWS\system32>|sc config avahi-daemon depend{{=}} messagebus}}The {{C|depend{{=}}}} is a key... well... you got it, right?
----
==== Postfix Mail service ====
If you want to send mails from the console, or any application that uses postfix, you must install its windows service.

# {{Cmd|/usr/bin/postfix-config}} Just follow the on-screen information.
# Go into the windows services panel and search for "''CYGWIN postfix''".
# In its properties Change "''Startup type''" to "''Automatic (Delayed Start)''".
# Open a command (CMD) prompt with administrator privileges and add syslog-ng to the dependencies: {{Cmd|prompt=C:\WINDOWS\system32>|sc config postfix depend{{=}} syslog-ng}}
----
==== ssh daemon ====
If you want to use SSH to log into your cygwin, then please, go ahead! :-)

# {{Cmd|/usr/bin/ssh-host-config}} Just follow the on-screen information.
# Go into the windows services panel and search for "''CYGWIN sshd''".
# In its properties Change "''Startup type''" to "''Automatic (Delayed Start)''".
# Open a command (CMD) prompt with administrator privileges and add syslog-ng to the dependencies: {{Cmd|prompt=C:\WINDOWS\system32>|sc config sshd depend{{=}} syslog-ng}}
----
== newlib-cygwin - compiling yourself ==
In the [[Prefix/Cygwin|Prefix on Cygwin guide]] you have read that you need a [http://dev.gentoo.org/~haubi/cygwin-gentoo/ cygwin1.dll with the "forkables" patches applied].

It should be sufficient to use the pre-compiled one, at least as far as I know.
However, if you want to compile your own cygwin1.dll, then this is the section for you.
----
=== Needed packages ===
To be able to successfully configure and compile the project, you will need a few extra packages:
{{Cmd|setup-x86_64.exe -P autoconf2.5,automake1.9,bison,cocom,dejagnu,docbook2X,docbook-xml45,expect,flex,gcc-ada,gcc-fortran,gcc-g++,git-svn,libiconv-devel,libisl-devel,libmpc-devel,libmpfr-devel,make,mingw64-x86_64-gcc-g++,mingw64-x86_64-zlib,nano,tcl-devel,tcl-tk-devel,texinfo,wget,xmlto,zlib-devel|prompt=C:\cygwin>}}
----
=== Clone the tree ===
Which tree you use is up to you and your discretion

* https://github.com/haubi/newlib-cygwin.git (Branch: Gentoo)
These are what the pre-compiled cygwin1.dll mentioned above is made off.
* https://github.com/Yamakuzure/newlib-cygwin.git (Branch: master)
These are the same Forkables and Gentoo patches, but rebased on the official master repository, thus including all official fixes.

If you need advice, go with the first. I can not guarantee, that my sources do more than compile cleanly, as I do not have the time to check whether all rebased patches are still in whole, and whether the automatic resolving of any conflicts hasn't caused any damage.
----
=== Configure and build ===
As you now have all the packages you need, you can configure and build the whole tree.
{{Cmd|./configure --prefix{{=}}/usr --build{{=}}x86_64-pc-cygwin CFLAGS{{=}}"$CFLAGS -march{{=}}native -O2 -pipe" CXXFLAGS{{=}}"$CXXFLAGS -march{{=}}native -O2 -pipe" LDFLAGS{{=}}"$LDFLAGS -L/usr/lib -L/usr/bin"|prompt=newlib-cygwin $ }}
Whether you put in these FLAGS or not is up to you. it should ''just work'' without them. But --prefix and --build are important.

When the configure stage is finished, you can build everything. It is best not to push too hard against the windows kernel. The following is well tested on Windows 10 with an 8-core-CPU:
{{Cmd|make -j5 -l4|prompt=newlib-cygwin $ }}
----
=== Install ===
Yes, you read right. Install this. But not in the root folder, that wouldn't work, because cygwin1.dll is in use. Install it in an image path like this:
{{Cmd|make install DESTDIR{{=}}$(pwd -P)/image|prompt=newlib-cygwin $ }}

The true installation can only happen if absolutely no cygwin process is running. So quit the xdg-menu, close all consoles/windows, and stop all Cygwin services. On Windows 10 you can do the latter using the Task Manager, it has a ''Services'' tab. Under ''Processes'' you might want to check whether there is no dangling dbus process left behind.

Once everything is stopped, you can use the Windows Explorer or any other file manager to copy the contents of your image directory to your cygwin root directory.

{{Important|This is a complete install of the Base/cygwin package. If anything bad happens, you can re-install that package to undo your hand install.}}
----
== Re-Basing DLLs (fix fork() failures) ==
The dreaded '''fork() failure''' can happen from time to time. There is much potential for windows software to interfere with Cygwin. Please read "[https://cygwin.com/faq/faq.html#faq.using.fixing-fork-failures Fixing fork()failures]" in the Cygwin FAQ for general information.

However, triggering a full rebase by the Cygwin setup program is meaningless for Gentoo, we are somewhere else.
The solution is simple, we do it ourselves.

=== Find all relevant libraries ===
There is more to this than just re-basing. There is also the possibility, that a DLL lacks the executable bit. But DLLs must be executable, or it can not be used. Static libraries on the other hand, do not need that bit set.

I have written this little helper script to beat both issues with one bat. Create a list of DLLs to rebase, and fix the executable bit where appropriate. Just adapt the {{C|EPREFIX}} setting to your need.

{{CodeBox|title=~/sys/bin/make_rebase_list.sh|lang=bash|1=#!/bin/bash

EPREFIX=${EPREFIX:-/gentoo}

echo "Searching libraries in $EPREFIX ..."

find $EPREFIX/bin/ -name '*.dll' -o -name '*.so' > /rebase.lst
find $EPREFIX/lib/ -name '*.dll' -o -name '*.so' >> /rebase.lst
find $EPREFIX/usr/bin -name '*.dll' -o -name '*.so' >> /rebase.lst
find $EPREFIX/usr/lib -name '*.dll' -o -name '*.so' >> /rebase.lst

# For halted builds
if [[ -n $PORTAGE_TMPDIR ]]; then
        find $PORTAGE_TMPDIR/portage -name '*.dll' -o -name '*.so' >> /rebase.lst
fi

echo "Enabling executable bit on all DLLs..."
cat /rebase.lst {{!}} while read x ; do
        if [[ "x${x: -3}" = "xdll" {{!}}{{!}} 0 -lt $(file -b "$x" {{!}} grep -c "executable") ]]; then
                chmod 755 "$x"
        else
                chmod 644 "$x"
        fi
done
echo "done"}}
This will re-create {{C|/rebase.lst}}, which lists all possible re-basable libraries.
----
=== Do the rebase ===
The rebase is done in these simple steps:

# Close all Cygwin processes and log out of your Cygwin X session.
# End all running cygwin services. The Task Manager in Windows 10 has a "Services" tab you can use.
# Start a Command Prompt (CMD) with administrator privileges.
# {{Cmd|prompt=C:\WINDOWS\system32>|C:\Cygwin\bin\dash.exe /bin/rebaseall -T /rebase.lst}}
# If the above command tells you that only dash.exe must be running when rebasing, you have some Cygwin processes left. You can kill them (bash.exe, dbus, etc.) using the Task Manager.

You are done. Start all Cygwin Services, you X Session, open a console and continue with your bootstrapping.

== Bootstrapping the Prefix ==
Just do the bootstrap like described on the [[Project:Prefix/Bootstrap]] page, unless you do want to start of with some pre-configuration. I prefer the EPREFIX to be "/gentoo", and will refer to it in this way.

If you'd like to use the latest portage tree, you can tell the bootstrap script to do so by issuing: {{Cmd| LATEST_TREE_YES{{=}}1 ./bootstrap-prefix.sh}}
However, I have already had fails due to that download being not what I wanted. It really downloads {{C|portage-latest.tar.bz2}}, which might or might not work. The prefix tree, however, '''will''' work.
----
=== Things to note down ===
In case of failure, you can often use the {{C|ebuild}} command to finish a merge. But when you are outside the bootstrap script and back on your terminal, the environment is back to normal.

When you have told the script what your EPREFIX should be, it'll print the important environment variables for you. You may want to copy them somewhere safe and use them to prefix a later possible manual {{C|ebuild}} run.

These are what I have on my machine:
  EPREFIX=/gentoo
  CHOST=x86_64-pc-cygwin
  PATH=/gentoo/usr/bin:/gentoo/bin:/gentoo/tmp/usr/bin:/gentoo/tmp/bin:/gentoo/tmp/usr/local/bin:/usr/bin:/bin:/cygdrive/c/Windows/System32:/cygdrive/c/Windows
  MAKEOPTS=-j5
----
=== Custom ebuild script for fixing issues ===
If an ebuild does not finish merging, like gcc always halting at the end of the compile stage, at least on my machine, it may be useful to have a custom ebuild script that takes care of the above environment values.

The following is such a script, that I have in ~/sys/bin, and it works pretty well. At least for me. Adapt and use it if you like.

{{CodeBox|title=~/sys/bin/do_ebuild|lang=bash|1=#!/bin/bash

# Gentoo Prefix Bootstrap on Cygwin helper script
# Do *NOT* use after Bootstrapping is finished!

EPREFIX=/gentoo
CHOST=x86_64-pc-cygwin
PATH=/gentoo/usr/bin:/gentoo/bin:/gentoo/tmp/usr/bin:/gentoo/tmp/bin:/gentoo/tmp/usr/local/bin:/usr/bin:/bin:/cygdrive/c/Windows/System32:/cygdrive/c/Windows

# Exit on first error and unset variables
set -e
set -u

# Make sure CFLAGS, LDFLAGS and FEATURES are bound
CFLAGS="${CFLAGS:-}"
LDFLAGS="${LDFLAGS:-}"
FEATURES="${FEATURES:-}"

# Deault path is the prefix bin dirs
DEFAULT_PATH="${EPREFIX}/bin:${EPREFIX}/usr/bin"

# Maybe special USE flags were issued, we need to know them:
envUSE="${USE:-}"

# The default USE flags while bootstrapping are:
defaultUSE="-acl -berkdb -fortran -gdbm -git -libcxx -nls -pcre \
-ssl -python bootstrap clang internal-glib"

# Autogenerated settings:
if [[ -f "$EPREFIX"/tmp/etc/portage/make.conf ]]; then
	. "$EPREFIX"/tmp/etc/portage/make.conf
fi
preUSE="${USE:-}"
USE=""

# Override with user settings:
if [[ -f "$EPREFIX"/etc/portage/make.conf ]]; then
	. "$EPREFIX"/etc/portage/make.conf
fi
usrUSE="$USE"

EBUILDEXEC=""

if [[ -x "$EPREFIX"/usr/bin/ebuild ]]; then
	# Stage 3
	EBUILDEXEC="$EPREFIX"/usr/bin/ebuild
elif [[ -x "$EPREFIX"/tmp/usr/bin/ebuild ]]; then
	# Stage 2 or early stage 3
	EBUILDEXEC="$EPREFIX"/tmp/usr/bin/ebuild
	if [[ ! -f "$EPREFIX"/stage3.log ]]; then
		EPREFIX="$EPREFIX/tmp"
	fi
fi

# Do we have one?
if [[ -z $EBUILDEXEC ]]; then
	echo "ERROR: No ebuild command found"
	exit 1
fi

# Append the make.conf USE flags with the default ones and those from the environment.
# Oh, and remove newlines and excessive white spaces.
USE="$(echo -n "$preUSE $usrUSE $defaultUSE $envUSE" {{!}} tr '\n' ' ' {{!}} tr '\t' ' ' {{!}} tr -s ' ')"

# Now execute, if wanted
cat <<_EOF
EPREFIX  : $EPREFIX
CHOST    : $CHOST
CFLAGS   : $CFLAGS
CXXFLAGS : $CXXFLAGS
LDFLAGS  : $LDFLAGS
USE      : $USE
PATH     : $PATH
Command  : $EBUILDEXEC
Arguments: $@
_EOF

echo -n "Execute ? [y/N] : "
read answer
if [[ "xy" = "x$answer" ]]; then
	CHOST="$CHOST"       \
	EPREFIX="$EPREFIX"   \
	CFLAGS="$CFLAGS"     \
	CXXFLAGS="$CXXFLAGS" \
	LDFLAGS="$LDFLAGS"   \
	USE="$USE"           \
	PATH="$PATH"         \
	$EBUILDEXEC $@
fi
}}
----

=== Possible Preparations ===
There are a few things you can do before bootstrapping your gentoo prefix. Not much, really, and everything here is purely optional.
----
==== Build in RAM ====
If you have enough RAM, you can have portage do the builds there.
Windows does not know tmpfs, but there is a nice freeware tool you can use to setup RAM disks.
[https://sourceforge.net/projects/imdisk-toolkit/ ImDisk Virtual Disk Driver for Windows] can be used to set up a RAM DISK and mount it in /build, or wherever you want.
Just do not forget to tell portage about it by adding
    export PORTAGE_TMPDIR=/build
(or wherever you mount your RAM Disk) to your ~/.bashrc.
Alternatively you can set up a make.conf to start with, and add the PORTAGE_TMPDIR entry there.
----
==== Pre-Setup a make.conf ====
I'll post here my make.conf for bootstrapping. It adds -march=native to the C[XX]FLAGS, sets CPU_FLAGS_X86 and enables split logs in /gentoo/var/log/portage. Further portage is made cute and rather silent. Maybe you want to remove that part.

If you '''''really''''' want to use this, put it in /gentoo/etc/portage and be '''damn''' sure to check CPU_FLAGS_X86 against your CPU!

Oh, and have a look at the localization settings at the bottom! ;-)
{{CodeBox|lang=bash|1=ARCH="x64-cygwin"
CHOST="x86_64-pc-cygwin"

# === Default flags and options ===
CFLAGS="${CFLAGS} -march=native -O2 -pipe"
CXXFLAGS="${CFLAGS}"
MAKEOPTS="-j5 -l4"
CONFIG_SHELL="${EPREFIX}/bin/bash"

# === Fix -R warnings ===
LDFLAGS="-L${EPREFIX}/usr/bin -L${EPREFIX}/usr/lib"

# === Always force prefix. Should be not needed, but be safe here. ===
FEATURES="${FEATURES} force-prefix"

# === Do not collision-protect everything, protect-owned is enough. ===
FEATURES="${FEATURES} -collision-protect protect-owned config-protect-if-modified"

# === CPU capabilities ===
CPU_FLAGS_X86="aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt sse sse2 sse3 sse4_1 sse4_2 ssse3"

# === USE flags ===
USE="unicode nls"

# === Logging ===
FEATURES="${FEATURES} split-log"
EMERGE_LOG_DIR="${EPREFIX}/var/log"
PORT_LOGDIR=$EMERGE_LOG_DIR/portage

# === Default options for thorough but quiet builds ===
EMERGE_DEFAULT_OPTS="--alphabetical --verbose --verbose-conflicts --keep-going \
 --jobs=4 --load-average=3.0 \
 --quiet-build=y --binpkg-respect-use=y --with-bdeps=y \
 --color=y --ask-enter-invalid --nospinner \
 --autounmask=y --autounmask-write"

# === directory overrides ===
PORTAGE_TMPDIR=/build
PKGDIR=/packages
DISTDIR=/distfiles
OVERLAY=/overlay
PORTDIR_OVERLAY="${OVERLAY}"

# === Extend PATH to find libraries on Cygwin ===
DEFAULT_PATH="${DEFAULT_PATH}:${EPREFIX}/lib:${EPREFIX}/usr/lib"

# === This disables /usr-split, removing this will break ===
PREFIX_DISABLE_USR_SPLIT=yes
PREFIX_DISABLE_GEN_USR_LDSCRIPT=yes

# === Avoid problems due to case-insensitivity, bug #524236 ===
FEATURES="${FEATURES} case-insensitive-fs"

# === Single ABI, no multilib ! ===
MULTILIB_ABIS="amd64"
DEFAULT_ABI="amd64"
ABI="amd64"
IUSE_IMPLICIT="abi_x86_64"

# === Language config ===
L10N="de de-DE en en-GB en-US"
LINGUAS="de de_DE en en_GB en_US"
}}
----

=== Portage tree too old ===
If any of the problems below signals that your portage tree is too old, either because using {{C|LATEST_TREE_YES}} didn't do what you expected, or because your {{C|boostrap-prefix.sh}} script is too old, you do not have to start over. Just fix this and continue.

# Download the latest [https://gitweb.gentoo.org/repo/proj/prefix.git/plain/scripts/bootstrap-prefix.sh boostrap-prefix.sh] script.
# {{Cmd|rm /gentoo/tmp/etc/make.globals /gentoo/usr/portage/.unpacked /gentoo/tmp/usr/lib/portage/bin/emerge}}
# Restart the script, but kill it with Ctrl+C after it has synced in the latest prefix tree, and starts to continue the bootstrap.
# If you have binutils-2.28.1 installed, do the following steps:
## {{Cmd|do_ebuild /gentoo/usr/portage/sys-devel/binutils/binutils-2.29.1-r1.ebuild merge}}
## {{Cmd|PATH{{=}}/gentoo/usr/bin:/gentoo/bin:/gentoo/tmp/usr/lib/portage/bin:$PATH binutils-config x86_64-pc-cygwin-2.29.1}}
## Source {{C|/gentoo/etc/profile}} and {{C|~/.bashrc}}
# If you have gcc-5.3.0 installed, do the following steps:
## {{Cmd|do_ebuild /gentoo/usr/portage/sys-devel/gcc/gcc-6.4.0.ebuild merge}}
## Make sure that the following command shows that gcc-6.4.0 is selected: {{Cmd|CHOST{{=}}"x86_64-pc-cygwin" PATH{{=}}/gentoo/usr/bin:$PATH gcc-config -l|output= [1] x86_64-pc-cygwin-5.3.0<br /> [2] x86_64-pc-cygwin-6.4.0 *}}
## Source {{C|/gentoo/etc/profile}} and {{C|~/.bashrc}}

After this you can continue your bootstrap process.
----
== Problems, Breaks, Failures when bootstrapping==
There are some things that might fail. Here are the common ones for me.
----
=== gcc: Never ending merge ===
On some rare occasions the merge of sys-devel/gcc will halt after the compilation stage is over.

{{Important|If you here see that sys-devel/gcc-5.3.0 was merged, your tree is out of date! Most probably you tried with {{C|LATEST_TREE_YES{{=}}1}} as mentioned above, and {{C|portage-latest.tar.bz2}} simply wasn't what you wanted. If this is the case, the chapter "Portage tree too old" is for you. But first fix this gcc install!}}

Luckily this is easy to fix, as long as you noted down the values mentioned above, that were displayed by the bootstrap script.
Just substitute the values here with your values.

'''Or even better''': Use my {{C|do_ebuild}} script above, it'll make things easy for you. ;-)
----
==== Send Ctrl+C to break the script. ====
----
==== Fix in '''Stage 2''' ====
In ''Stage 2'' use the fixing script above like {{Cmd|do_ebuild.sh /gentoo/usr/portage/sys-devel/gcc/gcc-6.4.0.ebuild merge}} '''or''' issue:
  $ EPREFIX=/gentoo/tmp \
  CHOST=x86_64-pc-cygwin \
  PATH=/gentoo/usr/bin:/gentoo/bin:/gentoo/tmp/usr/bin:/gentoo/tmp/bin:/gentoo/tmp/usr/local/bin:/usr/bin:/bin:/cygdrive/c/Windows/System32:/cygdrive/c/windows \
  /gentoo/tmp/usr/bin/ebuild /gentoo/usr/portage/sys-devel/gcc/gcc-6.4.0.ebuild merge
to finish the merge.

Afterwards you should see:
 * Switching native-compiler to x86_64-pc-cygwin-6.4.0 ...
 * Updating LTO plugin symlink in /./gentoo/tmp/usr/x86_64-pc-cygwin/binutils-bin/lib/bfd-plugins     [ ok ]

As this ends stage 2, you can do like portage suggests, before restarting the bootstrap.
  $ . /gentoo/tmp/etc/profile
  $ . ~/.bashrc
----
==== Fix in '''Stage 3''' ====
If you use the default {{C|PORTAGE_TMPDIR}}, or if you changed that but exported the value in your .bashrc, you can proceed like in ''Stage 2''.

Otherwise, if you changed {{C|PORTAGE_TMPDIR}} in your make.conf, but did not export the value, you have to fix the build like in ''Stage 2'', but set {{C|PORTAGE_TMPDIR}} to /gentoo/var/tmp like this:

In ''Stage 3'' use the fixing script above like {{Cmd|PORTAGE_TMPDIR{{=}}/gentoo/var/tmp do_ebuild.sh /gentoo/usr/portage/sys-devel/gcc/gcc-6.4.0.ebuild merge}} '''or''' issue:
  $ EPREFIX=/gentoo \
  CHOST=x86_64-pc-cygwin \
  PATH=/gentoo/usr/bin:/gentoo/bin:/gentoo/tmp/usr/bin:/gentoo/tmp/bin:/gentoo/tmp/usr/local/bin:/usr/bin:/bin:/cygdrive/c/Windows/System32:/cygdrive/c/Windows \
  PORTAGE_TMPDIR=/gentoo/var/tmp \
  /gentoo/tmp/usr/bin/ebuild /gentoo/usr/portage/sys-devel/gcc/gcc-6.4.0.ebuild merge
and it will (hopefully) be finished.

This always did the trick for me. This halt happened for me in stage2 '''and''' stage3. Well, at least it did not occur in any other situation for me.

After the merge finishes, you should see something like:
   * Switching native-compiler to x86_64-pc-cygwin-6.4.0 ...        [ ok ]

After that you can source {{C|/gentoo/etc/profile}} and your {{C|~/.bashrc}} and just restart the bootstrap script. It will continue where it left off.
----
=== app-arch/xz-utils fail in Stage 3 ===

In stage 2, "{{C|app-arch/xz-utils-5.2.3}}" merges just fine, using {{C|x86_64-pc-cygwin-windres}} from binutils-2.29.1 provided by cygwin. But in stage 3 the {{C|x86_64-pc-cygwin-windres}} provided by the available binutils-2.28.1 breaks. It does not recognize the {{C|-isystem}} parameter in its call from libtool.

{{Important|The attempt to emerge {{C|binutils-2.28.1}} means, that your tree is out of date! Most probably you tried with {{C|LATEST_TREE_YES{{=}}1}} as mentioned above, and {{C|portage-latest.tar.bz2}} simply wasn't what you wanted. If this is the case, the chapter "Portage tree too old" is for you. But first fix this xz-utils install!}}

To fix this we are going to force the xz-utils build system to use the cygwin version of {{C|x86_64-pc-cygwin-windres}}.

  ~ $ EXTRA_ECONF="ac_cv_prog_RC=/usr/bin/windres.exe" ~/sys/bin/do_ebuild /gentoo/usr/portage/app-arch/xz-utils/xz-utils-5.2.3.ebuild clean configure
  (...)
  checking for x86_64-pc-cygwin-windres... (cached) /usr/bin/windres.exe
  (...)

This looks good, so call "{{C|merge}}" instead of "{{C|clean configure}}" to install a working xz-utils. This time it should work.

Afterwards just restart the bootstrap script, it should continue where it left off.
----
=== sys-apps/coreutils-8.29 fails in Stage 3 ===
As of writing this, {{C|sys-apps/coreutils-8.29}} fails with the message:
  mv: cannot stat '/build/portage/sys-apps/coreutils-8.29/image/gentoo//usr/libexec/coreutils/libstdbuf.dll.a.exe': No such file or directory

Unfortunately the patches and methods to emerge coreutils-8.28 do not work with 8.29 and the only way to get around this, right now, is to use {{Cmd|do_ebuild /gentoo/usr/portage/sys-apps/coreutils/coreutils-8.28-r1.ebuild merge}} to merge the older version.

Further you need to mask the new coreutils version, at least for now.
  $ mkdir -p /gentoo/etc/portage/package.mask
  $ echo ">=sys-apps/coreutils-8.29" >> /gentoo/etc/portage/package.mask/coreutils_limit

=== child_info_fork::abort: <path to dll>: Loaded to different address ===
The re-basing did not work as it should have. Before continuing, you should rebase everything.
----
=== child_info_fork::abort ''still'' happens from time to time! ===
Yes. I had that, too. This is extremely irritating when the final {{C|emerge -e system}} is running, as it has to be started over and over again.

On my system I found that the antivirus program (Sophos) interfered with the re-basing portage performed. Not always, just from time to time.

Unfortunately I am in a company domain and have no control over the antivirus software.

If you take a look at the [https://www.cygwin.com/faq.html#faq.using.bloda Cygwin list of interfering software], our Sophos version is listed, you might find what is sabotaging you here.

However, if you, like me, can not turn off the offending software, here is what to so:

# Complete the failed build using {{C|do_ebuild}} provided above.
# Continue the merge with: {{CodeBox|1=EPREFIX{{=}}/gentoo \<BR/>CHOST{{=}}x86_64-pc-cygwin \<BR/>PATH{{=}}/gentoo/usr/bin:/gentoo/bin:/gentoo/tmp/usr/bin:/gentoo/tmp/bin:/gentoo/tmp/usr/local/bin:/usr/bin:/bin:/cygdrive/c/Windows/System32:/cygdrive/c/Windows \<BR/>emerge --resume --skipfirst}}
# The final package to merge will most probably be gcc, which might or might not hang. See above
# That's it, your system rebuild is finished. The final steps the script would have done, which you have to do now manually, are:
## {{Cmd|rm -Rf /gentoo/tmp}}
## {{Cmd|mkdir /gentoo/tmp}}
## {{Cmd|hash -r}}
## {{Cmd|SHELL{{=}}/gentoo/bin/bash PATH{{=}}/gentoo/bin:/gentoo/usr/bin:$PATH bootstrap-prefix.sh /gentoo startscript}}

Congratulations, your bootstrap is finished!
