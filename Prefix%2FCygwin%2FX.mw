{{Important|This is WIP while I am consolidating my notes and logs. I will remove this note once everything is placed here that I am consolidating/reconstructing. [[User:Yamakuzure|Yamakuzure]] ([[User talk:Yamakuzure|talk]]) 10:07, 8 February 2018 (UTC)}}

This article describes how to [[Article description::get Portage to build usable Qt/Gtk-apps on Cygwin]].

== Preface ==
Before reading this, you should be familiar with "[[Prefix|Gentoo Prefix]]" and "[[Prefix/Cygwin|Prefix on Cygwin]]".

It would be useful, if you already set up a Cygwin/X system and bootstrapped a Gentoo Prefix on it. However, reading about the theory might be enough, as you'd have to throw it away later anyway. ;-)

== Cygwin/X ==

Before thinking about bootstrapping, a working Cygwin/X system should be at hand. This is not as trivial as one might think. For best results some things should run as daemons, like they do on any GNU/Linux system.
But as you are on Windows, this means you have to set up some of the Daemons as Windows Services.

Don't panic, that one is easier than you think.

=== Basic installation ===

I am using the cygwin setup.exe directly using a windows command prompt. That is quicker than searching&clicking every package together.

The following commands can be used to install a Cygwin/X system, that already enables Audio, adds a tray icon, dbus support, Kerberos ticketing, private key management, postfix setup, ssh access, system message logging and an xdg-menu-icon.

I bet you didn't know half of that was possible, right? Me neither until a couple of weeks ago...

Important: The *-devel packages are chosen so the later Gentoo prefix does not need concurrent packages to what is running anyway, or what is almost impossible to build on cygwin using portage. We'll tell portage via package.provided what's what.

You can combine the package lists, of course, and install everything at once.

==== Basic system ====
Install a rudimentary system that let's you start an X-Server and bootstrap Gentoo:
{{Cmd|setup-x86_64.exe -P gcc-g++,git-svn,libdconf-devel,libfam-devel,libgcr-base3-devel,libgcr-ui3-devel,libicu-devel,libusb-devel,nano,wget,xinit,xorg-server-devel,xwin-xdg-menu|prompt=C:\cygwin>}}

==== Avahi Support ====
{{Cmd|setup-x86_64.exe -P avahi,libavahi-client-devel,libavahi-common-devel,libavahi-core-devel,libavahi-glib-devel|prompt=C:\cygwin>}}

==== dbus Daemon ====
{{Cmd|setup-x86_64.exe -P dbus,libdbus-glib_1-devel,libdbus1-devel,libdbusmenu-glib-devel,libdbusmenu-gtk-devel,libdbusmenu-gtk3-devel|prompt=C:\cygwin>}}

==== Tray Indicator ====
{{Cmd|setup-x86_64.exe -P libindicator-devel,libnotify-devel,notification-daemon,trayer|prompt=C:\cygwin>}}

==== Pulse Audio ====
{{Cmd|setup-x86_64.exe -P libpulse-devel,pasystray,pulseaudio-module-x11|prompt=C:\cygwin>}}

====  Kerberos ====
{{Cmd|setup-x86_64.exe -P krb5-auth-dialog,krb5-workstation|prompt=C:\cygwin>}}

==== Extras ====
{{Cmd|setup-x86_64.exe -P gnome-keyring,openssh,postfix,syslog-ng|prompt=C:\cygwin>}}

=== Switching the user context without password ===
Daemons must be able to switch user context. Either to gain special privileges or to drop unneeded privileges.

For the full details please see the corresponding [https://www.cygwin.com/cygwin-ug-net/ntsec.html#ntsec-nopasswd1 part in the cygwin ntsec guide].

For the daemons you see above, we need two methods. The first is to configure cyglsa, the second is to add some dummy users to Windows.

==== Enabling LSA authentication ====
Start a Cygwin64 Terminal with Administrator privileges and issue the following command:
{{Cmd |/usr/bin/cyglsa-config |collapse-output=true |output=Warning: Registering the Cygwin LSA authentication package requires<br />administrator privileges!  You also have to reboot the machine to<br />activate the change.<br /><br />Are you sure you want to continue? (yes/no) yes<br /><br />Cygwin LSA authentication package registered.<br /><br />Activating Cygwin's LSA authentication package requires to reboot. </pre> }}
But before rebooting the machine, you can add the dummy users mentioned above.

==== Adding dummy users ====
Actually this is only one group and two users.

If you want to use postfix, do the following:

# Right click on the Windows start button.
# Select "''Computer Management''"
# Expand "''Local Users and Groups''" 
# Select "''Users''"
# Add a new user named "''postfix''", any password, with "''User cannot change password''" and "''Password never expires''" checked. Make it a member of your general "''Users''" group.
# Select "''Groups''"
# Add a new group named "''postdrop''"
# Add "''postfix''" and your local user to the group.

At least you need the "''nobody''" user:

# Repeat Steps 1-4 above
# Add a new user named "''nobody''" , any password, with "''User cannot change password''" and "''Password never expires''" checked. Make it a member of your general "''Users''" group.

That's it. The installation of openssh daemon will add a sshd user, and cygserver will add a cyg_server user. Everything else will use the SYSTEM account.

== newlib-cygwin - compiling yourself ==
In the [[Prefix/Cygwin|Prefix on Cygwin guide]] you have read that you need a [http://dev.gentoo.org/~haubi/cygwin-gentoo/ cygwin1.dll with the "forkables" patches applied].

It should be sufficient to use the pre-compiled one, at least as far as I know.
However, if you want to compile your own cygwin1.dll, the this is the section for you.

=== Needed packages ===
To be able to successfully configure and compile the project, you will need a few extra packages:
{{Cmd|setup-x86_64.exe -P autoconf2.5,automake1.9,bison,cocom,dejagnu,docbook2X,docbook-xml45,expect,flex,gcc-ada,gcc-fortran,gcc-g++,git-svn,libiconv-devel,libisl-devel,libmpc-devel,libmpfr-devel,make,mingw64-x86_64-gcc-g++,mingw64-x86_64-zlib,nano,tcl-devel,tcl-tk-devel,texinfo,wget,xmlto,zlib-devel|prompt=C:\cygwin>}}

=== Clone the tree ===
Which tree you use is up to you and your discretion

* https://github.com/haubi/newlib-cygwin.git (Branch: Gentoo)
These are what the pre-compiled cygwin1.dll mentioned above is made off.
* https://github.com/Yamakuzure/newlib-cygwin.git (Branch: master)
These are the same Forkables and Gentoo patches, but rebased on the official master repository, thus including all official fixes.

If you need advice, go with the first. I can not guarantee, that my sources do more than compile cleanly, as I do not have the time to check whether all rebased patches are still in whole, and whether the automatic resolving of any conflicts hasn't caused any damage.

=== Configure and build ===
As you now have all the packages you need, you can configure and build the whole tree.
{{Cmd|./configure --prefix{{=}}/usr --build{{=}}x86_64-pc-cygwin CFLAGS{{=}}"$CFLAGS -march{{=}}native -O2 -pipe" CXXFLAGS{{=}}"$CXXFLAGS -march{{=}}native -O2 -pipe" LDFLAGS{{=}}"$LDFLAGS -L/usr/lib -L/usr/bin"|prompt=newlib-cygwin $ }}
Whether you put in these FLAGS or not is up to you. it should ''just work'' without them. But --prefix and --build are important.

When the configure stage is finished, you can build everything. It is best not to push too hard against the windows kernel. The following is well tested on Windows 10 with an 8-core-CPU:
{{Cmd|make -j5 -l4|prompt=newlib-cygwin $ }}

=== Install ===
Yes, you read right. Install this. But not in the root folder, that wouldn't work, because cygwin1.dll is in use. Install it in an image path like this:
{{Cmd|make install DESTDIR{{=}}$(pwd -P)/image|prompt=newlib-cygwin $ }}

The true installation can only happen if absolutely no cygwin process is running. So quit the xdg-menu, close all consoles/windows, and stop all Cygwin services. On Windows 10 you can do the latter using the Task Manager, it has a ''Services'' tab. Under ''Processes'' you might want to check whether there is no dangling dbus process left behind.

Once everything is stopped, you can use the Windows Explorer or any other file manager to copy the contents of your image directory to your cygwin root directory.

{{Important|This is a complete install of the Base/cygwin package. If anything bad happens, you can re-install that package to undo your hand install.}}

== Bootstrapping the Prefix ==
Just do the bootstrap like described on the [[Prefix]] page. I prefer the EPREFIX to be "/gentoo", and will refer to it in this way.

=== Problems, Breaks, Failures ===
There are some things that might fail. Here are the common ones for me.

==== libffi: Bootstrap dies ====
Not a real problem. It is just python having a problem with cygffi-6.dll being replaced. Fortunately death comes after the merge is completed, so it is sufficient to restart the bootstrap script. It will continue where it left off.

==== gcc: Never ending merge ====
On some rare occasions the merge of sys-devel/gcc will halt after the compilation stage is over.

Luckily this is easy to fix:
# Send Ctrl+C to break the script.
# Issue {{Cmd|/gentoo/tmp/usr/bin/ebuild /gentoo/usr/portage/sys-devel/gcc/gcc-6.4.0.ebuild merge}} to finish the merge. This always did the trick for me. This halt happened for me in stage2 '''and''' stage3. Well, at least it did not occur in any other situation for me.

After that you can just restart the bootstrap script. It will continue where it left off.
