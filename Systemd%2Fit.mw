<languages />
{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://freedesktop.org/wiki/Software/systemd|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox gitweb|http://cgit.freedesktop.org/systemd/systemd/|raw=true}}
}}

'''systemd''' è un sostituto moderno per init SysV-style e per rc (run command)<ref>Eric S. Raymond.http://www.catb.org/jargon/html/R/rc-file.html Retrieved on June 27th, 2015</ref> per sistemi Linux. In Gentoo è supportato come sistema di init alternativo.
<!--
Le seguenti directoriy sono utilizzate sia da OpenRC sia da systemd:
* {{Path|/etc/modules-load.d}},
* {{Path|/etc/sysctl.d}},
* {{Path|/etc/binfmt.d}}
-->

== Configurazione pre-installazione ==

{{Note|Quando aggiorni da <{{=}}sys-apps/systemd-203 controlla [[/upgrade|upgrade subpage]].}}

=== Kernel ===

systemd fa uso di molte caratteristiche moderne di Linux. Alla data attuale il limite inferiore per la versione del kernel è la ebuild 2.6.39. Nelle versioni recenti di {{Package|sys-kernel/gentoo-sources}} c'è un sistema semplice per selezionare le opzioni obbligatorie e opzionali per systemd (vedi [[Kernel/Configurazione]] per ulteriori dettagli):

{{KernelBox|title=Configurazione rapida utilizzando gentoo-sources|<pre>
Gentoo Linux --->
        Support for init systems, system and service managers --->
                [*] systemd
</pre>}}

Per configurare manualmente le opzioni del kernel (che è l'unica soluzione laddove non si utilizzi {{Package|sys-kernel/gentoo-sources}}), sono richieste o consigliate le seguenti opzioni di configurazione del kernel:

<!-- Vedi http://cgit.freedesktop.org/systemd/systemd/plain/README -->
{{KernelBox|title=Opzioni obbligatorie|<pre>
General setup  --->
	[*] Control Group support
	[*] open by fhandle syscalls
	[ ] Enable deprecated sysfs features to support old userspace tools
	[*] Configure standard kernel features (expert users)  --->
		[*] Enable eventpoll support
		[*] Enable signalfd() system call
		[*] Enable timerfd() system call
[*] Networking support --->
Device Drivers  --->
	Generic Driver Options  --->
		[*] Maintain a devtmpfs filesystem to mount at /dev
File systems  --->
	[*] Inotify support for userspace
	Pseudo filesystems  --->
		[*] /proc file system support
		[*] sysfs file system support
</pre>}}

{{KernelBox|title=Opzioni consigliate|<pre>
General setup  --->
	[*] Namespaces support  --->
		[*] Network namespace
[*] Enable the block layer  --->
	[*] Block layer SG support v4
Processor type and features  --->
	[*] Enable seccomp to safely compute untrusted bytecode
Networking support --->
	Networking options --->
		<*> The IPv6 protocol
Device Drivers  --->
	Generic Driver Options  --->
		()  path to uevent helper
		[ ] Fallback user-helper invocation for firmware loading
Firmware Drivers  --->
	[*] Export DMI identification via sysfs to userspace
File systems --->
	<*> Kernel automounter version 4 support (also supports v3)
	Pseudo filesystems --->
		[*] Tmpfs virtual memory file system support (former shm fs)
		[*]   Tmpfs POSIX Access Control Lists
		[*]   Tmpfs extended attributes
</pre>}}

In un sistema UEFI si abilitino anche le seguenti:

{{KernelBox|title=Supporto a UEFI|<pre>
[*] Enable the block layer  --->
	Partition Types  --->
		[*] Advanced partition selection
		[*]   EFI GUID Partition support
Processor type and features  --->
	[*] EFI runtime service support
Firmware Drivers  --->
        EFI (Extensible Firmware Interface) Support -->
	        <*> EFI Variable Support via sysfs
</pre>}}

Se il sistema sta utilizzando lo scheduler BFQ, gli autori di BFQ consigliano di abilitare "BFQ hierarchical scheduling support" sotto "Enable the block layer -> IO Schedulers".

Per una lista aggiornata, vedi la sezione "REQUISITI" nel file del progetto originale [http://cgit.freedesktop.org/systemd/systemd/tree/README README]

===La directory {{Path|/run}} ===

La directory {{Path|/run}} è utilizzata sia da systemd sia da altre applicazioni come spazio di archiviazione temporaneo per dati durante l'esecuzione, come {{Path|pid}} file, socket e file di stato.

Il pacchetto systemd creerà da solo la directory {{Path|/run}}. Tuttavia osserva che questa modifica comporterà automaticamente il mount della directory anche in  [[OpenRC]], e può provocare l'utilizzo della directory anche da parte di altri pacchetti software.

==={{Path|/etc/mtab}}===

Il progetto supporta solo il file {{Path|/etc/mtab}} come link simbolico a {{Path|/proc/self/mounts}}. Non creare questo link causerà problemi descritti nei bugreport {{c|mount}} ({{bug|434090}}) e {{c|df}} ({{bug|477240}}). In passato alcune utilitiy scrivevano informazioni (come le opzioni di mount) in {{Path|/etc/mtab}} e quindi si presupponeva che fosse un file normale. Oggi si presuppone che i programmi evitino questo problema. Tuttavia, prima di modificare il file per convertirlo in un link simbolico, controlla il bugreport {{bug|477498}} per essere certo che il sistema non sia affetto da alcuna delle regressioni descritte.

Per creare il link simbolico, esegui:

{{RootCmd|ln -sf /proc/self/mounts /etc/mtab}}

=== Assicurati che /usr sia presente al boot ===

In una configurazione con {{Path|/usr}} separata, utilizza un [[initramfs]] per montare {{Path|/usr}} prima di avviare systemd. Al momento questo significa utilizzare {{Package|sys-kernel/dracut}} o {{Package|sys-kernel/genkernel-next}} fintanto che il supporto per {{Path|/usr}} non sia disponibile in {{Package|sys-kernel/genkernel}}. Trova il tempo per effettuare la migrazione:

{{Emerge|params+=--unmerge|sys-kernel/genkernel}}
{{Emerge|sys-kernel/dracut}}
{{Emerge|sys-kernel/genkernel-next}}

Quando si utilizza dracut, si deve abilitare il modulo usrmount se non viene automaticamente abilitato per poter montare {{Path|/usr}} automaticamente.

{{FileBox|filename=/etc/dracut/dracut.conf|lang=bash|1=
# Dracut modules to add to the default
add_dracutmodules+="usrmount"
}}

Se si utilizza genkernel-next, prima di ricompilare il kernel, accertarsi di settare la variabile <var>UDEV</var> nel file di configurazione di {{c|genkernel}} a <code>yes</code>. In questo modo {{path|/usr}} verrà inserito nell'initramfs:

{{FileBox|filename=/etc/genkernel.conf|lang=bash|1=
# Utilizza udev al posto di  mdev come gestore di dispositivi predefinito per l'immagine  initramfs.
# Se vengono utilizzati systemd e lvm, questa opzione _deve_ essere selezionata.
UDEV="yes"
}}

{{RootCmd|genkernel --install all}}

Si veda [[Initramfs/Guide|La guida a Initramfs]] per ulteriori alternative.

=== Utilizzare LVM2 e initramfs ===

Se si utilizza [[LVM|sys-fs/lvm2]] e il sistema viene avviato utilizzando una immagine initramfs, l'immagine initramfs deve essere creata utilizzando {{Package|sys-kernel/genkernel-next}} eseguendo il comando:

{{RootCmd|genkernel --udev --lvm <target>}}

<code><target></code> è <code>initramfs</code> o uno degli altri targe di genkernel che implica la creazione di un'immagine initramfs. Per ulteriori informazioni, si veda l'output del comando {{c|genkernel --help}}:

{{Cmd|genkernel --help}}

Se è utilizzato LVM, deve essere avviato anche il demone {{c|lvmetad}}, altrimenti systemd non sarà in grado di montare i volumi LVM. {{c|lvmetad}} può essere abilitato tramite {{Path|/etc/lvm/lvm.conf}}:

{{FileBox|filename=/etc/lvm/lvm.conf|title=Modifiche necessarie a lvm.conf|lang=ini|1=
# Imposta use_lvmetad a '1' per systemd
use_lvmetad {{=}} 1
}}

{{Note|Invece di modificate {{Path|/etc/lvm/lvm.conf}} lo stesso risultato può essere raggiunto attraverso una unità {{Path|lvmetad.socket}} che attiva un servizio {{Path|lvmetad.service}}, ma l'attuale versione di {{Package|sys-fs/lvm2}} non consente ancora questa opzione.}}

== Installazione ==

Il pacchetto {{Package|sys-apps/systemd}} contiene udev. Una volta installato, {{Package|sys-fs/udev}} potrà essere rimosso in quanto systemd fornisce {{Package|virtual/udev}}.

Abilitare la USE flag <code>systemd</code> a livello globale (in {{Path|make.conf}}). La USE flag <code>consolekit</code> dovrebbe essere disabilitata per evitare conflitti con il servizio {{c|systemd-logind}}. In alternativa è possibile passare ad un subprofilo con systemd per utilizzare USE flags predefinite più sicure, nel qual caso non è necessario modificare {{Path|make.conf}}:

{{RootCmd|eselect profile list}}

Da ultimo, si proceda all'aggiornamento del sistema con le nuove flag:

{{RootCmd|emerge -avDN @world}}

Se dovessero sorgere problemi di dipendenze (ad esempio {{Package|sys-fs/udev}} che blocca {{Package|sys-apps/systemd}}), la causa potrebbe essere la presenza nel file world di {{Package|sys-fs/udev}}. Si può tentare di risolvere il problema, deselezionandolo:

{{RootCmd|emerge --deselect sys-fs/udev}}

== Avviare il sistema con systemd ==

Per poter avviare systemd, si deve modificare l'{{c|init}} utilizzato dall'eseguibile del kernel (o dall'immagine initramfs).

{{Warning|I servizi che sono stati abilitati dal precedente gestore di servizi non verranno automaticamente avviati. Ciò è dovuto al fatto che il sistema sta passando ad un nuovo gestore di servizi. Per abilitare funzionalità quali le funzioni di rete o il login manager, questi servizi devono essere nuovamente abilitati. Maggiori informazioni in merito all'abilitazione dei servizi sono disponibili nella successiva sezione di questo articolo dedicata ai servizi.}}

{{Note|Nel caso in cui il processo di migrazione porti il sistema in una condizione di errore è possibile riavviare utilizzando il gestore di servizi predefinito (OpenRC) annullando la modifica dell'init. Ciò consente un metodo sicuro e un modo per procedere con quanto indicato nella sezione dedicata alla risoluzione dei problemi, contenuta alla fine dell'articolo.}}

Le seguenti sottosezioni documentano come modificare l'{{c|init}} in uno dei boot managers o nel kernel.

=== Grub Legacy (0.x) ===

L'argomento <code>init=/usr/lib/systemd/systemd</code> deve essere aggiunto alla linea di comando del kernel . Un esempio estratto da {{Path|grub.conf}} è il seguente:

{{FileBox|filename=/boot/grub/grub.conf|title=Example GRUB config for systemd|1=
title=Gentoo with systemd
root (hd0,0)
kernel /vmlinuz root=/dev/sda2 init=/usr/lib/systemd/systemd
}}

Se il sistema deve essere utilizzato con OpenRC, si utilizzi <code>real_init</code> invece di <code>init</code>.

=== Grub 2 ===

Se si utilizza {{c|grub2-mkconfig}}, si aggiunga l'opzione init nella <var>GRUB_CMDLINE_LINUX</var>:

{{Note|Non necessario se si utilizza un'immagine initramfs generata da {{c|dracut}} poichè systemd incluso nell'immagine initramfs già avvia systemd.}}

{{FileBox|filename=/etc/default/grub|title=Configure GRUB 2 for systemd|lang=bash|1=
# Si aggiunga il paramentro alla lina di comando del kernel
GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"
}}

Se il file di configurazione di GRUB 2 è modificato a mano (solo per esperti), si aggiunga il parametro <code>init=</code> al comando <code>linux</code> o <code>linux16</code>.

{{FileBox|filename=/boot/grub/grub.cfg|title=Example GRUB2 configuration fragment|1=
linux /vmlinuz-3.10.9 root=UUID=508868e4-54c6-4e6b-84b0-b3b28b1656b6 init=/usr/lib/systemd/systemd
}}

Se si utilizza una intrd generata con genkernel-next's initrd, si utilizzi <code>real_init</code> invece di <code>init</code>.

{{Note|Questo utilizzo del deprecato <code>real_init</code> non dovrebbe essere necessario per le versioni stabili di genkernel-next.}}

=== Configurazione direttamente nel kernel ===

La configurazione di init può anche essere inserita direttamente nella configurazione del kernel. Si veda  {{Path|Processor type and features -> Built-in kernel command line}}. Questa tecnica funziona sia per {{c|grub}}, sia per {{c|grub2}}.

=== Impostare la password di root ===

A questo punto non ci si deve dimenticare di impostare la password di root. Nel caso in cui qualcosa andasse storto, systemd richiederà la password di root per passare in modalità manutenzione.

== Configurazione post installazione ==

systemd supporta alcuni file di configurazione del sistema per impostare i dettagli del sistema di base.

{{Note|Mentre alcuni parametri di configurazione possono essere aggiornati modificando gli opportuni file di configurazione, la maggior parte delle impostazioni vengono gestite utilizzando delle utility che richiedono che systemd sia in esecuzione. In questo caso, si deve riavviare il computer con systemd ed utilizzare le utility {{c|hostnamectl}}, {{c|localectl}}, e {{c|timedatectl}} ove richiesto.}}

=== Hostname ===

Per impostare il nome host, si crea/modifica  {{Path|/etc/hostname}} e semplicemente diventa disponibile il nome host impostato.

Quando il sistema viene avviato con systemd, è possibile utilizzare uno strumento chiamato {{c|hostnamectl}} per modificare {{Path|/etc/hostname}} e {{Path|/etc/machine-info}}. Per modificare il nome host, si esegua:

{{RootCmd|hostnamectl set-hostname <NOME HOST>}}

Si veda {{c|man hostnamectl}} per ulteriori opzioni

<!--
{{FileBox|filename=/etc/machine-info|title=file di configurazione per le infornazioni sulla macchina loale.|lang=bash|1=
PRETTY_NAME="Larry's Computer"
ICON_NAME="computer-laptop"
}}
-->

=== Localizzazione ===

Solitamente, le localizzazioni dovrebbero venire correttamente migrate da OpenRc al momento di installazione di systemd. Quando necessario, la localizzazione dovrebbe essere impostata mediante {{Path|/etc/locale.con}} come indicato nelle istruzioni del manuale Gentoo

{{FileBox|filename=/etc/locale.conf|title=Configurazione localizzazione del sistema|lang=bash|1=
LANG="en_US.utf8"
}}

Dopo che il sistema è stato avviato con systemd, verrà utilizzato {{c|localectl}} per imposta la localizzazione e le mappe per la tastiera della console e di X11. Per modificare la localizzazione del sistema, eseguire il seguente comando:

{{RootCmd|localectl set-locale LANG<nowiki>=</nowiki><LOCALE>}}

Per modificare la keymap della console virtuale:

{{RootCmd|localectl set-keymap <KEYMAP>}}

E da ultimo, per impostare la configurazione di X11:

{{RootCmd|localectl set-x11-keymap <LAYOUT>}}

Ove necessario, possono essere specificate sia la variante sia le opzioni:

{{RootCmd|localectl set-x11-keymap <LAYOUT> <MODEL> <VARIANT> <OPTIONS>}}

=== Ora e data ===

Ora e data possono essere impostate utilizzando {{c|timedatectl}}. Ciò consente agli utenti di impostare la sincronizzazione senza doversi appoggiare a {{Package|net-misc/ntp}} o ad altri programmi diversi dall'implementazione diretta di systemd.

Per imparare ad utilizzare {{c|timedatectl}} si esegua il comando:

{{RootCmd|timedatectl --help}}

=== Caricamento automatico dei moduli ===

Il caricamento automatico dei moduli viene configurato tramite un file, o una directory di files. I file di configurazione sono localizzati in {{Path|/etc/modules-load.d}}. All'avvio viene caricato ogni file contenete una lista di moduli. Il formato dei file è una lista di moduli separati da un carattere di newline e può avere qualunque nome purché termini con {{Path|.conf}}. l modulo che deve essere caricato può essere separato da un programma, sevizio o un qualunque modo risponda alle proprie preferenze personali. Nel seguente listato, un esempio per {{Path|virtualbox.con}}

{{FileBox|filename=/etc/modules-load.d/virtualbox.conf|title=File di esempio per i moduli di virtualbox|1=
vboxdrv
vboxnetflt
vboxnetadp
vboxpci
}}

=== Rete ===

==== systemd-networkd ====

systemd-networkd è utile per semplici configurazioni di reti cablate. Per impostazione predefinita è disabilitato.

Per configurare systemd-networkd, si crei un file {{Path|*.network}} in {{Path|/etc/systemd/network}}. Si veda [http://www.freedesktop.org/software/systemd/man/systemd.network.html systemd.network(5)] per informazioni. Una semplice configurazione DHCP è fornita nel seguente esempio:

{{FileBox|filename=/etc/systemd/network/50-dhcp.network
|1=[Match]
Name=en*
 
[Network]
DHCP=yes}}

{{RootCmd|systemctl enable systemd-networkd.service
|systemctl start systemd-networkd.service}}

Si noti che systemd-networkd non aggiorna {{Path|resolv.conf}} per impostazione predefinita. Per consentire a systemd di gestire le impostazioni DNS, si sostituisca {{Path|resolv.conf}} con un link simbolico e si avvi systemd-resolved.

{{RootCmd|ln -snf /run/systemd/resolve/resolv.conf /etc/resolv.conf
|systemctl enable systemd-resolved.service
|systemctl start systemd-resolved.service}}

==== NetworkManager ====

Frequentemente viene utilizzato NetworkManager per configurare le impostazioni di rete. A tal fine, si esegua semplicemente il seguente comando se si utilizza un ambiente desktop con supporto a X11:

{{RootCmd|nm-connection-editor}}

Se non è questo il calo e le reti devono essere configurate tramite una console, si legga il documento [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Using_the_NetworkManager_Command_Line_Tool_nmcli.html nmcli], oppure si avvii un processo di configurazione guidato tramite {{c|nmtui}}:

{{RootCmd|nmtui}}

[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Networking_Config_Using_nmtui.html nmtui] è un'interfacca curses che guiderà l'utente nel processo di configurazione tramite linea di comando.

=== Gestione dei file di log ===

systemd ha un suo modo per la gestione dei file di log e non necessita di appoggiardi ad alcun sistema esterno di log (tipo {{Package|app-admin/syslog-ng}} o {{Package|app-admin/rsyslog}}).I messaggi possono essere letti tramite {{c|journalctl}}. systemd può anche essere configurato per utilizzare uno strumento esterno per la gestione dei log. Si veda {{c|man journald.conf}} per imparare a configurare journald secondo le proprie esigenze personali.

Alcune opzioni comuni per {{c|journalctl}}:

{| class="table table-striped table-condensed"
|-
! Command line options for {{c|journalctl}} !! Result
|-
| {{c|journalctl}} without options || Show all log entries, starting with earliest.
|-
| <code>-b</code>, <code>--boot</code> || Show all log entries from this boot.
|-
| <code>-r</code>, <code>--reverse</code> || Newest entries first.
|-
| <code>-f</code>, <code>--follow</code> || Show the last few entries and display new log entries as they're being produced.
|-
| <code>-p</code>, <code>--priority=</code> || Specify (minimum) priority to display messages, with a choice from: "emerg" (0), "alert" (1), "crit" (2), "err" (3), "warning" (4), "notice" (5), "info" (6), "debug" (7).
|-
| <code>--since=</code>, <code>--until=</code> || Restrict entries by time. Accepts the format "YYYY-MM-DD hh:mm:ss" or the strings "yesterday", "today" and "tomorrow".
|-
| <code>-n</code>, <code>--lines=</code> || Restrict to a number of entries.
|-
| <code>-k</code>, <code>--dmesg</code> || Restrict to kernel messages.
|-
| <code>-u</code>, <code>--unit=</code> || Restrict to a certain Systemd unit.
|}

Per maggiori informazioni e le ulteriori opzioni, si veda {{c|man journalctl}}.

=== /tmp adesso è posizionata in tmpfs ===

A meno che non sia esplicitamente indicato in {{Path|/etc/fstab}} un altro filesystem da montare in  {{Path|/tmp}}, systemd monterà {{Path|/tmp}} come tmpfs. Ciò significa che la directory verrà svuotata ad ogni avvio e le sue dimensioni saranno limitate al 50% della memoria RAM di sistema. Per capire perché questo è il comportamento voluto e come modificarlo, si veda [http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ API File Systems].

=== Configurare la verbosità del processo di avvio ===

Quando si passa a systemd, gli utenti notano differenze nella verbosità del processo di avvio:

* The boot option <code>quiet</code> not only influences the kernel output, but also that of systemd itself. Then, while setting up systemd for the machine, drop the option to see any errors could arise more easily. After that, add it back to get a quiet (and faster) boot.
* Even passing the <code>quiet</code> boot option, systemd can still be configured to show its status by also passing <code>systemd.show_status=1</code>.
* When not using the <code>quiet</code> boot option, some messages might be overwriting consoles. That is caused by the kernel configuration (see {{c|man 5 proc}} and look for {{Path|/proc/sys/kernel/printk}}). To tweak it pass the <code>loglevel=5</code> boot parameter to the kernel (and update the value according to preference, for instance set a lower value like 1).

== Services ==

At some point the system will need to be rebooted in order to get systemd running (in system mode). Be sure to read all of this document to ensure systemd is configured as completely as possible before rebooting. Note that {{c|journalctl}} works with systemd not running, but that {{c|systemctl}} will not do anything useful without systemd running. Complete the service configuration (enabling and starting of services) after logging in to the system running systemd.

=== OpenRC services ===

Although systemd originally intended to support running old init.d scripts, that support is not suited well for a dependency-based RC like OpenRC and thus is completely disabled on Gentoo. OpenRC provides additional measures to ensure that init.d scripts can't be run when OpenRC was not used to boot the system (otherwise the results would be unpredictable).

=== Listing available services ===

All available service units can be listed using the <code>list-units</code> argument of {{c|systemctl}}:

{{RootCmd|systemctl list-units|output=<pre>
UNIT                               LOAD   ACTIVE SUB       DESCRIPTION
boot.automount                     loaded active waiting   EFI System Partition Automount
proc-sys-fs-binfmt_misc.automount  loaded active waiting   Arbitrary Executable File Formats File System Automount Point
...
</pre>}}

The following file suffixes are of interest:

{| class="table"
! Suffix
! Description
|-
| {{Path|.service}}
| plain service files (e.g. ones just running a daemon directly),
|-
| {{Path|.socket}}
| socket listeners (much like ''inetd''),
|-
| {{Path|.path}}
| filesystem triggers for services (running services when files change etc.).
|}

Alternatively the {{c|systemctl}} tool can be used to list all services (including implicit ones):

{{RootCmd|systemctl --all --full}}

And finally check for services that failed to start:

{{RootCmd|systemctl --failed}}

=== Enabling, disabling, starting, and stopping services ===

The usual way of enabling a service is using the following command:

{{RootCmd|systemctl enable foo.service}}

Services can be disabled likewise:

{{RootCmd|systemctl disable foo.service}}

These commands enable services using their default name in default target (both specified in "Install" section of the service file). However, sometimes services either don't provide that information or users prefer to have another name/target.

Note that these commands only enable or disable the system to be started on a next boot; to start the service right now, use:

{{RootCmd|systemctl start foo.service}}

Services can be stopped likewise:

{{RootCmd|systemctl stop foo.service}}

=== Installing custom unit files ===

Custom unit files can be placed in {{Path|/etc/systemd/system}}, where they will be recognized after running {{c|systemctl daemon-reload}}:

{{RootCmd|systemctl daemon-reload}}

{{Path|/usr/lib/systemd/system}} is reserved for service files installed by the package manager.

=== Customizing unit files ===

When only minor changes to a unit are needed, there's no need to create a full copy of the original unit file in {{Path|/etc/systemd/system}}. Overriding settings in a package management provided unit can be achieved by drop-in files in a {{Path|*.d}} directory named after the original unit (e.g. {{Path|apache2.d}}) in {{Path|/etc/systemd/system/}}.

{{FileBox|filename=/etc/systemd/system/apache2.d/mem-limit.conf|title=Example of adding/overriding settings in a service file|lang=ini|1=
[Service]
MemoryLimit{{=}}1G
}}

A reload of systemd is needed to inform it of the changes:

{{RootCmd|systemctl daemon-reload}}

Then the service needs to be restarted to apply the changes:

{{RootCmd|systemctl restart apache2}}

Verify that the changed property was applied to the service:

{{RootCmd|systemctl show --property{{=}}MemoryLimit apache2|output=<pre>MemoryLimit=1074000000</pre>}}

=== Enabling a service under a custom name ===

When the name provided by "Alias" in the unit's "[Install]" section does not meet the expectations and providing a permanent new value for this through a [[#Customizing unit files|customization]] is not desired, a symlink can be created manually in {{Path|/etc/systemd/system/*.wants/}}. The name of the {{Path|*.wants}} directory can either specify a target or another service which will depend on the new one.

For example, to install {{Path|mysqld.service}} as {{Path|db.service}} in the {{Path|multi-user.target}}:

{{RootCmd|ln -s /usr/lib/systemd/system/mysqld.service /etc/systemd/system/multi-user.target.wants/db.service}}

To disable the service, just remove the symlink:

{{RootCmd|rm /etc/systemd/system/multi-user.target.wants/db.service}}

=== Native services ===

Some of Gentoo packages already install systemd unit files. For these services, it is enough to enable them. A quick summary of packages installing unit files can be seen on [http://qa-reports.gentoo.org/output/eclass-usage/systemd.txt systemd eclass users list].

The following table lists systemd services matching OpenRC ones:

{| class="table" style="text-align: center;"
|+ Migration chart
|-
! scope="col" | Gentoo package
! scope="col" | OpenRC service
! scope="col" | systemd unit 
! scope="col" | Notes
|-
! scope="row" rowspan="28" | {{Package|sys-apps/openrc}}
| bootmisc || systemd-tmpfiles-setup.service || always enabled, uses {{Path|tmpfiles.d}}
|-
| consolefont || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| devfs ||  || 
|-
| dmesg ||  || 
|-
| fsck || fsck*.service || pulled in implicitly by mounts
|-
| functions.sh || See note || {{Bug|373219}}
|-
| hostname || (builtin) || {{Path|/etc/hostname}}
|-
| hwclock || See note || always enabled as part of systemd (ie It is baked in and is not a unit)
|-
| keymaps || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| killprocs ||  || 
|-
| local ||  || 
|-
| localmount || local-fs.target || actual units are created implicitly from fstab
|-
| modules || systemd-modules-load.service || always enabled, uses {{Path|/etc/modules-load.d/*.conf}}
|-
| mount-ro ||  || 
|-
| mtab ||  || 
|-
| netmount || remote-fs.target || 
|-
| numlock ||  || 
|-
| procfs || (builtin) || 
|-
| root || remount-rootfs.service || 
|-
| savecache || n/a || OpenRC internals
|-
| staticroute ||  || 
|-
| swap || swap.target || actual units are created implicitly from fstab
|-
| swclock ||  || 
|-
| sysctl || systemd-sysctl.service || {{Path|sysctl.conf}} and {{Path|sysctl.d/}}
|-
| sysfs || (builtin) || 
|-
| termencoding || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| scope="row" rowspan="2" | urandom
| systemd-random-seed-load.service || 
|-
| systemd-random-seed-save.service || 
|-
! scope="row" | {{Package|app-admin/rsyslog}}
| rsyslog || rsyslog.service || 
|-
! scope="row" | {{Package|app-admin/syslog-ng}}
| syslog-ng || syslog-ng.service || 
|-
! scope="row" rowspan="2" | {{Package|media-sound/alsa-utils}}
| scope="row" rowspan="2" | alsasound
| alsa-store.service || (enabled by default)
|-
| alsa-restore.socket || (enabled by default)
|-
! scope="row" | {{Package|net-misc/dhcpcd}}
| dhcpcd || dhcpcd.service || 
|-
! scope="row" rowspan="5" | {{Package|net-misc/netifrc}} 
| scope="row" rowspan="5" | net.*
| net@.service || systemd wrapper for net.* scripts (comes with net-misc/netifrc)
|-
| netctl@.service || net-misc/netctl is originally an Arch Linux tool.
|-
| NetworkManager.service || For &lt;networkmanager-0.9.8.4 : enable NetworkManager-dispatcher.service for dispatcher.d scripts to work. <br/> Enable NetworkManager-wait-online.service to detect that the system has a working internet connection.<br/>Disable all other managers (e.g., wicd, dhcpcd) and wpa_supplicant.
|-
| dhcpcd.service || Provided by net-misc/dhcpcd
|-
| systemd.networkd.service || Part of systemd
|-
! scope="row" | {{Package|net-misc/openntpd}}
| ntpd || ntpd.service ||
|-
! scope="row" rowspan="2" | {{Package|net-misc/openssh}}
| scope="row" rowspan="2" | sshd
| sshd.service || runs sshd as a daemon
|-
| sshd.socket || runs sshd on a inetd-like basis (for each incoming connection)
|-
! scope="row" rowspan="2" | {{Package|net-wireless/wpa_supplicant}}
| scope="row" rowspan="2" | wpa-supplicant
| wpa_supplicant.service || D-Bus controlled daemon (e.g. for [[NetworkManager#Systemd|NetworkManager]])
|-
| wpa_supplicant@.service || interface-specific wpa_supplicant (used like {{Path|wpa_supplicant@wlan0.service}})
|-
! scope="row" rowspan="3" | {{Package|net-print/cups}}
| scope="row" rowspan="3" | cupsd
| cups.service || classic on-boot start up service
|-
| cups.socket
| scope="row" rowspan="2" | socket and path activation (cups only started on-demand)
|-
| cups.path
|-
! scope="row" | {{Package|net-wireless/bluez}}
| bluetooth || bluetooth.service || 
|-
! scope="row" rowspan="2" | {{Package|sys-apps/dbus}}
| scope="row" rowspan="2" | dbus
| dbus.service || 
|-
| dbus.socket || 
|-
! scope="row" | {{Package|sys-apps/irqbalance}}
| irqbalance || irqbalance.service || supports daemon mode only
|-
! scope="row" | {{Package|sys-apps/microcode-ctl}}
| microcode_ctl ||  || Configure ''microcode'' as a '''module''' to let it load the microcode itself. Go to "Processor type and features" -> "CPU microcode loading support" and remember to add the right option based on the system having an intel or amd processor.
|-
! scope="row" rowspan="4" | {{Package|sys-fs/udev}}
| udev || udev.service || 
|-
| udev-mount || (builtin) || {{Path|/dev}} is mounted as tmpfs
|-
| udev-postmount || udev-trigger.service || 
|-
| || udev-settle.service || 
|-
! scope="row" | {{Package|sys-power/acpid}}
| acpid || acpid.service || Most of its functionality is done by systemd itself, so consider disabling this
|-
! scope="row" | {{Package|x11-apps/xdm}}
| (xdm) || xdm.service || OpenRC uses common xdm init.d installed by {{Package|x11-base/xorg-server}}. With systemd the corresponding unit file for each DM (gdm.service, kdm.service...) needs to be enabled.
|-
! scope="row" rowspan="2" | {{Package|net-firewall/iptables}}
| scope="row" rowspan="2" | iptables
| iptables-store.service || 
|-
| iptables-restore.service || 
|-
|}

=== Timer services ===

Since version 197 systemd supports timers, making cron unnecessary on a systemd system. Since version 212 persistent services are supported, replacing even anacron. Persistent timers are run at the next opportunity if the system was powered down when the timer was scheduled.

The following is an example on how to make a simple timer that runs in the context of a user. It will even run if the user is not logged in. Every timed service needs a timer and a service file that is activated by the timer as follows:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.timer|title=Example of a timer running every working day|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=no
 
[Timer]
Persistent=false
OnCalendar=Mon-Fri *-*-* 11:30:00
Unit=backup-work.service
 
[Install]
WantedBy=default.target
}}

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Example of a service triggering backup|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

Firstly, tell systemd to rescan the service files:

{{Cmd|systemctl --user daemon-reload}}

It is possible to trigger the backup manually by running the following command:

{{Cmd|systemctl --user start backup-work.service}}

Start and stop the timer manually as follows:

{{Cmd|systemctl --user start backup-work.timer}}
{{Cmd|systemctl --user stop backup-work.timer}}

Finally, to activate the timer at every system start, run:

{{Cmd|systemctl --user enable backup-work.timer}}

To check the last results of running the service:

{{Cmd|systemctl --user list-timers}}

==== Emailing failures ====

If a timed service runs and fails an e-mail can be send out to inform the user or administrator. This is possible with the "OnFailure" stanza which specifies what should happen if a service fails. A failure is detected by a non-zero return code of the invoked script.

For that change the script as follows:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Example of a service triggering backup|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
OnFailure=failure-email@%i.service
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

This requires to have the service {{Path|failure-email@.service}} installed, which can be found in 
[https://github.com/kylemanna/systemd-utils/tree/master/onfailure kylemanna's systemd-utils repository].

==== Replacing cron ====

The above timer and service files can also be added to {{Path|/usr/lib/systemd/system}} to make them available system-wide. The install section should then say <code>WantedBy=multi-user.target</code> to enable the service at system start.

However, cron also runs the scripts in {{Path|/etc/cron.daily}} and other locations. Several packages place scripts there that they expect to be run daily. This behavior can be emulated with systemd by installing {{Package|sys-process/systemd-cron}}. Then activate the new cron replacement with the following commands:

{{RootCmd|systemctl enable cron.target}}
{{RootCmd|systemctl start cron.target}}

== Troubleshooting ==

* {{Bug|systemd|search=package}}
* {{Bug|systemd|search=product|site=fdo}}
* [http://freedesktop.org/wiki/Software/systemd/Debugging Upstream debugging guide]

=== /dev/kmsg buffer overrun, some messages lost ===

; Problem: When booting the system displays an infinite loop of <code>/dev/kmsg buffer overrun, some messages lost</code>. The login screen to console never appears since the system never gets to that point in the boot process.

; Solution: Most of the time this issue is caused when the <var>CONFIG_POWER_SUPPLY_DEBUG</var> option is enabled in the kernel. The current workaround is to disable this option in the kernel, then recompile, install, and boot the new kernel. The solution can also be found in [https://forums.gentoo.org/viewtopic-t-977530-postdays-0-postorder-asc-start-0.html this thread] on the Gentoo forums. According to one user one the forum, this issue was also seen when using I2C EEPROM on an embedded system<ref>https://forums.gentoo.org/viewtopic-t-977530-postdays-0-postorder-asc-start-25.html  Retrieved on March 12th, 2016</ref>. The solution in this case was to disable the <var>CONFIG_I2C_DEBUG_CORE</var> kernel option.

=== Graphical sessions opened in random places ===

By default systemd only launches a {{c|getty}} process when it's going to be used. This causes some display managers (like GDM) to use the remaining TTYs for opening graphical sessions on demand, which can result in having consoles and graphical sessions placed randomly depending on the order they were used.

To stick with a more "classical" behavior (i.e, consoles placed from {{Path|tty1}} to {{Path|tty6}} and graphical sessions using the remaining TTYs) force it to always launch {{c|getty}} on those:

{{RootCmd|systemctl enable getty@tty{2,3,4,5,6}.service}}

=== lvm ===

When switching from OpenRC to systemd and lvm is needed to properly mount the system volumes, activate the lvm service:

{{RootCmd|systemctl enable lvm2-monitor.service}}

While it might not be needed for activation of the root volume (if lvm is integrated into the initramfs) it might not work for other lvm volumes, unless the service is activated.

=== systemd-bootchart ===

{{KernelBox|title=systemd-bootchart support|1=<pre>
File systems  --->
	Pseudo filesystems --->
	[*] /proc file system support
Kernel hacking  --->
	[*] Kernel debugging
	[*] Collect scheduler debugging info
	[*] Collect scheduler statistics
</pre>}}

As systemd-bootchart attempts to start {{Path|/sbin/init}}, reconfigure it to invoke systemd instead:

{{FileBox|filename=/etc/systemd/bootchart.conf|lang=bash|1=
...
Init=/usr/lib/systemd/systemd
...
}}

The result of the bootchart is a report in SVG format located in {{Path|/run/log/}}.

=== syslog-ng conflicts with systemd ===

systemd creates {{Path|/dev/log}} as datagram socket <ref>Jose Pedro Oliveira. [https://bugzilla.redhat.com/show_bug.cgi?id=770810#c10 Note about custom syslog-ng configurations files], [https://bugzilla.redhat.com/ Red Hat Bugzilla], January 11, 2012. Retrieved on January 12th, 2015</ref> <ref>[https://fedoraproject.org/wiki/Common_F16_bugs#systemd-syslog-ng-problems Systemd and syslog-ng interaction problems: system freezes / syslog-ng fails to start], [https://fedoraproject.org/wiki/Fedora_Project_Wiki Fedora Project Wiki]. Retrieved on January 12th, 2015</ref> so syslog-ng needs to be told to read from a ''unix-dgram'' instead of a ''unix-stream'' as otherwise syslog-ng would be using a "wrong" stream:

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# By default syslog-ng uses unix-stream. Comment this out and add unix-dgram instead.
# unix-stream('/dev/log');
unix-dgram('/dev/log');
}}

=== syslog-ng source for systemd ===

There is ''no need'' to add <code>unix-dgram('/dev/log');</code> to the {{Path|/etc/syslog-ng/syslog-ng.conf}} config file. It will cause {{c|syslog-ng}} to fail (at least on version syslog-ng-3.7.2). Update the <code>source src { ...; };</code> line mentioned in the [[Syslog-ng#Sources|syslog-ng article]] as follows:

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# default config for openrc
#source src { system(); internal(); };
 
# systemd
source src { systemd-journal(); internal(); };
}}

=== sys-fs/cryptsetup configuration ===

systemd does not seem to respect {{Path|/etc/conf.d/dmcrypt}} (see {{bug|429966}}) so it needs to be configured through the {{Path|/etc/crypttab}} file:

{{FileBox|filename=/etc/crypttab|title=Configuration file for encrypted block devices|1=
crypt-home UUID=c25dd0f3-ecdd-420e-99a8-0ff2eaf3f391 -
}}

Based on the system's {{Path|/etc/crypttab}} file, a new service file might need to be created.
To do this, enable the <code>cryptsetup</code> USE flag for {{Package|sys-apps/systemd}}. It will install {{Path|/usr/lib/systemd/system-generators/systemd-cryptsetup-generator}}. Executing it will create a service file in {{Path|/tmp/}}, which can now be copied to {{Path|/etc/systemd/system}}, adjusted manually and added to the desired runlevel.

=== Check for units that failed to start ===

Check for units that failed to start with:

{{RootCmd|systemctl --failed}}

=== Enable Debug Mode ===

To get more informations set the following in {{Path|/etc/systemd/system.conf}}:

{{FileBox|filename=/etc/systemd/system.conf|lang=bash|1=
LogLevel=debug
}}

Or enable the debug-shell, that opens a terminal at tty9. This helps to debug services during the boot process.

{{RootCmd|systemctl enable debug-shell.service}}

=== e4rat usage ===

Please remember to edit {{Path|/etc/e4rat.conf}} setting 'init' to {{Path|/usr/lib/systemd/systemd}}, otherwise it will keep booting OpenRC.

=== GRSecurity hardening ===

With grsecurity enabled, systemd-networkd might log the following error:

{{CodeBox|title=systemd-networkd error|1=could not find udev device: Permission denied}}

The error raises due to systemd-networkd working under a non-root user with grsecurity refusing access to the complete {{Path|/sys}} structure for such users. To disable this option, disable the <var>CONFIG_GRKERNSEC_SYSFS_RESTRICT</var> kernel option.

logind may also have subtle permission issues with <var>CONFIG_GRKERNSEC_PROC</var> active, see {{Bug|472098}}.

=== shutdown -rF does not force fsck ===

The {{c|systemd-fsck}} service is responsible of running {{c|fsck}} when needed. It doesn't honor {{c|shutdown}}'s <code>-rF</code> option, but instead honors the following kernel boot parameters.

{| class="table table-striped table-condensed" style="text-align: left;" 
|-
! Boot parameter
! Supported options
! Description
|-
| <code>fsck.mode</code>
| <code>auto</code><br /><code>force</code><br /><code>skip</code>
| Controls the mode of operation. The default is <code>auto</code>, and ensures that file system checks are done when the file system checker deems them necessary. <code>force</code> unconditionally results in full file system checks. <code>skip</code> skips any file system checks.
|-
| <code>fsck.repair</code>
| <code>preen</code><br /><code>yes</code><br /><code>no</code>
| Controls the mode of operation. The default is <code>preen</code>, and will automatically repair problems that can be safely fixed.  <code>yes</code> will answer yes to all questions by fsck and <code>no</code> will answer no to all questions.
|}

== See also ==

* [[Comparison of init systems]] - An article comparing and contrasting the differences in Gentoo init systems.
* [[Sakaki's_EFI_Install_Guide|Sakaki's EFI Install Guide]] - Particularly look at the chapter entitled [[Sakaki's_EFI_Install_Guide/Configuring_systemd_and_Installing_Necessary_Tools|Configuring systemd and installing necessary tools]]
* [[OpenRC to Systemd Cheatsheet]]

== External resources ==

* [http://www.freedesktop.org/wiki/Software/systemd/FrequentlyAskedQuestions FAQ]
* [http://www.freedesktop.org/wiki/Software/systemd/TipsAndTricks Tips and tricks]

== References ==

{{reflist}}

[[Category:Init systems]]
