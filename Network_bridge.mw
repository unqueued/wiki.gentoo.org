This article discusses how to setup a network bridge in order to connect two portions of a network together.

__TOC__

== Introduction ==

A network bridge can be used to connect two independent network segments at layer 2 level (much like a network switch).  Common applications include transparent proxying, transparent filtering (using [[iptables]]) and saving money on hardware as some mainboards come with two PHY interfaces. In this article, eth0 and eth1 will be the [[network interface|network interfaces]] used but of course they can be replaced by whatever interface names are present on a system.  

In order to create a bridge on Linux a special bridging device is created (brX) that contains at least two network devices as ports (e.g. ethX or pppX). As the bridge works on layer 2, no IP addresses are needed on the port devices â€” on a typical setup, the bridging device itself will receive the IP (e.g. via DHCP).

== Kernel ==
{{KernelBox|title=Enabling Ethernet Bridging|<pre>
[*] Networking support  --->
   Networking options  --->
      <M> 802.1d Ethernet Bridging
</pre>}}

== Installation ==
Install the {{Package|net-misc/bridge-utils}} package to have access to the utilities needed to manage the bridge device:
{{Emerge|bridge-utils}}

You need to do this with a console connection.  You'll probably lose the ability to ssh into the box, if you are working on one of the ports being affected.

Make certain the physical ethernet interfaces you are working on are not in /etc/conf.d/ as symbolic links as part of your original install:

{{RootCmd
|rc-update delete net.enp1s0 boot
|rc-update delete net.enp2s0 boot
|rm /etc/init.d/net/enp2s0
|rm /etc/init.d/net/enp1s0
}}

It's always best to learn how to do things first by hand, then you can automate it.  brctl has been around forever.  This is a layer 2 connection you are creating, and as such, you do not need IP addresses assigned to the physical ports.

{{RootCmd
|brctl
}}
.. shows you all the nice commands available to you.  Now create a bridge with no interfaces assigned (yet):

{{RootCmd
|brctl addbr br0
}}
Add the two interfaces to the bridge:
{{RootCmd
|brctl addif br0 enp1s0
|brctl addif br0 enp2s0
}}
See what you've done:
{{RootCmd
|brctl show
}}

Note that stp does not get turned on, unless you specify that that is what you want.

== Host configuration ==
=== OpenRC ===
First, the bridge device must be added to the {{Path|/etc/conf.d/net}} file. As an example, bridge configuration with DHCP:

{{FileBox|filename=/etc/conf.d/net|title=Add bridge device example|lang=bash|1=
# Set up the initial layer 2 bridge interface
bridge_br0="enp1s0 enp2s0"

# bridge
config_br0="192.168.26.199 netmask 255.255.255.0"
routes_br0="default via 192.168.26.254"
brctl_br0="setfd 0"
brctl_br0="sethello 10"
}}

{{Note|It is important to include <code>setfd 0</code> and <code>sethello 10</code> in the {{Path|/etc/conf.d/net}} file in order to bring the bridge interface up quickly. Other values will cause network packets to be dropped for the first 30 seconds after the bridge has become active. This, in turn, could prevent DHCP from working as intended.}}

More documentation can be found by reading {{Path|/usr/share/doc/netifrc-*/net.example.bz2}}

Next, create the init script by linking {{Path|net.lo}} to {{Path|net.br0}} and start the interface as follows:
{{RootCmd
|ln -s /etc/init.d/net.lo /etc/init.d/net.br0
|rc-service net.br0 start
}}

Finally, to make sure the bridge is automatically set up on subsequent boots add the newly generated init script to the system's default run level:
{{RootCmd|rc-update add net.br0 default}}

=== systemd ===
As of systemd 210 and up, a special service called [https://wiki.archlinux.org/index.php/systemd-networkd systemd-networkd] is available for network configuration. This service can handle bridge construction.

The basic procedure of creating a network configuration with systemd-networkd is creating several {{Path|.network}} and {{Path|.netdev}} files.

First, create a bridge. With systemd-networkd this is as simple as creating a new {{Path|.netdev}} file:

{{FileBox|filename=/etc/systemd/network/''MyBridge''.netdev|title=Systemd-networkd example|1=<pre>
[NetDev]
Name=br0
Kind=bridge
</pre>}}

After the bridge definition is created, assign the interfaces to the bridge:

{{FileBox|filename=/etc/systemd/network/''MyEth''.network|title=Interface assignment example|1=<pre>
[Match]
Name=eth*

[Network]
Bridge=br0
</pre>}}

Multiple interfaces can be matched and attached to the bridge.

Notice that this bridge is still not active. Activation can be achieved by creating a {{Path|.network}} definition to use the bridge.

==== DHCP ====
{{FileBox|filename=/etc/systemd/network/''MyBridge''.network|title=DHCP configuration|<pre>
[Match]
Name=br0

[Network]
DHCP=v4
</pre>}}

==== Static ====
{{FileBox|filename=/etc/systemd/network/''MyBridge''.network|title=Static configuration|1=<pre>
[Match]
Name=br0

[Network]
DNS=192.168.1.1
Address=192.168.1.2/24
Gateway=192.168.1.1
</pre>}}

Defining a gateway is only necessary if one intends to use the physical network interface as access to another network. When using the bridge as a private network, omit it as systemd-networkd will add the bridge as a default route when the Gateway option is set.

Do remember to enable and start the systemd-networkd service.

== External resources ==

* [http://www.linuxfoundation.org/collaborate/workgroups/networking/bridge Official Linux network bridge documentation.]
* [http://www.tldp.org/HOWTO/Ethernet-Bridge-netfilter-HOWTO.html Generic Linux network bridge how-to.]
* [http://www.gentoo-wiki.info/Bridging Article on the inofficial gentoo wiki with VLAN and IPtables examples.]
* [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Network_Bridging_Using_the_NetworkManager_Command_Line_Tool_nmcli.html Creating a bridge with NetworkManager.]

[[Category:Network management]]
