The Hardened Kernel Project is seeking to merge Grsecurity/PaX features into the upstream kernel.

== Hardened Kernel Project ==

=== Project Facilitators ===

This project does not have leaders per se. We are here to facilitate communication between different parties working on security features for the upstream Linux kernel.

{| class="table table-condensed table-striped" style="text-align: left; width: auto;" 
|- 
! Contributor
! Nickname
! Role
! Contact
|- 
| Matt Brown
| {{U|nmatt}}
| Project Lead
| matt at nmatt.com
|-
| r3g3x
| {{U|r3g3x}}
| Developer
|
|}               

=== Why? ===

* [https://grsecurity.net/passing_the_baton.php Grsecurity is no longer providing public patches to the community.] As such we wish to continue the tradition they inspired of a culture that emphasizes security first before stability.
* In recognizing the issues that security centric architectures may provide to end users, we hope to bridge hardened configurations and the needs of the average user community so that all may benefit.

=== Project Goals ===

Our goals are:

* Encourage and facilitate open source development of security features for the Linux kernel.
* Track progress of development work.
* Maintain a set of patches for security features that have not yet been merged into mainline.
* Remain distribution agnostic. We want to focus on patches that affect Linux directly.
* Work with the [http://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project KSPP.]

=== Philosophy ===

All are welcome!

* We need all the help we can get. Think you're lacking the skills? Feel like there's nothing you could do with your current skillset? Let us prove you wrong!

=== Resources ===

* Grsecurity archive: https://github.com/nmatt0/grsec-archive
* Grsecurity documentation: https://en.wikibooks.org/wiki/Grsecurity
* New to kernel development?: http://kernelnewbies.org/
* Kernel-hardening mailing list: http://www.openwall.com/lists/kernel-hardening/

== Progress tracking ==

Porting grsecurity features:

{| class="table table-condensed table-striped" style="text-align: left; width: auto;" 
|- 
! GRSEC kernel config
! LINUX kernel config
! Progress
! Notes
! Point of Contact
|- 
| GRKERNSEC_DMESG
| CONFIG_SECURITY_DMESG_RESTRICT
| {{Yes|COMPLETE}}
|
|
|- 
| GRKERNSEC_LINK
| n/a
| {{Yes|COMPLETE}}
| sysctl: fs.protected_hardlinks, fs.protected_symlinks
|
|- 
| CONFIG_GRKERNSEC_HARDEN_PTRACE
| CONFIG_SECURITY_YAMA (stackable with other LSMs)
| {{Yes|COMPLETE}}
| sysctl: kernel.yama.ptrace_scope, set to 1 (scope) by default, and can also disable unprivileged (2) or all usage (3)
|
|- 
| CONFIG_PAX_MEMORY_UDEREF (i386, x86_64, ARMv7)
| CONFIG_CPU_SW_DOMAIN_PAN (ARMv7), CONFIG_ARM64_SW_TTBR0_PAN (ARMv8.0), CONFIG_ARM64_PAN (ARMv8.1+)
| {{Partial|Hardware (x86_64 Broadwell+ SMAP, ARMv8.1+ PAN), Software (ARMv7, ARMv8.0)}}
|
|
|- 
| CONFIG_PAX_USERCOPY
| CONFIG_HARDENED_USERCOPY
| {{Partial|Missing slab whitelisting and slab cache useroffsize / usersize ranges}}
|
|
|- 
| CONFIG_GRKERNSEC_KSTACKOVERFLOW (x86_64 only)
| CONFIG_VMAP_STACK (x86_64 only)
| {{Yes|COMPLETE}}
|
|
|-
| GRKERNSEC_HARDEN_TTY
| SECURITY_TIOCSTI_RESTRICT
| {{Partial|IN PROGRESS}}
| http://www.openwall.com/lists/kernel-hardening/2017/04/25/3
| {{U|nmatt}}
|- 
| slub freelist random XOR mangling (no configuration option)
|
| {{No|Not implemented}}
|
|
|- 
| CONFIG_PAX_MEMORY_SANITIZE
| CONFIG_PAGE_POISONING, CONFIG_PAGE_POISONING_NO_SANITY (unless more security but less performance is wanted), CONFIG_PAGE_POISONING_ZERO
| {{Partial|1=CONFIG_PAGE_POISONING forces debug infrastructure bloat, slab poisoning via slub_debug=P disables the slub fast path which is unnecessarily, ridiculously slow + always enables verification which can be a nice security feature but hurts performance more. It also uses a poison value resulting in pointers pointing to userspace - quite dangerous without UDEREF, and still a bad idea with it present.}}
|
|
|}
