The Hardened Kernel Project is seeking to merge Grsecurity/PaX features into the upstream kernel.

== Hardened Kernel Project ==

=== Project Facilitators ===

This project does not have leaders per se. We are here to facilitate communication between different parties working on security features for the upstream Linux kernel.

{| class="table table-condensed table-striped" style="text-align: left; width: auto;" 
|- 
! Contributor
! Nickname
! Role
! Contact
|- 
| Matt Brown
| {{U|nmatt}}
| Project Lead
| matt at nmatt.com
|-
| r3g3x
| {{U|r3g3x}}
| Developer
|
|-
| Kees Cook
| {{U|kees}}
| KSPP/Upstream Liaison, Developer
| keescook at chromium.org
|}               

=== Why? ===

* [https://grsecurity.net/passing_the_baton.php Grsecurity is no longer providing public patches to the community.] As such we wish to continue the tradition they inspired of a culture that emphasizes security first before stability.
* In recognizing the issues that security centric architectures may provide to end users, we hope to bridge hardened configurations and the needs of the average user community so that all may benefit.

=== Project Goals ===

Our goals are:

* Encourage and facilitate open source development of security features for the Linux kernel.
* Track progress of development work.
* Maintain a set of patches for security features that have not yet been merged into mainline.
* Remain distribution agnostic. We want to focus on patches that affect Linux directly.
* Work with the [http://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project KSPP.]

=== Philosophy ===

All are welcome!

* We need all the help we can get. Think you're lacking the skills? Feel like there's nothing you could do with your current skillset? Let us prove you wrong!

=== Resources ===

* Grsecurity archive: https://github.com/nmatt0/grsec-archive
* Grsecurity documentation: https://en.wikibooks.org/wiki/Grsecurity
* New to kernel development?: http://kernelnewbies.org/
* Kernel-hardening mailing list: http://www.openwall.com/lists/kernel-hardening/

== Progress tracking ==

Porting grsecurity features:

{| class="table table-condensed table-striped" style="text-align: left; width: auto;" 
|- 
! GRSEC kernel config
! LINUX kernel config
! Progress
! Notes
! Point of Contact
|- 
| CONFIG_PAX_KERNEXEC
| n/a
| {{No|In Progress}}
| Upstream __ro_after_init does a tiny piece of PaX __read_only. Upstream constification and __read_only making slow progress (https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/log/?h=kspp/write-rarely). Other KERNEXEC pieces still in need of scoping. Requires CONFIG_PAX_CONSTIFY_PLUGIN.
| {{U|kees}}
|- 
| CONFIG_PAX_MEMORY_SANITIZE
| CONFIG_CMDLINE="slub_debug=P" (bad idea! see rest), CONFIG_PAGE_POISONING, CONFIG_PAGE_POISONING_NO_SANITY (unless more security but less performance is wanted), CONFIG_PAGE_POISONING_ZERO
| {{Partial|1=CONFIG_PAGE_POISONING forces debug infrastructure bloat, slab poisoning via slub_debug=P disables the slub fast path which is unnecessarily, ridiculously slow + always enables verification which can be a nice security feature but hurts performance more. It also forces the freelist pointer after the allocation, which is a security improvement in terms of mitigating use-after-free but wastes memory (PaX leaves it inline now unlike in the past and just sanitizes the rest). It also uses a poison value resulting in pointers pointing to userspace - quite dangerous without UDEREF, and still a bad idea with it present.}}
|
|
|- 
| CONFIG_PAX_MEMORY_UDEREF (x86, x86_64, ARMv7)
| CONFIG_CPU_SW_DOMAIN_PAN (ARMv7), CONFIG_ARM64_SW_TTBR0_PAN (ARMv8.0), CONFIG_ARM64_PAN (ARMv8.1+)
| {{Partial|Hardware (x86_64 Broadwell+ SMAP, ARMv8.1+ PAN), Software (ARMv7, ARMv8.0)}}
|
|
|- 
| CONFIG_PAX_MPROTECT
| 
| {{Partial|SELinux prevents injecting or modifying code at runtime without execmod (associated with a file label), execmem, execheap or execstack but this is not available without an LSM. MPROTECT also covers a bit more ground, like preventing relro sections from becoming writable again after they're made read-only.}}
|
|
|- 
| CONFIG_PAX_PAGEEXEC
| 
| {{Partial|NX is available for most architectures in hardware, but not non-PAE i386 and PAGEEXEC also kills processes violating NX rather than letting them handle SIGSEGV signals unless an exception is marked}}
|
|
|- 
| CONFIG_PAX_RANDKSTACK (x86/x86_64 only)
| 
| {{No|Not implemented}}
|
|
|- 
| CONFIG_PAX_REFCOUNT
| n/a
| {{No|In Progress}}
| Current upstream refcount_t work is not protecting atomic_t, so won't be as comprehensive in the near-term.
| {{U|kees}}
|- 
| CONFIG_PAX_USERCOPY
| CONFIG_HARDENED_USERCOPY
| {{Partial|In Progress}}
| Missing: slab whitelisting via slab cache useroffsize / usersize ranges, and GFP_USERCOPY kmalloc segregation.
| {{U|kees}}
|- 
| CONFIG_GRKERNSEC_BRUTE
|
| {{No|Not Implemented}}
|
|
|- 
| CONFIG_GRKERNSEC_DMESG
| CONFIG_SECURITY_DMESG_RESTRICT
| {{Yes|COMPLETE}}
|
|
|- 
| CONFIG_GRKERNSEC_HARDEN_PTRACE
| CONFIG_SECURITY_YAMA (stackable with other LSMs)
| {{Yes|COMPLETE}}
| sysctl: kernel.yama.ptrace_scope, set to 1 (scope) by default, and can also disable unprivileged (2) or all usage (3)
| {{U|kees}}
|- 
| CONFIG_GRKERNSEC_HARDEN_TTY
| CONFIG_SECURITY_TIOCSTI_RESTRICT
| {{No|IN PROGRESS}}
| http://www.openwall.com/lists/kernel-hardening/2017/04/25/3
| {{U|nmatt}}
|- 
| CONFIG_GRKERNSEC_HIDESYM
|
| {{Partial|Limited functionality via kptr_restrict sysctl}}
| Needs integration with CONFIG_HARDENED_USERCOPY and stronger %p restrictions
|
|- 
| CONFIG_GRKERNSEC_KSTACKOVERFLOW (x86_64 only)
| CONFIG_VMAP_STACK (x86_64 only)
| {{Yes|COMPLETE}}
|
|
|- 
| CONFIG_GRKERNSEC_LINK
| n/a
| {{Yes|COMPLETE}}
| sysctl: fs.protected_hardlinks, fs.protected_symlinks
| {{U|kees}}
|- 
| CONFIG_GRKERNSEC_MODHARDEN
| 
| {{No|In Progress}}
| https://lkml.org/lkml/2017/4/19/1086
|
|- 
| CONFIG_GRKERNSEC_PROC, CONFIG_GRKERNSEC_PROC_USER, CONFIG_GRKERNSEC_PROC_USERGROUP, CONFIG_GRKERNSEC_PROC_GID
| n/a
| {{Yes|COMPLETE}}
| mount option for procfs: "hidepid=2,gid=100" (substitute 100 with gid of proc group)
|
|- 
| CONFIG_GRKERNSEC_PROC_ADD
| 
| {{Partial|SELinux and other MAC implementations can do this on a fine-grained level, but there's no toggle not tied to MAC}}
|
|
|- 
| grsecurity slub freelist random XOR mangling (no configuration option)
|
| {{No|Not implemented}}
|
|
|- 
| grsecurity list manipulation checking (no configuration option)
| CONFIG_DEBUG_LIST, CONFIG_BUG_ON_DATA_CORRUPTION
| {{Yes|COMPLETE}}
|
| {{U|kees}}
|- 
| CONFIG_GCC_PLUGINS
| CONFIG_GCC_PLUGINS
| {{Yes|COMPLETE}}
| GCC plugin support is a prerequisite for CONFIG_PAX_LATENT_ENTROPY, CONFIG_PAX_STRUCTLEAK, CONFIG_GRKERNSEC_RANDSTRUCT, CONFIG_PAX_MEMORY_STACKLEAK, CONFIG_PAX_KERNEXEC, and CONFIG_PAX_RAP.
| {{U|kees}}
|- 
| CONFIG_PAX_CONSTIFY_PLUGIN
| CONFIG_GCC_PLUGIN_CONSTIFY
| {{No|In Progress}}
| https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/log/?h=kspp/write-rarely
| {{U|kees}}
|- 
| CONFIG_PAX_LATENT_ENTROPY
| CONFIG_GCC_PLUGIN_LATENT_ENTROPY
| {{Partial|Missing uninitialized memory mixing}}
| Needs https://patchwork.kernel.org/patch/9143023/
| {{U|kees}}
|- 
| CONFIG_PAX_MEMORY_STACKLEAK (x86 only)
| 
| {{No|Not Implemented}}
|
|
|- 
| CONFIG_PAX_RAP (x86_64 only)
| 
| {{No|Not Implemented}}
| Requires extensive fixes to kernel function prototypes.
|
|- 
| CONFIG_PAX_STRUCTLEAK
| CONFIG_GCC_PLUGIN_STRUCTLEAK
| {{Yes|COMPLETE}}
|
| {{U|kees}}
|- 
| CONFIG_GRKERNSEC_RANDSTRUCT
| CONFIG_GCC_PLUGIN_RANDSTRUCT
| {{No|In Progress}}
| https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/log/?h=kspp/gcc-plugin/randstruct-next-20170418
| {{U|kees}}
|}
