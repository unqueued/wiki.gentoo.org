<languages/>
<translate>
<!--T:29-->
{{InfoBox stack
|{{InfoBox github|rhinstaller/efibootmgr|header=true}}
}}

<!--T:1-->
{{Metadata|abstract=The efibootmgr application interacts with the UEFI firmware on the system, and is a popular tool to manipulate the EFI settings in order to create and manage boot entries that are capable of booting Linux (or other operating systems).}}

<!--T:2-->
The {{c|efibootmgr}} application interacts with the UEFI firmware on the system. It is a popular tool for manipulating the EFI settings in order to create and manage boot entries capable of booting Linux (or any other EFI operating system).

<!--T:30-->
The {{Package|sys-boot/efibootmgr}} application is '''not''' a bootloader. It is a tool that interacts with the EFI firmware of the system, which itself is acting as a bootloader. Using {{c|efibootmgr}} boot entries can be created, reshuffled, edited, and removed.

== Installation == <!--T:6-->

=== Kernel === <!--T:31-->

<!--T:32-->
<var>CONFIG_EFI_VARS</var> support needs to be enabled:

<!--T:33-->
{{KernelBox|title=Enable EFI stub support|1=
Firmware Drivers  --->
   EFI (Extensible Firmware Interface) Support  --->
       <*> EFI Variable Support via sysfs
}}

=== Emerge === <!--T:34-->

<!--T:7-->
The {{Package|sys-boot/efibootmgr}} package does not have any USE flags. All that is needed is to install it:

<!--T:8-->
{{Emerge|sys-boot/efibootmgr}}

== Configuration == <!--T:35-->

=== EFI vars === <!--T:36-->

<!--T:9-->
In order to successfully use {{c|efibootmgr}} the EFI variables filesystem must be accessible. This requires that the system has been booted in EFI mode (and not through the firmware's MBR mode) as otherwise the EFI variables themselves cannot be accessed. If the system is in MBR mode, reboot and do what is necessary in order to tell the system firmware to boot in EFI mode. Usually this involved either changing an option in the firmware's settings or selecting an EFI boot entry in the system's boot menu.

<!--T:37-->
When the system is in EFI mode, run the following command to check for the existence of [https://www.kernel.org/doc/Documentation/filesystems/efivarfs.txt efivarfs]:

<!--T:10-->
{{RootCmd|mount {{!}} grep efivars|output=<pre>
efivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)
</pre>}}

<!--T:11-->
If it is not mounted (it should be mounted through the {{Path|sysfs}} init script), it is possible to manually mount it using the following command:

<!--T:12-->
{{RootCmd|mount -t efivarfs efivars /sys/firmware/efi/efivars}}

== Preconditions ==

In an EFI System Partition (ESP) does not exist one needs to be created, see [[EFI System Partition]]

== Usage == <!--T:13-->

=== Listing boot entries === <!--T:14-->

<!--T:15-->
To list the current boot entries by using the <code>--verbose (-v)</code> option:

<!--T:16-->
{{RootCmd|efibootmgr -v|output=<pre>
BootCurrent: 0002
Timeout: 3 seconds
BootOrder: 0003,0003,0002,0000,0004
Boot0000* CD/DVD Drive  BIOS(3,0,00)
Boot0001* Hard Drive    BIOS(2,0,00)
Boot0002* Gentoo        HD(1,800,61800,6d98f360-cb3e-4727-8fed-5ce0c040365d)File(\EFI\boot\bootx64.efi)
Boot0003* Hard Drive    BIOS(2,0,00)P0: ST1500DM003-9YN16G
</pre>}}

=== Creating a boot entry === <!--T:17-->

<!--T:18-->
To create an EFI boot entry, a couple of arguments are passed to {{c|efibootmgr}}:

<!--T:19-->
* <code>--create (-c)</code> to create a new entry;
* <code>--part (-p)</code> followed by the partition number on which the [[EFI System Partition]] is hosted;
* <code>--disk (-d)</code> followed by the disk on which the EFI System Partition is hosted;
* <code>--label (-L)</code> followed by the label to use as the boot entry;
* <code>--loader (-l)</code> followed by the path of the EFI image to boot

<!--T:20-->
{{Important|The path of the EFI image to boot ''must'' use {{Key|\}} (backslash) instead of {{Key|/}} (forward slash) as path separator.}}

<!--T:21-->
For instance:

<!--T:22-->
{{RootCmd|efibootmgr -c -d /dev/sda -p 2 -L "Gentoo" -l "\efi\boot\bootx64.efi"}}

=== Deleting a boot entry === <!--T:23-->

<!--T:24-->
Before deleting an entry, first figure out what ID the entry has.

<!--T:25-->
To delete the Gentoo entry as shown above (which has ''Boot0002'' as the identifier), ask {{c|efibootmgr}} to delete the entry with id 2, passing the arguments <code>--bootnum (-b)</code> with the identifier, and <code>--delete-bootnum (-B)</code> to delete the entry:

<!--T:26-->
{{RootCmd|efibootmgr -b 2 -B}}

== Removal == <!--T:38-->

=== Unmerge === <!--T:39-->

<!--T:40-->
{{Unmerge|sys-boot/efibootmgr}}

== See also == <!--T:27-->

<!--T:28-->
* {{See also|rEFInd}} 
* [[EFI_stub_kernel|EFI stub kernel]] explains how to configure the Linux kernel to be able to be booted from EFI directly
* [[Handbook:AMD64/Installation/Bootloader#Alternative_2:_efibootmgr|Alternative 2: efibootmgr]] in the Gentoo Handbook

</translate>
