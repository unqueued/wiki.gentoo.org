<languages/>
<translate>

<!--T:1-->
{{Metadata|abstract=The efibootmgr application interacts with the UEFI firmware on the system, and is a popular tool to manipulate the EFI settings in order to create and manage boot entries that are capable of booting Linux (or other operating systems).}}

<!--T:2-->
The <tt>efibootmgr</tt> application interacts with the UEFI firmware on the system, and is a popular tool to manipulate the EFI settings in order to create and manage boot entries that are capable of booting Linux (or other operating systems).

<!--T:3-->
{{InfoBox stack
|{{InfoBox homepage|https://github.com/vathpela/efibootmgr|header=true}}
}}

== EFIbootmgr is not a boot loader == <!--T:4-->

<!--T:5-->
The {{Package|sys-boot/efibootmgr}} application is not a boot loader. It is a tool that interacts with the EFI firmware of the system, which itself is acting as a boot loader. With the <tt>efibootmgr</tt> application, boot entries can be created, reshuffled and updated.

== Configuration == <!--T:6-->

<!--T:7-->
The {{Package|sys-boot/efibootmgr}} application does not require any configuration. All that is needed is to install it.

<!--T:8-->
{{Emerge|sys-boot/efibootmgr}}

<!--T:9-->
However, in order to successfully use the <tt>efibootmgr</tt> application, the EFI variables file system must be accessible. This requires that the system is already booted with EFI (and not through the BIOS) as otherwise the EFI variables themselves are not accessible.

<!--T:10-->
{{RootCmd|mount {{!}} grep efivars|output=<pre>
efivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)
</pre>}}

<!--T:11-->
If it is not mounted yet (it should be mounted through the {{Path|sysfs}} init script), it is possible to manually mount it like so:

<!--T:12-->
{{RootCmd|mount -t efivars efivars /sys/firmware/efi/efivars}}

== Managing EFI boot entries == <!--T:13-->

=== Listing boot entries === <!--T:14-->

<!--T:15-->
To list the current boot entries, just use <kbd>efibootmgr</kbd>. Use the <kbd>--verbose (-v)</kbd> option to get some additional information:

<!--T:16-->
{{RootCmd|efibootmgr -v|output=<pre>
BootCurrent: 0002
Timeout: 3 seconds
BootOrder: 0003,0003,0002,0000,0004
Boot0000* CD/DVD Drive  BIOS(3,0,00)
Boot0001* Hard Drive    BIOS(2,0,00)
Boot0002* Gentoo        HD(1,800,61800,6d98f360-cb3e-4727-8fed-5ce0c040365d)File(\EFI\boot\bootx64.efi)
Boot0003* Hard Drive    BIOS(2,0,00)P0: ST1500DM003-9YN16G
</pre>}}

=== Creating a boot entry === <!--T:17-->

<!--T:18-->
To create an EFI boot entry, a couple of arguments are passed to <tt>efibootmgr</tt>:

<!--T:19-->
* <code>--create (-c)</code> to create a new entry
* <code>--part (-p)</code> followed by the partition number on which the EFI System Partition is hosted
* <code>--disk (-d)</code> followed by the disk on which the EFI System Partition is hosted
* <code>--label (-L)</code> followed by the label to use as the boot entry
* <code>--loader (-l)</code> followed by the path of the EFI image to boot

<!--T:20-->
{{Important|The path of the EFI image to boot must use {{Key|\}} instead of {{Key|/}} as path separator.}}

<!--T:21-->
For instance:

<!--T:22-->
{{RootCmd|efibootmgr -c -d /dev/sda -p 2 -L "Gentoo" -l "\efi\boot\bootx64.efi"}}

=== Deleting a boot entry === <!--T:23-->

<!--T:24-->
Before deleting an entry, first figure out what ID the entry has.

<!--T:25-->
To delete the Gentoo entry as shown above (which has ''Boot0002'' as the identifier), ask <tt>efibootmgr</tt> to delete the entry with id 2, passing the arguments <kbd>--bootnum (-b)</kbd> with the identifier, and <kbd>--delete-bootnum (-B)</kbd> to delete the entry:

<!--T:26-->
{{RootCmd|efibootmgr -b 2 -B}}

== See also == <!--T:27-->

<!--T:28-->
* [[EFI_stub_kernel|EFI stub kernel]] explains how to configure the Linux kernel to be able to be booted from EFI directly

</translate>
