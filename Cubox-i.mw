{{InfoBox stack
|{{InfoBox homepage|https://developer.solid-run.com/products/cubox-i/|header=true}}
|{{InfoBox wikipedia|CuBox}}
|[[File:cubox-i4-pro-1080.jpg|{{dev|nerdboy}}'s Cubox-i device.|right|text-top|thumb|alt=Image of Nerdboy's Cubox-i device.|312px]]
}}

This document [[Article description::describes how to install Gentoo on the [https://www.solid-run.com/ SolidRun] Cubox-i and HummingBoard.]]

== Prerequisites ==

'''Mandatory'''

* Cubox-i
** CuBox-i2ultra or CuBox-i4pro if the serial console is used. Otherwise a HDMI display and a USB keyboard.
* 4 GB+ SD card.
* Network cable during installation. WiFi can be enabled later.
* Linux computer with a cross compiler for ARM installed.
* {{package|dev-vcs/git}}

'''Optional'''

* [[Wikipedia:Trivial_File_Transfer_Protocol|TFTP]] server.
* {{Package|dev-embedded/u-boot-tools}}
* SolidRun [https://www.solid-run.com/downloads/ignition/ Ignition] image to test if the Cubox-i device is working with the serial console, or the connected display and keyboard. This will overwrite the U-Boot installation!

== Installation ==

The install consists of installing {{Package|sys-devel/crossdev}}, partitioning and formatting, the SD card. Copying over a stage3 tarball, configuring it so that it can boot and it can be accessed. Creating a kernel. Booting the kernel on the machine. Installing the kernel for an automatic boot. Continue a default Gentoo installation.

=== crossdev ===

[[crossdev]] is required to build [https://www.denx.de/wiki/U-Boot U-Boot] and the kernel on a desktop system.

Install crossdev:

{{Emerge|sys-devel/crossdev}}

Build a cross-compilation toolchain:

{{RootCmd|crossdev --stable --target armv7a-unknown-linux-gnueabihf}}

For more information, please refer to the [[Embedded_Handbook/General/Creating_a_cross-compiler|Creating a cross-compiler (Embedded Handbook)]] and [[Custom_repository#Crossdev|Custom repository]] articles.

=== U-Boot ===

==== Mainline ====

When the Cubox-i was released it had no mainline U-Boot support. Instead SolidRun maintained its own patched fork. Since v2017.01 mainline U-Boot works without any patches, so there is no longer a reason to use the SolidRun fork.

Setup the cross-compilation environment:

{{Cmd
|export ARCH{{=}}arm
|export CROSS_COMPILE{{=}}armv7a-unknown-linux-gnueabihf-
}}

Clone the U-Boot Git repository:

{{Cmd
|git clone <nowiki>https://gitlab.denx.de/u-boot/u-boot.git</nowiki>
|cd u-boot
|git checkout v2019.04
}}

Mainline U-Boot has ''no'' {{Path|uEnv.txt}} support, although it does have {{Path|extlinux.conf}} support which is just as easy if not easier to use. If {{Path|uEnv.txt}} support is still desired, apply the patch by {{Dev|nerdboy}}.

{{Note|The patch applies against U-Boot Git branch v2017.11. If that branch is too old, consider using {{Path|extlinux.conf}} or the legacy {{Path|boot.scr}} instead.}}

{{Cmd
|git checkout v2017.11
|wget <nowiki>https://dev.gentoo.org/~nerdboy/files/0001-cubox4i-uEnv.txt-bootz-n-fixes-after-rcn-2017.11.patch</nowiki>
|patch -p1 < 0001-cubox4i-uEnv.txt-bootz-n-fixes-after-rcn-2017.11.patch
}}

Build U-Boot:

{{Cmd
|make mx6cuboxi_defconfig
|make
}}

A successful build will create two files in the source tree directory, {{Path|SPL}} and {{Path|u-boot.img}}

* {{Path|SPL}} is the actual machine detection and initialization and ''must'' be flashed at offset 1 KByte of the boot SD card.
* {{Path|u-boot.img}} is the second stage bootloader; it can be flashed at offset 69 KByte of the boot SD card;

{{RootCmd
|dd if{{=}}SPL of{{=}}/dev/sdX bs{{=}}1K seek{{=}}1
|dd if{{=}}u-boot.img of{{=}}/dev/sdX bs{{=}}1K seek{{=}}69
}}

==== SolidRun ====

SolidRun provides a custom U-Boot, this is a fork from the mainline and patched by Jon Nettelton. The main features are the addition of console on HDMI support, and SPL support for Cubox-i. For more information, please refer to the [https://developer.solid-run.com/knowledge-base/i-mx6-u-boot/ SolidRun Knowledge Base].

Setup the cross-compilation environment:

{{Cmd
|export ARCH{{=}}arm
|export CROSS_COMPILE{{=}}armv7a-unknown-linux-gnueabihf-
}}

Clone the U-Boot Git repository:

{{Cmd
|git clone <nowiki>https://github.com/SolidRun/u-boot-imx6.git</nowiki>
|cd u-boot-imx6
}}

Build U-Boot:

{{Cmd
|make mx6_cubox-i_config
|make
}}

A successful build will create two files in the source tree directory, {{Path|SPL}} and {{Path|u-boot.img}}

* {{Path|SPL}} is the actual machine detection and initialization and ''must'' be written at offset 1 KByte of the boot SD card.
* {{Path|u-boot.img}} is the second stage bootloader; it can be written at offset 69 KByte of the boot SD card; alternatively it can be placed as-is on the first partition of the SD card if the partition has a FAT filesystem.

{{Note|Older versions of SolidRun's U-Boot wrote {{Path|u-boot.img}} at offset 42 KByte. SolidRun has updated their fork and now uses the same 69 KByte offset as mainline.}}

{{RootCmd
|dd if{{=}}SPL of{{=}}/dev/sdX bs{{=}}1K seek{{=}}1
|dd if{{=}}u-boot.img of{{=}}/dev/sdX bs{{=}}1K seek{{=}}69
}}

=== Serial console ===

The Cubox-i2ex, CuBox-i2Ultra and CubBox-i4Pro have serial console support via a FTDI FT230X USB to UART serial interface. This allows connecting the Cubox-i directly to another computer. Alternatively the Cubox-i can be connected to a HDMI display and USB keyboard.

The computer connecting to the Cubox-i will need to have the following kernel configuration options enabled:

{{KernelBox|title=Enabling serial console support|1=<nowiki />
    Device Drivers --->
      [*] USB support --->
            <*>   USB Serial Converter support --->
                    <*>   USB FTDI Single Port Serial Driver
}}

Connecting to the serial console requires an application such as {{Package|app-misc/screen}} or {{Package|net-dialup/minicom}}. For more information, please refer to the [https://developer.solid-run.com/knowledge-base/serial-console-usb-uart/ SolidRun Knowledge Base].

=== Preparing the SD card ===

{| class="table table-condensed table-striped"
|-
! Partition
! Filesystem
! Size
! Description
|-
| {{Path|/dev/mmcblk0p1}}
| ext2
| 100 MB
| Boot partition
|-
| {{Path|/dev/mmcblk0p2}}
| ext4
| Rest of SD card
| Root partition
|}

{{Note|With kernel 4.9.x or later use {{Path|/dev/mmcblk1}} instead of {{Path|/dev/mmcblk0}} (i.e. {{Path|/dev/mmcblk1p1}} will be the first partition on the SD card). The device names have changed to to accommodate another potential SD card.}}

A single partition scheme can be used with mainline U-Boot when using an ext2/3/4 formatted root partition. However when using a Btrfs formatted root partition (or other unsupported filesystem), an ext2/3/4 or FAT32 formatted boot partition is required.

==== Extract stage 3 ====

Get the latest [http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv7a_hardfp/ stage 3] and extract it to the root partition:

{{RootCmd
|cd /mnt/sdcard-root
|tar xvjpf /path/to/download/stage3-*.tar.bz2
}}

==== Edit /etc/fstab ====

Edit on the root partition on the SD card {{Path|/etc/fstab}}:

{{FileBox|filename=/etc/fstab|lang=text|1=
/dev/mmcblk0p1          /boot           ext2            noauto,noatime  1 2
/dev/mmcblk0p2          /               ext4            noatime         0 1

#/dev/SWAP              none            swap            sw              0 0
#/dev/cdrom             /mnt/cdrom      auto            noauto,ro       0 0
#/dev/fd0               /mnt/floppy     auto            noauto          0 0
}}

==== Set the root password ====

To be able to login later we need to set a root password, we create password hash and edit it to the {{Path|/etc/shadow}}.

{{RootCmd
|openssl passwd -1
|nano -w /mnt/sdcard-root/etc/shadow
}}

Replace the star or current hash of the root user with the output from the command above.

==== Enable the serial console ====

To have a serial console available after booting, change the <code>s0</code> line to the following:

{{FileBox|filename=/mnt/sdcard-root/etc/inittab|lang=text|1=
s0:12345:respawn:/sbin/agetty -L 115200 ttymxc0 vt100
}}

=== Kernel ===

The mainline kernel 3.19+ and {{Package|sys-kernel/gentoo-sources}} has great support for Cubox-i devices, complete with working graphics and networking.

Create the install directories:

{{RootCmd
|mkdir -p /var/build/cubox-i/root/boot
}}

{{Note|The install directories are where the kernel, modules and devices trees will be installed. In this article {{Path|/var/build/cubox-i/root}} is used as an intermediate root directory. Any directory can be used, even the actual root directory of the device.}}

Setup the cross-compilation environment:

{{RootCmd
|export ARCH{{=}}"arm"
|export CROSS_COMPILE{{=}}"armv7a-hardfloat-linux-gnueabi-"
|export INSTALL_PATH{{=}}"/var/build/cubox-i/root/boot"
|export INSTALL_MOD_PATH{{=}}"/var/build/cubox-i/root"
}}

Configure the kernel:

{{RootCmd
|cd /path/to/kernel/source
|make imx_v6_v7_defconfig
|make menuconfig
}}

Build and install the kernel (zImage):

{{RootCmd
|make zImage
|make zinstall
}}

The kernel is located at {{Path|arch/arm/boot/zImage}}. The kernel will be installed at {{Path|/var/build/cubox-i/root/boot/vmlinuz-<kernel-version>}}

Build and install the kernel modules:

{{RootCmd
|make modules
|make modules_install
}}

The kernel modules will be installed at {{Path|/var/build/cubox-i/root/lib/modules/<kernel-version>/}}

Build and install the device trees:

{{RootCmd
|make dtbs
|make dtbs_install
}}

The device trees are located at {{Path|arch/arm/boot/dts/}}. The device trees will be installed at {{Path|/var/build/cubox-i/root/boot/dtbs/<kernel-version>/}}

{{Note|The above will build and install device trees for all i.MX devices. It is possible to build a device tree for a specific device only. For example, run {{c|make imx6q-cubox-i.dtb}} to build the device tree for a Cubox-i4Pro. The device tree will be located at {{Path|arch/arm/boot/dts/imx6q-cubox-i.dtb}}, and needs to be copied manually to {{Path|/var/build/cubox-i/root/boot/dtbs/<kernel-version>/}}}}

The kernel, modules and devices trees can now be installed to the actual root directory of the device:

{{RootCmd
|cp -r /var/build/cubox-i/root/ /path/to/actual/root
}}

==== Headers ====

To compile certain applications like Kodi that have modified/additional codecs you need to expose the patched  kernel headers. Fortunately there is a script for that:

{{RootCmd|make headers_install ARCH{{=}}arm INSTALL_HDR_PATH{{=}}/usr/local/include}}

If you install them into {{Path|/usr/local/include}} then you don't overwrite the ones provided by the Gentoo package.

==== Firmware ====

===== Video Processing Unit =====

The i.MX6 SoC contains a Video Processing Unit (VPU) that allows video decoding and encoding to be done in hardware. The VPU is supported by the mainline kernel but requires firmware to operate. The following table lists the VPU firmware required by each Cubox-i device.

{| class="table table-condensed table-striped"
|-
! Device
! SoC
! Firmware
|-
| CuBox-i1
| i.MX6 Solo
| {{Path|vpu_fw_imx6d.bin}}
|-
| CuBox-i2
| i.MX6 Dual Lite
| {{Path|vpu_fw_imx6d.bin}}
|-
| CuBox i2eX
| i.MX6 Dual
| {{Path|vpu_fw_imx6q.bin}}
|-
| CuBox-i4Pro
| i.MX6 Quad
| {{Path|vpu_fw_imx6q.bin}}
|}

Instructions for obtaining the VPU firmware can be found at the [https://github.com/pH5/coda-bits coda-bits] GitHub repository.

===== WiFi =====

The following kernel configuration options are required for WiFi support. These options should already be enabled if the kernel was configured with <code>imx_v6_v7_defconfig</code>.

{{KernelBox|title=Enabling WiFi support|1=<nowiki />
    Device Drivers --->
      [*] Network device support --->
            [*]   Wireless LAN --->
                    [*]   Broadcom devices
                    <*>     Broadcom FullMAC WLAN driver 
                    [*]     SDIO bus interface support for FullMAC driver
}}

The WiFi driver requires firmware to operate, which can be obtained directly from the Linux firmware [https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/brcm repository] or the {{Package|sys-kernel/linux-firmware}} package. The required firmware can be determined by examining the {{c|dmesg}} output of a running Cubox-i device:

{{RootCmd|dmesg {{!}} grep -i brcm|output=<pre>
[    2.981734] brcmfmac: brcmf_fw_map_chip_to_name: using brcm/brcmfmac4330-sdio.bin for chip 0x004330(17200) rev 0x000004
[    2.983623] brcmfmac mmc0:0001:1: Direct firmware load for brcm/brcmfmac4330-sdio.bin failed with error -2
</pre>
}}

The above output from a Cubox-i4Pro indicates that {{Path|brcmfmac4330-sdio.bin}} is the firmware required by the driver. This may be differ depending on the Cubox-i model.

The firmware also requires NVRAM calibration data, which can be obtained from the Freescale (now NXP) [https://github.com/Freescale/meta-freescale-3rdparty/tree/master/recipes-bsp/broadcom-nvram-config/files/cubox-i repository]. The NVRAM calibration data needs to have the correct WiFi regulatory domain set. This can be done by setting the value of the <code>ccode</code> parameter to the [https://git.kernel.org/pub/scm/linux/kernel/git/sforshee/wireless-regdb.git/tree/db.txt country code] in which the device will be operating in. For example, to set the WiFi regulatory domain for the United States:

{{FileBox|filename=brcmfmac4329-sdio.txt or brcmfmac4330-sdio.txt|1=
ccode=US
}}

The firmware and NVRAM calibration data need to be placed in the {{Path|/lib/firmware/brcm}} directory.

=== Bootloader ===

U-Boot will normally wait three seconds for user input before attempting to boot. If user input is received, the boot sequence is interrupted and an interactive shell is started. If three seconds pass with no user input, U-Boot will look for an environment configuration on the first partition. If no valid environment configuration is found, U-Boot will display ''*** Warning - bad CRC, using default environment'', and will then continue with the default environment configuration. This is where mainline U-Boot and SolidRun U-Boot differ. Mainline supports {{Path|boot.scr}} and extlinux.conf on the first partition, while SolidRun also supports {{Path|uEnv.txt}}.

==== Mainline ====

===== extlinux.conf =====

U-Boot supports [[Syslinux]] style boot configuration. U-Boot only borrows a small subset of the Syslinux [https://wiki.syslinux.org/wiki/index.php?title=Config configuration] options, and does not require Syslinux itself. This is much simpler than using {{Path|boot.scr}} or applying patches to add {{Path|uEnv.txt}} support.

Create the {{Path|extlinux}} directory:

{{RootCmd|mkdir /boot/extlinux}}

Create the following configuration and adjust accordingly:

{{FileBox|filename=/boot/extlinux/extlinux.conf|1=
PROMPT 1
TIMEOUT 50
DEFAULT linux

LABEL linux
KERNEL /vmlinuz-4.19.0
FDTDIR /dtbs/4.19.0
APPEND root=/dev/mmcblk1p2 rootfstype=ext4 video=mxcfb0:dev=hdmi,1920x1080M@60,if=RGB24,bpp=32 console=ttymxc0,115200n8 console=tty1 consoleblank=0
}}

{{Note|The <code>KERNEL</code> and <code>FDTDIR</code> paths are relative to the root of the boot partition. If a boot partition is not used, adjust accordingly.}}

===== uEnv.txt =====

If the {{Path|uEnv.txt}} patch was applied when building U-Boot, create {{Path|uEnv.txt}} in the boot partition or directory:

{{FileBox|filename=uEnv.txt|lang=text|1=
uname_r=4.10.5-armv7-x1

cmdline=video=HDMI-A-1:1024x768 net.ifnames=0 cma=384M console=tty1

fdtfile=imx6q-cubox-i.dtb
}}

Adjust the video argument to match the display.

==== SolidRun ====

===== uEnv.txt =====

If you use the Soldidrun U-Boot from this wiki you can use the default settings and no direct modification of the U-Boot configuration might be necessary. If the first partition of the SD card is formatted with ext2 or fat it will read the the file {{Path|uEnv.txt}} with the configuration from it.

{{FileBox|filename=uEnv.txt|lang=text|1=
bootfile=zImage
mmcargs=setenv bootargs root=/dev/mmcblk0p2 rootfstype=ext4 rootwait rootflags=compress console=ttymxc0,115200n8 video=1920x1080M@60 init=/sbin/init
}}

These two lines should be enough to boot the kernel. The U-Boot from this wiki can boot a zImage directly (no conversion to uImage necessary). The zImage and the *.dtb file have to reside in the root folder of this partition next to the {{Path|uEnv.txt}}.
The second line contains the kernelflags (for example the root).

If you have no console output on your screen during boot, try <code>console=tty1</code>

{{Note|With 4.9.x kernel or later use {{Path|/dev/mmcblk1}} instead of {{Path|/dev/mmcblk0}}. In the above example, change the <code>root{{=}}</code> line to <code>root{{=}}/dev/mmcblk1p2</code> to inform the kernel that the root partition is the 2nd partition on the {{Path|/dev/mmcblk1}} device.}}

==== Interactive ====

Connect to your Cubox-i with a serial console (or with a keyboard and a display) and interrupt the U-Boot bootloader with {{Key|Enter}} and type the following commands.

<pre>
setenv ipaddr 192.168.0.<CUBOXI-IP>
setenv serverip 192.168.0.<TFTP-IP>
setenv bootargs root=/dev/mmcblk0p2 rootfstype=ext4 ro rootwait console=ttymxc0,115200
tftpboot 0x10800000 uimage
bootm 0x10800000
</pre>

This should boot you in your Cubox-i installation and you should be able to login as root with your password. From here you can continue with a default Gentoo installation. To make this boot configuration permanent follow the next step "Default".

==== Environment ====

In the following we will make the settings permanent. The uImage file is copied to the boot partition. The first line contains the settings for loading the kernel into memory. The second holds the arguments for the kernel. The third one is the code to execute the kernel.

The bootcmd is called by default and executes theses three steps in order. The last line makes these variables permanent in the U-Boot settings.

<pre>
setenv mybootload ext2load mmc 0:1 0x10800000 /uimage
setenv mybootset setenv bootargs root=/dev/mmcblk0p2 rootfstype=ext4 ro rootwait console=ttymxc0,115200
setenv mybootstart bootm 0x10800000
setenv bootcmd run mybootset mybootload mybootstart
saveenv
</pre>

==== uEnv ====

U-Boot can also read configuration values from a file. This way the boot process can be modified without going into the U-Boot console and the settings are permanent as well. The following script is modified from the original mini-image used for the installation. 

<pre>
setenv gsetmmc 'root="root=/dev/mmcblk${rootunit}p$rootpart rootfstype=$rootfs ro rootwait"' 
setenv gconsole console=ttymxc0,115200 consoleblank=0
setenv gbootextra init=/init
setenv grootflags ""
setenv gvideo mxcfb0:dev=hdmi,1920x1080M@60,if=RGB24 dmfc=3
setenv gbootpreset 'bootdev=mmc; bootunit=0; bootpart=1; bootfs=ext2; envfile=uEnv.txt; bootroot=; bootfile=uImage'
setenv grootpreset 'rootunit=0; rootpart=2; rootfs=ext4'
setenv gsetenvscript setenv gbootenv "\'run gset\${bootdev}; setenv bootargs \$root \$gvideo \$gconsole \$gbootextra \$grootflags $end\'"
setenv gloaduenv 'if ${bootfs}load $bootdev $bootunit:$bootpart $loadaddr $envfile; then env import -t $loadaddr $filesize; fi'
setenv grootpresetup 'bootrun=bootm; loadfile=$bootfile; rootdev=$bootdev; rootunit=$bootunit; rootpart=$rootpart; rootfs=$rootfs'
setenv gbootload '${bootfs}load $bootdev $bootunit:$bootpart $loadaddr $bootroot/$loadfile'
setenv gbootstart '$bootrun'
setenv bootcmd run gbootpreset grootpreset gsetenvscript gloaduenv grootpresetup gbootenv gbootload gbootstart
</pre>

In the minimal [https://github.com/Freescale/meta-fsl-arm-extra/blob/master/recipes-bsp/u-boot/u-boot-cubox-i/uEnv.txt uEnv.txt] is enough to boot a stock ext4 system on the SD card. To boot from USB you must use <code>rootwait</code> or <code>rootdelay</code>.

=== Continue Gentoo install ===

Steps that should be done right after the installation:

# setup network
# set date
# emerge-webrsync
# emerge ntpd
# /etc/init.d/sshd

[https://wiki.gentoo.org/wiki/Handbook:Main_Page Gentoo ARM Handbook] (currently unavaliable)

=== Graphics drivers (FOSS) ===

Although it's not fully integrated yet, there is useful 2D/3D functionality in the latest FOSS drivers, some of which were only recently added to the [https://github.com/gentoo/arm Gentoo ARM overlay].

* mesa - the latest releases enable vivante/imx (be sure and enable gallium/glx/dri3 in mesa)
* libdrm - enables "experimental" vivante/etnaviv api
* xf86-video-armada - builds multiple drivers, depends on various versions of dependencies below
* libdrm-armada - gpu shim
* libetnaviv (latest is header-only, older is a library)
* galcore-headers - public "etnaviv" interface

Note: the packages in the main portage tree call the imx VIDEO_CARD "vivante" but in the above Xorg drivers vivante refers to the legacy GAL drivers which are disabled (the FOSS pieces should probably all be called etnaviv). To try the FOSS graphics stack, you should set <code>VIDEO_CARDS="imx vivante"</code> in your {{Path|make.conf}} file and add the ARM overlay.

So far the imx/armada drivers seem to work for 2D in X but the log shows an error initializing the etnadrm_gpu driver and claims to fall back to swrast 3D. Still, with dri3 and vivante enabled glxgears gets over 110 fps in Xorg, so there is that... (if you only have dri2 enabled then it really is swrast @ 22 fps)


=== Graphics / Video driver (firmware) ===

The hardware units have support for decoding certain codecs with additional firmware: https://github.com/pH5/coda-bits
More about this can be found here: https://imxdev.gitlab.io/tutorial/Decoding_video_with_a_mainline_kernel_on_i.MX6/

=== eSATA ===

In addition to enabling the Freescale PCIe driver and related SD support, if you want to connect an external eSATA device, there are two main "issues" to keep in mind:

* Use a separate USB power source, since there is no power provided over eSATA (and the onboard USB is not enough)
* You must add <code>ahci_imx.hotplug=1</code> to the kernel command line in {{Path|uEnvt.txt}} (or your {{Path|boot.scr}})

== Applications ==

=== Kodi ===

The live ebuild of Kodi (v18) can by now compiled without additional modifications.

If you want to use the etnaviv driver make sure to have a kernel with the VPU firmware loaded.

If you have docker running you can use the image https://hub.docker.com/r/slangenmaier/kodi/ to test it.

== External resources ==

* [https://developer.solid-run.com/knowledge-base/cubox-i-getting-started/ SolidRun Knowledge Base - CuBox-i – Getting Started]
* [https://developer.solid-run.com/knowledge-base/flashing-an-sd-card/ SolidRun Knowledge Base - Flashing an SD card]
* [https://developer.solid-run.com/knowledge-base/i-mx6-kernel/ SolidRun Knowledge Base - i.MX6 Kernel]
* [https://developer.solid-run.com/knowledge-base/serial-console-usb-uart/ SolidRun Knowledge Base - Serial-Console USB->UART]
* [https://wireless.wiki.kernel.org/en/users/Drivers/brcm80211#firmware_installation1 Linux Wireless Wiki - Broadcom brcmfmac Firmware]
* [https://community.nxp.com/thread/308940 NXP Community - HDMI goes to sleep]
* [https://github.com/archlinuxarm/PKGBUILDs/tree/master/alarm/uboot-cubox-i U-Boot mainline configuration]
* [https://www.digikey.com/eewiki/display/linuxonarm/Wandboard Wandboard]

== Open questions ==

* open-source hardware-accelerated video driver 
** [https://github.com/etnaviv/etna_viv reverse engineered drivers]

[[Category:Embedded systems]]
