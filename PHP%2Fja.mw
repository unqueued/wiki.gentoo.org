<languages />
<div class="mw-translate-fuzzy">
{{InfoBox stack
|{{InfoBox homepage|http://www.php.net|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox ohloh}}
}}
</div>

'''PHP'''は、動的なWebページを生成する汎用のサーバー側スクリプト言語です。

== インストール ==

=== USE フラグ ===

The most important USE flags of the PHP package, the SAPI (Server API) USE flags, are {{c|apache2}}, {{c|cgi}}, and {{c|fpm}}. Alongside these flags, there is an elaborate list of flags to enable various features of the PHP interpreter:

{{USEflag|package=dev-lang/php}}

<div class="mw-translate-fuzzy">
デフォルトでは、ebuildは開発用の{{Path|php.ini}}バージョンをインストールします。 より厳密なセキュリティ設定がありますが、アプリケーションをデバッグするのが難しい製品バージョンをインストールするには、{{Path|make.conf}}に次の行を追加します:
</div>

=== 拡張 ===

To install extensions, first decide which versions of PHP to compile the extensions for. This is done by setting the <var>PHP_TARGETS</var> variable:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
PHP_TARGETS="php5-6"
}}

More than one version can be defined; just add in the additional versions separated by a space. Note that the php slot is named "5.6" and the corresponding <var>PHP_TARGETS</var> value is <code>php5-6</code>. This is due to current restrictions on USE names.

=== Emerge ===

上記のUSEフラグ設定を行った後、変更を有効にするためにシステムを更新する必要があります:

{{Emerge|params+=--update --changed-use --deep|@world}}

== Running multiple versions of PHP ==

One of the great advantages of using Gentoo for PHP development is the version slotting. It is very simple to swap between multiple versions of PHP as well as run multiple versions simultaneously. This is all done with the {{c|eselect}} command provided by the {{Package|app-eselect/eselect-php}} package which should get emerged in automatically by installing PHP.

For example, selecting different versions of PHP can allow a system to run PHP 7.0 for the cli SAPI but PHP 5.6 for the system's web server. It also allows system administrators or application developers to quickly test an application on different versions of PHP.

To list the available versions for the '''cli''' SAPI module use the following syntax:

{{RootCmd|eselect php list cli|output=<pre>
 [1]   php5.5 
 [2]   php5.6 *   
 [3]   php7.0
</pre>}}

The <code>*</code> (asterisk) marks current active version for the selected module. To check the other SAPIs simply replace <code>cli</code> with <code>fpm</code>,<code>cgi</code> or <code>apache2</code> modules.

To swap versions, use:

{{RootCmd|eselect php set cli 3}}

The number <code>3</code> in this example corresponds to the number in the output of the <code>list</code> sub-command used above. PHP version 7.0 is now used for the command-line:

{{RootCmd|php -v|output=<pre>
PHP 7.0.10-pl0-gentoo (cli) (built: Aug 23 2016 12:38:44) ( NTS )
</pre>}}

== 設定 ==

The PHP configuration is at {{Path|/etc/php}}, which contains one subdirectory for each Server API (SAPI) and for each PHP version. For instance, configuration files for the PHP-5.6 apache2 SAPI are installed in {{Path|/etc/php/apache2-php5.6}}.

=== ウェブサーバ ===

PHPをサーバ側で使用するには、WebサーバをインストールしてPHPを使用するように設定する必要があります。 数多くの一般的なWebサーバーが次に簡単に触れられます。

==== Nginx ====

Simply emerge [[Nginx|nginx]] to install it:

{{Emerge|www-servers/nginx}}

{{Important|If custom <var>NGINX_MODULES_HTTP</var> values are set in {{Path|make.conf}}, make sure that the <code>fastcgi</code> module is enabled.}}

Once Nginx has been installed, modify the server section of {{Path|/etc/nginx/nginx.conf}} to look something like this: 

{{FileBox|filename=/etc/nginx/nginx.conf|title=Part of the nginx configuration to enable PHP through FastCGI|1=
        server {
                listen 127.0.0.1;
                server_name localhost;
 
                access_log /var/log/nginx/localhost.access_log main;
                error_log /var/log/nginx/localhost.error_log info;
 
                root /var/www/localhost/htdocs;
 
                location ~ \.php$ {
                        try_files $uri $uri/ =404;
                        fastcgi_split_path_info ^(.+\.php)(/.+)$;
                        fastcgi_pass 127.0.0.1:9000;
                        include fastcgi.conf;
                }
        }
}}

Now start the related services to have a working site. The {{Path|php-fpm}} init script starts the PHP FastCGI Process Manager. FastCGI allows web servers to offload the PHP calculations to this process manager.

When running OpenRC as the service manager:

<div class="mw-translate-fuzzy">
{{RootCmd
|service nginx start
|service php-fpm start
}}
</div>

For systemd:

{{RootCmd
|systemctl start nginx
|systemctl start php-fpm@7.2
}}

{{Note|The version number after the <code>php-fpm</code> service name will change based on the available version of PHP. Adjust as appropriate.}}

==== lighttpd ====

{{Warning|Do not enable the <code>php</code> USE flag for {{Package|www-servers/lighttpd}}. It could actually break the build.}}

Make sure that lighttpd is built with support for <code>fastcgi</code> and that the <code>php</code> USE flag is disabled:

{{FileBox|filename=/etc/portage/package.use|1=
www-servers/lighttpd fastcgi -php
}}

Lighttpd ships with a default FastCGI config file, but unfortunately, it is written to work with the old PHP FCGI SAPI only, instead of a general FCGI setup. Since the <code>php</code> USE flag has been disabled, it will not be included, and rightly so. However it does provide a good foundation for a configuration file that can be used with FPM. 

Edit {{Path|/etc/lighttpd/mod_fastcgi.conf}} to look something like this: 

{{FileBox|filename=/etc/lighttpd/mod_fastcgi.conf|title=Enable FastCGI on lighttpd|lang=lua|1=
server.modules += ("mod_fastcgi")
fastcgi.server = ( ".php" =>
  ( "localhost" =>
    (
      "host" => "127.0.0.1",
      "port" => "9000"
    )
  )
)
}}

Note the <code>host</code> and <code>port</code> parts. 

Since Gentoo ships with a working {{Path|php-fpm.ini}} file, located in {{Path|/etc/php/fpm-php5/php-fpm.ini}}, and init script, starting the services is all that is needed: 

{{RootCmd
|/etc/init.d/php-fpm start
|/etc/init.d/lighttpd start
}}

==== Apache (mod_php) ====

To configure Apache to load the PHP5 module (mod_php), add <code>-D PHP</code> to <var>APACHE2_OPTS</var> variable in {{Path|/etc/conf.d/apache2}}. Users might remember that previously, the PHP version had to be added as well (like <code>-D PHP5</code>). However, since {{Package|app-eselect/eselect-php}} version 0.8.1, the variable is changed to just <code>-D PHP</code> to allow future major versions to be easily integrated.

{{FileBox|filename=/etc/conf.d/apache2|title=Configure Apache to load mod_php|lang=bash|1=
## (settings for PHP5 and above)
APACHE2_OPTS="-D PHP"
}}

Make sure that PHP is built with the <code>apache2</code> USE flag.

If for some reason the system is missing the PHP module integration file {{Path|/etc/apache2/modules.d/70_mod_php.conf}}, currently provided by {{Package|app-eselect/eselect-php}} when installed with <code>apache2</code> USE flag set, manually insert it. Its current content is displayed below.

{{FileBox|filename=/etc/apache2/modules.d/70_mod_php.conf|lang=apache|1=
<IfDefine PHP>
	# The mod_php.so symlink is controlled by
	# eselect-php. However, the module name changed from
	# php5_module to php7_module so we can't blindly load whatever
	# is there. Instead we let eselect-php manage a small
	# configuration file that loads the appropriate module.
	#
	# This is relative to ServerRoot (see httpd.conf).
	Include ../../../var/lib/eselect-php/mod_php.conf
 
	# Tell apache that mod_php should handle PHP files.
	#
	# NOTE: Avoiding AddHandler/AddType for security (bug
	# #538822). Please read the related news item!
	<FilesMatch "\.(php{{!}}php[57]{{!}}phtml)$">
		SetHandler application/x-httpd-php
	</FilesMatch>
 
	# PHP source files which are meant to be displayed as
	# syntax-highlighted source code.
	<FilesMatch "\.phps$">
		SetHandler application/x-httpd-php-source
	</FilesMatch>
 
	DirectoryIndex index.php index.phtml
</IfDefine>}}

Although multiple PHP versions can be installed on a system, Apache can only use a single PHP version with mod_php. Support for multiple PHP versions on Apache is available using fpm. The {{c|eselect php}} command is used to switch between active mod PHP versions.

== 参考 ==

* [[PHP/Upgrading_to_PHP_5.6|Upgrading to PHP 5.6]], guide to upgrade older installations to 5.6
* [[PHP/Upgrading_to_PHP_7.1|Upgrading to PHP 7.1]], guide to upgrade older installations to 7.1
* [[Apache#Enabling_PHP_support|Enabling PHP support]] in the Apache article

[[Category:Programming language]]
