This page is designed to describe the maintenance tasks to consider when working on Munin.

== Source code repository ==

Upstream moved their main source repository to [https://github.com/munin-monitoring/munin/ GitHub] which makes maintenance much simpler. All the patching is handled on GitHub as well, in the [https://github.com/gentoo/munin Gentoo Linux fork].

For each release that needs to be patched, a new Gentoo branch is created starting from the upstream branch

{{Cmd
|git clone git://github.com/munin-monitoring/munin.git
|cd munin
|git remote add gentoo git@github.com:gentoo/munin.git
|git checkout -b 2.0.3-gentoo 2.0.3
|prompt=$}}

At this point it's possible to either use '''git cherry-pick''' to bring in the patches committed upstream, or commit new changes to send upstream so that they can be merged by the developers.

Once the patches are in the branch you can then use the '''git''' commands to create a patchset tarball and upload it to the '''dev.gentoo.org''' space. As of July 2012, Diego (Flameeyes) is providing access to his webspace at [http://dev.gentoo.org/~flameeyes/munin/] for patchset storage.

{{Cmd
|cd munin
|rm -rf patches
|mkdir patches && cd patches
|git format-patch 2.0.3.. # use the tag the current branch refers to
|cd ..
|tar Jcf munin-2.0.3-patches-1.tar.xz patches/*.patch # make sure to update the patchset number
|scp munin-2.0.3-patches-1.tar.xz dev.gentoo.org:~flameeyes/public_html/munin/
|git tag 2.0.3-gentoo-1
|git push gentoo --tags && git push gentoo 2.0.3-gentoo
|prompt=$}}

Using this method is actually possible to keep '''files/''' pretty empty (with only the extra configuration files), which is good as users don't have to put up with a long sync time for packages they don't use.
