<languages />

<div class="mw-translate-fuzzy">
{{Metadata|abstract=Dieser Artikel beschreibt die Schritte, auf einen neuen Kernel zu aktualisieren.}}
</div>

<div class="mw-translate-fuzzy">
Dieser Artikel beschreibt die Schritte, um auf einen neuen [[Special:MyLanguage/Kernel|Kernel]] zu aktualisieren.
</div>

<div class="mw-translate-fuzzy">
== Installation und Nutzung eines neuen Kernel ==
</div>

<div class="mw-translate-fuzzy">
Ein Kernel Upgrade ist vermutlich eine gute Idee, wenn Kernelquellen installiert werden. Neue Kernelquellen werden manchmal bei der Aktualisierung des Systems durch die Ausführung von <tt>emerge -a --update --deep --with-bdeps=y --newuse @world</tt> installiert, oder selbstverständlich wenn man sie direkt installiert.
</div>

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse @world}}

Of course, they can be installed directly using the next command (replace ''gentoo-sources'' with whatever version of the kernel that is in-use):

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse sys-kernel/gentoo-sources}}

Die bloße Installation neuer Kernel Sourcen liefert dem Nutzer keinen neuen Kernel. Es ist darüber hinaus erforderlich einen neuen Kernel auf Grundlage der neuen Sourcen zu bauen (make), zu installieren (install) und anschließend das System neu zu starten, um wirklich den neuen Kernel zu verwenden.

<div class="mw-translate-fuzzy">
Einen neuen Kernel aus den neuen Sourcen zu bauen ist im Grunde der gleiche Vorgang wie der Bau eines Kernel bei der Installation des Systems. Der Unterschied besteht darin, dass man die Konfiguration des alten Kernel zur Erstellung der Konfiguration des neuen Kernel nutzen kann. Die Verwendung der alten Konfiguration erspart es dem Nutzer sich erneut mit allen Kernel-Optionen befassen zu müssen. (Wie es bei der bloßen Verwendung von <tt>make menuconfig</tt> notwendig wäre.)
</div>

<div class="mw-translate-fuzzy">
Die Konfiguration des Kernel wird in einer Datei mit dem Namen {{Path|.config}} im Verzeichnis zusammen mit den Kernel Sourcen gespeichert. Ein neuer Kernel kann Optionen oder Eigenschaften besitzen die der alte Kernel noch nicht hat, oder er kann eine Eigenschaft oder Option nicht mehr haben die der alte Kernel immer noch hat. Die Kernel-Konfiguration gibt an, ob die Eigenschaften und Optionen eines Kernel zu aktiviert sind oder nicht. Vielleicht integriert im Kernel oder als Module gebaut, die auf Verlangen in den laufenden Kernel geladen werden können. Daher kann die Konfigurationsdatei des neuen Kernel neue Einträge besitzen, die die alte nicht hatte und sie könnte andere Einträge nicht mehr haben, die in der Konfiguration des alten Kernel vorhanden sind.
</div>

Um mit solchen Änderungen der Konfigurationsdatei umzugehen, muss die Konfigurationsdatei des alten Kernel in eine Konfiguration umgewandelt werden, die mit dem neuen Kernel verwendet werden kann. Dieser Artikel zeigt, wie man mit der Umwandlung der Konfigurationsdatei des alten Kernel aus neuen Kernel Sourcen einen neuen Kernel erzeugt.

<div class="mw-translate-fuzzy">
== Backup der aktuellen Kernel-Konfiguration ==
</div>

Es ist klug eine Sicherung der Kernel-Konfiguration zu erstellen, so dass die vorigen Konfiguration nicht verloren sind. Immerhin verwenden viele Nutzer beträchtlich Zeit um die beste Konfiguration für ein System herauszufinden. Diese Information zu verlieren ist sicherlich nicht erwünscht.

Es ist leicht eine Sicherung der aktuellen Kernel-Konfiguration zu erstellen:

<div class="mw-translate-fuzzy">
{{RootCmd|cd /usr/src/linux
|cp .config ~/kernel-config-`uname -r`|}}
</div>

Vorausgesetzt dass der Symlink zu den Kernelquellen korrekt gesetzt ist, kopiert dies die Konfiguration des aktuell verwendeten Kernel in das Heimatverzeichnis von Root. Außerdem benennt es die Konfiguration in {{Path|kernel-config-}} gefolgt von der Version des aktuell laufenden Linux Kernel um.

== Configuration ==

<div class="mw-translate-fuzzy">
== Einen Symlink auf die neuen Kernelquellen setzen ==
</div>

Der Symlink {{Path|/usr/src/linux}} sollte immer auf das Verzeichnis zeigen das die Kernelquellen des aktuell laufenden Kernel enthält. Dies kann auf eine von drei Arten erfolgen:

# Installation der Kernelquellen mit <code>USE="symlink"</code>
# Setzen des Links mit eselect
# Manuell den symbolischen Link aktualisieren

<div class="mw-translate-fuzzy">
=== Installation der Kernelquellen mit dem symlink USE-Flag ===
</div>

Dies führt dazu, dass {{Path|/usr/src/linux}} auf die neu installierten Kernelquellen zeigt.

Falls nötig, kann dies später immer noch mit einer der beiden anderen Methoden geändert werden.

<div class="mw-translate-fuzzy">
=== Den Link mit eselect setzten ===
</div>

<div class="mw-translate-fuzzy">
Um den Symlink mit <tt>eselect</tt> zu setzten:
</div>

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

Dies gibt die verfügbaren Kernelquellen aus. Der Stern kennzeichnet die ausgewählten Quellen.

Um die Kernelquellen beispielsweise auf den zweiten Eintrag zu ändern, führen Sie folgendes aus:

{{RootCmd|eselect kernel set 2}}

<div class="mw-translate-fuzzy">
=== Manuell den symbolischen Link aktualisieren ===
</div>

Um den symbolischen Link manuell zu setzten:

<div class="mw-translate-fuzzy">
{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}
</div>

==== Moving to the new folder ====

Now that the symbolic link has been modified, change the working directory to the new kernel folder.

{{RootCmd|cd /usr/src/linux}}

{{Note|This command is still necessary even if the working directory was already {{Path|/usr/src/linux}} when the symlink was modified. Until the new symlink is actually followed, the console will still be in the ''old'' kernel's directory.}}

<div class="mw-translate-fuzzy">
== Kopieren der vorigen Kernel-Konfiguration ==
</div>

<div class="mw-translate-fuzzy">
Die Konfiguration des alten Kernel muss zum neuen kopiert werden. Sie kann an mehreren Orten gefunden werden:
</div>

<div class="mw-translate-fuzzy">
* Im [[Special:MyLanguage/procfs|procfs]] Dateisystem, falls die Kernel Option ''Enable access to .config through /proc/config.gz'' im aktuellen Kernel aktiviert worden ist:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}
</div>

* From the old kernel. This will only work when the old kernel was compiled with CONFIG_IKCONFIG:
: {{RootCmd|/usr/src/linux/scripts/extract-ikconfig /path/to/old/kernel >/usr/src/linux/.config}}

<div class="mw-translate-fuzzy">
* Im {{Path|/boot}} Verzeichnis, falls die Konfiguration dort installiert worden ist:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}
</div>

* Im Kernelverzeichnis des aktuell laufenden Kernels:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

* In the {{Path|/etc/kernels/}} directory, if <code>SAVE_CONFIG="yes"</code> is set in {{Path|/etc/genkernel.conf}} and {{c|[[genkernel]]}} was previously used:
: {{RootCmd|cp /etc/kernels/kernel-config-x86_64-3.14.14-gentoo /usr/src/linux/.config}}

<div class="mw-translate-fuzzy">
== Konfigurieren des neuen Kernel ==
</div>

<div class="mw-translate-fuzzy">
Um die Konfiguration des alten Kernel mit dem neuen Kernel zu verwenden, sollte er umgewandelt werden. Die Umwandlung kann entweder durch die Ausführung von <tt>make silentoldconfig</tt> oder <tt>make olddefconfig</tt> erfolgen.
</div>

<div class="mw-translate-fuzzy">
=== make silentoldconfig ===
</div>

{{Important|{{c|make silentoldconfig}} is being removed as of linux version 4.19, it will be replaced by {{c|make syncconfig}}.}}

<div class="mw-translate-fuzzy">
Die folgende Konfiguration ist wie die textbasierte Konfiguration mit <tt>make config</tt>. Für neue Konfigurationsoptionen bietet sie eine Auswahl. Zum Beispiel:
</div>

<div class="mw-translate-fuzzy">
{{RootCmd|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}
</div>

<div class="mw-translate-fuzzy">
Das ''(NEW)'' am Ende der Zeile weist diese Option als neu aus. Direkt davor in eckigen Klammern stehen die möglichen Einstellungen: ''Y''es, ''n''o, ''m''odule oder ''?'', um die Hilfe anzuzeigen. Die empfohlene Einstellung ist groß geschrieben (hier ''Y''). Die Hilfe beschreibt den Treiber oder die Funktion.
</div>

<div class="mw-translate-fuzzy">
Leider zeigt <tt>make silentoldconfig</tt> für die einzelne Option neben der Hilfe nur wenig zusätzliche Informationen, z.B. den Kontext, so dass es manchmal schwierig ist, die richtige Auswahl zu treffen. In diesem Fall ist es das Beste, sich den Namen der Option zu merken und die Auswahl später mit Hilfe der [[Special:MyLanguage/Kernel/Configuration#Configuration tools|grafischen Kernel Konfigurationsprogramme]] zu treffen.
</div>

<div class="mw-translate-fuzzy">
=== make olddefconfig ===
</div>

<div class="mw-translate-fuzzy">
Wenn Interaktivität nicht gewünscht ist, verwenden Sie <tt>make olddefconfig</tt>. (Es werden dann keine Fragen gestellt.)
</div>

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

==== make help ====

Use {{c|make help}} to see other conversion methods available:

{{RootCmd|make help}}

== Kompilieren ==

<div class="mw-translate-fuzzy">
{{Important|Wenn externe Kernelmodule installiert sind (wie nvidia oder zfs), kann es notwendig sein vor dem Kompilieren des Kernel <tt>make modules_prepare</tt> auszuführen, wie [[Kernel/Upgrade/de#Externe Kernelmodule erneut installieren|unterhalb]] beschrieben. Einige Module können nicht installiert oder vorbereitet werden, bevor der Kernel kompiliert ist.}}
</div>

{{Important|Vergessen Sie nicht den [[Special:MyLanguage/Bootloader|Bootloader]] für die neuen Kernel-Dateinamen zu konfigurieren und ebenfalls die initramfs neu zu bauen, falls eine verwendet wird.}}

Für diesen Schritt folgen Sie wieder den Erläuterungen im Artikel zur [[Special:MyLanguage/Kernel/Configuration#Kompilieren|manuellen Einrichtung des Kernel]].

=== Automated build and installation ===

It is possible to automatically build and install the newly emerged kernel using Portage hooks. While other approaches are also possible, the following is based on genkernel and gentoo-sources package. It requires the following prerequisites:

# {{c|genkernel all}} is able to build and install the kernel to which the {{Path|/usr/src/linux}} symlink points into <code>$BOOTDIR</code> and the bootloader.
# The <code>symlink</code> use flag is set for the kernel ebuild.

If those are fulfilled, simply install a <code>post_pkg_postinst</code> Portage hook as shown below.

{{FileBox|title=Automated kernel build and installation portage hook|filename=/etc/portage/env/sys-kernel/gentoo-sources|lang=bash|1=post_pkg_postinst() {
	CURRENT_KV=$(uname -r)
	# Check to see if genkernel has been run previously for the running kernel and use that config
	if [[ -f "${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" ]] ; then
		genkernel --kernel-config="${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" all
	elif [[ -f "${EROOT}/usr/src/linux-${CURRENT_KV}/.config" ]] ; then # Use latest kernel config from current kernel
		genkernel --kernel-config="${EROOT}/usr/src/linux-${CURRENT_KV}/.config" all
	elif [[ -f /proc/config.gz ]] ; then # Use known running good kernel
		zcat /proc/config.gz >> "${EROOT}/tmp/genkernel.config"
		genkernel --kernel-config="${EROOT}/tmp/genkernel.config" all
		rm "${EROOT}/tmp/genkernel.config"
	else # No valid configs known
		genkernel all
	fi
}
}}

<div class="mw-translate-fuzzy">
== Externe Kernelmodule erneut installieren ==
</div>

{{Note|The modules_prepare step is not required if building an entire kernel as this function is done as part of the standard process.}}

Alle externen Kernelmodule, wie die [[:Category:Binary kernel modules|binäre Kernel Module]], müssen für jeden neuen Kernel erneut installiert werden. Falls der neue Kernel bisher noch nicht kompiliert wurde, so muss der Kernel für die Installation von externen Kernelmodule vorbereitet werden:

{{RootCmd|make modules_prepare}}

<div class="mw-translate-fuzzy">
Man installiert die Pakete mittels des ''@module-rebuild'' Satz erneut:
</div>

{{Emerge|@module-rebuild}}

<div class="mw-translate-fuzzy">
== Kompilierprobleme lösen ==
</div>

<div class="mw-translate-fuzzy">
Falls Probleme beim Neukomplieren des aktuellen Kernels auftreten, kann es helfen die Kernelquellen zu bereinigen. Stellen Sie zunächst sicher, die {{Path|.config}}-Datei zu sichern, da diese dabei gelöscht wird. Achten Sie darauf hierzu keinen {{Path|.bak}} oder {{Path|~}} Suffix zu verwenden, da <tt>make distclean</tt> solche Dateien ebenfalls entfernt.
</div>

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

<div class="mw-translate-fuzzy">
== Alte Kernel entfernen ==
</div>

Siehe Artikel zur [[Special:MyLanguage/Kernel/Removal|Kernel Deinstallation]]. 

== See also ==

* {{See also|Genkernel}}

== Externe Ressourcen ==

<div class="mw-translate-fuzzy">
* [http://kernelnewbies.org/LinuxChanges Kernel Changelog mit einigen Beschreibungen neuer Funktionen (in Englisch)]
</div>

[[Category:Kernel]]
