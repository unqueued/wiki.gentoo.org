<languages />

{{Metadata|abstract=Dieser Artikel beschreibt die Schritte, auf einen neuen Kernel zu aktualisieren.}}

Dieser Artikel beschreibt die Schritte, auf einen neuen [[Special:MyLanguage/Kernel|Kernel]] zu aktualisieren.

== Installation und Nutzung eines neuen Kernel ==

Ein Kernel Upgrade ist vermutlich eine gute Idee, wenn Kernelquellen installiert werden. Neue Kernelquellen werden manchmal bei der Aktualisierung des Systems durch die Ausführung von <tt>emerge -a --update --deep --with-bdeps=y --newuse @world</tt> installiert, oder selbstverständlich wenn man sie direkt installiert.

Die bloße Installation neuer Kernel Sourcen liefert dem Nutzer keinen neuen Kernel. Es ist darüber hinaus erforderlich einen neuen Kernel auf Grundlage der neuen Sourcen zu bauen (make), zu installieren (install) und anschließend das System neu zu starten, um wirklich den neuen Kernel zu verwenden.

Einen neuen Kernel aus den neuen Sourcen zu bauen ist im Grunde der gleiche Vorgang wie der Bau eines Kernel bei der Installation des Systems. Der Unterschied besteht darin, dass man die Konfiguration des alten Kernel zur Erstellung der Konfiguration des neuen Kernel nutzen kann. Die Verwendung der alten Konfiguration erspart es dem Nutzer sich erneut mit allen Kernel-Optionen befassen zu müssen. (Wie es bei der bloßen Verwendung von <tt>make menuconfig</tt> notwendig wäre.)

Die Konfiguration des Kernel wird in einer Datei mit dem Namen {{Path|.config}} im Verzeichnis zusammen mit den Kernel Sourcen gespeichert. Ein neuer Kernel kann Optionen oder Eigenschaften besitzen die der alte Kernel noch nicht hat, oder er kann eine Eigenschaft oder Option nicht mehr haben die der alte Kernel immer noch hat. Die Kernel-Konfiguration gibt an, ob die Eigenschaften und Optionen eines Kernel zu aktiviert sind oder nicht. Vielleicht integriert im Kernel oder als Module gebaut, die auf Verlangen in den laufenden Kernel geladen werden können. Daher kann die Konfigurationsdatei des neuen Kernel neue Einträge besitzen, die die alte nicht hatte und sie könnte andere Einträge nicht mehr haben, die in der Konfiguration des alten Kernel vorhanden sind.

Um mit solchen Änderungen der Konfigurationsdatei umzugehen, muss die Konfigurationsdatei des alten Kernel in eine Konfiguration umgewandelt werden, die mit dem neuen Kernel verwendet werden kann. Dieser Artikel zeigt, wie man mit der Umwandlung der Konfigurationsdatei des alten Kernel aus neuen Kernel Sourcen einen neuen Kernel erzeugt.

== Backup der aktuellen Kernel-Konfiguration ==

Es ist klug eine Sicherung der Kernel-Konfiguration zu erstellen, so dass die vorigen Konfiguration nicht verloren sind. Immerhin verwenden viele Nutzer beträchtlich Zeit um die beste Konfiguration für ein System herauszufinden. Diese Information zu verlieren ist sicherlich nicht erwünscht.

Es ist leicht eine Sicherung der aktuellen Kernel-Konfiguration zu erstellen:

{{RootCmd|cd /usr/src/linux
|cp .config ~/kernel-config-`uname -r`|}}

Vorausgesetzt dass der Symlink zu den Kernelquellen korrekt gesetzt ist, kopiert dies die Konfiguration des aktuell verwendeten Kernel in das Heimatverzeichnis von Root. Außerdem benennt es die Konfiguration in {{Path|kernel-config-}} gefolgt von der Version des aktuell laufenden Linux Kernel um.

== Einen Symlink auf die neuen Kernelquellen setzen ==

Der Symlink {{Path|/usr/src/linux}} sollte immer auf das Verzeichnis zeigen das die Kernelquellen des aktuell laufenden Kernel enthält. Dies kann auf eine von drei Arten erfolgen:

# Installation der Kernelquellen mit <code>USE="symlink"</code>
# Setzen des Links mit eselect
# Manuell den symbolischen Link aktualisieren

=== Installation der Kernelquellen mit dem symlink USE-Flag ===

Dies führt dazu, dass {{Path|/usr/src/linux}} auf die neu installierten Kernelquellen zeigt.

Falls nötig, kann dies später immer noch mit einer der beiden anderen Methoden geändert werden.

=== Den Link mit eselect setzten ===

Um den Symlink mit <tt>eselect</tt> zu setzten:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

Dies gibt die verfügbaren Kernelquellen aus. Der Stern kennzeichnet die ausgewählten Quellen.

Um die Kernelquellen beispielsweise auf den zweiten Eintrag zu ändern, führen Sie folgendes aus:

{{RootCmd|eselect kernel set 2}}

=== Manuell den symbolischen Link aktualisieren ===

Um den symbolischen Link manuell zu setzten:

{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

== Kopieren der vorigen Kernel-Konfiguration ==

Die Konfiguration des alten Kernel muss zum neuen kopiert werden. Sie kann an mehreren Orten gefunden werden:

* Im [[Special:MyLanguage/procfs|procfs]] Dateisystem, falls die Kernel Option ''Enable access to .config through /proc/config.gz'' im aktuellen Kernel aktiviert worden ist:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}

* Im {{Path|/boot}} Verzeichnis, falls die Konfiguration dort installiert worden ist:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* Im Kernelverzeichnis des aktuell laufenden Kernels:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

== Konfigurieren des neuen Kernel ==

Um die Konfiguration des alten Kernel mit dem neuen Kernel zu verwenden, sollte er umgewandelt werden. Die Umwandlung kann entweder durch die Ausführung von <tt>make silentoldconfig</tt> oder <tt>make olddefconfig</tt> erfolgen.

<tt>make silentoldconfig</tt> bietet die Auswahl für neue Optionen, <tt>make olddefconfig</tt> hingegen nicht. Verwenden Sie eine der beiden Möglichkeiten, nicht beide.

=== make silentoldconfig ===

Die folgende Konfiguration ist wie die textbasierte Konfiguration mit <tt>make config</tt>. Für neue Konfigurationsoptionen bietet sie eine Auswahl. Zum Beispiel:

{{RootCmd|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

Das ''(NEW)'' am Ende der Zeile weist diese Option als neu aus. Direkt davor in eckigen Klammern stehen die möglichen Einstellungen: ''Y''es, ''n''o, ''m''odule oder ''?'', um die Hilfe anzuzeigen. Die empfohlene Einstellung ist groß geschrieben (hier ''Y''). Die Hilfe beschreibt den Treiber oder die Funktion.

Leider zeigt <tt>make silentoldconfig</tt> für die einzelne Option neben der Hilfe nur wenig zusätzliche Informationen, z.B. den Kontext, so dass es manchmal schwierig ist, die richtige Auswahl zu treffen. In diesem Fall ist es das Beste, sich den Namen der Option zu merken und die Auswahl später mit Hilfe der [[Special:MyLanguage/Kernel/Configuration#Configuration tools|grafischen Kernel Konfigurationsprogramme]] zu treffen.

=== make olddefconfig ===

Wenn Interaktivität nicht gewünscht ist, verwenden Sie <tt>make olddefconfig</tt>. (Es werden dann keine Fragen gestellt.)

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

== Kompilieren ==

{{Important|Wenn externe Kernelmodule installiert sind (wie nvidia oder zfs), kann es notwendig sein vor dem Kompilieren des Kernel <tt>make modules_prepare</tt> auszuführen, wie [[Kernel/Upgrade/de#Externe Kernelmodule erneut installieren|unterhalb]] beschrieben. Einige Module können nicht installiert oder vorbereitet werden, bevor der Kernel kompiliert ist.}}

{{Important|Vergessen Sie nicht den [[Special:MyLanguage/Bootloader]] für die neuen Kernel-Dateinamen zu konfigurieren und ebenfalls die initramfs neu zu bauen, falls eine verwendet wird.}}

Für diesen Schritt folge wieder den den Schritten im [[Special:MyLanguage/Kernel/Configuration#Kompilieren|manuelle Konfiguration]] Artikel.

== Externe Kernelmodule erneut installieren ==

Alle externen Kernelmodule, wie die [[:Category:Binary kernel modules|binäre Kernel Module]],  müssen für jeden neuen Kernel erneut installiert werden. Falls der neue Kernel bisher noch nicht kompiliert wurde, so muss der Kernel für die Installation von externen Kernelmodule vorbereitet werden:

{{RootCmd|make modules_prepare}}

Man installiert die Pakete mittels des ''@module-rebuild'' Satz erneut:

{{Emerge|@module-rebuild}}

== Solving build problems ==

When experiencing build problems while rebuilding the current kernel, it might help to sanitize the kernel sources. Make sure to backup the {{Path|.config}} file first, as the operation will remove it. Make sure not to use a {{Path|.bak}} or {{Path|~}} suffix as backup as <tt>make distclean</tt> will clean those up as well.

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

== Alte Kernel entfernen ==

Siehe Artikel zur [[Special:MyLanguage/Kernel/Removal|Kernel Deinstallation]]. 

== Externe Ressourcen ==

* [http://kernelnewbies.org/LinuxChanges Kernel Changelog mit einigen Beschreibungen neuer Funktionen (in Englisch)]

[[Category:Kernel]]
