{{Stub}}

== [[Portage]], the heart of Gentoo, uses ebuild scripts! ==
In order to be able to do package management you have to define what packages are and how they download, unpack, patch, compile, install and merge (copy it from a temporary directory to your live file system) sources and/or binaries, to make it more nice we also add some useful metadata as well as USE flags, patches and more to allow one to manipulate the process the way; this definition is mostly done in an ebuild, which are bash shell scripts.

== Ebuilds, where do they live? How do I create one? ==
When you had set up Gentoo, you probably remember that you had to download and unpack a Portage tree snapshot. This snapshot (which you later update when you run ''emerge --sync'') is full of ebuilds, it is the Portage tree and once unpacked is usually located at {{Path|/usr/portage}}.

Now, you can't just create a file {{Path|/usr/portage/hello-world.ebuild}} and be done with it; there are several reasons:

# '''It is your local copy of a remote Portage Tree:''' If you place an ebuild in there or update an ebuild, then you run ''emerge --sync'', your changes will be gone. Therefore, you will want to work in {{Path|/usr/local/portage}}, in a sub directory of your home directory or in an [[overlay]] instead.
# '''The ebuild file is not in the right directory:''' An ebuild has to be located in the "package name" subdirectory of "category" directory; so, for an ebuild to work you have to place it in a directory like {{Path|/usr/local/portage/app-misc/hello-world/}}.
# '''The ebuild file name has no version listed:''' Packages have versions, they need to specified in the file name; therefore we would like to create a file like {{Path|/usr/local/portage/app-misc/hello-world/hello-world-1.0.ebuild}}.

So, let's create us a minimal ebuild; to keep it simple I will assume you run under root privileges, you can always use [[sudo]] if you feel like.

{{RootCmd|mkdir -p /usr/local/portage/app-misc/hello-world
|cd $_
|cp /usr/portage/header.txt ./hello-world-1.0.ebuild}}

We recursively create the directories and cd into it (''$_'' recalls the last argument), then we create an ebuild out of the ebuild header which is a necessity if you want it added to the Portage tree.

This won't run yet, it requires us to define a minimal amount of variables, so let's add the following code:
{{Code|The minimum needed to create an ebuild|<pre>
SLOT="0"
</pre>}}

Just one variable? Exactly, it is required that we explicitly state that we won't use SLOTs, which is what "0" means.

We can now install the package to our system by running:

{{RootCmd|ebuild hello-world-1.0.ebuild manifest clean merge}}

This will manifest (create hashes, to avoid corruption), clean any present temporary work directories and (e)merge the ebuild.

Good, you have just made and tested your first ebuild, it doesn't really do much but it's a good start!

== Let's make it install a file that echoes "hello world!" when being run, a classic example. ==

=== Adding more useful variables ===
If you take a look at {{Path|/usr/portage/skel.ebuild}} you see a skeleton with a lot of documentation, we will be adding some of these variables and functions to our ebuild as we proceed; so, it seems wise to read over this file as we go. Add the following code blocks to our {{Path|hello-world-1.0.ebuild}}:
{{Code|The council suggests to use the lastest ebuild API|<pre>
EAPI="5"
</pre>}}

{{Important|The above variable must be listed first after the header! So, add it above the SLOT variable we already have.}}

More information about the EAPI can be found [http://devmanual.gentoo.org/ebuild-writing/eapi here].

{{Code|Short, one-line description of our package|<pre>
DESCRIPTION="A classical example to use when starting on something new."
</pre>}}

{{Code|The homepage which the package was found on, for developer reference|<pre>
HOMEPAGE="http://wiki.gentoo.org/index.php?title=Basic_guide_to_write_Gentoo_Ebuilds"
</pre>}}

{{Code|The source code which we will download, hosted by the developer who wrote this documentation|<pre>
SRC_URI="http://dev.gentoo.org/~tomwij/files/wiki/hello-world-1.0.tar.gz"
</pre>}}

This is a simple tarball that contains a hello-world shell script that echoes "Hello world!".

Next, we need to specify a license, I hereby tell you I am licensing it under the MIT license so let us specify that.
{{Code|This package is licensed under the MIT license|<pre>
LICENSE="MIT"
</pre>}}

We already did the SLOT, so we can move on to KEYWORDS. The KEYWORDS variable tells you on which arches a package works and also tells you whether it is masked (not listed or explicitly listed with -), untested (~) or stable (listed, but with to character in front of it). Since we can't stabilize ourselves (bugs are to be filed for that), the best we can do for now is list all the arches as untested. All the arches, because they can all run shell scripts.

{{Code|We hereby confirm that our package runs on all arches, but might not be stable yet|<pre>
KEYWORDS="~alpha ~amd64 ~arm ~hppa ~ia64 ~ppc ~ppc64 ~s390 ~sh ~sparc ~x86"
</pre>}}

The other variables define some more specific things (check them out in {{Path|skel.ebuild}}) but we won't need them for now; you also see there are functions, but let us see what the ebuild already does by now.

{{Code|The ebuild should look like this|<pre>
# Copyright 1999-2013 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

EAPI="5"

SLOT="0"

DESCRIPTION="A classical example to use when starting on something new."
HOMEPAGE="http://wiki.gentoo.org/index.php?title=Basic_guide_to_write_Gentoo_Ebuilds"
SRC_URI="http://dev.gentoo.org/~tomwij/files/wiki/hello-world-1.0.tar.gz"

LICENSE="MIT"
KEYWORDS="~alpha ~amd64 ~arm ~hppa ~ia64 ~ppc ~ppc64 ~s390 ~sh ~sparc ~x86"
</pre>}}

{{RootCmd|ebuild hello-world-1.0.ebuild manifest clean merge}}

We see that it first tries to download our file from a mirror, but since it is not on the Gentoo mirrors it will download it from the SRC_URI we specified.

Then, when it has the file it can create a manifest, this contains a hash of our ebuild and that downloaded file to ensure integrity such that corruption will yield errors.

Then, the emerge process kicks in, the integrity is first checked. Then, we can see '''the archive we downloaded is automatically unpacked''', this is really useful as we don't have to implement this anymore. We can change this behavior by overriding its function (src_unpack), setting some variables or using eclasses whom define such behavior; but we don't need to do that in this case.

As we read further, we see that it tries to prepares, configure, compile and install. In the prepare phase, patches will typically be applied. In the configure and compile phases, the typical build process is done, by default in runs ''econf'' (a wrapper for ''./configure'') and ''emake'' (a wrapper for ''make'') when it finds files to handle; but since we use a shell script, we won't need to adjust these phases.

Now, the last step doesn't look quite right; '''it doesn't install our file yet'''...

=== Telling our ebuild where to install our shell script. ===
In our development manual we can find a page about the [http://devmanual.gentoo.org/ebuild-writing/functions phase functions], ''src_install'' seems useful for what we want to do. If you click on the ''src_install'' link you will see what it does by default for each EAPI as well as some examples. As the default doesn't look good, we'll define our own ''src_install'' function. In our function we will be calling other functions to do installation work for us, an overview for them is [http://devmanual.gentoo.org/function-reference/install-functions install functions].

{{Warning|Ebuilds should never directly install to the live file system, therefore we do NOT use typical commands like mv, cp and rm as well as don't use absolute paths. We use the above command and work against ''${D}'' which is destination directory.}}

So, we can proceed by adding the following function to our ebuild:
{{Code|Let's place our shell script in /usr/bin and make it executable|<pre>
src_install() {
    dobin hello-world
}
</pre>}}

That ''dobin'' call will copy hello-world to a temporary build directory ({{Path|${D}/usr/bin/}}), make it executable; later on it will be checked by Portage and copied to the live file systems.

Let us try again...

{{RootCmd|ebuild hello-world-1.0.ebuild manifest clean merge}}

Ah, we see ''">>> /usr/bin/hello-world"'', that looks good!

Let us try...
{{Cmd|hello-world}}

And there we have it, we just installed a package that echoes "Hello world!".

== To be continued! ==
New sections will get added as new examples get produced...

Here are some ideas for more examples if anyone wants to help writing this article:

* Expand on the hello world ebuild by adding a src_prepare function where we will patch the package such that the shell script asks for the user's name and uses it instead of world.
* Usage of variables like $P, $PN, $PV, $PF to ease the maintanance (let's assume a new version was released).
* Installation of optional documentation (via IUSE="doc").
* Usage of autotools, cmake and other useful eclasses; in easy to use examples.
* How to ensure QA, deal with QA warnings and errors and set up FEATURES for more realible ebuild writing.
* Explain or refer to Sunrise, how to contribute and how to become a developer.

{{Important|This article is meant to be a "hands-on introduction", its scope is therefore limited and it is not intended to replace the development manual.}}

== Useful resources ==
* [http://devmanual.gentoo.org/ Gentoo Development Guide]
* ''man 5 ebuild''
* ''repoman metadata && repoman full'' to check for QA errors, QA keywords are explained in the last part of ''man repoman''.
* [http://www.gentoo.org/proj/en/devrel/handbook/handbook.xml?part=2&chap=1 Ebuild Policy]

[[Category:Development]]
