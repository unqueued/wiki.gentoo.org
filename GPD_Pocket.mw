{{InfoBox stack
|{{InfoBox homepage|http://www.gpd.hk/pocket.asp|header=true}}
}}{{WIP|author=Drcrane}}

This article [[Article description::provides instructions on getting Gentoo operational on the GPD Pocket.]]

The GPD Pocket is a 7" UMPC manufactured by Game Park Digital running an Intel Atom x7-Z8750 and 8 GB RAM. Lots of work has already been done on getting the kernel to work out of the box by [https://github.com/jwrdegoede Hans de Goede].

== Hardware ==

The GPD Pocket contains the following hardware, the kernel should be configured to include drivers for all these items:

{| class="table table-striped table-condensed"
|-
! Hardware !! Kernel Configuration Key
|-
| USB Keyboard || USB Options Enabled (xHCI also)
|-
| MAX17047 Fuel Gauge || <code>BATTERY_MAX17042</code>
|-
| BQ24190 Charger || <code>CHARGER_BQ24190</code>
|-
| GPIO for Fan Control || <code>GPD_POCKET_FAN</code>
|-
| Intel Graphics || <code>CONFIG_DRM_I915</code>
|-
| UEFI Framebuffer || <code>CONFIG_FB_EFI</code>
|-
| ALSA Sound Card Support || <code>CONFIG_SND_SST_ATOM_HIFI2_PLATFORM_ACPI</code>
|-
| eMMC Block Device (ACPI SDIO) || <code>CONFIG_MMC_SDHCI</code> <code>CONFIG_MMC_SDHCI_ACPI</code>
|-
| Wireless || <code>CONFIG_B43</code> <code>CONFIG_BRCMFMAC</code> <code>CONFIG_BRCMFMAC_SDIO</code> <code>CONFIG_BRCMFMAC_PCIE</code>
|-
| . ||
|-
|}

I recommend compiling all these as modules they can then be tested in the normal way. Be careful of the Keyboard support though!

== Installation ==

=== Kernel ===

{{Note|Knowledge of configuring the kernel is required here although it is quite simple.}}

This is the most complex step but you can avoid the pain by downloading the pre-built kernel from https://github.com/joshskidmore/gpd-pocket-arch-guide. A kernel can be compiled from gentoo-sources in portage, a working configuration can be found on [https://github.com/jwrdegoede/linux-sunxi Hans de Goede's github linux-sunxi config] (I can confirm that gentoo-sources-4.16.0 works). Also, gentoo-sources-4.16.0 contains the [https://github.com/jwrdegoede/linux-sunxi/commit/cf59a9b05feb95999a1a2c095e52398267e55db6 GPD Pocket fan driver].

{{RootCmd|emerge {{=}}gentoo-sources-4.16.0}}

Copy the {{Path|.config}} file from Hans de Goede's GitHub repository https://github.com/jwrdegoede/linux-sunxi into the {{Path|/usr/src/linux-4.16.0-gentoo/.config}} directory.

This change to the linux-sunxi {{Path|.config}} file should help with a funny sound driver problem:

{{KernelBox|1=
CONFIG_INTEL_ATOMISP{{=}}n
}}

{{RootCmd
|make menuconfig
|make -j4
|mkdir /usr/src/modules-4.16.0-gentoo
|make INSTALL_MOD_STRIP{{=}}1 INSTALL_MOD_PATH{{=}}/usr/src/modules-4.16.0-gentoo modules_install
}}

The new kernel is available under {{Path|/usr/src/linux-4.16.0-gentoo/arch/x86_64/boot/bzImage}} and the new modules in {{Path|/usr/src/modules-4.16.0-gentoo}}

=== Creating an EFI-capable bootable USB drive ===

{{Warning|This will make all the data on the USB Stick inaccessible.}}

Use {{c|fdisk}} to create a new GPT partition table on the USB Stick. The partition table must be UEFI or the BIOS will not be able to read the boot loader files.

{{RootCmd|fdisk /dev/sdc|output=
<pre>Command (m for help): g
Created a new GPT disklabel (GUID: C799490C-B64C-4DF0-8466-7EDAB65294B3).

Command (m for help): n
Partition number (1-128, default 1): 1
First sector (2048-60547342, default 2048): 4096
Last sector, +sectors or +size{K,M,G,T,P} (4096-60547342, default 60547342): +256M

Created a new partition 1 of type 'Linux filesystem' and of size 256 MiB.

Command (m for help): t
Selected partition 1
Partition type (type L to list all types): 1
Changed type of partition 'Linux filesystem' to 'EFI System'.

Command (m for help): n
Partition number (2-128, default 2): 2
First sector (528384-60547342, default 528384):
Last sector, +sectors or +size{K,M,G,T,P} (528384-60547342, default 60547342):

Created a new partition 2 of type 'Linux filesystem' and of size 28.6 GiB.

Command (m for help): w</pre>
}}

An [[EFI System Partition|EFI System partition]] is just a FAT32 partition, to set up the partition you may need to install {{Package|sys-fs/dosfstools}}:

{{Emerge|sys-fs/dosfsutils}}

{{RootCmd|mkfs.vfat -F32 /dev/sdc1}}

Mount the drive and make the UEFI boot directories:

{{RootCmd
|mount /dev/sdc1 /mnt/sdc1
|mkdir -p /mnt/sdc1/EFI/BOOT
}}

Create a Linux root file system on {{Path|/dev/sdc2}}:

{{RootCmd|mkfs.ext2 /dev/sdc2}}

Download and extract a stage 3 onto {{Path|/dev/sdc2}} (alter the mirror and date to flavor):

{{RootCmd
|mount /dev/sdc2 /mnt/sdc2
|wget http://gentoomirror/.../stage3-amd64-nomultilib-YYYYMMDD.tar.bz2
|cd /mnt/sdc2
|tar -xf stage3-amd64-nomultilib-YYYYMMDD.tar.bz2
}}

Edit the {{Path|etc/passwd}} and {{Path|etc/shadow}} files so that you can login.

=== Installing a bootloader ===

SYSLINUX will be used to boot the kernel, if syslinux is not installed on the system, do it now:

{{Emerge|sys-boot/syslinux}}

Copy the required binaries to the USB drive:

{{RootCmd
|cp /usr/share/syslinux/efi64/syslinux.efi /mnt/sdc1/EFI/BOOT/bootx64.efi
|cp /usr/share/syslinux/efi64/ldlinux.e64 /mnt/sdc1/EFI/BOOT/ldlinux.e64
}}

Create the syslinux configuration file:

{{FileBox|filename=/mnt/sdc1/EFI/BOOT/syslinux.cfg|title=|1=
PROMPT 1
TIMEOUT 50
DEFAULT gentoo

LABEL gentoo
    LINUX ../vmlinuz-4.16.0-gentoo
    APPEND root=/dev/ram0 fbcon=rotate:1
    INITRD ../initramfs-4.16.0-gentoo.cpio.gz
}}

The kernel and the RAM disk will be created next

=== Kernel and Initial RAM Disk ===

Creating a custom <code>initramfs</code> is [[Custom_Initramfs|explained here]] to allow access to the GPD Pocket internal eMMC flash and access to the USB stick that the root fs is installed on some modules must be available in the initramfs:

{{RootCmd|find lib/ -type f|output=<pre>
lib/modules/4.16.0-gentoo/kernel/drivers/usb/storage/usb-storage.ko
lib/modules/4.16.0-gentoo/kernel/drivers/mmc/core/mmc_block.ko
lib/modules/4.16.0-gentoo/kernel/drivers/mmc/core/mmc_core.ko
lib/modules/4.16.0-gentoo/kernel/drivers/mmc/host/sdhci.ko
lib/modules/4.16.0-gentoo/kernel/drivers/mmc/host/sdhci-acpi.ko
</pre>}}

These files can be copied from the kernel modules directory when a kernel is compiled with the Hans de Goede (or Fedora) settings.

The newly created initramfs and kernel should be copied to the EFI partition:

{{RootCmd
|cp /usr/src/linux-4.16.0-gentoo/arch/x86_64/boot/bzImage /mnt/sdc1/EFI/vmlinuz-4.16.0-gentoo
|cp /usr/src/initramfs-4.16.0-gentoo.cpio.gz /mnt/sdc1/EFI
}}

=== Booting to the USB drive ===

To boot to the USB drive insert the drive into the GPD Pocket's USB socket and press {{Key|F7}} when the GPD Pocket is starting up (that means hold down the {{Key|Fn}} key and press {{Key|7}} a few times when you power up).

You should be presented with a list of startup options, one of which should be the name of your USB drive, select that one and syslinux should start and then boot the kernel and execute the initramfs.

== Creating a GPD Userspace ==

I recommend creating a Virtual Machine or a Docker Container using a stage3 tarball, the VM or Container will be where all the applications are compiled and then installed on the GPD Pocket using portage's binary package support.

=== Configure Package Build Host ===

To begin, create and configure a clean Gentoo VM / Docker Container with the same configuration that will be used on the GPD Pocket:

{{FileBox|filename=/etc/portage/make.conf|title=|1=
FEATURES="buildpkg"
USE="-bindist"
CPU_FLAGS_X86="mmx mmxext sse sse2 sse3 ssse3 sse4_1 sse4_2 avx aes"
VIDEO_CARDS="intel"
PORTDIR="/var/db/repos/gentoo"
DISTDIR="/mnt/portage/distfiles"
PKGDIR="/mnt/portage/packages"
}}

Alter the PORTDIR, DISTDIR and PKGDIR to taste, this configuration is for a [https://www.brunsware.de/blog/gentoo/portage-tree-squashfs-overlayfs.html Portage Tree in SquashFS] configuration.

The configuration for the GPD Pocket would look something like this, also be aware that the files in {{Path|/etc/portage/package.use}} and {{Path|/etc/portage/package.keywords}} on both machines (the VM and your GPD Pocket) should match.

{{FileBox|filename=/etc/portage/make.conf|title=|1=
FEATURES="getbinpkg"
PORTAGE_BINHOST="ssh://user@hostname:port/mnt/portage/packages"
USE="-bindist"
CPU_FLAGS_X86="mmx mmxext sse sse2 sse3 ssse3 sse4_1 sse4_2 avx aes"
VIDEO_CARDS="intel"
PORTDIR="/var/db/repos/gentoo"
DISTDIR="/mnt/portage/distfiles"
PKGDIR="/mnt/portage/packages"
}}

{{Warning|Although not strictly necessary it is probably better that the portage tree is the same on the VM and GPD Pocket, using SquashFS makes this easy and SquashFS images are provided on Gentoo mirrors!}}

=== From Stage3 to boot ===

OpenSSL and OpenSSH when compiled with the <code>bindist</code> use flag will not support wpa_supplicant which is required for the GPD Pocket to connect to a WiFi network. Emerge these on your VM.

{{RootCmd
|emerge --oneshot openssl openssh
|emerge linux-firmware
|emerge wpa_supplicant
}}

The {{c|brcmfmac}} driver (which is required for WiFi, see earlier) will not work properly with {{c|linux-firmware-20181026}}. The driver cannot find the file {{Path|brcm/brcmfmac4356-pcie.txt}}, this file can be obtained from Google (and probably Broadcom). Fix is documented in this [https://bugzilla.kernel.org/show_bug.cgi?id=185661 bug] and by [https://github.com/joshskidmore/gpd-pocket-arch-guide joshskidmore] in his GPD Pocket guide for Arch Linux.

{{RootCmd
|mv brcmfmac4356-pcie.txt /lib/firmware/brcm/brcmfmac4356-pcie.txt
}}

Of course it will be difficult to install these packages without a network connection so install them from a chroot environment.

=== Configuring the Goodix Capacitive TouchScreen ===

The GPD Pocket orientation is incorrect (it is obvious when the device is booting). For the frame buffer terminal the kernel command line argument above {{c|fbcon:rotate=1}} but for Wayland and X11 udev must be configured through the rules. This works if the X server is using libinput but if not different configuration specific to {{c|xorg-X11}} may be required.

{{FileBox|filename=/etc/udev/rules.d/99-goodix-touch.rules|title=|1=
ACTION=="add{{!}}change", KERNEL=="event[0-9]*", ATTRS{name}=="Goodix Capacitive TouchScreen", ENV{LIBINPUT_CALIBRATION_MATRIX}="0 1 0 -1 0 1"
}}

The character between {{c|add}} and {{c|change}} is a pipe ({{c|{{!}}}}).

[http://daniel-lnx.blogspot.com/2017/07/gpd-pocker-touchscreen-rotation-with.html Found here (it works)]

=== Configuring the UEFI Boot Menu ===

[https://wiki.gentoo.org/wiki/Efibootmgr This is probably a good reference].

=== Setting up the GPD Pocket Fan ===

Newer kernels have a module for fan control on the GPD Pocket but annoyingly when the GPD Pocket is connected to AC supply the module defaults to switching the fan on. To modify this behaviour the module can be reloaded, first unload the module:

{{RootCmd
|modprobe -r gpd-pocket-fan
|prompt=gpdpocket <span style{{=}}"color:royalblue;">~ #</span>
|output=
}}

Then, reload the module:

{{RootCmd
|modprobe gpd-pocket-fan speed_on_ac{{=}}0
|prompt=gpdpocket <span style{{=}}"color:royalblue;">~ #</span>
|output=
}}

Fan on and off levels can be altered in a similar way for the fan to turn on at 40 degrees:

{{RootCmd
|modprobe gpd-pocket-fan temp_limits{{=}}40000,40001,40002
|prompt=gpdpocket <span style{{=}}"color:royalblue;">~ #</span>
|output=
}}

[https://wiki.archlinux.org/index.php/GPD_Pocket Arch Linux Wiki]

[[Category:Laptops]]
