{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://git-scm.com|header=true}}
|{{InfoBox gitweb|https://git.kernel.org/cgit/|raw=true}}
|{{InfoBox wikipedia|Git (software)}}
|{{InfoBox ohloh}}
}}

''Note: The Gentoo git repos for developers can be found here: https://gitweb.gentoo.org/''

'''Git''' is distributed revision control and source code management software. The goal of this article is to easily get a Git repository up and running.

Git was developed by Linus Torvalds for use on the Linux Kernel and other open source projects. According to a talk he gave for Google, he was searching for a Source Control Management (SCM) and used three criteria.

SCM must:
# Be distributed;
# Be fast;
# Output exactly what was put in, or an error should be printed.

Since there were no satisfactory options Linus wrote Git.

== Installation ==

=== USE flags ===

{{USEflag|package=dev-vcs/git|desc=Optional USE flags for {{Package|dev-vcs/git}}:
|blksha1+Yes
|cgi
|curl+Yes
|cvs
|doc
|emacs
|gnome-keyring
|gpg+Yes
|gtk
|highlight
|iconv+Yes
|mediawiki+++Support pulling and pushing from MediaWiki
|nls+Yes
|pcre+Yes
|perl+Yes
|python+Yes
|python_targets_python2_7+++Build with Python 2.7
|subversion
|threads+Yes
|tk
|webdav+Yes
|xinetd
}}

=== Emerge ===

Install {{Package|dev-vcs/git}}:

{{Emerge|dev-vcs/git}}

== Configuration ==

Before contributing to a project it is imperative to establish a user name and email for each user. Substitute the bracketed Larry references (brackets and everything in-between, but leave the quotes) in the next example for a personal user name and e-mail address:
{{Cmd
|git config --global user.email "<larry@gentoo.org>"
|git config --global user.name "<larry_the_cow>"
}}

=== Local ===

If you're the only one using your project, or if you're creating something which will be shared in a distributed way, then you should start on your workstation. If you intend to have a central server which everyone uses as the "official" server (e.g. GitHub) then it might be easier to create an empty repository there.

The next list of commands will describe how to create a repository on a workstation:

{{Cmd
|cd ~/src
|mkdir hello
|cd hello
|touch README.TXT
|git init
}}

You're done.  You've created a local repository. It's in the {{Path|.git}} folder, so don't delete your {{Path|hello}} folder unless you mean to lose everything.

{{Note|Your repository is the {{Path|.git}} folder inside the main {{Path|hello}} folder.  If you delete {{Path|~/src/hello}}, then your repo is gone.}}

Now, let's say we make some edits:

{{Cmd
|cat "Hello, world!" >> readme.txt
}}

The new {{Path|readme.txt}} file must be added (staged) before it can be included in the git repository. Use the next commands to stage the file and to make the commit:
{{Cmd
|git add readme.txt
|git commit -m "Added text to readme.txt"
}}

=== Server ===

In this section will cover setting up a Git server for remote project management through SSH.

{{Note|The Git server is only necessary if you intend to have an ''unauthenticated read-only server'' for people to get code from. See here: http://git-scm.com/book/en/Git-on-the-Server-Git-Daemon}}

If not sure then skip this section.

==== Initial setup ====

Start by creating the needed group, user, and home directory.
The user uses the <code>git-shell</code> to prevent normal shell access.
{{RootCmd
|groupadd git
|useradd -m -g git -d /var/git -s /usr/bin/git-shell git}}


Edit {{Path|/etc/conf.d/git-daemon}} to change user from ''"nobody"'' to ''"git"'' and start the daemon:

{{FileBox|filename=/etc/conf.d/git-daemon|lang=bash|1=
...
GIT_USER="git"
GIT_GROUP="git"
...
}}

{{RootCmd|/etc/init.d/git-daemon start}}

=== SSH Keys ===

[[SSH]] is the preferred method to handle the secure communications between client and server.
For Git to work properly, you must have private/public key logins enabled and all client public keys added to {{Path|/var/git/.ssh/authorized_keys}}.

For more information and instructions on how to enable, create, and share keys, please see the [[SSH#Passwordless_Authentication|SSH - Passwordless Authentication]] wiki page.

{{Note|'''this step must be completed before continuing'''}}

== Usage ==

=== Create a repository and make the initial commit ===

On the server:

Become user <code>git</code> to make sure all objects are owned by this user:

{{RootCmd|su git}}

Create a bare repository:

{{Cmd
|cd /var/git
|mkdir /var/git/newproject.git
|cd /var/git/newproject.git
|git init --bare}}

On a the client station:

{{Cmd
|mkdir ~/newproject
|cd ~/newproject
|git init
|touch test
|git add test
|git config --global user.email "larry@gentoo.org"
|git config --global user.name "larry_the_cow"
|git commit -m 'initial commit'
|git remote add origin git@example.com:newproject.git
|git push origin master}}

=== Common commands ===

Clone a repository:

{{Cmd|git clone git@example.com:newproject.git}}

=== Repository management via GUI ===

Git ships with a tk GUI. Invoke it using:

{{cmd|gitk
|prompt=user ~/repository.git $}}

=== Serving and managing repositories via builtin web interface ===

Git comes with a built-in web interface called <tt>[http://git-scm.com/docs/gitweb gitweb]</tt>. It can run on a variety of web servers:

* [[lighttpd]] - No configuration necessary.
* [[Apache]] - Some configuration necessary.
* [[nginx]]

In order to use <tt>gitweb</tt> be sure one of the three web servers has been installed and <tt>git</tt> has been built with the <code>cgi</code> USE flag.

There is a simple setup script that will create a working default configuration, start a web server (the default configuration is for <tt>lighttpd</tt>) and open the URL in a browser. Navigate to the repositories directory. Once inside type:

{{Cmd|git instaweb
|prompt=user ~/repository.git $}}

If <tt>git instaweb</tt> opens a 404 error, enable the <code>cgi</code> USE flag and rebuild <code>git</code>.

==== Help ====

Find out more about the options using the the built-in help output:

{{Cmd|git help instaweb
|prompt=user ~/repository.git $}}

For additional help consider reading the contextual man page:

{{Cmd|man git instaweb
|prompt=user ~/repository.git $}}

==== Configuration ====

Per-project configuration can be set in the repositories {{Path|.git/config}} file:

{{Cmd|vim .git/config
|prompt=user ~/repository.git $}}

Values in this file should be specific in an [https://en.wikipedia.org/wiki/INI_file ini-style format]:

{{FileBox|filename=.git/config|title=Setting lighttpd values for instaweb in a repository's configuration|1=
[instaweb]
        ; local = true
        httpd = lighttpd
        port = 8080
        browser = elinks
        modulePath = /usr/lib64/lighttpd/
}}

Adjust the values as needed. If the <code>local = true</code> light is uncommented (remove the <code>;</code>) <tt>instaweb</tt> will only be connectable from the localhost.

== See also ==

* [[Cgit]] - A fast web-interface (CGI) for <tt>git</tt>.
* [[Gitolite]]
* [[Git/tracking-etc]]
* [[CVS]]

== External resources ==

* Video tutorials: http://try.github.io/levels/1/challenges/1
* Free, good, basic first-time tutorial: https://www.codeschool.com/courses/git-real
* [http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/ git flow documentation], client side scripts to make git repository management a snap.
* The Official [http://git-scm.com/book/ Git Handbook]

[[Category:Software]]
