The '''{{Path|/etc/portage/bashrc}}''' file is [[Article description::a global {{Path|bashrc}} file.]] It is similar to the {{Path|bashrc}} files under {{Path|/etc/portage/env/}}, except always sourced for every package. It can either be used to setup a global environment common to all ebuilds, or as an alternative to the {{Path|/etc/portage/env}} files allowing Portage administrators to handle all the necessary conditional code manually.

== Gotchas ==

* It is important to note that this file will be sourced multiple times during the build, at least once per phase plus several other times. You must therefore control when your code is executed using e.g. <var>EBUILD_PHASE</var>, <var>EBUILD_PHASE_FUNC</var> (EAPI 5), or otherwise avoid using the global scope by only putting code into hook functions (e.g. <code>pre_pkg_setup()</code>). See [https://bugs.gentoo.org/show_bug.cgi?id=250240 bug 250240]. It is especially important to restrict this in order to avoid unintentionally clobbering changes made throughout the ebuild. For example, if flag-o-matic code for a specific ebuild would normally overwrite default <var>CFLAGS</var> you've set, you wouldn't want to blindly squash those by repeatedly resetting them with each phase function (except on a per-package basis, when you know what you're doing).

* The global {{Path|bashrc}} isn't sourced for the first time until after dependency resolution. If run with <code>--ask</code>, {{Path|bashrc}} is sourced for the first time shortly after interactive confirmation. Therefore, it isn't a complete replacement for the global {{Path|make.conf}}. Anything that must be in the environment immediately can't be set by {{Path|bashrc}} such as USE flags, <var>FEATURES</var>, etc. The portage documentation doesn't provide a complete list of contradictions, so be careful.

* Portage doesn't save the initial environment prior to being mangled by Portage's global {{Path|make.defaults}} and {{Path|make.globals}}. You therefore have no direct way of determining whether an environment variable was supplied by the user (e.g. CFLAGS), or set by portage, so you can't guarantee using the environment by your {{Path|bashrc}} to control behavior.

== See also ==

* [[Handbook:AMD64/Portage/Advanced#Using_.2Fetc.2Fportage.2Fbashrc_and_affiliated_files]]
* [[Handbook:X86/Portage/Advanced#Using /etc/portage/bashrc and affiliated files]]
* [[:/etc/portage]]
* [[:/etc/portage/patches]]
* [http://dev.gentoo.org/~zmedico/portage/doc/man/portage.5.html Portage Manpage]
* [[Knowledge Base:Overriding environment variables per package]]

[[Category:Portage]]
