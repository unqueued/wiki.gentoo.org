== Synopsis ==

This is a global bashrc similar to the bashrc files under <code>/etc/portage/env/</code>, except always sourced for every package. It can either be used to setup a global environment common to all ebuilds, or as an alternative to the <code>/etc/portage/env</code> files allowing you to handle all the necessary conditional code manually.

=== Gotchas ===

* It is important to note that this file will be sourced multiple times during the build, at least once per phase plus several other times. You must therefore control when your code is executed using e.g. <code>EBUILD_PHASE</code>, <code>EBUILD_PHASE_FUNC</code> (EAPI 5), or otherwise avoid using the global scope by only putting code into hook functions (e.g. <code>pre_pkg_setup()</code>). See: [https://bugs.gentoo.org/show_bug.cgi?id=250240 bug 250240]. It is especially important to restrict this in order to avoid unintentionally clobbering changes made throughout the ebuild. For example, if flag-o-matic code for a specific ebuild would normally overwrite default CFLAGS you've set, you wouldn't want to blindly squash those by repeatedly resetting them with each phase function (except on a per-package basis, when you know what you're doing).

* The global bashrc isn't sourced for the first time until after dependency resolution. If run with <code>--ask</code>, bashrc is sourced for the first time shortly after interactive confirmation. Therefore, it isn't a complete replacement for the global <code>make.conf</code>. Anything that must be in the environment immediately can't be set by bashrc such as USE flags, FEATURES, etc. The portage documentation doesn't provide a complete list of contradictions, so be careful.

* Portage doesn't save the initial environment prior to being mangled by Portage's global make.defaults and make.globals. You therefore have no direct way of determining whether an environment variable was supplied by the user (e.g. CFLAGS), or set by portage, so you can't guarantee using the environment by your bashrc to control behavior.

== Example ==

This is an example global bashrc that acts as a minimal loader for user-defined hooks. There are many other good examples out there. It is primarily for setting up CFLAGS and to further define hook functions on a per-package basis. You define "flag groups" by adding to the <code>groups</code> 2D associative array within the <code>setupFlags()</code> function. Calling this function with an array name and list of group names will create an associative array whose keys are set to the union of the flags in the given groups. You can then manipulate that array per-package by defining hook functions whose names are defined in the <code>categoryDefs</code> array of the <code>runHooks()</code> function.

{{File|/etc/portage/bashrc||<nowiki>#!/usr/bin/env bash
# /etc/portage/bashrc
# Dan Douglas <ormaaj@gmail.com>

[[ $EBUILD_PHASE != setup ]] && return

# Set up the initial associative array of CFLAGS and CXXFLAGS. 
# Takes an array name to assign and optionally the names of "flag groups" to include.
# setupFlags arrname groupname [ groupname ... ]
setupFlags() {
	if [[ $FUNCNAME != "${FUNCNAME[1]}" ]]; then
		if [[ -z $1 ]]; then
			eerror "${FUNCNAME}: Must pass at least a non-empty associative array name argument."
			return 1
		else
			# Base CFLAG groups
			local -A groups=(
				[base]='(-march=native -Ofast -mmmx -pipe)'
				[graphite]='(-floop-interchange -floop-strip-mine -floop-block)'
				[debug]='(-ggdb)'
				[dragonegg]='(-fplugin=/usr/lib64/llvm/dragonegg.so -fplugin-arg-dragonegg-enable-gcc-optzns)'
			)

			local x
			for x in "${@:2}"; do
				if ${groups[$x]:+false}; then
					eerror "${FUNCNAME}: Invalid flag group name: ${x}"
					return 1
				else
					local -a "y=${groups[$x]}" 'z+=("${y[@]}")'
				fi
			done
			"$FUNCNAME" "$1" "$(printf '[%q]= ' "${z[@]}")"
		fi
	else
		unset -v x y z groups 
		eval "${1}=(${2})"
	fi
}

# runHooks "$CATEGORY" "$PN"
runHooks() {
	local x
	for x; do
		[[ $x ]] || return
	done

	# Define mappings from package names to hook functions.
	local -A categoryDefs=(
		[dev-db]='([sqlite]=noFast)'
		[dev-util]='([valgrind]=noFast)'
		[media-gfx]='([digikam]=dgKamFix)'
		[sys-devel]='([binutils]=xdoBinutils)'
	) ${1:+${categoryDefs[$1]:+"packageDefs=${categoryDefs[$1]}"}}

	# If a hook is defined for the current package, run it. Otherwise setup
	# default flags. Remember if you want to use default flags as a base for a
	# hook, you must run setupFlags within the hook. This allows using
	# different default flag groups as a base per-package.
	local -A flags
	if declare -f "${packageDefs[$2]:-:}" >/dev/null 2>&1; then
		${2:+"${packageDefs[$2]:-false}"} || return
		${2:+unset -f "${packageDefs[$2]}"}
		einfo "Hook function: ${packageDefs[$2]} -- finished successfully. :)"
	else
		# Each defined key of the "flags" array will become part of CFLAGS.
		setupFlags flags base graphite debug || die 'setupFlags failed'
		einfo "No hook function defined for ${1}/${2} -- used default flag groups. :)"
	fi
	export C{,XX}"FLAGS=${!flags[*]}"
	einfo "bashrc computed cflags: $(declare -p CFLAGS)"
}

# Clean up our mess.
cleanup() {
	unset -f setupFlags runHooks main cleanup
}

main() {
	(( BASH_VERSINFO >= 4 )) || die 'bashrc requires at least Bash 4. Upgrade!'

	local -a shopts=(extglob lastpipe)
	local opt
	for opt in "${!shopts[@]}"; do
		if shopt -q "${shopts[opt]}"; then
			unset -v 'shopts[opt]'
		else
			shopt -s "${shopts[opt]}"
		fi
	done
	(( ${#shopts[@]} )) && trap 'trap RETURN; shopt -u "${shopts[@]}"' RETURN

	runHooks "$CATEGORY" "$PN" || die 'hook failed'

	I_PROMISE_TO_SUPPLY_PATCHES_WITH_BUGS=1
	cleanup
}

#########
# All package hooks below
# Some examples are given below.
# If you want to run a hook function for a particular package,
# the function and category/package names should be defined
# above in the "categoryDefs" array.
#########

dgKamFix() {
	setupFlags flags base graphite debug || return
	export MYSQL_TOOLS_PATH=/usr/share/mysql/scripts
}

doBinutils() {
	setupFlags flags base graphite debug || return
	export EXTRA_ECONF=--enable-gold=default
}

_doKsh() {
	setupFlags flags base graphite debug || return
	pre_pkg_setup() {
		local d='printf "<%s> " "${FUNCNAME[@]}"; echo; inherit flag-o-matic; trap -- DEBUG RETURN'
		local -a dcmd=( trap "$(printf %q "$d")" DEBUG )
		trap "${dcmd[*]}" RETURN
		printf "<%s> " "${FUNCNAME[@]}"; echo
	}

	pre_src_prepare() {
		append-flags "-fplugin=/usr/$(get_libdir)/llvm/dragonegg.so" -fplugin-arg-dragonegg-enable-gcc-optzns
		einfo "${FUNCNAME}: applied - $_"

		local x srcdir=/home/smorg/doc/programs/ast-open
		pushd "$srcdir"
		addwrite "$srcdir"
		git checkout 2012-05-15
		for x in **/Mamfile; do
			[[ -d ${WORKDIR}/${x%Mamfile} ]] && cp "$x" "${WORKDIR}/${x%Mamfile}"
		done

		git checkout master
		adddeny "$srcdir"
		popd
	}
}

# This demonstrates how to modify CFLAGS. It's as simple as setting up defaults
# by calling setupFlags(), then modifying the returned associative array keys.
noFast() {
	setupFlags flags base graphite debug || return
	unset -v 'flags[-Ofast]'
	flags[-O3]=
}

doChromium() {
	setupFlags flags base graphite debug || return
	pre_src_configure() {
		egyp() {
			replace-flags -O2 -O3
			append-flags -floop-interchange -floop-strip-mine -floop-block
			local -a cmd=( build/gyp_chromium --depth=. "$@" )
			printf '<%q> ' "${cmd[@]}" >&2
			"${cmd[@]}"
		}
	}
}

main "$@"

# vim: set fenc=utf-8 ff=unix ft=sh :
</nowiki>}}

==See also==
* [[:/etc/portage]]
* [http://dev.gentoo.org/~zmedico/portage/doc/man/portage.5.html Portage Manpage]
* [[Knowledge Base:Overriding environment variables per package]]

[[Category:Portage]]
