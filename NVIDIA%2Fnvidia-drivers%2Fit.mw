<languages />

{{Metadata|abstract=nvidia-drivers contains the proprietary graphics driver for NVIDIA graphic cards. An open source alternative is nouveau.}}

[[Article description::The {{Package|x11-drivers/nvidia-drivers}} package contains the ''proprietary'' graphics driver for NVIDIA graphic cards.]] An open source alternative is [[nouveau]].

This proprietary driver contains some wrapper functions that will compile against the Linux kernel and a binary blob that does the heavy lifting for talking to the card. The driver consists of two parts: a kernel module and an X11 driver. Both parts are included in a single package. Due to the way the drivers are packaged, it is necessary to make some choices ''before'' installing the drivers.

The package contains the latest drivers from NVIDIA with support for most NVIDIA graphic cards, with several versions available depending on the age of the card. It uses an eclass to detect what kind of card the system is running so that it installs the proper version.

== Compatibilità hardware ==

The {{Package|x11-drivers/nvidia-drivers}} package supports a range of available NVIDIA cards. Multiple versions are available for installation, depending on the card(s) that the system has. See the official NVIDIA documentation, [http://www.nvidia.com/object/IO_32667.html What's a legacy driver?], to find out what version of {{Package|x11-drivers/nvidia-drivers}} should be used. A pretty decent way to find this out through [http://www.nvidia.com/Download/Find.aspx an interactive form]. Enter the graphics card that is used by the system (mind the Legacy option in the 'Product Type' field) and the form should end up with the best supported version.

Se la scheda è stata identificata come legacy, mascherare le più recenti releases di {{Package|nvidia-drivers}}, cioè

{{FileBox|filename=/etc/portage/package.mask|title=Mascherare i drivers con versione maggiore della 174|1=
>x11-drivers/nvidia-drivers-174
}}

Si noti che Gentoo non fornisce la versione 71.86.xx. Se il sistema dispone di una scheda che ha bisogno di queste versioni di drivers, allora è consigliabile utilizzare il driver [[nouveau]].

== Installazione ==

=== Kernel ===

As mentioned above, the NVIDIA kernel driver installs and runs against the current kernel. It builds as a module, so the kernel must support the loading of kernel modules (see below).

Il modulo del kernel ({{Path|nvidia.ko}}) è costituito da una parte proprietaria (comunemente nota come "binary blob") che pilota il chip grafico, e una parte open source (detta "glue") che durante il fuzionamento opera come intermediario tra la parte proprietaria e il kernel. Questi tutti hanno bisogno di lavorare bene insieme, altrimenti l'utente potrebbe trovarsi di fronte alla perdita di dati (attraverso kernel panic, X server crashing con i dati non salvati nelle applicazioni X) e anche guasti hardware (surriscaldamento e altre questioni di alimentazione relative che potrebbero venire in mente).

==== Compatibilità del kernel ====

Di tanto in tanto, una nuova release del kernel cambia l'ABI interno per i drivers, il che significa che tutti i drivers che utilizzano tali ABI devono essere modificati di conseguenza. Per i drivers open source, in particolare quelli distribuiti con il kernel, questi cambiamenti sono banali da risolvere dal momento che l'intera catena di chiamate tra i drivers e le altre parti del kernel possono essere riviste abbastanza facilmente. Per i drivers proprietari come nvidia.ko, non è proprio la stessa cosa. Quando l'ABI interno viene cambiato non è possibile sistemare semplicemente il "glue", perché nessuno sa come tale "glue" (collante) è utilizzato dalla parte proprietaria. Anche dopo essere riusciti a sistemare le cose e anche dopo che queste sembra funzionino bene, l'utente rischia ancora l'esecuzione di nvidia.ko nel nuovo kernel non supportato, e ciò porterà alla perdita di dati e guasti hardware.

When a new, incompatible kernel version is released, it is probably best to stick with the newest supported kernel for a while. NVIDIA usually takes a few weeks to prepare a new proprietary release they think is fit for general use. Just be patient. If absolutely necessary, then it is possible to use the epatch_user command with the nvidia-drivers ebuilds: this allows the user to patch nvidia-drivers to somehow fit in with the latest, unsupported kernel release. Do note that neither the nvidia-drivers maintainers nor NVIDIA will support this situation. The hardware warranty will most likely be void, Gentoo's maintainers cannot begin to fix the issues since it's a proprietary driver that only NVIDIA can properly debug, and the kernel maintainers (both Gentoo's and upstream) will certainly not support proprietary drivers, or indeed any "tainted" system that happens to run into trouble.

Se per configurare il kernel è stato utilizzato {{c|genkernel all}}, ogni cosa è impostata. Se non è stato utilizzato, invece, va fatto un doppio controllo nella configurazione del kernel, in modo che il seguente supporto sia abilitato:

{{KernelBox|title=Enable loadable module support|1=
[*] Enable loadable module support --->
}}

Abilitare anche il "Memory Type Range Register" nel kernel:

{{KernelBox|title=Enable MTRR support|1=
Processor type and features --->
   [*] MTRR (Memory Type Range Register) support
}}

Se il sistema ha una scheda grafica AGP, abilitare opzionalmente  l'agpgart supportato dal kernel, sia compilato direttamente nel kernel sia come modulo. Se il modulo agpgart compilato direttamente nel kernel non viene utilizzato, i drivers utilizzeranno la propria implementazione agpgart, chiamata NvAGP. Su alcuni sistemi, questa si comporta meglio rispetto alla agpgart compilata direttamente sul kernel, e su altri, invece, si comporta peggio. Valutare la scelta sul proprio sistema per ottenere le migliori prestazioni. Quando incerti sul da farsi, utilizzare l'agpgart compilato nel kernel:

{{KernelBox|title=Enable agpgart support|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note|Su amd64, IOMMU controlla le impostazioni di agpgart.}}

{{Important|For x86 and AMD64 processors, the in-kernel [[framebuffer]] driver conflicts with the binary driver provided by NVIDIA. When compiling the kernel for these CPUs, completely remove support for the in-kernel driver as shown:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Now make sure the nouveau driver is disabled:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        < > Nouveau (nVidia) cards
}}
}}

Un'alternativa al framebuffer è [[uvesafb]], che può essere installato parallelamente al pacchetto {{Package|x11-drivers/nvidia-drivers}}. 

{{Important|For x86 and AMD64 processors, the [[uvesafb]] driver conflicts with the binary driver provided by NVIDIA above 361.28 versions.}}

For (U)EFI systems, uvesafb will not work. Be warned that enabling ''efifb'' support in kernel (<code>CONFIG_FB_EFI=y</code>) causes intermittent problems with the initialization of the NVIDIA drivers. There is no known alternative framebuffer for (U)EFI systems.

Gli ebuild '''nvidia-drivers''' rilevano automaticamente la versione del kernel basato sul link simbolico {{Path|/usr/src/linux}}. Si prega di assicurarsi che tale link simbolico punti ai sorgenti corretti e che il kernel sia configurato correttamente. Si prega di consultare la sezione  "Configuring the Kernel" del [[Handbook:Main_Page|Gentoo Handbook]] per dettagli sulla configurazione del kernel.

Primo, scegliere la giusta sorgente del kernel utilizzando {{c|eselect}}. Quando si utilizza la versione 3.7.10 del pacchetto {{Package|sys-kernel/gentoo-sources}} per esempio, la lista dei kernel potrebbe essere simile a questa:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the kernel that the symbolic link points to.

Se il link simbolico non punta ai sorgenti corretti, aggiornare il collegamento selezionando il numero della versione del kernel desiderata, come nell'esempio precedente.

{{RootCmd|eselect kernel set 1}}

== Configurazione ==

=== Drivers === 

Ora è tempo di installare i drivers. Primo, segui la guida [[Xorg/Guide|X Server Configuration Guide]] e imposta <code>VIDEO_CARDS="nvidia"</code> su {{Path|/etc/portage/make.conf}}. Durante l'installazione del server X, verrà installata la versione corretta del pacchetto {{Package|x11-drivers/nvidia-drivers}}.

{{Note|The drivers can be installed with the <code>tools</code> USE flag. This will install {{c|nvidia-settings}}, a handy graphical tool for monitoring and configuring several aspects of the NVIDIA card.}}

{{Important|Every time a [[Kernel/Upgrade|kernel is built]], it is necessary to reinstall the NVIDIA kernel modules. An easy way to rebuild the modules installed by ebuilds (such as {{Package|x11-drivers/nvidia-drivers}}) is to run {{c|emerge @module-rebuild}}.}}

Una volta terminata l'installazione, eseguire il comando {{c|modprobe nvidia}} per caricare il modulo del kernel in memoria. Se si tratta di un aggiornamento, rimuovere il modulo precedente.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Per evitare di dover caricare manualmente il modulo ad ogni avvio, per far si che questo sia fatto automaticamente ogni volta che il sistema viene avviato, editare {{Path|/etc/conf.d/modules}} ed aggiungerci <code>nvidia</code>.

{{Important|Se <code>agpgart</code> è compilato come modulo, aggiungere anche questo su {{Path|/etc/conf.d/modules}}.}}

=== Firmare i moduli del kernel (opzionale) ===

{{Note|L'informazione di questa sezione non è necessaria per i sistemi che non implementano i moduli del kernel firmati. Potete saltarla.}}

If secure boot kernel signing is used, then the NVIDIA kernel modules need to be signed before they can be loaded.

This can be accomplished by using the kernel-provided {{c|perl}} script as follows.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

Come per la versione del driver 358.09, è stato fatto un nuovo modulo per la gestione della modalità monitor e per questa versione del driver deve essere firmato tale modulo.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Once the modules are signed, the driver will load as expected on boot up. This module signing method can be used to sign other modules too - not only the nvidia-drivers. Just modify the path and corresponding module accordingly.

=== L'X server ===

Una volta che i driver appropriati sono installati, configurare il server X per utilizzare il driver <code>nvidia</code> invece che quello di default <code>nv</code>.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Run {{c|eselect}} so that the X server uses the NVIDIA GLX libraries:

{{RootCmd|eselect opengl set nvidia}}

=== Autorizzazioni ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Abilitazione del supporto globale nvidia ===

Alcuni pacchetti, come ad esempio {{Package|media-video/mplayer}} e {{Package|media-libs/xine-lib}}, utilizzano una USE flag locale chiamata <code>xvmc</code> la quale abilita il supporto XvMCNVIDIA, utile quando si guardano filmati ad alta risoluzione. Aggiungere <code>xvmc</code> nella variabile USE sul file {{Path|/etc/portage/make.conf}} o aggiungerla come USE flag su {{Package|media-video/mplayer}} e/o {{Package|media-libs/xine-lib}} su {{Path|/etc/portage/package.use}}.

Le serie GeForce 8 e quelle successive sono dotate di supporto VDPAU che ha sostituito il supporto  XvMCNVIDIA. Vedere l'articolo [[VDPAU]] per abilitare il supporto VDPAU.

Ci sono anche alcune applicazioni che utilizzano la USE flag <code>nvidia</code>, così che potrebbe essere una buona idea aggiungerla su {{Path|/etc/portage/make.conf}}.

Quindi, eseguire {{c|emerge -uD --newuse @world}} per ricompilare le applicazioni che beneficiano della variazione della USE flag.

=== Utilizzare lo strumento di impostazioni nVidia ===

NVIDIA also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as part of {{Package|x11-drivers/nvidia-drivers}} with the <code>tools</code> USE flag set.

=== Abilitazione OpenGL/OpenCL ===

Per abilitare OpenGL e OpenCL attraverso il dispositivo, eseguire:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Assicurarsi che il server Xorg non sia in esecuzione durante queste variazioni.

== Utilizzo ==

=== Testare la scheda ===

To test the NVIDIA card, fire up X and run {{c|glxinfo}}, which is part of the {{Package|x11-apps/mesa-progs}} package. It should say that direct rendering is activated:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Per monitorare gli FPS, eseguire {{c|glxgears}}.

== Risoluzione dei problemi ==

For an overview of the currently open bugs reported against the {{Package|x11-drivers/nvidia-drivers}} package, take a look at the {{Bug|nvidia-drivers|search=package}}.

=== FATAL: modpost: GPL-incompatible module *.ko uses GPL-only symbol ===

When the ebuild is complaining about the 'mutex_destroy' GPL-only symbol:

{{RootCmd|emerge nvidia-drivers|output=<pre>
FATAL: modpost: GPL-incompatible module nvidia.ko uses GPL-only symbol 'mutex_destroy' 
</pre>}}

Be sure to disable <var>CONFIG_DEBUG_MUTEXES</var> in the kernel's {{Path|.config}} file, as suggested by [https://forums.gentoo.org/viewtopic-p-7964326.html this forum thread].

=== Il driver non viene inizializzato quando gli interrupt MSI sono abilitati ===

Il driver Linux NVIDIA utilizza Message Signaled Interrupts (MSI) come impostazione predefinita. Questo offre vantaggi di compatibilità e scalabilità, dovuti principalmente alla prevenzione di condivisione IRQ. Alcuni sistemi hanno problemi di supporto MSI, mentre lavorano bene con i virtual wire interrupts. Questi problemi si manifestano come l'incapacità di lanciare X con il driver NVIDIA, o errori di inizializzazione CUDA.

MSI interrupts può essere disabilitato tramite il parametro del modulo del kernel NVIDIA <code>NVreg_EnableMSI=0</code>. Questo può essere impostato nella linea di comando durante il caricamento del modulo, o più appropriatamente tramite i files di configurazione del modulo del kernel della distribuzione (come quelli sotto {{Path|/etc/modprobe.d/}}).

Per esempio:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=0660 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Ottenere l'accelerazione 2D su macchine con memoria da 4 GB in su ===

When NVIDIA 2D acceleration is giving problems, then it is likely that the system is unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Ogni riga dovrebbe contenere <code>write-back</code> o <code>write-combining</code>. Quando una linea contiene <code>uncachable</code> è necessario variare l'impostazione del BIOS per risolvere.

Riavviare e accedere al BIOS, poi trovare le impostazioni MTRR (probabilmente sotto "Impostazioni della CPU"). Modificare l'impostazione da <code>continuous</code> a <code>discrete</code> e avviare Linux. A questo punto non c'è più <code>uncachable</code> e l'accelerazione 2D ora funziona senza errori.

=== "no such device" appare quando si cerca di caricare il modulo del kernel ===

Questo in genere è causato da uno dei seguenti problemi:

# The system does not have a NVIDIA card at all.  Check {{c|lspci}} output to confirm that the system has a NVIDIA graphics card installed and detected.
# The currently installed version of {{Package|x11-drivers/nvidia-drivers}} does not support the installed graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Another kernel driver has control of the hardware. Check {{c|lspci -k}} to see if another driver like "nouveau" is bound to the graphics card. If so, disable or blacklist this driver.

=== Xorg dice che non può trovare nessuno schermo ===

Quando l'avvio del sistema finisce con uno schermo nero o riga di comando invece dell'interfaccia grafica GUI, digitare {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} per spostarsi su una console virtuale. Successivamente eseguire:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

per vedere il risultato di Xorg. Se uno dei primi errori è che Xorg non può trovare nessuno schermo, seguire i passi successivi per risolvere il problema.

Dovrebbe essere sufficiente eseguire il seguente comando prima dell'avvio:

{{RootCmd|/opt/bin/nvidia-xconfig}}

Ma se non funziona, eseguire {{c|lspci}} e notare che la scheda video inizia in questo modo:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

Prendere il primo bit, <code>01.00.0</code> e metterlo nel file {{Path|/etc/X11/xorg.conf}} con l'opzione <code>BusID</code>:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering non è abilitato ===

Se direct rendering non funziona, questo può derivare dal fatto che il kernel ha Direct Rendering Manager attivato, il quale va in conflitto con il driver. Vedere lo stato di direct rendering seguendo le istruzioni nella sezione [[#Testing the card|Testing the card]].

Per prima cosa, disabilitare Direct Rendering Manager (<code>CONFIG_DRM</code>) nel kernel:

{{KernelBox|title=Disabilitare Direct Rendering Manager|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Successivamente, ricostruire il pacchetto {{Package|x11-drivers/nvidia-drivers}} dal momento che il driver possa aver compilato il DRM del kernel. Questo dovrebbe risolvere il problema.

=== Riproduzione video a scatti o lenta ===

Lately there seems to be some breaking with playback of some types of video with the NVIDIA binary drivers, causing slow video playback or significant stuttering. This problem seems to be occurring within the Intel CPU Idle replacement instead of the common ACPI CPU idling method for certain CPU's.

Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVIDIA Powermizer feature, or setting Powermizer to maximum performance within {{c|nvidia-settings}} has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <code>mplayer-nodeint</code> with something similar to <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> as a work around.)

=== Nessuna sincronizzazione verticale (no VSync, lacerazione) nelle applicazioni OpenGL ===

Aggiungere la seguente opzione alla sezione screen, previene l'effetto lacerazione su GTX 660, 660 Ti, e probabilmente qualche altra GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== Configurazione per esperti ==

=== Documentazione ===

Anche il pacchetto {{Package|x11-drivers/nvidia-drivers}} viene fornito con una documentazione completa. Questo è installato dentro {{Path|/usr/share/doc}} e può essere consultato con il seguente comando:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Parametri del modulo del kernel ===

The <code>nvidia</code> kernel module accepts a number of parameters (options) which can be used to tweak the behavior of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run {{c|update-modules}} after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

{{Warning|Pay close attention to this section as these kernel options can enable features that the hardware may or may not support. These options are not forgiving, so be careful with the parameters. Do not made any changes without validating and double-checking that the change is needed.}}

{| class="table table-condensed table-striped"
|-
! Attribute !! Default !! Description
|-
| <code>NVreg_DeviceFileUID</code> || <code>0</code> || Modify the user ID for the device file. The default value sets it to the {{c|root}} user. Setting this to another user ID will make the driver module create the device file with access available to that user ID.
|-
| <code>NVreg_DeviceFileGID</code> || <code>27</code> || Modify the Group ID for the device file. The default value sets it to the {{c|video}} group.
|-
| <code>NVreg_DeviceFileMode</code> || Undefined || Set the permissions for the device file. A value of 0660 grants the owner and group-owner read-write access while other users cannot access the device file.
|-
| <code>NVreg_ModifyDeviceFiles</code> || <code>1</code> || Instruct the driver to enable or disable dynamic device file management.
|-
| <code>NVreg_EnablePCIeGen3</code> || <code>0</code> || Enable PCIe Gen 3.x support. If the system supports this 8GT high speed bus then enable it with this module option flag. When this is enabled but the system does not support Gen 3.0, the behavior of the system can become irratic and unstable. Some have even reported damage to hardware enabling this when it is not properly supported. By default the Nvidia driver is set to use PCIe Gen 2.x for compatibility reasons.
|-
| <code>NVreg_UsePageAttributeTable</code> || <code>0</code> || This is one of the latest and newest additions to the Nvidia driver modules option. It allows the driver to take full advantage of the PAT technology - a newer way of allocating memory, replacing the older Memory Type Range Register (MTRR) method. The PAT method creates a partition type table at a specific address mapped inside the register and utilizes the memory architecture and instruction set more efficiently and faster. If the computer supports PAT and the feature is enabled in the kernel then this flag can be enabled. Without PAT support, users may experience unstable performance and even crashes if this is enabled. So be careful with these options.
|-
| <code>NVreg_EnableVia4x</code> || <code>0</code> || Enable AGP 4x mode in the the NVIDIA driver on Via-chipset-powered systems. Some of these hardware configurations would not work properly in AGP 4x mode when others would. The default leaves it at AGP 2x mode.
|-
| <code>NVreg_EnableALiAGP</code> || <code>0</code> || On ALi1541 and ALi1647 chipsets, AGP support is by default disabled by the NVIDIA drivers. The value specifies the speed factor to use, so the values 1, 2, 4 and 8 represent AGP 1x, 2x, 4x and 8x respectively. NVIDIA does not recommend changing the value as it may lead to unstable systems.
|-
| <code>NVreg_ReqAGPRate</code> || Unspecified || Forces the AGP mode on the driver. For instance, a value of 1 means AGP 1x, while a value of 4 means AGP 4x.
|-
| <code>NVreg_NvAGP</code> || || Changes the AGP Gart mode setting. Possible values are: <code>0</code> (Disable), <code>1</code> (Enable using NVIDIAs internal AGP-Gart), <code>2</code> (Enable using the Linux kernel AGP-Gart) and <code>3</code> (Enable and use any available, but try th NVIDIA internal one first).
|-
| <code>NVreg_EnableAGPSBA</code> || <code>0</code> || Disables (<code>0</code>) or enables (<code>1</code>) AGP Side Banding. For stability reasons, the setting is by default disabled, but the setting can be enabled for testing and debugging purposes. This is not supported by NVIDIA though.
|-
| <code>NVreg_EnableAGPFW</code> || <code>0</code> || Enables AGP Fast-Writes when set to <code>1</code>. Depending on the system's chipset this may cause stability issues if enabled.
|-
| <code>NVreg_Mobile</code> || <code>0</code> || Through this setting, users can force the EDID information for particular systems. This workaround is provided for mobile GPU's where EDID information is either non-functional or disabled. Potential values are <code>0</code> (Auto detection of the correct setting), <code>1</code> (Dell notebooks), <code>2</code> (non-Compa1 Toshiba laptops), <code>3</code> (All other notebooks/laptops), <code>4</code> (Compa1 Toshiba laptops) or <code>5</code> (Gateway machines).
|-
| <code>NVreg_RemapLimit</code> || <code>60</code> || Maximum amount of system memory remapping. It specifies the amount of memory that the driver will be allowed to remap through the IOMMU/SWIOTLB on a 64-bit system. Only use it if the IOMMU or SMIOTLB is larger than 64mb. NVIDIA recommends to subtract 4mb from the total amount of memory to use. For instance, the default value is <code>60</code> which is in fact 64mb. To set it to 128mb, set the value to <code>124</code>.
|-
|<code>NVreg_UpdateMemoryTypes</code> || <code>0</code> || Tweak the use of page table attributes. Possible values are: <code>0</code> (Nvidias logic mechanism), <code>1</code> (Enable the use of changed page table attributes) and <code>2</code> (Disable the use of page table attributes).
|-
|<code>NVreg_InitializeSystemMemoryAllocations</code> || <code>1</code> || Tell the NVIDIA driver to clear system memory allocations prior to using it for the GPUs. Disabling can give a slight performance boost but at the cost of increased security risks. By default the driver will wipe the allocated by zeroing out its content.
|-
| <code>NVreg_UseVBios</code> || <code>1</code> || Enable or disable the use of the video BIOS int10 code. Set to <code>0</code> to disable.
|-
| <code>NVreg_RMEdgeIntrCheck</code> || Unspecified || Enable or disable checking for edge-triggered interrupts.
|-
| <code>NVreg_EnableMSI</code> || <code>0</code> || Enable or disable PCIe-MSI capabilities. Enable this to use MSI interrupts instead of wired interrupts.
|-
| <code>NVreg_MapRegistersEarly</code> || <code>0</code> || If set to <code>1</code>, allow the driver to map the memory locations early when the system is probing the hardware instead of the default option of doing this when loaded by {{c|modprobe}} or during {{c|startx}}. This is a debugging feature.
|-
| <code>NVreg_RegisterForACPIEvents</code> || <code>1</code> || Enable the driver to register with the ACPI of the system to receive ACPI events. This can be disabled (<code>0</code>) when issues occur with ACPI or while debugging an issue. 
|}

Edit the {{Path|/etc/modprobe.d/nvidia.conf}} file, and afterwards update the module information:

{{RootCmd|update-modules}}

Scaricare il modulo <code>nvidia</code>...

{{RootCmd|modprobe -r nvidia}}

... e caricarlo nuovamente:

{{RootCmd|modprobe nvidia}}

=== Configurazioni di X avanzate ===

Anche GLX ha una vastità di opzioni che possono essere configurate. Queste controllano la configurazione di uscita TV, dual displays, la rilevazione della frequenza del monitor, ecc... Anche in questo caso, tutte le opzioni disponibili sono descritte nella documentazione.

Per utilizzare ognuna di queste opzioni, elencarle nella relativa sezione Device del file di configurazione di X (in genere {{Path|/etc/X11/xorg.conf}}). Per esempio, per disabilitare il logo splash:

{{FileBox|filename=/etc/X11/xorg.conf|title=Disabilitare il logo splash|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== Vedi anche ==

* [[nouveau & nvidia-drivers switching]] - Modalità grafica ibrida utilizzando i driver open-source.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configurare un sistema per utilizzare i driver closed-source per la grafica ibrida (modesetting).

{{Migrated|originalauthors={{Dev|SwifT}}, {{Dev|nightmorph}}, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
