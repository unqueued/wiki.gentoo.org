<languages />

{{Metadata|abstract=nvidia-drivers è il driver grafico proprietario per schede grafiche nVidia. Una alternativa open source è nouveau.}}

{{Package|x11-drivers/nvidia-drivers}} è il driver grafico proprietario per schede grafiche nVidia. Una alternativa open source è [[nouveau]].

I drivers {{Package|x11-drivers/nvidia-drivers}} vengono rilasciati da nVidia e sono costruiti per il kernel di Linux. Essi contengono una parte binaria che fa il lavoro pesante per dialogare con la scheda video. I driver sono costituiti da due parti, un modulo del kernel, e un driver X11. Entrambe le parti sono incluse in un singolo pacchetto. A causa del modo in cui nVidia ha creato i suoi drivers, è necessario fare delle scelte prima di installarli.

Il pacchetto {{Package|x11-drivers/nvidia-drivers}} contiene i driver più recenti di nVidia con supporto per tutte le schede video, con diverse versioni disponibili a seconda dell'età della scheda. Si avvale di un eclass per rilevare che tipo di scheda è in esecuzione sul sistema, in modo che installi la versione corretta.

== Compatibilità hardware ==

Il pacchetto {{Package|x11-drivers/nvidia-drivers}} supporta una vasta gamma di schede nVidia disponibili. Versioni multiple sono disponibili per l'installazione, a seconda della scheda video che ha il sistema. Consultare la documentazione ufficiale di nVidia, [http://www.nvidia.com/object/IO_32667.html What's a legacy driver?], per scoprire che versione di {{Package|x11-drivers/nvidia-drivers}} dovrebbe essere installata. Un modo abbastanza buono per scoprirlo è attraverso [http://www.nvidia.com/Download/Find.aspx  an interactive form]. Inserire la scheda grafica che viene utilizzata dal sistema (ricordare l'opzione Legacy nel campo 'Tipo di prodotto') e il form dirà qual'è la versione più supportata.

Se la scheda è stata identificata come legacy, mascherare le più recenti releases di {{Package|nvidia-drivers}}, cioè

{{FileBox|filename=/etc/portage/package.mask|title=Mascherare i drivers con versione maggiore della 174|1=
>x11-drivers/nvidia-drivers-174
}}

Si noti che Gentoo non fornisce la versione 71.86.xx. Se il sistema dispone di una scheda che ha bisogno di queste versioni di drivers, allora è consigliabile utilizzare il driver [[nouveau]].

== Installazione ==

=== Kernel ===

Come accennato in precedenza, il driver del kernel nVidia installa ed esegue in opposizione al kernel corrente. Se costruito come modulo, il kernel deve supportare il caricamento dei moduli (vedi sotto).

Il modulo del kernel ({{Path|nvidia.ko}}) è costituito da una parte proprietaria (comunemente nota come "binary blob") che pilota il chip grafico, e una parte open source (detta "glue") che durante il fuzionamento opera come intermediario tra la parte proprietaria e il kernel. Questi tutti hanno bisogno di lavorare bene insieme, altrimenti l'utente potrebbe trovarsi di fronte alla perdita di dati (attraverso kernel panic, X server crashing con i dati non salvati nelle applicazioni X) e anche guasti hardware (surriscaldamento e altre questioni di alimentazione relative che potrebbero venire in mente).

==== Compatibilità del kernel ====

Di tanto in tanto, una nuova release del kernel cambia l'ABI interno per i drivers, il che significa che tutti i drivers che utilizzano tali ABI devono essere modificati di conseguenza. Per i drivers open source, in particolare quelli distribuiti con il kernel, questi cambiamenti sono banali da risolvere dal momento che l'intera catena di chiamate tra i drivers e le altre parti del kernel possono essere riviste abbastanza facilmente. Per i drivers proprietari come nvidia.ko, non è proprio la stessa cosa. Quando l'ABI interno viene cambiato non è possibile sistemare semplicemente il "glue", perché nessuno sa come tale "glue" (collante) è utilizzato dalla parte proprietaria. Anche dopo essere riusciti a sistemare le cose e anche dopo che queste sembra funzionino bene, l'utente rischia ancora l'esecuzione di nvidia.ko nel nuovo kernel non supportato, e ciò porterà alla perdita di dati e guasti hardware.

Quando una nuova incompatibile versione del kernel viene rilasciata, è probabilmente meglio attaccarsi per un po' al nuovo kernel supportato. Nvidia richiede solitamente un paio di settimane per preparare una nuova release e in genere pensano che questa sia adatta per un uso generale. Sii paziente. Se assolutamente necessario è possibile utilizzare il comando epatch_user con gli ebuild nvidia-drivers: questo permette all'utente di adattare in qualche modo i drivers nvidia con l'ultima versione del kernel non supportata. Da notare che né i manutentori dei drivers nvidia né Nvidia stessa sosterranno questa situazione. La garanzia hardware molto probabilmente sarà nulla, i manutentori di Gentoo non potranno iniziare a risolvere i problemi in quanto si tratta di un driver proprietario che solo Nvidia può correttamente mettere a punto, e i manutentori del kernel certamente non supportano i driver proprietari o qualsiasi "sistema contaminato" che funziona in difficoltà.

Se per configurare il kernel è stato utilizzato {{c|genkernel all}}, ogni cosa è impostata. Se non è stato utilizzato, invece, va fatto un doppio controllo nella configurazione del kernel, in modo che il seguente supporto sia abilitato:

{{KernelBox|title=Enable loadable module support|1=
[*] Enable loadable module support --->
}}

Abilitare anche il "Memory Type Range Register" nel kernel:

{{KernelBox|title=Enable MTRR support|1=
Processor type and features --->
   [*] MTRR (Memory Type Range Register) support
}}

Se il sistema ha una scheda grafica AGP, abilitare opzionalmente  l'agpgart supportato dal kernel, sia compilato direttamente nel kernel sia come modulo. Se il modulo agpgart compilato direttamente nel kernel non viene utilizzato, i drivers utilizzeranno la propria implementazione agpgart, chiamata NvAGP. Su alcuni sistemi, questa si comporta meglio rispetto alla agpgart compilata direttamente sul kernel, e su altri, invece, si comporta peggio. Valutare la scelta sul proprio sistema per ottenere le migliori prestazioni. Quando incerti sul da farsi, utilizzare l'agpgart compilato nel kernel:

{{KernelBox|title=Enable agpgart support|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note|Su amd64, IOMMU controlla le impostazioni di agpgart.}}

{{Important|Per processori x86 e AMD64, il driver [[framebuffer]] compilato direttamente nel kernel va in conflitto con il driver binario fornito da nVidia. Quando si compila il kernel per tali CPUs, rimuovere completamente i drivers da compilare nel kernel come mostrato:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Ora assicurarsi che il driver nouveau sia disabilitato:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        <*> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
            < > Nouveau (nVidia) cards
}}
}}

Un'alternativa al framebuffer è [[uvesafb]], che può essere installato parallelamente al pacchetto {{Package|x11-drivers/nvidia-drivers}}. 

Per i sistemi (U)EFI uvesafb non funzionerà. Sappiate che l'abilitazione del supporto "efifb" nel kernel (<code>CONFIG_FB_EFI=y</code>) causa problemi intermittenti con l'inizializzazione dei drivers nvidia. Non c'è alcun framebuffer alternativo conosciuto per i sistemi (U)EFI.

Gli ebuild '''nvidia-drivers''' rilevano automaticamente la versione del kernel basato sul link simbolico {{Path|/usr/src/linux}}. Si prega di assicurarsi che tale link simbolico punti ai sorgenti corretti e che il kernel sia configurato correttamente. Si prega di consultare la sezione  "Configuring the Kernel" del [[Handbook:Main_Page|Gentoo Handbook]] per dettagli sulla configurazione del kernel.

Primo, scegliere la giusta sorgente del kernel utilizzando {{c|eselect}}. Quando si utilizza la versione 3.7.10 del pacchetto {{Package|sys-kernel/gentoo-sources}} per esempio, la lista dei kernel potrebbe essere simile a questa:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

Nella schermata sopra, si noti che il kernel linux-3.7.10-gentoo è contrassegnato con un asterisco (*) per mostrare che è il kernel selezionato con un collegamento simbolico.

Se il link simbolico non punta ai sorgenti corretti, aggiornare il collegamento selezionando il numero della versione del kernel desiderata, come nell'esempio precedente.

{{RootCmd|eselect kernel set 1}}

== Configurazione ==

=== Drivers === 

Ora è tempo di installare i drivers. Primo, segui la guida [[Xorg/Guide|X Server Configuration Guide]] e imposta <code>VIDEO_CARDS="nvidia"</code> su {{Path|/etc/portage/make.conf}}. Durante l'installazione del server X, verrà installata la versione corretta del pacchetto {{Package|x11-drivers/nvidia-drivers}}.

{{Note|I drivers possono essere installati con la USE flag <code>gtk</code> impostata in {{Path|/etc/portage/make.conf}}. Questo installerà il pacchetto {{Package|media-video/nvidia-settings}}, uno strumento grafico utile per il monitoraggio e la configurazione di diversi aspetti della scheda nVidia.}}

{{Important|Ogni volta che il [[Kernel/Upgrade|kernel è compilato]], è necessario reinstallare i moduli del kernel nVidia. Un modo semplice per ricompilare i moduli installati dagli ebuilds (come ad esempio {{Package|x11-drivers/nvidia-drivers}}) è eseguire {{c|emerge @module-rebuild}}.}}

Una volta terminata l'installazione, eseguire il comando {{c|modprobe nvidia}} per caricare il modulo del kernel in memoria. Se si tratta di un aggiornamento, rimuovere il modulo precedente.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Per evitare di dover caricare manualmente il modulo ad ogni avvio, per far si che questo sia fatto automaticamente ogni volta che il sistema viene avviato, editare {{Path|/etc/conf.d/modules}} ed aggiungerci <code>nvidia</code>.

{{Important|Se <code>agpgart</code> è compilato come modulo, aggiungere anche questo su {{Path|/etc/conf.d/modules}}.}}

=== Firmare i moduli del kernel (opzionale) ===

{{Note|L'informazione di questa sezione non è necessaria per i sistemi che non implementano i moduli del kernel firmati. Potete saltarla.}}

Se si utilizza l'avvio sicuro del kernel con firma, allora si avrà bisogno di firmare i moduli del kernel Nvidia prima che possano essere caricati.

Questo si fa utilizzando lo script per il kernel fornito da {{c|perl}}, come segue.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

Come per la versione del driver 358.09, è stato fatto un nuovo modulo per la gestione della modalità monitor e per questa versione del driver deve essere firmato tale modulo.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Una volta firmati questi moduli, il driver viene caricato all'avvio come previsto. Questo metodo di firma può essere utilizzato per firmare altri moduli non solo nvidia-drivers. Di conseguenza si dovrà modificare il percorso e il modulo corrispondente.

=== L'X server ===

Una volta che i driver appropriati sono installati, configurare il server X per utilizzare il driver <code>nvidia</code> invece che quello di default <code>nv</code>.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Eseguire {{c|eselect}} così che X server utilizzi le librerie GLX nVidia:

{{RootCmd|eselect opengl set nvidia}}

=== Autorizzazioni ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Abilitazione del supporto globale nvidia ===

Alcuni pacchetti, come ad esempio {{Package|media-video/mplayer}} e {{Package|media-libs/xine-lib}}, utilizzano una USE flag locale chiamata <code>xvmc</code> la quale abilita il supporto XvMCNVIDIA, utile quando si guardano filmati ad alta risoluzione. Aggiungere <code>xvmc</code> nella variabile USE sul file {{Path|/etc/portage/make.conf}} o aggiungerla come USE flag su {{Package|media-video/mplayer}} e/o {{Package|media-libs/xine-lib}} su {{Path|/etc/portage/package.use}}.

Le serie GeForce 8 e quelle successive sono dotate di supporto VDPAU che ha sostituito il supporto  XvMCNVIDIA. Vedere l'articolo [[VDPAU]] per abilitare il supporto VDPAU.

Ci sono anche alcune applicazioni che utilizzano la USE flag <code>nvidia</code>, così che potrebbe essere una buona idea aggiungerla su {{Path|/etc/portage/make.conf}}.

Quindi, eseguire {{c|emerge -uD --newuse @world}} per ricompilare le applicazioni che beneficiano della variazione della USE flag.

=== Utilizzare lo strumento di impostazioni nVidia ===

nVidia fornisce anche uno strumento per le impostazioni. Tale strumento consente all'utente di monitorare e variare le impostazioni grafiche senza riavviare il server X ed è disponibile attraverso il Portage come {{Package|media-video/nvidia-settings}}. Come accennato in precedenza, lo strumento per le impostazioni verrà incluso automaticamente durante l'installazione dei driver con la USE flag <code>gtk</code> impostata su {{Path|/etc/portage/make.conf}} o su  {{Path|/etc/portage/package.use}}.

=== Abilitazione OpenGL/OpenCL ===

Per abilitare OpenGL e OpenCL attraverso il dispositivo, eseguire:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Assicurarsi che il server Xorg non sia in esecuzione durante queste variazioni.

== Utilizzo ==

=== Testare la scheda ===

Per testare la scheda nVidia, avviare X ed eseguire il comando {{c|glxinfo}}, il quale fa parte del pacchetto {{Package|x11-apps/mesa-progs}}. Esso dovrebbe dire che il direct rendering è attivato:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Per monitorare gli FPS, eseguire {{c|glxgears}}.

== Risoluzione dei problemi ==

* {{Bug|nvidia-drivers|search=package}}

=== Il driver non viene inizializzato quando gli interrupt MSI sono abilitati ===

Il driver Linux NVIDIA utilizza Message Signaled Interrupts (MSI) come impostazione predefinita. Questo offre vantaggi di compatibilità e scalabilità, dovuti principalmente alla prevenzione di condivisione IRQ. Alcuni sistemi hanno problemi di supporto MSI, mentre lavorano bene con i virtual wire interrupts. Questi problemi si manifestano come l'incapacità di lanciare X con il driver NVIDIA, o errori di inizializzazione CUDA.

MSI interrupts può essere disabilitato tramite il parametro del modulo del kernel NVIDIA <code>NVreg_EnableMSI=0</code>. Questo può essere impostato nella linea di comando durante il caricamento del modulo, o più appropriatamente tramite i files di configurazione del modulo del kernel della distribuzione (come quelli sotto {{Path|/etc/modprobe.d/}}).

Per esempio:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Ottenere l'accelerazione 2D su macchine con memoria da 4 GB in su ===

Quando l'accelerazione nVidia 2D da problemi, allora è probabile che il sistema è incapace di impostare una impostazione write-combining con MTRR. Per verificare, controllare il contenuto di {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Ogni riga dovrebbe contenere <code>write-back</code> o <code>write-combining</code>. Quando una linea contiene <code>uncachable</code> è necessario variare l'impostazione del BIOS per risolvere.

Riavviare e accedere al BIOS, poi trovare le impostazioni MTRR (probabilmente sotto "Impostazioni della CPU"). Modificare l'impostazione da <code>continuous</code> a <code>discrete</code> e avviare Linux. A questo punto non c'è più <code>uncachable</code> e l'accelerazione 2D ora funziona senza errori.

=== "no such device" appare quando si cerca di caricare il modulo del kernel ===

Questo in genere è causato da uno dei seguenti problemi:

# Il sistema non ha affatto una scheda nVidia. Controllare il messaggio che rilascia il comando {{c|lspci}} per vedere se il sistema ha una scheda video nVidia installata e rilevata.
# La corrente versione installata del pacchetto {{Package|x11-drivers/nvidia-drivers}} non supporta il modello di scheda video montata. Controllare il file README in /usr/share/nvidia-drivers-*/ per vedere la lista dei dispositivi supportati, oppure ricercare il driver corretto su [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Un altro driver del kernel ha il controllo dell'hardware. Digitare {{c|lspci -k}} per vedere se un altro driver, tipo "nouveau", è legato alla scheda grafica. Se è così, disattivare o mettere in blacklist tale driver.

=== Xorg dice che non può trovare nessuno schermo ===

Quando l'avvio del sistema finisce con uno schermo nero o riga di comando invece dell'interfaccia grafica GUI, digitare {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} per spostarsi su una console virtuale. Successivamente eseguire:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

per vedere il risultato di Xorg. Se uno dei primi errori è che Xorg non può trovare nessuno schermo, seguire i passi successivi per risolvere il problema.

Dovrebbe essere sufficiente eseguire il seguente comando prima dell'avvio:

{{Cmd| /opt/bin/nvidia-xconfig}}

Ma se non funziona, eseguire {{c|lspci}} e notare che la scheda video inizia in questo modo:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

Prendere il primo bit, <code>01.00.0</code> e metterlo nel file {{Path|/etc/X11/xorg.conf}} con l'opzione <code>BusID</code>:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering non è abilitato ===

Se direct rendering non funziona, questo può derivare dal fatto che il kernel ha Direct Rendering Manager attivato, il quale va in conflitto con il driver. Vedere lo stato di direct rendering seguendo le istruzioni nella sezione [[#Testing the card|Testing the card]].

Per prima cosa, disabilitare Direct Rendering Manager (<code>CONFIG_DRM</code>) nel kernel:

{{KernelBox|title=Disabilitare Direct Rendering Manager|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Successivamente, ricostruire il pacchetto {{Package|x11-drivers/nvidia-drivers}} dal momento che il driver possa aver compilato il DRM del kernel. Questo dovrebbe risolvere il problema.

=== Riproduzione video lenta o a scatti ===

Lately there seems to be some breaking with playback of some types of video with the NVidia binary drivers, causing slow video playback or significant stuttering. This problem seems to be occurring within the Intel CPU Idle replacement instead of the common ACPI CPU idling method for certain CPU's.

Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVidia Powermizer feature, or setting Powermizer to maximum performance within {{c|nvidia-settings}} has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <code>mplayer-nodeint</code> with something similar to <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> as a work around.)

=== No vertical synchronization (no VSync, tearing) in OpenGL applications ===

Adding the following option to the screen section prevents tearing on GTX 660, 660 Ti, and probably some other GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== Expert configuration ==

=== Documentation ===

The {{Package|x11-drivers/nvidia-drivers}} package also comes with comprehensive documentation. This is installed into {{Path|/usr/share/doc}} and can be viewed with the following command:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Kernel module parameters ===

The <code>nvidia</code> kernel module accepts a number of parameters (options) which can be used to tweak the behaviour of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run {{c|update-modules}} after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

Edit {{Path|/etc/modprobe.d/nvidia.conf}}:

{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Update module information:

{{RootCmd|update-modules}}

Unload the <code>nvidia</code> module...

{{RootCmd|modprobe -r nvidia}}

...and load it once again:

{{RootCmd|modprobe nvidia}}

=== Advanced X configuration ===

The GLX layer also has a plethora of options which can be configured. These control the configuration of TV out, dual displays, monitor frequency detection, etc. Again, all of the available options are detailed in the documentation.

To use any of these options, list them in the relevant Device section of the X config file (usually {{Path|/etc/X11/xorg.conf}}). For example, to disable the splash logo:

{{FileBox|filename=/etc/X11/xorg.conf|title=Disable the splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== See also ==

* [[nouveau & nvidia-drivers switching]] - Hybrid graphics mode using open-source drivers.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configure a system to use closed-source drivers for hybrid graphics (modesetting).

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
