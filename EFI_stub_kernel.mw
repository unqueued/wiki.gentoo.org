{{InfoBox stack|{{InfoBox homepage|https://www.kernel.org/doc/Documentation/efi-stub.txt|header=true}}|{{InfoBox wikipedia|EFI system partition}}}}

The (U)EFI firmware present in many newer computers can function as [[bootloader]], allowing systems to boot without needing an additional software bootloader.

{{Important|It should be noted that EFI stub kernels can '''''not''''' load an initramfs if it is specified in <var>CONFIG_CMDLINE</var>. Check out [[efibootmgr]], <var>CONFIG_INITRAMFS_SOURCE</var>, or separate bootloaders like ([[gummiboot]] or [[GRUB2]]) if an initramfs is a must-have.}}

== Partitioning ==

Create a [[partition]] of type "EFI System partition", which is <code>EF00</code> on GPT and <code>EF</code> on MBR. Using {{C|gdisk}}:

{{RootCmd|gdisk /dev/sda|output=<pre>
Command (? for help): n
Partition number (1-128, default 1): 1
First sector: (enter desired start sector and size, 100 MB should be plenty)
Command (? for help): t
Partition number (1-2): 1
Hex code or GUID (L to show codes, Enter = 8300): EF00
Command (? for help): w
</pre>}}

Create a FAT32 filesystem inside:

{{RootCmd|mkfs.vfat -F 32 /dev/sda1}}

If the {{C|mkfs.vfat}} command is not present (part of {{Package|sys-fs/dosfstools}}), the Busybox version can be used instead:

{{RootCmd|busybox mkfs.vfat /dev/sda1}}

{{Note|The {{C|gdisk}} utility comes with the {{Package|sys-apps/gptfdisk}} package.}}

== Kernel ==

=== Configuration ===

In order to boot directly from UEFI, the kernel needs to have <var>CONFIG_EFI</var> and <var>CONFIG_EFI_STUB</var> support enabled. It is also a good idea to enable <var>CONFIG_EFI_VARS</var> so that the system firmware can be manipulated via {{c|[[efibootmgr]]}}.

{{KernelBox|title=Enable EFI stub support|1=
Processor type and features  --->
    [*] EFI runtime service support 
    [*]   EFI stub support
Firmware Drivers  --->
   EFI (Extensible Firmware Interface) Support  --->
       <*> EFI Variable Support via sysfs
}}

UEFI does not pass kernel parameters to the kernel during normal boot, so they must be hard-coded them via <var>CONFIG_CMDLINE</var> values. In order to boot a root partition located at {{Path|/dev/sda2}} input the following text in the kernel configuration:

{{KernelBox|title=Enable built-in kernel parameters|1=
Processor type and features  --->
    [*] Built-in kernel command line
    (root=/dev/sda2)
}}

For GPT systems, using <code>root=PARTUUID=</code> might be preferable. To find out use {{C|gdisk}}:

{{RootCmd|gdisk /dev/sda|output=<pre>
Command (? for help): i
Partition number (1-5): 2
Partition unique GUID: (pass the ID that is shown here to the kernel)
Command (? for help): q
</pre>}}

{{Note|The ''partition's'' UUID is distinct from the ''filesystem's'' UUID.}}

=== Initramfs ===

The EFI stub can load an initramfs and pass it to the kernel, but this requires passing a parameter from the EFI bootloader (ie. <code>initrd=\efi\boot\myinitrd.img</code>). This parameter cannot be built into <var>CONFIG_CMDLINE</var> as outlined above. This may defeat the purpose of using EFI stub since many users prefer it as a way to avoid the necessity of a bootloader and/or dealing with {{c|efibootmgr}}.  Another possibility is to embed the initramfs directly into the kernel image. In order to do this:

* Generate the initramfs using a preferred method ([[Genkernel]], [[Dracut]], etc.).
* Ensure the image is not compressed (just a cpio archive). Genkernel and Dracut both have command line switches for this.
* Rename the initramfs with a {{Path|.cpio}} extension, the kernel requires this in order to embed a cpio archive. The kernel image (with the cpio archive within it) will still be compressed as usual.
* Ensure that the initramfs has the correct read-permissions for the user building the kernel. Most users build the kernel as the root user and may skip this step. 
** Be aware that Dracut makes the initramfs image readable only by the root user, so if the kernel was built as any other user adjust its permissions as needed. Failing to do so (and ignoring the kernel build warnings) will result in a kernel with no embedded initramfs which will leave the system potentially unbootable.

{{KernelBox|title=Build in the initramfs CPIO archive|1=
General setup  --->
    [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
    (/boot/initramfs-3.12.21-gentoo-r1.cpio) Initramfs source file(s)
}}

* Install the kernel on the EFI partition.

However, if passing an initramfs as a boot parameter is still desired, the only way it can be done is by using {{C|efibootmgr}} ([[GRUB2]] will not work). An external initramfs has some advantages over building the initramfs directly into the kernel (see the kernel help on on the <var>CONFIG_INITRAMFS_SOURCE</var> variable for details on its limitations). In fact, both a built-in and external initramfs can be used simultaneously. Create and install the initramfs with Genkernel, Dracut, by hand, etc. Install the kernel as outlined in the [[EFI_stub_kernel#Installation|Installation section below]]. Then:

{{RootCmd|cp /boot/vmlinuz-3.14.14-gentoo /mnt/EFI/EFI/Boot/bootx64.efi
|cp /boot/initramfs-3.14.14-gentoo.img /mnt/EFI/EFI/Boot/initramfs.img
|efibootmgr --create --part 1 --label "Gentoo" --loader '\efi\boot\bootx64.efi' -u initrd{{=}}'\efi\boot\initramfs.img'}}

{{Note|
* EFI uses {{Path|\}} (backslash) as path separators.
* The system tested on required the kernel arguments to be passed as Unicode text (<code>-u</code> option). YMMV.
}}

{{Note|This guide was created with the x64 architecture in mind. According the specification, UEFI is rich enough to cover a range of contemporary processor designs.<br />
UEFI image's name is composed by the machine type defined in the PE32+ format <ref>[http://www.uefi.org/sites/default/files/resources/UEFI%20Spec%202_6.pdf#page=68 UEFI Specification Version 2.6, Section 2.1.1 UEFI Images, p.18], January 2016. ''[http://www.uefi.org UEFI Forum]''. Retrieved on October 10, 2016.</ref> <ref>[http://www.uefi.org/sites/default/files/resources/UEFI%20Spec%202_6.pdf#page=140 UEFI Specification Version 2.6, Section 3.5.1.1 Removable Media Boot Behavior, p.90], January 2016. ''[http://www.uefi.org UEFI Forum]''. Retrieved on October 10, 2016.</ref>. For example, a UEFI OS loader for the x86 architecture is bootIA32.efi}}

=== Installation ===

Now build the kernel and copy the image to the EFI partition as {{Path|EFI/Boot/bootx64.efi}}. The following example shows the EFI partition mounted to {{Path|/mnt/EFI}}):

{{RootCmd
|cd /usr/src/linux
|make -jN
|make install modules_install
|mkdir -p /mnt/EFI/EFI/Boot
|cp /boot/vmlinuz-3.7.9-gentoo /mnt/EFI/EFI/Boot/bootx64.efi
}}

== Adding additional kernels ==

{{Note|In order to modify UEFI boot entries, the system needs to be booted in EFI mode. This means that the EFI stub image or some EFI capable live media must have been booted as described above.}}

Optionally additional kernels can be made known to the UEFI firmware. This is especially useful when wanting to test more kernels or to dual-boot with another operating system. These will be shown in the boot selection prompt, normally after a keyboard hotkey is pressed at the right time during system initialization. If the hotkey combination is unknown, search for official documentation from the computer manufacture. This information is usually not difficult to find.

Ensure that <var>CONFIG_EFI_VARS</var> have been enabled in the kernel, install {{Package|sys-boot/efibootmgr}} and make them known to the UEFI firmware.

{{KernelBox|title=Enable EFI sysfs controls|1=
Firmware Drivers  --->
    <*> EFI Variable Support via sysfs
}}

{{RootCmd
|cp /boot/vmlinuz-3.6.11-gentoo /mnt/EFI/EFI/Boot/vmlinuz.efi
|efibootmgr --create --part 1 --label "Gentoo" --loader '\efi\boot\vmlinuz.efi'
}}

{{Note|EFI uses {{Path|\}} (backslash) as path separators.}}

== See also ==

* [[efibootmgr]] - A tool for manipulating EFI firmware settings. Very helpful for booting EFI stub kernels.
* [[Handbook:AMD64/Installation/Media#Booting_the_installation_CD|Booting the installation CD (AMD64 Handbook)]]
* [[Handbook:AMD64/Installation/Disks#Using_UEFI|Using UEFI (AMD64 Handbook)]]
* [[Handbook:AMD64/Installation/Kernel#Architecture_specific_kernel_configuration|Architecture specific kernel configuration  (AMD64 Handbook)]]

== External resources ==

* [http://blog.realcomputerguy.com/2012/05/efi-stub-booting-without-bootloader.html EFI Stub - booting without a bootloader] Blog posting which this article is partially based on.
* [http://www.rodsbooks.com/gdisk/ GPT fdisk homepage] with information and tutorials about GPT partitioning.
* [http://www.rodsbooks.com/efi-bootloaders/ EFI bootloaders] listing alternative ways to boot an (U)EFI system.
* [https://wiki.archlinux.org/index.php/EFISTUB EFISTUB] on wiki.archlinux.org

== References ==

{{reflist}}

[[Category:Bootloaders]]
