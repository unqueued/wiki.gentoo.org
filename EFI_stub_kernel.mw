<languages />
<translate>

{{InfoBox stack|{{InfoBox homepage|https://www.kernel.org/doc/Documentation/efi-stub.txt|header=true}}|{{InfoBox wikipedia|EFI system partition}}}}

The (U)EFI firmware present in many computers can function as [[bootloader]], allowing systems to boot without needing an additional software bootloader. This article shows how to configure and [[#Installation|install]] an unsigned kernel in the [[EFI System Partition|EFI System Partition (ESP)]] of a computer running in EFI mode with [[wikipedia:secureboot|secureboot]] turned off. 

== Kernel configuration ==

In order to boot directly from UEFI, the kernel needs to know where to find the root ({{path|/}}) partition of the system to be booted. Enable EFI runtime service support <var>(CONFIG_EFI)</var>, EFI stub support <var>(CONFIG_EFI_STUB)</var> and  Built-in kernel command line (<var>CONFIG_CMDLINE_BOOL</var>) and add the root partition (example: {{Path|/dev/sda2}}) or its PARTUUID to (<var>CONFIG_CMDLINE</var>).

{{KernelBox|title=Enable EFI stub support|1=
Processor type and features  --->
    [*] EFI runtime service support 
    [*]   EFI stub support
    [ ]     EFI mixed-mode support
    ...
    ...
    [*] Built-in kernel command line
    (root=/dev/sda2)
}}

Using <code>root=PARTUUID=</code> might be preferable. To find out use {{C|blkid}}:

{{Note|The ''partition's'' PARTUUID is distinct from the ''filesystem's'' UUID.}}

{{RootCmd|blkid {{!}} grep sda2|output=<pre style="white-space: pre;">
/dev/sda2: UUID="d1e0c1e0-3a40-42c5-8931-cfa2c7deae32" TYPE="ext4" PARTUUID="adf55784-15d9-4ca3-bb3f-56de0b35d88d"
</pre>}}

{{KernelBox|title=CONFIG_CMDLINE - alternative using PARTUUID (example: adf55784-15d9-4ca3-bb3f-56de0b35d88d)|1=
Processor type and features  --->
    [*] Built-in kernel command line
    (root=PARTUUID=adf55784-15d9-4ca3-bb3f-56de0b35d88d)
}}

It is also a good idea to enable EFI stub support <var>(CONFIG_EFI_VARS)</var> so that the system firmware can be manipulated via {{c|[[efibootmgr]]}}. <var>CONFIG_EFI_MIXED</var> as proposed by [[Handbook:AMD64/Installation/Kernel#Architecture_specific_kernel_configuration|Gentoo Handbook]] is not suitable for the EFI boot stub.

{{KernelBox|title=EFI Variable Support via sysfs|1=
Firmware Drivers  --->
    EFI (Extensible Firmware Interface) Support  --->
        <*> EFI Variable Support via sysfs
}}

== Installation ==

If an ESP does not exist, one needs to be created. See [[EFI System Partition]].
Still in the kernel directory, build the kernel and install the modules:

{{RootCmd
|cd /usr/src/linux
|make -jN
|make modules_install
}}

Have the [[EFI System Partition|ESP]] mounted at {{path|/boot}}:

{{RootCmd|mount /dev/sda1 /boot}}

Run the install command:

{{RootCmd
|make install|output=<pre>
sh ./arch/x86/boot/install.sh 4.9.16-gentoo arch/x86/boot/bzImage \
        System.map "/boot"
</pre>}}

{{Cmd|tree -L 2 /boot|output=<pre>
 /boot
 ├── config-4.9.16-gentoo
 ├── EFI
 ├── System.map-4.9.16-gentoo
 └── vmlinuz-4.9.16-gentoo
</pre>}}

Move {{path|vmlinuz}} to the right place adding the {{path|.efi}} suffix and delete the copies of config and System.map:

{{RootCmd
|mkdir -p /boot/EFI/Gentoo
|mv /boot/vmlinuz-4.9.16-gentoo /boot/EFI/Gentoo/vmlinuz-4.9.16-gentoo.efi
|rm /boot/config-4.9.16-gentoo /boot/System.map-4.9.16-gentoo
}}

{{Cmd|tree -L 3 /boot|output=<pre>
 /boot
 └── EFI
     └── Gentoo
         └── vmlinuz-4.9.16-gentoo.efi
</pre>}}

Alternatively the fallback directory {{path|/boot/EFI/Boot}} could be used additionally to or instead of {{path|/boot/EFI/Gentoo}}.

Next, tell the UEFI firmware that a boot entry called "Gentoo" is to be created, which has the freshly compiled EFI stub kernel:

{{RootCmd|efibootmgr --create --disk /dev/sda --part 1 --label "Gentoo" --loader '\efi\gentoo\vmlinuz-4.9.16-gentoo.efi'}}

Optionally, additional kernels can be installed in {{path|EFI/Gentoo}} and made known to the UEFI firmware. This is especially useful when wanting to test more kernels or to dual-boot with another operating system. These will be shown in the boot selection prompt, normally after a keyboard hotkey is pressed at the right time during system initialization. The latest added entry always gets highest boot priority, so it will be default. If the hotkey combination is unknown, search for official documentation from the computer manufacture. This information is usually not difficult to find.

{{Note|In order to modify UEFI boot entries, the system needs to be booted in EFI mode. This means that the EFI stub image or some EFI capable live media must have been booted as described above.}}

{{Note|EFI uses {{Path|\}} (backslash) as path separators.}}

== Optional: Initramfs ==

In case an (optional) [[Initramfs/Guide|initramfs]] is needed, it also needs to be copied to the same place.

{{RootCmd|mv /boot/initramfs-4.9.16-gentoo.img /boot/EFI/Gentoo/initramfs.img
|efibootmgr --create --part 1 --label "Gentoo" --loader '\efi\gentoo\vmlinuz-4.9.16-gentoo.efi' -u 'initrd{{=}}\efi\gentoo\initramfs.img'}}

{{Important|It should be noted that EFI stub kernels can '''''not''''' load an initramfs if it is specified in <var>CONFIG_CMDLINE</var>. Check out [[efibootmgr]], <var>CONFIG_INITRAMFS_SOURCE</var>, or separate bootloaders like [[gummiboot]] or [[refind]] if an initramfs is a must-have.}}

The EFI stub can load an initramfs and pass it to the kernel, but this requires passing a parameter from the EFI bootloader (ie. <code>initrd=\efi\boot\myinitrd.img</code>). This parameter cannot be built into <var>CONFIG_CMDLINE</var> as outlined above. This may defeat the purpose of using EFI stub since many users prefer it as a way to avoid the necessity of a bootloader and/or dealing with {{c|efibootmgr}}.  Another possibility is to embed the initramfs directly into the kernel image. In order to do this:

* Generate the initramfs using a preferred method ([[Genkernel]], [[Dracut]], etc.).
* Ensure the image is not compressed (just a cpio archive). Genkernel and Dracut both have command line switches for this.
* Rename the initramfs with a {{Path|.cpio}} extension, the kernel requires this in order to embed a cpio archive. The kernel image (with the cpio archive within it) will still be compressed as usual.
* Ensure that the initramfs has the correct read-permissions for the user building the kernel. Most users build the kernel as the root user and may skip this step. 
** Be aware that Dracut makes the initramfs image readable only by the root user, so if the kernel was built as any other user adjust its permissions as needed. Failing to do so (and ignoring the kernel build warnings) will result in a kernel with no embedded initramfs which will leave the system potentially unbootable.

{{KernelBox|title=Build in the initramfs CPIO archive|1=
General setup  --->
    [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
    (/boot/initramfs-3.12.21-gentoo-r1.cpio) Initramfs source file(s)
}}

However, if passing an initramfs as a boot parameter is still desired, the only way it can be done is by using {{C|efibootmgr}} ([[GRUB2]] will not work). An external initramfs has some advantages over building the initramfs directly into the kernel (see the kernel help on on the <var>CONFIG_INITRAMFS_SOURCE</var> variable for details on its limitations). In fact, both a built-in and external initramfs can be used simultaneously. Create and install the initramfs with Genkernel, Dracut, by hand, etc. Install the kernel as outlined in the Installation section below. Then:

{{Note|This guide was created with the x64 architecture in mind. According the specification, UEFI is rich enough to cover a range of contemporary processor designs.<br />
UEFI image's name is composed by the machine type defined in the PE32+ format <ref>[http://www.uefi.org/sites/default/files/resources/UEFI%20Spec%202_6.pdf#page=68 UEFI Specification Version 2.6, Section 2.1.1 UEFI Images, p.18], January 2016. ''[http://www.uefi.org UEFI Forum]''. Retrieved on October 10, 2016.</ref> <ref>[http://www.uefi.org/sites/default/files/resources/UEFI%20Spec%202_6.pdf#page=140 UEFI Specification Version 2.6, Section 3.5.1.1 Removable Media Boot Behavior, p.90], January 2016. ''[http://www.uefi.org UEFI Forum]''. Retrieved on October 10, 2016.</ref>. For example, a UEFI OS loader for the x86 architecture is bootIA32.efi}}

== See also ==

* [[efibootmgr]] - Essential for telling the UEFI firmware about the new item in the ESP
* efibootmgr in [[Handbook:AMD64/Installation/Bootloader#Alternative 2: efibootmgr]]
* [[Handbook:AMD64/Installation/Kernel#Architecture_specific_kernel_configuration|Architecture specific kernel configuration  (AMD64 Handbook)]] - should widely equal the [[#Kernel configuration]] section above
* {{See also|rEFInd}} and not needed for EFI stub kernels

== External resources ==

* [http://blog.realcomputerguy.com/2012/05/efi-stub-booting-without-bootloader.html EFI Stub - booting without a bootloader] Blog posting which this article is partially based on.
* [http://www.rodsbooks.com/efi-bootloaders/ EFI bootloaders] listing alternative ways to boot an (U)EFI system.
* [https://wiki.archlinux.org/index.php/EFISTUB EFISTUB] on wiki.archlinux.org

== References ==

{{reflist}}

</translate>

[[Category:Bootloaders]]
