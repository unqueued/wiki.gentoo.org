The Asus C201 is a pretty fast and lightweight ARMv7-A (Cortex-A17) based chromebook. Most distinguishing is that it is one of only a few devices already supported by Libreboot. That is, the factory firmware (coreboot) can optionally be replaced with entirely libre firmware. Instructions on how to do this can be found on the [https://libreboot.org/docs/install/c201.html Libreboot website].

== Specifications ==

* SoC: Rockchip RK3288 
* CPU: Quad-core ARM Cortex-A17 @ 1.8 GHz
* GPU: Mali T764
* Board name: Veyron Speedy
* Audio: Rockchip I2S
* Screen: 11.6" @ 1366x768
* Ram: 2gb/4gb
* Firmware: coreboot
* Coreboot payload: deptchcharge
* Device tree binary: rk3288-veyron-speedy.dtb

== What works and what doesn't ==

{| class="wikitable"
|-
! !! On >=sys-kernel/gentoo-sources-4.20 !! On ChromeOS 3.14 or patched 4.12+
|-
| '''Suspend/Resume''' || untested || works
|-
| '''Built-in Wifi''' || works with proprietary blobs || works (on newer kernels, with patch)
|-
| '''X''' || works ({{Package|x11-wm/i3}}) || works 
|-
| '''X w/ randr''' || untested || works
|-
| '''HDMI''' || untested || untested
|-
| '''ACPI events''' || untested || works (lid, buttons, charger)
|-
| '''Audio''' || works || works
|-
| '''Touchpad''' || works || works
|-
| '''Bluetooth''' || untested || works ([[#Other quirks|buggy]])
|-
| '''GPU hardware acceleration''' || no (WIP, cf. [https://gitlab.freedesktop.org/panfrost Panfrost]) || unknown
|}
Mainline support is close to complete<ref>http://opensource.rock-chips.com/wiki_Status_Matrix</ref>, so using {{Package|sys-kernel/gentoo-sources}} should yield the best overall experience of all options.

== Installing Gentoo ==

=== Additional hardware requirements ===

* USB ethernet adapter

{{Note|Gentoo’s ARMv7-A stage3 tarballs don’t include net-wireless/wpa_supplicant. While it is possible to install Gentoo leveraging solely the built-in wifi, a USB ethernet adapter can spare a lot of effort. Otherwise net-wireless/wpa_supplicant needs to be installed on the installation media which probably involves a bit of cross-compilation.}}

=== Obtain installation media ===

[[Create_bootable_media_for_depthcharge_based_devices|Create the installation media]] manually. Alternatively have a look at [https://notabug.org/dimkr/devsus Devsus].

=== Preparing the device ===

To be able to boot from external media like USB drives, the Asus C201 first needs to be switched into developer mode<ref>[https://libreboot.org/docs/depthcharge/#developer-mode-screen Developer mode screen], [https://libreboot.org/docs/depthcharge Libreboot documentation on depthcharge], Retrieved on February 25th, 2019</ref>.

This can be achieved by pressing {{Key|Esc}}+{{Key|Refresh}}+{{Key|Power}} when the device is switched off to enter the {{c|recovery mode screen}}.

Pressing {{Key|Ctrl}}+{{Key|D}} and then following subsequent on-screen instructions enables the {{c|developer mode}}.

Finally one of the {{c|verified boot}} parameters needs to be modified: Boot the device and enter Chrome OS' {{c|crosh}} shell, e.g. by opening Chromium Browser and hitting {{Key|Ctrl}}+{{Key|Alt}}+{{Key|T}}.
Enable booting from external media:

{{RootCmd
|crossystem dev_boot_usb{{=}}1
}}

=== Booting the installation media ===

=== Backup the internal eMMC storage ===

=== Preparing the disks ===

=== Installing the Gentoo installation files ===

=== Installing the Gentoo base system ===

=== Configuring the Linux kernel ===

Configure {{Package|sys-kernel/gentoo-sources}} as usual, cf. [[Handbook:AMD64/Installation/Kernel|Configuring the Linux kernel]].

==== Build the kernel and device tree binaries ====

{{Cmd
|make -j5 zImage dtbs
}}

From the kernel build directory, copy the zImage and the target device's device tree binary to the desired working directory. Replace {{c|DEVICETREE}} with the filename of the target device's device tree binary, e.g. {{c|rk3288-veyron-speedy.dtb}} for the Asus Chromebook C201 (which is based on Rockchip's RK3288 SoC and a board with the codename "Veyron Speedy").

{{Cmd
|cp -a arch/arm/boot/zImage /PATH/TO/ARBITRARY_WORKING_DIRECTORY
|cp -a arch/arm/boot/dts/DEVICETREE /PATH/TO/ARBITRARY_WORKING_DIRECTORY
}}


==== Optional: Creating a Custom Initramfs ====

Follow instructions from the [[Custom Initramfs]] article.
Embed the initramfs into the kernel or create it as a separate file (cf. [[Custom_Initramfs#Creating_a_separate_file|Custom Initramfs - Creating a separate file]]):
{{Cmd
|<nowiki>find /PATH/TO/INITRAMFS/ -print0 | cpio --null --create --verbose --format=newc | gzip --best > /PATH/TO/ARBITRARY_WORKING_DIRECTORY/initrd.img</nowiki>
}}


==== Creating the FIT image ====

Change to the directory where the kernel, the device tree binary and (optionally) the initramfs are located:

{{Cmd
|cd /PATH/TO/ARBITRARY_WORKING_DIRECTORY
}}

Create the configuration file ("{{Path|gentoo.its}}") for the Flattened Image Tree (FIT)<ref>Joel A Fernandes, [https://elinux.org/images/f/f4/Elc2013_Fernandes.pdf Flattened Image Trees: A powerful kernel image format (PDF)], [https://elinux.org/Main_Page Embedded Linux Wiki], February 21, 2013. Retrieved on February 25th, 2019</ref> with the following content. Again replace {{c|DEVICETREE}} with the filename of the target device's device tree binary, e.g. {{c|rk3288-veyron-speedy.dtb}} for the Asus Chromebook C201.

{{Important|If there is no need for an initramfs or it's embedded into the kernel, be sure to create the FIT configuration file without the {{c|ramdisk@1}} section and the following reference to that section.}}

{{FileBox|filename=gentoo.its|lang=bash|1=
/dts-v1/;

/ {
    description = "Linux kernel image with one or more FDT blobs";
    #address-cells = <1>;
    images {
        kernel@1{
            description = "vmlinuz";
            data = /incbin/("zImage");
            type = "kernel_noload";
            arch = "arm";
            os = "linux";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
        fdt@1{
            description = "dtb";
            data = /incbin/("DEVICETREE");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
        ramdisk@1{
            description = "initrd.img";
            data = /incbin/("initrd.img");
            type = "ramdisk";
            arch = "arm";
            os = "linux";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
    };
    configurations {
        default = "conf@1";
        conf@1{
            kernel = "kernel@1";
            fdt = "fdt@1";
            ramdisk = "ramdisk@1";
        };
    };
};
}}

Pack the FIT image:

{{Cmd
|sync
|mkimage -f gentoo.its gentoo.itb
}}

==== Preparing verified boot ====

Create a file ("kernel.flags") for the CMDLINE parameters:

{{FileBox|filename=kernel.flags|lang=bash|1=
console=tty1 root=/dev/YOUR_ROOTFS_PARTITION rootfstype=YOUR_ROOTFS_TYPE  rootwait rw
}}

Sign and pack the kernel:

{{Cmd
|sync
|futility --debug vbutil_kernel --arch arm --version 1 --keyblock /usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --bootloader kernel.flags --config kernel.flags --vmlinuz gentoo.itb --pack vmlinuz.signed
}}

==== Install the kernel to the kernel partition ====

{{RootCmd
|sync && dd if{{=}}vmlinuz.signed of{{=}}/dev/YOUR_KERNEL_PARTITION
}}

=== Configuring the system ===

Again back to the Handbook: [[Handbook:AMD64/Installation/System|Configuring the system]]

=== Installing system tools ===

Stick with the Handbook: [[Handbook:AMD64/Installation/Tools|Installing system tools]] 

{{Important|Skip the chapter <b>Configuring the bootloader</b> ([[Handbook:AMD64/Installation/Bootloader|this]] one) in the Handbook, as the bootloader (depthcharge) is part of the C201's system firmware.}}

=== Finalizing ===

[[Handbook:AMD64/Installation/Finalizing|Finalize]] the new Gentoo installation according to the handbook. To use wifi remember to install {{Package|net-wireless/wpa_supplicant}}:

{{RootCmd
|emerge –ask net-wireless/wpa-supplicant
}}

== Considerations ==

* A USB ethernet dongle is recommended until Gentoo is running. Ensure the module is included with the kernel or built-in if using the Devsus script to create a bootable USB.
* This laptop is speedy for its size, but still takes a long time to emerge larger packages. Heavy use of distcc and crossdev's armv7a-hardfloat-linux-gnueabi target during testing.
* There is only 16GB of internal storage space available. Using an SD card for /home and a decent USB flash drive to compile larger packages on (firefox/libreoffice) is recommended.
* Decide on using either a mainline kernel (>=sys-kernel/gentoo-sources-4.20 works) or the ChromeOS kernel (linux 3.14). Despite a large majority claiming loss of functionality on newer kernels, this was not the case during testing; in fact, it fixed several issues from harmless warning messages in logs to X locking up entirely.
* Adding the arm_support overlay is recommended.
* Backing up the ChromeOS partition (mmcblk0) is highly recommended, however it is not difficult restore ChromeOS after a failure. Create a restore USB medium through desktop Chrome or download the files manually to write to a USB drive.
{{Warning|DO NOT disable cros' developer mode! If the kernel fails to boot, the machine will not be able to boot from the install medium and will be forced to "powerwash" the Chromebook. Even the kernel boots, crossystem/mosys is needed to change these flags. [https://lists.gnu.org/archive/html/libreboot/2016-06/msg00023.html This] is the solution if this happens on Libreboot, though wait for partition 5 to complete instead.}}

== Preparation == 

First, enable developer mode, unsigned boot and booting from external mediums. Look [https://libreboot.org/docs/depthcharge/#configuring-verified-boot-parameters here] for more information.

This laptop uses a depthcharge payload to boot, thus standard minimal ISOs will not work here.
Creating a [https://notabug.org/dimkr/devsus Devsus] image and writing it to a flash drive to use for the installation medium is recommended. If this is done, modify the kernel config file to include modules for either brcmfmac SDIO or the USB wifi/ethernet dongle.

{{Note|Devsus uses Google's 3.14 kernel. This is out of date and caused some issues for me. It is recommended to follow the 4.13+ kernel configuration below.}}

Once booted into the minimal environment and have obtained an internet connection via either wifi or an ethernet dongle, obtain {{Package|sys-boot/vboot-utils}} from whatever distribution is running. We will now wipe ChromeOS and setup a partition for the kernel, and leave the rest for root.

{{Warning|
<big>'''CHECK lsblk BEFORE DOING ANYTHING!'''</big>
On Google's 3.14 kernel, the eMMC storage is presented as mmcblk0, and the SD is presented as mmcblk2. On newer kernels, this can be reversed, with internal storage being mmcblk2. Needless to say this can cause an issue if partitioning or using dd on the wrong device!}}
{{Important|If planning on using firmware blobs, copy them from ChromeOS's root partition to the flash medium for later use.}}

{{RootCmd
|parted /dev/mmcblk[ID] mklabel gpt
|cgpt create -z /dev/mmcblk[root ID]
|cgpt create /dev/mmcblk[ID]
|cgpt add -i 1 -t kernel -b 8192 -s 65536 -l Kernel -S 1 -T 5 -P 10 /dev/mmcblk[ID] # 32mb
|sync}}

Partition the rest of the free space as desired with gdisk. Put the root filesystem directly after the kernel partition.

If planning to use the kernel on a USB drive, simply dd it to the internal storage and copy all modules from it:
{{RootCmd
|dd if{{=}}/dev/sda1 of{{=}}/dev/mmcblk[ID]p1 conv{{=}}notrunc
|mkfs.[fstype] /dev/mmcblk[ID]p2
|mount /dev/mmcblk[ID]p2 /mnt/gentoo
|cp -R /lib/modules/* /mnt/gentoo/lib/modules}}
Optionally, copy the firmware blobs previously backed up earlier to lib/firmware on the internal storage root.

== Base installation ==

At this point, follow generic stage3 install steps. Mount the root filesystem wherever and setup stage3/Portage:
{{Note|Exchange /mnt/gentoo with the real mountpoint.}}

{{RootCmd
|<nowiki>wget -O - http://distfiles.gentoo.org/releases/arm/autobuilds/$(wget -O - http://distfiles.gentoo.org/releases/arm/autobuilds/latest-stage3-armv7a_hardfp.txt 2>/dev/zero |  tail -n1) |  tar xjvp -C /mnt/gentoo/</nowiki>
|<nowiki>wget -O - http://distfiles.gentoo.org/releases/snapshots/current/portage-latest.tar.bz2 |  tar xvjp -C /mnt/gentoo/usr/</nowiki>}}

{{Note| Alternatively, use a (hardened) [[Project:Hardened_musl|musl]] [https://gentoo.osuosl.org/experimental/arm/musl/ stage3], which is known to work as well, though different instructions apply.}}

Proceed to chroot and emerge world and whatever else.

{{FileBox|filename=make.conf|lang=bash|1=
CFLAGS="-O2 -pipe -march=armv7-a -mtune=cortex-a17 -mfpu=neon -mfloat-abi=hard -pipe -fomit-frame-pointer -fstack-protector-strong"
CXXFLAGS="${CFLAGS}"
CHOST="armv7a-hardfloat-linux-gnueabi"
INPUT_DEVICES="synaptics evdev"
VIDEO_CARDS="fbdev" #fbturbo also works if using an overlay
}}


== 4.13+ kernel configuration ==

{{Warning|This section is out of date, better follow instructions above.}}
{{Important
|This script is out of date and will require adaptation to get it working, in particular the patches used. The important bits for building the raw kernel begin on line [https://gist.github.com/anonymous/d0ce3911c933562154ca2e3f5fe602c5#file-c201-kerngen-sh-L171 171].  Using the RockMyy repo as is to build a kernel is recommended. }}
Requirements:

* {{Package|sys-boot/vboot-utils}}
* {{Package|dev-embedded/u-boot-tools}}
* (if building on another machine) crossdev with the armv7a-hardfloat-linux-gnueabi target

Clone the RockMyy repo:

{{Cmd
|git clone https://github.com/Miouyouyou/RockMyy.git
|cd RockMyy
}}

Download the following gist:

https://gist.github.com/anonymous/d0ce3911c933562154ca2e3f5fe602c5

Save 0007-brcmfmac-wififix.patch to patches/kernel/v4.13

Save c201_kerngen.sh & kernel.its to .

Save config-latest to ./config/v4.13/

Create a file named cmdline in the current directory.

Put the following in it, replace rootfstype:
{{FileBox|filename=cmdline|lang=bash|1=
console=tty1 init=/sbin/init root=PARTUUID=%U/PARTNROFF=1 rootfstype=[ext4/f2fs/etc] rootwait rw quiet
}}

The CPU governor defaults to conservative. If ondemand, or other modules, are desired, set MAKE_CONFIG=menuconfig to enter menuconfig.

Otherwise:

{{Cmd|sh c201_kerngen.sh}}

If all goes well, this will put the kernel as ./kernel and the modules in ./modules

Now scp/copy this file and folder to the C201. Once done, or if compiling on the C201, install them:

{{RootCmd
|dd if{{=}}kernel of{{=}}/dev/mmcblk[ID]p1 conv{{=}}notrunc
|cp -Rv ./modules/lib /
}}

This kernel can be used with the Devsus USB as well.

== Built-in wifi ==

Built-in wifi requires the proprietary binary firmware blob "brcmfmac4354-sdio.bin" (provided by {{Package|sys-kernel/linux-firmware}}).

This binary expects a nvram, {{Path|/lib/firmware/brcm/brcmfmac4354-sdio.txt}}. Create it with the content provided by the ChromiumOS project: https://chromium.googlesource.com/chromiumos/overlays/board-overlays/+/master/overlay-veyron/chromeos-base/chromeos-bsp-veyron/files/firmware/brcmfmac4354-sdio.txt

The ChromiumOS project considers this file belonging to the BSP (Board Support Package) and sees no sense in upstreaming the file to {{Package|sys-kernel/linux-firmware}}.<ref>[https://chromium.googlesource.com/chromiumos/third_party/linux-firmware/+/08b6ec4d1cac8dbac24addd2c6b36e5cf4f13923 ChromiumOS Git at Google], Retrieved on February 25th, 2019</ref>

== ACPI ==

{{FileBox|filename=/etc/acpi/default.sh|lang=bash|1=
#!/bin/sh
# /etc/acpi/default.sh
# Default acpi script that takes an entry for all actions

set $*

group=${1%%/*}
action=${1#*/}
device=$2
id=$3
value=$4

log_unhandled() {
	logger "ACPI event unhandled: $*"
}

case "$group" in
	jack)
		case "$id" in
			'plug')
				amixer -D hw:0 cset name='Left Speaker Mixer Left DAC Switch' off
				amixer -D hw:0 cset name='Right Speaker Mixer Right DAC Switch' off
				amixer -D hw:0 cset name='Headphone Switch Left' on
                                amixer -D hw:0 cset name='Headphone Switch Right' on
				;;
			'unplug')
				amixer -D hw:0 cset name='Left Speaker Mixer Left DAC Switch' on
                                amixer -D hw:0 cset name='Right Speaker Mixer Right DAC Switch' on
				amixer -D hw:0 cset name='Headphone Switch Left' off
                                amixer -D hw:0 cset name='Headphone Switch Right' off
				;;
			*) uhd $+;;
		esac
		log_unhandled $*
	;;
	button)
		case "$action" in
			#power)
					#pm-suspend
			#		log_unhandled $*
			#	;;

			lid)
				case "$id" in
					close) if [ $(cat /sys/class/power_supply/gpio-charger/online) -eq 0 ]; then
                                                        pm-suspend
                                                fi;;
					open) :;;
					*) uhd $*;;
				esac
				log_unhandled $*
				;;

			*)	log_unhandled $* ;;
		esac
		;;

	*)	log_unhandled $* ;;
esac
}}

This handles alternating between speaker and headphone jack when one is plugged in, as well as lid suspend when the charger is unplugged. Power button support can be added if desired, though keep in mind the device will simply turn on again when the lid is closed.
{{Note|It seems some mixer control names changed from 3.x to 4.x (i.e. Right Headphone Switch vs. Headphone Switch Right). If using a 3.x kernel, and this isn't working properly, ensure the names match up to what amixer says they should be.}}

== ALSA/Pulse quirks ==

Add the following if using Pulseaudio:

{{FileBox|filename=/etc/pulse/default.pa|lang=bash|1=
load-module module-alsa-sink device=sysdefault
load-module module-alsa-source device=sysdefault
}}

See [https://wiki.debian.org/InstallingDebianOn/Asus/C201#Audio InstallingDebianOn/Asus/C201#Audio] for further information. VEYRON-I2S shipped with alsa, so it's unlikely to need to add Google's UCM files.

HDMI is not tested. It appeared under 3.14 as RockchipHDMI, but is missing under 4.13. Possibly a kernel config or UCM issue.

== Keybinds ==

xbacklight doesn't work, however, a backlight device exists. This script can be used in tandem with xbindkeys as a replacement for xbacklight:

{{FileBox|filename=c201_backlight.sh|lang=bash|1=
#!/bin/bash
if [ "$(($(cat /sys/devices/platform/backlight/backlight/backlight/brightness)+$1))" -gt "255" ];then
        echo 255 > /sys/devices/platform/backlight/backlight/backlight/brightness
        exit
fi
if [ "$(($(cat /sys/devices/platform/backlight/backlight/backlight/brightness)+$1))" -lt "0" ]; then
        echo 0 > /sys/devices/platform/backlight/backlight/backlight/brightness
        exit
fi

echo $(($(cat /sys/devices/platform/backlight/backlight/backlight/brightness)+$1)) > /sys/devices/platform/backlight/backlight/backlight/brightness
}}

Provide the delta for the backlight as an argument, positive or negative.

This file is read-only by default, add this script to the local service if desired:

{{FileBox|filename=/etc/local.d/backlight-permissions.start|lang=bash|1=
chmod 666 /sys/devices/platform/backlight/backlight/backlight/brightness}}

This script needs to be marked executable by doing {{c|chmod +x}}

If reassigning the function keys for another purpose is desired, edit the /usr/share/X11/xkb/symbols/pc file.

In the following example, the search key (LWIN) has been remapped to Caps and set some of the function keys to much-needed movement keys. Also, the power button was remapped to the Delete key:

{{FileBox|filename=/usr/share/X11/xkb/symbols/pc|title=keys added to "pc105" xkb_symbols
|    key <LWIN>   {      [ Caps_Lock             ]       };
    key <FK01>   {      [ Home                  ]       };
    key <FK02>   {      [ End                   ]       };
    key <FK03>   {      [ Page_Up               ]       };
    key <FK04>   {      [ Page_Down             ]       };}}
{{FileBox|filename=/usr/share/X11/xkb/symbols/inet|title=replaced items
|    key <POWR>   {      [ Delete                ]       };
}}

Restart X for these changes to take effect.

To remove old files in /var/lib/xkb:

{{RootCmd|rm -rf /var/lib/xkb/*}}

== Touchpad ==

Ensure the evdev and synaptics INPUT_DEVICES are set in make.conf.

Put [https://gist.github.com/anonymous/4fb7968cae3c1dc8e5249ee2e69fc3a6 50-synaptics.conf] in /etc/X11/xorg.conf.d

== Google tools ==

The {{Package|sys-boot/vboot-utils}} package contains utilities for Chromebooks, such as cgpt or crossystem, which is used to control firmware flags (USB boot, default boot device, etc). For this to work, if desired, mosys is also needed.
Ebuilds for this can be acquired here: https://github.com/doughdemon/felix-overlay

== Other quirks ==

If the bluetooth module is loaded at any time and the system is suspended, both the bluetooth and wireless driver will stop working. A temporary fix is to blacklist the btsdio module:

{{RootCmd|echo "blacklist btsdio" > /etc/modprobe.d/blacklist-btsdio.conf}}


{{Package|sys-apps/lm_sensors}} does not work here. Query /sys/devices/virtual/thermal/thermal_zoneX/temp to get temperatures.
This will average the two CPU sensors up and output in a sane format:

{{Cmd|echo "$((($(cat /sys/devices/virtual/thermal/thermal_zone1/temp)+$(cat /sys/devices/virtual/thermal/thermal_zone2/temp))/2000))"}}

{{Package|sys-power/acpi}} does not display the correct discharge time. This can be obtained through upower:

{{Cmd|upower -i /org/freedesktop/UPower/devices/battery_sbs_20_000b}}

== External resources ==

* https://notabug.org/dimkr/devsus
* https://github.com/Miouyouyou/RockMyy
* http://www.synkhronix.com/journal/gentoo-chromebook
* https://wiki.debian.org/InstallingDebianOn/Asus/C201
* Archlinuxarm, Rockchip git
''Thanks to  [https://github.com/Miouyouyou Miouyouyou] and [https://notabug.org/dimkr dimkr] for their projects!''

== References ==

[[Category:Laptops]]
[[Category:Embedded systems]]
