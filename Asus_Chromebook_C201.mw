
== Specs ==

* Internal name: veyron/speedy
* SoC: Rockchip RK3288 
* CPU: Quad-core ARM Cortex-A17 @ 1.8 GHz
* GPU: Mali T764 
* Audio: Rockchip I2S
* 11.6" screen @ 1366x768
* Ram: 2 or 4gb
The 4gb variant is definitely preferable.

== What works ==
{| class="wikitable"
|-
! !! On >=sys-kernel/gentoo-sources-4.20 !! On ChromeOS 3.14 or patched 4.12+
|-
| '''Suspend/Resume''' || untested || works
|-
| '''Built-in Wifi''' || works with proprietary blobs || works (on newer kernels, with patch)
|-
| '''X''' || works ({{Package|x11-wm/i3}}) || works 
|-
| '''X w/ randr''' || untested || works
|-
| '''HDMI''' || untested || untested
|-
| '''ACPI events''' || untested || works (lid, buttons, charger)
|-
| '''Audio''' || works || works
|-
| '''Touchpad''' || works || works
|-
| '''Bluetooth''' || untested || works ([[#Other quirks|buggy]])
|-
| '''GPU hardware acceleration''' || no (WIP, cf. [https://gitlab.freedesktop.org/panfrost Panfrost]) || unknown
|}
Mainline support is close to complete<ref>http://opensource.rock-chips.com/wiki_Status_Matrix</ref>, so using {{Package|sys-kernel/gentoo-sources}} should yield the best overall experience of all options.

== What doesn't ==

* No GPU hardware acceleration (yet). Future progress in this area is likely to come from the [https://gitlab.freedesktop.org/panfrost Panfrost] project.
* Bluetooth - Bluetooth works, but if the module is loaded at any time, it will crash both itself and wireless if the system is suspended. The current fix is to [[#Other quirks|blacklist the module]].
* Wireless without blobs - brcmfmac requires non-free firmware here.

== Considerations ==

* A USB ethernet dongle is recommended until Gentoo is running. Ensure the module is included with the kernel or built-in if using the Devsus script to create a bootable USB.
* This laptop is speedy for its size, but still takes a long time to emerge larger packages. Heavy use of distcc and crossdev's armv7a-hardfloat-linux-gnueabi target during testing.
* There is only 16GB of internal storage space available. Using an SD card for /home and a decent USB flash drive to compile larger packages on (firefox/libreoffice) is recommended.
* Decide on using either a mainline kernel (>=sys-kernel/gentoo-sources-4.20 works) or the ChromeOS kernel (linux 3.14). Despite a large majority claiming loss of functionality on newer kernels, this was not the case during testing; in fact, it fixed several issues from harmless warning messages in logs to X locking up entirely.
* Adding the arm_support overlay is recommended.
* Backing up the ChromeOS partition (mmcblk0) is highly recommended, however it is not difficult restore ChromeOS after a failure. Create a restore USB medium through desktop Chrome or download the files manually to write to a USB drive.
{{Warning|DO NOT disable cros' developer mode! If the kernel fails to boot, the machine will not be able to boot from the install medium and will be forced to "powerwash" the Chromebook. Even the kernel boots, crossystem/mosys is needed to change these flags. [https://lists.gnu.org/archive/html/libreboot/2016-06/msg00023.html This] is the solution if this happens on Libreboot, though wait for partition 5 to complete instead.}}

== Preparation == 

First, enable developer mode, unsigned boot and booting from external mediums. Look [https://libreboot.org/docs/depthcharge/#configuring-verified-boot-parameters here] for more information.

This laptop uses a depthcharge payload to boot, thus standard minimal ISOs will not work here.
Creating a [https://notabug.org/dimkr/devsus Devsus] image and writing it to a flash drive to use for the installation medium is recommended. If this is done, modify the kernel config file to include modules for either brcmfmac SDIO or the USB wifi/ethernet dongle.

{{Note|Devsus uses Google's 3.14 kernel. This is out of date and caused some issues for me. It is recommended to follow the 4.13+ kernel configuration below.}}

Once booted into the minimal environment and have obtained an internet connection via either wifi or an ethernet dongle, obtain {{Package|sys-boot/vboot-utils}} from whatever distribution is running. We will now wipe ChromeOS and setup a partition for the kernel, and leave the rest for root.

{{Warning|
<big>'''CHECK lsblk BEFORE DOING ANYTHING!'''</big>
On Google's 3.14 kernel, the eMMC storage is presented as mmcblk0, and the SD is presented as mmcblk2. On newer kernels, this can be reversed, with internal storage being mmcblk2. Needless to say this can cause an issue if partitioning or using dd on the wrong device!}}
{{Important|If planning on using firmware blobs, copy them from ChromeOS's root partition to the flash medium for later use.}}

{{RootCmd
|parted /dev/mmcblk[ID] mklabel gpt
|cgpt create -z /dev/mmcblk[root ID]
|cgpt create /dev/mmcblk[ID]
|cgpt add -i 1 -t kernel -b 8192 -s 65536 -l Kernel -S 1 -T 5 -P 10 /dev/mmcblk[ID] # 32mb
|sync}}

Partition the rest of the free space as desired with gdisk. Put the root filesystem directly after the kernel partition.

If planning to use the kernel on a USB drive, simply dd it to the internal storage and copy all modules from it:
{{RootCmd
|dd if{{=}}/dev/sda1 of{{=}}/dev/mmcblk[ID]p1 conv{{=}}notrunc
|mkfs.[fstype] /dev/mmcblk[ID]p2
|mount /dev/mmcblk[ID]p2 /mnt/gentoo
|cp -R /lib/modules/* /mnt/gentoo/lib/modules}}
Optionally, copy the firmware blobs previously backed up earlier to lib/firmware on the internal storage root.

== Base installation ==

At this point, follow generic stage3 install steps. Mount the root filesystem wherever and setup stage3/Portage:
{{Note|Exchange /mnt/gentoo with the real mountpoint.}}

{{RootCmd
|<nowiki>wget -O - http://distfiles.gentoo.org/releases/arm/autobuilds/$(wget -O - http://distfiles.gentoo.org/releases/arm/autobuilds/latest-stage3-armv7a_hardfp.txt 2>/dev/zero |  tail -n1) |  tar xjvp -C /mnt/gentoo/</nowiki>
|<nowiki>wget -O - http://distfiles.gentoo.org/releases/snapshots/current/portage-latest.tar.bz2 |  tar xvjp -C /mnt/gentoo/usr/</nowiki>}}

{{Note| Alternatively, use a (hardened) [[Project:Hardened_musl|musl]] [https://gentoo.osuosl.org/experimental/arm/musl/ stage3], which is known to work as well, though different instructions apply.}}

Proceed to chroot and emerge world and whatever else.

{{FileBox|filename=make.conf|lang=bash|1=
CFLAGS="-O2 -pipe -march=armv7-a -mtune=cortex-a17 -mfpu=neon -mfloat-abi=hard -pipe -fomit-frame-pointer -fstack-protector-strong"
CXXFLAGS="${CFLAGS}"
CHOST="armv7a-hardfloat-linux-gnueabi"
INPUT_DEVICES="synaptics evdev"
VIDEO_CARDS="fbdev" #fbturbo also works if using an overlay
}}

== 4.20+ kernel deployment ==

Requirements:
* {{Package|dev-embedded/u-boot-tools}}
* {{Package|sys-boot/vboot-utils}}


Configure {{Package|sys-kernel/gentoo-sources}} as usual. For reference adhere to the config provided here.


Build kernel and dtbs:
{{Cmd
|make -j5 zImage dtbs
}}

From the kernel build directory, copy the zImage and the rk3288-veyron-speedy.dtb to the desired working directory:
{{Cmd
|cp -a arch/arm/boot/zImage /PATH/TO/ARBITRARY_WORKING_DIRECTORY
|cp -a arch/arm/boot/dts/rk3288-veyron-speedy.dtb /PATH/TO/ARBITRARY_WORKING_DIRECTORY
}}

Create a [[Custom Initramfs]].
Create it as a separate file (cf. [[Custom_Initramfs#Creating_a_separate_file|Custom Initramfs - Creating a separate file]]):
{{Cmd
|<nowiki>find . -print0 | cpio --null --create --verbose --format=newc | gzip --best > /PATH/TO/ARBITRARY_WORKING_DIRECTORY/initrd.img</nowiki>
}}

Change to the desired working directory:
{{Cmd
|cd /PATH/TO/ARBITRARY_WORKING_DIRECTORY
}}


Create the configuration file ("gentoo.its") for the FIT image with the following content<ref>https://wiki.debian.org/InstallingDebianOn/Asus/C201</ref>:
{{FileBox|filename=gentoo.its|lang=bash|1=
/dts-v1/;

/ {
    description = "Linux kernel image with one or more FDT blobs";
    #address-cells = <1>;
    images {
        kernel@1{
            description = "vmlinuz";
            data = /incbin/("zImage");
            type = "kernel_noload";
            arch = "arm";
            os = "linux";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
        fdt@1{
            description = "dtb";
            data = /incbin/("rk3288-veyron-speedy.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
        ramdisk@1{
            description = "initrd.img";
            data = /incbin/("initrd.img");
            type = "ramdisk";
            arch = "arm";
            os = "linux";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
    };
    configurations {
        default = "conf@1";
        conf@1{
            kernel = "kernel@1";
            fdt = "fdt@1";
                ramdisk = "ramdisk@1";
        };
    };
};
}}

Pack the FIT image:
{{Cmd
|sync && mkimage -f gentoo.its gentoo.itb
}}


Create a file ("kernel.flags") for the CMDLINE parameters:
{{FileBox|filename=kernel.flags|lang=bash|1=
console=tty1 root=/dev/YOUR_ROOTFS_PARTITION rootfstype=YOUR_ROOTFS_TYPE rootwait rw
}}

Sign and repack the kernel:
{{Cmd
|sync && futility --debug vbutil_kernel \
    --arch arm \
    --version 1 \
    --keyblock /usr/share/vboot/devkeys/kernel.keyblock \
    --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk \
    --bootloader kernel.flags \
    --config kernel.flags \
    --vmlinuz gentoo.itb \
    --pack vmlinuz.signed \
}}

Install the kernel to the kernel partition:
{{RootCmd
|sync && dd if{{=}}vmlinuz.signed of{{=}}/dev/YOUR_KERNEL_PARTITION
}}

== 4.13+ kernel configuration ==

{{Warning|This section is out of date, better follow instructions above.}}
{{Important
|This script is out of date and will require adaptation to get it working, in particular the patches used. The important bits for building the raw kernel begin on line [https://gist.github.com/anonymous/d0ce3911c933562154ca2e3f5fe602c5#file-c201-kerngen-sh-L171 171].  Using the RockMyy repo as is to build a kernel is recommended. }}
Requirements:

* {{Package|sys-boot/vboot-utils}}
* {{Package|dev-embedded/u-boot-tools}}
* (if building on another machine) crossdev with the armv7a-hardfloat-linux-gnueabi target

Clone the RockMyy repo:

{{Cmd
|git clone https://github.com/Miouyouyou/RockMyy.git
|cd RockMyy
}}

Download the following gist:

https://gist.github.com/anonymous/d0ce3911c933562154ca2e3f5fe602c5

Save 0007-brcmfmac-wififix.patch to patches/kernel/v4.13

Save c201_kerngen.sh & kernel.its to .

Save config-latest to ./config/v4.13/

Create a file named cmdline in the current directory.

Put the following in it, replace rootfstype:
{{FileBox|filename=cmdline|lang=bash|1=
console=tty1 init=/sbin/init root=PARTUUID=%U/PARTNROFF=1 rootfstype=[ext4/f2fs/etc] rootwait rw quiet
}}

The CPU governor defaults to conservative. If ondemand, or other modules, are desired, set MAKE_CONFIG=menuconfig to enter menuconfig.

Otherwise:

{{Cmd|sh c201_kerngen.sh}}

If all goes well, this will put the kernel as ./kernel and the modules in ./modules

Now scp/copy this file and folder to the C201. Once done, or if compiling on the C201, install them:

{{RootCmd
|dd if{{=}}kernel of{{=}}/dev/mmcblk[ID]p1 conv{{=}}notrunc
|cp -Rv ./modules/lib /
}}

This kernel can be used with the Devsus USB as well.

== Built-in wifi ==

Built-in wifi requires the proprietary binary firmware blob "brcmfmac4354-sdio.bin" (provided by {{Package|sys-kernel/linux-firmware}}).

== ACPI ==

{{FileBox|filename=/etc/acpi/default.sh|lang=bash|1=
#!/bin/sh
# /etc/acpi/default.sh
# Default acpi script that takes an entry for all actions

set $*

group=${1%%/*}
action=${1#*/}
device=$2
id=$3
value=$4

log_unhandled() {
	logger "ACPI event unhandled: $*"
}

case "$group" in
	jack)
		case "$id" in
			'plug')
				amixer -D hw:0 cset name='Left Speaker Mixer Left DAC Switch' off
				amixer -D hw:0 cset name='Right Speaker Mixer Right DAC Switch' off
				amixer -D hw:0 cset name='Headphone Switch Left' on
                                amixer -D hw:0 cset name='Headphone Switch Right' on
				;;
			'unplug')
				amixer -D hw:0 cset name='Left Speaker Mixer Left DAC Switch' on
                                amixer -D hw:0 cset name='Right Speaker Mixer Right DAC Switch' on
				amixer -D hw:0 cset name='Headphone Switch Left' off
                                amixer -D hw:0 cset name='Headphone Switch Right' off
				;;
			*) uhd $+;;
		esac
		log_unhandled $*
	;;
	button)
		case "$action" in
			#power)
					#pm-suspend
			#		log_unhandled $*
			#	;;

			lid)
				case "$id" in
					close) if [ $(cat /sys/class/power_supply/gpio-charger/online) -eq 0 ]; then
                                                        pm-suspend
                                                fi;;
					open) :;;
					*) uhd $*;;
				esac
				log_unhandled $*
				;;

			*)	log_unhandled $* ;;
		esac
		;;

	*)	log_unhandled $* ;;
esac
}}

This handles alternating between speaker and headphone jack when one is plugged in, as well as lid suspend when the charger is unplugged. Power button support can be added if desired, though keep in mind the device will simply turn on again when the lid is closed.
{{Note|It seems some mixer control names changed from 3.x to 4.x (i.e. Right Headphone Switch vs. Headphone Switch Right). If using a 3.x kernel, and this isn't working properly, ensure the names match up to what amixer says they should be.}}

== ALSA/Pulse quirks ==

Add the following if using Pulseaudio:

{{FileBox|filename=/etc/pulse/default.pa|lang=bash|1=
load-module module-alsa-sink device=sysdefault
load-module module-alsa-source device=sysdefault
}}

See [https://wiki.debian.org/InstallingDebianOn/Asus/C201#Audio InstallingDebianOn/Asus/C201#Audio] for further information. VEYRON-I2S shipped with alsa, so it's unlikely to need to add Google's UCM files.

HDMI is not tested. It appeared under 3.14 as RockchipHDMI, but is missing under 4.13. Possibly a kernel config or UCM issue.

== Keybinds ==

xbacklight doesn't work, however, a backlight device exists. This script can be used in tandem with xbindkeys as a replacement for xbacklight:

{{FileBox|filename=c201_backlight.sh|lang=bash|1=
#!/bin/bash
if [ "$(($(cat /sys/devices/platform/backlight/backlight/backlight/brightness)+$1))" -gt "255" ];then
        echo 255 > /sys/devices/platform/backlight/backlight/backlight/brightness
        exit
fi
if [ "$(($(cat /sys/devices/platform/backlight/backlight/backlight/brightness)+$1))" -lt "0" ]; then
        echo 0 > /sys/devices/platform/backlight/backlight/backlight/brightness
        exit
fi

echo $(($(cat /sys/devices/platform/backlight/backlight/backlight/brightness)+$1)) > /sys/devices/platform/backlight/backlight/backlight/brightness
}}

Provide the delta for the backlight as an argument, positive or negative.

This file is read-only by default, add this script to the local service if desired:

{{FileBox|filename=/etc/local.d/backlight-permissions.start|lang=bash|1=
chmod 666 /sys/devices/platform/backlight/backlight/backlight/brightness}}

This script needs to be marked executable by doing {{c|chmod +x}}

If reassigning the function keys for another purpose is desired, edit the /usr/share/X11/xkb/symbols/pc file.

In the following example, the search key (LWIN) has been remapped to Caps and set some of the function keys to much-needed movement keys. Also, the power button was remapped to the Delete key:

{{FileBox|filename=/usr/share/X11/xkb/symbols/pc|title=keys added to "pc105" xkb_symbols
|    key <LWIN>   {      [ Caps_Lock             ]       };
    key <FK01>   {      [ Home                  ]       };
    key <FK02>   {      [ End                   ]       };
    key <FK03>   {      [ Page_Up               ]       };
    key <FK04>   {      [ Page_Down             ]       };}}
{{FileBox|filename=/usr/share/X11/xkb/symbols/inet|title=replaced items
|    key <POWR>   {      [ Delete                ]       };
}}

Restart X for these changes to take effect.

To remove old files in /var/lib/xkb:

{{RootCmd|rm -rf /var/lib/xkb/*}}

== Touchpad ==

Ensure the evdev and synaptics INPUT_DEVICES are set in make.conf.

Put [https://gist.github.com/anonymous/4fb7968cae3c1dc8e5249ee2e69fc3a6 50-synaptics.conf] in /etc/X11/xorg.conf.d

== Google tools ==

The {{Package|sys-boot/vboot-utils}} package contains utilities for Chromebooks, such as cgpt or crossystem, which is used to control firmware flags (USB boot, default boot device, etc). For this to work, if desired, mosys is also needed.
Ebuilds for this can be acquired here: https://github.com/doughdemon/felix-overlay

== Other quirks ==

{{Package|sys-apps/lm_sensors}} does not work here. Query /sys/devices/virtual/thermal/thermal_zoneX/temp to get temperatures.

This will average the two CPU sensors up and output in a sane format:

{{Cmd|echo "$((($(cat /sys/devices/virtual/thermal/thermal_zone1/temp)+$(cat /sys/devices/virtual/thermal/thermal_zone2/temp))/2000))"}}

{{Package|sys-power/acpi}} does not display the correct discharge time. This can be obtained through upower:

{{Cmd|upower -i /org/freedesktop/UPower/devices/battery_sbs_20_000b}}

If the bluetooth module loads and the system is suspended, both the bluetooth and wireless driver will stop working. A temporary fix is to blacklist the btsdio module:

{{RootCmd|echo "blacklist btsdio" > /etc/modprobe.d/blacklist-btsdio.conf}}

== External resources ==

* https://notabug.org/dimkr/devsus
* https://github.com/Miouyouyou/RockMyy
* http://www.synkhronix.com/journal/gentoo-chromebook
* https://wiki.debian.org/InstallingDebianOn/Asus/C201
* Archlinuxarm, Rockchip git
''Thanks to  [https://github.com/Miouyouyou Miouyouyou] and [https://notabug.org/dimkr dimkr] for their projects!''

== Sources ==

[[Category:Laptops]]
[[Category:Embedded systems]]
