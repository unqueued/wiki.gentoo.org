== Intro ==
While there's a fair bit of documentation on how others have installed Devuan/Arch on this computer, there's very little information in the Gentoo realm on the Asus C201/C100P, other devices with an RK3288 SoC, or ARM Chromebooks in general.
I'll be slowly documenting my steps on how I managed to get Gentoo working on the C201. I went the Libreboot route, but that's up to you.

Specs:
* Internal name: veyron/speedy
* SoC: Rockchip RK3288 
* CPU: Quad-core ARM Cortex-A17 @ 1.8 GHz
* GPU: Mali T764 
* Audio: Rockchip I2S
* 11.6" screen @ 1366x768
* Ram: 2 or 4gb
I ''highly'' recommend the 4gb variant, especially if you're going to be compiling things :>

== What works ==
* Suspend/resume
* Wireless (on newer kernels, with patch)
* X w/ randr (HDMI assumed to work, not tested)
* ACPI events (lid, buttons, charger)
* Audio
* Touchpad
* Everything else!

== What doesn't ==

* No GPU hardware acceleration. Apparently you can get OpenGLES/EGL working with the Mali T764, but I had no such luck (nor did I try very hard - I don't particularly need this, support in X/various compositors is minimal, and the blobs are closed source). Future progress in this area likely to come from https://notabug.org/cafe/chai
* Bluetooth - Bluetooth works, but if you load the module at any time, it will crash both itself and wireless if you attempt to suspend. More to come...
* Wireless without blobs - brcmfmac requires non-free firmware here.

== Considerations ==
* You'll likely want a USB ethernet dongle until you get Gentoo running. Ensure the module is included with your kernel or built-in if you're using the Devsus script to create a bootable USB.<br />
* This laptop is speedy for its size, but still takes a long time to emerge larger packages. I made heavy use of distcc and crossdev's armv7a-hardfloat-linux-gnueabi target.
* There is only 16GB of internal storage space available. I use an SD card for my /home and a decent USB flash drive to compile larger packages on (firefox/libreoffice).
* You can decide on using either the ChromeOS kernel (linux 3.14) or mainline with patches. Despite a large majority claiming you will lose functionality on newer kernels, this was not the case for me; in fact, it fixed several issues from harmless warning messages in logs to X locking up entirely.
* I recommend adding the arm_support overlay
{{Warning|DO NOT disable cros' developer mode! If you cannot boot your kernel, you will not be able to boot from your install medium and will be forced to "powerwash" your Chromebook. Even if you have a booting kernel, you will need crossystem/mosys to change these flags. [https://lists.gnu.org/archive/html/libreboot/2016-06/msg00023.html This] is the solution if this happens to you on Libreboot, though wait for partition 5 to complete instead.}}

== Starting out == 
First, you must enable developer mode, unsigned boot and booting from external mediums. Look [https://libreboot.org/docs/depthcharge/#configuring-verified-boot-parameters here] for more information.<br />
This laptop uses a depthcharge payload to boot, thus standard minimal ISOs will not work here.
I recommend creating a [https://notabug.org/dimkr/devsus Devsus] image and writing it to a flash drive to use for your installation medium. If you do so, modify the config file to include your<br />
I also highly recommend you backup your ChromeOS partition (mmcblk0), however you can easily restore ChromeOS if you mess up. You can create one through desktop Chrome or download the files manually to write to a USB drive.<br />
{{Note|Devsus uses Google's 3.14 kernel. This is out of date and caused some issues for me. I recommend following the 4.13+ kernel configuration below.}}
Once you're booted into your minimal enviroment and have obtained an internet connection via either wifi or an ethernet dongle, obtain vboot-utils from whatever distro you're on. We will now wipe ChromeOS and setup a partition for our kernel, and leave the rest for root.

{{Warning|Run lsblk before doing anything! On Google's 3.14 kernel, the eMMC storage is presented as mmcblk0, and the SD is presented as mmcblk2. On newer kernels, this can be reversed, with internal storage being mmcblk2. Needless to say this can cause an issue if you partition or dd a device you don't want to!}}
{{Important|If you plan on using firmware blobs, copy them from ChromeOS's root partition to your flash medium for later use!}}

{{RootCmd
|parted /dev/mmcblk0 mklabel gpt
|cgpt create -z /dev/mmcblk0
|cgpt create /dev/mmcblk0
|cgpt add -i 1 -t kernel -b 8192 -s 65536 -l Kernel -S 1 -T 5 -P 10 /dev/mmcblk0 # 32mb
|sync}}

Partition the rest of the free space how you wish with gdisk. Put your root filesystem directly after the kernel partition.

If you plan to use the kernel on your USB drive, simply dd the kernel on your flash drive to the internal storage and copy all modules from it:
{{RootCmd
|dd if=/dev/sda1 of=/dev/mmcblk0p1 conv=notrunc
|cp -R /lib/modules/* /mnt/gentoo/lib/modules}}
Optionally, you can copy the firmware blobs you backed up earlier to lib/firmware on your internal storage root. 

== Base installation ==
At this point, you should follow generic stage3 install steps. Mount your root filesystem wherever and setup stage3/Portage:
{{Note|Exchange /mnt/gentoo with your mountpoint}}
{{RootCmd
|wget -O - http://distfiles.gentoo.org/releases/arm/autobuilds/$(wget -O - http://distfiles.gentoo.org/releases/arm/autobuilds/latest-stage3-armv7a_hardfp.txt 2>/dev/zero {{!}}  tail -n1) {{!}}  tar xjvp -C /mnt/gentoo/
|wget -O - http://distfiles.gentoo.org/releases/snapshots/current/portage-latest.tar.bz2 {{!}}  tar xvjp -C /mnt/gentoo/usr/}}
Proceed to chroot and emerge world and whatever else.<br />
{{CodeBox|title=make.conf flags|lang=bash|1=
CFLAGS="-O2 -pipe -march=armv7-a -mtune=cortex-a17 -mfpu=neon -mfloat-abi=hard -pipe -fomit-frame-pointer -fstack-protector-strong"
CXXFLAGS="${CFLAGS}"
CHOST="armv7a-hardfloat-linux-gnueabi"
INPUT_DEVICES="synaptics evdev"
VIDEO_CARDS="fbdev" #fbturbo also works if you're using an overlay
}}

== 4.13+ kernel configuration ==
{{Note|There is currently no linux-libre 4.13, but 4.12 should work, if you wish.}}
Requirments:
* crossdev if you are building on another machine, armv7a-hardfloat-linux-gnueabi target
* vboot-utils
Clone the RockMyy repo:
{{Cmd
|git clone https://github.com/Miouyouyou/RockMyy.git
|cd RockMyy
}}

Download the following gist:<br />
https://gist.github.com/anonymous/317d574515d22e0384f74e4275a40aeb<br />

Save 0007-brcmfmac-wififix.patch to patches/kernel/v4.13<br />
Save kerngen.sh & kernel.its to ./<br />
Save config-latest to ./config/v4.13/<br /><br />
Create a file named cmdline in the current directory.<br />
Put the following in it, replace rootfstype:
{{CodeBox|title=cmdline|lang=bash|1=
console=tty1 init=/sbin/init root=PARTUUID=%U/PARTNROFF=1 rootfstype=[ext4/f2fs/etc] rootwait rw quiet
}}
The CPU governor defaults to conservative. If you want ondemand, or other modules, set MAKE_CONFIG=menuconfig to enter menuconfig.<br />
Otherwise:
{{Cmd
|sh c201_kerngen.sh}}

If all goes well, this will put the kernel as ./kernel and the modules in ./modules<br />
You can now scp/copy this file and folder to the C201. Once you've done this, or if you're compiling on the C201, install them:
{{RootCmd
|dd if{{=}}kernel of{{=}}/dev/mmcblk[ID]p1 conv{{=}}notrunc
|cp -Rv ./modules/lib /}}

You can use this kernel with the Devsus USB as well.

== ACPI ==
{{CodeBox|title=/etc/acpi/default.sh|lang=bash|1=
#!/bin/sh
# /etc/acpi/default.sh
# Default acpi script that takes an entry for all actions

set $*

group=${1%%/*}
action=${1#*/}
device=$2
id=$3
value=$4

log_unhandled() {
	logger "ACPI event unhandled: $*"
}

case "$group" in
	jack)
		case "$id" in
			'plug')
				amixer -D hw:0 cset name='Left Speaker Mixer Left DAC Switch' off
				amixer -D hw:0 cset name='Right Speaker Mixer Right DAC Switch' off
				amixer -D hw:0 cset name='Left Headphone Switch' on
                                amixer -D hw:0 cset name='Right Headphone Switch' on
				;;
			'unplug')
				amixer -D hw:0 cset name='Left Speaker Mixer Left DAC Switch' on
                                amixer -D hw:0 cset name='Right Speaker Mixer Right DAC Switch' on
				amixer -D hw:0 cset name='Left Headphone Switch' off
                                amixer -D hw:0 cset name='Right Headphone Switch' off
				;;
			*) uhd $+;;
		esac
		log_unhandled $*
	;;
	button)
		case "$action" in
			#power)
					#pm-suspend
			#		log_unhandled $*
			#	;;

			lid)
				case "$id" in
					close) if [ $(cat /sys/class/power_supply/gpio-charger/online) -eq 0 ]; then
                                                        pm-suspend
                                                fi;;
					open) :;;
					*) uhd $*;;
				esac
				log_unhandled $*
				;;

			*)	log_unhandled $* ;;
		esac
		;;

	*)	log_unhandled $* ;;
esac
}}
This handles alternating between speaker and headphone jack when one is plugged in, as well as lid suspend when the charger is unplugged. You can add power button support if you wish, though keep in mind the device will simply turn on again when you close the lid.

== ALSA/Pulse quirks ==
Add the following if you use Pulseaudio:
{{CodeBox|title=/etc/pulse/default.pa|lang=bash|1=
load-module module-alsa-sink device=sysdefault
load-module module-alsa-source device=sysdefault}}
See [https://wiki.debian.org/InstallingDebianOn/Asus/C201#Audio InstallingDebianOn/Asus/C201#Audio] for further information. VEYRON-I2S shipped with alsa, so it's unlikely you need to add Google's UCM files. <br />
I have not tested HDMI. It appeared under 3.14 as RockchipHDMI, but is missing under 4.13. Possibly a kernel config or UCM issue.

== Keybinds ==
xbacklight doensn't work, however, a backlight device exists. You can use this in tandem with xbindkeys as a replacement for xbacklight:
{{CodeBox|title=c201_backlight.sh|lang=bash|1=
#!/bin/bash
if [ "$(($(cat /sys/devices/platform/backlight/backlight/backlight/brightness)+$1))" -gt "255" ];then
        echo 255 > /sys/devices/platform/backlight/backlight/backlight/brightness
        exit
fi
if [ "$(($(cat /sys/devices/platform/backlight/backlight/backlight/brightness)+$1))" -lt "0" ]; then
        echo 0 > /sys/devices/platform/backlight/backlight/backlight/brightness
        exit
fi

echo $(($(cat /sys/devices/platform/backlight/backlight/backlight/brightness)+$1)) > /sys/devices/platform/backlight/backlight/backlight/brightness}}
Provide the delta for the backlight as an argument, positive or negative.<br />

If you'd like to reassign your function keys to their purpose, you can do this by editing /usr/share/X11/xkb/symbols/pc.
{{CodeBox|title=/usr/share/X11/xkb/symbols/pc example
|    key <LWIN> {        [ Caps_Lock             ]       };
    key <FK01>   {      [ Home                  ]       };
    key <FK02>   {      [ End                   ]       };
    key <FK03>   {      [ Page_Up               ]       };
    key <FK04>   {      [ Page_Down             ]       };}}
Here, I've remapped the search key (LWIN) to Caps and set some of the function keys to much-needed movement keys. I also remapped my power button to the Delete key:
{{CodeBox|title=/usr/share/X11/xkb/symbols/inet
|    key <POWR>   {      [ Delete                ]       };}}

== Google tools ==
TODO: vboot-tools, u-boot-utils, crossystem, mosys

== Web browser ==
Midori and Firefox 45 both work fine here, with the +jit flag enabled.
This is important, as both browsers will act up or segfault without it.<br />
To get Firefox to compile, [https://bug1358776.bmoattachments.org/attachment.cgi?id=8861046 this] patch was required.

== Other quirks ==
lm_sensors does not work here. You can query /sys/devices/virtual/thermal/thermal_zoneX/temp to get temperatures.<br />
This will average the two CPU sensors up and output in a sane format:
{{Cmd
|echo "$((($(cat /sys/devices/virtual/thermal/thermal_zone1/temp)+$(cat /sys/devices/virtual/thermal/thermal_zone2/temp))/2000))"}}


== Resources ==
https://notabug.org/dimkr/devsus<br />
https://github.com/Miouyouyou/RockMyy<br />
http://www.synkhronix.com/journal/gentoo-chromebook<br />
https://wiki.debian.org/InstallingDebianOn/Asus/C201<br />
+ Archlinuxarm, Rockchip git<br />

''Thanks to  [https://github.com/Miouyouyou Miouyouyou] and [https://notabug.org/dimkr dimkr] for creating their scripts!''
[[Category:Laptops]]
