<languages />
{{Lowercase title}}
{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
|{{InfoBox gdoc|genkernel}}
}}

'''genkernel''' est utilisé pour automatiser le processus de compilation du   [[kernel/fr| noyau]] et du système de fichiers virtuel de démarrage [[initramfs|(initramfs)]]. Parmi les fonctionnalités citons :
* la configuration des sources du noyau 
* la compilation de l'image compressée du noyau  {{Path|bzImage}} et sa copie dans {{Path|/boot}}
* la création d'un système de fichiers virtuel du démarrage (initramfs) et sa copie dans {{Path|/boot}}
* la création des liens symboliques dans   {{Path|/boot}}
* l'ajout d'un contenu personnalisé au système de fichiers virtuel de démarrage (initramfs) comme par exemple les fichiers relatifs au chiffrage, les écrans d'attente, les modules supplémentaires et plus encore.
* la compression de l'initramfs
* la configuration du [[bootloader |chargeur de démarrage]]

== Installation ==

Pour installer le paquet {{Package|sys-kernel/genkernel}}, commencez par sélectionner les options de la variable USE appropriées.

{{USEflag|package=sys-kernel/genkernel
|crypt++no
|cryptsetup++no
|ibm++no
|selinux++no
}}

Ensuite, vous pouvez procéder à l'installation du paquet genkernel.

{{Emerge|genkernel}}

== Invocation de Genkernel ==

La forme générale de l'invocation de '''genkernel''' est la suivante :

{{RootCmd|<pre> genkernel [options ...] action
</pre>}}

=== Options === 

Le comportement réel de genkernel dépend d'une grande variété d'options, dont la majorité peut être activée/désactivée dans le fichier {{Path|/etc/genkernel.conf}} ou passer avec la commande. Les options passées en ligne de commande prévalent sur celles définies dans {{Path|/etc/genkernel.conf}}. Ce fichier est très bien documenté. Nous examinerons néanmoins ici quelques unes des options les plus communes. Pour une information plus complète, reportez-vous aux commentaires du fichier {{Path|/etc/genkernel.conf}} ou à la sortie de la commande <code>man genkernel</code> .

{{Note| Certaines options possèdent une variante qui déclenche un  comportement inverse. Elle sont notées sous la forme <tt>--[no-]option_name</tt>, et l'effet inverse est noté entre crochets comme dans cet exemple :
{{Code|Activer ou désactiver une certaine option |<pre>
--[no-]menuconfig : Activer [désactiver] ...
</pre>}}
Lorsqu'une option possède seulement un effet négatif, le <tt>no-</tt>, ainsi que son effet, qui ne sont pas optionnels dans ce cas là, sont notés sans les crochets.}}

==== Options agissant sur l'interactivité de l'utilisateur ====

Les options de configuration listées ci-dessous permettent de décider comment interagir avec le processus de configuration. L'utilisateur peut même décider si le fichier de configuration sera ou pas sauvegardé. Les options suivantes sont les options de configuration de premier ordre :

;<tt>--[no-]menuconfig</tt>
: Active [ or désactive] la commande  <code>make menuconfig</code> (qui invoque un menu interactif de configuration) avant de compiler le noyau.

;<tt>--gconfig</tt>
: fournit un outil de configuration du noyau qui dépend des bibliothèques GTK+. L'avantage de cette option est que la majorité des utilisateurs trouvent cette interface plus claire et facile à utiliser pour configurer le noyau, puisqu'elle utilise le système X-Window. Son inconvénient est que vous devez avoir X-Window pour l'utiliser, cela ne marchera pas dans une console en ligne de commande.

;<tt>--xconfig</tt>
:  fournit un outil de configuration du noyau qui dépend des bibliothèques Qt. L'avantage de cette option est que la majorité des utilisateurs trouvent cette interface plus claire et facile à utiliser pour configurer le noyau, puisqu'elle utilise le système X-Window. Son inconvénient est que vous devez avoir X-Window pour l'utiliser, cela ne marchera pas dans une console en ligne de commande.

;<tt>--[no-]save-config</tt>
: sauvegarde [ou ne sauvegarde pas] la configuration du noyau dans un fichier situé dans le répertoire {{Path|/etc/kernels}} pour une future utilisation.

;<tt>--kernname=&lt;NickName&gt;</tt>: vous permet de nommer le noyau et le disque virtuel initial (initrd).qui seront copiés dans {{Path|/boot}}, de sorte que les noms de fichier produits soient '''kernel-Nom-version''' et '''initramfs-Nom-version'''.

==== Options agissant sur le système résultant ====

Les options définies ici définissent quelles fonctionnalités, seront, ou ne seront pas, incluses dans le noyau et le système de fichiers virtuel de démarrage résultants. 

;<tt>--[no-]splash</tt>
: ajoute [ou n'ajoute pas] la prise en charge de l'écran d'attente en tampon de trame (splash framebuffer) au sytème de fichiers virtuel de démarrage (initrd) que construit genkernel. Pour écraser le thème par défaut utilisé par fbsplash, utilisez <tt>--splash=&lt;MonThème&gt;</tt> (où <tt>&lt;MonThème&gt;</tt> est le nom de l'un des répertoires situés dans {{Path|/etc/splash}}).

;<tt>--splash-res=&lt;PreferredResolution&gt;</tt>
:  cette option vous permet de sélectionner les résolutions prise en charge par l'initrd au démarrage. Elle est utile pour deux raisons : d'abord, vous pouvez choisir quelles résolutions sont prises en charge spécifiquement par votre système, ensuite, vous réduisez la quantité d'espace occupée par l'initrd puisque ce dernier n'a plus à s'occuper des résolutions que vous n'utiliserez pas. Cependant, vous pouvez ignorer cette option si vous compilez un noyau pour un CD d'installation, ce qui permettra à bootsplash de prendre en charge toutes les résolutions.

;<tt>--do-keymap-auto</tt>
: force la sélection de l'arrangement de clavier lors du démarrage.

;<tt>--lvm</tt>
: inclut la prise en charge des volumes gérés par LVM2 grâce à des binaires statiques, s'ils sont disponibles. Les binaires (statiques) LVM2 en question sont compilés lorqu'ils manquent. Assurez-vous d'avoir installé le paquet lvm2 sur votre système avec emerge lvm2 avant d'activer cette option et d'avoir lu l'[[LVM |article LVM ]] sur ce wiki.

;<tt>--dmraid</tt>
: inclut la prise en charge de DMRAID, l'outil qui crée des volumes RAID logiciels en utilisant le sous-système device-mapper du noyau. [http://people.redhat.com/~heinzm/sw/dmraid/readme DMRAID]  découvre, active, désactive et affiche les propriétés des volumes RAID (ATARAID par exemple) ainsi que celles des partition DOS incluses.

;<tt>--luks</tt>
: inclut le support de Linux Unified Key Setup ([http://clemens.endorphin.org/cryptography LUKS]). Cela vous permettra d'utiliser un périphérique chiffré par LUKS pour placer votre système de fichiers racine (/). Spécifiez alors au chargeur de démarrage le nom de ce périphérique via la variable <code>crypt_root</code>  (<code>real_root</code> doit être le nom du périphérique une fois déchiffré par LUKS).

;<tt>--disklabel</tt>
: ajoute la prise en charge de disk label (étiquette de disque) and UUID (Identifiant Unique Universel) à votre disque virtuel initial (initrd).

;<tt>--iscsi</tt>
: ajoute la prise en charge de iSCSI à votre disque virtuel initial (initrd).

;<tt>--multipath</tt>
: ajoute la prise en charge de Multipath à votre disque virtuel initial (initrd).

;<tt>--linuxrc=/path/to/your/linuxrc</tt>
: spécifie un script linuxrc créé par l'utilisateur qui sera appelé lors de la phase de démarrage du noyau, avant le démarrage du système. (Un script linuxrc par défaut devrait se trouver dans {{Path|/usr/share/genkernel/}}.) Ce script vous permet d'amorcer sur un petit noyau modulaire et de charger les pilotes requis (sous forme de modules) par le système avant le démarrage.

;<tt>--cachedir=/path/to/alt/dir</tt>
: remplace le chemin par défaut du cache utilisé pendant la compilation.

;<tt>--tempdir=/path/to/new/tempdir</tt>
: spécifie le chemin du répertoire temporaire utilisé par genkernel lors de la compilation du noyau.

;<tt>--unionfs</tt>
: Includes support for the [http://www.fsl.cs.sunysb.edu/project-unionfs.html Unification File System] in the initrd image.

;<tt>--mountboot</tt>
: Detects whether or not the {{Path|/boot}} directory needs to be mounted on a separate partition. It will check {{Path|/etc/fstab}} script for instructions on how to mount the boot partition on a file system (if needed).

==== Options acting on the tools used for building ====

The following options are supported by genkernel, and are passed to the relevant applications while the kernel is being assembled. These options affect the compiling tools used for the kernel compilation process, albeit at a much lower level.

;<tt>--kernel-cc=&lt;someCompiler&gt;</tt>
: Specifies the compiler employed during the kernel compilation process.

;<tt>--kernel-ld=&lt;someLinker&gt;</tt>
: Specifies the linker employed during the kernel compilation process.

;<tt>--kernel-as=&lt;someAssembler&gt;</tt>
: Specifies the assembler employed during the kernel compilation process.

;<tt>--kernel-make=&lt;someMake&gt;</tt>
: Specifies an alternative to the GNU make utility employed during the kernel compilation process.

;<tt>--utils-cc=&lt;someCompiler&gt;</tt>
: Specifies the compiler employed during the compilation of support utilities.

;<tt>--utils-ld=&lt;someLinker&gt;</tt>
: Specifies the linker employed during the compilation of support utilities.

;<tt>--utils-as=&lt;someAssembler&gt;</tt>
: Specifies the assembler employed during the compilation of support utilities.

;<tt>--utils-make=&lt;someMake&gt;</tt>
: Specifies an alternative to the GNU make utility employed during the compilation of support utilities.

;<tt>--makeopts=-jX</tt>
: Specifies the number of concurrent threads that the make utility can implement while the kernel (and utilities) are being compiled. The variable <code>X</code> is a number to be freely chosen, although the most common values are obtained by adding one (1) to the number of cores used by the system, or just use the number of cores on the system. So, for a system with one core, most common option values are <code>-j2</code> or <code>-j1</code>; a system with two cores most likely uses the <code>-j3</code> or <code>-j2</code> options, and so on. (A system with one processor that supports Hyper-Threading™ (HT) Technology can be assumed to have 2 cores, provided Symmetric Multi-Processing (SMP) support is enabled in the kernel.)

==== Options acting on the compilation process ====

The following options usually take effect during the actual compilation:

;<tt>--kerneldir=/path/to/sources/</tt>
: Specifies an alternative kernel source location, rather than the default {{Path|/usr/src/linux/}} location.

;<tt>--kernel-config=/path/to/config-file</tt>
: Specifies what alternative kernel configuration will be used, rather than the default {{Path|/path/to/sources/.config}} file.

;<tt>--module-prefix=/path/to/prefix-directory/</tt>
: Specifies a prefix to the directory where kernel modules will be installed (default path is the {{Path|/lib/modules}} directory.)

;<tt>--no-clean</tt>
: Activates [or deactivates] the <code>make clean</code> command before compiling your kernel. The <code>make clean</code> command removes all object files and dependencies from the kernel's source tree.

;<tt>--no-mrproper</tt>
: Activates [or deactivates] the <code>make mrproper</code> command before kernel compilation. Like the <code>make clean</code> command, <code>make mrproper</code> removes all object files and dependencies from the kernel's source tree. However, any previous configuration files (in {{Path|/path/to/sources/.config}} or {{Path|/path/to/sources/.config.old}}) will also be purged from the kernel's source tree.

;<tt>--oldconfig</tt>
: Issues the <code>make oldconfig</code> command, which attempts to collect configuration information for the system's architecture from a generic script in {{Path|/usr/share/genkernel}}. This is a non-interactive process; no user input is entertained. Also, if <tt>--oldconfig</tt> is used in conjunction with <tt>--clean</tt>, the latter option is negated, resulting in the activation of the <tt>--no-clean</tt> option.

;<tt>--callback="echo hello"</tt>
: Calls the specified arguments (<code>echo hello</code>, in this case) after the kernel and the relevant modules have been built, but before building the initrd image. This may be useful if you want to install external modules in the initrd image by emerging the relevant item(s) with the callback feature, and then redefining a genkernel module group.

;<tt>--[no-]install</tt>
: Activates [or deactivates] the make install command, which installs your new kernel image, configuration file, initrd image and system map onto your mounted boot partition. Any compiled modules will be installed as well.

;<tt>--no-ramdisk-modules</tt>
: Refrains from copying any modules to the genkernel-created initrd image. This option is an exception to the rule about the <tt>no-</tt> prefix; omission of this prefix creates an invalid genkernel option.

;<tt>--all-ramdisk-modules</tt>
: Copies all available modules to the genkernel-created initrd image.

;<tt>--genzimage</tt>
: Creates the initrd image, prior to the kernel image. (This hack currently applies only to PPC Pegasos systems.)

==== Debugging options ====

The use of debugging options during the kernel compilation process controls the amount of information reported, as well as the presentation of said data.

;<tt>--loglevel=&lt;verblevel&gt;</tt>
: Controls the level of verbosity for information provided by genkernel. The variable <code>&lt;verblevel&gt;</code> is an integer between 0 and 5. The level '0' represents minimal output, while '5' provides as much information as possible about genkernel's activities during the kernel compilation process.

;<tt>--logfile=/path/to/outputfile</tt>
: Ignores the value set by the <tt>--loglevel</tt> argument, and sends all debugging data produced by genkernel to the specified output file, which is located at {{Path|/var/log/genkernel.log }} by default.

;<tt>--no-color</tt>
: Activates (or deactivates) colored output of debugging information (reported by genkernel) using escape sequences.

=== Action ===

The action passed on the command line with the <code>genkernel [options …] action</code> command, tells <code>genkernel</code>  what to do - the following actions are supported:

;<code>all</code>
: Builds all stages — the initrd, kernel image and modules.

;<code>bzImage</code>
: Only builds the kernel image

;<code>kernel</code>
: Only builds the kernel image and modules

;<code>initramfs</code>
: Only builds the initramfs/ramdisk image

;<code>ramdisk</code>
: Only builds the initramfs/ramdisk image

== Using Genkernel  ==

=== Genkernel First Invocation ===

Although there are several ways to run genkernel, the least-intrusive approach recommended for most users is provided by <code>genkernel all</code>. Here, a generic configuration which works well for most systems is used. As was mentioned earlier, this approach is not without drawbacks; most of the modules created are useless to the average user and may increase compile time. Below is an illustration of a more efficient approach, achieved by passing certain options to genkernel as root:

{{RootCmd|genkernel --splash --no-install --no-clean --menuconfig all}}

The above operation causes genkernel to create a framebuffer splash-enabled kernel (<tt>--splash</tt>) that will have to be manually installed (<tt>--no-install</tt>). While preparing the kernel source tree, genkernel will refrain from cleaning out any preexisting object files present in the source tree (<tt>--no-clean</tt>). A menu-driven kernel configuration utility will be displayed that allows the user to select which modules will be built for the system (<tt>--menuconfig</tt>).

Replacing <tt>--no-install</tt> with the <tt>--install</tt> option allows genkernel to automatically install the new kernel in the {{Path|/boot}} directory, and will create symlinks for you if <tt>--symlink</tt> is specified. Using the <tt>--mountboot</tt> option allows genkernel to mount the {{Path|/boot}} partition automatically, if necessary.

{{Note|Don't forget that the {{Path|/etc/genkernel.conf}} file is sourced by the <code>genkernel</code> command at startup, and that any option defined there, will be applied, except where a command line option takes precedence over it.}}

=== Using Genkernel to change your kernel  ===

The first thing that should be done is to allow the triggering of <code>make menuconfig</code> in the {{Path|/etc/genkernel.conf}} file:

{{File|/etc/genkernel.conf|Forcing the use of the configuration menu in /etc/genkernel.conf|<pre>
# Run 'make menuconfig' before compiling this kernel?
MENUCONFIG="yes"
</pre>}}

==== File Management by genkernel ====

While using genkernel, the user has to be aware of some aspects relating to kernel configuration and kernel image files management and the way the kernel sources are handled by the system.

===== Source Files used by genkernel =====

After an <code>emerge -u gentoo-sources</code>, whenever new sources are available, a new kernel source directory is created under {{Path|/usr/src/}} to host them. Normally, the active kernel sources directory is pointed to by the {{Path|/usr/src/linux}} symlink.

The {{Path|/usr/src}} directory might look like this:

{{Cmd|ls -l /usr/src|output=<pre>
total 16
lrwxrwxrwx  1 root root   19 21 mars   2013 linux -> linux-3.7.10-gentoo
drwxr-xr-x 24 root root 4096 25 août  10:39 linux-3.10.7-gentoo
drwxr-xr-x 20 root root 4096 21 avril 19:42 linux-3.7.10-gentoo
drwxr-xr-x 21 root root 4096 14 mars   2013 linux-3.7.9-gentoo
drwxr-xr-x  7 root root 4096 20 avril 17:06 rpm
</pre>}}

The {{Path|linux}} symlink can be changed in different ways. 

* If the <code>symlink</code> USE flag is set in {{Path|/etc/portage/make.conf}}, the {{Path|linux}} symlink is automatically updated to point to the newly emerged sources. 

* If the previous USE flag is not set, the user can change the destination of the symlink using  the <code>eselect kernel list</code> command.

Whatever it is, <code>genkernel</code> always uses the sources pointed by this symlink.

===== Kernel Configuration file used by genkernel =====

If a kernel compilation has already been run with the active kernel sources, there might be a file inside the {{Path|/etc/kernels}} directory that contains the kernel configuration that has been applied while creating the last bzimage of the kernel. This file is named, for example {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}} where x86_64 might be substituted with your architecture,  3.7.9 might be substituted with the version of the sources you are using and r1 with the release of the sources..

It is this {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}} file that is used as a starting configuration when running  <code>genkernel --menuconfig all</code>}}.

If it is the first time that <code>genkernel</code> is run, or if the previous result has not been saved, this file is substituted with a default configuration file that resides at {{Path|usr/share/genkernel/arch/x86_64/kernel-config}} where x86_64 is substituted with the actual architecture.

{{Note|The path to this default configuration file, may be altered by setting the DEFAULT_KERNEL_CONFIG variable in {{Path|/etc/genkernel.conf}} file.}}

===== Saving the compiled configuration =====

If the <code>save-config</code> genkernel option  is activated, either from the command line or inside {{Path|/etc/genkernel.conf}}, the compiled kernel configuration is saved (with the name given above) into the {{Path|/etc/kernels}} directory. At the same time, the configuration is saved in the {{Path|.config}} file in {{Path|/usr/src/linux}} directory but this file is not reused on the next <code>genkernel all</code> run.

{{Warning|One has to be aware, that each time genkernel is run, with the <code>save-config</code> genkernel option set, the configuration file in {{Path|/etc/kernels}} is overridden. Thus, it is highly recommendable to rename this file before running genkernel in order to preserve it. }}

===== Installing the kernel and initramfs into the /boot directory =====

The <code>all</code> action specified when invoking genkernel, ask <code>genkernel</code> to install the kernel image and the initramfs into the {{Path|/boot}} directory. In order to do it in a convenient manner,  set the following in the {{Path|/etc/genkernel.conf}} file:

{{File|/etc/genkernel.conf|Setting up kernel and initramfs auto-saving|<pre>
# Mount BOOTDIR automatically if it is not mounted?
MOUNTBOOT="yes"
  
# Save the new configuration in /etc/kernels upon
# successful compilation
SAVE_CONFIG="yes"
  
# Make symlinks in BOOTDIR automatically?
SYMLINK="yes"
  
# Add new kernel to grub?
#BOOTLOADER="grub"
</pre>}}

* The first parameter speaks by itself.

* The second parameter tells genkernel to save the compiled kernel configuration into {{Path|/etc/kernels}}.

* The last two options tell genkernel to automatically update the grub configuration. In practice, the following happens:
** if a previous kernel image with the same name already exist, it is renamed by appending <tt>.old</tt> to its name. A symlink {{Path|kernel.old}} is automatically created that points to it.
** the new kernel takes the place of any kernel with the same name into {{Path|/boot}}. If it is the first time a kernel is compiled, a symlink kernel is automatically created that points to the new kernel.

After running <code>genkernel --menuconfig all</code>, the {{Path|/boot}} directory might look like this:

{{Cmd|ls -al /boot|output=<pre>
total 41336
drwxr-xr-x  3 root root    4096 20 avril 17:23 .
drwxr-xr-x 24 root root    4096 15 sept. 12:31 ..
lrwxrwxrwx  1 root root       1 24 févr.  2013 boot -> .
drwxr-xr-x  2 root root    4096 24 févr.  2013 grub
lrwxrwxrwx  1 root root      40 20 avril 17:23 initramfs -> initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1314412 20 avril 17:23 initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1313548 21 mars   2013 initramfs-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 1295344 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3310324 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      44 20 avril 17:23 initramfs.old -> initramfs-genkernel-x86_64-3.7.10-gentoo.old
lrwxrwxrwx  1 root root      37 20 avril 17:23 kernel -> kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866656 20 avril 17:23 kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866560 21 mars   2013 kernel-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 4552288 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3400736 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      41 20 avril 17:23 kernel.old -> kernel-genkernel-x86_64-3.7.10-gentoo.old
</pre>}}

==== Configuring the bootloader ====

The symlinks presented above in the bootloader's configuration can be used so that, even if the new kernel is not bootable, the user can always boot on the old one. 

To allow the kernel and intird provided by genkernel to run correctly, provide a minimum information in your bootloader configuration file :
* Add <code>real_root=/dev/sdax</code> to the kernel parameters passed to the kernel image, where {{Path|/dev/sdax}} points to the root partition.
* If splash is used, add a suitable mode line such as <code>vga=0x317</code> to the parameters passed to the kernel and also add <code>splash=verbose</code> or <code>splash=silent</code> depending on the verboseness required through the boot process.
* Add the initrd information as required by the bootloader. Consult the [http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1&chap=10 Bootloader Configuration Chapter] of the Gentoo Handbook for details on how to make your bootloader initrd-aware.

Here is how the {{Path|grub.conf}} file might look.

{{File|/boot/grub/grub.conf|An example of grub.conf file|<pre>
# This is a sample grub.conf for use with Genkernel, per the Gentoo handbook 
# http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1&chap=10#doc_chap2 
# If you are not using Genkernel and you need help creating this file, you 
# should consult the handbook. Alternatively, consult the grub.conf.sample that 
# is included with the Grub documentation. 
  
default 0 
timeout 5
splashimage=(hd1,0)/boot/grub/splash.xpm.gz 
   
title Gentoo Linux 
root (hd0,6) 
kernel /boot/kernel initrd=/dev/ram0 real_root=/dev/sda7 rootfstype=ext4  
initrd /boot/initramfs
  
title Gentoo Linux old kernel 
root (hd0,6) 
kernel /boot/kernel.old initrd=/dev/ram0 real_root=/dev/sda7 rootfstype=ext4 
initrd /boot/initramfs.old
</pre>}}

==== Preserving your working files ====

The genkernel application automatically saves new changes to the files. If previous changes are to be preserved, then the following actions need to be taken.

* The first file to preserve is the kernel configuration file in {{Path|/etc/kernels/}}. If the source isn't changed prior to the recompilation of the kernel, the previously used name for this file will be used. So renaming the previous configuration file helps in preserving the information.

* The second important thing is to preserve the already bootable kernel and initramfs images. The way to accomplish this depends on the context:
:# If the last kernel compiled is bootable, running <code>genkernel</code> will rename this kernel (and similarly initramfs) image to {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} and create a new {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}. This mean that even if the new kernel is not bootable, users will always be able to boot the old one.
:# If the last kernel compiled is not bootable and sources haven't changed since the user compiled a bootable one, prior to running <code>genkernel</code>, first delete the new kernel image and remove the <tt>.old</tt> suffix from the last bootable one. Without this, if the newly compiled kernel is not bootable for the second time, the bootable {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} will be kicked out by the renaming of the non bootable {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}, giving the user an unbootable system. Use the same reasoning for initramfs.

=== Using previous kernel configuration while changing the sources ===

The previous configuration can be used through the <code>make menuconfig</code> option in your {{Path|/etc/genkernel.conf}} as follows:

{{File|/etc/genkernel.conf|Setting up make menuconfig|<pre>
# Run 'make menuconfig' before compiling this kernel?
MENUCONFIG="yes"
</pre>}}

{{Note|There is no need to run <code>make oldconfig</code> with genkernel even if the sources are changed from {{Path|kernel-genkernel-ARCH-version-gentoo-rx}} to {{Path|kernel-genkernel-ARCH-version-gentoo-r(x+1)}} or from {{Pat|kernel-genkernel-ARCH-version-gentoo}} to {{Path|kernel-genkernel-ARCH-(version+1)-gentoo}} because <code>make menuconfig</code> will try to load the previous configuration into the menu as much as possible. Nevertheless, reviewing each option and new sections carefully is recommended.}}

== Network Booting with Genkernel ==

=== Network Booting with Genkernel from an Installation CD ===

The genkernel utility can build kernel and initrd images that provide support for network booting, or netbooting. With any luck, users should be able to netboot any recent computer into the environment provided by the Installation CD.

The magic lies in genkernel's linuxrc script: it will try to netmount the Installation CD using NFS. From there, the init scripts of the Installation CD can take over, as if the CD was present locally.

=== Building Kernel and Initrd Images with Support for Netbooting ===

To enable support for netbooting, include the following options while configuring the kernel:

{{Warning|Support for netbooting with genkernel is experimental and may contain bugs. }}

First, the kernel image must include the drivers for your Network Interface Cards (NIC). Normally, drivers for such devices will be compiled as modules. However, it is essential (for netbooting) that such drivers are compiled directly into the kernel image and not as modules.

{{Kernel|Configuring a 2.6.x series kernel to support your NIC driver|<pre>
Device Drivers --->
   Networking Support --->
      Ethernet (10 or 100Mbit)  --->
         [*] Ethernet (10 or 100Mbit)
         <*>   the driver for your network card</pre>
}}

Be sure to select <tt>&lt;*&gt;</tt> and not <tt>&lt;M&gt;</tt>.

Secondly, it is suggested that ''IP: kernel level autoconfiguration'' is enabled as well as ''IP: DHCP support options''. This avoids an unnecessary layer of complexity since the IP address and the NFS path to the Installation CD can be configured on a DHCP server. Of course, this means the kernel command line will remain constant for any machine — which is very important for etherbooting.

{{Kernel|Configuring a 2.6.x series kernel to support DHCP|<pre>
Device Drivers --->
   Networking Support --->
      Networking options
         [*] TCP/IP networking--->
         [*]   IP: kernel level autoconfiguration
         [*]     IP: DHCP support
</pre>}}

These options tell the kernel to send a DHCP request at bootup.

Additionally, enable SquashFS because most modern Gentoo Installation CDs require it. Support for SquashFS is not included with the generic kernel source tree. To enable SquashFS, apply the necessary patches to the generic kernel source or install gentoo-sources.

{{Kernel| Configuring the kernel to support SquashFS|<pre>
File systems--->
   Miscellaneous filesystems --->
      [*] SquashFS 2.X - Squashed file system support
</pre>}}

Once the compilation process is completed, create a compressed tarball (tar.gz) that contains the kernel's modules. This step is only necessary if the kernel version does not match the kernel image version on the Installation CD.

To create an archive containing all the modules:

{{RootCmd|cd /
|tar -cf /tmp/modules-X.Y.Z.tar.gz /lib/modules/X.Y.Z/}}

Depending on the network boot mechanism, one of the following steps need to be followed:

To create an etherboot image:

{{RootCmd|emerge mknbi
|cd /boot
|mkelf-linux -params{{=}}"root{{=}}/dev/ram0 init{{=}}/linuxrc ip{{=}}dhcp" kernel... initrd... > etherboot.img}}

To create a OpenBoot / SPARC64 TFTP image:

{{RootCmd|emerge sparc-utils
|cd /boot
|elftoaout kernel... -o kernel.aout
|piggyback64 kernel.aout System.map-... initrd-...
|mv kernel.aout openboot.img}}

The {{Path|openboot.img}} file is the boot image.

Finally, copy this kernel to the TFTP server. The details are architecture-dependent and are beyond the scope of this guide. Please refer to the documentation for your platform.

=== NFS setup ===

To setup a NFS share that contains the Installation CD, use the loop device to mount the ISO image and then copy the contents of the CD into the NFS share. As a nice extra, genkernel's initrd scripts will extract all tar.gz files located in the {{Path|/nfs/livecd/add/}} directory. All that needs to be done here is copy the {{Path|modules-X.Y.Z.tar.gz}} archive to the {{Path|/nfs/livecd/add/}} directory.

The following assumes that {{Path|/nfs/livecd}} is an exported NFS share:

{{RootCmd|mount /tmp/gentoo-livecd.iso /mnt/cdrom -o loop
|cp -p /mnt/cdrom /nfs/livecd
|umount /mnt/cdrom}}

Now copy the {{Path|modules.tar.gz}} file into {{Path|/add}}:

{{RootCmd|mkdir /nfs/livecd/add
|cp /tmp/modules-X.Y.Z.tar.gz /nfs/livecd/add}}

=== DHCP setup ===

The netboot images will ask the DHCP server on the network for an IP as well as a <tt>root-path</tt> parameter. Both can be specified per host using a MAC address to identify machines:

{{File|/etc/dhcpd.conf|Sample client dhcpd.conf setup|<pre>
# Here, 192.168.1.2 is the NFS server while 192.168.1.10 will be the IP address of the netbooted machine
host netbootableMachine {
         hardware ethernet 11:22:33:44:55:66;
         fixed-address 192.168.1.10;
         option root-path "192.168.1.2:/nfs/livecd";
}
</pre>}}

=== Netbooting Instructions ===

Netbooting itself is again very platform-specific. The important part is to specify the <code>ip=dhcp</code> and <code>init=/linuxrc</code> parameters on the kernel command line, as this will bring up the network interface and tell the initrd scripts to mount the Installation CD via NFS. Here are some platform-specific tips.

For etherboot, insert the etherboot disk into the drive and reboot. The kernel command line was specified when the image was constructed. 
  
With Sparc64, hit {{Key|Stop}}-{{Key|A}} at the boot prompt and enter:

{{RootCmd|boot net ip{{=}}dhcp init{{=}}/linuxrc|prompt=ok }}
  
For PXE, setup pxelinux (part of syslinux), then create a {{Path|pxelinux.cfg/default}} along the lines of:

{{File|pxelinux.cfg/default|Default entry|<pre>
DEFAULT gentoo
TIMEOUT 40
PROMPT 1
  
LABEL gentoo
    KERNEL kernel-X.Y.Z
    APPEND initrd=initrd-X.Y.Z root=/dev/ram0 init=/linuxrc ip=dhcp
</pre> }}

=== Booting a genkernel initramfs ===

==== Introduction ====

If an initramfs is installed with genkernel, then take a look at the various boot options that can (or should) be defined in the bootloader configuration. The most common ones are added to this guide.

==== Loading LVM or software-RAID ====

If the system uses LVM or software-RAID, the initramfs has to be built using the <tt>--lvm</tt> and <tt>--mdadm</tt> options. Don't forget to enable support during boot as well. This can be done using the dolvm and domdadm options.

{{File|/boot/grub/grub.conf|Enabling LVM and/or MDADM support|<pre>
# Example for GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 dolvm domdadm
initrd /initramfs-genkernel-x86_64-3.4.3
</pre> }}

==== Booting in single-user mode ====

If for some reason boot-up fails, rescuing the system by booting in the single-user mode is still possible. This will only load the really necessary services and then drop the user to a rescue (root) shell.

{{File|/boot/grub/grub.conf|Booting in single-user mode|<pre>
# Example for GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 init_opts=S
initrd /initramfs-genkernel-x86_64-3.4.3
</pre> }}

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Tim Yamin
* Jimi Ayodele 
* Thomas Seiler 
* Joshua Saddler
* Sebastian Pipping
* José Fournier

[[Category:Kernel]]
[[Category:Initramfs]]
