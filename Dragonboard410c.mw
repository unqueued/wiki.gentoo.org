{{InfoBox stack
|{{InfoBox homepage|http://www.96boards.org/products/ce/dragonboard410c/|header=true}}
|{{InfoBox github|https://github.com/96boards/documentation|raw=true}}
}}

The Dragonboard410c is a credit-card sized minicomputer, akin to the popular RaspberryPi series. It's sporting a Qualcomm Snapdragon 410, quad-core Cortex A53 @ 1.2GHz (which implies 64bit arch) and an Adreno 306 GPU.

== Hardware ==

=== Standard ===

{| class="table table-condensed table-striped"
! scope="col" width="20%" | Device
! scope="col" width="20%" | Make/model
! scope="col" width="10%" | Status
! scope="col" width="10%" | Kernel driver(s)
! scope="col" width="10%" | Kernel version
! scope="col" width="20%" | Notes
|-
| CPU
| [http://www.arm.com/products/processors/cortex-a/cortex-a53-processor.php ARM Cortex A53] @ 1.2GHz
| {{Yes|Works}}
| N/A
| N/A
| quad-core, 64bit
|-
| Graphics
| Adreno 306 GPU @ 400MHz
| {{Partial|not tested}}
| TBD
| TBD
| Supports OpenGL ES 3.0, OpenCL
|-
| Memory
| 1GB LPDDR3 @ 533MHz
| {{Yes|Works}}
| N/A
| N/A
|
|-
| Onboard Storage
| 8GB eMMC 4.51
| {{Yes|Works}}
| TBD
| N/A
| 
|}

== Initial Flash ==
The Dragonboard comes pre-installed with Android. But since we are Gentooligans, we want Linux on it, of course.
For a quick and dirty flash orgy, consult the Linux User Guide on http://www.96boards.org/products/ce/dragonboard410c/docs/. It guides you through a quick procedure that gets Linaro/Debian up and running.

We, however, want to build our own images. For that to work we need to download a couple of things. For that I'd suggest you create a dedicated directory; I called mine {{Path|~/dragonboard}}.

== Preparations ==
=== Kernel ===
Gentoo-native sources provide drivers that have been accepted in mainline already.

But to get the latest and greatest from the 96boards and Linaro devs:
{{Cmd|git clone https://github.com/96boards/linux/ ./db_410c_kernel
<pre>
Cloning into 'db410c_kernel'...
remote: Counting objects: 4526190, done.
remote: Compressing objects: 100% (25/25), done.
remote: Total 4526190 (delta 24), reused 20 (delta 20), pack-reused 4526145
Receiving objects: 100% (4526190/4526190), 1.39 GiB | 255.00 KiB/s, done.
Resolving deltas: 100% (3737318/3737318), done.
Checking connectivity... done.
Checking out files: 100% (52502/52502), done.
</pre>}}

=== Cross-compiler/-toolchain ===
To compile our stuff, we need a cross-compiler. For that, we use the fabulous {{Path|crossdev}} tool.
{{Note|{{Path|crossdev}} requires an overlay to store its newly generated ebuilds. If you don't want to pollute your existing ones, I'd suggest using {{Path|-oO}} to create a custom one.}}
{{Note|If you run into problems with certain use-flags (like I did with {{Path|go}}), use {{Path|crossdev}}'s {{Path|--[x]env}} flag to modify it.}}
{{RootCmd|emerge crossdev|crossdev -t aarch64_unknown_linux_gnu -oO crossdev --genv 'USE&#61;"-go"'
<pre>
---------------------------------------------------------------------------------
 * crossdev version:      20151026
 * Host Portage ARCH:     amd64
 * Target Portage ARCH:   arm64
 * Target System:         aarch64-unknown-linux-gnu
 * Stage:                 4 (C/C++ compiler)
 * ABIs:                  arm64

 * binutils:              binutils-[latest]
 * gcc:                   gcc-[latest]
 * headers:               linux-headers-[latest]
 * libc:                  glibc-[latest]

 * CROSSDEV_OVERLAY:      crossdev
 * PORT_LOGDIR:           /var/log/portage/
 * PORTAGE_CONFIGROOT:
 * Portage flags:
</pre>}}

=== skales tools ===
We will further need the "skales" tools, which are basically a set of scripts.
{{Cmd|git clone git://codeaurora.org/quic/kernel/skales
<pre>Cloning into 'skales'...
remote: Counting objects: 276, done.
remote: Total 276 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (276/276), 49.22 KiB | 39.00 KiB/s, done.
Resolving deltas: 100% (171/171), done.
Checking connectivity... done.
</pre>}}

For those to work we will also need {{Path|ftdget}}, which is a part of {{Path|sys-apps/dtc}}.
{{RootCmd|emerge sys-apps/dtc}}

== boot.img ==


{{Warning|There's only boilerplate below here so far!
This is wip!}}

== Hardware ==

=== Standard ===

{| class="table table-condensed table-striped"
! scope="col" width="20%" | Device
! scope="col" width="20%" | Make/model
! scope="col" width="10%" | Status
! scope="col" width="10%" | Bus ID
! scope="col" width="10%" | Kernel driver(s)
! scope="col" width="10%" | Kernel version
! scope="col" width="20%" | Notes
|-
| CPU
| AMD Phenom(tm) II X4 955
| {{Yes|Works}}
| N/A
| N/A
| 3.18.9
| This CPU rocks!
|-
| Front side bus
| RD790 Host Bridge
| {{Partial|Not tested}}
| 1002:5956
| pcieport
| 3.18.9
| Note example.
|-
| Video card
| NVIDIA Corporation NV18 [GeForce4 MX 4000]
| {{No|Borked}}
| 10de:0185
| nouveau
| 3.18.9
| Note example.
|}

=== Accessories ===

(Optional section. Describe any accessories that may be possible in this section. Anything from external plug-and-play LCD screens to computer docks.)

{| class="table table-condensed table-striped"
! scope="col" width="20%" | Device
! scope="col" width="20%" | Make/model
! scope="col" width="10%" | Status
! scope="col" width="10%" | Bus ID
! scope="col" width="10%" | Kernel driver(s)
! scope="col" width="10%" | Kernel version
! scope="col" width="20%" | Notes
|-
| LCD touch screen
| Tontec TT-350-PI-TS
| {{Partial|Not tested}}
| N/A
| N/A
| >=3.18.9
| Note example.
|}

== Installation ==

(Write the necessary steps to get Gentoo onto this system. Try to document any special step that each user will need to reproduce on their system. Includes getting special drivers or firmware from a manufacturer website, etc.)

=== Firmware ===

(Optional section.)

=== Kernel ===

(Show what options are necessary in the kernel in order to get all device components functional for this hardware platform.)

{{KernelBox|title=Enable support for these hardware drivers|1=

Write menuconfig instructions here.

}}

=== Emerge ===

(Optional section. If the platform requires any user space packages or kernel patches, mention them here).

{{Emerge|category/package}}

== Configuration ==

(Explain any additional configuration or special customization for this hardware platform. Could be anything from BIOS settings to assigning proper media key functionality.)

=== Example 1 ===

(Example: Do this in order to get these keys working.)

== Troubleshooting ==

(Optional section.)

(Troubleshoot issues in this section. Separate issues by best describing the error with a new section name. Remove this section and subsections if no issues are known.)

=== Issue 1 ===

When X happens, Y is how you fix it.

== See also ==

(Optional section.)

* [[Article_name]] - (Link to related Gentoo Wiki articles using bullet points for each link in this section; each link should be local to the Wiki. Use a dash to separate the link from a reason why the link was decided upon.)

== External resources ==

(Optional section.)

* (Link to external resources (outside the Wiki) using bullet points in this section. It is common for the information in this section to full sentences that are links.)

== References ==

(Optional section. Remove this section if references are not used. This section is used to cite factual information. This information is found outside the Gentoo Wiki and used to back up truth claims. The actual references themselves still be littered throughout the main article.)

{{reflist}}

[[Category:Embedded_systems]]
