{{InfoBox stack
|{{InfoBox homepage|http://www.96boards.org/products/ce/dragonboard410c/|header=true}}
|{{InfoBox github|https://github.com/96boards/documentation|raw=true}}
}}

{{Warning|This is work in progress and incomplete. Don't expect to get something working out of following these instructions yet.}}

The Dragonboard410c is a credit-card sized minicomputer, akin to the popular RaspberryPi series. It's sporting a Qualcomm Snapdragon 410, quad-core Cortex A53 @ 1.2GHz (which implies 64bit arch) and an Adreno 306 GPU.

== Hardware ==

=== Standard ===

{| class="table table-condensed table-striped"
! scope="col" width="20%" | Device
! scope="col" width="20%" | Make/model
! scope="col" width="10%" | Status
! scope="col" width="10%" | Kernel driver(s)
! scope="col" width="10%" | Kernel version
! scope="col" width="20%" | Notes
|-
| CPU
| [http://www.arm.com/products/processors/cortex-a/cortex-a53-processor.php ARM Cortex A53] @ 1.2GHz
| {{Yes|Works}}
| N/A
| N/A
| quad-core, 64bit
|-
| Graphics
| Adreno 306 GPU @ 400MHz
| {{Partial|not tested}}
| TBD
| TBD
| Supports OpenGL ES 3.0, OpenCL
|-
| Memory
| 1GB LPDDR3 @ 533MHz
| {{Yes|Works}}
| N/A
| N/A
|
|-
| Onboard Storage
| 8GB eMMC 4.51
| {{Yes|Works}}
| TBD
| N/A
| 
|}

== Initial Flash ==
The Dragonboard comes pre-installed with Android. But since we are Gentooligans, we want Linux on it, of course.
For a quick and dirty flash orgy, consult the Linux User Guide on http://www.96boards.org/products/ce/dragonboard410c/docs/. It guides you through a quick procedure that gets Linaro/Debian up and running.

We, however, want to build our own images. For that to work we need to download a couple of things. For that I'd suggest you create a dedicated directory; I called mine {{Path|~/dragonboard}}.

== Preparations ==
=== Cross-compiler/-toolchain ===
To compile our stuff, we need a cross-compiler. For that, we use the fabulous {{Path|crossdev}} tool.
{{Note|{{Path|crossdev}} requires an overlay to store its newly generated ebuilds. If you don't want to pollute your existing ones, I'd suggest using {{Path|-oO}} to create a custom one.}}
{{Note|If you run into problems with certain use-flags (like I did with {{Path|go}}), use {{Path|crossdev}}'s {{Path|--[x]env}} flag to modify it.}}
{{RootCmd|emerge crossdev|crossdev -t aarch64-unknown-linux-gnu -oO crossdev --genv 'USE&#61;"-go"'
<pre>
---------------------------------------------------------------------------------
 * crossdev version:      20151026
 * Host Portage ARCH:     amd64
 * Target Portage ARCH:   arm64
 * Target System:         aarch64-unknown-linux-gnu
 * Stage:                 4 (C/C++ compiler)
 * ABIs:                  arm64

 * binutils:              binutils-[latest]
 * gcc:                   gcc-[latest]
 * headers:               linux-headers-[latest]
 * libc:                  glibc-[latest]

 * CROSSDEV_OVERLAY:      crossdev
 * PORT_LOGDIR:           /var/log/portage/
 * PORTAGE_CONFIGROOT:
 * Portage flags:
</pre>}}

=== skales tools ===
We will further need the "skales" tools, which are basically a set of scripts.
{{Cmd|cd ~/dragonboard
|git clone git://codeaurora.org/quic/kernel/skales
<pre>Cloning into 'skales'...
remote: Counting objects: 276, done.
remote: Total 276 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (276/276), 49.22 KiB | 39.00 KiB/s, done.
Resolving deltas: 100% (171/171), done.
Checking connectivity... done.
</pre>}}

For those to work we will also need {{Path|ftdget}}, which is a part of {{Path|sys-apps/dtc}}.
{{RootCmd|emerge sys-apps/dtc}}

=== Kernel ===
Gentoo-native sources provide drivers that have been accepted in mainline already.

But to get the latest and greatest from the 96boards and Linaro devs:
{{Cmd|git clone https://github.com/96boards/linux/ db_410c_kernel
<pre>Cloning into 'db410c_kernel'...
remote: Counting objects: 4526190, done.
remote: Compressing objects: 100% (25/25), done.
remote: Total 4526190 (delta 24), reused 20 (delta 20), pack-reused 4526145
Receiving objects: 100% (4526190/4526190), 1.39 GiB | 255.00 KiB/s, done.
Resolving deltas: 100% (3737318/3737318), done.
Checking connectivity... done.
Checking out files: 100% (52502/52502), done.</pre>}}

== boot.img ==
=== Kernel Compilation ===
First we need a configuration. I am going with the provided stock configs.
{{Cmd|cd db_410c_kernel
|make ARCH&#61;arm64 CROSS_COMPILE&#61;aarch64-unknown-linux-gnu- defconfig distro.conf}}

Then compile the kernel. Use a value corresponding to your compiling CPU's core-count for {{Path|X}} - e.g. 4 or 5 for a quad-core.
{{Cmd|make ARCH&#61;arm64 CROSS_COMPILE&#61;aarch64-unknown-linux-gnu- -jX}}
This will take a while. You can interrupt at any time, though, and resume with the same command.

=== Initrd / Initramfs ===
If you want to use upstream's initrd, get it here: http://builds.96boards.org/snapshots/dragonboard410c/linaro/debian/latest/
{{Cmd|wget http://builds.96boards.org/snapshots/dragonboard410c/linaro/debian/latest/initrd.img-4.4.0-linaro-lt-qcom}}
(The filename might differ slightly, so just browse the {{Path|latest}} directory.)

{{note|This step is not needed right now, as we will use upstream's initrd. Resume below.}}
Install the kernel's modules to a temporary directory and run depmod on them.
{{Cmd|mkdir ../db_410c_modules/modules -p
|make ARCH=arm64 CROSS_COMPILE=aarch64-unknown-linux-gnu- modules_install INSTALL_MOD_PATH=../db_410c_modules/modules INSTALL_MOD_STRIP=1
|cat include/config/kernel.release
<pre>4.4.0+   # kernel version</pre>}}
Be sure to get the version right or the kernel will not be able to find its modules later on.
{{RootCmd|depmod -a -b ../db_410c_modules/modules 4.4.0+}}
{{note|resume here}}

=== Device Tree ===
We will assemble the boot.img in a separate directory, so change there.
{{Cmd|mkdir ~/dragonboard/boot.img
|cd ~/dragonboard/boot.img}}
Use the {{Path|dtbTool}} from skales to assemble {{Path|dt.img}}.
{{Cmd|../skales/dtbTool -o dt.img -s 2048 \
../db_410c_kernel/arch/arm64/boot/dts/qcom}}
{{note|If you lack the {{Path|dts/qcom}} directory, follow the instructions to compile the kernel above.}}

=== Assemble {{Path|db410c-boot.img}} ===
You have several options here for your cmdline. Upstream suggests the following:
{{Cmd|export cmdline="root&#61;/dev/ram0 rw rootwait console&#61;ttyMSM0,115200n8"
<pre># This loads the rootfs from your ramdisk.</pre>
|export cmdline="root&#61;/dev/disk/by-partlabel/userdata rw rootwait console&#61;ttyMSM0,115200n8"
<pre># This is your choice if you have a rootfs installed on your eMMC userdata partition.</pre>
|export cmdline="root&#61;/dev/disk/by-partlabel/userdata rw rootwait console&#61;ttyMSM0,115200n8 text"
<pre># This just adds a text console.</pre>}}
{{Cmd|../skales/mkbootimg --kernel ../db_410c_kernel/arch/arm64/boot/Image \<br />--ramdisk initrd.img-4.4.0-linaro-lt-qcom \<br />--output db410c-boot.img \<br />--dt dt.img --pagesize 2048 \<br />--base 0x80000000 \<br />--cmdline "${cmdline}"</pre>}}
{{note|If {{Path|mkbootimg}} fails, whining about {{Path|AttributeError: 'bytes' object has no attribute 'encode'}}, just edit it to call {{Path|python2}} instead of {{Path|python}}.}}

===
[[Category:Embedded_systems]]
