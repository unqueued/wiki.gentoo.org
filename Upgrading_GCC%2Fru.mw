<languages />


{{Metadata|abstract=Данный документ проведет пользователя через процесс обновления GCC.}}

Данный документ проведет пользователя через процесс обновления GCC.

== Быстрый старт ==

=== Введение ===

Эта статья о ''апгрейде'' GCC. Даунгрейд GCC может привести к нежелательным побочным эффектам. Обратитесь к разделу устранения проблем по поводу часто возникающих проблем. 

Следующий раздел быстро введет вас в процесс обновления GCC (и того, как просто его сделать). Если вы хотите прочитать длинное объяснение причин, стоящих за обновлением GCC, продолжайте читать [[#GCC Upgrading Explained|Объяснение обновления GCC]].

=== Короткая версия ===

Если вы обновляете GCC, то вам вообще не нужно ничего делать, кроме смены версии компилятора и пересборки libtool: 

{{RootCmd|emerge -u gcc
|gcc-config -l|output=<pre>
[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3
</pre>}}

{{RootCmd|gcc-config 2
|env-update && source /etc/profile
|emerge --oneshot libtool}}

Если вы обновляете GCC с версии меньшей, чем 3.4.0 (для версий 3.x), либо 4.1, вам нужно еще запустить <code>revdep-rebuild</code>: 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

Проверьте текущую версию и удалите старую версию
{{RootCmd|gcc --version
|emerge -C &#61;sys-devel/gcc-4.4.5}}

Вот и все. Наслаждайтесь новым компилятором! 

== Объяснение обновления GCC ==

=== Введение ===

Обновление GCC всегда было какой-то мистикой, с предположениями от "Вам ничего не нужно знать" до "Вам нужно дважды пересобрать всю свою систему". Большинство этого спама проистекает из проблем, связанных с несовместимостью ABI. Но, сначала кратко о <code>libtool</code>.

=== libtool и fix_libtool_files.sh ===

Более старые версии GCC на Gentoo требовали запуска специальной команды, называемой <code>fix_libtool_files.sh</code>. Некоторое время назад, выполнение данной команды было встроено в сам процесс установки пакета (через toolchain eclass), поэтому пользователям больше не нужно делать это самим. 

Причина, по которой нужно пересобирать libtool после обновления версий gcc это потому, что главной функцией ''libtool'' является объединение кода, зависящего от платформы в общем интерфейсе, что позволяет приложениям использовать разделяемые библиотеки без нужды иметь дело с вещами, зависящими от платформы для разделяемых библиотек. Чтобы реализовать эту функцию, скрипт <code>libtool</code> использует различные пути до библиотек, в которых есть жестко заданная информация о версии GCC.

=== ABI Changes ===

An ABI, or ''Application Binary Interface'', is a set of conventions used by all tools that deal with binary representation of programs, including compilers, assemblers, linkers and language runtime support (source: [http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html GCC Binary Compatibility]). When the ABI used for binary applications and libraries is changed, you will risk getting linker errors or malfunctioning programs unless you rebuild all libraries that use C++ code. Yes, C++, since most incompatibilities occur within the C++ ABI. This is also why we use the <code>revdep-rebuild</code> command against the {{Path|libstdc++.so.5}} library. 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

So why is this only needed up to GCC 3.4.0/4.1? That's because from that version onwards, GCC uses a forward compatible ABI, which removes the need for rebuilding applications and libraries. Of course, guarantees can never be given indefinitely, but when an incompatibility occurs again, we'll definitely document it here. In that case, the version of the {{Path|libstdc++.so}} library will probably be increased.

=== Rebuilding Everything ===

Some people swear that they need to rebuild every single package on their system when a new GCC version is made available. Of course, that doesn't make sense, since there are many applications that are not using GCC for their build and install process anyhow, so they would never be affected by such changes. 

That however doesn't mean they are completely incorrect: newer GCC versions often include better support for the processors' instruction set, which might influence the performance of some applications in a positive way. Although it is expected that this improvement is generally only marginally, in some cases (especially CPU intensive applications) this might yield notable improvements. 

There are also known cases where packages need to be built with the same compiler. Although these packages are usually bumped by Gentoo simultaneously (so that they are always built with the same GCC version) cherry-picking reinstalls on these packages might prove to be troublesome. The various {{Path|qt-*}} packages are a nice example on this matter. 

== Устранение проблем ==

=== libstdc++.so.6: version `GLIBCXX_3.4.15' not found ===

В процессе обновлений вы можете встретить ошибку, похожую на следующую: 

{{Code|GLIBCXX_x.y.z not found|<pre>
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found 
</pre>
}}

Это означает, что вы пытаетесь собрать пакет ''более старой'' версией GCC, чем собирались библиотеки, от которых зависит пакет. Помните, мы говорили, что C++ ABI обратно-совместима? Это так, но это означает только, что для сборки приложений и линковки библиотек могут использоваться ''более новые'' (или те же самые) версии GCC (по сравнению с версией GCC, использованной для сборки этих библиотек). 

=== Какие пакеты мне нужно пересборать? ===

Следующая таблица описывает пакеты, которые нужно пересобрать, ''если они у вас есть'', и рассказывает, почему. 

{| class="wikitable" style="text-align: left;" 
|- 
! Пакет
! Нужно пересобрать, потому что ...
|- 
| sys-devel/libtool
| приложение libtool имеет внутри себя вшитые пути к встроенным библиотекам GCC
|-
|}

== Источники ==

=== Ресурсы и статьи Gentoo ===

*  [https://wiki.gentoo.org/wiki/Upgrade_GCC_up_to_4.1 Обновление GCC до версии 4.1], предыдущая версия данного документа


[[Category:Core system]]
