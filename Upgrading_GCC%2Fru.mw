<languages />


{{Metadata|abstract=Данный документ проведет пользователя через процесс обновления GCC.}}

Данный документ проведет пользователя через процесс обновления GCC.

== Быстрый старт ==

=== Введение ===

Эта статья о ''апгрейде'' GCC. Даунгрейд GCC может привести к нежелательным побочным эффектам. Обратитесь к разделу устранения проблем по поводу часто возникающих проблем. 

Следующий раздел быстро введет вас в процесс обновления GCC (и того, как просто его сделать). Если вы хотите прочитать длинное объяснение причин, стоящих за обновлением GCC, продолжайте читать [[#GCC Upgrading Explained|Объяснение обновления GCC]].

=== Вкратце ===

Если вы обновляете GCC, то вам вообще не нужно ничего делать, кроме смены версии компилятора и пересборки libtool: 

{{RootCmd|emerge -u sys-devel/gcc
|gcc-config -l|output=<pre>
[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3
</pre>}}

{{RootCmd|gcc-config 2
|env-update && source /etc/profile
|emerge --oneshot libtool}}

Если вы обновляете GCC с версии меньшей, чем 3.4.0 (для версий 3.x), либо 4.1, вам нужно еще запустить {{c|revdep-rebuild}}: 

{{RootCmd|revdep-rebuild --library 'libstdc++\.so\.5'}}

Проверьте текущую версию и удалите старую версию
{{RootCmd|gcc --version
|emerge -C &#61;sys-devel/gcc-4.4.5}}

Вот и все. Наслаждайтесь новым компилятором! 

== Объяснение обновления GCC ==

=== Введение ===

Обновление GCC всегда было какой-то мистикой, с предположениями от "Вам ничего не нужно знать" до "Вам нужно дважды пересобрать всю свою систему". Большинство этого спама проистекает из проблем, связанных с несовместимостью ABI. Но, сначала кратко о {{c|libtool}}.

=== libtool и fix_libtool_files.sh ===

Более старые версии GCC на Gentoo требовали запуска специальной команды, называемой <code>fix_libtool_files.sh</code>. Некоторое время назад, выполнение данной команды было встроено в сам процесс установки пакета (через toolchain eclass), поэтому пользователям больше не нужно делать это самим. 

Причина, по которой нужно пересобирать libtool после обновления версий {{c|gcc}} это потому, что главной функцией ''libtool'' является объединение кода, зависящего от платформы в общем интерфейсе, что позволяет приложениям использовать разделяемые библиотеки без нужды иметь дело с вещами, зависящими от платформы для разделяемых библиотек. Чтобы реализовать эту функцию, скрипт {{c|libtool}} использует различные пути до библиотек, в которых есть жестко заданная информация о версии {{c|gcc}}.

=== Изменения ABI ===

ABI, или [https://en.wikipedia.org/wiki/Application_binary_interface ''Двоичный интерфейс приложений''], это набор соглашений, используемых всеми инструментами, работающими с бинарным видом программ, например, компиляторы, ассемблеры, линкеры и поддержка рантайма для языков (источник: [http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html Бинарная совместимость GCC]). Когда ABI, используемый для бинарных приложений и библиотек меняется, появляется риск получить ошибку компоновщика, либо неработающие программы, если только вы не пересоберете все программы, использующие код C++. 

Да, C++, поскольку в большинстве случаев несоответствия обнаруживаются на уровне двоичного интерфейса приложений C++. Если вы обновляетесь до GCC 4.1, или GCC 5.1, вы, вероятно, столкнетесь с проблемами в двоичном интерфейсе. Это так же объясняет почему мы снова использовали команду {{c|revdep-rebuild}} для {{Path|libstdc++.so.5}} (от GCC 3 до GCC 4.1), или {{Path|libstdc++.so.6}} (от GCC 4 до GCC 5.1).

{{RootCmd|revdep-rebuild --library 'libstdc\+\+.so.6'}}

Так почему же это нужно только до GCC 3.4.0/4.1/5? Это потому что с этой версии GCC использует обратно-совместимое ABI, и пересборка приложений и библиотек больше не требуется. Конечно, мы не можем дать вам гарантию, что так будет вечно, но если снова возникнет несоответствие, мы явно опишем этот случай здесь. В этом случае, скорее всего, будет увеличена версия библиотеки {{Path|libstdc++.so}}.

==== The special case C++11 (and C++14) ====

While GCC (or more specifically, libstdc++) goes to great lengths to guarantee stability of the ABI, this guarantee does not extend to all parts of C++ within libstdc++. Formally, with versions starting from 3.4, GCC/libstdc++ only guarantees C++98/C++03 ABI stability and not more. This is crucial for packages that depend on C++11. GCC only makes C++11 ABI stability guarantees beginning with version 5.1. This means that switching (even minor) versions of gcc (say from 4.7.3 -> 4.7.4) might cause ABI breakage for binaries built from C++11 code.

For more information and some examples, see:

* https://bugs.gentoo.org/show_bug.cgi?id=513386
* https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61758
* https://blogs.gentoo.org/blueness/2015/03/10/the-c11-abi-incompatibility-problem-in-gentoo/
* http://stackoverflow.com/a/16196475

=== Пересборка всего ===

Некоторые люди клянутся, что нужно пересобрать все пакеты на их системе при выходе новой версии GCC. Конечно, в этом нет смысла, так как многие приложения не используют GCC для процесса сборки и установки, и на них вообще не распространяется это изменение. 

Это, однако, не означает, что они полностью неправы: новые версии GCC часто предлагают более хорошую поддержку набора инструкций процессора, а это может повлиять на производительность приложений в лучшую сторону. Хотя, чаще всего, данное улучшение очень незначительное, в некоторых случаях (особенно для приложений, сильно использующих процессор) это может привести к существенному улучшению. 

Также известны случаи, когда пакеты должны быть собраны одной и той же версией компилятора. Хотя эти пакеты чаще всего обновляются в Gentoo одновременно (поэтому они всегда будут собираться одной и той же версией GCC), но обновления по отдельности могут быть источником проблем. Некоторые пакеты {{Path|qt-*}} являются прекрасным примером такого поведения.

== Устранение проблем ==

=== libstdc++.so.6: version `GLIBCXX_3.4.15' not found ===

В процессе обновлений вы можете встретить ошибку, похожую на следующую: 

{{CodeBox|title=GLIBCXX_x.y.z not found|1=
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found
}}

Это означает, что вы пытаетесь собрать пакет ''более старой'' версией GCC, чем собирались библиотеки, от которых зависит пакет. Помните, мы говорили, что C++ ABI обратно совместим? Это так, но означает только, что для сборки приложений и линковки библиотек могут использоваться ''более новые'' (или те же самые) версии GCC (по сравнению с версией GCC, использованной для сборки этих библиотек).

Для пересоборки всех зависящих от libstdc++ смотрите пример команды revdep-rebuild в предыдущем разделе.

=== Какие пакеты определенно нужно пересобрать? ===

В следующей таблице приведены пакеты, которые нужно пересобрать, ''если они установлены'', и причины этой необходимости. 

{| class="table" style="text-align: left;" 
|- 
! Package
! Rebuild needed because ...
|- 
| {{Package|sys-devel/libtool}}
| libtool application has hardcoded paths towards GCC internal libraries
|}

== Смотрите также ==

*  [https://wiki.gentoo.org/wiki/Upgrade_GCC_up_to_4.1 GCC Upgrading up to 4.1], the previous version of this document
* [[Upgrading from gcc-4.x to gcc-5.x]]


[[Category:Core system]]
