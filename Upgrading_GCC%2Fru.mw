<languages />


{{Metadata|abstract=Данный документ проведет пользователя через процесс обновления GCC.}}

Данный документ проведет пользователя через процесс обновления GCC.

== Быстрый старт ==

=== Введение ===

Эта статья о ''апгрейде'' GCC. Даунгрейд GCC может привести к нежелательным побочным эффектам. Обратитесь к разделу устранения проблем по поводу часто возникающих проблем. 

Следующий раздел быстро введет вас в процесс обновления GCC (и того, как просто его сделать). Если вы хотите прочитать длинное объяснение причин, стоящих за обновлением GCC, продолжайте читать [[#GCC Upgrading Explained|Объяснение обновления GCC]].

=== Короткая версия ===

Если вы обновляете GCC, то вам вообще не нужно ничего делать, кроме смены версии компилятора и пересборки libtool: 

{{RootCmd|emerge -u sys-devel/gcc
|gcc-config -l|output=<pre>
[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3
</pre>}}

{{RootCmd|gcc-config 2
|env-update && source /etc/profile
|emerge --oneshot libtool}}

Если вы обновляете GCC с версии меньшей, чем 3.4.0 (для версий 3.x), либо 4.1, вам нужно еще запустить <tt>revdep-rebuild</tt>: 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

Проверьте текущую версию и удалите старую версию
{{RootCmd|gcc --version
|emerge -C &#61;sys-devel/gcc-4.4.5}}

Вот и все. Наслаждайтесь новым компилятором! 

== GCC upgrading explained ==

=== Введение ===

GCC upgrading has always been mystified, with suggestions ranging from "You do not need to do anything" up to "You will need to rebuild your entire system twice". Most of this FUD comes from the confusion surrounding ABI incompatibility. But first a quick pointer towards <tt>libtool</tt>.

=== libtool и fix_libtool_files.sh ===

Более старые версии GCC на Gentoo требовали запуска специальной команды, называемой <code>fix_libtool_files.sh</code>. Некоторое время назад, выполнение данной команды было встроено в сам процесс установки пакета (через toolchain eclass), поэтому пользователям больше не нужно делать это самим. 

The reason we need to rebuild libtool after the upgrade of <tt>gcc</tt> versions is because of its main purpose: ''libtool'' is a toolset that aggregates platform-specific code in a generic interface, allowing applications to build against shared libraries without needing to deal with the platform specific aspects of shared libraries. To fulfill its function properly, the <tt>libtool</tt> script uses various library locations that have hard-coded <tt>gcc</tt> version information in them.

=== ABI changes ===

An ABI, or [https://en.wikipedia.org/wiki/Application_binary_interface ''Application Binary Interface''], is a set of conventions used by all tools that deal with binary representation of programs, including compilers, assemblers, linkers and language runtime support (source: [http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html GCC Binary Compatibility]). When the ABI used for binary applications and libraries is changed, you will risk getting linker errors or malfunctioning programs unless you rebuild all libraries that use C++ code. 

Yes, C++, since most incompatibilities occur within the C++ ABI. If you are upgrading to GCC 4.1, or GCC 5.1, you would probably encounter ABI issues. This is also why we use the <tt>revdep-rebuild</tt> command against the {{Path|libstdc++.so.5}} (from GCC 3 to GCC 4.1), or {{Path|libstdc++.so.6}} (from GCC 4 to GCC 5.1).

{{RootCmd|revdep-rebuild --library "libstdc\+\+\.so\.6"}}

So why is this only needed up to GCC 3.4.0/4.1/5.1? That's because from that version onward, GCC uses a forward compatible ABI, which removes the need for rebuilding applications and libraries. Of course, guarantees can never be given indefinitely, but when an incompatibility occurs again, we'll definitely document it here. In that case, the version of the {{Path|libstdc++.so}} library will probably be increased.

=== Rebuilding everything ===

Некоторые люди клянутся, что нужно пересобрать все пакеты на их системе при выходе новой версии GCC. Конечно, в этом нет смысла, так как многие приложения не используют GCC для процесса сборки и установки, и на них вообще не распространяется это изменение. 

Это, однако, не означает, что они полностью неправы: новые версии GCC часто предлагают более хорошую поддержку набора инструкций процессора, а это может повлиять на производительность приложений в лучшую сторону. Хотя, чаще всего, данное улучшение очень маленькое, в некоторых случаях (особенно для приложений, сильно использующих процессор) это может привести к существенному улучшению. 

There are also known cases where packages need to be built with the same compiler. Although these packages are usually bumped by Gentoo simultaneously (so that they are always built with the same GCC version) cherry-picking re-installs on these packages might prove to be troublesome. The various {{Path|qt-*}} packages are a nice example on this matter. 

== Устранение проблем ==

=== libstdc++.so.6: version `GLIBCXX_3.4.15' not found ===

В процессе обновлений вы можете встретить ошибку, похожую на следующую: 

{{CodeBox|title=GLIBCXX_x.y.z not found|1=
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found 
}}

Это означает, что вы пытаетесь собрать пакет ''более старой'' версией GCC, чем собирались библиотеки, от которых зависит пакет. Помните, мы говорили, что C++ ABI обратно совместим? Это так, но означает только, что для сборки приложений и линковки библиотек могут использоваться ''более новые'' (или те же самые) версии GCC (по сравнению с версией GCC, использованной для сборки этих библиотек).

Для пересоборки всех зависящих от libstdc++ пакетов можно выполнить следующий bash-скрипт.

{{CodeBox|title=Script to rebuild libstdc++ dependent packages|lang=bash|1=
#!/bin/bash
 
IFS=: read -ra pathComponents <<<"$PATH"
while IFS= read -rd '' x; do
    ldd -r -- "$x" {{!}} grep -q libstdc++ && bins+=("$x")
done < <(find "${pathComponents[@]}" -type f -executable -print0)
 
typeset -A pkgs
while read -r x; do
    : ${x:+"${pkgs[=${x}]=}"}
done < <(equery -q b "${bins[@]}")
emerge -av1 "${!pkgs[@]}"
}}

=== Какие пакеты определенно нужно пересобрать? ===

В следующей таблице приведены пакеты, которые нужно пересобрать, ''если они установлены'', и причины этой необходимости. 

{| class="table" style="text-align: left;" 
|- 
! Package
! Rebuild needed because ...
|- 
| {{Package|sys-devel/libtool}}
| libtool application has hardcoded paths towards GCC internal libraries
|-
|}

== Смотрите также ==

*  [https://wiki.gentoo.org/wiki/Upgrade_GCC_up_to_4.1 Обновление GCC до версии 4.1], предыдущая версия данного документа


[[Category:Core system]]
