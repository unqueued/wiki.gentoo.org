{{InfoBox stack
|{{InfoBox homepage|https://perl.org|header=true}}
|{{InfoBox project|Perl}}
|{{InfoBox wikipedia|Perl}}
}}

{{warning|This page contains some wrong information and some bad advice. I'm going to go through it in detail soon, but in the meantime please be careful. [[User:Dilfridge|Dilfridge]] ([[User talk:Dilfridge|talk]]) 20:31, 27 March 2017 (UTC)}}

The Perl language itself is packaged as {{c|dev-lang/perl}}. There're three Perl-related categories:

* {{c|[https://packages.gentoo.org/categories/dev-perl dev-perl]}}: Libraries in / for Perl, corresponding to {{c|dev-java}}, {{c|dev-python}}, etc. In most cases the package name directly corresponds to a CPAN distribution.
* {{c|[https://packages.gentoo.org/categories/perl-core perl-core]}}: Packages in this category are modules included in {{c|dev-lang/perl}}, which are also independently packaged on CPAN. When modules are installed via {{c|perl-core}}, they override the counterpart in the core {{c|dev-lang/perl}}. This can be used for selective bugfixes. For the details, see below - but please '''never manually install any {{c|perl-core}} packages with emerge'''.
* {{c|[https://packages.gentoo.org/packages/search?q{{=}}virtual%2Fperl virtual/perl-*]}}: Virtual packages that allow choosing a module between {{c|perl-core/}} packages and the one contained in the core {{c|dev-lang/perl}}. If you need a specific version of a core package, emerge the corresponding virtual - and the package manager will figure out if a perl-core/ package is needed or not.

More on perl-core<ref>https://bugs.gentoo.org/show_bug.cgi?id=608168#c1</ref>:

* It allows users to have more update versions of some modules that the core ones.
* It allows package-based installation, without bumping or patching the core perl.
* Sometimes these modules get deprecated in newer Perl. Such cases are handled by virtual/perl-*. Search [https://bugs.gentoo.org/show_bug.cgi?id=608168#c1] for "Module::Build" for more in-depth stories.

Normally you do not have to care at all about perl-core packages or virtuals; if you need any specifics there they should be pulled in as dependencies.

__TOC__

== Installation ==

=== USE flags ===

==== Global ====

Since many packages depend on the perl, Portage is aware of the [https://packages.gentoo.org/useflags/perl global perl USE flag]. It can be enabled (or disabled) globally:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
USE="perl"
}}

==== Package ====

{{USEflag|package=dev-lang/perl}}

As always, after adjusting USE flags, be sure to tell Portage to apply the changes to installed packages on the system:

{{Emerge|params+=--update --changed-use --deep|@world}}

In addition, after changing the <code>ithreads</code> or <code>debug</code> use flag setting, you need to re-build all packages installing perl modules or linking to libperl:

{{RootCmd|perl-cleaner --reallyall}}

== Upgrading (major version) ==

The official way of upgrading Perl, e.g. from Perl 5.22 to Perl 5.24, is upgrading your entire world, and upgrading Perl with it. This is because Portage needs to be able to rebuild packages depending on Perl. If you ask Portage to selectively only upgrade the Perl package itself, it can't do this and the emerge command will fail.

As in all cases when automatic rebuilds are involved, it helps a lot if you do regular updates and regularly run depclean.

=== The official way ===

{{RootCmd
| emerge -uDNav --backtrack 1000 world
| perl-cleaner --all
}}

=== Some knowledge ===

* Perl modules are installed under e.g. {{Path|/usr/lib/perl/vendor_perl/5.22.3/}}. Note that the core Perl version number is present. When upgrading Perl by a major version, the packages providing these modules have to be re-emerged, too.
* The same is valid for all packages linking to libperl.
* The rebuilds 'should' be done automatically by emerge. <code>app-admin/perl-cleaner</code> exists to do them as well and can catch things missed by emerge (sadly Portage still has some bugs).
* During Perl upgrade, packages that depend on Perl may become unavailable.
* '''No rebuilds are necessary during a point-release update''' (i.e. from 5.24.0 to 5.24.1).

In order to upgrade your Perl installation to unstable (~arch) version on an otherwise stable system, add the following text to <code>/etc/portage/package.keywords</code>:
<pre><nowiki>
# use Perl from ~arch
dev-lang/perl
perl-core/*
virtual/perl-*
</nowiki></pre>
Perl itself, the perl-core packages and the Perl virtuals 'must' have the same, consistent status (either all stable or all ~arch). What setting you use for dev-perl packages does not matter at all. 

=== app-admin/gentoo-perl-helpers ===

This recent package (appeared in Jan 2017) {{package|app-admin/gentoo-perl-helpers}} ([https://github.com/gentoo-perl/gentoo-perl-helpers git repository]) still needs to be tested, but must be far better than {{c|$ emerge -auDN @world}}. It is written by [[User:Kentnl|K. Fredric]] (kentnl), a Gentoo [[Project:Perl|Perl Project]] member.

Although it's only "~amd64 ~arm64 ~x86" as of Mar 2017, it's likely to work for any architecture, only needing basic utils like bash, coreutils, etc. 

==== Basic usage ====

Assume you have 5.20.*, and want to upgrade to 5.22.*.

{{RootCmd|gentoo-perl gen-upgrade-sets 5.20 5.22 # NOT 5.20.1. See below for more.}}

Now you will have two sets {{c|perl-upgrade}} and {{c|perl-cleanup}}, (stored in {{path|/etc/portage/sets}}). Then simply do
{{RootCmd| emerge --oneshot --ask @perl-upgrade}}

Once this is done, do {{c|$ emerge -ac; perl-cleaner --all}}.

Help can be read by:

{{Cmd | gentoo-perl help gen-upgrade-sets }}

==== Details ====

In {{c|gentoo-perl gen-upgrade-sets}}, packages' keyword and mask are irrelevant. Simply the specified versions matter. The examples of the version are {{c|5.20}}, {{c|5.22}}, etc, '''not''' {{c|5.22.3_rc4}} or {{c|5.24.1_rc4}}. More precisely, they should be the sub-slot number, not atoms' versions.

If Portage complains about unsatisfied conflicts, you can try deleting blockers before upgrading:

{{RootCmd
|emerge --unmerge @perl-cleanup
|emerge --oneshot --ask @perl-upgrade
}}

In the event that portage fails while upgrading Perl, so that some but not all packages are emerged, then update (= trim down) the set {{c|@perl-upgrade}} (the same command as the first time generation):

{{RootCmd|gentoo-perl gen-upgrade-sets 5.20 5.22}}

The emerge can be resumed by:

{{RootCmd|emerge --oneshot --ask @perl-upgrade}}

If you want to store the sets elsewhere, do :

{{Cmd|ETC_PORTAGE_SETS{{=}}"/tmp/sets/" gentoo-perl gen-upgrade-sets 5.20 5.22}}

To use it later, don't forget to do this:

{{RootCmd|cp /tmp/sets/* /etc/portage/sets/*}}

=== A wild way ===

{{warning|There's no guarantee that these recipes work. Please read the text below carefully.}}

Version 1: this emulates the old behaviour before Portage could do automated rebuilds. Possible if you want to update Perl and only Perl.

{{RootCmd
| emerge --ask --oneshot --ignore-built-slot-operator-deps y dev-lang/perl
| perl-cleaner --all
}}

Version 2: this is if you want to update your world, but emerge seems to be completely stuck with a lot of Perl-related errors. Warning 1: you may temporarily open up security vulnerabilities on your system while the update process is running. Warning 2: you should be familiar with revdep-rebuild.

{{RootCmd
| emerge --ask --unmerge 'perl-core/*' 'virtual/perl-*'
| emerge -uDNav --ignore-built-slot-operator-deps y world
| perl-cleaner --all
| revdep-rebuild
}}

== References ==

{{reflist}}

[[Category:Programming language]]
