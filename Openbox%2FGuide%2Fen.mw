<languages />


{{Metadata|abstract=This guide shows you how to install the Openbox window manager, and references many potential programs to be used in conjunction with an Openbox session.}}

The aim of this guide is to show users how to install and configure the OpenBox window manager. Many potential programs to be used in conjunction with OpenBox are referenced throughout this article. For a shorter, simpler install guide see [[Openbox]].

== Introduction ==

=== What is Openbox? ===

So, you've installed [https://wiki.gentoo.org/wiki/Xorg/Configuration The X Server] and realised that TWM (Tab Window Manager) just isn't going to cut it for your needs. You may have also had some experience with big desktop environments like [http://www.gentoo.org//proj/en/desktop/kde/kde4-guide.xml KDE] , [http://www.gentoo.org//doc/en/gnome-config.xml GNOME] , and [http://www.gentoo.org//doc/en/xfce-config.xml Xfce] . One component of those larger desktop suites is called the window manager (or WM for short). A window manager is responsible for the appearance and placement of the containers (or "windows") inside which programs run. Openbox is a minimalistic, no-frills-attached window manager.

=== Why should I use it? ===

Openbox, unlike the larger desktop environments, depends on very few libraries. For that reason, it can provide a lightweight graphic environment that runs very quickly, even on older hardware. Whether your hardware is old or new, Openbox also provides a highly customisable and unobtrusive working environment. That means that if you don't want or need a panel, taskbar, clock, or any other program, those choices are yours to make! 

== Installation and configuration ==

=== Initial installation ===

After you have emerged and configured <code>xorg-server</code> , installing Openbox can be done in one simple command: 

{{RootCmd|emerge -av openbox}}

Just like other window managers and desktop environments, in order to load Openbox automatically, the X Server needs to be told to start Openbox. This is done by adding Openbox to the {{Path|~/.xinitrc}} file in the user's home directory:

{{Cmd|echo "exec openbox-session" >> ~/.xinitrc}}

This will automatically start your Openbox session when you type <code>startx</code> at the terminal. 

{{Important|As each user has his or her own {{Path|.xinitrc}} , you need to make sure to issue that command as ''your user'' , not as root.}}

{{Note|If you experience problems with automounting, or if you use dbus and ConsoleKit, you may want to put <code>exec ck-launch-session dbus-launch --sh-syntax --exit-with-session openbox-session</code> in your {{Path|.xinitrc}} instead of the default mentioned above.}}

{{Note|You can also replace the KDE, GNOME, or Xfce default window manager with Openbox by following the [[#Openbox inside desktop environments|Openbox inside desktop environments]] directions.}}

Now that you have emerged Openbox and added it to your {{Path|.xinitrc}} , go ahead and issue the <code>startx</code> command to see Openbox in action. As you can see, the desktop is simply a cluttered mess! In following with the Openbox philosophy, what you will see is a barebones environment from which you can build your desktop completely to your liking. 

Since you're looking at nothing more than a black screen, you may be wondering where the menu is. If you click your right mouse button, you will notice that a menu pops up in the location of your cursor. This menu is nothing more than an example to illustrate the style of an Openbox menu. Since it ''is'' just an example, none of the items in the menu will work unless you have actually emerged those programs. In the next section, you will see how to create your own menu that contains links to ''your'' programs. 

{{Important|If you click to view the menu and notice that there is nothing legible, you need to install some fonts. Two common choices are {{Package|media-fonts/corefonts}} (under EULA license, or its free counterpart {{Package|media-fonts/croscorefonts}} if you are freedom conscious) and {{Package|media-fonts/ttf-bitstream-vera}}.}}

=== Menu configuration ===

Since the default Openbox menu is essentially useless to you for the reasons mentioned above, it's time that we create one that will work. Everything in the Openbox menu is written in the appropriately named {{Path|menu.xml}} file, which can be in the user-specific location of {{Path|~/.config/openbox/menu.xml}} , or in the system-wide location of {{Path|/etc/xdg/openbox/menu.xml}} . By default, the only {{Path|menu.xml}} file that is created is the system-wide one which applies to all users on the system. 

An easy way to get a basic menu file which you can modify is to use MenuMaker, which will generate a {{Path|menu.xml}} file based on the programs which you currently have installed on your system. To do so, you must firstly emerge it: 

{{RootCmd|emerge menumaker}}

Once it is installed, make sure to logout of root, and back into the user account. Then instruct MenuMaker to create a menu specifically using the Openbox XML syntax: 

{{Cmd|mmaker -v OpenBox3}}

The generated menu will be located at {{Path|~/.config/openbox/menu.xml}}. Users can then choose to leave it as the user-specific {{Path|menu.xml}}, or to additionally copy it to the system-wide menu configuration as well: 

{{RootCmd|cp .config/openbox/menu.xml /etc/xdg/openbox/menu.xml}}

{{Important|It is a good idea to use MenuMaker to generate a default menu, as it will have the Openbox root-menu items. These items include a virtual desktop switcher, and the commands to restart and exit the Openbox session.}}

When you open up the {{Path|menu.xml}} file in your favourite editor (nano, for example), you will notice that the XML tags used are very human-readable and easily understandable. You may choose to modify the default file to fit your needs, or you may want to write it from scratch (don't worry, it's really not that difficult). The basic syntax for the menu XML is as follows: 

{{File|menu.xml||<pre>
<?xml version="1.0" encoding="UTF-8"?>
<openbox_menu>
<separator label="NAME_OF_SEPARATOR" />
<menu id="IDENTIFIER" label="NAME_OF_MENU">
  <item label="NAME_OF_PROGRAM">
    <action name="execute"><execute>/LOCATION/OF/BINARY</execute></action>
  </item>
</menu>
</openbox_menu>
</pre>
}}

The above example will work for any applications that launch with standard options in their own windows, but what if one needs to append options to the program at launch time? That is no problem either, just add the options to the command, as usual.

{{File|menu.xml||<pre>
<?xml version="1.0" encoding="UTF-8"?>
<openbox_menu>
<separator label="NAME_OF_SEPARATOR" />
<menu id="IDENTIFIER" label="NAME_OF_MENU">
  <item label="NAME_OF_PROGRAM">
    <action name="execute"><command>/LOCATION/OF/BINARY --OPTION1 --OPTION2</command></action>
  </item>
</menu>
</openbox_menu>
</pre>
}}

Simply replace anything in ALL_CAPS in the above two examples with your information. Alternatively, you can <code>emerge obmenu</code> , which is a graphical interface allowing you to create your menus without having to manually edit the {{Path|menu.xml}} file. It is a very small application and offers a nice amount of customisation without typing any XML.

=== Openbox theme and behaviour configuration ===

Aside from being minimalistic and lightweight, Openbox is also surprisingly customisable and flexible. As a user, you can easily change various settings related to theme, appearance, window placement, docking, and more. There are two options for configuring these settings within Openbox. You may either manually edit {{Path|~/.config/openbox/rc.xml}}, or you may want a GUI to help you quickly change settings. 

If you want to manually edit {{Path|rc.xml}}, you simply open up your favourite text editor and start making changes. You might want to make a backup of the original file just in case, and store it in a location like {{Path|~/.config/openbox/rc.xml.default}}. There are plenty of comments within the document itself that should help you with editing. Alternatively, you may want to look at the [http://openbox.org/wiki/Help:Contents#Configuration Openbox configuration guides]. 

If manually editing {{Path|rc.xml}} doesn't sound like your cup of tea, you may want to use the GTK+ application to manage your themes and behaviours in Openbox. The application that you will use is called ObConf, and can be installed on your system just as easily as was Openbox itself. 

{{RootCmd|emerge obconf}}

You can then open the configurator by typing <code>obconf</code> in your terminal. Next, you can go and add an entry for ObConf into your {{Path|menu.xml}} so it will show up in your Openbox menu. If the "editing the menu.xml file" code listing above seemed too vague to be helpful, we'll use ObConf as an example of a menu entry: 

{{File|menu.xml||<pre>
<?xml version="1.0" encoding="UTF-8"?>
<openbox_menu>
<menu id="1" label="Configuration">
  <item label="OpenBox Config">
    <action name="execute"><execute>/usr/bin/obconf</execute></action>
  </item>
</menu>
</openbox_menu>
</pre>
}}

While ObConf is a great GUI tool for editing many behaviour-related settings for Openbox, it doesn't allow one to manipulate nearly as many settings as are presented in the {{Path|rc.xml}} file itself. If you are having trouble finding a particular setting which you would like to change, please consult the [http://openbox.org/wiki/Configuration Openbox Wiki] for more information.

{{Note|In recent versions of Openbox (namely >3.4.7.2), one may experience a delay in the submenu opening. This setting was introduced into the rc.xml file, and is listed as <submenuShowDelay>100</submenuShowDelay>. Simply choose a lower number that suits your needs.}}

=== Autostart configuration ===

As mentioned above, you don't see a whole lot when you issue the <code>startx</code> command for the first time after installing Openbox. In addition to customising your menus and changing the behaviour of the window manager, you will probably want to have some programs automatically start with your Openbox session. There is an easily-editable {{Path|autostart.sh}} script that allows you to do just that. Just like with the {{Path|menu.xml}} file, there are two different locations of the {{Path|autostart.sh}} script--the system-wide ({{Path|/etc/xdg/openbox/autostart.sh}}), and the user-defined ({{Path|~/.config/openbox/autostart.sh}}). 

In the default {{Path|autostart.sh}}, you will notice a bunch of lines calling for programs like the gnome-settings-daemon, XDG, and others. These lines will generate errors upon logout if you don't have the programs installed and configured. The easiest thing to do when getting started with Openbox is to just comment out these lines by using the # symbol. 

{{File|autostart.sh||<pre>
# Run XDG autostart things. By default don't run anything desktop-specific
# DESKTOP_ENV=""
# if which /usr/lib/openbox/xdg-autostart >/dev/null; then
#  /usr/lib/openbox/xdg-autostart $DESKTOP_ENV
# fi
</pre>
}}

In the above example, the comment symbol (#) was added before each line. The commenting method is preferred to just deleting the lines because you may want to add support for some of those startup items at a later time. Thus, leaving the default lines in place could ease that process. 

Adding programs to the {{Path|autostart.sh}} script is as easy as writing in the program name for many applications. For instance, if  {{Package|app-admin/conky}} is installed (a lightweight system monitor), and it needs to be started automatically with the Openbox session, simply add the following line to the {{Path|autostart.sh}} file: 

{{Code|Adding Conky to your autostart.sh|<pre>
conky &
</pre>
}}

The ampersand (&) after the command allows that application to load up in the background. You will most likely want to load all the applications in your {{Path|autostart.sh}} script in the background because doing so will let Openbox and other programs load without the previous one finishing.

=== Configuring PolKit ===

Many applications depend on the [http://hal.freedesktop.org/docs/PolicyKit PolKit] authentication framework. You may need a PolKit agent, such as <code>polkit-gnome</code> , running in your Openbox session. 

First, install the agent: 

{{RootCmd|emerge polkit-gnome}}

Now configure PolKit to start automatically when logging in to Openbox. Add the following line to {{Path|~/.config/openbox/autostart}} (for a single user) or {{Path|/etc/xdg/openbox/autostart.sh}} (for all users): 

{{FileBox|filename=autostart.sh|title=Start PolKit automatically|lang=bash|1=
sleep 1 && /usr/libexec/polkit-gnome-authentication-agent-1 &
}}

=== Setting the background ===

Some things that users might take for granted in bigger desktop environments are not included by default in Openbox. One such thing is setting the desktop background. In order to place an image as the wallpaper, emerge a program like {{Package|media-gfx/feh}} or {{Package|x11-misc/nitrogen}}. <code>feh</code> is a simple image viewer that can also set the background, ''and'' it can easily be put into the autostart script. Once <code>feh</code> is emerged, issue the following command to set the background: 

feh has many other options instead of --bg-scale, which will scale the image to the screen dimensions. Consult the feh documentation.

{{Cmd|feh --bg-scale /path/to/image.jpg}}

Once you have set the background manually, a file called {{Path|.fehbg}} will be created in your home directory. This file simply contains the above command that you just entered in the terminal, and is automatically updated when you issue a different background command. Now, to set your background automatically upon login, you can add the following line to your {{Path|autostart.sh}} script: 

{{Cmd|source $HOME/.fehbg &}}

Alternatively use <code>nitrogen</code>. It will allow the user to set a folder for the background images, view thumbnails of those images, and fit, stretch, or tile them to the desktop. 

Installing <code>nitrogen</code> and getting it into the Openbox menu requires a few more steps than are readily apparent. First, <code>emerge nitrogen</code>. Second, run <code>nitrogen</code> with the backgrounds folder as argument: 

{{Cmd|nitrogen /path/to/your/backgrounds/folder}}

Third, you can set your background image, but it will not be there after you logout. Just as with <code>feh</code> , you need to restore your background by editing your {{Path|autostart.sh}} script to have the following line: 

{{Cmd|nitrogen --restore &}}

This will cause nitrogen to load automatically when you start your Openbox session, and that can lead to a slightly slower load time than using feh. 

== Programs to use with Openbox ==

The following is a list of some programs which you might want to use within your Openbox environment. While the list contains numerous terminal emulators, file managers, panels, and more, it should by no means be considered exhaustive. If none of the programs listed fit your needs, please check the appropriate categories in Portage for more options. 

=== Terminal emulators ===

*  [http://packages.gentoo.org/package/lxde-base/lxterminal LXterminal] is the default terminal emulator for LXDE. It is very lightweight, and based on VTE. While EvilVTE offers many more customisation options (including transparency), LXterminal has a graphical interface for some of the more common options (font, colors, et cetera).

*  [http://packages.gentoo.org/package/x11-terms/evilvte EvilVTE] is an extremely lightweight terminal emulator based on (you guessed it) VTE. It supports tabs, multiple encodings, as well as an easy and extensible configuration file.

* {{Package|x11-terms/mrxvt}} is a multi-tabbed rxvt clone with XFT, transparent background and CJK support. It also features session support for each tab.

* {{Package|x11-terms/aterm}} supports transparency and backwards compatibility with rxvt. It was originally designed for the AfterStep window manager, but easily integrates with other environments.

*  [http://packages.gentoo.org/package/x11-terms/eterm Eterm] is a terminal based on vt102 and designed to be a more feature-rich replacement for xterm.

*  [http://packages.gentoo.org/package/x11-terms/rxvt-unicode Rxvt-unicode] is a clone of rxvt that supports Unicode, daemons, embedded perl, and multiple fonts simultaneously.

*  [http://packages.gentoo.org/package/x11-terms/xfce4-terminal Terminal] is the VTE-based default for the Xfce desktop environment, so it does require some Xfce libraries to run. However, it is still fairly speedy, and supports transparency and is easily customised.

=== File managers ===

*  [http://packages.gentoo.org/package/x11-misc/pcmanfm PCManFM] is the lightweight filemanager from LXDE. It supports tabbed browsing, drag and drop, thumbnails for images, bookmarks, volume management, searching, and more. It also provides supports for managing the desktop background and drawing desktop icons (both optionally).

*  [http://packages.gentoo.org/package/xfce-base/thunar Thunar] is the standard file manager from Xfce. It features a bulk renamer, user-customisable actions, and an extension framework, along with many optional plugins, such as media tag editing. It depends on several Xfce libraries, but it's still slimmed down compared to other file managers like Nautilus (from GNOME), and Konqueror (from KDE).

* {{Package|gnome-base/nautilus}} is the powerful file manager from the GNOME desktop environment. It features volume management, thumbnails for images, searching, and some system configuration. As it depends on many of the GNOME libraries for proper function, it can seem a bit heavy compared to some of the other file managers.

* {{Package|app-misc/gentoo}} (no relation to this glorious Linux distribution) is a two-pane style file manager. It is incredibly lightweight, but lacks a some features now prominent in modern file managers. It should definitely be considered for older hardware, or if a barebones setup is needed.

*  [http://packages.gentoo.org/package/app-misc/emelfm2 emelFM2] is another file manager in the vein of Midnight Commander. It features a two-pane window. As with the Gentoo file manager (listed above), it is barebones and does not include many features prevalent in newer file managers. However, it also offers a few features not found in other file managers, such as a built-in commandline in a separate pane.

=== Desktop management ===

* Though [http://packages.gentoo.org/package/x11-misc/pcmanfm PCManFM] is mainly a file manager, it also gives you the option to manage the desktop background (instead of using <code>feh</code> or <code>nitrogen</code> ) and draw desktop icons.

*  [http://packages.gentoo.org/package/x11-misc/idesk iDesk] is a simple program used to draw desktop icons. It supports shadowed and anti-aliased fonts, PNG images, "snap-to-grid" placement, and changing the desktop background.

=== Panels ===


*  [http://code.google.com/p/tint2/ Tint2] is a simple, lightweight panel and taskbar. It supports color, transparency, a clock, drag and drop between virtual desktops, a system tray, and comes with a battery monitor. You can even add a button to display the applications menu from your window manager.

*  [http://packages.gentoo.org/package/x11-misc/pypanel PyPanel] is an easily customised panel written in Python and C. It features transparency, shading, tinting, location and layout configuration, font type, autohiding, application launcher, clock, and more.

*  [http://packages.gentoo.org/package/lxde-base/lxpanel LXPanel] is the default panel and taskbar from LXDE. It features a launcher, menu, clock, and a GUI-based configurator. It is feature-rich while depending on very few packages, making it a good choice for a lean system.

*  [http://packages.gentoo.org/package/xfce-base/xfce4-panel Xfce4-panel] is the default panel from the Xfce desktop environment. It supports application launchers, detachable menus, a pager, tasklist, clock, applets, and more. It does, however, require a few of the Xfce libraries which are not dependencies of some other panels.

*  [http://packages.gentoo.org/package/x11-misc/fbpanel FBpanel] is a simple, extremely lightweight panel that supports window lists, launchers, a clock, and a few other goodies. It's not the most featureful panel, and it can be cumbersome to configure, but it needs only GTK+ to run.

=== Pagers and systrays ===


* {{Package|x11-misc/netwmpager}} is an EWMH-compliant pager that integrates nicely into any of the *box environments. It is not as obtrusive, and is much more readily customizable than many of the other available pagers.

*  [http://packages.gentoo.org/package/x11-misc/bbpager BBpager] is a desktop pager that was originally written for BlackBox, but works nicely with Openbox as well. It does have some BlackBox dependencies though.

*  [http://packages.gentoo.org/package/x11-plugins/docker Docker] is the system tray that is made especially for Openbox. It has no extra dependencies, and gives you the ability to view and use tray icons for supported GTK and QT-based applications.

* {{Package|x11-misc/trayer}} is a system tray that was modified from the FBpanel code, and is often used with FVWM. One of its perks is that it supports transparency.

=== Session management ===


* {{Package|lxde-base/lxsession}} is the stripped down session manager from LXDE. It is designed to remember applications that the user was running at the last logout, and to automatically restart those programs. It also supports the HAL daemon.

*  [http://packages.gentoo.org/package/xfce-base/xfce4-session Xfce4-session] is the session manager from, you guessed it, Xfce. It is capable of saving several sessions, and provides methods for logging out, rebooting, and suspending your computer. It does, however, have many Xfce dependencies.

=== Configuration tools ===


* {{Package|x11-misc/obconf}} is a GUI application allowing to customize the Openbox window manager without manually editing {{Path|~/.config/openbox/rc.conf}}.

*  [http://packages.gentoo.org/package/lxde-base/lxappearance LXappearance] is a GTK theme and icon configurator used with LXDE. It provides a nice graphical interface for setting the theme and icons, while depending on very few extra libraries.

* {{Package|x11-themes/gtk-chtheme}} is a simple application allowing for easier switching of GTK themes and the font. Currently, it does not allow for the switching of icon themes.

* {{Package|x11-themes/gtk-theme-switch}} is another simple application that allows users to change their GTK theme.

=== Miscellaneous ===

* {{Package|app-admin/conky}} is a lightweight system monitor that can display over 250 objects, including date and time, CPU usage, memory usage, IMAP/POP3 email, top processes, hardware sensor data, and even info from the music player. It is highly customizable both in appearance and data display. We also have a [[Conky/HOWTO|Conky configuration guide]] available.

*  [http://packages.gentoo.org/package/app-editors/leafpad Leafpad] is a simple text editor. It is very lightweight, but includes features like codeset options, and the ability to undo/redo without limits.

* {{Package|media-gfx/feh}} is a simple image viewer that runs from the terminal, but it also has many other features. It can display a slideshow of images, create an index print, dynamically zoom, and set the desktop background (detailed instructions above).

*  [http://packages.gentoo.org/package/media-gfx/gpicview GPicView] is a GUI-based image viewer. Though it has more dependencies than <code>feh</code> , it is incredibly quick to load and run.

*  [http://packages.gentoo.org/package/x11-misc/slim SLiM] is the Simple Login Manager, which allows you to login to your Openbox session via a graphical interface instead of the terminal. It has very few dependencies, and supports many themes, but should not be used on machines that require remote logins.

== Openbox inside desktop environments ==

=== LXDE ===

If installing each component of a working environment sounds like a little ''too'' much customisation, but you still want the flexibility of Openbox, you may want to look into a desktop environment that uses Openbox as its default window manager. That environment is [http://www.lxde.org/ LXDE] , the Lightweight X Desktop Environment. Designed to require even fewer system resources than Xfce, it is built around Openbox. 

=== Openbox inside GNOME ===

If you already have a GNOME environment installed, you may just want to replace the Metacity window manager with Openbox. Fortunately, this is quite a simple task! You will need to fire up your favourite editor, open your {{Path|~/.xinitrc}} file, and put the following command inside it: 

{{FileBox|filename=~/.xinitrc|title=Adding an Openbox-GNOME session to .xinitrc|lang=bash|1=
exec openbox-gnome-session
}}

If you use GDM or another graphical login manager, you will see a new "GNOME/Openbox" option in your session menu. You can simply select that option instead of manually editing your {{Path|~/.xinitrc}} . 

=== Openbox inside KDE ===

Say you have KDE installed and like it, but you want more flexibility with your window management than KWin offers. You can use Openbox as your window manager inside of KDE by simply editing your {{Path|~/.xinitrc}} file, and replacing your current exec command with the following: 

{{FileBox|filename=~/.xinitrc|title=Adding an Openbox-KDE session to .xinitrc|lang=bash|1=
exec openbox-kde-session
}}

Now when you issue <code>startx</code> you will see KDE, but instead of KWin, you will have the customisability of the Openbox window manager. 

If you use KDM or another graphic login manager, you will see a new "KDE/Openbox" option in your session menu. You can simply select that option instead of manually editing your {{Path|~/.xinitrc}} . 

{{Note|This method of using Openbox with KDE has been tested with the KDE 3.x releases. While it seems highly likely that it will work with the KDE 4.x series, it has not been thoroughly tested as of yet.}}

=== Openbox inside Xfce ===

To use Xfce4 with Openbox, first start a normal Xfce session, and open up a terminal. From the terminal, issue the following command: 

{{Cmd|killall xfwm4 ; openbox & exit}}

Second, you need to exit out of your Xfce session, and make sure to tick the checkbox that says "Save session for future login." This will keep Openbox as your default window manager. Third, you will notice that you can't logout properly when using the default menu action. To fix this problem, open up your {{Path|menu.xml}} , and locate this line: 

{{File|menu.xml|exit action|<pre>
<item label="Exit">
     <action name="Exit"/>
</item>
</pre>
}}

Change it to this: 

{{File|menu.xml|new exit action|<pre>
<item label="Exit">
  <action name="Execute">
    <command>xfce4-session-logout</command>
  </action>
</item>
</pre>
}}

{{Note|With Xfce4, the root-menu provided by Xfdesktop will be used instead of the Openbox root-menu.}}

=== External resources ===

While this document will easily take users through the initial installation and customization of Openbox, it is by no means the only reference on the topic. There are several other resources that will aid in creating a perfect Openbox setup. Some of them are listed below: 

* On [http://openbox.org/ The Official Openbox website] you will find more detailed information regarding theming, creating menus (including pipe menus), autostart scripting, and much more. This site also has information regarding new releases, upgrades, and instructions on how you can contribute to development.

* The [http://urukrama.wordpress.com/openbox-guide/ Urukrama's Guide to Openbox] blog contains a plethora of information about switching GTK+ themes, setting up keybindings, desktop effects, and other programs to use in conjunction with Openbox. Though the tutorial was originally written for use with Ubuntu, everything is applicable to Gentoo (and other Linux distributions for that matter).

*  [http://www.box-look.org/ Box-Look] provides numerous themes, icons, wallpapers, fonts, and tools to be used with Openbox (as well as the other *box window managers like Fluxbox, Blackbox, PekWM, etc.)




{{Migrated|originalauthors=nathanzachary and nightmorph}}

[[Category:Window manager]]
