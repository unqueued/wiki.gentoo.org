<languages />

{{Metadata|abstract=Xorgは、ユーザにGUI環境を提供してくれる、X Windowサーバです。このガイドでは、Xorgとは何か、Xorgのインストール方法、各種設定について説明します。}}

Xorgは、簡単に操作可能なGUI環境をユーザーに提供してくれる、[[X server|X Window server]]です。このガイドでは、[[Article description::Xorgとは何か、Xorgのインストール方法、各種設定について説明します。]]

== X Window サーバとは何ですか？ ==

=== GUI vs GLI ===

平均的なユーザはコマンドを入力するというとギョッとするでしょう。Gentoo(や、Linux一般において)によって提供される自由な世界をポイントし、クリックして進んでゆくことは出来ないのでしょうか? いや、もちろんできます! Linuxは既存のインストール上にインストール可能な数々の華やかなインターフェースと環境を提供しています。 

これは新規ユーザーが遭遇する最も大きな驚きのうちの一つです、つまり、グラフィカルユーザーインターフェースはシステムの上で動く一つのアプリケーションでしかないということです。これはLinuxカーネルや他の内部システムの一部ではありません。あなたのワークステーションにグラフィカルな能力を最大限発揮させてくれるパワフルなツールです。 

規格といものは重要なように、描画、スクリーン上でのウィンドウの移動、マウスやキーボードや他の基本的で、しかし重要なものの規格がつくられ、そして"X11"や単に"X"とよく呼ばれる"X Window System"が名付けられました。これは世界中でUnix, Linux, そしてUnixライクなOSで使われています。 

アプリケーションはLinuxユーザーにGUIを動かす機能を提供し、それはX11規格としてXFree86プロジェクトのフォークであるXorg-X11を使っています。
XF43386はGPLライセンスとは互換性のないライセンスを使ってます。ので、Xorgの使用が推奨されます。公式PortageツリーはもはやXFree86の提供をしていません。

=== X.org プロジェクト ===

[http://www.x.org X.org]プロジェクトがつくられ、自由に配布可能な、X11システムのオープンソース実装を管理しています。これがオープンソースのX11ベースデスクトップ基盤です。 

Xorgは実行したいグラフィカルソフトウェアとハードウェアの間のインターフェースを提供します。にしても、Xorgは完全なネットワーク意識でもあります。つまり、アプリケーションをあるシステムで実行しつつ、それと異なるシステムで見ることが可能です。 

== インストール ==

Xrogのインストールの前に、システムの準備をする必要があります。まず、ビデオカードとインプットデバイスサポートのためにカーネルセットアップを行いましょう。それから、正しいドライバとXorgパッケージがビルドされ、インストールされるために{{Path|[[:/etc/portage/make.conf]]}}を準備しましょう。 

=== インプットドライバサポート ===

カーネル設定を変更することで event interface (<var>CONFIG_INPUT_EVDEV</var>) のサポートを有効化する必要があります。もしカーネル設定の方法がわからなければ[[Kernel/Gentoo_Kernel_Configuration_Guide|Kernel Configuration Guide]]を読んでください。 

{{KernelBox|title=カーネルで evdev を有効化する|1=
Device Drivers --->
  Input device support --->
  <*>  Event interface
}}

=== カーネルモード設定 ===

モダンなオープンソースビデオドライバはカーネルモード設定(KMS)に依存しています。KMSはちらつきの少ないグラフィカルブート、早い応答性、ビルトインフレームバッファーコンソール、コンソールからXorgへの滑らかな切り替えや他の機能を提供します。

{{Important| KMSはカーネル設定で""disable""であるべき古いフレームバッファドライバと競合します。}}

まず、KMSのためにカーネルを準備してください。このステップはどのXorgビデオドライバが使われるかにはよりません。 

{{KernelBox|title=古いフレームバッファーのサポートを無効化し、基本的なコンソール FB のサポートを有効化する|1=
Device Drivers --->
   Graphics support --->
      Frame Buffer Devices --->
         <*> Support for frame buffer devices --->
         ## (Disable all drivers, including VGA, Intel, nVidia, and ATI, except EFI-based Framebuffer Support, only if you are using UEFI)
 
    ## (Further down, enable basic console support. KMS uses this.)
    Console display driver support --->
      <*>  Framebuffer Console Support
}}

つぎに、ビデオカードに正しいKMSドライバをカーネルが使うよう設定してください。Intel、nVidiaやAMD/ATIはよくあるカードなので、下に示したカード毎のコードに従ってください。 

インテルのカードについては[[Intel#Kernel|kernel section of the Intel article]]を見てください。

nVidiaカード: 

{{KernelBox|title=nVidia の設定|1=
Device Drivers --->
   Graphics support --->
      <M/*>  Nouveau (nVidia) cards
}}

新しいAMD/ATIカード ([[ATI_FAQ|RadeonHD 2000 and up]]) については emerge {{Package|sys-kernel/linux-firmware}} を実行してください(このパッケージに{{Path|radeon}} と {{Path|amdgpu}} が含まれています; 独自の {{Package|x11-drivers/radeon-ucode}} パッケージはもはや存在しません)。これらパッケージがインストールされたら、Radeon ドライバーをカーネルのモジュールにするか、あるいは [[Radeon|Radeon の記事]] の [[Radeon#Firmware|firmware 節]] や新しい AMD グラフィックカード (GCN1.1 以上) に関する [[AMDGPU]] の記事の [[AMDGPU#Firmware|firmware 節]] に詳解されているようにカーネルを設定してください。 

{{KernelBox|title=AMD/ATI Radeon の設定|1=
## (Setup the kernel to use the radeon-ucode firmware)
Device Drivers --->
   Generic Driver Options --->
   [*]  Include in-kernel firmware blobs in kernel binary
  ## # ATI card specific, (see Radeon page for details which firmware files to include)
   (radeon/<CARD-MODEL>.bin ...)
  ## # Specify the root directory
   (/lib/firmware/) External firmware blobs to build into the kernel binary
 
## (Enable Radeon KMS support)
Device Drivers --->
   Graphics support --->
   <M/*>    ATI Radeon
   [*]      Enable modesetting on radeon by default
   [ ]      Enable userspace modesetting on radeon (DEPRECATED)
}}

{{KernelBox|title=AMDGPU の設定|1=
## (Setup the kernel to use the amdgpu firmware)
Device Drivers --->
   Generic Driver Options --->
   [*]  Include in-kernel firmware blobs in kernel binary
  ## # AMD card specific, (see AMDGPU page for details which firmware files to include)
   (amdgpu/<CARD-MODEL>.bin ...)
  ## # Specify the root directory
   (/lib/firmware/) External firmware blobs to build into the kernel binary
 
## (Enable Radeon KMS support)
Device Drivers --->
   Graphics support --->
   <M/*> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
   <M/*> AMD GPU
         [ /*] Enable amdgpu support for SI parts
         [ /*] Enable amdgpu support for CIK parts 
         [*]   Enable AMD powerplay component  
         ACP (Audio CoProcessor) Configuration  ---> 
             [*] Enable AMD Audio CoProcessor IP support (CONFIG_DRM_AMD_ACP)
         Display Engine Configuration  --->
             [*] AMD DC - Enable new display engine
             [ /*] DC support for Polaris and older ASICs
             [ /*] AMD FBC - Enable Frame Buffer Compression
             [ /*] DCN 1.0 Raven family
   <M/*> HSA kernel driver for AMD GPU devices
}}

{{Note|古いカード (X1900シリーズ以下)は追加のファームウェアやファームウェア設定を必要としません。これらについては、単にDirect Rendering Manager (DRM)やATI Radeon modesettingを有効化してください。}}

{{Note|Linuxカーネル >{{=}} 3.9 はデフォルトで含んでいるため''Enable modesetting on radeon by default''項目をもっていません。新カーネルにこのオプションがなくても心配しないでください。}}

{{Note|Linux kernel >{{=}} 4.15 は AMDGPU の動作に必要な ''Display Core'' (DC) を含んでいます。この新しいドライバーは GCN5.0 ''Vega'' や DCN1.0 ''Raven Ridge'' (APU) 向けに書かれたものですが、GCN1.1 ''Southern Islands'' 以降の古い Radeon グラフィックカードに対してもさらなる機能を追加します。この古い Radeon カードに対する追加サポートは標準化される予定ですので、新しいカーネルでこのオプションが無くなっていても心配はいりません。}}

カーネル設定を出て、[[Kernel/Rebuild|カーネル再ビルド、再起動]]しましょう。

今、KMSはセットアップされ、次のセクションで{{Path|[[:/etc/portage/make.conf]]}}の準備をします。

=== make.conf ===

カーネルは準備され、{{Path|[[:/etc/portage/make.conf]]}}ファイル中の二つの変数をXorgインストール前に設定する必要があります。 

最初の変数は<var>[[:/etc/portage/make.conf#VIDEO_CARDS|VIDEO_CARDS]]</var>です。これはあなたの使おうとしているビデオカード用のビデオドライバを設定するために使われます。最もよくある設定は、nVidiaカードには<code>nouveau</code>、ATIカードには<code>radeon</code>です。これらは活発に開発され、よくサポートされたオープンソースドライバです。新しい AMD ビデオカード(Southern Islands 以降)を持っている場合、新しい amdgpu オープンソースドライバーを試すことになるでしょう。詳細については [[AMDGPU]] の記事を参照してください。

{{Note| nVidiaとAMD/ATIそれぞれのプロプライエタリドライバ、<code>nvidia</code>と<code>fglrx</code>も試すかも知れません。しかしながら、プロプライエタリドライバの設定はこのガイドの範囲を超えています。[[NVidia/nvidia-drivers|Gentoo Linux nVidia Guide]]と[[ATI_FAQ|Gentoo Linux ATI FAQ]]を読んでください。どちらを使うべきかわからない場合はそれらのガイドを参照してください。}}

<code>intel</code>ドライバはよくあるIntel統合グラフィクスチップセット搭載のデスクトップやラップトップに使われるでしょう。 

{{Note| スペース区切りの場合、<var>VIDEO_CARDS</var> は2つ以上の値をもちます。}}

2つ目の変数は[[:/etc/portage/make.conf#INPUT_DEVICES|<var>INPUT_DEVICES</var>]]で、これはインプットデバイスにどのドライバがビルドされるか決定するために使われます。 

[https://gitweb.gentoo.org/repo/gentoo.git/commit/?id=d3ac878318dd96a88190a13b5ac7572ec0c56380 make.defaults] では [[Libinput]] がデフォルトのインプットデバイスドライバーになっています。

現在何が有効になっているか確認するには、以下を実行します:

{{Cmd|portageq envvar INPUT_DEVICES}}

ラップトップ用の Synaptics タッチパッドのような代替インプットデバイスが必要な場合には、それらを {{Path|[[:/etc/portage/make.conf]]}} ファイルの <var>INPUT_DEVICES</var> に忘れずに追加してください。 

{{CodeBox|title=make.conf のサンプル項目|lang=bash|1=
## (For mouse, keyboard, and Synaptics touchpad support)
INPUT_DEVICES="libinput synaptics"
## (For nVidia cards)
VIDEO_CARDS="nouveau"
## (For AMD/ATI cards)
VIDEO_CARDS="radeon"
}}

もし提案された設定がうまく動かなかったら{{Package|x11-base/xorg-drivers}}パッケージをemergeしましょう(次のステップを見てください)。有効なオプションを全て選び、どれをシステムに適用するか選んでください。これはキーボード、マウス、Synapticsタッチパッド、Radeonビデオカードのシステムの例です。 

{{Emerge|x11-base/xorg-drivers|params+=--verbose|output=<pre>
 
These are the packages that would be merged, in order:
 
Calculating dependencies... done!
[ebuild   R   ]  x11-base/xorg-drivers-1.9  INPUT_DEVICES="evdev synaptics
-acecad -aiptek -elographics% -fpit% -joystick -keyboard -mouse -penmount -tslib
-virtualbox -vmmouse -void -wacom"
VIDEO_CARDS="radeon -apm -ark -ast -chips -cirrus -dummy -epson -fbdev -fglrx
(-geode) -glint -i128 (-i740) (-impact) -intel -mach64 -mga -neomagic (-newport)
-nouveau -nv -nvidia -r128 -rendition -s3 -s3virge -savage -siliconmotion -sis
-sisusb (-sunbw2) (-suncg14) (-suncg3) (-suncg6) (-sunffb) (-sunleo) (-suntcx)
-tdfx -tga -trident -tseng -v4l -vesa -via -virtualbox -vmware (-voodoo) (-xgi)"
0 kB
</pre>
}}

必須変数の設定後に、Xorgはインストールされます。

{{Emerge|x11-base/xorg-server}}

{{Note| {{Package|x11-base/xorg-x11}} メタパッケージが、より軽量な{{Package|x11-base/xorg-server}}のかわりにインストール可能です。 機能の面から{{Package|x11-base/xorg-x11}}と{{Package|x11-base/xorg-server}}は同等ですが、{{Package|x11-base/xorg-x11}}はシステムが必要としないであろうたくさんのパッケージを導入します。追加のパッケージは多言語[[fonts]]の巨大な詰め合わせ を含みます。これらはX11フレームワークの動作に必要ではありません。}}

インストールが終了したら、続ける前に、いくつか環境変数が最初期化のために必要です。このコマンドでプロファイルをsourceしましょう:

{{RootCmd
|env-update
|source /etc/profile
}}

=== NVidia ユーザー ===

NVidiaユーザーには、選択したグラフィクスカードのために有効な{{Path|xorg.conf}}ファイルを生成するために{{c|nvidia-xconfig}}を実行することが有用でしょう。このステップなしには{{Path|xorg.conf}}ファイルは下に示すように手動で生成される必要があります。{{Path|xorg.conf}}ファイルなしには{{c|startx}}の際に"No screens found"エラーに遭遇してしまうかも知れません。

さらに、NVidiaドライバは再起動の後にのみ有効です。従って、{{c|nvidia-xconfig}}実行後にシステムの再起動を忘れないでください。

{{RootCmd|nvidia-xconfig}}

OpenGLレンダラをソフトウェアレンダラの代わりにハードウェアにすることが推奨されています。

{{RootCmd|eselect opengl set nvidia}}

== 設定 ==

[[X server]]はXorgの設定ファイルを手動で編集することなく、そのまま使えるよう設計されています。マウスや、キーボードやディスプレイといったデバイスは検出され、設定される"べき"なのです。

[[#Using_startx|startxの使用]]を設定ファイルの編集なしに試してみてください。Xorgはスタートしないか、なにか問題が発生するでしょう。そしたら、Xorgの手動設定が必要です。これは次のセクションで説明されます。 

{{Note|もしカーネルに変更を加えたら、新しくビルドされたカーネルを使うために、{{c|startx}}の''前''に'''再起動'''することを忘れないでください。カーネルが新しいバージョンになったら、ブートローダの設定ファイルの更新も必要でしょう。}}

=== xorg.conf.d ディレクトリー ===

{{Important|{{Path|[[Xorg.conf#xorg.conf.d.2C_xorg.conf|xorg.conf.d]]}}中の設定ファイルは最後の頼みの綱であるべきです。可能な限り、Xorgをどんな特殊な設定なしに実行することが望ましいです。}}

Xorgの設定ファイルのほとんどは{{Path|[[Xorg.conf#xorg.conf.d.2C_xorg.conf|/etc/X11/xorg.conf.d/]]}}にあります。それぞれのファイルは一意な名前と{{Path|.conf}}で終わります。Xorg設定ディレクトリのなかのファイルの名前は英数字順に読み込まれます。たとえば、{{Path|10-evdev.conf}}は{{Path|20-synaptics.conf}}の前に読み込まれます。{{Path|a-evdev.conf}}は{{Path|b-synaptics.conf}}などの前に読み込まれるでしょう。このディレクトリ中のファイルはナンバリングされている必要はないですが、そのようにしておくと整理された状態を維持しやすいでしょう。それは欠陥のある設定ファイルをデバッグするときに便利です。

{{Note|Xorgは{{Path|/usr/share/doc/xorg-server-${version}/xorg.conf.example.bz2}}に設定例を提供しています。これらは{{Path|[[Xorg.conf#xorg.conf.d.2C_xorg.conf|/etc/X11/xorg.conf.d/]]}}にカスタム設定ファイルをつくるのに使われるでしょう。例は十分にコメントがなされていますが、文法についてのドキュメントが必要ならば{{c|man xorg.conf}}がいつでも使えます。他の例はこのセクションの終わりの[[#Other_resources|Other resources]]にあります。}}

=== startx を用いる ===

[[X server]]起動のために{{c|startx}}を試しましょう。{{c|startx}}は({{Package|x11-apps/xinit}}によってインストールされた)スクリプトで、''X セッション''を実行します。Xセッションは[[X server]]を起動し、その上にグラフィカルアプリケーションを起動します。それはどのアプリケーションを起動するか、以下の論理に従って決定します: 

* もし、ファイル{{Path|.xinitrc}}がホームディレクトリに存在するのなら、そこに列挙されたコマンドを実行します。

*  そうでなければ、{{Path|/etc/env.d/90xsession}}ファイルの変数<var>XSESSION</var>の値を読み、それに応じて関連したセッションを実行します。<var>XSESSION</var>の値は{{Path|/etc/X11/Sessions/}}に使用可能です。システムワイドなデフォルトセッションを設定するには:

: {{RootCmd|echo XSESSION{{=}}"Xfce4" > /etc/env.d/90xsession}}

: これは{{Path|90xsession}}ファイルをつくり、デフォルトXセッションを[[Xfce/Guide|Xfce]]に設定します。{{c|env-update}}を{{Path|90xsession}}に変更を加えたあと実行することを覚えておきましょう。

{{Cmd|startx}}

もしウィンドウマネージャがインストールされていなければ、黒い画面が現れるでしょう。これは何かがおかしいというサインでもあるので、 {{Package|x11-wm/twm}}と{{Package|x11-terms/xterm}}はXをテストするためのみにインストール出来ます。 

プログラミングがインストールされたら、{{c|startx}}を再び実行しましょう。{{c|xterm}}ウィンドウが現われ、[[X server]]が動いているか検証するのが簡単になります。結果に満足したら、テストパッケージを削除するには{{Package|x11-wm/twm}}と{{Package|x11-terms/xterm}}をunmergeしましょう。これらはデスクトップ環境を構築するのに必要ではありません。

(開始すべき)セッションは{{c|startx}}の引数として与えられることも可能です:

{{Cmd|startx /usr/bin/startfluxbox}}

二重ダッシュを頭につけることで、X11サーバーオプションを渡すことも可能です。

{{Cmd|startx -- vt7}}

=== X の設定を調整する ===

=== 画面の解像度を設定する ===

もし解像度がおかしいようであれば、{{Path|[[Xorg.conf#xorg.conf.d.2C_xorg.conf|xorg.conf.d]]}}の二つのセクションを調べる必要があります。まず、[[X server]]が実行する解像度設定を列挙している''Screen''セクションがあるはずです。このセクションは解像度全てを列挙しているわけではないでしょう。その場合、Xorgは次のセクション''Monitor''の情報に基づいて解像度を推定します。 

さあ、解像度を変更しましょう。{{Path|/etc/X11/xorg.conf.d/40-monitor.conf}}からの次の例では、[[X server]]がデフォルトで1440x900で開始するよう<code>PreferredMode</code>を追加します。<code>Device</code>の<code>Option</code>セクションは{{c|xrandr}}の実行によって得られるモニタ名前(<code>DVI-0</code>)に一致しなければなりません。{{c|xrandr}}をインストール({{c|emerge xrandr}})し、情報を得ましょう。モニター名後の引数(<code>Device</code>セクション中)は<code>Monitor</code>セクションの中の<code>Identifier</code>に一致する必要があります。 

{{FileBox|filename=/etc/X11/xorg.conf.d/40-monitor.conf|1=
Section "Device"
  Identifier  "RadeonHD 4550"
  Option      "Monitor-DVI-0" "DVI screen"
EndSection
Section "Monitor"
  Identifier  "DVI screen"
  Option      "PreferredMode" "1440x900"
EndSection
}}

Xを実行({{c|startx}})して設定通りの解像度か確かめましょう。

=== マルチディスプレイ ===

2つ以上のモニターは{{Path|[[Xorg.conf#xorg.conf.d.2C_xorg.conf|/etc/X11/xorg.conf.d/]]}}中に規定されます。それぞれのモニターに一意な識別子を与え、それからもうひとつのモニターに対しての''右''や''上''といった物理的位置を列挙します。次の例はVGAモニターを右側スクリーンとして、DVIとVGAモニターの設定方法を示します。 

{{FileBox|filename=/etc/X11/xorg.conf.d/40-monitor.conf|1=
Section "Device"
  Identifier "RadeonHD 4550"
  Option     "Monitor-DVI-0" "DVI screen"
  Option     "Monitor-VGA-0" "VGA screen"
EndSection
Section "Monitor"
  Identifier "DVI screen"
EndSection
Section "Monitor"
  Identifier "VGA screen"
  Option     "RightOf" "DVI screen"
EndSection
}}

=== {{Anchor|Configuring_the_keyboard}}キーボードの設定 ===

Xに多言語キーボードを使わせたい場合は、{{Path|[[Xorg.conf#xorg.conf.d.2C_xorg.conf|/etc/X11/xorg.conf.d/]]}}中に適切な設定ファイルをつくりましょう。この例はチェコ語キーボードレイアウトについて示します。 

{{FileBox|filename=/etc/X11/xorg.conf.d/30-keyboard.conf|1=
Section "InputClass"
  Identifier "keyboard-all"
  Driver "evdev"
  Option "XkbLayout" "us,cz"
  Option "XkbModel" "logitech_g15"
  Option "XkbRules" "xorg"
  Option "XkbOptions" "grp:alt_shift_toggle,grp:switch,grp_led:scroll,compose:rwin,terminate:ctrl_alt_bksp"
  Option "XkbVariant" ",qwerty"
  MatchIsKeyboard "on"
EndSection
}}

キーボードレイアウトの切り替え方法については、[[Keyboard_layout_switching#X11|Keyboard layout switching]]記事を見てください。

"terminate"コマンド(<code>terminate:ctrl_alt_bksp</code>)は{{Key|Ctrl}}+{{Key|Alt}}+{{Key|Backspace}}キー割り当てによってXセッションをキルすることが出来ます。これは、しかし、Xをみっともなく終了させます。これはユーザーにとって避けたいことでしょう。これはプログラミングが画面全体をフリーズさせてしまった時、Xorg環境を設定、調整したい時に便利です。この方法でデスクトップを終了するときには気をつけてください。大半のプログラムはこの方法での終了を好みません。全部ではないにせよ、いくつかのディスクに保存されていない情報("open documents"に保存された情報)は失われるでしょう。

==== 仕上げ ====

{{c|startx}}を実行し、結果に満足しましょう。おめでとうございます。あなたは今や(うまくいけば)動作するXorgをもっています! 次のステップでは[[KDE]], [[GNOME]], や [[Xfce]]のようなデスクトップ環境あるいは便利なウィンドウマネージャをインストールしましょう。これらデスクトップ環境のインストール情報はこのwikiで見つかるでしょう。

== 参照 ==

* [[Wayland]] - Linuxのための次世代のウィンドウプロトコル。
* [[Security Handbook/Securing services#X|X (Security Handbook)]] - Xサーバーを堅牢に保つためのセキュリティハンドブック。

== 外部の情報 ==

=== 設定ファイルの作成と編集 ===

{{c|man xorg.conf}}と{{c|man evdev}}が素早く、しかし完全な、これら設定ファイルに使われている文法について教えてくれるでしょう。Xorg設定ファイルを編集しているときは、これらをターミナル上で開いたままにしておきましょう! 

{{Path|/etc/X11/}}中の設定ファイルを編集するにあたって、多くのオンラインドキュメントがあります。ここにはそのほんの一部しか列挙できません。検索エンジンを使い探してみましょう。

== その他の情報 ==

様々なグラフィカルデスクトップ環境やアプリケーションの設定とインストールについての情報は我々のドキュメンテーションの[[Category:Desktop|Gentoo desktop resources]]セクションで見つかります。 

xorg-server 1.9 以降へアップグレードするときには、 [[X_server/upgrade|migration guide]]を忘れずに読んでください。 

彼らの他のドキュメントに加え、X.orgはたくさんの[http://www.x.org/wiki/FAQ FAQs] を彼らのウェブサイトで提供しています。

{{Migrated|originalauthors={{Dev|SwifT}}, {{Dev|nightmorph}}}}
[[Category:X.Org]]
