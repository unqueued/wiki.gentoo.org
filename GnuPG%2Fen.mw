<languages />

{{Dated|date=March 3rd, 2015}}
{{InfoBox stack
|{{InfoBox homepage|https://gnupg.org/|header=true}}
|{{InfoBox wikipedia|GNU_Privacy_Guard|text=Wikipedia}}
}}

{{Metadata|abstract=This small guide will teach Gentoo Linux users the basics of using GnuPG; a tool for secure communication.}}

This small guide will teach Gentoo Linux users the basics of using GnuPG; a tool for secure communication.

== Introduction ==

=== What readers will get from this guide ===

This guide assumes the reader is familiar with public-key cryptography, encryption, and digital signatures. If this is not the case take a look at the [http://www.gnupg.org/documentation/guides.html official GnuPG handbook], specifically the second chapter, and then come back to this article. 

This guide provides instructions to Gentoo users on how to install GnuPG, create a key pair, add keys to a keyring, submit a public key to a key server, how to sign, encrypt, verify or decode messages both sent and received. Readers will also learn how to encrypt files in order to prevent others from reading the content of the messages.

== Installation ==

=== USE flags ===

{{USEflag|package=app-crypt/gnupg|desc=Optional USE flags for {{Package|app-crypt/gnupg}}:
|bzip2
|doc
|ldap
|mta
|nls
|readline
|smartcard
|static
|tools+++Install extra tools.
|usb
}}

=== Emerge ===

{{Emerge|app-crypt/gnupg}}

=== Other software ===

At a very basic level GnuPG must be emerged. Many applications today have some sort of support for PGP, so having <code>crypt</code> as a USE variable is a good idea. When desiring an email client capable of using GnuPG any of the following options are well suited:
* PinePGP ({{Package|mail-client/pinepgp}}); 
* [[Mutt]] ({{Package|mail-client/mutt}}) — A small but very powerful text-based mail client; 
* [[Thunderbird]] ({{Package|mail-client/thunderbird}}) — Mozilla's e-mail solution; 
* [[Evolution]] ({{Package|mail-client/evolution}}) — A GNOME Microsoft Outlook work alike; 
* [[KMail]] ({{Package|kde-base/kmail}}) — KDE's mail client. 

Installing Kgpg ({{Package|kde-base/kgpg}}) might be of interest if using the KDE desktop enviroment. This small program allows for the generation key pairs, importing of keys from ASCII files, signing imported keys, exporting keys, among a few other features.

== Usage ==

=== Generating a key and adding keys to a public keyring ===

==== Creating a key ====

To create a key, use the <tt>gpg --gen-key</tt> command. The first time it is ran, it will create some directories essential to the correct operation and implementation of GnuPG; run it again to create the keys: 

{{Cmd|gpg --gen-key|output=<pre>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.
  
Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
   Your selection? 1
</pre>
}}

Here the type of key can be chosen. Most users will go for the default RSA and RSA. Next is the key size — remember that bigger is better but do not use a size larger than 2048 with DSA/ElGamal keys. Generally 2048 is more than enough for normal email communication.

After size comes the expiration date. Here smaller is better, but most users can go for a key that never expires, or for an expiration date of around 2 or 3 years. 

{{CodeBox|title=Choosing key size|<nowiki>
RSA keypair will have 1024 bits.
RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048) 2048
Requested keysize is 2048 bits       
Please specify how long the key should be valid.
         0 = key does not expire
 <n>= key expires in n days
 <n>w = key expires in n weeks
 <n>m = key expires in n months
 <n>y = key expires in n years
 Key is valid for? (0) 0
Key does not expire at all
</nowiki>}}

Now it is time to enter some personal information about the key's user. When sending a public key to other users it is important to an real email address here (as opposed to a fake e-mail address). 

{{CodeBox|title=Entering user information|
Is this correct (y/n)? y
                          
GnuPG needs to construct a user ID to identify your key.
  
Real name: Larry the cow
Email address: Larry@TheBarn.someplace.flick
Comment: Gentoo's own Larry the cow.
You selected this USER-ID:
"Larry the cow (Gentoo's own Larry the cow) <Larry@TheBarn.someplace.flick>"
  
Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O 
You need a Passphrase to protect your secret key.    
  
Enter passphrase: 
}}

Now enter a key passphrase twice. It is a good idea to use a strong password. If someone is able to get a hold of the associated private key and cracks the password they will be able to impersonate the user by sending signed messages just as the user would. The malicious user could dupe the victims contacts into believing the e-mails or messages were sent by the victim. This could cause major problems.

Next, GnuPG will generate a key. Moving the mouse, browsing the web, or having streaming audio in the background will help speed up the process because will help GnuPG generate random data thereby increasing the security of the key pair.

==== Generating a revocation certificate ====

{{Important|This part is very important and must done ''NOW''.}}

After creating the keys a revocation certificate should be created. Doing this allows the user to revoke the key in case something nasty happens (think of a malicious user gaining control of the key/passphrase). 

{{Cmd|gpg --list-keys|output=<pre>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) <john@nowhere.someplace.flick>
sub  2048g/96D6CDAD 2002-12-08
</pre>}}

{{Cmd|gpg --output revoke.asc --gen-revoke 75447B14|output=<pre>
sec  1024D/75447B14 2002-12-08   Larry the cow (Gentoo's own Larry the cow) <Larry@TheBarn.someplace.flick>
  
Create a revocation certificate for this key? y
Please select the reason for the revocation:   
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision? 1
Enter an optional description; end it with an empty line:
> Someone cracked me and got my key and passphrase
>
Reason for revocation: Key has been compromised
Someone cracked me and got my key and passphrase
Is this okay? y
  
You need a passphrase to unlock the secret key for
user: "Larry the cow (Gentoo's own Larry the cow) <Larry@TheBarn.someplace.flick>"
1024-bit DSA key, ID 75447B14, created 2002-12-08
  
ASCII armored output forced.
Revocation certificate created.
  
Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
</pre>
}}

The <tt>gpg --list-keys</tt> command lists keys in the public keyring. It may be used to see the ID of the key so that a revocation certificate can be created. It is a good idea to copy the entire {{Path|.gnupg}} directory and the revocation certificate (in ASCII armor - {{Path|revoke.asc}}) to some secure medium (a CD-R or a USB drive stored in a safe location). Remember that the {{Path|revoke.asc}} file can be used to revoke the keys and make them unusable in the future. 

{{Note|If a user has several email addresses they would like to use with the key, the user can run <tt>gpg --edit-key <USER_ID></tt> then use the <tt>adduid</tt> command. It will ask the user for the name, email, and comment of the second ID to be used.}}

==== Exporting keys ====

To export a key, type <tt>gpg --armor --output larry.asc --export Larry@TheBarn.someplace.flick</tt>. You can almost always use the key ID or something that identifies the key (in this example an email address was used). Larry now has a {{Path|larry.asc}} that he can send his friends, or place on his web page so that others can communicate safely with him. 

==== Importing keys ====

To add files to a public keyring the following steps should be taken:
# Import it the key;
# Check the key fingerprint;
# After verifying the fingerprint, validate it.

{{Note|Be careful when verifying keys. This is one of the weak points of public key cryptography.}}

Now we will be adding Luis Pinto's (a friend of mine) public key to our public keyring. After giving him a call and asking him for his key fingerprint, I compare the fingerprint with the output of the <kbd>fpr</kbd> command. As the key is authentic, I add it to the public keyring. In this particular case, Luis's key will expire in 2003-12-01 so I am asked if I want my signature on his key to expire at the same time. 

{{Cmd|gpg --import luis.asc|output=<pre>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>}}

{{Cmd|gpg --list-keys|output=<pre>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) <john@nowhere.someplace.flick>
sub  2048g/96D6CDAD 2002-12-08
  
pub  1024D/462405BB 2002-12-01 Luis Pinto <lmpinto@student.dei.uc.pt>
uid                            Luis Pinto <lmpinto@dei.uc.pt>
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]
</pre>}}

{{Cmd|gpg --edit-key lmpinto@dei.uc.pt|output=<pre>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.
  
gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto <lmpinto@dei.uc.pt>
(2). Luis Pinto <lmpinto@student.dei.uc.pt>
</pre>}}

{{Cmd|fpr|prompt=Command> |output=<pre>
pub  1024D/462405BB 2002-12-01 Luis Pinto <lmpinto@dei.uc.pt>
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
</pre>}}

{{Cmd|sign|prompt=Command> |output=<pre>
Really sign all user IDs? y
                           
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
  
     Luis Pinto <lmpinto@dei.uc.pt>
     Luis Pinto <lmpinto@student.dei.uc.pt>
  
This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) Y
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".
  
   (0) I will not answer. (default)
   (1) I have not checked at all.
   (2) I have done casual checking.
   (3) I have done very careful checking.
  
   Your selection? 3
Are you really sure that you want to sign this key
with your key: "John Doe (The Real John Doe) <john@nowhere.someplace.flick>"
  
I have checked this key very carefully.
  
Really sign? y
              
You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) <john@nowhere.someplace.flick>"
1024-bit DSA key, ID 75447B14, created 2002-12-08
</pre>}}

{{Cmd|check|prompt=Command> |output=<pre>
uid  Luis Pinto <lmpinto@dei.uc.pt>
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) <john@nowhere.someplace.flick>
uid  Luis Pinto <lmpinto@student.dei.uc.pt>
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) <john@nowhere.someplace.flick>
</pre>
}}

=== Exchanging keys with key servers ===

==== Sending keys to key servers ====

Now that you have your key, it is probably a good idea to send it to the world key server. There are a lot of keyservers in the world and most of them exchange keys between them. Here we are going to send John Doe's key to the keys.gnupg.net server. This uses HTTP, so if you need to use a proxy for HTTP traffic don't forget to set it (<kbd>export http_proxy=<nowiki>http://proxy_host:port/</nowiki></kbd>). The command for sending the key is: <kbd>gpg --keyserver keys.gnupg.net --keyserver-options honor-http-proxy --send-key 75447B14</kbd> where ''<tt>75447B14</tt>'' is the key ID. If you don't need a HTTP proxy you can remove the ''<tt>--keyserver-options honor-http-proxy</tt>'' option. 

Sending other people's keys that Larry has signed signed to the key server is also a good idea. We could send Luis Pinto's key to the key server. This way someone who trusts Larry's key can use the signature that he has placed there to trust Luis's key. 

==== Getting keys from key servers ====

Now we are going to search for Gustavo Felisberto's key and add it to the keyring of Larry the cow (just in case you did not notice Gustavo Felisberto is the author this guide :)). 

{{Cmd|gpg --keyserver keys.gnupg.net --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net|output=<pre>
gpg: searching for "humpback@felisberto.net" from hkp server keys.gnupg.net
(1)	Gustavo Felisberto <humpback@gmail.com>
	Gustavo Felisberto <humpback@gentoo.org>
	Gustavo Felisberto <humpback@gentoopt.org>
	Gustavo Felisberto <gustavo@felisberto.net>
	Gustavo Felisberto <humpback@gentoo-pt.org>
	Gustavo Felisberto <humpback@felisberto.net>
	Gustavo Felisberto <gustavo@student.dei.uc.pt>
	Gustavo Felisberto <humpback@student.dec.uc.pt>
	Gustavo Felisberto (apt-get install anarchy) <humpback@felisberto.net>
	  1024 bit DSA key B9F2D52A, created: 2002-12-06
(2)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key 26471D8F, created: 2001-09-05
(3)	Gustavo Felisberto <humpback@altavista.net>
	  1024 bit DSA key E97E0B46, created: 1999-08-04, expires: 2000-08-04 (expired)
(4)	Gustavo A.S.R. Felisberto <humpback@altavista.net>
	  1024 bit DSA key B59AB043, created: 1998-12-10
(5)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key 39EB133D, created: 1998-08-27
(6)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key AE02AF87, created: 1998-06-15
Enter number(s), N)ext, or Q)uit > 1
gpg: requesting key B9F2D52A from hkp server keys.gnupg.net
gpg: key B9F2D52A: public key "Gustavo Felisberto <humpback@felisberto.net>" imported
gpg: 3 marginal(s) needed, 1 complete(s) needed, classic trust model
gpg: depth: 0  valid:   4  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 4u
gpg: next trustdb check due at 2015-06-28
gpg: Total number processed: 1
gpg:               imported: 1
</pre>
}}

From the server response it is possible to see few keys have been submitted to the key server, however only <code>B9F2D52A</code> is used. Now Larry the cow can get the key and sign it if he trusts it.

=== Using a GPG agent ===

==== What is a GPG agent? ====

Sometimes working with certain applications requires the use of a GPG key very frequently, which means that a passphrase must be frequently entered. In the past many applications supported a passphrase caching mechanism. This would make life easier for users because passphrases were automatically entered. However, this disallowed sharing this cache across programs (how secure would that be?) and forced applications to reinvent the wheel over and over again. 

A GPG agent is a separate application that GPG uses to cache the passphrase in a standard and secure way. It allows applications to use GPG concurrently: if the passphrase is entered while working in one application, the other application can work with GPG without reiterating the request for the passphrase to unlock the key — if the GPG Agent is configured to allow so, of course. 

Gentoo provides a few GPG agent applications. The {{Package|app-crypt/gnupg}} package contains what could be considered the reference one, and will be the primary choice used in this article.

==== Configuring gpg-agent and pinentry ====

GnuPG includes <tt>gpg-agent</tt>. Pinentry ({{Package|app-crypt/pinentry}}) is a helper application that <tt>gpg-agent</tt> uses to request the passphrase in a graphical window. It comes in three flavors: it can popup a window using the GTK+, QT, or curses libraries (depending on the USE flags set in {{Path|/etc/portage/make.conf}}). 

If {{Package|app-crypt/pinentry}} was installed with more than one popup window type, it is possible to choose between the windows with the <tt>eselect pinentry</tt> command: 

{{RootCmd|eselect pinentry list|output=
<pre>
Available pinentry implementations:
  [1]   pinentry-gtk-2 *
  [2]   pinentry-curses
  [3]   pinentry-qt4
</pre>
}}

{{RootCmd|eselect pinentry set 1}}

Now create a file called {{Path|~/.gnupg/gpg-agent.conf}} and enter the following lines which define the default timeout of the passphrase (e.g. 30 minutes) and the application to be called for when the passphrase should be retrieved the first time (e.g. the GTK+ version of Pinentry). 

{{FileBox|filename=~/.gnupg/gpg-agent.conf|
pinentry-program /usr/bin/pinentry-gtk-2
no-grab
default-cache-ttl 1800
}}

Now configure GnuPG to use an agent when appropriate. Edit {{Path|~/.gnupg/gpg.conf}} and add the following line: 

{{FileBox|filename=~/.gnupg/gpg.conf|title=Configuring GnuPG to use a GPG agent|
use-agent
}}

Now your system is (almost) set to use the GPG agent.

==== Automatically starting the GPG agent ====

If you use KDE as your graphical environment, edit {{Path|/etc/kde/startup/agent-startup.sh}} and uncomment the following (system-wide) or {{Path|~/.kde4/env/gpg-agent.sh}} (local user) and add the following command to it to have KDE automatically starting the GPG agent: 

{{FileBox|filename=/etc/kde/startup/agent-startup.ksh|title=Make KDE automatically start the GPG agent|lang=bash|1=
eval "$(gpg-agent --daemon)"
}}

Additionally, uncomment the following lines in {{Path|/etc/kde/shutdown/agent-shutdown.sh}} (system-wide) or add it to {{Path|~/.kde4/shutdown/gpg-agent.sh}} (local user): 

{{FileBox|filename=/etc/kde/shutdown/agent-shutdown.sh|title=Make KDE shut down the GPG agent|lang=bash|1=
if [ -n "${GPG_AGENT_INFO}" ]; then
  kill $(echo ${GPG_AGENT_INFO} {{!}} cut -d':' -f 2) >/dev/null 2>&1
fi
}}

When using a desktop environment other than KDE, put that line (the same as mentioned above) in the {{Path|~/.xinitrc}} file (if the <tt>startx</tt> command is used to invoke the GUI) or the {{Path|~/.xsession}} file (if XDM, GDM, KDM are used).

=== Working with documents ===

==== Encrypting and signing ====

Lets say that Larry has a file he wishes to send Luis. Larry can encrypt it, sign it, or encrypt it and sign it. Encrypting means that only Luis will be able to open it. The signature tells Luis that it was really Larry who created the file. 

The next three commands will do just that: encrypt, sign and encrypt/sign. 

{{Cmd|gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt
|gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign
|gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign}}

This will create binary files. When wishing to create ASCII files, just add a <code>--clearsign</code> option to the beginning of the command. 

==== Decrypting and verifying signatures ====

Suppose that Larry has received a file which is encrypted to him. The command used to decrypt it is <tt>gpg --output document --decrypt encrypted_doc.gpg</tt>. This will decrypt the document and verify the signature (if there is one). 

==== Encrypting and decrypting without keys ====

It is possible to encrypt files using passwords instead of keys. The password itself will function ''as'' the key — it will be used as a ''symmetric cypher''. The file can be encrypted using <tt>gpg --symmetric</tt>; decrypting uses the same command as mentioned previously. 

{{Cmd|gpg --output document.gpg --symmetric document}}

GnuPG will ask for a passphrase and a passphrase verification.

==== Advanced features ====

There are some nice advanced features in GnuPG. To find them, open the {{Path|~/.gnupg/gpg.conf}} file. 

{{FileBox|filename=~/.gnupg/gpg.conf|
#keyserver x-hkp://keys.gnupg.net
#keyserver-options auto-key-retrieve include-disabled include-revoked
}}

Search for the above two lines and uncomment them. With this modification made, any time GnuPG needs to check a signature and does not find the public key on the local keyring it will contact the key server at [http://keys.gnupg.net:11371/ keys.gnupg.net] in attempt to fetch the public key from from the server. 

Another nice command is <tt>gpg --refresh-keys</tt>. This will contact the key server defined in the configuration file and refresh the public keys in the local key ring from there. It is capable of searching for revoked keys, new IDs, and new signatures on keys. It is a wise idea run this command once or twice a month; if a user revokes their key this can provide a notification the key can no longer be trusted.

== GnuPG interfaces ==

==== About email signatures ====

95% of the time GnuPG is used with email by signing/encrypting outgoing messages or reading signed/encrypted messages.

There are two ways two sign/encrypt a email with GnuPG, the old way and the new way. In the old way messages would appear in plain text, with no possible formatting and attached files would be unsigned/unencrypted. Here is an example of a message signed the old way: 

{{CodeBox|title=A plain text signature|<nowiki>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1
  
Test message
  
-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.8 for non-commercial use
  
iQA/AwUBP8461jMX0745gR7AEQIEOwCg011GbufXO3ED3FkLWXmfzg7xm1cAoJD0
0EU3Kd2EKNCqataEqM5qjpPs
=LchZ
-----END PGP SIGNATURE-----
</nowiki>
}}

Messages this way are not good in today's world, where there are nice GUIs and email readers that understand HTML. 

To solve this an addition to the MIME (Multipurpose Internet Mail Extensions) was created. This adds a field to the email that tells the mail reader that the full content of the message is signed and/or encrypted. The problem with this is that not all mail readers support such features. Some even mess up the content (Microsoft's Outlook is famous for not working with this). 

==== Kgpg ====

Kgpg ({{Package|kde-base/kmail}}) is a wonderful GUI for GnuPG. The main screen provides an area to paste text to signed or encrypted, the reverse is also true; ASCII armored text to be decrypted can also be entered. 

From within the main screen text decrypted (a password is needed), files encrypted, and pasted text can be signed.

==== Seahorse ====

Seahorse ({{Package|app-crypt/seahorse}}) aims to be a GnuPG GUI interface for the Gnome desktop. The software has been evolving fast, but it still lacks many important features that can be found in Kgpg or the command line version. 

==== KMail ====

If the <code>crypt</code> USE flag is set, KMail will be compiled with gpg support, and will be able to encrypt and decrypt inline PGP mails automatically as well as encrypting OpenPGP/MIME mails. To decrypt OpenPGP/MIME mails as well (most users want) a GPG agent must be running. 

To verify if KMail is properly configured navigate to {{Path|Settings → Configure KMail → Security → Crypto Backends}}. A GpgME-based backend should be listed and the OpenPGP checkbox should be checked. If it is listed but grayed out, click on {{Path|Rescan}}. If the GpgME-based backend remains grayed out, KMail is not working properly. 

When unable to get KMail to behave, see the [https://userbase.kde.org/KMail/PGP_MIME official KMail PGP page] for more information. 

==== Claws-Mail ====

This mail reader is ''very'' fast with big mailboxes, has all the nice features one wants in mail readers and works well with GPG. The only problem is that it does not work with the old PGP signatures, so when receiving those kind of mails the signatures must be hand-checked. 

To use a GPG key with Claws-Mail navigate to {{Path|account configuration → privacy tab}}. Once there choose which key to use, most users should go with the default key.

== Final thoughts and credits ==

=== Some problems ===

I had some problems with photos in keys. Check the version you are using. If you have GnuPG 1.2.1-r1 and up you are probably OK, older versions may have problems. Also most keyservers don't like keys with photos, so you are better if you don't add photos. 

The latest versions of GnuPG do not seem to work with the <tt>gpg --send-keys</tt> that was used to send all keys in a keyring to the public server. 

=== What is not here ===

<tt>gpg</tt> is a very complex tool, it lets user do much more than what has been covered here. This document is for users who are new to GnuPG. For more information check out the [http://www.gnupg.org official GnuPG website]. 

This article does not cover tools such as <tt>pgp4pine</tt>, <tt>gpgpine</tt>, <tt>evolution</tt>, and or Windows GPG tools.

=== Credits ===

John Michael Ashley's [http://www.gnupg.org GnuPG Handbook] it is a very good book for beginners. 

Swift (Sven Vermeulen) for pushing me to re-write this. 

Everyone in the #gentoo-doc team you guys rock. 

Tiago Serra for getting me back to the privacy track.


[[Category:Server and Security]] {{Migrated|originalauthors=Gustavo Felisberto, John P. Davis, Sven Vermeulen, nightmorph}}
