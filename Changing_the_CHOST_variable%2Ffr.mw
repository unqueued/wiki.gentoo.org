<languages />

Ce document explique comment changer la variable  [[CHOST]]  d'un système existant.

== Introduction ==

Changer la variable CHOST est un problème délicat qui peut sérieusement mettre en péril votre système. Alors, pourquoi faire un guide sur ce sujet ? 

Il existe des situations où changer CHOST est inévitable, par exemple quand vous voulez monte glibc vers la version  2.4 qui ne supporte que nptl et que vous vous rendez compte que votre CHOST est i386, ce qui rend l'utilisation de nptl impossible. Dans un tel cas, vous n'avez guère d'options et changer CHOST en est une. 

Même si vous suivez ces instructions, des problèmes peuvent surgir, c'est pourquoi vous devez les lire et les exécuter très prudemment. Dans cet exemple la variable CHOST sera changée de i386 en i686, si votre changement est différent, bien-sûr, adaptez les commandes en conséquence. 

== Changer la variable CHOST  ==

=== Compiler les paquets ===

Pour vous lancer dans le changement de la variable CHOST, éditez le fichier {{Path|/etc/portage/make.conf}} et changer la valeur '''CHOST''' selon votre besoin. Ensuite, recompilez les paquets suivants dans l'ordre indiqué : 

{{Emerge|binutils gcc glibc}}

{{Important|Surtout soyez conscient que des mises à jour majeures de  gcc concomitantes à un changement de la variable CHOST (par exemple commencer avec  gcc 3.3, CHOST i386 et commuter vers  gcc 4.1, CHOST i686) peut induire de graves effets de bord. Bien qu'il ne soit pas impossible de le faire, il est difficile de prédire quels problèmes potentiels peuvent surgir et de les documenter dans ce guide. En conséquence, s'il vous plaît, faites une chose à la fois, par exemple, mettez d'abord gcc à jour en suivant notre  [http://www.gentoo.org//doc/fr/gcc-upgrading.xml guide de mise à jour de gcc ] et changez la variable CHOST après. Si vous êtes sur un système avce CHOST{{=}}i386, vous devrez masquer  glibc 2.4 (ou plus récent) pendant la mise à jour de gcc car il ne peut être utilisé avec  i386 et démasquez le une fois que vous avez terminé. }}

=== Vérifier que tout fonctionne  ===

Maintenant, il est temps de vous assurer que  les réglages de <code>gcc-config</code> et de <code>binutils-config</code> sont sains et que vous n'avez aucun résidu dans  {{Path|/etc/env.d/}} . 

La sortie de  <code>gcc-config</code> et de  <code>binutils-config</code> devrait ressembler à ce qui suit (peut différer selon votre version de gcc et de chost, dans ce cas, il s'agit de gcc 4.1.1 et de i686) : 

{{RootCmd|gcc-config -l|output=<pre>
 [1] i686-pc-linux-gnu-4.1.1 *</pre>}}

{{RootCmd|gcc-config -c|output=<pre>
i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|binutils-config -l|output=<pre>
 [1] i686-pc-linux-gnu-2.16.1 *
# binutils-config -c
i686-pc-linux-gnu-2.16.1
</pre>
}}

Ensuite, vérifiez s'il y a des références à l'ancienne variable CHOST dans {{Path|/etc/env.d/}} : 

{{RootCmd|cd /etc/env.d/
|grep 386 *|output=<pre>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>
}}

{{Note|Ceci ne va pas forcément vous arriver, mais dans ce cas ,05gcc-i386-pc-linux-gnu contient des  réferences à l'ancienne variable CHOST. Les choses peuvent apparaître différentes sur votre système selon le changement que vous êtes en train de faire à CHOST, ou très bien se passer. Le nom peut aussi être  05gcc-votre_nouvelle_CHOST-pc-linux-gnu.}}

Avant d'effacer le fichier, vérifions que des fichiers avec la nouvelle variable CHOST existent : 

{{RootCmd|grep 686 *|output=<pre>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>
}}

Cela paraît bon car il doit toujours n'y avoir qu'un seul fichier pour <code>gcc</code> dans {{Path|/etc/env.d/}} (05gcc dans notre exemple). Supprimons donc celui avec les mauvaises références : 

{{RootCmd|rm 05gcc-i386-pc-linux-gnu}}

Cela est aussi vrai pour  <code>binutils</code> - s'il existe un fichier supplémentaire, cherchez celui qui est obsolète et supprimez le. Ensuite vérifiez votre {{Path|/etc/env.d/binutils/}}.  

{{RootCmd|cd /etc/env.d/binutils/
|ls -la|output=<pre>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1
</pre>}}

{{RootCmd|cat config-i686-pc-linux-gnu|output=<pre>
CURRENT=2.16.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-2.16.1|output=<pre>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>
}}

Celui-ci paraît bon, ces deux fichiers devraient réellement être présents. Il est temps de se déplacer dans le répertoire gcc. 

{{RootCmd|cd /etc/env.d/gcc|output=<pre>
# ls -la
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1
</pre>}}

{{RootCmd|cat config|output=<pre>
CURRENT=i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat config-i386-pc-linux-gnu|output=<pre>
CURRENT=i386-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-4.1.1|output=<pre>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>
}}

{{Path|config}} et {{Path|i686-pc-linux-gnu-4.1.1}} sont corrects, mais {{Path|config-i386-pc-linux-gnu}} est un autre résidu qui doit être supprimé. 

{{Note|Répétons-le, le nom du fichier contenant des références à une version obsolète de gcc peut avoir un nom différent, par exemple,  config-i686-pc-linux-gnu, si vous changez vers i686. Il est important que vous identifiez le fichier par son contenu, pas seulement par son nom.}}

{{RootCmd|rm config-i386-pc-linux-gnu}}

Maintenant exécutez les commandes suivantes pour mettre votre environnement à jour. 

{{RootCmd|env-update && source /etc/profile}}

Puis vérifiez que tout est correctement réglé : 

{{RootCmd|grep -r 386 /etc/env.d/}}

Si vous trouvez encore quelque chose, vous avez probablement manqué quelques fichiers, essayez de les repérer avant d'aller plus loin. 

=== Terminer le changement ===

Maintenant, il faut réinstaller <code>libtool</code> et run <code>/usr/share/gcc-data/$CHOST/<gcc-version>/fix_libtool_files.sh</code> . Assurez-vous d'utiliser la version de ''gcc'' correcte  (votre version courante est  4.1.1  et l'ancienne architecture, i386 dans ce cas). Remplacez $CHOST avec votre nouvelle CHOST, et <gcc-version> par votre version de  gcc . Cet exemple suppose que la variable CHOST est i686. 

{{Emerge|libtool}}

{{RootCmd|/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu}}

Vous pouvez recompiler tous vos paquets : 

{{RootCmd|emerge -e world}}

Maintenant, bien qu'en théorie cela ne devrait pas être nécessaire, mais nous ne pouvons le garantir à 100%, recompilez votre cible ''world''. J'ai entendu dire que quelques paquets au moins, nécessitaient cette re-compilation ; aussi faites ceci : 

{{Emerge|python}}

Tous les paquets utilisant ''perl'' installent le répertoire CHOST et par conséquent nécessitent une réinstallation. Dans le cas où vous n'auriez pas installé   <code>qfile</code> , vous devez installer <code>app-portage/portage-utils</code> d'abord. 

{{Emerge|portage-utils}}

{{RootCmd|emerge -av1 `qfile /usr/lib/perl* -Cq {{!}} sort -u`}}

Si vous rencontrez d'autres paquets qui nécessitent la recompilation, faites le savoir à l'auteur de ce document. 

=== Problèmes courants ===

When upgrading from gcc 3.3 to 4.1 at the same time as changing the CHOST (please don't do that anyway), a couple of users reported broken packages that need recompiling, such as groff and courier: 

{{Code|Error messsage|<pre>
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
</pre>
}}

This happens because during the upgrade, the CHOST doesn't exactly match CTARGET and the compiler assumes cross-compiling. As a consequence, LDPATH isn't inserted into {{Path|ld.so.conf}} , resulting in this error. 

Please see our [http://www.gentoo.org//doc/en/gcc-upgrading.xml gcc upgrade guide] for what needs to be rebuilt after a gcc upgrade. 

In some rare cases, this can break old versions of python, too. This may be fixed by adding {{Path|/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6}} (change accordingly to your old chost and gcc version) to {{Path|/etc/ld.so.conf}} , running <code>ldconfig</code> and then <code>emerge libstdc++-v3</code> . However, as you can see, you really should avoid running into this problem - don't change CHOST and your gcc version at the same time. 

=== Feedback ===

That should be all, feedback (both if it worked, failed or other problems were encountered) is welcome, please send an email to {{Mail|amne@gentoo.org}}or post to [http://forums.gentoo.org/viewtopic-t-494147.html this forums thread] . Much in this howto comes from vapier, thanks for your help! 

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Wernfried Haas
* Mike Frysinger
* Chris White
