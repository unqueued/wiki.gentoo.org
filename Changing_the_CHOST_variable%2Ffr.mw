<languages />

{{Metadata|abstract=Ce document montre comment changer la variable CHOST sur un système existant.}}

This document explains how to change the <var>[[CHOST]]</var> variable of an existing system.

== Introduction ==

Changing the <var>CHOST</var> is a big issue that can seriously screw up a system - so why is there a guide for that if it can cause that much havoc? 

There are certain situations where changing the <var>CHOST</var> variable is inevitable, e.g. when upgrading to glibc 2.4 which only supports [[wikipedia:Native_POSIX_Thread_Library|NTPL]] and the user finds out that the current <var>CHOST</var> is i386, which makes it impossible to use NTPL. In this case, there are not a lot of options, and changing <var>CHOST</var> is one of them. 

Even after following these instructions, problems may arise, so please make sure to read and execute them very carefully. In this example the <var>CHOST</var> variable will be changed from i386 to i686. Please change the commands according to the specific situation.

== Changer la variable CHOST  ==

=== Updating make.conf ===

To start out with the <var>CHOST</var> variable change, edit the {{Path|/etc/portage/make.conf}} file and add/change the <var>CHOST</var> value to suit the requirements.

{{FileBox|filename=/etc/portage/make.conf|1=
CHOST="i686-pc-linux-gnu"
}}

Please note that if you are planning to use another value of CHOST than the profile default, you may need to update the ''CHOST_${ABI}'' variable as well. You can query the current value of these variable via ''portageq'' tool:

{{Cmd|1=portageq envvar ABI|output=x86}}
{{Cmd|1=portageq envvar CHOST_x86|output=i686-pc-linux-gnu}}

If this value is equal to your CHOST, you're good. Otherwise, you should override it as well, e.g.:

{{FileBox|filename=/etc/portage/make.conf|1=
CHOST_x86="i686-pc-linux-gnu"
}}

=== Compiler les paquets ===

{{Important|It is generally a good idea to rebuild the packages '''to the same versions''' as before the CHOST switch, i.e. avoiding combining upgrades with it. If you have multiple slots installed, either uninstall extraneous slots or rebuild all of them. If you can't do that, please upgrade the packages first (with old CHOST). While it may not be impossible to do so, it is hard to predict which potential problems may arise and almost impossible to document them in this guide.}}

{{Tip|On a system with <var>CHOST</var> set to an i386 value, mask glibc 2.4 (or newer) during the gcc upgrade as it cannot be used with i386. Unmask it once the change has been performed completely.}}

Rebuild the following packages in this order:

{{Emerge|sys-devel/binutils|params+=--oneshot}}

{{Note|It may be necessary to run {{c|binutils-config}} before compiling gcc.}}

{{Emerge|sys-devel/gcc|params+=--oneshot}}
{{Emerge|sys-libs/glibc|params+=--oneshot}}

=== Vérifier que tout fonctionne  ===

Now it is time to make sure that the {{c|gcc-config}} and {{c|binutils-config}} settings are sane and that there are no leftovers in {{Path|/etc/env.d/}}. 

The output of {{c|gcc-config}} and {{c|binutils-config}} should look like the following:

{{Note|The output may, or even will differ according to the gcc version and <var>CHOST</var> settings. The example below uses gcc 4.1.1 on i686.}} 

{{RootCmd|gcc-config -l|output=<pre>
 [1] i686-pc-linux-gnu-4.1.1 *</pre>}}

{{RootCmd|gcc-config -c|output=<pre>
i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|binutils-config -l|output=<pre>
 [1] i686-pc-linux-gnu-2.16.1 *
# binutils-config -c
i686-pc-linux-gnu-2.16.1
</pre>
}}

Next, check to see if there are references to the old <var>CHOST</var> variable in {{Path|/etc/env.d/}}: 

{{RootCmd|cd /etc/env.d/
|grep 386 *|output=<pre>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>
}}

{{Note|This may not happen in every case, but in this case {{Path|05gcc-i386-pc-linux-gnu}} contains references to the old <var>CHOST</var> value. Things may look differently on each system depending on which <var>CHOST</var> value the system is changing to/from. In some cases, no references are left at all. The name may also be {{Path|05gcc-''new_CHOST''-pc-linux-gnu}}.}}

Before deleting the file, let's check for files with the updated <var>CHOST</var> value: 

{{RootCmd|grep 686 *|output=<pre>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>
}}

This one looks good as there should always be only one file for <code>gcc</code> in {{Path|/etc/env.d/}} ({{Path|05gcc}} in this example), so delete the one with the wrong references: 

{{RootCmd|rm 05gcc-i386-pc-linux-gnu}}

The same also applies to {{Path|binutils}} - if there's an extra one, see which is the outdated one and delete it. Next, check the contents of {{Path|/etc/env.d/binutils/}}:

{{RootCmd|cd /etc/env.d/binutils/
|ls -la|output=<pre>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1
</pre>}}

{{RootCmd|cat config-i686-pc-linux-gnu|output=<pre>
CURRENT=2.16.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-2.16.1|output=<pre>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>
}}

That one looks good, those two files should be there. Time to move on to the {{Path|gcc/}} directory. 

{{RootCmd|cd /etc/env.d/gcc|output=<pre>
# ls -la
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1
</pre>}}

{{RootCmd|cat config|output=<pre>
CURRENT=i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat config-i386-pc-linux-gnu|output=<pre>
CURRENT=i386-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-4.1.1|output=<pre>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>
}}

{{Path|config}} et {{Path|i686-pc-linux-gnu-4.1.1}} sont corrects, mais {{Path|config-i386-pc-linux-gnu}} est un autre résidu qui doit être supprimé. 

{{Note|Again, the name of the file containing references to an outdated gcc version may have a different name, e.g. {{Path|config-i686-pc-linux-gnu}} even though the system is being changed to (in this case) i686. It is important to identify the file on its content, not only the name.}}

{{RootCmd|rm config-i386-pc-linux-gnu}}

Now run the following commands to update the environment: 

{{RootCmd|env-update && source /etc/profile}}

Next, verify everything is fixed: 

{{RootCmd|grep -r 386 /etc/env.d/}}

If there are still files found, try to track it down before going on.

=== Terminer le changement ===

Now it is necessary to re-emerge {{Package|sys-devel/libtool}} and run {{c|fix_libtool_files.sh}} which can be found in {{Path|/usr/share/gcc-data/''$CHOST''/''<gcc-version>''/}}. Make sure to use the correct gcc version (the current one, 4.1.1 here) and pass the old architecture (i386 here) as argument. Replace <code>$CHOST</code> with the new <var>CHOST</var> value, and <code><gcc-version></code> with the gcc version. This example assumes a <var>CHOST</var> value applicable to i686. 

{{Emerge|libtool|params+=--oneshot}}

{{RootCmd|/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu}}

It is now possible to rebuild all the packages: 

{{RootCmd|emerge -e world}}

In theory, it should not be necessary to do so, but it cannot be 100% guaranteed that this is actually the case. Alternatively, you can manually rebuild all the known problematic packages:
* multilib packages using CHOST prefixing or header wrapping,
* Perl, Python and other tools that store configured compiler path.

{{Emerge|params+=--oneshot|/usr/bin/i386-pc-linux-gnu-* /usr/include/i386-pc-linux-gnu /usr/lib/llvm/*/bin/i386-pc-linux-gnu-* dev-lang/perl dev-lang/python}}

Note that you may need to remove paths that do not apply to your system from the above invocation.

When encountering other packages that need recompiling, please let us know through the [[Talk:Changing_the_CHOST_variable|discussion page]] of this guide.

=== Problèmes courants ===

When upgrading from gcc 3.3 to 4.1 at the same time as changing the <var>CHOST</var> variable (please don't do that anyway), a couple of users reported broken packages that need recompiling, such as {{Package|sys-apps/groff}} and {{Package|mail-mta/courier}}: 

{{CodeBox|title=Error messsage|1=
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
}}

This happens because during the upgrade, the <var>CHOST</var> variable doesn't exactly match the <var>CTARGET</var> variable value, making the compiler assume that the system is using cross-compiling. As a consequence, <var>LDPATH</var> isn't inserted into {{Path|ld.so.conf}}, resulting in this error. 

Please see the [[Upgrading GCC|GCC upgrade guide]] for what needs to be rebuilt after a GCC upgrade. 

In some rare cases, this can break old versions of python, too. This may be fixed by adding {{Path|/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6}} (change accordingly to the old <var>CHOST</var> and gcc version) to {{Path|/etc/ld.so.conf}}, running {{c|ldconfig}} and then {{c|emerge libstdc++-v3}}. However, as can be seen, this situation needs to be avoided - don't change <var>CHOST</var> and gcc at the same time.

=== Retour d'expérience ===

That should be all, feedback (both if it worked, failed or other problems were encountered) is welcome, please use the [[Talk:Changing_the_CHOST_variable|discussion page]] or post to [https://forums.gentoo.org/viewtopic-t-494147.html this forum thread]. Much in this guide comes from vapier, thanks for your help!

{{Migrated|originalauthors=Wernfried Haas, {{Dev|vapier}}, Chris White}}
