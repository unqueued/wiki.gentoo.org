<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Это руководство описывает установку и использование cron.

== Основные понятия cron ==

=== Что делает cron? ===

Cron - это программа-демон, запускающая запланированные задания, основываясь на результате работы команды <code>crontab</code>. Она выполняет эти задания просыпаясь каждую минуту и проверяя, есть ли какие-нибудь задания cron (cron-jobs) для запуска в каком-либо из файлов заданий crontab пользователя. 

{{Note/ru|Заметьте что ''crontab'' - это как имя списка заданий cron, так и имя команды для редактирования этого списка.}}

=== Cron на практике ===

Существует несколько реализаций программы cron, доступных через Portage. Все они предлагают сходный интерфейс, а именно, использование команды <code>crontab</code> или ей подобных. Также есть родственная утилита, называемая Anacron, которая предназначена для работы с cron-ом на системах, которые не работают непрерывно. 

Также следует заметить, что не все доступные пакеты cron зависят от <code>sys-process/cronbase</code> . Этот пакет не зависит технически от какого-либо из пакетов cron, но он предлагает сходную с cron-ом функциональность, которую оценят многие из пользователей. 

Перед тем, как начать работу с cron-ом, Вам следует выбрать какую из его реализаций Вы хотите использовать. Для Вашего удобства, ниже мы собрали информацию о каждой из них.

== Какая программа cron Вам подходит? ==

=== vixie cron ===

Vixie cron - это полноценная реализация программы cron, основанная на SysV cron. Каждый пользователь имеет свой собственный файл заданий crontab, и ему разрешается указывать переменные среды внутри этого файла. В отличие от других видов cron, он также предлагает поддержку SELinux и PAM. Он поддерживает меньшее количество архитектур чем Dcron, но большее по сравнению с Fcron. 

Особенности <code>sys-process/vixie-cron</code> : 

* Поддержка SELinux
* Поддержка PAM {{Path|/etc/security/limits.conf}} 
* Установка переменных среды в файлах заданий crontabs (PATH, SHELL, HOME, etc.)
* Каждый пользователь может иметь свой собственный файл заданий crontab; доступ контролируется файлами {{Path|cron.allow}} и {{Path|cron.deny}} 

=== cronie ===
Cronie (sys-process/cronie) это ответвление от vixie-cron сделанное дистрибутивом [https://fedorahosted.org/cronie/wiki fedora]. Так как это ответвление, у данной программы имеется тот же набор возможностей, что и у изначального vixie-cron. Дополнительно, cronie имеет реализацию anacron, которую можно включить с помощью USE флага ''anacron''.

=== dcron (Dillon's Cron) ===

Dcron aims to be a simple, elegant and secure implementation of cron. It does not allow the specification of environment variables in crontabs and all cron-jobs are run from {{Path|/bin/sh}} . Like vixie-cron, each user has his own crontab. 

Особенности <code>sys-process/dcron</code> : 

* Быстрый, простой и свободный от излишних функций
* Доступ к файлу <code>crontab</code> ограничен группой cron, т.е. он не полагается на внешние средства

=== fcron ===

Fcron aims at replacing vixie-cron and anacron. It is designed to work on systems that are not continuously running and it is packed with extra features. It has job startup constraints, job serialization controls, the ability to assign nice values to jobs and the ability to schedule jobs to run at system startup. See [http://fcron.free.fr/ fcron's home page] for more information. 

Особенности <code>sys-process/fcron</code> : 

* Разработан для работы на системах, которые не работают непрерывно, т.е. он может запустить задание после перезапуска, если оно было пропущено
* Установка переменных среды и множества других параметров в файлах заданий crontab
* Каждый пользователь может иметь свой собственный файл заданий crontab, доступ к которому контролируется файлами cron.allow и cron.deny
* Улучшенный синтаксис crontab с поддержкой множества других особенностей

=== bcron ===

Bcron is a new cron system designed with secure operations in mind. To do this, the system is divided into several separate programs, each responsible for a separate task, with strictly controlled communications between them. The user interface is a drop-in replacement for similar systems (such as vixie-cron), but the internals differ greatly. For more information, see the bcron homepage at [http://untroubled.org/bcron http://untroubled.org/bcron] . 

Особенности <code>sys-process/bcron</code> : 

* Легкая замена vixie-cron
* Ориентированность на множество процессов
* Нативная поддержка перехода на летнее время

=== anacron ===

Anacron - это не демон cron, это то, что работает в объединении с ним. Он выполняет команды по интервалам, указанным по дням, и не предполагает непрерывную работу системы; он запускает работы, которые были пропущены, пока система была отключена. Anacron обычно полагается на демон cron, чтобы запускаться каждый день. 

== Использование cron ==

=== Установка ===

Выберите реализацию cron, которая Вам больше нравится, и установите ее командой emerge. 

{{Emerge|dcron}}

{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

Опционально, если Вы не устанавливали Fcron, Вы можете также пожелать установить Anacron. 

{{Emerge|anacron}}

{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== Системный файл crontab ===

The post install messages from some of these cron packages tell you to run <code>crontab /etc/crontab</code> . The {{Path|/etc/crontab}} file is your ''system crontab'' . A cron installation can use it in conjunction with <code>sys-process/cronbase</code> to run the scripts in {{Path|/etc/cron.{daily,hourly,weekly,monthly}}} . Note that only vixie-cron and cronie schedule jobs in {{Path|/etc/crontab}} automatically. Dcron and fcron users will need to run <code>crontab /etc/crontab</code> every time they make changes to {{Path|/etc/crontab}} . 

Пожалуйста, возьмите на заметку, что задания, запланированные в системном crontab могут не появиться в списке заданий cron, отображаемом командой <code>crontab -l</code> . 

Of course, you can choose not to use any system crontab at all. If you chose dcron or fcron, do ''not'' run <code>crontab /etc/crontab</code> . If you chose vixie-cron, cronie or bcron, you should comment all lines in {{Path|/etc/crontab}} . 

{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Предоставление доступа к cron проверенным пользователям ===

If you want users other than root to have access to the cron daemon, you'll want to read this section, otherwise, you can proceed to the next section, [[#Scheduling_cron-jobs|Scheduling cron-jobs]]. 

{{Note/ru|Предоставление другим пользователям доступа к crontab не позволяет им запускать задания cron в качестве администратора. Если Вы хотите, чтобы пользователь смог редактировать файл crontab учетной записи root, Вам следует рассмотреть использование <code>sudo</code> . Пожалуйста, прочтите наше [http://www.gentoo.org//doc/ru/sudo-guide.xml Руководство по использованию Sudo в Gentoo] для дальнейших подробностей.}}

Не имеет значения какой из пакетов cron Вы используете, если Вы хотите разрешить пользователю использование crontab, он сперва должен принадлежать к группе cron. В качестве примера, если Вы хотите добавить пользователя ''wepy'' в группу cron, Вы можете запустить: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/ru|При добавлении пользователя в группу cron, убедитесь что пользователь вышел и снова вошел в систему, чтобы изменения в группе возымели эффект.}}

If you're using '''dcron''' , that's all you have to do to give a user access to crontab. Dcron users may proceed to the next section [[#Scheduling_cron-jobs|Scheduling cron-jobs]], all others will want to keep reading. 

If you're using '''fcron''' , you'll want to edit {{Path|/etc/fcron/fcron.deny}} and {{Path|/etc/fcron/fcron.allow}} . The most secure way is to first deny everyone in {{Path|/etc/fcron/fcron.deny}} , and then explicitly allow users in {{Path|/etc/fcron/fcron.allow}} . 

{{Important|If neither {{Path|/etc/fcron/fcron.allow}} nor {{Path|/etc/fcron/fcron.deny}} exist, all users in the cron group will be allowed to use crontab . fcron comes with a default {{Path|fcron.allow}} which '''allows all users''' in the cron group access to fcrontab.}}

{{Code/ru|Разрешения в fcron.deny|<pre>
all
</pre>
}}

Теперь, допустим у нас есть пользователь ''wepy'', которому необходимо управлять его собственными заданиями cron. Мы можем добавить его к {{Path|/etc/fcron/fcron.allow}}, как показано ниже: 

{{Code/ru|Разрешения в fcron.allow|<pre>
wepy
</pre>
}}

If you chose '''vixie-cron''' or '''cronie''', you'll probably just want to edit {{Path|/etc/cron.allow}} . 

{{Important|It is important to note that if only {{Path|/etc/cron.allow}} exists, then only the cron group users listed there will have access. Otherwise, if only an empty {{Path|/etc/cron.deny}} exists, then all cron group users will be allowed! Do not leave an empty {{Path|/etc/cron.deny}} if you have no {{Path|/etc/cron.allow}} .}}

Например, если Вы хотите разрешить доступ пользователю ''wepy'', Вам нужно добавить его в {{Path|/etc/cron.allow}} как показано ниже: 

{{Code/ru|Разрешения в /etc/cron.allow|<pre>
wepy
</pre>
}}

=== Планирование заданий cron ===

Процесс редактирования файлов crontab различен для каждого пакета, но все они поддерживают один и тот же простой набор команд: добавление и замещение файлов crontab, редактирование и удаление файлов crontab, и перечисление заданий cron в этих файлах. Следующий список показывает как можно запустить эти команды для каждого из пакетов. 

{| class="wikitable" style="text-align: left;" 
|- 
! Version
! Edit crontab
! Remove crontab
! New crontab
! List cron-jobs
|- 
| dcron
| <code>crontab -e</code>
| <code>crontab -d ''[user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|- 
| fcron
| <code>fcrontab -e</code>
| <code>fcrontab -r ''[user]'' </code>
| <code>fcrontab ''file'' </code>
| <code>fcrontab -l</code>
|- 
| vixie-cron, cronie & bcron
| <code>crontab -e</code>
| <code>crontab -r ''-u [user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|-
|}

{{Note/ru|Если не указано ни одного аргумента при использовании команды удаления, она удаляет файл crontab текущего пользователя.}}

{{Note/ru|Fcron также имеет символьную ссылку с <code>crontab</code> на <code>fcrontab</code>.}}

Хотя, перед тем как мы сможем использовать какие-либо из этих команд, Вам сперва нужно понять работу самого crontab. В каждой строке файла crontab нужно указать пять полей, связанных со временем выполнения заданий в следующем порядке: минуты (0-59), часы (0-23), дни месяца (1-31), месяцы (1-12), и дни недели (0-7, Понедельник - 1, Воскресенье - 0 и 7). Дни недели и месяцы могут быть указаны трехбуквенными сокращениями, например mon,tue,jan,feb, и т.д. Каждое поле также может указывать диапазон значений (напр. 1-5 или mon-fri), список значений, разделенный запятыми (напр. 1,2,3 или mon,tue,wed) или диапазон значений с ''шагом'' (напр. 1-6/2 как 1,3,5). 

Звучит немного запутанно, но на нескольких примерах Вы убедитесь, что это не так сложно, как кажется. 

{{Code/ru|Примеры|<pre>
## # Запускать /bin/false каждую минуту круглый год
*     *     *     *     *        /bin/false
  
## # Запускать /bin/false в 1:35 в mon,tue,wed (понедельник, вторник, среду) и 4-й день каждого месяца
35    1     4     *     mon-wed  /bin/false
  
## # Запускать /bin/true в 22:25 на 2-е Марта
25    22    2     3     *        /bin/true
  
## # Запускать /bin/false в 2:00 каждый Понедельник, Среду и Пятницу
0     2     *     *     1-5/2    /bin/false
</pre>
}}

{{Note/ru|Заметьте, что Вы указали определенные дни недели и дни месяца перед тем, как их сгруппировать. Если Вы укажете * только для одной категории, другие возьмут приоритет, в то время как * для обоих просто означает каждый день.}}

Чтобы протестировать то, что мы только что изучили, давайте разберем по шагам фактический ввод нескольких заданий cron. Для начала, создайте файл, названный {{Path|crons.cron}} и приведите его к следующему виду: 

{{RootCmd|nano crons.cron|output=<pre>
## #Минуты  Часы  Дни   Месяцы  Дни недели
10     3      1      1       *       /bin/echo "Мне действительно не нравится cron"
30     16     *      1,2     *       /bin/echo "Мне нравится cron немного"
*      *      *      1-12/2  *       /bin/echo "Мне нравится cron в самом деле"
</pre>
}}

Теперь мы можем добавить этот crontab в систему с помощью команды ''Новый crontab'' из таблицы выше. 

{{RootCmd|crontab crons.cron}}


{{Note/ru|На самом деле, Вы не увидите результата работы этих echo-команд, если только Вы не используете перенаправление.}}

Чтобы проверить запланированные задачи cron, мы используем соответственную команду ''Перечислить cron-jobs'' из таблицы выше. 

{{RootCmd|crontab -l}}

Вы должны увидеть список, напоминающий {{Path|crons.cron}} . Если этого не произошло, возможно, Вы использовали неверную команду для ввода нового файла crontab. 

Этот файл заданий crontab должен выводить "Мне нравится cron в самом деле" каждую минуту каждый час каждого дня каждого второго месяца. Очевидно, Вам следует это делать только если Вы любите cron в самом деле. Этот crontab также выведет "Мне нравится cron немного" в 16:30 каждый день в Январе и Феврале. Он также будет выводить "Мне действительно не нравится cron" в 3:10 1-го Января. 

If you are using anacron, you should keep reading this section. Otherwise, proceed to the next section on [[#Editing_crontabs|Editing crontabs]] . 

Пользователи Anacron, возможно, захотят отредактировать {{Path|/etc/anacrontab}} . Этот файл имеет четыре поля: количество дней перед каждым запуском, задержка в минутах после которой он запускает задания, имя задания, и команда для запуска. 

For example, to have it run <code>echo "I like anacron"</code> every 5 days, 10 minutes after anacron is started, you would have: 

{{Code/ru|/etc/anacrontab|<pre>
5 10 wasting-time /bin/echo "Мне нравится anacron"
</pre>
}}

Anacron завершается после того, как сделаны все задания, перечисленные в файле anacrontab. Поэтому, если мы хотим, чтобы он проверял эти задания каждый день, нам потребуется использовать cron. Инструкции в конце следующего раздела покажут как это сделать.

=== Редактирование crontabs ===

Все же, давайте будем реалистами; Вы не хотите, чтобы система сообщала Вам как сильно Вы любите cron каждую минуту. Как шаг вперед, давайте удалим этот crontab, используя соответствующую команду ''Удалить crontab'' из таблицы выше. Мы также перечислим задания cron после этого, чтобы убедиться что оно работает. 

{{RootCmd|crontab -d
|crontab -l}}

Вы должны увидеть ''no cron jobs'' в качестве результата работы команды <code>crontab -l</code> . Если Вы видите перечисленные задания, это значит, что мы не смогли удалить crontab, и что Вам придется удостовериться, что Вы использовали правильную команду ''Удалить'' из своего пакета cron. 

Now that we have a clean state, let's put something useful into the '''root''' crontab. Most people will want to run <code>updatedb</code> on a weekly basis to make sure that <code>mlocate</code> works properly. To add that to your crontab, let's first edit {{Path|crons.cron}} again so that it looks like the following: 

{{Code/ru|Настоящий crontab|<pre>
22 2 * * 1    /usr/bin/updatedb
</pre>
}}

Это заставит cron запускать updatedb в 2:22 A.M. утром в понедельник каждую неделю. Теперь, вы должны ввести этот crontab с помощью команды ''Новый crontab'' из таблицы выше, и проверить список снова. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Теперь, давайте предположим, что вы также хотите добавить команду <code>emerge --sync</code> к Вашему ежедневному расписанию. Вы можете сделать это сперва отредактировав файл {{Path|crons.cron}} и затем используя команду <code>crontab crons.cron</code> так, как мы делали раньше, или Вы можете использовать соответствующую команду ''Редактировать crontab'' из таблицы выше. Это предоставляет Вам способ редактировать пользовательские crontab на месте, без зависимости от внешних файлов, наподобие {{Path|crons.cron}} . 

{{RootCmd|crontab -e}}

Это должно открыть Ваш пользовательский crontab с помощью редактора. Мы хотим, чтобы команда <code>emerge --sync</code> работала каждый день в 6:30 A.M., поэтому мы придадим ей следующий вид: 

{{Code/ru|Настоящий crontab|<pre>
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (если Вы используете anacron, добавьте эту строчку)
30 7 * * *    /usr/sbin/anacron -s
</pre>
}}

И снова, проверьте список заданий cron, так же, как мы делали в предыдущих примерах, чтобы убедиться что задания запланированы. Если все они перечислены там, то Вы в полном порядке. 

== Использование cronbase ==

Как упомянуто ранее, все доступные пакеты cron зависят от <code>sys-process/cronbase</code> . Пакет cronbase создает {{Path|/etc/cron.{hourly,daily,weekly,monthly}}} , и сценарий, называемый <code>run-crons</code> . Вы можете заметить, что {{Path|/etc/crontab}} по умолчанию содержит что-то в этом роде: 

{{Code/ru|Системный crontab по умолчанию|<pre>
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>
}}

Чтобы избежать углубления в излишние подробности, мы просто можем предположить, что эти команды будут фактически запускать ваши сценарии на каждый час, день, неделю и месяц. Этот метод планирования задач cron имеет несколько важных преимуществ: 

* Они будут запускаться даже когда Ваш компьютер был выключен, в то время, когда им было необходимо выполниться
* Облегчается работа сопроводителей пакета по размещению сценариев в тех хорошо определенных местах
* Вы точно знаете где хранятся ваши задачи cron и crontab, что делает легким процесс создания резервных копий и восстановления этой части Вашей системы

{{Note|Again, it is useful to point out that vixie-cron, cronie and bcron automatically read {{Path|/etc/crontab}} , while dcron and fcron do not. Please read the [[#System_crontab|System crontab]] section to learn more about this.}}

== Использование anacron ==

Как было упомянуто ранее, anacron используется на системах, не предназначенных для непрерывной работы (подобно большинству настольных компьютеров). Его файл конфигурации по умолчанию, {{Path|/etc/anacrontab}}, обычно выглядит так:

{{File|/etc/anacrontab||<pre>
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
</pre>}}

Как видите, главным различием между этим файлом crontab и другими является то, что у anacron-а нет фиксированной даты/часа для планирования работы, но только период между каждым запуском. Когда anacron запущен, он проверит содержимое набора файлов в {{Path|/var/spool/anacron}} и вычислит, не истекла ли соответствующая запись в файле конфигурации с момента предыдущего запуска. Если это произошло, то команда вызывается снова.

As a final note, it is important to comment out any overlapping entry in any other cron installed in the system, such as in the following vixie-cron crontab example:

{{File|/etc/crontab||<pre>
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
</pre>}}

Без этого, части daily, weekly и monthly будут выполняться - в разное время - как демоном cron, так и anacron, приводя к возможным повторениям выполнения работ.

== Завершающие заметки ==

Запомните, каждый пакет cron отличается от других, и диапазон особенностей сильно разнится. Проконсультируйтесь с man-страницами для crontab, fcrontab или anacrontab, в зависимости от того, что вы используете. 

Удачи! 

=== Устранение проблем ===

Если у Вас проблемы с нормальной работой cron, вы можете просмотреть этот быстрый проверочный список. 

==== Cron запущен? ====

Запустите <code>ps ax | grep cron</code> и убедитесь, что он появляется в результате работы команды.

==== Cron работает? ====

Попробуйте следующее:

{{Code/ru|crontab чтобы проверить работает ли cron|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own
</pre>}}

Затем проверьте модифицируется ли файл {{Path|/file_you_own}} периодически.

==== Работает ли Ваша команда? ====

То же самое, что и раньше, но также перенаправьте стандартный вывод ошибок:

{{Code/ru|crontab чтобы проверить, что приложение запущено|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own 2>&amp;1
</pre>}}

==== Может ли cron запустить Ваше задание ====

Проверьте лог-файл cron, обычно {{Path|/var/log/cron.log}} или {{Path|/var/log/messages}}, на ошибки

==== Появляются ли какие-нибудь файлы {{Path|dead.letter}} ====

Cron обычно отправляет сообщение в случае проблемы; проверьте Ваш mail и также файл {{Path|~/dead.letter}} .

== Благодарности ==

Мы хотели бы поблагодарить следующих авторов и редакторов за их вклад в это руководство:


* Eric Brown
* Xavier Neys
* nightmorph


[[Category:Core system]]
[[Category:Daemons]]
