<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Эта статья описывает установку и использование cron демона в Gentoo Linux.

== Основные понятия cron ==

=== Что делает cron? ===

Cron - это программа-демон, запускающая запланированные задания, основываясь на результате работы команды {{c|crontab}}. Она выполняет эти задания просыпаясь каждую минуту и проверяя, есть ли какие-нибудь задания cron (cron-jobs) для запуска в каком-либо из файлов заданий crontab пользователя. 

{{Note|Заметьте, что {{c|crontab}} - это как имя списка заданий cron, так и имя команды для редактирования этого списка.}}

=== Cron на практике ===

Существует несколько реализаций программы cron, доступных через Portage. Все они предлагают сходный интерфейс, а именно, использование команды {{c|crontab}} или ей подобных. Также есть родственная утилита, называемая Anacron, которая предназначена для работы с cron-ом на системах, которые не работают непрерывно. 

Также следует заметить, что не все доступные пакеты cron зависят от {{Package|sys-process/cronbase}}. Этот пакет не зависит технически от какого-либо из пакетов cron, но он предлагает сходную с cron-ом функциональность, которую оценят многие из пользователей. 

Перед тем, как начать работу с cron, следует выбрать наиболее подходящую реализацию cron. В этой статье предоставлена информация для каждой реализации cron, доступных в Gentoo Linux.

== Какой cron наиболее подходит? ==

{{Note|Emerge {{Package|virtual/cron}} to install Gentoo's default cron implementation.}}

=== vixie cron ===

Vixie cron - это полноценная реализация программы cron, основанная на SysV cron. Каждый пользователь имеет свой собственный файл заданий crontab, и ему разрешается указывать переменные среды внутри этого файла. В отличие от других видов cron, он также предлагает поддержку SELinux и PAM. Он поддерживает меньшее количество архитектур чем Dcron, но большее по сравнению с Fcron. Последняя версия 4.1 от января 2004.

Возможности {{Package|sys-process/vixie-cron}}: 

* Поддержка SELinux;
* Поддержка PAM ({{Path|/etc/security/limits.conf}});
* Установка переменных среды в файлах заданий crontabs (PATH, SHELL, HOME, etc.);
* У каждого пользователя может быть личный файл заданий crontab; доступ контролируется файлами {{Path|cron.allow}} и {{Path|cron.deny}}

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) это ответвление от vixie-cron сделанное дистрибутивом [https://fedorahosted.org/cronie/wiki Fedora]. Так как это ответвление, у данной программы имеется тот же набор возможностей оригинального vixie-cron. Дополнительно, cronie имеет реализацию anacron, которую можно включить с помощью USE-флага <code>anacron</code>.

=== dcron (Dillon's Cron) ===

[http://www.jimpryor.net/linux/dcron.html Dcron] стремится быть простой, элегантной и безопасной реализацией программы cron. Он не разрешает установку переменных среды в файлах crontabs и все задания cron запускаются из {{Path|/bin/sh}}. Как и vixie-cron, каждый пользователь имеет свой собственный файл заданий crontab.

Возможности {{Package|sys-process/dcron}}: 

* Быстрый, простой и свободный от излишних функций;
* Доступ к файлу {{c|crontab}} ограничен группой cron, т.е. он не полагается на внешние средства.

=== fcron ===

Fcron ориентирован на то, чтобы заменить собой vixie-cron и anacron. Он разработан для работы на системах, которые не работают непрерывно и включает в себя дополнительные особенности. Он имеет ограничения на запуск заданий, управление сериализацией работ, возможность назначить работам приятные в обращении значения и возможность запланировать запуск работ при загрузке системы. Просмотрите [http://fcron.free.fr/ главную страницу fcron], чтобы получить больше информации. 

Возможности {{Package|sys-process/fcron}}: 

* Разработан для работы на системах, которые не работают непрерывно, т.е. он может запустить задание после перезапуска, если оно было пропущено;
* Установка переменных среды и множества других параметров в файлах заданий crontab;
* Улучшенный синтаксис crontab с поддержкой множества новых функций;
*У каждого пользователя может быть личный файл заданий crontab; доступ контролируется файлами {{Path|cron.allow}} и {{Path|cron.deny}}

=== bcron ===

Bcron - это новая система cron, разработанная с учетом безопасности ее работы. Чтобы добиться этого, система поделена на несколько отдельных программ, каждая из которых отвечает за отдельное задание, со строго контролируемым сообщением между ними. Пользовательский интерфейс представляет собой несущественное изменение интерфейсов для подобных систем (таких как vixie-cron), но внутренние части программы сильно отличаются. Чтобы получить больше информации, проконсультируйтесь с главной страницей bcron по адресу [http://untroubled.org/bcron http://untroubled.org/bcron]. 

Возможности {{Package|sys-process/bcron}}: 

* Легкая замена vixie-cron;
* Ориентированность на множество процессов;
* Нативная поддержка перехода на летнее время.

=== anacron ===

Anacron - это не демон cron, это то, что работает в объединении с ним. Он выполняет команды по интервалам в указанные дни и не предполагает непрерывную работу системы; он запускает работы, которые были пропущены, пока система была отключена. Anacron обычно полагается на демон cron, чтобы запускаться каждый день.

== Использование cron ==

=== Установка ===

Выберите реализацию cron, которая наиболее подходит, и установите ее командой emerge:

{{Emerge|dcron}}

Убедитесь, что демон cron добавлен в процесс инициализации системы; без этого шага cron демон не будет выполнять свою работу.
{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

Опционально, если '''не был''' установлен Fcron, установка Anacron в качестве помощника cron демона может быть мудрым решением. 

{{Emerge|anacron}}

Опять же, не забудьте добавить Anacron для запуска во время инициализации системы.
{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== Системный файл crontab ===

Послеустановочные сообщения от некоторых пакетов cron могут попросить пользователя запустить {{c|crontab /etc/crontab}}. Файл {{Path|/etc/crontab}} - это ''системный crontab''. Установка cron может использовать его вместе с {{Package|sys-process/cronbase}} для запуска сценариев в {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}. Заметьте, что только vixie-cron и cronie планируют задания в {{Path|/etc/crontab}} автоматически. Пользователям dcron и fcron потребуется запускать {{c|crontab /etc/crontab}} каждый раз при внесении изменений в {{Path|/etc/crontab}} файл.

Пожалуйста, возьмите на заметку, что задания, запланированные в системном crontab могут не появиться в списке заданий cron, отображаемом при использовании {{c|crontab -l}}. 

Конечно, пользователь может не использовать какой-либо системный файл crontab вовсе. Если был выбран dcron или fcron, ''не'' запускайте {{c|crontab /etc/crontab}}. Если был выбран vixie-cron, cronie или bcron закомментируйте все строки в {{Path|/etc/crontab}}. 

Быстрый и простой способ закомментировать все строки в файле с помощью команды sed. Выполните следующую команду, чтобы закомментировать все строки в {{Path|etc/crontab}}
{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Предоставление доступа к cron проверенным пользователям ===

Если нужно предоставить доступ к демону cron и другим пользователям(не root), то прочитайте этот раздел до конца. В противном случае можно перейти к следующему разделу: [[#Планирование заданий cron|Планирование заданий cron]]. 

{{Note|Предоставление другим пользователям доступа к crontab не позволяет им запускать задания cron в качестве администратора. Если нужно, чтобы пользователь смог редактировать файл crontab учетной записи root, то следует рассмотреть использование {{c>sudo}} ({{Package|app-admin/sudo}}). Пожалуйста обратитесь к [[Sudo/ru|Руководству по использованию Sudo в Gentoo]] за  более подробной информацией.}}

Не имеет значения какой из пакетов cron был выбран, если нужно разрешить пользователю использование crontab, то он должен быть в группе cron. В качестве примера, для добавления пользователя ''wepy'' в группу cron нужно запустить: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/ru|При добавлении пользователя в группу cron, убедитесь, что пользователь вышел и снова зашел в систему, чтобы изменения в группе возымели эффект.}}

При использовании '''dcron''', вышеизложенного шага достаточно для предоставления пользователю доступа к crontab. Пользователи Dcron могут перейти к следующему разделу [[#Планирование заданий cron|Планирование заданий cron]], остальным нужно продолжить чтение. 

При использовании '''fcron''', отредактируйте {{Path|/etc/fcron/fcron.deny}} и {{Path|/etc/fcron/fcron.allow}} файлы. Наиболее безопасный способ запуска системы - это сперва запретить всех пользователей в файле {{Path|/etc/fcron/fcron.deny}}, а затем явно разрешить пользователей в {{Path|/etc/fcron/fcron.allow}}. 

{{Important/ru|Если файлы {{Path|/etc/fcron/fcron.allow}} и {{Path|/etc/fcron/fcron.deny}} не существуют, тогда всем пользователям в группе cron будет разрешено использовать crontab. fcron поставляется с файлом {{Path|fcron.allow}}, который по умолчанию '''разрешает всем пользователям''', находящимся в группе cron, доступ к fcrontab.}}

{{CodeBox|title=Разрешения в fcron.deny|1=
all
}}

Если пользователю ''wepy'' (опять для примера) необходимо управлять его собственными заданиями cron, тогда добавьте его в {{Path|/etc/fcron/fcron.allow}}, как показано ниже: 

{{CodeBox|title=Разрешения в fcron.allow|1=
wepy
}}

Если были выбраны '''vixie cron''' или '''cronie''', возможно, нужно просто отредактировать {{Path|/etc/cron.allow}} файл. 

{{Important/ru|Важно заметить что если существует только файл {{Path|/etc/cron.allow}}, то только пользователи, принадлежащие группе cron, перечисленные в нем, будут иметь доступ. Иначе, если существует только пустой файл {{Path|/etc/cron.deny}}, то доступ ''всем'' пользователям, принадлежащим группе cron будет разрешен! Не оставляйте файл {{Path|/etc/cron.deny}} пустым, если нет {{Path|/etc/cron.allow}} файла.}}

Например, чтобы разрешить доступ пользователю ''wepy'',  добавьте его в {{Path|/etc/cron.allow}} как показано ниже: 

{{CodeBox|title=Разрешения в /etc/cron.allow|1=
wepy
}}

=== Планирование заданий cron ===

Процесс редактирования файлов crontab различен для каждого пакета, но все они поддерживают базовый набор команд: добавление и замещение файлов crontab, редактирование и удаление файлов crontab, список cron заданий из crontab файлов. Следующий список показывает, как выполнять различные команды для каждого пакета. 

{| class="wikitable" style="text-align: left;" 
|- 
! Версия
! Редактировать crontab
! Удалить crontab
! Новый crontab
! Список cron-jobs
|- 
| dcron
| {{c|crontab -e}}
| {{c|crontab -d ''[user]'' }}
| {{c|crontab ''file'' }}
| {{c|crontab -l}}
|- 
| fcron
| {{c|fcrontab -e}}
| {{c|fcrontab -r ''[user]'' }}
| {{c|fcrontab ''file'' }}
| {{c|fcrontab -l}}
|- 
| vixie-cron, cronie & bcron
| {{c|crontab -e}}
| {{c|crontab -r ''-u [user]'' }}
| {{c|crontab ''file'' }}
| {{c|crontab -l}}
|-
|}

{{Note/ru|Если не указано ни одного аргумента при использовании команды удаления, она удаляет файл crontab текущего пользователя.}}

{{Note/ru|Fcron также имеет символьную ссылку с crontab на fcrontab.}}

Перед использованием какой-либо из этих команд, нужно сперва понять работу самого crontab. В каждой строке файла crontab нужно указать пять полей со временем в следующем порядке: минуты (0-59), часы (0-23), дни месяца (1-31), месяцы (1-12), и дни недели (0-7, Понедельник - 1, Воскресенье - 0 и 7). Дни недели и месяцы могут быть указаны трехбуквенными сокращениями, например mon,tue,jan,feb, и т.д. Каждое поле также может указывать диапазон значений (напр. 1-5 или mon-fri), список значений, разделенный запятыми (напр. 1,2,3 или mon,tue,wed) или диапазон значений с ''шагом'' (напр. 1-6/2 как 1,3,5). 

Звучит немного запутанно, но на нескольких примерах нетрудно увидеть, что это не так сложно, как кажется.

{{CodeBox|title=Примеры|1=
# Запускать /bin/false каждую минуту круглый год
*     *     *     *     *        /bin/false
  
# Запускать /bin/false в 1:35 в mon,tue,wed (понедельник, вторник, среду) и 4-й день каждого месяца
35    1     4     *     mon-wed  /bin/false
  
# Запускать /bin/true в 22:25 на 2-е Марта
25    22    2     3     *        /bin/true
  
# Запускать /bin/false в 2:00 каждый Понедельник, Среду и Пятницу
0     2     *     *     1-5/2    /bin/false
}}

{{Note/ru|Обратите внимание, как нужно записывать дни недели и дни месяца перед тем, как их сгруппировать. Если использовать * только для одной категории, другие возьмут приоритет, в то время как * для обоих просто означает каждый день.}}

Чтобы протестировать только что изученное, давайте разберем по шагам фактический ввод нескольких заданий cron. Для начала, создайте файл с названием {{Path|crons.cron}} и приведите его к следующему виду: 

{{FileBox|filename=crons.cron|title=Создание файла crons.cron|1=
#Минуты  Часы  Дни   Месяцы  Дни недели
10     3      1      1       *       /bin/echo "Мне действительно не нравится cron"
30     16     *      1,2     *       /bin/echo "Мне нравится cron немного"
*      *      *      1-12/2  *       /bin/echo "Мне нравится cron в самом деле"
}}

Теперь добавьте этот crontab в систему с помощью команды ''Новый crontab'' из таблицы выше. 

{{RootCmd|crontab crons.cron}}

{{Note/ru|На самом деле, не будет видно результата работы этих echo-команд, если только не используется перенаправление.}}

Чтобы проверить запланированные задачи cron, мы используем соответственную команду ''Перечислить cron-jobs'' из таблицы выше. 

{{RootCmd|crontab -l}}

Список напоминающий {{Path|crons.cron}} должен быть показан. Если этого не произошло, возможно, использовалась неверная команда для ввода файла crontab. 

Этот файл заданий crontab должен выводить "Мне нравится cron в самом деле" каждую минуту каждый час каждого дня каждого второго месяца. Очевидно, что пользователю следует это делать только если ему действительно понравился cron. Этот crontab также выведет "Мне нравится cron немного" в 16:30 каждый день в Январе и Феврале. Он также будет выводить "Мне действительно не нравится cron" в 3:10 1-го Января. 

Если используется anacron, то следует продолжить чтение этого раздела. Иначе, перейдите к следующей главе [[#Редактирование crontabs|Редактирование crontabs]]. 

Пользователи Anacron, возможно, захотят отредактировать {{Path|/etc/anacrontab}}. Этот файл имеет четыре поля: количество дней перед каждым запуском, задержка в минутах после которой он запускает задания, имя задания, и команда для запуска. 

Например, чтобы заставить его запускать команду {{c|echo "Мне нравится anacron"}} каждые 5 дней и 10 минут после того как запущен anacron, следует ввести следующее: 

{{FileBox|filename=/etc/anacrontab|1=
5 10 wasting-time /bin/echo "Мне нравится anacron"
}}

Anacron завершается после того, как сделаны все задания, перечисленные в файле anacrontab. Чтобы проверить, есть ли задания для ежедневного выполнения, нам потребуется использовать cron. Инструкции в конце следующего раздела покажут как это сделать.

=== Редактирование crontabs ===

Все же, давайте будем реалистами. Наверное нет пользователей, которые хотят, чтобы система сообщала им каждую минуту как сильно они любят cron. Как шаг вперед, давайте удалим этот crontab, используя соответствующую команду ''Удалить crontab'' из таблицы выше. Используйте соответствующую команду для получения списка задач cron, чтобы убедиться что команда сработала. 

{{RootCmd|crontab -d
|crontab -l}}

''no cron jobs'' долно быть показано в качестве результата работы команды {{c|crontab -l}}. Если был показан список заданий, это значит, что команда удаления не смогла удалить crontab; проверьте, что используется правильная команда ''Удалить'' для этого пакета cron. 

Теперь, когда мы можем начать с чистого листа, давайте поместим что-нибудь полезное в файл crontab принадлежащий '''root'''. Большинство пожелает запускать команду {{c|updatedb}} еженедельно, чтобы убедиться, что mlocate работает как надо. Чтобы добавить это в системный crontab, давайте сначала отредактируем файл {{Path|crons.cron}} заново, чтобы он принял следующий вид: 

{{CodeBox|title=Настоящий crontab|1=
22 2 * * 1    /usr/bin/updatedb
}}

Это заставит cron запускать updatedb в 2:22 A.M. утром в понедельник каждую неделю. Теперь можно ввести этот crontab с помощью команды ''Новый crontab'' из таблицы выше, и проверить список снова. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Теперь, давайте предположим, что нужно добавить команду {{c|emerge --sync}} к ежедневному выполнению, чтобы сохранить дерево Portage всегда в свежем виде. Это можно сделать сперва отредактировав файл {{Path|crons.cron}} и затем используя команду {{c|crontab crons.cron}} так, как в примере ранее, ''или'' используйте соответствующую команду ''Редактировать crontab'' из таблицы выше. Это предоставляет способ редактировать crontab пользователя в любом месте, вне зависимости от внешних файлов, наподобие {{Path|crons.cron}} . 

{{RootCmd|crontab -e}}

Эта команда должна открыть crontab пользователя в редакторе. Например, если команда {{c|emerge --sync}} будет выполняться каждый день в 6:30 A.M., сделайте чтобы crontab выглядел так: 

{{CodeBox|title=Настоящий crontab|1=
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (если используется anacron, добавьте эту строчку)
30 7 * * *    /usr/sbin/anacron -s
}}

И снова, проверьте список заданий cron, так же, как делали в предыдущих примерах, чтобы убедиться что задания запланированы. Если все они перечислены там, то система готова к рок-н-роллу.

== Использование cronbase ==

Как упомянуто ранее, все доступные пакеты cron зависят от {{Package|sys-process/cronbase}}. Пакет cronbase создает {{Path|/etc/cron.{hourly,daily,weekly,monthly}}}, и сценарий, называемый {{Path|run-crons}}. Заметьте, что файл {{Path|/etc/crontab}} по умолчанию содержит что-то в этом роде: 

{{CodeBox|title=Системный crontab по умолчанию|1=
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
}}

Чтобы избежать углубления в излишние подробности, предположим, что эти команды будут фактически запускать ваши сценарии каждый час, день, неделю и месяц. Этот метод планирования задач cron имеет несколько важных преимуществ: 

* Они будут запускаться даже когда компьютер был выключен, в то время, когда им было необходимо выполниться;
* Облегчается работа сопроводителей пакета по размещению сценариев в тех хорошо определенных местах;
* Администратор точно знаете где хранятся задачи cron и crontab, что делает легким процесс создания резервных копий и восстановления этой части системы.

{{Note/ru|И снова, полезно отметить, что vixie cron, cronie и bcron автоматически считывают содержимое файла {{Path|/etc/crontab}}, в то время как dcron и fcron нет. Пожалуйста прочитайте раздел [[#Системный файл crontab|Системный файл crontab]], чтобы изучить это подробнее.}}

== Использование anacron ==

Как было упомянуто ранее, anacron используется на системах, не предназначенных для непрерывной работы (подобно большинству настольных компьютеров). Его файл конфигурации по умолчанию, {{Path|/etc/anacrontab}}, обычно выглядит так:

{{FileBox|filename=/etc/anacrontab|1=
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
}}

Главным различием между этим файлом crontab и другими является то, что у anacron-а нет фиксированной даты/часа для планирования работы, но только период между каждым запуском. Когда anacron запущен, он проверит содержимое набора файлов в {{Path|/var/spool/anacron}} и вычислит, не истекла ли соответствующая запись в файле конфигурации с момента предыдущего запуска. Если это произошло, то команда вызывается снова.

В заключение, важно закомментировать какие-либо совпадающие записи в любом другом cron, установленном на системе, так, как в следующем примере с файлом crontab программы vixie-cron:

{{FileBox|filename=/etc/crontab|1=
# для vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Глобальные переменные
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# проверять сценарии в cron.hourly, cron.daily, cron.weekly и cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
}}

Без этого, части daily, weekly и monthly будут выполняться - в разное время - как демоном cron, так и anacron, приводя к возможным повторениям выполнения работ.

== Завершающие заметки ==

Запомните, каждый пакет cron отличается от других, и диапазон возможностей сильно разнится. Проконсультируйтесь с man-страницами для crontab, fcrontab или anacrontab, в зависимости от того, какой cron демон вы используете. 

Удачи! 

=== Устранение проблем ===

Если появляются проблемы во время работы cron, этот краткий список может быть полезным. 

==== Cron запущен? ====

Чтобы убедиться, что cron работает, посмотрите, если он в списке процессов:

{{RootCmd|<nowiki>ps ax | grep cron</nowiki>}}

==== Cron работает? ====

Попробуйте следующее:

{{CodeBox|title=Пример файла crontab для того, чтобы проверить работает ли cron|1=
* * * * * /bin/echo "foobar" >> /file_you_own
}}

Затем проверьте модифицируется ли файл {{Path|/file_you_own}} периодически.

==== Работает ли команда из задачи cron? ====

То же самое, что и раньше, но также перенаправьте стандартный вывод ошибок:

{{CodeBox|title=Пример файла crontab для того, чтобы проверить работает ли cron|1=
* * * * * /bin/echo "foobar" >> /file_you_own 2>&1
}}

==== Может ли cron запустить задание? ====

Проверьте лог-файл cron, обычно {{Path|/var/log/cron.log}} или {{Path|/var/log/messages}}, на ошибки.

==== Появляются ли какие-нибудь файлы {{Path|dead.letter}} ====

Cron обычно отправляет сообщение в случае проблемы; проверьте почту и {{Path|~/dead.letter}} файл.

== Альтернативы заданиям Cron ==

Некоторые компании, предоставляющие услуги хостинга не дают доступа к cron, но можно найти множество альтернатив, как платных, так и бесплатных:

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
