<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Эта статья описывает установку и использование cron демона в Gentoo Linux.

== Основные понятия cron ==

=== Что делает cron? ===

Cron - это программа-демон, запускающая запланированные задания, основываясь на результате работы команды <tt>crontab</tt>. Она выполняет эти задания просыпаясь каждую минуту и проверяя, есть ли какие-нибудь задания cron (cron-jobs) для запуска в каком-либо из файлов заданий crontab пользователя. 

{{Note/ru|Заметьте что <tt>crontab</tt> - это как имя списка заданий cron, так и имя команды для редактирования этого списка.}}

=== Cron на практике ===

Существует несколько реализаций программы cron, доступных через Portage. Все они предлагают сходный интерфейс, а именно, использование команды <tt>crontab</tt> или ей подобных. Также есть родственная утилита, называемая Anacron, которая предназначена для работы с cron-ом на системах, которые не работают непрерывно. 

Также следует заметить, что не все доступные пакеты cron зависят от {{Package|sys-process/cronbase}} . Этот пакет не зависит технически от какого-либо из пакетов cron, но он предлагает сходную с cron-ом функциональность, которую оценят многие из пользователей. 

Перед тем, как начать работу с cron, следует выбрать наиболее подходящую реализацию cron. В этой статье предоставлена информация для каждой реализации cron, доступных в Gentoo Linux.

== Какой cron наиболее подходит? ==

=== vixie cron ===

Vixie cron - это полноценная реализация программы cron, основанная на SysV cron. Каждый пользователь имеет свой собственный файл заданий crontab, и ему разрешается указывать переменные среды внутри этого файла. В отличие от других видов cron, он также предлагает поддержку SELinux и PAM. Он поддерживает меньшее количество архитектур чем Dcron, но большее по сравнению с Fcron. 

Особенности {{Package|sys-process/vixie-cron}} : 

* Поддержка SELinux;
* Поддержка PAM ({{Path|/etc/security/limits.conf}});
* Установка переменных среды в файлах заданий crontabs (PATH, SHELL, HOME, etc.)
* У каждого пользователя может быть личный файл заданий crontab; доступ контролируется файлами {{Path|cron.allow}} и {{Path|cron.deny}} 

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) это ответвление от vixie-cron сделанное дистрибутивом [https://fedorahosted.org/cronie/wiki Fedora]. Так как это ответвление, у данной программы имеется тот же набор возможностей, что и у изначального vixie-cron. Дополнительно, cronie имеет реализацию anacron, которую можно включить с помощью USE флага <code>anacron</code>.

=== dcron (Dillon's Cron) ===

[http://www.jimpryor.net/linux/dcron.html Dcron] стремится быть простой, элегантной и безопасной реализацией программы cron. Он не разрешает установку переменных среды в файлах crontabs и все задания cron запускаются из {{Path|/bin/sh}} . Как и vixie-cron, каждый пользователь имеет свой собственный файл заданий crontab. 

Особенности {{Package|sys-process/dcron}} : 

* Быстрый, простой и свободный от излишних функций;
* Доступ к файлу <tt>crontab</tt> ограничен группой cron, т.е. он не полагается на внешние средства.

=== fcron ===

Fcron ориентирован на то, чтобы заменить собой vixie-cron и anacron. Он разработан для работы на системах, которые не работают непрерывно и включает в себя дополнительные особенности. Он имеет ограничения на запуск заданий, управление сериализацией работ, возможность назначить работам приятные в обращении значения и возможность запланировать запуск работ при загрузке системы. Просмотрите [http://fcron.free.fr/ главную страницу fcron], чтобы получить больше информации. 

Особенности {{Package|sys-process/fcron}} : 

* Разработан для работы на системах, которые не работают непрерывно, т.е. он может запустить задание после перезапуска, если оно было пропущено;
* Установка переменных среды и множества других параметров в файлах заданий crontab;
* Улучшенный синтаксис crontab с поддержкой множества новых функций;
*У каждого пользователя может быть личный файл заданий crontab; доступ контролируется файлами {{Path|cron.allow}} и {{Path|cron.deny}}


=== bcron ===

Bcron - это новая система cron, разработанная с учетом безопасности ее работы. Чтобы добиться этого, система поделена на несколько отдельных программ, каждая из которых отвечает за отдельное задание, со строго контролируемым сообщением между ними. Пользовательский интерфейс представляет собой несущественное изменение интерфейсов для подобных систем (таких как vixie-cron), но внутренние части программы сильно отличаются. Чтобы получить больше информации, проконсультируйтесь с главной страницей bcron по адресу [http://untroubled.org/bcron http://untroubled.org/bcron] . 

Особенности {{Package|sys-process/bcron}}: 

* Легкая замена vixie-cron;
* Ориентированность на множество процессов;
* Нативная поддержка перехода на летнее время.

=== anacron ===

Anacron - это не демон cron, это то, что работает в объединении с ним. Он выполняет команды по интервалам, указанным по дням, и не предполагает непрерывную работу системы; он запускает работы, которые были пропущены, пока система была отключена. Anacron обычно полагается на демон cron, чтобы запускаться каждый день.

== Использование cron ==

=== Установка ===

Выберите реализацию cron, которая наиболее подходит, и установите ее командой emerge.

{{Emerge|dcron}}

Убедитесь, что демон cron добавлен в процесс инициализации системы; без этого шага cron демон не будет выполнять свою работу.
{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

Optionally, if Fcron has '''not''' been installed, installing Anacron as a helper to the cron daemon might be a wise choice. 

{{Emerge|anacron}}

Опять же, не забудьте добавить Anacron для запуска во время инициализации системы.
{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== Системный файл crontab ===

Послеустановочные сообщения от некоторых пакетов cron могут сообщить пользователю запустили <tt>crontab /etc/crontab</tt>. Файл {{Path|/etc/crontab}} - это ''системный crontab''. Установка cron может использовать его вместе с {{Package|sys-process/cronbase}} для запуска сценариев в {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}. Заметьте, что только vixie-cron и cronie планируют задания в {{Path|/etc/crontab}} автоматически. Пользователям dcron и fcron потребуется запускать <tt>crontab /etc/crontab</tt> каждый раз при внесении изменений в {{Path|/etc/crontab}} файл.

Пожалуйста, возьмите на заметку, что задания, запланированные в системном crontab могут не появиться в списке заданий cron, отображаемом при использовании <tt>crontab -l</tt> . 

Конечно, пользователь может не использовать какой-либо системный файл crontab вовсе. Если был выбран dcron или fcron, ''не'' запускайте <tt>crontab /etc/crontab</tt> . Если был выбран vixie-cron, cronie или bcron закомментируйте все строки в {{Path|/etc/crontab}} . 

Быстрый и простой способ закомментировать все строки в файле с помощью команды sed. Выполните следующую команду, чтобы закомментировать все строки в {{Path|etc/crontab}}
{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Предоставление доступа к cron проверенным пользователям ===

Если нужно предоставить доступ к демону cron и другим пользователям(не root), то прочитайте этот раздел до конца. В противном случае можно перейти к следующему разделу, [[#Планирование заданий cron|Планирование заданий cron]]. 

{{Note/ru|Предоставление другим пользователям доступа к crontab не позволяет им запускать задания cron в качестве администратора. Если нужно, чтобы пользователь смог редактировать файл crontab учетной записи root, то следует рассмотреть использование <tt>sudo</tt> ({{Package|app-admin/sudo}}). Пожалуйста обратитесь к [[Sudo/ru|Руководству по использованию Sudo в Gentoo]] за  более подробной информацией.}}

Не имеет значения какой из пакетов cron был выбран, если нужно разрешить пользователю использование crontab, то он должен быть в группе cron. В качестве примера, для добавления пользователя ''wepy'' в группу cron, нужно запустить: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/ru|При добавлении пользователя в группу cron, убедитесь, что пользователь вышел и снова зашел в систему, чтобы изменения в группе возымели эффект.}}

При использовании '''dcron''', вышеизложенного шага достаточно для предоставления пользователю доступа к crontab. Пользователи Dcron могут перейти к следующему разделу [[#Планирование заданий cron|Планирование заданий cron]], остальным нужно продолжить чтение. 

При использовании '''fcron''', отредактируйте {{Path|/etc/fcron/fcron.deny}} и {{Path|/etc/fcron/fcron.allow}} файлы. Наиболее безопасный способ запуска системы - это сперва запретить всех пользователей в файле {{Path|/etc/fcron/fcron.deny}}, а затем явно разрешить пользователей в {{Path|/etc/fcron/fcron.allow}}. 

{{Important/ru|Если файлы {{Path|/etc/fcron/fcron.allow}} и {{Path|/etc/fcron/fcron.deny}} не существуют, тогда всем пользователям в группе cron будет разрешено использовать crontab. fcron поставляется с файлом {{Path|fcron.allow}}, который по умолчанию '''разрешает всем пользователям''', находящимся в группе cron, доступ к fcrontab.}}

{{CodeBox|title=Разрешения в fcron.deny|1=
all
}}

Если пользователю ''wepy'' (опять для примера) необходимо управлять его собственными заданиями cron, тогда добавьте его в {{Path|/etc/fcron/fcron.allow}}, как показано ниже: 

{{CodeBox|title=Разрешения в fcron.allow|1=
wepy
}}

Если были выбраны '''vixie cron''' или '''cronie''', возможно, нужно просто отредактировать {{Path|/etc/cron.allow}} файл. 

{{Important/ru|Важно заметить что если существует только файл {{Path|/etc/cron.allow}} , то только пользователи, принадлежащие группе cron, перечисленные в нем, будут иметь доступ. Иначе, если существует только пустой файл {{Path|/etc/cron.deny}} , то доступ ''всем'' пользователям, принадлежащим группе cron будет разрешен! Не оставляйте файл {{Path|/etc/cron.deny}} пустым, если нет {{Path|/etc/cron.allow}} файла.}}

Например, чтобы разрешить доступ пользователю ''wepy'',  добавьте его в {{Path|/etc/cron.allow}} как показано ниже: 

{{CodeBox|title=Разрешения в /etc/cron.allow|1=
wepy
}}

=== Планирование заданий cron ===

Процесс редактирования файлов crontab различен для каждого пакета, но все они поддерживают базовый набор команд: добавление и замещение файлов crontab, редактирование и удаление файлов crontab, листинг cron заданий из crontab файлов. Следующий список показывает, как выполнять различные команды для каждого пакета. 

{| class="wikitable" style="text-align: left;" 
|- 
! Version
! Edit crontab
! Remove crontab
! New crontab
! List cron-jobs
|- 
| dcron
| <tt>crontab -e</tt>
| <tt>crontab -d ''[user]'' </tt>
| <tt>crontab ''file'' </tt>
| <tt>crontab -l</tt>
|- 
| fcron
| <tt>fcrontab -e</tt>
| <tt>fcrontab -r ''[user]'' </tt>
| <tt>fcrontab ''file'' </tt>
| <tt>fcrontab -l</tt>
|- 
| vixie-cron, cronie & bcron
| <tt>crontab -e</tt>
| <tt>crontab -r ''-u [user]'' </tt>
| <tt>crontab ''file'' </tt>
| <tt>crontab -l</tt>
|-
|}

{{Note/ru|Если не указано ни одного аргумента при использовании команды удаления, она удаляет файл crontab текущего пользователя.}}

{{Note/ru|Fcron также имеет символьную ссылку с crontab на fcrontab.}}

Before any of these commands can be used, first understanding of the crontab itself is needed. Each line in a crontab specifies five time fields in the following order: the minutes (0-59), hours (0-23), days of the month (1-31), months (1-12), and days of the week (0-7, Monday is day 1, Sunday is day 0 and day 7). The days of the week and months can be specified by three-letter abbreviations like mon, tue, jan, feb, etc. Each field can also specify a range of values (e.g. 1-5 or mon-fri), a comma separated list of values (e.g. 1,2,3 or mon,tue,wed) or a range of values with a ''step'' (e.g. 1-6/2 as 1,3,5). 

That sounds a little confusing, but with a few examples it is easy to see it is not as complicated as it sounds.

{{CodeBox|title=Примеры|1=
# Запускать /bin/false каждую минуту круглый год
*     *     *     *     *        /bin/false
  
# Запускать /bin/false в 1:35 в mon,tue,wed (понедельник, вторник, среду) и 4-й день каждого месяца
35    1     4     *     mon-wed  /bin/false
  
# Запускать /bin/true в 22:25 на 2-е Марта
25    22    2     3     *        /bin/true
  
# Запускать /bin/false в 2:00 каждый Понедельник, Среду и Пятницу
0     2     *     *     1-5/2    /bin/false
}}

{{Note|Notice how to specify specific days of the week and days of the month before they are combined. If * is used for only one of them, the other takes precedence, while * for both just means every day.}}

To test what was just covered go through the steps of actually inputting a few cron-jobs. First, create a file called {{Path|crons.cron}} and make it look like the this: 

{{FileBox|filename=crons.cron|title=Создание файла crons.cron|1=
#Минуты  Часы  Дни   Месяцы  Дни недели
10     3      1      1       *       /bin/echo "Мне действительно не нравится cron"
30     16     *      1,2     *       /bin/echo "Мне нравится cron немного"
*      *      *      1-12/2  *       /bin/echo "Мне нравится cron в самом деле"
}}

Теперь добавьте этот crontab в систему с помощью команды ''Новый crontab'' из таблицы выше. 

{{RootCmd|crontab crons.cron}}

{{Note|The output from the echo commands will not be seen unless redirection is used.}}

To verify the scheduled cron-jobs, use the proper ''list command'' from the table above. 

{{RootCmd|crontab -l}}

A list resembling {{Path|crons.cron}} should be displayed; if not maybe the wrong command was issued to input the crontab. 

This crontab should echo "I really like cron" every minute of every hour of every day every other month. Obviously a user would only do that if they really liked cron. The crontab will also echo "I like cron a little" at 16:30 every day in January and February. It will also echo "I don't really like cron" at 3:10 on the January 1st. 

Если используется anacron, то следует продолжить чтение этого раздела. Иначе, перейдите к следующей главе [[#Editing_crontabs|Редактирование crontabs]] . 

Пользователи Anacron, возможно, захотят отредактировать {{Path|/etc/anacrontab}} . Этот файл имеет четыре поля: количество дней перед каждым запуском, задержка в минутах после которой он запускает задания, имя задания, и команда для запуска. 

Например, чтобы заставить его запускать команду <tt>echo "Мне нравится anacron"</tt> каждые 5 дней и 10 минут после того как запущен anacron, следует ввести следующее: 

{{FileBox|filename=/etc/anacrontab|1=
5 10 wasting-time /bin/echo "Мне нравится anacron"
}}

Anacron exits after all of the jobs in anacrontab have finished. To check to see if these jobs should be performed every day, a cron daemon will be used. The instructions at the end of the next section explain how this should be handled.

=== Редактирование crontabs ===

Being realistic, no user would want their system telling them how much they like cron every minute. As a step forward, remove the previous example crontab using the corresponding ''remove command'' from the table above. Use the corresponding list command to view the cron-jobs afterward to make sure it worked. 

{{RootCmd|crontab -d
|crontab -l}}

No cron-jobs should be displayed in the output from <tt>crontab -l</tt>. If cron jobs are listed, then the remove command failed to remove the crontab; verify the correct ''remove command'' for the system's cron package. 

Теперь, когда мы можем начать с чистого листа, давайте поместим что-нибудь полезное в файл crontab принадлежащий '''root'''. Большинство пожелает запускать команду <tt>updatedb</tt> еженедельно, чтобы убедиться, что mlocate работает как надо. Чтобы добавить это в системный crontab, давайте сначала отредактируем файл {{Path|crons.cron}} заново, чтобы он принял следующий вид: 

{{CodeBox|title=Настоящий crontab|1=
22 2 * * 1    /usr/bin/updatedb
}}

Это заставит cron запускать updatedb в 2:22 A.M. утром в понедельник каждую неделю. Теперь можно ввести этот crontab с помощью команды ''Новый crontab'' из таблицы выше, и проверить список снова. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Now let's say <tt>emerge --sync</tt> should be ran on a daily schedule in order to keep the Portage tree up to date. This could be done by first editing {{Path|crons.cron}} and then using <tt>crontab crons.cron</tt> as was done in the example above, ''or'' by using the proper ''edit command'' from the table above. This provides a way to edit the user's crontab in situ, without depending on external files like {{Path|crons.cron}}. 

{{RootCmd|crontab -e}}

The above command should open the user's crontab with an editor. For example, if <tt>emerge --sync</tt> is to be run every day at 6:30 A.M., make the crontab look something like this: 

{{CodeBox|title=Настоящий crontab|1=
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (если используется anacron, добавьте эту строчку)
30 7 * * *    /usr/sbin/anacron -s
}}

Again, check the cron-jobs list as done in the previous examples to make sure the jobs are scheduled. If they are all there, then the system is ready to rock and roll.

== Использование cronbase ==

Как упомянуто ранее, все доступные пакеты cron зависят от {{Package|sys-process/cronbase}}. Пакет cronbase создает {{Path|/etc/cron.{hourly,daily,weekly,monthly}}} , и сценарий, называемый {{Path|run-crons}}. Заметьте, что файл {{Path|/etc/crontab}} по умолчанию содержит что-то в этом роде: 

{{CodeBox|title=Системный crontab по умолчанию|1=
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
}}

To avoid going into much detail, assume these commands will effectively run hourly, daily, weekly and monthly scripts. This method of scheduling cron-jobs has some important advantages: 

* They will run even if the computer was off when they were scheduled to run;
* It is easy for package maintainers to place scripts in those well defined places;
* The administrators know exactly where the cron-jobs and crontab are stored, making it easy to backup and restore these parts of their systems.

{{Note/ru|И снова, полезно отметить, что vixie cron, cronie и bcron автоматически считывают содержимое файла {{Path|/etc/crontab}} , в то время как dcron и fcron нет. Пожалуйста прочитайте раздел [[#System_crontab|Системный файл crontab]] , чтобы изучить это подробнее.}}

== Использование anacron ==

As mentioned earlier, anacron is used on systems not meant to be run continuously (like most of the desktop installations). Its default configuration file, {{Path|/etc/anacrontab}}, is usually similar to the following:

{{FileBox|filename=/etc/anacrontab|1=
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
}}

Главным различием между этим файлом crontab и другими является то, что у anacron-а нет фиксированной даты/часа для планирования работы, но только период между каждым запуском. Когда anacron запущен, он проверит содержимое набора файлов в {{Path|/var/spool/anacron}} и вычислит, не истекла ли соответствующая запись в файле конфигурации с момента предыдущего запуска. Если это произошло, то команда вызывается снова.

В заключение, важно закомментировать какие-либо совпадающие записи в любом другом cron, установленном на системе, так, как в следующем примере с файлом crontab программы vixie-cron:

{{FileBox|filename=/etc/crontab|1=
# для vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Глобальные переменные
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# проверять сценарии в cron.hourly, cron.daily, cron.weekly и cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
}}

Без этого, части daily, weekly и monthly будут выполняться - в разное время - как демоном cron, так и anacron, приводя к возможным повторениям выполнения работ.

== Завершающие заметки ==

Запомните, каждый пакет cron отличается от других, и диапазон особенностей сильно разнится. Проконсультируйтесь с man-страницами для crontab, fcrontab или anacrontab, в зависимости от того, какой cron демон вы используете. 

Удачи! 

=== Устранение проблем ===

Если появляются проблемы во время работы cron, этот краткий список может быть полезным. 

==== Cron запущен? ====

Чтобы убедиться, что cron работает, посмотрите, если он в списке процессов:

{{RootCmd|<nowiki>ps ax | grep cron</nowiki>}}

==== Cron работает? ====

Попробуйте следующее:

{{CodeBox|title=Пример файла crontab для того, чтобы проверить работает ли cron|1=
* * * * * /bin/echo "foobar" >> /file_you_own
}}

Затем проверьте модифицируется ли файл {{Path|/file_you_own}} периодически.

==== Is the command working? ====

То же самое, что и раньше, но также перенаправьте стандартный вывод ошибок:

{{CodeBox|title=Пример файла crontab для того, чтобы проверить работает ли cron|1=
* * * * * /bin/echo "foobar" >> /file_you_own 2>&1
}}

==== Может ли cron запустить задание? ====

Проверьте лог-файл cron, обычно {{Path|/var/log/cron.log}} или {{Path|/var/log/messages}}, на ошибки.

==== Появляются ли какие-нибудь файлы {{Path|dead.letter}} ====

cron usually sends mail when there is a problem; check for mail and look for the creation of a {{Path|~/dead.letter}} file.

== Альтернативы заданиям Cron ==

Some hosting companies do not allow access to cron, but many cron jobs alternatives can be found which are free or commercially available:

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
