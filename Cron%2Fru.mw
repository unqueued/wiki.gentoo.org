<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Это руководство описывает установку и использование cron.

== Основные понятия cron ==

=== Что делает cron? ===

Cron - это программа-демон, запускающая запланированные задания, основываясь на результате работы команды <code>crontab</code>. Она выполняет эти задания просыпаясь каждую минуту и проверяя, есть ли какие-нибудь задания cron (cron-jobs) для запуска в каком-либо из файлов заданий crontab пользователя. 

{{Note/ru|Заметьте что ''crontab'' - это как имя списка заданий cron, так и имя команды для редактирования этого списка.}}

=== Cron на практике ===

Существует несколько реализаций программы cron, доступных через Portage. Все они предлагают сходный интерфейс, а именно, использование команды <code>crontab</code> или ей подобных. Также есть родственная утилита, называемая Anacron, которая предназначена для работы с cron-ом на системах, которые не работают непрерывно. 

Также следует заметить, что не все доступные пакеты cron зависят от {{Package|sys-process/cronbase}} . Этот пакет не зависит технически от какого-либо из пакетов cron, но он предлагает сходную с cron-ом функциональность, которую оценят многие из пользователей. 

Перед тем, как начать работу с cron-ом, Вам следует выбрать какую из его реализаций Вы хотите использовать. Для Вашего удобства, ниже мы собрали информацию о каждой из них.

== Какая программа cron Вам подходит? ==

=== vixie cron ===

Vixie cron - это полноценная реализация программы cron, основанная на SysV cron. Каждый пользователь имеет свой собственный файл заданий crontab, и ему разрешается указывать переменные среды внутри этого файла. В отличие от других видов cron, он также предлагает поддержку SELinux и PAM. Он поддерживает меньшее количество архитектур чем Dcron, но большее по сравнению с Fcron. 

Особенности {{Package|sys-process/vixie-cron}} : 

* Поддержка SELinux
* Поддержка PAM {{Path|/etc/security/limits.conf}} 
* Установка переменных среды в файлах заданий crontabs (PATH, SHELL, HOME, etc.)
* Каждый пользователь может иметь свой собственный файл заданий crontab; доступ контролируется файлами {{Path|cron.allow}} и {{Path|cron.deny}} 

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) это ответвление от vixie-cron сделанное дистрибутивом [https://fedorahosted.org/cronie/wiki Fedora]. Так как это ответвление, у данной программы имеется тот же набор возможностей, что и у изначального vixie-cron. Дополнительно, cronie имеет реализацию anacron, которую можно включить с помощью USE флага ''anacron''.

=== dcron (Dillon's Cron) ===

Dcron стремится быть простой, элегантной и безопасной реализацией программы cron. Он не разрешает установку переменных среды в файлах crontabs и все задания cron запускаются из {{Path|/bin/sh}} . Как и vixie-cron, каждый пользователь имеет свой собственный файл заданий crontab. 

Особенности {{Package|sys-process/dcron}} : 

* Быстрый, простой и свободный от излишних функций
* Доступ к файлу <code>crontab</code> ограничен группой cron, т.е. он не полагается на внешние средства

=== fcron ===

Fcron ориентирован на то, чтобы заменить собой vixie-cron и anacron. Он разработан для работы на системах, которые не работают непрерывно и включает в себя дополнительные особенности. Он имеет ограничения на запуск заданий, управление сериализацией работ, возможность назначить работам приятные в обращении значения и возможность запланировать запуск работ при загрузке системы. Просмотрите [http://fcron.free.fr/ главную страницу fcron], чтобы получить больше информации. 

Особенности {{Package|sys-process/fcron}} : 

* Разработан для работы на системах, которые не работают непрерывно, т.е. он может запустить задание после перезапуска, если оно было пропущено
* Установка переменных среды и множества других параметров в файлах заданий crontab
* Каждый пользователь может иметь свой собственный файл заданий crontab, доступ к которому контролируется файлами {{Path|cron.allow}} и {{Path|cron.deny}}
* Улучшенный синтаксис crontab с поддержкой множества других особенностей

=== bcron ===

Bcron - это новая система cron, разработанная с учетом безопасности ее работы. Чтобы добиться этого, система поделена на несколько отдельных программ, каждая из которых отвечает за отдельное задание, со строго контролируемым сообщением между ними. Пользовательский интерфейс представляет собой несущественное изменение интерфейсов для подобных систем (таких как vixie-cron), но внутренние части программы сильно отличаются. Чтобы получить больше информации, проконсультируйтесь с главной страницей bcron по адресу [http://untroubled.org/bcron http://untroubled.org/bcron] . 

Особенности {{Package|sys-process/bcron}}: 

* Легкая замена vixie-cron
* Ориентированность на множество процессов
* Нативная поддержка перехода на летнее время

=== anacron ===

Anacron - это не демон cron, это то, что работает в объединении с ним. Он выполняет команды по интервалам, указанным по дням, и не предполагает непрерывную работу системы; он запускает работы, которые были пропущены, пока система была отключена. Anacron обычно полагается на демон cron, чтобы запускаться каждый день.

== Использование cron ==

=== Установка ===

Выберите реализацию cron, которая Вам больше нравится, и установите ее командой emerge. 

{{Emerge|dcron}}

{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

Опционально, если Вы не устанавливали Fcron, Вы можете также пожелать установить Anacron. 

{{Emerge|anacron}}

{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== Системный файл crontab ===

Послеустановочные сообщения некоторых из этих пакетов cron могут сообщить чтобы Вы запустили <code>crontab /etc/crontab</code> . Файл {{Path|/etc/crontab}} - это ''системный crontab''. Установка cron может использовать его вместе с {{Package|sys-process/cronbase}} для запуска сценариев в {{Path|/etc/cron.{daily,hourly,weekly,monthly}}} . Заметьте, что только vixie-cron и cronie планируют задания в {{Path|/etc/crontab}} автоматически. Пользователям dcron и fcron потребуется запускать <code>crontab /etc/crontab</code> каждый раз при внесении изменений в {{Path|/etc/crontab}} . 

Пожалуйста, возьмите на заметку, что задания, запланированные в системном crontab могут не появиться в списке заданий cron, отображаемом командой <code>crontab -l</code> . 

Конечно, Вы можете не использовать какой-либо системный файл crontab вовсе, по вашему выбору. Если Вы выбрали dcron или fcron, ''не'' запускайте <code>crontab /etc/crontab</code> . Если Вы выбрали vixie-cron, cronie или bcron, вы можете закомментировать строчки в {{Path|/etc/crontab}} . 

{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Предоставление доступа к cron проверенным пользователям ===

Если Вы хотите, чтобы обычные пользователи, а не только root, имели доступ к демону cron, Вам потребуется прочитать этот раздел. В противном случае, Вы можете перейти к следующему разделу, [[#Scheduling_cron-jobs|Планирование заданий cron]] . 

{{Note/ru|Предоставление другим пользователям доступа к crontab не позволяет им запускать задания cron в качестве администратора. Если Вы хотите, чтобы пользователь смог редактировать файл crontab учетной записи root, Вам следует рассмотреть использование <code>sudo</code> . Пожалуйста, прочтите наше [[Sudo|Руководство по использованию Sudo в Gentoo]] для дальнейших подробностей.}}

Не имеет значения какой из пакетов cron Вы используете, если Вы хотите разрешить пользователю использование crontab, он сперва должен принадлежать к группе cron. В качестве примера, если Вы хотите добавить пользователя ''wepy'' в группу cron, Вы можете запустить: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/ru|При добавлении пользователя в группу cron, убедитесь что пользователь вышел и снова вошел в систему, чтобы изменения в группе возымели эффект.}}

Если Вы используете '''dcron''', все, что Вам требуется сделать - это предоставить пользователю доступ к crontab. Пользователи Dcron могут перейти к следующему разделу [[#Scheduling_cron-jobs|Планирование заданий cron]] , в то время как другим надо продолжить чтение. 

Если Вы используете '''fcron''', Вам надо отредактировать {{Path|/etc/fcron/fcron.deny}} и {{Path|/etc/fcron/fcron.allow}} . Наиболее безопасный способ - сперва запретить всех в файле {{Path|/etc/fcron/fcron.deny}} , а затем явно разрешить пользователей в {{Path|/etc/fcron/fcron.allow}} . 

{{Important/ru|Если ни файл {{Path|/etc/fcron/fcron.allow}} ни {{Path|/etc/fcron/fcron.deny}} не существуют, всем пользователям в группе cron будет разрешено использовать crontab. fcron поставляется с файлом {{Path|fcron.allow}} по умолчанию, который '''разрешает всем пользователям''', находящимся в группе cron, доступ к fcrontab.}}

{{Code/ru|Разрешения в fcron.deny|<pre>
all
</pre>
}}

Теперь, допустим у нас есть пользователь ''wepy'', которому необходимо управлять его собственными заданиями cron. Мы можем добавить его к {{Path|/etc/fcron/fcron.allow}}, как показано ниже: 

{{Code/ru|Разрешения в fcron.allow|<pre>
wepy
</pre>
}}

Если Вы выбрали '''vixie cron''' или '''cronie''', Вам, возможно, нужно просто отредактировать {{Path|/etc/cron.allow}}. 

{{Important/ru|Важно заметить что если существует только файл {{Path|/etc/cron.allow}} , то только пользователи, принадлежащие группе cron, перечисленные в нем, будут иметь доступ. Иначе, если существует только пустой файл {{Path|/etc/cron.deny}} , то доступ всем пользователям, принадлежащим группе cron будет разрешен! Не оставляйте файл {{Path|/etc/cron.deny}} пустым, если Вы не имеете {{Path|/etc/cron.allow}} .}}

Например, если Вы хотите разрешить доступ пользователю ''wepy'', Вам нужно добавить его в {{Path|/etc/cron.allow}} как показано ниже: 

{{Code/ru|Разрешения в /etc/cron.allow|<pre>
wepy
</pre>
}}

=== Планирование заданий cron ===

Процесс редактирования файлов crontab различен для каждого пакета, но все они поддерживают один и тот же простой набор команд: добавление и замещение файлов crontab, редактирование и удаление файлов crontab, и перечисление заданий cron в этих файлах. Следующий список показывает как можно запустить эти команды для каждого из пакетов. 

{| class="wikitable" style="text-align: left;" 
|- 
! Версия
! Редактировать crontab
! Удалить crontab
! Новый crontab
! Перечислить cron-jobs
|- 
| dcron
| <code>crontab -e</code>
| <code>crontab -d ''[user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|- 
| fcron
| <code>fcrontab -e</code>
| <code>fcrontab -r ''[user]'' </code>
| <code>fcrontab ''file'' </code>
| <code>fcrontab -l</code>
|- 
| vixie-cron, cronie & bcron
| <code>crontab -e</code>
| <code>crontab -r ''-u [user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|-
|}

{{Note/ru|Если не указано ни одного аргумента при использовании команды удаления, она удаляет файл crontab текущего пользователя.}}

{{Note/ru|Fcron также имеет символьную ссылку с <code>crontab</code> на <code>fcrontab</code>.}}

Хотя, перед тем как мы сможем использовать какие-либо из этих команд, Вам сперва нужно понять работу самого crontab. В каждой строке файла crontab нужно указать пять полей, связанных со временем выполнения заданий в следующем порядке: минуты (0-59), часы (0-23), дни месяца (1-31), месяцы (1-12), и дни недели (0-7, Понедельник - 1, Воскресенье - 0 и 7). Дни недели и месяцы могут быть указаны трехбуквенными сокращениями, например mon,tue,jan,feb, и т.д. Каждое поле также может указывать диапазон значений (напр. 1-5 или mon-fri), список значений, разделенный запятыми (напр. 1,2,3 или mon,tue,wed) или диапазон значений с ''шагом'' (напр. 1-6/2 как 1,3,5). 

Звучит немного запутанно, но на нескольких примерах Вы убедитесь, что это не так сложно, как кажется. 

{{Code/ru|Примеры|<pre>
# Запускать /bin/false каждую минуту круглый год
*     *     *     *     *        /bin/false
  
# Запускать /bin/false в 1:35 в mon,tue,wed (понедельник, вторник, среду) и 4-й день каждого месяца
35    1     4     *     mon-wed  /bin/false
  
# Запускать /bin/true в 22:25 на 2-е Марта
25    22    2     3     *        /bin/true
  
# Запускать /bin/false в 2:00 каждый Понедельник, Среду и Пятницу
0     2     *     *     1-5/2    /bin/false
</pre>
}}

{{Note/ru|Заметьте, что Вы указали определенные дни недели и дни месяца перед тем, как их сгруппировать. Если Вы укажете * только для одной категории, другие возьмут приоритет, в то время как * для обоих просто означает каждый день.}}

Чтобы протестировать то, что мы только что изучили, давайте разберем по шагам фактический ввод нескольких заданий cron. Для начала, создайте файл, названный {{Path|crons.cron}} и приведите его к следующему виду: 

{{RootCmd|nano crons.cron|output=<pre>
#Минуты  Часы  Дни   Месяцы  Дни недели
10     3      1      1       *       /bin/echo "Мне действительно не нравится cron"
30     16     *      1,2     *       /bin/echo "Мне нравится cron немного"
*      *      *      1-12/2  *       /bin/echo "Мне нравится cron в самом деле"
</pre>
}}

Теперь мы можем добавить этот crontab в систему с помощью команды ''Новый crontab'' из таблицы выше. 

{{RootCmd|crontab crons.cron}}


{{Note/ru|На самом деле, Вы не увидите результата работы этих echo-команд, если только Вы не используете перенаправление.}}

Чтобы проверить запланированные задачи cron, мы используем соответственную команду ''Перечислить cron-jobs'' из таблицы выше. 

{{RootCmd|crontab -l}}

Вы должны увидеть список, напоминающий {{Path|crons.cron}} . Если этого не произошло, возможно, Вы использовали неверную команду для ввода нового файла crontab. 

Этот файл заданий crontab должен выводить "Мне нравится cron в самом деле" каждую минуту каждый час каждого дня каждого второго месяца. Очевидно, Вам следует это делать только если Вы любите cron в самом деле. Этот crontab также выведет "Мне нравится cron немного" в 16:30 каждый день в Январе и Феврале. Он также будет выводить "Мне действительно не нравится cron" в 3:10 1-го Января. 

Если Вы используете anacron, Вам следует продолжить чтение этого раздела. Иначе, перейдите к следующей главе [[#Editing_crontabs|Редактирование crontabs]] . 

Пользователи Anacron, возможно, захотят отредактировать {{Path|/etc/anacrontab}} . Этот файл имеет четыре поля: количество дней перед каждым запуском, задержка в минутах после которой он запускает задания, имя задания, и команда для запуска. 

Например, чтобы заставить его запускать команду <code>echo "Мне нравится anacron"</code> каждые 5 дней и 10 минут после того как запущен anacron, Вам следует ввести следующее: 

{{Code/ru|/etc/anacrontab|<pre>
5 10 wasting-time /bin/echo "Мне нравится anacron"
</pre>
}}

Anacron завершается после того, как сделаны все задания, перечисленные в файле anacrontab. Поэтому, если мы хотим, чтобы он проверял эти задания каждый день, нам потребуется использовать cron. Инструкции в конце следующего раздела покажут как это сделать.

=== Редактирование crontabs ===

Все же, давайте будем реалистами; Вы не хотите, чтобы система сообщала Вам как сильно Вы любите cron каждую минуту. Как шаг вперед, давайте удалим этот crontab, используя соответствующую команду ''Удалить crontab'' из таблицы выше. Мы также перечислим задания cron после этого, чтобы убедиться что оно работает. 

{{RootCmd|crontab -d
|crontab -l}}

Вы должны увидеть ''no cron jobs'' в качестве результата работы команды <code>crontab -l</code> . Если Вы видите перечисленные задания, это значит, что мы не смогли удалить crontab, и что Вам придется удостовериться, что Вы использовали правильную команду ''Удалить'' из своего пакета cron. 

Теперь, когда мы можем начать с чистого листа, давайте поместим что-нибудь полезное в файл crontab принадлежащий '''root'''. Большинство пожелает запускать команду <code>updatedb</code> еженедельно, чтобы убедиться, что <code>mlocate</code> работает как надо. Чтобы добавить это в crontab, давайте сначала отредактируем файл {{Path|crons.cron}} заново, чтобы он принял следующий вид: 

{{Code/ru|Настоящий crontab|<pre>
22 2 * * 1    /usr/bin/updatedb
</pre>
}}

Это заставит cron запускать updatedb в 2:22 A.M. утром в понедельник каждую неделю. Теперь, вы должны ввести этот crontab с помощью команды ''Новый crontab'' из таблицы выше, и проверить список снова. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Теперь, давайте предположим, что вы также хотите добавить команду <code>emerge --sync</code> к Вашему ежедневному расписанию. Вы можете сделать это сперва отредактировав файл {{Path|crons.cron}} и затем используя команду <code>crontab crons.cron</code> так, как мы делали раньше, или Вы можете использовать соответствующую команду ''Редактировать crontab'' из таблицы выше. Это предоставляет Вам способ редактировать пользовательские crontab на месте, без зависимости от внешних файлов, наподобие {{Path|crons.cron}} . 

{{RootCmd|crontab -e}}

Это должно открыть Ваш пользовательский crontab с помощью редактора. Мы хотим, чтобы команда <code>emerge --sync</code> работала каждый день в 6:30 A.M., поэтому мы придадим ей следующий вид: 

{{Code/ru|Настоящий crontab|<pre>
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (если Вы используете anacron, добавьте эту строчку)
30 7 * * *    /usr/sbin/anacron -s
</pre>
}}

И снова, проверьте список заданий cron, так же, как мы делали в предыдущих примерах, чтобы убедиться что задания запланированы. Если все они перечислены там, то Вы в полном порядке.

== Использование cronbase ==

Как упомянуто ранее, все доступные пакеты cron зависят от {{Package|sys-process/cronbase}}. Пакет cronbase создает {{Path|/etc/cron.{hourly,daily,weekly,monthly}}} , и сценарий, называемый <code>run-crons</code> . Вы можете заметить, что {{Path|/etc/crontab}} по умолчанию содержит что-то в этом роде: 

{{Code/ru|Системный crontab по умолчанию|<pre>
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>
}}

Чтобы избежать углубления в излишние подробности, мы просто можем предположить, что эти команды будут фактически запускать ваши сценарии на каждый час, день, неделю и месяц. Этот метод планирования задач cron имеет несколько важных преимуществ: 

* Они будут запускаться даже когда Ваш компьютер был выключен, в то время, когда им было необходимо выполниться
* Облегчается работа сопроводителей пакета по размещению сценариев в тех хорошо определенных местах
* Вы точно знаете где хранятся ваши задачи cron и crontab, что делает легким процесс создания резервных копий и восстановления этой части Вашей системы

{{Note/ru|И снова, полезно отметить, что vixie cron, cronie и bcron автоматически считывают содержимое файла {{Path|/etc/crontab}} , в то время как dcron и fcron нет. Пожалуйста прочитайте раздел [[#System_crontab|Системный файл crontab]] , чтобы изучить это подробнее.}}

== Использование anacron ==

Как было упомянуто ранее, anacron используется на системах, не предназначенных для непрерывной работы (подобно большинству настольных компьютеров). Его файл конфигурации по умолчанию, {{Path|/etc/anacrontab}}, обычно выглядит так:

{{File|/etc/anacrontab||<pre>
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
</pre>}}

Как видите, главным различием между этим файлом crontab и другими является то, что у anacron-а нет фиксированной даты/часа для планирования работы, но только период между каждым запуском. Когда anacron запущен, он проверит содержимое набора файлов в {{Path|/var/spool/anacron}} и вычислит, не истекла ли соответствующая запись в файле конфигурации с момента предыдущего запуска. Если это произошло, то команда вызывается снова.

В заключение, важно закомментировать какие-либо совпадающие записи в любом другом cron, установленном на системе, так, как в следующем примере с файлом crontab программы vixie-cron:

{{File|/etc/crontab||<pre>
# для vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Глобальные переменные
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# проверять сценарии в cron.hourly, cron.daily, cron.weekly и cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
</pre>}}

Без этого, части daily, weekly и monthly будут выполняться - в разное время - как демоном cron, так и anacron, приводя к возможным повторениям выполнения работ.

== Завершающие заметки ==

Запомните, каждый пакет cron отличается от других, и диапазон особенностей сильно разнится. Проконсультируйтесь с man-страницами для crontab, fcrontab или anacrontab, в зависимости от того, что вы используете. 

Удачи! 

=== Устранение проблем ===

Если у Вас проблемы с нормальной работой cron, вы можете просмотреть этот быстрый проверочный список. 

==== Cron запущен? ====

Запустите <code>ps ax | grep cron</code> и убедитесь, что он появляется в результате работы команды.

==== Cron работает? ====

Попробуйте следующее:

{{Code/ru|Пример файла crontab для того, чтобы проверить работает ли cron|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own
</pre>}}

Затем проверьте модифицируется ли файл {{Path|/file_you_own}} периодически.

==== Работает ли Ваша команда? ====

То же самое, что и раньше, но также перенаправьте стандартный вывод ошибок:

{{Code/ru|Пример файла crontab для того, чтобы проверить работает ли cron|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own 2>&amp;1
</pre>}}

==== Может ли cron запустить Ваше задание ====

Проверьте лог-файл cron, обычно {{Path|/var/log/cron.log}} или {{Path|/var/log/messages}}, на ошибки.

==== Появляются ли какие-нибудь файлы {{Path|dead.letter}} ====

Cron обычно отправляет сообщение в случае проблемы; проверьте Ваш mail и также файл {{Path|~/dead.letter}} .

== Альтернативы заданиям Cron ==

Some hosting companies don’t allow access to cron, but you can find a lot of cron jobs alternatives which are free or paid:

* [https://www.easycron.com/ EasyCron]

== Благодарности ==

Мы хотели бы поблагодарить следующих авторов и редакторов за их вклад в это руководство:


* Eric Brown
* Xavier Neys
* nightmorph


[[Category:Core system]]
[[Category:Daemons]]
