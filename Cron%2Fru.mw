<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Это руководство описывает установку и использование cron.

== Основные понятия cron ==

=== Что делает cron? ===

Cron - это программа-демон, запускающая запланированные задания, основываясь на результате работы команды <code>crontab</code>. Она выполняет эти задания просыпаясь каждую минуту и проверяя, есть ли какие-нибудь задания cron (cron-jobs) для запуска в каком-либо из файлов заданий crontab пользователя. 

{{Note/ru|Заметьте что ''crontab'' - это как имя списка заданий cron, так и имя команды для редактирования этого списка.}}

=== Cron на практике ===

Существует несколько реализаций программы cron, доступных через Portage. Все они предлагают сходный интерфейс, а именно, использование команды <code>crontab</code> или ей подобных. Также есть родственная утилита, называемая Anacron, которая предназначена для работы с cron-ом на системах, которые не работают непрерывно. 

Также следует заметить, что не все доступные пакеты cron зависят от <code>sys-process/cronbase</code> . Этот пакет не зависит технически от какого-либо из пакетов cron, но он предлагает сходную с cron-ом функциональность, которую оценят многие из пользователей. 

Перед тем, как начать работу с cron-ом, Вам следует выбрать какую из его реализаций Вы хотите использовать. Для Вашего удобства, мы собрали информацию о каждой из них ниже. 

== Какая программа cron Вам подходит? ==

=== Vixie cron ===

Vixie cron - это полноценная реализация программы cron, основанная на SysV cron. Каждый пользователь имеет свой собственный файл заданий crontab, и ему разрешается указывать переменные среды внутри этого файла. В отличие от других видов cron, он также предлагает поддержку SELinux и PAM. Он поддерживает меньшее количество архитектур чем Dcron, но большее по сравнению с Fcron. 

Особенности <code>sys-process/vixie-cron</code> : 

* Поддержка SELinux
* Поддержка PAM {{Path|/etc/security/limits.conf}} 
* Установка переменных среды в файлах заданий crontabs (PATH, SHELL, HOME, etc.)
* Каждый пользователь может иметь свой собственный файл заданий crontab; доступ контролируется файлами {{Path|cron.allow}} и {{Path|cron.deny}} 

=== Dillon's Cron ===

Dcron стремится быть простой, элегантной и безопасной реализацие программы cron. Он не разрешает установку переменных среды в файлах crontabs и все задания cron запускаются из {{Path|/bin/sh}} . Как и Vixie cron, каждый пользователь имеет свой собственный файл заданий crontab. 

Особенности <code>sys-process/dcron</code> : 

* Быстрый, простой и свободный от излишних функций
* Доступ к файлу <code>crontab</code> ограничен группой cron, т.е. он не полагается на внешние средства

=== Fcron ===

Fcron ориентирован на то, чтобы заменить собой Vixie cron и Anacron. Он разработан для работы на системах, которые не работают непрерывно и включает в себя дополнительные особенности. Он имеет ограничения на запуск заданий, управление сериализацией работ, возможность назначить работам приятные в обращении значения и возможность запланировать запуск работ при загрузке системы. Просмотрите [http://fcron.free.fr/ главную страницу fcron], чтобы получить больше информации. 

Особенности <code>sys-process/fcron</code> : 

* Разработан для работы на системах, которые не работают непрерывно, т.е. он может запустить задание после перезапуска, если оно было пропущено
* Установка переменных среды и множества других параметров в файлах заданий crontab
* Каждый пользователь может иметь свой собственный файл заданий crontab, доступ к которому контролируется файлами cron.allow и cron.deny
* Улучшенный синтаксис crontab с поддержкой множества других особенностей

=== bcron ===

bcron - это новая система cron, разработанная с учетом безопасности ее работы. Чтобы добиться этого, система поделена на несколько отдельных программ, каждая из которых отвечает за отдельное задание, со строго контролируемым сообщением между ними. Пользовательский интерфейс представляет собой несущественное изменение интерфейсов для подобных систем (таких как vixie-cron), но внутренние части программы сильно отличаются. Чтобы получить больше информации, проконсультируйтесь с главной страницей bcron по адресу [http://www.gentoo.org/ http://untroubled.org/bcron/] . 

Особенности <code>sys-process/bcron</code> : 

* Легкая замена vixie-cron
* Ориентированность на множество процессов
* Нативная поддержка перехода на летнее время

=== Anacron ===

Anacron - это не программа-демон, это то, что работает в объединении с ней. Он выполняет команды по интервалам, указанным по дням, и не предполагат непрерывную работу системы; он запускает работы, которые были пропущены, пока система была отключена. Anacron обычно полагается на демон cron, чтобы запускаться каждый день. 

== Использование cron ==

=== Установка ===

Выберите реализацию cron, которая Вам больше нравится, и установите ее командой emerge. 

{{Emerge|dcron}}

{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

Опционально, если Вы не устанавливали Fcron, Вы можете также пожелать установить Anacron. 

{{Emerge|anacron}}

{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== Системный файл crontab ===

Постустановочные сообщения некоторых из этих пакетов cron могут сообщить чтобы Вы запустили <code>crontab /etc/crontab</code> . Файл {{Path|/etc/crontab}} - это ''системный crontab''. Установка cron может использовать его вместе с <code>sys-process/cronbase</code> для запуск сценариев в {{Path|/etc/cron.{daily,hourly,weekly,monthly}}} . Заметьте, что только Vixie-cron планирует задания в {{Path|/etc/crontab}} автоматически. Пользователям Dcron и Fcron потребуется запускать <code>crontab /etc/crontab</code> каждый раз при внесении изменений в {{Path|/etc/crontab}} . 

Пожалуйста, возьмите на заметку, что задания, запланированные в системном crontab могут не появиться в списке заданий cron отображаемом командой <code>crontab -l</code> . 

Конечно, Вы можете не использовать какой-либо системный файл crontab вовсе, по вашему выбору. Если Вы выбрали Dcron или Fcron, ''не'' запускайте <code>crontab /etc/crontab</code> . Если Вы выбрали vixie-cron или bcron, вы можете закомментировать строчки в {{Path|/etc/crontab}} . 

{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Предоставление доступа к cron проверенным пользователям ===

Если Вы хотите, чтобы обычные пользователи, а не только root, имели доступ к демону cron, Вам потребуется прочитать этот раздел. В противном случае, Вы можете перейти к следующему разделу, [[#scheduling]] . 

{{Note/ru|Предоставление другим пользователям доступа к crontab не позволяет им запускать задания cron в качестве администратора. Если Вы хотите, чтобы пользователь смог редактировать файл crontab учетной записи root, Вам следует рассмотреть использование <code>sudo</code> . Пожалуйста, прочтите наше [http://www.gentoo.org//doc/ru/sudo-guide.xml Руководство по использованию Sudo в Gentoo] для дальнейших подробностей.}}

Не имеет значения какой из пакетов cron Вы используете, если Вы хотите разрешить пользователю использование crontab, он сперва должен принадлежать к группе cron. В качестве примера, если Вы хотите добавить пользователя ''wepy'' в группу cron, Вы можете запустить: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/ru|При добавлении пользователя в группу cron, убедитесь что пользователь вышел и снова вошел в систему, чтобы изменения в группе возымели эффект.}}

If you're using '''Dcron''' , that's all you have to do to give a user access to crontab. Dcron users may proceed to the next section [[#scheduling]] , all others will want to keep reading. 

If you're using '''Fcron''' , you'll want to edit {{Path|/etc/fcron/fcron.deny}} and {{Path|/etc/fcron/fcron.allow}} . The most secure way is to first deny everyone in {{Path|/etc/fcron/fcron.deny}} , and then explicitly allow users in {{Path|/etc/fcron/fcron.allow}} . 

{{Important|If neither {{Path|/etc/fcron/fcron.allow}} nor {{Path|/etc/fcron/fcron.deny}} exist, all users in the cron group will be allowed to use crontab . fcron comes with a default {{Path|fcron.allow}} which'''allows all users''' in the cron group access to fcrontab.}}

{{Code|Permissions in fcron.deny|<pre>
all
</pre>
}}

Now, say we have a user ''wepy'' who should be able to schedule his own cron-jobs. We would add him to {{Path|/etc/fcron/fcron.allow}} as follows: 

{{Code|Permissions in fcron.allow|<pre>
wepy
</pre>
}}

If you chose '''Vixie cron''' , you'll probably just want to edit {{Path|/etc/cron.allow}} . 

{{Important|It is important to note that if only {{Path|/etc/cron.allow}} exists, then only the cron group users listed there will have access. Otherwise,  if only an empty {{Path|/etc/cron.deny}} exists, then all cron group users will be allowed! Do not leave an empty {{Path|/etc/cron.deny}} if you have no {{Path|/etc/cron.allow}} .}}

For example, if you wanted to allow access to the user ''wepy'' , you would add him to {{Path|/etc/cron.allow}} as follows: 

{{Code|Permissions in /etc/cron.allow|<pre>
wepy
</pre>
}}

=== Scheduling cron-jobs ===

The process of editing crontabs is different for each package, but they all support the same basic set of commands: adding and replacing crontabs, editing crontabs, deleting crontabs, and listing cron-jobs in crontabs. The following list shows you how to run those commands for each package. 

{| class="wikitable" style="text-align: left;" 
|- 
! Version
! Edit crontab
! Remove crontab
! New crontab
! List cron-jobs
|- 
| dcron
| <code>crontab -e</code>
| <code>crontab -d ''[user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|- 
| fcron
| <code>fcrontab -e</code>
| <code>fcrontab -r ''[user]'' </code>
| <code>fcrontab ''file'' </code>
| <code>fcrontab -l</code>
|- 
| vixie-cron & bcron
| <code>crontab -e</code>
| <code>crontab -r ''-u [user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|-
|}

{{Note|When using the remove command, if no argument is supplied, it deletes the current user's crontab.}}

{{Note|Fcron also has a symlink from <code>crontab</code> to <code>fcrontab</code> .}}

Before we can use any of these commands though, you first need to understand the crontab itself. Each line in a crontab needs to specify five time fields in the following order: the minutes (0-59), hours (0-23), days of the month (1-31), months (1-12), and days of the week (0-7, Monday is 1, Sunday is 0 and 7). The days of the weeks and months can be specified by three-letter abbreviations like mon, tue, jan, feb, etc. Each field can also specify a range of values (e.g. 1-5 or mon-fri), a comma separated list of values (e.g. 1,2,3 or mon,tue,wed) or a range of values with a ''step'' (e.g. 1-6/2 as 1,3,5). 

That sounds a little confusing, but with a few examples, you will see that it is not as complicated as it sounds. 

{{Code|Examples|<pre>
## # Run /bin/false every minute year round
*     *     *     *     *        /bin/false
  
## # Run /bin/false at 1:35 on the mon,tue,wed and the 4th of every month
35    1     4     *     mon-wed  /bin/false
  
## # Run /bin/true at 22:25 on the 2nd of March
25    22    2     3     *        /bin/true
  
## # Run /bin/false at 2:00 every Monday, Wednesday and Friday
0     2     *     *     1-5/2    /bin/false
</pre>
}}

{{Note|Notice how you have to specify specific days of the week and days of the month before they are combined. If you have * for only one of them, the other takes precedence, while * for both just means every day.}}

To test what we have just learned, let's go through the steps of actually inputting a few cron-jobs. First, create a file called {{Path|crons.cron}} and make it look like the this: 

{{RootCmd|nano crons.cron|output=<pre>
## #Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
</pre>
}}

Now we can add that crontab to the system with the "new command" from the table above. 

{{RootCmd|crontab crons.cron}}


{{Note|You won't actually see the output from these echo commands unless you use redirection.}}

To verify the cron-jobs you scheduled, we'll use the proper ''list command'' from the table above. 

{{RootCmd|crontab -l}}

You should see a list resembling {{Path|crons.cron}} , if not, maybe you used the wrong command to input your new crontab. 

This crontab should echo "I really like cron" every minute of every hour of every day every other month. Obviously you would only do that if you really liked cron. The crontab will also echo "I like cron a little" at 16:30 every day in January and February. It will also echo "I don't really like cron" at 3:10 on the January 1st. 

If you are using Anacron, you should keep reading this section. Otherwise, proceed to the next section on [[#editing]] . 

Anacron users will want to edit {{Path|/etc/anacrontab}} . This file has four fields: the number of days between each run, the delay in minutes after which it runs, the name of the job, and the command to run. 

For example, to have it run <code>echo "I like anacron"</code> every 5 days, 10 minutes after Anacron is started, you would have: 

{{Code|/etc/anacrontab|<pre>
5 10 wasting-time /bin/echo "I like anacron"
</pre>
}}

Anacron exits after all of the jobs in anacrontab are done, so if we want it to check these jobs every day, we will need to use cron. The instructions at the end of the next section tell you how to do that. 

=== Editing crontabs ===

Let's be realistic though, you don't want your system telling you how much you like cron every minute. As a step forward, let's remove that crontab using the corresponding ''remove command'' from the table above. We will also list the cron-jobs after, just to make sure it worked. 

{{RootCmd|crontab -d
|crontab -l}}

You should see no cron-jobs in the output from <code>crontab -l</code> . If you do see jobs listed, that means we failed to remove the crontab, and that you should make sure that you used the correct ''remove command'' for your cron package. 

Now that we have a clean slate, let's put something useful into the '''root''' crontab. Most people will want to run <code>updatedb</code> on a weekly basis to make sure that <code>mlocate</code> works properly. To add that to your crontab, let's first edit {{Path|crons.cron}} again so that it looks like the following: 

{{Code|A real crontab|<pre>
22 2 * * 1    /usr/bin/updatedb
</pre>
}}

That would make cron run updatedb at 2:22 A.M. on Monday morning every week. You should now input the crontab with the proper ''new command'' from the table above, and check the list again. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Now let's say that you also want to add <code>emerge --sync</code> to your daily schedule. You could do this by first editing {{Path|crons.cron}} and then using <code>crontab crons.cron</code> just as we did before, or you could use the proper ''edit command'' from the table above. This gives you a way to edit your user's crontab in situ, without depending on external files like {{Path|crons.cron}} . 

{{RootCmd|crontab -e}}

That should open your user's crontab with an editor. We want to have <code>emerge --sync</code> run every day at 6:30 A.M., so we'll make it look something like this: 

{{Code|A real crontab|<pre>
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if you're using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
</pre>
}}

Again, check the cron-jobs list as we did in the previous examples to make sure the jobs are scheduled. If they are all there, then you're all set. 

== Using cronbase ==

As mentioned earlier, all of the available cron packages depend on <code>sys-process/cronbase</code> . The cronbase package creates {{Path|/etc/cron.{hourly,daily,weekly,monthly}}} , and a script called <code>run-crons</code> . You might have noticed that the default {{Path|/etc/crontab}} contains something like this: 

{{Code|Default system crontab|<pre>
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>
}}

To avoid going into much detail, we can just assume that these commands will effectively run your hourly, daily, weekly and monthly scripts. This method of scheduling cron-jobs has some important advantages: 

* They will run even if your computer was off when they were scheduled to run
* It is easy for package maintainers to place scripts in those well defined places
* You know exactly where your cron-jobs and your crontab are stored, making it easy for you to backup and restore this part of your system

{{Note|Again, it is useful to point out that Vixie cron and bcron automatically read {{Path|/etc/crontab}} , while dcron and fcron do not. Please read the [[#systemtab]] section to learn more about this.}}

== Final Notes ==

Remember, each cron package is different and the range of features varies greatly. Be sure to consult the man pages for crontab, fcrontab or anacrontab, depending on what you use. 

Good luck! 

=== Troubleshooting ===

If you're having problems getting cron to work properly, you might want to go through this quick checklist. 

==== Is cron running? ====

Run <code>ps ax | grep cron</code> and make sure it shows up!

==== Is cron working? ====

Try the following:

{{Code|crontab to see if cron is running|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own
</pre>}}

Then check if {{Path|/file_you_own}} is modified periodically.

==== Is your command working? ====

Same as before, but perhaps redirect the standard error output as well:

{{Code|crontab to verify application runs|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own 2>&amp;1
</pre>}}

==== Can cron run your job? ====

Check the cron log, usually {{Path|/var/log/cron.log}} or {{Path|/var/log/messages}} for errors

==== Are there any {{Path|dead.letter}}s? ====

cron usually sends mail when there's a problem; check your mail and also look for {{Path|~/dead.letter}} .

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Eric Brown
* Xavier Neys
* nightmorph

[[Category:Core system]]
[[Category:Daemons]]
