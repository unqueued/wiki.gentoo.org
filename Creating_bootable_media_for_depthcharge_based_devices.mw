Depthcharge<ref>[https://chromium.googlesource.com/chromiumos/platform/depthcharge Depthcharge source code],[https://chromium.googlesource.com Git at Google], Retrieved on February 25th, 2019</ref>, the ChromeOS bootloader, is one of coreboot’s (and also libreboot’s) available payloads<ref>[https://www.coreboot.org/Payloads#Depthcharge Depthcharge payload],[https://doc.coreboot.org/payloads.html Coreboot payloads], Retrieved on February 25th, 2019</ref> and as such mostly found on chromebooks. This guide shows how to create bootable media, e.g. an installation media USB drive, for those devices.
{{Note|So far these instructions have only been tested on the ARMv7-A based [[Asus Chromebook C201]].}}

== Installing required tools ==

The guide assumes that the current platform is a Gentoo Linux one. The majority of steps however can be performed from any distribution, just translate the Gentoo-specific way of doing things (such as installing software) to the other distribution's practices.
{{Note|Throughout this guide that computer will be referred to as the <i>host system</i> whereas the device that shall be booted will be referred to as the <i>target device</i>.}}

Install {{Package|dev-embedded/u-boot-tools}}, {{Package|sys-apps/dtc}}, {{Package|sys-block/parted}} and {{Package|sys-boot/vboot-utils}}

{{RootCmd
|emerge –ask dev-embedded/u-boot-tools sys-apps/dtc sys-block/parted sys-boot/vboot-utils
}}

Some drivers might also require proprietary firmware available from {{Package|sys-kernel/linux-firmware}}.

== Preparing the partitions ==

Throughout the following steps the term “sd*” needs to be replaced with the term currently corresponding to the bootable media – in case of a SD Card something like “mmcblkXp”. In any case the “*” represents a letter and the “X” represents a number. This is the recommended partition layout and size:
{| class="wikitable"
|-
| /dev/sd*1 || Kernel partition (similar to a traditional boot partition) || 64MiB
|-
| /dev/sd*2 || Root partition || available space
|}


{{Warning|This will delete all data on /dev/sd*}}

{{RootCmd
|parted /dev/sd* mklabel gpt
|parted -a optimal /dev/sd* unit mib mkpart Kernel 1 65
|parted -a optimal /dev/sd* unit mib mkpart Root 65 100%
}}

Depthcharge requires some specific parameters to be set. These signal the bootloader the presence of a valid kernel partition:

{{RootCmd
|cgpt add -i 1 -t kernel -S 1 -T 5 -P 15 /dev/sd*
}}

Preparing the Root partition

{{RootCmd
|mkfs.ext4 /dev/sd*2
|mount /dev/sd*2 /mnt 
}}

==Install a Gentoo rootfs==

Get a stage 3 tarball from the main website's [https://www.gentoo.org/downloads/#other-arches download section] that is suitable for the architecture (e.g. {{c|ARMv7a HardFP}}) of the target device and extract it to /mnt/

{{RootCmd
|tar xvpf /PATH/TO/STAGE3-TARBALL -C /mnt/
}}

Switch the bootable media’s Gentoo to unstable to ensure the availability of the latest versions of vboot-utils and u-boot-tools and speed up the bootable media. Replace {{c|TARGETARCH}} with the target device's architecture, e.g. {{c|arm}} for ARMv7-A based devices.

{{RootCmd
|echo "ACCEPT_KEYWORDS{{=}}\"~TARGETARCH\"" >> /mnt/etc/portage/make.conf
|echo "MAKEOPTS{{=}}\"-j4\"" >> /mnt/etc/portage/make.conf
}}

Set the bootable media’s root password to “gentoo”, cf. [[TrimSlice#Setting_the_default_root_password|Setting the default root password]]

{{RootCmd
|sed -i 's/root\:\*/root\:\$6\$I9Q9AyTL\$Z76H7wD8mT9JAyrp\/vaYyFwyA5wRVN0tze8pvM\.MqScC7BBm2PU7pLL0h5nSxueqUpYAlZTox4Ag2Dp5vchjJ0/' /mnt/etc/shadow
}}

Finish this step by unmounting the bootable media’s rootfs

{{RootCmd
|umount /mnt
}}

==Create a cross-compiler==

{{Important|You can skip this section if the host system's architecture is the same as the target system's. This step is only necessary if the host system is <b>not</b> based on the same architecture as the target device.}}
{{Note|The following instructions are very specific to Gentoo, i.e. if the host system runs a different Linux distribution the respective distribution’s documentation on cross-compilation should be consulted instead.}}

Create a local overlay for the cross toolchain, cf. [[Custom_repository#Crossdev|Custom repository for crossdev]]:

{{RootCmd
|mkdir -p /usr/local/portage-crossdev/{profiles,metadata}
|echo 'crossdev' > /usr/local/portage-crossdev/profiles/repo_name
|echo 'masters {{=}} gentoo' > /usr/local/portage-crossdev/metadata/layout.conf
|chown -R portage:portage /usr/local/portage-crossdev
}}

Then instruct Portage and crossdev to use this overlay:

{{FileBox|filename=/etc/portage/repos.conf/crossdev.conf|lang=ini|1=
[crossdev]
location = /usr/local/portage-crossdev
priority = 10
masters = gentoo
auto-sync = no
}}

Install crossdev and create the cross toolchain. Replace {{c|TUPLE}} with the [[Embedded_Handbook/Tuples|system tuple]] fitting the target architecture, e.g. {{c|arm-linux-gnueabihf}} for ARMv7-A based devices.

{{RootCmd
|emerge --ask sys-devel/crossdev
|crossdev --stable --target TUPLE
}}

Finally prepare cross-compiling the kernel

Replace {{c|TARGETARCH}} with the target device's architecture, e.g. {{c|arm}} for ARMv7-A based devices.

{{Cmd
|export ARCH{{=}}TARGETARCH
}}

Replace {{c|TUPLE}} with the [[Embedded_Handbook/Tuples|system tuple]] fitting the target architecture, e.g. {{c|arm-linux-gnueabihf}} for ARMv7-A based devices. Mind the trailing "<b>-</b>"!

{{Cmd
|export CROSS_COMPILE{{=}}TUPLE-
}}

==Configuring the Linux kernel==

Configure {{Package|sys-kernel/gentoo-sources}} as usual, cf. [[Handbook:AMD64/Installation/Kernel|Configuring the Linux kernel]]. If all necessary drivers are built into the kernel (i.e. no loadable modules are needed to boot the target device) there's no need to have an initramfs, which keeps things simple. Especially if the host system's architecture differs from the target device's architecture creating an initramfs would at least involve cross-compiling busybox.

Build the kernel and device tree binarys:

{{Cmd
|make -j5 zImage dtbs
}}

From the kernel build directory, copy the zImage and the target device's device tree to the desired working directory. Replace {{c|DEVICETREE}} with the filename of the target device's device tree, e.g. {{c|rk3288-veyron-speedy.dtb}} for the Asus Chromebook C201 (which is based on Rockchip's RK3288 CPU and a board with the code-name "veyron-speedy"):

{{Cmd
|cp -a arch/arm/boot/zImage /PATH/TO/ARBITRARY_WORKING_DIRECTORY
|cp -a arch/arm/boot/dts/DEVICETREE /PATH/TO/ARBITRARY_WORKING_DIRECTORY
}}

Change to the desired working directory:

{{Cmd
|cd /PATH/TO/ARBITRARY_WORKING_DIRECTORY
}}


Create the configuration file ("gentoo.its") for the FIT image with the following content. Again replace {{c|DEVICETREE}} with the filename of the target device's device tree binary, e.g. {{c|rk3288-veyron-speedy.dtb}} for the Asus Chromebook C201.

{{FileBox|filename=gentoo.its|lang=bash|1=
/dts-v1/;

/ {
    description = "Linux kernel image with one or more FDT blobs";
    #address-cells = <1>;
    images {
        kernel@1{
            description = "vmlinuz";
            data = /incbin/("zImage");
            type = "kernel_noload";
            arch = "arm";
            os = "linux";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
        fdt@1{
            description = "dtb";
            data = /incbin/("DEVICETREE");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
    };
    configurations {
        default = "conf@1";
        conf@1{
            kernel = "kernel@1";
            fdt = "fdt@1";
        };
    };
};
}}

Pack the FIT image:

{{Cmd
|sync
|mkimage -f gentoo.its gentoo.itb
}}

Create a file ("kernel.flags") for the CMDLINE parameters:

{{Important|The term "sd*" needs to be replaced with the term corresponding to the bootable media <b>in future</b>, i.e. when booting on the target system. This depends entirely on the target device, but "sda" or "sdb" respectively "mmcblk0p" or "mmcblk1p" are good guesses.}}

{{FileBox|filename=kernel.flags|lang=bash|1=
console=tty1 root=/dev/sd*2 rootfstype=ext4 rootwait rw
}}

Sign and pack the kernel:

{{Cmd
|sync
|futility --debug vbutil_kernel --arch arm --version 1 --keyblock /usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --bootloader kernel.flags --config kernel.flags --vmlinuz gentoo.itb --pack vmlinuz.signed
}}


Install the kernel to the kernel partition. Now the term “sd*” needs to be replaced with the term <b>currently</b> corresponding to the bootable media – in case of a SD Card something like “mmcblkXp”. In any case the “*” represents a letter and the “X” represents a number.

{{RootCmd
|dd vmlinuz.signed of{{=}}/dev/sd*1
}}

== References ==
