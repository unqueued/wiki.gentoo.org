This article [[Article description::provides instructions on encrypting a home partition using the ext4 filesystem built-in encryption.]]

== Overview ==

Ext4 supports file based encryption, which was more suitable for my needs. Better performance and ability to exclude folders from encryption on one filesystem (open-source project repositories etc. aren't required to be encrypted)

This scenario will work only with single user computer (specified in systemd service file) and Wayland is not supported ''(since it won't run Xsession file before touching /home/$user directory)''

== Basics ==

https://wiki.archlinux.org/index.php/ext4#Using_file-based_encryption you can find them here.

== Decryption before login ==

Since ext4 uses kernel keyring, which is divided into '''session''' keyring (every time you login into console / X / Wayland) and '''user''' keyring (persist for user, but only as user keep logged in).

=== systemd ===

So you'll need to run systemd unit before login screens (impossible with systemd). So, I just cut tty6 for password prompt.

No need to use all 6 VT's.. So you need modify {{Path|logind.conf}} and reduce number of reserved VTs.

{{FileBox|filename=/etc/systemd/logind.conf|lang=ini|1=
...
[Login]
NAutoVTs=3
ReserveVT=1
...
}}

Create systemd service 

{{FileBox|filename=/etc/systemd/system/decrypt.service|lang=ini|1=
[Unit]
Description=Decrypt
Wants=multi-user.target

[Service]
Type=oneshot
User=REPLACE_BY_YOUR_USERNAME
ExecStartPre=/usr/bin/sleep 6
ExecStartPre=/usr/bin/chvt 6
ExecStart=/bin/bash /usr/local/sbin/decrypt.sh
ExecStartPost=/usr/bin/sleep infinity
KeyringMode=inherit
StandardInput=tty-force
TTYPath=/dev/tty6
TTYReset=yes
TTYVHangup=yes
TTYVTDisallocate=yes
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target}}

and script - wait for display manager loads itself, then switch to VT 6, ask password and save it to @s (session), set permissions to allow link it to @u (user keyring) and change back to VT 7 (display manager). Sleep infinity, because at moment, when this script ends, user keyring is wiped and it has no point.

Into script you have to fill number, which you'll get after you run {{c|/usr/sbin/e4crypt add_key}} under normal circumstances and then run {{c|keyctl list @s}}.

{{FileBox|filename=/usr/local/sbin/decrypt.sh|lang=bash|1=
systemd-ask-password {{!}} /usr/sbin/e4crypt add_key -k @us
keyctl setperm `keyctl search @us logon ext4:OUTPUT_KEY_FROM_E4CRYPT_ADD_KEY` 0x3f3f3f3f
}}

{{FileBox|filename=/usr/local/sbin/decrypt_link.sh|lang=bash|1=
#!/bin/sh
sudo -u $PAM_USER /bin/keyctl link @us @s
}}


Last thing, you need link from @u (user keyring) to @s (session keyring), because otherwise ext4 is not able to detect key (no idea why).
For this case is best use pam.

Search for files which has {{c|pam_keyinit.so}} inside, grep it and put line after with
{{c|session optional pam_exec.so /usr/local/bin/decrypt_link.sh}}


=== Issues ===

* When is e4crypt issued with -k @u (user keyring), kernel is not able decrypt content
