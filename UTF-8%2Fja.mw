<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

{{Metadata|abstract=UTF-8は、この例では、シンボル当たり1〜4バイトを使用することを意味する可変長の文字エンコーディングです。UTF-8の最初の1バイトはASCIIに使用されており、これによりこの文字セットはASCIIとの完全な後方互換性を持っています。UTF-8では、ラテン文字に最初の1バイトのみが使用されるため、ASCIIとラテン文字はデータのサイズをほとんど増加させることなく交換可能です。より上位のバイト範囲を割り当てられている日本語のような東洋の文字を使用している人々は、データが50%近く冗長になってしまうために不満を抱いています。}}

UTF-8は、[[Article description::この例では、シンボル当たり1〜4バイトを使用することを意味する可変長の文字エンコーディングです。]]UTF-8の最初の1バイトはASCIIに使用されており、これによりこの文字セットはASCIIとの完全な後方互換性を持っています。UTF-8では、ラテン文字に最初の1バイトのみが使用されるため、ASCIIとラテン文字はデータのサイズをほとんど増加させることなく交換可能です。より上位のバイト範囲を割り当てられている日本語のような東洋の文字を使用している人々は、データが50%近く冗長になってしまうために不満を抱いています。 

== キャラクターエンコード ==

=== キャラクターエンコードとは？ ===

コンピュータ自体があろう人間として印刷されたテキストを理解していません。コンピュータの場合は、テキストのすべての文字は番号で表されます。伝統的に、（符号化方式、符号化、または文字セットとして知られている）アルファベット文字を表すために使用される数字の各セットが原因でコンピュータのハードウェアの制限のサイズに制限されていました。 

=== キャラクターエンコードの歴史 ===

最も一般的な(あるいは、少なくとも最も広く受け入れられている)文字セットは'''ASCII'''(American Standard Code for Information Interchange)です。ASCIIはこれまで作られた中でもっとも成功したソフトウェア標準であると一般的に考えられています。現代のASCIIは1986年に米国規格協会によって標準化されました(ANSI X3.4, RFC 20, ISO/IEC 646:1991, ECMA-6)。 

ASCII は厳密に7ビット、つまり2進数7桁で表されるビットパターンであり、10進数で0から127までの範囲を提供します。これらには32の目に見えない制御文字が含まれており、そのほとんどは0から31の間にありますが、最後の制御文字 DEL または delete は127です。32から126までの文字は目に見える文字です: スペース、句読点、ラテン文字、そして数字。 

ASCII の第8ビットは元々はエラーチェックのためのパリティービットとして使われていました。エラーチェックが不要な場合は0のままになっています。つまり、ASCII においては各文字が1バイトで表わされます。 

ASCIIは現代英語でやりとりするには十分でしたが、アクセント付きの文字を含む他のヨーロッパの言語で使用する場合はそう簡単にはいきませんでした。ISO 8859標準はこうした需要に対応すべく開発されました。それらはASCIIに対する後方互換性を有していましたが、8ビット目を空にするのではなく各エンコーディングで更なる127文字を表わすために使用していました。現在のところISO 8859標準には15のバリエーションがありますが、ISO 8859の限界は間もなく明らかになりました。これらの文字セットのうちASCII互換のバイト範囲以外では、しばしば各バイトで表現される文字同士で衝突するものがありました。またMicrosoft WindowsのいくつかのバージョンではWindows-1252が使われており、これによって文字エンコーディング間の相互運用がますます複雑になりました。これはISO 8859-1の上位セットですが、いくつかの点で異なっています; これらのセットはどれもASCIIとの互換性を維持しています。 

日本語や韓国語(および比較的小規模な中国語)で使われる EUC (Extended Unix Coding) のような、非ラテン文字用のまったく異なる単一バイトエンコーディングの開発は、さらなる混乱をもたらしました。他のオペレーティングシステムは、たとえば Shift-JIS と ISO-2022-JP のように、同じ言語に対して異なる文字セットをまだ使用していました。キリル文字を見たいユーザーは、失敗に終わった ISO 8859-5 や一般的な Windows-1251 セットなどの他のキリルエンコーディングはもちろんのこと、ロシア語やブルガリア語なら KOI8-R、ウクライナ語なら KOI8-U の中からも選択する必要がありました。これらの文字セットはいずれも ASCII との互換性がほとんどなくなっています。もっとも、KOI8 エンコーディングはキリル文字をラテン文字の順番で配列しているため、8ビット目が失われた場合でもテキストは大文字と小文字が逆になった音訳として ASCII ターミナル上で解読することができます。 

これらはいずれも大きな混乱を招き、多言語でのやりとりはほとんど不可能になりました; 特に異なる文字種の間では。それでは Unicode にいってみましょう。 

=== Unicode とは何ですか？ ===

Unicode は伝統的な文字セットの単一バイトという制約を打ち捨てました。これは、65,536のコードポイントについて17の"面"を用いることで、最大で1,114,112の文字を記述します。"Basic Multilingual Plane"(基本多言語面)または BMP として知られる最初の面には、ユーザーが必要とするであろう文字がほとんどすべて含まれています。多くの人が Unicode は16ビットの文字セットであるという誤った仮定を持っています。 

Unicode は多くの異なる方法でマップされていますが、もっとも一般的な2つが '''UTF''' (Unicode Transformation Format) と '''UCS''' (Universal Character Set) です。UCS の後ろの数がバイト数を表わしているのに対し、UTF の後ろの数は1ユニットあたりのビット数を表わしています。UTF-8 は、その8ビットという透明性により、もっとも広まった Unicode テキストの情報交換法となっています。

=== UTF-8 ができること ===

UTF-8によって、ユーザーはデータの冗長さを比較的低く抑えつつ、標準規格に準拠しかつ国際的に受け入れられている多言語環境で作業することができます。電子メール、IRC、またその他ほぼすべてのメディアでインターネットを通じて非ASCII文字を送信する場合には、UTF-8を使うことが推奨されます。それにもかかわらず、多数の人がオンラインでの通信におけるUTF-8をよくないものとみなしています。どんな場合であれ、''非ASCII''のUTF-8を使う前に、各チャンネル、メーリングリスト、UsenetグループのUTF-8への態度を知っておいた方が良いでしょう。 

== Gentoo Linux で UTF-8 をセットアップする ==

=== UTF-8 のロケールを見つけ、または作成する ===

これで Unicode の原則を説明し終わりましたから、ローカルで UTF-8 を使う準備をしていきましょう！

より多くの知識に関心があるユーザー向けに、さらなる解説が [[Localization/Guide/ja|Gentoo ローカライゼーションガイド]]にあります。 

次に、ユーザーは選択した言語で UTF-8 ロケールが使用可能か、それともそれを生成する必要があるか、調べなければなりません。

{{Cmd|locale -a {{!}} grep 'en_GB'|output=<pre>
en_GB
en_GB.utf8
</pre>
}}

前のコマンドの出力から<code>.UTF-8</code>のように終わっている結果を探してください。似たような接尾語の付いた結果がない場合、UTF-8互換のロケールを作成する必要があります。 

{{Note|以下のコードは、選択した言語で利用できるUTF-8ロケールがシステムにない場合にのみ実行してください。}}

"en_GB"をお望みのロケールに変更してください:
{{RootCmd|localedef -i en_GB -f UTF-8 en_GB.UTF-8}}

UTF-8 ロケールを含めるもう一つの方法は、それを {{Path|/etc/locale.gen}} ファイルに追加してから必要なロケールを {{c|locale-gen}} コマンドで生成する方法です。ロケールは {{Path|/usr/lib/locale/locale-archive}} のロケールアーカイブに書き込まれます。

{{CodeBox|title=/etc/locale.genの行|1=
en_GB.UTF-8 UTF-8
}}

{{RootCmd|locale-gen|output=<pre>
 * Generating 1 locales (this might take a while) with 1 jobs
 *  (1/1) Generating en_GB.UTF-8 ...                            [ ok ]
 * Generation complete
</pre>}}

=== ロケールを設定する ===

新しい UTF-8 ロケールを使用するためには、環境変数を1つセットする必要があります: <var>LC_CTYPE</var> です(必要に応じて、<var>LANG</var> 変数を編集してシステム言語を同様に変更することもできます)。また、これをセットする方法もたくさんあります; システム管理者として特定のユーザーのみ UTF-8 の環境にしたい場合があるでしょう。この場合はそのユーザーの {{Path|~/.profile}} (Bourne shell ユーザーの {{Path|/bin/sh}} 向け)、{{Path|~/.bash_profile}} または {{Path|~/.bashrc}} (Bourne again shell ユーザーの{{Path|/bin/bash}} 向け)でそれらの変数をセットします。詳細やベストプラクティスについては[[Localization/Guide/ja|ローカライゼーションガイド]]を見てください。 

また、ロケールを全体に設定したい場合もあるでしょう。筆者が特にそうすることを勧めているのが、{{Path|/etc/init.d/xdm}} を使用している場合です。なぜなら、この init スクリプトは、前述したどのシェルスタートアップファイルが読み込まれるよりも前にディスプレイマネージャーとデスクトップを開始するからです。言い換えると、xdm は環境にどの変数が読み込まれるよりも早く実行されるのです。 

ロケールを全体に設定するには {{Path|/etc/env.d/02locale}} ファイルを使う必要があります。このファイルを以下のようにします: 

{{FileBox|title=en_GB.utf8 の例|filename=/etc/env.d/02locale|lang=bash|1=
## ("en_GB.utf8" を適切なロケールの値に変更してください; 言語によって値は異なります！)
LANG="en_GB.utf8"
}}

{{Note|<var>LANG</var> 変数を <var>LC_CTYPE</var> 変数で置き換えることができます。<var>LC_CTYPE</var> を使用することで影響を受けるカテゴリについての詳細は [http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html#Locale-Categories GNU locale のページ]を読んでください。}}

次に、以下のコマンドを実行して環境を更新する必要があります: 

{{RootCmd|env-update|output=<pre>
>>> Regenerating /etc/ld.so.cache...
</pre>}}
{{RootCmd|source /etc/profile}}

では、{{c|locale}} を引数なしで実行して正しい変数が環境に読み込まれているか見てみましょう: 

{{RootCmd|locale|output=<pre>
LANG=en_GB.utf8
LC_CTYPE="en_GB.utf8"
LC_NUMERIC="en_GB.utf8"
LC_TIME="en_GB.utf8"
LC_COLLATE="en_GB.utf8"
LC_MONETARY="en_GB.utf8"
LC_MESSAGES="en_GB.utf8"
LC_PAPER="en_GB.utf8"
LC_NAME="en_GB.utf8"
LC_ADDRESS="en_GB.utf8"
LC_TELEPHONE="en_GB.utf8"
LC_MEASUREMENT="en_GB.utf8"
LC_IDENTIFICATION="en_GB.utf8"
LC_ALL=
</pre>
}}

=== 代わりにeselectを使ってロケールを設定する ===
上で説明したようにしてシステムを管理できますが、{{c|eselect}}ユーティリティーを使って正しいロケールが設定されているか調べることもできます。

{{c|eselect}} を使ってシステムで使用可能なロケールを一覧表示するには:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8 *
  [ ] (free form)
</pre>
}}

{{c|eselect}} を使ってロケールを設定するのも、一覧表示と同じくらい簡単です。正しいロケールが特定できたら、以下を実行します:

{{RootCmd|eselect locale set 3 |output=<pre>
Setting LANG to en_GB.utf8 ...
</pre>
}}

結果を確認します:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8 *
  [ ] (free form)
</pre>
}}

{{Path|/etc/env.d/02locale}} に <code>.utf8</code> ではなく <code>.UTF-8</code> を含めたい場合には、適切な {{c|eselect}} コマンドを実行します:

{{RootCmd|eselect locale set en_GB.UTF-8 |output=<pre>
Setting LANG to en_GB.UTF-8 ...
</pre>
}}

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8
  [4] en_GB.UTF-8 *
  [ ] (free form)
</pre>
}}

次のコマンドを実行すると、シェルの変数を更新します:

{{RootCmd|env-update && source /etc/profile |output=<pre>
>>> Regenerating /etc/ld.so.cache...
</pre>
}}

これで全部です。システムは UTF-8 を使用するようになりました。次のハードルは日常的に使用するアプリケーションの設定です。

== アプリケーション・ソフトウェアのサポート ==

Unicode が最初にソフトウェアの世界で勢いを得た頃、マルチバイト文字セットは、ほとんどのよく使われているプログラムでの基本的な言語である C のような言語にはあまり適していませんでした。今日でもいくつかのプログラムは UTF-8 を適切に扱えません。幸いなことに、プログラムの多く、特によく使われているものは、サポートされています。 

=== (V)FAT ===

FAT [[filesystem/ja|ファイルシステム]]での UTF-8 サポートについては、[[FAT]] の記事を参照してください。

=== ファイル名 ===

ファイル名のエンコーディングを変える場合には {{Package|app-text/convmv}} を使用できます。 

{{Emerge|app-text/convmv}}

{{c|convmv}} コマンドの書式は以下のとおりです:

{{RootCmd|convmv -f <current-encoding> -t utf-8 <filename>}}

iso-8859-1 は変換元の文字セットに置き換えてください:

{{RootCmd|convmv -f iso-8859-1 -t utf-8 filename}}

ファイルの''内容''を変換するには {{c|iconv}} ユーティリティーを使用します。このユーティリティーは {{Package|sys-libs/glibc}} に含まれており、すべての Gentoo システムにインストールされているはずです。iso-8859-1 を変換元の文字セットで置き換えてください。コマンドを実行したら、出力が正常か必ず確認してください:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 filename}}

ファイルを変換するには、もう一つのファイルを作成する必要があります:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 filename > newfile}}

recode ({{Package|app-text/recode}}) パッケージもこの用途に用いることができます。

=== システムコンソール ===

UTF-8 をコンソールで有効にするには {{Path|/etc/rc.conf}} を編集します。<code>unicode="yes"</code> をセットしてコメントを読んでください -- Unicode の大部分をカバーする、適切な範囲の文字を含むフォントを用意しておくことが大事です。これを動作させるには、Unicode ロケールが正しく作成されていることを確認してください。 

{{Path|/etc/conf.d/keymaps}} でセットされている <var>keymap</var> 変数には Unicode キーマップを指定してください。 

{{CodeBox|title=/etc/conf.d/keymaps の断片の例|lang=bash|1=
## ("uk" を正しいローカルのレイアウトに変えてください)
keymap="uk"
}}

=== ncurse と slang ===

{{Note|Slang がインストールされていなかったり不要な場合は、この節の Slang への言及はすべて無視してください。}}

[https://packages.gentoo.org/useflags/unicode <code>unicode</code>] を {{Path|[[:/etc/portage/make.conf#USE|/etc/portage/make.conf]]}} 内のグローバル[[USE flag|USE フラグ]]に追加し、{{Package|sys-libs/ncurses}} と {{Package|sys-libs/slang}} を再度 emerge するのが賢明です。<code>--changed-use</code> または <code>--newuse</code> オプションを使用すると、Portage がこれを自動的に行ってくれます。パッケージを導入するには以下のコマンドを実行します: 

{{RootCmd|emerge --update --deep --newuse @world}}

また、USE フラグが適用されたものにリンクしているパッケージも再ビルドする必要があります。使用しているツール ({{c|revdep-rebuild}}) は {{Package|app-portage/gentoolkit}} パッケージの一部です。 

{{RootCmd|revdep-rebuild --library libncurses.so.5
|revdep-rebuild --library libslang.so.1}}

=== KDE や GNOME、Xfce ===

主要なデスクトップ環境はすべて Unicode を完全にサポートしており、すでにこのガイドで説明されてきたものの他にはセットアップは不要です。根本的なグラフィカル・ツールキット（Qtか、GTK+2）が UTF-8 を認識しているためです。続いて、これらのツールキットの上で実行されているすべてのアプリケーションも、そのままで UTF-8 に対応しているはずです。 

{{:Input_methods/key_sequence/ja}}

このルールの例外が Xlib と GTK+ 1 にあります。GTK+ 1 ではたとえば <code>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</code> のような iso-10646-1 の FontSpec が {{Path|~/.gtkrc}} 内に必要です。また、Xlib や Xaw を使っているアプリケーションでも同様の FontSpec が必要で、これがないと動作しないでしょう。 

{{Note|古い GNOME 1 バージョンのコントロールセンターが利用できる場合には、代わりにそれを使用してください。そこから iso10646-1 フォントのどれかを選択します。}}

{{CodeBox|title=~/.gtkrc で Unicode 互換のフォントを定義している例(GTK+1 用)|1=
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
}}

アプリケーションが Qt と GTK+ 2 の両方の GUI をサポートしている場合、一般的には GTK+ 2 GUI の方が Unicode に関してよりよい結果を得られるでしょう。

=== X11 およびフォント ===

TrueType フォントは Unicode をサポートしており、Xorg に付属するほとんどのフォントは広範囲の文字をサポートしています。しかし、明らかにこれらのフォントでは Unicode にあるすべてのグリフが作成されているわけではありません。 

同様に、Portage にあるフォントパッケージの多くも Unicode 対応です。さらなる情報やおすすめのフォント、設定については [[Fontconfig/ja|Fontconfig]] ページを参照してください。

=== ウインドウマネージャーおよび端末エミュレーター ===

GTK+ や Qt の上に構築されていないウィンドウマネージャーはしばしばフォントの処理に Xft ライブラリを使っているため、一般的に Unicode  をとても良好にサポートしています。ウィンドウマネージャーが Xft をフォントに使っていない場合でも、前の節で触れた FontSpec を Unicode フォントとして利用できます。 

Terminal emulators that use Xft and support Unicode are harder to come by. Aside from Konsole and GNOME Terminal, the best options in Portage are {{Package|x11-terms/rxvt-unicode}}, {{Package|x11-terms/xfce4-terminal}}, {{Package|gnustep-apps/terminal}}, {{Package|x11-terms/mlterm}}, or plain {{Package|x11-terms/xterm}} when built with the <code>unicode</code> USE flag and invoked as <code>uxterm</code>. {{Package|app-misc/screen}} supports UTF-8 too, when invoked as {{c|screen -U}} or the following is put into the {{Path|~/.screenrc}}: 

{{CodeBox|title=~/.screenrc for UTF-8|1=
defutf8 on
}}

<div class="mw-translate-fuzzy">
=== Vim や Emacs、Xemacs、Nano ===
</div>

[[Vim#Change_file_encoding|Vim]] provides full UTF-8 support, and also has builtin detection of UTF-8 files. For further information in [[Vim#Change_file_encoding|Vim]], use <code>:help mbyte.txt</code>. 

[[GNU Emacs]] since version 23 and [https://devmanual.gentoo.org/appendices/editor-configuration/xemacs/index.html XEmacs] version 21.5 have full UTF-8 support. GNU Emacs 24 also supports editing bidirectional text. 

Nano has provided full UTF-8 support since version 1.3.6.

=== シェル ===

Currently, {{c|[[bash]]}} provides full Unicode support through the GNU readline library. Z Shell ({{c|[[zsh]]}}) offers Unicode support with the <code>unicode</code> USE flag. 

The C shell, {{c|tcsh}} and {{c|ksh}} do not provide UTF-8 support at all.

=== Irssi ===

Irssi has complete UTF-8 support, although it does require a user to set an option. 

{{Cmd|set term_charset UTF-8|prompt=[irssi] }}

For channels where non-ASCII characters are often exchanged in non-UTF-8 charsets, the {{c|/recode}} command may be used to convert the characters. Type {{c|/help recode}} for more information.

=== Mutt ===

The Mutt mail user agent has very good Unicode support. To use UTF-8 with Mutt, nothing needs to be put in the configuration files. Mutt will work under Unicode environment without modification if all the configuration files (signature included) are UTF-8 encoded. 

{{Note|It is still possible to see '?' in mails read with Mutt. This is a result of people using a mail client which does not indicate the used charset. There is little one can do about this than to ask them to configure their client correctly.}}

Further information is available from the [https://dev.mutt.org/trac/wiki/MuttFaq/Charset Mutt Wiki] .

=== Man ===

Man pages are an integral part of any Linux machine. To ensure that any unicode in the man pages render correctly, edit {{Path|/etc/man.conf}} and replace a line as shown below. This is only needed when {{Package|sys-apps/man}} is used instead of {{Package|sys-apps/man-db}}.

{{CodeBox|title=man.conf changes for Unicode support|1=
## (This is the old line)
NROFF           /usr/bin/nroff -Tascii -c -mandoc
## (Replace the one above with this)
NROFF           /usr/bin/nroff -mandoc -c
}}

<div class="mw-translate-fuzzy">
=== elinks や links ===
</div>

These are commonly used text-based browsers, and we shall see how we can enable UTF-8 support on them. On {{c|elinks}} and {{c|links}}, there are two ways to go about this, one using the Setup option from within the browser or editing the config file. To set the option through the browser, open a site with {{c|elinks}} or {{c|links}} and then {{Key|Alt}}+{{Key|S}} to enter the Setup Menu then select Terminal options, or press {{Key|T}}. Scroll down and select the last option <code>UTF-8 I/O</code> by pressing {{Key|Enter}}. Then Save and exit the menu. On {{c|links}} one may have to do a repeat {{Key|Alt}}+{{Key|S}} and then press {{Key|S}} to save. The config file option, is shown below. 

{{CodeBox|title=Enabling UTF-8 for elinks/links|1=
## (For elinks, edit /etc/elinks/elinks.conf or ~/.elinks/elinks.conf and add the following line)
set terminal.linux.utf_8_io = 1
## (For links, edit ~/.links/links.cfg and add the following line)
terminal "xterm" 0 1 0 us-ascii utf-8
}}

=== Samba ===

Samba is a software suite which implements the SMB (Server Message Block) protocol for UNIX systems such as Macs, Linux and FreeBSD. The protocol is also sometimes referred to as the Common Internet File System (CIFS). Samba also includes the NetBIOS system - used for file sharing over windows networks. 

Add the following lines under the <code>[global]</code> section:
{{RootCmd|nano -w /etc/samba/smb.conf|output=<pre>
dos charset = 1255
unix charset = UTF-8
display charset = UTF-8
</pre>
}}

=== Testing it all out ===

There are numerous UTF-8 test websites around and most of the popular [https://packages.gentoo.org/categories/www-client browsers in Gentoo] have full UTF-8 support. 

テキストのみのWebブラウザのいずれかを使用する場合は、Unicode対応の端末が使用されている絶対に確認してください。

If certain characters are displayed as boxes with letters or numbers inside, then the current [[fonts|font]] does not have glyphs for those characters. Instead, it displays a box with the hex code of the UTF-8 symbol. 

* [https://unicode-table.com/en/ unicode-table.com]
* [https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html A W3C UTF-8 Test Page] 
* [http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm A UTF-8 test page provided by the University of Frankfurt]

== Reported issues and problems ==

=== System configuration files (in /etc) ===

Most system configuration files (such as {{Path|/etc/fstab}}) do not support UTF-8. It is recommended to stick with the ASCII character set for these files.

== External resources ==

<div class="mw-translate-fuzzy">
* [https://ja.wikipedia.org/wiki/Unicode Wikipedia の Unicode の記事] 
* [https://ja.wikipedia.org/wiki/UTF-8 The Wikipedia の UTF-8 の記事] 
* [http://www.unicode.org Unicode.org] 
* [http://www.utf-8.com UTF-8.com] 
* [http://www.ietf.org/rfc/rfc3629.txt RFC 3629] 
* [http://www.ietf.org/rfc/rfc2277.txt RFC 2277] 
* [http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF Characters vs. Bytes]
* [http://www.gnu.org/software/libc/manual/html_node/Locales.html Locales and Internationalization]
</div>

[[Category:Localization]] {{Migrated|originalauthors=Thomas Martin, Alexander Simonov, Shyam Mani, {{Dev|nightmorph}}}}
