<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

{{Metadata|abstract=UTF-8は、この例では、シンボル当たり1〜4バイトを使用することを意味する可変長の文字エンコーディングです。UTF-8の最初の1バイトはASCIIに使用されており、これによりこの文字セットはASCIIとの完全な後方互換性を持っています。UTF-8では、ラテン文字に最初の1バイトのみが使用されるため、ASCIIとラテン文字はデータのサイズをほとんど増加させることなく交換可能です。より上位のバイト範囲を割り当てられている日本語のような東洋の文字を使用している人々は、データが50%近く冗長になってしまうために不満を抱いています。}}

UTF-8は、[[Article description::この例では、シンボル当たり1〜4バイトを使用することを意味する可変長の文字エンコーディングです。]]UTF-8の最初の1バイトはASCIIに使用されており、これによりこの文字セットはASCIIとの完全な後方互換性を持っています。UTF-8では、ラテン文字に最初の1バイトのみが使用されるため、ASCIIとラテン文字はデータのサイズをほとんど増加させることなく交換可能です。より上位のバイト範囲を割り当てられている日本語のような東洋の文字を使用している人々は、データが50%近く冗長になってしまうために不満を抱いています。 

== キャラクターエンコード ==

=== キャラクターエンコードとは？ ===

コンピュータ自体があろう人間として印刷されたテキストを理解していません。コンピュータの場合は、テキストのすべての文字は番号で表されます。伝統的に、（符号化方式、符号化、または文字セットとして知られている）アルファベット文字を表すために使用される数字の各セットが原因でコンピュータのハードウェアの制限のサイズに制限されていました。 

=== キャラクターエンコードの歴史 ===

最も一般的な(あるいは、少なくとも最も広く受け入れられている)文字セットは'''ASCII'''(American Standard Code for Information Interchange)です。ASCIIはこれまで作られた中でもっとも成功したソフトウェア標準であると一般的に考えられています。現代のASCIIは1986年に米国規格協会によって標準化されました(ANSI X3.4, RFC 20, ISO/IEC 646:1991, ECMA-6)。 

ASCII is strictly seven-bit, meaning that it uses bit patterns representable with seven binary digits, which provides a range of 0 to 127 in decimal. These include 32 non-visible control characters, most between 0 and 31, with the final control character, DEL or delete at 127. Characters 32 to 126 are visible characters: a space, punctuation marks, Latin letters and numbers. 

The eighth bit in ASCII was originally used as a parity bit for error checking. If error checking is not desired, it is left as 0. This means that, with ASCII, each character is represented by a single byte. 

Although ASCII was enough for communication in modern English, in other European languages that include accented characters, things were not so easy. The ISO 8859 standards were developed to meet these needs. They were backwards compatible with ASCII, but instead of leaving the eighth bit blank, they used it to allow another 127 characters in each encoding. ISO 8859's limitations soon came to light, and there are currently 15 variants of the ISO 8859 standard (8859-1 through to 8859-15). Outside of the ASCII-compatible byte range of these character sets, there is often conflict between the letters represented by each byte. To complicate interoperability between character encodings further, Windows-1252 is used in some versions of Microsoft Windows instead for Western European languages. This is a super-set of ISO 8859-1, however it is different in several ways; these sets do all retain ASCII compatibility. 

The necessary development of completely different single-byte encodings for non-Latin alphabets, such as EUC (Extended Unix Coding) which is used for Japanese and Korean (and to a lesser extent Chinese) created more confusion. Other operating systems still used different character sets for the same languages, for example, Shift-JIS and ISO-2022-JP. Users wishing to view cyrillic glyphs had to choose between KOI8-R for Russian and Bulgarian or KOI8-U for Ukrainian, as well as all the other cyrillic encodings such as the unsuccessful ISO 8859-5, and the common Windows-1251 set. All of these character sets broke most compatibility with ASCII. Although it should be mentioned KOI8 encodings place cyrillic characters in Latin order, so in case the eighth bit is stripped, text is still decipherable on an ASCII terminal through case-reversed transliteration. 

All of this has led to mass confusion, and to an almost total inability for multilingual communication; especially across different alphabets. Enter Unicode. 

=== Unicode とは何ですか？ ===

Unicode throws away the traditional single-byte limit of character sets. It uses 17 "planes" of 65,536 code points to describe a maximum of 1,114,112 characters. As the first plane, aka. "Basic Multilingual Plane" or BMP, contains almost every character a user will ever need. Many have made the wrong assumption that Unicode was a 16-bit character set. 

Unicode has been mapped in many different ways, but the two most common are '''UTF''' (Unicode Transformation Format) and '''UCS''' (Universal Character Set). A number after UTF indicates the number of bits in one unit, while the number after UCS indicates the number of bytes. UTF-8 has become the most widespread means for the interchange of Unicode text as a result of its eight-bit clean nature; it is therefore the subject of this document.

<div class="mw-translate-fuzzy">
=== UTF-8 ができること ===
</div>

UTF-8 allows users to work in a standards-compliant and internationally accepted multilingual environment, with a comparatively low data redundancy. It is the preferred way for transmitting non-ASCII characters over the Internet, through Email, IRC, or almost any other medium. Despite this, many people regard UTF-8 in online communication as abusive. It is always best to be aware of the attitude towards UTF-8 in a specific channel, mailing list, or Usenet group before using ''non-ASCII'' UTF-8. 

<div class="mw-translate-fuzzy">
== Gentoo Linux で UTF-8 をセットアップする ==
</div>

<div class="mw-translate-fuzzy">
=== UTF-8 のロケールを見つけ、または作成する ===
</div>

Now that the principles behind Unicode have been laid out, get ready to start using UTF-8 locally!

For users interested in more knowledge further explanation can be found in the [[Localization/Guide|Gentoo Localization Guide]]. 

Next, the user needs to decide whether a UTF-8 locale is available for the language of choice, or whether one needs to be generated.

<div class="mw-translate-fuzzy">
{{Cmd|locale -a {{!}} grep 'en_GB'|output=<pre>
en_GB
en_GB.UTF-8
</pre>
}}
</div>

From the output of the above command, look for a result with a suffix similar to <code>.UTF-8</code>. If there is no result with a similar suffix a UTF-8 compatible locale must be created. 

{{Note|Only execute the following code if the system does not have a UTF-8 locale available for the language of choice.}}

"en_GB"をお望みのロケールに変更してください:
{{RootCmd|localedef -i en_GB -f UTF-8 en_GB.UTF-8}}

Another way to include a UTF-8 locale is to add it to the {{Path|/etc/locale.gen}} file and generate necessary locales using the {{c|locale-gen}} command.  Locales will be written to the locale-archive  {{Path|/usr/lib/locale/locale-archive}}.

<div class="mw-translate-fuzzy">
{{Code|/etc/locale.genの該当行|<pre>
en_GB.UTF-8 UTF-8
</pre>
}}
</div>

{{RootCmd|locale-gen|output=<pre>
 * Generating 1 locales (this might take a while) with 1 jobs
 *  (1/1) Generating en_GB.UTF-8 ...                            [ ok ]
 * Generation complete
</pre>}}

<div class="mw-translate-fuzzy">
=== ロケールを設定する ===
</div>

There is one environment variable that needs to be set in order to use the new UTF-8 locales: <var>LC_CTYPE</var> (optionally modify the <var>LANG</var> variable to change the system language as well). There are also many different ways to set it; some system administrators prefer to only have a UTF-8 environment for a specific user, in which case they set them in their {{Path|~/.profile}} ({{Path|/bin/sh}} for Bourne shell users), {{Path|~/.bash_profile}} or {{Path|~/.bashrc}} ({{Path|/bin/bash}} for Bourne again shell users). More details and best practices can be found in the [[Localization/Guide|Localization Guide]]. 

Still others prefer to set the locale globally. One specific circumstance where the author particularly recommends doing this is when {{Path|/etc/init.d/xdm}} is in use, because this init script starts the display manager and desktop before any of the aforementioned shell startup files are sourced. In other words, this is performed before any of the variables are loaded in the environment. 

Setting the locale globally should be done using {{Path|/etc/env.d/02locale}} file. This file should look something like the following: 

<div class="mw-translate-fuzzy">
{{Code|/etc/env.d/02localeの例|<pre>
## ("en_GB.UTF-8"をお好みのロケールに変更してください)
LANG="en_GB.UTF-8"
</pre>
}}
</div>

{{Note|It is possible to substitute the <var>LC_CTYPE</var> variable for the <var>LANG</var> variable. For more information on the categories affected by using <var>LC_CTYPE</var> read the [http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html#Locale-Categories GNU locale page].}}

Next, the environment must be updated by running the following command: 

{{RootCmd|env-update|output=<pre>
>>> Regenerating /etc/ld.so.cache...
</pre>}}
{{RootCmd|source /etc/profile}}

Now, run {{c|locale}} with no arguments to see if the correct variables have been loaded in the environment: 

<div class="mw-translate-fuzzy">
{{RootCmd|locale|output=<pre>
LANG=en_GB.UTF-8
LC_CTYPE="en_GB.UTF-8"
LC_NUMERIC="en_GB.UTF-8"
LC_TIME="en_GB.UTF-8"
LC_COLLATE="en_GB.UTF-8"
LC_MONETARY="en_GB.UTF-8"
LC_MESSAGES="en_GB.UTF-8"
LC_PAPER="en_GB.UTF-8"
LC_NAME="en_GB.UTF-8"
LC_ADDRESS="en_GB.UTF-8"
LC_TELEPHONE="en_GB.UTF-8"
LC_MEASUREMENT="en_GB.UTF-8"
LC_IDENTIFICATION="en_GB.UTF-8"
LC_ALL=
</pre>
}}
</div>

===Alternatively, using eselect to set locales ===
Although it is good to maintain the system as described above, it is possible to verify the correct locale configured using the {{c|eselect}} utility.

Use {{c|eselect}} to list the available locales on the system:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8 *
  [ ] (free form)
</pre>
}}

Using {{c|eselect}} setting the locale is as simple as listing them. Once the correct locale has been determined invoke:

{{RootCmd|eselect locale set 3 |output=<pre>
Setting LANG to en_GB.utf8 ...
</pre>
}}

結果を確認します:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8 *
  [ ] (free form)
</pre>
}}

In case it is preferred to have {{Path|/etc/env.d/02locale}} with <code>.UTF-8</code> instead of <code>.utf8</code>, run the appropriate {{c|eselect}} command:

{{RootCmd|eselect locale set en_GB.UTF-8 |output=<pre>
Setting LANG to en_GB.UTF-8 ...
</pre>
}}

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8
  [4] en_GB.UTF-8 *
  [ ] (free form)
</pre>
}}

次のコマンドを実行すると、シェルの変数を更新します:

{{RootCmd|env-update && source /etc/profile |output=<pre>
>>> Regenerating /etc/ld.so.cache...
</pre>
}}

That is everything. The system is now using UTF-8 locales. The next hurdle is the configuration of the applications used from day to day.

<div class="mw-translate-fuzzy">
== アプリケーション・ソフトウェアのサポート ==
</div>

When Unicode first started gaining momentum in the software world, multibyte character sets were not well suited to languages like C, which is the base language of most commonly used programs. Even today, some programs are not able to handle UTF-8 properly. Fortunately the majority of programs, especially the common ones, are supported. 

=== (V)FAT ===

For UTF-8 support in FAT [[filesystem]]s see the [[FAT]] article.

<div class="mw-translate-fuzzy">
=== ファイル名と NTFS、FAT ===
</div>

For changing the encoding of filenames, {{Package|app-text/convmv}} can be used. 

{{Emerge|app-text/convmv}}

The format of the {{c|convmv}} command is as follows:

{{RootCmd|convmv -f <current-encoding> -t utf-8 <filename>}}

Substitute iso-8859-1 with the charset being converted from:

{{RootCmd|convmv -f iso-8859-1 -t utf-8 filename}}

For changing the ''contents'' of files, use the {{c|iconv}} utility, it comes bundled with {{Package|sys-libs/glibc}} and should be installed on all Gentoo systems. Substitute iso-8859-1 with the charset being converted from. After running the command be sure to check for sane output:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 filename}}

To convert a file, another file must be created:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 filename > newfile}}

<div class="mw-translate-fuzzy">
{{Package|app-text/recode}} も、この用途に用いることができます。
</div>

<div class="mw-translate-fuzzy">
=== システムコンソール ===
</div>

To enable UTF-8 on the console edit {{Path|/etc/rc.conf}}. Set <code>unicode="yes"</code> and read the comments -- it is important to have a font that has a good range of characters to make the most of Unicode. For this to work make sure the Unicode locale has been properly created. 

The <var>keymap</var> variable, set in {{Path|/etc/conf.d/keymaps}}, should have a Unicode keymap specified. 

{{CodeBox|title=Example /etc/conf.d/keymaps snippet|lang=bash|1=
## (Change "uk" to the right local layout)
keymap="uk"
}}

=== ncurse と slang ===

{{Note|Ignore any mention of Slang in this section if it is not installed or unneeded.}}

It is wise to add [https://packages.gentoo.org/useflags/unicode <code>unicode</code>] to the global [[USE flag]]s in {{Path|[[:/etc/portage/make.conf#USE|/etc/portage/make.conf]]}}, and then to re-emerge {{Package|sys-libs/ncurses}} and {{Package|sys-libs/slang}}. Portage will do this automatically if the <code>--changed-use</code> or <code>--newuse</code> options are used. Run the following command to pull in the packages: 

<div class="mw-translate-fuzzy">
{{RootCmd|emerge --update --deep --newuse world}}
</div>

We also need to rebuild packages that link to these, now the USE changes have been applied. The tool we use ({{c|revdep-rebuild}}) is part of the {{Package|app-portage/gentoolkit}} package. 

<div class="mw-translate-fuzzy">
{{RootCmd|revdep-rebuild --soname libncurses.so.5
|revdep-rebuild --soname libslang.so.1}}
</div>

<div class="mw-translate-fuzzy">
=== KDE や GNOME、Xfce ===
</div>

<div class="mw-translate-fuzzy">
主要なデスクトップ環境のすべてが完全なUnicodeサポートを持っており、すでにこのガイドで説明されてきたものよりもさらにセットアップを必要としません。根本的なグラフィカル・ツールキット（Qtか、GTK+2）がUTF-8を認識しているためです。続いて、これらのツールキットの上で実行されているすべてのアプリケーションは、UTF-8対応のボックスのうちでなければなりません。
</div> 

{{:Input_methods/key_sequence}}

The exceptions to this rule come in Xlib and GTK+ 1. GTK+ 1 requires a iso-10646-1 FontSpec in the {{Path|~/.gtkrc}}, for example <code>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</code> . Also, applications using Xlib or Xaw will need to be given a similar FontSpec, otherwise they will not work. 

{{Note|If an old GNOME 1 control center version is available, use that instead. Pick any iso10646-1 font from there.}}

{{CodeBox|title=Example ~/.gtkrc (for GTK+1) that defines a Unicode compatible font|1=
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
}}

If an application has support for both a Qt and GTK+ 2 GUI, the GTK+ 2 GUI will generally give better results with Unicode.

<div class="mw-translate-fuzzy">
=== X11 およびフォント ===
</div>

TrueType fonts have support for Unicode, and most of the fonts that ship with Xorg have extensive character support, although, obviously, not every single glyph available in Unicode has been created for that font. 

Also, many font packages in Portage are Unicode aware. See the [[Fontconfig]] page for more information on recommended fonts and configuration.

<div class="mw-translate-fuzzy">
=== ウインドウマネージャーおよび端末エミュレーター ===
</div>

Window managers not built on GTK+ or Qt generally have very good Unicode support, as they often use the Xft library for handling fonts. If the window manager does not use Xft for fonts, then it is still possible to use the FontSpec mentioned in the previous section as a Unicode font. 

Terminal emulators that use Xft and support Unicode are harder to come by. Aside from Konsole and GNOME Terminal, the best options in Portage are {{Package|x11-terms/rxvt-unicode}}, {{Package|x11-terms/xfce4-terminal}}, {{Package|gnustep-apps/terminal}}, {{Package|x11-terms/mlterm}}, or plain {{Package|x11-terms/xterm}} when built with the <code>unicode</code> USE flag and invoked as <code>uxterm</code>. {{Package|app-misc/screen}} supports UTF-8 too, when invoked as {{c|screen -U}} or the following is put into the {{Path|~/.screenrc}}: 

{{CodeBox|title=~/.screenrc for UTF-8|1=
defutf8 on
}}

<div class="mw-translate-fuzzy">
=== Vim や Emacs、Xemacs、Nano ===
</div>

[[Vim#Change_file_encoding|Vim]] provides full UTF-8 support, and also has builtin detection of UTF-8 files. For further information in [[Vim#Change_file_encoding|Vim]], use <code>:help mbyte.txt</code>. 

[[GNU Emacs]] since version 23 and [https://devmanual.gentoo.org/appendices/editor-configuration/xemacs/index.html XEmacs] version 21.5 have full UTF-8 support. GNU Emacs 24 also supports editing bidirectional text. 

Nano has provided full UTF-8 support since version 1.3.6.

=== シェル ===

Currently, {{c|[[bash]]}} provides full Unicode support through the GNU readline library. Z Shell ({{c|[[zsh]]}}) offers Unicode support with the <code>unicode</code> USE flag. 

The C shell, {{c|tcsh}} and {{c|ksh}} do not provide UTF-8 support at all.

=== Irssi ===

Irssi has complete UTF-8 support, although it does require a user to set an option. 

{{Cmd|set term_charset UTF-8|prompt=[irssi] }}

For channels where non-ASCII characters are often exchanged in non-UTF-8 charsets, the {{c|/recode}} command may be used to convert the characters. Type {{c|/help recode}} for more information.

=== Mutt ===

The Mutt mail user agent has very good Unicode support. To use UTF-8 with Mutt, nothing needs to be put in the configuration files. Mutt will work under Unicode environment without modification if all the configuration files (signature included) are UTF-8 encoded. 

{{Note|It is still possible to see '?' in mails read with Mutt. This is a result of people using a mail client which does not indicate the used charset. There is little one can do about this than to ask them to configure their client correctly.}}

Further information is available from the [https://dev.mutt.org/trac/wiki/MuttFaq/Charset Mutt Wiki] .

=== Man ===

Man pages are an integral part of any Linux machine. To ensure that any unicode in the man pages render correctly, edit {{Path|/etc/man.conf}} and replace a line as shown below. This is only needed when {{Package|sys-apps/man}} is used instead of {{Package|sys-apps/man-db}}.

{{CodeBox|title=man.conf changes for Unicode support|1=
## (This is the old line)
NROFF           /usr/bin/nroff -Tascii -c -mandoc
## (Replace the one above with this)
NROFF           /usr/bin/nroff -mandoc -c
}}

<div class="mw-translate-fuzzy">
=== elinks や links ===
</div>

These are commonly used text-based browsers, and we shall see how we can enable UTF-8 support on them. On {{c|elinks}} and {{c|links}}, there are two ways to go about this, one using the Setup option from within the browser or editing the config file. To set the option through the browser, open a site with {{c|elinks}} or {{c|links}} and then {{Key|Alt}}+{{Key|S}} to enter the Setup Menu then select Terminal options, or press {{Key|T}}. Scroll down and select the last option <code>UTF-8 I/O</code> by pressing {{Key|Enter}}. Then Save and exit the menu. On {{c|links}} one may have to do a repeat {{Key|Alt}}+{{Key|S}} and then press {{Key|S}} to save. The config file option, is shown below. 

{{CodeBox|title=Enabling UTF-8 for elinks/links|1=
## (For elinks, edit /etc/elinks/elinks.conf or ~/.elinks/elinks.conf and add the following line)
set terminal.linux.utf_8_io = 1
## (For links, edit ~/.links/links.cfg and add the following line)
terminal "xterm" 0 1 0 us-ascii utf-8
}}

=== Samba ===

Samba is a software suite which implements the SMB (Server Message Block) protocol for UNIX systems such as Macs, Linux and FreeBSD. The protocol is also sometimes referred to as the Common Internet File System (CIFS). Samba also includes the NetBIOS system - used for file sharing over windows networks. 

Add the following lines under the <code>[global]</code> section:
{{RootCmd|nano -w /etc/samba/smb.conf|output=<pre>
dos charset = 1255
unix charset = UTF-8
display charset = UTF-8
</pre>
}}

=== Testing it all out ===

There are numerous UTF-8 test websites around and most of the popular [https://packages.gentoo.org/categories/www-client browsers in Gentoo] have full UTF-8 support. 

テキストのみのWebブラウザのいずれかを使用する場合は、Unicode対応の端末が使用されている絶対に確認してください。

If certain characters are displayed as boxes with letters or numbers inside, then the current [[fonts|font]] does not have glyphs for those characters. Instead, it displays a box with the hex code of the UTF-8 symbol. 

* [https://unicode-table.com/en/ unicode-table.com]
* [https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html A W3C UTF-8 Test Page] 
* [http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm A UTF-8 test page provided by the University of Frankfurt]

== Reported issues and problems ==

=== System configuration files (in /etc) ===

Most system configuration files (such as {{Path|/etc/fstab}}) do not support UTF-8. It is recommended to stick with the ASCII character set for these files.

== External resources ==

<div class="mw-translate-fuzzy">
* [https://ja.wikipedia.org/wiki/Unicode Wikipedia の Unicode の記事] 
* [https://ja.wikipedia.org/wiki/UTF-8 The Wikipedia の UTF-8 の記事] 
* [http://www.unicode.org Unicode.org] 
* [http://www.utf-8.com UTF-8.com] 
* [http://www.ietf.org/rfc/rfc3629.txt RFC 3629] 
* [http://www.ietf.org/rfc/rfc2277.txt RFC 2277] 
* [http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF Characters vs. Bytes]
* [http://www.gnu.org/software/libc/manual/html_node/Locales.html Locales and Internationalization]
</div>

[[Category:Localization]] {{Migrated|originalauthors=Thomas Martin, Alexander Simonov, Shyam Mani, {{Dev|nightmorph}}}}
