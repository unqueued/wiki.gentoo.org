When running programs of questionable security/privacy, it is highly advised to sandbox/jail them. There are many sandboxing methods (todo
list them). This article [[Article description::describes the oldest, simplest, and very widely used sandboxing method, namely running a program as a special sandbox user.]]

In Gentoo, this method is used by many packages, e.g. the Apache web server is running as the apache user.

This sandboxing method relies solely on the Unix user and group permissions. It requires no kernel tweaking and little extra software ({{Package|app-admin/sudo}} and {{Package|x11-apps/xhost}}). It is also possible to avoid {{c|sudo}} and use {{c|su}}, but then a password is required to be entered each time a sandboxed program is executed.

As minimum guidelines, a sandbox should be used for software which:

* Has a known security/privacy issue.
* Has a history of security/privacy issues.
* Is distributed in binary form (e.g. many games).
* Has large codebase (e.g. Libreoffice).
* Is no longer maintained
* Is very young (brand new project).
* Is unstable.
* Accesses the network (email, web, torrent, etc.).

We assume (without loss of generality):

* {{Package|www-client/firefox}} is the package we want to sandbox.
* 'larry' is our own everyday user.
* 'Mallet' is an attacker.
* 'ff' is the sandbox user used only to run [[Firefox]].

Sandboxing Firefox is mandatory, as it matches multiple patterns on our list. Like all big graphical browsers, it has a history of
vulnerabilities. In recent releases, it is distributed partially in binary form (includes binary Adobe DRM and installs binary Cisco codecs). It also has huge codebase and accesses network.

We assume Mallet can exploit a vulnerability in Firefox to access larry's files (emails, SSH keys, Bitcoin wallet, etc.). However, if larry runs Firefox as ff, then Mallet has only access to the resources available to ff, and would need a further exploit of privilege escalation to access larry's data. This obviously assumes tight permissions set on larry's files. This sandboxing method is not the most restrictive, Mallet could still learn a lot about our system, start new processes as ff, use the network, and do anything a user can. But it is also possible to configure the permissions on our system so that Mallet can do very little as ff (such configuration is not explained here).

== Create sandbox user ==

Root creates the 'ff' sandbox user:

{{RootCmd|useradd --home{{=}}/home/ff --create-home --shell /bin/false --user-group ff}}

If {{c|su}} to {{c|sudo}} is preferred, use {{Path|/bin/bash}} instead of {{Path|/bin/false}}.

== Install and configure sudo ==

{{Emerge|app-admin/sudo}}

Allow larry to run Firefox as user ff, without need for password:

{{RootCmd|echo 'larry ALL{{=}}(ff) NOPASSWD: /usr/bin/firefox' > /etc/sudoers.d/ff}}

Since we regard ff as a kind of sub-user of larry, it is convenient to allow larry to run any command as ff. This is not necessary for Firefox, but could be useful for packages with many executables:

{{RootCmd|echo 'larry ALL{{=}}(ff) NOPASSWD: ALL' > /etc/sudoers.d/ff}}

If you prefer su to sudo, then instead set a password for ff:

{{RootCmd|passwd ff}}

== Configure X server access control (optional) ==

This step is only needed if the package is graphical and your X's access control is enabled.

In order to run Firefox as ff, we could of course start a new desktop session as user ff (login using our display manager), but that would be inconvenient. Instead, we would like to work as larry, but open a Firefox window as ff. For that, root installs xhost:

{{Emerge|params+=--verbose --ask|x11-apps/xhost}}

And larry allows ff to connect to larry's X server (to create windows):

{{Cmd|xhost si:localuser:ff}}

== larry runs firefox as sandbox user ff ==

{{Cmd|prompt=larry@gentoo $|sudo -u ff firefox}}

If you prefer su:

{{Cmd|prompt=larry@gentoo $|su -c firefox ff -}}

If all went well, Firefox is now running in a window on larry's desktop. The window title says 'Mozilla Firefox (as ff)', to indicate that this window is run by ff.

== Migrate config files (optional) ==

ff will have his own home directory, for storing the Firefox profile, i.e. all browsing settings. That's all the files Firefox needs access
to. The precise configuration migration manual is very package-dependent and is beyond the scope of this article. However, assuming Firefox is the only Mozilla software larry has used, root can migrate larry's settings:

{{RootCmd
|mv ~larry/.mozilla ~ff/
|chown -R ff:ff ~ff/.mozilla
}}

== Adding shortcut icons. ==

Now larry can create icons or add Firefox to startup applications in his desktop environment. However, sometimes such graphical tools only allow to enter one command to be executed. We can conjoin xhost and sudo into one command by using sh:

sh -c 'xhost si:localuser:ff && sudo -u ff firefox'

Alternatively, john could invoke xhost already when X session starts.

== Allow larry to access ff's home ==

We don't want ff to access larry's files, but it is useful for larry to access ff's files:

{{RootCmd
|chgrp larry /home/ff
|chmod 770 /home/ff
}}

For instance, when running Firefox as ff, downloaded files can only be saved in {{Path|/home/ff}} or in {{Path|/tmp}}.

== Multiple humans ==

This method suffices if larry is the only person using this computer. Otherwise, we need to create a separate sandbox user for each real user in order to have separate sandboxed home directories for config files, e.g. ff_larry sandbox user for larry, ff_alice for alice, etc.

== Disallow larry to run Firefox without sandbox (optional) ==

One problem is: larry can forget to run Firefox using sudo, and can run it directly as himself, e.g. by clicking the Firefox icon. For extra security, we tighten permissions of package files, so that only the sandbox user can run Firefox.

Disallow the owning user (root):

{{RootCmd|qlist firefox {{!}} xargs chmod u-x}}

Disallow all other users (e.g. larry):

{{RootCmd|qlist firefox {{!}} xargs chmod o-o}}

Let us set the group to ff, so ff user (the only one in ff group) can get access:

{{RootCmd|qlist firefox {{!}} xargs chown root:ff}}

However, ff should not modify any package files:

{{RootCmd|qlist firefox {{!}} xargs chmod g-w}}

Let's have a look at the results:

{{RootCmd|qlist firefox {{!}} xargs ls -l|output=<pre>
-rw-r-x--- 1 root ff ... /usr/lib64/firefox/firefox
</pre>}}

Great, now only ff can run (but not modify) Firefox.

These permissions would be lost on any package reinstall or upgrade. We create Portage hook that sets them after every installation:

{{RootCmd|mkdir -p /etc/portage/env/www-client/}}

<pre>echo 'post_src_install() {
  chmod -R u-x,g-w,o-o ${D}
  chown -R root:ff ${D}
}' > /etc/portage/env/www-client/firefox</pre>

== Repeat for other packages. ==

The script below can be used to quickly set up sandbox for any package.

<pre>
#!/bin/bash

[ $# -ne 4 ] && echo "Usage: $0 cat/package sandbox_user sandbox_user_home user" && exit 1

pkg=$1
sbuser=$2
home=$3
user=$4

useradd --home=$home --create-home --shell /bin/false --user-group $sbuser
chgrp $user $home
chmod 770 $home

echo "$user ALL=($sbuser) NOPASSWD: ALL" > /etc/sudoers.d/$sbuser

qlist "$pkg" | xargs chmod u-x,g-w,o-o
qlist "$pkg" | xargs chown root:$sbuser

bashrc="/etc/portage/env/$pkg"

mkdir -p $(dirname $bashrc)

echo "post_src_install() {
  chmod -R u-x,g-w,o-o \${D}
  chown -R root:$sbuser \${D}
}" > $bashrc
</pre>

This script can be called like:

{{RootCmd|./sandbox_user.sh www-client/firefox ff /home/ff larry}}

== Configure firefox to output sound to larry's pulseaudio daemon ==

Add a Unix socket interface to larry's pulseaudio daemon:

{{Cmd|prompt=larry@gentoo $| echo -e ".include /etc/pulse/default.pa'\n'load-module module-native-protocol-unix auth-anonymous{{=}}1 socket{{=}}/tmp/pulse-socket" > ~larry/.config/pulse/default.pa}}

Tell ff's pulseaudio client to connect over this socket:

{{RootCmd|echo -e "default-server {{=}} unix:/tmp/pulse-socket" > ~ff/.config/pulse/client.conf
|chown ff:ff ~ff/.config/pulse/client.conf
|chmod 644  ~ff/.config/pulse/client.conf
}}

Restart larry's pulseaudio daemon and Firefox should now be able to output sound.

== Further work ==

todo: when john clicks on links in other programs, can they open in ff's Firefox window?

[[Category:Server_and_Security]]
