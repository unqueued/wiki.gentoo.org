{{Lowercase title}}
{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
|{{InfoBox gdoc|udev-guide}}
}}
'''udev''' is the device manager for the Linux kernel. Primarily, it manages device nodes in {{Path|/dev}} and handles all user space actions when adding/removing devices. Also have a look at [http://www.gentoo.org/proj/en/eudev eudev] a gentoo fork of udev.

== Installation ==
{{Note|If you're updating, check the [[/upgrade|upgrade subpage]].}}

=== Kernel ===
You need to activate the following kernel options:
<!-- See http://git.kernel.org/?p=linux/hotplug/udev.git;a=blob_plain;f=README -->
{{Kernel||<pre>
General setup  --->
    [ ] Enable deprecated sysfs features to support old userspace tools
    [*] Enable signalfd() system call
Enable the block layer  --->
    [*] Block layer SG support v4
Networking support  --->
    Networking options  --->
        <*> Unix domain sockets
Device Drivers  --->
    Generic Driver Options  --->
        ()  path to uevent helper
        [*] Maintain a devtmpfs filesystem to mount at /dev
        [*]   Automount devtmpfs at /dev, after the kernel mounted the rootfs
    < > ATA/ATAPI/MFM/RLL support (DEPRECATED)  --->
File systems  --->
    [*] Inotify support for userspace
    Pseudo filesystems --->
        [*] /proc file system support
        [*] sysfs file system support
</pre>}}

=== Software ===
Portage knows the global USE flag ''udev'' for enabling support for udev in other packages. Enabling this USE flag (default in all ''linux'' [[profile]]s) will pull in {{Package|sys-fs/udev}} automatically:
{{File|/etc/portage/make.conf||<pre>
USE="... udev ..."
</pre>}}
The USE flags of udev are:
{{USEflag|package=sys-fs/udev
|acl+yes
|debug
|doc
|gudev+yes
|hwdb+yes
|introspection+yes
|keymap+yes
|openrc+yes
|selinux++no
|static-libs++no
}}

After setting this you want to update your system so the changes take effect:
{{Emerge|params+=--changed-use --deep|@world}}

== Configuration ==

=== Service ===
To start udev at boot time, add it your sysinit runlevel:
{{RootCmd|rc-update add udev sysinit}}

== Advanced Configuration ==

=== Rules ===
udev provides a set of rules that match against exported values of uevents (events send by the kernel) and properties of the discovered device. A matching rule will possibly name and create a device node and run configured programs to set-up and configure the device.

The rule definitions are stored in {{Path|/lib/udev/rules.d}} (installed by packages) and {{Path|/etc/udev/rules.d}} (for end-user specified rules). In these directories, multiple rule files (with suffix {{Path|.rules}}) are traversed in alphanumerical order. Inside the rules files, udev will find expressions that might match a uevent together with the state to match (is the uevent because a device is added or removed) and the command to execute.

The event matching is based on information such as:
* the ''SUBSYSTEM'' of the uevent (for which type of device is the uevent fired)
* the ''ACTION'' that is taken (add, change or remove)
* one or more attributes (through ''ATTR'' or ''ATTRS''), such as the device class, vendor or other device information
* the kernel-provided name (through ''KERNEL''), such as sd* (for SCSI/SATA disks) or input* (for input devices such as mice and keyboards)
* one or more environment settings (through ''ENV''), used to send information between multiple rules

Based on this information, the rule can then state if 
* some information needs to be shared with later events (through environment variables)
* links need to be created in {{Path|/dev}}
* commands need to be executed

Udev does this for every rule that matches (so it does not stop after the first match) to allow a flexible device management approach.

=== Persistent device names ===
The kernel detects devices asynchronous, udev mirrors the kernel's [[sysfs]] filesystem and so the device are named and numbered in order of detection. So by default udev provides no persistent device names. However there are mechanismen for some device classes to provide these:

* udev creates for storage devices additional symlinks based on the device's id, label, uuid and path. See the {{Path|/dev/disk/by-*}} directory. So instead of using e.g. the device file {{Path|/dev/sda}} use the file {{Path|/dev/disk/by-label/SOME_LABEL}}.

* The same for input devices in the {{Path|/dev/input}} directory.

* udev has the special rule {{Path|/etc/udev/rules.d/70-persistent-cd.rules}} for optical drives. This rule remembers detected devices and restore their device name number.This mechanismen is controlled by the ''rule_generator'' USE flag.

* The same for network devices ({{Path|/etc/udev/rules.d/70-persistent-net.rules}}). '''This has been removed in udev version 197 and will no longer be supported.'''

* Using custom rules you can create your own device files.

== Usage ==
Some useful commands are:

* Show all messages about a given device file:
: {{RootCmd|udevadm info --query{{=}}all --name{{=}}/dev/DEVICE_FILE}}

* Monitor udev activities:
: {{RootCmd|udevadm monitor}}

See the ''udevadm'' [[man page]] for more information.

== Troubleshooting ==
* {{Bug|udev|search=package}}

=== Log monitor messages ===
Log all message you see, when you run '''udevadm monitor''':
{{File|/etc/conf.d/udev||<pre>
udev_monitor="YES"
</pre>}}
It will create the new log file {{Path|/run/udev/udevmonitor.log}}.

=== Debug mode ===
Enable debug mode to get more log messages:
{{File|/etc/conf.d/udev||<pre>
udev_debug="YES"
</pre>}}
It will create the new log file {{Path|/run/udev/udev.log}}.

=== Missing device files {{Path|/dev/null}} and {{Path|/dev/console}} ===
Some udev versions need these files and can't create them on their own. So you have to create them:
{{RootCmd
|mkdir test
|mount --bind / test
|cd test/dev
|mknod -m 660 console c 5 1
|mknod -m 660 null c 1 3
|cd ../..
|umount test
|rmdir test
}}

=== NIC assigned eth0, but is moved to eth1 ===
Those having dual network cards on their motherboards may run into a situation where ifconfig may show no eth0 or eth1.  Dmesg may show their NIC detected as eth0, and later moved to eth1. Performing a "ifconfig -a" will also show the NIC as eth1. This is caused by the NIC MAC address being stored within {{Path|/etc/udev/rules.d/70-persistent-net.rules}} file and assigning the device as eth1. Disabling and enabling a NIC within BIOS may provide conflicting results with this file and inhibit this scenario. To resolve, users need to remove the file which will allow udev to recreate the file on next boot.
{{RootCmd|rm /etc/udev/rules.d/70-persistent-net.rules}}

[[Category:Core system]]
[[Category:Daemons]]
