<languages />

{{Metadata|abstract=nginx is a robust, small and high performance web server and reverse proxy server.}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://nginx.org/en/|header=true}}
|{{InfoBox wikipedia}}
}}

'''nginx''' nginx это маленький [[:Category:Web Servers|веб сервер]] и обратный прокси сервер. Это хорошая альтернатива популярным веб-серверам, таким как [[Apache]] и [[lighttpd]].

== Установка ==

Перед непосредственной установкой пакета {{Package|www-servers/nginx}}, сначала прочитайте про USE флаги для Nginx.

Nginx использует модули для расширения своих возможностей. Для упрощения обслуживания при таком модульном подходе, файл ebuild для nginx использует USE флаги для определения того, какие модули нужно установить. Модули, относящиеся к HTTP можно включить с помощью переменной <code>${NGINX_MODULES_HTTP}</code>, а модули, относящиеся к почте через переменную <code>${NGINX_MODULES_MAIL}</code>.

Эти переменные нужно установить в {{Path|/etc/portage/make.conf}}. Их описание можно найти в [http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/profiles/desc/nginx_modules_http.desc /usr/portage/profiles/desc/nginx_modules_http.desc] и [http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/profiles/desc/nginx_modules_mail.desc /usr/portage/profiles/desc/nginx_modules_mail.desc].

Другие USE флаги следующие:

{{USEflag|package=www-servers/nginx
|aio+++Включить поддержку AIO
|debug+++Включить дополнительную отладочную информацию, вроде assert и дополнительного вывода на экран. Если вы хотите получать понятную распечатку стека, смотрите [http://www.gentoo.org/proj/en/qa/backtraces.xml http://www.gentoo.org/proj/en/qa/backtraces.xml]
|http+yes++Включение базовой поддержки HTTP
|http-cache+yes++Включение поддержки кэширования HTTP
|ipv6+yes++Включение поддержки протокола IP версии 6
|libatomic+++Использовать libatomic вместо встроенных атомарных операций
|pcre+++Добавить поддержку регулярных выражений Perl
|pcre-jit+++Включить JIT для pcre
|syslog+++Добавляет поддержку syslog
|vim-syntax+++Включает необходимые скрипты синтаксиса vim
|ssl+yes++Включает модуль HTTPS для HTTP. Включает поддержку SSL/TLS для почты POP3/IMAP/SMTP
}}

С установленными USE флагами, установите {{Package|www-servers/nginx}}:

{{Emerge|nginx}}

Не забудьте добавить nginx к уровню доступа по умолчанию.

{{RootCmd|rc-update add nginx default}}

== Работа ==

Пакет nginx устанавливает сервисный скрипт, который позволяет администратору останавливать, запускать, либо перезапускать сервис:

{{RootCmd|/etc/init.d/nginx start}}

Чтобы проверить, что nginx правильно работает, зайдите на него вашим браузером, либо используйте один из веб-клиентов командной строки (например, <code>curl</code>):

{{Cmd|curl http://localhost}}

== Конфигурация ==

Конфигурация nginx находится в файле {{Path|/etc/nginx/nginx.conf}}.

=== Доступ к одному сайту ===

Следующий пример показывает конфигурацию для доступа к одному сайту без динамических возможностей (таких как [[PHP]]).

{{File|/etc/nginx/nginx.conf|Конфигурация Gentoo по умолчанию|<pre>
user nginx nginx;
worker_processes 1;
  
error_log /var/log/nginx/error_log info;
  
events {
        worker_connections 1024;
        use epoll;
}
  
http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
  
        log_format main
                '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $bytes_sent '
                '"$http_referer" "$http_user_agent" '
                '"$gzip_ratio"';
  
        client_header_timeout 10m;
        client_body_timeout 10m;
        send_timeout 10m;
  
        connection_pool_size 256;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 2k;
        request_pool_size 4k;
  
        gzip on;
        gzip_min_length 1100;
        gzip_buffers 4 8k;
        gzip_types text/plain;
  
        output_buffers 1 32k;
        postpone_output 1460;
  
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
  
        keepalive_timeout 75 20;
  
        ignore_invalid_headers on;
  
        index index.html;
  
        server {
                listen 127.0.0.1;
                server_name localhost;
  
                access_log /var/log/nginx/localhost.access_log main;
                error_log /var/log/nginx/localhost.error_log info;
  
                root /var/www/localhost/htdocs;
        }
}
</pre>}}

=== Multiple site access ===

It is possible to leverage the <code>include</code> directive to split the configuration in multiple files:

{{File|/etc/nginx/nginx.conf|Multisite configuration|<pre>
user nginx nginx;
worker_processes 1;
   
error_log /var/log/nginx/error_log info;
  
events {
        worker_connections 1024;
        use epoll;
}
http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
  
        log_format main
                '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $bytes_sent '
                '"$http_referer" "$http_user_agent" '
                '"$gzip_ratio"';
  
        client_header_timeout 10m;
        client_body_timeout 10m;
        send_timeout 10m;
  
        connection_pool_size 256;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 2k;
        request_pool_size 4k;
  
        gzip on;
        gzip_min_length 1100;
        gzip_buffers 4 8k;
        gzip_types text/plain;
  
        output_buffers 1 32k;
        postpone_output 1460;
  
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
  
        keepalive_timeout 75 20;
  
        ignore_invalid_headers on;
  
        index index.html;
 
        include /etc/nginx/conf.d/*.conf;
}
</pre>}}

{{File|/etc/nginx/conf.d/local.conf|Simple host|<pre>
        server {
                listen 127.0.0.1;
                server_name localhost;
  
                access_log /var/log/nginx/localhost.access_log main;
                error_log /var/log/nginx/localhost.error_log info;
  
                root /var/www/localhost/htdocs;
        }
</pre>}}

{{File|/etc/nginx/conf.d/local-ssl.conf|Simple ssl host|<pre>
server {
    listen 443;
    server_name host.tld;
    ssl on;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_dhparam /etc/ssl/nginx/host.tld.dh4096.pem;
}
</pre>}}

=== Включение поддержки PHP ===

Добавьте следующие строки в конфигурацию nginx для включения поддержки PHP. В данном примере nginx обменивается информацией с процессом PHP через сокет UNIX.

{{File|/etc/nginx/nginx.conf|Enabling PHP support|<pre>
...
http {
...
    server { 
    ...
            location ~ \.php$ {
                       # Test for non-existent scripts or throw a 404 error
                       # Without this line, nginx will blindly send any request ending in .php to php-fpm
                       try_files $uri =404;
                       include /etc/nginx/fastcgi.conf;
                       fastcgi_pass unix:/run/php-fpm.socket;
           }
    }
}
</pre>}}

Для поддержки такой настройки, PHP нужно собрать с поддержкой менеджера процессов FastCGI (php-fpm), что обрабатывается через USE флаг <code>fpm</code>:

{{RootCmd|echo "dev-lang/php fpm" >> /etc/portage/package.use}}

Пересоберите php с новым включенным USE флагом.

{{Emerge|dev-lang/php}}
 
{{Note/ru|Использование связи через сокет UNIX это предпочтительная и рекомендуемая конфигурация}}

Просмотрите конфигурацию в файле {{Path|/etc/php/fpm-php5.4/php-fpm.conf}} и добавьте следующую строку:

{{File|/etc/php/fpm-php5.4/php-fpm.conf|Running PHP with UNIX socket support|<pre>
listen = /run/php-fpm.socket
listen.owner = nginx
</pre>}}

Setup your timezone in the php-fpm {{Path|php.ini}} file.

{{File|/etc/php/fpm-php5.4/php.ini|Setup timezone in php.ini|<pre>
date.timezone = <fill in your timezone!>
</pre>}}

Start the php-fpm daemon:

{{RootCmd|/etc/init.d/php-fpm start}}

Add php-fpm to the default runlevel:

{{RootCmd|rc-update add php-fpm default}}

Reload nginx with changed configuration:

{{RootCmd|/etc/init.d/nginx reload}}

=== Enabling an IP access list ===

The next example shows how to allow access to a particular URL (in this case ''/nginx_status'') only to 
* certain hosts (e.g. ''192.0.2.1 127.0.0.1'')
* and IP networks (e.g. ''198.51.100.0/24'')

{{File|/etc/nginx/nginx.conf|Enabling and configuring an IP access lists for /nginx_status page|<pre>
http {
    server { 
            location /nginx_status {
                     stub_status on;
                     allow 127.0.0.1/32;
                     allow 192.0.2.1/32;
                     allow 198.51.100.0/24;
                     deny all;
             }
     }
}
</pre>}}

=== Enabling basic authentication ===

nginx allows limiting access to resources by validating the user name and password:

{{File|/etc/nginx/nginx.conf|Enabling and configuring user authentication for the / location|<pre>
http {
    server { 
            location / {
                   auth_basic           "Authentication failed";
                   auth_basic_user_file conf/htpasswd;
             }
     }
}
</pre>}}
 
The {{Path|htpasswd}} file can be generated using:

{{Cmd|openssl passwd}}

=== Enabling tls support ===

It is warmly suggested to support only TLS and disable known insecure ciphers.

{{File|/etc/nginx/nginx.conf|Enabling ssl|<pre>
server {
    listen 443;
    server_name host.tld;
    ssl on;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_dhparam /etc/ssl/nginx/host.tld.dh4096.pem;
}
</pre>}}

The ebuild provides stock self signed certificates in {{Path|/etc/ssl/nginx/}}.

==== Generating Certificates ====

TODO

==== Forward Secrecy ====

The diffie-hellman certificate can be created using <code>openssl</code>:

{{Cmd|openssl dhparam -out dh4096.pem 4096}}

== Troubleshooting ==

In case of problems, the following commands can help you troubleshoot the situation.

=== Validate configuration ===

Verify that the running nginx configuration has no errors. 

{{RootCmd|/usr/sbin/nginx -t|output=<pre>
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
</pre>}}

By running <code>nginx</code> with the <code>-t</code> option, it will validate the configuration file without actually starting an nginx daemon.

=== Verify processes are running ===

Check if the nginx processes are running:

{{Cmd|ps aux {{!}} egrep 'nginx{{!}}PID'|output=<pre>
  PID TTY      STAT   TIME COMMAND
26092 ?        Ss     0:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
26093 ?        S      0:00 nginx: worker proces
</pre>}}

=== Verify bound addresses and ports ===

Verify nginx daemon is listening on the right TCP port (such as 80 for HTTP or 443 for HTTPS):

{{RootCmd|netstat -tulpen {{!}} grep :80|output=<pre>
tcp        0      0 127.0.0.1:80            0.0.0.0:*               LISTEN      0          12336835   -26092/nginx: master
</pre>}}

== External resources ==
* [http://wiki.nginx.org/Main nginx Wiki][[Category:Web Servers]]
* [https://github.com/h5bp/server-configs-nginx H5BP nginx config][[Category:Web Servers]]
