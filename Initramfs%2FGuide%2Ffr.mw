<languages />


{{Metadata|abstract=De plus en plus de systèmes requièrent un système de fichiers virtuel initial (initramfs) pour démarrer proprement. Dans ce guide, nous abordons le concept de système de fichiers virtuel initial et la manière d'en créer et d'en gérer correctement des instances.}}

De plus en plus de systèmes requièrent un ''système de fichiers virtuel initial'' pour démarrer correctement. Dans ce guide, nous nous abordons le concept de système de fichiers virtuel initial (''initramfs'') et la manière de créer et de gérer des instances d'un tel système.

== Concept du système de fichiers virtuel initial (Initramfs) ==

=== Introduction ===

For many users, an initramfs system is of no concern. Their system uses a simple partitioning schema with no exotic drivers or setups (like encrypted file systems), so the Linux kernel is entirely capable to hand over control to the {{c|init}} binary on their system. But for many systems, an initramfs is mandatory. 

La clé pour comprendre ce qu'est (ou ce à quoi sert) un système de fichiers virtuel initial, c'est de comprendre comment le processus de démarrage de Linux travaille, même dans les grandes lignes. 

=== Le processus de démarrage de Linux ===

Once the Linux kernel has control over the system (which it gets after being loaded by the boot loader), it prepares its memory structures and drivers. It then hands over control to an application (usually {{c|init}}) whose task it is to further prepare the system and make sure that, at the end of the boot process, all necessary services are running and the user is able to log on. The {{c|init}} application does that by launching, among other services, the {{c|udev}} daemon who will further load up and prepare the system based on the detected devices. When {{c|udev}} is launched, all remaining file systems that have not been mounted are mounted, and the remainder of services is started. 

For systems where all necessary files and tools reside on the same file system, the {{c|init}} application can perfectly control the further boot process. But when multiple file systems are defined (or more exotic installations are done), this might become a bit more tricky: 

* Quand la partition {{Path|/usr}} est sur un système de fichiers séparé, les outils et les pilotes qui ont des fichiers stockés dans {{Path|/usr}} ne peuvent être utilisés sauf si  {{Path|/usr}} est accessible. Si ces outils sont nécessaires pour rendre  {{Path|/usr}} accessible, alors il devient impossible de démarrer le système.

* If the root file system is encrypted, then the Linux kernel will not be able to find the {{c|init}} application, resulting in an unbootable system.

La solution à ces problèmes a été pendant longtemps d'utiliser un disque racine initial ''initrd''. 

=== Le disque root initial ===

The '''initrd''' is an in-memory disk structure (ramdisk) that contains the necessary tools and scripts to mount the needed file systems ''before'' control is handed over to the {{c|init}} application on the root file system. The Linux kernel triggers the setup script (usually called {{Path|linuxrc}} but that name is not mandatory) on this root disk, which prepares the system, switches to the real root file system and then calls {{c|init}}. 

Bien que la méthode de l'''initrd'' soit suffisante, elle présente quelques inconvénients : 

* C'est un périphérique de blocs à part entière, qui nécessite le surcoût d'un système de fichiers complet sur lui, et a une taille fixe. Choisissez un ''initrd'' trop petit, et vous ne pourrez y placer tous les scripts nécessaires. Choisissez-le trop grand et vous allez gaspiller la mémoire.

* Comme c'est un périphérique réel, il consomme également de la mémoire cache dans le noyau Linux.

C'est pour résoudre ces problèmes, que le système de fichiers virtuel initial (''initramfs'') a été inventé. 

=== Le système de fichiers virtuel initial ===

An '''initramfs''' is an initial ram file system based on ''tmpfs'' (a size-flexible, in-memory lightweight file system), which also did not use a separate block device (so no caching was done and all overhead mentioned earlier disappears). Just like the initrd, it contains the tools and scripts needed to mount the file systems before the {{c|init}} binary on the real root file system is called. These tools can be decryption abstraction layers (for encrypted file systems), logical volume managers, software raid, bluetooth driver based file system loaders, etc. 

The content of the initramfs is made by creating a cpio archive. {{c|cpio}} is an old (but proven) file archiver solution (and its resulting archive files are called cpio files). cpio is definitely comparable to the {{c|tar}} archiver. The choice of {{c|cpio}} here was because it was easier to implement (code-wise) and supported (back then) device files which <code>tar</code> could not. 

All files, tools, libraries, configuration settings (if applicable), etc. are put into the cpio archive. This archive is then compressed using the {{c|gzip}} utility and stored alongside the Linux kernel. The boot loader will then offer it to the Linux kernel at boot time so the kernel knows an initramfs is needed. 

Une fois détecté, le noyau Linux crée un système de fichiers ''tmpfs'', extrait le contenu de l'archive dans ce  système de fichiers, et lance le script <code>init</code>  situé à la racine du système de fichiers ''tmpfs''. Ce script monte ensuite le système de fichiers réel (après s'être assuré qu'il peut le faire, par exemple en chargeant des modules additionnels, en préparant un couche d'abstraction du chiffrage, etc.) ainsi que les autres systèmes de fichiers vitaux (comme {{Path|/usr}} and {{Path|/var}}). 

Dès lors que le système de fichier ''root'' et les autres systèmes de fichiers vitaux sont montés, le script <code>init</code> depuis le ''initramfs'' commute la racine vers le système de fichiers racine réel et, finalement, appelle <code>/sbin/init</code> sur ce système pour continuer le processus de démarrage.

== Créer un système de fichiers virtuel initial (initramfs) ==

=== Introduction et configuration du chargeur de démarrage ===

To create an initramfs, it is important to know what additional drivers, scripts and tools will be needed to boot the system. For instance, if LVM is used, then LVM tools will be needed in the initramfs. Likewise, if software RAID is used, {{c|mdadm}} utilities will be needed, etc. 

Some tools exist that help users create initramfs' (compressed {{c|cpio}} archives) for their system. But for those who want total control can easily create personal, custom initramfs' as well. 

Une fois créée, vous devez ajuster la configuration du chargeur de démarrage pour qu'il sache qu'un ''initramfs'' va être utilisé. Par exemple, si le fichier ''initramfs'' est stocké dans {{Path|/boot/initramfs-3.2.2-gentoo-r5}}, alors la configuration dans {{Path|/boot/grub/grub.conf}} pourrait ressembler à ceci : 

{{File|grub.conf|Exemple d'entrée dans  grub.conf pour démarrer avec un  initramfs|<pre>
title Gentoo Linux 3.2.2-r5
root (hd0,0)
kernel /boot/kernel-3.2.2-gentoo-r5
initrd /boot/initramfs-3.2.2-gentoo-r5
</pre>
}}

=== En utilisant genkernel ===

Gentoo's kernel building utility, {{c|genkernel}}, can be used to generate an initramfs, even if {{c|genkernel}} was not used to configure and build the kernel. 

To use {{c|genkernel}} for generating an initramfs, it is recommended all necessary drivers and code that is needed to mount the {{Path|/}} and {{Path|/usr}} file systems be included in the kernel (not as modules). Then, call {{c|genkernel}} as follows: 

{{RootCmd|genkernel --install --no-ramdisk-modules initramfs}}

Selon votre système, il peut être nécessaire d'ajouter une, ou plus, des options suivantes : 

{| class="wikitable" style="text-align: left;" 
|- 
! Option
! Description
|- 
| --disklabel
| Ajoute la prise en charge  des <code>LABEL=</code> de disque dans votre {{Path|/etc/fstab}} 
|- 
| --dmraid
| Ajoute la prise en charge du RAID matéril factice
|- 
| --firmware
| Ajoute le micro-code trouvé sur le système. 
|- 
| --gpg
| Ajoute la prise en charge de  GnuPG 
|- 
| --iscsi
| Ajoute la prise en charge de iSCSI
|- 
| --luks
| Ajoute la prise en charge des conteneurs de chiffrage luks 
|- 
| --lvm
| Ajoute la prise en charge de  LVM
|- 
| --mdadm
| Ajoute la prise en charge du RAID logiciel
|- 
| --multipath
| Ajoute la prise en charge pour des accès entrée/sortie multiples vers un   SAN
|- 
| --zfs
| Ajoute la prise en charge de ZFS
|-
|}

Une fois terminé, le fichier ''initramfs'' résultant est stocké dans votre répertoire {{Path|/boot}}.

=== En utilisant dracut ===

{{Warning/fs|Au moment de la rédaction de ce document, dracut n'est pas encore marqué ''stable'', c'est pourquoi vous pouvez avoir besoin de le démasquer pour continuer.}}

The {{c|dracut}} utility is created for the sole purpose of managing initramfs files. It uses a highly modular approach on what support is to be included and what is not to be included. 

To install {{c|dracut}}, make special care to include support for the correct value(s) in the <var>DRACUT_MODULES</var> variable. This variable can be set in {{Path|/etc/portage/make.conf}} to include support for system specific setups: 

{{File|make.conf|Préparer l'installation de  dracut|<pre>
DRACUT_MODULES="dmraid lvm syslog -biosdevname -btrfs -caps -crypt -crypt-gpg
-dmsquash-live -gensplash -iscsi -livenet -mdraid -multipath -nbd -nfs -plymouth
-ssh-client"
</pre>
}}

It is advisable to set (or unset) the modules needed. After configuring the <var>DRACUT_MODULES</var> variable in {{Path|/etc/portage/make.conf}}, {{c|emerge dracut}} to install the Dracut utility. 

The next step is to configure {{c|dracut}} by editing {{Path|/etc/dracut.conf}}. In the configuration file, which is well commented, in order to add support for needed modules.

Once configured, create an initramfs by calling {{c|dracut}} as follows: 

{{RootCmd|dracut}}

The resulting image supports generic system boots based on the configuration in {{Path|/etc/dracut.conf}}. It is also possible to generate an initramfs specifically tailored to ''your'' system (which {{c|dracut}} tries to detect the needed tools, drivers, etc. from the existing system). If the modules and drivers are built into the kernel (not as separate modules and references to the firmware), then the <code>--no-kernel</code> option can be added: 

{{RootCmd|dracut --host-only --no-kernel}}

Pour plus d'informations, jetez un coup d'œil aux page de manuel <code>dracut</code> et <code>dracut.cmdline</code>.

== Ressources additionnelles ==

=== Ressources spécifiques à Gentoo ===


* [[Initramfs]] sur le wiki officiel de Gentoo
* [[Dracut]] sur le wiki officiel de Gentoo

=== Ressources générales ===


[[Category:Initramfs]]
