<languages />


De plus en plus de systèmes requièrent un ''système de fichiers virtuel initial'' pour démarrer correctement. Dans ce guide, nous nous abordons le concept de système de fichiers virtuel initial (''initramfs'') et la manière de créer et de gérer des instances d'un tel système.

== Concept du système de fichiers virtuel initial (Initramfs) ==

=== Introduction ===

Beaucoup d'utilisateur ne se soucient pas de ce système de fichiers virtuel. Leur système utilise un schéma de partitionnement simple, sans pilote exotique ou sans configuration particulière (comme un système chiffré), et ainsi, le noyau Linux est en mesure de passer le contrôle au binaire <code>init</code> sur leur système. Mais, pour beaucoup de système, un système de fichiers virtuel initial est presque indispensable. 

La clé pour comprendre ce qu'est (ou ce à quoi sert) un système de fichiers virtuel initial, c'est de comprendre comment le processus de démarrage de Linux travaille, même dans les grandes lignes. 

=== Le processus de démarrage de Linux ===

Dès lors que le noyau Linux a le contrôle sur le système (qu'il obtient après avoir été chargé par le chargeur de démarrage), il prépare ses structures mémoire et ses pilotes comme il le peut. Il passe ensuite le contrôle à une application (en général <code>init</code>) dont la tâche et de compléter la préparation du système et de s'assurer que, à la fin du processus de démarrage, tous les services nécessaires sont démarrés et que l'utilisateur est en mesure de se connecter.L'application <code>init</code> accomplit cela en lançant, entre autres services, le démon  <code>udev</code> qui chargera ensuite et préparera le système en fonction des périphériques détectés. Lorsque  <code>udev</code> est lancé, tous les systèmes de fichiers qui n'ont pas encore été montés le sont, et le reste des services est démarré. 

Pour les systèmes dans lesquels tous les fichiers et outils nécessaires résident sur le même système de fichiers, l'application <code>init</code>  peut parfaitement contrôler la suite du processus de démarrage. Mais lorsque des systèmes de fichiers multiples sont définis (ou des installations plus exotiques ont lieu), ceci peut devenir plus problématique : 

* Quand la partition {{Path|/usr}} est sur un système de fichiers séparé, les outils et les pilotes qui ont des fichiers stockés dans {{Path|/usr}} ne peuvent être utilisés sauf si  {{Path|/usr}} est accessible. Si ces outils sont nécessaires pour rendre  {{Path|/usr}} accessible, alors il devient impossible de démarrer le système.

* Si le système de fichier root est chiffré, alors le noyau Linux ne sera pas capable de trouver l'application  <code>init</code> ce qui conduira à un système non amorçable.

La solution à ces problèmes a été pendant longtemps d'utiliser un disque racine initial ''initrd''. 

=== Le disque root initial ===

''initrd'' est une structure de disque en mémoire (ramdisk) qui contient les outils et scripts nécessaires au montage les systèmes de fichiers requis avant que le contrôle ne soit passé à l'application  <code>init</code> application sur le système de fichier ''root''. Le noyau Linux déclenche le script de configuration (ordinairement appelé  <code>linuxrc</code> mais ça n'est pas une obligation) sur ce disque ''root'', qui prépare le système, commute vers le système de fichiers ''root'' réel et appelle ensuite <code>init</code>. 

Bien que la méthode de l'''initrd'' soit suffisante, elle présente quelques inconvénients : 

* C'est un périphérique de blocs à part entière, qui nécessite le surcoût d'un système de fichiers complet sur lui, et a une taille fixe. Choisissez un ''initrd'' trop petit, et vous ne pourrez y placer tous les scripts nécessaires. Choisissez-le trop grand et vous allez gaspiller la mémoire.

* Comme c'est un périphérique réel, il consomme également de la mémoire cache dans le noyau Linux.

C'est pour résoudre ces problèmes, que le système de fichiers virtuel initial (''initramfs'') a été inventé. 

=== Le système de fichiers virtuel initial ===

Un système de fichiers virtuel initial (''initramfs'') est un système de fichiers initial en mémoire ram basé sur ''tmpfs'' (un système de fichiers léger de taille flexible, en mémoire), qui n'utilise pas un périphérique de blocs séparé (ainsi aucun cache n'est nécessaire, ce qui élimine les surcoûts mentionnés précédemment). Tout comme le ''initrd'', il contient les outils et les scripts nécessaire au montage des systèmes de fichiers avant que le contrôle e soit passé à l'application <code>init</code>  sur le système de fichiers ''root'' réel.Ces outils peuvent être, des couches d'abstraction du chiffrage (pour les système chiffrés), des gestionnaire de volumes logiques, le raid logiciel, des chargeurs de systèmes de fichiers basés sur des pilotes bluetooth, etc. 

Le contenu de l'''initramfs'' est créé en créant une archive ''cpio''. <code>cpio</code>  est une ancienne (mais qui a fait ses preuves) solution d'archivage de fichiers. Les archives produites sont appelées ''fichiers cpio''. Vous pouvez le comparer à <code>tar</code>. Il a été choisi ici parce que le code est plus facile à mettre en œuvre et qu'il prend en charge des fichiers de périphériques que <code>tar</code> ne prend pas en charge. 

Tous les fichiers, les outils, les bibliothèques, les fichiers de configuration (si applicables), etc. sont placés dans l'archive cpio. L'archive est ensuite compressée avec l'utilitaire <code>gzip</code> et stockée avec le noyau Linux. Le chargeur d'amorçage le présente ensuite au noyau Linux au moment du démarrage de manière à ce que le noyau sache qu'un système de fichiers virtuel initial est nécessaire. 

Une fois détecté, le noyau Linux crée un système de fichiers ''tmpfs'', extrait le contenu de l'archive dans ce  système de fichiers, et lance le script <code>init</code>  situé à la racine du système de fichiers ''tmpfs''. Ce script monte ensuite le système de fichiers réel (après s'être assuré qu'il peut le faire, par exemple en chargeant des modules additionnels, en préparant un couche d'abstraction du chiffrage, etc.) ainsi que les autres systèmes de fichiers vitaux (comme {{Path|/usr}} and {{Path|/var}}). 

Dès lors que le système de fichier ''root'' et les autres systèmes de fichiers vitaux sont montés, le script <code>init</code> depuis le ''initramfs'' commute la racine vers le système de fichiers racine réel et, finalement, appelle <code>/sbin/init</code> sur ce système pour continuer le processus de démarrage. 

== Créer un système de fichiers virtuel initial (initramfs) ==

=== Introduction et configuration du chargeur de démarrage ===

Pour créer un système de fichiers virtuel initial, il est important de connaître quels pilotes, scripts et outils additionnels sont nécessaires au démarrage du système. Par exemple, si vous utilisez LVM, vous devez disposer des outils de  prise en charge de LVM dans l'''initramfs''. De la même manière, si vous utilisez le ''RAID logiciel'', vous avez besoin de  <code>mdadm</code>, et ainsi de suite. 

Quelques outils existent pour vous aider à créer l'archive compressée du système de fichiers virtuel initial pour votre système. Mais si vous tenez à conserver un contrôle total, vous pouvez créer facilement votre propre ''initramfs'' également. 

Une fois créée, vous devez ajuster la configuration du chargeur de démarrage pour qu'il sache qu'un ''initramfs'' va être utilisé. Par exemple, si le fichier ''initramfs'' est stocké dans {{Path|/boot/initramfs-3.2.2-gentoo-r5}}, alors la configuration dans {{Path|/boot/grub/grub.conf}} pourrait ressembler à ceci : 

{{File|grub.conf|Exemple d'entrée dans  grub.conf pour démarrer avec un  initramfs|<pre>
title Gentoo Linux 3.2.2-r5
root (hd0,0)
kernel /boot/kernel-3.2.2-gentoo-r5
initrd /boot/initramfs-3.2.2-gentoo-r5
</pre>
}}

=== En utilisant genkernel ===

L'utilitaire de compilation du noyau <code>genkernel</code> peut être utilisé pour générer un ''initramfs'', même si vous n'utilisez pas <code>genkernel</code> pour configurer et compiler votre noyau. 

Pour créer un ''initramfs'' en utilisant <code>genkernel</code>, il est recommandé que vous incluiez tous les pilotes et codes nécessaires au montage de vos systèmes de fichiers {{Path|/}} et {{Path|/usr}}  dans le noyau (pas en tant que modules). Alors lancez <code>genkernel</code> comme indiqué ci-dessous : 

{{RootCmd|genkernel --install --no-ramdisk-modules initramfs}}

Selon votre système, il peut être nécessaire d'ajouter une, ou plus, des options suivantes : 

{| class="wikitable" style="text-align: left;" 
|- 
! Option
! Description
|- 
| --disklabel
| Ajoute la prise en charge  des <code>LABEL=</code> de disque dans votre {{Path|/etc/fstab}} 
|- 
| --dmraid
| Ajoute la prise en charge du RAID matéril factice
|- 
| --firmware
| Ajoute le micro-code trouvé sur le système. 
|- 
| --gpg
| Ajoute la prise en charge de  GnuPG 
|- 
| --iscsi
| Ajoute la prise en charge de iSCSI
|- 
| --luks
| Ajoute la prise en charge des conteneurs de chiffrage luks 
|- 
| --lvm
| Ajoute la prise en charge de  LVM
|- 
| --mdadm
| Ajoute la prise en charge du RAID logiciel
|- 
| --multipath
| Ajoute la prise en charge pour des accès entrée/sortie multiples vers un   SAN
|- 
| --zfs
| Ajoute la prise en charge de ZFS
|-
|}

Une fois terminé, le fichier ''initramfs'' résultant est stocké dans votre répertoire {{Path|/boot}}. 

=== En utilisant dracut ===

{{Warning/fs|Au moment de la rédaction de ce document, dracut n'est pas encore marqué ''stable'', c'est pourquoi vous pouvez avoir besoin de le démasquer pour continuer.}}

L'utilitaire  <code>dracut</code> a été créé dans le seul but de gérer les fichiers ''initramfs''. Il utilise une approche très modulaire à propos des prises en charge que vous voulez ajouter et de celles que vous ne voulez pas ajouter. 

Lorsque vous installez  <code>dracut</code>, vous devez faire attention à inclure la prise  en charge des  <code>DRACUT_MODULES</code> (modules dracut) corrects. C'est une variable que vous pouvez définir dans {{Path|/etc/portage/make.conf}}  pour inclure les prises en charge de configurations spécifiques. 

{{File|make.conf|Préparer l'installation de  dracut|<pre>
DRACUT_MODULES="dmraid lvm syslog -biosdevname -btrfs -caps -crypt -crypt-gpg
-dmsquash-live -gensplash -iscsi -livenet -mdraid -multipath -nbd -nfs -plymouth
-ssh-client"
</pre>
}}

Il est recommandé d'activer (ou désactiver) les modules dont vous avez besoin (ou n'avez pas besoin). Ensuite, installez ''dracut'' avec la commande <code>emerge dracut</code>. 

L'étape suivante consiste à configure <code> dracut</code> en éditant {{Path|/etc/dracut.conf}}. Dans le fichier de configuration, qui est très bien commenté, vous pouvez ajouter la prise en charge des modules spécifiques quand c'est nécessaire. 

Une fois configuré, créez un ''initramfs'' en appelant  <code>dracut</code> comme indiqué ci-dessous : 

{{RootCmd|dracut}}

L'image résultante prend en charge les systèmes de démarrage génériques en se basant sur la configuration déclarée dans {{Path|/etc/dracut.conf}}. Vous pouvez aussi opter pour générer un ''initramfs'' spécialement adapté à votre sysème (dans lequel <code>dracut</code> essaie de détecter le outils, pilotes, etc. nécessaires depuis votre système existant). Si vous savez que la prise en charge nécessaire (code et pilote) est incluse dans votre noyau (et pas en tant que module), alors vous pouvez même ajouter  <code>--no-kernel</code>: 

{{RootCmd|dracut --host-only --no-kernel}}

Pour plus d'informations, jetez un coup d'œil aux page de manuel <code>dracut</code> et <code>dracut.cmdline</code>. 

== Ressources additionnelles ==

=== Ressources spécifiques à Gentoo ===

* [http://en.gentoo-wiki.com/wiki/Initramfs Initramfs] sur Gentoo-wiki.com
* [[Initramfs]] sur le wiki officiel de Gentoo
* [[Dracut]] sur le wiki officiel de Gentoo

=== Ressources générales ===

* [https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt ramfs-rootfs-initramfs.txt] dans la documentation du noyau Linux

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Sven Vermeulen
