'''Dracut''' is an [[initramfs]] infrastructure and aims to have as little as possible hard-coded into the initramfs. It originated from the [http://fedoraproject.org/wiki/Dracut Fedora Project] and was ported to Gentoo in the [http://www.google-melange.com/gsoc/project/google/gsoc2010/aidecoe/2 2010 Google Summer of Code]. For more detailed information, refer to the [http://www.kernel.org/pub/linux/utils/boot/dracut/dracut.html#dracut.kernel documentation] at kernel.org.

== Installation ==
Before you can use the images generated by dracut, your kernel must include initramfs support. The ebuild will warn you if your kernel is missing the required options:
{{KernelBox|title=Enabling the initramfs|1=
    General setup  --->
        [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support   [CONFIG_BLK_DEV_INITRD]
    Device Drivers --->
        Generic Driver Options --->
            [*] Maintain a devtmpfs filesystem to mount at /dev   [CONFIG_DEVTMPFS]
}}

Certain dracut modules also require additional dependencies to function. A list of optional dependencies is listed at the end of the installation. The DRACUT_MODULES variable in make.conf is no longer used.

Since {{package|sys-kernel/dracut}} is still unstable, if you are not already running ~arch, you will need to keyword it:
{{RootCmd
|echo "sys-kernel/dracut" >> /etc/portage/package.keywords
|emerge --ask {{package|sys-kernel/dracut}}
}}

== Building an initramfs image ==

=== Default images ===
Once you have installed dracut, you can use it to build an initramfs image. The simplest way to do this is to just run
{{RootCmd|mount /boot|dracut}}

The initramfs image created this way is a generic image, which will include all installed modules and system tools that it can find, suitable for booting a variety of machines. If you are producing an initramfs for just a single machine, you can specify that dracut should go into host-only mode:
{{RootCmd|dracut --hostonly}}

The produced image will contain only those elements used by the local machine for booting. Certain modules behave differently in host-only mode. The kernel-modules module, for example, will only include the tools and modules used by the current rootfs file system, and the i18n module will install the fonts and keymaps for the local machine. Otherwise, every available file system, font, etc. would be included. You can set hostonly mode as the default in {{path|/etc/dracut.conf}}.

By default, dracut will produce an image suitable for booting the currently active kernel; it will pull the kernel modules needed for that kernel, etc. The image will be written in a file called {{path|/boot/initramfs-<kernel version>.img}}. You can override both options by specifying a new file name and kernel version on the command line, in that order. Both parameters are optional, but if you want to override the kernel version and keep the default file name you need to pass a placeholder empty string as the first parameter:

{{RootCmd|dracut --hostonly <nowiki>''</nowiki> 3.2.5-hardened}}

=== Modules ===
Dracut installs all available modules though some may need additional dependencies. The purpose of each module is to arrange for files to be included in the final initramfs image. In addition, dracut exposes hooks that run at certain points, which modules can hook into to perform required boot actions.

== Adding modules ==
Dracut comes with a suitable set of default modules (see below). You can override this module list in two ways: command line, or configuration file. Editing your configuration file will set up dracut to be re-run easily when you change kernels or other boot-time options. Options specified in {{path|/etc/dracut.conf}} can be overridden by files in {{path|/etc/dracut.conf.d}}, which are installed by various dracut-aware packages. Both options can be overridden by command-line parameters. The following configuration options deal with the default modules list:

{{FileBox|filename=/etc/dracut.conf|1=
# Equivalent to -H
hostonly="yes"

# Equivalent to -m "module module module"
dracutmodules+="dash kernel-modules rootfs-block udev-rules usrmount base fs-lib shutdown"

# Equivalent to -a "module"
add_dracutmodules+="module"

# Equivalent to -o "module"
omit_dracutmodules+="module"
}}

Specifying <code>dracutmodules</code> (or the <tt>-m</tt> option) will override the entire default list, and install ''only'' the modules specified. This can cut down significantly on image size (for example, if you don't need any kernel modules, or i18n support, etc.) If you are not sure which modules you need, you should build one fully-featured image and keep it in {{path|/boot}} while you experiment. If anything goes wrong, you can edit your {{path|grub.conf}} at boot to switch to that.

The other options can be used to add or remove items from the default list, including your own [[#Custom_modules|custom modules]]. If a module refuses to install (for example, its prerequisite binaries are mossing) there is a <code>--force-add</code> command-line switch (but no matching configuration option) to add them anyway. Note that forcing a module to be added this way is dangerous, as the installed scripts will likely to run execute commands that are not present.

== List of modules ==

An incomplete list of modules is below, with their additional requirements. 

{| class="table"
! Module !! Description !! Enabled? !!  Additional Packages
|-
| dash || Includes {{Path|/bin/dash}} as {{Path|/bin/sh}} || always ||
|-
| i18n || Includes keymaps, console fonts, etc. || always ||
|-  
| rpmversion || Includes dracut version in initramfs. || when {{path|/etc/redhat-release}} exists ||
|-
| convertfs || Merges {{Path|/}} into {{Path|/usr}} on next boot. || never ||
|-
| kernel-modules || Includes the kernel modules for root filesystems and other boot-time devices. || always ||
|-
| fstab-sys || Arranges for arbitrary partitions to be mounted before rootfs. || when {{Path|/etc/fstab.sys}} exists, or command line includes <code>--fstab</code> or <code>--add_fstab</code> ||
|-
| resume || Allows initramfs to resume from low-power state. || when swap partition exists ||
|- 
| rootfs-block || Arranges for the block device containing the rootfs to be mounted. || always ||
|-
| terminfo || Includes a terminfo file. || always ||
|-
| udev-rules || Includes udev and some basic rules. || always ||
|-
| securityfs || Arranges for the securityfs to be mounted early. || never ||
|-
| usrmount || Arranges for {{Path|/usr}} to be mounted. || always ||
|-
| base || Includes most basic utilities. || always ||
|- 
| fs-lib || Includes filesystem tools (including mount). || always ||
|-
| img-lib || Includes tools to decompress images. || never ||
|-
| shutdown || Sets up hooks to run on shutdown. || always ||
|-
| biosdevname || Enables BIOS network device renaming. || always || {{package|sys-apps/biosdevname}}, {{package|sys-apps/pciutils}} 
|-
| btrfs || Supports a btrfs rootfs. || host-only: rootfs || {{package|sys-fs/btrfs-progs}} 
|-
| caps || Supports dropping capabilities before init. || systemd not in use || {{package|sys-libs/libcap}} (also replaces <code>dash</code> with <code>bash</code>) 
|- 
| crypt || Supports an encrypted rootfs. || host-only: rootfs || {{package|sys-fs/cryptsetup}} 
|-
| crypt-gpg || Use gpg for crypt support (requires <code>crypt</code> module). || never (see note below) ||  {{package|app-crypt/gnupg}}
|-
| dmraid || Support rootfs on FakeRAID. || host-only: rootfs || {{package|sys-fs/multipath-tools}}, {{package|sys-fs/dmraid}}
|-
| dmsquash-live || Supports LiveCD rootfs. || never (host-only: refused) || 
|-
| gensplash || Include a static splash screen. || never ||  {{package|media-gfx/splashutils}}
|-
| iscsi || Supports rootfs on iscsi devices. || host-only: rootfs || {{package|sys-block/open-iscsi}}
|- 
| livenet || Retrieve rootfs over HTTP. (requires <code>dmsquash-live</code> modules) || never || 
|-
| lvm  || Supports rootfs on LVM device. || host-only: rootfs || {{package|sys-fs/lvm2}}
|-
| mdraid || Supports rootfs on software RAID. || host-only: rootfs ||  {{package|sys-fs/mdadm}}
|-
| multipath || Supports rootfs on multi-path device. || host-only: rootfs ||  {{package|sys-fs/multipath-tools}}
|-
| nbd || Supports rootfs on a network block device. || host-only: rootfs || {{package|sys-block/nbd}}
|-
| nfs || Supports NFS-mounted rootfs. || host-only: rootfs || {{package|net-fs/nfs-utils}} {{package|net-nds/rpcbind}}
|- 
| plymouth || Includes boot animation. || always || {{package|sys-boot/plymouth}}
|-
| ssh-client || Includes ssh and scp clients. || never || {{package|dev-libs/openssl}}
|-
| syslog || Includes remote logging support. || never || {{package|app-admin/syslog-ng}} or [[rsyslog]]
|-
| debug || Includes useful troubleshooting tools. || never || installed when <code>USE=debug</code> ||
|-
| dm || Includes device-mapper. || never || {{package|sys-fs/device-mapper}} ''or'' {{package|sys-fs/lvm2}}
|-
| ifcfg || Generates network config at runtime. || never || 
|-
| network || Brings up network for net booting. || always || {{package|net-misc/dhcp}}, {{package|sys-apps/iproute2}}
|-
| selinux || Arranges for the selinux policy to be loaded. || installed when <code>USE=selinux</code> ||
|-
| url-lib || Includes cUrl and SSL certs. || never || {{package|net-misc/curl}}
|}

* The Enabled field indicates when a particular module will be included ''by default'' into your initramfs image.
* Modules with pre-requisite packages cannot be included (even explicitly) if the required software is missing from the host.

# {{package|sys-boot/plymouth}} requires that {{package|x11-libs/libdrm}} be built with the {{highlight|<code>libkms</code>}} flag
# The additional packages require that one or more dependency libraries be built with the {{highlight|<code>static-libs</code>}} flag
# The Enabled field specifies when an installed module will be included ''by default'' into a built image:
#* Modules enabled for "host-only: rootfs" are included in host-only images if the active rootfs requires that module, and included in general-purpose images "always".
#* Modules enabled "never" must be explicitly added via the command-line or configuration file, as above.
#* Modules with pre-requisite packages ''cannot'' be included, even explicitly, if the required software is missing from the dracut build host.
#* <code>dmsquash-live</code> (and, by extension, <code>livenet</code>) cannot be installed in host-only mode, as that would be silly.
# <code>crypt-gpg</code> does not seem to have any effect on systemd. This is because crypto volumes are activated by systemd services. However, systemd will only ask once for the password if several volumes use the same password.

=== Customizing the image ===
Besides defining the list of modules to include, you can also customize the final initramfs in a few other ways. The <code>install_items</code> option in the configuration file lets you specify an arbitrary number of arbitrary items to add to your image. Other options add specific elements to the image, as described below:

==== Kernel modules ====
By default, the <code>kernel-modules</code> driver scans the list of available kernel modules, and installs the set of modules needed to boot a system and bring up the rootfs. This includes the hardware bus drivers (SCSI, ATA, USB, etc), keyboard drivers, block device drivers, and file system drivers. (In host-only mode, only the file systems used by the build host are included.) You can update the list of installed modules via the command-line or configuration file. When specifying a kernel module name, do not include the <code>.ko</code> extension.

{{FileBox|filename=/etc/dracut.conf|1=
# Equivalent to --drivers="module module module"
drivers+="module module module"

# Equivalent to --add-drivers
add_drivers+="module"

# Equivalent to --omit-drivers="module"
omit_drivers+="module"

# Equivalent to --filesystems="fs fs fs"
filesystems+="fs fs fs"

# Equivalent to --kmoddir="/lib/modules/fixed"
drivers_dir="/lib/modules/fixed"

# Equivalent to  --fwdir=":/lib/fw/alt:/lib/fw/alt2"
fw_dir+=":/lib/fw/alt:/lib/fw/alt2"
}}

* In host-only mode, the running hosts filesystems are always installed, regardless of the <code>filesystems</code> parameter.

==== Filesystems And Mount Points ====
The default image will arrange for your rootfs and your {{path|/usr}} partition (if different) to be mounted at boot time. The build process will obtain the device and file system information it needs from {{path|/proc/self/mountinfo}}. This may not be what you want, or you may need to have other partitions mounted as well.
To just have additional partitions mounted at boot you can add them under 

{{FileBox|filename=/etc/dracut.conf|1=
# Bring up <device> in initramfs, <device> should be the device name
add_device+=" /dev/mapper/sysvg-home /dev/mapper/sysvg-swap /dev/mapper/hdvg-private "
}}

To further alter the behavior of the initramfs one needs the <code>fstab-sys</code> module, and the following options:

* Create a file called {{path|/etc/fstab.sys}}, which will be copied to the initramfs and mounted.
* Specify <code>use_fstab="yes"</code> (or <tt>--use-fstab</tt>), which will use your system's {{path|/etc/fstab}} instead of {{path|/proc/self/mountinfo}}
* Specify <code>add_fstab+="''filename''"</code> or <tt>--add_fstab ''filename''</tt>, which will add the contents of ''filename'' to the initramfs's {{path|/etc/fstab}}.
* Specify <tt>--mount ''fstab mount spec''</tt>, which adds individual entries into your initramfs' {{path|/etc/fstab}}.

(Note that <code>add_fstab</code> does not automatically trigger <code>fstab-sys</code> to be included in the image; this may be a bug, as <code>use_fstab</code> does include the module but does not actually supply an {{path|/etc/fstab}}.)

== Booting the initramfs ==
Any parameters you need to pass to the dracut modules are passed on the kernel command line. If you are net booting, the DHCP server can also provide command-line parameters. The dracut scripts parse the kernel command line very early in the boot process and use the information found there to adjust their behavior. The list of options, by module, can be found in the man dracut.cmdline page.

== Tasks ==

=== ext boot ===
For booting an ext(2,3,4) filesystem you don't need any of the optional dracut modules. 
{{RootCmd|dracut -m "rootfs-block base" initramfs.img}}

Once you have the image built, the final step is to include the image in the boot loader. To do this, simply add a line in your {{Path|grub.conf}}:
{{FileBox|filename=/boot/grub/grub.conf|1=
kernel /boot/vmlinuz root=UUID=00000000-0000-0000-0000-000000000000
initrd /boot/initramfs.img
}}

It is recommended that you use the UUID= (or LABEL=) form of the root specification; to guard against your device names changing between boots. You can find the UUID of your root device by running this command:
{{RootCmd|ls -alF /dev/disk/by-uuid}}

=== NFS boot ===
For an NFS boot, you need only 3 modules and the nfs dracut module. 
{{USEflag
|net++yes+Set of helper modules providing networking support.
|dracut_modules_nfs++yes+Support NFS.
}}
{{RootCmd|dracut -m "nfs network base" initramfs-nfs-only.img}}


Booting is done with the following line in your [[Syslinux|PXE config]]. The rd.ip=auto let's it auto detect the NFS settings through DHCP. The NFS boot path is provided to the client through the DHCP option "root-path" with the following value: <SERVER>:<NFS Export>
{{FileBox|filename=/var/lib/tftpboot/pxelinux.cfg/default|1=
...
 APPEND initrd=initramfs-nfs-only.img rd.ip=auto root=dhcp
...
}}

=== NBD boot ===
For an NBD boot, you need only 3 modules and the nbd dracut module. 
{{USEflag
|net++yes+Set of helper modules providing networking support.
|dracut_modules_nbd++yes+Support NBD.
}}
{{RootCmd|dracut -m "nbd network base" initramfs-nbd-only.img}}


Booting is done with the following line in your [[Syslinux|PXE config]]. The rd.ip=auto let's it auto detect the NBD settings through DHCP. The NBD boot path is provided to the client through the DHCP option "root-path" with the following value: nbd:<SERVER>:<NBD_PORT>:<FS>
{{Note|Connecting to name based exports is not documented. A code review of the module shows that specifying an export name instead of a port number is allowed and can be used to connect to name based exports.}}
{{FileBox|filename=/var/lib/tftpboot/pxelinux.cfg/default|1=
...
 APPEND initrd=initramfs-nbd-only.img rd.ip=auto root=dhcp
...
}}
It is also possible to boot from a partitioned nbd device. To do this, the [[Syslinux|PXE config]] needs to include
* a kernel parameter "nbd.max_part=X" with X>0 to load the nbd module with partition support
* a root device setting specifying the partition to mount
* a netroot setting as described above for the root-path.
{{FileBox|filename=/var/lib/tftpboot/pxelinux.cfg/default|1=
...
 APPEND initrd=initramfs-nbd-only.img rd.ip=auto nbd.max_part=X root=/dev/nbd0pY netroot=nbd:<SERVER>:<NBD_PORT|EXPORTNAME>
...
}}
{{Note|During shutdown, networking (including dhcp) and nbd-client must not be stopped, otherwise the nbd can not be unmounted cleanly. For OpenRC, this can be configured in {{Path|/etc/conf.d/net}} for DHCP client daemon options and {{Path|/etc/conf.d/killprocs}} to exclude nbd-client processes from being killed.}}

=== Debug ===
For debugging the Dracut boot process, a special module is required. Including the module in the initramfs also includes several useful tools like {{Highlight|scp}} for copying logfiles.
{{USEflag
|debug++yes+Module installing additional tools like strace, file editor, ssh and more.
}}
{{RootCmd|dracut -m "<other modules>" initramfs-with-debug-only.img}}


Using the {{Highlight|rd.debug}} flag, all Dracut commands are shown. When you are dropped to the Dracut shell, the logfile will be available in {{Path|/run/initramfs/init.log}}.
{{FileBox|filename=/var/lib/tftpboot/pxelinux.cfg/default|1=
...
 APPEND initrd=initramfs-with-debug.img rd.debug
...
}}

=== Other filesystems ===
Other filesystems than the ones that are available through the Dracut modules can be installed using the {{Highlight|filesystems}} parameter. To include kernel modules, the {{Highlight|kernel-modules}} Dracut module also has to be included. This module is installed by default.
{{RootCmd|dracut -m "kernel-modules base" --filesystems "squashfs" initramfs-with-squashfs.img}}

== Custom modules ==

=== A quick Dracut module ===
See [http://rich0gentoo.wordpress.com/2012/01/21/a-quick-dracut-module/ Rich0's Gentoo Blog] for now.

=== 40uvesafb ===
Load the [[uvesafb]] kernel module and add the {{Package|sys-apps/v86d}} binary to the initramfs.
{{FileBox|filename=/usr/lib/dracut/modules.d/40uvesafb/module-setup.sh|lang=bash|1=
#!/bin/bash

check() {
    [[ -x /sbin/v86d && -f "$srcmods/kernel/drivers/video/uvesafb.ko" ]]
}

depends() {
    return 0
}

installkernel() {
   hostonly='' instmods uvesafb
}

install() {
    dracut_install /sbin/v86d
    inst_hook pre-trigger 9 "$moddir/uvesafb-pretrigger.sh"
}
}}
{{FileBox|filename=/usr/lib/dracut/modules.d/40uvesafb/uvesafb-pretrigger.sh|lang=bash|1=
#!/bin/sh
if getargbool 1 rd.uvesafb -n rd_NO_UVESAFB; then
    [ ! -c /dev/fb0 -a -e /sbin/v86d ] && modprobe uvesafb
fi
}}

== See also ==
[[Genkernel]]

==External resources==
* [https://fedoraproject.org/wiki/Dracut The Official Fedora Wiki Dracut Page]
* [http://git.kernel.org/cgit/boot/dracut/dracut.git The Official Dracut Gitweb Page]

[[Category:Initramfs]]
[[Category:Google Summer of Code]]
