{{InfoBox stack
|{{InfoBox homepage|https://www.winehq.org|header=true}}
|{{InfoBox wikipedia|Wine (software)}}
|{{InfoBox gitweb|https://source.winehq.org/git/wine.git/|raw=true}}
|{{InfoBox github|wine-mirror/wine}}
|{{InfoBox project|wine}}
}}

{{Note|This document is a work in progress and will be merged back into [[Wine|this page]] when app-emulation/wine is removed from the repository}}

'''Wine''' ('''W'''ine '''I'''s '''N'''ot an '''E'''mulator) is an application that allows Windows software to run on Linux. This article deals with installing, configuring, and maintaining a general purpose Wine environment on Gentoo.

== Packaging details ==

As many Wine users know, there are often regressions or an application works better on one version of wine than another. Going forward, packaging in Gentoo will allow simultaneous installation of multiple versions of Wine.

Additionally, to expedite vanilla releases as well as permit multiple configurations for each Wine installation, the major patchsets have been split out into separate packages.

=== Quick start ===

For most users, worrying about the various packages and what they do should not be a concern.The split packaging and slotting is a power user feature, and most users will be OK with simply installing {{Package|virtual/wine}}, which chooses which wine version for the user.

{{Emerge|virtual/wine}}

=== Wine variants ===

*{{Package|app-emulation/wine-vanilla}}: upstream Wine with no external patchsets.
*:: (like if the old packaging forced USE="-staging -d3d9".)
*{{Package|app-emulation/wine-staging}}: Wine with [https://www.wine-staging.com/ Wine-Staging's patchset.]
*:: (like if the old packaging forced USE="+staging -d3d9".)
*{{Package|app-emulation/wine-d3d9}}: Wine with [https://wiki.ixit.cz/d3d9 Ixit's Gallium Nine patchset.]
*:: (like if the old packaging forced USE="-staging +d3d9".)
*{{Package|app-emulation/wine-any}}: Wine with any of the patchsets or flags.
*:: (exactly like the old packaging regarding USE flags.)
*:: wine-any exists to allow the user to build any combination that they'd like (like the old packaging). This means the user could use wine-any to use both Wine-Staging and Gallium Nine. Alternatively, the user could use wine-any to try out another configuration from other packages. For example, the user could build wine-vanilla without PulseAudio, and could build wine-any with PulseAudio.  The sky is the limit on how a user may choose to use app-emulation/wine-any.

==== Choosing a variant ====

; Shouldn't I just choose wine-any, even if I'm not going to use all of its flags?
: The answer to that is a resounding no.  {{Package|virtual/wine}} manages selection of of a variant in such a way as to provide the best experience to the user. Most users don't want to be dealing with external patchsets. External patchsets may introduce bugs that don't exist in the vanilla Wine release and can make using Wine more complicated for the user. External patchsets also can be released up to a week or two after vanilla wine (or each other), meaning that the period for releases can be significantly slower for those using {{Package|app-emulation/wine-staging}}, {{Package|app-emulation/wine-d3d9}}, or {{Package|app-emulation/wine-any}}.

; I was perfectly happy with app-emulation/wine, what should I choose?
: For the least change, wine-any should do, since regarding its USE flags, it's exactly like the old packaging.

; What if I want to manually choose a variant anyway? Which should I choose?
: This really isn't a question that the authors of this document can answer. Typically, the logic works as follows:
:*Unless you need something more, choose {{Package|app-emulation/wine-vanilla}}.
:*If an application requires advanced features only available in Wine-Staging, choose {{Package|app-emulation/wine-staging}}.
:*If you do research online and find that Wine-Staging provides better performance for an application, choose {{Package|app-emulation/wine-staging}}.
:*If you do research online and find that Gallium Nine provides better performance for an application, choose {{Package|app-emulation/wine-d3d9}}
:*If you do research online and find that you need Wine-Staging features and Gallium Nine for an application, choose {{Package|app-emulation/wine-any}}
:*If you have built another variant with a USE flag set and want to try an alternative flag set, like using Gstreamer on {{Package|app-emulation/wine-vanilla}} and are wanting to use PulseAudio on the same version, choose {{Package|app-emulation/wine-any}} in addition to the other variant choice.

; I went through the trouble of choosing a variant... Why don't I see an ebuild for a particular version?
: As mentioned earlier, part of the benefit of the split packaging is that some packages can be released without holding up others. A chart detailing all available versions and where in the pipeline they are can be found [https://dev.gentoo.org/~np-hardass/proj/wine/status.php here].

== Installation ==

=== USE flags ===

{{USEflag|package=virtual/wine}}

{{Note|Not all USE flags are available on all package variants.}}

{{USEflag|package=app-emulation/wine-any}}

Users may also find information about specific USE flags required to run their applications [[Wine/Application_USE_Flags|here]].

=== 32-bit vs 64-bit ===

Invariably, users want to understand why they have to rebuild tons of packages to install Wine because they have to enable <code>abi_x86_32</code> on a lot of Wine's dependencies... This is unavoidable, and we must highly warn against disabling <code>abi_x86_32</code> and installing only with abi_x86_64 unless you really know what you are doing.  Often, an application will have components that are 32 bit (or even 16 bit) and by installing Wine without 32 bit support, the user is left unable to install or launch an application.  It is best to enable 32 bit support on a per-package basis, as indicated by the package manager, rather than globally.

=== Environment variables ===

Traditionally, live (9999) ebuilds support setting the repository commit as an environmental variable.  This poses some issues with an ebuild that has multiple upstream repositories.  To work around this issue, Wine's live ebuilds support 3 environmental variables for individually configuring the commit that each repository checks out.  The WineHQ repository is controlled by <var>WINE_COMMIT</var>, Wine-Staging repository by STAGING_COMMIT, and Ixit's Gallium Nine repository by <var>D3D9_COMMIT</var>.  The *_COMMIT variables may contain either a commit hash from that repository or a git tag from that repository.

For example, one could select the WineHQ tag "wine-2.0-rc5" to emerge the 2.0 RC 5.

{{RootCmd|WINE_COMMIT{{=}}"wine-2.0-rc5" emerge -av '{{=}}app-emulation/wine-vanilla-9999'}}

One could additionally pin Wine-Staging to the same release by finding the appropriate tag, "v2.0-rc5" and augmenting the previous as follows:

{{RootCmd|WINE_COMMIT{{=}}"wine-2.0-rc5" STAGING_COMMIT{{=}}"v2.0-rc5" emerge -av '{{=}}app-emulation/wine-staging-9999'}}

Other environmental variables, which affect Wine at runtime, are discussed [[#Runtime environment variables|below]].

=== Emerge ===

Enable the USE flags of your choosing on the virtual and then on the variant selected (automatically by the virtual or manually by yourself) and {{c|emerge}} the package:

{{Emerge|virtual/wine}}

or

{{Emerge|<nowiki>app-emulation/wine-${VARIANT}</nowiki>}}

Only versions classified as "stable" by upstream will be stabilized in Gentoo, and only as the {{Package|app-emulation/wine-vanilla}} variant, as external patchsets are not considered stable.  Some users may opt to add Wine variants to their package.keywords file to allow for installation of development versions of Wine.

== Configuration ==

=== Runtime environment variables ===

The environment variables of the shell that {{c|wine}} is started from are made accessible to the Windows/DOS processes. Some very useful Wine-specific variables include, but are not limited to, <var>WINEPREFIX</var>, <var>WINEARCH</var>, and <var>WINEDEBUG</var>.

See the {{c|man wine}} and {{c|man wineserver}} manual entries for more detailed information concerning Wine's environment variables.

==== WINEPREFIX ====

{{important|The prefix directory (by default <code>$HOME/.wine</code>) is generated when Wine is executed in any way (by for example, running <code>winecfg</code>).  This also means that, if executed as the root user (see [https://wiki.winehq.org/FAQ#Should_I_run_Wine_as_root.3F WineHQ FAQ - Should I Run Wine as Root]), a Wine prefix will (by default) be generated at <code>/root/.wine</code>.}}

To create a Wine prefix in a custom location (instead of {{Path|~/.wine}}) without affecting the default:

{{Cmd|WINEPREFIX{{=}}"~/.wine-someprefix" wineboot}}

The above would create a Wine prefix at {{Path|/home/<user>/.wine-someprefix}}.

{{Note|Once a prefix has been created, the 'bitness' (arch) can not be changed. As such, the <var>WINEARCH</var> should be defined the when the prefix is created if the user wants to override the default. <var>WINEARCH</var> is meaningless beyond prefix instantiation.}}

==== WINEARCH ====

To create a 32-bit installation instead of the default (when built) 64-bit:

{{Cmd|WINEARCH{{=}}"win32" WINEPREFIX{{=}}"~/.wine-someprefix" wineboot}}

The Wine executable used could be anything that runs Wine, such as {{c|winecfg}}, which often makes sense while creating a clean, new prefix.

<var>WINEARCH</var> requires that Wine be built with the corresponding <code>abi_x86</code> flags. 

==== WINEDEBUG ====

Essential in finding out why an application is misbehaving when the basic terminal output or messages boxes are not enough.  See https://wiki.winehq.org/Debug_Channels for examples.

=== Configuration tools ===

The following tools include graphical and command line interfaces for managing Wine prefixes:

* {{Package|app-emulation/q4wine}} â€“ Qt5 GUI configuration tool for Wine.
* {{Package|app-emulation/winetricks}} â€“ Easy way to install DLLs needed to work around problems in Wine.
* {{Package|app-emulation/playonlinux}} â€“ Set of scripts to easily install and use Windows games and software.

== Upstream FAQs ==

Some [https://wiki.winehq.org/FAQ upstream FAQ] entries that users might find useful:

*[https://wiki.winehq.org/FAQ#How_do_I_uninstall_individual_Windows_applications.3F How to uninstall individual applications]
*[https://wiki.winehq.org/FAQ#How_do_I_wipe_the_virtual_Windows_installation.3F How to remove a Wine prefix]
*[https://wiki.winehq.org/FAQ#How_can_I_prevent_Wine_from_changing_the_filetype_associations_on_my_system_or_adding_unwanted_menu_entries.2Fdesktop_links.3F How to prevent Wine from creating menu items]

== Troubleshooting ==

When a user encounters a problem with an application, they should try the latest development version to see if the unwanted behavior still exists.  If Wine has been built with options such as <code>-fomit-frame-pointer</code> or <code>--hash-style=both</code>, the Wine developers will likely be unable to help with the issue, and reports including output from such builds should not be reported to the [https://bugs.winehq.org/ Wine Bugzilla].

The <code>custom-cflags</code> USE flag should be enabled for debugging builds.

For more directions on reporting bugs, see [https://wiki.winehq.org/Bugs Bugzilla and Bugs] at wiki.winehq.

=== Support ===

Users may find additional support in the {{IRC|gentoo-wine}} channel on Freenode.

== See also ==

* [[Games/emulation|Game emulators]] â€“ contains lists of game emulators available through Gentoo.
* [[Proton (app-emulation)]] â€“ Valve's compatibility tool for Steam Play based on Wine and additional components.

== External resources ==

* {{Bug|app-emulation/wine|search=package}} â€“ Wine related bugs.
* [https://wiki.winehq.org/ WineHQ Wiki]
* [https://appdb.winehq.org/ Wine Application Database] â€“ Search for the game or program to install here to see if it is stable.
* [https://github.com/wine-staging/wine-staging Wine Staging at GitHub]

[[Category:Emulation]]
