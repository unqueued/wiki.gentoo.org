{{InfoBox stack
|{{InfoBox homepage|http://www.winehq.org|header=true}}
|{{InfoBox wikipedia|Wine (software)}}
|{{InfoBox gitweb|http://source.winehq.org/git/wine.git/|raw=true}}
|{{InfoBox github|wine-mirror/wine}}
}}

{{Note| This document is a work in progress and will be merged back into [[Wine|this page]] when app-emulation/wine is removed from the repository}}

'''Wine''' ('''W'''ine '''I'''s '''N'''ot an '''E'''mulator) is an application that allows Windows software to run on Linux. This article deals with installing, configuring, and maintaining a general purpose Wine environment on Gentoo.

== Packaging Details ==
As many Wine users know, there are often regressions or an application works better on one version of wine than another.  Going forward, packaging in Gentoo will allow simultaneous installation of multiple versions of Wine.

Additionally, to expedite vanilla releases as well as permit multiple configurations for each Wine installation, the major patchsets have been split out into separate packages.

=== Quick Start ===
For most users, worrying about the various packages and what they do should not be a concern.  The split packaging and slotting is a power user feature, and most users will be OK with simply installing {{Package|virtual/wine}}, which chooses which wine version for the user.  
{{Emerge|virtual/wine}}

=== Wine Variants ===
*{{Package|app-emulation/wine-vanilla}}: upstream Wine with no external patchsets
*:: (like if the old packaging forced USE="-staging -d3d9")
*{{Package|app-emulation/wine-staging}}: Wine with [https://www.wine-staging.com/ Wine-Staging's patchset]
*:: (like if the old packaging forced USE="+staging -d3d9")
*{{Package|app-emulation/wine-d3d9}}: Wine with [https://wiki.ixit.cz/d3d9 Ixit's Gallium Nine patchset]
*:: (like if the old packaging forced USE="-staging +d3d9")
*{{Package|app-emulation/wine-any}}: Wine with any of the patchsets or flags
*:: (exactly like the old packaging regarding USE flags)
*:: wine-any exists to allow the user to build any combination that they'd like (like the old packaging).  This means the user could use wine-any to use both Wine-Staging and Gallium Nine.  Alternatively, the user could use wine-any to try out another configuration from other packages.  For example, the user could build wine-vanilla without PulseAudio, and could build wine-any with PulseAudio.  The sky is the limit on how a user may choose to use app-emulation/wine-any.

==== Choosing a variant ====
  Shouldn't I just choose wine-any, even if I'm not going to use all of its flags?
:The answer to that is a resounding no.  {{Package|virtual/wine}} manages selection of of a variant in such a way as to provide the best experience to the user.  Most users don't want to be dealing with external patchsets.  External patchsets may introduce bugs that don't exist in the vanilla Wine release and can make using Wine more complicated for the user.  External patchsets also can be released up to a week or two after vanilla wine (or each other), meaning that the period for releases can be significantly slower for those using {{Package|app-emulation/wine-staging}}, {{Package|app-emulation/wine-d3d9}}, or {{Package|app-emulation/wine-any}}.

  What if I want to manually choose a variant anyway? Which should I choose?
:This really isn't a question that the authors of this document can answer.  Typically, the logic works as follows:
:*Unless you need something more, choose {{Package|app-emulation/wine-vanilla}}.
:*If your application requires advanced features only available in Wine-Staging, choose {{Package|app-emulation/wine-staging}}.
:*If you do research online and find that Wine-Staging provides better performance for your application, choose {{Package|app-emulation/wine-staging}}.
:*If you do research online and find that Gallium Nine provides better performance for your application, choose {{Package|app-emulation/wine-d3d9}}
:*If you do research online and find that you need Wine-Staging features and Gallium Nine for your application, choose {{Package|app-emulation/wine-any}}
:*If you have built another variant with a USE flag set and want to try an alternative flag set, like using Gstreamer on {{Package|app-emulation/wine-vanilla}} and wanting to use PulseAudio on the same version, choose {{Package|app-emulation/wine-any}} in addition to your other variant choice. 

== Installation ==

=== USE flags ===
{{USEflag|package=virtual/wine}}
{{Note|Not all USE flags are available on all variants}}
{{USEflag|package=app-emulation/wine-any}}

=== Environmental variables ===
`
Traditionally, live (9999) ebuilds support setting the repository commit as an environmental variable.  This poses some issues with an ebuild that has multiple upstream repositories.  To work around this issue, Wine's live ebuilds support 3 environmental variables for individually configuring the commit that each repository checks out.  The WineHQ repository is controlled by WINE_COMMIT, Wine-Staging repository by STAGING_COMMIT, and Ixit's Gallium Nine repository by D3D9_COMMIT.  The *_COMMIT variables may contain either a commit hash from that repository or a git tag from that repository.

For example, one could select the WineHQ tag "wine-2.0-rc5" to emerge the 2.0 RC 5.
{{RootCmd| WINE_COMMIT{{=}}"wine-2.0-rc5" emerge -av '{{=}}app-emulation/wine-vanilla-9999'}}
One could additionally pin Wine-Staging to the same release by finding the appropriate tag, "v2.0-rc5" and augmenting the previous as follows:
{{RootCmd| WINE_COMMIT{{=}}"wine-2.0-rc5" STAGING_COMMIT{{=}}"v2.0-rc5" emerge -av '{{=}}app-emulation/wine-staging-9999'}}

Other environmental variables, which affect Wine at runtime, are discussed [[#Runtime environment variables|below]].

=== Emerge ===

Enable the USE flags of your choosing on the virtual and then on the variant selected (automatically by the virtual or manually by yourself) and {{c|emerge}} the package:

{{Emerge|virtual/wine}}
or
{{Emerge|<nowiki>app-emulation/wine-${VARIANT}</nowiki>}}

Only versions classified as "stable" by upstream will be stabilized in Gentoo, and only as the {{Package|app-emulation/wine-vanilla}} variant, as external patchsets are not considered stable.  Some users may opt to add Wine variants to their package.keywords file to allow for installation of development versions of Wine.

== Configuration ==

=== Disabling the menubuilder ===

To prevent Wine from adding menu entries and desktop links, the following {{Path|.dll}} override can be used:

{{FileBox|filename=~/.bashrc|lang=bash|1=
# Prevent Wine from adding menu entries and desktop links.
export WINEDLLOVERRIDES="winemenubuilder.exe=d"
}}

Previously added entries can be deleted by removing the corresponding files from {{Path|~/.local/share/applications}}. See [http://wiki.winehq.org/FAQ#head-ddc6f242056eb1a4fe566c9434d15fd8b64606aa Wine FAQ] for examples.

=== Tools and interfaces ===

Tools such as graphical interfaces for Wine can be helpful for users who want an alternative to the command-line:

* {{Package|app-emulation/q4wine}} – Qt4 GUI configuration tool for Wine.
* {{Package|app-emulation/wine-doors}} – Wine-doors is a package manager for Wine.
* {{Package|app-emulation/winetricks}} – Easy way to install DLLs needed to work around problems in Wine.
* {{Package|app-emulation/playonlinux}} – Set of scripts to easily install and use Windows games and software.

=== Runtime environment variables === <!-- linked to from "Environmental variables" section above -->

The environment variables of the shell that {{c|wine}} is started from are made accessible to the Windows/DOS processes. Some very useful Wine-specific variables include, but are not limited to, <var>WINEPREFIX</var>, <var>WINEARCH</var>, and <var>WINEDEBUG</var>.

See the {{c|man wine}} and {{c|man wineserver}} manual entries for more detailed information concerning Wine's environment variables.

==== WINEPREFIX ====

To create a Wine prefix in a custom location without affecting the default:

{{Cmd|WINEPREFIX{{=}}"~/wine_testi" wineboot}}

The above would create the Windows installation in the home path of the user, under {{Path|/home/<user>/wine_testi}}.

{{Note|Once a prefix has been created, the 'bitness' (arch) can not be changed. As such, the <var>WINEARCH</var> is not required to be defined for every command, unlike the <var>WINEPREFIX</var> variable. When using a non-default prefix without exporting it, the prefix and path need to be defined for each command.}}

==== WINEARCH ====

To create a 32-bit installation instead of the default (when built) 64-bit:

{{Cmd|WINEARCH{{=}}"win32" WINEPREFIX{{=}}"~/wine_testi" wineboot}}

The Wine executable used could be anything that runs Wine, such as {{c|winecfg}}, which often makes sense while creating a clean, new prefix.

To use 32-bit windows programs on a 64-bit linux-system you must set the USE-Flags abi_x86_32 and abi_x86_64 for wine and all packages needed by wine (can be do automaticaly). I have set this flags in make.conf and remove it for some packages in package.use which won't be emerged with both flags.

==== WINEDEBUG ====

Essential in finding out why an application is misbehaving when the basic terminal output or messages boxes are not enough.  See [[#Debugging|Debugging]] for examples.

== Troubleshooting ==

When a user encounters a problem with an application, they should try the latest development version to see if the unwanted behavior still exists.  If Wine has been built with options such as <code>-fomit-frame-pointer</code> or <code>--hash-style=both</code>, the Wine developers will likely be unable to help with the issue, and reports including output from such builds should not be reported to the [http://bugs.winehq.org/ Wine Bugzilla].

The <code>custom-cflags</code> USE flag should be enabled for debugging builds.

For more directions on reporting bugs, see [http://wiki.winehq.org/Bugs Bugzilla and Bugs] at wiki.winehq.

=== Support ===

Users may find additional support in the [irc://irc.freenode.net/#gentoo-wine #gentoo-wine] channel on Freenode.

== Packaging Notes ==

Version 1.9.24 was skipped due to a lack of a staging release

=== Wine-Staging in >{{=}}wine-2.0 ===

Starting with the release of {{=}}wine-2.0, the "staging" and related USE flags will not be available for stable branch wine ebuilds.  This means that wine-2.0* will not have staging available, but versions >{{=}}wine-2.1 and <wine-3.0 will.  Through a special arrangement with the Wine-Staging developers, staging tarballs were created for the previous stable branch, but after some discussion, it was decided to terminate this going forward because Wine-Staging, by definition and mission, is staging quality, not stable. Though Wine-Staging released a tarball for {{=}}wine-2.0, it will not be packaged, to provide consistency with the Gentoo stable packaging going forward.

=== Upcoming packaging changes ===
Soon, a rework of the wine package will be released for Gentoo which allows multiple installations in parallel.  What this means for users is that if they have an application that only works on a particular version of wine, they can install that version along side any other version.  Additionally, wine will be split into several packages.  Currently, the intention is to have "wine-vanilla," "wine-staging," and "wine-d3d9" packages so that users can also use multiple patchsets in parallel.  Management of the default wine installation will be handled with an eselect module.

== See also ==

* [[Games/emulation|Game emulators]] – contains lists of game emulators available through Gentoo.

== External resources ==

* {{Bug|app-emulation/wine|search=package}} – Wine related bugs.
* [http://wiki.winehq.org/ WineHQ Wiki]
* [http://appdb.winehq.org/ Wine Application Database] – Search for the game or program to install here to see if it is stable.

[[Category:Emulation]]
