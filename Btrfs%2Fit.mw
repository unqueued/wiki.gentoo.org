<languages />

{{InfoBox stack
|{{InfoBox homepage|http://btrfs.wiki.kernel.org|header=true}}
|{{InfoBox gitweb|http://git.kernel.org/cgit/linux/kernel/git/kdave/btrfs-progs.git|raw=true|text=Userspace}}
|{{InfoBox gitweb|http://git.kernel.org/cgit/linux/kernel/git/mason/linux-btrfs.git/tree/fs/btrfs?id{{=}}HEAD|raw=true|text=Kernel}}
|{{InfoBox wikipedia}}
|{{InfoBox ohloh}}
}}

'''Btrfs''' è [[Article description::un [[filesystem]] CoW (copy-on-write, copia-in-scrittura) adatto a Linux che mira ad implementare funzionalità avanzate, concentrandosi sulla tolleranza agli errori, la riparazione e la facilità di amministrazione.]] Sviluppato congiuntamente con Oracle, Red Hat, Fujitsu, Intel, SUSE, STRATO, e molti altri, Btrfs è rilasciato sotto licenza [[wikipedia:GNU_General_Public_License|GPL]] ed è aperto ai contributi di chiunque.

== Caratteristiche ==

Ext4 è sicuro e stabile e può gestire filesystems di grandi dimensioni con estensioni, quindi perchè cambiare? Mentre è vero che Btrfs è ancora considerato sperimentale e sta crescendo in stabilità, il momento in cui diventerà il filesystem di default per i sistemi Linux si sta avvicinando. Qualche distribuzione Linux ha già iniziato il passaggio ad esso già sui rilasci correnti. Btrfs ha un numero di caratteristiche avanzate in comune con ZFS, il che rende il file system ZFS popolare con le distribuzioni BSD e i dispositivi NAS.

* '''Copy on Write (CoW) e snapshotting''' - Rende i backup incrementali indolori anche da un filesystem "hot" o da una macchina virtuale (VM).
* '''File level checksums''' - Metadata per ogni file include un checksum che è utilizzato per rilevare e correggere gli errori.
* '''Compression''' - I files possono essere compressi e decompressi immediatamente, e così vengono migliorate le performance in velocità di lettura.
* '''Auto deframmentazione''' - I filesystems sono sintonizzati da un thread di fondo ''mentre'' sono in uso.
* '''Sottovolumi''' - I filesystems possono condividere un singola parte di spazio del disco invece di essere ripartiti in partizioni.
* '''RAID''' - Btrfs esegue la propria implementazione RAID così che non sono necessari né LVM né {{c|mdadm}} per avere il RADI. Ad oggi sono supportati RAID 0 e 1; RAID 5 e 6 sono in fase di sviluppo.
* '''Le partitioni sono optional''' - Mentre Btrfs può lavorare con le partizioni, esso ha ANCHE il potenziale di poter utilizzare i dispositivi ({{Path|/dev/<device>}}) direttamente.
* '''Deduplicazione dei dati''' - C'è un supporto limitato alla deduplicazione dei dati; tuttavia, la deduplicazione diventerà una caratteristica standard di Btrfs. Questa abilita Btrfs a salvare spazio confrontando i file tramite diffrazioni binarie.

{{Tip|Per qualsiasi approfondimento e per l'elenco completo di caratteristiche vedere [https://btrfs.wiki.kernel.org/index.php/Status la pagina di stato della wiki].Non tutte le funzionalità sono abbastanza mature da poter essere utilizzate in molti usi.}}

I nuovi filesystem raggruppati sfrutteranno facilmente i vantaggi di Btrfs con il suo copy-on-write e le sue altre caratteristiche avanzate. [http://ceph.com/ Ceph] è un esempio di filesystem raggruppato che sembra essere promettente, e può trarre vantaggio da Btrfs.

== Installazione ==

=== Kernel ===

Attivare le seguenti opzioni del kernel per abilitare il supporto Btrfs:

{{KernelBox|title=Attivare Btrfs nel kernel|1=
File systems  --->
    <*> Btrfs filesystem
}}

=== Emerge ===

Il pacchetto {{Package|sys-fs/btrfs-progs}} contiene le necessarie utilità per lavorare con il filesystem Btrfs.

{{Emerge|sys-fs/btrfs-progs}}

== Utilizzo ==

Digitare lunghi comandi Btrfs può rapidamente diventare un problema. Ogni comando (oltre al comando iniziale {{c|btrfs}}) può essere ridotto a una breve serie di istruzioni. Questo metodo è utile quando si lavora da linea di comando per ridurre il numero di caratteri digitati.

Per esempio, per deframmentare un filesystem situato su {{Path|/}}, di seguito viene mostrato un comando integrale:

{{RootCmd|btrfs filesystem defragment -v / }}

Abbreviare ciascuno dei comandi dopo {{c|btrfs}} riducendoli al loro prefisso unico e più breve. In tale contesto, unico significa che nessun altro comando {{c|btrfs}} corrisponderà a quel comando più breve. La versione breve del comando di cui sopra, quindi, è:

{{RootCmd|btrfs fi de -v / }}

Nessun altro comando {{c|btrfs}} inizia con <code>fi</code>; <code>filesystem</code> è il solo. La stessa cosa vale per il sotto-comando <code>de</code>, sotto il comando <code>filesystem</code>.

=== Creazione ===

{{Warning|Il comando {{c|mkfs.btrfs}} distrugge irreversibilmente ogni contenuto della partizione che gli è stato detto di formattare. Assicurarsi di selezionare la giusta partizione "prima" di eseguire qualsiasi comando {{c|mkfs}}!}}

Per creare un filesystem Btrfs nella partizione {{Path|/dev/sdXN}}:

{{RootCmd|mkfs.btrfs /dev/sdXN}}

Nell'esempio sopra, sostituire <code>N</code> con il numero di partizione e <code>X</code> con la lettera corrispondente al disco che deve essere formattato. Per esempio, per formattare la terza partizione nel primo disco del sistema con Btrfs, eseguire:

{{RootCmd|mkfs.btrfs /dev/sda3}}

{{Important|L'ultima colonna di numeri in {{Path|/etc/fstab}} dovrebbe essere <code>0</code> per tutte le partizioni Btrfs. {{c|fsck.btrfs}} e {{c|btrfsck}} non dovrebbero essere eseguiti durante ogni avvio del sistema.}}

=== Montare i filesystems ===

Dopo la loro creazione, i filesystems possono essere montati in vari modi:

* {{c|[[mount]]}} - Montare manualmente.
* {{Path|[[fstab]]}} - Definire il mount points in {{Path|/etc/fstab}} abilitando il montaggio automatico all'avvio del sistema.
* [[Removable media]] - Montaggio automatico a richiesta (utile per i drives USB).
* [[AutoFS]] - Montaggio automatico all'accesso del filesystem.

=== Conversione dei filesystems ext* ===

E' possibile convertire i filesystems ext2, ext3 e ext4 a Btrfs utilizzando l'utilità {{c|btrfs-convert}}.

Le seguenti istruzioni supportano solamente la conversione di filesystems che non sono montati. Per convertire la partizione di root, avviare con il disco di recupero del sistema (SystemRescueCD è ottimo) ed eseguire i comandi di conversione sulla partizione di root.

Per prima cosa assicurarsi che il mount point sia smontato:

{{RootCmd|umount ''<mounted_device>''}}

Check the integrity of the filesystem using the appropriate {{c|fsck}} tool. In the next example, the filesystem is ext4:

{{RootCmd|fsck.ext4 -f ''<unmounted_device>''}}

Utilizzare {{c|btrfs-convert}} per convertire il dispositivo ext* formattato dentro il dispositivo Btrfs formattato:

{{RootCmd|btrfs-convert ''<unmounted_device>''}}

Assicurarsi di modificare il file {{Path|/etc/fstab}} dopo che il dispositivo è stato formattato cambiando la colonna relativa al filesystem da ext4 a Btrfs:

{{FileBox|filename=/etc/fstab|title=Modificare da ext4 a btrfs|1=<pre>
<device>   <mountpoint>  btrfs  defaults  0 0</pre>}}

=== Deframmentazione ===

Un'altra caratteristica di Btrfs è la deframmentazione online. Per deframmentare un filesystem di root Btrfs eseguire:

{{RootCmd|btrfs filesystem defragment -r -v /}}

{{Warning|La deframmentazione con le versioni del kernel < 3.9 o ≥ 3.14-rc2 così come con le versione stabili del kernel Linux ≥ 3.10.31, ≥ 3.12.12 o ≥ 3.13.4 rovina la ref-links tra i files e le loro copie COW<ref>[https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs-filesystem man page for btrfs-filesystem(8)], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on 6th February, 2017.</ref> e ciò potrebbe incrementare notevolmente l'utilizzo dello spazio. Assicurarsi di avere abbastanza spazio libero disponibile e non troppe snapshots nel disco per evitare che le partizioni btrfs siano troppo lente.}}

=== Compressione ===

Btrfs supporta la compressione trasparente utilizzando gli algoritmi zlib e lzo.

E' possibile comprimere files specifici utilizzando gli attributi del file:

{{Cmd|chattr +c}}

L'opzione di montaggio <code>compress</code> imposta il comportamento di default di comprimere tutti i nuovi files creati. Per recomprimere l'intero file system, eseguire il seguente comando:

{{RootCmd|btrfs filesystem defragment -r -v -clzo /}}

In base alle performance della CPU e del disco, utilizzare la compressione lzo potrebbe migliorare l'intero rendimento.

E' possibile utilizzare anche l'algoritmo di compressione zlib al posto di lzo. Zlib è più lento ma ha un rapporto di compressione più alto:

{{RootCmd|btrfs filesystem defragment -r -v -czlib /}}

=== RAID ===

Creare i RAID su Btrfs è molto più facile che crearli  utilizzando {{c|mdadm}}.

Il metodo più semplice è quello di utilizzare l'intero dispositivo per creare un RAID:

{{RootCmd|mkfs.btrfs -m raid1 ''<device1>'' ''<device2>'' -d raid1 ''<device1>'' ''<device2>''}}

{{Warning|Attualmente non è sicuro utilizzare le versioni di RAID 5 o 6<ref>[https://btrfs.wiki.kernel.org/index.php/RAID56 Article mentioning that parity RAID code has multiple serious data-loss bugs], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on January 1st, 2017.</ref>. Le versioni di RAID 5 e 6 hanno avuto qualche correzione<ref>Michael Larabel, [http://www.phoronix.com/scan.php?page=news_item&px=Linux-4.12-Btrfs-RAID-Mostly-OK Btrfs RAID56 "Mostly OK"], Phoronix. July 8, 2017.</ref> sulla versione di Linux 4.12, ma lo stato complessivo è ancora marcato come '''instabile'''.<ref>[https://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs.git/commit/?h{{=}}for-linus-4.12&id{{=}}28d70e237dac905cd8d1896af10216b7d2bced24 btrfs: scrub: Fix RAID56 recovery race condition], source commit, April 18th 2017.</ref><ref>[http://lkml.iu.edu/hypermail/linux/kernel/1705.1/01197.html GIT PULL Btrfs from Chris Mason], [http://lkml.iu.edu/hypermail/linux/kernel/index.html Linux kernel mailinglist], May 9th 2017.</ref>. Gli utenti che vogliono utilizzare le funzionalità RAID5 o RAID6 di btrfs possono andare a vedere la [https://btrfs.wiki.kernel.org/index.php/Status pagina dello stato di btrfs] per monitorare lo stato di stabilità di dette modalità prima di utilizzarle.}}

=== Sottovolumi ===

Come detto sopra nell'elenco delle funzioni, Btrfs può creare sottovolumi. I sottovolumi possono essere utilizzati per meglio organizzare ed amministrare i dati. Essi diventano potenti specialmente se combinati con gli snapshots. Va fatta una distinzione importante tra i sottovolumi Btrfs e i sottovolumi creati dal Logical Volume Management ([[LVM]]). I sottovolumi Btrfs non sono dispositivi a livello di blocco, essi sono spazi di nomi di file POSIX.<ref name="subvolumes">[https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Subvolumes Section explaining the differences between subvolumes and logical volumes in LVM], [https://btrfs.wiki.kernel.org Btrfs wiki].Retrieved on January 1st, 2017.</ref> Essi possono essere creati in qualsiasi posizione del filesystem ed agiranno come qualsiasi altra directory nel sistema con un  avvertimento: i sottovolumi possono essere montati e smontati.I sottovolumi sono nidificati (possono essere creati all'interno di altri sottovolumi), e facilmente creati o rimossi.

{{Note|Un sottovolume non può essere creato ''attraverso'' differenti filesystem Btrfs. Se {{Path|/dev/sda}} e {{Path|/dev/sdb}} entrambi contengono separatamente filesystem (non-RAID) Btrfs, non è possibile che un sottovolume si possa espandere attraverso i due filesystems. Lo snapshot può essere  ''spostato'' da un filesystem all'altro, ma non può estendersi attraverso i due. Esso deve essere su {{Path|/dev/sda}} ''oppure su'' {{Path|/dev/sdb}}.}}

==== Creazione ====

Per creare un sottovolume, eseguire il seguente comando all'interno di un filesystem's name space Btrfs:

{{RootCmd|btrfs subvolume create ''<dest-name>''}}

Rimpiazzare <code>''<dest-name>''</code> con la destinazione desiderata e il nome del sottovolume. Per esempio, se un filesystem Btrfs esiste su {{Path|/mnt/btrfs}}, un sottovolume può essere creato al suo interno utilizzando il seguente comando:

{{RootCmd|btrfs subvolume create /mnt/btrfs/subvolume1}}

==== Lista ====

Per vedere i sottovolumi che sono stati creati, utilizzare il comando <code>subvolume list</code> seguito dalla posizione del filesystem Btrfs. Se la directory corrente è da qualche parte all'interno di un filesystem Btrfs, il seguente comando mostrerà i sottovolumi che esistono nel filesystem:

{{RootCmd|btrfs subvolume list .}}

Se un filesystem Btrfs con sottovolumi esiste nel punto di mount creato nel comando dell'esempio precedente, l'output del comando di elenco sarà simile a quanto segue:

{{RootCmd|btrfs subvolume list /mnt/btrfs|output=<pre>
ID 309 gen 102913 top level 5 path mnt/btrfs/subvolume1
</pre>}}

==== Rimozione ====

I sottovolumi possono essere opportunamente rimossi utilizzando il comando <code>subvolume delete</code> seguito dal percorso del sottovolume. Tutti i percorsi dei sottovolumi disponibili in un filesystem Btrfs possono essere elencati utilizzando il comando di elencazione di cui sopra.

{{RootCmd|btrfs subvolume delete ''<subvolume-path>''}}

Come spiegato sopra, rimpiazzare <code>''<subvolume-path>''</code> con il percorso giusto del sottovolume che deve essere rimosso. Per cancellare il sottovolume utilizzato negli esempi precedenti, dovrà essere eseguito il seguente comando:

{{RootCmd|btrfs subvolume delete /mnt/btrfs/subvolume1|output=<pre>
Delete subvolume (no-commit): '/mnt/btrfs/subvolume1'
</pre>}}

==== Istantanee ====

Le istantanee (Snapshots) sono sottovolumi che condividono dati e metadati con gli altri sottovolumi. Questo è reso possibile dalla capacità Copy on Write (CoW) di Btrfs.<ref name="subvolumes" /> Gli Snapshots possono essere utilizzati per svariati scopi, uno dei quali è quello di creare backups di strutture di filesystem a punti specifici nel tempo.

Se il filesystem root è Btrfs, è possibile creare una snapshot utilizzando i comandi <code>subvolume snapshot</code>:

{{RootCmd
|mkdir -p /mnt/backup/rootfs
|btrfs subvolume snapshot / /mnt/backup/rootfs/
}}

Il seguente breve script da shell può essere aggiunto al lavoro sincronizzato di cron per creare un backup di snapshot sincronizzato del filesystem Btrfs di root. Tali backup sincronizzati possono essere regolati in base a quello che preferisce l'utente.

{{FileBox|filename=btrfs_snapshot.sh|title=Esempio di lavoro di cron per snapshot di rootfs di Btrfs|lang=bash|1=
#!/bin/bash
NOW=$(date +"%Y-%m-%d_%H:%M:%S")
 
if [ ! -e /mnt/backup ]; then
mkdir -p /mnt/backup
fi
 
cd /
/sbin/btrfs subvolume snapshot / "/mnt/backup/backup_${NOW}"
}}

==== Montaggio ====

Un sottovolume può essere montato in una posizione diversa da quella in cui è stato creato,  oppure gli utenti possono scegliere di non montarlo affatto. Per esempio, l'utente può creare un filesystem Btrfs su {{Path|/mnt/btrfs}} e creare i sottovolumi {{Path|/mnt/btrfs/home}} e {{Path|/mnt/btrfs/portage}} . I sottovolumi potrebbero così essere montati su {{Path|/home}} e su {{Path|/usr/portage}}, con il livello superiore originale lasciato smontato. Ciò si traduce in una configurazione dove il percorso relativo dei sottovolumi è diverso dal percorso effettivo del sottovolume di livello superiore.

Per montare un sottovolume, eseguire il comando seguente, in cui <code>''<rel-path>''</code> è il percorso relativo del sottovolume dal sottovolume di livello superiore, percorso ottenibile attraverso il comando <code>subvolume list</code>:

{{RootCmd|mount -o subvol{{=}}''<rel-path>'' ''<device>'' ''<mountpoint>''}}

Similmente, si può aggiornare la tabella del filesystem per montare i propri sottovolumi Btrfs facendo così:

{{FileBox|filename=/etc/fstab|title=Montare i Sottovolumi|1=<pre>
<device>  <mountpoint>  btrfs  subvol=<rel-path>  0 2</pre>}}

== Risoluzione dei problemi ==

=== Cancellare lo spazio libero della cache ===

E' possibile cancellare lo spazio libero della cache di Btrfs montando tale filesystem con l'opzione di mount <code>clear_cache</code>. Per esempio:

{{RootCmd|mount -o clear_cache /path/to/device /path/to/mountpoint}}

=== Consumo eccessivo di memoria (cache del disco) da parte di Btrfs ===

Quando si utilizza qualche speciale abilità di Btrfs (ad esempio facendo molte copie <code>--reflink</code> oppure creando un numero considerevole di snapshot), può essere utilizzata molta memoria che non viene però liberata abbastanza velocemente dalla cache inode del kernel. Questo può non essere scoperto se la memoria dedicata alla cache del disco non è visibile tramite le utilità di monitoraggio tradizionali. Per esempio l'utilità {{c|slabtop}} (disponibile come parte del pacchetto {{Package|sys-process/procps}}) è stata creata specificatamente per determinare quanta memoria kernel viene consumata:

{{RootCmd|slabtop}}

Se la cache inode sta consumando troppa memoria, il kernel può essere istruito manualmente di far cadere la cache ripetendo un valore intero sul file {{Path|/proc/sys/vm/drop_caches}}<ref>[https://www.kernel.org/doc/Documentation/sysctl/vm.txt Documentation for /proc/sys/vm/*], [https://www.kernel.org Kernel.org]. Retrieved on January 1st, 2017.</ref>.

Per stare sicuri, e per aiutare il kernel a determinare il valore massimo di memoria utilizzabile, eseguire un {{c|sync}} "prima" dei seguenti comandi {{c|echo}}:

{{Cmd|sync}}

Most of the time Btrfs users will probably want to {{c|echo 2}} to reclaim just the slab objects (dentries and btrfs_inodes):

{{RootCmd|echo 2 > /proc/sys/vm/drop_caches}}

To clear the entire disk cache (slab objects ''and'' the page cache) use {{c|echo 3}} instead:

{{RootCmd|echo 3 > /proc/sys/vm/drop_caches}}

{{Warning|While the above commands are non-destructive (as long as a {{c|sync}} was completed before running them), they could seriously but temporarily slow down the system while the kernel loads only the necessary items back into memory. Think twice before running the above commands for systems under heavy load!}}

More information on kernel slabs can be found in this [https://www.dedoimedo.com/computers/slabinfo.html dedoimedo blog entry].

=== Mounting Btrfs fails, returning mount: unknown filesystem type 'btrfs' ===

The [http://unix.stackexchange.com/questions/121611/gentoo-does-not-seem-to-be-booting-new-kernel original solution by Tim on Stack Exchange] inspired the following solution: build the kernel manually instead of using [[genkernel]]:

{{GenericCmd|prompt=#|color=green
|cd /usr/src/linux
|make menuconfig
|make && make modules_install
|cp arch/x86_64/boot/bzImage /boot
|mv /boot/bzImage /boot/whatever_kernel_filename
|genkernel --install initramfs
}}

=== Btrfs root doesn't boot ===

Genkernel's initramfs as created with the command below doesn't load btrfs:

{{RootCmd|genkernel --btrfs initramfs }}

Compile support for btrfs in the kernel rather than as a module, or use [https://packages.gentoo.org/packages/sys-kernel/genkernel-next genkernel-next] or [[Dracut]] to generate the initramfs.

== See also ==

* [[Btrfs snapshots]] - Script that creates snapshots when files have changed
* [[Btrfs/System Root Guide]] - Use the Btrfs filesystem as a collection of subvolumes including one as a system root.
* [[Btrfs/Native System Root Guide|Btrfs native system root guide]] - An alternative guide on using a subvolume in a Btrfs filesystem as the system's root.
* [[ext4]] - The default filesystem for most Linux distributions.
* [[Samba shadow copies]] - Using Samba to expose Shadow Copies as 'Previous Versions' to Windows clients.
* [[Snapper]] - A command-line program capable of managing Btrfs filesystem snapshots.
* [[ZFS]] - A filesystem that shares much in common with Btrfs, but has licensing issues.

== External resources ==

* https://wiki.debian.org/Btrfs - As described by the Debian wiki.
* https://wiki.archlinux.org/index.php/Btrfs Btrfs article - As described by the Arch Linux wiki.
* http://www.funtoo.org/BTRFS_Fun - BTRFS Fun on the Funtoo wiki.
* http://marc.merlins.org/perso/btrfs/post_2014-05-04_Fixing-Btrfs-Filesystem-Full-Problems.html - Tips and tricks on fixing niche Btrfs filesystem problems in some situations.

== References ==

{{reflist}}

[[Category:Filesystems]]
