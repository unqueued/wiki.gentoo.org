{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://freedesktop.org/wiki/Software/systemd|header=true}}
|{{InfoBox wikipedia}}
}}
'''systemd''' is a modern sysvinit & RC replacement for Linux systems. It is supported in Gentoo as an alternate init system.
<!--
The following configuration directories are both used by OpenRC and systemd:
* {{Path|/etc/modules-load.d}},
* {{Path|/etc/sysctl.d}},
* {{Path|/etc/binfmt.d}}
-->
== Pre-installation Configuration==
{{Note|If you're updating from <{{=}}sys-apps/systemd-203 check the [[/upgrade|upgrade subpage]].}}

=== Kernel ===

systemd makes use of many modern Linux kernel features. Right now, the lower bound on kernel version is set in the ebuild to 2.6.39. In addition to that, the following kernel configuration options are required:
<!-- See http://cgit.freedesktop.org/systemd/systemd/plain/README -->
{{Kernel|Mandatory options|<pre>
General setup  --->
	[*] Control Group support
	[ ] Enable deprecated sysfs features to support old userspace tools
[*] Networking support --->
Device Drivers  --->
	Generic Driver Options  --->
		[*] Maintain a devtmpfs filesystem to mount at /dev
File systems  --->
	[*] Inotify support for userspace
	[*] Filesystem wide access notification
</pre>}}

{{Kernel|Recommended options|<pre>
General setup  --->
	[*] open by fhandle syscalls
Processor type and features  --->
	[*] Enable seccomp to safely compute untrusted bytecode
Networking support --->
	Networking options --->
		<*> The IPv6 protocol
Device Drivers  --->
	Generic Driver Options  --->
		()  path to uevent helper
Firmware Drivers  --->
	[*] Export DMI identification via sysfs to userspace
File systems --->
	<*> Kernel automounter version 4 support (also supports v3)
	Pseudo filesystems --->
		[*] Tmpfs virtual memory file system support (former shm fs)
		[*]   Tmpfs POSIX Access Control Lists
		[*]   Tmpfs extended attributes
</pre>}}

For UEFI system you'll also need to enable the following:
{{Kernel|UEFI support|<pre>
[*] Enable the block layer  --->
	Partition Types  --->
		[*] Advanced partition selection
		[*]   EFI GUID Partition support
Processor type and features  --->
	[*] EFI runtime service support
Firmware Drivers  --->
        EFI (Extensible Firmware Interface) Support -->
	        <*> EFI Variable Support via sysfs
</pre>}}

In the case you are using BFQ scheduler, it's recommended by BFQ upstream to enable "BFQ hierarchical scheduling support" under "Enable the block layer -> IO Schedulers"

===The {{Path|/run}} directory===

The {{Path|/run}} directory is used by systemd and other applications as a non-persistent storage for runtime data like pid files, sockets and state files.

The systemd package will create {{Path|/run}} directory itself. However, please note that this change will trigger automatic mounting of it in [[OpenRC]] as well, and may trigger using it by different software packages.

==={{Path|/etc/mtab}}===

Upstream only supports {{Path|/etc/mtab}} file being a symlink to {{Path|/proc/self/mounts}}. This has caused in the past problems problems with ''mount -o user'' and NFS mounts. On the other hand, not creating it will cause problems with ''mount'' ({{bug|434090}}) and ''df'' ({{bug|477240}}).

To create the symlink, run:
{{RootCmd|ln -sf /proc/self/mounts /etc/mtab}}

=== Ensure /usr is present at boot time ===
For a split /usr configuration, one must use an [[initramfs]] to mount /usr before starting systemd. See the [http://www.gentoo.org/doc/en/initramfs-guide.xml Official Initramfs Gentoo Guide] for instructions.

== Installation ==

You need to both install {{Package|sys-apps/systemd}} and to set the ''systemd'' USE flag.
Moreover, to avoid potential Portage conflicts you need to disable the ''consolekit'' USE flag as well.

The easiest method is to do all this at once specifically.
Adjust the USE flags in
{{File|/etc/portage/make.conf||<pre>
USE="... systemd -consolekit ..."
</pre>}}
and then execute

{{Emerge|params+=--changed-use --deep|@world}}

Portage will install {{Package|sys-apps/systemd}} as part of this emerge

{{Warning|Some packages may now '''no longer support OpenRC'''}}


== Booting with systemd ==

In order to run systemd, you have to switch the ''init'' that your executable kernel (or your initramfs) uses.

=== Grub Legacy (0.x) ===

With simple kernels, the ''init=/usr/lib/systemd/systemd'' argument should be added to the kernel command-line. An example excerpt from {{Path|grub.conf}} would look like:

{{File|/boot/grub/grub.conf|Example GRUB config for systemd with simple kernel|<pre>
title=Gentoo with systemd
root (hd0,0)
kernel /vmlinuz root=/dev/sda2 init=/usr/lib/systemd/systemd
</pre>}}

When using [[initramfs]], other command-line argument will be needed. For example, genkernel uses ''real_init='' there:

{{File|/boot/grub/grub.conf|Example GRUB config for systemd with genkernel|<pre>
title=Gentoo with systemd
root (hd0,0)
kernel /my-genkernel... root=/dev/hda2 real_init=/usr/lib/systemd/systemd
initrd /initramfs-genkernel...
</pre>}}

=== Grub 2 ===

If using the grub2-mkconfig configuration generator, add the make the following change to /etc/default/grub

{{File|/etc/default/grub|Example grub2-mkconfig config for systemd with simple kernel|<pre>
# Append parameters to the linux kernel command line
GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"</pre>
}}

If writing a configuration by hand (not recommended), simply append the init parameter to your linux or linux16 command.

{{File|/boot/grub/grub.cfg|Example GRUB2 configuration fragment|
<pre>linux /vmlinuz-3.10.9 root=UUID=508868e4-54c6-4e6b-84b0-b3b28b1656b6 init=/usr/lib/systemd/systemd</pre>
}}

=== In kernel config ===

You can also set this in your kernel configuration. See "'''Processor type and features'''" -> "'''Built-in kernel command line'''". Note that this technique works for both grub and grub2.

== Post Installation Configuration ==
systemd supports a few system configuration files to set the most basic system details.

=== Hostname ===
A tool called ''hostnamectl'' exists for editing {{Path|/etc/hostname}} and {{Path|etc/machine-info}}. To change hostname, run:
{{RootCmd|hostnamectl set-hostname <HOSTNAME>}}
Refer to ''man hostnamectl'' for more options.
<!--
{{File|/etc/machine-info|Configuration file for local machine informations.|<pre>
PRETTY_NAME="Larry's Computer"
ICON_NAME="computer-laptop"
</pre>}}
-->
=== Locale ===
The tool ''localectl'' is used to set locale and console or X11 keymaps. To change the system locale, run the following command. Warning: it will not work until [https://bugs.gentoo.org/show_bug.cgi?id=465468 bug 465468] is fixed. In this case please edit {{Path|/etc/env.d/02locale}} and run ''env-update''.
{{RootCmd|localectl set-locale LANG<nowiki>=</nowiki><LOCALE>}}
To change the virtual console keymap:
{{RootCmd|localectl set-keymap <KEYMAP>}}
And finaly, to set the X11 layout:
{{RootCmd|localectl set-x11-keymap <LAYOUT>}}
If needed you can specify the model, variant and options too:
{{RootCmd|localectl set-x11-keymap <LAYOUT> <MODEL> <VARIANT> <OPTIONS>}}

=== Time & Date ===
Time and date can be set using the ''timedatectl'' utility.

=== Automatic module loading ===
Automatic module loading is configured in a different file, or rather directory of files. The configuration files are stored in ''/etc/modules-load.d''. On boot every file with a list of modules will be loaded. The file format is a list of modules seperated by newline and can have any name you want as long as it ends with ''.conf''. You can seperate out the module loading by program, service or whatever way you like. My ''virtualbox.conf'' example is listed below. But I can image one also has an ''iptables.conf'' for all the kernel modules needed for your firewall or one big file with all modules.

{{File|/etc/modules-load.d/virtualbox.conf|Example file for the virtualbox modules|<pre>vboxdrv
vboxnetflt
vboxnetadp
vboxpci</pre>}}

=== Handling of log files ===
Systemd has its own way of handling log files without needing to rely on any external log system (like syslog-ng or rsyslog). Anyway, you can still configure it to use your preferred external tool for handling them. Please type '''man journald.conf''' for learning about how to configure journald to suit your needs.

=== /tmp is now in tmpfs ===
Unless you explicitly mount some other filesystem to /tmp in your fstab, systemd will mount /tmp as tmpfs. That means it will be emptied on every boot and its size will be limited to 50% of your RAM size. To know why this is the desired behavior and how to modify it, take a look to [http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ API File Systems]

=== Configure verbosity of boot process ===
When migrating to systemd you will probably notice differences regarding verbosity of boot process:
* ''quiet'' option not only affects to kernel output, but also to systemd itself. Then, while you are setting up systemd for your machine, you will probably want to drop it to see any errors could arise more easily. After that, you can add it back to get a quiet (and faster) boot.
* Even passing ''quiet'' option, you can still configure systemd to show its status by also passing ''systemd.show_status=1''.
* When not using ''quiet'' option, you could get some messages overwriting consoles, that is caused by kernel configuration (see ''man 5 proc'' and look for /proc/sys/kernel/printk). To tweak it you can pass the ''loglevel=5'' boot parameter to the kernel (or a lower value like 1).
== Services ==

At some point you will have to reboot your system in order to get systemd running (in system mode). Be sure to read all of this document to ensure you have systemd configured as completely as possible before rebooting. Note that journalctl(8) works with systemd(8) not running, but that systemctl(8) will not do anything useful without systemd running. You will likely want to complete the service configuration (enabling and starting of services) after you get logged in to your system running systemd.

=== OpenRC services ===
Although systemd originally intended to support running old init.d scripts, that support is not suited well for a dependency-based RC like OpenRC and thus is completely disabled on Gentoo. OpenRC provides additional measures to ensure that init.d scripts can't be run when OpenRC was not used to boot the system (otherwise the results would be unpredictable).

=== Listing available services ===
All global service files are installed in {{Path|/usr/lib/systemd/system}}. Thus, the simplest way of looking up available service units is listing that directory:

{{RootCmd|ls /usr/lib/systemd/system|output=<pre>
acpid.service                            runlevel2.target
alsa-restore.service                     runlevel2.target.wants
alsa-store.service                       runlevel3.target
autovt@.service                          runlevel3.target.wants
avahi-daemon.service                     runlevel4.target
avahi-daemon.socket                      runlevel4.target.wants
avahi-dnsconfd.service                   runlevel5.target
basic.target                             runlevel5.target.wants
...
</pre>}}

The following file suffixes are of interest:
* {{Path|.service}} - plain service files (e.g. ones just running a daemon directly),
* {{Path|.socket}} - socket listeners (much like ''inetd''),
* {{Path|.path}} - filesystem triggers for services (running services when files change etc.).

Alternatively, ''systemctl'' tool can be used to list all services (including implicit ones):
{{RootCmd|systemctl --all --full}}

And finally the ''systemadm'' graphical tool can be used. It can be installed with the {{Package|sys-apps/systemd-ui}} package.

=== Installing custom service files ===
Any custom service files should be copied to the {{Path|/etc/systemd/system}} directory. The {{Path|/usr/lib/systemd/system}} directory is reserved for service files installed by ebuilds.

=== Enabling and disabling services ===
The usual way of enabling a service is using
{{RootCmd|systemctl enable foo.service}}

Services can be disabled likewise:
{{RootCmd|systemctl disable foo.service}}

These commands enable services using their default name in default target (both specified in ''Install'' section of the service file). However, sometimes services either don't provide that information or you want to use another name/target.

=== Enabling a service under a custom name ===
This is especially a case for template services -- services in which part of the name following ''@'' (at sign) is used as a parameter to the service. This is often used to specify the terminal on which getty will run.

To enable a service under custom name, you have to create a symlink to the service file in correct {{Path|/etc/systemd/system/*.wants}} directory. The name of that directory can either specify a target or another service which will depend on the new one.

For example, to enable stand-alone [[wpa_supplicant]] on ''wlan0'', type:

{{RootCmd|ln -s /usr/lib/systemd/system/wpa_supplicant@.service /etc/systemd/system/multi-user.target.wants/wpa_supplicant@wlan0.service}}

To disable the service, just remove the symlink:
{{RootCmd|rm /etc/systemd/system/multi-user.target.wants/wpa_supplicant@wlan0.service}}

=== Native services ===
Some of Gentoo packages already install systemd unit files. For these services, it is enough to enable them. A quick summary of packages installing unit files can be seen on [http://qa-reports.gentoo.org/output/eclass-usage/systemd.txt systemd eclass users list].

The following table lists systemd services matching OpenRC ones:
{| class="wikitable" style="text-align: center;"
|+ Migration chart
|-
! scope="col" | Gentoo package
! scope="col" | OpenRC service
! scope="col" | systemd unit 
! scope="col" | Notes
|-
! scope="row" rowspan="32" | {{Package|sys-apps/openrc}}
| bootmisc || systemd-tmpfiles-setup.service || always enabled, uses {{Path|tmpfiles.d}}
|-
| consolefont || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| devfs ||  || 
|-
| dmesg ||  || 
|-
| fsck || fsck*.service || pulled in implicitly by mounts
|-
| functions.sh || See note || {{Bug|373219}}
|-
| hostname || (builtin) || {{Path|/etc/hostname}}
|-
| hwclock ||  || 
|-
| keymaps || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| killprocs ||  || 
|-
| local ||  || 
|-
| localmount || local-fs.target || actual units are created implicitly from fstab
|-
| modules || systemd-modules-load.service || always enabled, uses {{Path|/etc/modules-load.d/*.conf}}
|-
| mount-ro ||  || 
|-
| mtab ||  || 
|-
| netmount || remote-fs.target || 
|-
| scope="row" rowspan="3" | net.* 
| netctl@.service || net-misc/netctl is originally an Arch Linux tool.
|-
| NetworkManager.service || You need to also enable NetworkManager-dispatcher.service for dispatcher.d scripts to work, also NetworkManager-wait-online.service to properly detect system is connected to network.
|-
| dhcpcd.service || Provided by net-misc/dhcpcd
|-
| numlock ||  || 
|-
| procfs || (builtin) || 
|-
| root || remount-rootfs.service || 
|-
| savecache || n/a || OpenRC internals
|-
| staticroute ||  || 
|-
| swap || swap.target || actual units are created implicitly from fstab
|-
| swclock ||  || 
|-
| sysctl || systemd-sysctl.service || {{Path|sysctl.conf}} and {{Path|sysctl.d/}}
|-
| sysfs || (builtin) || 
|-
| termencoding || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| scope="row" rowspan="2" | urandom
| systemd-random-seed-load.service || 
|-
| systemd-random-seed-save.service || 
|-
! scope="row" | {{Package|app-admin/rsyslog}}
| rsyslog || rsyslog.service || 
|-
! scope="row" | {{Package|app-admin/syslog-ng}}
| syslog-ng || syslog-ng.service || 
|-
! scope="row" rowspan="2" | {{Package|media-sound/alsa-utils}}
| scope="row" rowspan="2" | alsasound
| alsa-store.service || (enabled by default)
|-
| alsa-restore.socket || (enabled by default)
|-
! scope="row" | {{Package|net-misc/dhcpcd}}
| dhcpcd || dhcpcd.service || 
|-
! scope="row" | {{Package|net-misc/openntpd}}
| ntpd || ntpd.service || (enabled by default)
|-
! scope="row" rowspan="2" | {{Package|net-misc/openssh}}
| scope="row" rowspan="2" | sshd
| sshd.service || runs sshd as a daemon
|-
| sshd.socket || runs sshd on a inetd-like basis (for each incoming connection)
|-
! scope="row" rowspan="2" | {{Package|net-misc/wpa_supplicant}}
| scope="row" rowspan="2" | wpa-supplicant
| wpa_supplicant.service || D-Bus controlled daemon (e.g. for NetworkManager)
|-
| wpa_supplicant@.service || interface-specific wpa_supplicant (used like {{Path|wpa_supplicant@wlan0.service}})
|-
! scope="row" rowspan="3" | {{Package|net-print/cups}}
| scope="row" rowspan="3" | cupsd
| cups.service || classic on-boot start up service
|-
| cups.socket
| scope="row" rowspan="2" | socket and path activation (cups only started on-demand)
|-
| cups.path ||
|-
! scope="row" | {{Package|net-wireless/bluez}}
| bluetooth || bluetooth.service || 
|-
! scope="row" rowspan="2" | {{Package|sys-apps/dbus}}
| scope="row" rowspan="2" | dbus
| dbus.service || 
|-
| dbus.socket || 
|-
! scope="row" | {{Package|sys-apps/irqbalance}}
| irqbalance || irqbalance.service || supports daemon mode only
|-
! scope="row" | {{Package|sys-apps/microcode-ctl}}
| microcode_ctl ||  || Configure ''microcode'' as a '''module''' to let it load the microcode itself. Go to "Processor type and features" -> "CPU microcode loading support" and remember to add the option you need depending on you having intel or amd processor.
|-
! scope="row" rowspan="4" | {{Package|sys-fs/udev}}
| udev || udev.service || 
|-
| udev-mount || (builtin) || <tt>/dev</tt> is mounted as tmpfs
|-
| udev-postmount || udev-trigger.service || 
|-
| || udev-settle.service || 
|-
! scope="row" | {{Package|sys-power/acpid}}
| acpid || acpid.service || Most of its functionality is done by systemd itself, then, maybe you could consider to stop enabling this
|-
! scope="row" | {{Package|x11-apps/xdm}}
| (xdm) || xdm.service || OpenRC uses common xdm init.d installed by {{Package|x11-base/xorg-server}}. With systemd you will need to enable corresponding unit file for each DM (gdm.service, kdm.service...)
|}

== Troubleshooting ==
* {{Bug|systemd|search=package}}
* {{Bug|systemd|search=product|site=fdo}}
* [http://freedesktop.org/wiki/Software/systemd/Debugging Upstream debugging guide]

=== systemd-logind & pam_systemd ===
systemd intends to provide an integrated [[ConsoleKit]] replacement called logind. Some applications (like [[NetworkManager]] and [[polkit]]) provide support for it through ''USE=systemd''. Please note that this flag usually disables ConsoleKit support as well and thus packages may stop working as expected if the procedure described below is not fulfilled.
If you're having issues with {{Package|kde-misc/networkmanagement}} not being able to detect NetworkManager is running, modify your system-auth file to add pam_systemd.
{{File|/etc/pam.d/system-auth||<pre>
...
session         optional        pam_systemd.so
</pre>}}

In order to enable session tracking for systemd-logind, you have to enable the ''pam_systemd'' PAM module first. This can be done using USE=systemd on {{Package|sys-auth/pambase}}.

Except for tracking user logins (like ConsoleKit does), this will cause all user processes to belong to a cgroup. You can add ''controllers=...'' to provide additional cgroup controllers (like ''cpu'' for CPU load balancing). You can also add ''kill-session-processes=1'' to ensure that all processes spawned by user are killed on logout. For more information, take a look at ''pam_systemd'' [[man page]].
=== systemd-bootchart ===
{{Kernel|systemd-bootchart support|<pre>
File systems  --->
	Pseudo filesystems --->
	[*] /proc file system support
Kernel hacking  --->
	[*] Kernel debugging
	[*] Collect scheduler debugging info
	[*] Collect scheduler statistics
</pre>}}

=== syslog-ng ===
Systemd creates {{Path|/dev/log}} as datagram socket [https://bugzilla.redhat.com/show_bug.cgi?id=770810#c10] [https://fedoraproject.org/wiki/Common_F16_bugs#systemd-syslog-ng-problems] so you will need to tell syslog-ng to read from a ''unix-dgram'' instead of a ''unix-stream'':
{{File|/etc/syslog-ng/syslog-ng.conf||<pre>
unix-stream('/dev/log');
</pre>}}
should be replaced with:
{{File|/etc/syslog-ng/syslog-ng.conf||<pre>
unix-dgram('/dev/log');
</pre>}} in order to use the syslog-ng service in systemd.

=== sys-fs/cryptsetup ===
Systemd doesn't seem to respect {{Path|/etc/conf.d/dmcrypt}} ({{bug|429966}} ?):
{{File|/etc/crypttab|Configuration file for encrypted block devices.|<pre>
crypt-home UUID=c25dd0f3-ecdd-420e-99a8-0ff2eaf3f391 -
</pre>}}

=== Check for units that failed to start ===
To check for units that failed to start you can run:
{{RootCmd|systemctl --failed}}

=== Enable Debug Mode ===
To get more informations you need to set the following in {{Path|/etc/systemd/system.conf}}:
{{File|/etc/systemd/system.conf||<pre>
LogLevel=debug
</pre>}}

== See Also ==
* [[Comparison of init systems]]

== External resources ==
* [http://www.freedesktop.org/wiki/Software/systemd/FrequentlyAskedQuestions FAQ]
* [http://www.freedesktop.org/wiki/Software/systemd/TipsAndTricks Tips and tricks]

[[Category:Init systems]]
