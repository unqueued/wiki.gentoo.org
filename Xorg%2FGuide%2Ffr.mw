<languages />

Xorg est le serveur X Window qui permet aux utilisateurs de disposer d'un environnement graphique. Ce guide explique ce qu'est Xorg, comment l'installer et ce que sont les différentes options de configuration.

== Qu'est-ce que le serveur X Window ? ==

=== Environnement graphique vs ligne de commande ===

L'utilisateur moyen peut être effrayé à l'idée d'avoir à taper des commandes. Pourquoi ne pourrait-il pas pointer avec la souris et cliquer pour se frayer son chemin dans l'espace de liberté procuré par Gentoo (et Linux en général) ? Eh bien, naturellement, il peut le faire ! Linux offre une grande variété d'interfaces utilisateur très attractives et des environnements que vous pouvez installer au-dessus de votre installation existante. 

C'est une des plus grandes surprises pour les nouveaux utilisateurs que de découvrir que l'interface utilisateur graphique, n'est rien d'autre qu'une application qui tourne sur votre système. Ce n'est ''pas'' une partie du noyau Linux, ou une autre fonctionnalité interne du système. C'est un outil puissant qui active complètement les capacités graphiques de votre station de travail. 

Comme les normes sont importantes, une norme pour dessiner et déplacer des fenêtres sur l'écran, interagissant avec l'utilisateur via la souris, le clavier et autres dispositifs, a été créée et nommée le ''système X Window''', couramment abrégé en ''X11'' ou tout simplement ''X''. Ce système est utilisé sur Unix, Linux et les systèmes d'exploitation basés sur Unix à travers le monde entier. 

L'application qui permet aux utilisateurs d'exécuter les interfaces graphiques et qui se base sur la norme X11 est Xorg-X11, un embranchement du projet XFree86. XFree86 ayant décidé d'utiliser une licence qui pourrait s'avérer incompatible avec la licence GPL, l'utilisation de Xorg est par conséquent recommandée. L'arbre de Portage ne contient plus de paquet XFree86 dorénavant. 

=== Le projet X.org  ===

Le projet  [http://www.x.org X.org] a créé et tient à jour une mise en œuvre du système X11 librement distribuable et open-source. Il s'agit d'une infrastructure de bureau open-source basée sur X11. 

Xorg procure une interface entre votre matériel et l'application graphique que vous voulez exécuter. En plus de cela, Xorg est compatible avec le fonctionnement en réseau, ce qui signifie que vous pouvez exécuter une application sur un système tout en visualisant les résultats sur un autre. 

== Installer Xorg ==

Avant de pouvoir installer Xorg, vous devez préparer votre système à le recevoir. Tout d'abord, il vous faut configurer le noyau pour qu'il prenne en charge les périphériques d'entrée et les cartes vidéo. Ensuite il faudra préparer {{Path|/etc/portage/make.conf}}  pour que les bons pilotes et les paquets Xorg soient compilés et installés. 

=== Prise en charge des pilotes de périphérique d'entrée ===

Par défaut, Xorg utilise  <code>evdev</code>, un pilote de périphérique d'entrée générique. Vous devez changer la configuration de votre noyau pour qu'il prenne en charge   <code>evdev</code>. Lisez le [http://www.gentoo.org//doc/fr/kernel-config.xml Guide de configuration du noyau] si vous ne savez pas comment configurer votre noyau. 

{{Kernel|Enabling evdev in the kernel|<pre>
Device Drivers --->
  Input device support --->
  <*>  Event interface
</pre>
}}

=== Kernel modesetting ===

Les pilotes vidéo open-source modernes s'appuient sur le ''kernel modesetting (KMS)''. KMS procure un démarrage graphique amélioré moins vacillant, avec un changement d'utilisateur plus rapide, une console à  tampon de trames incorporée, une transition douce entre console et Xorg et d'autres fonctionalités. KMS entre en conflit avec les pilotes de tampon de trames patrimoniaux, qui doivent rester '''désactivés''' dans la configuration de votre noyau. 

En premier lieu, préparez votre noyau pour KMS. Vous devez accomplir cette étape sans vous soucier du pilote vidéo Xorg que vous allez utiliser. 

{{Kernel|Configuring framebuffers|<pre>
Device Drivers --->
  Graphics support --->
    Support for frame buffer devices --->
    ## (Désactivez tous les pilotes,  y compris VGA, Intel, nVidia, et ATI)
 
    ## (Plus bas, activez la prise en charge de la console de base. KMS en a besoin.)
    Console display driver support --->
      <*>  Framebuffer Console Support
</pre>
}}

Ensuite, configurez votre noyau pour qu'il utilise le pilote KMS adéquat pour votre carte vidéo. Intel, nVidia et AMD/ATI sort les cartes les plus répandues. Suivez le listing du code pour votre carte ci-dessous. 

Pour les cartes Intel : 

{{Kernel|Intel settings|<pre>
Device Drivers --->
  Graphics support --->
    /dev/agpgart (AGP Support) --->
    <*>  Intel 440LX/BX/GX, I8xx and E7x05 chipset support
    Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
    <*>  Intel 8xx/9xx/G3x/G4x/HD Graphics
    [*]    Enable modesetting on intel by default
</pre>
}}

Pour les cartes nVidia : 

{{Kernel|nVidia settings|<pre>
Device Drivers --->
  Graphics support --->
    Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
    <*>    Nouveau (nVidia) cards
</pre>
}}

Pour les cartes AMD/ATI les plus récentes ( [http://www.gentoo.org//doc/fr/ati-faq.xml RadeonHD 2000 et postérieures] ), vous devrez installer <code>radeon-ucode</code> ou <code>linux-firmware</code>. Une fois que vous avez installé un de ces paquets, configurez votre noyau comme ceci : 

{{Kernel|AMD/ATI settings|<pre>
## (Configurez le noyau pour utiliser le micro-code  radeon-ucode )
Device Drivers --->
  Generic Driver Options --->
  [*]  Include in-kernel firmware blobs in kernel binary
  ## # Séries de cartes RadeonHD 2000, 3000, et 4000 :
  (radeon/R600_rlc.bin radeon/R700_rlc.bin) External firmware blobs
  ## # RadeonHD 5000, a.k.a Evergreen:
  (radeon/CEDAR_me.bin radeon/CEDAR_pfp.bin radeon/CEDAR_rlc.bin
   radeon/CYPRESS_me.bin radeon/CYPRESS_pfp.bin radeon/CYPRESS_rlc.bin
   radeon/JUNIPER_me.bin radeon/JUNIPER_pfp.bin radeon/JUNIPER_rlc.bin
   radeon/REDWOOD_me.bin radeon/REDWOOD_pfp.bin 
   radeon/REDWOOD_rlc.bin) External firmware blobs
  ## # Radeon HD 6000/7300 séries Fusion APUs:
  (radeon/PALM_me.bin radeon/PALM_pfp.bin radeon/SUMO2_me.bin
   radeon/SUMO2_pfp.bin radeon/SUMO_me.bin radeon/SUMO_pfp.bin
   radeon/SUMO_rlc.bin) External firmware blobs
  ## # Radeon HD 6400-7600 aka. Northern Islands:
  (radeon/BARTS_mc.bin radeon/BARTS_me.bin radeon/BARTS_pfp.bin
   radeon/BTC_rlc.bin radeon/CAICOS_mc.bin radeon/CAICOS_me.bin
   radeon/CAICOS_pfp.bin radeon/CAYMAN_mc.bin radeon/CAYMAN_me.bin
   radeon/CAYMAN_pfp.bin radeon/CAYMAN_rlc.bin radeon/TURKS_mc.bin
   radeon/TURKS_me.bin radeon/TURKS_pfp.bin) External firmware blobs
  ## # Radeon HD 7500/7600 séries Fusion APUs:
  (radeon/ARUBA_me.bin radeon/ARUBA_pfp.bin radeon/ARUBA_rlc.bin)
   External firmware blobs
  ## # Radeon HD 7700-7900 aka. Southern Islands:
  (radeon/PITCAIRN_ce.bin radeon/PITCAIRN_mc.bin radeon/PITCAIRN_me.bin
   radeon/PITCAIRN_pfp.bin radeon/PITCAIRN_rlc.bin radeon/TAHITI_ce.bin
   radeon/TAHITI_mc.bin radeon/TAHITI_me.bin radeon/TAHITI_pfp.bin
   radeon/TAHITI_rlc.bin radeon/VERDE_ce.bin radeon/VERDE_mc.bin
   radeon/VERDE_me.bin radeon/VERDE_pfp.bin radeon/VERDE_rlc.bin)
   External firmware blobs
  ## # toutes:
   (/lib/firmware/) Firmware blobs root directory
 
## (Activer la prise en charge de Radeon KMS)
Device Drivers --->
  Graphics support --->
  <*>  Direct Rendering Manager --->
  <*>    ATI Radeon
  [*]      Enable modesetting on radeon by default
</pre>
}}

{{Note|Les anciennes cartes Radeon(séries X1900 et antérieurse) ne nécessitent pas le paquet  <code>radeon-ucode</code> ou aucune autre configuration de micro-code. Contentez-vous d'activer le   Direct Rendering Manager (Gestionnaire  de Rendu Direct) et  ATI Radeon modesetting.}}

Vous en avez maintenant terminé avec la configuration du KMS, continuez avec la préparation du fichier {{Path|/etc/portage/make.conf}} à la section suivante.

=== Configuration de make.conf ===

Maintenant que votre noyau est préparé, vous devez configurez des variables importantes dans le fichier  {{Path|/etc/portage/make.conf}}  avant d'installer Xorg. 

La première variable est <code>VIDEO_CARDS</code>. Elle est utilisée pour définir le pilote vidéo que vous allez utiliser et dépend du type de carte vidéo que vous avez. La définition la plus commune est <code>nouveau</code> pour les cartes nVidia ou  <code>radeon</code> pour les cartes ATI. 

{{Note|Vous pouvez aussi essayer les pilotes propriétaire de  nVidia et d'AMD/ATI, <code>nvidia</code> et <code>fglrx</code> respectivement. Cependant, définir les pilotes propriétaire sort du champ de ce guide. Reportez-vous au guide [https://wiki.gentoo.org/wiki/NVidia/nvidia-drivers/fr Pilotes NVidia/nvidia ] et à  la [http://www.gentoo.org//doc/fr/ati-faq.xml FAQ Gentoo concernant les cartes ATI] . Si vous ne savez pas quel pilote choisir, reportez-vous à ces guides pour plus d'informations.}}

Le pilote <code>intel</code> peut être utilisé pour les stations de travail ou les ordinateurs portables munis des jeux de circuits Intel courants intégrés. 

{{Note|<code>VIDEO_CARDS</code>peut contenir plus d'un pilote, chacun séparé par une espace.}}

La deuxième variable est  <code>INPUT_DEVICES</code>. Elle est utilisée pour déterminer quels pilotes compiler pour la prise en charge des périphériques d'entrée. Dans la plupart des cas, la définir à <code>evdev</code> devrait donner satisfaction. Si vous utilisez des périphériques d'entrée alternatifs, tels qu'un pavé tactile Synaptics pour un ordinateur portable, assurez-vous de l'ajouter à la variable  <code>INPUT_DEVICES</code> . 

Maintenant vous devriez décider quels pilotes vous allez utiliser et ajouter les définitions nécessaires au fichier {{Path|/etc/portage/make.conf}} : 

{{Code|Sample make.conf entries|<pre>
## (Pour la prise en charge de la souris, du clavier et du pavé tactile Synaptics)
INPUT_DEVICES="evdev synaptics"
## (Pour des cartes nVidia)
VIDEO_CARDS="nouveau"
## (Pour les cartes AMD/ATI)
VIDEO_CARDS="radeon"
</pre>
}}

Si les définitions suggérées ne fonctionnent pas pour vous, vous devriez installer le paquet <code>emerge -pv xorg-drivers</code>, passer en revue toutes les options disponibles et choisir celles qui s'appliquent à votre système. Cet exemple est pour un système doté d'un clavier, d'une souris, d'un pavé tactile Synaptics et d'une carte vidéo Radeon. 

{{RootCmd|emerge -pv xorg-drivers|output=<pre>
 
These are the packages that would be merged, in order:
 
Calculating dependencies... done!
[ebuild   R   ]  x11-base/xorg-drivers-1.9  INPUT_DEVICES="evdev synaptics
-acecad -aiptek -elographics% -fpit% -joystick -keyboard -mouse -penmount -tslib
-virtualbox -vmmouse -void -wacom"
VIDEO_CARDS="radeon -apm -ark -ast -chips -cirrus -dummy -epson -fbdev -fglrx
(-geode) -glint -i128 (-i740) (-impact) -intel -mach64 -mga -neomagic (-newport)
-nouveau -nv -nvidia -r128 -rendition -s3 -s3virge -savage -siliconmotion -sis
-sisusb (-sunbw2) (-suncg14) (-suncg3) (-suncg6) (-sunffb) (-sunleo) (-suntcx)
-tdfx -tga -trident -tseng -v4l -vesa -via -virtualbox -vmware (-voodoo) (-xgi)"
0 kB
</pre>
}}

Après avoir défini toutes les variables nécessaires vous pouvez installer le paquet Xorg. 

Tout d'abord, assurez-vous que l'option udev de la variable USE est activée :

{{RootCmd|echo "x11-base/xorg-server udev" &gt;&gt; /etc/portage/package.use}}

Ensuite, installez Xorg :

{{Emerge|xorg-server}}

{{Note|Vous pourriez installer le méta-paquet  <code>xorg-x11</code> à la place du paquet plus léger  <code>xorg-server</code> . Functionnellement, <code>xorg-x11</code> et <code>xorg-server</code> sont équivalent. Néanmoins, <code>xorg-x11</code> attire à lui beaucoup d'autres paquets dont vous n'aurez probablement pas besoin, tels qu'un large assortiment de polices de caractères dans différentes langues. Ces paquets ne sont pas nécessaires pour une station de travail fonctionnelle.}}

When the installation is finished, you will need to re-initialise some environment variables before you continue: 

{{RootCmd|env-update
|source /etc/profile}}

== Configuring Xorg ==

The X server is designed to work out-of-the-box, with no need to manually edit Xorg's configuration files. It should detect and configure devices such as displays, keyboards, and mice. 

You should first try [[#using_startx]] without editing any configuration files. If Xorg won't start, or there's some other problem, then you'll need to manually configure Xorg as shown in the next section. 

=== The xorg.conf.d directory ===

{{Note|Configuring files in {{Path|xorg.conf.d}} should be seen as a "last resort" option. It really desirable to run without any special configuration if possible. If you still can't get a working configuration, then read on.}}

The configuration files of Xorg are stored in {{Path|/etc/X11/xorg.conf.d/}} . Each file is given a unique name and ends in {{Path|.conf}} . If the filenames start with a number, then Xorg will read the files in numeric order. {{Path|10-evdev.conf}} will be read before {{Path|20-synaptics.conf}} , and so on. You don't ''have'' to give them numbers, but it may help you organize them. 

{{Note|Xorg provides example configurations in {{Path|/usr/share/doc/xorg-server-${version}/xorg.conf.example.bz2}} . You can use these to create your own configuration files in {{Path|/etc/X11/xorg.conf.d/}} . The examples are heavily commented, but if you are in need of more documentation regarding the syntax, read <code>man xorg.conf</code> . Other examples can be found in the [[#Resources|Resources]] chapter at the end of this guide.}}

=== Using startx ===

Now try <code>startx</code> to start up your X server. <code>startx</code> is a script that executes an ''X session'' ; that is, it starts the X server and some graphical applications on top of it. It decides which applications to run using the following logic: 

* If a file named {{Path|.xinitrc}} exists in the home directory, it will execute the commands listed there.

* Otherwise, it will read the value of the XSESSION variable and will execute one of the sessions available in {{Path|/etc/X11/Sessions/}} accordingly. You can set the value of XSESSION in {{Path|/etc/env.d/90xsession}} to make it a default for all the users on the system. For example, as root, run <code>echo XSESSION="Xfce4" > /etc/env.d/90xsession</code> . This will create the {{Path|90xsession}} file and set the default X session to [http://www.gentoo.org//doc/en/xfce-config.xml Xfce] . Remember to run <code>env-update</code> after changing {{Path|90xsession}} .

{{Cmd|startx}}

If you haven't yet installed a window manager, all you'll see is a black screen. Since this can also be a sign that something's wrong, you may want to emerge <code>twm</code> and <code>xterm</code> ''only to test X'' . 

Once those two programs are installed, run <code>startx</code> again. A few <code>xterm</code> windows should appear, making it easier to verify that X is working correctly. Once you're satisfied with the results, run <code>emerge --unmerge twm xterm</code> as root to get rid of the testing packages. You won't need them once you've setup a proper desktop environment. 

== Tweaking X settings ==

=== Setting your Resolution ===

If you feel that the screen resolution is wrong, you will need to check two sections in your {{Path|xorg.conf.d}} configuration. First of all, you have the ''Screen'' section which lists the resolutions that your X server will run at. This section might not list any resolutions at all. If this is the case, Xorg will estimate the resolutions based on the information in the second section, ''Monitor'' . 

Now let us change the resolution. In the next example from {{Path|/etc/X11/xorg.conf.d/40-monitor.conf}} we add the <code>PreferredMode</code> line so that our X server starts at 1440x900 by default. The <code>Option</code> in the <code>Device</code> section must match the name of your monitor ( <code>DVI-0</code> ), which can be obtained by running <code>xrandr</code> . You'll need to <code>emerge xrandr</code> just long enough to get this information. The argument after the monitor name (in the <code>Device</code> section) must match the <code>Identifier</code> in the <code>Monitor</code> section. 

{{RootCmd|nano -w /etc/X11/xorg.conf.d/40-monitor.conf|output=<pre>
Section "Device"
  Identifier  "RadeonHD 4550"
  Option      "Monitor-DVI-0" "DVI screen"
EndSection
Section "Monitor"
  Identifier  "DVI screen"
  Option      "PreferredMode" "1440x900"
EndSection
</pre>
}}

Run X ( <code>startx</code> ) to discover it uses the resolution you want. 

=== Multiple monitors ===

You can configure more than one monitor in {{Path|/etc/X11/xorg.conf.d/}} . All you have to do is give each monitor an identifer, then list its physical position, such as "RightOf" or "Above" another monitor. The following example shows how to configure a DVI and a VGA monitor, with the VGA monitor as the right-hand screen: 

{{RootCmd|nano -w /etc/X11/xorg.conf.d/40-monitor.conf|output=<pre>
Section "Device"
  Identifier "RadeonHD 4550"
  Option     "Monitor-DVI-0" "DVI screen"
  Option     "Monitor-VGA-0" "VGA screen"
EndSection
Section "Monitor"
  Identifier "DVI screen"
EndSection
Section "Monitor"
  Identifier "VGA screen"
  Option     "RightOf" "DVI screen"
EndSection
</pre>
}}

=== Configuring your keyboard ===

To setup X to use an international keyboard, you just have to create the appropriate config file in {{Path|/etc/X11/xorg.conf.d/}} . This example features a Czech keyboard layout: 

{{RootCmd|nano -w /etc/X11/xorg.conf.d/30-keyboard.conf|output=<pre>
Section "InputClass"
        Identifier "keyboard-all"
        Driver "evdev"
        Option "XkbLayout" "us,cz"
        Option "XkbModel" "logitech_g15"
        Option "XkbRules" "xorg"
        Option "XkbOptions" "grp:alt_shift_toggle,grp:switch,grp_led:scroll,compose:rwin,terminate:ctrl_alt_bksp"
        Option "XkbVariant" ",qwerty"
        MatchIsKeyboard "on"
EndSection
</pre>
}}

The "terminate" command ( <code>terminate:ctrl_alt_bksp</code> ) lets you kill the X session by using the Ctrl-Alt-Backspace key combination. This will, however, make X exit disgracefully -- something that you might not always want. It can be useful when programs have frozen your display entirely, or when you're configuring and tweaking your Xorg environment. Be careful when killing your desktop with this key combination -- most programs really don't like it when you end them this way, and you may lose some (or all) of what you were working on. 

=== Finishing up ===

Run <code>startx</code> and be happy about the result. Congratulations, you now (hopefully) have a working Xorg on your system. The next step is to install a useful window manager or desktop environment such as KDE, GNOME, or Xfce, but that's not part of this guide. Information on installing these desktop environments can be found in our [http://www.gentoo.org//doc/en/?catid=desktop Gentoo Desktop Documentation Resources] . 

== Resources ==

=== Creating and editing config files ===

First of all, <code>man xorg.conf</code> and <code>man evdev</code> provide quick yet complete references about the syntax used by these configuration files. Be sure to have them open on a terminal when you edit your configuration files! 

There are also many online resources on editing config files in {{Path|/etc/X11/}} . We only list few of them here; be sure to [http://www.google.com Google] for more. 

=== Other resources ===

More information about installing and configuring various graphical desktop environments and applications can be found in the [http://www.gentoo.org//doc/en/?catid=desktop Gentoo Desktop Documentation Resources] section of our documentation. 

If you're upgrading to <code>xorg-server</code> 1.9 from an earlier version, then be sure to read the [http://www.gentoo.org//proj/en/desktop/x/x11/xorg-server-1.9-upgrade-guide.xml migration guide] . 

X.org provides many [http://www.x.org/wiki/FAQ FAQs] on their website, in addition to their other documentation. 

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:

* swift

* nightmorph


[[Category:X.Org]]
