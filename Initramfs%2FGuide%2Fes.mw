<languages />


{{Metadata|abstract=Muchos sistemas necesitan un sistema  initramfs para arrancar correctamente. En esta guía se cubre el concepto de initramfs y de cómo crear y gestionar adecuadamente instancias initramfs.}}

Muchos sistemas necesitan un sistema  initramfs para arrancar correctamente. En esta guía se cubre el concepto de initramfs y de cómo crear y gestionar adecuadamente instancias initramfs.

== Conceptos relacionados con initramfs ==

=== Introducción ===

Para la mayoría de los usuarios un sistema initramfs no es ninguna preocupación. Sus sistemas utilizan un esquema simple de particionamiento sin controladores o configuraciones exótica (como sistemas de ficheros cifrados) de modo que el núcleo Linux es perfectamente capaz de tomar el control del binario {{c|init}} en sus sistemas. Pero para otros usuarios es obligatorio el uso de un initramfs. 

El concepto clave para comprender lo que es (o para qué se necesita) un initramfs es conocer cómo se realiza el proceso de arranque de Linux incluso desde un alto nivel. 

=== El proceso de arranque de Linux ===

Una vez el núcleo Linux tiene control del sistema (lo cual sucede una vez lo ha cargado el gestor de arranque) prepara las estructuras de memoria y los controladores. Es entonces cuando le pasa el control a una aplicación (normalmente {{c|init}}) cuya tarea es preparar el sistema y asegurarse de que, al final de proceso de arranque, todos los servicios necesarios están corriendo y el usuario puede entrar en el sistema. La aplicación  {{c|init}} lo hace lanzando, entre otros servicios, el demonio {{c|udev}} que más adelante cargará y preparará el sistema basado en los dipositivos detectados. Cuando se lanza {{c|udev}} los sistemas de archivos restantes que no se han montado, se montan y el resto de los servicios se arrancan. 

Para los sistemas en los que todos los ficheros y herramientas necesarios residen en el mismo sistema de archivos, la aplicación {{c|init}} puede perfectamente controlar el proceso de inicio subsiguiente. Sin embargo cuando se definen múltiples sistemas de archivos (o se realizan instalaciones más exóticas), esto podría ser un poco más truculento: 

* Cuando la partición {{Path|/usr}} está en un sistema de archivos separado, las herramientas y controladores que tienen ficheros almacenados en {{Path|/usr}} no se pueden utilizar a menos que {{Path|/usr}} esté disponible. Si estas herramientas son necesarias para hacer que {{Path|/usr}} esté disponible entonces no podremos arrancar el sistema.

* Si el sistema de archivos raíz está cifrado, entonces el núcleo Linux no podrá encontrar la aplicación {{c|init}} resultando un sistema que no arranca.

La solución a este problema ha sido desde hace tiempo utilizar un ''initrd'' (dispositivo raíz inicial) 

=== El disco raíz de inicio ===

El '''initrd''' es una estructura de disco en memoria (disco ram) que contiene las herramientas y guiones necesarios para montar los sistemas de archivos que se necesiten ''antes'' de pasar el control a la aplicación {{c|init}} en el sistema de archivos raíz. El núcleo Linux lanza el guión de configuración (normalmente se llama {{Path|linuxrc}}, sin embargo este nombre no es obligatorio) en este sistema de disco raíz, el cual prepara el sistema, cambia al sistema de archivos real y a continuación llama a {{c|init}}. 

Aunque el método initrd es todo lo que se necesita, tiene algunos inconvenientes: 

* It is a full-fledged block device, requiring the overhead of an entire file system; it has a fixed size. Choosing an initrd that is too small and all needed scripts cannot fit. Make it too big and memory will be wasted.

* Because it is a real, static device it consumes cache memory in the Linux kernel and is prone to the memory and file management methods in use (such as paging), this makes initrd greater in memory consumption.

To resolve these (for some perhaps hardly called) problems, the initramfs was created. 

=== The initial ram file system ===

An '''initramfs''' is an initial ram file system based on ''tmpfs'' (a size-flexible, in-memory lightweight file system), which also did not use a separate block device (so no caching was done and all overhead mentioned earlier disappears). Just like the initrd, it contains the tools and scripts needed to mount the file systems before the {{c|init}} binary on the real root file system is called. These tools can be decryption abstraction layers (for encrypted file systems), logical volume managers, software raid, bluetooth driver based file system loaders, etc. 

The content of the initramfs is made by creating a cpio archive. {{c|cpio}} is an old (but proven) file archiver solution (and its resulting archive files are called cpio files). cpio is definitely comparable to the {{c|tar}} archiver. The choice of {{c|cpio}} here was because it was easier to implement (code-wise) and supported (back then) device files which {{c|tar}} could not. 

All files, tools, libraries, configuration settings (if applicable), etc. are put into the cpio archive. This archive is then compressed using the {{c|gzip}} utility and stored alongside the Linux kernel. The boot loader will then offer it to the Linux kernel at boot time so the kernel knows an initramfs is needed. 

Once detected, the Linux kernel will create a tmpfs file system, extract the contents of the archive on it, and then launches the {{Path|init}} script located in the root of the tmpfs file system. This script will then mount the real root file system (after making sure it can mount it, for instance by loading additional modules, preparing an encryption abstraction layer, etc.) as well as vital other file systems (such as {{Path|/usr}} and {{Path|/var}} ). 

Once the root file system and the other vital file systems are mounted, the {{Path|init}} script from the initramfs will switch the root towards the real root file system and finally call the {{Path|/sbin/init}} binary on that system to continue the boot process.

== Creating an initramfs ==

=== Introduction and bootloader configuration ===

To create an initramfs, it is important to know what additional drivers, scripts and tools will be needed to boot the system. For instance, if LVM is used, then LVM tools will be needed in the initramfs. Likewise, if software RAID is used, {{c|mdadm}} utilities will be needed, etc. 

Some tools exist that help users create initramfs' (compressed {{c|cpio}} archives) for their system. But for those who want total control can easily create personal, custom initramfs' as well. 

Once created, the bootloader configuration will need adjusted to inform it an initramfs is to be used. For instance, if the initramfs file is stored as {{Path|/boot/initramfs-3.2.2-gentoo-r5}}, then the configuration in {{Path|/boot/grub/grub.conf}} could look like the following: 

{{FileBox|filename=grub.conf|title=Example entry in grub.conf for booting with an initramfs|1=
title Gentoo Linux 3.2.2-r5
root (hd0,0)
kernel /boot/kernel-3.2.2-gentoo-r5
initrd /boot/initramfs-3.2.2-gentoo-r5
}}

=== Using genkernel ===

Gentoo's kernel building utility, {{c|genkernel}}, can be used to generate an initramfs, even if {{c|genkernel}} was not used to configure and build the kernel. 

To use {{c|genkernel}} for generating an initramfs, it is recommended all necessary drivers and code that is needed to mount the {{Path|/}} and {{Path|/usr}} file systems be included in the kernel (not as modules). Then, call {{c|genkernel}} as follows: 

{{RootCmd|genkernel --install --no-ramdisk-modules initramfs}}

Depending on the system, one or more of the following options may be needed: 

{| class="table" style="text-align: left;" 
|- 
! Opción
! Descripción
|- 
| <code>--disklabel</code>
| Añade soporte para ajustes <code>LABEL=</code> en {{Path|/etc/fstab}} 
|- 
| <code>--dmraid</code>
| Añade soporte para RAID por hardware ficticio.
|- 
| <code>--firmware</code>
| Añade código del firmware que se encuentra en el sistema.
|- 
| <code>--gpg</code>
| Añade soporte para GnuPG.
|- 
| <code>--iscsi</code>
| Añade soporte para iSCSI.
|- 
| <code>--luks</code>
| Añade soporte para contenedores cifrados LUKS.
|- 
| <code>--lvm</code>
| Añade soporte para LVM.
|- 
| <code>--mdadm</code>
| Añade soporte para RAID por software.
|- 
| <code>--multipath</code>
| Añade soporte para acceso de E/S múltiple hacia un SAN.
|- 
| <code>--zfs</code>
| Añade soporte para ZFS.
|-
|}

When finished, the resulting initramfs file will be stored in {{Path|/boot}} .

=== Using dracut ===

{{Warning|En el momento de esta edición, no se ha marcado dracut como estable de modo que seguramente se necesite desenmascarar antes de continuar.}}

The {{c|dracut}} utility is created for the sole purpose of managing initramfs files. It uses a highly modular approach on what support is to be included and what is not to be included. 

To install {{c|dracut}}, make special care to include support for the correct value(s) in the <var>DRACUT_MODULES</var> variable. This variable can be set in {{Path|/etc/portage/make.conf}} to include support for system specific setups: 

{{FileBox|filename=make.conf|title=Preparándose para instalar Dracut|lang=bash|1=<pre>
DRACUT_MODULES="dmraid lvm syslog -biosdevname -btrfs -caps -crypt -crypt-gpg
-dmsquash-live -gensplash -iscsi -livenet -mdraid -multipath -nbd -nfs -plymouth
-ssh-client"
</pre>
}}

It is advisable to set (or unset) the modules needed. After configuring the <var>DRACUT_MODULES</var> variable in {{Path|/etc/portage/make.conf}}, {{c|emerge dracut}} to install the Dracut utility. 

The next step is to configure {{c|dracut}} by editing {{Path|/etc/dracut.conf}}. In the configuration file, which is well commented, in order to add support for needed modules.

Una vez configurado, crear un initramfs llamando a {{c|dracut}} como sigue: 

{{RootCmd|dracut}}

The resulting image supports generic system boots based on the configuration in {{Path|/etc/dracut.conf}}. It is also possible to generate an initramfs specifically tailored to ''your'' system (which {{c|dracut}} tries to detect the needed tools, drivers, etc. from the existing system). If the modules and drivers are built into the kernel (not as separate modules and references to the firmware), then the <code>--no-kernel</code> option can be added: 

{{RootCmd|dracut --host-only --no-kernel}}

Para más información, echar un vistazo a las páginas del manual de dracut y dracut.cmdline:
{{Cmd
|man dracut
|man dracut.cmdline
}}

== Ver también ==

* [[Initramfs]] en el wiki oficial de Gentoo.
* [[Dracut]] en el wiki oficial de Gentoo.

== Recursos externos ==

* El fichero [https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt ramfs-rootfs-initramfs.txt] dentro de la documentación del núcleo Linux.


[[Category:Initramfs]]
