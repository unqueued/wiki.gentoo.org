<!-- Page: Final_Preparations_and_Reboot_into_EFI -->

<span id="final_prep_and_reboot">In this section</span>, we'll be following along with [http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?part=1&chap=8 Chapter 8] of the Gentoo handbook. However, we'll defer some of the configuration tasks until the next chapter, when you have rebooted (because configuring <tt>systemd</tt> is most easily done from within a system actually running <tt>systemd</tt>). The steps we'll be undertaking are:
# Setting up the mountpoint tables {{Path|/etc/fstab}} and {{Path|/etc/mtab}};
# Concluding preparations, viz.:
## Emerging some necessary packages (which it will be useful to have in place before a reboot);
## Taking note of networking information;
## Setting up a root password for the new system; then
# Cleanly dismounting the <tt>chroot</tt>, and restarting;
# Before the OS boots, modifying the BIOS settings so that non-secure UEFI mode is used, then restarting again.

Instructions are also provided at [[#if_things_go_wrong|the end of this chapter]] to recover back to a <tt>chroot</tt> environment, should things not go as planned.

So let's get started!

== <span id="setup_fstab">Setting up the Mountpoint Tables</span> ==

Per the Gentoo handbook, we first need to setup {{Path|/etc/fstab}}, so that the system knows the location, mount point, filesystem type and mount options for the key system partitions. There are three such partitions (which we created [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#create_lvs|earlier]]:
# the {{Highlight|root}} partition, which holds the system software, configuration files, and the superuser's home directory (device file path {{Path|/dev/mapper/vg1-root}});
# the {{Highlight|swap}} partition, which is used to extend the system's available memory, and can also be used for hibernation (device file path {{Path|/dev/mapper/vg1-swap}}); and
# the {{Highlight|home}} partition, which holds the home directories of normal users (device file path {{Path|/dev/mapper/vg1-home}}).

We need to add entries for each of these to [[fstab]]; so issue:
{{RootCmd
|nano -w /etc/fstab
|prompt=<span style{{=}}"color:gray;">(chroot)</span> livecd <span style{{=}}"color:blue;">/ #</span>
}}
and then edit the file, so that the only ''uncommented'' lines (those not starting with a <tt>#</tt> symbol), are as follows:
{{File|/etc/fstab|Set the following as the only uncommented lines|<pre>
/dev/mapper/vg1-root    /           ext4    defaults,noatime,errors=remount-ro,discard   0 1
/dev/mapper/vg1-swap    none        swap    defaults,noatime,discard    0 0
/dev/mapper/vg1-home    /home       ext4    defaults,noatime,discard    0 2
</pre>
}}
If you have a cd-rom drive on your machine (the Panasonic CF-AX3 does not), you can also add the following additional line:
{{File|/etc/fstab|Add the following additional line, if you have a cd-rom|<pre>
/dev/cdrom/             /mnt/cdrom  auto    noauto,user,ro 0 0
</pre>
}}
Save and exit <tt>nano</tt>.

In the {{Path|/etc/fstab}} file:<ref>[http://man7.org/linux/man-pages/man5/fstab.5.html <tt>fstab</tt> (7) manpage]</ref>
* The first field describes the path to the partition's device file (NB - when this file is referenced, the [[initramfs]]-based <tt>init</tt> script will already have unlocked the LUKS partition and activated the LVM logical volumes, so we can safely use the device-mapper paths, as above).
* The second field shows the mount point.
* The third field shows the filesystem type. I have assumed (per the tutorial instructions) that you have used [[ext4]] for the root and home partitions; if you chose something different, make sure to reflect it here. The use of <tt>auto</tt> for the optional cd-rom makes the operating system guess the filesystem type, which is useful with removable media.
* The fourth field contains the mount options; these choices here are described in more detail below.
* The fifth field is used by the <tt>dump</tt> command to denote which filesystems require dumping. It's generally fine to leave this as '0' (do not dump) in all cases.
* The sixth field is used by <tt>fsck</tt> to determine the order filesystems are integrity checked at boot time. A <tt>0</tt> indicates no check. The root filesystem should have (as here) a <tt>1</tt> to force it to be checked first, and then all other persistent filesystems can have <tt>2</tt> specified (so they are checked together, but after the root filesystem).

{{Note|We ''don't'' need to mount {{Path|/boot}} here, since this is a UEFI system and our {{Path|/boot}} is simply a regular directory, used as a marshalling ground. Nor do we specify our {{Path|/boot/efi}} mountpoint, since that will be dealt with explicitly by <tt>buildkernel</tt> (and the UEFI boot sequence), and we'll generally want to be able to remove the USB key once the machine has booted anyway (for security).}}
{{Note|There is no need to place entries for {{Path|/proc}} and {{Path|/dev}} into {{Path|/etc/fstab}}; these will be mounted automatically.}}

Here are the specific mount options selected above, and their meaning:

{| class="wikitable"
|-
! Partition !! Mount Option !! Description
|-
| rowspan=4|{{Highlight|root}} || <tt>defaults</tt> || Specifies the baseline options: 
* <tt>rw</tt> (mount the filesystem read/write);
* <tt>suid</tt> (allow set-user-identifier / set-group-identifier [[:Wikipedia:Setuid|bits]] to take effect);
* <tt>dev</tt> (interpret character or block special [[:Wikipedia:Device_file|device files]] on the filesystem);
* <tt>exec</tt> (permit execution of binaries); 
* <tt>auto</tt> (automatically mount at boot);
* <tt>nouser</tt> (forbid non-root users to explicitly mount) and 
* <tt>async</tt> (perform I/O to the filesystem asynchronously).
|-
| <tt>noatime</tt> || This prevents file access times from being recorded; these are not generally needed, and this setting is particularly important for performance if you use a solid-state drive (SSD).<ref>Arch Linux Wiki: [https://wiki.archlinux.org/index.php/Solid_State_Drives#noatime_Mount_Flag "Solid State Drives: noatime Mount Flag"]</ref> Incidentially, <tt>noatime</tt> is a superset of <tt>nodiratime</tt>.<ref>LWN.net: [http://lwn.net/Articles/245002/ "Does noatime imply nodiratime?"]</ref>
|-
| <tt>errors=remount-ro</tt> || This causes the root system to be remounted read-only if errors are encountered, for safety.
|-
| <tt>discard</tt> || This allows the TRIM command to work, ''provided that'' you have also allowed this in LUKS via the <tt>root_trim=yes</tt> kernel command-line flag (actually passed through to the <tt>init</tt> script) in {{Path|/etc/buildkernel.conf}}, as described [[EFI_Gentoo_End_to_End_Install/Configuring_and_Building_the_Kernel#enable_trim|earlier]]. TRIM will improve performance on SSDs as they get full,<ref>Arch Linux Wiki: [https://wiki.archlinux.org/index.php/Solid_State_Drives#TRIM "Solid State Drives: TRIM"]</ref> but make sure you are comfortable with the possible security implications of turning it on.
|-
| rowspan=3|{{Highlight|swap}} || <tt>defaults</tt> || Sets baseline options as per the root partition, above. Note that you do ''not'' need <tt>sw</tt> or <tt>swap</tt> here, although they are commonly seen.<ref>SuperUser Forum: [http://superuser.com/questions/337410/what-is-the-difference-between-swap-entries-in-fstab "What is the difference between swap entries in fstab?"]</ref>
|-
| <tt>noatime</tt> || ''See above.''
|-
| <tt>discard</tt> || ''See above.''
|-
| rowspan=3|{{Highlight|home}} || <tt>defaults</tt> || Sets baseline options as per the root logical volume, above.
|-
| <tt>noatime</tt> || ''See above.''
|-
| <tt>discard</tt> || ''See above.''
|-
| rowspan=3|{{Highlight|cd-rom}} (optional)|| <tt>noauto</tt> || Do not attempt to mount automatically at boot.
|-
| <tt>user</tt> || Allow a non-root user to explicitly mount (desirable for removable media). Note that this implies:
* <tt>noexec</tt> (prevent execution of binaries on this filesystem);
* <tt>nosuid</tt> (prevent set-user-identifier / set-group-identifier [[:Wikipedia:Setuid|bits]] from taking effect) and 
* <tt>nodev</tt> (do ''not'' interpret character or block special [[:Wikipedia:Device_file|device files]] on the filesystem).
If any of that bothers you, be sure to override with a subsequent option.
|-
| <tt>ro</tt> || Mount the filesystem read-only.
|}

<span id="symlink_etc_mtab">Per the Gentoo [[Systemd#/etc/mtab|wiki article on <tt>systemd</tt>]]</span>, the mounted file systems table ({{Path|/etc/mtab}}) must be a symlink to {{Path|/proc/self/mounts}}, so issue:
{{RootCmd
|ln -vsf /proc/self/mounts /etc/mtab
|prompt=<span style{{=}}"color:gray;">(chroot)</span> livecd <span style{{=}}"color:blue;">/ #</span>
}}
== <span id="concluding_prep">Some Concluding Preparations</span> ==

It <span id="emerge_additionals">will</span> be useful to have the [[:Wikipedia:DHCPD|DHCP daemon]], [[:Wikipedia:Wpa_supplicant|<tt>wpa_supplicant</tt>]] and [[:Wikipedia:GNU_Screen|<tt>screen</tt>]] software available immediately upon reboot. They're not yet installed on the <tt>chroot</tt> operating system, only on the 'outer' host, so let's emerge them now. Issue:

{{RootCmd
|emerge --ask --verbose net-misc/dhcpcd net-wireless/wpa_supplicant app-misc/screen
|prompt=<span style{{=}}"color:gray;">(chroot)</span> livecd <span style{{=}}"color:blue;">/ #</span>
|output=<pre>
... additional output suppressed ...
Would you like to merge these packages? [Yes/No] <press y, then press Enter>
... additional output suppressed ...
</pre>
}}

Next, <span id="note_if_name">take note</span> of your current network interface name - this will be the same after a reboot, and knowing it will be useful during <tt>systemd</tt> configuration. Issue:
{{RootCmd
|ifconfig
|prompt=<span style{{=}}"color:gray;">(chroot)</span> livecd <span style{{=}}"color:blue;">/ #</span>
}}

and look for a record name similar in format to <tt>enp0s25</tt> (your system will most likely have a different name - in this particular case it refers to a '''e'''ther'''n'''et card on PCI ('''p''') bus '''0''', '''s'''lot '''25''').<ref name="predictable_names">freedesktop.org: [http://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames Predictable Network Interface Names]</ref> 

{{Note|If you are using a wireless adapter for the install, your identifier string will start with <tt>wl</tt>, not <tt>en</tt>. You will have made a note of the relevant name [[EFI_Gentoo_End_to_End_Install/Setting_Up_Networking_and_Connecting_via_ssh#note_wifi_if_name{{!}}earlier]].}} 

Next, we must <span id="setup_new_root_password">set up a root password</span>. Yes, we did indeed set up a root password [[EFI_Gentoo_End_to_End_Install/Creating_and_Booting_the_Minimal-Install_Image_on_USB#first_root_pw_setup|earlier]], but that was for the ''host'' operating system on the target machine, and we are about to discard that and boot directly into the ''new'' (currently <tt>chroot</tt>-ed) one. As such, we need to set a fresh root password within the <tt>chroot</tt>. Issue:
{{RootCmd
|passwd root
|prompt=<span style{{=}}"color:gray;">(chroot)</span> livecd <span style{{=}}"color:blue;">/ #</span>
|output=<pre>
New password: <enter your new password>
Retype new password: <enter your new password again>
passwd: password updated successfully
</pre>
}}

{{Important|Be sure to write this password down somewhere safe! You will require it to log in shortly.}}

== <span id="exit_chroot_and_restart">Cleanly Dismounting the <tt>chroot</tt> and Restarting</span> ==

Almost there! Now we have to exit the <tt>chroot</tt> in both our <tt>screen</tt> virtual consoles, quit both of those consoles (thereby exiting <tt>screen</tt>), unmount the various logical volumes, deactivate the LVM volume group, and close out the LUKS partition. Issue:

{{RootCmd
|exit
|prompt=<span style{{=}}"color:gray;">(chroot)</span> livecd <span style{{=}}"color:blue;">/ #</span>
}}
then:
{{RootCmd
|exit
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
The first <tt>exit</tt> exits the <tt>chroot</tt> in the first <tt>screen</tt> virtual console, the second exits that console itself. Now do the same for the second virtual console (which you'll automatically be dropped out to):
{{RootCmd
|exit
|prompt=<span style{{=}}"color:gray;">(chroot:2)</span> livecd <span style{{=}}"color:blue;">/ #</span>
}}
then:
{{RootCmd
|exit
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
|output=<pre>
[screen is terminating]
</pre>
}}

Unmount everything (and turn off swap), deactivate LVM, and close LUKS:
{{RootCmd
|swapoff -v /dev/mapper/vg1-swap
|umount -lv /mnt/gentoo/home
|umount -lv /mnt/gentoo/dev{/shm,/pts,}
|umount -lv /mnt/gentoo{/proc,/sys,}
|vgchange --available n
|cryptsetup luksClose gentoo
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}

Now we're ready to restart. Ensure your boot USB key is still inserted into the target machine (as well as the minimal install USB key, at this point), and issue:
{{RootCmd
|reboot
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}

Your <tt>ssh</tt> session will exit. ''Immediately'' your target machine starts to come back up again, enter the BIOS setup screen.

== <span id="set_uefi_mode_in_bios">Selecting UEFI Boot Mode in the BIOS and Restarting!</span> ==

As mentioned earlier, the exact method of entering the BIOS varies greatly from machine to machine (as does the BIOS user interface itself). On the Panasonic CF-AX3, press {{Key|F2}} during startup (you may need to press it repeatedly, and you do this directly on the target machine's keyboard).

Once the BIOS setup screen comes up, '''remove the minimal install USB key''', so that only the boot USB key (the smaller capacity one) remains inserted. Then, using the same navigation techniques as [[EFI_Gentoo_End_to_End_Install/Creating_and_Booting_the_Minimal-Install_Image_on_USB#bios_navigation|before]], perform the following steps:
# disable legacy / [[:Wikipedia:Unified_Extensible_Firmware_Interface#CSM_booting|CSM]] boot mode;
# enable EFI boot mode;
# ensure any 'fast boot' / 'ultra fast boot' options (if present) are disabled (as these may cause USB to be disabled until the operating system comes up);
# turn off secure boot (our kernel is currently unsigned, and we have not yet updated the machine's key database in any event);
# select the USB boot key as the highest priority UEFI boot device; and
# restart your machine (saving changes).

It's impossible to be precise about the GUI actions required to achieve the above, as they will vary from BIOS to BIOS. However, to give you some idea, here's how you go about it on the Panasonic CF-AX3 (which has an AMT BIOS).

Using the arrow keys, navigate across to the 'Boot' tab. Then, navigate down to the 'UEFI Boot' item, and press {{Key|Enter}}. In the popup that appears, select 'Enabled' using the arrow keys, and press {{Key|Enter}}. This switches the system out of legacy / CSM boot and into standard UEFI mode (steps 1 and 2 in the list above):
{|style="background:transparent; color:black" 
|[[File:Bios_enable_uefi.jpg|thumb|none|400px|Switching Back to UEFI Boot]]
|}

{{Important|If you have a 'Fast Boot' / 'Ultra Fast Boot' option in your BIOS, it's probably best to turn it off at this point (step 3 in the list); as this ''may'' cause USB devices to be disabled at boot time. The Panasonic has the choice of 'Normal' (as here) or 'Compatible' boot modes; 'Normal' does allow boot from USB and works with the USB keys I used, but if you have problems (and the same BIOS), you could try switching this to 'Compatible' instead).}}

Next (step 4), we'll <span id="turn_off_secure_boot">turn off</span> [[:Wikipedia:Unified_Extensible_Firmware_Interface#Secure_boot|secure boot]], since we haven't yet signed our kernel (or installed our own keys into the BIOS). On the CF-AX3, use the arrow keys to select the 'Security' tab, then navigate down to the 'Secure Boot' item, and select it by pressing {{Key|Enter}}. This enters a 'Security' sub-page; navigate to the 'Secure Boot control' item, and press {{Key|Enter}}. In the popup that appears, select 'Disabled' using the arrow keys, and press {{Key|Enter}}:
{|style="background:transparent; color:black" 
|[[File:Bios_disable_secure_boot.jpg|thumb|none|400px|(Temporarily) Disabling Secure Boot]]
|}

Next, on the CF-AX3, it is necessary to restart the machine at this point (as it will not pick up valid UEFI boot devices immediately upon switching into UEFI boot mode). Press {{Key|F10}} to restart, and confirm if prompted.

When the machine restarts, hit {{Key|F2}} again, to re-enter BIOS setup. Now we can select a boot device (step 5). Using the arrow keys, navigate to the 'Boot' tab, and then down to the 'UEFI Priorities' item. Press {{Key|Enter}}, and a sub-page is displayed. Ensure the item 'UEFI Boot from USB' is enabled (if it isn't, enable it now, and then press {{Key|F10}} to restart (confirming if prompted), and come back to this point). Navigate down to 'Boot Option #1' and press {{Key|Enter}}. In the pop-up menu that appears, select your (boot) USB key, and press {{Key|Enter}} to select it:
{|style="background:transparent; color:black" 
|[[File:Bios_set_efi_boot_order.jpg|thumb|none|400px|Making Our Boot USB Key the First Boot Option]]
|}
{{Note|The item that ''you'' need to select from this menu will of course depend the make and model of your boot USB key.}}

That's it! Now press {{Key|F10}} to restart (step 6), and confirm if prompted.

If all that worked, your target system should restart, and boot the UEFI stub kernel off the boot USB key. After some initialization, you should be prompted for a passphrase to unlock the <tt>gpg</tt> keyfile for your LUKS partition (this is the passphrase you set up [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#create_gpg_luks_keyfile|earlier]]). Type this in (directly at the target machine keyboard), and press {{Key|Enter}}. Shortly after, assuming that your passphrase is correct, you'll be presented with a login prompt. <span id="login_directly_to_new_system">Enter 'root' as the user</span> (again, directly at the keyboard, without quotes), and then type the root password you set up [[#setup_new_root_password|above]]. 

If all goes well, you should now be logged in! If this is the case, congratulations, you have a encrypted system which boots from UEFI and uses <tt>systemd</tt>, and you can now [[EFI_Gentoo_End_to_End_Install/Configuring_systemd_and_Installing_Necessary_Tools|proceed]] to configure your <tt>systemd</tt> (and other) settings properly.

If, for some reason, you weren't able to boot, then read on.

== <span id="if_things_go_wrong">How to Recover if Things Go Wrong</span> ==

{{Note|If you managed to reboot your new system and log in successfully, then you should [[EFI_Gentoo_End_to_End_Install/Configuring_systemd_and_Installing_Necessary_Tools{{!}}skip this step]], it is only necessary for those attempting to recover back to a <tt>chroot</tt> system after a failed boot.}}

The following are short-form instructions to get you back into a <tt>chroot</tt> environment again, so that you can attempt to fix whatever problem prevented you from booting under UEFI. I have included backlinks throughout, so you can hop up to where these steps were first taken, and read in more detail about what is involved - the style of what follows is rather telegraphic.

First, re-insert your minimal install USB key into the target machine (leaving the boot USB key inserted as well, since we'll need it to unlock the LUKS partition), and restart the system. As the machine comes up, re-enter the BIOS and re-activate legacy / [[:Wikipedia:Unified_Extensible_Firmware_Interface#CSM_booting|CSM]] booting, and set (if it is not already) the USB key to be the top boot priority device (original instructions [[EFI_Gentoo_End_to_End_Install/Creating_and_Booting_the_Minimal-Install_Image_on_USB#set_csm_boot|here]]). Save the BIOS settings and exit, thereby rebooting into the Gentoo minimal install system (original instructions [[EFI_Gentoo_End_to_End_Install/Creating_and_Booting_the_Minimal-Install_Image_on_USB#boot_beep|here]]). As before, hit {{Key|Enter}} when it beeps at you, remember to select the correct keymap etc. Then, since the boot image itself has no persistence, issue (directly on the target machine's keyboard):
{{RootCmd
|passwd root
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
|output=<pre>
New password: <enter your (host system) root password>
Retype new password: <enter your (host system) root password again>
passwd: password updated successfully
</pre>
}}
Remember (original instructions [[EFI_Gentoo_End_to_End_Install/Creating_and_Booting_the_Minimal-Install_Image_on_USB#first_root_pw_setup|here]]), you are setting up a password for the 'outer', host system here - root's password ''inside'' the <tt>chroot</tt> will be retained (and different), but we haven't remounted the <tt>chroot</tt> yet.

Next, ensure that your networking is up. Follow the appropriate instructions below.

If installing over '''wired Ethernet''', simply wait for a little while (if necessary for address allocation to complete), and then note your IP address, using <tt>ifconfig</tt> (original instructions [[EFI_Gentoo_End_to_End_Install/Setting_Up_Networking_and_Connecting_via_ssh#get_ip_address|here]]):
{{RootCmd
|ifconfig
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
Then [[#restart_sshd|click here]] to skip to the next step.
If, instead, you are installing over '''WiFi''', you need to re-create your configuration file (original instructions [[EFI_Gentoo_End_to_End_Install/Setting_Up_Networking_and_Connecting_via_ssh#connecting_via_wifi|here]]). Issue:
{{RootCmd
|wpa_passphrase "ESSID" > /etc/wpa.conf
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
|output=
<pre>
<then type your WiFi access point passphrase (without quotes) and press Enter>
</pre>
}}
{{Note|As before, substitute the correct name for <tt>"ESSID"</tt> in the above.}}
Lock down the file's access permissions (to root only) and check that its contents look sane. Issue:
{{RootCmd
|chmod -v 600 /etc/wpa.conf
|cat /etc/wpa.conf
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
Assuming that looks OK, we can connect. Issue:
{{RootCmd
|wpa_supplicant -Dnl80211,wext -iwlp2s0 -c/etc/wpa.conf -B
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
{{Note|Substitute the wireless network interface name you wrote down [[EFI_Gentoo_End_to_End_Install/Setting_Up_Networking_and_Connecting_via_ssh#note_wifi_if_name{{!}}previously]] for <tt>wlp2s0</tt> in the above command.}}
Then note your IP address:
{{RootCmd
|ifconfig wlp2s0
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}

{{Note|As before, if you need to use a fixed IP address, a proxy, IPv6, or an unencrypted WiFi connecction, please see [http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?part{{=}}1&chap{{=}}3 Chapter 3] of the Gentoo handbook for more details.
}}
<span id="restart_sshd">Now start <tt>sshd</tt></span> (original instructions [[EFI_Gentoo_End_to_End_Install/Setting_Up_Networking_and_Connecting_via_ssh#setup_ssh_server|here]]):
{{RootCmd
|/etc/init.d/sshd start
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}

This will generate a new set of keys, so take a note of the RSA and ED25519 fingerprints for the host key, as shown with:
{{RootCmd
|ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key.pub
|ssh-keygen -l -f /etc/ssh/ssh_host_ed25519_key.pub
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
Now switch to your helper PC. Note that, if the target PC's IP address is the same as it was originally (quite likely, even with [[:Wikipedia:Dynamic_Host_Configuration_Protocol|DHCP]]), then the helper will already have a note of its previous fingerprint, and will refuse to connect via <tt>ssh</tt> (since a mismatched fingerprint might suggest a [[:Wikipedia:Man-in-the-middle_attack|man-in-the-middle attack]]). Therefore, we need to remove the old fingerprint record for the IP from {{Path|~/.ssh/known_hosts}}. Issue:
{{Cmd
|sed -i '/^[^[:digit:]]*192.168.1.106[^[:digit:]]/d' ~/.ssh/known_hosts
|prompt=user@pc2 $}}
{{Note|Substitute whatever IP address you got back from <tt>ifconfig</tt> for 192.168.1.106 in the above command.}}

and issue (original instructions [[EFI_Gentoo_End_to_End_Install/Setting_Up_Networking_and_Connecting_via_ssh#log_in_via_helper|here]]):
{{Cmd
|ssh root@192.168.1.106
|prompt=user@pc2 $}}
Check the key fingerprint and then, if it matches, continue as below:
{{GenericCmd|<pre>
... additional output suppressed ...
Are you sure you want to continue connecting (yes/no)? <type 'yes', then Enter>
... additional output suppressed ...
Password: <enter root password you just set>
... additional output suppressed ...
</pre>
}}
{{Note|Substitute whatever IP address you got back from <tt>ifconfig</tt> for 192.168.1.106 in the above command.}}
Once you are connected, we need to get <tt>screen</tt> running. Via the <tt>ssh</tt> connection on the helper PC (which is how you should enter all subsequent commands, unless otherwise specified), issue (original instructions [[EFI_Gentoo_End_to_End_Install/Setting_Up_Networking_and_Connecting_via_ssh#start_screen|here]]):
{{RootCmd
|screen
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}

Next, we must mount the USB boot key's EFI system partition, so that we can use the keyfile on it to unlock the LUKS partition. Find out the device file name for the EFI partition on the USB boot key, by issuing (original instructions [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#determine_efi_dev|here]]):
{{RootCmd
|lsblk
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
We will refer to this as {{Path|/dev/sdY1}} in what follows, but of course on your machine it will be something like {{Path|/dev/sdb1}} or {{Path|/dev/sdc1}} (note that the initial {{Path|/dev/}} prefix is not shown in the <tt>lsblk</tt> output).

Next, create a temporary mountpoint, and mount it. Issue (original instructions [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#temp_mount_efi|here]]):
{{RootCmd
|mkdir -v /tmp/efiboot
|mount -v -t vfat /dev/sdY1 /tmp/efiboot
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
{{Note|Replace {{Path|/dev/sdY1}} in the above command with the path of first partition on the USB key, which you just located with <tt>lsblk</tt>, such as {{Path|/dev/sdb1}} or {{Path|/dev/sdc1}}.}}

Now, we can open the [[:Wikipedia:Linux_Unified_Key_Setup|LUKS]] volume. You'll need the passphrase (for the <tt>gpg</tt> keyfile) you [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#create_gpg_luks_keyfile|set up earlier]] to do this:
{{RootCmd
|export GPG_TTY{{=}}$(tty) 
|gpg --decrypt /tmp/efiboot/luks-key.gpg {{!}} cryptsetup --key-file - luksOpen /dev/sdZn gentoo
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
|output=<pre>
Enter passphrase
<type the passphrase for the gpg keyfile you setup earlier>
... additional output suppressed ...
</pre>
}}
{{Note|Replace {{Path|/dev/sdZn}} in the above command with the device path for the LUKS partition, e.g., {{Path|/dev/sda5}}. You can check this with <tt>lsblk</tt> (original instructions [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#find_luks_partition|here]]).}}
{{Note|You may get complaints about <tt>'no LC_CTYPE known'</tt> printed by <tt>pinentry</tt>; these can generally be ignored. See explanation in the [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#lc_ctype_problem|original text]].}}

Now we can bring up the [[:Wikipedia:Logical_Volume_Manager_(Linux)|LVM]] logical volumes, and mount them. Issue (original instructions [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#activate_lvm|here]]):
{{RootCmd
|vgchange --available y
|swapon -v /dev/mapper/vg1-swap
|mount -v -t ext4 /dev/mapper/vg1-root /mnt/gentoo
|mount -v -t ext4 /dev/mapper/vg1-home /mnt/gentoo/home
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}

Next, unmount the USB boot key; issue (original instructions [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#unmount_efi|here]]):
{{RootCmd
|umount -v /tmp/efiboot
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}

Ensure the date and time is set correctly; issue (original instructions [[EFI_Gentoo_End_to_End_Install/Installing_the_Gentoo_Stage_3_Files#set_date_time|here]]):
{{RootCmd
|date MMDDhhmmYYYY
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
{{Note|Substitute MMDDhhmmYYYY in the above with the correct date/time string. For example, to set the UTC date/time to 5:12pm on February 9th 2014, you would issue
{{RootCmd
|date 020917122014
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
}}
Next, make sure that the [[:Wikipedia:Domain_Name_System|DNS]] information will still be valid after we <tt>chroot</tt>. Issue (original instructions [[EFI_Gentoo_End_to_End_Install/Building_the_Gentoo_Base_System_Minus_Kernel#copy_dns_info|here]]):
{{RootCmd
|cp -L /etc/resolv.conf /mnt/gentoo/etc/
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
|output=<pre>
cp: overwrite '/mnt/gentoo/etc/resolv.conf'? <type 'yes', then Enter>
</pre>
}}

Now, ensure that the various special files in {{Path|/proc}}, {{Path|/sys}} and {{Path|/dev}} are available after a <tt>chroot</tt>. Issue (original instructions [[EFI_Gentoo_End_to_End_Install/Building_the_Gentoo_Base_System_Minus_Kernel#setup_bind_mounts|here]]):
{{RootCmd
|mount -v -t proc none /mnt/gentoo/proc
|mount -v --rbind /sys /mnt/gentoo/sys
|mount -v --rbind /dev /mnt/gentoo/dev
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}

Now we can actually enter the <tt>chroot</tt>. Issue (original instructions [[EFI_Gentoo_End_to_End_Install/Building_the_Gentoo_Base_System_Minus_Kernel#enter_chroot|here]]):
{{RootCmd
|chroot /mnt/gentoo /bin/bash
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
Remember to source our profile correctly and set a prompt hint. Issue (original instructions [[EFI_Gentoo_End_to_End_Install/Building_the_Gentoo_Base_System_Minus_Kernel#chroot_prompt|here]]):
{{RootCmd
|source /etc/profile
|export PS1{{=}}"(chroot) $PS1"
|prompt=livecd <span style{{=}}"color:blue;">/ #</span>
}}
Finally, we can setup a second virtual console inside <tt>screen</tt> (just as we did [[EFI_Gentoo_End_to_End_Install/Building_the_Gentoo_Base_System_Minus_Kernel#second_virtual_console|before]]), which will be useful to e.g., monitor the status of long <tt>emerge</tt>s. Press {{Key|Ctrl}}{{Key|a}} then {{Key|c}} to start a new console. Then in that new console (which is back outside the <tt>chroot</tt>, to begin with) enter:
{{RootCmd
|chroot /mnt/gentoo /bin/bash
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
followed by
{{RootCmd
|source /etc/profile
|export PS1{{=}}"(chroot:2) $PS1"
|prompt=livecd <span style{{=}}"color:blue;">/ #</span>
}}

Now hit {{Key|Ctrl}}{{Key|a}} then {{Key|p}} to get back to the original console.

That's it! You can now proceed to edit your <tt>chroot</tt>-ed system (and hopefully, to fix it). It is impossible to be specific as to what may have caused a problem, but some likely candidates include:
* '''Incorrect kernel configuration.''' In this case, run <tt>buildkernel --ask --verbose</tt>, enter the graphical kernel configuration editor when prompted, change the appropriate kernel settings, and then save and exit the editor. The build will continue with your modified configuration. (A problem of this sort is most likely to occur if you have ''already'' started to dabble with the configuration, since the standard flow in this tutorial assumes you have used the {{Path|/proc/config.gz}} config from the running minimal install system kernel - which is therefore to some extent 'known good' - as a basis).
* '''Missing packages.''' For example, you may have forgotten to install e.g., {{Package|net-misc/dhcpcd}} prior to reboot, preventing you from accessing the network properly. If this is the case, simply <tt>emerge</tt> the [[#emerge_additionals|required software]] within the chroot, and then try again. There is no need to re-run <tt>buildkernel</tt> in this case.
* '''Wrong keymapping causing mangled passwords.''' If the system would not accept your <tt>gpg</tt> keyfile passphrase on reboot, but you were able to successfully unlock it when re-entering the <tt>chroot</tt> above, or, if the system would not accept your root password after a restart, then you may have not setup the <tt>KEYMAP</tt> variable in {{Path|/etc/buildkernel.conf}} correctly. See [[EFI_Gentoo_End_to_End_Install/Configuring_and_Building_the_Kernel#important_conf_vars|this earlier discussion]] for further details. (These issues can also generally be ameliorated (for most locales) through the use of only standard English letters in your passphrases, as mentioned [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#correct_horse_battery_staple|previously]].) Review, and if necessary, change your boot-time keymap by using <tt>buildkernel --easy-setup</tt>, and then re-run <tt>buildkernel --ask --verbose</tt>.
* '''Problems with UUIDs.''' The <tt>buildkernel</tt> script tries to ensure that the UUIDs you have passed it (in {{Path|/etc/genkernel.conf}} [[EFI_Gentoo_End_to_End_Install/Configuring_and_Building_the_Kernel#important_conf_vars|above]]) are valid, but it is still possible to make a mistake (e.g. if you have more than one LUKS partition on your system, for example). Double check these values, and, if necessary, change them (by using <tt>buildkernel --easy-setup</tt>) and then re-run <tt>buildkernel --ask --verbose</tt>.
* '''BIOS configuration problems.''' A total failure of your new system to even try to start (or if you get Windows 8 instead!) is likely to indicate some issue with your BIOS settings. Are you sure your USB boot key is at the top of the UEFI boot order? And that secure boot is disabled at this point? Run through the steps in the [[#set_uefi_mode_in_bios|"Selecting UEFI Boot Mode in the BIOS and Restarting!"]] section once more, then try again. (You should also double-check that the first (and only) partition on your USB boot key is marked as an EFI system partition and is formatted <tt>fat32</tt>; see [[EFI_Gentoo_End_to_End_Install/Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#setup_system_partition|this discussion]].) A very few EFI systems also do not look for a boot executable under the standard {{Path|/EFI/Boot/bootx64.efi}} path, but instead will use {{Path|/EFI/Microsoft/Boot/bootmgfw.efi}}.<ref>Smith, Roderick W. [http://www.rodsbooks.com/refind/installing.html#naming "The rEFInd Boot Manager: Installing rEFInd: Alternative Naming Options"]</ref> If that's the case for your target machine, change the EFI boot file path using <tt>buildkernel --easy-setup</tt>, then re-run <tt>buildkernel --ask --verbose</tt>.

{{Note|If you try to fix things that involve using the graphical kernel configuration editor, and you are connected over <tt>ssh</tt> from your helper machine, be aware that you may get some pretty strange characters displayed. This can happen if your helper's locale is not present on the target (in the host operating system that is, not the <tt>chroot</tt>, since <tt>sshd</tt> is running in the former context).<ref name="set_locale_failed">ServerFault Q&A Site: [http://serverfault.com/questions/304469/setting-locale-failed-force-certain-locale-when-connecting-through-ssh "Setting locale failed: force certain locale when connecting through ssh"]</ref> In this case, simply open up a chroot directly at the target's keyboard, and perform the <tt>buildkernel</tt> from there; i.e., directly at the machine, issue:
{{RootCmd
|chroot /mnt/gentoo /bin/bash
|prompt=livecd <span style{{=}}"color:blue;">~ #</span>
}}
followed by:
{{RootCmd
|source /etc/profile
|export PS1{{=}}"(chroot:direct) $PS1"
|prompt=livecd <span style{{=}}"color:blue;">/ #</span>
}}
and then:
{{RootCmd
|buildkernel --ask --verbose
|prompt=<span style{{=}}"color:gray;">(chroot:direct)</span> livecd <span style{{=}}"color:blue;">/ #</span>
}}
}}

Once you have made your changes and are ready to have another go at rebooting, simply proceed from the section [[#exit_chroot_and_restart|"Cleanly Dismounting the <tt>chroot</tt> and Restarting"]] in the main text. Good luck!

== <span id="next_steps">Next Steps</span> ==

Now that you have successfully booted into Gentoo from UEFI, we can proceed to configure <tt>systemd</tt> and other settings properly! [[EFI_Gentoo_End_to_End_Install/Configuring_systemd_and_Installing_Necessary_Tools|Click here]] to go to the next chapter, "Configuring <tt>systemd</tt> and Installing Necessary Tools".

== <span id="notes">Notes</span> ==
{{reflist}}

== <span id="acknowledgements">Acknowledgements</span> ==

We would like to thank the following authors and editors for their contributions to this guide:

* {{Mail|sakaki@deciban.com|sakaki}}

{| style="margin: 1em auto 1em auto;"
|-
| [[EFI_Gentoo_End_to_End_Install/Configuring_and_Building_the_Kernel|<]]
| [[EFI_Gentoo_End_to_End_Install|Home]]
| [[EFI_Gentoo_End_to_End_Install/Configuring_systemd_and_Installing_Necessary_Tools|>]]
|}

[[Category:Bootloaders]]
[[Category:Core system]]
[[Category:Laptops]]
