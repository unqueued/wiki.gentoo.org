<languages />
{{Metadata|abstract=Portage ofrece soporte para la construcción e instalación de paquetes binarios. Esta guía detalla cómo crearlos, instalarlos y cómo configurar un servidor de paquetes binarios.}}

Aparte del soporte usual para ebuilds, Portage ofrece soporte para construir e instalar paquetes binarios. Esta guía explica cómo crearlos, cómo instalarlos y cómo poner en marcha un servidor de paquetes binarios.

== Introducción ==

Hay muchas razones por la que a los administradores de sistemas Gentoo les gusta utilizar instalaciones de paquetes binarios.

# En primer lugar, permite a los administradores '' mantener actualizados los sistemas que tienen características similares''. Compilar todo desde el código fuente puede llevar mucho tiempo. El mantenimiento de varios sistemas similares, probablemente algunos de ellos con hardware antiguo, puede ser mucho más fácil si solo un sistema tiene que compilar todo desde el código fuente y el resto de sistemas reutilizan los paquetes binarios.
# Una segunda razón es ''hacer actuaarchivo de medio ambientelizaciones seguras''. Es importante mantener ''utilizables'' los sistemas de misión crítica la mayor parte del tiempo posible. Esto se puede hacer con un servidor de ensayo que realiza todas las actualizaciones en sí mismo en primer lugar. Una vez el servidor de ensayo se encuentra en un buen estado, las actualizaciones se pueden aplicar a los sistemas críticos. Una variante de este enfoque es hacer los cambios en un entorno chroot en el mismo sistema y utilizar los binarios creados allí en el sistema real.
# Una tercera razón es ''a modo de copia de seguridad''. A menudo, los paquetes binarios son la única forma de recuperar un sistema que no funciona (por ejemplo, el compilador no funciona). Tener los binarios preconstruidos a mano ya sea en un servidor de paquetes binarios o localmente puede ser de gran ayuda en caso de que se rompa la cadena de herramientas.
# Por último, también permite ''la actualización de sistemas muy antiguos ''. La tarea de actualizar sistemas muy antiguos se puede aliviar en gran medida si se utilizan paquetes binarios. Por lo general es útil para instalar paquetes binarios en los sistemas antiguos, ya que no requieren de dependencias en tiempo de compilación para instalarse o actualizarse. Los paquetes binarios también evitan fallos de los procesos de construcción, ya que están preconstruidos.

Este guía se centra en las siguientes cuestiones: 

* Cómo crear paquetes binarios
* Cómo distribuir estos paquetes a los clientes
* Cómo utilizar los paquetes binarios
* Cómo mantener los paquetes binarios

Casi al final se tratan algunos temas avanzados sobre cómo tratar con los paquetes binarios.

{{Note|Todas las herramientas utilizadas en esta guía forma parte de {{Package|sys-apps/portage}} a menos que se diga lo contrario.}}

== Crear paquetes binarios ==

Hay tres formas principales para la creación de paquetes binarios:

# Después de una instalación normal, utilizando la aplicación {{c|quickpkg}}
# Explícitamente durante una operación {{c|emerge}} utilizando la opción <code>--buildpkg (-b)</code>
# Automáticamente mediante el uso de <code>buildpkg</code> como una característica de Portage.

Los tres métodos crearán un paquete binario en el directorio al que apunta la variable <var>PKGDIR</var> (cuyo valor por defecto es {{Path|/usr/portage/packages}}).

=== Utilizar quickpkg ===

La aplicación {{c|quickpkg}} toma como argumentos uno o más átomos de dependencia (o conjuntos de paquetes) y crea paquetes binarios para todos los paquetes ''instalados'' que concuerdan con ese átomo.

Por ejemplo, para crear paquetes binarios de todas las versiones de GCC ''instaladas'':

{{RootCmd|quickpkg sys-devel/gcc}}

Para crear paquetes binarios de todos los paquetes instalados en el sistema, utilice la expresión <code>*</code>:

{{RootCmd|quickpkg "*/*"}}

Una advertencia sobre el uso de este método: Se basa en los archivos instalados, lo cual puede ser un problema en el caso de archivos de configuración. Los administradores suelen cambiar los archivos de configuración después de instalar el software. Debido a que esto podrían filtrarse datos importantes (incluso confidenciales) en los paquetes. Por defecto, {{c|quickpkg}} ''no'' incluye archivos de configuración que están protegidos mediante el método <var>CONFIG_PROTECT</var>. Para forzar la inclusión de archivos de configuración, utilice las opciones <code>--include-config</code> o <code>--include-unmodified-config</code>.

=== Utilizar --buildpkg como opción de emerge ===

Cuando se instala software mediante {{c|emerge}}, se puede solicitar a Portage que cree paquetes binarios utilizando la opción <code>--buildpkg (-b)</code>:

{{Emerge|params+=--buildpkg|sys-devel/gcc}}

También es posible pedirle a Portage que ''únicamente'' cree los paquetes binarios pero que ''no'' instale el software en el sistema vivo. Para hacer esto se puede utilizar la opción  <code>--buildpkgonly (-B)</code>:

{{Emerge|params+=--buildpkgonly|sys-devel/gcc}}

El último enfoque requiere sin embargo que estén instaladas previamente todas las dependencias necesarias en el momento de la construcción.

=== Implementar buildpkg como una característica de Portage ===

La forma más común para crear automáticamente paquetes binarios cuando Portage instala un paquete es utilizar la característica <code>buildpkg</code>, que se puede configurar en {{Path|/etc/portage/make.conf}} de esta forma:

{{FileBox|filename=/etc/portage/make.conf|title=Habilitar la característica buildpkg de Portage's|lang=bash|1=
FEATURES="${FEATURES} buildpkg"
}}

Cuando se activa esta característica, cada vez que Portage instala software se creará también un paquete binario.

=== Evitar la creación de algunos paquetes ===

Es posible indicarle a Portage que no cree paquetes binarios para un grupo de paquetes o categorías seleccionados. Esto se hace pasando la opción <code>--buildpkg-exclude</code> a emerge:

{{RootCmd|emerge -uDN @world --buildpkg --buildpkg-exclude "virtual/* sys-kernel/*-sources"}}

Esto se podría utilizar para paquetes en los que se obtiene poco o ningún beneficio teniendo instalado el paquete binario disponible. Ejemplos de ello serían los paquetes fuentes del núcleo Linux o paquetes binarios de los desarrolladores del propio paquete (los que terminan en ''-bin'' como {{Package|www-client/firefox-bin}}).

== Poner en marcha un servidor de paquetes binarios ==

Portage ofrece el soporte de varios protocolos para la descarga de paquetes binarios: FTP, FTPS, HTTP, HTTPS y SSH. Esto deja espacio suficiente  para muchas formas de implementación del servidor.

No hay sin embargo un método "listo para funcionar" que ofrezca Portage para la distribución de paquetes binarios. Dependiendo de la configuración deseada, será necesario instalar software adicional.

=== Servidor de paquetes binarios basado en Web ===

Una forma muy usada para la distribución de paquetes binarios es crear un servidor de paquetes basado en web.

Utilice un servidor web como [[lighttpd]] ({{Package|www-servers/lighttpd}}) y configúrelo para ofrecer acceso de lectura a la localización definida en <var>PKGDIR</var> dentro del fichero {{Path|/etc/portage/make.conf}}.

{{FileBox|filename=/etc/lighttpd/lighttpd.conf|title=Ejemplo de configuración lighttpd|lang=bash|1=
# Añada esto al final de la configuración estándar
server.modules += ( "mod_alias" )
alias.url = ( "/packages" => "/usr/portage/packages/" )
}}

A continuación, en los equipos cliente, configure la variable <var>PORTAGE_BINHOST</var> apropiadamente:

{{FileBox|filename=/etc/portage/make.conf|title=Utilizar un servidor de paquetes binarios basado en web|lang=bash|1=
PORTAGE_BINHOST="http://binhost.genfic.com/packages"
}}

=== Equipo de paquetes binarios con SSH ===

Para ofrecer un enfoque con mayor autenticación para los paquetes binarios, se puede considerar el uso de SSH.

Cuando se utiliza SSH es posible utilizar la clave SSH del usuario Linux de Portage (sin frase contraseña ya que se necesita realizar la instalación en segundo plano) para conectar a un equipo remoto con los paquetes binarios.

Para conseguir esto, asegúrese de que se permite usar la clave SSH del usuario Portage en el servidor. Esto se debe realizar en cada máquina que se conectará al servidor de paquetes binarios que acepte SSH:

{{RootCmd|cat portage.id_rsa.pub >> /home/binpkguser/.ssh/authorized_keys}}

La variable <var>PORTAGE_BINHOST</var> podría entonces parecerse a ésta:

{{FileBox|filename=/etc/portage/make.conf|title=Ajustar PORTAGE_BINHOST para acceso SSH|lang=bash|1=
PORTAGE_BINHOST="ssh://usuariopqtbing@servidorbin/usr/portage/packages"
}}

{{Note|1=No utilice la configuración de ssh's en {{Path|~/.ssh/config}} para definir puertos o el nombre dle usuario ya que se ignorará cuando portage intente hacer rsync de los paquetes en el cliente. En lugar de esto, defina las opciones adecuadas en la variable <var>PORTAGE_BINHOST</var>.}}

=== Exportar mediante NFS ===

Cuando se utilizan paquetes binarios dentro de una red internt, puede que se más sencillo exportar los paquetes mediante NFS y montarlo en los clientes.

El fichero {{Path|/etc/exports}} debería tener el siguiente aspecto:

{{FileBox|filename=/etc/exports|title=Exportar el directorio de paquetes|1=
/usr/portage/packages                            2001:db8:81:e2::/48(ro,no_subtree_check,root_squash) 192.168.100.1/24(ro,no_subtree_check,root_squash)
}}

En los clientes, se puede ahora montar la localización. Un ejemplo de entrada {{Path|/etc/fstab}} podría ser este:

{{FileBox|filename=/etc/fstab|title=Entrada para montar la carpeta que contiene los paquetes|1=
binhost:/usr/portage/packages      /usr/portage/packages    nfs    defaults    0 0
}}

== Utilizar paquetes binarios ==

Para que los paquetes binarios se puedan utilizar en otros sistemas, deben cumplir algunos requisitos.

* La arquitectura del cliente y del servidor y su  <var>[[CHOST]]</var> deben coincidir.
* Las variables <var>CFLAGS</var> y <var>CXXFLAGS</var> que se utilyzaron para construir los paquetes binarios deben ser compatibles con todos los clientes.
* Los ajustes USE de características específicas del procesador (como MMX, SSE,...) deben seleccionarse con cuidado ya que todos los clientes deben ofrecer soporte para ellos.

{{Important|Portage no puede validar si se cumplen estos requisitos, esto es responsabilidad del administrador del sistema.}}

Aparte de esto, Portage comprobará si el paquete binario se construye utilizando los mismos ajustes USE que se esperan en el cliente. Si se construye un paquete con una combinación distinta de ajustes USE, Portage, bien ignorará el paquete binario (y utilizará un ebuild basado en fuentes), bien fallará, dependiendo de las opciones que se pasen a la orden {{c|emerge}} cuando se invoque (leer [[#Instalar_paquetes_binarios|Instalar paquetes binarios]]).

En los cliente se requieren algunos cambios en la configuración para poder utilizar paquetes binarios.

=== Instalar paquetes binarios ===

Se necesitan algunas opciones para pasar a la orden {{c|emerge}} que informará a Portage sobre el uso de paquetes binarios:

{| class="table table-condensed table-striped"
|-
! Opción !! Descripción
|-
| <code>--usepkg</code> <br /> <code>(-k)</code> || Intenta utilizar el o los paquetes binarios en el directorio local {{Path|packages}}. Es útil cuando se utilizan servidores de paquetes binarios que permitan montar [[NFS]] o [[SSHFS]]. Si no se encuentran los paquetes binarios solicitados, se realizará una instalación regular (basada en fuentes) .
|-
| <code>--usepkgonly</code> <br /> <code>(-K)</code> || Es similar a <code>--usepkg (-k)</code> pero fallará si no se encuentra el paquete binario solicitado. Esta opción es útil únicamente si se van a utilizar paquetes binarios ''preconstruidos''.
|-
| <code>--getbinpkg</code> <br /> <code>(-g)</code> || Descarga el o los paquetes binarios desde un servidor remote. Si no se encuentran los paquetes binarios solicitados, se realizará una instalación regular (basada en fuentes).
|-
| <code>--getbinpkgonly</code> <br /> <code>(-G)</code> || Es similar a <code>--getbinpkg (-g)</code> pero fallará si no se pueden descargar el o los paquetes binarios. Esta opción es útil solo si se van a utilizar paquetes binarios ''preconstruidos''.
|}

Para utilizar instalaciones basadas en paquetes binarios de forma automática, se puede añadir la opción elegida a la variable <var>EMERGE_DEFAULT_OPTS</var>:

{{FileBox|filename=/etc/portage/make.conf|title=Obtener los paquetes binarios de forma automática y fallar si no están disponibles|lang=bash|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --getbinpkgonly"
}}

Hay una característica (FEATURE) de Portage que implementa automáticamente el equivalente a <code>--getbinpkg (-g)</code> sin tener que actualizar la variable <var>EMERGE_DEFAULT_OPTS</var>: <code>getbinpkg</code>.

{{FileBox|filename=/etc/portage/make.conf|title=Habilitar getbinpkg como una característica de Portage|lang=bash|1=
FEATURES="${FEATURES} getbinpkg"
}}

=== Obtener paquetes desde un servidor de paquetes binarios ===

Cuando se utiliza una gran cantidad de servidores de paquetes binarios, los clientes necesitan tener definida la variable <var>PORTAGE_BINHOST</var>. De otro modo el cliente no sabrá dónde se almacenan los paquetes binarios lo que resultará en que Portage no podrá recuperarlos.

{{FileBox|filename=/etc/portage/make.conf|title=Ajustar PORTAGE_BINHOST|lang=bash|1=
PORTAGE_BINHOST="http://binhost.genfic.com/packages"
}}

La variable <var>PORTAGE_BINHOST</var> utiliza una lista de URIs separada por espacios. Esto permite a los administradores utilizar varios servidores de paquetes binarios de forma simultánea. El URI siempre debe apuntar al directorio en el que el reside el fichero {{Path|Packages}}.

{{Note|El soporte para múltiples servidores de paquetes binarios está algo incompleto. Si varios servidores ofrecen un paquete binario para la misma versión del mismo, entonces se considerará solo el primero. Esto puede ser un problema cuando estos paquetes binarios difieren en su configuración de variable USE y la configuración de variable USE de un paquete binario más reciente coincidiera con la configuración de los sistemas.}}

=== Reinstalar paquetes binarios modificados ===

Si se pasa la opción <code>--rebuilt-binaries</code> a {{c|emerge}} se reinstalarán todos los paquetes que se han reconstruido desde que se instaló el paquete. Esto es útil en caso de que se utilicen herramientas de reconstrucción como {{c|revdep-rebuild}} o {{c|python-updater}} en el servidor paquete binario.

Una opción relacionada es <code>--rebuilt-binaries-timestamp</code>. Hace que emerge no considere los paquetes binarios para una reinstalar si esos paquetes binarios se han reconstruido antes de la marca de tiempo dada. Esto es útil para evitar la reinstalación de todos los paquetes, si el servidor de paquetes binarios se tuvo que reconstruir desde cero, de lo contrario utilice <code>--rebuilt-binaries</code>.

=== Ajustes adicionales en el cliente ===

Next to the <code>getbinpkg</code> feature, Portage also listens to the <code>binpkg-logs</code> feature. This one controls if log files for successful binary package installations should be kept. It is only relevant if the <var>PORT_LOGDIR</var> variable has been set and is enabled by default.

Similar a la exclusión de los paquetes binarios para un determinado conjunto de paquetes o categorías, los clientes se pueden configurar para excluir la instalación de paquetes binarios para un determinado conjunto de paquetes o categorías.

Para hacer esto, utilice la opción <code>--usepkg-exclude</code>:

{{RootCmd|emerge -uDNg @world --usepkg-exclude "sys-kernel/gentoo-sources virtual/*"}}

== Mantenimiento de paquetes binarios ==

Si la lista de paquetes binarios no se mantiene de forma activa, la exportación y distribución de paquetes binarios conllevará un consumo inútil de espacio de almacenamiento.

=== Eliminar paquetes binarios obsoletos ===

Como parte del paquete {{Package|app-portage/gentoolkit}}, se ofrece una aplicación llamada {{c|eclean}}. Permite mantener ficheros variables relacionados con Portage como los ficheros de código fuente que se han descargado y también paquetes binarios.

La siguiente orden elimina todos los paquetes binarios que no tengan un ebuild correspondiente:

{{RootCmd|eclean packages}}

Para más detalles, por favor, lea el artículo sobre [[Eclean/es|eclean]].

Otra herramienta que se puede utilizar es {{c|qpkg}} del paquete {{Package|app-portage/portage-utils}}. Sin embargo, esta herramienta es menos configurable.

Para limpiar paquetes binarios ''no utilizados'' (en el sentido de que no los utiliza el servidor en el que se almacenan los paquetes binarios):

{{RootCmd|qpkg -c}}

=== Mantener el fichero Packages ===

Dentro del directorio de paquetes hay un fichero llamado {{Path|Packages}}. Este fichero actúa como una caché de los metadatos de todos los paquetes binarios en el directorio de paquetes. Estefichero se actualiza cada vez que Portage agrega un paquete binario al directorio. Del mismo modo, {{c|eclean}} lo actualiza cuando elimina paquetes binarios.

Si por alguna razón los paquetes binarios se eliminan o copian en el directorio de paquetes o el fichero {{Path|Packages}} se corrompe o se elimina, entonces se debe recrear. Esto se hace con la orden {{c|emaint}}:

{{RootCmd|emaint binhost --fix}}

== Temas avanzados ==

=== Crear instantáneas del directorio de paquetes ===

Cuando se despliegan paquetes binarios para un gran número de sistemas cliente podría resultar adecuado crear instantáneas del directorio de paquetes. Los sistemas cliente entonces no utilizan el directorio de paquetes directamente, sino que utilizan los paquetes binarios de la instantánea.

Se pueden crear las instantáneas usando la herramienta {{Path|/usr/lib64/portage/python2.7/binhost-snapshot}} o la herramienta {{Path|/usr/lib64/portage/python3.3/binhost-snapshot}}. Admiten cuatro argumentos:

# Un directorio fuente (el camino al directorio de paquetes).
# Un directorio destino (que no debe existir previamente).
# Un URI.
# Un directorio del servidor de paquetes binarios.

Los ficheros del directorio de paquetes se copian al directorio destino. Se crea entonces un fichero {{Path|Packages}} dentro del directorio de paquetes binarios del servidor (el cuarto argumento) con el URI que se indica.

Los sistemas cliente necesitan utilizar un URI que apunta al directorio de paquetes binarios del servidor. A partir de ahí será redirigido al URI que se indicó a {{c|binhost-snapshot}}. Este URI tiene que hacer referencia al directorio destino.

== Comprender el formato del paquete binario ==

El nombre de los paquetes binarios creados por Portage termina en {{Path|.tbz2}}. Estos ficheros constan de dos partes:

# Un fichero {{Path|.tar.bz2}} que contiene los archivos que se van a instalar en el sistema
# Un fichero {{Path|xpak}} que contiene los metadatos del paquete, el ebuild y el fichero de entorno.

La descripción del formato se puede leer en {{c|man xpak}}.

Hay algunas herramientas en {{Package|app-portage/portage-utils}} que sirven para trocear o crear ficheros {{Path|tbz2}} y {{Pah|xpak}}.

La siguiente orden divide el fichero tbz2 en un fichero {{Path|.tbz2}} y en otro {{Path|.xpak}}:

{{Cmd|qtbz2 -s <paquete>.tbz2}}

The {{Path|.xpak}} file can be examined using the {{c|qxpak}} utility.

Para listar los contenidos:

{{Cmd|qxpak -l <paquete>.xpak}}

La siguiente orden extrae un fichero llamado {{Path|USE}} que contiene los ajustes USE habilitados para este paquete:

{{Cmd|qxpak -x package-manager-0.xpak USE}}

=== La plantilla PKGDIR ===

El formato de la versión que es el que se utiliza actualmente tiene la siguiente disposición:

{{CodeBox|title=Plantilla de directorio de paquetes (version 2)|1=
PKGDIR
`+- Packages
 +- app-accessibility/
 {{!}}  +- pkg1-version.tbz2
 {{!}}  `- pkgN-version.tbz2
 +- app-admin/
 {{!}}  `- ...
 `- ...
}}

El fichero {{Path|Packages}} es la principal mejora (y también el desencadenante de que Portage sepa que el directorio de paquete binario utiliza la versión 2) sobre la primera disposición de directorios de paquetes binarios (versión 1). En la versión 1, todos los paquetes binarios también se alojaban dentro de un único directorio (llamado {{Path|All/}}) y los directorios de categoría contenían únicamente enlaces simbólicos a los paquetes binarios dentro del directorio {{Path|All/}}.

=== Desempaquetar con quickunpkg ===

Zoobab ha escrito una sencilla herramienta de consola llamada [https://github.com/zoobab/quickunpkg quickunpkg] para desempaquetar rápidamente ficheros {{Path|tbz2}}.


[[Category:Portage]]
