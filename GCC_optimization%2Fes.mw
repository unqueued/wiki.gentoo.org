<languages />

{{Metadata|abstract=Esta guía ofrece una introducción al código compilado de forma óptima usando CFLAGS y CXXFLAGS seguras y sanas. También describe la teoría detrás de la optimización en general.}}

Esta guía ofrece una introducción al código compilado de forma óptima usando CFLAGS y CXXFLAGS seguras y sanas. También describe la teoría detrás de la optimización en general.

== Introducción ==

=== ¿Qué son CFLAGS y CXXFLAGS? ===

CFLAGS y CXXFLAGS son variables de entorno usadas para indicar a la Colección de Compiladores de GNU, <kbd>gcc</kbd>, qué tipo de opciones usar cuando compila código fuente. Las CFLAGS se aplican al código escrito en C, mientras que CXXFLAGS son para código escrito en C++. 

Pueden usarse para disminuir la cantidad de mensajes de depuración
de un programa, aumentar los niveles de aviso de errores, y por supuesto, optimizar el código producido. El [http://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html#Invoking-GCC manualde GCC] ofrece una lista completa opciones disponibles y sus aplicaciones. 

=== ¿Cómo se utilizan? ===

CFLAGS y CXXFLAGS se pueden usar de dos formas. La primera, por programa con los ficheros Makefile generados por <kbd>automake</kbd>. 

Sin embargo, esto no debería hacerse cuando instalamos paquetes que se encuentran en el árbol Portage. En su lugar, establezca sus CFLAGS y CXXFLAGS en {{Path|/etc/portage/make.conf}}. De esta manera todos los paquetes se compilarán con las opciones que especifique. 

{{CodeBox|title=CFLAGS en /etc/portage/make.conf|lang=bash|1=
CFLAGS="-march=athlon64 -O2 -pipe"
CXXFLAGS="${CFLAGS}"
}}

{{Important/es|Aunque es posible tener varias líneas en los ajustes USE, hacer lo mismo en CFLAGS puede y nos dará problemas con programas como  <kbd>CMake</kbd>. Asegúrese de que su declaración CFLAGS está en una única línea con el menor número posible de espacios en blanco para evitar estos problemas. Mire la incidencia {{Bug|500034}} a modo de ejemplo.}}

Como puede ver, CXXFLAGS se establece para usar todas las opciones presentes en CFLAGS. Casi seguro que es lo que se desea. Normalmente no necesitará especificar opciones adicionales en CXXFLAGS.

=== Confusiones ===

Aunque CFLAGS y CXXFLAGS pueden ser muy efectivos tomando el código fuente para producir binarios pequeños o rápidos, también pueden deteriorar la función de su código, inflar su tamaño, ralentizar su
ejecución, ¡O incluso causar errores de compilación! 

CFLAGS no es una solución mágica; no hará que su sistema corra más rápido o sus binarios sean más pequeños automáticamente. Añadir más y más opciones en un intento de optimización (o "apretar") su sistema es una receta segura para fracasar. Hay un punto en el cual alcanzará resultados de peor calidad. 

A pesar de las recomendaciones que se pueden encontrar en Internet, unas variables CFLAGS y CXXFLAGS agresivas están más cerca de dañar sus
programas que de hacerles algún bien. Recuerde que la razón principal por la que existen las opciones es porque están diseñadas para usarse en sitios específicos para propósitos específicos. ¡Solo porque una CFLAG particular sea buena para un fragmento de código no significa que esté diseñada para compilar todo lo que quiera instalar en su máquina! 

=== ¿Preparado? ===

Ahora que le hemos advertido de algunos de los riesgos involucrados, echemos un vistazo a algunas optimizaciones sanas y seguras para su computadora. Esto le será útil y los desarrolladores lo agradecerán  la próxima vez que informe de un problema en [https://bugs.gentoo.org/ Bugzilla]. (Los desarrolladores suelen pedir que recompile un paquete con los CFLAGS mínimos para ver si el problema persiste. Recuerde que las opciones agresivas pueden arruinar el código.) 

== Optimización ==

=== Conceptos básicos ===

El objetivo de usar CFLAGS y CXXFLAGS es crear código específico para su sistema; debería funcionar perfectamente y ser ligero y rápido, si es posible. Algunas veces estás condiciones son mutuamente
excluyentes, pero nosotros trabajaremos con combinaciones que sabemos que funcionan bien. Idealmente, las mejores están disponibles para cada
arquitectura de CPU. Mencionaremos más adelante ajustes más agresivos para que se sepa con cuales debe tener cuidado. No discutiremos cada opción listada en el manual de <kbd>gcc</kbd> (hay cientos), pero hablaremos de las básicas, las más comunes. 

{{Note/es|Siempre que no esté seguro de la función que realiza determinada opción, acuda al capítulo correspondiente del [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-manual de opciones Options de GCC]. Si aún continúa atascado, pruebe en Google, o revise las [http://gcc.gnu.org/lists.html listas de correo] de <kbd>gcc</kbd>}}

=== -march ===

La primera y más importante opción es <code>-march</code>. Esta le dice al compilador que código debería producir para su [http://es.wikipedia.org/wiki/Microarquitectura arquitectura] de procesador (o ''arch''); dice que debería producir código para un cierto tipo de CPU. Diferentes CPUs tienen diferentes características, soportan diferentes conjunto de instrucciones y
tienen diferentes formas de ejecutar código. La opción <code>-march</code> indicará al compilador que produzca código específico para su CPU, tomando en cuenta todas sus capacidades, características,
conjuntos de instrucciones, caprichos y demás. 

A pesar que la variable CHOST en {{Path|/etc/portage/make.conf}} especifica la arquitectura general utilizada, <code>-march</code> también se
usa para que sus programas sean optimizados para su procesador específico. Las arquitecturas x86 y x86-64 (entre otras) también deberían utilizar la opción <code>-march</code>. 

¿Qué tipo de CPU tiene? Para averiguarlo, ejecute la siguiente orden: 

{{Cmd|cat /proc/cpuinfo}}

Para obtener más detalles, incluyendo valores <code>march</code> y <code>mtune</code>, utilice:

{{Cmd|<nowiki>gcc -c -Q -march=native --help=target</nowiki>}}

Ahora veamos a <code>-march</code> en acción. Este ejemplo es para un antiguo Pentium III: 

{{CodeBox|filename=/etc/portage/make.conf|title=Pentium III|lang=bash|1=
CFLAGS="-march=pentium3"
CXXFLAGS="${CFLAGS}"
}}

Aquí hay otro para una CPU AMD de 64 bits: 

{{FileBox|filename=/etc/portage/make.conf|title=AMD64|lang=bash|1=
CFLAGS="-march=athlon64"
CXXFLAGS="${CFLAGS}"
}}

Si todavía no está seguro qué tipo de CPU tiene, tal vez quiera usar la opción <code>-march=native</code>. Al usarla, GCC detectará el procesador y automáticamente usará las opciones apropiadas. '''¡Sin embargo, no use esta opción si la intención es ¡compilar paquetes para un CPU diferente!''' 

De manera que, si está compilando paquetes en una computadora, pero piensa ejecutarlos en una computadora diferente (usando, por ejemplo, una computadora rápida para construir paquetes para una máquina más antigua y lenta), entonces ''no'' utilice la opción <code>-march=native</code>. La palabra "native" significa que el código producido podrá ejecutarse ''solamente'' en ese tipo de CPU. Las aplicaciones construidas con <code>-march=native</code> en una CPU AMD Athlon 64 CPU no podrán ejecutarse en una CPU VIA C3 más antigua. 

También están disponibles las opciones <code>-mcpu</code> y <code>-mtune</code>. Cada una de ellas solo se usará cuando no haya otra opción <code>-march</code> disponible. Ciertas arquitecturas de procesador pueden requerir <code>-mtune</code> o incluso de <code>-mcpu</code>. Desgraciadamente, el comportamiento de <kbd>gcc</kbd> no es muy consistente con la manera que cada opción se comporta de una arquitectura a otra. 

En CPUs x86 y x86-64, <code>-mcpu</code> se generará código específico para esa CPU usando todas sus instrucciones disponibles y el ABI correcto; no tendrá compatibilidad hacia atrás para CPUs antiguas o diferentes. Si no necesita ejecutar código en otro sitio que en el sistema que está corriendo Gentoo, continúe con <code>-march</code>. Solo debería
considerar usar <code>-mtune</code> cuando necesite generar código para CPUs antiguas como i386 e i486. <code>-mtune </code> produce un código más genérico que <code>-march</code>; aunque afinará el código para cierta CPU, no tendrá en cuenta los conjuntos de instrucciones disponibles y ABI. No use <code>-mcpu</code> en sistemas x86 o x86-64, ya que es obsoleto para estas arquitecturas. 

Solo las CPUs que no sean x86/x86-64 (como Sparc, Alpha y PowerPC) pueden requerir <code>-mtune </code> o <code>-mcpu</code> en lugar de <code>-march</code>. En estas arquitecturas, <code>-mtune</code>/<code>-mcpu</code> algunas veces se comportará como <code>-march</code> en (x86/x86-64)... pero con un nombre distinto. De nuevo, el comportamiento de <kbd>gcc</kbd> y los nombres de las opciones no es consistente entre arquitecturas, así que asegúrese de revisar el [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options manual] de <kbd>gcc</kbd> para determinar cual de ellas debería utilizar en su sistema. 

{{Note/es|Para más sugerencias de configuraciones de <code>-march</code>/<code>-mtune</code>/<code>-mcpu</code>, por favor lea el capítulo 5 del [http://www.gentoo.org/doc/es/handbook/ manual de instalación de Gentoo] para su arquitectura. También, lea el manual de <kbd>gcc</kbd> listado en la página de [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options opciones específicas por arquitectura] con explicaciones más detalladas sobre las diferencias entre <code>-march</code>, <code>-mcpu</code>, y <code>-mtune</code>.}}

=== -O ===

Lo siguiente es la variable <code>-O</code>. Controla el nivel de optimización de todo el código. Hace que la compilación de código tome algo más de tiempo, y puede usar mucha más memoria, especialmente al incrementar el nivel de optimización. 

Existen siete ajustes para <code>-O</code>: <code>-O0</code>, <code>-O1</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>, <code>-Og</code> y <code>-Ofast</code>. Debe utilizar solo uno de ellos en {{Path|/etc/portage/make.conf}}. 

A excepción de <code>-O0</code>, la configuración de <code>-O</code> activa varias opciones adicionales, así que asegúrese de leer el capítulo del manual de gcc en[http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options opciones de optimización] para aprender qué opciones se activan en cada nivel <code>-O</code>, así como algunas explicaciones sobre lo que hacen. 

Examinemos cada nivel de optimización: 

* <code>-O0</code>: Este nivel (la letra "O" seguida de un cero) desconecta por completo la optimización y es el predeterminado si no se especifica ningún nivel <code>-O</code> en CFLAGS o CXXFLAGS. El código no se optimizará. Esto, normalmente, no es lo que se desea.

* <code>-O1</code>: Este es el nivel de optimización más básico. El compilador intentará producir un código rápido y pequeño sin tomar mucho tiempo de compilación. Es bastante básico, pero conseguirá realizar correctamente el trabajo.

* <code>-O2</code>: Un paso delante de <code>-O1</code>. Este es el nivel ''recomendado'' de optimización, a no ser que tenga necesidades especiales. <code>-O2</code> activará algunas opciones añadidas a las que se activan con <code>-O1</code>. Con <code>-O2</code>, el compilador intentará aumentar el rendimiento del código sin comprometer el tamaño y sin tomar mucho más tiempo de compilación.

* <code>-O3</code>: Este es el nivel más alto de optimización posible. Activa opitimizaciones que son caras en términos de tiempo de compilación y uso de memoria. El hecho de compilar con <code>-O3</code> no garantiza una forma de mejorar el rendimiento y de hecho, en muchos casos puede ralentizar un sistema debido al uso de binarios de gran tamaño y mucho uso de la memoria. También se sabe que <code>-O3</code> puede romper algunos paquetes. Por ello no se recomienda usar <code>-O3</code>.

* <code>-Os</code>: Este nivel optimizará su código para reducir el tamaño. Activa todas las opciones de <code>-O2</code> que no aumenten el tamaño del código generado. Es útil para máquinas con capacidad limitada de disco o con CPUs con poca caché.

* <code>-Og</code>: En GCC 4.8 aparece un nuevo nivel del optimización general: <code>-Og</code>. Trata de solucionar la necesidad de realizar compilaciones más rápidas y obtener una experiencia superior en la depuración a la vez que ofrece un nivel razonable de rendimiento en la ejecución. La experiencia global en el desarrollo debería ser mejor que para el nivel de optimización <code>-O0</code>. Observe que <code>-Og</code> no implica <code>-g</code>, éste simplemente deshabilita optimizaciones que podrían interferir con la depuración.

* <code>-Ofast</code>: Nuevo en GCC 4.7. Consiste en el ajuste <code>-O3</code> más las opciones <code>-ffast-math</code>, <code>-fno-protect-parens</code> y <code>-fstack-arrays</code>. Esta opción rompe el cumplimiento de estándares estrictos y no se recomienda su utilización.

Como se comentó anteriormente, <code>-O2</code> es el nivel de optimización recomendado. Si un paquete muestra errores de compilación, asegúrese de que no está usando <code>-O3</code>. Como otra opción pruebe configurando CFLAGS y CXXFLAGS a un nivel de optimización inferior, como <code>-O1</code> o incluso <code>-O0 -g2 -ggdb</code> (para informar de errores y comprobar posibles problemas).

=== -pipe ===

Una opción común es <code>-pipe</code>. Realmente no tiene efecto sobre el código que se produce, pero hace que el proceso de compilación sea más rápido. Indica al compilador que use tuberías en lugar de archivos temporales durante los diferentes estados de compilación, lo cual usa más memoria. En sistemas con poca memoria, el proceso GCC se podría terminar por el sistema En este caso no use esta opción. 

=== -fomit-frame-pointer ===

Esta es una opción muy común diseñada para reducir el tamaño del código generado. Está activada para todos los niveles de <code>-O</code> (excepto <code>-O0</code>) en arquitecturas donde no interfiera con la depuración (como x86-64), pero puede que haga falta activarla añadiéndola a sus opciones. Aunque el manual de GNU <kbd>gcc</kbd> no
especifica todas las arquitecturas en las que está activada al usar <code>-O</code>, hay que activarla explícitamente en un x86 con <kbd>gcc</kbd> hasta la versión 4.6 o cuando se utilice <code>-Os</code>. Sin embargo, al usar esta opción la depuración se convierta en difícil o incluso imposible. 

En particular, provoca que la localización de problemas en aplicaciones escritas en Java sea mucho más complicada, aunque Java no es el único
código afectado al usar esta opción. Así, aunque esta opción puede ayudar, la depuración será complicada. En particular, las trazas de ejecución (backtraces) no servirán de mucho. Sin embargo, si no planea hacer muchas depuraciones y no tiene añadida ninguna otra CFLAG relacionada con la
depuración como <code>-ggdb</code> (y no está instalando paquetes con la variable USE <code>debug</code>), entonces intente usar <code>-fomit-frame-pointer</code>. 

{{Important/es|''No'' combine <code>-fomit-frame-pointer</code> con la opción de nombre similar <code>-momit- leaf-frame-pointer</code>. No se aconseja la utilización de esta última, ya que <code>-fomit-frame-pointer</code> ya hace el trabajo apropiado. Es más, <code>-momit-leaf-frame-pointer</code> ha demostrado que impacta negativamente en el rendimiento del código.}}

=== -msse, -msse2, -msse3, -mmmx, -m3dnow ===

Estas opciones activan los conjuntos de instrucciones
[http://es.wikipedia.org/wiki/SSE SSE], [http://es.wikipedia.org/wiki/SSE2 SSE2], [http://es.wikipedia.org/wiki/SSSE3 SSE3], [http://es.wikipedia.org/wiki/MMX MMX] y [http://es.wikipedia.org/wiki/3DNow! 3DNow!]
para arquitecturas x86-64. Son útiles principalmente en multimedia, juegos y otras tareas intensivas de computación en punto flotante, aunque también contienen muchos otros realces matemáticos. Estos conjuntos de instrucciones se encuentran en las CPUs más modernas. 

{{Important/es|Asegúrese de verificar si su CPU las soporta ejecutando <code>cat/proc/cpuinfo</code>. La salida incluirá cualquier conjunto de instrucciones adicionales. Observe que '''pni''' es solo otro nombre para SSE3.}}

Normalmente no necesita añadir ninguna de estas opciones a {{Path|/etc/portage/make.conf}} mientras esté usando la <code>-march</code> correcta (por ejemplo, <code>-march= nocona</code> implica <code>-msse3</code>). Algunas excepciones notables son las nuevas CPUs VIA y AMD64 que soportan instrucciones no implicadas por <code>-march</code>
(como SSE3). Para CPUs como estas necesitará habilitar opciones adicionales donde sea apropiado después de verificar la salida de <code>cat /proc/cpuinfo</code>. 

{{Note/es|Debería revisar la [http://gcc.gnu.org/onlinedocs/gcc/i386-and-x86-64-Options.html#i386-and-x86-64-Options lista] de opciones específicas para x86 y x86-64 para ver cuales de estos conjuntos de instrucciones los activa la propia configuración del tipo de CPU. Si aparece una instrucción, entonces no necesita especificarla, se activará al usar la configuración de <code>-march </code> apropiada.}}

== Preguntas frecuentes sobre optimización ==

=== Sin embargo, ¡Consigo mejor rendimiento con -funroll-loops -fomg-optimize! ===

No, solo ''piensa'' que lo hace porque alguien le ha convencido que es mejor utilizar el mayor número de opciones. Las opciones agresivas  solo dañarán sus aplicaciones cuando use un sistema completo. Incluso 
el [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options manual] de <kbd>gcc</kbd> dice que usar <code>-funroll-loops </code> y <code>-funroll-all-loops</code> crea código que ocupa más espacio y que corre más lento. Aunque por alguna razón, estas dos opciones, junto con <code>-ffast-math</code>, <code>-fforce-mem</code>, <code>-fforce-addr</code>, y similares, continúan siendo muy populares entre pardillos que creen saber más que nadie. 

La verdad es que son opciones peligrosamente agresivas. Eche un vistazo a los [https://forums.gentoo.org/ Foros de Gentoo] y a [https://bugs.gentoo.org/ Bugzilla] para
ver que hacen estas variables: ¡Nada bueno! 

No necesita usar estas opciones globalmente en CFLAGS o en CXXFLAGS. Solo dañarán el rendimiento. Puede sonarle como que tiene un sistema avanzado de alto rendimiento, pero no hará más que inflar su código y marcar sus informes de error como INVALID o WONTFIX. 

No necesita opciones peligrosas como estas. '''No las
utilice'''. Quédese con las básicas: <code>-march</code>, <code>-O</code> y <code>-pipe</code>.

=== ¿Qué pasa con los niveles -O mayores que 3 ===

Algunos usuarios alardean de que obtienen mejor rendimiento usando <code>-O4</code>, <code>-O9</code> y similares, pero la realidad es que niveles de <code>-O</code> mayores que 3 no tienen efecto. El compilador puede aceptar CFLAGS como <code>-O4</code>, pero realmente no hace nada con él. Solo realiza la optimización para <code>-O3</code>, nada más. 

¿Necesita más pruebas? Eche un vistazo al [https://gcc.gnu.org/viewcvs/gcc/trunk/gcc/opts.c?view=markup código fuente]: 

{{CodeBox|title=Código fuente -O|lang=bash|1=
if (optimize >= 3)
  {
   flag_inline_functions = 1;
   flag_unswitch_loops = 1;
   flag_gcse_after_reload = 1;
   /* Permitir más operadores virtuales. */
   set_param_value ("max-aliased-vops", 1000);
   set_param_value ("avg-aliased-vops", 3);
  }
}}

Como puede observar, cualquier valor mayor que 3 se trata como <code>-O3</code>.

=== ¿Qué ocurre cuando compilamos fuera de la máquina destino? ===

Algunos lectores se pueden preguntar si el hecho de compilar fuera de la máquina destino usando una CPU estrictamente inferior o una subarquitectura en GCC generará unos resultados de optimización inferiores. La respuesta es simple: '''No'''. Independientemente del hardware en el que realmente se realiza la compilación y el CHOST con el que se construyó GCC, si se utilizan los mismos argumentos <small> (excepto para <code>-march=native</code>)</small> y la misma versión de GCC<small> (aunque la versión menor puede ser distinta)</small>, las optimizaciones resultantes son estrictamente las mismas.

Como ejemplo, si Gentoo se instala en una máquina en el que el CHOST de GCC es ''i686-pc-linux-gnu'', y se utiliza un servidor [[Distcc/es]] en otro equipo en el que el CHOST de GCC es ''i486-linux-gnu'' entonces no hay porqué preocuparse de que los resultados sean menos óptimos ya que la subarquitectura del compilador o el hardware del equipo remoto son estrictamente inferiores. El resultado sería igual de óptimo que una construcción en una máquina nativa siempre que se pasen las mismas opciones a ambos compiladores (y no se defina el argumento <code>-march</code> como <code>native</code>). En este caso en particular se necesita especificar la aquitectura destinotal y como se indica en [[Distcc/es#-march.3Dnative|Distcc y -march=native]].

La única diferencia en el comportamiento entre dos versiones de GCC construidas con diferentes subarquitecturas es el valor implícito por defecto para el parámetro <code>-march</code> que se deriva del CHOST de GCC cuando no se ha indicado uno de forma explícita en la línea de órdenes.

=== ¿Qué pasa con las opciones redundantes? ===

A menudo CFLAGS y CXXFLAGS que se han activado en varios niveles de <code>-O</code> están especificadas de forma redundante en {{Path|/etc/portage/make.conf}}. A veces esto ocurre por
ignorancia, pero también se hace para permitir el filtrado o el reemplazo de opciones. 

El filtrado y el reemplazo de opciones se realiza en muchos ebuilds del árbol Portage. Normalmente se realiza debido a que algunos paquetes no compilan con determinados niveles <code>-O</code> o cuando el código fuente es tan sensible que no se pueden utilizar opciones adicionales. El ebuild bien filtrará algunas opciones o todas las opciones CFLAGS y CXXFLAGS, bien reemplazará <code>-O</code> con un nivel diferente. 

El [http://devmanual.gentoo.org/ebuild-writing/functions/src_compile/build-environment/index.html Manual del Desarrollador de Gentoo] indica dónde y cómo funciona el filtrado y el reemplazo de opciones. 

Es posible evitar el filtrado de <code>-O</code> filtrando mediante el listado redundante de opciones para un cierto nivel, como <code>-O3</code>, haciendo cosas como: 

{{CodeBox|title=Specifying redundant CFLAGS|lang=bash|1=
CFLAGS="-O3 -finline-functions -funswitch-loops"
}}

Sin embargo, '''hacer esto no es algo acertado'''. ¡Las CFLAGS se filtran por alguna razón! Cuando estas opciones se filtran es porque es inseguro construir paquetes con ellos. Claramente, ''no'' es seguro compilar su sistema completo con <code>-O3</code> si alguna de estas opciones está activada para este nivel causará problemas con ciertos paquetes. Por lo tanto, no debería intentar 
"saber más" que los desarrolladores que mantienen estos paquetes. ''Confíe en ellos''. ¡El filtrado y reemplazo de opciones se hace por su bien!. Si un ebuild especifica opciones alternativas, entonces no intente evitarlas. 

No encontrará más que problemas cuando construya un paquete con opciones inaceptables. Cuando informe de sus problemas en Bugzilla, las opciones que usó en {{Path|/etc/portage/make.conf}} serán fácilmente visibles y se le instará a recompilar sin ellas.
¡Protéjase de los problemas de recompilar evitando el uso de opciones redundantes! No asuma automáticamente que sabe más que los desarrolladores.

=== ¿Qué pasa con LDFLAGS? ===

Los desarrolladores de Gentoo ya han configurado LDFLAGS básicas y seguras en los perfiles base, de tal manera que no necesita cambiarlas. 

=== ¿Puedo usar opciones para cada paquete? ===

{{Warning/es|El uso de opciones específicas de paquetes complica la depuración y el soporte. Asegúrese mencionarlo en los informes de fallos si está usando esta característica y los cambios que haya realizado.}}

Puede encontrarse información acerca de como utilizar las variables de entorno por paquete (incluyendo CFLAGS) en el [http://www.gentoo.org//doc/en/handbook/handbook-amd64.xml?part=3&chap=6#doc_chap2 Manual de Gentoo, "Variables de entorno por paquete"].

== Recursos ==

Los siguientes recursos pueden ser de ayuda para comprender la optimización: 

* La [http://gcc.gnu.org/onlinedocs/ documentación en línea de GCC] 

* El capítulo 5 de los [http://www.gentoo.org/doc/es/handbook/ manuales de instalación de Gentoo] 

* <kbd>man make.conf</kbd>

* [https://es.wikipedia.org/ Wikipedia]

* Los [https://forums.gentoo.org/ Foros de Gentoo]

{{Migrated|originalauthors=nightmorph}}
