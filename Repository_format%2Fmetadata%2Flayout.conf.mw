The {{Path|metadata/layout.conf}} file is a file describing global properties of a repository.

== File format ==

* The file consists of a number of key-value pairs, one pair per line, with the two separated by <code>=</code> (equal sign).
* Comment lines start with <code>#</code>.

{{FileBox|filename=metadata/layout.conf|title=An example showing the format of the file|1=
key1 = value1
# comment
key2 = value2
}}

== Possible keys ==

This page contains only some of the possible keys and values in {{Path|layout.conf}}. For a thorough listing, refer to the Portage manual:

{{Cmd|man 5 portage}}

=== repo-name ===

This setting specifies the name of the repository. It takes precedence over an existing value in [[Repository_format/profiles/repo_name|profiles/repo_name]]:

{{FileBox|filename=metadata/layout.conf|title=Specifies repository name|1=
repo-name = foo-overlay
}}

=== masters ===

The ''masters'' key specifies a list of master repositories for this particular repository. Whenever installing an ebuild from the particular repository, the package manager can use eclasses from one more more master repositories.

The most common example is a repository (overlay) which provides additional packages for Gentoo. Such a package uses eclasses from the ''gentoo'' ebuild repository:

{{FileBox|filename=metadata/layout.conf|title=An example for repository relying on ''gentoo'' ebuild repository eclasses|1=
masters = gentoo
}}

A particular repository may have more than a single ''masters'' entry. These are not inherited over repositories. In the following example eclasses from gentoo take precedence over eclasses in python, that share the same name:

{{FileBox|filename=metadata/layout.conf|title=An example for repository relying on two other repositories|1=
masters = python gentoo
}}

Finally, a stand-alone repository like ''gentoo'' should provide an empty masters list. This means that all eclasses used by packages in that repository must be found in that repository:

{{FileBox|filename=metadata/layout.conf|title=An example for a stand-alone repository|1=
masters =
}}

=== eapis-banned ===

This setting bans EAPIs (repoman will fail):

{{FileBox|filename=metadata/layout.conf|title=Bans EAPI 0 and EAPI 1|lang=ini|1=
eapis-banned = 0 1
}}

=== eapis-deprecated ===

This setting marks EAPIs as deprecated (repoman will prompt a warning):

{{FileBox|filename=metadata/layout.conf|title=Marks EAPI 2 and EAPI 3 as deprecated|1=
eapis-deprecated = 2 3 
}}

=== sign-commits ===

If enabled, the commits made in this repository will be signed:

{{FileBox|filename=metadata/layout.conf|title=Enabling commit signing|1=
sign-commits = true
}}

This applies only to git repositories. It requires git 1.7.9 or newer.

The key used to sign commits can be set through:

{{Cmd|git config user.signingkey ''<keyid>''}}

=== sign-manifests ===

''Enabled by default.'' If enabled, the manifest files will be [[../../package/Manifest#Manifest_signing|signed]] whenever committing to this repository from a GPG-enabled client:

{{FileBox|filename=metadata/layout.conf|title=Disabling Manifest signing|1=
sign-manifests = false
}}

In Portage, the manifest signing is enabled by adding <code>sign</code> to the <var>[[FEATURES]]</var> variable in {{Path|/etc/portage/make.conf}}.

=== thin-manifests ===

''Disabled by default''. If enabled, [[../../package/Manifest#Thin_Manifest|thin manifests]] will be used inside the repository instead of the regular manifests:

{{FileBox|filename=metadata/layout.conf|title=Enabling thin Manifests|1=
thin-manifests = true
}}

=== use-manifests ===

Enforces a correct manifest for each package:

{{FileBox|filename=metadata/layout.conf|title=Enforce correct manifests|1=
use-manifests = strict
}}

[[Category:Portage]]
