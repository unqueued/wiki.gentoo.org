[http://www.scons.org SCons] is an alternate build system often used by science projects. This small guide gives a developer PoV on SCons.

== Using SCons in ebuilds ==

{{Code|An example ebuild using SCons|<pre>EAPI=4

inherit scons-utils toolchain-funcs

# ...

src_compile() {
	escons CC="$(tc-getCC)" FOO=1
}

src_install() {
	escons FOO=1 INSTALL_ROOT="${D}" install
}</pre>
}}

The most important part here is inheriting the ''scons-utils'' eclass and using ''escons'' function. The eclass inherit is going to add SCons into ''DEPEND'', and ''escons'' invokes SCons with ''${MAKEOPTS}'' stripped down to ones suitable for SCons.

You should note the following, however:
# SConstruct files are always highly custom and the calling scheme above is just an example. Although using ''CC'' as variable is pretty common, the installation root may appear as ''DESTDIR'' or do not appear at all -- some packages will require hacking ''PREFIX'' or even patching;
# Although aliasing ''install'' to the install destination is very common, it's no rule either. Sometimes you may need to use ''escons "${D}"'' or ''escons /''. Or install the package yourself if the author didn't provide any kind of installation rules;
# SCons has a tendency to reconfigure itself on each call. That's why we usually don't use ''src_configure()'' and have to copy most of the args from ''src_compile()'' to ''src_install()'' -- otherwise SCons will re-configure and rebuild the package.
