<languages />

{{Metadata|abstract=Puppet, Ruby ile yazılmış bir konfigürasyon yönetimi sistemidir. Sistemlerinize uygulama yükleme/güncelleme işlemi sırasında yardımcı olur.}}

{{InfoBox stack
|{{InfoBox homepage|https://puppetlabs.com/puppet/puppet-open-source|header=true}}
|{{InfoBox wikipedia|Puppet (software)}}
|{{InfoBox ohloh}}
}}

'''Puppet''' [[Ruby]] ile yazılmış bir konfigürasyon yönetimi sistemidir. Sistemlerinize uygulama yükleme/güncelleme işlemi sırasında yardımcı olur.

== Installation ==

Puppet is provided by the {{Package|app-admin/puppet}} package.

Currently, there is no distinction between server and client, so the basic installation procedure is the same for both.

=== Emerge ===

First, install Puppet via {{c|emerge}}:

{{Emerge|app-admin/puppet}}

== Configuration and setup ==

Puppet is mainly configured through {{Path|/etc/puppet/puppet.conf}} in an INI-style format. Comments are marked with a hash sign (<code>#</code>).

The configuration file is separated into several sections, or blocks:

* <code>[main]</code> contains settings that act as a default for all parts of Puppet, unless overridden by settings in any of the following sections:
** <code>[master]</code> is used for settings applying to the Puppetmaster ({{c|puppet master}}), or CA tool ({{c|puppet cert}})
** <code>[agent]</code> is used for settings applying to the Puppet agent ({{c|puppet agent}})

Daha derin şekilde bilgiyi (diğer olası yapılandırma bölümleri ile birlikte) [http://docs.puppetlabs.com/guides/configuring.html resmi Puppet dökümanlarında] bulabilirsiniz. 
Ayrıca [http://docs.puppetlabs.com/references/stable/configuration.html tüm geçerli değişkenleri] de inceleyebilirsiniz. Tabi ki bazıları yalnızca sunucu veya yalnızca istemci için işe yaramakta.

=== Sunucu (Puppetmaster) Yapılandırması ===

Ebuild'den kurulumda öntanımlı olarak gelen {{Path|puppet.conf}} dosyası olduğu gibi kullanılabilir. Puppet 2.7.3'de sunucu ile ilgili bölümler şöyle görülmekte:

{{FileBox|filename=/etc/puppet/puppet.conf|title=Öntanımlı sunucu ayarları|lang=ini|1=
[main]
    # The Puppet log directory. (Puppet log dizini)
    # The default value is '$vardir/log'. (öntanımlı değer '$vardir/log')
    logdir = /var/log/puppet
  
# Where Puppet PID files are kept. (Puppet PID dosyasının yeri)
    # The default value is '$vardir/run'. (öntanımlı değer '$vardir/run')
    rundir = /var/run/puppet
  
# Where SSL certificates are kept. (SSL sertifikalarının saklandığı yer)
    # The default value is '$confdir/ssl'. (öntanımlı değer '$vardir/ssl')
    ssldir = $vardir/ssl
}}

==== Setting up the file server ====

To be able to send files to the clients, the file server has to be configured. This is done in {{Path|/etc/puppet/fileserver.conf}}. By default, there are no files being served.

{{FileBox|filename=/etc/puppet/fileserver.conf|title=<tt>files</tt> paylaşımının ayarlanması|lang=ini|1=
[files]
    path /var/lib/puppet/files
    allow 192.168.0.0/24
}}

The snippet above sets up a share called <tt>files</tt> (remember this identifier, as it will need to be referenced later), looking for files in {{Path|/var/lib/puppet/files}} and only available for hosts with an IP from the 192.168.0.0/24 network. Any of the IP addresses, CIDR notation, and host names (including wildcards like <code>*.domain.invalid</code>) can be used here. The <tt>deny</tt> command can be used to explicitly deny access to certain hosts or IP ranges.

==== Starting the puppetmaster daemon ====

{{Note|It is recommended that the Puppetmaster is reachable from the clients using the host name <code>puppet</code>. However, the name can be overridden, which of course causes configuration effort.}}

{{Important|At this point, the host name as seen from the clients should be the same as the output of {{c|hostname -f}}. To achieve this, the {{Path|/etc/hosts}} file might have to be adjusted, or a new certificate can be created manually as [[#Manually generating certificates|explained below]].}}

With the basic configuration as well as an initial file server configuration, we can start the Puppetmaster daemon using its OpenRC init script:

{{RootCmd|/etc/init.d/puppetmaster start}}

During the first start, Puppet generates an SSL certificate for the Puppetmaster host and places it into the directory configured through the <var>ssldir</var> variable, as configured above.

It listens on Port <code>8140/TCP</code>, make sure that there are no firewall rules obstructing access from the clients.

==== A simple manifest ====

Manifests, in Puppet's terminology, are the files in which the client configuration is specified.
The documentation contains a [http://docs.puppetlabs.com/guides/language_guide.html comprehensive guide] about the manifest markup language.

Basit bir örnek olarak istemcide bir ''günün mesajı'' (motd) dosyası oluşturalım. Puppetmaster üzerinde önceden tanımladığımız <tt>files</tt> paylaşımının dizini içinde bir dosya oluşturalım:

{{FileBox|filename=/var/lib/puppet/files/motd|title=Sunucudaki MOTD dosyası|1=
Puppet ile yönetilen bu cihaza hoşgeldiniz!
}}

Then, we have to create the main manifest file in the {{Path|manifests}} directory. It is called <tt>site.pp</tt>:

{{FileBox|filename=/etc/puppet/manifests/site.pp|title=Sunucudaki ana manifesto dosyası|lang=ruby|1=
node default {
  file { '/etc/motd':
    source => 'puppet://puppet/files/motd'
  }
}
}}

The <tt>default</tt> ''node'' (the name for a client) definition is used in case there is no specific <tt>node</tt> statement for the host.
We use a <tt>file</tt> resource and want the {{Path|/etc/motd}} file on our clients to contain the same thing as the <tt>motd</tt> file in the <tt>files</tt> share on the host <code>puppet</code>. If the puppetmaster is only reachable using another host name, adapt the <tt>source</tt> URI accordingly.

=== Client configuration ===

{{Important|The client '''must''' have the '''same major and minor version''' as the Puppetmaster. Using a 2.7.1 Puppetmaster with 2.7.2 clients is fine, but using 2.6 for the server and 2.7 for clients can cause unexpected issues at any time.}}

{{Note|If the puppetmaster is not reachable via <code>puppet</code>, set <code>server{{=}}&lt;the hostname&gt;</code> to the actual host name in {{Path|/etc/puppet/puppet.conf}} in the <code>[main]</code> section.}}

During the first execution of the Puppet agent, wait for the certificate to be signed by the puppetmaster. To request a certificate, and execute the first configuration run, execute:

{{RootCmd|puppet agent --test --waitforcert 60|prompt=root@client #
|output=<pre>
info: Creating a new certificate request for client
info: Creating a new SSL key at /var/lib/puppet/ssl/private_keys/client.pem
notice: Did not receive certificate
</pre>}}

Before the client can connect, authorize the certificate request on the server. The client should appear in the list of nodes requesting a certificate:

{{RootCmd|puppet cert --list
|prompt=root@server #
|output=client}}

Now, we grant the request:

{{RootCmd|puppet cert --sign client
|prompt=root@server #}}

The client will check every 60 seconds whether its certificate has already been issued. After that, it continues with the first configuration run:

{{GenericCmd|<pre>
info: Caching catalog for client
info: Applying configuration version '1317317379'
notice: /Stage[main]//Node[default]/File[/etc/motd]/ensure: defined content as '{md5}30ed97991ad6f591b9995ad749b20b00'
notice: Finished catalog run in 0.05 seconds
</pre>}}

When this message pops up, all went well. Now check the contents of the {{Path|/etc/motd}} file on the client:

{{Cmd|cat /etc/motd
|prompt=user@client $
|output=Welcome to this Puppet-managed machine!}}

==== OpenRC ====

Start the puppet agent as a deamon and have it launch on boot:

{{RootCmd|/etc/init.d/puppet start
|rc-update add puppet default
|prompt=root@client #}}

==== Systemd ====

Conversely, when running systemd:

{{RootCmd|systemctl start puppet
|systemctl enable puppet
|prompt=root@client #}}

== Other topics ==

=== Manually generating certificates ===

To manually generate a certificate, use the {{c|puppet cert}} utility.
It will place all generated certificates into the <var>ssldir</var> defined directory as set in the puppet configuration and will sign them with the key of the local Puppet Certificate Authority (CA).

An easy case is the generation of a certificate with '''only one Common Name:'''

{{RootCmd|puppet cert --generate host1}}

If the certificate has to be valid for '''multiple host names''', use the <code>--certdnsnames</code> parameter and separate the additional host names with a colon:

{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

Bu şekilde üretilen bir sertifika belirtilen üç alan adı için de geçerli olacaktır.

=== Refreshing agent certificates ===

This is the process used to manually refresh agent certificates.

# (on master) {{RootCmd|puppet cert clean ${AGENT_HOSTNAME} }}
# (on agent) {{RootCmd|rm /etc/puppet/ssl/{certs,certificate_requests}/${AGENT_HOSTNAME}.pem}}
#* This will cause the Puppet agent to regenerate the CSR with the existing SSL key.
#* The old certificate is no longer valid, as it was nuked on the master.
#* When one of the above steps is forgotten, an error will pop up about the certificate mis-matching between agent and master.
#* To replace the SSL keys (optional): {{RootCmd|rm /etc/puppet/ssl/{public,private}_keys/${AGENT_HOSTNAME}.pem}}
# (on agent) {{RootCmd|puppet agent --onetime --no-daemonize --verbose --test --waitforcert 30}}
#* When using auto-signing, no further steps are needed.
# (on master) {{RootCmd|puppet cert list ${AGENT_HOSTNAME} }}
# Verify that the fingerprint listed in the previous two outputs matches
# (on master) {{RootCmd|puppet cert sign ${AGENT_HOSTNAME} }}
# (on agent) {{RootCmd|puppet agent --onetime --no-daemonize --verbose --test}}

=== Managing slots with puppet ===

While the default portage provider in puppet does support slots there are puppet modules available which also have this functionality.

For instance, with {{Package|app-admin/puppet}} version 4.6.0 and higher, and/or {{Package|app-admin/puppet-agent}}, the slot functionality is supported like to:

{{CodeBox|title=Defining an absent slotted package|1=
    package { 'dev-lang/python:3.3': ensure => absent }
}}

Additional modules are:
* [https://github.com/gentoo/puppet-portage puppet-portage]
* [https://github.com/whatbox/PortageGT PortageGT]

== See also ==

* [[Puppet module for Gentoo]]

== External resources ==

* [http://puppetlabs.com/ Upstream website]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]


[[Category:Server]]
[[Category:Security]]
