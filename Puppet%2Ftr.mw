<languages />

{{Metadata|abstract=Puppet is a configuration management system written in Ruby. It can be used for automating machine deployments.}}

{{InfoBox stack
|{{InfoBox wikipedia|Puppet (software)|header=true}}
|{{InfoBox ohloh}}
}}

'''Puppet''' [[Ruby]] ile yazılmış bir konfigürasyon yönetimi sistemidir. Sistemlerinize uygulama yükleme/güncelleme işlemi sırasında yardımcı olur.

== Kurulum ==
Puppet Gentoo'da {{Package|app-admin/puppet}} paketi ile sunulmaktadır.
Şu anda istemci ve sunucu paketleri arasında bir ayrım bulunmadığından her ikisinde de kurulum aynı şekildedir.

Öncelikle, Puppet'i <tt>emerge</tt> ile kuralım:
{{Emerge|puppet}}

== Yapılandırma ==
Puppet genellikle {{Path|/etc/puppet/puppet.conf}} dosyasından yapılandırılabilir ve yorum olan satırlar diyez (<tt>#</tt>) ile işaretlenmiş durumda kurulacaktır.
Ayar dosyası birçok bölümden oluşmaktadır:

* <tt>[main]</tt> bölümü Puppet'in aşağıdaki bölümlerde özel olarak belirtilmemiş yapılandırma ayarları yok ise geçerli olacak genel ayarları içerir:
** <tt>[master]</tt> bölümündeki ayarlar Puppetmaster (<tt>puppet yönetim birimi</tt>), veya CA aracı (<tt>puppet sertifika yönetimi</tt>) içindir
** <tt>[agent]</tt> bölümündeki ayarlar Puppet agent (<tt>puppet istemcisi</tt>) yönetimi içindir

Daha derin şekilde bilgiyi (diğer olası yapılandırma bölümleri ile birlikte) [http://docs.puppetlabs.com/guides/configuring.html resmi Puppet dökümanlarında] bulabilirsiniz. 
Ayrıca [http://docs.puppetlabs.com/references/stable/configuration.html tüm geçerli değişkenleri] de inceleyebilirsiniz. Tabi ki bazıları yalnızca sunucu veya yalnızca istemci için işe yaramakta.

=== Sunucu (Puppetmaster) Yapılandırması ===

Ebuild'den kurulumda öntanımlı olarak gelen {{Path|puppet.conf}} dosyası olduğu gibi kullanılabilir. Puppet 2.7.3'de sunucu ile ilgili bölümler şöyle görülmekte:

{{File|/etc/puppet/puppet.conf|Sunucu için öntanımlı ayarlar|<pre>
[main]
    # The Puppet log directory. (Puppet log dizini)
    # The default value is '$vardir/log'. (öntanımlı değer '$vardir/log')
    logdir = /var/log/puppet
  
# Where Puppet PID files are kept. (Puppet PID dosyasının yeri)
    # The default value is '$vardir/run'. (öntanımlı değer '$vardir/run')
    rundir = /var/run/puppet
  
# Where SSL certificates are kept. (SSL sertifikalarının saklandığı yer)
    # The default value is '$confdir/ssl'. (öntanımlı değer '$vardir/ssl')
    ssldir = $vardir/ssl
</pre>}}

==== Dosya sunucusunun ayarlanması ====
Dosyaları istemcilere gönderebilmek için dosya sunucusunu yapılandırmalıyız. Bu iş için yapıalndırma dosyası {{Path|/etc/puppet/fileserver.conf}}'dur. Öntanımlı olarak herhangi bir dosya servis edilmez.

{{File|/etc/puppet/fileserver.conf|Paylaşılacak dosyaların ayarlanması|<pre>
[files]
    path /var/lib/puppet/files
    allow 192.168.0.0/24
</pre>}}

Yukardaki ayar parçası {{Path|/var/lib/puppet/files}} dizininden dosyalarını alan ve yalnızca 192.168.0.0/24 ağına servis sunan <tt>files</tt> isminde (hatırlatma olarak atanmış bir isim) bir paylaşım ayarlamakta. Özel olarak bir adres/blok engellemek istiyorsanız <tt>deny</tt> komutunu kullanabilirsiniz.

==== Puppetmaster Servisini Başlatmak ====
{{Note|İstemcilerin Puppetmaster'a hostname olarak <tt>puppet</tt> kullanarak erişebilmesi tavsiye edilmektedir. Dilerseniz bu davranışı değiştirebilirsiniz ancak yapılandırma dosyalarında biraz değişiklik yapmanız gerekir.}}

{{Important|Bu noktada istemciler tarafından görülen sunucu adının <tt>hostname -f</tt> komutunun çıktısı ile aynı olması gerekmektedir. Bunun için {{Path|/etc/hosts}} dosyasını düzenlemeniz veya elle sertifika üretmeniz gerekebilir (aşağıda anlatılmakta).}}

Puppetmaster'ı başlatmak için kendi init scriptini kullanabiliriz:
{{RootCmd|/etc/init.d/puppetmaster start}}

İlk çalışması sırasında Puppet, Puppetmaster sunucusu için bir SSL sertifikası üretip <tt>ssldir</tt> ile tanımladığımız dizine yerleştirecektir.

8140/TCP portundan dinleme yapan servisin bu porttan istemciler ile iletişime geçmesini engelleyecek bir güvenlik duvarı/ağ filtresi olmadığına emin olun.

==== Örnek bir manifesto ====
Manifestolar Puppet'de istemci cihazlar için yapılandırma ayarlarıdır.
Manifestoların yazım formatı ile ilgili bilgi için [http://docs.puppetlabs.com/guides/language_guide.html detaylı belgeyi] inceleyebilirsiniz.

Basit bir örnek olarak istemcide bir ''günün mesajı'' (motd) dosyası oluşturalım. Puppetmaster üzerinde önceden tanımladığımız <tt>files</tt> paylaşımının dizini içinde bir dosya oluşturalım:

{{File|/var/lib/puppet/files/motd|Sunucudaki MOTD dosyası|<pre>
Puppet ile yönetilen bu cihaza hoşgeldiniz!
</pre>}}

Ardından <tt>manifests</tt> dizininde ana manifestoyu oluşturmalıyız. Dosyanın adı <tt>site.pp</tt>:

{{File|/etc/puppet/manifests/site.pp|Sunucudaki ana manifesto dosyası|<pre>
node default {
  file { '/etc/motd':
    source => 'puppet://puppet/files/motd'
  }
}
</pre>}}

<tt>default</tt> tanımı, eğer host için farklı bir <tt>node</tt> tanımı yapılarak özel bir yapılandırma sağlanmadığında tüm ''node''lara (istemciler için kullanılan isimdir) uygulanır.
<tt>file</tt> (dosya) kaynağını kullanarak <tt>puppet</tt> cihazında <tt>files</tt> paylaşımındaki <tt>motd</tt> dosyasının istemcinin {{Path|/etc/motd}} konumunda bulunmasını istedik. Eğer sunucu (puppetmaster) farklı bir isimle anılıyorsa,  <tt>source</tt> adresini buna göre ayarlamanız gerekmektedir.

=== İstemci Yapılandırması ===
{{Important|İstemciler Puppetmaster ile '''yakın sürümler''' kullanmak '''zorundadır'''. Puppet'in 2.7.1 sürümünü kullanan bir Puppetmaster ile 2.7.2 sürümünü kullanan istemciler problemsiz çalışacaktır. Ancak 2.6 kullanan bir sunucu ile 2.7 kullanan istemciler muhtemelen problem yaşayacaktır.}}

{{Note|Eğer puppetmaster <tt>puppet</tt> adresiyle erişilemiyorsa,  {{Path|/etc/puppet/puppet.conf}} dosyasındaki <tt>[main]</tt> bölümünde bulunan <tt>server{{=}}</tt> değişkenini gerçek hostname ile değiştirin.}}

Puppet agent'in (istemci) ilk çalıştırılması sırasında, puppetmaster tarafından cihazın sertifikasının imzalanmasını beklemelisiniz. Sertifika talep etmek ve ilk yapılandırmanızı tamamlamak için aşağıdaki kodu çalıştırın:

{{RootCmd|puppet agent --test --waitforcert 60|prompt=root@client #
|output=<pre>
info: Creating a new certificate request for client
info: Creating a new SSL key at /var/lib/puppet/ssl/private_keys/client.pem
notice: Did not receive certificate
</pre>}}

İstemcinin bağlanabilmesi için, öncelikle sunucuda sertifikayı onaylamanız gerekmekte. İstemciden talep gönderdikten sonra sunucuda sertifika bekleyen node'ların listesinde istemcimiz görülüyor olmalı:
{{RootCmd|puppet cert --list
|prompt=root@server #
|output=client}}

İstemci (client) için sertifikayı imzalayalım:
{{RootCmd|puppet cert --sign client
|prompt=root@server #}}

İstemci sertifikanın onaylanıp onaylanmadığını her 60 saniyede bir kontrol edecektir. Onay alınmasının ardından yapılandırma devam eder:
{{GenericCmd|<pre>
info: Caching catalog for client
info: Applying configuration version '1317317379'
notice: /Stage[main]//Node[default]/File[/etc/motd]/ensure: defined content as '{md5}30ed97991ad6f591b9995ad749b20b00'
notice: Finished catalog run in 0.05 seconds
</pre>}}

Bu mesajı gördüyseniz, herşey yolunda demektir. Artık istemcideki {{Path|/etc/motd}} dosyasını inceleyebilirsiniz:
{{Cmd|cat /etc/motd
|prompt=user@client $
|output=Puppet ile yönetilen bu cihaza hoşgeldiniz!}}

Artık puppet agent'ı servis olarak başlatabilir ve açılışta çalışması için ayarlayabilirsiniz:
{{RootCmd|/etc/init.d/puppet start
|rc-update add puppet default
|prompt=root@client #}}

== Diğer Başlıklar ==

=== Elle Sertifika Üretimi ===
Sertifika üretmek için <tt>puppet cert</tt> aracını kullanabilirsiniz.
Üretilen sertifikaları yerel Puppet Certificate Authority (CA - Puppet Sertifika Otoritesi) kimliğiniz ile imzalayarak puppet yapılandırmasında tanımladığımız <tt>ssldir</tt> dizinine kaydedecektir.

Basit bir örnek olarak '''yalnızca bir Common Name: (alan adı)''' kullanarak sertifika üretmek için:
{{RootCmd|puppet cert --generate host1}}

Eğer '''birden fazla hostname''' için geçerli olacak bir sertifika gerekliyse <tt>--certdnsnames</tt> parametresini kullanıp, farklı alan adlarını iki nokta ile ayırın:
{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

Bu şekilde üretilen bir sertifika belirtilen üç alan adı için de geçerli olacaktır.

=== Puppet ile slotları yönetmek ===
Puppet ile gelen öntanımlı portage besleyicisi paket slotlarını desteklemese de, [https://github.com/whatbox/PortageGT 3. parti bir eklenti] ile puppet'e bu özelliği ekleyebilirsiniz.

== Harici kaynaklar ==
* [http://puppetlabs.com/ Proje sitesi]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]


[[Category:Server]]
[[Category:Security]]
