<languages />

{{InfoBox stack
|{{InfoBox wikipedia|Puppet (software)|header=true}}
|{{InfoBox ohloh}}
}}

'''Puppet''' [[Ruby]] ile yazılmış bir konfigürasyon yönetimi sistemidir. Sistemlerinize uygulama yükleme/güncelleme işlemi sırasında yardımcı olur.

== Kurulum ==
Puppet Gentoo'da {{Package|app-admin/puppet}} paketi ile sunulmaktadır.
Şu anda istemci ve sunucu paketleri arasında bir ayrım bulunmadığından her ikisinde de kurulum aynı şekildedir.

Öncelikle, Puppet'i <tt>emerge</tt> ile kuralım:
{{Emerge|puppet}}

== Yapılandırma ==
Puppet genellikle {{Path|/etc/puppet/puppet.conf}} dosyasından yapılandırılabilir ve yorum olan satırlar diyez (<tt>#</tt>) ile işaretlenmiş durumda kurulacaktır.
Ayar dosyası birçok bölümden oluşmaktadır:

* <tt>[main]</tt> bölümü Puppet'in aşağıdaki bölümlerde özel olarak belirtilmemiş yapılandırma ayarları yok ise geçerli olacak genel ayarları içerir:
** <tt>[master]</tt> bölümündeki ayarlar Puppetmaster (<tt>puppet yönetim birimi</tt>), veya CA aracı (<tt>puppet sertifika yönetimi</tt>) içindir
** <tt>[agent]</tt> bölümündeki ayarlar Puppet agent (<tt>puppet istemcisi</tt>) yönetimi içindir

Daha derin şekilde bilgiyi (diğer olası yapılandırma bölümleri ile birlikte) [http://docs.puppetlabs.com/guides/configuring.html resmi Puppet dökümanlarında] bulabilirsiniz. 
Ayrıca [http://docs.puppetlabs.com/references/stable/configuration.html tüm geçerli değişkenleri] de inceleyebilirsiniz. Tabi ki bazıları yalnızca sunucu veya yalnızca istemci için işe yaramakta.

=== Sunucu (Puppetmaster) Yapılandırması ===

Ebuild'den kurulumda öntanımlı olarak gelen {{Path|puppet.conf}} dosyası olduğu gibi kullanılabilir. Puppet 2.7.3'de sunucu ile ilgili bölümler şöyle görülmekte:

{{File|/etc/puppet/puppet.conf|Sunucu için öntanımlı ayarlar|<pre>
[main]
    # The Puppet log directory. (Puppet log dizini)
    # The default value is '$vardir/log'. (öntanımlı değer '$vardir/log')
    logdir = /var/log/puppet
  
# Where Puppet PID files are kept. (Puppet PID dosyasının yeri)
    # The default value is '$vardir/run'. (öntanımlı değer '$vardir/run')
    rundir = /var/run/puppet
  
# Where SSL certificates are kept. (SSL sertifikalarının saklandığı yer)
    # The default value is '$confdir/ssl'. (öntanımlı değer '$vardir/ssl')
    ssldir = $vardir/ssl
</pre>}}

==== Dosya sunucusunun ayarlanması ====
Dosyaları istemcilere gönderebilmek için dosya sunucusunu yapılandırmalıyız. Bu iş için yapıalndırma dosyası {{Path|/etc/puppet/fileserver.conf}}'dur. Öntanımlı olarak herhangi bir dosya servis edilmez.

{{File|/etc/puppet/fileserver.conf|Paylaşılacak dosyaların ayarlanması|<pre>
[files]
    path /var/lib/puppet/files
    allow 192.168.0.0/24
</pre>}}

Yukardaki ayar parçası {{Path|/var/lib/puppet/files}} dizininden dosyalarını alan ve yalnızca 192.168.0.0/24 ağına servis sunan <tt>files</tt> isminde (hatırlatma olarak atanmış bir isim) bir paylaşım ayarlamakta. Özel olarak bir adres/blok engellemek istiyorsanız <tt>deny</tt> komutunu kullanabilirsiniz.

==== Puppetmaster Servisini Başlatmak ====
{{Note|İstemcilerin Puppetmaster'a hostname olarak <tt>puppet</tt> kullanarak erişebilmesi tavsiye edilmektedir. Dilerseniz bu davranışı değiştirebilirsiniz ancak yapılandırma dosyalarında biraz değişiklik yapmanız gerekir.}}

{{Important|Bu noktada istemciler tarafından görülen sunucu adının <tt>hostname -f</tt> komutunun çıktısı ile aynı olması gerekmektedir. Bunun için {{Path|/etc/hosts}} dosyasını düzenlemeniz veya elle sertifika üretmeniz gerekebilir (aşağıda anlatılmakta).}}

Puppetmaster'ı başlatmak için kendi init scriptini kullanabiliriz:
{{RootCmd|/etc/init.d/puppetmaster start}}

İlk çalışması sırasında Puppet, Puppetmaster sunucusu için bir SSL sertifikası üretip <tt>ssldir</tt> ile tanımladığımız dizine yerleştirecektir.

8140/TCP portundan dinleme yapan servisin bu porttan istemciler ile iletişime geçmesini engelleyecek bir güvenlik duvarı/ağ filtresi olmadığına emin olun.

==== Örnek bir manifesto ====
Manifestolar Puppet'de istemci cihazlar için yapılandırma ayarlarıdır.
Manifestoların yazım formatı ile ilgili bilgi için [http://docs.puppetlabs.com/guides/language_guide.html detaylı belgeyi] inceleyebilirsiniz.

Basit bir örnek olarak istemcide bir ''günün mesajı'' (motd) dosyası oluşturalım. Puppetmaster üzerinde önceden tanımladığımız <tt>files</tt> paylaşımının dizini içinde bir dosya oluşturalım:

{{File|/var/lib/puppet/files/motd|Sunucudaki MOTD dosyası|<pre>
Puppet ile yönetilen bu cihaza hoşgeldiniz!
</pre>}}

Ardından <tt>manifests</tt> dizininde ana manifestoyu oluşturmalıyız. Dosyanın adı <tt>site.pp</tt>:

{{File|/etc/puppet/manifests/site.pp|Main manifest on the server|<pre>
node default {
  file { '/etc/motd':
    source => 'puppet://puppet/files/motd'
  }
}
</pre>}}

The <tt>default</tt> ''node'' (the name for a client) definition is used in case there is no specific <tt>node</tt> statement for the host.
We use a <tt>file</tt> resource and want the {{Path|/etc/motd}} file on our clients to contain the same thing as the <tt>motd</tt> file in the <tt>files</tt> share on the host <tt>puppet</tt>. If your puppetmaster is reachable only using another host name, you have to adapt the <tt>source</tt> URI accordingly.

=== Client Configuration ===
{{Important|The client '''must''' have the '''same major and minor version''' as the Puppetmaster. Using a 2.7.1 Puppetmaster with 2.7.2 clients is fine, but using 2.6 for the server and 2.7 for clients can cause unexpected issues at any time.}}

{{Note|If your puppetmaster is not reachable via <tt>puppet</tt>, set <tt>server{{=}}&lt;your hostname&gt;</tt> to the actual host name in {{Path|/etc/puppet/puppet.conf}} in the <tt>[main]</tt> section.}}

During the first execution of the Puppet agent, you have to wait for your certificate to be signed by the puppetmaster. To request a certificate, and run your first configuration run, execute:

{{RootCmd|puppet agent --test --waitforcert 60|prompt=root@client #
|output=<pre>
info: Creating a new certificate request for client
info: Creating a new SSL key at /var/lib/puppet/ssl/private_keys/client.pem
notice: Did not receive certificate
</pre>}}

Before the client can connect, you have to authorize the certificate request on the server. Our client should appear in the list of nodes requesting a certificate:
{{RootCmd|puppet cert --list
|prompt=root@server #
|output=client}}

Now, we grant the request:
{{RootCmd|puppet cert --sign client
|prompt=root@server #}}

The client will check every 60 seconds whether its certificate has already been issued. After that, it continues with the first configuration run:
{{GenericCmd|<pre>
info: Caching catalog for client
info: Applying configuration version '1317317379'
notice: /Stage[main]//Node[default]/File[/etc/motd]/ensure: defined content as '{md5}30ed97991ad6f591b9995ad749b20b00'
notice: Finished catalog run in 0.05 seconds
</pre>}}

When you're seeing this message, all went well. You can now check the contents of your {{Path|/etc/motd}} file on the client:
{{Cmd|cat /etc/motd
|prompt=user@client $
|output=Welcome to this Puppet-managed machine!}}

You can now start the puppet agent as a deamon and have it launch on boot:
{{RootCmd|/etc/init.d/puppet start
|rc-update add puppet default
|prompt=root@client #}}

== Other Topics ==

=== Manually generating certificates ===
To manually generate a certificate, you can use the <tt>puppet cert</tt> utility.
It will place all generated certificates into the <tt>ssldir</tt> as set in the puppet configuration and will sign them with the key of your local Puppet Certificate Authority (CA).

An easy case is the generation of a certificate with '''only one Common Name:'''
{{RootCmd|puppet cert --generate host1}}

If you need to have '''multiple host names''' the certificate is valid for, use the <tt>--certdnsnames</tt> parameter and separate the additional host names with a colon:
{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

This example will generate a certificate valid for the three listed host names.

=== Managing slots with puppet ===
While the default portage provider in puppet does not support slots, a [https://github.com/whatbox/PortageGT 3rd party plugin] is available to enable this functionality in puppet.

== External resources ==
* [http://puppetlabs.com/ Upstream website]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]


[[Category:Server]]
[[Category:Security]]
