<languages />


{{Metadata|abstract=Questa guida fornisce istruzioni riguardo la migrazione da baselayout-1 a baselayout-2 per OpenRC.}}

Questa guida fornisce istruzioni riguardo la migrazione da baselayout-1 a baselayout-2 per OpenRC.

== Background ==

=== Cos'è baselayout? ===

Baselayout fornisce un insieme base di file che sono necessari per far funzionare adeguatamente tutti i sistemi, come ad esempio {{Path|/etc/hosts}}. Fornisce anche il layout base del filesystem usato da Gentoo (ad es. le directory {{Path|/etc}}, {{Path|/var}}, {{Path|/usr}}, {{Path|/home}}). 

=== Cos'è OpenRC? ===

OpenRC è un sistema rc (run command) basato sulle dipendenze che funziona con qualsiasi <tt>init</tt> fornito dal sistema, normalmente {{Path|/sbin/init}}. Comunque, OpenRC non è un sostituto per {{Path|/sbin/init}}. L'init di default usato da Gentoo Linux è {{Package|sys-apps/sysvinit}}, mentre Gentoo/FreeBSD utilizza l'init di FreeBSD fornito da {{Package|sys-freebsd/freebsd-sbin}}. 

=== Perchè migrare? ===

Inizialmente il sistema rc di Gentoo è stato compilato dentro baselayout-1 e scritto interamente in <tt>[[bash]]</tt>. Questo porta a molte limitazioni. Per esempio, certe chiamate di sistema hanno bisogno di essere accedute durante il boot e ciò ha richiesto l'aggiunta di chiamate basate su C. Ognuna di queste chiamate era linkata staticamente, con la conseguenza che il sistema rc ci metteva più tempo ad eseguire le proprie operazioni. 

Inoltre, siccome Gentoo si è espansa ad altre piattaforme come Gentoo/FreeBSD e Gentoo Embedded, è diventato impossibile richiedere a un sistema rc basato su <tt>bash</tt>. Questo ha portato allo sviluppo di baselayout 2, che è scritto in C e richiede unicamente una shell POSIX-compilant. Durante lo sviluppo di baselayout 2, si è determinato come più appropriato se baselayout avesse fornito semplicemente i file base ed il layout del filesystem per Gentoo, ed il sistema rc fu spostato in un suo pacchetto. Da questo nacque OpenRC.

OpenRC fu inizialmente sviluppato da [http://roy.marples.name/openrc Roy Marples] fino al 2010 ed è mantenuto ora dal [[Project:OpenRC|Gentoo OpenRC Project]]. OpenRC supporta tutte le correnti variazioni di Gentoo (es. Gentoo Linux, Gentoo/FreeBSD, Gentoo Embedded, e Gentoo Vserver) e altre piattaforme come FreeBSD e NetBSD.

== Migrazione ad OpenRC ==

La migrazione a OpenRC è piuttosto lineare; sarà introdotta come parte del normale processo di aggiornamento dal gestore dei pacchetti. Il passo più importante attualmente avviene dopo l'installazione dei nuovi pacchetti <code>>=sys-apps/baselayout-2</code> e {{Package|sys-apps/openrc}}. È importantissimo eseguire dispatch-conf ed assicurarsi che i file in {{Path|/etc}} siano aggiornati lanciando <tt>dispatch-conf</tt> (o un altro tool similare) prima di riavviare. ""Un fallimento nel farlo produrrà un sistema non più avviabile"" e richiederà l'uso di un LiveCD per effettuare i passaggi seguenti per riparare il proprio sistema. 

Una volta finito di aggiornare i propri file di configurazione, ci sono alcune cose da verificare prima di riavviare. 

=== {{Path|/etc/conf.d/rc}} ===

Il file {{Path|/etc/conf.d/rc}} è stato deprecato. Tutte le impostazioni in esso contenute avranno bisogno di essere trasferite alle impostazioni appropriate in {{Path|/etc/rc.conf}}. Si prega di leggere interamente {{Path|/etc/rc.conf}} e {{Path|/etc/conf.d/rc}} e migrare le impostazioni. Una volta finito, cancellare {{Path|/etc/conf.d/rc}}. 

=== Moduli del kernel ===

Normalmente, quando si vuole che certi moduli del kernel siano caricati all'avvio, li si mette in {{Path|/etc/modules.autoload.d/kernel-2.6}} insieme ad ogni parametro che gli si vuole passare. Nel baselayout-2, questo file non è più utilizzato. Invece, i moduli caricati automaticamente e i loro parametri sono situati in un file, {{Path|/etc/conf.d/modules}}, qualsiasi sia la versione del kernel. 

Un esempio di configurazione vecchio stile sarebbe: 

{{FileBox|filename=/etc/modules.autoload.d/kernel-2.6|1=
<pre>
ivtv
cx88_dvb video_br=2
</pre>
}}

Convertire l'esempio precedente risulterà nel seguente: 

{{FileBox|filename=/etc/conf.d/modules|1=
<pre>
# Moduli caricati automaticamente all'avvio
modules_2_6="ivtv cx88_dvb"
# Parametri dei Moduli
module_cx88_dvb_args_2_6="video_br=2"
</pre>
}}

Negli esempi precedenti, i moduli e i loro parametri saranno passati soltanto ai kernel della serie 2.6.x. La nuova configurazione permette un controllo più preciso sui moduli e sui parametri basato sulla versione del kernel. 

{{Important|Le variabili '''module*''' non sono cumulative. Le variabili più specifiche sovrascriveranno le variabili con versione più generica.}}

{{Note|Attenzione alla differenza tra '''module_''' e '''modules_'''.}}

Un esempio approfondito sarà: 

{{FileBox|filename=/etc/conf.d/modules|1=
<pre>
# Caricare ivtv solo per il kernel 2.6.23-gentoo-r5
modules_2_6_23_gentoo_r5="ivtv"
# Caricare solamente cx88_dvb per i kernel 2.6.23 (all'infuori di -gentoo-r5)
modules_2_6_23="cx88_dvb"
# Caricare solamente tun e usbserial per i kernel della serie 2.6.x dove x != 23
modules_2_6="tun usbserial"
# Altrimenti caricare ochi1394 e ieee1394
modules="ohci1394 ieee1394"
# Solo per il kernel 2.6.23-gentoo-r5, passare come argomento video_br=2 # a cx88_dvb
module_cx88_dvb_args_2_6_23_gentoo_r5="video_br=2"
# Per i kernel della serie 2.6.x passare sempre vendor e product
module_usbserial_args_2_6="vendor=0x1410 product=0x2110"
# Passare sempre debug a ieee1394
module_ieee1394_args="debug"
</pre>
}}

=== Runlevel di Boot ===

Il runlevel di <code>boot</code> esegue molti passi importanti per ogni macchina. Per esempio, assicurarsi che il proprio filesystem root sia montato in lettura/scrittura, che i propri filesystem siano controllati, che i propri mountpoint siano disponibili, e che lo pseudo-filesystem {{Path|/proc}} sia avviato al boot.

Con OpenRC, i servizi di gestione del volume per i propri dispositivi a blocchi non sono più avviati automaticamente al boot. Questo include [[LVM]], RAID, swap, device-mapper (dm), dm-crypt e simili. Bisogna assicurarsi che lo script di init appropriato per questi servizi sia aggiunto al runlevel boot, altrimenti è possibile che il sistema non si possa più avviare.

Sebbene l'ebuild di OpenRC proverà a fare questa migrazione, l'amministratore di sistema dovrà verificare che tutti i servizi di gestione di volume siano propriamente migrati: 

{{RootCmd|ls -l /etc/runlevels/boot/}}

Se {{Path|root}}, {{Path|procfs}}, {{Path|mtab}}, {{Path|swap}} e {{Path|fsck}} sono mancanti nell'output precedente, lanciate il seguente comando per aggiungerli al runlevel <code>boot</code>: 

{{RootCmd
|rc-update add root boot
|rc-update add procfs boot
|rc-update add mtab boot
|rc-update add fsck boot
|rc-update add swap boot
}}

Se il sistema utilizza mdraid e/o [[LVM]] ed essi non sono menzionati nella lista precedente, i rispettivi script di init devono essere anch'essi aggiunti al runlevel <code>boot</code>:

{{RootCmd
|rc-update add mdraid boot
|rc-update add lvm boot
}}

=== Udev ===

OpenRC non avvia più [[udev]] in modo predefinito; questo deve essere presente nel runlevel <code>sysinit</code> per essere avviato. L'ebuild di OpenRC dovrebbe rilevare se {{Path|udev}} era stato precedentemente abilitato e aggiungerlo al runlevel <code>sysinit</code>. Comunque, per esserne sicuri, controllare se {{Path|udev}} è presente: 

{{RootCmd|ls -l /etc/runlevels/sysinit|output=<pre>
lrwxrwxrwx 1 root root 14 2009-01-29 08:00 /etc/runlevels/sysinit/udev -> \
/etc/init.d/udev
</pre>
}}

Se {{Path|udev}} non è presente, aggiungerlo al runlevel corretto: 

{{RootCmd|rc-update add udev sysinit}}

=== Rete ===

Siccome baselayout e OpenRC sono stati divisi in due pacchetti differenti, il proprio initscript {{Path|net.eth0}} può scomparire durante il processo di aggiornamento. Per sostituire questo initscript e aggiungerlo nuovamente al runlevel di default, eseguire i seguenti comandi: 

{{RootCmd
|cd /etc/init.d
|ln -s net.lo net.eth0
|rc-update add net.eth0 default
}}

 Se manca qualsiasi altro initscript di rete, seguire le istruzioni menzionate sopra per aggiungerlo nuovamente. Basta sostituire <code>eth0</code> con il nome del proprio dispositivo di rete. 

Inoltre, {{Path|/etc/conf.d/net}} (oldnet) non utilizza più gli array stile <tt>bash</tt> per la configurazione. Si prega di consultare <tt>bash</tt> per le istruzioni di configurazione. La conversione dovrebbe essere relativamente diretta, impostando separatamente le voci ognuna su una nuova linea, per esempio un assegnamento statico di IP cambierà in questo modo: 

{{FileBox|filename=/etc/conf.d/net|title=Vecchio Stile|1=
<pre>
config_eth0=( "192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255" )
routes_eth0=( "default via 192.168.1.100" "10.0.0.0/8 via 192.168.1.2" )
</pre>
}}

{{FileBox|filename=/etc/conf.d/net|title=Nuovo stile|1=
<pre>
config_eth0="192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255"
routes_eth0="default via 192.168.1.100
10.0.0.0/8 via 192.168.1.2"
</pre>
}}

=== Orologio ===

 Le impostazioni dell'orologio sono state rinominate da {{Path|/etc/conf.d/clock}} al proprio strumento di impostazione di orologio nativo di sistema. Questo significa che in Linux sarà {{Path|/etc/conf.d/hwclock}} e in FreeBSD sarà {{Path|/etc/conf.d/adjkerntz}}. I sistemi senza un chip con orologio interno ("real time clock", o "RTC", ndt) funzionante dovrebbero usare {{Path|/etc/init.d/swclock}}, che imposta l'orario di sistema basandosi sull'orario di modifica di un file che viene creato durante lo spegnimento del sistema. L'initscript in {{Path|/etc/init.d/}} è anch'esso stato rinominato conseguentemente, quindi assicurarsi che sia nel runlevel boot. 

Inoltre, la variabile <code>TIMEZONE</code> non è più in questo file. I suoi contenuti sono invece nel file {{Path|/etc/timezone}}. Se non esiste, bisognerà crearlo con il proprio fuso orario. Si prega di controllare entrambi questi file per assicurarsi della loro correttezza. 

Il valore appropriato per questo file è il percorso relativo al proprio fuso orario a partire da {{Path|/usr/share/zoneinfo}}. Per esempio, per quelli che vivono nella costa orientale degli Stati Uniti, l'esempio seguente sarà una corretta impostazione: 

{{FileBox|filename=/etc/timezone|1=
<pre>
America/New_York
</pre>
}}

=== XSESSION ===

La variabile <code>XSESSION</code> non si trova più in {{Path|/etc/rc.conf}}. Invece, è possibile impostare una variabile <code>XSESSION</code> per singolo utente nel file {{Path|~/.bashrc}} (o equivalente), o system-wide in {{Path|/etc/env.d/}}. 

Ecco un esempio di come impostare <code>XSESSION</code> per l'intero sistema: 

{{RootCmd|echo 'XSESSION{{=}}"Xfce4"' > /etc/env.d/90xsession}}

{{Important|Bisogna eseguire <tt>env-update</tt> dopo aver creato un file in {{Path|/etc/env.d}}, e successivamente effettuare il logout e poi il login perché abbia effetto. Se si imposta la variabile in {{Path|~/.bashrc}}, si può rifare il source del file con <tt>source ~/.bashrc</tt>.}}

=== EDITOR e PAGER ===

La variabile <code>EDITOR</code> non si trova più in /etc/rc.conf. Sia <code>EDITOR</code> che <code>PAGER</code> sono impostati in modo predefinito in /etc/profile. Si dovrebbe cambiare ciò se se ne ha bisogno nel proprio file {{Path|~/.bashrc}} (o equivalente) o creare {{Path|/etc/env.d/99editor}} ed assegnare l'impostazione predefinita di sistema lì. 

{{Important|Bisogna eseguire <tt>env-update</tt> dopo aver creato un file in {{Path|/etc/env.d}}, e successivamente effettuare il logout e poi il login perché abbia effetto. Se si imposta la variabile in {{Path|~/.bashrc}}, si può rifare il source del file con <tt>source ~/.bashrc</tt>.}}

=== Log di Boot ===

Precedentemente, si poteva loggare il processo di boot utilizzando {{Package|app-admin/showconsole}}. Tuttavia, OpenRC ora gestisce tutto il processo di logging internamente, quindi non c'è bisogno dei trucchetti che <tt>showconsole</tt> ha adottato. Si può fare l'unmerge di <tt>showconsole</tt> senza problemi. Per continuare a loggare i messaggi di boot, impostare semplicemente la variabile appropriata (<code>rc_logger</code>) in {{Path|/etc/rc.conf}}. I log appariranno in {{Path|/var/log/rc.log}}. 

{{FileBox|filename=/etc/rc.conf|title=Abilitazione logging|1=
<pre>
rc_logger="YES"
</pre>
}}

=== {{Path|local.start}} e {{Path|local.stop}} ===

Con OpenRC, {{Path|/etc/conf.d/local.start}} e {{Path|local.stop}} sono deprecati. Durante la migrazione a OpenRC, i file vengono spostati in {{Path|/etc/local.d}} e guadagnano il suffisso {{Path|.start}} oppure {{Path|.stop}}. OpenRC li eseguirà in ordine alfabetico. 

=== Sotto-tipi di sistemi: casi speciali di virtualizzazione ===

Nelle prime versioni di OpenRC, venivano esplicitamente rilevate diverse tipologie di virtualizzazione, e si usava quel rilevamento per segnalare quando determinati script di inizializzazione dovevano essere saltati, usando la chiamata <code>keyword</code> nelle funzioni <code>depend</code>. 

Tuttavia, con il rilascio 0.7.0., è necessario configurare esplicitamente il sotto-tipo usando la variabile rc_sys in {{Path|/etc/rc.conf}}. Il sotto-tip dovrebbe essere impostato per combaciare con l'ambiente di virtualizzazione nella quale risiede root. Generalmente, un <code>rc_sys</code> non vuota dovrebbe esserci dentro ai contenitori virtuali; il nodo host dovrebbe avere <code>rc_sys=""</code>. 

{{Important|Se non si vuole specificare nessun sotto-tipo, si preca di usare il valore predefinito, ovvero una stringa vuota <code>""</code>. Se la variabile non è specificata, verrà restituito un avviso e il sistema cercherà di usare il vecchio algoritmo di rilevamento.}}

{{Note|Se non si sa che valore sta usando il proprio sistema con il rilevamento automatico, è possibile commentare temporaneamente la variabile <code>rc_sys</code> ed eseguire il comando di rilevamento, <tt>rc -S</tt>.}}

{{FileBox|filename=/etc/rc.conf|title=Impostare il sotto-tipo di sistema ad un valore nullo|1=
<pre>
rc_sys=""
</pre>
}}

L'algoritmo di rilevamento ha dovuto essere sostituito con la configurazione manuale a causa dell'introduzione di nuovi sotto-tipi e cambiamenti al kernel che rendevano il rilevamento precedente inaffidabile. 

{| class="table" style="text-align: left;" 
|- 
! Sottotipo
! Descrizione
! Note
|- 
| 
| Default, nessun sottotipo
| Non lo stesso come se non impostato; FreeBSD, Linux and NetBSD
|- 
| jail
| FreeBSD jails
| 
|- 
| lxc
| Linux Containers
| Non rilevato automaticamente
|- 
| openvz
| Linux OpenVZ
| 
|- 
| prefix
| Prefix
| Non rilevato automaticamente; FreeBSD, Linux & NetBSD
|- 
| vserver
| Linux vserver
| 
|- 
| xen0
| Xen0 Domain
| Linux & NetBSD
|- 
| xenU
| XenU Domain
| Linux & NetBSD
|-
|}

=== Pulizia dei file di configurazione inutilizzati ===

 Dopo la migrazione, alcuni file non rimossi da Portage resteranno sul filesystem. Si tratta di file di configurazione protetti dal sistema di protezione dei file di configurazione di Portage.

The most notable example would be {{Path|/etc/conf.d/net.example}} which is superseded by {{Path|/usr/share/doc/openrc-*/net.example.bz2}}. 

=== Finishing up ===

Once finished updating the config files and initscripts, the last thing to do is to type <tt>reboot</tt> with root privileges at a terminal. This is necessary because system state information is not preserved during the upgrade, so a fresh boot is needed. 

== Changed functionality ==

=== The pause action ===

Previously it was possible to temporarily stop a service without taking down all the depending services by using <tt>/etc/init.d/service pause</tt>. In OpenRC, the <code>pause</code> action was removed; this functionality is supported by the <tt>/etc/init.d/service --nodeps stop</tt> , which also works in the old baselayout. 

=== rootfs entry in {{Path|/etc/mtab}} ===

Previously, the initial <code>rootfs</code> entry was removed from {{Path|/etc/mtab}}, and only the real root {{Path|/}} entry was present. The duplicate rootfs item was actually added back during shutdown. In OpenRC, both entries must be present for full support of initramfs and tmpfs-on-root. This also means that less writing is required during shutdown. 


{{Migrated|originalauthors=cardoe, nightmorph, robbat2, uberlord}}

[[Category:Server and Security]]
