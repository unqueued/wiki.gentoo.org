<languages />


{{Metadata|abstract=Questa guida fornisce istruzioni riguardo la migrazione da baselayout-1 a baselayout-2 per OpenRC.}}

Questa guida fornisce istruzioni riguardo la migrazione da baselayout-1 a baselayout-2 per OpenRC.

== Background ==

=== Cos'è baselayout? ===

Baselayout fornisce un insieme base di file che sono necessari per far funzionare adeguatamente tutti i sistemi, come ad esempio {{Path|/etc/hosts}}. Fornisce anche il layout base del filesystem usato da Gentoo (ad es. le directory {{Path|/etc}}, {{Path|/var}}, {{Path|/usr}}, {{Path|/home}}). 

=== Cos'è OpenRC? ===

OpenRC è un sistema rc (run command) basato sulle dipendenze che funziona con qualsiasi <tt>init</tt> fornito dal sistema, normalmente {{Path|/sbin/init}}. Comunque, OpenRC non è un sostituto per {{Path|/sbin/init}}. L'init di default usato da Gentoo Linux è {{Package|sys-apps/sysvinit}}, mentre Gentoo/FreeBSD utilizza l'init di FreeBSD fornito da {{Package|sys-freebsd/freebsd-sbin}}. 

=== Perchè migrare? ===

Inizialmente il sistema rc di Gentoo è stato compilato dentro baselayout-1 e scritto interamente in <tt>[[bash]]</tt>. Questo porta a molte limitazioni. Per esempio, certe chiamate di sistema hanno bisogno di essere accedute durante il boot e ciò ha richiesto l'aggiunta di chiamate basate su C. Ognuna di queste chiamate era linkata staticamente, con la conseguenza che il sistema rc ci metteva più tempo ad eseguire le proprie operazioni. 

Inoltre, siccome Gentoo si è espansa ad altre piattaforme come Gentoo/FreeBSD e Gentoo Embedded, è diventato impossibile richiedere a un sistema rc basato su <tt>bash</tt>. Questo ha portato allo sviluppo di baselayout 2, che è scritto in C e richiede unicamente una shell POSIX-compilant. Durante lo sviluppo di baselayout 2, si è determinato come più appropriato se baselayout avesse fornito semplicemente i file base ed il layout del filesystem per Gentoo, ed il sistema rc fu spostato in un suo pacchetto. Da questo nacque OpenRC.

OpenRC fu inizialmente sviluppato da [http://roy.marples.name/openrc Roy Marples] fino al 2010 ed è mantenuto ora dal [[Project:OpenRC|Gentoo OpenRC Project]]. OpenRC supporta tutte le correnti variazioni di Gentoo (es. Gentoo Linux, Gentoo/FreeBSD, Gentoo Embedded, e Gentoo Vserver) e altre piattaforme come FreeBSD e NetBSD.

== Migrazione ad OpenRC ==

La migrazione a OpenRC è piuttosto lineare; sarà introdotta come parte del normale processo di aggiornamento dal gestore dei pacchetti. Il passo più importante attualmente avviene dopo l'installazione dei nuovi pacchetti <code>>=sys-apps/baselayout-2</code> e {{Package|sys-apps/openrc}}. È importantissimo eseguire dispatch-conf ed assicurarsi che i file in {{Path|/etc}} siano aggiornati lanciando <tt>dispatch-conf</tt> (o un altro tool similare) prima di riavviare. ""Un fallimento nel farlo produrrà un sistema non più avviabile"" e richiederà l'uso di un LiveCD per effettuare i passaggi seguenti per riparare il proprio sistema. 

Una volta finito di aggiornare i propri file di configurazione, ci sono alcune cose da verificare prima di riavviare. 

=== {{Path|/etc/conf.d/rc}} ===

Il file {{Path|/etc/conf.d/rc}} è stato deprecato. Tutte le impostazioni in esso contenute avranno bisogno di essere trasferite alle impostazioni appropriate in {{Path|/etc/rc.conf}}. Si prega di leggere interamente {{Path|/etc/rc.conf}} e {{Path|/etc/conf.d/rc}} e migrare le impostazioni. Una volta finito, cancellare {{Path|/etc/conf.d/rc}}. 

=== Moduli del kernel ===

Normalmente, quando si vuole che certi moduli del kernel siano caricati all'avvio, li si mette in {{Path|/etc/modules.autoload.d/kernel-2.6}} insieme ad ogni parametro che gli si vuole passare. Nel baselayout-2, questo file non è più utilizzato. Invece, i moduli caricati automaticamente e i loro parametri sono situati in un file, {{Path|/etc/conf.d/modules}}, qualsiasi sia la versione del kernel. 

Un esempio di configurazione vecchio stile sarebbe: 

{{FileBox|filename=/etc/modules.autoload.d/kernel-2.6|1=
<pre>
ivtv
cx88_dvb video_br=2
</pre>
}}

Convertire l'esempio precedente risulterà nel seguente: 

{{FileBox|filename=/etc/conf.d/modules|1=
<pre>
# Moduli caricati automaticamente all'avvio
modules_2_6="ivtv cx88_dvb"
# Parametri dei Moduli
module_cx88_dvb_args_2_6="video_br=2"
</pre>
}}

Negli esempi precedenti, i moduli e i loro parametri saranno passati soltanto ai kernel della serie 2.6.x. La nuova configurazione permette un controllo più preciso sui moduli e sui parametri basato sulla versione del kernel. 

{{Important|Le variabili '''module*''' non sono cumulative. Le variabili più specifiche sovrascriveranno le variabili con versione più generica.}}

{{Note|Attenzione alla differenza tra '''module_''' e '''modules_'''.}}

Un esempio approfondito sarà: 

{{FileBox|filename=/etc/conf.d/modules|1=
<pre>
# Caricare ivtv solo per il kernel 2.6.23-gentoo-r5
modules_2_6_23_gentoo_r5="ivtv"
# Caricare solamente cx88_dvb per i kernel 2.6.23 (all'infuori di -gentoo-r5)
modules_2_6_23="cx88_dvb"
# Caricare solamente tun e usbserial per i kernel della serie 2.6.x dove x != 23
modules_2_6="tun usbserial"
# Altrimenti caricare ochi1394 e ieee1394
modules="ohci1394 ieee1394"
# Solo per il kernel 2.6.23-gentoo-r5, passare come argomento video_br=2 # a cx88_dvb
module_cx88_dvb_args_2_6_23_gentoo_r5="video_br=2"
# Per i kernel della serie 2.6.x passare sempre vendor e product
module_usbserial_args_2_6="vendor=0x1410 product=0x2110"
# Passare sempre debug a ieee1394
module_ieee1394_args="debug"
</pre>
}}

=== Runlevel di Boot ===

Il runlevel di <code>boot</code> esegue molti passi importanti per ogni macchina. Per esempio, assicurarsi che il proprio filesystem root sia montato in lettura/scrittura, che i propri filesystem siano controllati, che i propri mountpoint siano disponibili, e che lo pseudo-filesystem {{Path|/proc}} sia avviato al boot.

Con OpenRC, i servizi di gestione del volume per i propri dispositivi a blocchi non sono più avviati automaticamente al boot. Questo include [[LVM]], RAID, swap, device-mapper (dm), dm-crypt e simili. Bisogna assicurarsi che lo script di init appropriato per questi servizi sia aggiunto al runlevel boot, altrimenti è possibile che il sistema non si possa più avviare.

Sebbene l'ebuild di OpenRC proverà a fare questa migrazione, l'amministratore di sistema dovrà verificare che tutti i servizi di gestione di volume siano propriamente migrati: 

{{RootCmd|ls -l /etc/runlevels/boot/}}

Se {{Path|root}}, {{Path|procfs}}, {{Path|mtab}}, {{Path|swap}} e {{Path|fsck}} sono mancanti nell'output precedente, lanciate il seguente comando per aggiungerli al runlevel <code>boot</code>: 

{{RootCmd
|rc-update add root boot
|rc-update add procfs boot
|rc-update add mtab boot
|rc-update add fsck boot
|rc-update add swap boot
}}

Se il sistema utilizza mdraid e/o [[LVM]] ed essi non sono menzionati nella lista precedente, i rispettivi script di init devono essere anch'essi aggiunti al runlevel <code>boot</code>:

{{RootCmd
|rc-update add mdraid boot
|rc-update add lvm boot
}}

=== Udev ===

OpenRC non avvia più [[udev]] in modo predefinito; questo deve essere presente nel runlevel <code>sysinit</code> per essere avviato. L'ebuild di OpenRC dovrebbe rilevare se {{Path|udev}} era stato precedentemente abilitato e aggiungerlo al runlevel <code>sysinit</code>. Comunque, per esserne sicuri, controllare se {{Path|udev}} è presente: 

{{RootCmd|ls -l /etc/runlevels/sysinit|output=<pre>
lrwxrwxrwx 1 root root 14 2009-01-29 08:00 /etc/runlevels/sysinit/udev -> \
/etc/init.d/udev
</pre>
}}

Se {{Path|udev}} non è presente, aggiungerlo al runlevel corretto: 

{{RootCmd|rc-update add udev sysinit}}

=== Network ===

Due to baselayout and OpenRC being broken into two different packages, the net.eth0 initscript may disappear during the upgrade process. To replace this initscript and re-add it to the default runlevel, please perform the following: 

{{RootCmd
|cd /etc/init.d
|ln -s net.lo net.eth0
|rc-update add net.eth0 default
}}

When missing any other network initscripts, follow the instructions above to re-add them. Simply replace <code>eth0</code> with the name of the missing network device. 

Also, {{Path|/etc/conf.d/net}} (oldnet) no longer uses <tt>bash</tt>-style arrays for configuration. Please review {{Path|/usr/share/doc/openrc-<version>/net.example}} for configuration instructions. Conversion should be relatively straight-forward, converting to newlines for separate entries, for example a static IP assignment would change as follows: 

{{FileBox|filename=/etc/conf.d/net|title=Old style|1=
<pre>
config_eth0=( "192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255" )
routes_eth0=( "default via 192.168.1.100" "10.0.0.0/8 via 192.168.1.2" )
</pre>
}}

{{FileBox|filename=/etc/conf.d/net|title=New style|1=
<pre>
config_eth0="192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255"
routes_eth0="default via 192.168.1.100
10.0.0.0/8 via 192.168.1.2"
</pre>
}}

=== Clock ===

Clock settings have been renamed from {{Path|/etc/conf.d/clock}} to the system's native tool for adjusting the clock. On Linux it will be {{Path|/etc/conf.d/hwclock}} and on FreeBSD it will be {{Path|/etc/conf.d/adjkerntz}}. Systems without a working real time clock (RTC) chip should use {{Path|/etc/init.d/swclock}}, which sets the system time based on the mtime of a file which is created at system shutdown. The initscripts in {{Path|/etc/init.d/}} have also been renamed accordingly, so make sure the appropriate script for the system has been added to the boot runlevel. 

Additionally, the <code>TIMEZONE</code> variable is no longer in this file. Its contents are instead found in the {{Path|/etc/timezone}} file. If it does not exist, it will need to be created with the appropriate timezone. Please review both of these files to ensure their contents. 

The proper value for this file is the path relative to the timezone from the {{Path|/usr/share/zoneinfo}} directory. For example, for users living on the east coast of the United States, the following would be a correct setting: 

{{FileBox|filename=/etc/timezone|1=
<pre>
America/New_York
</pre>
}}

=== XSESSION ===

The <code>XSESSION</code> variable is no longer found in {{Path|/etc/rc.conf}}. Instead, the <code>XSESSION</code> variable can be set on a per-user basis in the {{Path|~/.bashrc}} file (or equivalent), or system-wide in {{Path|/etc/env.d/}}. 

Here is an example of setting the default <code>XSESSION</code> for the whole system: 

{{RootCmd|echo 'XSESSION{{=}}"Xfce4"' > /etc/env.d/90xsession}}

{{Important|<tt>env-update</tt> must be ran after creating a file in {{Path|/etc/env.d}}. The user must logout and login for the changes to take effect. If the variable has been set in {{Path|~/.bashrc}}, re-source the file by running <tt>source ~/.bashrc</tt>.}}

=== EDITOR and PAGER ===

The <code>EDITOR</code> variable is no longer found in {{Path|/etc/rc.conf}}. Both <code>EDITOR</code> and <code>PAGER</code> are set by default in {{Path|/etc/profile}}. Adjust as needed in the {{Path|~/.bashrc}} file (or equivalent) or create {{Path|/etc/env.d/99editor}} and set the system default there. 

{{Important|<tt>env-update</tt> must be ran after creating a file in {{Path|/etc/env.d}}. The user must logout and login for the changes to take effect. If the variable has been set in {{Path|~/.bashrc}}, re-source the file by running <tt>source ~/.bashrc</tt>.}}

=== Boot log ===

Previously, the boot process could be logged using the {{Package|app-admin/showconsole}} package. However, OpenRC now handles all logging internally, so there is no need for the hacks that <tt>showconsole</tt> employed. <tt>showconsole</tt> can now be safely unmerged. To continue logging boot messages, set the appropriate variable (<code>rc_logger</code>) in the {{Path|/etc/rc.conf}} file. Logs will appear in {{Path|/var/log/rc.log}}. 

{{FileBox|filename=/etc/rc.conf|title=Enable logging|1=
<pre>
rc_logger="YES"
</pre>
}}

=== {{Path|local.start}} and {{Path|local.stop}} ===

With OpenRC, {{Path|/etc/conf.d/local.start}} and {{Path|local.stop}} have been deprecated. During the migration to OpenRC, the files are moved to {{Path|/etc/local.d}} and gain the suffix {{Path|.start}} or {{Path|.stop}}. OpenRC then executes those in alpha-numeric order. 

=== System sub-types: Virtualization special cases ===

Earlier versions of OpenRC detected multiple types of virtualization, which was used to note when certain init scripts should be skipped, using the <code>keyword</code> call in the <code>depend</code> functions. 

However, as of the 0.7.0 release, administers are required to explicitly configure the sub-type using the <code>rc_sys</code> variable in {{Path|/etc/rc.conf}}. The sub-type should be set to match the virtualization environment that the given root is in. In general, the non-empty <code>rc_sys</code> value should be within the virtual containers; The host node will have <code>rc_sys=""</code>. 

{{Important|If a specific sub-type does not exist, use the default of an empty string <code>""</code>. If the variable is unset, a warning will be printed and there will be an attempt to use the old detection algorithm.}}

{{Note|When the default value for automatic detection is unknown temporarily comment out the <code>rc_sys</code> variable and run the detection command: <tt>rc -S</tt>.}}

{{FileBox|filename=/etc/rc.conf|title=Setting system sub-type to none|1=
<pre>
rc_sys=""
</pre>
}}

The detection algorithm had to be replaced with manual configuration due to the introduction of new sub-types and changes to the kernel that made prior detection unreliable. 

{| class="table" style="text-align: left;" 
|- 
! Subtype
! Description
! Notes
|- 
| 
| Default, no sub-type
| Not the same as unset; FreeBSD, Linux and NetBSD
|- 
| jail
| FreeBSD jails
| 
|- 
| lxc
| Linux Containers
| Not auto-detected
|- 
| openvz
| Linux OpenVZ
| 
|- 
| prefix
| Prefix
| Not auto-detected; FreeBSD, Linux & NetBSD
|- 
| vserver
| Linux vserver
| 
|- 
| xen0
| Xen0 Domain
| Linux & NetBSD
|- 
| xenU
| XenU Domain
| Linux & NetBSD
|-
|}

=== Cleaning up stale configuration files ===

After migration, there will be files left on the file system that are not cleaned up by Portage. Those are configuration files which are protected by Portage' configuration file protection feature.

The most notable example would be {{Path|/etc/conf.d/net.example}} which is superseded by {{Path|/usr/share/doc/openrc-*/net.example.bz2}}. 

=== Finishing up ===

Once finished updating the config files and initscripts, the last thing to do is to type <tt>reboot</tt> with root privileges at a terminal. This is necessary because system state information is not preserved during the upgrade, so a fresh boot is needed. 

== Changed functionality ==

=== The pause action ===

Previously it was possible to temporarily stop a service without taking down all the depending services by using <tt>/etc/init.d/service pause</tt>. In OpenRC, the <code>pause</code> action was removed; this functionality is supported by the <tt>/etc/init.d/service --nodeps stop</tt> , which also works in the old baselayout. 

=== rootfs entry in {{Path|/etc/mtab}} ===

Previously, the initial <code>rootfs</code> entry was removed from {{Path|/etc/mtab}}, and only the real root {{Path|/}} entry was present. The duplicate rootfs item was actually added back during shutdown. In OpenRC, both entries must be present for full support of initramfs and tmpfs-on-root. This also means that less writing is required during shutdown. 


{{Migrated|originalauthors=cardoe, nightmorph, robbat2, uberlord}}

[[Category:Server and Security]]
