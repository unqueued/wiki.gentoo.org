<languages />
<translate>

<!--T:55-->
{{Metadata|abstract=nginx is a robust, small, high performance web server and reverse proxy server. It is a good alternative to popular web servers like Apache and lighttpd.}}

<!--T:1-->
{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|https://nginx.org/en/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox odoc|https://nginx.org/en/docs/}}
}}

<!--T:2-->
'''nginx''' is [[Article description::a robust, small, high performance [[:Category:Web Servers|web server]] and reverse proxy server.]] It is a good alternative to popular web servers like [[Apache]] and [[lighttpd]].

== Installation == <!--T:3-->

<!--T:4-->
Before immediately installing the {{Package|www-servers/nginx}} package, first take a good look at the USE flags for Nginx.

=== Expanded USE flags === <!--T:82-->

<!--T:83-->
Nginx uses modules to enhance its features. To simplify the maintenance of this modular approach, the nginx ebuild uses expanded USE (<var>[[USE_EXPAND]]</var>) flags to denote which modules should be installed.

<!--T:84-->
* HTTP related modules can be enabled through the <var>NGINX_MODULES_HTTP</var> variable
* Mail related modules can be enabled through the <var>NGINX_MODULES_MAIL</var> variable
* Third party modules can be enabled through the <var>NGINX_ADD_MODULES</var> variable

<!--T:6-->
These variables need to be set in {{Path|/etc/portage/make.conf}}. Their descriptions can be found in {{Path|[https://gitweb.gentoo.org/repo/gentoo.git/plain/profiles/desc/nginx_modules_http.desc /usr/portage/profiles/desc/nginx_modules_http.desc]}} and {{Path|[https://gitweb.gentoo.org/repo/gentoo.git/plain/profiles/desc/nginx_modules_mail.desc /usr/portage/profiles/desc/nginx_modules_mail.desc]}}.

<!--T:85-->
For example, to enable the <code>fastcgi</code> module:

<!--T:86-->
{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
NGINX_MODULES_HTTP="fastcgi"
}}

<!--T:112-->
The above will overwrite the default value of <var>NGINX_MODULES_HTTP</var> and set it to <code>fastcgi</code>. To enable the <code>fastcgi</code> module without overwriting the default <var>NGINX_MODULES_HTTP</var> value, the following USE flag notation can be specified in {{Path|[[:/etc/portage/package.use]]}}:

<!--T:113-->
{{FileBox|filename=/etc/portage/package.use|lang=bash|1=
www-servers/nginx NGINX_MODULES_HTTP: fastcgi
}}

=== USE flags === <!--T:87-->

<!--T:88-->
{{USEflag|package=www-servers/nginx}}

=== Emerge === <!--T:89-->

<!--T:90-->
With the USE flags set, install {{Package|www-servers/nginx}}:

<!--T:10-->
{{Emerge|www-servers/nginx}}

=== Installation verification === <!--T:91-->

<!--T:114-->
The default nginx configuration defines a virtual server with the root directory set to {{Path|/var/www/localhost/htdocs}}. However due to {{Bug|449136}}, the nginx ebuild will only create the {{Path|/var/www/localhost}} directory and without an index file. To have a working default configuration, create the {{Path|/var/www/localhost/htdocs}} directory and simple index file:

<!--T:115-->
{{RootCmd
|mkdir /var/www/localhost/htdocs
|echo 'Hello, world!' > /var/www/localhost/htdocs/index.html
}}

<!--T:92-->
The nginx package installs an init service script allowing administrators to stop, start, or restart the service. Run the next command to start the nginx service:

<!--T:93-->
{{RootCmd|/etc/init.d/nginx start}}

<!--T:94-->
To verify that nginx is properly running, point a web browser to the [http://localhost http://localhost] address or use a command-line web tool like {{c|curl}}:

<!--T:17-->
{{Cmd|curl <nowiki>http://localhost</nowiki>}}

== Configuration == <!--T:18-->

<!--T:19-->
The nginx configuration is handled through the {{Path|/etc/nginx/nginx.conf}} file.

=== Single site access === <!--T:20-->

<!--T:21-->
The following example shows a single-site access, without dynamic capabilities (such as [[PHP]]).

<!--T:22-->
{{FileBox|filename=/etc/nginx/nginx.conf|title=Gentoo's default configuration|1=
user nginx nginx;
worker_processes 1;
 
error_log /var/log/nginx/error_log info;
 
events {
	worker_connections 1024;
	use epoll;
}
 
http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
 
	log_format main
		'$remote_addr - $remote_user [$time_local] '
		'"$request" $status $bytes_sent '
		'"$http_referer" "$http_user_agent" '
		'"$gzip_ratio"';
 
	client_header_timeout 10m;
	client_body_timeout 10m;
	send_timeout 10m;
 
	connection_pool_size 256;
	client_header_buffer_size 1k;
	large_client_header_buffers 4 2k;
	request_pool_size 4k;
 
	gzip off;
 
	output_buffers 1 32k;
	postpone_output 1460;
 
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
 
	keepalive_timeout 75 20;
 
	ignore_invalid_headers on;
 
	index index.html;
 
	server {
		listen 127.0.0.1;
		server_name localhost;
 
		access_log /var/log/nginx/localhost.access_log main;
		error_log /var/log/nginx/localhost.error_log info;
 
		root /var/www/localhost/htdocs;
	}
}
}}

=== Multiple site access === <!--T:59-->

<!--T:60-->
It is possible to leverage the <code>include</code> directive to split the configuration in multiple files:

<!--T:61-->
{{FileBox|filename=/etc/nginx/nginx.conf|title=Multisite configuration|1=
user nginx nginx;
worker_processes 1;
 
error_log /var/log/nginx/error_log info;
 
events {
	worker_connections 1024;
	use epoll;
}
 
http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
 
	log_format main
		'$remote_addr - $remote_user [$time_local] '
		'"$request" $status $bytes_sent '
		'"$http_referer" "$http_user_agent" '
		'"$gzip_ratio"';
 
	client_header_timeout 10m;
	client_body_timeout 10m;
	send_timeout 10m;
 
	connection_pool_size 256;
	client_header_buffer_size 1k;
	large_client_header_buffers 4 2k;
	request_pool_size 4k;
 
	gzip off;
 
	output_buffers 1 32k;
	postpone_output 1460;
 
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
 
	keepalive_timeout 75 20;
 
	ignore_invalid_headers on;
 
	index index.html;
 
	include /etc/nginx/conf.d/*.conf;
}
}}

<!--T:62-->
{{FileBox|filename=/etc/nginx/conf.d/local.conf|title=Simple host|1=
server {
        listen 127.0.0.1;
        server_name localhost;
  
        access_log /var/log/nginx/localhost.access_log main;
        error_log /var/log/nginx/localhost.error_log info;
  
        root /var/www/localhost/htdocs;
}
}}

<!--T:63-->
{{FileBox|filename=/etc/nginx/conf.d/local-ssl.conf|title=Simple SSL host|1=
server {
    listen 443 ssl;
    server_name host.tld;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
}
}}

=== PHP support  === <!--T:23-->

<!--T:24-->
Add the following lines to the nginx configuration to enable PHP support. In this example nginx is exchanging information with the PHP process via a UNIX socket.

<!--T:25-->
{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling PHP support|1=
...
http {
...
    server { 
    ...
            location ~ \.php$ {
                       # Test for non-existent scripts or throw a 404 error
                       # Without this line, nginx will blindly send any request ending in .php to php-fpm
                       try_files $uri =404;
                       include /etc/nginx/fastcgi.conf;
                       fastcgi_pass unix:/run/php-fpm.socket;
           }
    }
}
}}

<!--T:26-->
To support this setup, PHP needs to be built with FastCGI Process Manager support ({{Package|dev-lang/php}}), which is handled through the <code>fpm</code> USE flag:

<!--T:27-->
{{RootCmd|echo "dev-lang/php fpm" >> /etc/portage/package.use}}

<!--T:28-->
Rebuild PHP with the <code>fpm</code> USE flag enabled:

<!--T:29-->
{{Emerge|dev-lang/php}}
 
{{Note|Using UNIX socket communication is the preferred and recommended configuration}}

<!--T:30-->
Review the {{Path|/etc/php/fpm-php5.5/php-fpm.conf}} configuration and add following line:

<!--T:31-->
{{FileBox|filename=/etc/php/fpm-php5.5/php-fpm.conf|title=Running PHP with UNIX socket support|lang=ini|1=
listen = /run/php-fpm.socket
listen.owner = nginx
}}

For PHP 7.0 and newer configuration file is slightly different:

<!--T:32-->
{{FileBox|filename=/etc/php/fpm-php7.1/fpm.d/www.conf|title=Running PHP with UNIX socket support|lang=ini|1=
listen = /run/php-fpm.socket
listen.owner = nginx
}}

<!--T:56-->
Set the timezone in the php-fpm {{Path|php.ini}} file. Substitute the <code><PUT_TIMEZONE_HERE></code> text in the FileBox below with the appropriate timezone information:

<!--T:57-->
{{FileBox|filename=/etc/php/fpm-php5.5/php.ini|title=Setup timezone in php.ini|lang=ini|1=
date.timezone = <PUT_TIMEZONE_HERE>
}}

<!--T:58-->
Start the {{c|php-fpm}} daemon:

<!--T:34-->
{{RootCmd|/etc/init.d/php-fpm start}}

<!--T:35-->
Add {{c|php-fpm}} to the default runlevel:

<!--T:36-->
{{RootCmd|rc-update add php-fpm default}}

<!--T:37-->
Reload {{c|nginx}} with changed configuration:

<!--T:38-->
{{RootCmd|/etc/init.d/nginx reload}}

=== IP address access list === <!--T:39-->

<!--T:40-->
The next example shows how to allow access to a particular URL (in this case {{Path|/nginx_status}}) only to:

<!--T:111-->
* certain hosts (e.g. ''192.0.2.1 127.0.0.1'')
* and IP networks (e.g. ''198.51.100.0/24'')

<!--T:41-->
{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling and configuring an IP access lists for /nginx_status page|1=
http {
    server { 
            location /nginx_status {
                     stub_status on;
                     allow 127.0.0.1/32;
                     allow 192.0.2.1/32;
                     allow 198.51.100.0/24;
                     deny all;
             }
     }
}
}}

=== Basic authentication === <!--T:64-->

<!--T:65-->
nginx allows limiting access to resources by validating the user name and password:

<!--T:66-->
{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling and configuring user authentication for the / location|1=
http {
    server { 
            location / {
                   auth_basic           "Authentication failed";
                   auth_basic_user_file conf/htpasswd;
             }
     }
}
}}
 
The {{Path|htpasswd}} file can be generated using:

<!--T:67-->
{{Cmd|openssl passwd}}

=== Third party modules  === <!--T:77-->

<!--T:78-->
Download third party module source and move it to {{Path|/usr/src}}. Manually compile the selected Nginx module, then add the following line to {{Path|/etc/portage/make.conf}}:

<!--T:79-->
{{FileBox|filename=/etc/portage/make.conf|title=Adding third party module|1=
NGINX_ADD_MODULES="/usr/src/nginxmodule"}}

<!--T:80-->
Rebuild nginx with the third party module enabled:

<!--T:81-->
{{Emerge|www-servers/nginx}}

== Usage == <!--T:95-->

=== Service control === <!--T:96-->

==== OpenRC ==== <!--T:97-->

<!--T:98-->
Start nginx:

<!--T:99-->
{{RootCmd|rc-service nginx start}}

<!--T:100-->
Stop nginx:

<!--T:101-->
{{RootCmd|rc-service nginx stop}}

<!--T:102-->
Add nginx to the default runlevel:

<!--T:103-->
{{RootCmd|rc-update add nginx default}}

<!--T:104-->
Restart the nginx service: 

<!--T:105-->
{{RootCmd|rc-service nginx restart}}

== Troubleshooting == <!--T:42-->

<!--T:43-->
In case of problems, the following commands can help troubleshoot the situation.

=== Validate configuration === <!--T:44-->

<!--T:45-->
Verify that the running nginx configuration has no errors:

<!--T:46-->
{{RootCmd|/usr/sbin/nginx -t|output=<pre>
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
</pre>}}

<!--T:47-->
By running {{c|nginx}} with the <code>-t</code> option, it will validate the configuration file without actually starting the {{c|nginx}} daemon.

=== Verify processes are running === <!--T:48-->

<!--T:49-->
Check if {{c|nginx}} processes are running:

<!--T:50-->
{{Cmd|ps aux {{!}} egrep 'nginx{{!}}PID'|output=<pre>
  PID TTY      STAT   TIME COMMAND
26092 ?        Ss     0:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
26093 ?        S      0:00 nginx: worker proces
</pre>}}

=== Verify bound addresses and ports === <!--T:51-->

<!--T:52-->
Verify nginx daemon is listening on the right TCP port (such as 80 for HTTP or 443 for HTTPS):

<!--T:53-->
{{RootCmd|netstat -tulpen {{!}} grep :80|output=<pre>
tcp        0      0 127.0.0.1:80            0.0.0.0:*               LISTEN      0          12336835   -26092/nginx: master
</pre>}}

== See also == <!--T:106-->

<!--T:107-->
* {{See also|Apache}}
* {{See also|Lighttpd}}

== External resources == <!--T:108-->

<!--T:109-->
* https://nginx.org/en/docs/beginners_guide.html - A {{c|nginx}} beginner's guide. Helpful for those who do not know much about {{c|nginx}}.
* https://nginx.com/resources/admin-guide/ - The {{c|ngnix}} administration guide. Helpful for web administrators who have been working in the field.
* http://wiki.nginx.org/Main - The nginx wiki.
* https://github.com/h5bp/server-configs-nginx - H5BP nginx config.

</translate>
[[Category:Web Servers]]
