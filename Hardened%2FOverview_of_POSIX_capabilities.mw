POSIX capabilities are a partitioning of the all powerful root privilege into a set of distinct privileges

== CAP_CHOWN ==

{{Code|CAP_CHOWN|<pre>
  CAP_CHOWN
	In a system with the [_POSIX_CHOWN_RESTRICTED] option defined, 
	this overrides the restriction of changing file ownership and 
	group ownership.
</pre>
}}

== CAP_DAC_OVERRIDE ==

{{Code|CAP_DAC_OVERRIDE|<pre>
  CAP_DAC_OVERRIDE
	Override all DAC access, including ACL execute access 
	if [_POSIX_ACL] is defined. 
	Excluding DAC access covered by CAP_LINUX_IMMUTABLE.
</pre>
}}

== CAP_DAC_READ_SEARCH ==

{{Code|CAP_DAC_READ_SEARCH|<pre>
  CAP_DAC_READ_SEARCH	
	Overrides all DAC restrictions, regarding read and search on files 
	and directories, including ACL restrictions, if [_POSIX_ACL] is 
	defined. Excluding DAC access covered by CAP_LINUX_IMMUTABLE.
</pre>
}}

== CAP_FOWNER ==

{{Code|CAP_FOWNER|<pre>
  CAP_FOWNER
	Overrides all restrictions about allowed operations on files, where 
	file owner ID must be equal to the user ID, except where CAP_FSETID 
	is applicable. It doesn't override MAC and DAC restrictions.
</pre>
}}

== CAP_FSETID ==

{{Code|CAP_FSETID|<pre>
  CAP_FSETID
	Overrides the following restrictions, that the effective user ID shall
	match the file owner ID, when setting the S_ISUID and S_ISGID bits on 
	that file; that the effective group ID (or one of the supplementary 
	group IDs) shall match the file owner ID when setting the S_ISGID bit 
	on that file; that the S_ISUID and S_ISGID bits are cleared on 
	successful return from chown(2) (not implemented).
</pre>
}}

== CAP_FS_MASK ==

{{Code|CAP_FS_MASK|<pre>
  CAP_FS_MASK
	Used to decide between falling back on the old suser() or fsuser().
</pre>
}}

== CAP_KILL ==

{{Code|CAP_KILL|<pre>
  CAP_KILL
	Overrides the restriction, that the real or effective user ID of a process,
	sending a signal, must match the real or effective user ID of the process,
	receiving the signal.
</pre>
}}

== CAP_SETGID ==

{{Code|CAP_SETGID|<pre>
  CAP_SETGID
	Allows setgid(2) manipulation;
	Allows setgroups(2);
	Allows forged gids on socket credentials passing.
</pre>
}}

== CAP_SETUID ==

{{Code|CAP_SETUID|<pre>
  CAP_SETUID
	Allows set*uid(2) manipulation (including fsuid);
	Allows forged pids on socket credentials passing.
</pre>
}}

== CAP_SETPCAP ==

{{Code|CAP_SETPCAP|<pre>
  CAP_SETPCAP
	Transfer any capability in your permitted set to any pid, remove any capability in your permitted set from any pid.
</pre>
}}

== CAP_LINUX_IMMUTABLE ==

{{Code|CAP_LINUX_IMMUTABLE|<pre>
  CAP_LINUX_IMMUTABLE
	Allow modification of S_IMMUTABLE and S_APPEND file attributes.
</pre>
}}

== CAP_NET_BIND_SERVICE ==

{{Code|CAP_NET_BIND_SERVICE|<pre>
  CAP_NET_BIND_SERVICE
	Allows binding to TCP/UDP sockets below 1024;
	Allows binding to ATM VCIs below 32.
</pre>
}}

== CAP_NET_BROADCAST ==

{{Code|CAP_NET_BROADCAST|<pre>
  CAP_NET_BROADCAST
	Allow broadcasting, listen to multicast.
</pre>
}}

== CAP_NET_ADMIN ==

{{Code|CAP_NET_ADMIN|<pre>
  CAP_NET_ADMIN
	Allow interface configuration;
	Allow administration of IP firewall, masquerading and accounting;
	Allow setting debug option on sockets;
	Allow modification of routing tables;
	Allow setting arbitrary process / process group ownership on sockets;
	Allow binding to any address for transparent proxying;
	Allow setting TOS (type of service);
	Allow setting promiscuous mode;
	Allow clearing driver statistics;
	Allow multicasting;
	Allow read/write of devicespecific registers;
	Allow activation of ATM control sockets.
</pre>
}}

== CAP_NET_RAW ==

{{Code|CAP_NET_RAW|<pre>
  CAP_NET_RAW
	Allow use of RAW sockets;
	Allow use of PACKET sockets.
</pre>
}}

== CAP_IPC_LOCK ==

{{Code|CAP_IPC_LOCK|<pre>
  CAP_IPC_LOCK
	Allow locking of shared memory segments;
	Allow mlock and mlockall (which doesn't really have anything to do with IPC).
</pre>
}}

== CAP_IPC_OWNER ==

{{Code|CAP_IPC_OWNER|<pre>
  CAP_IPC_OWNER
	Override IPC ownership checks.
</pre>
}}

== CAP_SYS_MODULE ==

{{Code|CAP_SYS_MODULE|<pre>
  CAP_SYS_MODULE
	Insert and remove kernel modules  modify kernel without limit;
	Modify cap_bset.
</pre>
}}

== CAP_SYS_RAWIO ==

{{Code|CAP_SYS_RAWIO|<pre>
  CAP_SYS_RAWIO
	Allow ioperm/iopl access;
	Allow sending USB messages to any device via /proc/bus/usb.
</pre>
}}

== CAP_SYS_CHROOT ==

{{Code|CAP_SYS_CHROOT|<pre>
  CAP_SYS_CHROOT
	Allow use of chroot().
</pre>
}}

== CAP_SYS_PTRACE ==

{{Code|CAP_SYS_PTRACE|<pre>
  CAP_SYS_PTRACE
	Allow ptrace() of any process.
</pre>
}}

== CAP_SYS_PACCT ==

{{Code|CAP_SYS_PACCT|<pre>
  CAP_SYS_PACCT
	Allow configuration of process accounting.
</pre>
}}

== CAP_SYS_ADMIN ==

{{Code|CAP_SYS_ADMIN|<pre>
  CAP_SYS_ADMIN
	Allow configuration of the secure attention key;
	Allow administration of the random device;
	Allow examination and configuration of disk quotas;
	Allow configuring the kernel's syslog (printk behaviour);
	Allow setting the domainname;
	Allow setting the hostname;
	Allow calling bdflush();
	Allow mount() and umount(), setting up new smb connection;
	Allow some autofs root ioctls;
	Allow nfsservctl; Allow VM86_REQUEST_IRQ;
	Allow to read/write pci config on alpha; Allow irix_prctl on mips (setstacksize);
	Allow flushing all cache on m68k (sys_cacheflush);
	Allow removing semaphores; Used instead of CAP_CHOWN to "chown" IPC message queues, semaphores and shared memory;
	Allow locking/unlocking of shared memory segment;
	Allow turning swap on/off;
	Allow forged pids on socket credentials passing;
	Allow setting readahead and flushing buffers on block devices;
	Allow setting geometry in floppy driver;
	Allow turning DMA on/off in xd driver;
	Allow administration of md devices (mostly the above, but some extra ioctls);
	Allow tuning the ide driver;
	Allow access to the nvram device;
	Allow administration of apm_bios, serial and bttv (TV) device;
	Allow manufacturer commands in isdn CAPI support driver;
	Allow reading nonstandardized portions of pci configuration space;
	Allow DDI debug ioctl on sbpcd driver;
	Allow setting up serial ports;
	Allow sending raw qic117 commands;
	Allow enabling/disabling tagged queuing on SCSI controllers and sending arbitrary SCSI commands;
	Allow setting encryption key on loopback filesystem.
</pre>
}}

== CAP_SYS_BOOT ==

{{Code|CAP_SYS_BOOT|<pre>
  CAP_SYS_BOOT
	Allow use of reboot().
</pre>
}}

== CAP_SYS_NICE ==

{{Code|CAP_SYS_NICE|<pre>
  CAP_SYS_NICE
	Allow raising priority and setting priority on other (different UID) processes;
	Allow use of FIFO and roundrobin (realtime) scheduling on own processes and setting 
	the scheduling algorithm used by another process.
</pre>
}}

== CAP_SYS_RESOURCE ==

{{Code|CAP_SYS_RESOURCE|<pre>
  CAP_SYS_RESOURCE 
	Override resource limits. Set resource limits;
	Override quota limits;
	Override reserved space on ext2 filesystem;
	Modify data journaling mode on ext3 filesystem 
	(uses journaling resources); NOTE: ext2 honors fsuid when checking for
	resource overrides, so you can override using fsuid too;
	Override size restrictions on IPC message queues;
	Allow more than 64hz interrupts from the realtime clock;
	Override max number of consoles on console allocation;
	Override max number of keymaps.
</pre>
}}

== CAP_SYS_TIME ==

{{Code|CAP_SYS_TIME|<pre>
  CAP_SYS_TIME
	Allow manipulation of system clock;
	Allow irix_stime on mips;
	Allow setting the realtime clock.
</pre>
}}

== CAP_SYS_TTY_CONFIG ==

{{Code|CAP_SYS_TTY_CONFIG|<pre>
  CAP_SYS_TTY_CONFIG
	Allow configuration of tty devices; Allow vhangup() of tty.
</pre>
}}

== CAP_MKNOD ==

{{Code|CAP_MKNOD|<pre>
  CAP_MKNOD
	Allow the privileged aspects of mknod().
</pre>
}}

== CAP_LEASE ==

{{Code|CAP_LEASE|<pre>
  CAP_LEASE
	Allow taking of leases on files.
</pre>
}}

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:

* Ned Ludd
* Adam Mondl
