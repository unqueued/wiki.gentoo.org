<languages />


{{Metadata|abstract=이 안내서는 젠투 리눅스 시스템에서의 IPv6 설정 및 라우팅 활용법을 설명합니다.}}

== 준비 ==

=== 기본 커널 설정 ===

젠투에 있는 임의의 2.6 버전대 커널 트리에는 IPv6 연결을 손쉽게 지원합니다. 새 USAGI IPv6 스택을 리눅스 커널 버전 2.6.0부터 통합했습니다. 

{{Emerge|gentoo-sources}}

이제 커널 소스 디렉터리에 들어갈 준비가 끝났으니 실제 커널 설정을 진행하겠습니다. 

{{RootCmd|cd /usr/src/linux
|make menuconfig}}

{{Note/ko|{{Path|/usr/src/linux}} 심볼릭 링크가 현재 사용중인 소스를 가리키고 있다고 가정힙니다.}}

{{KernelBox|title='make menuconfig' 옵션|<pre>
Networking support --->
  Networking options --->
    <*> The IPv6 protocol --->
## (The IPv6 options beneath this one can be useful for many other applications,
## but should not be needed for a basic setup)
 
## (This option is only required if you are using ptrtd for 6to4 conversion)
Device Drivers --->
  Network device support --->
    <*> Universal TUN/TAP device driver support
</pre>
}}

=== IPv6 지원 시험 ===

추천 옵션을 활성화한 다음 커널을 다시 활성화하고 IPv6를 활성화한 커널로 다시 부팅하십시오. 

'''iproute2'''를 아직 설치하지 않았다면, 지금 진행하는것이 좋습니다. iproute2는 <tt>ip</tt>가 들어있는 네트워크 설정 도구 모음이며, <tt>ifconfig</tt>, <tt>route</tt>, <tt>iptunnel</tt>  등을 대체하는 유명한 프로그램입니다. 

{{Emerge|sys-apps/iproute2}}

{{Warning/ko|ifconfigf르 사용하면 여러 터널 장치를 설정했을때 머리아픈 문제를 야기할 수 있습니다. 터널 장치를 반대 순서르 제거해야합니다. 이는 최근 만든 터널 장치부터 제거해야 한다는 의미입니다. 분명히 경고했습니다!}}

IPv6rk 동작한다면, 루프백 장치에서 IPv6 주소를 보여줘야 합니다: 

{{RootCmd|ip -6 addr show lo|output=<pre>
1: lo: <LOOPBACK,UP> mtu 16436
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
    ## (The above lines show things are working)
</pre>
}}

계속 진행하기 전 {{Path|make.conf}}의 USE 변수에 ''ipv6'' 플래그를 추가했는지 확인하셔서 앞으로 이머지할 꾸러미에 IPv6 기능을 추가할 수 있도록 하십시오.

== 터널 설정 ==

=== 기본 설정 ===

Most ISPs still do not offer any native IPv6 connections. To get around this limitation, there are several "tunnel brokers" around the globe that offer free IPv6 tunnels. This will allow you to tunnel all your IPv6 connections through an IPv4 connection. 

{| class="wikitable" style="text-align: left;" 
|- 
! Broker
! Location
|- 
|  [http://tunnelbroker.net/ Hurricane Electric] 
| North America, Europe, Asia
|- 
|  [http://gogonet.gogo6.com/ Freenet6] 
| US
|- 
|  [http://www.sixxs.net/ Sixxs] 
| Europe
|- 
|  [http://tunnel-broker.singnet.com.sg/ Singnet] 
| Singapore
|- 
|  [http://broker.aarnet.net.au/ Aarnet] 
| Australia/South Pacific
|-
|}

Below are two examples for setting up a tunnel with two popular North American tunnels, Hurricane Electric (applies for non-heartbeat tunnels from sixxs.net as well) and Freenet6. 

=== Hurricane Electric ===

Hurricane Electric (HE for short) offers free IPv6 tunnels and allocates a /64 block of addresses for you. It also allows configuration of reverse DNS. Getting a tunnel from HE is as easy as going to [https://www.tunnelbroker.net/ https://www.tunnelbroker.net/] and filling out a one page form. 

{{Note|Registration includes listing information like your address and phone number.}}

After you have a tunnel approved and have a /64 block allocated, you can configure your Gentoo box. HE provides sample configurations based on ifconfig and the iproute utilities. The following two examples assume you have the following configuration: 

{| class="wikitable" style="text-align: left;" 
|- 
| Local IPv4 Address (eth0)
| 68.36.91.195
|- 
| HE IPv4 Address
| 64.71.128.82
|- 
| Local IPv6 tunnel Address
| 2001:470:1F00:FFFF::2
|-
| Remote IPv6 tunnel Address
| 2001:470:1F00:FFFF::1
|- 
| IPv6 Block
| 2001:470:1F00:296::/64
|-
|}

Using the iproute2 package and the <code>ip</code> command, you would do the following.

지역(eth0) IPv4와 HE의 원격 IPv4 주소간 터널 장치를 만드십시오:

{{RootCmd|ip tunnel add sixbone mode sit remote 64.71.128.82 local 68.36.91.195 ttl 64 dev eth0}}

MTU에서 터널링 오버헤드를 추출하십시오:

{{RootCmd|ip link set sixbone mtu 1280}}

터널 장치를 띄우십시오:

{{RootCmd|ip link set sixbone up}}

IPv6 주소를 터널 장치에 할당하십시오:

{{RootCmd|ip addr add 2001:470:1F00:FFFF::2 dev sixbone}}

전역 단일 캐스트 IPv6 주소를 'sixbone' 터널 장치를 거쳐가도록 하십시오:

{{RootCmd|ip route add 2000::/3 dev sixbone}}

다음 예제는 부팅할 때 어떻게 처리하는지 보여줍니다:

{{CodeBox|title=netifrc 예제|lang=bash|1=
iptunnel_he6="mode sit remote 64.71.128.82 local 68.36.91.195 ttl 64 dev eth0"
depend_he6="net.eth0"
config_he6="2001:470:1F00:FFFF::2/64"
routes_he6="default via 2001:470:1F00:FFFF::1 dev he6"
mtu_he6="1280"
}}

{{Note|The device name is 'he6' in the above example instead of 'sixbone'.}}

부팅할 때 장치를 시작하게 하려면:

{{RootCmd|cd /etc/init.d
|ln -s net.lo net.he6
|rc-update add net.he6 default
}}

{{Note/ko|IPv4 iptables에서 기본 정책을 ACCEPT로 하지 않으면 다음 설정을 추가하는 것이 좋습니다: {{RootCmd|iptables -A INPUT -i eth0 -p ipv6 -j ACCEPT}}}}

When tunneling IPv6 over IPv4, the packets will first come through the IPv4 chain before being passed to the IPv6 chain.

=== Freenet6 ===

[http://gogonet.gogo6.com/ Freenet6] is another free tunnel broker. Optional registration only requires a username and a valid email address. They have chosen to turn the tunnel management into a client/server setup and have created the <code>gogoCLIENT</code> client. The client is available in Portage. To install it do: 

{{Emerge|net-misc/gogoc}}

Now if you chose to connect with authentication, you need to configure <code>gogoCLIENT</code> by editing {{Path|/etc/gogoc/gogoc.conf}}. You should only have to change the ''userid'' and ''passwd'' fields to match those assigned from Freenet6 and change the gateway server. Below is a sample config file. 

{{CodeBox|title=gogoc.conf example|lang=bash|1=
auth_method=any
userid=anonymous
passwd=foobar
template=linux
server=broker.freenet6.net
}}

=== 연결 시험 ===

Now that your tunnel is configured, you can test your connection. The easiest way to do this is to use the <code>ping6</code> utility and try to ping an IPv6 host. 

{{Emerge|iputils}}

{{Cmd|ping6 www.kame.net|output=<pre>
PING www.kame.net(orange.kame.net) 56 data bytes
64 bytes from orange.kame.net: icmp_seq=1 ttl=52 time=290 ms
64 bytes from orange.kame.net: icmp_seq=2 ttl=52 time=277 ms
64 bytes from orange.kame.net: icmp_seq=3 ttl=52 time=280 ms
64 bytes from orange.kame.net: icmp_seq=4 ttl=52 time=279 ms
64 bytes from orange.kame.net: icmp_seq=5 ttl=52 time=277 ms
 
--- www.kame.net ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4038ms
rtt min/avg/max/mdev = 277.040/281.041/290.046/4.699 ms
</pre>
}}

Further work is currently in progress to add better IPv6 support to the network init scripts. If you'd like to know the status of this and/or help out, email {{Mail|latexer@gentoo.org}}.

== 프로그램의 IPv6 지원 ==

=== 꾸러미 재 이머지 ===

Unless you had ''USE="ipv6"'' in your {{Path|/etc/portage/make.conf}} previously, you probably need to re-emerge a bunch of packages to compile in IPv6 support for them. To get a list of all the installed packages which are affected by USE flag changes, use Portage's <code>--newuse</code> (<code>-N</code>) option: 

{{Emerge|@world|params=-uDNav}}

If you have changed a lot of USE flags, the list could be quite long. It's suggested to keep your system up-to-date, so it won't hurt if you recompile all affected packages. 

{{Note|Some packages detect IPv6 support automagically and hence have no ipv6 USE flag. Thus not all packages, which should support IPv6, will support it if you have not compiled it with an IPv6 enabled kernel.}}

=== IPv6 전용 꾸러미 ===

There are a few packages which specifically deal with IPv6 items. Most of these are located in {{Path|/usr/portage/net-misc}}. 

{| class="wikitable" style="text-align: left;" 
|- 
! Package
! Description
|- 
| {{Package|net-misc/ipv6calc}}
| Converts an IPv6 address to a compressed format
|- 
| {{Package|net-misc/netcat6}}
| netcat version that supports IPv6 and IPv4
|- 
| {{Package|dev-perl/Socket6}}
| IPv6 related part of the C socket.h defines and structure manipulators
|-
|}

== DNS 설정 ==

=== IPv6과 DNS ===

Just as DNS for IPv4 uses A records, DNS for IPv6 uses AAAA records. (This is because IPv4 is an address space of 2^32 while IPv6 is an address space of 2^128). For reverse DNS, the INT standard is deprecated but still widely supported. ARPA is the latest standard. Support for the ARPA format will be described here. 

=== 연결 시험 ===

Recent versions of BIND include excellent IPv6 support. This section will assume you have at least minimal knowledge about the configuration and use of BIND. We will assume you are not running bind in a chroot. If you are, simply append the chroot prefix to most of the paths in the following section. 

First you need to add entries for both forward and reverse DNS zone files in {{Path|/etc/bind/named.conf}}. 

{{FileBox|filename=/etc/bind/named.conf|title=named.conf entries|1=
## (We allow bind to listen to IPv6 addresses.
## Using 'any' is the only way to do it prior to bind-9.3)
options {
    [...]
    listen-on-v6 { any; }
    [...]
};
## (This will provide the forward DNS for the domain 'ipv6-rules.com':)
zone "ipv6-rules.com" IN {
    type master;
    file "pri/ipv6-rules.com";
};
## (This format for reverse DNS is "bitwise." It's done by taking the IPv6 prefix,
## reversing the order of the numbers and putting a period between each number)
zone "6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa" {
        type master;
        file "pri/rev-ipv6-rules.com.arpa";
};
}}

Now we must create those zone files and add entries for all of our hosts: 

{{FileBox|filename=/etc/bind/pri/ipv6-rules.com|1=
$TTL    2h
@       IN      SOA     ipv6-rules.com. webmaster.ipv6-rules.com.  (
                                2003052501 ; Serial
                                28800      ; Refresh
                                14400      ; Retry
                                3600000    ; Expire
                                86400 )    ; Minimum
                NS      ns1.ipv6-rules.com
 
IN      AAAA    2001:470:1f00:296::1 ; address for ipv6-rules.com
host1   IN      AAAA    2001:470:1f00:296::2 ; address for host1.ipv6-rules.com
host2   IN      AAAA    2001:470:1f00:296::3:3 ; address for host2.ipv6-rules.com
}}

{{FileBox|filename=/etc/bind/pri/ipv6-rules.com.arpa|1=
$TTL 3d ; Default TTL (bind 8 needs this, bind 9 ignores it)
@       IN SOA ipv6-rules.com. webmaster.ipv6-rules.com. (
                        2003052501      ; Serial number (YYYYMMdd)
                        24h             ; Refresh time
                        30m             ; Retry time
                        2d              ; Expire time
                        3d )            ; Default TTL
        IN      NS     ns1.ipv6-rules.com.
; IPv6 PTR entries
$ORIGIN 6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa.
 
1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     ipv6-rules.com.
2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host1.ipv6-rules.com.
3.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host2.ipv6-rules.com.
}}

=== DJBDNS configuration ===

There are currently some third-party patches to DJBDNS available at [http://www.gentoo.org/ http://www.fefe.de/dns/] that allow it to do IPv6 nameserving. DJBDNS can be installed with these patches by emerging it with ''ipv6'' in your USE variables. 

{{Warning|Not all record types are support yet with these patches. In particular, NS and MX records are not supported.}}

{{Emerge|djbdns}}

After djbdns is installed, it can be setup by running <code>tinydns-setup</code> and answering a few questions about which IP addresses to bind to, where to install tinydns, etc. 

{{RootCmd|tinydns-setup}}

Assuming we've installed <code>tinydns</code> into {{Path|/var/tinydns}}, we can now edit {{Path|/var/tinydns/root/data}}. This file will contain all the data needed to get tinydns handling DNS for your IPv6 delegation. 

{{CodeBox|title=sample data file|1=
## (*.ipv6-rules.com is authoritatively handled by 192.168.0.1)
.ipv6-rules.com:192.168.0.1:a:259200
## (Authoritative reverse DNS for 2001:470:1f00:296::/64)
.6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa:192.168.0.1:a
## (Specify the IPs for host1 and host2)
6host1.ipv6-rules.com:200104701f0002960000000000000001:86400
6host2.ipv6-rules.com:200104701f0002960000000000000002:86400
## (Point www to host1)
3www.ipv6-rules.com:200104701f0002960000000000000002:86400
}}

Lines prefixed with a <code>6</code> will have both an AAAA and a PTR record created. Those prefixed with a <code>3</code> will only have an AAAA record created. Besides manually editing the {{Path|data}} file, you can use the scripts <code>add-host6</code> and <code>add-alias6</code> to add new entries. After changes are made to the {{Path|data}} file, you simply need to run <code>make</code> from {{Path|/var/tinydns/root}}. This will create {{Path|/var/tinydns/root/data.cfb}}, which tinydns will use as its source of information for DNS requests.

== IPv6 라우터 ==

=== 라우팅 설정 ===

Further configuration is required if we want to use our system as a router for other clients wishing to connect to the outside world with IPv6. We need to enable forwarding of IPv6 packets. We can do this in one of two ways. 

Either we set the value 1 in the forwarding pseudo-file:
{{RootCmd|echo 1 > /proc/sys/net/ipv6/conf/all/forwarding}}

Or we use the <code>sysctl</code> command:

{{RootCmd|sysctl -w net.ipv6.conf.all.forwarding{{=}}1}}

{{Warning|The <code>radvd</code> init script explained in the next chapter enables (and disables) forwarding, making the next step unnecessary.}}

To enable forwarding at boot, you'll need to edit {{Path|/etc/sysctl.conf}} and add the following line. 

{{CodeBox|title=sysctl.conf 설정 추가|lang=bash|1=
## (If you will be using radvd, this step is unnecessary)
net.ipv6.conf.default.forwarding=1
}}

Traffic should now be forwarded from this box through the tunnel we've established with our broker. 

IPv6 주소를 클라이언트에 할당할 때, IPv6 명세에 따르면, 무상태 기반과 상태 기반 두가지 방식의 IP 할당을 허용합니다. 무상태 기반 할당은 라우터 알림 과정을 거치며 클라이언트에서 IP를 얻고 인터페으스를 띄우는 방식만으로 기본 라우터 정보를 가져올 수 있습니다. IP 할당 기록을 하지 않고, 할당할 IP를 제공하므로 "무상태 기반"이라고 합니다. 상태 기반 할당은 DHCPv6에서 처리합니다. "상태 기반"이라고 하는 이유는 IP를 요청한 클라이언트의 상태를 서버에서 유지하며 해당 정보를 받기 때문입니다. 

=== 무상태 기반 설정 ===

라우터 알림 데몬 또는 {{Package|net-misc/radvd}}를 사용하면 무상태 기반 설정을 쉽게 처리할 수 있습니다. 

{{Emerge|radvd}}

{{Package|net-misc/radvd}}를 이머지한 다음, 어떤 IP 블록에서 IP를 할당할지에 대한 정보가 들어있는 {{Path|/etc/radvd/radvd.conf}} 설정 파일을 만들어야합니다. 자체 터널 브로커에서 할당한 프리픽스를 넣은 {{Path|radvd.conf}} 파일 예제를 보여드리도록 하겠습니다. 

{{CodeBox|title=radvd.conf 예제|1=
interface eth1
{
        ## (Send advertisement messages to other hosts)
        AdvSendAdvert on;
        ## (Fragmentation is bad(tm))
        AdvLinkMTU 1280;
        MaxRtrAdvInterval 300;
        ## (IPv6 subnet prefix we've been assigned by our PoP)
        prefix 2001:470:1F00:296::/64
        {
                AdvOnLink on;
                AdvAutonomous on;
        };
};
}}

{{Warning/ko|첫번째 줄의 인터페이스를 올바르게 설정하여 라우터 알림이 ISP가 아닌 내부 네트워크로 동작하는지 확인하십시오!}}

더 많은 내용은 <code>man radvd.conf</code> 에 있습니다. 이제 <code>radvd</code>를 시작할 수 있고, 부팅할 때 시작하도록 할 수 있습니다. 

{{RootCmd|/etc/init.d/radvd start
|rc-update add radvd default}}

=== 상태 기반 설정 ===

상태 기반으로 설정하려면 {{Package|net-misc/dibbler}} 꾸러미를 설치하고 설정해야합니다. 

{{Emerge|dibbler}}

이제 {{Path|/etc/dibbler/client.conf}} 파일을 편집하여 dibbler 클라이언트를 설정해야합니다. 

{{CodeBox|title=dibbler 클라이언트 설정 예제|1=
iface ppp0 {
	rapid-commit yes
	pd
	option dns-server
}
}}

이제 dibbler 클라이언트를 시작할 수 있고 부팅할 때 시작하도록 설정할 수 있습니다. 

{{RootCmd|/etc/init.d/dibbler-client start
|rc-update add dibbler-client default}}

== IPv6 클라이언트 ==

=== radvd 사용하기 ===

이 라우터 안에 있는 클라이언트는 IPv6로 다른 네트워크에도 연결할 수 있어야합니다.  radvd를 사용한다면 인터페이스를 띄우는 방법만큼 호스트 설정이 쉽습니다(아마도 거의 net.ethX 초기화 스크립트로 끝냈을겁니다). 

{{RootCmd|ip link set eth0 up
|ip addr show eth0|output=<pre>
1: eth0: <BROADCAST,MULTICAST,UP> mtu 1400 qdisc pfifo_fast qlen 1000
    link/ether 00:01:03:2f:27:89 brd ff:ff:ff:ff:ff:ff
    inet6 2001:470:1f00:296:209:6bff:fe06:b7b4/128 scope global
       valid_lft forever preferred_lft forever
    inet6 fe80::209:6bff:fe06:b7b4/64 scope link
       valid_lft forever preferred_lft forever
    inet6 ff02::1/128 scope global
       valid_lft forever preferred_lft forever
</pre>
}}

Should this not work ensure that your IPv6 firewall is allowing ICMPv6 packets through:

{{RootCmd|ip6tables -A INPUT -p icmpv6 -j ACCEPT}}

== Other Resources ==
There are many excellent resources online pertaining to IPv6. 



{| class="wikitable" style="text-align: left;" 
|- 
! Websites
! Resources
|- 
|  [http://www.ipv6.org/ www.ipv6.org] 
| General IPv6 Information
|- 
|  [http://www.linux-ipv6.org/ www.linux-ipv6.org/] 
| USAGI Project
|- 
|  [http://www.deepspace6.net/ www.deepspace6.net] 
| Linux/IPv6 site
|- 
|  [http://www.kame.net/ www.kame.net] 
| *BSD implementation
|-
|}

On IRC, you can try <code>#ipv6</code> on [http://www.freenode.net/ Freenode]. You can connect to the Freenode servers using an IPv6 enabled client by connecting to '''irc.ipv6.freenode.net'''. 

[[Category:Network management]] {{Migrated|originalauthors=Peter Johanson, Jorge Paulo, Sven Vermeulen, Camille Huot, Pasi Valminen, nightmorph, hwoarang}}
