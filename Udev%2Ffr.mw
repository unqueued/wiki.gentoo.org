<languages />


{{Metadata|abstract=udev est le gestionnaire de périphériques pour le noyau Linux. Il administre les nœuds de périphérique dans /dev et prend en charge toutes les actions de l'espace utilisateur lors de l'ajout ou de la suppression de périphériques. }}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

'''udev''' est le gestionnaire de périphérique pour le noyau de Linux. En premier lieu, il gère les nœuds de périphérique dans {{Path|/dev}} et prend en charge toutes les actions dans l'espace utilisateur lors de l'ajout ou de la suppression de périphériques. Consultez aussi [[Project:Eudev|eudev]], une dérivation  de udev.

== Qu'est-ce que udev? ==

=== Le répertoire  /dev  ===

Lorsque les utilisateurs de Linux parlent du matériel sur leur système à des gens qui pensent que Linux est une sorte de virus ou de marque de café, l'utilisation de "slash dev slash foo"  provoquera à coup sûr une sorte d'étonnement. Mais, pour l'utilisateur heureux (comme vous) utiliser  {{Path|/dev/sda1}} est une façon rapide d'expliquer que nous parlons de la première partition du premier disque maître SATA ? 

Nous savons tous ce qu'est un fichier de périphérique. Certains savent même pourquoi les fichiers de périphériques possèdent des numéros spéciaux quand ils les regardent de près après avoir exécuté une commande <code>ls -l</code> dans le dossier {{Path|/dev}}. Mais ce que nous tenons toujours comme garanti, c'est que le premier disque SATA est référencé comme {{Path|/dev/sda}}. Vous pouvez le voir autrement mais cela est un défaut de conception. 

Pensez à des périphériques connectables à chaud, comme les périphériques USB et IEE1394, ou les périphériques PCI commutables à chaud, ... Quel est le premier périphérique ? Et pour combien de temps ? Comment les autres périphériques seront-ils nommés quand le premier disparaitra ? Cela sera-t-il amusant si votre tâche d'impression est tout à coup déplacée de votre toute nouvelle imprimante laser vers votre quasi-moribonde imprimante à matrice parce que votre gamin aura tiré sur le cordon d'alimentation de l'imprimante laser qui justement était la première imprimante ? 

C'est alors qu'''udev'' fait son entrée. Le but du projet udev est à la fois intéressant et nécessaire :

* Fonctionne dans l'espace utilisateur
* Crée/enlève des fichiers de périphérique de manière dynamique
* Assure un nommage cohérent
* Fournit une API dans l'espace utilisateur

À chaque fois qu'une modification de la structure des périphériques se produit, le noyau génère un événement  ''uevent'' qui est intercepté par udev. udev suit alors les règles déclarées dans les répertoires  {{Path|/etc/udev/rules.d}}, {{Path|/run/udev/rules.d}} et {{Path|/lib/udev/rules.d}}. En se basant sur l'information contenue dans l'événement, il trouve la règle ou les règles dont il a besoin pour déclencher et accomplir les actions requises. Ces actions peuvent être de créer ou de supprimer des fichiers de périphérique, mais elles peuvent aussi déclencher le chargement de micro-logiciels particuliers dans la mémoire du noyau.

== Installation ==

{{Note| Si vous êtes en train de faire une mise à jour, consultez la [[/upgrade|sous-page upgrade]].}}

=== Noyau ===

Vous devez activer les options suivantes du noyau :

<!-- See http://git.kernel.org/?p=linux/hotplug/udev.git;a=blob_plain;f=README -->
{{Kernel||<pre>
General setup  --->
    [*] Configure standard kernel features (expert users)  --->
        [ ] Enable deprecated sysfs features to support old userspace tools
        [*] Enable signalfd() system call
Enable the block layer  --->
    [*] Block layer SG support v4
Networking support  --->
    Networking options  --->
        <*> Unix domain sockets
Device Drivers  --->
    Generic Driver Options  --->
        ()  path to uevent helper
        [*] Maintain a devtmpfs filesystem to mount at /dev
    < > ATA/ATAPI/MFM/RLL support (DEPRECATED)  --->
File systems  --->
    [*] Inotify support for userspace
    Pseudo filesystems --->
        [*] /proc file system support
        [*] sysfs file system support
</pre>}}

=== Logiciel ===

Portage connaît l'option globale ''udev'' de la variable USE pour activer la prise en charge de udev dans les autres paquets. Activer cette option de la variable USE (par défaut dans tous les [[profile|profils]] ''linux'') provoquera l'installation du paquet  {{Package|sys-fs/udev}} automatiquement.

{{File|/etc/portage/make.conf||<pre>
USE="... udev ..."
</pre>}}

Les options de la variable  USE d'udev sont :

{{USEflag|package=sys-fs/udev
|acl+yes
|doc
|firmware-loader+yes
|gudev+yes
|introspection+yes
|kmod+yes
|openrc+yes
|selinux++no
|static-libs++no
}}

Après les avoir définies vous devez mettre votre système à jour pour que les changements prennent effet :

{{Emerge|params+=--changed-use --deep|@world}}

== Configuration ==

=== Service ===

Pour démarrer udev au démarrage de la machine, ajoutez le au sysinit de  votre niveau d'exécution : {{RootCmd|rc-update add udev sysinit}}

== Configuration avancée ==

=== Règles ===

udev fournit un jeu de règles qui correspondent aux valeurs exportées des uevents (événements provoqués par le noyau) et aux propriétés du périphérique découvert. Possiblement, une règle ayant une correspondance  nommera et créera  un nœud de périphérique et exécutera des programmes configurés pour installer et configurer le périphérique.

Les définitions des règles sont stockées dans {{Path|/lib/udev/rules.d}} (installé par les paquets) et dans {{Path|/etc/udev/rules.d}}. Dans ces répertoires, de multiples fichiers de règles (suffixés par {{Path|.rules}}) sont parcourus suivant l'ordre alphabétique. À l'intérieur des fichiers de règles, udev trouve des expressions qui correspondent à un uevent accompagné de l'état à faire correspondre (l'événement est-il dû à un ajout ou une suppression) et de la commande à exécuter.

La mise en correspondance de l'événement se base sur des informations telles que :
*  le ''SOUS-SYSTÈME'' de l'uevent (pour quel type de périphérique l'événement est-il provoqué)
* l'''ACTION'' qui a lieu (ajout, changement ou retrait)
* un ou plusieurs attributs (à travers ''ATTR'' ou ''ATTRS''), tels que la classe du périphérique, le vendeur ou tout autre information du périphérique
* le nom fournit par le noyau (via ''KERNEL'') tel que sd* (pour des disques SCSI/ATA) ou input* (pour les périphériques d'entrée comme les souris et les claviers)
* un ou plusieurs paramètres d'environnement (via ''ENV'') utilisés pour envoyer des informations partagées par de multiples règles

En se basant sur ces informations, la règle peut alors décider si  
* quelques informations doivent être partagées avec des événements postérieurs (à travers des variables d'environnement) 
* des liens doivent être créés dans {{Path|/dev}}
* des commandes doivent être exécutées

udev accomplit cela pour toutes les règles qui correspondent (il ne cesse donc pas après la première correspondance) pour permettre une approche flexible de la gestion  des périphériques.

=== Noms de périphérique persistants ===

Le noyau détecte les périphériques de manière asynchrone, udev reflète le système de fichiers [[sysfs]] et ainsi les périphériques sont nommés et numérotés selon leur ordre de détection. Ainsi par défaut, udev ne fournit pas de noms persistants. Néanmoins, il existe un mécanisme pour quelques classes de périphériques pour assurer cette fonctionnalité :

* udev crée, pour les périphériques de stockage, des liens symboliques additionnels en se basant sur l'id du périphérique, son étiquette, son uuid et son chemin (voir le répertoire {{Path|/dev/disk/by-*}}) . Ainsi, au lieu d'utiliser, par exemple, le fichier de périphérique {{Path|/dev/sda}} utilise le fichier   {{Path|/dev/disk/by-label/SOME_LABEL}}.

* C'est la même chose pour les périphériques d'entrée dans le répertoire {{Path|/dev/input}}.

* En utilisant des règles personnalisées, vous pouvez créer votre propre fichier de périphérique.

== Utilisation ==

Quelques  commandes utiles :

* Affiche tous les messages concernant un fichier de périphérique donné :
: {{RootCmd|udevadm info --query{{=}}all --name{{=}}/dev/DEVICE_FILE}}

* Surveille les activités de :
: {{RootCmd|udevadm monitor}}

Reportez-vous à la [[man page|page de manuel]] de ''udevadm'' pour plus d'information.

== Dépannage ==

* {{Bug|udev|search=package}}

=== Journaliser les  messages de surveillance ===

Journalise tous les messages que vous voyez, lorsque vous exécutez la commande '''udevadm monitor''' :

{{File|/etc/conf.d/udev||<pre>
udev_monitor="YES"
</pre>}}

Cela créera le nouveau journal {{Path|/run/udev/udevmonitor.log}}.

=== Mode de déverminage ===

Enable debug mode to get more log messages:

{{File|/etc/conf.d/udev||<pre>
udev_debug="YES"
</pre>}}

It will create the new log file {{Path|/run/udev/udevdebug.log}}.

=== Missing device files {{Path|/dev/null}} and {{Path|/dev/console}} ===

Some udev versions need these files and can't create them on their own. So you have to create them:

{{RootCmd
|mkdir test
|mount --bind / test
|cd test/dev
|mknod -m 660 console c 5 1
|mknod -m 660 null c 1 3
|cd ../..
|umount test
|rmdir test
}}

=== NIC assigned eth0, but is moved to eth1 ===

Those having dual network cards on their motherboards may run into a situation where ifconfig may show no eth0 or eth1.  Dmesg may show their NIC detected as eth0, and later moved to eth1. Performing a "ifconfig -a" will also show the NIC as eth1. This is caused by using the kernel assigned names in the first place. You should write your own rules like {{Path|/etc/udev/rules.d/70-my-network.rules}} to
use free names like lan0 or wireless0 or use the predictable interface names which are enabled by the default since version 197.

Remember to also remove old files from old versions of udev:

{{RootCmd|rm /etc/udev/rules.d/70-persistent-net.rules}}


[[Category:Core system]]
[[Category:Daemons]]
