<languages />
{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://freedesktop.org/wiki/Software/systemd|header=true}}
|{{InfoBox wikipedia}}
}}
[http://es.wikipedia.org/wiki/Systemd '''systemd'''] es un moderno reemplazo de sysvinit y RC para los sistemas Línux. Tiene soporte en Gentoo como una alternativa del sistema de inicio ([http://es.wikipedia.org/wiki/Init init]).
<!--
Los siguientes directorios de configuración son utilizados por OpenRC y systemd:
* {{Path|/etc/modules-load.d}},
* {{Path|/etc/sysctl.d}},
* {{Path|/etc/binfmt.d}}
-->

== Configuración previa a la instalación ==

{{Note/es|Al actualizar desde <{{=}}sys-apps/systemd-203 compruebe la [[/upgrade|subpágina upgrade]].}}

=== El núcleo de línux===

systemd hace uso de muchas características modernas del núcleo de Línux. Ahora mismo, el límite inferior de la versión del núcleo (para usar systemd) se encuentra en el ebuild 02.06.39.
En versiones recientes de {{Package|sys-kernel/gentoo-sources}}, hay una manera eficaz de seleccionar las opciones del núcleo, tanto obligatorias como opcionales, para systemd:

{{KernelBox|title=Configuración rápida usando gentoo-sources|<pre>
Gentoo Linux --->
        Support for init systems, system and service managers --->
                [*] systemd
</pre>}}

Para configurar las opciones del núcleo manualmente (que es la única opción cuando no utilice {{Package|sys-kernel/gentoo-sources}}), se requieren o recomiendan las siguientes opciones de configuración del núcleo:

<!-- See http://cgit.freedesktop.org/systemd/systemd/plain/README -->
{{KernelBox|title=Opciones obligatorias|<pre>
General setup  --->
	[*] Control Group support
	[*] open by fhandle syscalls
	[ ] Enable deprecated sysfs features to support old userspace tools
	[*] Configure standard kernel features (expert users)  --->
		[*] Enable eventpoll support
		[*] Enable signalfd() system call
		[*] Enable timerfd() system call
[*] Networking support --->
Device Drivers  --->
	Generic Driver Options  --->
		[*] Maintain a devtmpfs filesystem to mount at /dev
File systems  --->
	[*] Inotify support for userspace
	Pseudo filesystems  --->
		[*] /proc file system support
		[*] sysfs file system support
</pre>}}

{{KernelBox|title=Opciones recomendadas|<pre>
General setup  --->
	[*] Namespaces support  --->
		[*] Network namespace
[*] Enable the block layer  --->
	[*] Block layer SG support v4
Processor type and features  --->
	[*] Enable seccomp to safely compute untrusted bytecode
Networking support --->
	Networking options --->
		<*> The IPv6 protocol
Device Drivers  --->
	Generic Driver Options  --->
		()  path to uevent helper
		[ ] Fallback user-helper invocation for firmware loading
Firmware Drivers  --->
	[*] Export DMI identification via sysfs to userspace
File systems --->
	<*> Kernel automounter version 4 support (also supports v3)
	Pseudo filesystems --->
		[*] Tmpfs virtual memory file system support (former shm fs)
		[*]   Tmpfs POSIX Access Control Lists
		[*]   Tmpfs extended attributes
</pre>}}

Para un sistema UEFI active también las siguientes opciones:

{{KernelBox|title=Soporte para UEFI|<pre>
[*] Enable the block layer  --->
	Partition Types  --->
		[*] Advanced partition selection
		[*]   EFI GUID Partition support
Processor type and features  --->
	[*] EFI runtime service support
Firmware Drivers  --->
        EFI (Extensible Firmware Interface) Support -->
	        <*> EFI Variable Support via sysfs
</pre>}}

Si el sistema está utilizando el planificador BFQ, se recomienda, por los desarrolladores de BFQ, activar «BFQ hierarchical scheduling support» bajo «Enable the block layer -> IO Schedulers».

Para obtener una lista actualizada, consulte la sección «REQUIREMENTS» en el archivo [http://cgit.freedesktop.org/systemd/systemd/tree/README README].

===El directorio {{Path|/run}}===

El directorio {{Path|/run}} es utilizado por systemd, y otras aplicaciones, como almacenamiento no persistente para los datos que se ejecutan en tiempo real, como [http://es.wikipedia.org/wiki/Identificador_de_proceso archivos pid], [http://es.wikipedia.org/wiki/Socket_Unix sockets] y archivos de estado.

El paquete systemd creará él mismo el directorio {{Path|/run}}. Sin embargo, tenga en cuenta que este cambio provocará el montaje automático del mismo en [[OpenRC]], y puede desencadenar su uso por los diferentes paquetes de software.

==={{Path|/etc/mtab}}===

Los desarrolladores solo dan soporte al archivo {{Path|/etc/mtab}} siendo este un enlace simbólico de {{Path|/proc/self/mounts}}. Si no se crea este enlace simbólico también causará problemas con <tt>mount</tt> ({{bug|434090}}) y <tt>df</tt> ({{bug|477240}}). En el pasado algunas utilidades escribieron información (como opciones de montaje) en {{Path|/etc/mtab}} y, por lo tanto, se dio por hecho que era un archivo normal. Hoy en día todo el software tiene en cuenta esto que para evitar dicho problema. Sin embargo, antes de cambiar el archivo para convertirse en un vínculo simbólico, revise {{bug|477498}} para asegurarse de que el sistema no está afectado por ninguna regresión reportada.

Para crear el enlace simbólico, ejecute:

{{RootCmd|ln -sf /proc/self/mounts /etc/mtab}}

=== Asegurarse de que /usr está presente en el arranque ===

Para una configuración separada de {{Path|/usr}}, utilice un [[initramfs]] para que monte {{Path|/usr}} antes de iniciar systemd. Consulte la [[Initramfs/Guide|Initramfs Gentoo Guide]] para obtener instrucciones al respecto.

=== Utililizar LVM2 y initramfs ===

Cuando se utiliza [[LVM|sys-fs/lvm2]] y el sistema se arranca usando un initramfs, dicho initramfs tendrá que ser creado con {{Package|sys-kernel/genkernel-next}}, ejecutando:

{{RootCmd|genkernel --udev --lvm <target>}}

<code><target></code> es, o bien <code>initramfs</code>, o bien algún otro objetivo de genkernel que implique la creación de un initramfs. Para obtener más información, mire la salida de <tt>genkernel --help</tt>:

{{Cmd|genkernel --help}}

Cuando se utiliza LVM, el demonio <tt>lvmetad</tt> debe iniciarse también. De lo contrario systemd será incapaz de montar volúmenes LVM. <tt>lvmetad</tt> se puede activar en {{Path|/etc/lvm/lvm.conf}}:

{{FileBox|filename=/etc/lvm/lvm.conf|title=Fragmento del cambio necesario en lvm.conf|lang=ini|1=
# Ajustar use_lvmetad a '1' para systemd
use_lvmetad {{=}} 1
}}

{{Note/es|En lugar de modificar {{Path|/etc/lvm/lvm.conf}}, esto, probablemente, podría lograrse a través de una unidad {{Path|lvmetad.socket}} que active un servicio {{Path|lvmetad.service}}, pero las versiones actuales de {{Package|sys-fs/lvm2}} no contienen dichas opciones aún.}}

== Instalación ==

{{Package|sys-apps/systemd}} contiene udev. Una vez instalado, {{Package|sys-fs/udev}} puede retirarse, dado que systemd será asistido por {{Package|virtual/udev}}.

Active el parámetro global de USE <code>systemd</code> (en {{Path|make.conf}}). Al mismo tiempo, el parámetro USE <code>consolekit</code> debe ser desactivado para evitar conflictos con el servicio <tt>systemd-logind</tt>. También es posible cambiar a un subperfil systemd para utilizar parámetros USE por defecto más coherentes, en cuyo caso no es necesario cambiar {{Path|make.conf}}:

{{RootCmd|eselect profile list}}

Finalmente, actualice el sistema con los nuevos parámetros:

{{RootCmd|emerge -avDN @world}}

Cuando se producen problemas de dependencias (como {{Package|sys-fs/udev}} bloqueando {{Package|sys-apps/systemd}}), {{Package|sys-fs/udev}} podría ser que estuviera registrado en el archivo word. Trate de resolver esto desmarcándolo:

{{RootCmd|emerge --deselect sys-fs/udev}}

== Arrancar con systemd ==

Para poder arrancar systemd, hay que cambiar el <tt>init</tt> que el núcleo (o initramfs) utiliza como ejecutable.

{{Warning/es|Los servicios que se establecen para el gestor de servicios previo no se inician automáticamente (en el otro). Esto se debe a que el sistema ha cambiado a un gestor de servicios diferente. Con el fin de obtener de nuevo la funcionalidad de dichos servicios, como la conexión de redes o el gestor de inicio de sesión, estos servicios tendrán que ser activados nuevamente. Más información sobre esto se proporciona más adelante en la sección [[#Servicios|«Servicios»]] de este artículo.}}

{{Note/es|Si la migración produce un estado inoperativo, siempre es posible arrancar de nuevo con el gestor de servicios por defecto (OpenRC) desandando los pasos para cambiar el init. Esto permite un retorno seguro y una manera de conseguir solucionar el problema a través de la sección [[#Solución de problemas|«Solución de problemas»]] del final de este artículo.}}

Las siguientes subsecciones documentan cómo intercambiar el <tt>init</tt> en uno de los gestores de arranque o en el núcleo.

=== Grub Legacy (0.x) ===

El argumento <code>init=/usr/lib/systemd/systemd</code> debe ser añadido a la línea de órdenes del núcleo. Un extracto de ejemplo de {{Path|grub.conf}} se vería así:

{{FileBox|filename=/boot/grub/grub.conf|title=Ejemplo de configuración de GRUB para systemd|1=
title=Gentoo con systemd
root (hd0,0)
kernel /vmlinuz root=/dev/sda2 init=/usr/lib/systemd/systemd
}}

Si a pesar de esto el sistema arranca usando OpenRC, pruebe utilizando <code>real_init</code> en lugar de <code>init</code>.

=== Grub 2 ===

Cuando se utiliza <tt>grub2-mkconfig</tt>, añada la opción init a <code>GRUB_CMDLINE_LINUX</code>:

{{Note/es|Esto no es necesario cuando se utiliza un initramfs generado por <tt>dracut</tt> con systemd en su interior, dado que initramfs ya inicia systemd.}}

{{FileBox|filename=/etc/default/grub|title=Ejemplo de configuración de grub2-mkconfig para systemd|lang=bash|1=
# Añadir parámetros a la línea de órdenes del núcleo de línux
GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"
}}

Cuando el archivo de configuración de GRUB 2 esté hecho a mano (solo expertos), añada el parámetro <code>init=</code> a la orden <code>linux</code> o <code>linux16</code>.

{{FileBox|filename=/boot/grub/grub.cfg|title=Ejemplo de fragmento de configuración de GRUB2|1=
linux /vmlinuz-3.10.9 root=UUID=508868e4-54c6-4e6b-84b0-b3b28b1656b6 init=/usr/lib/systemd/systemd
}}

Cuando utilice initrd obtenido con genkernel-next, use <code>real_init</code> en lugar de <code>init</code>.

=== En la configuración del núcleo ===

La configuración de init también puede ser introducida en la configuración del núcleo. Consulte «Processor type and features -> Built-in kernel command line». Tenga en cuenta que esta técnica funciona tanto para grub como para grub2.

=== Definir la contraseña de root ===

En este punto no se olvide de establecer la contraseña root del sistema. Si algo sale mal, systemd pedirá la contraseña de root para entrar en modo de mantenimiento.

== Configuración posterior a la instalación ==

systemd soporta algunos archivos de configuración del sistema para ajustar los detalles más básicos del sistema.

{{Note/es|Si bien algunos parámetros de configuración del sistema se pueden actualizar mediante la modificación de los archivos de configuración apropiados, la mayoría de los ajustes se gestionan mediante utilidades que exigen que systemd esté corriendo. En este último caso, es seguro reiniciar el ordenador con systemd y utilizar las utilidades <tt>hostnamectl</tt>, <tt>localectl</tt> y <tt>timedatectl</tt> para hacer los ajustes que se necesiten.}}

=== Nombre del equipo ===

Para establecer el nombre del equipo, cree/edite el archivo {{Path|/etc/hostname}} y simplemente ponga el nombre deseado para el equipo.

Cuando arranca con systemd, dispone de una herramienta llamada <tt>hostnamectl</tt> que permite editar {{Path|/etc/hostname}} y {{Path|/etc/machine-info}}. Para cambiar el nombre del equipo, ejecute:

{{RootCmd|hostnamectl set-hostname <NOMBREDELEQUIPO>}}

Remítase a <kbd>man hostnamectl</kbd> para obtener más información.

{{FileBox|filename=/etc/machine-info|title=Archivo de configuración para la información de la máquina local.|lang=bash|1=
PRETTY_NAME="Larry's Computer"
ICON_NAME="computer-laptop"
}}

=== Idioma del sistema ===

Por lo general, los locales migrarán correctamente desde OpenRC al instalar systemd. Cuando sea necesario, el idioma se puede ajustar en {{Path|/etc/locale.conf}}, según las instrucciones dadas por el manual de Gentoo:

{{FileBox|filename=/etc/locale.conf|title=Configuración del idioma del sistema|lang=bash|1=
LANG="es_ES.utf8"
}}

Una vez arrancado el sistema con systemd, la herramienta <tt>localectl</tt> se puede utilizar para establecer la configuración regional y el mapa de teclas de la consola o de X11. Para cambiar la configuración regional del sistema, ejecute la siguiente orden:

{{RootCmd|localectl set-locale LANG<nowiki>=</nowiki><LOCALE>}}

Para cambiar el mapa de teclado de la consola virtual:

{{RootCmd|localectl set-keymap <KEYMAP>}}

Y, por último, para configurar la distribución del teclado en X11:

{{RootCmd|localectl set-x11-keymap <LAYOUT>}}

Si es necesario el modelo, variante y opciones pueden especificarse así:

{{RootCmd|localectl set-x11-keymap <LAYOUT> <MODEL> <VARIANT> <OPTIONS>}}

=== Fecha y hora ===

La fecha y hora del sistema se pueden ajustar mediante la utilidad <tt>timedatectl</tt>. Esto también permitirá a los usuarios configurar la sincronización horaria del sistema sin necesidad de depender de {{Package|net-misc/ntp}} o de otros proveedores que implementa el propio systemd.

Para aprender a utilizar <tt>timedatectl</tt> solo tiene que ejecutar:

=== Cargar módulos automáticamente ===

=== Cargar módulos automáticamente ===

La carga automática de un módulo está configurada en un archivo diferente, o mejor dicho, en un directorio de archivos. Los archivos de configuración se almacenan en el directorio {{Path|/etc/modules-load.d}}. Al arranque, se carga cada archivo que contiene una lista de módulos. El formato del archivo es una lista de módulos separados por saltos de línea, y dicho archivo puede tener cualquier nombre, siempre y cuando termine en {{Path|.conf}}. La carga del módulo se puede separar por programa, servicio o cualquier forma que se adapte a sus preferencias personales. Un ejemplo para los módulos de <tt>virtualbox.conf</tt> se enumeran a continuación:

{{FileBox|filename=/etc/modules-load.d/virtualbox.conf|title=Archivo de ejemplo para los módulos de virtualbox|1=
vboxdrv
vboxnetflt
vboxnetadp
vboxpci
}}

=== Configurar la conexión de red ===

==== systemd-networkd ====

systemd-networkd es útil para realizar una configuración sencilla de las interfaces de red cableada. Está desactivado por defecto.

Para configurar systemd-networkd, cree un archivo {{Path|*.network}} dentro del directorio {{Path|/etc/systemd/network}}. Vea [http://www.freedesktop.org/software/systemd/man/systemd.network.html systemd.network(5)] como referencia. Una configuración de DHCP sencilla sería como sigue:

{{FileBox|filename=/etc/systemd/network/50-dhcp.network
|1=[Match]
Name=en*
 
[Network]
DHCP=yes}}

{{RootCmd|systemctl enable systemd-networkd.service
|systemctl start systemd-networkd.service}}

Advierta que systemd-networkd no actualiza {{Path|resolv.conf}} de forma predeterminada. Para tener systemd administrando la configuración de DNS, sustituya {{Path|resolv.conf}} con un enlace simbólico y ponga en marcha systemd-resolved.

{{RootCmd|ln -snf /run/systemd/resolve/resolv.conf /etc/resolv.conf
|systemctl enable systemd-resolved.service
|systemctl start systemd-resolved.service}}

==== NetworkManager ====

A menudo NetworkManager se utiliza para configurar los ajustes de red. Para ello, solo tiene que ejecutar la siguiente orden cuando se utiliza un escritorio corriendo con X11:

{{RootCmd|nm-connection-editor}}

Si ese no es el caso y la red necesita ser configurada desde consola, dele a [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Using_the_NetworkManager_Command_Line_Tool_nmcli.html nmcli] una oportunidad, o siga un proceso de configuración asistida por <tt>nmtui</tt>:

{{RootCmd|nmtui}}

[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Networking_Config_Using_nmtui.html nmtui] es una interfaz [http://es.wikipedia.org/wiki/Curses curses] que guiará al usuario en el proceso de configuración mientras se ejecuta en modo consola.

=== Manejar los archivos de registo ===

systemd tiene su propia manera de manejar los archivos de registro sin necesidad de depender de ningún sistema de registro externo (como syslog-ng o rsyslog). Los mensajes ahora se pueden leer con <tt>journalctl</tt>. Aún así, systemd puede ser configurado para utilizar una herramienta externa de su preferencia para el manejo de los registros. Escriba <kbd>man journald.conf</kbd> y aprenda acerca de cómo configurar journald para que se ajuste a sus necesidades personales.

=== /tmp está ahora en tmpfs ===

A menos que algún otro sistema de archivos esté montado de forma explícita para {{Path|/tmp}} en {{Path|/etc/fstab}}, systemd montará {{Path|/tmp}} como tmpfs. Eso significa que se vacía en cada arranque y su tamaño se limitará a 50% del tamaño de la memoria RAM del sistema. Para saber por qué este se comporta así y cómo modificarlo, eche un vistazo a [http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ Sistemas de archivos API].

=== Configurar la verbosidad de proceso de arranque ===

When migrating to systemd users usually notice differences regarding verbosity of boot process:
* The boot option <code>quiet</code> not only influences the kernel output, but also that of systemd itself. Then, while setting up systemd for the machine, drop the option to see any errors could arise more easily. After that, add it back to get a quiet (and faster) boot.
* Even passing the <code>quiet</code> boot option, systemd can still be configured to show its status by also passing <code>systemd.show_status=1</code>.
* When not using the <code>quiet</code> boot option, some messages might be overwriting consoles. That is caused by the kernel configuration (see <kbd>man 5 proc</kbd> and look for {{Path|/proc/sys/kernel/printk}}). To tweak it pass the <code>loglevel=5</code> boot parameter to the kernel (and update the value according to preference, for instance set a lower value like 1).

== Servicios ==

En algún momento el sistema tendrá que ser reiniciado para que systemd se ponga marcha (en modo de sistema). Procure leer todo el presente documento para asegurarse de que systemd se configura tan completamente como sea posible antes de reiniciar (el equipo). Tenga en cuenta que, así como la utilidad <tt>journalctl</tt> funciona con systemd mientras este no está ejecutándose, por el contrario la utilidad <tt>systemctl</tt> no hará nada útil sin que systemd esté ejecutándose. Complete la configuración de los servicios (activación e iniciación de los servicios) después de entrar en el sistema que ejecuta systemd.

=== Servicios OpenRC ===

Aunque originalmente systemd intentó dar soporte a los antiguos scripts de init.d en ejecución, este apoyo no se adapta bien para un RC basado en dependencias como OpenRC y, por lo tanto, se desactiva por completo en Gentoo. OpenRC ofrece medidas adicionales para garantizar que los scripts de init.d no se ejecuten cuando no se utilice OpenRC para arrancar el sistema (de lo contrario los resultados serían impredecibles).

=== Listar servicios disponibles ===

Todas las unidades de servicios disponibles se pueden enumerar usando el argumento <code>list-units</code> con <tt>systemctl</tt>:

{{RootCmd|systemctl list-units|output=<pre>
UNIT                               LOAD   ACTIVE SUB       DESCRIPTION
boot.automount                     loaded active waiting   EFI System Partition Automount
proc-sys-fs-binfmt_misc.automount  loaded active waiting   Arbitrary Executable File Formats File System Automount Point
...
</pre>}}

Los siguientes sufijos de archivos son de interés:

{| class="table"
! Sufijo
! Descripción
|-
| {{Path|.service}}
| archivos de servicio normal (por ejemplo, aquellos que se limitan a ejecutar un demonio directamente),
|-
| {{Path|.socket}}
| servicios que escuchan socket   (como ''inetd''),
|-
| {{Path|.path}}
| sistema de archivos que desencadenan servicios (servicios que se ejecutan cuando cambian los archivos, etc.).
|}

Por otro lado, la herramienta <tt>systemctl</tt> se puede utilizar para enumerar todos los servicios (incluidos los implícitos):

{{RootCmd|systemctl --all --full}}

Y, por último, para comprobar los servicios que fallaron al iniciar:

{{RootCmd|systemctl --failed}}

=== Activar, desactivar, iniciar y detener servicios ===

La forma habitual de activar un servicio es usando la siguiente orden:

{{RootCmd|systemctl enable foo.service}}

Los servicios pueden ser igualmente desactivados:

{{RootCmd|systemctl disable foo.service}}

These commands enable services using their default name in default target (both specified in "Install" section of the service file). However, sometimes services either don't provide that information or users prefer to have another name/target.

Tenga en cuenta que estas órdenes solo activan o desactivan el servicio en cuestión cuando el sistema se inicie de nuevo en un próximo arranque; para iniciar el servicio inmediatamente (si necesidad de reinicio del sistema), utilice:

{{RootCmd|systemctl start foo.service}}

Services can be stopped likewise:

{{RootCmd|systemctl stop foo.service}}

=== Instalar archivos de unidad personalizados ===

Los archivos de unidad personalizados se pueden colocar en {{Path|/etc/systemd/system}}, donde van a ser reconocidos después de ejecutar <tt>systemctl daemon-reload</tt>:

{{RootCmd|systemctl daemon-reload}}

{{Path|/usr/lib/systemd/system}} está reservado para los archivos de servicios instalados por el gestor de paquetes.

=== Personalizar archivos de unidad ===

Cuando solo se necesitan cambios menores en una unidad, no hay necesidad de crear una copia completa del archivo de unidad original en {{Path|/etc/systemd/system}}. Sobrescribir la configuración en una unidad proporcionada por el gestor de paquetes se puede lograr mediante archivos colocados en un directorio llamado {{Path|*.d}} precedido con el nombre de la unidad original (por ejemplo {{Path|apache2.d}}) en {{Path|/etc/systemd/system/}}.

{{FileBox|filename=/etc/systemd/system/apache2.d/mem-limit.conf|title=Ejemplo de adición/modificación de la configuración de un archivo de servicio|lang=ini|1=
[Service]
MemoryLimit{{=}}1G
}}

Se necesita una recarga de los servicios para informar a systemd de los cambios:

{{RootCmd|systemctl daemon-reload}}

A continuación, es necesario reiniciar el servicio para aplicar los cambios:

{{RootCmd|systemctl restart apache2}}

Verify that the changed property was applied to the service:

{{RootCmd|systemctl show --property{{=}}MemoryLimit apache2|output=<pre>MemoryLimit=1074000000</pre>}}

=== Activar un servicio bajo un nombre personalizado ===

When the name provided by "Alias" in the unit's "[Install]" section does not meet the expectations and providing a permanent new value for this through a [[#Customizing unit files|customization]] is not desired, a symlink can be created manually in {{Path|/etc/systemd/system/*.wants/}}. The name of the {{Path|*.wants}} directory can either specify a target or another service which will depend on the new one.

Por ejemplo, para instalar el servicio  {{Path|mysqld.service}} como {{Path|db.service}} en el target {{Path|multi-user.target}}:

{{RootCmd|ln -s /usr/lib/systemd/system/mysqld.service /etc/systemd/system/multi-user.target.wants/db.service}}

To disable the service, just remove the symlink:

{{RootCmd|rm /etc/systemd/system/multi-user.target.wants/db.service}}

=== Native services ===

Some of Gentoo packages already install systemd unit files. For these services, it is enough to enable them. A quick summary of packages installing unit files can be seen on [http://qa-reports.gentoo.org/output/eclass-usage/systemd.txt systemd eclass users list].

La siguiente tabla, lista las coincidencias de los servicios de systemd con los de OpenRC:

{| class="wikitable" style="text-align: center;"
|+ Migration chart
|-
! scope="col" | Gentoo package
! scope="col" | OpenRC service
! scope="col" | systemd unit 
! scope="col" | Notes
|-
! scope="row" rowspan="28" | {{Package|sys-apps/openrc}}
| bootmisc || systemd-tmpfiles-setup.service || always enabled, uses {{Path|tmpfiles.d}}
|-
| consolefont || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| devfs ||  || 
|-
| dmesg ||  || 
|-
| fsck || fsck*.service || pulled in implicitly by mounts
|-
| functions.sh || See note || {{Bug|373219}}
|-
| hostname || (builtin) || {{Path|/etc/hostname}}
|-
| hwclock || See note || always enabled as part of systemd (ie It is baked in and is not a unit)
|-
| keymaps || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| killprocs ||  || 
|-
| local ||  || 
|-
| localmount || local-fs.target || actual units are created implicitly from fstab
|-
| modules || systemd-modules-load.service || always enabled, uses {{Path|/etc/modules-load.d/*.conf}}
|-
| mount-ro ||  || 
|-
| mtab ||  || 
|-
| netmount || remote-fs.target || 
|-
| numlock ||  || 
|-
| procfs || (builtin) || 
|-
| root || remount-rootfs.service || 
|-
| savecache || n/a || OpenRC internals
|-
| staticroute ||  || 
|-
| swap || swap.target || actual units are created implicitly from fstab
|-
| swclock ||  || 
|-
| sysctl || systemd-sysctl.service || {{Path|sysctl.conf}} and {{Path|sysctl.d/}}
|-
| sysfs || (builtin) || 
|-
| termencoding || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| scope="row" rowspan="2" | urandom
| systemd-random-seed-load.service || 
|-
| systemd-random-seed-save.service || 
|-
! scope="row" | {{Package|app-admin/rsyslog}}
| rsyslog || rsyslog.service || 
|-
! scope="row" | {{Package|app-admin/syslog-ng}}
| syslog-ng || syslog-ng.service || 
|-
! scope="row" rowspan="2" | {{Package|media-sound/alsa-utils}}
| scope="row" rowspan="2" | alsasound
| alsa-store.service || (enabled by default)
|-
| alsa-restore.socket || (enabled by default)
|-
! scope="row" | {{Package|net-misc/dhcpcd}}
| dhcpcd || dhcpcd.service || 
|-
! scope="row" rowspan="4" | {{Package|net-misc/netifrc}} 
| scope="row" rowspan="4" | net.*
| netctl@.service || net-misc/netctl is originally an Arch Linux tool.
|-
| NetworkManager.service || For &lt;networkmanager-0.9.8.4 : enable NetworkManager-dispatcher.service for dispatcher.d scripts to work. <br/> Enable NetworkManager-wait-online.service to detect that the system has a working internet connection.<br/>Disable all other managers (e.g., wicd, dhcpcd) and wpa_supplicant.
|-
| dhcpcd.service || Provided by net-misc/dhcpcd
|-
| systemd.networkd.service || Part of systemd
|-
! scope="row" | {{Package|net-misc/openntpd}}
| ntpd || ntpd.service ||
|-
! scope="row" rowspan="2" | {{Package|net-misc/openssh}}
| scope="row" rowspan="2" | sshd
| sshd.service || runs sshd as a daemon
|-
| sshd.socket || runs sshd on a inetd-like basis (for each incoming connection)
|-
! scope="row" rowspan="2" | {{Package|net-misc/wpa_supplicant}}
| scope="row" rowspan="2" | wpa-supplicant
| wpa_supplicant.service || D-Bus controlled daemon (e.g. for NetworkManager)
|-
| wpa_supplicant@.service || interface-specific wpa_supplicant (used like {{Path|wpa_supplicant@wlan0.service}})
|-
! scope="row" rowspan="3" | {{Package|net-print/cups}}
| scope="row" rowspan="3" | cupsd
| cups.service || classic on-boot start up service
|-
| cups.socket
| scope="row" rowspan="2" | socket and path activation (cups only started on-demand)
|-
| cups.path
|-
! scope="row" | {{Package|net-wireless/bluez}}
| bluetooth || bluetooth.service || 
|-
! scope="row" rowspan="2" | {{Package|sys-apps/dbus}}
| scope="row" rowspan="2" | dbus
| dbus.service || 
|-
| dbus.socket || 
|-
! scope="row" | {{Package|sys-apps/irqbalance}}
| irqbalance || irqbalance.service || supports daemon mode only
|-
! scope="row" | {{Package|sys-apps/microcode-ctl}}
| microcode_ctl ||  || Configure ''microcode'' as a '''module''' to let it load the microcode itself. Go to "Processor type and features" -> "CPU microcode loading support" and remember to add the option you need depending on you having intel or amd processor.
|-
! scope="row" rowspan="4" | {{Package|sys-fs/udev}}
| udev || udev.service || 
|-
| udev-mount || (builtin) || <tt>/dev</tt> is mounted as tmpfs
|-
| udev-postmount || udev-trigger.service || 
|-
| || udev-settle.service || 
|-
! scope="row" | {{Package|sys-power/acpid}}
| acpid || acpid.service || Most of its functionality is done by systemd itself, then, maybe you could consider to stop enabling this
|-
! scope="row" | {{Package|x11-apps/xdm}}
| (xdm) || xdm.service || OpenRC uses common xdm init.d installed by {{Package|x11-base/xorg-server}}. With systemd you will need to enable corresponding unit file for each DM (gdm.service, kdm.service...)
|}

=== Timer services ===

Since version 197 systemd supports timers, making cron unnecessary on a systemd system. Since version 212 persistent services are supported, replacing even anacron. Persistent timers are run at the next opportunity if the system was powered down when the timer was scheduled.

The following is an example on how to make a simple timer that runs in the context of a user. It will even run if the user is not logged in. Every timed service needs a timer and a service file that is activated by the timer as follows:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.timer|title=Example of a timer running every working day|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=no
 
[Timer]
Persistent=false
OnCalendar=Mon-Fri *-*-* 11:30:00
Unit=backup-work.service
 
[Install]
WantedBy=default.target
}}

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Example of a service triggering backup|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

Firstly, tell systemd to rescan the service files:

{{Cmd|systemctl --user daemon-reload}}

It is possible to trigger the backup manually by running the following command:

{{Cmd|systemctl --user start backup-work.service}}

Start and stop the timer manually as follows:

{{Cmd|systemctl --user start backup-work.timer}}
{{Cmd|systemctl --user stop backup-work.timer}}

Finally, to activate the timer at every system start, run:

{{Cmd|systemctl --user enable backup-work.timer}}

To check the last results of running the service:

{{Cmd|systemctl --user list-timers}}

==== Emailing failures ====

If a timed service runs and fails an e-mail can be send out to inform the user or administrator. This is possible with the "OnFailure" stanza which specifies what should happen if a service fails. A failure is detected by a non-zero return code of the invoked script.

For that change the script as follows:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Example of a service triggering backup|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
OnFailure=failure-email@%i.service
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

This requires to have the service {{Path|failure-email@.service}} installed, which can be found in 
[https://github.com/kylemanna/systemd-utils/tree/master/onfailure kylemanna's systemd-utils repository].

==== Replacing cron ====

The above timer and service files can also be added to {{Path|/usr/lib/systemd/system}} to make them available system-wide. The install section should then say <code>WantedBy=multi-user.target</code> to enable the service at system start.

However, cron also runs the scripts in {{Path|/etc/cron.daily}} and other locations. Several packages place scripts there that they expect to be run daily. This behavior can be emulated with systemd by first installing {{Package|sys-process/cronbase}} and then [https://github.com/systemd-cron/systemd-cron systemd-cron]. Just run <kbd>./configure --enable-persistent</kbd> and <kbd>make</kbd>. Ignore the systemd-crontab-generator stuff if only running the files in {{Path|/etc/cron.daily}} is of interest. Just copy the files from {{Path|systemd-cron/out/build/units}} to {{Path|/usr/lib/systemd/system}}. Then ensure to adjust the path to <tt>run-parts</tt> in the service files. The <tt>run-parts</tt> script is located in gentoo at {{Path|/usr/bin/run-parts}}. Then activate the new cron replacement with the following commands:

{{RootCmd|systemctl enable cron.target}}
{{RootCmd|systemctl start cron.target}}

== Troubleshooting ==

* {{Bug|systemd|search=package}}
* {{Bug|systemd|search=product|site=fdo}}
* [http://freedesktop.org/wiki/Software/systemd/Debugging Upstream debugging guide]

=== lvm ===

When switching from OpenRC to systemd and lvm is needed to properly mount the system volumes, activate the lvm service:

{{RootCmd|systemctl enable lvm2-monitor.service}}

While it might not be needed for activation of the root volume (if lvm is integrated into the initramfs) it might not work for other lvm volumes, unless the service is activated.

=== systemd-bootchart ===

{{KernelBox|title=systemd-bootchart support|1=<pre>
File systems  --->
	Pseudo filesystems --->
	[*] /proc file system support
Kernel hacking  --->
	[*] Kernel debugging
	[*] Collect scheduler debugging info
	[*] Collect scheduler statistics
</pre>}}

As systemd-bootchart attempts to start {{Path|/sbin/init}}, reconfigure it to invoke systemd instead:

{{FileBox|filename=/etc/systemd/bootchart.conf|lang=bash|1=
...
Init=/usr/lib/systemd/systemd
...
}}

The result of the bootchart is a report in SVG format located in {{Path|/run/log/}}.

=== syslog-ng conflicts with systemd ===

systemd creates {{Path|/dev/log}} as datagram socket <ref>Jose Pedro Oliveira. [https://bugzilla.redhat.com/show_bug.cgi?id=770810#c10 Note about custom syslog-ng configurations files], [https://bugzilla.redhat.com/ Red Hat Bugzilla], January 11, 2012. Retrieved on January 12th, 2015</ref> <ref>[https://fedoraproject.org/wiki/Common_F16_bugs#systemd-syslog-ng-problems Systemd and syslog-ng interaction problems: system freezes / syslog-ng fails to start], [https://fedoraproject.org/wiki/Fedora_Project_Wiki Fedora Project Wiki]. Retrieved on January 12th, 2015</ref> so syslog-ng needs to be told to read from a ''unix-dgram'' instead of a ''unix-stream'' as otherwise syslog-ng would be using a "wrong" stream:

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# By default syslog-ng uses unix-stream. Comment this out and add unix-dgram instead.
# unix-stream('/dev/log');
unix-dgram('/dev/log');
}}

=== sys-fs/cryptsetup configuration ===

systemd doesn't seem to respect {{Path|/etc/conf.d/dmcrypt}} (see {{bug|429966}}) so it needs to be configured through the {{Path|/etc/crypttab}} file:

{{FileBox|filename=/etc/crypttab|title=Configuration file for encrypted block devices|1=
crypt-home UUID=c25dd0f3-ecdd-420e-99a8-0ff2eaf3f391 -
}}

=== Check for units that failed to start ===

Check for units that failed to start with:

{{RootCmd|systemctl --failed}}

=== Enable Debug Mode ===

To get more informations set the following in {{Path|/etc/systemd/system.conf}}:

{{FileBox|filename=/etc/systemd/system.conf|lang=bash|1=
LogLevel=debug
}}

Or enable the debug-shell, that opens a terminal at tty9. This helps to debug services during the boot process.

{{RootCmd|systemctl enable debug-shell.service}}

=== e4rat usage ===

Please remember to edit {{Path|/etc/e4rat.conf}} setting 'init' to {{Path|/usr/lib/systemd/systemd}}, otherwise it will keep booting OpenRC.

=== GRSecurity hardening ===

With grsecurity enabled, systemd-networkd might log the following error:

{{CodeBox|title=systemd-networkd error|1=could not find udev device: Permission denied}}

The error raises due to systemd-networkd working under a non-root user with grsecurity refusing access to the complete {{Path|/sys}} structure for such users. To disable this option, disable the kernel option <code>CONFIG_GRKERNSEC_SYSFS_RESTRICT</code>.

== See Also ==

* [[Comparison of init systems]]
* [[Sakaki's_EFI_Install_Guide|Sakaki's EFI Install Guide]] (particularly, the chapter on [[Sakaki's_EFI_Install_Guide/Configuring_systemd_and_Installing_Necessary_Tools|Configuring systemd and installing necessary tools]])
* [[OpenRC to Systemd Cheatsheet]]

== External resources ==

* [http://www.freedesktop.org/wiki/Software/systemd/FrequentlyAskedQuestions FAQ]
* [http://www.freedesktop.org/wiki/Software/systemd/TipsAndTricks Tips and tricks]

== References ==

{{reflist}}

[[Category:Init systems]]
