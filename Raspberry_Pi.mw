{{InfoBox stack
|{{InfoBox homepage|http://www.raspberrypi.org|header=true}}
|{{InfoBox wikipedia}}
}}
The '''Raspberry Pi''' is an ARM device (BCM2835, ARMv6) with 512 MB RAM (earlier models had 256 MB RAM) and uses an SD(HC) card for storage. This document describes how to install Gentoo on the Raspberry Pi.
[[File:Raspberry_pi_gentoo_mug.jpg|thumb|A Raspberry Pi running Gentoo]]

== Preparing the SD card ==

=== Partitioning ===
Check that your SD card is compatible: [http://elinux.org/RPi_SD_cards]

Create at least two partitions on the card. One FAT32 for the boot partition, and one (with your preferred [[filesystem]]) for the root partition:
{{ContentBox|Example partitioning|<pre>
Disk /dev/sdb: 16.6 GB, 16574840832 bytes
255 heads, 63 sectors/track, 2015 cylinders, total 32372736 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x1db42224

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1   *        2048      835379      416666    c  W95 FAT32 (LBA)
/dev/sdb2          835380    31889024    15526822+  83  Linux
/dev/sdb3        31889025    32372735      241855+   5  Extended
/dev/sdb5        31889088    32372735      241824   82  Linux swap / Solaris
</pre>}}

For optimal compatibility, it is recommended to use 255H/63S geometry: [http://elinux.org/RPi_Advanced_Setup]

 	

{{Note| SD cards are very different from rotational devices. So it is non-trivial to achieve best I/O-performance, see for example [https://lwn.net/Articles/428584] to start understanding the difficulties. Also be aware that there are a lot of contradicting advices regarding partitioning and suitable filesystems for SD cards.}}

=== boot ===
The {{Path|/boot}} partition needs the following proprietary [https://github.com/raspberrypi/firmware firmware files], provided by the Raspberry Pi foundation.
* {{Path|bootcode.bin}}
* {{Path|fixup.dat}}
* {{Path|start.elf}}
If you want to be able to boot the board with the setting ''gpu_mem=16'' in {{Path|config.txt}}, you will also need these files:
* {{Path|fixup_cd.dat}}
* {{Path|start_cd.elf}}
Create a file called {{Path|cmdline.txt}} containing the necessary kernel parameters. Example:
{{File|/mnt/raspberrypiroot/boot/cmdline.txt||<pre>
root=/dev/mmcblk0p2 rootdelay=2
</pre>}}

=== Stage 3 ===
Download the appropriate Stage 3:
{{RootCmd|wget [http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv6j_hardfp/ http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv6j_hardfp/]stage3-armv6j_hardfp-YYYYMMDD.tar.bz2}}

Extract to the root filesystem on the SD card:
{{RootCmd|tar xfpj stage3-armv6j_hardfp-YYYYMMDD.tar.bz2 -C /mnt/raspberrypiroot/}}

{{File|/mnt/raspberrypiroot/etc/portage/make.conf||<pre>
CFLAGS="-O2 -march=armv6j -mfpu=vfp -mfloat-abi=hard"
CXXFLAGS="${CFLAGS}"
</pre>}}
Don't forget to adjust [[fstab]] (the SD card is recognized as {{Path|/dev/mmcblk0}}) and add to {{Path|/etc/shadow}} the root password hash generated by:
{{RootCmd|openssl passwd -1}}

=== Stage 4 ===
If you'd prefer a self-booting Gentoo tarball (Stage 4), it can be downloaded from [http://intelminer.com/raspberrypi/ here]. Please note this image is ''outdated and unmaintained however''


[http://rpi.pa.trickhieber.de/ Alternative dd image (update 04/30/2013)].

=== Portage tree ===
Download the latest portage tree:
{{RootCmd|wget [http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2 http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2]}}

Ensure you have enough inode blocks free on the root partition. Portage takes up approximately 154K.
{{RootCmd|df -ih {{!}} egrep 'Mounted{{!}}mmc'}}

Untar portage on the SD card:
{{RootCmd|tar xjvpf portage-latest.tar.bz2 -C /mnt/raspberrypiroot/usr}}

== Compiling the kernel ==

=== crossdev ===
Install {{Package|sys-devel/crossdev}}:
{{Emerge|crossdev}}

Create a cross toolchain for ARM: (drop ''-S'' if you plan to run an unstable system):
{{RootCmd|crossdev -S -v -t armv6j-hardfloat-linux-gnueabi}}

If you get any errors or portage warnings here, please fix them. It takes a while until the cross toolchain is successfully set up, so go grab a coffee. :-)

=== Kernel and modules ===
Download kernel sources for Raspberry Pi from github [https://github.com/raspberrypi/linux] 
{{RootCmd
|git clone --depth 1 git://github.com/raspberrypi/linux.git
}}
then configure, compile and install:
{{RootCmd
|ARCH{{=}}arm make bcmrpi_cutdown_defconfig
|ARCH{{=}}arm CROSS_COMPILE{{=}}/usr/bin/armv6j-hardfloat-linux-gnueabi- make oldconfig
|ARCH{{=}}arm CROSS_COMPILE{{=}}/usr/bin/armv6j-hardfloat-linux-gnueabi- make -j2
|ARCH{{=}}arm CROSS_COMPILE{{=}}/usr/bin/armv6j-hardfloat-linux-gnueabi- make modules_install INSTALL_MOD_PATH{{=}}/mnt/raspberrypiroot/
}}

Create a {{Path|kernel.img}} file using the [https://github.com/raspberrypi/tools Raspberry Pi mkimage tool] from github:
{{RootCmd
|chmod a+x imagetool-uncompressed.py
|./imagetool-uncompressed.py arch/arm/boot/Image
|cp kernel.img /mnt/raspberrypiroot/boot/
}}
That's it! You should all be set now.

== Tips and Tricks ==
* Storage is rather slow, even with the couple of compatible SDHC class 10 cards. If you want to run emerge on the Raspberry Pi, putting {{Path|/usr/portage}} on squashfs will speed up things dramatically.
* There is no hardware RTC on the Raspberry Pi. Use the ''ntp-client'' init script to set correct [[system time]] on boot. A fallback incremental clock can be archived by ''swclock'' (replaces ''hwclock'').
* If you require more RAM for Linux, set the option gpu_mem in ''config.txt''. The smallest amount you can set is 16 MB, default is 64 MB [http://elinux.org/RPi_config.txt]
* More recent, unofficial kernel releases for the Raspberry Pi might be found at Chris Boot's repository: [https://github.com/bootc/linux/branches]
* Be sure to [http://elinux.org/RPi_Performance test the performance] - if your numbers don't match up (for instance in the LINPACK benchmark), something is very wrong.
* For instructions on how to build [[Binary package guide|binary packages]] for the Raspberry Pi on an Android phone see this blog post: [http://aspgluval.wordpress.com/2012/09/05/faster-emerge-on-the-raspberry-pi-part-i/]
* If you cannot create a working ARM cross-toolchain, a precompiled kernel image is available from the [https://github.com/raspberrypi/firmware firmware repository]. You need to place {{Path|boot/kernel.img}} in your boot partition and copy the contents of the modules directory to {{Path|/lib/modules/}} on the SD card.
* Put the root-fs on a NFS-share and put only the kernel image on SD card (PXE boot client).

== Troubleshooting ==
* Problem: dmesg is full of '''smsc95xx 1-1.1:1.0: eth0: kevent 2 may have been dropped''' and/or page allocation failure messages
** Solution: Try to update all firmware files in /boot, especially [https://github.com/raspberrypi/firmware/blob/master/boot/fixup.dat fixup.dat].
** Solution if the former fails: Add ''smsc95xx.turbo_mode=N'' to kernel parameters, or ''vm.min_free_kbytes = 4096'' to {{Path|/etc/sysctl.conf}}

* Problem: the follwing error shows up when running the command {{RootCmd|crossdev -S -v -t armv6j-hardfloat-linux-gnueabi|output=<pre>(...) configure: error: cannot compute suffix of object files: cannot compile (...)</pre>}}
** Solution: Try the following command instead: {{RootCmd|CFLAGS{{=}}"-O2 -pipe -march{{=}}armv6j -mfpu{{=}}vfp -mfloat-abi{{=}}hard" crossdev --stage3 -S -v -t armv6j-hardfloat-linux-gnueabi}}
*** Reference: https://forums.gentoo.org/viewtopic-t-946836-start-0.html

== See also ==
* [[Raspberry Pi Quick Install Guide]]
* [[Raspberry Pi Kernel Compilation]]
* [[Raspberry Pi Cross building]]

== External resources ==
* [http://www.gentoo.org/proj/en/base/embedded/handbook/ Gentoo Embedded Handbook] with more information about embedded hardware, cross compiling and other related topics.
* [http://elinux.org/R-Pi_Hub Raspberry Pi Hub] at eLinux wiki, with more advanced tutorials to get the most out of your Raspberry Pi

[[Category:Embedded systems]]
