{{InfoBox stack
|{{InfoBox homepage|http://www.raspberrypi.org|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox github|https://github.com/search?q{{=}}%22raspberry+pi%22+gentoo Raspberry Pi on|raw=true}}
}}



{{Note|Since the Raspberry Pi hardware and setup process has not changed much over the years, this article supports both the Rpi 1 and the Rpi 2. The Rpi3 is supported in 32-bit mode via the Rpi 2 process. 
<br />For Rpi3 in 64-bit mode see [[Raspberry Pi 3 64 bit Install]]. An (unofficial) bootable 64-bit Gentoo image for the RPi3 is also available; please see [[#gentoo-on-rpi3-64bit|below]] for further details.}}

This document describes how to install Gentoo on the Raspberry Pi 1, 2, and 3 in 32-bit mode.

{| class="wikitable"

| rowspan=4 style="width: 300px; vertical-align: top;" | __TOC__

|The '''Raspberry Pi''' is series of single-board computers based on [[Project:ARM|ARM]] devices. Raspberry Pi 1 is based on BCM2835 SoC and features a single core CPU (ARMv6), with 512 MB RAM. Earlier models had 256 MB RAM. 
|[[File:Raspberry_pi_gentoo_mug.jpg|250px|thumb|{{U|Chithanh}}'s Raspberry Pi 1 running Gentoo]]

|-

|'''Raspberry Pi 2''' is based on BCM2836 SoC and features a quad-core CPU (ARMv7) and 1 GB RAM. The model 1 uses an SD card for storage but the model 2 uses a microSD. All versions have a VideoCore IV GPU.

|-

|'''Raspberry Pi 3 B''' is based on BCM2837 SoC. According to {{IRC|gentoo-arm}}, although the ARMv8 CPU in the Raspberry Pi 3 B is 64-bit, almost everything else is 32-bit, and therefore only 32-bit kernels are supplied from upstream for the machine.<ref>https://github.com/raspberrypi/linux/issues/1310#issuecomment-190150884</ref> ''Those who want to build a 32-bit kernel for the Pi 3 B, follow the Raspberry Pi 2 options listed below''.  64 bit kernels are covered in the [[Raspberry Pi 3 64 bit Install]] guide.
|[[File:RPi3 with heatsinks.jpg|250px|thumb|{{U|Zucca}}'s RaspberryPi 3 B with heatsinks]]

|-

|'''Raspberry Pi Zero''' is small size single-board computer using same [[Project:ARM|ARM]] BCM2835 SoC as Raspberry Pi. Versions 1.3 and above have camera connector compatible with other Raspberry Pi cameras modules and W version has integrated WiFi module. It has 512 MB RAM and out-of-box possibility to run at 1 GHz.

|}

== Installation ==

=== Partitioning ===

The SD card must be properly prepared before installing Gentoo. Before partitioning, check to see if the SD card is listed as compatible [http://elinux.org/RPi_SD_cards in this list].

Create at ''least'' two partitions on the SD card. The {{Path|/boot}} partition should be FAT32. The root ({{Path|/}} partition can be any preferred Linux [[filesystem]], however since SD cards are flash-based media, there are many benefits to using [[F2FS]].

{{GenericCmd|output=<pre>
Disk /dev/sdb: 16.6 GB, 16574840832 bytes
255 heads, 63 sectors/track, 2015 cylinders, total 32372736 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x1db42224

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1   *        2048      835379      416666    c  W95 FAT32 (LBA)
/dev/sdb2          835380    31889024    15526822+  83  Linux
/dev/sdb3        31889025    32372735      241855+   5  Extended
/dev/sdb5        31889088    32372735      241824   82  Linux swap / Solaris
</pre>}}

For optimal compatibility, 255H/63S geometry is [http://elinux.org/RPi_Advanced_Setup recommended].

{{Note|SD cards are very different from rotational devices. So it is non-trivial to achieve best I/O-performance. See example [https://lwn.net/Articles/428584] to start understanding the difficulties. Also, be aware that there are a lot of contradicting advice regarding partitioning and suitable filesystems for SD cards.}}

=== Boot partition ===

The minimum setup for a correct {{Path|/boot}} partition requires the following [https://github.com/raspberrypi/firmware proprietary firmware files], provided by the Raspberry Pi foundation:

* {{Path|bootcode.bin}}
* {{Path|fixup.dat}}
* {{Path|start.elf}}


To boot the Raspberry Pi with <code>gpu_mem=16</code> setting in {{Path|config.txt}}, following files are required:

* {{Path|fixup_cd.dat}}
* {{Path|start_cd.elf}}


There are two video drivers for the Pi. The older one uses a fixed reserved GPU memory space. The Open Source VC4 driver uses the kernels contiguous memory allocator. Set gpu_mem=16 when you use the vc4 driver to avoid wasting RAM.     

The proprietary firmware files are just an {{c|emerge}} away:

{{Emerge|sys-boot/raspberrypi-firmware}}

{{Note|The firmware files are installed in {{Path|/boot}}. The boot partition of the SD card should be mounted on {{Path|/boot}} before emerging the {{Package|sys-boot/raspberrypi-firmware}} package.}}

If you are planning to use a custom kernel, emerge the live ebuild =sys-boot/raspberrypi-firmware-9999. This will install latest firmware directly from the repository of the RaspberryPi foundation and will not install a kernel or modules.

The firmware ebuild created a file called {{Path|cmdline.txt}} which specifeis any necessary kernel parameters. Make sure you adjust your root partition, if necessary. For example change the {{c|root}} parameter to:

{{FileBox|filename=/mnt/raspberrypiroot/boot/cmdline.txt|lang=bash|1=
root=/dev/mmcblk0p2 rootdelay=2
}}

When the file {{Path|/boot/config.txt}} does not exist, bootcode.bin defaults to sensible settings for most things
 On a Pi 1 the kernel is expected to be called kernel.img
 On a Pi 2 the kernel is expected to be called kernel7.img

 On a Pi 3 if kernel8.img exists, the Pi is put into 64 bit mode and kernel8.img is booted.
 else kernel7.img is booted.

=== Stage 3 ===

Download appropriate [[Stage_tarball#Stage_3|Stage 3]] tarball.

For Raspberry Pi A, A+, B, B+:

{{RootCmd|wget [http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv6j_hardfp/ http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv6j_hardfp/]stage3-armv6j_hardfp-YYYYMMDD.tar.bz2}}

For the Raspberry Pi 2 or a Raspberry Pi 3 running in 32-bit mode:

{{RootCmd|wget [http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv7a_hardfp/ http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv7a_hardfp/]stage3-armv7a_hardfp-YYYYMMDD.tar.bz2}}

Extract the root filesystem to SD card:

For the Raspberry Pi A, A+, B, B+:

{{RootCmd|tar xpjf stage3-armv6j_hardfp-YYYYMMDD.tar.bz2 -C /mnt/raspberrypiroot/}}

For the Raspberry Pi 2 or Raspberry Pi 3 running in 32-bit mode:

{{RootCmd|tar xpjf stage3-armv7a_hardfp-YYYYMMDD.tar.bz2 -C /mnt/raspberrypiroot/}}


Adjust the [[make.conf]] file:

{{FileBox|filename=/mnt/raspberrypiroot/etc/portage/make.conf|lang=bash|1=
# Raspberry Pi A, A+, B, B+:
CFLAGS="-O2 -march=armv6j -mfpu=vfp -mfloat-abi=hard"
CXXFLAGS="${CFLAGS}"

# Raspberry Pi 2, or Raspberry Pi 3 running in 32 bit mode:
CFLAGS="-O2 -march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard"
CXXFLAGS="${CFLAGS}"
}}


Do not forget to adjust the [[fstab]] file. The SD card is recognized as {{Path|/dev/mmcblk0}}).

Generate the root password hash:

{{RootCmd|openssl passwd -1}}

Add the hash to the {{Path|/etc/shadow}} file.

=== Stage 4 ===

[https://rpi.pa.trickhieber.de/ '''NOOBS''' image]. ''The NOOBS image will be created on a daily basis''. I'd be pleased to get feedback...

NOOBS images can be downloaded from here: [https://github.com/raspberrypi/noobs https://github.com/raspberrypi/noobs], then untar the NOOBS image from above in the OS directory ({{Path|/os/Gentoo}}).

=== Portage tree ===

Download the latest Portage tree:

{{RootCmd|wget [http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2 http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2]}}

Ensure there are enough inode blocks free on the root partition. Portage takes up approximately 181K inodes.

{{RootCmd|df -ih {{!}} grep -E 'Mounted{{!}}mmc'}}

Extract Portage to the SD card:

{{RootCmd|tar xjvpf portage-latest.tar.bz2 -C /mnt/raspberrypiroot/usr}}

=== Cross compiling ===

To aid the Raspberry Pi's low power processor and hasten the Gentoo installation process, adding another machine to help the Rpi with compile jobs is preferred. Gentoo developers have created a cross compiling tool called {{c|crossdev}} in order to assist with toolchain generation. Once the toolchain is generated on a stronger machine, the stronger machine can help with compilation tasks, which saves much time.

==== Crossdev ====

Install the {{Package|sys-devel/crossdev}} wrapper scripts:

{{Emerge|sys-devel/crossdev}}

Create the cross toolchain for ARM, specifying the correct CPU architecture for the device as follows. 

{{Note|The <code>-S</code> option can be omitted for those who wish to run an unstable or absolute bleeding-edge latest system.}}
<!--
 # NOTE: The following seems deprecated if layman and the crossdev overlay are used as above.
(make sure <var>PORTDIR_OVERLAY</var> is defined in the {{Path|make.conf}} first):
{{Note| The old method of setting the <var>PORTDIR_OVERLAY</var> variable in {{Path|make.conf}} is deprecated and should not be used.
See [[Overlay/Local_overlay|local overlay]] for more information.}}
-->

For the Raspberry Pi A, A+, B, B+:

{{RootCmd|crossdev -S -t armv6j-unknown-linux-gnueabihf}}

For the Raspberry Pi 2 or Raspberry Pi 3 B in 32-bit mode (recommended):

{{RootCmd|crossdev -S -t armv7a-unknown-linux-gnueabihf}}

For the Raspberry Pi 3 B in 64-bit mode:

{{RootCmd|crossdev -S -t aarch64-unknown-linux-gnu --genv 'USE{{=}}"cxx multilib fortran -mudflap nls openmp -sanitize"'}}

{{RootCmd
|cd /usr/aarch64-unknown-linux-gnu/etc/portage && rm make.profile && ln -s /usr/portage/profiles/default/linux/arm64/13.0/desktop make.profile
}}

{{Note|This will ensure a compile even if the host system is hardened, ie. defaults to sanitize (which does not yet work on {{Keyword|arm64}} architecture). A multilib profile may need toggled.}}

If there are any errors or Portage warnings here, please fix them. It will take a while for the cross toolchain to be successfully built. Go grab a coffee!

=== Compiling using chroot ===

It is possible to use generic x86_64 or i386 PC to chroot into existing SD card with RaspberryPi system. This approach is significantly faster than compilation on RaspberryPi (in case of using modern 4 core CPUs it gives about half of 'native' performance) and is slower (but easier) than using cross compiling approach.

To do so '''static''' installation of {{Package|app-emulation/qemu}} is needed: 

{{RootCmd
|echo app-emulation/qemu static-user qemu_user_targets_aarch64 qemu_user_targets_arm >>/etc/portage/package.use/qemu
|emerge qemu
|quickpkg qemu}}

After emerging QEMU with `static-user` USE flag qemu-arm executable needs to be copied into chrooting system:

{{RootCmd
| cd /mnt/rpi
| ROOT{{=}}$PWD/ emerge --usepkgonly --oneshot --nodeps qemu}}

Once done it is necessary to register ARM executables interpreter in running kernel:

{{RootCmd
|echo ':arm:M::\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-arm:' > /proc/sys/fs/binfmt_misc/register
|echo ':aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\xb7\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-aarch64:' > /proc/sys/fs/binfmt_misc/register}}

Before chrooting add necessary mounts to slave system:

{{RootCmd
|mount /dev/mmcblk0p1 /mnt/rpi/boot
|mount -o bind /dev /mnt/rpi/dev
|mount -o bind /proc /mnt/rpi/proc
|mount -o bind /sys /mnt/rpi/sys
|<nowiki>mount -o rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 devpts /mnt/rpi/dev/pts -t devpts</nowiki>
}}

It also wouldn't be a bad idea to make sure /etc/resolv.conf is updated so network access works properly:

{{RootCmd
|cp /etc/resolv.conf /mnt/rpi/etc/}}

Finally you can chroot into RaspberryPi system:

{{RootCmd|chroot /mnt/rpi}}

=== Kernel and modules ===

Download kernel sources for Raspberry Pi from GitHub [https://github.com/raspberrypi/linux]

{{Emerge|sys-kernel/raspberrypi-sources}}

Alternatively, to get the 'bleeding edge' Raspberry Pi kernel sources:

{{RootCmd|git clone --depth 1 git://github.com/raspberrypi/linux.git}}

==== Manual compilation ====

Configure and install kernel manually:

For the Raspberry Pi A, A+, B, B+:

<!-- Please keep this order of commands, first make then variables, do not pass ARCH or CROSS_COMPILE via the environment -->
{{RootCmd
|make ARCH{{=}}arm bcmrpi_defconfig
|make ARCH{{=}}arm CROSS_COMPILE{{=}}armv6j-unknown-linux-gnueabihf- oldconfig
|make ARCH{{=}}arm CROSS_COMPILE{{=}}armv6j-unknown-linux-gnueabihf- -j$(nproc)
|make ARCH{{=}}arm CROSS_COMPILE{{=}}armv6j-unknown-linux-gnueabihf- modules_install INSTALL_MOD_PATH{{=}}/mnt/raspberrypiroot/
}}

For the Raspberry Pi 2 or Raspberry Pi 3 B in 32-bit mode (recommended):

{{RootCmd
|make ARCH{{=}}arm bcm2709_defconfig
|make ARCH{{=}}arm CROSS_COMPILE{{=}}armv7a-unknown-linux-gnueabihf- oldconfig
|make ARCH{{=}}arm CROSS_COMPILE{{=}}armv7a-unknown-linux-gnueabihf- -j$(nproc)
|make ARCH{{=}}arm CROSS_COMPILE{{=}}armv7a-unknown-linux-gnueabihf- modules_install INSTALL_MOD_PATH{{=}}/mnt/raspberrypiroot/
}}

Alternatively, use the following command to configure the kernel manually:

{{RootCmd|make ARCH{{=}}arm menuconfig}}

==== Genkernel ====

{{c|genkernel}} can be used to cross-compile the kernel for Raspberry Pi. With {{c|genkernel}} all the preferences can be saved in {{Path|genkernel.conf}} file for later use. The values of these variables need to be changed in {{Path|/etc/genkernel-rpi.conf}}:

{{FileBox|filename=/etc/genkernel-rpi.conf|lang=bash|1=
# install kernel manually
INSTALL="no"

# Set arch to arm
ARCH_OVERRIDE="arm"

# No need to mount BOOTDIR and make symlink as the kernel is
# installed manually
MOUNTBOOT="no"
SYMLINK="no"

# Adjust this as needed for the machine.
MAKEOPTS="-j3"

# For Raspberry Pi A, A+, B, B+
UTILS_CROSS_COMPILE="armv6j-unknown-linux-gnueabihf-"
KERNEL_CROSS_COMPILE="armv6j-unknown-linux-gnueabihf-"
KERNEL_CC="armv6j-unknown-linux-gnueabihf-gcc"
KERNEL_AS="armv6j-unknown-linux-gnueabihf-as"
KERNEL_LD="armv6j-unknown-linux-gnueabihf-ld"

# For Raspberry Pi 2, or Raspberry Pi 3 B in 32-bit mode
UTILS_CROSS_COMPILE="armv7a-unknown-linux-gnueabihf-"
KERNEL_CROSS_COMPILE="armv7a-unknown-linux-gnueabihf-"
KERNEL_CC="armv7a-unknown-linux-gnueabihf-gcc"
KERNEL_AS="armv7a-unknown-linux-gnueabihf-as"
KERNEL_LD="armv7a-unknown-linux-gnueabihf-ld"

# Change this to the path of raspberrypi linux kernel sources.
# It is possible to make this a symlink pointing to the
# /usr/src/linux-rpi like it's done with a normal kernel.
# For example: ln -s /usr/src/linux-3.6.11-raspberrypi /usr/src/linux-rpi
DEFAULT_KERNEL_SOURCE="/usr/src/linux-rpi"

# Point this variable to the directory where the SD card is mounted.
# Note that the location needs to be mounted manually before running genkernel.
INSTALL_MOD_PATH="/mnt/raspberrypiroot"

# Genkernel needs access so /usr/share/genkernel (This folder contains default
# environment variables, scripts and source tarballs that enable genkernel to
# work).
GK_SHARE="${GK_SHARE:-/usr/share/genkernel}"
DISTDIR="${GK_SHARE}/distfiles"
}}

After saving the configuration file (for example to {{Path|/etc/genkernel-rpi.conf}}), mount the RaspberryPi SD card to the <var>INSTALL_MOD_PATH</var> configured above. Assuming the Raspberry Pi root partition device is {{Path|/dev/sdd3}}, run:

{{RootCmd|mount /dev/sdd3 /mnt/raspberrypiroot}}

Now execute {{c|genkernel}}. For the Raspberry Pi A, A+, B, B+:

{{RootCmd|ARCH{{=}}arm genkernel --config{{=}}/etc/genkernel-rpi.conf --kernel-config{{=}}/usr/src/linux-rpi/arch/arm/configs/bcmrpi_defconfig kernel}}

For the Raspberry Pi 2 or Raspberry Pi 3 B in 32-bit mode (recommended):

{{RootCmd|ARCH{{=}}arm genkernel --config{{=}}/etc/genkernel-rpi2.conf --kernel-config{{=}}/usr/src/linux-rpi/arch/arm/configs/bcm2709_defconfig kernel}}

Save the above command to the custom script:

{{FileBox|filename=/usr/local/bin/genkernel-rpi.sh|lang=bash|1=
#!/bin/sh
ARCH=arm genkernel --config=/etc/genkernel-rpi2.conf --kernel-config=/usr/src/linux-rpi/arch/arm/configs/bcm2709_defconfig kernel
}}

{{RootCmd|chmod +x /usr/local/bin/genkernel-rpi.sh}}

Now simply create kernel for the Raspberry Pi by executing:

{{RootCmd|genkernel-rpi.sh}}

==== Installing kernel image ====

For Raspberry Pi A, B, B+ (not 2 B!) create a {{Path|kernel.img}} file by:

{{RootCmd|cp arch/arm/boot/Image /mnt/raspberrypiroot/boot/kernel.img}}

If your Raspberry Pi does not boot with this kernel, you may have an older firmware, which requires kernel to be uncompressed. If so, you will need to:

{{Emerge|sys-boot/raspberrypi-mkimage}}

{{RootCmd|imagetool-uncompressed.py arch/arm/boot/Image /mnt/raspberrypiroot/boot/kernel.img}}

or using the [https://github.com/raspberrypi/tools Raspberry Pi mkimage tool] from GitHub:

{{RootCmd
|chmod a+x imagetool-uncompressed.py
|./imagetool-uncompressed.py arch/arm/boot/Image
|cp kernel.img /mnt/raspberrypiroot/boot/
}}

Alternatively, some devices need the zImage to be processed using the mkknlimg script.  To do this:
{{RootCmd|scripts/mkknlimg arch/arm/boot/zImage /mnt/raspberrypiroot/boot/kernel.img}}

For Raspberry Pi 2 B just copy {{Path|arch/arm/boot/zImage}} to {{Path|/boot/kernel7.img}}:

{{RootCmd|cp arch/arm/boot/zImage /mnt/raspberrypiroot/boot/kernel7.img}}

Copy the updated device tree binaries (.dtb) and device tree overlay (.dto) files into the boot partition:

{{RootCmd
|cp arch/arm/boot/dts/*.dtb /mnt/raspberrypiroot/boot/
|cp arch/arm/boot/dts/overlays/* /mnt/raspberrypiroot/boot/overlays/
}}

{{Note|The device tree files describe the hardware to the kernel. They are a part of the kernel on all arm systems}} 

{{Note|Copying the dtb files was necessary for me to get the official Raspberry Pi 7" touchscreen (input device) working.}}

That's it!

== RPi3 Specific ==

=== WiFi ===

RPi 3 and Zero W builtin WiFi driver <code>brcmfmac</code> requires binary firmware blobs {{Path|brcmfmac434*-sdio.bin}} and their corresponding configuration {{Path|brcmfmac434*-sdio.txt}} to work properly [http://unix.stackexchange.com/questions/274400/wifi-chipset-not-detected-on-rpi-3-with-gentoo]. These can be found in [https://github.com/RPi-Distro/firmware-nonfree firmware-nonfree] repository. 

Fetch the firmware repository:
{{RootCmd
|git clone --depth 1 https://github.com/RPi-Distro/firmware-nonfree
|mkdir /lib/firmware/brcm/
}}

For Raspberry Pi 3 B and Zero W, copy the necessary files
{{RootCmd
|cp firmware-nonfree/brcm/brcmfmac43430-sdio.* /lib/firmware/brcm/
}}

For Raspberry Pi 3 B+, copy the necessary files
{{RootCmd
|cp firmware-nonfree/brcm/brcmfmac43455-sdio.* /lib/firmware/brcm/
}}

=== Bluetooth ===

The Raspberry Pi 3B/Zero W needs the {{Path|BCM43430A1.hcd}} firmware file, and the Raspberry Pi 3B+ needs the {{Path|BCM4345C0.hcd}} firmware file. The firmware files can be found in the Raspbian [https://github.com/RPi-Distro/bluez-firmware/tree/master/broadcom bluez-firmware] GitHub repository. The firmware files need to be placed in the {{Path|/lib/firmware/brcm}} directory.

Create the firmware directory:

{{RootCmd|mkdir -p /lib/firmware/brcm}}

Fetch the Raspberry Pi 3B, Zero W Bluetooth firmware:

{{RootCmd|wget -P /lib/firmware/brcm <nowiki>https://raw.githubusercontent.com/RPi-Distro/bluez-firmware/master/broadcom/BCM43430A1.hcd</nowiki>}}

Fetch the Raspberry Pi 3B+ Bluetooth firmware:

{{RootCmd|wget -P /lib/firmware/brcm <nowiki>https://raw.githubusercontent.com/RPi-Distro/bluez-firmware/master/broadcom/BCM4345C0.hcd</nowiki>}}

Attach the serial device {{Path|/dev/ttyAMA0}} to the Bluetooth stack using {{C|btattach}}, which is provided by the {{Package|net-wireless/bluez}} package:

{{RootCmd|btattach -B /dev/ttyAMA0 -P bcm -S 921600 -N}}

Alternatively, {{C|hciattach}} can be used if {{Package|net-wireless/bluez}} is built with the <code>deprecated</code> USE flag enabled:

{{RootCmd|hciattach /dev/ttyAMA0 bcm43xx 921600 noflow -}}

{{Note|On the RPi3B+, [https://forums.gentoo.org/viewtopic-p-8220298.html#8220298 hardware flow control should be enabled], so use instead (e.g.):{{RootCmd|hciattach /dev/ttyAMA0 bcm43xx 3000000 flow - <bdaddr>}}}}

{{Note|The {{C|hciattach}} command may need to be repeated if it fails. There is patched version in the [https://aur.archlinux.org/packages/hciattach-rpi3 Arch Linux AUR] repository available, which may work more reliably.}}

Both commands will create a HCI device (e.g. {{Path|hci0}}) in {{Path|/sys/class/bluetooth}} and load the required firmware.

=== Serial ===

Serial port on RPi3 has some issues related to variable clock rate[https://www.raspberrypi.org/forums/viewtopic.php?f=28&t=141195][https://openenergymonitor.org/emon/node/12311]. A few workarounds/solutions are available.

=== <span id="gentoo-on-rpi3-64bit">Bootable 64-bit Gentoo Image for RPi3</span> ===

[[File:RPi-64bit-Xfce-screenshot.jpg|thumb|none|600px|Screenshot of RPi3 running 64-bit Gentoo image (Xfce)]]

Those interested in trying 64-bit Gentoo on their RPi3 (model B or B+) may wish to check out the (unofficial) bootable image available [https://github.com/sakaki-/gentoo-on-rpi3-64bit here], from which the above screenshot has been taken (see also [https://forums.gentoo.org/viewtopic-t-1058530.html this forum thread]).

Leveraging recently improved 64-bit support in the [https://github.com/raspberrypi/linux official Raspberry Pi kernel tree], the image supports:
* The Pi's onboard Ethernet, WiFi and Bluetooth adaptors;
* ALSA sound playback, via headphone jack and HDMI
* Accelerated [[Raspberry_Pi_VC4|VC4]] graphics, via [https://www.raspberrypi.org/forums/viewtopic.php?f=29&t=159853 vc4-fkms-v3d] / vc4 kernel module / Mesa.

The image contains a full Portage tree (and {{Path|/etc/portage/<...>}} set) so that you can run {{c|emerge}} operations immediately.

The project's [https://github.com/sakaki-/gentoo-on-rpi3-64bit GitHub page] additionally contains instructions for setting up [https://wiki.gentoo.org/wiki/Embedded_Handbook/General/Creating_a_cross-compiler#crossdev crossdev] and [[distcc]] to build for the 64-bit RPi3.

== VideoCore4 ==

To enable VideoCore4 GPU acceleration on RPi device add following to {{Path|/boot/config.txt}}:

{{FileBox|filename=/boot/config.txt|lang=bash|1=
dtoverlay=vc4-kms-v3d,cma-128
}}

Also you need live raspberrypi-firmware-9999 ebuild to be installed (as others seems to be outdated and not compatible with latest kernels).

Finaly, add VideoCore4 configuration to mesa and rebuild it.

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
VIDEO_CARDS="vc4"
}}

For more info refer to [[Raspberry_Pi_VC4|Raspberry Pi VideoCore4]] page.

== Tips and tricks ==

* Storage is rather slow, even with the couple of compatible SDHC class 10 cards. If emerge will be running on the Raspberry Pi, putting {{Path|/usr/portage}} on squashfs will speed up things dramatically.
* There is no hardware RTC on the Raspberry Pi. Use the {{c|ntp-client}} service to set the correct [[system time]] on boot. A fallback incremental clock can be archived by the {{c|swclock}} service (replaces the {{c|hwclock}} service).
* If more RAM is required for Linux, set the option <code>gpu_mem</code> in {{Path|config.txt}}. The smallest amount that can be set is 16 MB, default is 64 MB [http://elinux.org/RPi_config.txt]
* More recent, unofficial kernel releases for the Raspberry Pi might be found at Chris Boot's repository: [https://github.com/bootc/linux/branches]
* Be sure to [http://elinux.org/RPi_Performance test the performance] - if the numbers don't match up (for instance in the LINPACK benchmark), something is very wrong.
* For instructions on how to build [[Binary package guide|binary packages]] for the Raspberry Pi on an Android phone see this blog post: [http://aspgluval.wordpress.com/2012/09/05/faster-emerge-on-the-raspberry-pi-part-i/]
* If it is not possible to create a working ARM cross-toolchain, a precompiled kernel image is available from the [https://github.com/raspberrypi/firmware firmware repository]. The {{Path|boot/kernel.img}} needs to be places in the boot partition and the contents of the modules directory copied to {{Path|/lib/modules/}} on the SD card.
* Put the root-fs on a [[NFS]] share and put only the kernel image on SD card (PXE boot client).

== Troubleshooting ==

* Problem: dmesg is full of <code>smsc95xx 1-1.1:1.0: eth0: kevent 2 may have been dropped</code> and/or page allocation failure messages:
** Solution: Try to update all firmware files in {{Path|/boot}}, especially [https://github.com/raspberrypi/firmware/blob/master/boot/fixup.dat fixup.dat].
** Solution: If the former fails, add <code>smsc95xx.turbo_mode=N</code> to kernel parameters, or <code>vm.min_free_kbytes=4096</code> to {{Path|/etc/sysctl.conf}}

* Problem: The following error shows up when running the command:{{RootCmd|crossdev -S -t armv6j-unknown-linux-gnueabihf|output=<pre>(...) configure: error: cannot compute suffix of object files: cannot compile (...)</pre>}}
** Solution: Try the following command instead<ref>https://forums.gentoo.org/viewtopic-t-946836-start-0.html</ref>: {{RootCmd|CFLAGS{{=}}"-O2 -pipe -march{{=}}armv6j -mfpu{{=}}vfp -mfloat-abi{{=}}hard" crossdev --stage3 -S -t armv6j-unknown-linux-gnueabihf}}

* Problem: On-board audio is inaccessible / non-functional.
** Solution: Ensure that your {{Path|/boot/config.txt}} contains the line <code>dtparam=audio=on</code>, then reboot. Ensure that the PCM channel is unmuted.

== See also ==

* [[Raspberry Pi/Quick Install Guide]]
* [[Raspberry Pi/Kernel Compilation]]
* [[Raspberry Pi/Mainline Kernel]]
* [[Raspberry Pi/Cross building]]
* [[Embedded Handbook|Gentoo Embedded Handbook]] - More information about embedded hardware, cross compiling, and other related topics.
* [[Raspberry Pi/Minimal_musl%2Bbusybox_cross_building]] - Build a minimal system using libressl, musl libc and busybox. 
* [[Raspberry Pi VC4]] - Enable GPU acceleration with the VC4 driver

== External resources ==

* [http://elinux.org/R-Pi_Hub Raspberry Pi Hub] at eLinux wiki, with more advanced tutorials to get the most out of the Raspberry Pi
* [http://grbd.github.io/GBD.Rpi2.Gentoo grbd@github: Putting Gentoo onto a RPI2] How-To install Gentoo Linux from [https://www.raspberrypi.org/downloads/noobs/ Raspbian/NOOBS] in an external USB disk in a Raspberry Pi 2.
* [https://github.com/dervishe-/genBerry genBerry] Sort of Gentoo stage 4 for RaspberryPi with several tools.
* [https://rpi.pa.trickhieber.de/ gentoobs] Gentoo on [https://www.raspberrypi.org/downloads/noobs/ NOOBS].
* [https://github.com/sakaki-/gentoo-on-rpi3-64bit gentoo-on-rpi3-64bit] Bootable 64-bit Gentoo image for RPi3. 
* [http://www.gundo.com/gentoo-pi gentoo-pi] maintained base headless Gentoo image, with distcc and sshd enabled.

== Books ==

* Heitz, Ryan. [http://www.manning.com/heitz/ Hello! Raspberry Pi]. Manning Publications (2015). pp. 225. ISBN 9781617292453

== References ==

{{reflist}}

[[Category:Embedded systems]]
