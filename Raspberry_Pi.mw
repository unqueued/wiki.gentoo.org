{{InfoBox stack
|{{InfoBox homepage|http://www.raspberrypi.org|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox github|https://github.com/search?q{{=}}%22raspberry+pi%22+gentoo Raspberry Pi on|raw=true}}
}}

[[File:Raspberry_pi_gentoo_mug.jpg|280px|thumb|{{User|Chithanh}}'s Raspberry Pi 1 running Gentoo]]

{{Note|Since the Raspberry Pi hardware and setup process has not changed much over the years, this article supports both the Rpi 1 and the Rpi 2. The Rpi3 is supported in 32 bit mode via the Rpi 2 process, while Rpi3 in 64 bit mode has issues and remains unstable and is not recommended.}}

The '''Raspberry Pi''' is series of single-board computers based on [[Project:ARM|ARM]] devices. Raspberry Pi 1 is based on BCM2835 SoC and features a single core CPU (ARMv6), with 512 MB RAM. Earlier models had 256 MB RAM. 

'''Raspberry Pi 2''' is based on BCM2836 SoC and features a quad-core CPU (ARMv7) and 1 GB RAM. The model 1 uses an SD card for storage but the model 2 uses a microSD. All versions have a VideoCore IV GPU.

This document describes how to install Gentoo on the Raspberry Pi 1 and 2.

== Preparing the SD card ==

=== Partitioning ===

Check that SD card is compatible[http://elinux.org/RPi_SD_cards].

Create at least two partitions on the SD card - boot partition should be FAT32, and root partition can be any preferred [[filesystem]].

{{GenericCmd|output=<pre>
Disk /dev/sdb: 16.6 GB, 16574840832 bytes
255 heads, 63 sectors/track, 2015 cylinders, total 32372736 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x1db42224

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1   *        2048      835379      416666    c  W95 FAT32 (LBA)
/dev/sdb2          835380    31889024    15526822+  83  Linux
/dev/sdb3        31889025    32372735      241855+   5  Extended
/dev/sdb5        31889088    32372735      241824   82  Linux swap / Solaris
</pre>}}

For optimal compatibility, it is recommended[http://elinux.org/RPi_Advanced_Setup] to use 255H/63S geometry.

{{Note|SD cards are very different from rotational devices. So it is non-trivial to achieve best I/O-performance. See example [https://lwn.net/Articles/428584] to start understanding the difficulties. Also, be aware that there are a lot of contradicting advice regarding partitioning and suitable filesystems for SD cards.}}

=== Boot partition ===

The {{Path|/boot}} partition needs the following proprietary [https://github.com/raspberrypi/firmware firmware files], provided by the Raspberry Pi foundation:
* {{Path|bootcode.bin}}
* {{Path|fixup.dat}}
* {{Path|start.elf}}


To boot the Raspberry Pi with <code>gpu_mem=16</code> setting in {{Path|config.txt}}, following files are required:
* {{Path|fixup_cd.dat}}
* {{Path|start_cd.elf}}


Create a file called {{Path|cmdline.txt}} to specify necessary kernel parameters. Example:

{{FileBox|filename=/mnt/raspberrypiroot/boot/cmdline.txt|lang=bash|1=
root=/dev/mmcblk0p2 rootdelay=2
}}


These are available as:

{{RootCmd
|emerge sys-boot/raspberrypi-firmware
}}
{{Note|The firmware files are installed in /boot. The boot partition of the SD card should be mounted on /boot before emerging sys-boot/raspberrypi-firmware.}}

=== Stage 3 ===

Download appropriate [[Stage_tarball#Stage_3|Stage 3]].

For Raspberry Pi A, A+, B, B+:
{{RootCmd|wget [http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv6j_hardfp/ http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv6j_hardfp/]stage3-armv6j_hardfp-YYYYMMDD.tar.bz2}}

For Raspberry Pi 2:
{{RootCmd|wget [http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv7a_hardfp/ http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv7a_hardfp/]stage3-armv7a_hardfp-YYYYMMDD.tar.bz2}}

Extract root filesystem to SD card:

For Raspberry Pi A, A+, B, B+:
{{RootCmd|tar xpjf stage3-armv6j_hardfp-YYYYMMDD.tar.bz2 -C /mnt/raspberrypiroot/}}

For Raspberry Pi 2:
{{RootCmd|tar xpjf stage3-armv7a_hardfp-YYYYMMDD.tar.bz2 -C /mnt/raspberrypiroot/}}

Adjust [[make.conf]]:

{{FileBox|filename=/mnt/raspberrypiroot/etc/portage/make.conf|lang=bash|1=
# Raspberry Pi A, A+, B, B+:
CFLAGS="-O2 -march=armv6j -mfpu=vfp -mfloat-abi=hard"
CXXFLAGS="${CFLAGS}"

# Raspberry Pi 2:
CFLAGS="-O2 -march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard"
CXXFLAGS="${CFLAGS}"
}}

Do not forget to adjust [[fstab]]. The SD card is recognized as {{Path|/dev/mmcblk0}}).

Generate the root password hash by:

{{RootCmd|openssl passwd -1}}

Add this hash to {{Path|/etc/shadow}}.

=== Stage 4 ===

There is also an option of a self-booting Gentoo tarball (Stage 4), it can be downloaded from [http://intelminer.com/raspberrypi/ here]. Please note this image is ''outdated and unmaintained however''

[https://rpi.pa.trickhieber.de/ '''NOOBS''' image]. ''The NOOBS image will be created on a daily basis''. I'd be pleased to get feedback...

NOOBS images can be downloaded from here: [https://github.com/raspberrypi/noobs https://github.com/raspberrypi/noobs], then untar the NOOBS image from above in the OS directory ({{Path|/os/Gentoo}}).

=== Portage tree ===

Download the latest portage tree:

{{RootCmd|wget [http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2 http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2]}}

Ensure there are enough inode blocks free on the root partition. Portage takes up approximately 181K.

{{RootCmd|df -ih {{!}} grep -E 'Mounted{{!}}mmc'}}

Untar portage on the SD card:

{{RootCmd|tar xjvpf portage-latest.tar.bz2 -C /mnt/raspberrypiroot/usr}}

== Compiling the kernel ==

=== crossdev ===

First, install [[Layman]] if you haven't already.

Next, add the <code>crossdev</code> overlay:

{{RootCmd|layman -L && layman -a crossdev}}

Now, install {{Package|sys-devel/crossdev}}:

{{Emerge|sys-devel/crossdev}}

Now create the cross toolchain for ARM, specifying the correct CPU architecture for your device as follows. 

{{Note| You can omit the '''-S''' argument if you wish to run an unstable or absolute bleeding-edge latest system.}}
<!--
 # NOTE: The following seems deprecated if layman and the crossdev overlay are used as above.
(make sure <var>PORTDIR_OVERLAY</var> is defined in the {{Path|make.conf}} first):
{{Note| The old method of setting the <var>PORTDIR_OVERLAY</var> variable in {{Path|make.conf}} is deprecated and should not be used.
See [[Overlay/Local_overlay|local overlay]] for more information.}}
-->

For Raspberry Pi A, A+, B, B+:
{{RootCmd|crossdev -S -v -t armv6j-hardfloat-linux-gnueabi}}

For Raspberry Pi 2:
{{RootCmd|crossdev -S -v -t armv7a-hardfloat-linux-gnueabi}}

For Raspberry Pi 3 B it gets complicated.

According to <code>#gentoo-arm</code>, although the ARMv8 CPU in the Raspberry Pi 3 B is 64 bit, almost everything else is 32 bit, and usually therefore 32 bit kernels are supplied for the machine. (See also [https://www.reddit.com/r/archlinux/comments/48fu0v/help_building_an_arm64_bcm2837raspberry_pi_3_arch/ reddit], official statement "we'll be running the Pi3 in 32-bit mode until we have a good reason not to - two kernels is enough to manage" ([https://github.com/raspberrypi/linux/issues/1310#issuecomment-190150884 github]). To boot a 64 bit kernel, it is necessary to add the ''arm_control=0x200'' kernel boot argument.)

Therefore, for the Raspberry Pi 3 B, if you want to build a 32 bit kernel, do it as per the Raspberry Pi 2. If you want to try to build a 64 bit kernel, then it will be a mainline kernel, very few people can help you, you are entering a world of pain, lots doesn't work (Firefox, Wifi), you must add the ''arm_control=0x200'' boot argument, and the following has been recommended:
{{RootCmd|crossdev -S -v -t aarch64-unknown-linux-gnu}}

This command also succeeded in building but was not recommended (no reasoning given):
{{RootCmd|crossdev -S -v -t armv8-hardfloat-linux-gnueabi}}

If there are any errors or portage warnings here, please fix them. It takes a while until the cross toolchain is successfully set up, so go grab a coffee. :-)

=== Kernel and modules ===

Download kernel sources for Raspberry Pi from GitHub [https://github.com/raspberrypi/linux]
 
{{RootCmd
|emerge sys-kernel/raspberrypi-sources
}}

Alternatively:

{{RootCmd
|git clone --depth 1 git://github.com/raspberrypi/linux.git
}}

==== Manual compilation ====

Configure and install kernel manually:

For Raspberry Pi A, A+, B, B+:

{{RootCmd
|ARCH{{=}}arm make bcmrpi_defconfig
|ARCH{{=}}arm CROSS_COMPILE{{=}}armv6j-hardfloat-linux-gnueabi- make oldconfig
|ARCH{{=}}arm CROSS_COMPILE{{=}}armv6j-hardfloat-linux-gnueabi- make -j$(nproc)
|ARCH{{=}}arm CROSS_COMPILE{{=}}armv6j-hardfloat-linux-gnueabi- make modules_install INSTALL_MOD_PATH{{=}}/mnt/raspberrypiroot/
}}

For Raspberry Pi 2:

{{RootCmd
|ARCH{{=}}arm make bcm2709_defconfig
|ARCH{{=}}arm CROSS_COMPILE{{=}}armv7a-hardfloat-linux-gnueabi- make oldconfig
|ARCH{{=}}arm CROSS_COMPILE{{=}}armv7a-hardfloat-linux-gnueabi- make -j$(nproc)
|ARCH{{=}}arm CROSS_COMPILE{{=}}armv7a-hardfloat-linux-gnueabi- make modules_install INSTALL_MOD_PATH{{=}}/mnt/raspberrypiroot/
}}

==== Using genkernel ====

Genkernel can be used to crosscompile kernel for Raspberry Pi. With genkernel all the preferences can be saved in {{Path|genkernel.conf}} file for later use. The values of these variables need to be changed in {{Path|genkernel.conf}}:

{{FileBox|filename=genkernel-rpi.conf|lang=bash|1=
# install kernel manually
INSTALL="no"

# Set arch to arm
ARCH_OVERRIDE="arm"

# No need to mount BOOTDIR and make symlink as the kernel is
# installed manually
MOUNTBOOT="no"
SYMLINK="no"

# Adjust this as needed for the machine.
MAKEOPTS="-j3"

# For Raspberry Pi A, A+, B, B+
UTILS_CROSS_COMPILE="armv6j-hardfloat-linux-gnueabi-"
KERNEL_CROSS_COMPILE="armv6j-hardfloat-linux-gnueabi-"

# For Raspberry Pi 2
UTILS_CROSS_COMPILE="armv7a-hardfloat-linux-gnueabi-"
KERNEL_CROSS_COMPILE="armv7a-hardfloat-linux-gnueabi-"

# Change this to the path of raspberrypi linux kernel sources.
# It is possible to make this a symlink pointing to the
# /usr/src/linux-rpi like it's done with a normal kernel.
# For example: ln -s /usr/src/linux-3.6.11-raspberrypi /usr/src/linux-rpi
DEFAULT_KERNEL_SOURCE="/usr/src/linux-rpi"

# Point this variable to the directory where the SD card is mounted.
# Note that the location needs to be mounted manually before running genkernel.
INSTALL_MOD_PATH="/mnt/raspberrypiroot"
}}

After saving the configuration file (for example to {{Path|/etc/genkernel-rpi.conf}}), mount the RaspberryPi SD card to the <var>INSTALL_MOD_PATH</var> configured above. Assuming the Raspberry Pi root partition device is {{Path|/dev/sdd3}}, run:

{{RootCmd|mount /dev/sdd3 /mnt/raspberrypiroot}}

Now execute genkernel. For Raspberry Pi A, A+, B, B+:

{{RootCmd|ARCH{{=}}arm genkernel --config{{=}}/etc/genkernel-rpi.conf --kernel-config{{=}}/usr/src/linux-rpi/arch/arm/configs/bcmrpi_defconfig kernel}}

For Raspberry Pi 2:

{{RootCmd|ARCH{{=}}arm genkernel --config{{=}}/etc/genkernel-rpi2.conf --kernel-config{{=}}/usr/src/linux-rpi/arch/arm/configs/bcm2709_defconfig kernel}}

Save the above command to the custom script:

{{FileBox|filename=/usr/local/bin/genkernel-rpi.sh|lang=bash|1=
#!/bin/sh
ARCH=arm genkernel --config=/etc/genkernel-rpi2.conf --kernel-config=/usr/src/linux-rpi/arch/arm/configs/bcm2709_defconfig kernel
}}

{{RootCmd|chmod +x /usr/local/bin/genkernel-rpi.sh}}

Now simply create kernel for the Raspberry Pi by executing:

{{RootCmd|genkernel-rpi.sh}}

==== Installing kernel image ====

For Raspberry Pi A, B, B+ (Not 2 B) create a {{Path|kernel.img}} file by:

{{RootCmd
|emerge sys-boot/raspberrypi-mkimage
|imagetool-uncompressed.py arch/arm/boot/Image /mnt/raspberrypiroot/boot/kernel.img
}}

or using the [https://github.com/raspberrypi/tools Raspberry Pi mkimage tool] from GitHub:

{{RootCmd
|chmod a+x imagetool-uncompressed.py
|./imagetool-uncompressed.py arch/arm/boot/Image
|cp kernel.img /mnt/raspberrypiroot/boot/
}}

Raspberry Pi 2 B just copy {{Path|arch/arm/boot/zImage}} to {{Path|/boot/kernel7.img}}
{{RootCmd
|cp arch/arm/boot/zImage /mnt/raspberrypiroot/boot/kernel7.img
}}

It may be necessary to copy updated dtb files into the boot partition, too:

{{RootCmd
|cp arch/arm/boot/dts/*.dtb /mnt/raspberrypiroot/boot/
|cp arch/arm/boot/dts/overlays/*.dtb* /mnt/raspberrypiroot/boot/overlays/
|cp arch/arm/boot/dts/overlays/README /mnt/raspberrypiroot/boot/overlays/
}}

{{Note|Copying the dtb files was necessary for me to get the official Raspberry Pi 7" touchscreen (input device) working.}}

That's it!

== Tips and tricks ==

* Storage is rather slow, even with the couple of compatible SDHC class 10 cards. If emerge will be running on the Raspberry Pi, putting {{Path|/usr/portage}} on squashfs will speed up things dramatically.

* There is no hardware RTC on the Raspberry Pi. Use the {{c|ntp-client}} service to set the correct [[system time]] on boot. A fallback incremental clock can be archived by the {{c|swclock}} service (replaces the {{c|hwclock}} service).

* If more RAM is required for Linux, set the option gpu_mem in {{Path|config.txt}}. The smallest amount that can be set is 16 MB, default is 64 MB [http://elinux.org/RPi_config.txt]

* More recent, unofficial kernel releases for the Raspberry Pi might be found at Chris Boot's repository: [https://github.com/bootc/linux/branches]

* Be sure to [http://elinux.org/RPi_Performance test the performance] - if the numbers don't match up (for instance in the LINPACK benchmark), something is very wrong.

* For instructions on how to build [[Binary package guide|binary packages]] for the Raspberry Pi on an Android phone see this blog post: [http://aspgluval.wordpress.com/2012/09/05/faster-emerge-on-the-raspberry-pi-part-i/]

* If it is not possible to create a working ARM cross-toolchain, a precompiled kernel image is available from the [https://github.com/raspberrypi/firmware firmware repository]. The {{Path|boot/kernel.img}} needs to be places in the boot partition and the contents of the modules directory copied to {{Path|/lib/modules/}} on the SD card.

* Put the root-fs on a [[NFS]] share and put only the kernel image on SD card (PXE boot client).

== Troubleshooting ==

* Problem: dmesg is full of <code>smsc95xx 1-1.1:1.0: eth0: kevent 2 may have been dropped</code> and/or page allocation failure messages:
** Solution: Try to update all firmware files in {{Path|/boot}}, especially [https://github.com/raspberrypi/firmware/blob/master/boot/fixup.dat fixup.dat].
** Solution: If the former fails, add <code>smsc95xx.turbo_mode=N</code> to kernel parameters, or <code>vm.min_free_kbytes=4096</code> to {{Path|/etc/sysctl.conf}}

* Problem: The following error shows up when running the command:{{RootCmd|crossdev -S -v -t armv6j-hardfloat-linux-gnueabi|output=<pre>(...) configure: error: cannot compute suffix of object files: cannot compile (...)</pre>}}
** Solution: Try the following command instead<ref>https://forums.gentoo.org/viewtopic-t-946836-start-0.html</ref>: {{RootCmd|CFLAGS{{=}}"-O2 -pipe -march{{=}}armv6j -mfpu{{=}}vfp -mfloat-abi{{=}}hard" crossdev --stage3 -S -v -t armv6j-hardfloat-linux-gnueabi}}

== See also ==

* [[Raspberry Pi/Quick Install Guide]]
* [[Raspberry Pi/Kernel Compilation]]
* [[Raspberry Pi/Cross building]]
* [[Embedded Handbook|Gentoo Embedded Handbook]] - More information about embedded hardware, cross compiling, and other related topics.

== External resources ==

* [http://elinux.org/R-Pi_Hub Raspberry Pi Hub] at eLinux wiki, with more advanced tutorials to get the most out of the Raspberry Pi
* [https://github.com/grbd/GBD.Rpi2.Gentoo grbd@github: Putting Gentoo onto a RPI2] How-To install Gentoo Linux from [https://www.raspberrypi.org/downloads/noobs/ Raspbian/NOOBS] in an external USB disk in a Raspberry Pi 2.
* [https://github.com/dervishe-/genBerry genBerry] Sort of Gentoo stage 4 for RaspberryPi with several tools.
* [https://rpi.pa.trickhieber.de/ gentoobs] Gentoo on [https://www.raspberrypi.org/downloads/noobs/ NOOBS].

== Books ==

* Heitz, Ryan. [http://www.manning.com/heitz/ Hello! Raspberry Pi]. Manning Publications (2015). pp. 225. ISBN 9781617292453

== References ==

{{reflist}}

[[Category:Embedded systems]]
