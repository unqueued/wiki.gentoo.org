This article describes the process of updating the microcode on Intel processors.

== Installation ==
{{Note|The microcode-ctl utility has been deprecated as of version 1.28-r1(Gentoo unstable) and no longer contains the init script. It also does not work on certain CPUs such as Intel Haswells, you should switch to the "Early microcode" method explained directly below. If however you wish to continue using microcode-ctl please skip to the "Microcode-ctl" section near the bottom of this page.}}

=== Kernel ===
You need to activate the following kernel options:
{{KernelBox|title=Enable CONFIG_MICROCODE and CONFIG_MICROCODE_INTEL|<pre>
Processor type and features  --->
    <*> CPU microcode loading support
    [*]   Intel microcode loading support
</pre>}}
{{Note|Modules don't work for early microcode, so make sure microcode loading is built-in.}}

=== Software ===
You can now install the microcode {{Package|sys-firmware/intel-microcode}}
{{Emerge|intel-microcode}}
And a tool to manipulate it {{Package|sys-apps/iucode_tool}}
{{Emerge|iucode_tool}}


== Configuration ==
After emerging {{Package|sys-apps/intel-microcode}}, generate the microcode cpio archive using {{Package|sys-apps/iucode_tool}}:

{{RootCmd|1=iucode_tool -S --write-earlyfw=/boot/early_ucode.cpio /lib/firmware/intel-ucode/*
|output=<pre>iucode_tool: system has processor(s) with signature 0x000306c3
iucode_tool: Writing selected microcodes to: /boot/early_ucode.cpio</pre>}}

Now you need to change this small section of /etc/grub.d/10_linux from:
{{FileBox|filename=/etc/grub.d/10_linux|title=Before|lang=bash|1=
  initrd=
  for i in "initrd.img-${version}" "initrd-${version}.img" "initrd-${version}.gz" \
           "initrd-${version}" "initramfs-${version}.img" \
           "initrd.img-${alt_version}" "initrd-${alt_version}.img" \
           "initrd-${alt_version}" "initramfs-${alt_version}.img" \
           "initramfs-genkernel-${version}" \
           "initramfs-genkernel-${alt_version}" \
           "initramfs-genkernel-${GENKERNEL_ARCH}-${version}" \
           "initramfs-genkernel-${GENKERNEL_ARCH}-${alt_version}"; do
    if test -e "${dirname}/${i}" ; then
      initrd="$i"
      break
    fi
  done}}
To this:
{{FileBox|filename=/etc/grub.d/10_linux|title=After|lang=bash|1=
  initrd=
  for i in "initrd.img-${version}" "initrd-${version}.img" "initrd-${version}.gz" \
           "initrd-${version}" "initramfs-${version}.img" \
           "initrd.img-${alt_version}" "initrd-${alt_version}.img" \
           "initrd-${alt_version}" "initramfs-${alt_version}.img" \
           "initramfs-genkernel-${version}" \
           "initramfs-genkernel-${alt_version}" \
           "initramfs-genkernel-${GENKERNEL_ARCH}-${version}" \
           "initramfs-genkernel-${GENKERNEL_ARCH}-${alt_version}"; do
    if test -e "${dirname}/${i}" ; then
      initrd="early_ucode.cpio /$i"
      break
    else
      initrd="early_ucode.cpio"
    fi
  done}}
{{Note|This is the most pain-free method I've found to load the microcode, works with or without an initramfs.}}
Regenerate your grub.cfg with:
{{RootCmd|1=grub2-mkconfig -o /boot/grub/grub.cfg
|output=<pre>Generating grub configuration file ...
Found linux image: /boot/vmlinuz-4.6.3-gentoo
Found initrd image: /boot/early_ucode.cpio /initramfs-genkernel-x86_64-4.6.3-gentoo
done</pre>}}
{{Note|This is similar to what you should see, minus the initramfs if you do not have one.}}
Reboot and you're all done.


== Verification ==
Here is an example of a CPU with no available microcode updates or the system was not configued to load them properly:
{{RootCmd|1=<nowiki>dmesg | grep microcode</nowiki>
|output=<pre>[    1.196567] microcode: CPU0 sig=0x6fd, pf=0x80, revision=0xa3
[    1.196575] microcode: CPU1 sig=0x6fd, pf=0x80, revision=0xa3
[    1.196623] microcode: Microcode Update Driver: v2.01 <tigran@aivazian.fsnet.co.uk>, Peter Oruba
</pre>}}
Here is the same CPU but with microcode updates being applied successfully:
{{RootCmd|1=<nowiki>dmesg | grep microcode</nowiki>
|output=<pre>[    0.000000] microcode: microcode updated early to revision 0xa4, date = 2010-10-02
[    1.207385] microcode: CPU0 sig=0x6fd, pf=0x80, revision=0xa4
[    1.207393] microcode: CPU1 sig=0x6fd, pf=0x80, revision=0xa4
[    1.207445] microcode: Microcode Update Driver: v2.01 <tigran@aivazian.fsnet.co.uk>, Peter Oruba
</pre>}}


== Microcode-ctl ==
{{Note|The microcode-ctl utility has been deprecated as of 1.28-r1(Gentoo unstable) and will no longer contain the init script. It also does not work on certain CPUs such as Intel Haswells, the information below this point is only relevant to microcode-ctl users.}}

=== Kernel ===
You need to activate the following kernel options:
{{KernelBox|title=Enable CONFIG_MICROCODE and CONFIG_MICROCODE_INTEL|<pre>
Processor type and features  --->
    <M> CPU microcode loading support
    [*]   Intel microcode loading support
</pre>}}

{{Note|If you build it as module, it will automatically get loaded as needed and then unloaded after microcode update saving some memory.}}

=== Software ===
You can now install {{Package|sys-apps/microcode-ctl}}:
{{Emerge|microcode-ctl}}

=== OpenRC ===
You can now start microcode-ctl:
{{RootCmd|/etc/init.d/microcode_ctl start}}
To start microcode-ctl at boot time, add it your boot runlevel:
{{RootCmd|rc-update add microcode_ctl boot}}
{{Note|Using boot runlevel ensures the CPU is updated as soon as possible.}}

=== systemd ===
See: [[Systemd]]. Simply make sure that the Microcode loader is set as a module in the kernel configuration as noted above.  You don't need to add a service or do anything else.


== See also ==
* [[Intel]] - More Intel information for Gentoo users.
[[Category:Processors]]
