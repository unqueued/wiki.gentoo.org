This article describes the setup of microcode-ctl to update the microcode of Intel processors.

== Installation ==

=== Kernel ===
You need to activate the following kernel options:
{{KernelBox|title=Enable CONFIG_MICROCODE and CONFIG_MICROCODE_INTEL|<pre>
Processor type and features  --->
    <M> CPU microcode loading support
    [*]   Intel microcode loading support
</pre>}}

{{Note|If you build it as module, it will automatically get loaded as needed and then unloaded after microcode update saving some memory.}}

=== Software ===
You can now install {{Package|sys-apps/microcode-ctl}}<ref>[https://fedorahosted.org/microcode_ctl/ https://fedorahosted.org/microcode_ctl/]<pre>Please be advised microcode_ctl is obsolete and v2.0+ is the temporary solution. Future microcode updates will be delivered through the kernel-firmware infrastructure.</pre></ref>:
{{Emerge|microcode-ctl}}

== Configuration ==

=== OpenRC ===
You can now start microcode-ctl:
{{RootCmd|/etc/init.d/microcode_ctl start}}
To start microcode-ctl at boot time, add it your boot runlevel:
{{RootCmd|rc-update add microcode_ctl boot}}
{{Note|Using boot runlevel ensures the CPU is updated as soon as possible.}}

=== systemd ===
See: [[Systemd]]. Simply make sure that the Microcode loader is set as a module in the kernel configuration as noted above.  You don't need to add a service or do anything else.

== Verification ==
In order to verify if the CPU microcode is being applied you can use the following command:
{{RootCmd|<nowiki>dmesg | grep microcode</nowiki>|output=<pre>
[    0.093399] microcode: CPU0 sig=0x1067a, pf=0x1, revision=0xa07
[    0.093459] microcode: CPU1 sig=0x1067a, pf=0x1, revision=0xa07
[    0.093557] microcode: Microcode Update Driver: v2.00 <tigran@aivazian.fsnet.co.uk>, Peter Oruba
[    7.502437] microcode: CPU0 sig=0x1067a, pf=0x1, revision=0xa07
[    7.503000] microcode: CPU0 updated to revision 0xa0b, date = 2010-09-28
[    7.507419] microcode: CPU1 sig=0x1067a, pf=0x1, revision=0xa07
[    7.508417] microcode: CPU1 updated to revision 0xa0b, date = 2010-09-28
</pre>}}
In this example the microcode of a dual-core Intel CPU has been successfully updated from revision 0xa07 to revision 0xa0b.

== Early Microcode ==

Some CPUs (like Haswell) require loading microcode before everything else, as the update causes system instability otherwise. For that reason the kernel supports early microcode loading.

{{KernelBox|title=<nowiki>CONFIG_MICROCODE_EARLY=y</nowiki>|1=<pre>
Processor type and features  --->
    <*> CPU microcode loading support
      [*]   Intel microcode loading support
      [ ]   AMD microcode loading support
    [*] Early load microcode
</pre>}}

{{Note|Modules don't work for early microcode, so make sure microcode loading is built-in.}}

After emerging {{Package|sys-apps/microcode-data}}, generate the microcode cpio archive using [https://gitlab.com/iucode-tool/releases/tree/latest <tt>iucode_tool</tt>]:

{{RootCmd|1=iucode_tool -S --write-earlyfw=/boot/early-ucode.cpio /lib/firmware/intel-ucode/*
|output=<pre>iucode_tool: system has processor(s) with signature 0x000306c3
iucode_tool: Writing selected microcodes to: /boot/early-ucode.cpio</pre>}}

Add it to your bootloader:

{{FileBox|filename=/boot/grub/grub.cfg|title=Early Microcode Initrd|lang=bash|1=
linux /boot/your-bzImage
initrd /boot/early-ucode.cpio}}

If you're already using another initrd, you can specify several of them in your bootloader or, if your bootloader does not support that, merge them yourself using <tt>cat</tt>. The early microcode might be ignored if it's not the first initrd, though.

== References ==
{{reflist}}
[[Category:Processors]]
