<languages />

{{Metadata|abstract=This document describes how to use SSH shared keys along with the keychain program. It assumes basic knowledge of public key cryptography.}}

This document describes how to use SSH shared keys along with the keychain program. It assumes basic knowledge of public key cryptography.

== Background ==

=== The problem at hand ===

Having to type in login passwords on each and every system is inconvenient, especially if many systems are being managed. Some administrators might even have a need for a script or cron-job that needs a convenient way to use an ssh connection. Either way, there is a solution to this problem, and it begins with public key authentication. 

=== How does public key authentication work? ===

Assume that a client wants to connect to the ssh daemon on a server. The client first generates a key pair and gives the public key to the server. Afterwards, whenever the client attempts to connect, the server sends a challenge that is encrypted with that public key. Only the holder of the corresponding private key (the client) is able to decrypt it, so the correct response leads to successful authentication. 

== How to use public key authentication ==

=== Generating a key pair ===

The first step is to create a key pair. To do this, use the {{c|ssh-keygen}} command: 

{{Cmd|ssh-keygen}}

Accept the default values, and make sure to enter a strong passphrase.

{{Warning|Be sure to choose a strong passphrase, especially if this key is used for root logins!}}

After the generation has ended a private key should be located at {{Path|~/.ssh/id_rsa}} and a public key in {{Path|~/.ssh/id_rsa.pub}}. The public key is now ready to be copied to the remote host.

=== Preparing the server ===

The {{Path|~/.ssh/id_rsa.pub}} file needs to be copied over to the server running {{c|sshd}}. It has to be added to the {{Path|~/.ssh/authorized_keys}} file that belongs the connecting user on the remote server. After {{c|ssh}} access to the server has been granted by infrastructure personnel, the following steps can be used to setup automatic login using a public key on the remote server:

{{Cmd|ssh-copy-id server_user@server -i ~/.ssh/id_rsa.pub}}

{{c|ssh-copy-id}} is a wrapper script for these steps. If this wrapper script is unavailable, then the following steps can be used:

{{Cmd|scp ~/.ssh/id_rsa.pub server_user@server:~/myhost.pub
|ssh server_user@server "cat ~/myhost.pub &gt;&gt; ~/.ssh/authorized_keys"
|ssh server_user@server "cat ~/.ssh/authorized_keys"}}

The output from that last line should show the contents of the {{Path|~/.ssh/authorized_keys}} file. Make sure the output looks correct.

=== Testing the setup ===

Theoretically, if all went well, and the {{c|sshd}} daemon on the server allows it (as this can be configured), {{c|ssh}} access without entering a password should now be possible on the server. The private key on the client will still need to be decrypted with the passphrase used previously, but this should not be confused with the password of the user account on the server.

{{Cmd|ssh <server_user>@<server>}}

It should have asked for a passphrase for {{Path|id_rsa}}, and then grant access via {{c|ssh}} as the user <code><server_user></code> on the server. If not, login as <code><server_user></code>, and verify that the contents of {{Path|~/.ssh/authorized_keys}} has each entry (which is a public key) on a single line. It is also a good idea to check the sshd configuration to make sure that it allows to use public key authorization when available.

At this point, readers might be thinking, "What's the point, I just replaced one password with another?!" Relax, the next section will show exactly how we can use this to only enter the passphrase once and re-use the (decrypted) key for multiple logins.

== Making public key authentication convenient ==

=== Typical key management with ssh-agent ===

The next step is to decrypt the private key(s) once, and gain the ability to ssh freely, without any passwords. That is exactly what the program {{c|ssh-agent}} is for. 

{{c|ssh-agent}} is usually started at the beginning of the X session, or from a shell startup script like {{Path|~/.bash_profile}}. It works by creating a unix-socket, and registering the appropriate environment variables so that all subsequent applications can take advantage of its services by connecting to that socket. Clearly, it only makes sense to start it in the parent process of an X session to use the set of decrypted private keys in all subsequent X applications. 

{{Cmd|eval `ssh-agent`}}

{{Note|This {{c|ssh-agent}} will keep keys decrypted until it is killed. To set a lifetime for the keys, use the <code>-t</code> argument as described in {{c|man ssh-agent}}.}}

When running {{c|ssh-agent}}, it should output the PID of the running ssh-agent, and also set a few environment variables, namely <var>SSH_AUTH_SOCK</var> and <var>SSH_AGENT_PID</var>. It should also automatically add {{Path|~/.ssh/id_rsa}} to it's collection and ask the user for the corresponding passphrase. If other private keys exist which need to be added to the running ssh-agent, use the {{c|ssh-add}} command: 

{{Cmd|ssh-add somekeyfile}}

Now for the magic. With the decrypted private key ready, ssh into a (public key configured) server without entering any passwords: 

{{Cmd|ssh server}}

In order to shut down ssh-agent (and as such require entry of the passphrase again later):

{{Cmd|ssh-agent -k}}

{{Note|It is possible to have multiple {{c|ssh-agent}} processes running, especially when configuring it initially took some effort and trials. These processes can be killed like any other process by running {{c|killall ssh-agent}}.}}

To get even more convenience from ssh-agent, proceed to the next section on using keychain. Be sure to kill the running ssh-agent as keychain will handle the {{c|ssh-agent}} sessions itself.

=== Squeezing the last drop of convenience out of ssh-agent ===

Keychain will allow to reuse an ssh-agent between logins, and optionally prompt for passphrases each time the user logs in. Let's emerge it first:

{{Emerge|net-misc/keychain}}

Assuming that was successful, {{c|keychain}} can now be used. Add the following to the {{Path|~/.bash_profile}} file to enable it: 

{{CodeBox|title=Enabling keychain in .bash_profile|<pre>
keychain ~/.ssh/id_rsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>
}}

{{Note|More private keys can be added to the command line as desired. Also, to have it ask for passphrases each time a shell is spawned, add the <code>--clear</code> option.}}

{{Note|When not using bash, check the '''EXAMPLES''' section of {{c|man keychain}} for examples of use in other shells. The idea is to get those commands to run each time a shell is used.}}

Now test it. First make sure the ssh-agent processes from the previous section are killed, then start up a new shell, usually by just logging in, or spawning a new terminal. It should prompt for the password for each key specified on the command line. All shells opened after that point should reuse the ssh-agent, allowing to use passwordless ssh connections over and over. 

=== Using keychain with Plasma 5 ===

Plasma 5 users, instead of using {{Path|~/.bash_profile}}, can let Plasma manage ssh-agent for them. In order to do so, edit {{Path|/etc/plasma/startup/agent-startup.sh}}, which is read during Plasma's startup, and {{Path|/etc/plasma/shutdown/10-agent-shutdown.sh}}, which is executed during its shutdown. Here is how one could edit those files: 

{{CodeBox|title=Editing /etc/plasma/startup/10-agent-startup.sh|1=
SSH_AGENT=true
}}

{{CodeBox|title=Editing /etc/plasma/shutdown/10-agent-shutdown.sh|1=
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi}}

Now, all that has to be done is launch a terminal of choice, like {{Package|kde-apps/konsole}}, and load the right set of keys to use. For example: 

{{Cmd|keychain ~/.ssh/id_rsa}}

The keys will be remembered until the end of the Plasma session (or until the ssh-agent process is killed manually).

=== Using keychain with Plasma 4 ===

As above for Plasma 5 except replace {{Path|/etc/plasma}} with {{Path|/etc/kde}}.

== Concluding remarks ==

=== Security considerations ===

当然，使用 ssh-agent 可能会使系统略微不安全。如果其他用户获得了使用活动 Shell 的权利，该用户将可以不使用密码登录到所有服务器。因此，这是对服务器的风险。如有必要，使用者应该求助于本地安全策略（若有的话）。记得采取适当的行动来确保每个会话都足够安全。 

=== Troubleshooting ===

Most of this should work pretty well, but if problems do come up, then the following items might be of assistance. 

* If connecting without {{c|ssh-agent}} does not seem to work, consider using ssh with the <code>-vvv</code> options to find out what's happening. Sometimes the server is not configured to use public key authentication, sometimes it is configured to ask for local passwords anyway! If that is the case, try using the <code>-o</code> option with {{c|ssh}}, or change the server's {{Path|sshd_config}}.
* If connecting with {{c|ssh-agent}} or {{c|keychain}} does not seem to work, then it may be that the current shell does not understand the commands used. Consult the man pages for ssh-agent and keychain for details on working with other shells.

== External resources ==

* [http://www.funtoo.org/Keychain The official Keychain project page] at Funtoo.org.
* [http://www.funtoo.org/OpenSSH_Key_Management,_Part_1 IBM developerWorks article series] introducing the concepts behind Keychain.


{{Migrated|originalauthors=Eric Brown, Marcelo Goes, nightmorph}}

[[Category:Server and Security]] 
[[Category:SSH]]
