<languages />

{{Metadata|abstract=This guide should help users localize their Gentoo Linux distribution to any European locale. It uses Germany as a case-study, since it is translated from the German doc. Includes configuration for use of the euro currency symbol.}}

== 시간대 ==

시간 속성을 유지하려면 시간대를 선택하여 시스템이 어디에 위치했는지를 알려야 합니다.

=== OpenRC ===

{{Path|/usr/share/zoneinfo}}에서 시간대 정보를 찾아보십시오. 기대대로의 지역 이름이 나타나지 않는 {{Path|/usr/share/zoneinfo/Etc/GMT*}} 시간대는 피하십시오. 예를 들어 {{Path|GMT-8}}는 실제로 GMT+8입니다.

브뤼셀 시간대를 사용한다고 가정해보겠습니다:

{{RootCmd|cp /usr/share/zoneinfo/Europe/Brussels /etc/localtime}}

이제 여러분의 시간대를 지정하겠습니다:

{{RootCmd|nano -w /etc/timezone|output=<pre>
Europe/Brussels
</pre>}}

{{RootCmd|date|output=<pre>
Wed Mar  8 00:46:05 CET 2006
</pre>
}}

{{Note/ko|시간대 이름(이 경우 "CET")은 여러분이 사는 지역에 맞는지 확인하십시오.}}

{{Note/ko|<code>TZ</code>값을 사용자측면 설정을 위해 쉘 rc 파일에 {{Path|/usr/share/zoneinfo}} 다음에 오는 모든 값으로 설정할 수 있습니다. 이 경우 <code>TZ{{=}}"Europe/Berlin"</code>입니다.}}

=== systemd ===

If you're using systemd you should set the timezone with the <code>timedatectl</code> command. First check the available timezones:

{{RootCmd|timedatectl list-timezones}}

Then set your chosen timezone:

{{RootCmd|timedatectl set-timezone Europe/Brussels}}

Finally check the results by issuing the <code>timedatectl</code> command with no arguments:

{{RootCmd|timedatectl}}

== Hardware Clock ==

In most Gentoo Linux installations, your hardware clock is set to UTC (or GMT, Greenwich Mean Time) and then your timezone is taken into account to determine the actual, local time. If, for some reason, you need your hardware clock not to be in UTC, you will need to edit {{Path|/etc/conf.d/hwclock}} (or if you use Gentoo BSD: {{Path|/etc/conf.d/adjkerntz}}) and change the value of <code>clock</code> from <code>UTC</code> to <code>local</code> . 

{{Code|Use UTC clock in /etc/conf.d/hwclock|<pre>
clock="UTC"</pre>}}

{{Code|Use local timezone clock in /etc/conf.d/hwclock|<pre>
clock="local"</pre>}}

== Locale system ==

=== What are locales? ===

A Locale is a set of information that most programs use for determining country and language specific settings. The locales and their data are part of the system library and can be found at {{Path|/usr/share/locale}} on most systems. A locale name is generally named <code>ab_CD</code> where <code>ab</code> is your two (or three) letter language code (as specified in ISO-639) and <code>CD</code> is your two letter country code (as specified in ISO-3166). Variants are often appended to locale names, e.g. <code>en_GB.UTF-8</code> or <code>de_DE@euro</code>. Please explore [http://en.wikipedia.org/wiki/Locale Wikipedia] to read more about locales and related articles. 

=== Environment variables for locales ===

The variables controlling different aspects of locale settings are given in the table below. All of them take one name of a locale in <code>ab_CD</code> format given above. 

{| class="wikitable" style="text-align: left;" 
|- 
! Variable name
! Explanation
|- 
| LANG
| Defines all locale settings at once, while allowing further individual customization via the LC_* settings below.
|- 
| LC_COLLATE
| Define alphabetical ordering of strings. This affects e.g. output of sorted directory listing.
|- 
| LC_CTYPE
| Define the character handling properties for the system. This determines which characters are seen as part of alphabet, numeric and so on. This also determines the character set used, if applicable.
|- 
| LC_MESSAGES
| Programs' localizations for applications that use message based localization scheme (majority of Gnu programs, see next chapters for closer information which do, and how to get the programs, that don't, to work).
|- 
| LC_MONETARY
| Defines currency units and formatting of currency type numeric values.
|- 
| LC_NUMERIC
| Defines formatting of numeric values which aren't monetary. Affects things such as thousand separator and decimal separator.
|- 
| LC_TIME
| Defines formatting of dates and times.
|- 
| LC_PAPER
| Defines default paper size.
|- 
| LC_ALL
| A special variable for overriding all other settings.
|-
|}

{{Note|Some programs are written in such a way that they expect traditional English ordering of the alphabet, while some locales, most notably the Estonian one, use a different ordering. Therefore it's recommended to explicitly set LC_COLLATE to C when dealing with system-wide settings.}}

{{Warning|Using LC_ALL is strongly discouraged as it can't be overridden later on. Please use it only when testing and ''never'' set it in a startup file.}}

Most typically users only set the LANG variable on the global basis.

=== Generating Specific Locales ===

You will probably only use one or maybe two locales on your system. You can specify locales you will need in {{Path|/etc/locale.gen}}. 

{{Code|Adding locales to /etc/locale.gen|<pre>
en_GB ISO-8859-1
en_GB.UTF-8 UTF-8
de_DE ISO-8859-1
de_DE@euro ISO-8859-15
</pre>
}}

The next step is to run <code>locale-gen</code>. It will generate all the locales you have specified in the {{Path|/etc/locale.gen}} file. 

{{Note|<code>locale-gen</code> is available in <code>glibc-2.3.6-r4</code> and newer. If you have an older version of glibc, you should update it now.}}

You can verify that your selected locales are available by running <code>locale -a</code>.

=== Setting a locale ===

==== OpenRC ==== 

When using OpenRC locale settings are stored in environment variables. These are typically set in the {{Path|/etc/env.d/02locale}} (for system-wide settings) and {{Path|~/.bashrc}} (for user-specific settings) file, and can be managed through <code>eselect locale</code>. For instance, to set the <code>LANG</code> variable to the <code>C</code> value:

{{RootCmd|eselect locale list|output=<pre>
Available targets for the LANG variable:
  [1]   C 
  [2]   POSIX
  [3]   en_US
  [4]   en_US.iso885915
  [5]   en_US.utf8
  [ ]   (free form)
</pre>}}

{{RootCmd|eselect locale set 1}}

Of course, you can edit the file manually as well and diversify the locale variables.

{{Code|Setting the default system locale in /etc/env.d/02locale|<pre>
LANG="de_DE.UTF-8"
LC_COLLATE="C"
</pre>
}}

{{Note|Use <code>de_DE@euro</code> as your LANG if you want to use the Euro currency symbol (â‚¬) on non UTF-8 based locales.}}

It's also possible, and pretty common especially in a more traditional UNIX environment, to leave the global settings unchanged, i.e. in the "<code>C</code>" locale. Users can still specify their preferred locale in their own shell RC file: 

{{Code|Setting the user locale in ~/.bashrc|<pre>
export LANG="de_DE.UTF-8"
export LC_COLLATE="C"
</pre>
}}

Another way of configuring system is to leave it in the default C locale, but enable UTF-8 character representation at the same time. This option is achieved using the following settings in {{Path|/etc/env.d/02locale}}: 

{{Code|Using traditional C locale while specifying UTF-8|<pre>
LC_CTYPE=de_DE.UTF-8
</pre>
}}

Using the above snippet, users will be able to see localized file names properly, while not being forced to your preferred language. 

Once you have set the right locale, be sure to update your environment variables to make your system aware of the change.

For a system-wide default locale:

{{RootCmd|env-update && source /etc/profile}}

For a user-specific locale:

{{Cmd|source ~/.bashrc}}

After this, you will need to kill your X server by pressing <code>Ctrl-Alt-Backspace</code>, log out, then log in as user. 

Now, verify that the changes have taken effect: 

{{Cmd|locale}}

==== systemd ====

If you use systemd you should set your locale with the <code>localectl</code> command. Check the list of available locales with:

{{RootCmd|localectl list-locales}}

Then set the locale you want:

{{RootCmd|<nowiki>localectl set-locale LANG=de_DE.utf8</nowiki>}}

Finally check if the result is good:

{{RootCmd|<nowiki>localectl | grep "System Locale"</nowiki>|output=<pre>
   System Locale: LANG=de_DE.utf8
</pre>}}

== Keyboard layout for the console ==

=== OpenRC ===

The keyboard layout used by the console is set in {{Path|/etc/conf.d/keymaps}} by the <code>keymap</code> variable. Valid values can be found in {{Path|/usr/share/keymaps/YOUR_ARCH/}}. {{Path|i386}} has further subdivisions into layout ({{Path|qwerty/}}, {{Path|azerty/}}, etc.). Some languages have multiple options, so you may wish to experiment to decide which one fits your needs best. 

{{Code|Setting the console keymap|<pre>
keymap="de"
#keymap="de-latin1"
#keymap="de-latin1-nodeadkeys"
</pre>
}}

=== systemd ===

With systemd the keymap layout used for your console can be set using the <code>localectl</code> command. First check the available keymap layouts:

{{RootCmd|localectl list-keymaps}}

Then set the console keymap layout you want:

{{RootCmd|localectl set-keymap it}}

Finally check if the console keymap layout was set correctly:

{{RootCmd|<nowiki>localectl | grep "VC Keymap"</nowiki>|output=<pre>
       VC Keymap: it
</pre>}}

== Keyboard layout for the X server ==

The keyboard layout to be used by the X server is specified in {{Path|/etc/X11/xorg.conf}} by the <code>XkbLayout</code> option. 

{{Code|Setting the X keymap|<pre>
Section "InputClass"
	Identifier "keyboard-all"
	Driver "evdev"
	Option "XkbLayout" "de"
	#Option "XkbModel" "pc105"
	MatchIsKeyboard "on"
EndSection
</pre>
}}

If you have an international keyboard layout, you should set the option <code>XkbModel</code> to <code>pc102</code> or <code>pc105</code> , as this will allow mapping of the additional keys specific to your keyboard. 

Deadkeys allow you to press keys that will not show immediately but will be combined with another letter to produce a single character. Setting <code>XkbVariant</code> to <code>nodeadkeys</code> allows input these special characters into X terminals. 

If you would like to switch between more than one keyboard layout (for example English and Russian), all you have to do is add a few lines to {{Path|xorg.conf}} that specify the desired layouts and the shortcut command. 

{{Code|Switching between two keyboard layouts|<pre>
Section "InputClass"
	Identifier "keyboard-all"
	Driver "evdev"
	Option "XkbLayout"    "us,ru"
	Option "XkbOptions"   "grp:alt_shift_toggle,grp_led:scroll"
	MatchIsKeyboard "on"
EndSection
</pre>
}}

Here, <code>XkbOptions</code> allows you to toggle between keyboard layouts by simply pressing <code>Alt-Shift</code> . This will also toggle the Scroll Lock light on or off, thanks to the <code>grp_led:scroll</code> option. This is a handy visual indicator of which keyboard layout you are using at the moment.

=== systemd ===

With systemd the keymap layout for the X11 server can be set using the <code>localectl</code> command. First check the available X11 keymap layouts:

{{RootCmd|localectl list-x11-keymap-layouts}}

Then set the X11 keymap layout you want:

{{RootCmd|localectl set-x11-keymap it}}

Finally check if the X11 keymap layout was set correctly:

{{RootCmd|<nowiki>localectl | grep "X11 Layout"</nowiki>|output=<pre>
      X11 Layout: it
</pre>}}

== KDE ==

For KDE you have to install the <code>kde-base/kde-l10n</code> and <code>app-office/calligra-l10n</code> packages. These respect the  described earlier.

== The Euro Symbol for the Console ==

In order to get your console to display the Euro symbol, you will need to set <code>consolefont</code> in {{Path|/etc/conf.d/consolefont}} to a file found in {{Path|/usr/share/consolefonts/}} (without the <code>.psfu.gz</code> ). <code>lat9w-16</code> has the Euro symbol. 

{{Code|Setting the console font|<pre>
consolefont="lat9w-16"
</pre>
}}

You should verify that <code>consolefont</code> is in the boot runlevel: 

{{RootCmd|rc-update -v show {{!}} grep consolefont}}

If no runlevel is displayed for <code>consolefont</code> , then add it to the proper level: 

{{RootCmd|rc-update add consolefont boot}}

== The Euro Symbol in X ==

=== Most Applications ===

Getting the Euro symbol to work properly in X is a little bit tougher. The first thing you should do is change the <code>fixed</code> and <code>variable</code> definitions in {{Path|/usr/share/fonts/misc/fonts.alias}} to end in <code>iso8859-15</code> instead of <code>iso8859-1</code> . 

{{Code|Setting default X fonts|<pre>
fixed        -misc-fixed-medium-r-semicondensed--13-120-75-75-c-60-iso8859-15
variable     -*-helvetica-bold-r-normal-*-*-120-*-*-*-*-iso8859-15
</pre>
}}

Some applications use their own font, and you will have to tell them separately to use a font with the Euro symbol. You can do this at a user-specific level in {{Path|.Xdefaults}} (you can copy this file to {{Path|/etc/skel/}} for use by new users), or at a global level for any application with a resource file in {{Path|/usr/share/X11/app-defaults/}} (like xterm). In these files you generally have to change an existing line, rather than adding a new one. To change our xterm font, for instance: 

{{Cmd|echo 'XTerm*font: fixed' >> ~/.Xresources 
|xrdb -merge ~/.Xresources}}

=== The Euro symbol in (X)Emacs ===

To use the Euro symbol in (X)Emacs, add the following to {{Path|.Xdefaults}} : 

{{Code|setting the font for emacs|<pre>
Emacs.default.attributeFont: -*-courier-medium-r-*-*-*-120-*-*-*-*-iso8859-15
</pre>
}}

For XEmacs (not plain Emacs), you have to do a little more. In {{Path|/home/user/.xemacs/init.el}} , add: 

{{Code|setting the font for xemacs|<pre>
(define-key global-map '(EuroSign) '[€])
</pre>
}}

=== LibreOffice ===

The current stable <code>app-office/libreoffice</code> and <code>app-office/libreoffice-bin</code> ebuilds support the  for selecting installed GUI language packs. To see the status of GUI translation, hyphenation, spell checking and other localisations on your language, please refer to [https://translations.documentfoundation.org/ LibreOffice translation web site] .

== NLS ==

For message based localization to work in programs that support it, you will probably need to have programs compiled with the <code>nls</code> (Native language support) USE flag set. Most of the programs using nls also need the gettext library to extract and use localized messages. Of course, Portage will automatically install it when needed.

After enabling the <code>nls</code> USE flag you may need to re-emerge some packages:

{{Emerge|params+=--newuse --deep --with-bdeps=y|@world}}

== LINGUAS ==

There is also additional localization variable called <code>LINGUAS</code>, which affects to localization files that get installed in gettext-based programs, and decides used localization for some specific software packages, such as <code>kde-base/kde-l10n</code> and <code>app-office/libreoffice</code>. The variable takes in ''space''-separated list of language codes, and suggested place to set it is {{Path|/etc/portage/make.conf}}: 

{{RootCmd|nano -w /etc/portage/make.conf|output=<pre>
## (Add in the LINGUAS variable. For instance, for German, Finnish and English:)
LINGUAS="de fi en"
</pre>}}

A list of locales that can be used is provided as {{Path|/usr/portage/profiles/desc/linguas.desc}} : 

{{Cmd|grep -i french /usr/portage/profiles/desc/linguas.desc|output=<pre>
fr - French locale
fr_CA - French locale for Canada
fr_FR - French locale for France
</pre>
}}

After setting the <code>LINGUAS</code> USE flag you may need to re-emerge some packages:

{{Emerge|params+=--newuse --deep --with-bdeps=y|@world}}

== Resources ==

Xorg resources:
* [[Evdev#Keyboard_layout|Keyboard layout]] inside the [[Evdev]] article

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:

* Alexander Holler
* Steven Lucy
* Benny Chuang
* Lars Weiler
* Tobias Scherbaum
* Flammie Pirinen
* nightmorph
* klondike
[[Category:Localization]]
