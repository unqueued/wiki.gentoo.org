<languages />
<translate>
<!--T:1-->
When using <tt>emerge</tt> for building a package, it is not uncommon to notice messages coming from Portage itself. Since they may contain important information from Gentoo developers it is a good idea to read them, but often this is not immediately possible because they rapidly scroll out of the screen. This can be easily solved by enabling a Portage feature called elog, whose purpose is to save messages to disk for later review. But other logging capabilities exist as well...

== Portage elog subsystem == <!--T:2-->

<!--T:3-->
The Portage elog subsystem keeps track of specific, ebuild-provided log messages that developers have put in the ebuilds to attract attention of the administrator or user. Often, these messages contain important or interesting information related to the build of said package.

=== Setup === <!--T:4-->

<!--T:5-->
Select which kind of information should be logged through the <code>PORTAGE_ELOG_CLASSES</code> variable. Possible values are <code>info</code>, <code>warn</code>, <code>error</code>, <code>log</code> and <code>qa</code>:

<!--T:6-->
{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
PORTAGE_ELOG_CLASSES="log warn error"
}}

=== Configuring for file-based storage === <!--T:7-->

<!--T:8-->
Portage can handle the elog events in a number of ways.

<!--T:9-->
In order to save the elog events to disk, enable the <code>save</code> module in the <code>PORTAGE_ELOG_SYSTEM</code> variable:

<!--T:10-->
{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
PORTAGE_ELOG_SYSTEM="save"
}}

<!--T:11-->
The messages will be saved in {{Path|/var/log/portage/elog}} or in {{Path|${PORT_LOGDIR}/elog}} if said variable is set.

<!--T:12-->
In order to create per-category elog files, enable the <code>split-elog</code> Portage feature. It will force Portage to create category-based subdirectories of the {{Path|/var/log/portage/elog}} location.

=== Configuring for e-mail === <!--T:13-->

<!--T:14-->
To mail logs to a recipient, enable the <code>mail</code> module. The mail option requires some additional variables to be set. Read {{Path|/usr/share/portage/config/make.conf.example}} for more information.

<!--T:15-->
Below, an example setup is shown which is hopefully self-explanatory:

<!--T:16-->
{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
PORTAGE_ELOG_SYSTEM="mail"
# First the mail-to address, then the SMTP server
PORTAGE_ELOG_MAILURI="log-intake@example.com mail.example.com"
PORTAGE_ELOG_MAILFROM="portage@$(hostname).example.com"
PORTAGE_ELOG_MAILSUBJECT="${PACKAGE} is ${ACTION} on ${HOST}"
}}

<!--T:34-->
Another example with nullmailer or sendmail:

<!--T:35-->
{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
PORTAGE_ELOG_SYSTEM="mail"
# First the mail-to address, then the SMTP server
PORTAGE_ELOG_MAILURI="users@host /usr/sbin/sendmail"
PORTAGE_ELOG_MAILFROM="portage@$(hostname).example.com"
PORTAGE_ELOG_MAILSUBJECT="${PACKAGE} is ${ACTION} on ${HOST}"
}}

=== Related software === <!--T:17-->

<!--T:18-->
The following is a list of elog-related software packages:

<!--T:19-->
* {{Package|app-portage/elogv}} - Curses based utility to parse the contents of elogs
* {{Package|app-portage/elogviewer}} - Python based elog viewer
* {{Package|app-portage/portage-mod_jabber}} - Module to support XMPP (Jabber) protocol for elog events

== Build logs == <!--T:20-->

<!--T:21-->
With the Portage elog subsystem, package build logs are saved on disk or mailed to a remote recipient, regardless of failure or success. This allows for administrators to review builds later or retrieve build logs for support tickets.

=== Setup === <!--T:22-->

<!--T:23-->
To enable Portage logging, edit {{Path|/etc/portage/make.conf}} and set <code>PORT_LOGDIR</code> to a location where the log files should be stored. By default, Portage will use {{Path|/var/log/portage}}:

<!--T:24-->
{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
PORT_LOGDIR="/var/log/portage"
}}

<!--T:25-->
Next, a number of <code>FEATURES</code> settings influence how Portage handles build logs.

<!--T:26-->
* With <code>binpkg-logs</code> set, even binary package deployments will have their logs saved
* When <code>clean-logs</code> is set, regular log file clean operations are executed. The command that is executed is defined by <code>PORT_LOGDIR_CLEAN</code> and defaults to a retention of the files of 7 days.
* With <code>split-log</code> set, build logs are stored in category-named subdirectories of <code>${PORT_LOGDIR}/build</code>

=== Cleaning up === <!--T:27-->

<!--T:28-->
When <code>clean-logs</code> is set, Portage will execute the command defined by <code>PORT_LOGDIR_CLEAN</code> after every build or unmerge operation. By default, the following command is used:

<!--T:29-->
{{FileBox|filename=/usr/share/portage/config/make.globals|lang=bash|1=
PORT_LOGDIR_CLEAN="find \"\${PORT_LOGDIR}\" -type f ! -name \"summary.log*\" -mtime +7 -delete"
}}

<!--T:30-->
When defining a custom command, do not forget to ''escape'' the <code>${PORT_LOGDIR}</code> variable (or immediately hardcode the right location).

== External resources == <!--T:31-->

<!--T:32-->
* [http://blog.siphos.be/2013/09/underestimated-or-underused-portage-elogging/ Underestimated or underused: Portage (e)logging] on ([[User:SwifT|Sven Vermeulen]]'s blog)

</translate>
[[Category:Portage]]
