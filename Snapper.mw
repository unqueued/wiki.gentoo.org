{{stub}}
{{InfoBox stack
|{{InfoBox homepage|http://snapper.io/|header=true}}
|{{InfoBox github|openSUSE/snapper}}
|{{InfoBox odoc|http://snapper.io/documentation.html}}
}}

Snapper is a command-line program capable of managing filesystem snapshots. It has provisions for root and non-root users to review older versions of files and restore them. It also has the ability to create, delete, compare, and undo changes between snapshots. Snapper never modifies the content of snapshots. Thus it will create read-only snapshots (if supported by the system's kernel). Supported filesystems are [[btrfs]] and [[ext4]] as well as snapshots of [[LVM]] volumes with thin-provisioning. Some filesystems might not be supported depending on the installation.<ref>http://snapper.io/manpages/snapper.html</ref> Snapper was initially developed by SUSE Linux but is now in use across many Linux distributions.

== Installation ==

=== USE flags ===

{{USEflag|package=app-backup/snapper}}

=== Emerge ===

After USE flags have been set, {{c|emerge}} snapper:

{{Emerge|{{Package|app-backup/snapper}} }}

== Configuration ==

Configuration files for {{c|snapper}} are found in the {{Path|/etc/snapper/}} directory. According to snapper's man page, each filesystem or subvolume that should be snapshotted by snapper requires a configuration file.

A {{c|create-config}} sub-command exists to aid in configuration file generation:

{{RootCmd|snapper create-config <subvolume>}}

To create a configuration for the root filesystem, run:

{{RootCmd|snapper create-config /}}

This presumes the root filesystem has been formatted with [[btrfs]] or some other snapper compatible filesystem. The {{c|create-config}} command will attempt to guess the underlying filesystem type. If the filesystem type is known (in this case btrfs), then it can be specified using the <code>--fstype <fstype></code> option. See the {{c|snapper}} man page for more information.

== Usage ==

{{GenericCmd|snapper [--global-opts] command [--command-opts] [command-arguments]}}

=== Rollback ===

Snapper has function called 'rollback' to switch the current mounted btrfs subvolume to an older subvolume. This feature requires a btrfs file system.

To work properly the rollback feature needs an entry in the [[fstab]] to mount the subvolume {{Path|.snapshots}} to the directory {{Path|/.snapshots}}. If the {{Path|.snapshots}} subvolume is not mounted, {{c|snapper}} will fail to create a subvolume after the first rollback and give an input/output error. It will also fail to find any snapshot after the first rollback.

For this example, presume that {{Path|/dev/sda1}} contains the btrfs filesystem snapper will manage. Add the following to {{Path|/etc/fstab}}:

{{FileBox|filename=/etc/fstab|title=Snapper fstab example|1=
/dev/sda1            /.snapshots     btrfs           subvol=.snapshots       0 0
}}

When snapper is initialized, this fstab entry is not needed, because the {{Path|/.snapshots}} subvolume is created in the root subvolume and from there accessible. After the first rollback to a snapshot subvolume (e.g. {{Path|/.snapshots/432}}), and upon a reboot into the snapshot subvolume the root subvolume will be left. In the snapshot subvolume, the {{Path|/.snapshots}} directory is empty (e.g {{Path|/.snapshots/432/.snapshots}}). Snapper cannot find older snapshots or create new ones in the empty directory.

This seems to be a tradeoff between ease of configuration and possible errors in this configuration. It might be a good setup for a Suse system but the btrfs devs propose another setup.<ref>https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Managing_Snapshots</ref> With this flat hierarchy the original subvolume can even be deleted and if need be replaced by one of the snapshots. On the other hand the subvolume has to be mounted manually inside. This mount point has to be {{c|chown 750 /.snapshots}} and needs to be on the same volume. This is always the case in the way snapper works by default, so you cannot mix it up. Subvolumes can also be moved like regular folders,  so you lose nothing when you start with the default way snapper works and change it later on.

== Tips and tricks ==

=== Portage ===

You can have the all installations by portage automatically snapshotted with the following configuration:<ref>https://rich0gentoo.wordpress.com/2013/11/26/btrfs-and-snapper-with-portage-on-gentoo/</ref>

{{FileBox|filename=/etc/portage/bashrc|1=
case "${EBUILD_PHASE}" in
        preinst) 
                DESC="${CATEGORY}/${PF}"
                NUMBER=`snapper create -t pre -p -d "${DESC}"`
                ;;
        postinst) 
                snapper create -t post --pre-number $NUMBER -d "${DESC}"
                ;;
esac
}}

== See also ==

* [[btrfs]] - A B-tree file system fully capable of running underneath {{c|snapper}}.
* [[ext4]] - The most commonly used filesystem in Linux.
* [[LVM]] - A utility that virtualizes storage which enables storage to be easily spread across disks/volumes.

== Troubleshooting ==

=== Fatal exceptions ===

==== dbus not running ====

If seeing dbus error messages such as the following:

<pre>
terminate called after throwing an instance of 'DBus::FatalException'
  what():  dbus fatal exception
Aborted
</pre>

or

<pre>
Failure (dbus fatal exception).
</pre>

dbus is probably not running. To start dbus, on OpenRC, issue:

{{RootCmd
|service dbus start
|rc-update add dbus default
}}

== References ==

{{reflist}}

[[Category:Software]]
