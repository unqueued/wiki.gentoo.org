File labels are the most common aspect of a SELinux system that users and administrators will need to care for. As SELinux policy decisions are based on the label of a resource, making sure that the file labels are correctly set is the most important part of maintaining SELinux systems.

== Introduction ==

The term ''label'' is used for the ''SELinux context'' of a file or other object on a system. Whenever a document talks about a file context or file label, both actually mean the same thing. The term comes from the SELinux permissions ''relabelfrom'' and ''relabelto'' which inform the policy if a relabel operation (change of context) is allowed from a particular label (context) or towards a particular label (context).

Label values are also often abbreviated in documents. A file with <code>user_home_t</code> label (or context) actually needs to have an entire context assigned, but in the document itself the ''type'' part of the context is the most important one. As such, instead of talking about a file with <code>user_u:object_r:user_home_t:s0</code> label (and having to explain that the [[SELinux/Users_and_logins|SELinux user]] part can be different) the type <code>user_home_t</code> alone is used.

=== Labels are extended attributes ===

On most file systems, SELinux labels are stored as ''extended attributes''. This is not always the case though - some file systems do not support extended attributes. In these cases, all files on the file system get assigned the same context, usually provided through the mount option of the file system.

=== Non-file resources ===

On a SELinux system, everything needs to have a context / label assigned. Even resources such as TCP and UDP ports get a label. These labels are assigned by SELinux itself through policy definitions, although users can still manipulate the assigned port types if no specific port type is used yet.

== Managing file labels ==

Although file labels are set as extended attributes in most cases, managing file labels goes further than just ensuring that that particular extended attribute is correctly set. The SELinux user space maintains a database of file path expressions together with the file context to be assigned to these resources. This allows administrators to verify if a file context is correct or not, and to reset the context of a file.

=== Listing file labels ===

The Linux core utilities support displaying of SELinux labels.

For instance, using <code>ls -Z</code> (the <code>-Z</code> option is often used for displaying SELinux contexts):

{{Cmd|ls -lZ /etc/resolv.conf|output=<pre>
-rw-r--r--. 1 root root system_u:object_r:net_conf_t 68 May  4 18:14 /etc/resolv.conf
</pre>}}

Similarly, the <code>stat</code> command displays the label as well, here on an MLS-enabled system:

{{Cmd|stat /etc/resolv.conf|output=<pre>
  File: '/etc/resolv.conf'
  Size: 149             Blocks: 16         IO Block: 4096   regular file
Device: fb02h/64258d    Inode: 394204      Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Context: system_u:object_r:net_conf_t:s0
Access: 2013-01-13 13:24:01.402000000 +0100
Modify: 2014-05-04 19:43:03.563000000 +0200
Change: 2014-05-04 19:43:03.573000000 +0200
</pre>}}

The context of a file can also be directly read through the <code>getfattr</code> command, used to obtain a file's extended attributes:

{{Cmd|getfattr -m . -d /etc/resolv.conf|output=<pre>
getfattr: Removing leading '/' from absolute path names
# file: etc/resolv.conf
security.evm=0sAoTjX3aOeDQdWxbOfOUV930tWoDA
security.ima=0sAYC508o0Lz4iAA9ucVAVsvK02tV/
security.selinux="system_u:object_r:net_conf_t:s0"
</pre>}}

In the above output, next to the [[Integrity|integrity]] related extended attributes, the <code>security.selinux</code> attribute is shown, which contains the SELinux context of the file.

=== Relabeling files ===

Relabeling files means that the context of one or more files is ''reset'' towards the definition stored by the SELinux user space utilities.

Such a relabeling operation is usually done through the <code>setfiles</code> or <code>restorecon</code> command:

{{RootCmd|restorecon /etc/resolv.conf}}

To relabel the entire file system, use <code>rlpkg</code> (which is a Gentoo-specific tool):

{{RootCmd|rlpkg -a -r}}

The <code>rlpkg</code> application also supports relabeling all files provided by a single Gentoo package. For instance, to relabel all files provided by the <code>firefox-bin</code> package:

{{RootCmd|rlpkg firefox-bin}}

=== Temporarily modifying file labels ===

To set a file context, the <code>chcon</code> command can be used:

{{RootCmd|chcon -t net_conf_t /etc/puppet-resolv.conf}}

However, the <code>chcon</code> tool does not update the SELinux user space definition list. As a result, when the administrator relabels a file, it will be reset to the original value.

=== Permanently modifying file labels ===

To ensure that a new file context remains, even after a relabeling operation, the administrator needs to update the SELinux user space definition list first.

The definition list uses PCRE-based regular expressions and can be managed through <code>semanage fcontext</code>.

For instance, to add {{Path|/etc/puppet-resolv.conf}} to the list and assign it the <code>net_conf_t</code> type:

{{RootCmd|semanage fcontext -a -t net_conf_t "/etc/puppet-resolv\.conf"}}

The use of PCRE expressions allows for a denser set of rules that matches entire subdirectories easily:

{{RootCmd|semanage fcontext -a -t bin_t "/usr/lib/portage/bin(/.*)?"}}

After updating the definition list, the context of the file(s) isn't set yet. For this, the files need to be relabeled:

{{RootCmd|restorecon -R /etc/puppet-resolv.conf /usr/lib/portage/bin}}

== Managing TCP and UDP port labels ==

TCP and UDP ports also get assigned a particular label.

=== Listing port labels ===

With <code>seinfo</code>, the context for a particular port can be viewed:

{{Cmd|seinfo --portcon{{=}}80|output=<pre>
   portcon tcp 80 system_u:object_r:http_port_t
   portcon tcp 1-511 system_u:object_r:reserved_port_t
   portcon udp 1-511 system_u:object_r:reserved_port_t
</pre>}}

It is also possible to list all port definition declarations using <code>semanage port</code>:

{{RootCmd|semanage port -l {{!}} grep http|output=<pre>
http_cache_port_t              tcp      3128, 8080, 8118, 10001-10010
http_cache_port_t              udp      3130
http_port_t                    tcp      8888, 80, 443, 488, 8008, 8009, 8443
pegasus_http_port_t            tcp      5988
pegasus_https_port_t           tcp      5989
</pre>}}

=== Modifying port labels ===

If a port is not only assigned the <code>reserved_port_t</code>, <code>unreserved_port_t</code> or <code>hi_reserved_port_t</code> label, then the context for that port cannot be modified.

However, if the port only has one of these types assigned, then it is possible to set a specific type.

For instance, to assign the type <code>http_port_t</code> to port 9980, first check if it is possible:

{{Cmd|seinfo --portcon{{=}}9980|output=<pre>
   portcon udp 1024-65535 system_u:object_r:unreserved_port_t
   portcon tcp 1024-65535 system_u:object_r:unreserved_port_t
</pre>}}

It is possible, so now use <code>semanage port</code> to assign it:

{{RootCmd|semanage port -a -t http_port_t -p tcp 9980}}
