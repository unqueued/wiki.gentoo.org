<languages />


{{Metadata|abstract=Данное руководство покажет, как настроить distcc для кросс-компиляции между различными архитектурами процессоров.}}

Данное руководство покажет, как настроить distcc для кросс-компиляции между различными архитектурами процессоров.

== Кросс-компиляция с distcc ==

=== Введение ===

<code>distcc</code> — это инструмент, который позволяет распределить компиляцию программ по нескольким компьютерам в сети. Если соединенные по сети машины используют один toolchain и имеют одинаковую процессорную архитектуру, то никаких особенных настроек для работы <code>distcc</code> не требуется. Но что делать, если нужно компилировать под разные архитектуры на разных компьютерах? Это руководство покажет, как настроить <code>distcc</code>, чтобы компилировать код для разных архитектур. 

=== Устанавливаем необходимые утилиты ===

Сперва нужно установить <code>crossdev</code> на всех машинах, которые будут вовлечены в процесс компиляции. <code>crossdev</code> — это инструмент, облегчающий сборку кросс-платформенных toolchain’ов. Изначально он был написан Joshua Kinard, затем переписан с нуля Mike Frysinger. Использовать его просто: <code>crossdev -t sparc</code> соберет полный cross-toolchain для архитектуры Sparc. Он включает binutils, gcc, glibc и linux-headers. Если вам понадобится справка, попробуйте запустить <code>crossdev --help</code>. Очевидно, что нужно установить подходящий cross-toolchain на все вспомогательные машины.

Если вы хотите произвести более точную настройку cross-toolchain’а, то вот скрипт, который генерирует команду с точными версиями toolchain-пакетов для сборки на вспомогательных машинах (скрипт нужно запускать на целевой машине).

{{Code|Скрипт для тонкой настройки инструментов распределенной разработки|<pre>
#! /bin/bash
A="sys-devel/binutils" ; B=`equery l $A` ; BINUTILS_VER=`echo $B | cut -d- -f3-`
A=`/usr/bin/gcc-config -c` ; B=`echo $A | cut -d- -f5` ; GCC_VER=`equery l sys-devel/gcc | grep $B | cut -d- -f3-`
KERNEL_VER=`uname -r | sed s/-gentoo//`
A="sys-libs/glibc" ; B=`equery l $A` ; LIBC_VER=`echo $B | cut -d- -f3-`
echo "crossdev --b =$BINUTILS_VER --g =$GCC_VER --k =$KERNEL_VER --l =$LIBC_VER -t `uname -m`"
</pre>}}

Затем необходимо установить <code>distcc</code> на все машины, которые будут вовлечены в процесс. Это включает и машину, на которой будет запущен emerge, и машины с кросс-компиляторами. Посмотрите [[Distcc/ru|документацию Gentoo по Distcc]] для более подробной информации по настройке и использованию <code>distcc</code>.

=== Специфичные для архитектур замечания ===

==== Подархитектуры Intel x86 ====

Если вы проводите кросс-компиляцию между различными субархитектурами процессоров Intel x86 (например, i586 и i686), вам также требуется собрать полный cross-toolchain для желаемого CHOST, иначе компиляция завершится неудачей. Это потому, что субархитектурам i586 и i686 соответствуют разные CHOST, несмотря на то что обе относятся к "x86". Помните об этом, когда собираете свои cross-toolchain’ы. Например, если целевая платформа — i586, вам нужно построить i586 cross-toolchain’ы на вспомогательных i686-машинах. 

==== SPARC ====

При использовании <code>crossdev -t sparc</code> может появиться одна из следующих ошибок:

{{Code|Ошибки, появляющиеся при запуске crossdev -t sparc|<pre>
linker with -z relro support required
support for the tls_model attribute is required
this configuration requires -mlong-double-128 support
</pre>}}

Если это происходит, попробуйте использовать другую команду:

{{Cmd|crossdev --lenv "CC{{=}}sparc-unknown-linux-gnu-gcc" -t sparc-unknown-linux-gnu}}

=== Настройка distcc для корректной кросс-компиляции ===

При настройках distcc по умолчанию кросс-компиляция ''не'' будет работать как положено. Проблема в том, что многие сборки вызывают просто <code>gcc</code> вместо полного имени компилятора (например, <code>sparc-unknown-linux-gnu-gcc</code>). Когда такая сборка распределяется на вспомогательную машину с distcc, вызывается нативный компилятор, вместо вашего абсолютно нового кросс-компилятора. 

К счастью, для этой небольшой проблемы существует обходное решение. Все, что требуется, это оберточный скрипт и несколько символьных ссылок на компьютере, с которого вызывается <code>emerge</code>. Будем использовать в качестве примера компьютер архитектуры Sparc. Ниже, где бы вы ни видели текст <code>sparc-unknown-linux-gnu</code>, подразумевается ваш CHOST (<code>x86_64-pc-linux-gnu</code> для AMD64, к примеру). После первой установки distcc каталог {{Path|/usr/lib/distcc/bin}} выглядит следующим образом: 

{{Note/ru|Следующие инструкции предназначены для выполнения на тех компьютерах, где будет запускаться emerge. Не выполняйте эти шаги на вспомогательных компьютерах.}}

{{RootCmd|cd /usr/lib/distcc/bin
|ls -l|output=<pre>
total 0
lrwxrwxrwx  1 root root 15 Dec 23 20:13 c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 cc -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 gcc -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc
</pre>
}}

Вам нужно сделать: 

{{RootCmd|rm c++ g++ gcc cc}}

Затем мы создадим новый скрипт на этой машине. Запустите свой любимый текстовый редактор и создайте файл со следующим текстом, сохранив его как {{Path|sparc-unknown-linux-gnu-wrapper}}. Помните о том, что CHOST (в данном случае <code>sparc-unknown-linux-gnu</code>) нужно заменить на реальный CHOST данного компьютера, т. е. того, на котором будет запускаться emerge. 

{{Code/ru|Новый оберточный скрипт|<pre>
#!/bin/bash
exec /usr/lib/distcc/bin/sparc-unknown-linux-gnu-g${0:$[-2]} "$@"
</pre>
}}

Далее, сделаем скрипт исполнимым и создадим соответствующие символьные ссылки: 

{{RootCmd|chmod a+x sparc-unknown-linux-gnu-wrapper
|ln -s sparc-unknown-linux-gnu-wrapper cc
|ln -s sparc-unknown-linux-gnu-wrapper gcc
|ln -s sparc-unknown-linux-gnu-wrapper g++
|ln -s sparc-unknown-linux-gnu-wrapper c++}}

После этого {{Path|/usr/lib/distcc/bin}} будет выглядеть следующим образом: 

{{RootCmd|ls -l|output=<pre>
total 4
lrwxrwxrwx  1 root root 25 Jan 18 14:20 c++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 cc -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 g++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 gcc -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Jul 27 10:52 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc
-rwxr-xr-x  1 root root 70 Jan 18 14:20 sparc-unknown-linux-gnu-wrapper
</pre>
}}

После обновления пакета distcc символьные ссылки перезапишутся, так что, чтобы обертки остались доступны, нужно о

Далее нужно позаботиться о том, чтобы обертки оставались доступными после обновлений distcc, поскольку символьные ссылки при обновлении перезаписываются. Можно сделать это с помощью файла {{Path|/etc/portage/bashrc}}, примерно такого:

{{Code|/etc/portage/bashrc|<pre>
case ${CATEGORY}/${PN} in
	sys-devel/distcc&#41;
		# Эй, как так случилось, что CONFIG PROTECT не сработал?
		if [ "${EBUILD_PHASE}" == "postinst" ] || [ "${EBUILD_PHASE}" == "postrm" ];
		then
			cd /usr/lib/distcc/bin
			rm cc c++ gcc g++
			ln -s sparc-unknown-linux-gnu-wrapper cc
			ln -s sparc-unknown-linux-gnu-wrapper c++
			ln -s sparc-unknown-linux-gnu-wrapper gcc
			ln -s sparc-unknown-linux-gnu-wrapper g++
		fi
	;;
esac</pre>
}}

Поздравляем; теперь у вас есть (надеемся) работающая настройка cross-distcc.

=== Как это работает ===

При вызове <code>distcc</code>, он проверяет в качестве чего он был вызван (например, <code>i686-pc-linux-gnu-gcc</code> , <code>sparc-unknown-linux-gnu-g++</code> , и т.д.) Когда distcc затем передает компиляцию на вспомогательную машину, он передает название, с которым он был вызван. Демон distcc на другой вспомогательной машине затем ищет исполняемый файл с подобным именем. Если он видит только <code>gcc</code> , он будет искать <code>gcc</code> , что, скорее всего, будет нативным компилятором на вспомогательной машине, если это не та же самая архитектура, как и компьютер с запущенной командой <code>emerge</code> . Когда отправляется ''полное'' имя компилятора, (например, <code>sparc-unknown-linux-gnu-gcc</code> ), путаница исключена.

== Благодарности ==

Мы хотели бы поблагодарить следующих авторов и редакторов за их вклад в это руководство:

* Andrew Gaffney
* Joshua Saddler
