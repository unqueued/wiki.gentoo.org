<languages />

Данное руководство показывает как настроить distcc на кросс-компиляцию для разных типов архитектур процессора.

== Кросс-компиляция с distcc ==

=== Введение ===

<code>distcc</code> - это инструмент, который позволит Вам распределить процесс компиляции программного обеспечения по нескольких компьютерам, соединенным в сеть. Пока соединенные по сети машины используют одни и те же средства компиляции и генерации кода - toolchain, никакие особенные настройки <code>distcc</code> не требуются. 

=== Собираем необходимые утилиты ===

Сперва, Вам необходимо установить <code>crossdev</code> на всех компьютерах, которые будут вовлечены в процесс компиляции. <code>crossdev</code> - это инструмент, который облегчает сборку кросс-платформенных toolchain-ов. Первоначально, он был написан Joshua Kinard и был переписан с самого нуля Mike Frysinger. Его использование достаточно прямолинейно: например, команда <code>crossdev -t sparc</code> соберет полную cross-toolchain для архитектуры Sparc. Она включает binutils, gcc, glibc, и заголовки ядра Linux. Если Вам требуется дополнительная помощь, попробуйте ввести <code>crossdev --help</code> . Очевидно что Вам не нужно устанавливать подходящую cross-toolchain на все вспомогательные машины. 

Затем, Вам необходимо установить <code>distcc</code> на все машины, которые будут вовлечены в процесс. Это включает и машину, на которой будет запущен emerge, и машины с кросс-компиляторами. Пожалуйста, посмотрите [http://www.gentoo.org//doc/ru/distcc.xml документацию Gentoo по Distcc] для поиска более подробной информации по настройке и использованию <code>distcc</code> .

=== Архитектурно-специфические замечания ===

==== Подархитектуры Intel x86 ====

Если Вы проводите кросс-компиляцию между различными субархитектурами для процессора Intel x86 (например, i586 и i686), Вам все так же требуется собрать полную cross-toolchain для необходой архитектуры, указанной в CHOST, или иначе компиляция завершится неудачей. Это потому, что i586 и i686 обладают разными архитектурами CHOST, вопреки тому, что их обе относят к "x86." Пожалуйста, держите это в уме, когда Вы собираете свои cross-toolchain-ы. Например, если целевая платформа - i586, это значит, что Вы должны построить i586 cross-toolchain-ы на Ваших вспомогательных i686 машинах. 

==== SPARC ====

При использовании <code>crossdev -t sparc</code> может появиться одна из следующих ошибок:

{{Code|Errors displayed when running crossdev -t sparc|<pre>
linker with -z relro support required
support for the tls_model attribute is required
this configuration requires -mlong-double-128 support
</pre>}}

If this happens, try using the following command instead:

{{Cmd|crossdev --lenv "CC{{=}}sparc-unknown-linux-gnu-gcc" -t sparc-unknown-linux-gnu}}

=== Конфигурация distcc для корректной кросс-компиляции ===

В настройках distcc по умолчанию, кросс-компиляция ''не'' будет работать так как надо. Проблема в том, что много сборок просто вызывают <code>gcc</code>, вместо полного имени компилятора (например, <code>sparc-unknown-linux-gnu-gcc</code> ). Когда процесс компиляции распространяется на вспомогательную машину с distcc, вызывается нативный компилятор, вместо Вашего абсолютно нового кросс-компилятора. 

К счастью, для этой небольшой проблемы существует решение. Все, что требуется, это оберточный сценарий и несколько символьных ссылок на том компьютере, на котором будет вызван <code>emerge</code> . Я буду использовать в качестве примера мой компьютер архитектуры Sparc. Ниже, где бы Вы ни видели текст <code>sparc-unknown-linux-gnu</code>, Вам нужно вставить свой собственный CHOST ( <code>x86_64-pc-linux-gnu</code> для компьютера с архитектурой AMD64, например). Когда Вы собираете distcc в первый раз, каталог {{Path|/usr/lib/distcc/bin}} выглядит следующим образом: 

{{Note/ru|Следующие инструкции предназначены для выполнения на тех компьютерах, где запущен emerge. Не выполняйте эти шаги на вспомогательных компьютерах.}}

{{RootCmd|cd /usr/lib/distcc/bin
|ls -l|output=<pre>
total 0
lrwxrwxrwx  1 root root 15 Dec 23 20:13 c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 cc -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 gcc -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc
</pre>
}}

Это то, что Вам необходимо сделать: 

{{RootCmd|rm c++ g++ gcc cc}}

Затем, мы создадим новый сценарий на этой машине. Запустите Ваш любимый редактор и создайте файл со следующим текстом, затем сохраните его как {{Path|sparc-unknown-linux-gnu-wrapper}} . Помните об изменении переменной CHOST (в данном случае <code>sparc-unknown-linux-gnu</code> ) на действительный CHOST того компьютера, на котором будет запущен emerge. 

{{Code/ru|Новый оберточный сценарий|<pre>
#!/bin/bash
exec /usr/lib/distcc/bin/sparc-unknown-linux-gnu-g${0:$[-2]} "$@"
</pre>
}}

Далее, мы сделаем сценарий исполнимым и создадим соответствующие символьные ссылки: 

{{RootCmd|chmod a+x sparc-unknown-linux-gnu-wrapper
|ln -s sparc-unknown-linux-gnu-wrapper cc
|ln -s sparc-unknown-linux-gnu-wrapper gcc
|ln -s sparc-unknown-linux-gnu-wrapper g++
|ln -s sparc-unknown-linux-gnu-wrapper c++}}

Когда Вы закончили, {{Path|/usr/lib/distcc/bin}} будет выглядеть следующим образом: 

{{RootCmd|ls -l|output=<pre>
total 4
lrwxrwxrwx  1 root root 25 Jan 18 14:20 c++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 cc -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 g++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 gcc -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Jul 27 10:52 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc
-rwxr-xr-x  1 root root 70 Jan 18 14:20 sparc-unknown-linux-gnu-wrapper
</pre>
}}

Поздравляем; теперь у Вас есть (надеемся) работающая настройка cross-distcc. 

=== Как это работает ===

При вызове <code>distcc</code>, он проверяет в качестве чего он был вызван (например, <code>i686-pc-linux-gnu-gcc</code> , <code>sparc-unknown-linux-gnu-g++</code> , и т.д.) Когда distcc затем передает компиляцию на вспомогательную машину, он передает название, с которым он был вызван. Демон distcc на другой вспомогательной машине затем ищет исполняемый файл с подобным именем. Если он видит только <code>gcc</code> , он будет искать <code>gcc</code> , что, скорее всего, будет нативным компилятором на вспомогательной машине, если это не та же самая архитектура, как и компьютер с запущенной командой <code>emerge</code> . Когда отправляется ''полное'' имя компилятора, (например, <code>sparc-unknown-linux-gnu-gcc</code> ), путаница исключена. 

== Благодарности ==

Мы хотели бы поблагодарить следующих авторов и редакторов за их вклад в это руководство:

* Andrew Gaffney
* Joshua Saddler
