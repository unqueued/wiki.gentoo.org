<languages />
{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://freedesktop.org/wiki/Software/systemd|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox gitweb|http://cgit.freedesktop.org/systemd/systemd/|raw=true}}
}}
{{Warning/zh-cn|十分抱歉。该页面正在进行翻译校正，请谨慎参考。}}

'''systemd''' 是一个现代 SysV-style init 和 rc (运行命令)<ref>Eric S. Raymond. http://www.catb.org/jargon/html/R/rc-file.html Retrieved on June 27th, 2015</ref> 作为linux系统以往常用的init的替代引导器。
<!--
以下配置目录OpenRC 或 systemd使用的都是：
* {{Path|/etc/modules-load.d}},
* {{Path|/etc/sysctl.d}},
* {{Path|/etc/binfmt.d}}
-->

== 预安装配置 ==

{{Note/zh-cn|当你的版本 <{{=}}sys-apps/systemd-203 时，请查看 [[/upgrade|upgrade subpage]]。}}

=== 内核 ===

systemd使现代Linux内核的许多特色得以充分发挥。现在，要想支持systemd，内核版本必须高于ebuild 2.6.39。
在最新的版本 {{Package|sys-kernel/gentoo-sources}}包中, 有一个快捷的方法，使得systemd成为强制选择或可选的内核选项(请看 [[Kernel/Configuration]] 来获得进一步的了解):

{{KernelBox|title=快速安装使用gentoo-sources|<pre>
Gentoo Linux --->
        Support for init systems, system and service managers --->
                [*] systemd
</pre>}}

手动配置内核选项 (这是在不使用{{Package|sys-kernel/gentoo-sources}}时，唯一的选择 ), 下面是内核配置选项的要求或建议:

<!-- See http://cgit.freedesktop.org/systemd/systemd/plain/README -->
{{KernelBox|title=必选选项|<pre>
General setup  --->
	[*] Control Group support
	[*] open by fhandle syscalls
	[ ] Enable deprecated sysfs features to support old userspace tools
	[*] Configure standard kernel features (expert users)  --->
		[*] Enable eventpoll support
		[*] Enable signalfd() system call
		[*] Enable timerfd() system call
[*] Networking support --->
Device Drivers  --->
	Generic Driver Options  --->
		[*] Maintain a devtmpfs filesystem to mount at /dev
File systems  --->
	[*] Inotify support for userspace
	Pseudo filesystems  --->
		[*] /proc file system support
		[*] sysfs file system support
</pre>}}

{{KernelBox|title=推荐选项|<pre>
General setup  --->
	[*] Namespaces support  --->
		[*] Network namespace
[*] Enable the block layer  --->
	[*] Block layer SG support v4
Processor type and features  --->
	[*] Enable seccomp to safely compute untrusted bytecode
Networking support --->
	Networking options --->
		<*> The IPv6 protocol
Device Drivers  --->
	Generic Driver Options  --->
		()  path to uevent helper
		[ ] Fallback user-helper invocation for firmware loading
Firmware Drivers  --->
	[*] Export DMI identification via sysfs to userspace
File systems --->
	<*> Kernel automounter version 4 support (also supports v3)
	Pseudo filesystems --->
		[*] Tmpfs virtual memory file system support (former shm fs)
		[*]   Tmpfs POSIX Access Control Lists
		[*]   Tmpfs extended attributes
</pre>}}

UEFI系统应该启用下面的选项:

{{KernelBox|title=UEFI支持|<pre>
[*] Enable the block layer  --->
	Partition Types  --->
		[*] Advanced partition selection
		[*]   EFI GUID Partition support
Processor type and features  --->
	[*] EFI runtime service support
Firmware Drivers  --->
        EFI (Extensible Firmware Interface) Support -->
	        <*> EFI Variable Support via sysfs
</pre>}}

如果你的系统使用BFQ scheduler, 这里推荐使用 BFQ upstream 来启用 "BFQ hierarchical scheduling support" 下的"Enable the block layer -> IO Schedulers".

要获取最新的列表,请参阅部分上游的“需求”说明：[http://cgit.freedesktop.org/systemd/systemd/tree/README README]文件。

==={{Path|/run}} 目录===

{{Path|/run}} 目录被systemd 使用，其他的应用程序作为一个非持续性存储的运行时的数据，像{{Path|pid}}文件, 网络编程接口和状态文件。

systemd包将自动创建{{Path|/run}} 本身的路径文件。然而， 请注意,这一变化也将触发自动安装的[[OpenRC]]， 并可能会触发其使用的不同软件包。

==={{Path|/etc/mtab}}===

上游仅支持 {{Path|/etc/mtab}}，它是一个链接文件，链接到{{Path|/proc/self/mounts}}。如果不建立这个链接文件，就会导致{{c|mount}} ({{bug|434090}}) 和 {{c|df}} 。在之前有一些系统工具会写入信息(比如写入{{Path|/etc/mtab}}里面的挂载选项)，因此它应该是一个普通文件。现在所有的软件应该避免这个问题。不过,在转换文件成为链接文件之前,请检查 {{bug|477498}}，来确保系统不受任何已知错误报告的影响。

要创建链接文件，执行：

{{RootCmd|ln -sf /proc/self/mounts /etc/mtab}}

===在启动时确保/usr路径存在 ===

对于{{Path|/usr}}拆分配置，在你使用systemd前，使用[[initramfs]] 来挂载{{Path|/usr}} 。就目前而言，这直到包 {{Package|sys-kernel/genkernel}}被推出前，{{Package|sys-kernel/dracut}} 或 {{Package|sys-kernel/genkernel-next}} 仍然支持 {{Path|/usr}} 。为的是现在留出时间迁移：

{{Emerge|params+=--unmerge|sys-kernel/genkernel}}
{{Emerge|sys-kernel/dracut}}
{{Emerge|sys-kernel/genkernel-next}}

When using dracut, enable the usrmount module if it is not automatically enabled to mount {{Path|/usr}} automatically.

{{FileBox|filename=/etc/dracut/dracut.conf|lang=bash|1=
# Dracut modules to add to the default
add_dracutmodules+="usrmount"
}}

When genkernel-next is used, before rebuilding the kernel, be sure to set the <var>UDEV</var> variable in {{c|genkernel}}'s configuration file to <code>yes</code>. This will pull {{path|/usr}} into the initramfs:

{{FileBox|filename=/etc/genkernel.conf|lang=bash|1=
# Use udev instead of mdev as the default device manager for the initramfs.
# If systemd and perhaps lvm is used, then this _must_ be turned on.
UDEV="yes"
}}

{{RootCmd|genkernel --install all}}

See the [[Initramfs/Guide|Initramfs guide]] for more alternatives.

===使用LVM2和initramfs===

当使用 [[LVM|sys-fs/lvm2]]，且系统通过initramfs 启动时，必须使用{{Package|sys-kernel/genkernel-next}} 包来创建initramfs :

{{RootCmd|genkernel --udev --lvm <target>}}

<code><target></code> is either <code>initramfs</code> or one of the other genkernel targets which imply the creation of an initramfs. For more information, look at the output of {{c|genkernel --help}}:

{{Cmd|genkernel --help}}

When LVM is used, the {{c|lvmetad}} daemon needs to be started as well. Otherwise systemd will be unable to mount LVM volumes. {{c|lvmetad}} can be enabled in {{Path|/etc/lvm/lvm.conf}}:

{{FileBox|filename=/etc/lvm/lvm.conf|title=lvm.conf中需要更改的部分|lang=ini|1=
# Set use_lvmetad to '1' for systemd
use_lvmetad {{=}} 1
}}

{{Note/zh-cn|这可通过{{Path|lvmetad.socket}}组件激活{{Path|lvmetad.service}}来获得, 而不是通过修改 {{Path|/etc/lvm/lvm.conf}}，但当前版本的{{Package|sys-fs/lvm2}} 还不支持这些功能。}}

== 安装 ==

{{Package|sys-apps/systemd}}中包含 udev。一旦安装了{{Package|sys-apps/systemd}} ，那么就可以删除 {{Package|sys-fs/udev}}，因为systemd将会提供{{Package|virtual/udev}}。

Enable the <code>systemd</code> USE flag globally (in {{Path|make.conf}}). The <code>consolekit</code> USE flag should also be disabled to prevent conflicts with the {{c|systemd-logind}} service. It is also possible to switch to a systemd subprofile to use saner USE flags defaults in which case it is not necessary to change {{Path|make.conf}}:

{{RootCmd|eselect profile list}}

{{Note|When no systemd profile is used, or there is no systemd profile available for the system architecture, add the following code to {{Path|/etc/portage/profile/packages}} so that {{Package|sys-apps/openrc}} is not pulled in as a system dependency since OpenRC and systemd conflict.}}

{{FileBox|filename=/etc/portage/profile/packages|lang=text|1=# Remove OpenRC from the system profile when using systemd
-*sys-apps/openrc}}

最后，更新系统与Flags:

{{RootCmd|emerge -avDN @world}}

出现依赖性问题时(如 {{Package|sys-fs/udev}}  blocking {{Package|sys-apps/systemd}}), {{Package|sys-fs/udev}}，这可能是world文件已经被记录。要解决这个问题。试着取消:

{{RootCmd|emerge --deselect sys-fs/udev}}

== 使用systemd引导启动 ==

In order to run systemd, switch the {{c|init}} that the executable kernel (or the initramfs) uses.

{{Warning/zh-cn|先前被设置的服务管理器服务不会自动启动。这是因为该系统切换到不同的服务管理器。为了获得像网络或登录管理器的这样功能,这些服务需要被重新启用。更多关于这个的信息，在之后本文后面部分的‘‘‘服务’’’章节。}}

{{Note/zh-cn|如果在迁移启动引导器中发生了错误，它一般可以通过撤销该INIT变化这一步，来使用回默认的引导服务管理器（OpenRC）。这可以安全返回。本文的最后的故障排除章节，用来解决这些问题以便于可以安全的返回系统。}}

The following subsections document how to switch the {{c|init}} in one of the boot managers or the kernel.

=== Grub Legacy (0.x) ===

  <code>init=/usr/lib/systemd/systemd</code> 这行代码参数应该被添加到内核的代码行。这是一个摘自{{Path|grub.conf}}例子，它应该是这样:

{{FileBox|filename=/boot/grub/grub.conf|title=GRUB systemd 配置示例|1=
title=Gentoo with systemd
root (hd0,0)
kernel /vmlinuz root=/dev/sda2 init=/usr/lib/systemd/systemd
}}

如果要想使用OpenRC系统启动，尝试使用 <code>real_init</code> 替换<code>init</code>。

=== Grub 2 ===

当{{c|grub2-mkconfig}} 被使用时， 增加 init 这一行 <var>GRUB_CMDLINE_LINUX</var>:

{{Note/zh-cn|这个不需要使用一个initramfs生成{{c|dracut}}systemd ，因为initramfs内部已经有了systemd。}}

{{FileBox|filename=/etc/default/grub|title= GRUB2 systemd 配置示例|lang=bash|1=
# Append parameters to the linux kernel command line
GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"
}}

手动配置GRUB2文件时(仅限有经验的用户), 添加<code>init=</code>参数到 <code>linux</code> 或 <code>linux16</code>命令行。

{{FileBox|filename=/boot/grub/grub.cfg|title=GRUB2 配置示例片段|1=
linux /vmlinuz-3.10.9 root=UUID=508868e4-54c6-4e6b-84b0-b3b28b1656b6 init=/usr/lib/systemd/systemd
}}

当使用 genkernel-next's 引导时, 使用<code>real_init</code> 来替换<code>init</code>.

{{Note|This use of the deprecated <code>real_init</code> should not be needed for stable versions of genkernel-next.}}

=== 内核配置 ===

The init configuration can also be hard-coded in the kernel configuration. See {{Path|Processor type and features -> Built-in kernel command line}}. Note that this technique works for both {{c|grub}} and {{c|grub2}}.

=== 设置根（root）密码 ===

请不要忘记设置系统的根密码。如果出现错误,systemd将提示你输入根密码，从而进入维护模式。

== 安装后的设置 ==

systemd支持通过几个系统配置文件，来满足系统最基本的运行要求。

{{Note|While some system configuration parameters can be updated by modifying the appropriate configuration files, most settings are managed using utilities that require systemd to be running. In this case, it is safe to reboot the computer with systemd and use the {{c|hostnamectl}}, {{c|localectl}}, and {{c|timedatectl}} utilities as required.}}

=== 主机名称===

要设置主机名称，创建/编辑 {{Path|/etc/hostname}} ，然后直接输入所需的主机名。

当使用systemd启动时，一个叫 {{c|hostnamectl}}的工具 ，可以编辑{{Path|/etc/hostname}}和{{Path|/etc/machine-info}}来达到目的. 要更改主机名，执行：

{{RootCmd|hostnamectl set-hostname <HOSTNAME>}}

参考 {{c|man hostnamectl}} 来获得更多选项。

<!--
{{FileBox|filename=/etc/machine-info|title=配置你机器的相关信息。|lang=bash|1=
PRETTY_NAME="Larry's Computer"
ICON_NAME="computer-laptop"
}}
-->

=== 区域设置 ===

通常,区域设置将从OpenRC转换到安装systemd时被很好的设置。在你需要时,可以按照Gentoo手册的说明，设置语言环境{{Path|/etc/locale.conf}} :

{{FileBox|filename=/etc/locale.conf|title=系统本地化配置|lang=bash|1=
LANG="en_US.utf8"
}}

Once booted with systemd, the tool {{c|localectl}} is used to set locale and console or X11 keymaps. To change the system locale, run the following command:

{{RootCmd|localectl set-locale LANG<nowiki>=</nowiki><LOCALE>}}

更改虚拟控制台键盘映射表：

{{RootCmd|localectl set-keymap <KEYMAP>}}

最后,要设置X11布局:

{{RootCmd|localectl set-x11-keymap <LAYOUT>}}

如果需要model, 变量和选项也可以被指定：

{{RootCmd|localectl set-x11-keymap <LAYOUT> <MODEL> <VARIANT> <OPTIONS>}}

=== 时间和日期 ===

Time and date can be set using the {{c|timedatectl}} utility. That will also allow users to set up synchronization without needing to rely on {{Package|net-misc/ntp}} or other providers than systemd's own implementation.

To learn how to use {{c|timedatectl}} simply run:

{{RootCmd|timedatectl --help}}

=== 自动加载模块===

Automatic module loading is configured in a different file, or rather directory of files. The configuration files are stored in {{Path|/etc/modules-load.d}}. On boot every file with a list of modules will be loaded. The file format is a list of modules separated by newlines and can have any name as long as it ends with {{Path|.conf}}. The module loading can be separated by program, service or whatever way that fits personal preference. An example {{Path|virtualbox.conf}} is listed below:

{{FileBox|filename=/etc/modules-load.d/virtualbox.conf|title= virtualbox 模块示例文件|1=
vboxdrv
vboxnetflt
vboxnetadp
vboxpci
}}

=== 网络 ===

==== systemd-networkd系统守护进程管理网络配置====

systemd-networkd在有线网络接口的，简单的配置上是很有用的。它在默认情况下是禁用的。

要配置systemd-networkd，在{{ Path|/etc/systemd/network}}路径下创建一个文件：{{Path|*.network}}请参考[http://www.freedesktop.org/software/systemd/man/systemd.network.html systemd.network(5)]  一个简单的DHCP配置如下:

{{FileBox|filename=/etc/systemd/network/50-dhcp.network
|1=[Match]
Name=en*
 
[Network]
DHCP=yes}}

{{RootCmd|systemctl enable systemd-networkd.service
|systemctl start systemd-networkd.service}}

注意systemd-networkd {{Path|resolv.conf}}默认不会自动更新，要systemd管理DNS设置,替换{{Path|resolv.conf}}为一个符号连接并启动到systemd-resolved。

{{RootCmd|ln -snf /run/systemd/resolve/resolv.conf /etc/resolv.conf
|systemctl enable systemd-resolved.service
|systemctl start systemd-resolved.service}}

==== 网络管理 ====

通常NetworkManager的用于配置网络设置。为了这个目的，简单地用一个基于X11的桌面时，运行以下命令：

{{RootCmd|nm-connection-editor}}

If that is not the case and the network needs to be configured from console, give [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Using_the_NetworkManager_Command_Line_Tool_nmcli.html nmcli] a try, or follow a guided configuration process through {{c|nmtui}}:

{{RootCmd|nmtui}}

[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Networking_Config_Using_nmtui.html nmtui] 是一个ncurses的前端，在控制台模式下运行，同时将引导用户的过程中。

=== 处理日志文件 ===

systemd has its own way of handling log files without needing to rely on any external log system (like {{Package|app-admin/syslog-ng}} or {{Package|app-admin/rsyslog}}). Messages can now be read with {{c|journalctl}}. It can still be configured to use a preferred external tool for handling them. See {{c|man journald.conf}} to learn how to configure journald to suit personal needs.

Some common {{c|journalctl}} options:

{| class="table table-striped table-condensed"
|-
! Command line options for {{c|journalctl}} !! Result
|-
| {{c|journalctl}} without options || Show all log entries, starting with earliest.
|-
| <code>-b</code>, <code>--boot</code> || Show all log entries from this boot.
|-
| <code>-r</code>, <code>--reverse</code> || Newest entries first.
|-
| <code>-f</code>, <code>--follow</code> || Show the last few entries and display new log entries as they're being produced.
|-
| <code>-p</code>, <code>--priority=</code> || Specify (minimum) priority to display messages, with a choice from: "emerg" (0), "alert" (1), "crit" (2), "err" (3), "warning" (4), "notice" (5), "info" (6), "debug" (7).
|-
| <code>--since=</code>, <code>--until=</code> || Restrict entries by time. Accepts the format "YYYY-MM-DD hh:mm:ss" or the strings "yesterday", "today" and "tomorrow".
|-
| <code>-n</code>, <code>--lines=</code> || Restrict to a number of entries.
|-
| <code>-k</code>, <code>--dmesg</code> || Restrict to kernel messages.
|-
| <code>-u</code>, <code>--unit=</code> || Restrict to a certain Systemd unit.
|}

For more information and many more options, look at {{c|man journalctl}}.

===/tmp现在是在tmpfs===

除非明确指定挂载其他的文件系统到{{Path|/tmp}} 在 {{Path|/etc/fstab}}中配置， systemd将会挂载{{Path|/tmp}} 作为tmpfs。 这意味着它在每次启动时被清空，其大小将被限制在系统的RAM（内存）大小的50％。 要知道这是为什么，以及想要的行为和如何对其进行修改，请参考：[http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ API File Systems]。

===配置复杂的引导过程 ===

当迁移到systemd用户通常注意到差异引导过程的时间

* The boot option <code>quiet</code> not only influences the kernel output, but also that of systemd itself. Then, while setting up systemd for the machine, drop the option to see any errors could arise more easily. After that, add it back to get a quiet (and faster) boot.
* Even passing the <code>quiet</code> boot option, systemd can still be configured to show its status by also passing <code>systemd.show_status=1</code>.
* When not using the <code>quiet</code> boot option, some messages might be overwriting consoles. That is caused by the kernel configuration (see {{c|man 5 proc}} and look for {{Path|/proc/sys/kernel/printk}}). To tweak it pass the <code>loglevel=5</code> boot parameter to the kernel (and update the value according to preference, for instance set a lower value like 1).

== 服务 ==

At some point the system will need to be rebooted in order to get systemd running (in system mode). Be sure to read all of this document to ensure systemd is configured as completely as possible before rebooting. Note that {{c|journalctl}} works with systemd not running, but that {{c|systemctl}} will not do anything useful without systemd running. Complete the service configuration (enabling and starting of services) after logging in to the system running systemd.

=== OpenRC 服务 ===

虽然systemd原本旨在支持运行旧的init.d脚本，支持不适合依赖于基于RC像“openrc”的引导，因此它支持在Gentoo上完全禁止。openrc提供了额外的措施来确保初始化。当openrc不是引导系统器时，init.d不能运行（否则，结果将是不可预知的）。

=== 可用服务列表 ===

列出所有可用服务：<code>list-units</code> {{c|systemctl}}:

{{RootCmd|systemctl list-units|output=<pre>
UNIT                               LOAD   ACTIVE SUB       DESCRIPTION
boot.automount                     loaded active waiting   EFI System Partition Automount
proc-sys-fs-binfmt_misc.automount  loaded active waiting   Arbitrary Executable File Formats File System Automount Point
...
</pre>}}

下列文件扩展名值得关心：

{| class="table"
! Suffix
! Description
|-
| {{Path|.service}}
| plain service files (e.g. ones just running a daemon directly),
|-
| {{Path|.socket}}
| socket listeners (much like ''inetd''),
|-
| {{Path|.path}}
| filesystem triggers for services (running services when files change etc.).
|}

Alternatively the {{c|systemctl}} tool can be used to list all services (including implicit ones):

{{RootCmd|systemctl --all --full}}

最后查看未能运行的服务：

{{RootCmd|systemctl --failed}}

=== 启用、禁用、启动和停止服务 ===

使服务可用的一般方法是使用下面的命令:

{{RootCmd|systemctl enable foo.service}}

也可以禁用服务:

{{RootCmd|systemctl disable foo.service}}

这些命令允许使用默认名称默认目标（包括在服务文件的“安装”部分中指定的服务）。但是，有时服务或者不提供该信息，或你喜欢有另一个名称/目标。

请注意，这些命令只能启用或禁用系统能够在下次开机启动;要启动该服务，现在，使用：

{{RootCmd|systemctl start foo.service}}

同样的服务也可以停止:

{{RootCmd|systemctl stop foo.service}}

=== 安装自定义单元文件 ===

Custom unit files can be placed in {{Path|/etc/systemd/system}}, where they will be recognized after running {{c|systemctl daemon-reload}}:

{{RootCmd|systemctl daemon-reload}}

{{Path|/usr/lib/systemd/system}} 被预留给服务包管理器安装的文件。

=== 自定义单元文件 ===

当需要时只有轻微的修改到一个单位时，那里是无需创建 {{Path|/etc/systemd/system}}原始的单元文件的完整拷贝。重写包提供的管理单元中的设置可以通过链接文件 {{Path| *.d}} 目录在命名原单位之后 (例如  {{Path|apache2.d}}) 在{{Path|/etc/systemd/system/}}中。

{{FileBox|filename=/etc/systemd/system/apache2.d/mem-limit.conf|title=Example of adding/overriding settings in a service file|lang=ini|1=
[Service]
MemoryLimit{{=}}1G
}}

重载systemd，需要通知它的变化：

{{RootCmd|systemctl daemon-reload}}

然后服务需要重新来启动应用的更改:

{{RootCmd|systemctl restart apache2}}

验证更改的变量被应用到服务：

{{RootCmd|systemctl show --property{{=}}MemoryLimit apache2|output=<pre>MemoryLimit=1074000000</pre>}}

=== 根据自定义名称启用服务 ===

当提供的名称在组件"[安装]"部分的不符合期望，由"Alias"提供永久的新名字，这为此通过 [[#Customizing unit files|customization]] 所需，可以手动在 {{Path|/etc/systemd/system/*.wants/}} 创建一个链接文件。名称 {{Path| *.wants}} 目录可以指定一个目标或者将取决于新一的另一项服务。

例如，安装{{Path|mysqld.service}} 因为{{Path|db.service}}在{{Path|multi-user.target}}:

{{RootCmd|ln -s /usr/lib/systemd/system/mysqld.service /etc/systemd/system/multi-user.target.wants/db.service}}

要禁用该服务,只删除符号链接即可:

{{RootCmd|rm /etc/systemd/system/multi-user.target.wants/db.service}}

=== 本机服务 ===

Gentoo的安装包已经有systemd组件文件。对于这些服务,这足以使他们开启它。快速的迷你安装组件文件可以在[http://qa-reports.gentoo.org/output/eclass-usage/systemd.txt systemd eclass users list]看到。

下表列出了与OpenRC一致的服务：

{| class="table" style="text-align: center;"
|+ Migration chart
|-
! scope="col" | Gentoo package
! scope="col" | OpenRC service
! scope="col" | systemd unit 
! scope="col" | Notes
|-
! scope="row" rowspan="28" | {{Package|sys-apps/openrc}}
| bootmisc || systemd-tmpfiles-setup.service || always enabled, uses {{Path|tmpfiles.d}}
|-
| consolefont || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| devfs ||  || 
|-
| dmesg ||  || 
|-
| fsck || fsck*.service || pulled in implicitly by mounts
|-
| functions.sh || See note || {{Bug|373219}}
|-
| hostname || (builtin) || {{Path|/etc/hostname}}
|-
| hwclock || See note || always enabled as part of systemd (ie It is baked in and is not a unit)
|-
| keymaps || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| killprocs ||  || 
|-
| local ||  || 
|-
| localmount || local-fs.target || actual units are created implicitly from fstab
|-
| modules || systemd-modules-load.service || always enabled, uses {{Path|/etc/modules-load.d/*.conf}}
|-
| mount-ro ||  || 
|-
| mtab ||  || 
|-
| netmount || remote-fs.target || 
|-
| numlock ||  || 
|-
| procfs || (builtin) || 
|-
| root || remount-rootfs.service || 
|-
| savecache || n/a || OpenRC internals
|-
| staticroute ||  || 
|-
| swap || swap.target || actual units are created implicitly from fstab
|-
| swclock ||  || 
|-
| sysctl || systemd-sysctl.service || {{Path|sysctl.conf}} and {{Path|sysctl.d/}}
|-
| sysfs || (builtin) || 
|-
| termencoding || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| scope="row" rowspan="2" | urandom
| systemd-random-seed-load.service || 
|-
| systemd-random-seed-save.service || 
|-
! scope="row" | {{Package|app-admin/rsyslog}}
| rsyslog || rsyslog.service || 
|-
! scope="row" | {{Package|app-admin/syslog-ng}}
| syslog-ng || syslog-ng.service || 
|-
! scope="row" rowspan="2" | {{Package|media-sound/alsa-utils}}
| scope="row" rowspan="2" | alsasound
| alsa-store.service || (enabled by default)
|-
| alsa-restore.socket || (enabled by default)
|-
! scope="row" | {{Package|net-misc/dhcpcd}}
| dhcpcd || dhcpcd.service || 
|-
! scope="row" rowspan="5" | {{Package|net-misc/netifrc}} 
| scope="row" rowspan="5" | net.*
| net@.service || systemd wrapper for net.* scripts (comes with net-misc/netifrc)
|-
| netctl@.service || net-misc/netctl is originally an Arch Linux tool.
|-
| NetworkManager.service || For &lt;networkmanager-0.9.8.4 : enable NetworkManager-dispatcher.service for dispatcher.d scripts to work. <br/> Enable NetworkManager-wait-online.service to detect that the system has a working internet connection.<br/>Disable all other managers (e.g., wicd, dhcpcd) and wpa_supplicant.
|-
| dhcpcd.service || Provided by net-misc/dhcpcd
|-
| systemd.networkd.service || Part of systemd
|-
! scope="row" | {{Package|net-misc/openntpd}}
| ntpd || ntpd.service ||
|-
! scope="row" rowspan="2" | {{Package|net-misc/openssh}}
| scope="row" rowspan="2" | sshd
| sshd.service || runs sshd as a daemon
|-
| sshd.socket || runs sshd on a inetd-like basis (for each incoming connection)
|-
! scope="row" rowspan="2" | {{Package|net-wireless/wpa_supplicant}}
| scope="row" rowspan="2" | wpa-supplicant
| wpa_supplicant.service || D-Bus controlled daemon (e.g. for [[NetworkManager#Systemd|NetworkManager]])
|-
| wpa_supplicant@.service || interface-specific wpa_supplicant (used like {{Path|wpa_supplicant@wlan0.service}})
|-
! scope="row" rowspan="3" | {{Package|net-print/cups}}
| scope="row" rowspan="3" | cupsd
| cups.service || classic on-boot start up service
|-
| cups.socket
| scope="row" rowspan="2" | socket and path activation (cups only started on-demand)
|-
| cups.path
|-
! scope="row" | {{Package|net-wireless/bluez}}
| bluetooth || bluetooth.service || 
|-
! scope="row" rowspan="2" | {{Package|sys-apps/dbus}}
| scope="row" rowspan="2" | dbus
| dbus.service || 
|-
| dbus.socket || 
|-
! scope="row" | {{Package|sys-apps/irqbalance}}
| irqbalance || irqbalance.service || supports daemon mode only
|-
! scope="row" | {{Package|sys-apps/microcode-ctl}}
| microcode_ctl ||  || Configure ''microcode'' as a '''module''' to let it load the microcode itself. Go to "Processor type and features" -> "CPU microcode loading support" and remember to add the right option based on the system having an intel or amd processor.
|-
! scope="row" rowspan="4" | {{Package|sys-fs/udev}}
| udev || udev.service || 
|-
| udev-mount || (builtin) || {{Path|/dev}} is mounted as tmpfs
|-
| udev-postmount || udev-trigger.service || 
|-
| || udev-settle.service || 
|-
! scope="row" | {{Package|sys-power/acpid}}
| acpid || acpid.service || Most of its functionality is done by systemd itself, so consider disabling this
|-
! scope="row" | {{Package|x11-apps/xdm}}
| (xdm) || xdm.service || OpenRC uses common xdm init.d installed by {{Package|x11-base/xorg-server}}. With systemd the corresponding unit file for each DM (gdm.service, kdm.service...) needs to be enabled.
|-
! scope="row" rowspan="2" | {{Package|net-firewall/iptables}}
| scope="row" rowspan="2" | iptables
| iptables-store.service || 
|-
| iptables-restore.service || 
|-
|}

===时间服务 ===

自从197年版本的systemd，支持计时器,cron 没有必要安装到systemd系统上。212年版本以来持续性服务被支持,甚至取代了anacron。持久性计时器在下一次有机会当运行的系统断电后，计时器将列入计划任务。

以下是关于如何使运行在用户的环境下，制作简单定时器的一个例子。如果没有登录用户或会话运行。每一个定时服务需要一个定时器和一个服务文件，该文件是由定时器按如下激活的：

{{FileBox|filename=~/.local/share/systemd/user/backup-work.timer|title=Example of a timer running every working day|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=no
 
[Timer]
Persistent=false
OnCalendar=Mon-Fri *-*-* 11:30:00
Unit=backup-work.service
 
[Install]
WantedBy=default.target
}}

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Example of a service triggering backup|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

首先,告诉systemd要重新扫描服务文件:

{{Cmd|systemctl --user daemon-reload}}

可以手动触发备份功能，通过运行下面的命令:

{{Cmd|systemctl --user start backup-work.service}}

手动启动和停止计时器如下:

{{Cmd|systemctl --user start backup-work.timer}}
{{Cmd|systemctl --user stop backup-work.timer}}

最后,激活计时器在每一个系统都启动,运行:

{{Cmd|systemctl --user enable backup-work.timer}}

要检查正在运行的服务的最后结果：

{{Cmd|systemctl --user list-timers}}

==== 电子邮件故障 ====

如果一个定时服务运行和失败可以发送一封电子邮件通知用户或管理员。这是可能的“OnFailure”节，指定如果服务失败时会发生什么。检测到故障时由一个非零的返回代码调用脚本。

为了这个，改变脚本如下:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=服务触发备份的例子|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
OnFailure=failure-email@%i.service
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

这要求服务{{Path|failure-email@.service}} 被安装，它可以在
[https://github.com/kylemanna/systemd-utils/tree/master/onfailure kylemanna's systemd-utils repository]被找到。

==== 替换 cron ====

上面的计时器和服务文件也可以被添加到{{Path|/usr/lib/systemd/system}} 让他们有可用的系统体系。安装部分那时应该说明<code>WantedBy=multi-user.target</code>来系统启动启用服务。

然而， cron也可以通过位于{{Path|/etc/cron.daily}}的脚本运行。以及其他的你希望的，日常运行的路径。这种行为可以通过安装 {{Package|sys-process/systemd-cron}}仿真systemd。 然后用以下命令激活新cron替换:

{{RootCmd|systemctl enable cron.target}}
{{RootCmd|systemctl start cron.target}}

== 故障排除 ==

* {{Bug|systemd|search=package}}
* {{Bug|systemd|search=product|site=fdo}}
* [http://freedesktop.org/wiki/Software/systemd/Debugging Upstream debugging guide]

=== /dev/kmsg buffer overrun, some messages lost ===

; Problem: When booting the system displays an infinite loop of <code>/dev/kmsg buffer overrun, some messages lost</code>. The login screen to console never appears since the system never gets to that point in the boot process.

; Solution: Most of the time this issue is caused when the <var>CONFIG_POWER_SUPPLY_DEBUG</var> option is enabled in the kernel. The current workaround is to disable this option in the kernel, then recompile, install, and boot the new kernel. The solution can also be found in [https://forums.gentoo.org/viewtopic-t-977530-postdays-0-postorder-asc-start-0.html this thread] on the Gentoo forums. According to one user one the forum, this issue was also seen when using I2C EEPROM on an embedded system<ref>https://forums.gentoo.org/viewtopic-t-977530-postdays-0-postorder-asc-start-25.html  Retrieved on March 12th, 2016</ref>. The solution in this case was to disable the <var>CONFIG_I2C_DEBUG_CORE</var> kernel option.

=== 在任何地方打开图形会话===

By default systemd only launches a {{c|getty}} process when it's going to be used. This causes some display managers (like GDM) to use the remaining TTYs for opening graphical sessions on demand, which can result in having consoles and graphical sessions placed randomly depending on the order they were used.

To stick with a more "classical" behavior (i.e, consoles placed from {{Path|tty1}} to {{Path|tty6}} and graphical sessions using the remaining TTYs) force it to always launch {{c|getty}} on those:

{{RootCmd|systemctl enable getty@tty{2,3,4,5,6}.service}}

=== lvm ===

从OpenRC切换到systemd+LVM，你需要正确挂载系统卷并激活LVM服务：

{{RootCmd|systemctl enable lvm2-monitor.service}}

虽然这可能并不需要激活根（root）卷（如果LVM集成到initramfs），它可能不适用于其他LVM卷，除非该服务被激活。

=== systemd-bootchart ===

{{KernelBox|title=systemd-bootchart support|1=<pre>
File systems  --->
	Pseudo filesystems --->
	[*] /proc file system support
Kernel hacking  --->
	[*] Kernel debugging
	[*] Collect scheduler debugging info
	[*] Collect scheduler statistics
</pre>}}

当systemd-bootchart试图开始{{Path|/sbin/init}}，对它重新调用systemd：

{{FileBox|filename=/etc/systemd/bootchart.conf|lang=bash|1=
...
Init=/usr/lib/systemd/systemd
...
}}

bootchart是一份SVG格式的报告，位于{{Path|/run/log/}}。

=== syslog-ng与systemd冲突 ===

systemd creates {{Path|/dev/log}} as datagram socket <ref>Jose Pedro Oliveira. [https://bugzilla.redhat.com/show_bug.cgi?id=770810#c10 Note about custom syslog-ng configurations files], [https://bugzilla.redhat.com/ Red Hat Bugzilla], January 11, 2012. Retrieved on January 12th, 2015</ref> <ref>[https://fedoraproject.org/wiki/Common_F16_bugs#systemd-syslog-ng-problems Systemd and syslog-ng interaction problems: system freezes / syslog-ng fails to start], [https://fedoraproject.org/wiki/Fedora_Project_Wiki Fedora Project Wiki]. Retrieved on January 12th, 2015</ref> so syslog-ng needs to be told to read from a ''unix-dgram'' instead of a ''unix-stream'' as otherwise syslog-ng would be using a "wrong" stream:

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# By default syslog-ng uses unix-stream. Comment this out and add unix-dgram instead.
# unix-stream('/dev/log');
unix-dgram('/dev/log');
}}

=== syslog-ng source for systemd ===

There is ''no need'' to add <code>unix-dgram('/dev/log');</code> to the {{Path|/etc/syslog-ng/syslog-ng.conf}} config file. It will cause {{c|syslog-ng}} to fail (at least on version syslog-ng-3.7.2). Update the <code>source src { ...; };</code> line mentioned in the [[Syslog-ng#Sources|syslog-ng article]] as follows:

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# default config for openrc
#source src { system(); internal(); };
 
# systemd
source src { systemd-journal(); internal(); };
}}

=== sys-fs/cryptsetup配置 ===

systemd似乎不遵守{{Path|/etc/conf.d/dmcrypt}} (参见{{bug|429966}})因此需要通过配置{{Path|/etc/crypttab}}文件：

{{FileBox|filename=/etc/crypttab|title=Configuration file for encrypted block devices|1=
crypt-home UUID=c25dd0f3-ecdd-420e-99a8-0ff2eaf3f391 -
}}

Based on the system's {{Path|/etc/crypttab}} file, a new service file might need to be created.
To do this, enable the <code>cryptsetup</code> USE flag for {{Package|sys-apps/systemd}}. It will install {{Path|/usr/lib/systemd/system-generators/systemd-cryptsetup-generator}}. Executing it will create a service file in {{Path|/tmp/}}, which can now be copied to {{Path|/etc/systemd/system}}, adjusted manually and added to the desired runlevel.

=== 检查未能启动的部分 ===

检查未能启动的部分

{{RootCmd|systemctl --failed}}

=== 开启调式排错模式 ===

得到更多信息，设置{{Path|/etc/systemd/system.conf}}：

{{FileBox|filename=/etc/systemd/system.conf|lang=bash|1=
LogLevel=debug
}}

或启用调试shell，在 tty9打开一个终端。这有助于在引导过程中调试服务。

{{RootCmd|systemctl enable debug-shell.service}}

=== e4rat usage ===

请记得编辑{{Path|/etc/e4rat.conf}}，设置'init' 到 {{Path|/usr/lib/systemd/systemd}}，否则它将继续使用OpenRC引导。

=== GRSecurity hardening ===

启用 grsecurity ，systemd-networkd可能记录有下面的错误：

{{CodeBox|title=systemd-networkd error|1=could not find udev device: Permission denied}}

The error raises due to systemd-networkd working under a non-root user with grsecurity refusing access to the complete {{Path|/sys}} structure for such users. To disable this option, disable the <var>CONFIG_GRKERNSEC_SYSFS_RESTRICT</var> kernel option.

logind may also have subtle permission issues with <var>CONFIG_GRKERNSEC_PROC</var> active, see {{Bug|472098}}.

== 另请参阅 ==

* [[Comparison of init systems]] - An article comparing and contrasting the differences in Gentoo init systems.
* [[Sakaki's_EFI_Install_Guide|Sakaki's EFI Install Guide]] - Particularly look at the chapter entitled [[Sakaki's_EFI_Install_Guide/Configuring_systemd_and_Installing_Necessary_Tools|Configuring systemd and installing necessary tools]]
* [[OpenRC to Systemd Cheatsheet]]

== 外部资源 ==

* [http://www.freedesktop.org/wiki/Software/systemd/FrequentlyAskedQuestions FAQ]
* [http://www.freedesktop.org/wiki/Software/systemd/TipsAndTricks Tips and tricks]

== 参考 ==

{{reflist}}

[[Category:Init systems]]
