<languages />
{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://freedesktop.org/wiki/Software/systemd|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox gitweb|http://cgit.freedesktop.org/systemd/systemd/|raw=true}}
}}
{{Warning/zh-cn|正在进行校正----2016.6.19。}}

'''systemd''' 是一个现代 SysV-style init 和 rc (运行命令)<ref>Eric S. Raymond. http://www.catb.org/jargon/html/R/rc-file.html Retrieved on June 27th, 2015</ref> 作为linux系统以往常用的init的替代引导器。
<!--
以下配置目录OpenRC 或 systemd使用的都是：
* {{Path|/etc/modules-load.d}},
* {{Path|/etc/sysctl.d}},
* {{Path|/etc/binfmt.d}}
-->

== 预安装配置 ==

{{Note/zh-cn|当你的版本 <{{=}}sys-apps/systemd-203 时，请查看 [[/upgrade|upgrade subpage]]。}}

=== 内核 ===

systemd使现代Linux内核的许多特色得以充分发挥。现在，要想支持systemd，内核版本必须高于ebuild 2.6.39。
在最新的版本 {{Package|sys-kernel/gentoo-sources}}包中, 有一个快捷的方法，使得systemd成为强制选择或可选的内核选项(请看[[Kernel/Configuration]] 来获得进一步的了解):

{{KernelBox|title=快速安装使用gentoo-sources|<pre>
Gentoo Linux --->
        Support for init systems, system and service managers --->
                [*] systemd
</pre>}}

手动配置内核选项 (这是在不使用{{Package|sys-kernel/gentoo-sources}}时，唯一的选择 ), 下面是内核配置选项的要求或建议:

<!-- See http://cgit.freedesktop.org/systemd/systemd/plain/README -->
{{KernelBox|title=必选选项|<pre>
General setup  --->
	[*] Control Group support
	[*] open by fhandle syscalls
	[ ] Enable deprecated sysfs features to support old userspace tools
	[*] Configure standard kernel features (expert users)  --->
		[*] Enable eventpoll support
		[*] Enable signalfd() system call
		[*] Enable timerfd() system call
[*] Networking support --->
Device Drivers  --->
	Generic Driver Options  --->
		[*] Maintain a devtmpfs filesystem to mount at /dev
File systems  --->
	[*] Inotify support for userspace
	Pseudo filesystems  --->
		[*] /proc file system support
		[*] sysfs file system support
</pre>}}

{{KernelBox|title=推荐选项|<pre>
General setup  --->
	[*] Namespaces support  --->
		[*] Network namespace
[*] Enable the block layer  --->
	[*] Block layer SG support v4
Processor type and features  --->
	[*] Enable seccomp to safely compute untrusted bytecode
Networking support --->
	Networking options --->
		<*> The IPv6 protocol
Device Drivers  --->
	Generic Driver Options  --->
		()  path to uevent helper
		[ ] Fallback user-helper invocation for firmware loading
Firmware Drivers  --->
	[*] Export DMI identification via sysfs to userspace
File systems --->
	<*> Kernel automounter version 4 support (also supports v3)
	Pseudo filesystems --->
		[*] Tmpfs virtual memory file system support (former shm fs)
		[*]   Tmpfs POSIX Access Control Lists
		[*]   Tmpfs extended attributes
</pre>}}

UEFI系统应该启用下面的选项:

{{KernelBox|title=UEFI支持|<pre>
[*] Enable the block layer  --->
	Partition Types  --->
		[*] Advanced partition selection
		[*]   EFI GUID Partition support
Processor type and features  --->
	[*] EFI runtime service support
Firmware Drivers  --->
        EFI (Extensible Firmware Interface) Support -->
	        <*> EFI Variable Support via sysfs
</pre>}}

如果你的系统使用BFQ scheduler, 这里推荐使用 BFQ upstream 来启用 "BFQ hierarchical scheduling support" 下的"Enable the block layer -> IO Schedulers".

要获取最新的列表,请参阅部分上游的“需求”说明：[http://cgit.freedesktop.org/systemd/systemd/tree/README README]文件。

==={{Path|/run}} 目录===

{{Path|/run}} 目录被systemd 使用，其他的应用程序作为一个非持续性存储的运行时的数据，像{{Path|pid}}文件, 网络编程接口和状态文件。

systemd包将自动创建{{Path|/run}} 本身的路径文件。然而， 请注意,这一变化也将触发自动安装的[[OpenRC]]， 并可能会触发其使用的不同软件包。

==={{Path|/etc/mtab}}===

上游仅支持 {{Path|/etc/mtab}}，它是一个链接文件，链接到{{Path|/proc/self/mounts}}。如果不建立这个链接文件，就会导致{{c|mount}} ({{bug|434090}}) 和 {{c|df}} ({{bug|477240}}) 。在之前有一些系统工具会写入信息(比如写入{{Path|/etc/mtab}}里面的挂载选项)，因此它应该是一个普通文件。现在所有的软件应该避免这个问题。不过,在转换文件成为链接文件之前,请检查 {{bug|477498}}，来确保系统不受任何已知错误报告的影响。

要创建链接文件，执行：

{{RootCmd|ln -sf /proc/self/mounts /etc/mtab}}

===在启动时确保/usr路径存在 ===

对于{{Path|/usr}}拆分配置，在你使用systemd前，使用[[initramfs]] 来挂载{{Path|/usr}} 。就目前而言，这直到包 {{Package|sys-kernel/genkernel}}被推出前，{{Package|sys-kernel/dracut}} 或 {{Package|sys-kernel/genkernel-next}} 仍然支持 {{Path|/usr}} 。为的是现在留出时间迁移：

{{Emerge|params+=--unmerge|sys-kernel/genkernel}}
{{Emerge|sys-kernel/dracut}}
{{Emerge|sys-kernel/genkernel-next}}

使用dracut时，如果它不自动启用模块 {{Path|/usr}}，请手动安装。

{{FileBox|filename=/etc/dracut/dracut.conf|lang=bash|1=
# Dracut modules to add to the default
add_dracutmodules+="usrmount"
}}

当你使用genkernel-next时，在重新编译内核之前，一定要在{{c|genkernel}}配置中设置<var>UDEV</var> 变量，使他变成<code>yes</code>。这将把{{path|/usr}}配置到initramfs中：

{{FileBox|filename=/etc/genkernel.conf|lang=bash|1=
# 使用udev而不是把MDEV作为initramfs的默认设备管理器。
#如果systemd或者同时使用LVM，那么必须开启下列选项。
UDEV="yes"
}}

{{RootCmd|genkernel --install all}}

参考 [[Initramfs/Guide|Initramfs guide]] 来获得更多帮助。

===使用LVM2和initramfs===

当使用 [[LVM|sys-fs/lvm2]]，且系统通过initramfs 启动时，必须使用{{Package|sys-kernel/genkernel-next}} 包来创建initramfs :

{{RootCmd|genkernel --udev --lvm <target>}}

这意味着创建一个initramfs genkernel target，使用<code><target></code> 或 <code>initramfs</code> 。更多有关信息，请查看{{c|genkernel --help}}的提示:

{{Cmd|genkernel --help}}

当使用LVM时, 需要启动 {{c|lvmetad}}守护进程。否则systemd将无法挂载LVM卷。可以在{{Path|/etc/lvm/lvm.conf}}中启用{{c|lvmetad}}:

{{FileBox|filename=/etc/lvm/lvm.conf|title=lvm.conf中需要更改的部分|lang=ini|1=
# Set use_lvmetad to '1' for systemd
use_lvmetad {{=}} 1
}}

{{Note/zh-cn|这可通过{{Path|lvmetad.socket}}组件激活{{Path|lvmetad.service}}来获得, 而不是通过修改 {{Path|/etc/lvm/lvm.conf}}，但当前版本的{{Package|sys-fs/lvm2}} 还不支持这些功能。}}

== 安装 ==

{{Package|sys-apps/systemd}}中包含 udev。一旦安装了{{Package|sys-apps/systemd}} ，那么就可以删除 {{Package|sys-fs/udev}}，因为systemd将会提供{{Package|virtual/udev}}。

开启 <code>systemd</code> 在全局USE flag 中，({{Path|make.conf}}中)。<code>consolekit</code> USE flag 也应该被禁用，以防止与{{c|systemd-logind}}服务产生冲突。另外，也可以切换到一个systemd sub profile使用的较好的USE标记的默认值，在这种情况下，没有必要改变{{Path|make.conf}}:

{{RootCmd|eselect profile list}}

{{Note|当没有systemd配置文件使用，或存在的系统架构没有可用的systemd配置文件时，下面的代码：添加到{{Path|/etc/portage/profile/packages}} 使{{Package|sys-apps/openrc}} 不被涉及，当OpenRC的和systemd冲突的系统依赖。}}

{{FileBox|filename=/etc/portage/profile/packages|lang=text|1=#使用systemd时，从系统配置文件中删除OpenRC的-*sys-apps/openrc}}

最后，更新系统与Flags:

{{RootCmd|emerge -avDN @world}}

出现依赖性问题时(如 {{Package|sys-fs/udev}}  blocking {{Package|sys-apps/systemd}}), {{Package|sys-fs/udev}}，这可能是world文件已经被记录。要解决这个问题。试着取消:

{{RootCmd|emerge --deselect sys-fs/udev}}

== 使用systemd引导启动 ==

为了运行systemd,切换{{c|init}}可用内核 (或者 initramfs)使用。

{{Warning/zh-cn|先前被设置的服务管理器服务不会自动启动。这是因为该系统切换到不同的服务管理器。为了获得像网络或登录管理器的这样功能,这些服务需要被重新启用。更多关于这个的信息，在之后本文后面部分的‘‘‘服务’’’章节。}}

{{Note/zh-cn|如果在迁移启动引导器中发生了错误，它一般可以通过撤销该INIT变化这一步，来使用回默认的引导服务管理器（OpenRC）。这可以安全返回。本文的最后的故障排除章节，用来解决这些问题以便于可以安全的返回系统。}}

接下来的部分文档指导你如何切换{{c|init}} 启动管理器或内核。

=== Grub Legacy (0.x) ===

  <code>init=/usr/lib/systemd/systemd</code> 这行代码参数应该被添加到内核的代码行。这是一个摘自{{Path|grub.conf}}例子，它应该是这样:

{{FileBox|filename=/boot/grub/grub.conf|title=GRUB systemd 配置示例|1=
title=Gentoo with systemd
root (hd0,0)
kernel /vmlinuz root=/dev/sda2 init=/usr/lib/systemd/systemd
}}

如果要想使用OpenRC系统启动，尝试使用 <code>real_init</code> 替换<code>init</code>。

=== Grub 2 ===

当{{c|grub2-mkconfig}} 被使用时， 增加 init 这一行 <var>GRUB_CMDLINE_LINUX</var>:

{{Note/zh-cn|这个不需要使用一个initramfs生成{{c|dracut}}systemd ，因为initramfs内部已经有了systemd。}}

{{FileBox|filename=/etc/default/grub|title= GRUB2 systemd 配置示例|lang=bash|1=
# Append parameters to the linux kernel command line
GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"
}}

{{Warning/zh-cn|以后编译内核完成时，请编辑}}{{Path|/boot/grub/grub.cfg}}

{{Warning/zh-ch|文件删掉GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"前的“#”。然后再执行命令}}

{{RootCmd|grub2-mkconfig -o /boot/grub/grub.cfg}}


手动配置GRUB2文件时(仅限有经验的用户), 添加<code>init=</code>参数到 <code>linux</code> 或 <code>linux16</code>命令行。

{{FileBox|filename=/boot/grub/grub.cfg|title=GRUB2 配置示例片段|1=
linux /vmlinuz-3.10.9 root=UUID=508868e4-54c6-4e6b-84b0-b3b28b1656b6 init=/usr/lib/systemd/systemd
}}

当使用 genkernel-next's 引导时, 使用<code>real_init</code> 来替换<code>init</code>.

{{Note|<code>real_init</code>应该在genkernel-next稳定版中弃用。 }}

=== 内核配置 ===

Init配置也可以在内核配置被固定。请看{{Path|Processor type and features -> Built-in kernel command line}}.  . 注意：这个方法适用于 {{c|grub}}.和  {{c|grub2}}

=== 设置根（root）密码 ===

请不要忘记设置系统的根密码。如果出现错误,systemd将提示你输入根密码，从而进入维护模式。

== 安装后的设置 ==

systemd支持通过几个系统配置文件，来满足系统最基本的运行要求。

{{Note/zh-cn|虽然一些系统配置参数可通过修改相应的配置文件而被更新，但大部分设定使用需要systemd才能被系统设置程序管理。在这种情况下，使用systemd重新引导计算机是安全的{{c|hostnamectl}}, {{c|localectl}},  然而系统设置{{c|timedatectl}}是必需的}}

=== 主机名称===

要设置主机名称，创建/编辑 {{Path|/etc/hostname}} ，然后直接输入所需的主机名。

当使用systemd启动时，一个叫 {{c|hostnamectl}}的工具 ，可以编辑{{Path|/etc/hostname}}和{{Path|/etc/machine-info}}来达到目的. 要更改主机名，执行：

{{RootCmd|hostnamectl set-hostname <HOSTNAME>}}

参考 {{c|man hostnamectl}} 来获得更多选项。

<!--
{{FileBox|filename=/etc/machine-info|title=配置你机器的相关信息。|lang=bash|1=
PRETTY_NAME="Larry's Computer"
ICON_NAME="computer-laptop"
}}
-->

=== 区域设置 ===

通常,区域设置将从OpenRC转换到安装systemd时被很好的设置。在你需要时,可以按照Gentoo手册的说明，设置语言环境{{Path|/etc/locale.conf}} :

{{FileBox|filename=/etc/locale.conf|title=系统本地化配置|lang=bash|1=
LANG="en_US.utf8"
}}

如果你通过systemd启动，那么工具{{c|localectl}}可以被使用来设置区域在控制台或X11键盘映射的地区设置。要更改系统区域设置，请运行下列命令：

{{RootCmd|localectl set-locale LANG<nowiki>=</nowiki><LOCALE>}}

更改虚拟控制台键盘映射表：

{{RootCmd|localectl set-keymap <KEYMAP>}}

最后,要设置X11布局:

{{RootCmd|localectl set-x11-keymap <LAYOUT>}}

如果需要model, 变量和选项也可以被指定：

{{RootCmd|localectl set-x11-keymap <LAYOUT> <MODEL> <VARIANT> <OPTIONS>}}

=== 时间和日期 ===

可以使用{{c|timedatectl}}来设置时间和日期。它也允许用户设置同步，而无需依赖{{Package|net-misc/ntp}} 或者其他的systemd自己的工具。

学习如何使用 {{c|timedatectl}} 只需运行：

{{RootCmd|timedatectl --help}}

=== 自动加载模块===

自动加载模块配置在不同的文件中，或者更确切地说，在目录中的文件中。配置文件存储在{{Path|/etc/modules-load.d}}。在启动与模块列表的每个文件将被加载，文件格式是由换行符分隔模块的列表，并且可以使用任何名称，只要它的扩展名是{{Path|.conf}}。 加载模块可以由程序、服务或其他方式,取决于符合个人喜好。举个例子——{{Path|virtualbox.conf}}。如下表所示：

{{FileBox|filename=/etc/modules-load.d/virtualbox.conf|title= virtualbox 模块示例文件|1=
vboxdrv
vboxnetflt
vboxnetadp
vboxpci
}}

=== 网络 ===

==== systemd-networkd系统守护进程管理网络配置====

systemd-networkd在有线网络接口的，简单的配置上是很有用的。它在默认情况下是禁用的。

要配置systemd-networkd，在{{ Path|/etc/systemd/network}}路径下创建一个文件：{{Path|*.network}}请参考[http://www.freedesktop.org/software/systemd/man/systemd.network.html systemd.network(5)]  一个简单的DHCP配置如下:

{{FileBox|filename=/etc/systemd/network/50-dhcp.network
|1=[Match]
Name=en*
 
[Network]
DHCP=yes}}

{{RootCmd|systemctl enable systemd-networkd.service
|systemctl start systemd-networkd.service}}

注意systemd-networkd {{Path|resolv.conf}}默认不会自动更新，要systemd管理DNS设置,替换{{Path|resolv.conf}}为一个符号连接并启动到systemd-resolved。

{{RootCmd|ln -snf /run/systemd/resolve/resolv.conf /etc/resolv.conf
|systemctl enable systemd-resolved.service
|systemctl start systemd-resolved.service}}

==== 网络管理 ====

通常NetworkManager的用于配置网络设置。为了这个目的，简单地用一个基于X11的桌面时，运行以下命令：

{{RootCmd|nm-connection-editor}}

如果情况并非如此,网络需要从终端来配置，[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Using_the_NetworkManager_Command_Line_Tool_nmcli.html nmcli]值得试试， 或者遵循配置指导{{c|nmtui}}：

{{RootCmd|nmtui}}

[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Networking_Config_Using_nmtui.html nmtui] 是一个ncurses的前端，在控制台模式下运行，同时将引导用户的过程中。

=== 处理日志文件 ===

systemd 有自己的方式处理日志文件,而不需要依赖任何外部日志系统 (像 {{Package|app-admin/syslog-ng}} 或 {{Package|app-admin/rsyslog}})。日志信息可以通过 {{c|journalctl}}来读取。 但是无论如何，它仍然可以被配置为使用一个更优秀的外部工具来处理它们。 请打开终端输入{{c|man journald.conf}}来学习如何配置journald来满足你的个人的需求。

一些常用选项{{c|journalctl}}:

{| class="table table-striped table-condensed"
|-
! Command line options for {{c|journalctl}} !! Result
|-
| {{c|journalctl}} without options || Show all log entries, starting with earliest.
|-
| <code>-b</code>, <code>--boot</code> || Show all log entries from this boot.
|-
| <code>-r</code>, <code>--reverse</code> || Newest entries first.
|-
| <code>-f</code>, <code>--follow</code> || Show the last few entries and display new log entries as they're being produced.
|-
| <code>-p</code>, <code>--priority=</code> || Specify (minimum) priority to display messages, with a choice from: "emerg" (0), "alert" (1), "crit" (2), "err" (3), "warning" (4), "notice" (5), "info" (6), "debug" (7).
|-
| <code>--since=</code>, <code>--until=</code> || Restrict entries by time. Accepts the format "YYYY-MM-DD hh:mm:ss" or the strings "yesterday", "today" and "tomorrow".
|-
| <code>-n</code>, <code>--lines=</code> || Restrict to a number of entries.
|-
| <code>-k</code>, <code>--dmesg</code> || Restrict to kernel messages.
|-
| <code>-u</code>, <code>--unit=</code> || Restrict to a certain Systemd unit.
|}

想要获得更多信息和更多的选项，请看 {{c|man journalctl}}.

===/tmp现在是在tmpfs===

除非明确指定挂载其他的文件系统到{{Path|/tmp}} 在 {{Path|/etc/fstab}}中配置， systemd将会挂载{{Path|/tmp}} 作为tmpfs。 这意味着它在每次启动时被清空，其大小将被限制在系统的RAM（内存）大小的50％。 要知道这是为什么，以及想要的行为和如何对其进行修改，请参考：[http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ API File Systems]。

===配置复杂的引导过程 ===

当迁移到systemd用户通常注意到差异引导过程的时间

* 启动选项<code>quiet</code> 不仅影响了内核输出，也影响了systemd本身。 再就是，当你为你的系统设置systemd时，可以删除该选项来查看哪些是容易发生的错误。之后，将它添加到一个静默的（和更快的）启动。
* 甚至通过 <code>quiet</code> 启动选项， systemd 仍然可以通过也传递配置以显示其状态<code>systemd.show_status=1</code>。
* 当不使用 <code>quiet</code>这个选项时，一些日志信息可能会刷满控制台。这是由内核配置造成的(请参考{{c|man 5 proc}} 并查找{{Path|/proc/sys/kernel/printk}})。要调整它通过<code>loglevel=5</code>的引导参数内核（以及根据喜好更新值，例如设置成像1的较低值）。

== 服务 ==

在某一时刻，系统需要重新启动来让systemd运行（在system模式）。请务必仔细阅读本文，以确保在系统重新启动之前尽可能完整的配置systemd。注意{{c|journalctl}} 在systemd不运行时工作。但 {{c
|systemctl}}在systemd不运行时不会做任何工作。登录到正在运行的系统systemd后完成服务配置（启用和启动服务）。

=== OpenRC 服务 ===

虽然systemd原本旨在支持运行旧的init.d脚本，支持不适合依赖于基于RC像“openrc”的引导，因此它支持在Gentoo上完全禁止。openrc提供了额外的措施来确保初始化。当openrc不是引导系统器时，init.d不能运行（否则，结果将是不可预知的）。

=== 可用服务列表 ===

列出所有可用服务：<code>list-units</code> {{c|systemctl}}:

{{RootCmd|systemctl list-units|output=<pre>
UNIT                               LOAD   ACTIVE SUB       DESCRIPTION
boot.automount                     loaded active waiting   EFI System Partition Automount
proc-sys-fs-binfmt_misc.automount  loaded active waiting   Arbitrary Executable File Formats File System Automount Point
...
</pre>}}

下列文件扩展名值得关心：

{| class="table"
! Suffix
! Description
|-
| {{Path|.service}}
| plain service files (e.g. ones just running a daemon directly),
|-
| {{Path|.socket}}
| socket listeners (much like ''inetd''),
|-
| {{Path|.path}}
| filesystem triggers for services (running services when files change etc.).
|}

作为选择 {{c
|systemctl}}工具可用于列出所有服务(包括隐藏的):

{{RootCmd|systemctl --all --full}}

最后查看未能运行的服务：

{{RootCmd|systemctl --failed}}

=== 启用、禁用、启动和停止服务 ===

使服务可用的一般方法是使用下面的命令:

{{RootCmd|systemctl enable foo.service}}

也可以禁用服务:

{{RootCmd|systemctl disable foo.service}}

这些命令允许使用默认名称默认目标（包括在服务文件的“安装”部分中指定的服务）。但是，有时服务或者不提供该信息，或你喜欢有另一个名称/目标。

请注意，这些命令只能启用或禁用系统能够在下次开机启动;要启动该服务，现在，使用：

{{RootCmd|systemctl start foo.service}}

同样的服务也可以停止:

{{RootCmd|systemctl stop foo.service}}

=== 安装自定义单元文件 ===

可以放在自定义单元文件{{Path|/etc/systemd/system}},确认在那里他们将运行后，运行{{c|systemctl daemon-reload}}:

{{RootCmd|systemctl daemon-reload}}

{{Path|/usr/lib/systemd/system}} 被预留给服务包管理器安装的文件。

=== 自定义单元文件 ===

当需要时只有轻微的修改到一个单位时，那里是无需创建 {{Path|/etc/systemd/system}}原始的单元文件的完整拷贝。重写包提供的管理单元中的设置可以通过链接文件 {{Path| *.d}} 目录在命名原单位之后 (例如  {{Path|apache2.d}}) 在{{Path|/etc/systemd/system/}}中。

{{FileBox|filename=/etc/systemd/system/apache2.d/mem-limit.conf|title=Example of adding/overriding settings in a service file|lang=ini|1=
[Service]
MemoryLimit{{=}}1G
}}

重载systemd，需要通知它的变化：

{{RootCmd|systemctl daemon-reload}}

然后服务需要重新来启动应用的更改:

{{RootCmd|systemctl restart apache2}}

验证更改的变量被应用到服务：

{{RootCmd|systemctl show --property{{=}}MemoryLimit apache2|output=<pre>MemoryLimit=1074000000</pre>}}

=== 根据自定义名称启用服务 ===

当提供的名称在组件"[安装]"部分的不符合期望，由"Alias"提供永久的新名字，这为此通过 [[#Customizing unit files|customization]] 所需，可以手动在 {{Path|/etc/systemd/system/*.wants/}} 创建一个链接文件。名称 {{Path| *.wants}} 目录可以指定一个目标或者将取决于新一的另一项服务。

例如，安装{{Path|mysqld.service}} 因为{{Path|db.service}}在{{Path|multi-user.target}}:

{{RootCmd|ln -s /usr/lib/systemd/system/mysqld.service /etc/systemd/system/multi-user.target.wants/db.service}}

要禁用该服务,只删除符号链接即可:

{{RootCmd|rm /etc/systemd/system/multi-user.target.wants/db.service}}

=== 本机服务 ===

Gentoo的安装包已经有systemd组件文件。对于这些服务,这足以使他们开启它。快速的迷你安装组件文件可以在[http://qa-reports.gentoo.org/output/eclass-usage/systemd.txt systemd eclass users list]看到。

下表列出了与OpenRC一致的服务：

{| class="table" style="text-align: center;"
|+ Migration chart
|-
! scope="col" | Gentoo package
! scope="col" | OpenRC service
! scope="col" | systemd unit 
! scope="col" | Notes
|-
! scope="row" rowspan="28" | {{Package|sys-apps/openrc}}
| bootmisc || systemd-tmpfiles-setup.service || always enabled, uses {{Path|tmpfiles.d}}
|-
| consolefont || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| devfs ||  || 
|-
| dmesg ||  || 
|-
| fsck || fsck*.service || pulled in implicitly by mounts
|-
| functions.sh || See note || {{Bug|373219}}
|-
| hostname || (builtin) || {{Path|/etc/hostname}}
|-
| hwclock || See note || always enabled as part of systemd (ie It is baked in and is not a unit)
|-
| keymaps || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| killprocs ||  || 
|-
| local ||  || 
|-
| localmount || local-fs.target || actual units are created implicitly from fstab
|-
| modules || systemd-modules-load.service || always enabled, uses {{Path|/etc/modules-load.d/*.conf}}
|-
| mount-ro ||  || 
|-
| mtab ||  || 
|-
| netmount || remote-fs.target || 
|-
| numlock ||  || 
|-
| procfs || (builtin) || 
|-
| root || remount-rootfs.service || 
|-
| savecache || n/a || OpenRC internals
|-
| staticroute ||  || 
|-
| swap || swap.target || actual units are created implicitly from fstab
|-
| swclock ||  || 
|-
| sysctl || systemd-sysctl.service || {{Path|sysctl.conf}} and {{Path|sysctl.d/}}
|-
| sysfs || (builtin) || 
|-
| termencoding || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| scope="row" rowspan="2" | urandom
| systemd-random-seed-load.service || 
|-
| systemd-random-seed-save.service || 
|-
! scope="row" | {{Package|app-admin/rsyslog}}
| rsyslog || rsyslog.service || 
|-
! scope="row" | {{Package|app-admin/syslog-ng}}
| syslog-ng || syslog-ng.service || 
|-
! scope="row" rowspan="2" | {{Package|media-sound/alsa-utils}}
| scope="row" rowspan="2" | alsasound
| alsa-store.service || (enabled by default)
|-
| alsa-restore.socket || (enabled by default)
|-
! scope="row" | {{Package|net-misc/dhcpcd}}
| dhcpcd || dhcpcd.service || 
|-
! scope="row" rowspan="5" | {{Package|net-misc/netifrc}} 
| scope="row" rowspan="5" | net.*
| net@.service || systemd wrapper for net.* scripts (comes with net-misc/netifrc)
|-
| netctl@.service || net-misc/netctl is originally an Arch Linux tool.
|-
| NetworkManager.service || For &lt;networkmanager-0.9.8.4 : enable NetworkManager-dispatcher.service for dispatcher.d scripts to work. <br/> Enable NetworkManager-wait-online.service to detect that the system has a working internet connection.<br/>Disable all other managers (e.g., wicd, dhcpcd) and wpa_supplicant.
|-
| dhcpcd.service || Provided by net-misc/dhcpcd
|-
| systemd.networkd.service || Part of systemd
|-
! scope="row" | {{Package|net-misc/openntpd}}
| ntpd || ntpd.service ||
|-
! scope="row" rowspan="2" | {{Package|net-misc/openssh}}
| scope="row" rowspan="2" | sshd
| sshd.service || runs sshd as a daemon
|-
| sshd.socket || runs sshd on a inetd-like basis (for each incoming connection)
|-
! scope="row" rowspan="2" | {{Package|net-wireless/wpa_supplicant}}
| scope="row" rowspan="2" | wpa-supplicant
| wpa_supplicant.service || D-Bus controlled daemon (e.g. for [[NetworkManager#Systemd|NetworkManager]])
|-
| wpa_supplicant@.service || interface-specific wpa_supplicant (used like {{Path|wpa_supplicant@wlan0.service}})
|-
! scope="row" rowspan="3" | {{Package|net-print/cups}}
| scope="row" rowspan="3" | cupsd
| cups.service || classic on-boot start up service
|-
| cups.socket
| scope="row" rowspan="2" | socket and path activation (cups only started on-demand)
|-
| cups.path
|-
! scope="row" | {{Package|net-wireless/bluez}}
| bluetooth || bluetooth.service || 
|-
! scope="row" rowspan="2" | {{Package|sys-apps/dbus}}
| scope="row" rowspan="2" | dbus
| dbus.service || 
|-
| dbus.socket || 
|-
! scope="row" | {{Package|sys-apps/irqbalance}}
| irqbalance || irqbalance.service || supports daemon mode only
|-
! scope="row" | {{Package|sys-apps/microcode-ctl}}
| microcode_ctl ||  || Configure ''microcode'' as a '''module''' to let it load the microcode itself. Go to "Processor type and features" -> "CPU microcode loading support" and remember to add the right option based on the system having an intel or amd processor.
|-
! scope="row" rowspan="4" | {{Package|sys-fs/udev}}
| udev || udev.service || 
|-
| udev-mount || (builtin) || {{Path|/dev}} is mounted as tmpfs
|-
| udev-postmount || udev-trigger.service || 
|-
| || udev-settle.service || 
|-
! scope="row" | {{Package|sys-power/acpid}}
| acpid || acpid.service || Most of its functionality is done by systemd itself, so consider disabling this
|-
! scope="row" | {{Package|x11-apps/xdm}}
| (xdm) || xdm.service || OpenRC uses common xdm init.d installed by {{Package|x11-base/xorg-server}}. With systemd the corresponding unit file for each DM (gdm.service, kdm.service...) needs to be enabled.
|-
! scope="row" rowspan="2" | {{Package|net-firewall/iptables}}
| scope="row" rowspan="2" | iptables
| iptables-store.service || 
|-
| iptables-restore.service || 
|-
|}

===时间服务 ===

自从197年版本的systemd，支持计时器,cron 没有必要安装到systemd系统上。212年版本以来持续性服务被支持,甚至取代了anacron。持久性计时器在下一次有机会当运行的系统断电后，计时器将列入计划任务。

以下是关于如何使运行在用户的环境下，制作简单定时器的一个例子。如果没有登录用户或会话运行。每一个定时服务需要一个定时器和一个服务文件，该文件是由定时器按如下激活的：

{{FileBox|filename=~/.local/share/systemd/user/backup-work.timer|title=Example of a timer running every working day|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=no
 
[Timer]
Persistent=false
OnCalendar=Mon-Fri *-*-* 11:30:00
Unit=backup-work.service
 
[Install]
WantedBy=default.target
}}

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Example of a service triggering backup|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

首先,告诉systemd要重新扫描服务文件:

{{Cmd|systemctl --user daemon-reload}}

可以手动触发备份功能，通过运行下面的命令:

{{Cmd|systemctl --user start backup-work.service}}

手动启动和停止计时器如下:

{{Cmd|systemctl --user start backup-work.timer}}
{{Cmd|systemctl --user stop backup-work.timer}}

最后,激活计时器在每一个系统都启动,运行:

{{Cmd|systemctl --user enable backup-work.timer}}

要检查正在运行的服务的最后结果：

{{Cmd|systemctl --user list-timers}}

==== 电子邮件故障 ====

如果一个定时服务运行和失败可以发送一封电子邮件通知用户或管理员。这是可能的“OnFailure”节，指定如果服务失败时会发生什么。检测到故障时由一个非零的返回代码调用脚本。

为了这个，改变脚本如下:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=服务触发备份的例子|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
OnFailure=failure-email@%i.service
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

这要求服务{{Path|failure-email@.service}} 被安装，它可以在
[https://github.com/kylemanna/systemd-utils/tree/master/onfailure kylemanna's systemd-utils repository]被找到。

==== 替换 cron ====

上面的计时器和服务文件也可以被添加到{{Path|/usr/lib/systemd/system}} 让他们有可用的系统体系。安装部分那时应该说明<code>WantedBy=multi-user.target</code>来系统启动启用服务。

然而， cron也可以通过位于{{Path|/etc/cron.daily}}的脚本运行。以及其他的你希望的，日常运行的路径。这种行为可以通过安装 {{Package|sys-process/systemd-cron}}仿真systemd。 然后用以下命令激活新cron替换:

{{RootCmd|systemctl enable cron.target}}
{{RootCmd|systemctl start cron.target}}

== 故障排除 ==

* {{Bug|systemd|search=package}}
* {{Bug|systemd|search=product|site=fdo}}
* [http://freedesktop.org/wiki/Software/systemd/Debugging Upstream debugging guide]

=== /dev/kmsg 缓冲区溢出, 丢失了一部分数据===

;问题：启动时系统会显示一个无限循环： <code>/dev/kmsg buffer overrun, some messages lost</code>。到控制台的登录屏幕永远不会出现这一问题，因为在启动过程中系统永远不会获取点。

;解决方案 ︰ 大多数情况下，在内核中启用 <var>CONFIG_POWER_SUPPLY_DEBUG</var> 选项时，将会导致此问题。当前的解决方法是在内核中禁用此选项，然后重新编译，安装，并引导新的内核。也可以在Gentoo 论坛上找到解决办法 [https://forums.gentoo.org/viewtopic-t-977530-postdays-0-postorder-asc-start-0.html 此线程] 。根据一个用户一个论坛，<ref>检索2016 年 3 月 12 日 https://forums.gentoo.org/viewtopic-t-977530-postdays-0-postorder-asc-start-25.html </ref> 嵌入式的系统上使用 I2C EEPROM 时，是也会出现此问题。解决办法在这种情况下是禁用 <var>CONFIG_I2C_DEBUG_CORE</var> 内核选项。

=== 在任何地方打开图形会话===

默认情况下，当systemd被使用时，它只启动一个{{c|getty}}进程，这会导致一些显示管理器（像GDM）使用剩余Tty来打开图形的会话，这会导致在控制台和图形会话无计划的放置，而这取决于它们的顺序使用。

保持更 "经典" 的行为 (i.e, 控制台将从{{Path|tty1}} 到{{Path|tty6}}，图形会话使用剩余的tty) 迫使他总是启动{{c|getty}}关于那些：

{{RootCmd|systemctl enable getty@tty{2,3,4,5,6}.service}}

=== lvm ===

从OpenRC切换到systemd+LVM，你需要正确挂载系统卷并激活LVM服务：

{{RootCmd|systemctl enable lvm2-monitor.service}}

虽然这可能并不需要激活根（root）卷（如果LVM集成到initramfs），它可能不适用于其他LVM卷，除非该服务被激活。

=== systemd-bootchart ===

{{KernelBox|title=systemd-bootchart support|1=<pre>
File systems  --->
	Pseudo filesystems --->
	[*] /proc file system support
Kernel hacking  --->
	[*] Kernel debugging
	[*] Collect scheduler debugging info
	[*] Collect scheduler statistics
</pre>}}

当systemd-bootchart试图开始{{Path|/sbin/init}}，对它重新调用systemd：

{{FileBox|filename=/etc/systemd/bootchart.conf|lang=bash|1=
...
Init=/usr/lib/systemd/systemd
...
}}

bootchart是一份SVG格式的报告，位于{{Path|/run/log/}}。

=== syslog-ng与systemd冲突 ===

systemd creates {{Path|/dev/log}} as datagram socket <ref>Jose Pedro Oliveira. [https://bugzilla.redhat.com/show_bug.cgi?id=770810#c10 Note about custom syslog-ng configurations files], [https://bugzilla.redhat.com/ Red Hat Bugzilla], January 11, 2012. Retrieved on January 12th, 2015</ref> <ref>[https://fedoraproject.org/wiki/Common_F16_bugs#systemd-syslog-ng-problems Systemd and syslog-ng interaction problems: system freezes / syslog-ng fails to start], [https://fedoraproject.org/wiki/Fedora_Project_Wiki Fedora Project Wiki]. Retrieved on January 12th, 2015</ref> so syslog-ng needs to be told to read from a ''unix-dgram'' instead of a ''unix-stream'' as otherwise syslog-ng would be using a "wrong" stream:

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# By default syslog-ng uses unix-stream. Comment this out and add unix-dgram instead.
# unix-stream('/dev/log');
unix-dgram('/dev/log');
}}

=== syslog-ng关于 systemd 的资源===

没有必要添加<code>unix-dgram('/dev/log');</code> 到 {{Path|/etc/syslog-ng/syslog-ng.conf}}配置文件。它会造成 {{c|syslog-ng}} 运行错误 (最新版本syslog-ng-3.7.2会发生这个问题)，更新 <code>source src { ...; };</code> 在[[Syslog-ng#Sources|syslog-ng article]]中提到到命令，如下:

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# 默认为openrc配置
#source src { system(); internal(); };
 
# systemd
source src { systemd-journal(); internal(); };
}}

=== sys-fs/cryptsetup配置 ===

systemd似乎不遵守{{Path|/etc/conf.d/dmcrypt}} (参见{{bug|429966}})因此需要通过配置{{Path|/etc/crypttab}}文件：

{{FileBox|filename=/etc/crypttab|title=Configuration file for encrypted block devices|1=
crypt-home UUID=c25dd0f3-ecdd-420e-99a8-0ff2eaf3f391 -
}}

根据系统的{{Path|/etc/crypttab}}来创建一个新的服务文件。
要做到这一点,使 <code>cryptsetup</code> USE flag 为了{{Package|sys-apps/systemd}}。他将安装 {{Path|/usr/lib/systemd/system-generators/systemd-cryptsetup-generator}}。 它将创建一个服务执行文件{{Path|/tmp/}}, 你现在可以把他复制到{{Path|/etc/systemd/system}}，手动调整并添加到你所需的级别。

=== 检查未能启动的部分 ===

检查未能启动的部分

{{RootCmd|systemctl --failed}}

=== 开启调式排错模式 ===

得到更多信息，设置{{Path|/etc/systemd/system.conf}}：

{{FileBox|filename=/etc/systemd/system.conf|lang=bash|1=
LogLevel=debug
}}

或启用调试shell，在 tty9打开一个终端。这有助于在引导过程中调试服务。

{{RootCmd|systemctl enable debug-shell.service}}

=== e4rat usage ===

请记得编辑{{Path|/etc/e4rat.conf}}，设置'init' 到 {{Path|/usr/lib/systemd/systemd}}，否则它将继续使用OpenRC引导。

=== GRSecurity hardening ===

启用 grsecurity ，systemd-networkd可能记录有下面的错误：

{{CodeBox|title=systemd-networkd error|1=could not find udev device: Permission denied}}

错误是因为 systemd-networkd 在非root用户环境下工作，对于这样的用户，使用 grsecurity 拒绝访问完成{{Path|/sys}}结构。要禁用这个选项，禁用内核选项<var>CONFIG_GRKERNSEC_SYSFS_RESTRICT</var> 。

logind 可能也有些许的权限问题<var>CONFIG_GRKERNSEC_PROC</var> 事件，请看{{Bug|472098}}.

== 另请参阅 ==

* [[Comparison of init systems]] - An article comparing and contrasting the differences in Gentoo init systems.
* [[Sakaki's_EFI_Install_Guide|Sakaki's EFI Install Guide]] - Particularly look at the chapter entitled [[Sakaki's_EFI_Install_Guide/Configuring_systemd_and_Installing_Necessary_Tools|Configuring systemd and installing necessary tools]]
* [[OpenRC to Systemd Cheatsheet]]

== 外部资源 ==

* [http://www.freedesktop.org/wiki/Software/systemd/FrequentlyAskedQuestions FAQ]
* [http://www.freedesktop.org/wiki/Software/systemd/TipsAndTricks Tips and tricks]

== 参考 ==

{{reflist}}

[[Category:Init systems]]
