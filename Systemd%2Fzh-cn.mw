<languages />
{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://freedesktop.org/wiki/Software/systemd|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox gitweb|http://cgit.freedesktop.org/systemd/systemd/|raw=true}}
}}
'''systemd''' 是一个Linux的现代的sysvinit来替换传统的init。Gentoo支持init替换为systemd.
<!--
下面的配置目录都是被openrc和systemd所使用:
* {{Path|/etc/modules-load.d}},
* {{Path|/etc/sysctl.d}},
* {{Path|/etc/binfmt.d}}
-->

'''systemd''' 是一个现代 SysV-style init 和 rc (run command)<ref>Eric S. Raymond. http://www.catb.org/jargon/html/R/rc-file.html Retrieved on June 27th, 2015</ref> 作为linux系统传统的init替代项。
<!--
下面的配置目录都使用OpenRC或systemd：
* {{Path|/etc/modules-load.d}},
* {{Path|/etc/sysctl.d}},
* {{Path|/etc/binfmt.d}}
-->

== 安装前的配置 ==

{{Note|当你的版本 <{{=}}sys-apps/systemd-203 查看 [[/upgrade|upgrade subpage]].}}

=== 内核 ===

systemd利用Linux内核的许多现代特点。要想支持systemd，内核必须高于ebuild 2.6.39
在最新的版本 {{Package|sys-kernel/gentoo-sources}}, 有一个快捷的方法来为systemd启用强制选择和可选的内核的选项:

{{KernelBox|title=快速安装使用gentoo-sources|<pre>
Gentoo Linux --->
        Support for init systems, system and service managers --->
                [*] systemd
</pre>}}

手动配置内核选项 (这是在不使用{{Package|sys-kernel/gentoo-sources}}时，唯一的选择 ), 下面是内核配置选项的要求或建议:

<!-- See http://cgit.freedesktop.org/systemd/systemd/plain/README -->
{{KernelBox|title=必选选项|<pre>
General setup  --->
	[*] Control Group support
	[*] open by fhandle syscalls
	[ ] Enable deprecated sysfs features to support old userspace tools
	[*] Configure standard kernel features (expert users)  --->
		[*] Enable eventpoll support
		[*] Enable signalfd() system call
		[*] Enable timerfd() system call
[*] Networking support --->
Device Drivers  --->
	Generic Driver Options  --->
		[*] Maintain a devtmpfs filesystem to mount at /dev
File systems  --->
	[*] Inotify support for userspace
	Pseudo filesystems  --->
		[*] /proc file system support
		[*] sysfs file system support
</pre>}}

{{KernelBox|title=推荐选项|<pre>
General setup  --->
	[*] Namespaces support  --->
		[*] Network namespace
[*] Enable the block layer  --->
	[*] Block layer SG support v4
Processor type and features  --->
	[*] Enable seccomp to safely compute untrusted bytecode
Networking support --->
	Networking options --->
		<*> The IPv6 protocol
Device Drivers  --->
	Generic Driver Options  --->
		()  path to uevent helper
		[ ] Fallback user-helper invocation for firmware loading
Firmware Drivers  --->
	[*] Export DMI identification via sysfs to userspace
File systems --->
	<*> Kernel automounter version 4 support (also supports v3)
	Pseudo filesystems --->
		[*] Tmpfs virtual memory file system support (former shm fs)
		[*]   Tmpfs POSIX Access Control Lists
		[*]   Tmpfs extended attributes
</pre>}}

UEFI系统应该启用下面的:

{{KernelBox|title=UEFI支持|<pre>
[*] Enable the block layer  --->
	Partition Types  --->
		[*] Advanced partition selection
		[*]   EFI GUID Partition support
Processor type and features  --->
	[*] EFI runtime service support
Firmware Drivers  --->
        EFI (Extensible Firmware Interface) Support -->
	        <*> EFI Variable Support via sysfs
</pre>}}

如果你的系统使用BFQ scheduler, 这里推荐使用 BFQ upstream 来启用 "BFQ hierarchical scheduling support" under "Enable the block layer -> IO Schedulers".

要获取一个最新的列表,请参阅部分上游的“需求”说明：[http://cgit.freedesktop.org/systemd/systemd/tree/README README]

==={{Path|/run}} 目录===

{{Path|/run}} 目录被systemd 使用，其他的应用程序作为一个非连续性存储的运行时数据像{{Path|pid}}文件, 网络编程接口和状态文件。

systemd包将自动创建{{Path|/run}} 本身的路径文件。然而， 请注意,这一变化也将触发自动安装的[[OpenRC]]， 并可能会触发其使用的不同软件包。

==={{Path|/etc/mtab}}===

上游仅支持 {{Path|/etc/mtab}}，这个文件是一个链接文件，链接到{{Path|/proc/self/mounts}}。不建立这个链接文件会导致<tt>mount</tt>({{bug|434090}}) 和 <tt>df</tt> ({{bug|477240}})。在之前有一些系统工具写入信息(比如写入{{Path|/etc/mtab}} 里面的挂载选项),因此它应该是一个普通文件。现在所有的软件应该避免这个问题。不过,在转换文件成为链接文件之前,请检查 {{bug|477498}}，来确保系统不受任何已知错误的影响。

要创建链接文件，执行：

{{RootCmd|ln -sf /proc/self/mounts /etc/mtab}}

===在启动时确保/usr路径存在 ===

对于拆分 {{Path|/usr}}配置，在你开启systemd前，使用[[initramfs]] 来挂载{{Path|/usr}} 。请看说明： [[Initramfs/Guide|Gentoo Initramfs 指导]] 。

===使用LVM2和initramfs===

当使用 [[LVM|sys-fs/lvm2]]，且系统通过initramfs 启动时，initramfs 必须通过运行使用{{Package|sys-kernel/genkernel-next}} 包来创建:

{{RootCmd|genkernel --udev --lvm <target>}}

这意味着创建一个initramfs genkernel target，使用<code><target></code> 或 <code>initramfs</code> 。有关详细信息，请看 <tt>genkernel — — 帮助</tt> 的输出:

{{Cmd|genkernel --help}}

When LVM is used, the <tt>lvmetad</tt> daemon needs to be started as well. Otherwise systemd will be unable to mount LVM volumes. <tt>lvmetad</tt> can be enabled in {{Path|/etc/lvm/lvm.conf}}:

{{FileBox|filename=/etc/lvm/lvm.conf|title=Snippet of required changes in lvm.conf|lang=ini|1=
# Set use_lvmetad to '1' for systemd
use_lvmetad {{=}} 1
}}

{{Note|Instead of modifying {{Path|/etc/lvm/lvm.conf}} this could probably be achieved through a {{Path|lvmetad.socket}} unit which activates a {{Path|lvmetad.service}}, but current versions of {{Package|sys-fs/lvm2}} don't ship those yet.}}

== 安装 ==

{{Package|sys-apps/systemd}} contains udev. Once installed, {{Package|sys-fs/udev}} can be removed as systemd will be the provider for {{Package|virtual/udev}}.

Enable the <code>systemd</code> USE flag globally (in {{Path|make.conf}}). The <code>consolekit</code> USE flag should also be disabled to prevent conflicts with the <tt>systemd-logind</tt> service. It is also possible to switch to a systemd subprofile to use saner USE flags defaults in which case it is not necessary to change {{Path|make.conf}}:

{{RootCmd|eselect profile list}}

最后更新系统与Flags:

{{RootCmd|emerge -avDN @world}}

When dependency problems occur (such as {{Package|sys-fs/udev}} blocking {{Package|sys-apps/systemd}}), {{Package|sys-fs/udev}} might be registered in the world file.  Try to resolve this by deselecting it:

{{RootCmd|emerge --deselect sys-fs/udev}}

== 使用systemd引导启动 ==

为了运行systemd,切换<tt>init</tt>可用内核 (或者 initramfs)使用。

{{警告|先前被设置的服务管理器服务不会自动启动。这是因为该系统切换到不同的服务管理器。为了获得像网络或登录管理器的这样功能,这些服务需要被重新启用。更多关于这个的信息在之后本文后面部分的服务章节。}}

{{Note/zh-cn|如果迁移造成了一个错误的状态，它总是可以通过撤销该INIT变化这一步，来使用回默认的引导服务管理器（OpenRC）。这可以安全返回。本文的最后故障排除部分，用来解决这些问题以便于可以安全的返回。}}

接下来的部分文档指导您如何切换 <tt>init</tt> 启动管理器或内核。

=== Grub Legacy (0.x) ===

The <code>init=/usr/lib/systemd/systemd</code> argument should be added to the kernel command-line. An example excerpt from {{Path|grub.conf}} would look like so:

{{FileBox|filename=/boot/grub/grub.conf|title=Example GRUB config for systemd|1=
title=Gentoo with systemd
root (hd0,0)
kernel /vmlinuz root=/dev/sda2 init=/usr/lib/systemd/systemd
}}

Should the system boot using OpenRC, try using <code>real_init</code> instead of <code>init</code>.

=== Grub 2 ===

当{{c|grub2-mkconfig}} 被使用时， 增加 init 选项 <var>GRUB_CMDLINE_LINUX</var>:

{{Note/zh-cn|这个不需要使用一个initramfs生成{{c|dracut}}systemd ，因为initramfs中已经有了systemd。}}

{{FileBox|filename=/etc/default/grub|title=Configure GRUB 2 for systemd|lang=bash|1=
# Append parameters to the linux kernel command line
GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"
}}

手动配置GRUB2文件时(仅限专家), 增加<code>init=</code>参数 <code>linux</code> 或 <code>linux16</code>命令。

{{FileBox|filename=/boot/grub/grub.cfg|title=Example GRUB2 configuration fragment|1=
linux /vmlinuz-3.10.9 root=UUID=508868e4-54c6-4e6b-84b0-b3b28b1656b6 init=/usr/lib/systemd/systemd
}}

当使用 genkernel-next's 引导时, 使用<code>real_init</code> 来替代<code>init</code>.

=== 内核配置 ===

init设置也可以在内核中配置硬编码。 请看 "Processor type and features -> Built-in kernel command line". 注意：这个方法同时适用于<tt>grub</tt> 和 <tt>grub2</tt>.

=== 设置root密码 ===

请不要忘记设置系统的根密码。如果出现错误,systemd将提示输入根密码进入维护模式。

== 安装后的设置 ==

systemd支持几个系统配置文件来设置系统最基本的细节要求。

{{Note|虽然一些系统配置参数可通过修改相应的配置文件而被更新，但大部分设定使用需要systemd才能被系统设置程序管理。在这种情况下，使用systemd重新引导计算机是安全的<tt>hostnamectl</tt>, <tt>localectl</tt> 和<tt>timedatectl</tt> 系统设置是必需的}}

=== 主机名称===

要设置主机名称，创建/编辑 {{Path|/etc/hostname}} 然后并简单地输入所需的主机名。

当使用systemd启动时，一个叫 {{c|hostnamectl}}的工具 ，可以编辑{{Path|/etc/hostname}}和{{Path|/etc/machine-info}}来达到目的. 要更改主机名，执行：

{{RootCmd|hostnamectl set-hostname <HOSTNAME>}}

参考 {{c|man hostnamectl}} 来获得更多选项。

<!--
{{FileBox|filename=/etc/machine-info|title=Configuration file for local machine information.|lang=bash|1=
PRETTY_NAME="Larry's Computer"
ICON_NAME="computer-laptop"
}}
-->

=== 区域设置 ===

通常,区域设置将从OpenRC迁移安装systemd时被合理设置。在你需要时,可以设置语言环境{{Path|/etc/locale.conf}} 按照Gentoo手册的说明:

{{FileBox|filename=/etc/locale.conf|title=System locale configuration|lang=bash|1=
LANG="en_US.utf8"
}}

如果你通过systemd启动，那么工具<tt>localectl</tt> 可以被使用来设置区域设置和控制台或X11键盘映射。要更改系统语言环境请运行下列命令：

{{RootCmd|localectl set-locale LANG<nowiki>=</nowiki><LOCALE>}}

要更改虚拟控制台键盘映射表：

{{RootCmd|localectl set-keymap <KEYMAP>}}

最后,要设置X11布局:

{{RootCmd|localectl set-x11-keymap <LAYOUT>}}

如果需要model, 变量和选项也可以被指定：

{{RootCmd|localectl set-x11-keymap <LAYOUT> <MODEL> <VARIANT> <OPTIONS>}}

=== 时间和日期 ===

可以使用<tt>timedatectl</tt>来设置时间和日期。 这也允许用户设置同步，而无需依赖{{Package|net-misc/ntp}} 或者其他的systemd自己的工具。

学习如何使用<tt>timedatectl</tt>只需运行：

{{RootCmd|timedatectl --help}}

=== 自动加载模块===

自动加载模块配置在不同的文件中，或者更确切地说，目录中的文件。配置文件存储在{{Path|/etc/modules-load.d}}。在启动与模块列表的每个文件将被加载，文件格式是由换行符分隔模块的列表，并且可以使用任何名称，只要它与{{Path|.conf}}结束。 加载模块可以由程序、服务或其他方式,取决于符合个人喜好。举个例子 <tt>virtualbox.conf</tt> 如下表所示：

{{FileBox|filename=/etc/modules-load.d/virtualbox.conf|title=Example file for the virtualbox modules|1=
vboxdrv
vboxnetflt
vboxnetadp
vboxpci
}}

=== 网络 ===

==== systemd-networkd系统守护进程管理网络配置====

systemd-networkd在有线网络接口的简单的配置上是很有用的。它在默认情况下是禁用的。

要配置systemd-networkd，在{{ Path|/etc/systemd/network}}路径下创建一个文件：{{Path|*.network}}请参考[http://www.freedesktop.org/software/systemd/man/systemd.network.html systemd.network(5)]  一个简单的DHCP配置如下:

{{FileBox|filename=/etc/systemd/network/50-dhcp.network
|1=[Match]
Name=en*
 
[Network]
DHCP=yes}}

{{RootCmd|systemctl enable systemd-networkd.service
|systemctl start systemd-networkd.service}}

注意systemd-networkd {{Path|resolv.conf}}默认不会自动更新，要systemd管理DNS设置,替换{{Path|resolv.conf}}来用一个符号连接并启动到systemd-resolved。

{{RootCmd|ln -snf /run/systemd/resolve/resolv.conf /etc/resolv.conf
|systemctl enable systemd-resolved.service
|systemctl start systemd-resolved.service}}

==== 网络管理 ====

通常NetworkManager的用于配置网络设置。为了这个目的，简单地用一个基于X11的桌面时，运行以下命令：

{{RootCmd|nm-connection-editor}}

如果情况并非如此,网络需要从终端来配置，[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Using_the_NetworkManager_Command_Line_Tool_nmcli.html nmcli]值得试试， 或者遵循配置指导 <tt>nmtui</tt>：

{{RootCmd|nmtui}}

[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Networking_Config_Using_nmtui.html nmtui] 是一个ncurses的前端，在控制台模式下运行，同时将引导用户的过程中。

=== 处理日志文件 ===

systemd 有自己的方式处理日志文件,而不需要依赖任何外部日志系统 (像 {{Package|app-admin/syslog-ng}} 或 {{Package|app-admin/rsyslog}})。日志信息可以通过 <tt>journalctl</tt>来读取。 但是无论如何，它仍然可以被配置为使用一个更优秀的外部工具来处理它们。 请打开终端输入<kbd>man journald.conf</kbd>来学习如何配置journald来满足你的个人的需求。

===/tmp现在是在tmpfs===

除非明确指定挂载其他的文件系统到{{Path|/tmp}} 在 {{Path|/etc/fstab}}中配置， systemd将会挂载{{Path|/tmp}} 作为tmpfs。 这意味着它在每次启动时被清空，其大小将被限制在系统的RAM（内存）大小的50％。 要知道这是为什么，以及想要的行为和如何对其进行修改，请参考：[http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ API File Systems]。

===配置复杂的引导过程 ===

当迁移到systemd用户通常注意到差异引导过程的时间

* 启动选项<code>quiet</code> 不仅影响了内核输出，也影响了systemd本身。 再就是，当你为你的系统设置systemd时，可以删除该选项来查看哪些是容易发生的错误。之后，将它添加到一个静默的（和更快的）启动。
* 甚至通过 <code>quiet</code> 启动选项， systemd 仍然可以通过也传递配置以显示其状态<code>systemd.show_status=1</code>。
* 当不使用 <code>quiet</code>这个选项时，一些日志信息可能会刷满控制台。这是由内核配置造成的(请参考 <kbd>man 5 proc</kbd> 并查找{{Path|/proc/sys/kernel/printk}})。要调整它通过<code>loglevel=5</code>的引导参数内核（以及根据喜好更新值，例如设置成像1的较低值）。

== 服务 ==

在某一时刻，系统需要重新启动来让systemd运行（在system模式）。请务必仔细阅读本文，以确保在系统重新启动之前尽可能完整的配置systemd。注意<tt>journalctl</tt> 在systemd不运行时工作。但 <tt>systemctl</tt> 在systemd不运行时不会做任何工作。登录到正在运行的系统systemd后完成服务配置（启用和启动服务）。

=== OpenRC 服务 ===

虽然systemd原本旨在支持运行旧的init.d脚本，支持不适合依赖于基于RC像“openrc”的引导，因此它支持在Gentoo上完全禁止。openrc提供了额外的措施来确保初始化。当openrc不是引导系统器时，init.d不能运行（否则，结果将是不可预知的）。

=== 可用服务列表 ===

所有可用的服务可使用这个命令列出 <code>list-units</code> <tt>systemctl</tt>:

{{RootCmd|systemctl list-units|output=<pre>
UNIT                               LOAD   ACTIVE SUB       DESCRIPTION
boot.automount                     loaded active waiting   EFI System Partition Automount
proc-sys-fs-binfmt_misc.automount  loaded active waiting   Arbitrary Executable File Formats File System Automount Point
...
</pre>}}

下列文件扩展名值得关心：

{| class="table"
! Suffix
! Description
|-
| {{Path|.service}}
| plain service files (e.g. ones just running a daemon directly),
|-
| {{Path|.socket}}
| socket listeners (much like ''inetd''),
|-
| {{Path|.path}}
| filesystem triggers for services (running services when files change etc.).
|}

作为选择 <tt>systemctl</tt> 工具可用于列出所有服务(包括隐藏的):

{{RootCmd|systemctl --all --full}}

最后查看未能运行的服务：

{{RootCmd|systemctl --failed}}

=== 启用、禁用、启动和停止服务 ===

使服务可用的一般方法是使用下面的命令:

{{RootCmd|systemctl enable foo.service}}

也可以禁用服务:

{{RootCmd|systemctl disable foo.service}}

这些命令允许使用默认名称默认目标（包括在服务文件的“安装”部分中指定的服务）。但是，有时服务或者不提供该信息，或你喜欢有另一个名称/目标。

请注意，这些命令只能启用或禁用系统能够在下次开机启动;要启动该服务，现在，使用：

{{RootCmd|systemctl start foo.service}}

同样的服务也可以停止:

{{RootCmd|systemctl stop foo.service}}

=== 安装自定义单元文件 ===

可以放在自定义单元文件{{Path|/etc/systemd/system}},确认在那里他们将运行后，运行<tt>systemctl daemon-reload</tt>:

{{RootCmd|systemctl daemon-reload}}

{{Path|/usr/lib/systemd/system}} 被预留给服务包管理器安装的文件。

=== 自定义单元文件 ===

When only minor changes to a unit are needed, there's no need to create a full copy of the original unit file in {{Path|/etc/systemd/system}}. Overriding settings in a package management provided unit can be achieved by drop-in files in a {{Path|*.d}} directory named after the original unit (e.g. {{Path|apache2.d}}) in {{Path|/etc/systemd/system/}}.

{{FileBox|filename=/etc/systemd/system/apache2.d/mem-limit.conf|title=Example of adding/overriding settings in a service file|lang=ini|1=
[Service]
MemoryLimit{{=}}1G
}}

重载systemd，需要通知它的变化：

{{RootCmd|systemctl daemon-reload}}

然后服务需要重新来启动应用的更改:

{{RootCmd|systemctl restart apache2}}

验证更改的变量被应用到服务：

{{RootCmd|systemctl show --property{{=}}MemoryLimit apache2|output=<pre>MemoryLimit=1074000000</pre>}}

=== 根据自定义名称启用服务 ===

When the name provided by "Alias" in the unit's "[Install]" section does not meet the expectations and providing a permanent new value for this through a [[#Customizing unit files|customization]] is not desired, a symlink can be created manually in {{Path|/etc/systemd/system/*.wants/}}. The name of the {{Path|*.wants}} directory can either specify a target or another service which will depend on the new one.

例如，安装{{Path|mysqld.service}} 因为{{Path|db.service}}在{{Path|multi-user.target}}:

{{RootCmd|ln -s /usr/lib/systemd/system/mysqld.service /etc/systemd/system/multi-user.target.wants/db.service}}

要禁用该服务,只删除符号链接即可:

{{RootCmd|rm /etc/systemd/system/multi-user.target.wants/db.service}}

=== 本机服务 ===

Some of Gentoo packages already install systemd unit files. For these services, it is enough to enable them. A quick summary of packages installing unit files can be seen on [http://qa-reports.gentoo.org/output/eclass-usage/systemd.txt systemd eclass users list].

下表列出了与OpenRC一致的服务：

{| class="table" style="text-align: center;"
|+ Migration chart
|-
! scope="col" | Gentoo package
! scope="col" | OpenRC service
! scope="col" | systemd unit 
! scope="col" | Notes
|-
! scope="row" rowspan="28" | {{Package|sys-apps/openrc}}
| bootmisc || systemd-tmpfiles-setup.service || always enabled, uses {{Path|tmpfiles.d}}
|-
| consolefont || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| devfs ||  || 
|-
| dmesg ||  || 
|-
| fsck || fsck*.service || pulled in implicitly by mounts
|-
| functions.sh || See note || {{Bug|373219}}
|-
| hostname || (builtin) || {{Path|/etc/hostname}}
|-
| hwclock || See note || always enabled as part of systemd (ie It is baked in and is not a unit)
|-
| keymaps || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| killprocs ||  || 
|-
| local ||  || 
|-
| localmount || local-fs.target || actual units are created implicitly from fstab
|-
| modules || systemd-modules-load.service || always enabled, uses {{Path|/etc/modules-load.d/*.conf}}
|-
| mount-ro ||  || 
|-
| mtab ||  || 
|-
| netmount || remote-fs.target || 
|-
| numlock ||  || 
|-
| procfs || (builtin) || 
|-
| root || remount-rootfs.service || 
|-
| savecache || n/a || OpenRC internals
|-
| staticroute ||  || 
|-
| swap || swap.target || actual units are created implicitly from fstab
|-
| swclock ||  || 
|-
| sysctl || systemd-sysctl.service || {{Path|sysctl.conf}} and {{Path|sysctl.d/}}
|-
| sysfs || (builtin) || 
|-
| termencoding || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| scope="row" rowspan="2" | urandom
| systemd-random-seed-load.service || 
|-
| systemd-random-seed-save.service || 
|-
! scope="row" | {{Package|app-admin/rsyslog}}
| rsyslog || rsyslog.service || 
|-
! scope="row" | {{Package|app-admin/syslog-ng}}
| syslog-ng || syslog-ng.service || 
|-
! scope="row" rowspan="2" | {{Package|media-sound/alsa-utils}}
| scope="row" rowspan="2" | alsasound
| alsa-store.service || (enabled by default)
|-
| alsa-restore.socket || (enabled by default)
|-
! scope="row" | {{Package|net-misc/dhcpcd}}
| dhcpcd || dhcpcd.service || 
|-
! scope="row" rowspan="5" | {{Package|net-misc/netifrc}} 
| scope="row" rowspan="5" | net.*
| net@.service || systemd wrapper for net.* scripts (comes with net-misc/netifrc)
|-
| netctl@.service || net-misc/netctl is originally an Arch Linux tool.
|-
| NetworkManager.service || For &lt;networkmanager-0.9.8.4 : enable NetworkManager-dispatcher.service for dispatcher.d scripts to work. <br /> Enable NetworkManager-wait-online.service to detect that the system has a working internet connection.<br />Disable all other managers (e.g., wicd, dhcpcd) and wpa_supplicant.
|-
| dhcpcd.service || Provided by net-misc/dhcpcd
|-
| systemd.networkd.service || Part of systemd
|-
! scope="row" | {{Package|net-misc/openntpd}}
| ntpd || ntpd.service ||
|-
! scope="row" rowspan="2" | {{Package|net-misc/openssh}}
| scope="row" rowspan="2" | sshd
| sshd.service || runs sshd as a daemon
|-
| sshd.socket || runs sshd on a inetd-like basis (for each incoming connection)
|-
! scope="row" rowspan="2" | {{Package|net-misc/wpa_supplicant}}
| scope="row" rowspan="2" | wpa-supplicant
| wpa_supplicant.service || D-Bus controlled daemon (e.g. for NetworkManager)
|-
| wpa_supplicant@.service || interface-specific wpa_supplicant (used like {{Path|wpa_supplicant@wlan0.service}})
|-
! scope="row" rowspan="3" | {{Package|net-print/cups}}
| scope="row" rowspan="3" | cupsd
| cups.service || classic on-boot start up service
|-
| cups.socket
| scope="row" rowspan="2" | socket and path activation (cups only started on-demand)
|-
| cups.path
|-
! scope="row" | {{Package|net-wireless/bluez}}
| bluetooth || bluetooth.service || 
|-
! scope="row" rowspan="2" | {{Package|sys-apps/dbus}}
| scope="row" rowspan="2" | dbus
| dbus.service || 
|-
| dbus.socket || 
|-
! scope="row" | {{Package|sys-apps/irqbalance}}
| irqbalance || irqbalance.service || supports daemon mode only
|-
! scope="row" | {{Package|sys-apps/microcode-ctl}}
| microcode_ctl ||  || Configure ''microcode'' as a '''module''' to let it load the microcode itself. Go to "Processor type and features" -> "CPU microcode loading support" and remember to add the option you need depending on you having intel or amd processor.
|-
! scope="row" rowspan="4" | {{Package|sys-fs/udev}}
| udev || udev.service || 
|-
| udev-mount || (builtin) || <tt>/dev</tt> is mounted as tmpfs
|-
| udev-postmount || udev-trigger.service || 
|-
| || udev-settle.service || 
|-
! scope="row" | {{Package|sys-power/acpid}}
| acpid || acpid.service || Most of its functionality is done by systemd itself, then, maybe you could consider to stop enabling this
|-
! scope="row" | {{Package|x11-apps/xdm}}
| (xdm) || xdm.service || OpenRC uses common xdm init.d installed by {{Package|x11-base/xorg-server}}. With systemd you will need to enable corresponding unit file for each DM (gdm.service, kdm.service...)
|-
! scope="row" rowspan="2" | {{Package|net-firewall/iptables}}
| scope="row" rowspan="2" | iptables
| iptables-store.service || 
|-
| iptables-restore.service || 
|-
|}

===时间服务 ===

Since version 197 systemd supports timers, making cron unnecessary on a systemd system. Since version 212 persistent services are supported, replacing even anacron. Persistent timers are run at the next opportunity if the system was powered down when the timer was scheduled.

The following is an example on how to make a simple timer that runs in the context of a user. It will even run if the user is not logged in. Every timed service needs a timer and a service file that is activated by the timer as follows:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.timer|title=Example of a timer running every working day|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=no
 
[Timer]
Persistent=false
OnCalendar=Mon-Fri *-*-* 11:30:00
Unit=backup-work.service
 
[Install]
WantedBy=default.target
}}

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Example of a service triggering backup|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

Firstly, tell systemd to rescan the service files:

{{Cmd|systemctl --user daemon-reload}}

It is possible to trigger the backup manually by running the following command:

{{Cmd|systemctl --user start backup-work.service}}

Start and stop the timer manually as follows:

{{Cmd|systemctl --user start backup-work.timer}}
{{Cmd|systemctl --user stop backup-work.timer}}

Finally, to activate the timer at every system start, run:

{{Cmd|systemctl --user enable backup-work.timer}}

To check the last results of running the service:

{{Cmd|systemctl --user list-timers}}

==== Emailing failures ====

If a timed service runs and fails an e-mail can be send out to inform the user or administrator. This is possible with the "OnFailure" stanza which specifies what should happen if a service fails. A failure is detected by a non-zero return code of the invoked script.

For that change the script as follows:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Example of a service triggering backup|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
OnFailure=failure-email@%i.service
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

This requires to have the service {{Path|failure-email@.service}} installed, which can be found in 
[https://github.com/kylemanna/systemd-utils/tree/master/onfailure kylemanna's systemd-utils repository].

==== 替换 cron ====

The above timer and service files can also be added to {{Path|/usr/lib/systemd/system}} to make them available system-wide. The install section should then say <code>WantedBy=multi-user.target</code> to enable the service at system start.

However, cron also runs the scripts in {{Path|/etc/cron.daily}} and other locations. Several packages place scripts there that they expect to be run daily. This behavior can be emulated with systemd by installing {{Package|sys-process/systemd-cron}}. Then activate the new cron replacement with the following commands:

{{RootCmd|systemctl enable cron.target}}
{{RootCmd|systemctl start cron.target}}

== 故障排除 ==

* {{Bug|systemd|search=package}}
* {{Bug|systemd|search=product|site=fdo}}
* [http://freedesktop.org/wiki/Software/systemd/Debugging Upstream debugging guide]

=== 在任何地方打开图形会话===

By default systemd only launches a <tt>getty</tt> process when it's going to be used. This causes some display managers (like GDM) to use the remaining TTYs for opening graphical sessions on demand, which can result in having consoles and graphical sessions placed randomly depending on the order they were used.

To stick with a more "classical" behavior (i.e, consoles placed from {{Path|tty1}} to {{Path|tty6}} and graphical sessions using the remaining TTYs) force it to always launch <tt>getty</tt> on those:

{{RootCmd|systemctl enable getty@tty{2,3,4,5,6}.service}}

=== lvm ===

When switching from OpenRC to systemd and lvm is needed to properly mount the system volumes, activate the lvm service:

{{RootCmd|systemctl enable lvm2-monitor.service}}

While it might not be needed for activation of the root volume (if lvm is integrated into the initramfs) it might not work for other lvm volumes, unless the service is activated.

=== systemd-bootchart ===

{{KernelBox|title=systemd-bootchart support|1=<pre>
File systems  --->
	Pseudo filesystems --->
	[*] /proc file system support
Kernel hacking  --->
	[*] Kernel debugging
	[*] Collect scheduler debugging info
	[*] Collect scheduler statistics
</pre>}}

As systemd-bootchart attempts to start {{Path|/sbin/init}}, reconfigure it to invoke systemd instead:

{{FileBox|filename=/etc/systemd/bootchart.conf|lang=bash|1=
...
Init=/usr/lib/systemd/systemd
...
}}

The result of the bootchart is a report in SVG format located in {{Path|/run/log/}}.

=== syslog-ng conflicts with systemd ===

systemd creates {{Path|/dev/log}} as datagram socket <ref>Jose Pedro Oliveira. [https://bugzilla.redhat.com/show_bug.cgi?id=770810#c10 Note about custom syslog-ng configurations files], [https://bugzilla.redhat.com/ Red Hat Bugzilla], January 11, 2012. Retrieved on January 12th, 2015</ref> <ref>[https://fedoraproject.org/wiki/Common_F16_bugs#systemd-syslog-ng-problems Systemd and syslog-ng interaction problems: system freezes / syslog-ng fails to start], [https://fedoraproject.org/wiki/Fedora_Project_Wiki Fedora Project Wiki]. Retrieved on January 12th, 2015</ref> so syslog-ng needs to be told to read from a ''unix-dgram'' instead of a ''unix-stream'' as otherwise syslog-ng would be using a "wrong" stream:

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# By default syslog-ng uses unix-stream. Comment this out and add unix-dgram instead.
# unix-stream('/dev/log');
unix-dgram('/dev/log');
}}

=== sys-fs/cryptsetup configuration ===

systemd does not seem to respect {{Path|/etc/conf.d/dmcrypt}} (see {{bug|429966}}) so it needs to be configured through the {{Path|/etc/crypttab}} file:

{{FileBox|filename=/etc/crypttab|title=Configuration file for encrypted block devices|1=
crypt-home UUID=c25dd0f3-ecdd-420e-99a8-0ff2eaf3f391 -
}}

You may need to create a new service file from your {{Path|/etc/crypttab}} file.
To do this, enable the <code>cryptsetup</code> USE flag for {{Package|sys-apps/systemd}}. It will install {{Path|/usr/lib/systemd/system-generators/systemd-cryptsetup-generator}}. Executing it will create a service file in {{Path|/tmp/}}, which you can now copy to {{Path|/etc/systemd/system}}, adjust manually and add to the desired runlevel.

=== Check for units that failed to start ===

Check for units that failed to start with:

{{RootCmd|systemctl --failed}}

=== Enable Debug Mode ===

To get more informations set the following in {{Path|/etc/systemd/system.conf}}:

{{FileBox|filename=/etc/systemd/system.conf|lang=bash|1=
LogLevel=debug
}}

Or enable the debug-shell, that opens a terminal at tty9. This helps to debug services during the boot process.

{{RootCmd|systemctl enable debug-shell.service}}

=== e4rat usage ===

Please remember to edit {{Path|/etc/e4rat.conf}} setting 'init' to {{Path|/usr/lib/systemd/systemd}}, otherwise it will keep booting OpenRC.

=== GRSecurity hardening ===

With grsecurity enabled, systemd-networkd might log the following error:

{{CodeBox|title=systemd-networkd error|1=could not find udev device: Permission denied}}

The error raises due to systemd-networkd working under a non-root user with grsecurity refusing access to the complete {{Path|/sys}} structure for such users. To disable this option, disable the kernel option <code>CONFIG_GRKERNSEC_SYSFS_RESTRICT</code>.

== See also ==

* [[Comparison of init systems]] - An article comparing and contrasting the differences in Gentoo init systems.
* [[Sakaki's_EFI_Install_Guide|Sakaki's EFI Install Guide]] - Particularly look at the chapter entitled [[Sakaki's_EFI_Install_Guide/Configuring_systemd_and_Installing_Necessary_Tools|Configuring systemd and installing necessary tools]]
* [[OpenRC to Systemd Cheatsheet]]

== External resources ==

* [http://www.freedesktop.org/wiki/Software/systemd/FrequentlyAskedQuestions FAQ]
* [http://www.freedesktop.org/wiki/Software/systemd/TipsAndTricks Tips and tricks]

== References ==

{{reflist}}

[[Category:Init systems]]
