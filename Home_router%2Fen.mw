<languages />

{{Metadata|abstract=This document details how to turn an old Gentoo machine into a router for connecting a home network to the Internet.}}

This document details how to turn an old Gentoo machine into a router for connecting a home network to the Internet.

== Introduction ==

Building a personal router out of old spare parts has many advantages over buying a pre-made router built by big companies (Linksys, D-Link, Netgear, etc). The biggest advantage by far is control over the connection. The other advantages can be left up to the user's imagination; just about anything can be done in this scenario, it is simply a matter of need. 

This guide will provide instructions on how to setup Network Address Translation (NAT) on a custom router (kernel and iptables), add and configure common services (Domain Name System (DNS) via {{Package|net-dns/dnsmasq}}, DHCP via {{Package|net-misc/dhcpcd}}, ADSL via {{Package|net-dialup/ppp}}), and conclude with some elaborate and fun things custom routers are capable of (port forwarding, traffic shaping, proxies/caching, etc...). 

Before getting started, please review the list of basic requirements:
# A computer that has at least 2 Network Interface Cards (NICs) installed.
# The configuration settings for an Internet connection (may include things like IP/DNS/Gateway/username/password).
# (Optionally) a Wi-Fi card that supports master mode. Master mode is recommended to avoid NICs with a bypass feature since some NICs require proprietary drivers. Without access to the proprietary driver the card will remain in bypass mode permanently and will not be usable.
# A bit of spare time and Gentoo loving in order to successfully follow this guide and implement a well functioning home router.

The conventions used in this guide are: 

* eth0 - NIC connected to the Local Area Network (LAN) or network bridge consisting of multiple NICs
* eth1 - NIC connected to the Wide Area Network (WAN)
* LAN utilizes the private 192.168.0.xxx network
* Router is hardcoded to the standard 192.168.0.1 IP address
* Router is running Linux 2.4 or 2.6; other versions of the kernel are not supported by this guide).

{{Important|Due to security precautions, it is highly suggested to shut down any unneeded services on the router until the firewall is up. To view the currently running services run <tt>rc-status</tt>.}}

== Kernel setup (know thyself first) ==

The kernel needs to have the drivers installed for both NICs present on the system. To see if the cards are already setup use the <tt>ifconfig</tt> command. The output may differ slightly from the following example. What matters is that the interface shows up. 

{{RootCmd|ifconfig -a|output=<pre>
eth0      Link encap:Ethernet  HWaddr 00:60:F5:07:07:B8
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:11 Base address:0x9800
  
eth1      Link encap:Ethernet  HWaddr 00:60:F5:07:07:B9
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:10 Base address:0x9400
</pre>
}}

If only one (or none) of the two cards show up try running <tt>lspci | grep Ethernet</tt>.
{{Note|The <tt>lspci</tt> utility is part of the {{Package|sys-apps/pciutils}} package and can be installed by running <tt>emerge sys-apps/pciutils</tt>.}}

Once the make(s)/model(s) of the NIC(s) has been obtained, configure the kernel with support for the correct drivers. For more information on kernel configuration see the [[Kernel/Gentoo_Kernel_Configuration_Guide|Kernel Configuration Guide]].

The next thing needed is support for iptables and NAT (and packet shaping if desired). The following list is split up into always required (*), required only for ADSL via PPPoE (a), suggested for everyone (x), and only for shaper (s) features. It does not matter whether the features are built into the kernel or as modules as long as when the feature is needed, the correct module(s) are loaded. For more information on loading modules see the 

{{KernelBox|title=Network Options|<pre>
Networking options  --->
   [*] TCP/IP networking
      [*] IP: advanced router
   [*] Network packet filtering (replaces ipchains)
</pre>}}

When using a 2.4.x kernel, the following must be enabled for DHCP:

{{KernelBox|title=Network Options|<pre>
   [*] Socket Filtering
  
   IP: Netfilter Configuration  --->
      [*] Connection tracking (required for masq/NAT)
         [x] FTP protocol support
         [x] IRC protocol support
      [*] IP tables support (required for filtering/masq/NAT)
         [*] IP range match support
         [x] MAC address match support
         [*] Multiple port match support
         [*] Packet filtering
            [*] REJECT target support
            [x] REDIRECT target support
         [*] Full NAT
            [*] MASQUERADE target support
         [s] Packet mangling
            [s] MARK target support
         [x] LOG target support
  
   QoS and/or fair queueing  --->
      [s] QoS and/or fair queueing
         [s] HTB packet scheduler
         [s] Ingress Qdisc
  
   [a] PPP (point-to-point protocol) support
      [a] PPP filtering
      [a] PPP support for async serial ports
      [a] PPP support for sync tty ports
      [a] PPP Deflate compression
      [a] PPP BSD-Compress compression
      [a] PPP over Ethernet
</pre>}}

{{Note|Some things may be slightly different in a 2.4.x vs. a 2.6.x kernel, however things should not be too difficult to figure out. Even among 2.6 kernels, these options have a tendency to move around. Good luck!}}

== Hug the WAN (a.k.a. The Internet) ==

=== Intro ===

There are ''many'' ways to connect to the Internet, however there are generally only a couple of ways that are used by most of the public. ADSL (PPPoE) and cable modems (static/dynamic) are the two most common methods ISP (Internet Service Providers) provide. If there are other methods available, feel free to add them to this wiki article. Skip any of the following sections in this chapter that are not applicable to the needed use case. This chapter addresses getting the router connected to the Internet via eth1. 

=== ADSL and PPPoE ===

All the fancy PPPoE software that used to be provided by rp-pppoe ([http://www.roaringpenguin.com/ Roaring Penguin]) has been integrated into the [http://samba.org/ppp/ standard PPP package]. Simply <tt>emerge ppp</tt> to install PPPoE. Remember how username and password information was a requirement listed above? Load up {{Path|/etc/conf.d/net}} in a favorite text editor and configure it accordingly. 

Replace <code><username></code> and <code><user_password></code> in the following example with the required username with the password:

{{FileBox|filename=/etc/conf.d/net|title=Use ADSL over eth1 for ppp0|lang=bash|1=
config_ppp0="ppp"
link_ppp0="eth1"
plugins_ppp0="pppoe"
pppd_ppp0="
  defaultroute
  usepeerdns
"
username_ppp0="<username>"
password_ppp0="<user_password>"
}}

{{RootCmd|ln -s net.lo /etc/init.d/net.ppp0
|rc-update add net.ppp0 default
|/etc/init.d/net.ppp0 start}}

{{Warning|When the DSL interface comes up, it will create a "ppp0" entry to the output of <tt>ifconfig</tt> command. Although the NIC is called eth1, the IP address is actually bound to ppp0. From now on substitute <code>eth1</code> with <code>ppp0</code>}}

{{Warning|Make sure you change the permissions of the {{Path|/etc/conf.d/net}} file so that only root can read/write it since you're sticking your username/password in it.}}

{{Warning|For users transitioning from the {{Package|net-dialup/rp-pppoe}} package, or for users who experience weird connection resets, see the MTU section in the Troubleshooting chapter below.}}

=== Cable and/or dynamic/static IP ===

If a static IP is necessary then additional configuration details will be required. Static users IP users will need to add the IP address, gateway address, and DNS server addresses. 

Dynamic IP Users:

{{Emerge|net-misc/dhcpcd}}

{{FileBox|filename=/etc/conf.d/net|title=Dynamic IP addresses|lang=bash|1=
config_eth1="dhcp"
}}

Static IP Users:

{{FileBox|filename=/etc/conf.d/net|title=Static IP address configuration|lang=bash|1=
config_eth1="66.92.78.102/24 brd 66.92.78.255"
routes_eth1="default via 66.92.78.1"
}}

{{FileBox|filename=/etc/resolv.conf|title=Adding DNS information|1=
nameserver 123.123.123.123
}}

Dynamic and Static Setup:

{{RootCmd|ln -s net.lo /etc/init.d/net.eth1
|rc-update add net.eth1 default
|/etc/init.d/net.eth1 start}}

After working through the changes above the system should be ready to continue. 

== Hug the LAN (bring along some friends) ==

This step is a breeze compared to the previous one. To use ''more'' than two devices (more than the one for LAN and the one for WAN), a [[Network bridge]] will need to be setup between all NICs using the LAN. This will allow multiple NICs to be reached by the same IP address. 

If a network bridge will be necessary, follow [[Network bridge|the instructions to set up a Network bridge]]. The name of the bridge (default br0) will then replace eth0 for the LAN device in the steps in this wiki. If a large number of network devices in the home router, consider renaming them via udev to make administration easier. Setting up a bridge and renaming devices is completely optional but recommended for larger home networks. 

When creating a Wi-Fi access point make sure the Wi-Fi card supports master mode and set up [[Hostapd]].

{{FileBox|filename=/etc/conf.d/net|lang=bash|1=
config_eth0="192.168.0.1/24 brd 192.168.0.255"
}}

{{RootCmd|rc-update add net.eth0 default
|/etc/init.d/net.eth0 start}}

== LAN Services (because we're nice people) ==

=== DHCP server ===

It would be nice if everyone in the house could plug their computers into the network and things would just work. No need to remember mind-numbing details or make them stare at confusing configuration screens! Life would be grand, eh? Introducing the Dynamic Host Configuration Protocol (DHCP) and why everyone should care.

DHCP is exactly what its name implies: a protocol that allows dynamic configuration of hosts automatically. Run a DHCP server on the router, give it all the information about the network (valid IPs, DNS servers, gateways, etc...), then when the other hosts start up, they can run a DHCP ''client'' to automatically configure themselves. No fuss, no muss! For more information about DHCP, visit [[Wikipedia:DHCP|Wikipedia's DHCP article]]. 

This HowTo article will use the {{Package|net-dns/dnsmasq}} package which will provide both DHCP and DNS services. For now lets focus on the DHCP aspect. Note: to run a different DHCP server, another example can be found in the Fun Things chapter below. Also, to tinker with the DHCP server settings read the comments in the {{Path|/etc/dnsmasq.conf}} file. 

{{Emerge|net-dns/dnsmasq}}

{{FileBox|filename=/etc/dnsmasq.conf|1=
dhcp-range=192.168.0.100,192.168.0.250,72h
interface=eth0
}}

{{RootCmd|rc-update add dnsmasq default
|/etc/init.d/dnsmasq start}}

Setting the interface is very important. Using default dnsmasq settings will open up your router to DNS amplification attacks, and you may get a scary email from your ISP. You can check to make sure your router is not allowing for DNS amplification attacks by using [http://openresolver.com].

Now the little router is a bona-fide DHCP server. Plug in those computers and watch them work! With Windows systems navigate to the {{Path|TCP/IP Properties}} and select the {{Path|Obtain an IP address automatically}} and {{Path|Obtain DNS server address automatically}} options. Sometimes the changes are not instantaneous, so opening a command prompt and running <tt>ipconfig /release</tt> and <tt>ipconfig /renew</tt> might be necessary. Enough about Windows, time to get back to everyone's favorite penguin!

=== DNS server ===

When people want to visit a place on the Internet, they remember names, not a string of funky numbers. After all, what is easier to remember, eBay.com or 66.135.192.87? This is where the DNS steps in. DNS servers run all over the Internet, and whenever someone wants to visit eBay.com, these servers turn the text "eBay.com" (what we understand) into IP address "66.135.192.87" (what computers understand). For more information about DNS visit [[Wikipedia:DNS|Wikipedia]]. 

Since dnsmasq is being used for the DHCP server, and it includes a DNS server, there is nothing left to do here! The little router is already providing DNS to its DHCP clients. Shouldn't everything be this easy? ;) 

It is possible to choose other DNS servers if they are more comfortable to setup. dnsmasq is used in this article because it was designed to do exactly what this guide required. It is a little DNS caching/forwarding server for local networks. The scope of this howto is not to provide DNS for a domain; but it does offer simple DNS services to every user of a home-based LAN. 

=== NAT (a.k.a. IP-masquerading) ===

At this point, people on the network can talk to each other and look up hostnames via DNS, but they still ca not actually connect to the Internet. While the network administrator (the person reading this) may think it is great (more bandwidth for the Admin!), the other users are probably not very happen without an Internet connection. 

This is where Network Address Translation (NAT) steps in. NAT is a way of connecting multiple computers in a private LAN to the Internet when a small number of public IP addresses are available. Typically a home Internet user is provided with 1 public IP address by an ISP for the whole house to connect to the Internet. NAT is the magic that makes this possible. For more information about NAT, please visit [[Wikipedia:NAT|Wikipedia]]. 

{{Note|Before we get started, make sure you have iptables on your system. Although it is automatically installed on most systems, you may not have it. If you don't, just run <code>emerge iptables</code>.}}

First we flush our current rules

{{RootCmd|iptables -F
|iptables -t nat -F}}

Setup default policies to handle unmatched traffic

{{RootCmd|iptables -P INPUT ACCEPT
|iptables -P OUTPUT ACCEPT
|iptables -P FORWARD DROP}}

Copy and paste these examples ...

{{RootCmd|export LAN{{=}}eth0
|export WAN{{=}}eth1}}

The next step locks the services so they only work from the LAN:

{{RootCmd|iptables -I INPUT 1 -i ${LAN} -j ACCEPT
|iptables -I INPUT 1 -i lo -j ACCEPT
|iptables -A INPUT -p UDP --dport bootps ! -i ${LAN} -j REJECT
|iptables -A INPUT -p UDP --dport domain ! -i ${LAN} -j REJECT}}

(Optional) Allow access to our ssh server from the WAN:

{{RootCmd|iptables -A INPUT -p TCP --dport ssh -i ${WAN} -j ACCEPT}}

Drop TCP / UDP packets to privileged ports:

{{RootCmd|iptables -A INPUT -p TCP ! -i ${LAN} -d 0/0 --dport 0:1023 -j DROP
|iptables -A INPUT -p UDP ! -i ${LAN} -d 0/0 --dport 0:1023 -j DROP}}

Finally add the rules for NAT:

{{RootCmd|iptables -I FORWARD -i ${LAN} -d 192.168.0.0/255.255.0.0 -j DROP
|iptables -A FORWARD -i ${LAN} -s 192.168.0.0/255.255.0.0 -j ACCEPT
|iptables -A FORWARD -i ${WAN} -d 192.168.0.0/255.255.0.0 -j ACCEPT
|iptables -t nat -A POSTROUTING -o ${WAN} -j MASQUERADE}}

Tell the kernel that ip forwarding is OK:

{{RootCmd|echo 1 > /proc/sys/net/ipv4/ip_forward}}

{{RootCmd|for f in /proc/sys/net/ipv4/conf/*/rp_filter ; do echo 1 > $f ; done}}

Instruct the IPtables daemon to save the changes to the rules, then add IPtables to the default runlevel:

{{RootCmd|/etc/init.d/iptables save
|rc-update add iptables default}}

{{FileBox|filename=/etc/sysctl.conf|lang=ini|1=
net.ipv4.ip_forward = 1
net.ipv4.conf.default.rp_filter = 1
}}

For dynamic Internet the following setting should be enabled:

{{FileBox|filename=/etc/sysctl.conf|lang=ini|1=
net.ipv4.ip_dynaddr = 1
}}

Once the above text has been entered the rest of the network users should now be able to use the Internet as if they were directly connected themselves. 

The <code>ip_dynaddr</code> option is useful for dial on demand systems or when the ISP gives out dynamic addresses. This works around the problem where a connection is attempted before the Internet interface is fully setup. This provides a smoother network experience for users behind the router. 

== Fun things (for a rainy day) ==

=== Intro ===

Believe it or not, it is done! From here on out, some other common topics that may interest will be covered. Everything in the following sections are completely optional.

=== Port forwarding ===

Sometimes users need to be able to host services on a computer behind the router, or need to be able to connect remotely to a computer behind the router. Perhaps a FTP, HTTP, SSH, or VNC server is needed on one or more machines behind the router and outsiders need to connect to them all. The only caveat to Port Forwarding is only one service/machine combo can be established per port. For example, there is no practical way to setup three FTP servers behind the router and connect to them all through port 21; only one system can be on port 21 while the others would need to be on other ports (port 123 and port 567 would be fine options). 

All the port forwarding rules are of the form <code>iptables -t nat -A PREROUTING [-p protocol] --dport [external port on router] -i ${WAN} -j DNAT --to [ip/port to forward to]</code>. Unfortunately, iptables does not accept hostnames when port forwarding. When forwarding an external port to the same port on the internal machine, omit the destination port. See the iptables(8) man page for more information. 

{{RootCmd|export LAN{{=}}eth0
|export WAN{{=}}eth1}}

Forward port 2 to ssh on an internal host:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 2 -i ${WAN} -j DNAT --to 192.168.0.2:22}}

FTP forwarding to an internal host:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 21 -i ${WAN} -j DNAT --to 192.168.0.56}}

HTTP forwarding to an internal host:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 80 -i ${WAN} -j DNAT --to 192.168.0.56}}

VNC forwarding for internal hosts:

{{RootCmd|iptables -t nat -I PREROUTING -p tcp --dport 5900 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p tcp --dport 5901 -i ${WAN} -j DNAT --to 192.168.0.3:5900}}

To VNC in to 192.168.0.3, then add <code>:1</code> to the router's hostname.

SAMBA forwarding to an internal host (excess ports to cover Windows):

{{RootCmd|iptables -t nat -I PREROUTING -p tcp --dport 135 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p tcp --dport 139 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p tcp --dport 445 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p udp --dport 137:138 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p udp --dport 445 -i ${WAN} -j DNAT --to 192.168.0.2}}

Bittorrent forwarding:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 6881:6889 -i ${WAN} -j DNAT --to 192.168.0.2}}

eDonkey/eMule forwarding:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 4662 -i ${WAN} -j DNAT --to 192.168.0.55}}

Game Cube Warp Pipe support:

{{RootCmd|iptables -t nat -A PREROUTING -p udp --dport 4000 -i ${WAN} -j DNAT --to 192.168.0.56}}

Playstation 2 Online support:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 10070:10080 -i ${WAN} -j DNAT --to 192.168.0.11
|iptables -t nat -A PREROUTING -p udp --dport 10070:10080 -i ${WAN} -j DNAT --to 192.168.0.11}}

Xbox Live:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 3074 -i ${WAN} -j DNAT --to 192.168.0.69
|iptables -t nat -A PREROUTING -p udp --dport 3074 -i ${WAN} -j DNAT --to 192.168.0.69
|iptables -t nat -A PREROUTING -p udp --dport 88 -i ${WAN} -j DNAT --to 192.168.0.69
}}

=== Identd (for IRC) ===

Internet Relay Chat utilizes the ident service pretty heavily. Now that the IRC clients are behind the router, a way to host ident for both the router and the clients is needed. A server has been created for this purpose. It is called {{Package|net-misc/midentd}}. 

{{RootCmd|emerge midentd
|rc-update add midentd default
|/etc/init.d/midentd start
}}

There are a few other ident servers in the Portage tree. Other viable options are {{Package|net-misc/oidentd}} and {{Package|net-misc/fakeidentd}}. 

=== Time server ===

Keeping the system time correct is essential to maintaining a healthy system. One of the most common ways of accomplishing this is with the Network Time Protocol (NTP) and the {{Package|net-misc/ntp}} package (which provides implementations for both server and client). 

Many users run ntp clients on their computers. Obviously, the more clients in the world, the larger the load ntp servers need to shoulder. In environments like home networks an NTP server can be setup locally to help keep the load down on public servers while still providing the proper time to local systems. As an added bonus, private updates will be a lot faster for the local clients! The setup is simple: run a NTP server on the router that synchronizes itself with the public Internet servers while, at the same time, providing the time to the rest of the computers in the network. To get started, simply <tt>emerge ntp</tt> on the router and edit {{Path|/etc/conf.d/ntp-client}} as desired.

{{RootCmd|rc-update add ntp-client default}}

{{FileBox|filename=/etc/ntp.conf|1=
restrict default ignore
restrict 192.168.0.0 mask 255.255.255.0 notrust nomodify notrap
}}

These will allow only NTP clients with an IP address in the 192.168.0.xxx range to use the NTP server.

{{RootCmd|rc-update add ntpd default
|/etc/init.d/ntp-client start
|/etc/init.d/ntpd start}}

{{Note|Make sure to allow inbound and outbound communication on the NTP port (123/udp) when setting up the server. The client just needs outbound access on port 123 over UDP.}}

Now, on the clients, run <tt>emerge ntp</tt>. By running the NTP client setup is a lot simpler. 

In {{Path|/etc/conf.d/ntp-client}}, change the <code>pool.ntp.org</code> server in the <code>NTPCLIENT_OPTS</code> variable to <code>192.168.0.1</code>

{{RootCmd|rc-update add ntp-client default
|/etc/init.d/ntp-client start}}

=== Rsync server ===

For those who run multiple Gentoo boxes on the same LAN, it is wise to prevent every machine running <tt>emerge --sync</tt> with remote servers. By setting up a ''local'' rsync, both personal bandwidth and the Gentoo rsync servers' bandwidth is saved. The process is relatively simple.

{{Note|For a much more in-depth rsync guide, please see the official [[Project:Infrastructure/Rsync|rsync guide]].}}

Since every Gentoo machine requires rsync, there is no need to emerge it. Edit the default {{Path|/etc/rsyncd.conf}} config file, uncomment the <code>[gentoo-portage]</code> section, and make sure to add an <code>address</code> option. All other defaults should be already set correctly.

{{FileBox|filename=/etc/rsyncd.conf|1=
pid file = /var/run/rsyncd.pid
use chroot = yes
read only = yes
address = 192.168.0.1
  
[gentoo-portage]
  path = /mnt/space/portage
  comment = Gentoo Linux Portage tree
  exclude = /distfiles /packages
}}

The service then needs to be started (again, the defaults are OK). 

{{RootCmd|/etc/init.d/rsyncd start
|rc-update add rsyncd default}}

Only thing left is to set tell the clients to sync against the router. 

{{FileBox|filename=/etc/portage/make.conf|title=Setup SYNC variable to new rsync server|lang=bash|1=
SYNC="rsync://192.168.0.1/gentoo-portage"
}}

=== Mail server ===

Sometimes it's nice to run your own Simple Mail Transfer Protocol (SMTP) server on the router. You may have your own reason for wanting to do so, but I run it so that the users see mail as being sent instantly and the work of retrying/routing is left up to the mail server. Some ISPs also don't allow for mail relaying for accounts that aren't part of their network (like Verizon). Also, you can easily throttle the delivery of mail so that large attachments won't seriously lag your connection for half an hour. 

{{Emerge|netqmail}}

Make sure the output of `hostname` is correct:

{{RootCmd|emerge --config netqmail}}

{{RootCmd|iptables -I INPUT -p tcp --dport smtp ! -i ${LAN} -j REJECT
|ln -s /var/qmail/supervise/qmail-send /service/qmail-send
|ln -s /var/qmail/supervise/qmail-smtpd /service/qmail-smtpd
|cd /etc/tcprules.d}}

Edit {{Path|tcp.qmail-smtp}} and add an entry like so to the allow section:

{{FileBox|filename=niltcp.qmail-smtp|1=
192.168.0.:allow,RELAYCLIENT=""
}}

{{RootCmd|make
|rc-update add svscan default
|/etc/init.d/svscan start}}

When e-mail is setup on the hosts in the network, tell them the SMTP server is 192.168.0.1. Visit the [http://netqmail.org/ netqmail homepage] for more documentation on netqmail usage.

=== Full DHCP server ===

Earlier dnsmasq was used to provide DHCP service to all DHCP clients. For most people with a simple small LAN, this is perfect, however there may needs something with more features. Thus a full-featured DHCP server is provided by the [http://www.isc.org/products/DHCP ISC] folks for users who crave the maximum.

{{Emerge|dhcp}}

{{FileBox|filename=/etc/dhcp/dhcpd.conf|title=Here is a simple configuration file|1=
authoritative;
ddns-update-style interim;
subnet 192.168.0.0 netmask 255.255.255.0 {
    range 192.168.0.100 192.168.0.250;
    default-lease-time 259200;
    max-lease-time 518400;
    option subnet-mask 255.255.255.0;
    option broadcast-address 192.168.0.255;
    option routers 192.168.0.1;
    option domain-name-servers 192.168.0.1;
}
</pre>}}

In {{Path|/etc/conf.d/dhcpd}} set <code>IFACE</code> to "eth0".

{{RootCmd|rc-update add dhcpd default
|/etc/init.d/dhcpd start}}

This is the minimal setup required to replace the dnsmasq DHCP functionality used earlier. The DHCP features in dnsmasq should be disabled? If not, comment out the <code>dhcp-range</code> setting in {{Path|/etc/dnsmasq.conf}} and restart the service.

=== Connect another LAN (or two or three)===

Sometimes the router must be connected to another LAN. This can be done to hook up a group of friends temporarily or to section off different groups of computers. Whatever the reason, extending the router to other LAN networks should is straightforward. In the following examples, This article presumes that the ''new'' network is connected via a third ethernet card, namely <code>eth2</code>. 

First configure the interface. Take the instructions in [[Hug_the_LAN_.28bring_along_some_friends.29|this section]] and replace <code>eth0</code> with <code>eth2</code> and <code>192.168.0</code> with <code>192.168.1</code>.

Tweak dnsmasq to service the new interface. Edit the {{Path|/etc/conf.d/dnsmasq}} file again and append <code>-i eth2</code> to <code>DNSMASQ_OPTS</code>; using -i multiple times is OK. Then edit {{Path|/etc/dnsmasq.conf}} and add another line like the dhcp-range line in [[#LAN_Services_.28because_we.27re_nice_people.29|this section]], replacing <code>192.168.0</code> with <code>192.168.1</code>. Having multiple dhcp-range lines is OK too. 

Finally, see the rules in [[#LAN_Services_.28because_we.27re_nice_people.29|this section]] and duplicate the rules that have <code>-i ${LAN}</code> in them. Another variable may need to be created, say <code>LAN2</code>, to make things easier.

== Troubleshooting ==

=== Useful tools ===

When having trouble getting computers to communicate try out the following tools (they can all be found in the net-analyzer Portage category): 

{| class="wikitable" style="text-align: left;" 
|- 
! Utility
! Description
|- 
| wireshark
| GUI tool to view all raw network data according to filters
|- 
| tcpdump
| Console tool to dump all raw network data according to filters
|- 
| iptraf
| ncurses based IP LAN monitor
|- 
| ettercap
| ncurses based network monitor/control
|-
|}

=== DHCP fails to start ===

When starting the dhcp init.d script for the first time, it may fail to load but neglect to provide any useful infomation. 

{{RootCmd|/etc/init.d/dhcp start|output=<pre>
 * Setting ownership on dhcp.leases ...          [ ok ]
 * Starting dhcpd ...                            [ !! ]
</pre>
}}

The trick is used to know where dhcpd is sending its output. Browse to {{Path|/var/log}} and read the log files. Since the exact log file depends on the package using a syslog, try running <tt>grep -Rl dhcpd /var/log</tt> to narrow down the possibilities. Chances are a typo was made in the configuration file. Another command to try running: <tt>dhcpd -d -f</tt> (short for debug / foreground). This aids in debugging the errors based upon the output. 

=== Incorrect MTU value ===

If odd errors are experienced (such as not being able to access some webpages while others load fine), it might be Path MTU Discovery trouble. The quick way to test for this is to run the following iptables command: 

{{RootCmd|iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu}}

This will affect all new connections; refresh the problematic website in order to test the fix. In case it helps, the standard MTU value for 100mbit ethernet connections is <code>1500</code>; this value also applies to PPPoA. For PPPoE connections it is <code>1492</code>. For more info, read Chapter 15 of the [http://lartc.org/howto/ Linux Advanced Routing & Traffic Control HOWTO]. 

If the above command does not work, consider putting the rule into the mangle table. Simply add <tt>-t mangle</tt> to the command. 

=== Unable to connect two machines directly ===

If (for whatever reason) connecting two machines directly together without a hub or switch is required, a regular ethernet cable will likely not work, unless an Auto MDI/MDI-X (also known as "autosensing") capable network adapter is available. A different cable called a crossover cable will be needed for direct NIC to NIC connections. This [[Wikipedia:Ethernet_crossover_cable|Wikipedia]] page explains the low level details.

== Final notes ==

There are no other final notes. If any troubles with this guide are experienced either update this article with the correct information or leave a brief message on this article's talk page with a summary of what is broken. Eventually someone should be able to correct any issue(s). It is also possible to file a bug on [https://bugs.gentoo.org/ Gentoo's Bugtracking Website]. If there are any other interesting bits that would enhance this guide, by all means include them! The worst that could happen is they could be removed.

[[Category:Server and Security]] {{Migrated|originalauthors={{Mail|vapier}}}}
