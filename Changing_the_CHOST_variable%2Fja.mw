<languages />

{{Metadata|abstract=この文書は、既存のシステムのCHOST変数を変更する方法について説明します。}}

この文書は、既存のシステムの<var>[[CHOST]]</var>変数を変更する方法について説明します。

== はじめに ==

<var>CHOST</var>の変更は、システムをひどくめちゃくちゃにしてしまう可能性もある重大な事項です - それでは、なぜそのような大破壊をもたらす可能性のあることについてガイドがあるのでしょうか? 

たとえば、nptlのみをサポートするglibc 2.4へアップグレードするときに、現在の<var>CHOST</var>がnptlを使用できないi386であることに気づいた場合のように、一定の<var>CHOST</var>の変更が避けられない状況があります。このケースではとりうる選択肢はあまり多くはなく、そして<var>CHOST</var>の変更はその1つです。 

これらの手順に従った場合でさえ問題は起こり得ますから、手順はきわめて慎重に読み、かつ実行してください。この例では<var>CHOST</var>変数はi386からi686へと変更されます。コマンドはそれぞれの状況に合わせて変えてください。 

== CHOST変数の変更 ==

=== パッケージの構築 ===

<var>CHOST</var>変数の変更から開始するため、{{Path|/etc/portage/make.conf}}ファイルを編集し、<var>CHOST</var>の値を必要条件に合うように変更します。それから、以下のパッケージをこの順番で再構築してください: 

{{Emerge|binutils gcc glibc|params+=--oneshot}}

{{Important|gccのメジャーアップグレードを<var>CHOST</var>変数の変更と同時に行う(たとえば、gcc 3.3、CHOST i386からgcc 4.1、CHOST i686への変更など)ことは、深刻な副作用を引き起こしうることに注意してください。それは実行不可能ではないかもしれませんが、どのような潜在的な問題点が発生するか予測困難ですし、それらをこのガイドに文書化することはほとんど不可能です。結果として、たとえばまず[[Upgrading_GCC|gcc upgrade guide]]にしたがってgccをアップグレードしてから<var>CHOST</var>を変更するなど、一度に一つのことをするようにしてください。<var>CHOST</var>がi386に設定されているシステムでは、glibc 2.4(またはそれ以降)はi386では利用できないため、gccのアップグレードの間はmaskしておきます。変更が完全に実行し終わったら、unmaskしてください。}}

{{Note|gccをコンパイルする前に、{{c|binutils-config}}を実行する必要があるかもしれません。}}

=== うまくいっているか確認する ===

{{c|gcc-config}}と{{c|binutils-config}}の設定が正常か、また{{Path|/etc/env.d/}}に残ってしまったものがないか、確認します。 

{{c|gcc-config}}と{{c|binutils-config}}の出力は以下のようになっている必要があります:

{{Note|出力は、ことによると、あるいはおそらく、gccのバージョンや<var>CHOST</var>の設定によって異なります。上の例ではi686でgcc 4.1.1を使用しています。}} 

{{RootCmd|gcc-config -l|output=<pre>
 [1] i686-pc-linux-gnu-4.1.1 *</pre>}}

{{RootCmd|gcc-config -c|output=<pre>
i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|binutils-config -l|output=<pre>
 [1] i686-pc-linux-gnu-2.16.1 *
# binutils-config -c
i686-pc-linux-gnu-2.16.1
</pre>
}}

Next, check to see if there are references to the old <var>CHOST</var> variable in {{Path|/etc/env.d/}}: 

{{RootCmd|cd /etc/env.d/
|grep 386 *|output=<pre>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>
}}

{{Note|This may not happen in every case, but in this case {{Path|05gcc-i386-pc-linux-gnu}} contains references to the old <var>CHOST</var> value. Things may look differently on each system depending on which <var>CHOST</var> value the system is changing to/from. In some cases, no references are left at all. The name may also be {{Path|05gcc-''new_CHOST''-pc-linux-gnu}}.}}

Before deleting the file, let's check for files with the updated <var>CHOST</var> value: 

{{RootCmd|grep 686 *|output=<pre>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>
}}

This one looks good as there should always be only one file for <code>gcc</code> in {{Path|/etc/env.d/}} ({{Path|05gcc}} in this example), so delete the one with the wrong references: 

{{RootCmd|rm 05gcc-i386-pc-linux-gnu}}

The same also applies to {{Path|binutils}} - if there's an extra one, see which is the outdated one and delete it. Next, check the contents of {{Path|/etc/env.d/binutils/}}:

{{RootCmd|cd /etc/env.d/binutils/
|ls -la|output=<pre>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1
</pre>}}

{{RootCmd|cat config-i686-pc-linux-gnu|output=<pre>
CURRENT=2.16.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-2.16.1|output=<pre>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>
}}

That one looks good, those two files should be there. Time to move on to the {{Path|gcc/}} directory. 

{{RootCmd|cd /etc/env.d/gcc|output=<pre>
# ls -la
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1
</pre>}}

{{RootCmd|cat config|output=<pre>
CURRENT=i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat config-i386-pc-linux-gnu|output=<pre>
CURRENT=i386-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-4.1.1|output=<pre>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>
}}

{{Path|config}} and {{Path|i686-pc-linux-gnu-4.1.1}} are fine, but {{Path|config-i386-pc-linux-gnu}} is another leftover that needs removal. 

{{Note|Again, the name of the file containing references to an outdated gcc version may have a different name, e.g. {{Path|config-i686-pc-linux-gnu}} even though the system is being changed to (in this case) i686. It is important to identify the file on its content, not only the name.}}

{{RootCmd|rm config-i386-pc-linux-gnu}}

Now run the following commands to update the environment: 

{{RootCmd|env-update && source /etc/profile}}

Next, verify everything is fixed: 

{{RootCmd|grep -r 386 /etc/env.d/}}

If there are still files found, try to track it down before going on.

=== Finishing The Change ===

Now it is necessary to re-emerge {{Package|sys-devel/libtool}} and run {{c|fix_libtool_files.sh}} which can be found in {{Path|/usr/share/gcc-data/''$CHOST''/''<gcc-version>''/}}. Make sure to use the correct gcc version (the current one, 4.1.1 here) and pass the old architecture (i386 here) as argument. Replace <code>$CHOST</code> with the new <var>CHOST</var> value, and <code><gcc-version></code> with the gcc version. This example assumes a <var>CHOST</var> value applicable to i686. 

{{Emerge|libtool|params+=--oneshot}}

{{RootCmd|/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu}}

It is now possible to rebuild all the packages: 

{{RootCmd|emerge -e world}}

In theory, it should not be necessary to do so, but it cannot be 100% guaranteed that this is actually the case.

The following set of packages really need to be rebuilt: 

{{Emerge|python|params+=--oneshot}}

All packages using perl install to the <var>CHOST</var> directory and hence need rebuilding. In case {{c|qfile}} is not available on the system yet, install {{Package|app-portage/portage-utils}} first.

{{Emerge|portage-utils}}

Now rebuild all packages that have files installed in any {{Path|/usr/lib/perl*}} location:

{{RootCmd|emerge -av1 `qfile /usr/lib/perl* -Cq {{!}} sort -u`}}

When encountering other packages that need recompiling, please let us know through the [[Talk:Changing_the_CHOST_variable|discussion page]] of this guide.

=== よくある問題 ===

When upgrading from gcc 3.3 to 4.1 at the same time as changing the <var>CHOST</var> variable (please don't do that anyway), a couple of users reported broken packages that need recompiling, such as {{Package|sys-apps/groff}} and {{Package|mail-mta/courier}}: 

{{CodeBox|title=Error messsage|1=
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
}}

This happens because during the upgrade, the <var>CHOST</var> variable doesn't exactly match the <var>CTARGET</var> variable value, making the compiler assume that the system is using cross-compiling. As a consequence, <var>LDPATH</var> isn't inserted into {{Path|ld.so.conf}}, resulting in this error. 

Please see the [[Upgrading GCC|GCC upgrade guide]] for what needs to be rebuilt after a GCC upgrade. 

In some rare cases, this can break old versions of python, too. This may be fixed by adding {{Path|/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6}} (change accordingly to the old <var>CHOST</var> and gcc version) to {{Path|/etc/ld.so.conf}}, running {{c|ldconfig}} and then {{c|emerge libstdc++-v3}}. However, as can be seen, this situation needs to be avoided - don't change <var>CHOST</var> and gcc at the same time.

=== フィードバックしてください ===

もちろん、フィードバック(動いた、失敗した、あるいはその他の問題に遭遇した、のいずれも)は歓迎します。[[Talk:Changing_the_CHOST_variable|discussion page]]を利用するか、[https://forums.gentoo.org/viewtopic-t-494147.html このフォーラムスレッド]に投稿してください。このガイドの多くはvapierによるものです、協力に感謝します!

{{Migrated|originalauthors=Wernfried Haas, {{Dev|vapier}}, Chris White}}
