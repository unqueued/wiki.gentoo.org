<languages />

{{Metadata|abstract=Ce document explique comment utiliser les clés SSH partagées avec le programme keychain. Il suppose une connaissance des fondamentaux de la cryptographie à clé publique.}}

Ce document explique comment utiliser les clés SSH partagées avec le programme keychain. Il suppose une connaissance des fondamentaux de la cryptographie à clé publique.

== Fondamentaux ==

=== Le problème à résoudre ===

Avoir à entrer un mot de passe de connexion sur chaque système est inconvénient, spécialement si beaucoup de systèmes sont gérés. Certains administrateurs peuvent même avoir besoin d'un script ou d'une tâche de cron qui nécessite un moyen efficace d'utiliser une connexion ssh. Dans un cas comme dans l'autre, il y a une solution au problème, et elle commence avec l'authentification par clé publique. 

=== Comment fonctionne l'authentification par clé publique ? ===

Supposer qu'un client veuille se connecter au démon ssh sur un serveur. Le client commence par générer une paire de clés et donne la clé publique au serveur. Par la suite, à chaque fois que le client essaye de se connecter, le serveur lui soumet un challenge qui est chiffré avec cette clé publique. Dans ce cas, seul le détenteur de la clé privée correspondante (le client) est capable de le déchiffrer, et la bonne réponse permet de réussir la connexion. 

== Comment utiliser l'authentification par clé publique ? ==

=== Générer une paire de clés ===

La première étape est de créer une paire de clés. Pour ce faire, utiliser la commande {{c|ssh-keygen}} : 

{{Cmd|ssh-keygen}}

Accepter les valeurs par défaut, et s'assurer d'entrer une mot de passe fort.

{{Warning/fr|S'assurer bien de choisir un mot de passe fort, en particulier si cette clé va être utilisée pour des connexions en tant qu'utilisateur root ! }}

Après la génération terminée, une clé privée doit se trouver dans {{Path|~/.ssh/id_rsa}}  et une clé publique dans {{Path|~/.ssh/id_rsa.pub}}. La clé publique est maintenant prête à être copiée sur l'hôte distant.

=== Préparer le serveur ===

La clé {{Path|~/.ssh/id_dsa.pub}} doit être copiée sur le serveur qui exécute {{c|sshd}}. Elle doit être ajoutée au fichier {{Path|~/.ssh/authorized_keys}} qui appartient à l'utilisateur se connectant sur le serveur. Après que l'accès {{c|ssh}} ait été autorisé, les étapes suivants peuvent être utilisées pour configurer la connexion automatique au serveur en utilisant une clé publique.

{{Cmd|scp ~/.ssh/id_rsa.pub server_user@server:~/myhost.pub
|ssh server_user@server "cat ~/myhost.pub &gt;&gt; ~/.ssh/authorized_keys"
|ssh server_user@server "cat ~/.ssh/authorized_keys"}}

La sortie correspondant à la dernière ligne devrait montrer le contenu du fichier {{Path|~/.ssh/authorized_keys}}. Bien vérifier que la sortie est correcte.

=== Tester la configuration ===

En théorie, si tout c'est bien passé, et si le démon {{c|sshd}} sur le serveur le permet (cela peut être configuré), il devrait être possible d'avoir un accès {{c|ssh}} sur le serveur sans donner de mot de passe. La clé privée aura toujours besoin d'être décryptée sur le client avec le mot de passe défini précédemment, mais il ne faut pas confondre cela avec le mot de passe du compte utilisateur sur le serveur.

{{Cmd|ssh <server_user>@<server>}}

Un mot de passe a dû être demandé pour {{Path|id_rsa}}, et l'accès a dû être attribué vi {{c|ssh}} à l'utilisateur <code><server_user></code> sur le serveur. Si ce n'est pas le cas, se connecter en tant que <code><server_user></code>, et vérifier que le contenu de {{Path|~/.ssh/authorized_keys}} comporte chaque clé publique sur une seul ligne. C'est aussi une bonne idée de vérifier la configuration de sshd pour être sûr qu'il autorise l'utilisation de clés publiques quand disponibles.

À ce stade, les lecteurs se demandent probablement, ''De qui se moque-t-on ? J'ai simplement échangé un mot de passe contre un autre !'' Détendez-vous, la section suivante va expliquer comment utiliser tout ça de manière à n'entrer le mot de passe qu'une fois et réutiliser la clé (déchiffrée) pour de multiples connexions.

== Rendre commode l'authentification par clé publique  ==

=== Gestion typique des clés avec un agent ssh ===

La prochaine étape est de ne déchiffrer la clé privé qu'une seule fois, et d'obtenir la possibilité de se connecter en ssh librement, sans avoir à taper aucun mot de passe. C'est exactement ce que le programme {{c|ssh-agent}} permet. 

{{c|ssh-agent}} est en général lancé au démarrage de la session X, ou depuis un script de démarrage tel que {{Path|~/.bash_profile}}. Il fonctionne en créant un socket Unix, et en enregistrant les variables d'environnement appropriées de telle manière que les applications suivantes puissent utiliser ces services en se connectant au socket. Clairement, cela n'a de sens que si le programme est démarré dans le processus parent de la session X si un le de clés privées déchiffrées est utilisé dans toutes les applications X ultérieures. 

{{Cmd|eval `ssh-agent`}}

{{Note|Le programme {{c|ssh-agent}} conserve les clés déchiffrées jusqu'à ce qu-il soit tué. Pour définir une durée de vie pour les clés, utiliser l'argument <code>-t</code> comme expliqué dans la page de manuel {{c|man ssh-agent}}.}}

Quand {{c|ssh-agent}} est lancé, il devrait indiquer le  PID (identifiant du processus) du programme ssh-agent en exécution, et aussi définir quelques variables d'environnement, nommément, <var>SSH_AUTH_SOCK</var> et <var>SSH_AGENT_PID</var>. Il devrait aussi ajouter {{Path|~/.ssh/id_dsa}} à sa collection et demander l'utilisateur le mot de passe correspondant. Si d'autres clés privées existantes doivent être ajoutées à l'agent en exécution, utiliser la commande {{c|ssh-add}} : 

{{Cmd|ssh-add somekeyfile}}

Maintenant, la magie ! Avec les clés privées déchiffrées et prêtes, se connecter au serveur ssh (configuré pour utiliser les clés publiques) sans entrer de mot de passe : 

{{Cmd|ssh server}}

Pour interrompre l'agent ssh (et du coup demander d'entrer un mot de passe de nouveau) :

{{Cmd|ssh-agent -k}}

{{Note|It is possible to have multiple {{c|ssh-agent}} processes running, especially when configuring it initially took some effort and trials. These processes can be killed like any other process by running {{c|killall ssh-agent}}.}}

Pour encore plus de confort d'utilisation avec ssh-agent, lire la section suivante sur l'utilisation de keychain. S'assurer de tuer le processus ssh-agent en fonctionnement vu que keychain se chargera de gérer les sessions de {{c|ssh-agent}} lui-même.

=== Obtenir le meilleur de ssh-agent ===

Keychain permettra de réutiliser un agent ssh entre sessions et, en option, de demander les mots de passe à chaque fois que les utilisateurs se connectent. Commencer par l'installer :

{{Emerge|net-misc/keychain}}

En supposant que l'installation ait réussie, {{c|keychain}} peut maintenant être utilisé librement. Ajouter ce qui suit au fichier {{Path|~/.bash_profile}}  pour l'activer : 

{{CodeBox|title=Activer keychain dans .bash_profile|<pre>
keychain ~/.ssh/id_rsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>
}}

{{Note|Plus de clés privées peuvent être ajoutées à la ligne de commande si désiré. De plus, pour que le mot de passe soit demandé à chaque fois qu'un shell est créé, ajouter l'option <code>--clear</code>.}}

{{Note|Si bash n'est pas utilisé, lire la section  '''EXAMPLES''' de la page {{c|man keychain}} pour des exemples d'utilisation avec d'autres shell. L'idée est de lancer ces commandes à chaque fois qu'un shell est utilisé.}}

Maintenant, tester. Tout d'abord, s'assurer que le processus ssh-agent de la section précédente a bien été tué, puis démarrer un nouveau shell, normalement en se connectant, ou en lançant un nouveau terminal. Il devrait inviter à entrer le mot de passe pour chacune des clés spécifiées sur la ligne de commande. Tous les shells ouverts après ce point devraient réutiliser l'agent ssh, autorisant ainsi à se connecter indéfiniment en ssh sans saisir de mot de passe. 

=== Utiliser keychain avec Plasma 5 ===

Plasma 5 users, instead of using {{Path|~/.bash_profile}}, can let Plasma manage ssh-agent for them. In order to do so, edit {{Path|/etc/plasma/startup/agent-startup.sh}}, which is read during Plasma's startup, and {{Path|/etc/plasma/shutdown/10-agent-shutdown.sh}}, which is executed during its shutdown. Here is how one could edit those files: 

{{CodeBox|title=Editing /etc/plasma/startup/10-agent-startup.sh|1=
SSH_AGENT=true
}}

{{CodeBox|title=Editing /etc/plasma/shutdown/10-agent-shutdown.sh|1=
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi}}

Now, all that has to be done is launch a terminal of choice, like {{Package|kde-apps/konsole}}, and load the right set of keys to use. For example: 

{{Cmd|keychain ~/.ssh/id_rsa}}

The keys will be remembered until the end of the Plasma session (or until the ssh-agent process is killed manually).

=== Using keychain with Plasma 4 ===

As above for Plasma 5 except replace {{Path|/etc/plasma}} with {{Path|/etc/kde}}.

== Conclusion ==

=== Considération sur la sécurité ===

Of course, the use of ssh-agent may add a bit of insecurity to the system. If another user would gain access to a running shell, he could login to all of the servers without passwords. As a result, it is a risk to the servers, and users should be sure to consult the local security policy (if any). Be sure to take the appropriate measures to ensure the security of all sessions. 

=== Dépannage ===

Most of this should work pretty well, but if problems do come up, then the following items might be of assistance. 

* If connecting without {{c|ssh-agent}} does not seem to work, consider using ssh with the <code>-vvv</code> options to find out what's happening. Sometimes the server is not configured to use public key authentication, sometimes it is configured to ask for local passwords anyway! If that is the case, try using the <code>-o</code> option with {{c|ssh}}, or change the server's {{Path|sshd_config}}.
* If connecting with {{c|ssh-agent}} or {{c|keychain}} does not seem to work, then it may be that the current shell does not understand the commands used. Consult the man pages for ssh-agent and keychain for details on working with other shells.

== External resources ==

* [http://www.funtoo.org/Keychain The official Keychain project page] at Funtoo.org.
* [http://www.funtoo.org/OpenSSH_Key_Management,_Part_1 IBM developerWorks article series] introducing the concepts behind Keychain.


{{Migrated|originalauthors=Eric Brown, Marcelo Goes, nightmorph}}

[[Category:Server and Security]] 
[[Category:SSH]]
