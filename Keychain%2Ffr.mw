<languages />

Ce document décrit comment utiliser les clés partagées SSH avec le programme ''keychain''. Il suppose que le lecteur a une connaissance de base de la cryptographie par clés publiques.

== Fondamentaux ==

=== Le problème à résoudre ===

Ainsi vous disposez de cette merveilleuse machine Gentoo sur laquelle tourne <code>sshd</code>, mais c'est un peu fatigant pour vous de continuer à taper tous ces mots de passe de connexion, n'est pas ? Ou peut-être avez vous un script ou une tâche de cron qui nécessite un moyen efficace d'utiliser une connexion ssh. Dans un cas comme dans l'autre, il y a une solution au problème, et elle commence avec l'authentification par clé publique. 

=== Comment fonctionne l'authentification par clé publique ? ===

Supposons qu'un client veuille se connecter à sshd sur un serveur. Le client commence par générer une paire de clés et donne la clé publique au serveur. Par la suite, à chaque fois que le client essaye de se connecter, le serveur lui soumet un challenge qui est chiffré avec cette clé publique. Dans ce cas, seul le détenteur de la clé privée correspondante (le client) est capable de le déchiffrer, et vous l'aurez deviné , seul ce détenteur est à même de pouvoir donner la bonne réponse et  réussir la connexion. 

== Comment utiliser l'authentification par clé publique ? ==

=== Générer une paire de clés ===

La première étape est de créer une paire de clés. Pour le faire, vous devez utiliser la commande <code>ssh-keygen</code>  comme suit : 

{{Cmd|ssh-keygen -t dsa}}

Contentez-vous d'accepter les valeurs par défaut, et assurer vous d'entrer une phrase de passe solide.

{{Warning/fr|Assurez-vous bien de choisir une phrase de passe solide, en particulier si cette clé va être utilisée pour des connexions en tant qu'utilisateur root !}}

Vous devriez maintenant disposer d'une clé privée dans  {{Path|~/.ssh/id_dsa}}  et d'une clé publique dans {{Path|~/.ssh/id_dsa.pub}}.
Vous êtes prêt à copier la clé publique sur l'hôte distant. 

=== Préparation du  serveur ===

Vous allez copier la clé {{Path|~/.ssh/id_dsa.pub}} sur le serveur qui exécute sshd. Vous allez aussi l'ajouter au fichier {{Path|~/.ssh/authorized_keys}}  qui appartient à l'utilisateur se connectant sur ce serveur.  Voici un exemple sur la manière de le faire si vous avez déjà un accès ssh à ce serveur. 

{{Cmd|scp ~/.ssh/id_dsa.pub server_user@server:~/myhost.pub
|ssh server_user@server "cat ~/myhost.pub &gt;&gt; ~/.ssh/authorized_keys"
|ssh server_user@server "cat ~/.ssh/authorized_keys"}}

La sortie correspondant à la dernière ligne devrait vous montrer le contenu du fichier {{Path|~/.ssh/authorized_keys}}. Vérifiez bien qu'elle est correcte. 

=== Tester la configuration ===

En théorie, si tout c'est bien passé, et si le démon ssh sur le serveur le permet, vous devriez être en mesure d'avoir un accès ssh sur le serveur sans donner de mot de passe. Il est encore nécessaire de déchiffrer la clé privée sur le client avec la phrase de passe que vous avez définie précédemment, mais il ne faut pas confondre cela avec le mot de passe du compte utilisateur sur le serveur. 

{{Cmd|ssh server_user@server}}

Fort heureusement, on vous a demandé votre phrase de passe pour la clé id_dsa, et vous avez pu accéder en ssh au serveur comme  ''utilisateur_serveur''. Si ce n'est pas le cas, connectez-vous comme ''utilisateur_serveur'' (cette fois avec le mot de passe de votre compte sur le serveur), et vérifiez le contenu de  {{Path|~/.ssh/authorized_keys}}. En particulier, vérifiez que chacune des entrées  tient sur une seule ligne. Vous devriez aussi vérifier la configuration sshd pour vous assurer que le serveur préfère utiliser l'authentification par clé publique lorsqu'elle est disponible. 

À ce stade, vous pensez probablement, ''De qui se moque-t-on ? J'ai simplement échangé un mot de passe contre un autre !'' Détendez-vous, la section suivante va vous expliquer comment utiliser tout ça de manière à économiser votre précieux temps. 

== Making public key authentication convenient ==

=== Typical key management with ssh-agent ===

If you've been following along, you're probably thinking that it would be great if we could somehow decrypt our private key(s) once, and gain the ability to ssh freely, without any passwords. You are in luck, that is exactly what the program <code>ssh-agent</code> is for. 

The program <code>ssh-agent</code> is usually started at the beginning of your X session, or from a shell startup script like {{Path|~/.bash_profile}} . It works by creating a unix-socket, and registering the appropriate environment variables so that all subsequent applications can take advantage of it's services by connecting to that socket. Clearly, it only makes sense to start it in the parent process of your X session if you want to use the set of decrypted private keys in all subsequent X applications. 

{{Cmd|eval `ssh-agent`}}

{{Note|This ssh-agent will keep keys decrypted until you kill ssh-agent. If you want to set a lifetime for the keys, use the -t argument as described in <code>man ssh-agent</code> .}}

When you run ssh-agent, it should tell you the PID of the running ssh-agent, and also set a few environment variables, namely <code>SSH_AUTH_SOCK</code> and <code>SSH_AGENT_PID</code> . It should also automatically add {{Path|~/.ssh/id_dsa}} to it's collection and ask you for the corresponding passphrase. If you have other private keys you want to add to the running ssh-agent, you can use the <code>ssh-add</code> command as follows: 

{{Cmd|ssh-add somekeyfile}}

Now for the magic. Since you should now have your decrypted private key ready, you should be able to ssh into the server without entering any passwords. 

{{Cmd|ssh server}}

It would be nice to know how to shut down ssh-agent in case you need to, right? 

{{Cmd|ssh-agent -k}}

{{Note|If you had problems getting ssh-agent to work, it might still be running. You can kill it like any other process by running <code>killall ssh-agent</code> .}}

If you want even more convenience from ssh-agent, proceed to the next section on using keychain. Be sure to kill the running ssh-agent as in the example above if you decide to do so.

=== Squeezing the last drop of convenience out of ssh-agent ===

Keychain will allow you to reuse an ssh-agent between logins, and optionally prompt for passphrases each time the user logs in. Before we get ahead of ourselves though, let's emerge it first. 

{{Emerge|keychain}}

Assuming that was successful, we can now use keychain freely. Add the following to your {{Path|~/.bash_profile}} to enable it: 

{{Code|Enabling keychain in .bash_profile|<pre>
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>
}}

{{Note|You can add more private keys to the command line as you desire. Also, if you want it to ask for passphrases each time you spawn a shell, add the --clear option.}}

{{Note|If you are not using bash, check the '''EXAMPLES''' section of <code>man keychain</code> for examples of use in other shells. The idea is to get those commands to run each time you use a shell.}}

Let's test it. First make sure we killed the ssh-agent from the previous section, then start up a new shell, usually by just logging in, or spawning a new terminal. It should prompt you for the password for each key you specified on the command line. All shells opened after that point should reuse the ssh-agent, allowing you to make passwordless ssh connections over and over. 

=== Using keychain with KDE ===

If you are a KDE user, instead of using {{Path|~/.bash_profile}} , you can let KDE manage ssh-agent for you. In order to do so, you will have to edit {{Path|/etc/kde/agent-startup.sh}} , which is read during KDE's startup, and {{Path|/etc/kde/shutdown/agent-shutdown.sh}} , which is executed during KDE's shutdown. Here is how you could edit those files: 

{{Code|Editing /etc/kde/agent-startup.sh|<pre>
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
</pre>
}}

{{Code|Editing /etc/kde/shutdown/agent-shutdown.sh|<pre>
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
</pre>
}}

Now, all you have to do is launch a term of your choice, like Konsole, and load the keys you would like to use. For example: 

{{Cmd|keychain ~/.ssh/id_dsa}}

Your keys will be remembered until you end your KDE session or kill the ssh-agent manually. 

== Concluding remarks ==

=== Security considerations ===

Of course, the use of ssh-agent may add a bit of insecurity to your system. If another user were to use your shell while you were in the bathroom, he could login to all of your servers without passwords. As a result, it is a risk to the servers you are connecting to, and you should be sure to consult the local security policy. If you do use it, be sure to take the appropriate measures to ensure the security of your sessions. 

=== Troubleshooting ===

Most of this should work pretty well, but if you encounter problems, you'll certainly want to know a few useful things. 

* If you are unable to connect without ssh-agent, consider using ssh with the arguments -vvv to find out what's happening. Sometimes the server is not configured to use public key authentication, sometimes it is configured to ask for local passwords anyway! If that is the case, you may want to also use the -o option with ssh, or change the server sshd_config.
* If you are having problems with ssh-agent or keychain, it may be that you are not using a shell that understands the commands they use. Consult the man pages for ssh-agent and keychain for details on working with other shells.
* You may also want to visit the [https://github.com/funtoo/keychain keychain homepage] for more usage tips.

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Eric Brown
* Marcelo Goes
* nightmorph

[[Category:Server and Security]]
