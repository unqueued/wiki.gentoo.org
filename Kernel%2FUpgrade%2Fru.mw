<languages />

{{Metadata|abstract=Данная статья описывает шаги, необходимые для перехода на новое ядро.}}

Эта статья описывает шаги необходимые для обновления [[kernel/ru|ядра]].

== Установка и использование нового ядра ==

Обновление ядра может быть хорошей идеей когда установлены новые исходники. Эти исходники иногда устанавливаются в результате обновления системы командой <tt>emerge -a --update --deep --with-bdeps=y --newuse @world</tt>, или, конечно, при прямой установке.

Установка новых исходников ядра не дает пользователю обновленное ядро. Она необходима для дальнейшей сборки и установки нового ядра, которое можно запустить после перезагрузки.

Сборка нового ядра из свежих исходников является практически тем же процессом, что и при установке системы. Разница заключается в использовании конфигурации старого ядра для создания конфигурации нового. Использование старой конфигурации избавляет пользователя от повторной установки необходимых опций (например, через <tt>make menuconfig</tt>).

Настройка ядра сохранена в файле {{Path|.config}} в одной директории с исходниками. Новое ядро может иметь опции или возможности, которые старое ядро не имеет, или наоборот, из нового ядра могут быть убраны некоторые из них.

Для соглашения с изменениями в конфигурационном файле, файл старого ядра необходимо конвертировать в новую конфигурацию. Эта статья демонстрирует, как получить новое ядро из новейших исходников с сохранением старого конфигурационного файла.

== Создание резервной копии текущей конфигурации ==

Будет благоразумно создать резервную копию что бы ее не потерять. В конечном счете, многие пользователи уделяют немало времени для выяснения оптимальной конфигурации системы, и потеря этой информации крайне нежелательна.

Очень просто создать резервную копию конфигурации текущего ядра:

{{RootCmd|cd /usr/src/linux
|cp .config ~/kernel-config-`uname -r`|}}

При условии, что символическая ссылка на исходные тексты ядра была установлена правильно, эта команда копирует конфигурацию текущего ядра в корневую директорию, переименовывая файл в {{Path|kernel-config-}} с допиской текущей версии ядра Linux.

== Установка символьной ссылки на новый исходный код ядра ==

Символьная ссылка {{Path|/usr/src/linux}} всегда должна указывать на каталог в котором находится исходный код используемого в настоящий момент ядра. Это может быть сделано одним из трех способов:

# Установка исходных текстов ядра с <code>USE="symlink"</code>
# Установка ссылки с помощью eselect
# Ручное обновление символической ссылки

=== Установка исходных текстов ядра с символической ссылкой на USE флаг ===

Это позволит указать в {{Path|/usr/src/linux}} на новые исходники ядра.

Если необходимо, это можно изменить одним из двух методов.

=== Настройка символьной ссылки с помощью eselect ===

Для настройки символьной ссылки с помощью {{c|eselect}}:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

Вывод доступных исходников ядра. Звездочка указывает на выбранные исходники.

Для изменения исходников, например, вторых в списке, выполните:

{{RootCmd|eselect kernel set 2}}

=== Изменение символьной ссылки вручную ===

Для изменения символьной ссылки вручную:

{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

== Копирование предыдущей конфигурации ядра ==

Конфигурацию старого ядра необходимо копировать для нового. Ее можно найти в нескольких местах:

* В файловой системе [[procfs]], если параметр ядра ''Enable access to .config through /proc/config.gz'' был включен в ядре работающем на данный момент:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}

* В каталоге {{Path|/boot}}, если конфигурационный файл был установлен там:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* В каталоге ядра, которое работает в данный момент:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

== Конфигурация нового ядра ==

Чтобы использовать старую конфигурацию для нового ядра, ее нужно конвертировать. Конвертация может быть выполнена через <tt>make silentoldconfig</tt> или <tt>make olddefconfig</tt>.

Через <tt>make silentoldconfig</tt> можно добавлять новые опции, через <tt>make olddefconfig</tt> - нет. Используйте что-то одно.

=== make silentoldconfig ===

Следующая конфигурация похожа на текстовую конфигурацию из <tt>make config</tt>. Можно выбрать новые опции. Например:

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

''(NEW)'' в конце строки отмечает эту опцию как новую. В левой части в квадратных скобках указаны возможные ответы: ''Y''es, ''n''o, ''m''odule или ''?'' для справки. Рекомендуемый ответ написан прописными буквами. В справке объясняется опция или драйвер.

Unfortunately <tt>make silentoldconfig</tt> doesn't show - next to the help - a lot more information for each option, like the context, so that it is sometimes difficult to give the right answer. In this case the best way to go is to remember the option name and revise it afterwards through one of the [[Kernel/Configuration#Configuration tools|graphical kernel configuration tools]].

=== make olddefconfig ===

If interactivity is not wanted (no questions should be asked), then use <tt>make olddefconfig</tt>:

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

== Компиляция ==

{{Important|When external kernel modules are installed (like nvidia or zfs), it may be necessary to run <tt>make modules_prepare</tt> as described [[Kernel/Upgrade#Reinstall external kernel modules|below]] before building the kernel. Some modules cannot be installed or prepared before the kernel has been built.}}

{{Important|Do not forget to reconfigure the [[Bootloader|bootloader]] to account for the new kernel filenames, and rebuild the initramfs if one is used as well.}}

На этом шаге следуйте инструкциям статьи [[Kernel/Configuration/ru#.D0.9A.D0.BE.D0.BC.D0.BF.D0.B8.D0.BB.D1.8F.D1.86.D0.B8.D1.8F|ручная конфигурация]].

== Переустановка внешних модулей ядра ==

Все внешние модули ядра, такие как [[:Category:Binary kernel modules|binary kernel modules]], необходимо перекомпилировать для каждого нового ядра. Если ядро еще не собрано, оно должно сперва быть подготовлено для компиляции его внешних модулей:

{{RootCmd|make modules_prepare}}

Вы можете собрать пакеты заново, используя набор ''@module-rebuild''

{{Emerge|@module-rebuild}}

== Solving build problems ==

Если возникают проблемы при пересборке текущего ядра, то может помочь очистка исходного кода ядра. Удостоверьтесь, что сохранили файл {{Path|.config}}, так как данная операция удалит его. Удостоверьтесь, что не используется окончание файла {{Path|.bak}} или {{Path|~}} для бэкапа, так как {{c|make distclean}} очищает и такие файлы тоже.

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

== Удаление старых ядер ==

Смотри статью [[Kernel/Removal/ru|удаление ядра]]. 

== Ссылки ==

* [http://kernelnewbies.org/LinuxChanges kernel changelog with some explanations of new features]

[[Category:Kernel]]
