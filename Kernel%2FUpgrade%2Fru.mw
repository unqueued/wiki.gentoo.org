<languages />

{{Metadata|abstract=Данная статья описывает шаги, необходимые для перехода на новое ядро.}}

Эта статья описывает шаги необходимые для обновления [[kernel/ru|ядра]].

== Установка и использование нового ядра ==

Обновление ядра может быть хорошей идеей когда установлен новый исходный код ядра. Этот исходный код иногда устанавливаются в результате обновления системы при запуске команды <tt>emerge -a --update --deep --with-bdeps=y --newuse @world</tt>, или, конечно, при прямой установке.

Установка нового исходного кода ядра не дает пользователю обновленное ядро. Новый исходный код необходим для дальнейшей сборки и установки нового ядра, которое можно будет запустить после перезагрузки.

Сборка нового ядра из свежего исходного кода является практически тем же процессом, как и во время установки системы. Разница заключается в том, что можно использовать конфигурацию от старого ядра для создания конфигурации для нового ядра. Использование старой конфигурации избавляет пользователя от повторной установки необходимых опций (например, через <tt>make menuconfig</tt>).

Настройка ядра сохранена в файле {{Path|.config}} в одной директории с исходниками. Новое ядро может иметь опции или возможности, которые старое ядро не имеет, или наоборот, из нового ядра могут быть убраны некоторые из них.

Для соглашения с изменениями в конфигурационном файле, файл старого ядра необходимо конвертировать в новую конфигурацию. Эта статья демонстрирует, как получить новое ядро из новейших исходников с сохранением старого конфигурационного файла.

== Создание резервной копии текущей конфигурации ==

Будет благоразумно создать резервную копию что бы ее не потерять. В конечном счете, многие пользователи уделяют немало времени для выяснения оптимальной конфигурации для системы, и потеря этой информации крайне нежелательна.

Очень просто создать резервную копию конфигурации текущего ядра:

{{RootCmd|cd /usr/src/linux
|cp .config ~/kernel-config-`uname -r`|}}

При условии, что символическая ссылка на исходный код ядра была установлена правильно, эта команда копирует конфигурацию используемого ядра в домашний каталог root, переименовывая файл конфигурации в {{Path|kernel-config-}} с подстановкой версии запущенного ядра Linux.

== Установка символьной ссылки на новый исходный код ядра ==

Символьная ссылка {{Path|/usr/src/linux}} всегда должна указывать на каталог в котором находится исходный код используемого в настоящий момент ядра. Это может быть сделано одним из трех способов:

# Установка исходного кода ядра с <code>USE="symlink"</code>
# Установка ссылки с помощью eselect
# Ручное обновление символьной ссылки

=== Установка исходного кода ядра с USE-флагом symlink ===

Это заставит {{Path|/usr/src/linux}} ссылаться на свежеустановленный исходный код ядра.

Если необходимо, это можно изменить одним из двух методов.

=== Настройка символьной ссылки с помощью eselect ===

Для настройки символьной ссылки с помощью {{c|eselect}}:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

Это вывод доступных исходных кодов ядра. Звездочка указывает на выбранный исходный код.

Для выбора исходного кода ядра, например, второго в списке, выполните:

{{RootCmd|eselect kernel set 2}}

=== Изменение символьной ссылки вручную ===

Для изменения символьной ссылки вручную:

{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

== Копирование предыдущей конфигурации ядра ==

Конфигурацию от старого ядра необходимо скопировать в новое. Ее можно найти в нескольких местах:

* В файловой системе [[procfs]], если параметр ядра ''Enable access to .config through /proc/config.gz'' был включен в ядре, работающем на данный момент:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}

* В каталоге {{Path|/boot}}, если конфигурационный файл был установлен там:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* В каталоге ядра, которое работает на данный момент:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

== Конфигурация нового ядра ==

Чтобы использовать старую конфигурацию для нового ядра, ее нужно конвертировать. Конвертация может быть выполнена через <tt>make silentoldconfig</tt> или <tt>make olddefconfig</tt>.

Через <tt>make silentoldconfig</tt> можно добавлять новые опции, через <tt>make olddefconfig</tt> - нет. Используйте что-то одно.

=== make silentoldconfig ===

Следующая конфигурация похожа на текстовый интерфейс из <tt>make config</tt>. Для новых опций она предоставляет выбор. Например:

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

''(NEW)'' в конце строки отмечает эту опцию как новую. В левой части в квадратных скобках указаны возможные ответы: ''Y''es, ''n''o, ''m''odule или ''?'' для справки. Рекомендуемый ответ написан большими буквами (здесь ''Y''). В справке описывается опция или драйвер.

К сожалению, <tt>make silentoldconfig</tt> не дает исчерпывающей информации для каждой опции, так что иногда трудно выбрать правильный ответ. В этом случае, лучше запомнить название параметра и найти его позже с помощью одного из [[Kernel/Configuration/ru#.D0.98.D0.BD.D1.81.D1.82.D1.80.D1.83.D0.BC.D0.B5.D0.BD.D1.82.D1.8B_.D0.BA.D0.BE.D0.BD.D1.84.D0.B8.D0.B3.D1.83.D1.80.D0.B0.D1.86.D0.B8.D0.B8|инструментов конфигурации ядра]].

=== make olddefconfig ===

Если интерактивность нежелательна (не должно задаваться вопросов), то тогда используйте <tt>make olddefconfig</tt>:

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

== Компиляция ==

{{Important|Когда установлены внешние модули ядра (например, nvidia или zfs), возможно, необходимо выполнить <tt>make modules_prepare</tt>, как написано [[Kernel/Upgrade/ru#.D0.9F.D0.B5.D1.80.D0.B5.D1.83.D1.81.D1.82.D0.B0.D0.BD.D0.BE.D0.B2.D0.BA.D0.B0_.D0.B2.D0.BD.D0.B5.D1.88.D0.BD.D0.B8.D1.85_.D0.BC.D0.BE.D0.B4.D1.83.D0.BB.D0.B5.D0.B9_.D1.8F.D0.B4.D1.80.D0.B0|ниже]], перед тем, как собрать ядро. Некоторые модули не могут быть установлены или подготовлены до того, как будет собрано ядро.}}

{{Important|Не забудьте перенастроить [[Bootloader|bootloader]] для нового ядра, и пересобрать initramfs, если он используется.}}

На этом шаге следуйте инструкциям статьи [[Kernel/Configuration/ru#.D0.9A.D0.BE.D0.BC.D0.BF.D0.B8.D0.BB.D1.8F.D1.86.D0.B8.D1.8F|ручная конфигурация]].

== Переустановка внешних модулей ядра ==

Все внешние модули ядра, такие как [[:Category:Binary kernel modules|binary kernel modules]], необходимо перекомпилировать для каждого нового ядра. Если ядро еще не собрано, оно должно сперва быть подготовлено для компиляции его внешних модулей:

{{RootCmd|make modules_prepare}}

Вы можете собрать пакеты заново, используя набор ''@module-rebuild''

{{Emerge|@module-rebuild}}

== Решение проблем сборки ==

Если возникают проблемы при пересборке текущего ядра, то может помочь очистка исходного кода ядра. Удостоверьтесь, что сохранили файл {{Path|.config}}, так как данная операция удалит его. Удостоверьтесь, что не используется окончание файла {{Path|.bak}} или {{Path|~}} для бэкапа, так как {{c|make distclean}} очищает и такие файлы тоже.

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

== Удаление старых ядер ==

Смотри статью [[Kernel/Removal/ru|удаление ядра]]. 

== Ссылки ==

* [http://kernelnewbies.org/LinuxChanges kernel changelog with some explanations of new features]

[[Category:Kernel]]
