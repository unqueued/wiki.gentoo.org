<languages />

{{Metadata|abstract=Данная статья описывает шаги, необходимые для перехода на новое ядро.}}

Эта статья описывает шаги необходимые для обновления [[kernel/ru|ядра]].

== Установка и использование нового ядра ==

Обновление ядра может быть хорошей идеей когда установлен новый исходный код ядра. Этот исходный код иногда устанавливаются в результате обновления системы при запуске команды {{c|emerge -a --update --deep --with-bdeps{{=}}y --newuse @world}}, или, конечно, при прямой установке.

Установка нового исходного кода ядра не дает пользователю обновленное ядро. Новый исходный код необходим для дальнейшей сборки и установки нового ядра, которое можно будет запустить после перезагрузки.

Сборка нового ядра из свежего исходного кода является практически тем же процессом, как и во время установки системы. Разница заключается в том, что можно использовать конфигурацию от старого ядра для создания конфигурации для нового ядра. Использование старой конфигурации избавляет пользователя от повторной установки необходимых опций (например, с помощью {{c|make menuconfig}}).

Конфигурация ядра сохранена в файле {{Path|.config}}, в каталоге с исходным кодом ядра. В новом ядро могут быть опции или возможности, которых нет в старом ядро, или наоборот, из нового ядра могут быть убраны некоторые из опций, которые были в старом ядре. Конфигурация ядра определяет, какие функции и опции в ядре должны быть включены, а какие нет; будут встроены в ядро, или, возможно, будут собраны в виде модулей, которые можно загрузить в работающее ядро по требованию. Поэтому в конфигурационном файле нового ядра могут быть новые опции, которые отсутствуют в конфигурационном файле старого ядра, или некоторых опций больше нет в новом ядре, но они присутствовали в конфигурационном файле старого ядра.

Для соглашения с изменениями в конфигурационном файле, файл старого ядра необходимо конвертировать в новую конфигурацию. Эта статья демонстрирует, как получить новое ядро из новейших исходников с сохранением старого конфигурационного файла.

== Создание резервной копии текущей конфигурации ядра ==

Будет благоразумно создать резервную копию что бы ее не потерять. В конечном счете, многие пользователи уделяют немало времени для выяснения оптимальной конфигурации для системы, и потеря этой информации крайне нежелательна.

Очень просто создать резервную копию конфигурации текущего ядра:

{{RootCmd|cd /usr/src/linux
|cp .config ~/kernel-config-`uname -r`|}}

При условии, что символическая ссылка на исходный код ядра была установлена правильно, эта команда копирует конфигурацию используемого ядра в домашний каталог root, переименовывая файл конфигурации в {{Path|kernel-config-}} с подстановкой версии запущенного ядра Linux.

== Установка символьной ссылки на новый исходный код ядра ==

Символьная ссылка {{Path|/usr/src/linux}} всегда должна указывать на каталог в котором находится исходный код используемого в настоящий момент ядра. Это может быть сделано одним из трех способов:

# Установка исходного кода ядра с <code>USE="symlink"</code>
# Настройка ссылки с помощью eselect
# Ручное обновление символьной ссылки

=== Установка исходного кода ядра с USE-флагом symlink ===

Это заставит {{Path|/usr/src/linux}} ссылаться на свежеустановленный исходный код ядра.

Если необходимо, это можно изменить одним из двух методов.

=== Настройка символьной ссылки с помощью eselect ===

To set the symlink with {{c|eselect}}:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

Это вывод доступных исходных кодов ядра. Звездочка указывает на выбранный исходный код.

Для выбора исходного кода ядра, например, второго в списке, выполните:

{{RootCmd|eselect kernel set 2}}

=== Изменение символьной ссылки вручную ===

Для изменения символьной ссылки вручную:

{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

== Копирование предыдущей конфигурации ядра ==

Конфигурацию от старого ядра необходимо скопировать в новое. Ее можно найти в нескольких местах:

* В файловой системе [[procfs]], если параметр ядра ''Enable access to .config through /proc/config.gz'' был включен в ядре, работающем на данный момент:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}

* In the {{Path|/boot}} directory, if the configuration was installed there:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* В каталоге ядра, которое работает на данный момент:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

== Конфигурация нового ядра ==

To use the configuration of the old kernel with the new kernel, it needs to be converted.  The conversion can be done by running either {{c|make silentoldconfig}} or {{c|make olddefconfig}}. Use either, not both.

=== make silentoldconfig ===

The following configuration is like the text based configuration with {{c|make config}}.  For new configuration options, the user is asked for a decision. For example:

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

The string ''(NEW)'' at the end of the line marks this option as new. Left to the string in square brackets are the possible answers: ''Y''es, ''n''o, ''m''odule or ''?'' to show the help. The recommend (i.e. default) answer is capitalized (here ''Y''). The help explains the option or driver.

Unfortunately {{c|make silentoldconfig}} doesn't show - next to the help - a lot more information for each option, like the context, so that it is sometimes difficult to give the right answer. In this case the best way to go is to remember the option name and revise it afterwards through one of the [[Kernel/Configuration#Configuration tools|graphical kernel configuration tools]].

=== make olddefconfig ===

If all new configuration options should be set to their recommended (i.e. default) values use {{c|make olddefconfig}}:

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

=== make help ===

Use {{c|make help}} to see other conversion methods available.

== Компиляция ==

{{Important|When external kernel modules are installed (like nvidia or zfs), it may be necessary to run {{c|make modules_prepare}} as described [[Kernel/Upgrade#Reinstall external kernel modules|below]] before building the kernel. Some modules cannot be installed or prepared before the kernel has been built.}}

{{Important|Не забудьте перенастроить [[Bootloader|bootloader]] для нового ядра, и пересобрать initramfs, если он используется.}}

На этом шаге следуйте инструкциям статьи [[Kernel/Configuration/ru#.D0.9A.D0.BE.D0.BC.D0.BF.D0.B8.D0.BB.D1.8F.D1.86.D0.B8.D1.8F|ручная конфигурация]].

== Переустановка внешних модулей ядра ==

Все внешние модули ядра, такие как [[:Category:Binary kernel modules|binary kernel modules]], необходимо перекомпилировать для каждого нового ядра. Если ядро еще не собрано, оно должно сперва быть подготовлено для компиляции его внешних модулей:

{{RootCmd|make modules_prepare}}

Вы можете собрать пакеты заново, используя набор ''@module-rebuild'':

{{Emerge|@module-rebuild}}

== Решение проблем сборки ==

When experiencing build problems while rebuilding the current kernel, it might help to sanitize the kernel sources. Make sure to backup the {{Path|.config}} file first, as the operation will remove it. Make sure not to use a {{Path|.bak}} or {{Path|~}} suffix as backup as {{c|make distclean}} will clean those up as well.

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

== Удаление старых ядер ==

Смотрите статью [[Kernel/Removal/ru|удаление ядра]]. 

== Ссылки ==

* [http://kernelnewbies.org/LinuxChanges kernel changelog with some explanations of new features]

[[Category:Kernel]]
