<languages />

{{Metadata|abstract=Данная статья описывает шаги, необходимые для перехода на новое ядро.}}

Эта статья описывает шаги необходимые для обновления [[kernel/ru|ядра]].

== Установка и использование нового ядра ==

A kernel upgrade may be a good idea when new kernel sources are installed. New kernel sources are sometimes installed while updating the system by running <tt>emerge -a --update --deep --with-bdeps=y --newuse @world</tt>, or of course when installed directly.

Installing new kernel sources doesn't provide the user with a new kernel. It is necessary to make and install a new kernel from the new sources and then reboot the system to actually run the new kernel.

Making a new kernel from the new sources is basically the same process as making a kernel when installing the system. The difference is that one can use the configuration of the old kernel to create a configuration for the new kernel. Using the old configuration saves the user from going through all the kernel options (like <tt>make menuconfig</tt>) again.

The configuration of the kernel is saved in a file named {{Path|.config}} in the directory that holds the kernel sources. A new kernel may have options or features the old kernel does not have, or it might not have a feature or option anymore which the old kernel still has.  The kernel configuration specifies whether the features and options of a kernel are to be enabled or not, perhaps built into the kernel, or perhaps built as modules which can be loaded into the running kernel on demand. Hence the configuration file of the new kernel may have new entries the configuration file of the old kernel doesn't have, and it might not have entries anymore which are present in the configuration file of the old kernel.

To deal with such changes of the configuration file, the configuration file of the old kernel needs to be converted to a configuration that can be used with the new kernel. This article shows how to make a new kernel from new kernel sources with converting the configuration file of the old kernel.

== Make a backup of the current kernel configuration ==

It is wise to make a backup of the kernel configuration so that the previous configurations are not lost. After all, many users devote considerable time to figure out the best configuration for the system, and losing that information is definitely not wanted.

It is easy to make a backup of the current kernel configuration:

{{RootCmd|cd /usr/src/linux
|cp .config ~/kernel-config-`uname -r`|}}

Provided that the symlink to the kernel sources has been set correctly, this copies the configuration of the currently used kernel to the home directory of root, renaming the configuration to {{Path|kernel-config-}} followed by the version of the current running Linux kernel.

== Set symlink to new kernel sources ==

Символьная ссылка {{Path|/usr/src/linux}} всегда должна указывать на каталог в котором находится исходный код используемого в настоящий момент ядра. Это может быть сделано одним из трех способов:

# Installing the kernel sources with <code>USE="symlink"</code>
# Setting the link with eselect
# Manually updating the symbolic link

=== Installing the kernel sources with the symlink USE flag ===

This will make the {{Path|/usr/src/linux}} point to the newly installed kernel sources.

If necessary, it can still be modified later with one of the other two methods.

=== Setting the link with eselect ===

To set the symlink with <tt>eselect</tt>:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

This outputs the available kernel sources. The asterisk indicates the chosen sources.

To change the kernel sources, e.g. to the second entry, do:

{{RootCmd|eselect kernel set 2}}

=== Изменение символьной ссылки вручную ===

Для изменения символьной ссылки вручную:

{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

== Copy previous kernel configuration ==

The configuration of the old kernel needs to be copied to the new one. It can be found in several places:

* В файловой системе [[procfs]], если параметр ядра ''Enable access to .config through /proc/config.gz'' был включен в ядре работающем на данный момент:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}

* В каталоге {{Path|/boot}}, если конфигурационный файл был установлен там:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* В каталоге ядра, которое работает в данный момент:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

== Конфигурация нового ядра ==

To use the configuration of the old kernel with the new kernel, it needs to be converted.  The conversion can be done by running either <tt>make silentoldconfig</tt> or <tt>make olddefconfig</tt>.

<tt>make silentoldconfig</tt> gives choices for new options, <tt>make olddefconfig</tt> does not.  Use either, not both.

=== make silentoldconfig ===

The following configuration is like the text based configuration with <tt>make config</tt>.  For new configuration options, it gives a choice. For example:

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

The string ''(NEW)'' at the end of the line marks this option as new. Left to the string in square brackets are the possible answers: ''Y''es, ''n''o, ''m''odule or ''?'' to show the help. The recommend answer is capitalized (here ''Y''). The help explains the option or driver.

Unfortunately <tt>make silentoldconfig</tt> doesn't show - next to the help - a lot more information for each option, like the context, so that it is sometimes difficult to give the right answer. In this case the best way to go is to remember the option name and revise it afterwards through one of the [[Kernel/Configuration#Configuration tools|graphical kernel configuration tools]].

=== make olddefconfig ===

If interactivity is not wanted (no questions should be asked), then use <tt>make olddefconfig</tt>:

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

== Компиляция ==

{{Important|When external kernel modules are installed (like nvidia or zfs), it may be necessary to run <tt>make modules_prepare</tt> as described [[Kernel/Upgrade#Reinstall external kernel modules|below]] before building the kernel. Some modules cannot be installed or prepared before the kernel has been built.}}

{{Important|Do not forget to reconfigure the [[Bootloader|bootloader]] to account for the new kernel filenames, and rebuild the initramfs if one is used as well.}}

На этом шаге следуйте инструкциям статьи [[Kernel/Configuration/ru#.D0.9A.D0.BE.D0.BC.D0.BF.D0.B8.D0.BB.D1.8F.D1.86.D0.B8.D1.8F|ручная конфигурация]].

== Переустановка внешних модулей ядра ==

Все внешние модули ядра, такие как [[:Category:Binary kernel modules|binary kernel modules]], необходимо перекомпилировать для каждого нового ядра. Если ядро еще не собрано, оно должно сперва быть подготовлено для компиляции его внешних модулей:

{{RootCmd|make modules_prepare}}

Вы можете собрать пакеты заново, используя набор ''@module-rebuild''

{{Emerge|@module-rebuild}}

== Solving build problems ==

Если возникают проблемы при пересборке текущего ядра, то может помочь очистка исходного кода ядра. Удостоверьтесь, что сохранили файл {{Path|.config}}, так как данная операция удалит его. Удостоверьтесь, что не используется окончание файла {{Path|.bak}} или {{Path|~}} для бэкапа, так как {{c|make distclean}} очищает и такие файлы тоже.

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

== Удаление старых ядер ==

Смотри статью [[Kernel/Removal/ru|удаление ядра]]. 

== Ссылки ==

* [http://kernelnewbies.org/LinuxChanges kernel changelog with some explanations of new features]

[[Category:Kernel]]
