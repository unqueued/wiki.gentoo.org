{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://btrfs.wiki.kernel.org|header=true}}
|{{InfoBox gitweb|http://git.kernel.org/cgit/linux/kernel/git/kdave/btrfs-progs.git|raw=true|text=Userspace}}
|{{InfoBox gitweb|http://git.kernel.org/cgit/linux/kernel/git/mason/linux-btrfs.git/tree/fs/btrfs?id{{=}}HEAD|raw=true|text=Kernel}}
|{{InfoBox wikipedia}}
|{{InfoBox ohloh}}
}}

'''Btrfs''' is a copy-on-write (CoW) [[filesystem]] for Linux aimed at implementing advanced features while focusing on fault tolerance, repair and easy administration. Jointly developed at Oracle, Red Hat, Fujitsu, Intel, SUSE, STRATO and many others, Btrfs is licensed under the [https://en.wikipedia.org/wiki/GNU_General_Public_License GPL] and open for contribution from anyone.

== Features ==

Ext4 is safe and stable and can handle large filesystems with extents, but why switch?  While it is true that Btrfs is still considered experimental and is growing in stability, the time is nearing when Btrfs will become the default filesystem for Linux systems. Some Linux distributions have already begun to switch to it with their current releases. Btrfs has a number of advanced features in common with zfs, which is what made the zfs filesystem popular with BSD distributions and NAS devices.

* '''Copy on Write (CoW) and snapshotting''' - Make incremental backups painless even from a "hot" filesystem or virtual machine (VM).
* '''File level checksums''' - Metadata for each file includes a checksum that can be used to detect and repair errors.
* '''Compression''' - Files may be compressed and decompressed on the fly, which speeds up read performance.
* '''Auto defragmentation''' - The filesystems may be tuned by a background thread ''while'' they are being used.
* '''Subvolumes''' - Filesystems can share a single pool of space instead of being put into their own partitions.
* '''RAID''' - Btrfs does its own RAID implementations so LVM or {{c|mdadm}} are not required in order to have RAID. Currently RAID 0 and 1 are support; RAID 5 and 6 are upcoming.
* '''Partitions are optional''' - While it can be given partitions to work with, Btrfs has the potential to use raw devices ({{Path|/dev/<device>}}).
* '''Data deduplication''' - There is limited data deduplication support, however deduplication will eventually become a standard feature in Btrfs. This enables Btrfs to save space by comparing files via binary diffs.

Down the road, new clustered filesystems will readily take advantage of Btrfs with its copy on write and other advanced features for their object stores. [http://ceph.com/ ceph] is one example of a clustered filesystem that looks very promising, and it knows how to take advantage of Btrfs.

== Installation ==

=== Kernel ===

Activate the following kernel option to enable Btrfs support:
{{KernelBox|title=Activate btrfs in the kernel|1=
File systems  --->
    <*> Btrfs filesystem
}}

=== Emerge ===

The package {{Package|sys-fs/btrfs-progs}} contains the utilities necessary to work with the Btrfs filesystem.

{{Emerge|sys-fs/btrfs-progs}}

== Usage ==

Typing long Btrfs commands can quickly become a hassle. A tip is that each command (besides the initial {{c|btrfs}} command) can be reduced down to being unique. It is helpful to use this method when working from the command-line to reduce the amount of characters typed which speeds up the work process.

For example, to defragment a filesystem located at {{Path|/}}, instead of typing the long command:

{{RootCmd|btrfs filesystem defragment -v / }}

Shorten each of the longer commands after the {{c|btrfs}} command by reducing them to down to being unique. In this context, unique means that no ''other'' {{c|btrfs}} commands will match the command at the command's shortest length. The shortened version of the above command is:

{{RootCmd|btrfs fi de -v / }}

No other {{c|btrfs}} commands start with <code>fi</code>; <code>filesystem</code> is the only one. The same goes the <code>de</code> sub-command under the <code>filesystem</code> command.

Using shortened commands can speed up Btrfs management. 

=== Creation ===

{{Warning|The {{c|mkfs.btrfs}} command irreversibly destroys any content of the partition it is told to format. Please be sure the right partition is selected ''before'' running any {{c|mkfs}} command!}}

To create an Btrfs filesystem on the {{Path|/dev/sdXN}} partition:

{{RootCmd|mkfs.btrfs /dev/sdXN}}

In the example above, replace <code>N</code> with the partition number and <code>X</code> with the disk letter that is to be formatted. For example, if the third partition of the first drive in the system was to be formatted to Btrfs, run:

{{RootCmd|mkfs.btrfs /dev/sda3}}

{{Path|/boot}} requires 280 megs or more.

{{Important|The last number column in {{Path|/etc/fstab}} should be <code>0</code> for all Btrfs partitions. {{c|fsck.btrfs}} and {{c|btrfsck}} should not be ran during each system boot.}}

=== Mount ===

After creation, filesystems can be mounted in several ways:

* {{c|[[mount]]}} - Manual mount.
* {{Path|[[fstab]]}} - Defining mount points in {{Path|/etc/fstab}} enables automatic mounts on system boot.
* [[Removable media]] - Automatic mounts on demand (useful for USB drives).
* [[AutoFS]] - Automatic mount on filesystem access.

== Advanced features ==

=== Compression ===

Btrfs supports transparent compression using the zlib and lzo algorithms.

Is possible to compress specific files using the file system attributes.

{{Cmd|chattr +c}}

The <code>compress</code> mount option set the default behavior to compress all the newly created files. In order to re-compress the whole file system, run the following command:

{{RootCmd|btrfs filesystem defragment -r -v -clzo / }}

Depending on the CPU and Disk capabilities, using lzo compression could improve the overall throughput.

=== Converting ext* based file systems ===

It is possible to concert ext2, ext3, and ext4 filesystems to Btrfs using the {{c|btrfs-convert}} utility.

==== Non-root ====

This section only supports the conversion of a non-root filesystem. First, unmount the mountpoint:

{{RootCmd|umount /dev/mounted_device}}

Check the integrity of non-root filesystem using the appropriate {{c|fsck}} tool. In this case the filesystem is ext4:

{{RootCmd|fsck.ext4 -f /dev/unmounted_device}}

Use {{c|btrfs-convert}} to convert the ext* formatted device into a btrfs formatted device:

{{RootCmd|btrfs-convert /dev/unmounted_device}}

Be sure to edit {{Path|/etc/fstab}} after the device has been formatting in order to change the filesystem column from ext4 to btrfs:

{{FileBox|filename=/etc/fstab|title=Changing ext4 to btrfs|1=<pre>
/dev/device               /mnt/mountpoint          btrfs    defaults  0 0
</pre>}}

=== Defragmentation ===

Another feature of Btrfs is online defragmentation. To defragment a root Btrfs filesystem run:

{{RootCmd|btrfs filesystem defragment -r -v /}}

=== RAID ===

Creating RAIDs in btrfs is much easier than creating RAIDs using {{c|[[mdadm]]}}.

The simplest method is to use the entire device to create a RAID:

{{RootCmd|mkfs.btrfs -m raid1 /dev/device1 /dev/device2 -d raid1 /dev/device1 /dev/device2}}

{{Warning|As of 2016-08-08, it is not safe to use the RAID 5 or 6 modes <ref>https://btrfs.wiki.kernel.org/index.php/RAID56</ref>}}

=== Subvolumes ===

As mentioned above in the features list, Btrfs has the ability to create subvolumes. Subvolumes can be used to better organize and manage data. They become especially powerful when combine with snapshots. Important distinctions must be made between Btrfs subvolumes and subvolumes created by Logical Volume Management ([[LVM]]). Btrfs subvolumes are not block level devices, they are POSIX file namespaces.<ref>https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Subvolumes</ref> They can be created at any location in the filesystem and will act like any other directory on the system with one special caveat: subvolumes can be mounted and unmounted. Subvolumes are nestable (subvolumes can be created inside other subvolumes), and easily created or removed.

{{Note|A subvolume cannot be created ''across'' different Btrfs filesystems. If {{Path|/dev/sda}} and {{Path|/dev/sdb}} both contain separate (non-RAID) Btrfs filesystems, there is no way a subvolume can expand across the two filesystems. The snapshot can be ''moved'' from one filesystem to another, but it cannot span across the two. It must be on {{Path|/dev/sda}} ''or'' {{Path|/dev/sdb}}.}}

==== Create ====

To create a subvolume, issue the following command inside a Btrfs filesystem's name space:

{{RootCmd|btrfs subvolume create dest-name}}

Replace <code>dest-name</code> with the desired destination and subvolume name. For example, if a Btrfs filesystem exists at {{Path|/mnt/btrfs}}, a subvolume could be created inside of it using the following command:

{{RootCmd|btrfs subvolume create /mnt/btrfs/subvolume1}}

==== List ====

To see the subvolume(s) that have been created use the <code>subvolume list</code> command followed by a Btrfs filesystem location. If the current directory is somewhere inside a Btrfs filesystem, the following command will display the subvolume(s) that exist on the filesystem:

{{RootCmd|btrfs subvolume list .}}

If a Btrfs filesystem with subvolumes exists at the mount point created in the example command above, the output from the list command will look similar to the following:

{{RootCmd|btrfs subvolume list /mnt/btrfs|output=<pre>
ID 309 gen 102913 top level 5 path mnt/btrfs/subvolume1
</pre>}}

==== Remove ====

Since subvolumes can be properly removed by using the <code>subvolume delete</code> command followed by the path to the subvolume. All available subvolume paths in a Btrfs filesystem can be seen using the list command above

{{RootCmd|btrfs subvolume delete /path/to/subvolume}}

As stated above, be sure to replace <code>/path/to/subvolume</code> with the actual path to the subvolume that will be removed. To delete the subvolume used in the examples above, the following command would be issued:

{{RootCmd|btrfs subvolume delete /mnt/btrfs/subvolume1|output=<pre>
Delete subvolume (no-commit): '/mnt/btrfs/subvolume1'
</pre>}}

==== Snapshots ====

Snapshots are subvolumes that share data and metadata with ''other'' subvolumes. This is made possible by  Btrfs' Copy on Write (CoW) ability.<ref>https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Subvolumes</ref> Snapshots can be used for several purposes, one of which is to create backups of file system structures at specific points in time.

If the root filesystem is Btrfs, it is possible to create a snapshot using the <code>subvolume snapshot</code> commands:

{{RootCmd
|mkdir -p /mnt/backup/rootfs
|btrfs subvolume snapshot / /mnt/backup/rootfs/
}}

The following small shell script can be added to a timed cron job to create a time stamped snapshot backup of a Btrfs formatted root filesystem. The timestamps can be adjusted to whatever is preferred by the user.

{{FileBox|filename=btrfs_snapshot.sh|title=Btrfs rootfs snapshot cron job example|lang=bash|1=
#!/bin/bash
NOW=$(date +"%Y-%m-%d_%H:%M:%S")

if [ ! -e /mnt/backup ]; then
mkdir -p /mnt/backup
fi

cd /
/sbin/btrfs subvolume snapshot / "/mnt/backup/backup_${NOW}"
}}

== Troubleshooting ==

=== Mounting btrfs fails, returns: ''mount: unknown filesystem type 'btrfs' '' ===

Original solution is posted [http://unix.stackexchange.com/questions/121611/gentoo-does-not-seem-to-be-booting-new-kernel here] by Tim.

Solution is to build the kernel manually instead of using [[genkernel]]:

{{GenericCmd|prompt=#|color=green
|cd /usr/src/linux
|make menuconfig
|make && make modules_install
|cp arch/x86_64/boot/bzImage /boot
|mv /boot/bzImage /boot/whatever_kernel_filename
|genkernel --install initramfs
}}

== See also ==

* [[Btrfs/System Root Guide]] - Use the Btrfs filesystem as a collection of subvolumes including one as a system root.
* [[Btrfs/Native System Root Guide|Btrfs native system root guide]] - An alternative guide on using a subvolume in a Btrfs filesystem as the system's root.
* [[ext4]] - The default filesystem for most Linux distributions.
* [[Snapper]] - A command-line program capable of managing btrfs filesystem snapshots.
* [[ZFS]] - A filesystem that shares much in common with btrfs, but has licensing issues.

== References ==

{{reflist}}

[[Category:Filesystems]]
