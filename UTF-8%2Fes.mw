<languages />

UTF-8 es una codificación de caracteres de longitud variable, lo que implica que utiliza de 1 a 4 bytes para codificar cada símbolo. Por tanto, el primer byte UTF-8 se utiliza para codificar ASCII. UTF-8 significa que los caracteres ASCII y Latin se pueden intercambiar con un pequeño incremento en el tamaño de los datos, ya que únicamente se utiliza el primer byte. Los usuarios de alfabetos del este como el japonés, a los cuales se les ha asignado un rango más alto de los bytes no están muy contentos, ya que esto implica un 50% mayor de redundancia en sus datos. 

== Codificaciones de Caracteres ==

=== ¿Qué es la Codificación de Caracteres? ===

Los ordenadores no comprenden el texto por ellos mismos. En lugar de esto, cada carácter se representa mediante un número. Tradicionalmente, cada conjunto de números se utilizó para representar alfabetos y caracteres (conocidos como sistema de codificación, codificación o conjunto de caracteres) estuvo limitado en el tamaño debido a limitaciones del hardware de los ordenadores. 

=== La Historia de los Caracteres de Codificación ===

El más común (o al menos el más aceptado) conjunto de caracteres es '''ASCII''' (Código Estándar Americano para el Intercambio de Información). Es ampliamente aceptado de que ASCII es el estándar de software más exitoso de todos los tiempos. El ASCII actual se estandarizó en 1986 (ANSI X3.4, RFC 20, ISO/IEC 646:1991, ECMA-6) por el Instituto Nacional Americano de Estándares. 

ASCII es una codificación estrictamente de siete bits, lo que significa que utiliza patrones representables con siete dígitos binarios, lo que proporciona una gama de 0 a 127 en decimal. Estos incluyen 32 caracteres de control no visibles, la mayoría entre 0 y 31, con el carácter de control final, DEL o de eliminación en el 127. Los caracteres del 32 al 126 son visibles: un espacio, marcas de puntuación, letras latinas y números. 

El octavo bit en ASCII se utilizó originalmente como un bit de paridad para el control de errores. Si no se desea esta utilización, se deja como 0. Esto significa que, con ASCII, cada carácter se representa mediante un único byte. 

A pesar de que ASCII era suficiente para comunicarse en inglés moderno, las cosas no erant tan fáciles en otras lenguas europeas que incluyen caracteres acentuados. Los estándares ISO 8859 se desarrollaron para satisfacer estas necesidades. Estos estándares eran compatibles con ASCII, pero en lugar de dejar el octavo bit en blanco, lo utilizaron para permitir otros 127 caracteres en cada codificación. Las limitaciones de los estándares ISO 8859 aparecieron pronto y actualmente hay 15 variantes del estándar ISO 8859 (del 8859-1 al 8859-15). Fuera del rango de bytes compatible con ASCII de estos conjuntos de caracteres hay a menudo conflicto entre las letras representadas por cada byte. Para complicar aún más la interoperabilidad entre las codificaciones de caracteres, en algunas versiones de Windows de Microsoft se utiliza la codificación Windows-1252 en lugar de los idiomas de Europa del oeste. Esto es un superconjunto de la codificación ISO 8859-1. Sin embargo, es diferente en algunos aspectos. Estos conjuntos no conservan completamente la compatibilidad con ASCII. 

El desarrollo necesario de codificaciones de un solo byte completamente diferentes para alfabetos no latinos, como EUC (Codificación de Unix Extendido) que se utiliza para el japonés y el coreano (y en menor medida para el chino) creó aún más confusión, mientras otros sistemas operativos todavía utilizaban conjuntos de caracteres para los mismos idiomas, por ejemplo, Shift-JIS e ISO-2022-JP. Los usuarios que deseaban ver glifos cirílicos tenían que elegir entre KOI8-R para el ruso y el búlgaro o KOI8-U para el ucraniano, y así para las demás codificaciones cirílicas como el poco exitoso ISO 8859-5 o el común Windows-1251. Todos estos conjuntos de caracteres rompían en mayor o menor medida la compatibilidad con ASCII (a pesar de que las codificaciones KOI8 colocaban los caracteres cirílicos en el orden de los latinos, por lo que en el caso de que se eliminara el octavo bit, es texto se podía mostrar en un terminal ASCII a través de una transliteración inversa de mayúsculas). 

Esto ha llevado a muchas confusiones y también a una discapacidad casi total para la comunicación multilingüe, especialmente entre alfabetos diferentes. Entramos en Unicode. 

=== ¿Qué es Unicode? ===

Unicode prescinde de utilizar un solo byte, el límite tradicional de los conjuntos de caracteres. Utiliza 17 "planos" de 65,536 puntos de código para describir un máximo de 1,114,112 caracteres. Como el primer plano, tambien conocido como "Plano Multilingüe Básico" o BMP, contiene casi todo lo que normalmente se utiliza, mucha gente piensa erróneamente que Unicode es un conjunto de caracteres de 16 bits. 

Unicode se ha mapeado de muchas formas diferentes, pero las dos más comunes son '''UTF''' (Formato de Transformación Unicode) y '''UCS''' (Conjunto Universal de Caracteres). El número a continuación de las siglas UTF indica el número de bits en una unidad, por el contrario, el número a continuación de las siglas UCS indica el número de bytes. UTF-8 ha sido la forma más extendida de intercambiar texto Unicode debido a su naturaleza limpia de ocho bits y es el motivo de este documento. 

=== ¿Qué Puede Hacer Unicode por Nosotros? ===

UTF-8 le permite trabajar en un entorno que cumple los estándares y que es aceptado internacionalmente, con una redundacia de datos relativamente baja. UTF-8 es la forma preferida para transmitir caracteres que no son ASCII a través de Internet, mediante correo electrónico, IRC o casi cualquier otro medio. A pesar de esto, mucha gente piensa que la comunicación en línea de UTF-8 es abusiva. Es mejor conocer la actitud hacia UTF-8 en un canal en particular, en una lista de correo o grupo Usenet antes de utilizar UTF-8 ''no ASCII''. 

== Configurar UTF-8 en Gentoo Linux ==

=== Buscar o Crear Localizaciones UTF-8 ===

Ahora que comprende los principios que hay detrás de Unicode, puede comenzar a utilizar UTF-8 en su sistema. 

El requisito preliminar para UTF-8 es tener una versión de glibc instalada que tenga soporte para el idioma nacional. La forma recomendada de hacer esto es el fichero {{Path|/etc/locale.gen}}. Sin embargo, explicar el uso de este fichero está más allá del alcance de este documento. Esto se explica en la [https://wiki.gentoo.org/wiki/Localization/HOWTO Guía de Localización de Gentoo]. 

A continuación, necesitaremos decidir si una localización UTF-8 está disponible para nuestro idioma, o si necesitamos crear una. 

{{Cmd|locale -a {{!}} grep 'es_ES'|output=<pre>
es_ES
es_ES.UTF-8
</pre>
}}

De la salida de esta línea de órdenes,  necesitamos tomar el resultado con un sufijo similar a <code>.UTF-8</code>. Si no hay ningún resultado con un sufijo similar a <code>.UTF-8</code>,  necesitaremos crear una localización compatible UTF-8. 


{{Note|Ejecute el siguiente listado de código si no tiene una localización UTF-8 disponible en su idioma.}}

Reemplace "en_GB" por el ajuste de localización deseado:
{{RootCmd|localedef -i en_GB -f UTF-8 en_GB.UTF-8}}

Otra forma de incluir una localización UTF-8 es añadirla al fichero {{Path|/etc/locale.gen}} y generar las localizaciones necesarias con la orden <code>locale-gen</code>. 

{{Code|Línea en /etc/locale.gen|<pre>
es_ES.UTF-8 UTF-8
</pre>
}}

=== Configurar la Localización ===

Hay una variable de entorno que necesitará definir para utilizar nuestras nuevas localizaciones UTF-8: <code>LC_CTYPE</code> (u opcionalmente <code>LANG</code>, si también quiere cambiar el idioma del sistema). Hay distintas formas de ajustar este valor, algunas personas prefieren tener únicamente un entorno UTF-8 para un usuario específico, en cuyo caso se definen en su {{Path|/.profile}} (si  utilizan <code>/bin/sh</code>), {{Path|/.bash_profile}} o {{Path|/.bashrc}} (si utilizan <code>/bin/bash</code>). Se pueden encontrar más detalles y buenas prácticas en nuestra [https://wiki.gentoo.org/wiki/Localization/HOWTO Guía de Localización]. 

Otros prefieren definir la localización de forma global. Una circunstancia específica en la que el autor recomienda hacer esto es cuando se utiliza {{Path|/etc/init.d/xdm}} ya que este guión inicio arranca el gestor de pantalla y el escritorio antes de que ninguno de los ficheros del intérprete de comandos anteriormente citados se ejecuten y, por tanto, antes de que las variables estén definidas en el entorno. 

La localización de forma global se debe definir utilizando {{Path|/etc/env.d/02locale}}. Este fichero debería parecerse al siguiente: 

{{Code|Demostración /etc/env.d/02locale|<pre>
## (Como de costumbre, cambie "es_ES.UTF-8" a su localización)
LANG="es_ES.UTF-8"
</pre>
}}

{{Note|Puede también sustituir <code>LC_CTYPE</code> por <code>LANG</code>. Para más información sobre las categorías afectadas por el uso de <code>LC_CTYPE</code>, por favor, lea la [http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html#Locale-Categories página de localizaciones de GNU].}}

A continuación se debe actualizar el entorno para reflejar el cambio. 

{{RootCmd|env-update|output=<pre>
>>> Regenerating /etc/ld.so.cache...
* Caching service dependencies ...
</pre>}}
{{RootCmd|source /etc/profile}}

Ahora ejecute <code>locale</code> sin argumentos para ver si tenemos las variables correctas en nuestro entorno: 

{{RootCmd|locale|output=<pre>
LANG=es_ES.UTF-8
LC_CTYPE="es_ES.UTF-8"
LC_NUMERIC="es_ES.UTF-8"
LC_TIME="es_ES.UTF-8"
LC_COLLATE="es_ES.UTF-8"
LC_MONETARY="es_ES.UTF-8"
LC_MESSAGES="es_ES.UTF-8"
LC_PAPER="es_ES.UTF-8"
LC_NAME="es_ES.UTF-8"
LC_ADDRESS="es_ES.UTF-8"
LC_TELEPHONE="es_ES.UTF-8"
LC_MEASUREMENT="es_ES.UTF-8"
LC_IDENTIFICATION="es_ES.UTF-8"
LC_ALL=
</pre>
}}

Eso es todo. Ahora está utilizando localizaciones UTF-8. El siguiente obstáculo es la configuración de las aplicaciones que utiliza diariamente. 

== Soporte a Aplicaciones ==

Cuándo Unicode comenzó a ganar popularidad en el mundo del software, los conjuntos de caracteres multibyte no eran apropiados para lenguajes de programación como C en el que se escriben muchos de los programas que la gente usa a diario. Incluso hoy, algunos programas no pueden manejar UTF-8 correctamente. Afortunadamente, ¡La mayoría puede hacerlo! 

=== Nombres de Ficheros, NTFS y FAT ===

Hay varias opciones NLS en el menú de configuración del núcleo Linux, pero, ¡Es importante no confundirse!. En la mayoría de las situaciones, lo único que necesita hacer es construir el soporte NLS UTF-8 en su núcleo y cambiar la opción NLS por defecto a utf8. 

{{Kernel|Configuración del núcleo para UTF-8 NLS|<pre>
File Systems -->
 Native Language Support -->
  (utf8) Default NLS Option
  <*> NLS UTF8
  ## (También debe <*> otros conjuntos de caracteres que se utilicen en sus sistemas de ficheros FAT o Joilet CD-ROMs.)
</pre>
}}

Si va a montar particiones NTFS, puede necesitar especificar una opción <code>nls=</code> para la orden mount. Si va a montar particiones FAT, puede que necesite especificar una opción <code>codepage=</code> para la orden mount. Opcionalmente puede también definir una página de códigos (codepage) para FAT por defecto en la configuración del núcleo. Observe que la opción <code>codepage</code> de la orden mount pasará por alto los ajustes realizados en el núcleo. 

{{Kernel|Ajustes FAT en la configuración del núcleo|<pre>
File Systems -->
 DOS/FAT/NT Filesystems -->
  (437) Default codepage for fat
</pre>
}}

Debe evitar definir <code>Default iocharset for fat</code> (Conjunto de caracteres de E/S por defecto para FAT) a UTF-8, ya que no está recomendado. En lugar de esto, puede que quiera pasar la opción utf8=true cuando monte sus particiones FAT. Para más información, consulte <code>man mount</code> y la documentación del núcleo en {{Path|/usr/src/linux/Documentation/filesystems/vfat.txt}} . 

Para cambiar la codificación de los nombres de los ficheros, se puede utilizar <code>app-text/convmv</code>. 

{{Emerge|app-text/convmv}}

A continuación se muestra el formato de la orden <code>convmv</code>:

{{RootCmd|convmv -f &lt;codificación-actual&gt; -t utf-8 &lt;nombre-de-fichero&gt;}}

Sustituya iso-8859-1 por el conjunto de caracteres desde el que está convirtiendo:

{{RootCmd|convmv -f iso-8859-1 -t utf-8 nombre-de-fichero}}

Para cambiar el ''contenido'' de los ficheros, se puede emplear la utilidad <code>iconv</code> que está incluida en <code>glibc</code>. Sustituya iso-8859-1 por el conjunto de caracteres desde el que está convirtiendo y compruebe que la salida es correcta.

{{RootCmd|iconv -f iso-8859-1 -t utf-8 nombre-de-fichero}}

Para convertir un fichero, deberá crear otro fichero:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 nombre-de-fichero &gt; nuevo-fichero}}

{{Package|app-text/recode}} se puede utilizar también para este propósito.

=== La Consola del Sistema ===

{{Important|Necesita sys-apps/baselayout-1.11.9 o superior para tener Unicode en la consola.}}

To enable UTF-8 on the console, you should edit {{Path|/etc/rc.conf}} and set <code>unicode="yes"</code> , and also read the comments in that file -- it is important to have a font that has a good range of characters if you plan on making the most of Unicode. For this to work, make sure you have properly created a Unicode locale. 

La variable <code>keymap</code> definida en {{Path|/etc/conf.d/keymaps}} debería especificar un mapa de teclado Unicode. 

{{Code|Fragmento ejemplo de /etc/conf.d/keymaps|<pre>
## (Cambie "es" por su disposición local) keymap="es"
</pre>
}}

=== Ncurses y Slang ===

{{Note|Ignore cualquier mención de Slang en esta sección si no lo tiene instalado o no lo utiliza.}}

It is wise to add <code>unicode</code> to your global USE flags in {{Path|/etc/portage/make.conf}} , and then to remerge <code>sys-libs/ncurses</code> and <code>sys-libs/slang</code> if appropriate. Portage will do this automatically when you update your system: 

{{RootCmd|emerge --update --deep --newuse world}}

We also need to rebuild packages that link to these, now the USE changes have been applied. The tool we use ( <code>revdep-rebuild</code> ) is part of the <code>gentoolkit</code> package. 

{{RootCmd|revdep-rebuild --soname libncurses.so.5 |revdep-rebuild --soname libslang.so.1}}

=== KDE, GNOME y Xfce ===

All of the major desktop environments have full Unicode support, and will require no further setup than what has already been covered in this guide. This is because the underlying graphical toolkits (Qt or GTK+2) are UTF-8 aware. Subsequently, all applications running on top of these toolkits should be UTF-8-aware out of the box. 

The exceptions to this rule come in Xlib and GTK+1. GTK+1 requires a iso-10646-1 FontSpec in the ~/.gtkrc, for example <code>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</code> . Also, applications using Xlib or Xaw will need to be given a similar FontSpec, otherwise they will not work. 

{{Note|Si tiene una versión del centro de control de gnome1, utilícelo en su lugar. Eliga cualquier fuente iso10646-1.}}

{{Code|Ejemplo de fichero ~/.gtkrc (para GTK+1) que define una fuente compatible con Unicode|<pre>
style "user-font"
{
 fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
</pre>
}}

Si una aplicación tiene soporte para las interfaces gráficas Qt y GTK+2, la interfaz gráfica GTK+2 normalmente ofrecerá mejores resultados con Unicode. 

=== X11 y Fuentes ===

TrueType fonts have support for Unicode, and most of the fonts that ship with Xorg have impressive character support, although, obviously, not every single glyph available in Unicode has been created for that font. To build fonts (including the Bitstream Vera set) with support for East Asian letters with X, make sure you have the <code>cjk</code> USE flag set. Many other applications utilise this flag, so it may be worthwhile to add it as a permanent USE flag. 

También, varios paquetes de fuentes en Portage son compatibles con Unicode. 

{{Emerge|terminus-font intlfonts freefonts corefonts}}

=== Gestores de Ventanas y Emuladores de Terminal ===

Window managers not built on GTK or Qt generally have very good Unicode support, as they often use the Xft library for handling fonts. If your window manager does not use Xft for fonts, you can still use the FontSpec mentioned in the previous section as a Unicode font. 

Terminal emulators that use Xft and support Unicode are harder to come by. Aside from Konsole and gnome-terminal, the best options in Portage are <code>x11-terms/rxvt-unicode</code> , <code>x11-terms/xfce4-terminal</code> , <code>gnustep-apps/terminal</code> , <code>x11-terms/mlterm</code> , or plain <code>x11-terms/xterm</code> when built with the <code>unicode</code> USE flag and invoked as <code>uxterm</code> . <code>app-misc/screen</code> supports UTF-8 too, when invoked as <code>screen -U</code> or the following is put into the {{Path|~/.screenrc}} : 

{{Code|~/.screenrc para UTF-8|<pre>
defutf8 on
</pre>
}}

=== Vim, Emacs, Xemacs y Nano ===

Vim provides full UTF-8 support, and also has builtin detection of UTF-8 files. For further information in Vim, use <code>:help mbyte.txt</code> . 

[[GNU Emacs]] Desde la versión 23 y [[XEmacs]] desde la versión 21.5 tiene soporte completo para UTF-8. GNU Emacs 24 también tiene soporte para la edición de texto bidireccional. 

Nano proporciona soporte UTF-8 completo desde la versión 1.3.6.

=== Intérpretes de Comandos ===

Currently, <code>bash</code> provides full Unicode support through the GNU readline library. Z Shell ( <code>zsh</code> ) offers Unicode support with the <code>unicode</code> USE flag. 

Los interpretes de comandos C, <code>tcsh</code> y <code>ksh</code> no ofrecen ningún tipo de soporte UTF-8. 

=== Irssi ===

Irssi has complete UTF-8 support, although it does require a user to set an option. 

{{Cmd|set term_charset UTF-8|prompt=[irssi] }}

For channels where non-ASCII characters are often exchanged in non-UTF-8 charsets, the <code>/recode</code> command may be used to convert the characters. Type <code>/help recode</code> for more information. 

=== Mutt ===

The Mutt mail user agent has very good Unicode support. To use UTF-8 with Mutt, you don't need to put anything in your configuration files. Mutt will work under unicode enviroment without modification if all your configuration files (signature included) are UTF-8 encoded. 

{{Note|You may still see '?' in mail you read with Mutt. This is a result of people using a mail client which does not indicate the used charset. You can't do much about this than to ask them to configure their client correctly.}}

Further information is available from the [http://wiki.mutt.org/index.cgi?MuttFaq/Charset Mutt Wiki] . 

=== Man ===

Las páginas del manual (man) son parte integral de una máquina Linux. Para asegurarse de que cualquier unicode en las páginas del manual se muestra correctamente, edite {{Path|/etc/man.conf}} y cambien la línea que se muestra abajo. 

{{Code|Cambios en man.conf para soporte Unicode|<pre>
## (Esta es la línea antigua)
NROFF /usr/bin/nroff -Tascii -c -mandoc
## (Cambie la línea de arriba por esta)
NROFF /usr/bin/nroff -mandoc -c
</pre>
}}

=== elinks y links ===

These are commonly used text-based browsers, and we shall see how we can enable UTF-8 support on them. On <code>elinks</code> and <code>links</code> , there are two ways to go about this, one using the Setup option from within the browser or editing the config file. To set the option through the browser, open a site with <code>elinks</code> or <code>links</code> and then <code>Alt+S</code> to enter the Setup Menu then select Terminal options, or press <code>T</code> . Scroll down and select the last option <code>UTF-8 I/O</code> by pressing Enter. Then Save and exit the menu. On <code>links</code> you may have to do a repeat <code>Alt+S</code> and then press <code>S</code> to save. The config file option, is shown below. 

{{Code|Habilitar UTF-8 para elinks o links|<pre>
## (Para elinks, edite /etc/elinks/elinks.conf o /.elinks/elinks.conf y añadia la siguiente línea)
set terminal.linux.utf_8_*io = 1
## (Para links, edite /.links/links.cfg y añada la siguiente línea)
terminal "*xterm" 0 1 0 *us-*ascii *utf-8
</pre>
}}

&nbsp; <!-- Translated in previous message -->

=== Samba ===

Samba es una suite de software que implementa el protocolo SMB (Bloque de Mensajes del Servidor) para sistemas UNIX como Macs, Linux y FreeBSD. A este protocolo también se le llama Sistema de Ficheros Común de Internet (CIFS). Samba también incluye el sistema NetBIOS, utilizado para compartir ficheros en redes con sistemas Windows. 

añada lo siguiente bajo la sección [global]: {{RootCmd|nano -w /etc/samba/smb.conf|output=<pre>
dos charset = 1255
unix charset = UTF-8
display charset = UTF-8
</pre>
}}

=== Probándolo todo ===

There are numerous UTF-8 test websites around. <code>net-www/w3m</code> , <code>net-www/links</code> , <code>net-www/elinks</code> , <code>net-www/lynx</code> and all Mozilla based browsers (including Firefox) support UTF-8. Konqueror and Opera have full UTF-8 support too. 

When using one of the text-only web browsers, make absolutely sure you are using a Unicode-aware terminal. 

If you see certain characters displayed as boxes with letters or numbers inside, this means that your font does not have a character for the symbol or glyph that the UTF-8 wants. Instead, it displays a box with the hex code of the UTF-8 symbol. 

*  [http://www.w3.org/2001/06/utf-8-test/utf-8-demo.html Una página de prueba UTF-8 de W3C]
*  [http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm Una página de prueba UTF-8 ofrecida por la Universidad de Fráncfort] 

=== Métodos de Entrada ===

Se pueden utilizar las ''teclas muertas'' para introducir caracteres en el sistema X que no está presentes en su teclado. Esto funciona presionando a la vez la tecla Alt de la derecha (o en algunos países, AltGr) y opcionalmente una tecla de la sección no alfabética del teclado a la izquierda de la tecla Intro, soltando ambas y pulsando una letra. La tecla muerta debería modificarla. La entrada se puede modificar más tarde utilizando la tecla Mayúsculas al mismo que tiempo que se pulsa la tecla AltGr y el modificador. 

Para habilitar las teclas muertas en el sistema X, se necesita una disposición que lo soporte. La mayoría de las disposiciones europeas ya incorporan teclas muertas con la variante por defecto. Sin embargo, esto no es así para las disposiciones norteamericanas. Aunque hay cierto grado de inconsistencia entre disposiciones, la forma más fácil parece utilizar una disposición de la forma "en_US" en lugar de "us", por ejemplo. El diseño se define en {{Path|/etc/X11/xorg.conf}} de esta forma: 

{{Code|Fragmento de /etc/X11/xorg.conf|<pre>
Section "InputDevice"
 Identifier "Keyboard0"
 Driver "kbd"
 Option "XkbLayout" "en_US" ## # En lugar de solo "us"
 ## (Otras opciones Xkb van aquí)
EndSection
</pre>
}}

{{Note|Se necesita aplicar el cambio anterior solo si está utilizando una disposición norteamericana, u otra en la que las teclas muertas no parecen funcionar. Los usuarios Europeos deberían tener teclas muertas.}}

Este cambio tendrá efecto cuando reinicie su servidor X. Para aplicar el cambio en este momento, utilice la herramienta <code>setxkbmap</code>, por ejemplo <code>setxkbmap es_ES</code>. 

It is probably easiest to describe dead keys with examples. Although the results are locale dependent, the concepts should remain the same regardless of locale. The examples contain UTF-8, so to view them you need to either tell your browser to view the page as UTF-8, or have a UTF-8 locale already configured. 

When I press AltGr and [ at once, release them, and then press a, 'ä' is produced. When I press AltGr and [ at once, and then press e, 'ë' is produced. When I press AltGr and ; at once, 'á' is produced, and when I press AltGr and ; at once, release them, and then press e, 'é' is produced. 

By pressing AltGr, Shift and [ at once, releasing them, and then pressing a, a Scandinavian 'å' is produced. Similarly, when I press AltGr, Shift and [ at once, release ''only'' the [, and then press it again, '°' is produced. Although it looks like one, this (U+02DA) is not the same as a degree symbol (U+00B0).

AltGr can be used with alphabetical keys alone. For example, AltGr and m, a Greek lower-case letter mu is produced. AltGr and s produce a scharfes s or esszet, etc. As many European users would expect (because it is marked on their keyboard), AltGr and 4 (or E depending on the keyboard layout) produces a Euro sign, '€'. 

=== Recursos ===

*  [http://es.wikipedia.org/wiki/unicode La entrada en Wikipedia para Unicode]
*  [http://es.wikipedia.org/wiki/utf-8 La entrada en Wikipedia para *UTF-8]
*  [http://www.unicode.org Unicode.org]
*  [http://www.utf-8.com Utf-8.com]
*  [http://www.ietf.org/rfc/rfc3629.txt RFC 3629]
*  [http://www.ietf.org/rfc/rfc2277.txt *RFC 2277]
*  [http://www.tbray.org/ongoing/when/200x/2003/04/26/UTF Caracteres vs. Bytes] 

=== Cuestiones o Problemas Reportados ===

=== Ficheros de Configuración del Sistema (en /etc) ===

Most system configuration files, such as {{Path|/etc/fstab}} , do not support UTF-8. It is recommended to stick with the ASCII character set for these files. 

== Agradecimientos ==

Nos gustarían dar las gracias a los siguientes autores y editores por sus contribuciones a esta guía:

* Thomas Martin
* Alexander Simonov
* Shyam Mani
* nightmorph
