{{DISPLAYTITLE:Java User Guide}}
This guide will introduce you to Java and explain how to use Java with Gentoo Linux. 

__TOC__

== Overview ==

Java is a programming language developed by engineers of Sun Microsystems. The language is object-oriented and designed to run on multiple platforms without the need of recompiling code for each platform. Although Java can be compiled as a native program, much of Java's popularity can be attributed to its portability, along with other features such as garbage collection. To make platform independence possible the Java compiler compiles the Java code to an intermediate representation called "Java bytecode" that runs on a JRE (Java Runtime Environment) and not directly on the operating system.

In order to run Java bytecode, one needs to have a JRE (Java Runtime Environment) installed. A JRE provides core libraries, a platform dependent Java Virtual Machine, plugins for browsers, among other things. A JDK (Java Development Kit) adds programming tools, such as a bytecode compiler and a debugger.

== Before you begin ==

=== Existing installs ===

For existing installs, regardless of if you have installed anything Java before, make sure you have followed the Java Upgrade Guide. 

=== New installs ===

New installs should require no further preparation. 

==  Installing a virtual machine ==

=== The choices ===

Gentoo provides numerous Runtime Environments (JREs) and Development Kits (JDKs). Among the current choices, we have: 


The default for Java 1.4 is the Blackdown JRE/JDK pair, as it is freely ("free as in beer") available without any registration fuss.

JREs and JDKs from Sun, IBM, and BEA are generally faster, but getting them is a bit more work, as you are required to read and accept their license before downloading (IBM additionally requires you to register).

=== Installing a JRE/JDKs ===

To install your profile's default JDK, you can run emerge virtual/jdk. Or to install your profile's default JRE, you can emerge virtual/jre.

In recent events, Sun has relicensed their JDK and JRE under a more Linux distro friendly license. As a result, Sun releases Java 1.5 and onwards are freely downloadable, without any further hassle.

{{Note|You can also use eselect to change the system and user vm. See eselect java-vm help.}}

=== Setting a default virtual machine ===

Running the {{c|java-config}} command with the <code>--list-available-vms</code> option will output a list of all JREs and JDKs installed on the system. Here is an example of the output: 

{Cmd|java-config --list-available-vms|output=<pre>
The following VMs are available for generation-2:
1)      IcedTea JDK 7.2.6.8 [icedtea-7]
*)      IcedTea JDK 3.2.0 [icedtea-8]
</pre>}}

The ''*'' indicates this is the current active JVM (system-vm or user-vm when set). The name in the brackets ([]) is the handle or ID for that particular VM. The handle or the number to {{c|java-config --set-system-vm}} can be used to set the VM. The following text provides an example of how to set the system VM.

Setting the System VM by handle (preferred):

{{RootCmd|java-config --set-system-vm icedtea-8|output=<pre>
Now using icedtea-8 as your generation-2 system JVM
</pre>}}

lternate method: select VM by number handle number:

{{RootCmd|java-config --set-system-vm 2|output=<pre>
Now using icedtea-8 as your generation-2 system JVM
</pre>}}

As a regular user, use java-config <code>--set-user-vm</code>. 

{{Note|You no longer have to source the profile for updates to the user/system VM take place.}}

=== Preferred VM ===

While merging Java packages, the VM can and will be switched as necessary.

Because of the wide variety of available VMs, we do not have the resources to test and verify every package works on all of them. So to ensure that every packages merges smoothly, we have defined a list of default/supported VMs per arch. You can find them in /usr/share/java-config-2/config/jdk-defaults.conf. When you are merging a Java package, and it detects one of the VM in that file is installed, it will automatically use that VM, instead of the system-vm.

The merge time VM switching is also needed when, for example, your system-vm is set a 1.4 VM and the package you are merging requires a 1.5 VM. While merging it will use the preferred 1.5 VM, leaving your system-vm choice intact.

Of course, Gentoo is all about choice, so you can override these defaults in /etc/java-config-2/build/jdk.conf and have complete control over which VM will get used. See the following examples.

I always want it to use a sun-jdk, ie sun-jdk-1.4 for 1.4, sun-jdk-1.5 for 1.5, etc.:

{{FileBox|filename=/etc/java-config-2/build/jdk.conf|title=Example /etc/java-config-2/build/jdk.conf|1=
*=sun-jdk
}}

Always use sun-jdk-1.5 wherever possible, except for when a 1.4 or 1.3 VM is explicitly required:

{{FileBox|filename=/etc/java-config-2/build/jdk.conf|title=Example /etc/java-config-2/build/jdk.conf|1=
*=sun-jdk-1.5
}}

For 1.3 I prefer sun-jdk 1.4 but when it is not available, use ibm-jdk-bin, for 1.4, use blackdown-jdk, and for 1.5, use sun-jdk:

{{FileBox|filename=/etc/java-config-2/build/jdk.conf|title=Example /etc/java-config-2/build/jdk.conf|1=
1.3=sun-jdk-1.4 ibm-jdk-bin
1.4=blackdown-jdk
1.5=sun-jdk
}}

{{Warning| You do not have to edit this file. If you change these options to use a unsupported VM, things could possibly break. Bugs reported with a unsupported VM won't be prioritized as much as bugs present within supported VMs.}}

== Compilers ==

The standard Java compiler used for building is {{c|javac}}, which comes with each JDK. In addition to configuring the VM used at build time, it is also possible configure which compiler is used. Essentially, you define a list your preference for which compiler to use in {{Path|/etc/java-config-2/build/compilers.conf}}.

If the ebuild supports it, it will check the <var>COMPILERS</var> variable front to back and use the first compiler that is installed:

{{FileBox|filename=/etc/java-config-2/build/compilers.conf|title=Example /etc/java-config-2/build/jdk.conf|1=
COMPILERS="ecj-3.1 jikes javac"
}}

Some compilers don't support all possible <code>-target</code> and <code>-source</code> arguments. Therefore, each compiler in the list is checked to see if it can support the desired <code>-source</code>/<code>-target</code>. {{c|javac}} will work in all cases, so if no other suitable compiler is found, it will be used instead.

More details about each compiler are provided below: 

{| class="table table-striped table-condensed"
|-
! Name !! Handle !! Package !! Description
|-
| javac || {{c|javac}} || N/A || This is the default compiler that will be used, and comes with each JDK.
|-
| jikes || jikes || dev-java/jikes || Jikes was originally developed by IBM. Anecdotally, it is generally quicker than {{c|javac}}. Note however, that it is more pedantic, and will fail under a few circumstances where {{c|javac}} has no issue. It also does not support Java 1.5 syntax yet.
|-
| Eclipse Compiler for Java || ecj-3.1 || =dev-java/eclipse-ecj-3.1* || ECJ is the compiler used by the Eclipse software development kit. It is very full featured, and is pretty fast. It does support Java 1.5 syntax.
|}

== Setting a default CLASSPATH ==

{{Warning|The options explained in this section should be considered deprecated and will most likely be removed in the future. We strongly recommend against using these, because your Java projects or application should ideally manage their own classpaths. If you choose to specify a default CLASSPATH, some applications may behave unexpectedly, because classes they weren't expecting would be on the classpath.}}

java-config can also be used to set a system-wide default CLASSPATH, as well a user-specific default CLASSPATH.

First, you will want to list available Java libraries installed on your system that might want to be put in your CLASSPATH. Here is an example of output:

{{RootCmd|java-config --list-available-packages|output=<pre>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>}}

Again, the names in brackets ([]) are the IDs that you have to pass to java-config --set-system-classpath. Here is an example:

{{RootCmd|java-config --set-system-classpath log4j,xerces-2}}

{{Note|The current directory (.) will not be part of the system classpath, as that should be added in your system's login profile.}}

You will have to update your environment by logging out, then in again or sourcing /etc/profile.

For users, java-config --set-user-classpath will create ~/.gentoo/java-env-classpath, which you should then source from your shell's profile.

{{CodeBox|title=Sourcing user specific classpath|1=
if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
       source ${HOME}/.gentoo/java-env-classpath
fi
}}

If you really want a system wide or user default classpath you can add something like the following to your shell's profile. But we would advise against it.

Setting classpath:

{{RootCmd|<nowiki>export CLASSPATH="${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"</nowiki>}}

== Java Browser Plugins ==

=== Installing a plugin ===

You can install a Java plugin for your web browser by emerging a Java VM with the nsplugin USE flag set.

{{Note|nsplugin is not available for all architectures. Check for available plugins on your arch before trying to install a VM by running emerge -pv <java-vm>.}}

Java.com also provides a link to verify your installed plugin. Additionally, if you are using a Mozilla-based browser, you can verify your Java plugin by typing about:plugins into the address bar.

Also note that Chromium-based browsers no longer support NPAPI-based plugins since the code was removed in September 2015. The list of supporting browsers is shrinking but still includes Firefox as of version 46.

For more information, including JVM selection, Web Start, and multilib, see [https://gitweb.gentoo.org/repo/gentoo.git/plain/dev-java/icedtea-web/files/README.gentoo-r1 the README installed with icedtea-web].

=== Plugins on multilib systems ===

If you are running a mixed 64-bit and 32-bit multilib system (for example, on AMD64), you can only use 32-bit Java plugins.

To use a 32-bit plugin, you will need to emerge emul-linux-x86-java with the nsplugin USE flag enabled:

{{RootCmd
|echo "app-emulation/emul-linux-x86-java nsplugin" >> /etc/portage/package.use
|emerge emul-linux-x86-java
}}

Next, check which plugins are available: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.4.2
  [2]   emul-linux-x86-java-1.5
</pre>}}

Although you must select a 32-bit browser (such as mozilla-firefox-bin) to use with your 32-bit plugin, the 64-bit version of konqueror uses your Java VM directly, so it's possible to use the 64-bit version of blackdown with this browser; no further configuration is necessary.

Now select the right plugin for your 32-bit browser:

{{RootCmd|eselect java-nsplugin set 32bit emul-linux-x86-java-1.5}}

Verify the correct plugin was selected: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.4.2
  [2]   emul-linux-x86-java-1.5  current
</pre>}}

== USE flags for use with Java ==

=== Setting USE flags ===

For more information regarding [[USE flag]]s, refer to the USE flags chapter from the [[Handbook:X86/Working/USE|Gentoo Handbook]].

=== The flags ===

* The [https://packages.gentoo.org/useflags/java <code>java</code>] flag adds support for Java in a variety of programs;
* The [https://packages.gentoo.org/useflags/nsplugin <code>nsplugin</code>] flag adds support for Mozilla-like browsers (including Firefox). This is needed for viewing Java applets in a Mozilla-like browser;
* The [https://packages.gentoo.org/useflags/jce <code>jce</code>] flag adds support for the Java Cryptography Engine;

Following USE flags go in [[Gentoo_Java_USE_flags|JAVA_PKG_IUSE]].
* The [https://packages.gentoo.org/useflags/source <code>source</code>] flag installs a zip of the source code of a package. This is traditionally used for IDEs to 'attach' source to the libraries that are being use;
* For Java packages, the [https://packages.gentoo.org/useflags/doc <code>doc</code>] flag will build API documentation using javadoc.

== External resources ==

* java-config man page
* java-config --help

== See also ==

* [[Project:Java|Gentoo Java Project page]]
* The gentoo-java, gentoo-user, and gentoo-dev mailing list archives
* #gentoo and #gentoo-java on IRC
* If you have suggestions or questions regarding this document, please email the Gentoo Java team: java@gentoo.org
