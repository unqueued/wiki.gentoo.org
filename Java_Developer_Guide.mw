== Background ==

Before going into details of how Java is handled on Gentoo, please make sure you have read and are aware of the [https://wiki.gentoo.org/wiki/Gentoo_Java_Packing_Policy Gentoo Java Packaging Policies] and also the [https://wiki.gentoo.org/wiki/Java Gentoo Java User Guide]. This guide will not cover such, but will cover more specific details on Gentoo Java ebuilds.

== Java on Gentoo ==

This section will give you more insight into how Gentoo handles Java. You should be familiar with the Java User Guide before proceeding.

=== Virtual machines (VMs) ===

As discussed in the User Guide, there are several VMs available from portage.

Testing all packages to ensure they build and run with every VM is a huge undertaking, and there simply are not enough resources to guarantee every package will build and run with every VM.

We now maintain a list of "supported virtual machines" for each architecture. These are the VMs we will test the packages against before committing changes to portage. When you emerge a package, it will by default try to use the best "supported virtual machine."

Of course, Gentoo and Linux in general are about choice, so if you prefer a different VM over the "supported virtual machines", you can easily use that VM instead. However, you should also know that bugs reported with one of the non-"supported virtual machine" will get a low priority if it isn't present using a "supported virtual machine".

=== Configuring which VM to use ===

You can choose which VM to use on a per-user basis, and which VM to use for the system (ie when running things as root). Both of these are configured using java-config.

A user's current VM is represented by a symlink located at {{Path|~/.gentoo/java-config-2/current-user-vm}}. This symlink points to the <var>JAVA_HOME</var> of the chosen VM. Similarly, the system VM is represented by a symlink at {{Path|/etc/java-config-2/current-system-vm}}.

The current VM can also be changed on the fly. This can be accomplished setting the environment <var>GENTOO_VM</var> to contain the name of a VM that java-config knows about.

=== Java tools ===

The traditional Java tools, ie, {{c|java}}, {{c|javac}}, {{c|javadoc}}, etc, are all located in {{Path|/usr/bin}}. They are actually all symlinks to the {{c|run-java-tool}} script. This script will call the appropriate tool, depending on how the script is invoked, from the current VM. The contents of the <var>GENTOO_VM</var> variable is checked first, then the user VM, and lastly the system VM.

=== Build-time VM switching ===

As outlined in the User Guide, and mentioned briefly earlier, the VM will switch at build time to accommodate the needs of the package. The VM to use is first determined by <var>JAVA_PKG_FORCE_VM</var>, then {{Path|/etc/java-config-2/build/jdk.conf}}, and lastly the system VM.

=== Bytecode compatibility ===

The default behavior of {{c|javac}} is to compile bytecode that will compatible with the current VM version and higher (ie forward compatible). It is possible to specify which VM to compile for to provide the best compatibility.

At build time, the <var>DEPEND</var> and <var>RDEPEND</var> variables will determine what VM to compile for based on {{Package|virtual/jdk}} and {{Package|virtual/jre}}. Additionally, this can be controlled by the environment variables <var>JAVA_PKG_WANT_SOURCE</var> and <var>JAVA_PKG_WANT_TARGET</var>.

There is a wrapper for {{c|javac}}, {{c|ejavac}}, which will use the appropriate VM's {{c|javac}}, and then specify the appropriate <code>-target</code> and <code>-source</code>. For projects that use ant, the {{Path|build.xml}} can be translated to specify the appropriate <code>-target</code> and <code>-source</code>.

== Filesystem layout ==

In general, the directory policies are handled for you by the helper functions in the java-utils-2 eclass.

These functions adhere to the following path name conventions:

* {{Path|/usr/share/${PN}-${SLOT}/package.env}} contains information about the package.
* {{Path|.jar}} files created from source code are installed to {{Path|/usr/share/${PN}-${SLOT}/lib/}}
* {{Path|.jar}} pre-built files not compiled by the ebuild are installed to {{Path|/opt/${PN}-${SLOT}/lib}}
* Javadoc documentation is installed to {{Path|/usr/share/doc/${PF}/html/api/}}
* Source archives are installed to {{Path|/usr/share/${PN}-${SLOT}/source/}}
* User-executable scripts are installed to {{Path|/usr/bin}}
* System-wide environment files are in installed to {{Path|/usr/env.d/java}}
* User-specific environment files can be put into {{Path|${HOME}/.gentoo/env.d/}}

== Writing the ebuild ==

=== General guidelines ===

In addition to standard Gentoo ebuild guidelines, there are a number specific for Java packages:

* Avoid using bundled {{Path|.jar}} files at all costs for source-based packages. Instead, they should use system installed versions with the help of our eclass functions.
* If you only need the path to installed libraries, you can use java-pkg_getjar(s). Don't call java-config directly, because it will not be recorded as a dependency in the package env.
* Always provide an easily understandable reason after 'die', so that end-users will provide the maintainers with sensible feedback if the build should fail.
* Avoid cluttering up the environment by adding environment files to {{Path|/etc/env.d/}}. Instead, store your env file in {{Path|/etc/env.d/java/}}, and then have user scripts source its environment file when it launches. Otherwise, developers, who regularly override <var>CLASSPATH</var>, <var>CATALINA_HOME</var> and other environment variables, will have problems running regular apps. If you use the launcher it will also automatically source the appropriate env file.
* Make sure you always compile with correct a source/target. This is important to ensure future and backwards compatibility. If the packages use ant, this can be done for you automatically. See java-ant-2.eclass. If not you will have to patch it to pass <code>$(java-pkg_javac-args)</code> to {{c|javac}}.
* Do no install jars which contain versions in their filename, ie {{Path|castor-0.9.7.jar}}. Use java-pkg_newjar to rename and install versioned jars to not contain the version in their filename.
* For packages that use Ant to build, try to <var>DEPEND</var> on just {{Package|dev-java/ant-core}} when possible instead of {{Package|dev-java/ant}}. dev-java/ant-core is automatically added to <var>DEPEND</var> if you inherit java-ant-2. If the package makes use of 'optional' ant tasks, you'll need to DEPEND on dev-java/ant or add <code>WANT_ANT_TASKS="ant-task"</code> before inherit. The latter is of course preferred. see the Ant Guide for details.

=== USE flags ===

Gentoo Java ebuilds unlike most others start with a USE flag variable, a Java specific one <var>JAVA_PKG_IUSE</var>. The only thing that can come before this variable in an ebuild is the <var>EAPI</var> variable. You still set the other USE flag for various general USE flags, but there are Java specific USE flags that go in this variable and DO NOT go in the other normal USE flag.

{{:Gentoo_Java_USE_flags}}

==== Java USE flag usage ====

The <var>JAVA_PKG_IUSE</var> USE flag/variable MUST reside in the ebuild before the inherit line.

If a manual or other extensive documentation is available, it should be installed using the <code>doc</code> USE flag. If the build system can, you should build javadocs also using the <code>doc</code> USE flag. If it does not, you should consider patching it to do so, and provide the patch upstream. HTML documentation should be installed using <code>dohtml</code> and javadocs using <code>java-pkg_dojavadoc</code>.

If you want to go all the way, add the <code>source</code> USE flag that installs the complete source code as a {{Path|.zip}} file. Use <code>java-pkg_dosrc</code> for this purpose. This allows IDEs such as Eclipse and NetBeans to do complete source-level debugging. The <code>source</code> USE flag will add {{Package|app-arch/zip}} to DEPEND automatically, you do not need to add this dependency.

{{CodeBox|title=Example of setting common Java USE flags|lang=bash|1=
JAVA_PKG_IUSE="doc source"

inherit ...
}}

=== Dependencies ===

Gentoo Java ebuild dependencies for the most part are just like any other ebuild. There are two common dependencies that will always exist for any Java ebuild, no matter if Java is optional or not. Though if Java is optional, the dependencies would be conditional based on a USE flag, likely <code>java</code> USE flag. There are some packages which may require a JDK at runtime, otherwise most should have a JRE for runtime. When depending on a package, take care that you depend on a sufficiently recent version, and explicitly ensure at building time that the providing package gives you the correct interface, i.e. the correct <code>SLOT[USE]</code>.

For any package that builds from source, <var>DEPEND</var> should be set to <code>>=virtual/jdk-[minimum-version]</code>. If the package does not build from source and is a Java binary, you can use a JRE instead of a JDK in <var>DEPEND</var>.

All java packages will require a JRE for <var>RDEPEND</var>, and should be set to <code>>=virtual/jre-[minimum-version]</code>. Unless the package requires a JDK at runtime.

{{Note|The JDK/JRE atom MUST have a version! Do not use just <code>virtual/jdk</code> or <code>virtual/jre</code> in <var>DEPEND</var> or <var>RDEPEND</var> ever!}}

{{CodeBox|title=Required Java dependencies|lang=bash|1=

DEPEND=">=virtual/jdk-1.6"
RDEPEND=">=virtual/jre-1.6"

}}

{{CodeBox|title=Required Java dependencies for optional Java support|lang=bash|1=

DEPEND="java? ( >=virtual/jdk-1.6 )"
RDEPEND="java? ( >=virtual/jre-1.6 )"

}}

{{Note|Never set the JRE version to be less than the JDK version. This causes <code>-target</code> to be less than <code>-source</code>. Which can cause runtime issues, symbols not found, thus should be avoided always! The opposite is safe, though rarely ever required, JRE version greater than JDK version. But that could be used to target newer JRE byte code using older sources.}}

While it is not required, you will commonly see a dependency variable that is used in both <var>DEPEND</var> and <var>RDEPEND</var>. This variable name is not mandated and is usually <var>CDEPEND</var> or <var>COMMON_DEPEND</var> for anything that will go in both <var>DEPEND</var> and <var>RDEPEND</var>. This is not really Java specific but is very common in most if not all Java ebuilds.

{{CodeBox|title=Java dependencies with common ones|lang=bash|1=

CDEPEND="dev-java/xerces:2
        >=dev-java/log4j-1.2.8"
 
DEPEND=">=virtual/jdk-1.6
        ${CDEPEND}"

RDEPEND=">=virtual/jre-1.6
        ${CDEPEND}"

}}

{{Note|If the sources are in a zip file you will need to add {{Package|app-arch/unzip}} to DEPEND.}}

=== Preparing sources ===

Gentoo Java ebuilds do not and should never use the normal <code>src_unpack()</code> and <code>src_prepare()</code> but instead use its own <code>java_prepare()</code>, unless the package has optional java support. There are some cases where you might need to use <code>src_unpack()</code> with <code>java_prepare()</code>, but this is very rare. Within <code>java_prepare()</code>, along with doing the normal patching and other things you might need to do in order to prepare the sources. It is policy and practice to always remove any bundled class and/or jar files that came with the package sources. Which is one of the first things you do for any Java package, regardless of optional Java support or not.

There are a many different ways to go about removing bundled classes and jars such as; {{c|rm}}, {{c|find -delete/rm}}, and more. However these should not be used and rather for standardization use eclass functions for such; <code>java-pkg_clean</code> and <code><var>JAVA_RM_FILES</var></code>, and they can be used together.

{{CodeBox|title=Removing files with java-pkg_clean|lang=bash|1=
java_prepare() {
     # This does not discriminate,
     # it will remove ALL .class and .jar files
     java-pkg_clean
}
}}
{{Note|In the future this may be called automatically, and can be overridden by setting <code><var>JAVA_PKG_NO_CLEAN</var></code> to any value.}}

{{CodeBox|title=Removing files with JAVA_RM_FILES|lang=bash|1=
java_prepare() {
    # Good for selective removal in the rare event bundled
    # binaries/dependencies must be used
    JAVA_RM_FILES=(
            /path/to/file.class
            /path/to/file.jar
        )
}
}}

{{CodeBox|title=Removing files with find and JAVA_RM_FILES|lang=bash|1=
java_prepare() {
    for test_file in $(find . -type f -name '*Test*'.java); do
        JAVA_RM_FILES+=("${test_file}")
    done
}
}}

==== Replacing removed bundled jars ====

There are some build systems that require jars to be in certain locations. Per Gentoo Java Packaging Policy and the previous section those jars have now been removed. They need to be replaced using symlinks to system jars to let the build system proceed without further modification. This is mostly a legacy way of doing things, as most build systems will look for jars on the classpath.

{{CodeBox|title=Replacing removed bundled jar files with system|lang=bash|1=
java_prepare() {

    # change directory to where the jars you removed were located
    cd lib

    # needed at runtime not just build, will be on the package classpath in package.env
    java-pkg_jarfrom jdom

    # needed at runtime not just build with specific build name, will be on the package classpath in package.env
    java-pkg_jarfrom ant-core ant.jar ant-1.5.4.jar

    # not needed at runtime just build, will NOT be on the package classpath in package.env
    java-pkg_jarfrom --build-only ant-core

}
}}

=== Compiling ===

There are couple common ways to compile full Java packages on Gentoo using either eant or java-pkg-simple eclass functions and variables.

==== eant ====

eant is a Gentoo wrapper around ant. One should never invoke ant directly in an ebuild, but instead call eant. Though even calling eant is unnecessary in most packages with ant build systems, and should not be done. Instead eant function can be controlled with global variables in the ebuild. Using such one can omit the entire <code>src_compile()</code> section in most cases.
{{CodeBox|title=Using eant Global Variables|lang=bash|1=

inherit java-pkg-2 java-ant-2

...

# Re-write the classpath in any and all build.xmls in the sources
# This should be done in most cases
JAVA_ANT_REWRITE_CLASSPATH="true"

# This tells eant/ant which target to call, default is jar
# If the build target of the package is jar you can omit this variable
EANT_BUILD_TARGET="jars"

# If the package has a test target set this to the name of that target
EANT_TEST_TARGET="junit"

# This is used to build the classpath for the package
# Comma separated list of page names and slots
# Slot format can be either ${PN}:${SLOT} or ${PN}-${SLOT}, except slot -0 is not valid but slot :0 is valid
# This is the only required variable, the others are optional
EANT_GENTOO_CLASSPATH="commons-logging:0,jdom-2,jgoodies-common:0,xalan"

}}

==== java-pkg-simple ====

java-pkg-simple is an eclass that provides a way to build Java packages on Gentoo in a simplistic manner. This is package system independent and should be used for any package that does not come with an Ant build system. Most packages they can be built using java-pkg-simple global variables in the ebuild. Using such one can omit the entire <code>src_compile()</code> section in most cases.

{{CodeBox|title=Using java-pkg-simple Global Variables|lang=bash|1=

inherit java-pkg-2 java-pkg-simple

...

# One or more directories with sources in them relative to ${S}
# required all the time
JAVA_SRC_DIR="src/main/java"

# list of java packages to put on the classpath
# required all the time
JAVA_GENTOO_CLASSPATH="xalan:2,log4j:0"

# optional maybe necessary for some
# encoding of source files, used by javac and javadoc
JAVA_ENCODING="ISO-8859-1"

# optional additional arguments to be passed to javac
JAVAC_ARGS="-Xms:64m"

# optional additional arguments to be passed to javadoc
JAVADOC_ARGS="-J-Xmx180m"

}}

== Typical examples ==

Without further ado, here are a few examples:

{{FileBox|filename=foo-1.0.ebuild|title=Example of a Java ebuild|lang=bash|1=
EAPI=5
JAVA_PKG_IUSE="doc source"

inherit eutils java-pkg-2 java-ant-2

DESCRIPTION="Fictional example ebuild."
HOMEPAGE="http://www.gentoo.org/"
SRC_URI="mirror://gentoo/${P}-src.tar.gz"

LICENSE="Apache-2.0"
SLOT="0"
KEYWORDS="~x86 ~sparc ~ppc ~amd64 ppc64"
IUSE="examples"

CDEPEND="dev-java/xerces:2
        >=dev-java/log4j-1.2.8"

RDEPEND=">=virtual/jre-1.7
        ${CDEPEND}"

DEPEND=">=virtual/jdk-1.7
        ${CDEPEND}"

S=${WORKDIR}/${P}-src

java_prepare() {
        # Remove bundled jars
        java-pkg-clean

        # Replace removed bundled jars with system
        cd "${S}/lib"
        java-pkg_jar-from xerces-2
        # Replace with a version specific jar
        java-pkg_jar-from log4j log4j.jar log4j-1.2.8.jar
}

src_install() {
        java-pkg_newjar target/${P}-dev.jar ${PN}.jar

        use doc && java-pkg_dojavadoc dist/api
        use source && java-pkg_dosrc src/java/org
        use examples && java-pkg_doexamples src/java/examples
}
}}

{{FileBox|filename=bar-1.0.ebuild|title=Example of a an ebuild with optional Java support|lang=bash|1=
EAPI=5
inherit eutils java-pkg-opt-2

DESCRIPTION="Fictional example ebuild"
HOMEPAGE="http://www.gentoo.org/"
SRC_URI="mirror://gentoo/${P}.tar.gz"

LICENSE="LGPL-2.1"
SLOT="0"
KEYWORDS="~amd64 ~ia64 ~ppc ~ppc64 ~sparc ~x86"
IUSE="java doc nls"

DEPEND="java? ( >=virtual/jdk-1.7 )"
RDEPEND="java? ( >=virtual/jre-1.7 )"

src_prepare() {
        # Remove bundled jars
        java-pkg-clean

        epatch "${FILESDIR}/${P}.patch"
}

src_compile() {
        local myconf="$(use_enable java)"
        if use java; then
                myconf="${myconf} --with-javac-args=\"$(java-pkg_javac-args)\""
        fi

        econf $(use_enable nls) ${myconf} {{!}}{{!}} die

        emake {{!}}{{!}} die
}

src_install() {
        make install DESTDIR=${D} {{!}}{{!}} die

        if use java; then
                java-pkg_newjar build/java/${P}.jar ${PN}.jar

                if use doc; then
                        java-pkg_dohtml -r doc/java
                fi
        fi
}
}}
