{{InfoBox stack
|{{InfoBox homepage|http://www.dell.com/au/business/p/xps-15-9560-laptop/pd|header=true}}
|{{InfoBox wikipedia|HardwareArticleOnWikipedia}}
}}

Macbook Pro performance for half the cost.

==History==

This device was apparently released in late 2016. I bought it before Christmas 2017. At the time, the cost was about USD$1900 in Australia, versus USD$3500+ for an equivalently specified Macbook Pro with useless features like "touch bar". 

When my second overpriced Macbook Pro in a row developed annoying hardware problems that required spending stupid money to resolve, I determined that I should switch away from OSX and return to the Linux desktop fold, as well as to reward Dell as the XPS series is widely considered to be quite Linux friendly.

== Hardware ==

=== Standard ===

{| class="table table-condensed table-striped" style="width: auto;"
! scope="col" width="20%" | Device
! scope="col" width="20%" | Make/model
! scope="col" width="10%" | Status
! scope="col" width="10%" | Vendor ID / Product ID
! scope="col" width="10%" | Kernel driver(s)
! scope="col" width="10%" | Kernel version
! scope="col" width="20%" | Notes
|-
| CPU
| Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz
| {{Yes|Works}}
| N/A
| N/A
| 4.12.5
| 
|-
| Video card
| Intel Corporation Device 591b (rev 04)
| {{Yes|Works}}
| 
| fb_vesa
| 4.12.5
|
|-
| Wireless
| [[Qualcomm Atheros QCA6174]]
| {{Yes|Works}}
|
| linux-firmware
|
|}

=== Accessories ===

Some models have touch screens. Some models are 2-in-1 (break apart). I tested on a conventional (non break apart) model with touch screen, however the touch screen has not been tested.

== Installation ==

=== Goals ===
A philosophical question would be: "Why buy new hardware if we aren't going to use the latest and greatest in software features?" Therefore, we are going to push the boundaries of the possible by setting up a ZFS root partition, because from past experience this will save time later.

{{Note|ZFS on root setup is kind of obtuse owing to the need for an initial RAM filesystem {{c|initramfs}} which creates a bit of a hassle building and upgrading the kernel. The best documentation on this I could find was Funtoo's ''ZFS Install Guide'' so we will essentially attempt to follow that.}}

=== Booting Linux for the first time ===

{{Warning|All current data on the USB key will be lost!}}
* '''First, create a bootable USB with a ZFS enabled.''' The easiest way to do this is as follows.
** Install [[UNetbootin]] (from [http://unetbootin.github.io/ its homepage])
** Plug in any USB mass storage device (aka. "usb key") with a decent size (16GB+) that you don't mind wiping (all data current stored on the device will be lost!)
** Start UNetbootin
** Select the latest Ubuntu Live DVD image [[File:Unetbootin-ubuntu-livedvd-download.png|thumb|UNetbootin downloading the latest Ubuntu LiveDVD image]]
** Let UNetbootin download and install it on to the USB mass storage device
** Now you have a bootable Linux mass storage device with ZFS support 
* '''Enter BIOS'''. Turn on the Dell XPS 15 9560 laptop and press F2 repeatedly.
** Disable secure boot
** Enable legacy boot
** Switch the NVMe internal flash unit to AHCI mode
** Plug in your bootable Linux mass storage device with ZFS support
** Save changes and exit
* '''The system should now boot to the Ubuntu live DVD boot menu.'''
** Press the arrows to select the 'Try ubuntu' option
** Press tab in order to edit the options
** Before the final {{c|---}} add two more options, <kbd>options.nouveau.modeset=0 nomodeset</kbd>. This prevents crashing when starting the GUI.
** Press enter to boot.
** Open a terminal.
** Become root via {{Cmd|sudo bash}}

=== Installation procedure ===

==== Remove Windows 10 ====
First of all we want to wipe all the pre-installed Windows 10 junk and recovery partitions.

* The internal SSD drive will appear as {{c|/dev/nvme0n1}}, and it contains needless Windows 10 recovery partitions.
** Using a partition management tool such as {{c|fdisk}} or {{c|cfdisk}} delete all of the current partitions. For example, using {{c|cfdisk}} we would run {{RootCmd|cfdisk /dev/nvme0n1}} then delete all partitions, write the new partition table and exit. The disk should only show "free space" when we are done.

==== Connect to the internet ====

Now we want to connect to the internet.
* Click the down arrow in the top right, and choose 'Select Network' beneath 'Wi-Fi Not Connected'.
* Enter your local wireless network information.
* Verify that the wireless network connected by clicking the down arrow in the top right again. If connected, it should now show the network name.

==== Install ZFS ====
Now we want to tell the Ubuntu Live DVD to get ZFS support and the {{c|debootstrap}} utility.

{{RootCmd|apt-add-repository universe|output=<pre>'universe' distribution component enabled for all sources.</pre>}}

We now tell it to fetch updated package information from the internet.

{{RootCmd|apt update}}

This will take some time to download updates.

Finally, we install the ZFS support.

{{RootCmd|apt install --yes debootstrap zfs-initramfs|output=<pre>(...)
update-initramfs is disabled since running on read-only media</pre>}}

==== Verify ZFS is loaded ====

{{RootCmd|dmesg{{!}}grep -i zfs|output=<pre>[  883.908387] ZFS: Loaded module v0.6.5.11-1ubuntu3, ZFS pool version 5000, ZFS filesystem version 5</pre>}}

==== Create the ZFS pool ====

{{RootCmd|zpool create -f -o ashift{{=}}12 -o cachefile{{=}}/tmp/zpool.cache -O normalization{{=}}formD -O atime{{=}}off -m none -R /mnt/gentoo pool /dev/nvme0n1}}

{{RootCmd|zpool status|output=<pre>  pool: pool
 state: ONLINE
  scan: none requested
config:

        NAME        STATE    READ WRITE CKSUM
        pool
          nvme0n1   ONLINE      0     0     0

errors: No known data errors</pre>}}

==== Create ZFS root dataset ====

This is where the root filesystem will live.

{{RootCmd|zfs create -o mountpoint=none -o canmount{{=}}off pool/root|zfs create -o mountpoint{{=}}/ pool/root/gentoo}}

==== Create additional ZFS datasets ====

Optional.

{{RootCmd|zfs create -o mountpoint{{=}}/usr/portage -o compression{{=}}lz4 -o sync{{=}}disabled pool/gentoo-portage|zfs create -o mountpoint{{=}}/home pool/home}}

==== Verify ZFS datasets ====

{{RootCmd|zfs list -t all|output=<pre>NAME                 USED  AVAIL  REFER  MOUNTPOINT
pool                 792K   461G    96K  none
pool/gentoo-portage   96K   461G    96K  /mnt/gentoo/usr/portage
pool/home             96K   461G    96K  /mnt/gentoo/home
pool/root            192K   461G    96K  none
pool/root/gentoo      96K   461G    96K  /mnt/gentoo
</pre>}}

==== Make the root filesystem bootable ====

To do this, we set the ZFS pool's {{c|bootfs}} property as follows.

{{RootCmd|zpool set bootfs{{=}}pool/root/gentoo pool}}

We then verify the setting.

{{RootCmd|zpool get bootfs pool|output=<pre>NAME  PROPERTY  VALUE             SOURCE
pool  bootfs    pool/root/gentoo  local</pre>}}

==== Populate the root filesystem ====

First install links.

{{RootCmd|apt install links}}

Now follow the [[Handbook:AMD64/Installation/Stage|standard installation procedure in the Gentoo AMD64 Handbook]], until you reach the section titled '''Configuring the bootloader''', then return to this guide.

==== Install grub2 bootloader ====

In order to boot from a ZFS filesystem we need to install a version of the {{c|grub2}} boatloader with {{c|USE{{=}}libzfs}} enabled.

Let's just install the absolute latest version.

{{RootCmd|echo "{{=}}sys-boot/grub-9999 **" >>/etc/portage/package.accept_keywords|echo "{{=}}sys-boot/grub-9999 libzfs" >>/etc/portage/package.use/grub|emerge -av grub}}

Once grub is installed on the system, we double-check that {{c|grub}} can see our ZFS volume.

{{RootCmd|grub-probe /|output=<pre>zfs</pre>}}

Finally, we can tell it to install at the beginning of the NVMe disk.

{{RootCmd|grub-install /dev/nvme0n1|output=<pre>Installing for i386-pc platform.
Installation finished. No error reported.</pre>}}

=== Firmware ===

BIOS version on receipt was <code>1.3.4</code> with <code>ePSA Build 4304.17 UEFI ROM</code>.

=== Kernel ===

{{KernelBox|title=NVMe support|1=
CONFIG_NVME_CORE=y
CONFIG_NVME_=y
}}

{{KernelBox|title=Wireless support|1=
CONFIG_ATH10K=m=y
CONFIG_ATH10K_PCI=m
CONFIG_ATH10K_AHB=y
CONFIG_ATH10K_USB=m
}}

{{KernelBox|title=Graphics support|1=
CONFIG_FB=y
CONFIG_FB_BACKLIGHT=y
CONFIG_FB_NVIDIA=m
CONFIG_FB_NVIDIA_I2C=y
CONFIG_FB_NVIDIA_DEBUG=y
CONFIG_FB_NVIDIA_BACKLIGHT=y
CONFIG_DRM_NOUVEAU=m
CONFIG_NOUVEAU_DEBUG=5
CONFIG_NOUVEAU_DEBUG_DEFAULT=3
CONFIG_DRM_NOUVEAU_BACKLIGHT=y
CONFIG_FB_EFI=y
CONFIG_FB_VGA16=m
CONFIG_FB_UVESA=m
}}

=== Emerge ===

(Optional section. If the platform requires any user space packages or kernel patches, mention them here).

{{Emerge|category/package}}

== Configuration ==

(Explain any additional configuration or special customization for this hardware platform. Could be anything from BIOS settings to assigning proper media key functionality.)

=== Example 1 ===

(Example: Do this in order to get these keys working.)

== Troubleshooting ==

=== Crash on X11 startup ===
This can occur you have the `nouveau` driver enabled. You can work around it by adding the following kernel command line options: <kbd>options.nouveau.modeset=0 nomodeset</kbd>.

== See also ==

* [[Qualcomm Atheros QCA6174]]
* [[ZFS]]
* [[ZFS/root]]

== External resources ==

* https://www.funtoo.org/index.php?title=ZFS_Install_Guide


[[Category:Laptops]]
