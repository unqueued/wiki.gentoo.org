{{InfoBox stack
|{{InfoBox homepage|http://www.dell.com/au/business/p/xps-15-9560-laptop/pd|header=true}}
|{{InfoBox wikipedia|Dell_XPS#XPS_15_(9560)}}
}}

Macbook Pro performance for half the cost.

==History==

This device was apparently released in late 2016. I bought it before Christmas 2017. At the time, the cost was about USD$1900 in Australia, versus USD$3500+ for an equivalently specified Macbook Pro with useless features like "touch bar". 

When my second overpriced Macbook Pro in a row developed annoying hardware problems that required spending stupid money to resolve, I determined that I should switch away from OSX and return to the Linux desktop fold, as well as to reward Dell as the XPS series is widely considered to be quite Linux friendly.

== Hardware ==

=== Standard ===

{| class="table table-condensed table-striped" style="width: auto;"
! scope="col" width="20%" | Device
! scope="col" width="20%" | Make/model
! scope="col" width="10%" | Status
! scope="col" width="10%" | Kernel driver(s)
! scope="col" width="10%" | Kernel version
|-
| CPU
| Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz
| {{Yes|Works}}
| N/A
| 4.12.5
|-
| Memory
| 16GB DDR4-2400MHz
| {{Yes|Works}}
| N/A
|
|-
| Hard disk
| 512GB PCIe Solid State Drive
| {{Yes|Works}}
| nvme
|
|-
| Video card
| NVIDIA Corporation GP107M GeForce GTX 1050 Mobile (4GB GDDR5)
| {{Yes|Works}}
| nouveau, fb_vesa...
| 4.12.5
|-
| Video card
| Intel Corporation Device 591b (rev 04)
| {{Yes|Works}}
| i915
| 4.13
|-
| Wireless
| Killer 1535 802.11ac 2x2 WiFi ([[Qualcomm Atheros QCA6174]])
| {{Yes|Works}}
| ath10k_core ath10k_pci linux-firmware
|-
| Touchscreen
| ?
| {{Partial|Untested}}
|
|
|-
| Touchpad
| Synaptics TouchPad
| {{Yes|Works}}
| mouse_ps2_synaptics_smbus
| 4.13.0
|-
| Bluetooth
| Killer 1535 Bluetooth
| {{Partial|Untested}}
| ?
|
|-
| USB 3.0
|
| {{Yes|Works}}
| ?
|
|-
| Thunderbolt 3
| 2 lanes of PCI Express Gen 3. Supports: Power In / Charging, PowerShare, 40Gbps Bi-Directional, 3.1 USB Gen 2 (10Gbps), VGA, HDMI, Ethernet and USB-A via Dell Adapter (Sold Separately)
| {{Partial|Untested}}
| ?
|
|-
| SD Card Reader
| SD, SDHC, SDXC
| {{Partial|Untested}}
| ?
|
|-
| Webcam
| Widescreen HD (720p)
| {{Yes|Works}}
| uvc
| 4.14.8
|-
| Microphone
| Dual array digital microphones
| {{Partial|Untested}}
| ?
|
|}

=== Accessories ===

Some models have touch screens. Some models are 2-in-1 (break apart). I tested on a conventional (non break apart) model with touch screen, however the touch screen has not been tested. A dock exists however I have never seen it and wouldn't personally make use of it. Other reports have described docks in this series as functional, however.

== Installation ==

=== Goals ===
A philosophical question would be: "Why buy new hardware if we aren't going to use the latest and greatest in software features?" Therefore, we are going to push the boundaries of the possible by setting up a ZFS root partition, because from past experience this will save time later.

{{Note|ZFS on root setup is kind of obtuse owing to the need for an initial RAM filesystem {{c|initramfs}} which creates a bit of a hassle building and upgrading the kernel. The best documentation on this I could find was Funtoo's ''ZFS Install Guide'' so we will essentially attempt to follow that.}}

{{Warning|<br/>'''If you really want to maximize physical security you should invest the additional time in building a [[Dm-crypt|dm-crypt/LUKS-encrypted root partition]].'''<br/><br/> There are partial notes towards achieving this added along the way, but it is not yet a fully tested configuration.}}

=== Booting Linux for the first time ===

{{Warning|All current data on the USB key will be lost!}}
* '''First, create a bootable USB with a ZFS enabled.''' The easiest way to do this is as follows.
** Install [[UNetbootin]] (from [http://unetbootin.github.io/ its homepage])
** Plug in any USB mass storage device (aka. "usb key") with a decent size (16GB+) that you don't mind wiping (all data current stored on the device will be lost!)
** Start UNetbootin
** Select the latest Ubuntu Live DVD image [[File:Unetbootin-ubuntu-livedvd-download.png|thumb|UNetbootin downloading the latest Ubuntu LiveDVD image]] (I used Ubuntu 18.04)
** Let UNetbootin download and install it on to the USB mass storage device
** Now you have a bootable Linux mass storage device with ZFS support 
* '''Enter BIOS'''. Turn on the Dell XPS 15 9560 laptop and press F2 repeatedly.
** Disable secure boot
** Enable legacy boot
** Switch the NVMe internal flash unit to AHCI mode
** Plug in your bootable Linux mass storage device with ZFS support
** Save changes and exit
* '''The system should now boot to the Ubuntu live DVD boot menu.'''
** Press the arrows to select the 'Try ubuntu' option
** Press tab in order to edit the options
** Before the final {{c|---}} add one more option, <kbd>nomodeset</kbd>. This prevents crashing when starting the GUI.
** Press enter to boot.
** Open a terminal.
** Become root via {{Cmd|sudo bash}}

=== Installation procedure ===

==== Remove Windows 10 ====
First of all we want to wipe all the pre-installed Windows 10 junk and recovery partitions.

* The internal SSD drive will appear as {{c|/dev/nvme0n1}}, and it contains needless Windows 10 recovery partitions.
** Using a partition management tool such as {{c|fdisk}} or {{c|cfdisk}} delete all of the current partitions. For example, using {{c|cfdisk}} we would run {{RootCmd|cfdisk /dev/nvme0n1}} then delete all partitions, write the new partition table and exit. The disk should only show "free space" when we are done.
* ZFS will use the whole drive, so no partitions are required. Note that even though we use the whole drive (<code>/dev/nvme0n1</code> represents the whole drive and not a partition), ZFS has a smart design that means there is still space for a Master Boot Record (MBR), so we can install a boot loader on the disk without causing damage to the ZFS data.

==== Connect to the internet ====

Now we want to connect to the internet.
* Click the down arrow in the top right, and choose 'Select Network' beneath 'Wi-Fi Not Connected'.
* Enter your local wireless network information.
* Verify that the wireless network connected by clicking the down arrow in the top right again. If connected, it should now show the network name.

==== Install ZFS ====
Now we want to tell the Ubuntu Live DVD to get ZFS support.

{{RootCmd|apt-add-repository universe|output=<pre>'universe' distribution component enabled for all sources.</pre>}}

We now tell it to fetch updated package information from the internet.

{{RootCmd|apt update}}

This will take some time to download updates.

Finally, we install the ZFS support.

{{RootCmd|apt install --yes zfs-initramfs|output=<pre>(...)
update-initramfs is disabled since running on read-only media</pre>}}

==== Verify ZFS is loaded ====

{{RootCmd|dmesg{{!}}grep -i zfs|output=<pre>[  883.908387] ZFS: Loaded module v0.6.5.11-1ubuntu3, ZFS pool version 5000, ZFS filesystem version 5</pre>}}

==== Create the ZFS pool ====

{{RootCmd|zpool create -f -o ashift{{=}}12 -o cachefile{{=}}/tmp/zpool.cache -O normalization{{=}}formD -O atime{{=}}off -m none -R /mnt/gentoo pool /dev/nvme0n1}}

{{RootCmd|zpool status|output=<pre>  pool: pool
 state: ONLINE
  scan: none requested
config:

        NAME        STATE    READ WRITE CKSUM
        pool
          nvme0n1   ONLINE      0     0     0

errors: No known data errors</pre>}}

==== Create ZFS root dataset ====

This is where the root filesystem will live.

{{RootCmd|zfs create -o mountpoint=none -o canmount{{=}}off pool/root|zfs create -o mountpoint{{=}}/ pool/root/gentoo}}

==== Create additional ZFS datasets ====

Optional.

{{RootCmd|zfs create -o mountpoint{{=}}/usr/portage -o compression{{=}}lz4 -o sync{{=}}disabled pool/gentoo-portage|zfs create -o mountpoint{{=}}/home pool/home}}

==== Verify ZFS datasets ====

{{RootCmd|zfs list -t all|output=<pre>NAME                 USED  AVAIL  REFER  MOUNTPOINT
pool                 792K   461G    96K  none
pool/gentoo-portage   96K   461G    96K  /mnt/gentoo/usr/portage
pool/home             96K   461G    96K  /mnt/gentoo/home
pool/root            192K   461G    96K  none
pool/root/gentoo      96K   461G    96K  /mnt/gentoo
</pre>}}

==== Make the root filesystem bootable ====

To do this, we set the ZFS pool's {{c|bootfs}} property as follows.

{{RootCmd|zpool set bootfs{{=}}pool/root/gentoo pool}}

We then verify the setting.

{{RootCmd|zpool get bootfs pool|output=<pre>NAME  PROPERTY  VALUE             SOURCE
pool  bootfs    pool/root/gentoo  local</pre>}}

==== Populate the root filesystem, create kernel + initrd (initial ramdisk) ====

First install links.

{{RootCmd|apt install links}}

Now follow the [[Handbook:AMD64/Installation/Stage|standard installation procedure in the Gentoo AMD64 Handbook]], until you reach the section titled '''Configuring the bootloader''', then return to this guide.

{{Note|If you are attempting to build with encrypted root support then you will want to run<br/><kbd>echo "sys-kernel/genkernel cryptsetup" >>/etc/portage/package.use/genkernel && emerge -av genkernel</kbd><br/>before continuing.}}

Note that when setting up the kernel:
* Not all kernel versions are supported by ZFS on Linux
* Because ZFS on Linux is therefore going to limit which kernel version you can install, the best way to select a kernel version is to install the very latest ZFS on Linux (and {{c|spl}} which is a Solaris porting layer) and work backwards from there, ie.
{{RootCmd|echo "=sys-fs/zfs-9999 **" >>/etc/portage/package.accept_keywords|echo "=sys-fs/zfs-kmod-9999 **" >>/etc/portage/package.accept_keywords|echo "sys-kernel/spl-9999 **" >>/etc/portage/package.accept_keywords}}
* Some version of the kernel sources should now be present in {{c|/usr/src/linux}} and you can use that to configure your system.
* After you have built the kernel, run {{c|make install}} to place it in {{c|/boot}}. This will ensure naming conventions are followed which will later allow {{c|grub}} to detect the kernel.
* Once configuration is complete, feel free to use {{c|genkernel}} to generate an initial ramdisk ({{c|initrd}}) as follows:
{{RootCmd|emerge genkernel|genkernel initramfs --zfs}}
{{Note|If you are attempting to build with encrypted root support then you will want to execute <kbd>genkernel initramfs --zfs --luks</kbd> instead!}}
* The ramdisk will be installed to {{c|/boot/}} in such a way that {{c|grub}} can detect it.

==== Install grub2 bootloader ====

In order to boot from a ZFS filesystem we need to install a version of the {{c|grub2}} boatloader with {{c|USE{{=}}libzfs}} enabled.

Let's just install the absolute latest version.

{{RootCmd|echo "{{=}}sys-boot/grub-9999 **" >>/etc/portage/package.accept_keywords|echo "{{=}}sys-boot/grub-9999 libzfs" >>/etc/portage/package.use/grub|emerge -av grub}}

Once the grub program is installed on the system, we double-check that {{c|grub}} can see our ZFS volume.

{{RootCmd|grub-probe /|output=<pre>zfs</pre>}}

Now we want to configure it to support ZFS.

{{FileBox|title=Configure grub|filename=/etc/default/grub|1=GRUB_CMDLINE_LINUX="dozfs real_root{{=}}ZFS{{=}}pool/root/gentoo"}} 

{{Note|If you are attempting to build with encrypted root support then you will want to set additional kernel arguments. First specify the encrypted device with <code>crypt_root{{=}}ZFS{{=}}pool/root/gentoo</code> then specify the unencrypted device created by LUKS via <code>real_root{{=}}/path/to/unencrypted/device/after/LUKS/runs</code>.}}

Now we generate a configuration file.

{{RootCmd|grub-mkconfig -o /boot/grub/grub.cfg|output=<pre>Generating grub configuration file ...
Found linux image: /boot/vmlinuz-4.14.8-gentoo-r1
Found initrd image: /boot/initramfs-genkernel-x86_64-4.14.8-gentoo-r1
done</pre>}}

Double-check that the generated configuration file includes an instruction to load the ZFS module.

{{RootCmd|grep 'insmod zfs' /boot/grub/grub.cfg|output=<pre>insmod zfs</pre>}}

Now double-check the ZFS module is in place.

{{RootCmd|ls /boot/grub/*/zfs.mod|output=<pre>/boot/grub/i386-pc/zfs.mod</pre>}}


Finally, we can tell it to install at the beginning of the NVMe disk.

{{RootCmd|grub-install /dev/nvme0n1|output=<pre>Installing for i386-pc platform.
Installation finished. No error reported.</pre>}}

==== Preparing to reboot ====

First install networking stuff you may have forgotten.

{{RootCmd|emerge wpa_supplicant dhcpcd}}

Don't forget to set a password!

{{RootCmd|passwd}}

Exit the {{c|chroot}} environment.

{{RootCmd|exit}}

Unmount the various filesystems.

{{RootCmd|umount -l /mnt/gentoo/{dev,sys,proc}|umount /mnt/gentoo/usr/portage|umount /mnt/gentoo/home|umount /mnt/gentoo}}

Double check the ZFS {{c|mountpoint}} property is correctly set for the root partition.

{{RootCmd|zfs set mountpoint{{=}}/ pool/root/gentoo}}

Now reboot, being careful to remove the live USB once the machine resets to enable booting from the internal NVMe flash.

{{RootCmd|reboot}}

=== Firmware ===

BIOS version on receipt was <code>1.3.4</code> with <code>ePSA Build 4304.17 UEFI ROM</code>.

We need the {{c|linux-firmware}} package to operate the wireless chipset and to provide firmware to upload to the Intel graphics controller to enable things like proper power management.

{{RootCmd|emerge linux-firmware}}

=== make.conf ===

We want to enable a few things in <code>/etc/portage/make.conf</code> ...

{{FileBox|filename=/etc/portage/make.conf|title=Setting VIDEO_CARDS and INPUT_DEVICES|1=<nowiki>
VIDEO_CARDS="nvidia"
INPUT_DEVICES="evdev wacom keyboard mouse libinput synaptics"
</nowiki>}}

=== Kernel ===

{{KernelBox|title=Input support|1=
CONFIG_INPUT_EVDEV=y
}}

{{KernelBox|title=NVMe support|1=
CONFIG_NVME_CORE=y
CONFIG_NVME_=y
}}

{{KernelBox|title=Wireless support|1=
CONFIG_ATH10K=m=y
CONFIG_ATH10K_PCI=m
CONFIG_ATH10K_AHB=y
CONFIG_ATH10K_USB=m
}}

{{KernelBox|title=Real Time Clock support|1=
CONFIG_RTC_CLASS=y
CONFIG_RTC_HCTOSYS=y
CONFIG_RTC_SYSTOHC=y
CONFIG_RTC_NVMEM=y
CONFIG_RTC_INTF_SYSFS=y
CONFIG_RTC_INTF_PROC=y
CONFIG_RTC_INTF_DEV=y
CONFIG_RTC_DRV_CMOS=y
}}

{{KernelBox|title=ACPI button support|1=
CONFIG_DELL_SMBIOS=y
CONFIG_DELL_WMI=y
CONFIG_DELL_WMI_AIO=y
CONFIG_DELL_WMI_LED=y
CONFIG_DELL_SMO8800=y
CONFIG_DELL_RBTN=y
}}

{{Note|Probably not all of these are needed, but I am too lazy to isolate the correct option. To test this is working, <kbd>emerge acpid</kbd> then run <kbd>acpid && acpi_listen</kbd> on the command line. Pressing the various function keys such as F11/F12 for brightness up and down should show events like <code>BRTUP</code> and <code>BRTDN</code>. If you don't have the correct kernel flags, thse will simply shown zeroes and no named/registered ACPI events.}}

{{Important|For x86 and AMD64 processors, the in-kernel [[framebuffer]] driver conflicts with the binary driver provided by NVIDIA. When compiling the kernel for these CPUs, completely remove support for the in-kernel driver as shown:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
            < >   Userspace VESA VGA graphics support
            < >   VESA VGA graphics support
            <*>   Simple framebuffer support
            < >   EFI-based Framebuffer Support
}}
Now make sure the <code>nouveau</code> driver is disabled:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        < > Nouveau (nVidia) cards
}}

Ensure MTRR and kernel module support are enabled.
{{KernelBox|
[*] Enable loadable module support --->

Processor type and features --->
   [*] MTRR (Memory Type Range Register) support
}}
}}

{{KernelBox|title=Graphics support|1=
CONFIG_FB=y
CONFIG_FB_BACKLIGHT=y
CONFIG_FB_NVIDIA=n
CONFIG_FB_RIVA=n
CONFIG_DRM_NOUVEAU=n
CONFIG_FB_EFI=n
CONFIG_FB_VGA16=n
CONFIG_FB_UVESA=n
CONFIG_FB_SIMPLE=y
}}

{{Note|Unsure whether in-kernel AGP or builtin nvAGP is better on this device. Apparently this varies by device. The switch is this option.
{{KernelBox|
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}
}}

== Configuration ==

=== Touchpad ===

Synaptics touch pad.

{{RootCmd|emerge xf86-input-synaptics}}

== Troubleshooting ==

=== Slow 2D graphics ===

According to [[NVidia/nvidia-drivers#Getting_2D_acceleration_to_work_on_machines_with_4GB_memory_or_more|this page]] slow 2D performance attributed to a BIOS setting can be identified via:

{{RootCmd|cat /proc/mtrr|output=<pre>reg00: base=0x00000000 ( 2048MB), size= 2048MB, count=1, uncachable
...</pre>}}

If any line contains the word {{c|uncachable}} apparently you need to reboot, enter BIOS, and change an MTRR setting from 'continuous' to 'discrete'. However, on my machine while this is certainly the case, I cannot find such an option in the BIOS.

=== Interrupted setup ===
If your setup is interrupted for whatever reason, you can re-mount the ZFS root dataset as follows.

{{RootCmd|zfs set mountpoint{{=}}/mnt/gentoo pool/root/gentoo|zfs mount pool/root/gentoo}}

You then want to ensure the other mounts have not been made in the host.

{{RootCmd|zfs unmount pool/home|zfs unmount pool/gentoo-portage}}

Then re-enter the environment.

{{RootCmd|mount --rbind /proc /mnt/gentoo/proc|mount --rbind /sys /mnt/gentoo/sys|mount --rbind /dev /mnt/gentoo/dev|mount --make-rslave /mnt/gentoo/proc|mount --make-rslave /mnt/gentoo/sys|mount --make-rslave /mnt/gentoo/dev|chroot /mnt/gentoo /bin/bash}}

{{RootCmd|env-update|source /etc/profile|export PS1{{=}}"(chroot) $PS1"}}

Then re-mount the other datasets.

{{RootCmd|zfs mount pool/home|zfs mount pool/gentoo-portage}}

When you are done, before you reboot, be sure to set the mountpoint back to root.

{{RootCmd|zfs set mountpoint{{=}}/ pool/root/gentoo}}

=== X11 fails to start with No Screens Found ===
This can be because you have enabled the <code>efifb</code> EFI Framebuffer Driver in the kernel. Disable it. Only <code>CONFIG_FB_SIMPLE=y</code> (Simple Framebuffer) is OK to leave enabled!

=== Crash on X11 startup ===
This can occur you have the <code>nouveau</code> driver enabled. You can work around it by adding <kbd>nomodeset</kbd> to the kernel command line.

== See also ==

* Closed source [[NVidia/nvidia-drivers|NVidia drivers]] and open source [[Nouveau]] drivers and [[Nouveau & nvidia-drivers switching|how to switch between them]].
* [[Qualcomm Atheros QCA6174]] and [[Handbook:AMD64/Networking/Wireless|Gentoo AMD64 Handbook Wireless Networking]]
* [[ZFS]]
* [[ZFS/root]]

== External resources ==

* https://wiki.archlinux.org/index.php/Dell_XPS_15_9560
* https://www.funtoo.org/index.php?title=ZFS_Install_Guide
* https://github.com/strelec/dell-xps-15-kernel-config
* https://browser.geekbench.com/geekbench3/8250863
* https://forums.gentoo.org/viewtopic-p-8114160.html

[[Category:Laptops]]
