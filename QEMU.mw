{{InfoBox stack
|{{InfoBox wikipedia|text=Wikipedia (QEMU)|header=true}}
|{{InfoBox homepage|http://wiki.qemu.org|text=QEMU homepage}}
}}

'''QEMU''' ('''Q'''uick '''EMU'''lator) is [[Article description::a generic, open source hardware emulator and virtualization suite.]] Often it is used in conjunction with acceleration in the form of a Type-I hypervisor such as '''KVM''' ('''K'''ernel-based '''V'''irtual '''M'''achine) or [[Xen]]. If no accelerator is used, QEMU will run entirely in user-space using its built in binary translator TCG (Tiny Code Generator). Using QEMU without an accelerator is relatively inefficient and slow.

{{Note|This article typically uses KVM as the accelerator of choice due to its GPL licensing and availability. Without KVM nearly all commands described here will still work (unless KVM specific).}}

== Installation ==

=== BIOS and UEFI firmware ===

In order to utilize KVM either Vt-x or AMD-V must be supported by the processor. Vt-x or AMD-V are Intel and AMD's respective technologies for permitting multiple operating systems to concurrently execute operations on the processors.   

To inspect hardware for virtualization support issue the following command:

{{Cmd|grep --color -E "vmx{{!}}svm" /proc/cpuinfo}}  

For a period manufacturers were shipping with virtualization turned off by default in the system [[BIOS]]. Note that changing this feature in the BIOS may actually require full removal of power from the system to take effect. If restarting the system does not work try shutting down, unplugging the system and pressing the power button in an unplugged state to discharge any residual energy from the power supply unit (PSU). Reapply power to the system to verify success.

If KVM support is available there should be a "kvm" device listed at {{Path|/dev/kvm}}. This will take effect after the system has booted to a KVM enabled kernel.

=== Kernel ===

Activate the following kernel options:

{{KernelBox|1=
[*] Virtualization  --->
    <*>   Kernel-based Virtual Machine (KVM) support
}}

{{KernelBox|title=Enable KVM support for Intel processors (<var>CONFIG_KVM_INTEL</var>)|1=
[*] Virtualization  --->
    <M>   KVM for Intel processors support
}}

{{KernelBox|title=Enable KVM support for AMD processors (<var>CONFIG_KVM_AMD</var>)|1=
[*] Virtualization  --->
    <M>   KVM for AMD processors support
}}

{{Warning|If ''both'' "KVM for Intel processors support" ''and'' "KVM for AMD processors support" are set as built into the kernel (<code>*</code>) an error message will appear from kprint from early boot. Since the system has only one type processor (Intel ''or'' AMD) enabling one or both options as ''modules'' (<code>M</code>) will make the error message disappear.}}

Needed for <code>vhost-net</code> USE flag (recommend):

{{KernelBox|1=
[*] Virtualization  --->
    <*>   Host kernel accelerator for virtio net
}}

{{KernelBox|title=Optional advanced networking support|1=
Device Drivers  --->
    [*] Network device support  --->
        [*]   Network core driver support
        <*>   Universal TUN/TAP device driver support
}}

Needed for 802.1d Ethernet bridging:

{{KernelBox|title=Enabling 802.1d Ethernet Bridging support|1=
[*] Networking support  --->
        Networking options  --->
            <*> The IPv6 protocol
            <*> 802.1d Ethernet Bridging
}}

<code>python</code> USE flag is needed for file capabilities support:

{{KernelBox|title=Enabling Linux file capabilities support|1=
Kernel hacking  --->
        Compile-time checks and compiler options  --->
            [*] Debug Filesystem
}}

When using the ext4 filesystem, enable the <code>filecaps</code> USE flag if stats support is needed:

{{KernelBox|title=Enabling ext4 kvm_stat support|1=
File systems  --->
    <*> The Extended 4 (ext4) filesystem
    [*]   Ext4 Security Labels
}}

=== USE flags ===

Review the possible USE flags for QEMU:

{{USEflag|package=app-emulation/qemu}}

{{Note|More than one USE flag (<code>gtk</code>, <code>ncurses</code>, <code>sdl</code> or <code>spice</code>) can be enabled for graphical output. If graphics are desired it is generally recommended to enable more than one graphical USE flag.}}

==== USE_EXPAND ====

Additional ebuild configuration frobs are provided as the USE_EXPAND variables <var>QEMU_USER_TARGETS</var> and <var>QEMU_SOFTMMU_TARGETS</var>.  See {{Package|app-emulation/qemu}} for a list of all the available targets (there are a heck of a lot of them; most of them are very obscure and may be ignored; leaving these variables at their default values will disable almost everything which is probably just fine for most users).

For each target specified, a qemu executable will be built. A <code>softmmu</code> target is the standard qemu use-case of emulating an entire system (like VirtualBox or VMWare, but with optional support for emulating CPU hardware along with peripherals).  <code>user</code> targets execute user-mode code only; the (somewhat shockingly ambitious) purpose of these targets is to "magically" allow importing user-space linux ELF binaries from a different architecture into the native system (that is, they are like multilib, without the awkward need for a software stack or CPU capable of running it).

In order to enable <var>QEMU_USER_TARGETS</var> and <var>QEMU_SOFTMMU_TARGETS</var> we can edit the variables globally in {{Path|/etc/portage/make.conf}}, i.e.:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1= 
QEMU_SOFTMMU_TARGETS{{=}}"arm x86_64 sparc"
QEMU_USER_TARGETS{{=}}"x86_64"
}}

Or, we can edit the {{Path|/etc/portage/package.use}} file(s).  Two equivalent syntaxes are available: traditional "use-flag" syntax, i.e.:

{{FileBox|filename=/etc/portage/package.use|1=
app-emulation/qemu qemu_softmmu_targets_arm qemu_softmmu_targets_x86_64 qemu_softmmu_targets_sparc
app-emulation/qemu qemu_user_targets_x86_64
}}

and, a newer sexy USE_EXPAND-specific syntax:

{{FileBox|filename=/etc/portage/package.use|1=
app-emulation/qemu QEMU_SOFTMMU_TARGETS: arm x86_64 sparc QEMU_USER_TARGETS: x86_64
}}

=== Emerge ===

After reviewing and adding any desired USE flags, emerge {{Package|app-emulation/qemu}}:

{{Emerge|app-emulation/qemu}}

== Configuration ==

=== Networking ===

For Networking configuration, see the [[QEMU/Options#Networking|networking options documentation]].

=== IPv6 ===

For IPv6 networking see the [[QEMU/KVM_IPv6_Support|IPv6 subarticle]].

=== Permissions ===

In order to run a KVM accelerated virtual machine without logging as root, add normal users to the {{c|kvm}} group. Replace <code><username></code> in the example command below with the appropriate user(s):

{{RootCmd|gpasswd -a <username> kvm}}

=== Front ends ===

To make life easier, there are multiple user-friendly front ends to QEMU:

{| class="table table-striped table-condensed"
|-
! Name !! Package !! Homepage !! Description
|-
| [[AQEMU]] || {{Package|app-emulation/aqemu}} ||  https://sourceforge.net/projects/aqemu/ || Graphical interface for QEMU and KVM emulators, using Qt5.
|-
| GNOME Boxes || {{Package|gnome-extra/gnome-boxes}} || https://wiki.gnome.org/Apps/Boxes || GNOME App to manage virtual and remote machines
|-
| libvirt || {{Package|app-emulation/libvirt}} || https://www.libvirt.org/ || C toolkit to manipulate virtual machines.
|-
| QtEmu || || https://gitlab.com/carlavilla/Qtemu/ ||  Qt-based front-end for QEMU.
|-
| qt-virt-manager || {{Package|app-emulation/qt-virt-manager}} || https://f1ash.github.io/qt-virt-manager/ || A graphical user interface for libvirt written in Qt5.
|-
| [[#virt-manager|virt-manager]] || {{Package|app-emulation/virt-manager}} || https://virt-manager.org || A graphical tool for administering virtual machines.
|}

==== virt-manager ====

{{Note|When using {{c|virt-manager}} the <code>usbredir</code> USE flag must be  enabled for {{c|qemu}} to work properly.}}

To run as a normal user, after emerging, ensure they are in the {{c|libvirt}} group:

{{RootCmd
|groupadd libvirt
|usermod -a -G libvirt <user>
}}

Uncomment the following lines from the libvirtd configuration file:

{{FileBox|filename=/etc/libvirt/libvirtd.conf|lang=bash|1=
unix_sock_group = "libvirt"
unix_sock_ro_perms = "0777"
unix_sock_rw_perms = "0770"
}}

Be sure to have the user log out then log in again for the new group settings to be applied.

Issue the following command to restart the libvirtd service under OpenRC:

{{RootCmd
|/etc/init.d/libvirtd restart
}}

Issue the following command to restart the libvirtd service under systemd:

{{RootCmd
|systemctl restart libvirtd
}}

{{c|virt-admin}} should now be launchable as a regular user.

{{Note|If permission denied issues are experienced when loading ISO images user directories (somewhere beneath {{Path|/home/}}) then the {{Path|/var/lib/libvirt/images/}} directory can be used to store the images.}}

== Usage ==

The following sub-articles provide instructions on QEMU usage:

* [[QEMU/Options|Usage options]] - Contains common options used with QEMU.
* [[QEMU/Linux guest|Linux guest]] - Describes the configuration steps needed to setup Linux to run on QEMU.
* [[QEMU/Windows guest|Windows guest]] - Describes the configuration steps needed to setup Windows to run on QEMU.
* [[QEMU/OS2WarpV3 guest|OS2WarpV3 guest]] - Describes the configuration steps needed to setup OS2WarpVs=3 to run on QEMU.

== Troubleshooting ==

=== "kvm: already loaded the other module" ===

Sometimes during the early boot splash the error message "kvm: already loaded the other module" can be seen. This message indicates both the Intel and the AMD kernel virtual machine settings have been enabled in the kernel. To fix this, enable as a module or disable either the Intel ''or'' AMD KVM option specific to the system's processor in the kernel configuration. For example, if the system has an Intel processor enable the Intel KVM, then make sure the AMD KVM is set as a module (M) or is disabled (N). The relevant options to enable or disable can be found in the kernel's {{Path|.config}} file via the <var>CONFIG_KVM_INTEL</var> and <var>CONFIG_KVM_AMD</var> variables or in the configuration section above.

=== Creating TUN/TAP device - No such file or directory ===

Sometimes this error can occur if TUN/TAP support cannot be found in the kernel.
To solve this, try loading the driver:

{{RootCmd|modprobe tun}}

If that works, add this to a file in {{Path|/etc/modules-load.d/}} to load on startup:

{{FileBox|filename=/etc/modules-load.d/qemu-modules.conf|1=tun}}

== See also ==

* {{See also|QEMU/KVM_IPv6_Support}}
* {{See also|Comparison of virtual machines}}

== External resources ==

* https://www.linux-kvm.org/page/KvmOnGentoo - The Gentoo article on the KVM wiki
* https://wiki.qemu.org/Main_Page - The Official QEMU wiki

[[Category:Virtualization]]
