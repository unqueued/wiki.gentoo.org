== Revive a Trimslice with mainline U-Boot ==

Use sarnold github repo for now, default trimslice branch.
(currently one patch on top of v2016.07)

[//github.com/sarnold/u-boot sarnold/u-boot]

Follow RCN wiki steps for extlinux.conf (no more boot.scr needed).

Example: https://eewiki.net/display/linuxonarm/A20-OLinuXino-LIME

Tegra has "special" boot magic so the best way is to follow the readmes for each of the NVIDIA tools or use the manifest builder.  Note the README files are required reading either way...

[//github.com/sarnold/tegra-uboot-flasher-scripts flasher README files]

[//github.com/sarnold/tegra-uboot-flasher-manifests sarnold/tegra-uboot-flasher-manifest]

If you can install the required tegra tool packages, then you can ignore the build-tools script.  Otherwise use the full build script and let it put all of them in a local build output dir.  By default it will build all the Tegra boards, so if you just want one, use the argument below.  Note that it must come '''after''' ./build command and '''before''' the actual "build" argument:

  $ export ARCH=arm
  $ export CROSS_COMPILE=armv7a-hardfloat-linux-gnueabi-
  $ ./build --boards trimslice build

Once everything is built (check the _out dir above the scripts dir) you can either make an sdcard or test the spi flash build on the trimslice.  Note that any DTC warnings in the u-boot build output are the result of parallel make and can be safely ignored.

Using the manifest build, from the scripts dir:

Make a bootable card:

 1) follow the RCN wiki example above, but for the u-boot deploy step do:

  $ sudo dd if=../_out/trimslice/trimslice-mmc.img of=/dev/sdb

Test it in SPI flash:

 1) Connect your serial cable to the front port, and connect a micro USB
    cable to the other port on the front.  Bring up a serial console program.
    Open the tiny door where the microSD slot is, and press the "boot" button
    while powering up (this is Tegra, so it uses fastboot bode).

 2) following the README-user.txt, run the download tool:
 
  $ sudo python tegra-uboot-flasher exec trimslice

You should see the console load and execute the u-boot you just downloaded. It will still fallback to the old boot.scr if it can't find extlinux.conf (but the latter is now easier and preferred).

When ready, run the same command (after booting into fastboot mode again) with "flash" instead of "exec":

  $ sudo python tegra-uboot-flasher flash trimslice

You can use any kernel source, from gentoo-sources to armv7-multiplatform.
