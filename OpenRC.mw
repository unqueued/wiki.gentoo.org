{{InfoBox stack
|{{InfoBox project|OpenRC|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox package|sys-apps/openrc}}
|{{InfoBox gitweb|openrc.git}}
|{{InfoBox github|OpenRC/openrc}}
|{{InfoBox todo|[[#Busybox specific init.d files|Busybox specific init.d files]]|header=true}}}}

'''OpenRC''' is [[Article description::a dependency-based init system that maintains compatibility with the system provided {{c|init}} program]], normally located in {{Path|/sbin/init}}. It does not function as a replacement for the {{Path|/sbin/init}} file. OpenRC is 100% compatible with Gentoo init scripts, which means a solution can be found to run the dozens of daemons in the main Gentoo repository. OpenRC, however, is not designed to be exclusively used by Gentoo Linux and can be used on other distributions and BSD systems.

== Features ==

OpenRC provides a number of features touted as innovative by recent init systems like [[systemd]] or [[//en.wikipedia.org/wiki/Upstart_(software) upstart]], such as:
* [[cgroups]] support,
* process supervision,
* parallel startup of services, and 
* hardware initiated initscripts run.

It does this without requiring large layout changes to accommodate radically different designs and dependencies.

{{Tip|See the [[comparison of init systems]] article for more information on init systems.}}

=== OpenRC Busybox integration ===

Busybox can be used to replace most of the userspace utilities needed by OpenRC ({{c|init}}, shell, {{c|awk}} and other POSIX tools), by using a complete Busybox as shell for OpenRC all the calls that normally would cause a fork/exec would be spared, improving the overall speed. This process is not yet streamlined.

Please note that there are currently many Busybox applets that are incompatible with OpenRC. See {{Bug|529086}} for details.

=== Replacing init ===

In order to set a specific runlevel from the bootloader the variable <code>softlevel=</code> should be used.

==== busybox ====

The SysV-init {{Path|/etc/inittab}} file provided by Gentoo is not compatible with the Busybox {{Path|init}}.

{{FileBox|filename=/etc/inittab|title=Example inittab compatible with Busybox init|1=
::sysinit:/sbin/openrc sysinit
::wait:/sbin/openrc boot
::wait:/sbin/openrc
}}

==== openrc-init ====
OpenRC has its own [[init system]] called '''openrc-init'''. See [[OpenRC/openrc-init]] for details.

=== Daemon supervision ===
OpenRC has its own process supervisor. See [[OpenRC/supervise-daemon]] for details.

=== Busybox specific init.d files ===
TODO: busybox provides a number of applets that could be used to replace third party software like acpid or dhcp/dhcpcd.

=== Replacing udev with mdev ===

See [[mdev]].

=== Replacing udev with eudev ===

Older Gentoo installs were using [[udev]] as the main {{package|virtual/udev}} provider.  Based on {{bug|575718}} it was changed to [[eudev]]. However, the rc service is still {{path|/etc/init.d/udev}}.

== Configuration ==

=== Files ===

; {{Path|/etc/rc.conf}}
: The global OpenRC configuration file.

=== Network management ===

OpenRC can be used with one of several network managers or even with none, see [[Network manager]].

=== Dependency behavior ===

Changing the default dependencies of init scripts, might be needed to fit more complex setups. See {{Path|/etc/rc.conf}} for how to change the default behavior; notice the ''rc_depend_strict'' option. In addition, next networking examples show how flexible OpenRC can be.

; ''Multiple network interfaces (example)''
The [[SSH|SSH service]] must come up with the internal network, for instance ''eth0'' and never ''wlan0''.

Overrule the "net" dependency from {{Path|/etc/init.d/sshd}}, and refine it to depend on "net.eth0":

{{FileBox|filename=/etc/conf.d/sshd|lang=bash|1=
rc_need="!net net.eth0"
}}

; ''Multiple network interfaces in multiple runlevels (example)''
The SSH service must start with ''eth0'' (not ''wlan0'') in "default" runlevel, but in "office" runlevel it must start with ''wlan0'' (not ''eth0'').

Keep the default:

{{FileBox|filename=/etc/rc.conf|lang=bash|1=
#rc_depend_strict="YES"
}}

Make additional symlinks to {{c|sshd}} with the network interface names:

{{RootCmd
|ln -s sshd /etc/init.d/sshd.eth0
|ln -s sshd /etc/init.d/sshd.wlan0
}}

Settings are read from {{Path|/etc/conf.d/sshd.eth0}} and {{Path|/etc/conf.d/sshd.wlan0}} now:

{{RootCmd
|cp /etc/conf.d/sshd /etc/conf.d/sshd.eth0
|cp /etc/conf.d/sshd /etc/conf.d/sshd.wlan0
}}

Add the dependencies:

{{RootCmd
|echo <nowiki>'rc_need="!net net.eth0"'</nowiki> >> /etc/conf.d/sshd.eth0
|echo <nowiki>'rc_need="!net net.wlan0"'</nowiki> >> /etc/conf.d/sshd.wlan0
}}

In this example ''net.eth0'' and ''net.wlan0'' read their settings from {{Path|/etc/conf.d/net}}, or {{Path|/etc/conf.d/net.office}} depending on the active runlevel. Add all runscripts to the different runlevels:

{{RootCmd
|rc-update add sshd.eth0 default
|rc-update add sshd.wlan0 office
|rc-update add net.eth0 default office
|rc-update add net.wlan0 default office
}}

To switch between "default" runlevel and "office" runlevel without rebooting the computer, change to "nonetwork" runlevel in between. The network interfaces will be stopped this way, and re-read their runlevel specific configuration. This works best when "nonetwork" is a ''stacked runlevel'' in both the "default" and "office" runlevels, and the display manager and other non-network services are added to the "nonetwork" runlevel only.

'''<pre>default runlevel <---> nonetwork runlevel <---> office runlevel</pre>'''

{{RootCmd
|rc nonetwork && rc office
|rc nonetwork && rc default
}}

=== Selecting a specific runlevel at boot ===

OpenRC reads the kernel command-line used at boot time, and will start the runlevel specified by the "softlevel" parameter if provided, instead of 'default'.

For instance, you can choose whether to boot into the 'default' or 'nonetwork' runlevels with the following example {{Path|grub.conf}} configuration:

{{FileBox|filename=/boot/grub/grub.conf|title=Example grub.conf (GRUB Legacy)|1=

title=Regular Start-up

kernel (hd0,0)/boot/kernel-3.7.10-gentoo-r1 root=/dev/sda3

title=Start without Networking

kernel (hd0,0)/boot/kernel-3.7.10-gentoo-r1 root=/dev/sda3 softlevel=nonetwork
}}

== Usage ==

=== Runlevels ===

OpenRC can be controlled and configured using {{c|openrc}}, {{c|rc-update}} and {{c|rc-status}} commands.

Delete a service from default runlevel, where <code><service></code> is the name of the service to be removed:

{{RootCmd|rc-update delete <service> default}}

=== Listing ===

Listing commands do not need to be ran as root.

Use {{c|rc-update show -v}} to display all available init scripts and their current runlevel (if they have been added to one):

{{Cmd|rc-update show -v}}

Running {{c|rc-update}} or {{c|rc-update show}} will display only the init scripts that have been added to a runlevel.

Alternatively, the {{c|rc-status}} command can be used with the <code>--servicelist</code> (<code>-s</code>) option to view the state of all services:

{{Cmd|rc-status --servicelist}}

==== Named runlevels ====

OpenRC runlevels are directories living in {{Path|/etc/runlevels}} to create additional runlevels is enough to issue:

{{RootCmd|install -d /etc/runlevels/$runlevel}}

==== Stacked runlevels ====

Is possible manage variants using {{c|rc-update -s}}.

An usage example for using stacked runlevel on laptop to group networking services based on location is at [[OpenRC/StackedRunlevel]].

=== Prefix ===

[[Project:Prefix|Gentoo Prefix]] installs Gentoo within an offset, known as a prefix, allowing users to install Gentoo in another location in the filesystem hierarchy, hence avoiding conflicts. Next to this offset, Gentoo Prefix runs unprivileged, meaning no root user or rights are required to use it.

By using an offset (the "prefix" location), it is possible for many "alternative" user groups to benefit from a large part of the packages in the Gentoo Linux Portage tree. Currently users of the following systems successfully run Gentoo Prefix: Mac OS X on PPC and x86, Linux on x86, x86_64 and ia64, Solaris 10 on Sparc, Sparc/64, x86 and x86_64, FreeBSD on x86, AIX on PPC, Interix on x86, Windows on x86 (with the help of Interix), HP-UX on PARISC and ia64. 

OpenRC runscript already support prefix-installed daemons, during the Summer of Code 2012 work will be done to implement full secondary/session daemon behavior to complete the overall feature set provided by Prefix.

[[OpenRC/Prefix]], a tutorial for trying it out.

=== Hotplug ===

OpenRC can be triggered by external events, such as new hardware from udev. See [[OpenRC/Event Driven]] for details.

=== Manually recovering crashed services ===

If you have a process that crashes upon start you will see the following when you go to check it's status.
{{RootCmd
|/etc/init.d/docker status
 * status: crashed
|/etc/init.d/docker start
 * WARNING: docker has already been started
|/etc/init.d/docker stop
 * Caching service dependencies ...                                                                                                  [ ok ]
 * Stopping docker ...
 * Failed to stop docker                                                                                                             [ !! ]
 * ERROR: docker failed to stop
}}

To remedy this situation you will need to zap the process which in the following example is the docker service.

{{RootCmd 
|/etc/init.d/docker zap}}

=== Automatic respawning crashed services ===

OpenRC can return state of services to runlevel setting state, to provide stateful init scripts and automatic respawning. What you need is to run {{c|openrc}} (for default runlevel). Crashed services start and manual run services will stop. To prevent this you can run {{c|openrc -n}} (<code>--not-stop</code>)

By default {{c|openrc}} will attempt just to start crashed services, not restart. This —Åontrolled by rc_crashed_stop (default NO) and rc_crashed_start (default YES) options in {{Path|/etc/rc.conf}}.

=== CGroups support ===

OpenRC starting with version 0.12 has extended cgroups support. See [[OpenRC/CGroups]] for details.

=== Chroot support ===

{{RootCmd
|mkdir /lib64/rc/init.d
|ln -s /lib64/rc/init.d /run/openrc
|touch /run/openrc/softlevel
|emerge --oneshot sys-apps/openrc
}}

{{FileBox|filename=/etc/rc.conf|title=OpenRC config file|lang=bash|1=
rc_sys="prefix"
rc_controller_cgroups="NO"
rc_depend_strict="NO"
rc_need="!net !dev !udev-mount !sysfs !checkfs !fsck !netmount !logger !clock !modules"
}}

== systemd compatibility ==

=== logind ===

As some setups require systemd-logind. [[Elogind]] can be a suitable replacement as a standalone logind running with OpenRC.

=== tmpfiles.d ===

systemd has a special tmpfiles.d file syntax for managing temporary files. {{Package|sys-apps/opentmpfiles}} provides a tmpfiles.d interpreter for OpenRC.

Both can also be used to manage volatile entries in {{Path|/sys}} or {{Path|/proc}}.

== See also ==

* [[Handbook:AMD64/Working/Initscripts|Gentoo AMD64 Handbook - Initscript system]]
* {{See also|OpenRC/Baselayout 1 to 2 migration}}

[[Category:OpenRC]]
