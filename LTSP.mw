The '''Linux Terminal Server Project''' ([http://www.ltsp.org/ website]) is a collection of scripts and documentation to create a cluster of thin clients. For instance, an entire client chroot environment is built with a single command: ltsp-build-client. This article will guide you through the installation and configuration of a basic LTSP 5 system. 

This guide shows you how to install and configure the Gentoo LTSP 5 port. This guide assumes some knowledge of thin client architecture and experience in manually installing Gentoo. Also, you need a server and client with the specifications listed in the [http://sourceforge.net/apps/mediawiki/ltsp/index.php?title=Ltsp_LtspDocumentationUpstream LTSP manual]. Concerning the client networkcard, only PXE is included in this manual. 

Several resources can help you speed you on your way in time of need. Others are listed in the Resources section. For more online LTSP help, you can visit #ltsp on one of the [http://freenode.net/irc_servers.shtml freenode irc servers].
* [http://sourceforge.net/apps/mediawiki/ltsp/index.php?title=Ltsp_LtspDocumentationUpstream LTSP Administrator's Reference]
* [https://launchpad.net/ltsp LTSP upstream development page]
* [http://sourceforge.net/mail/?group_id=17723 LTSP mailing lists]

Bugs can be reported in two locations. Check [[LTSP#Known Issues|known issues]] before a potential duplicate.
* [http://bugs.gentoo.org/177580 Gentoo] - For issues related to Gentoo
* [https://bugs.launchpad.net/ltsp/+bugs Upstream] - For issues related to LTSP itself

{{Warning|LTSP and some other software used in this guide are not in the stable Portage tree.}}
{{Note|This tutorial uses '''x86''' as architecture for the client install}}


== Server Preparation ==

=== Installation ===
Gentoo's LTSP packages are stored in the [http://git.overlays.gentoo.org/gitweb/?p=proj/ltsp.git;a=summary ltsp-overlay]. To [http://www.gentoo.org/proj/en/overlays/userguide.xml use] the Gentoo LTSP-Overlay, get it with {{Package|layman}}. Because ltsp resides in the git overlays, the git USE flag is needed.

{{RootCmd|layman -a ltsp}}

In case you are using stable settings for your architecture, add the following to package.keywords.

{{RootCmd|echo "net-misc/ltsp-server" >> /etc/portage/package.keywords
|echo "sys-fs/ltspfs" >> /etc/portage/package.keywords
|echo "net-misc/ldminfod" >> /etc/portage/package.keywords
|echo "sys-apps/quickstart" >> /etc/portage/package.keywords}}
<!-- {{Note|Add "extras" to /etc/make.conf}} -->

The LTSP server package needs a tftp and dhcp server (dhcp or dnsmasq). In this tutorial {{Package|tftp-hpa}} and {{Package|dnsmasq}} are [[#DHCP and PXE-boot|used]]. It also requires a system logger which can accept client messages over tcp, for which {{Package|syslog-ng}} is [[#System Logging|used]] in this tutorial. Don't forget to add a window manager, ltsp-client won't log in if no window manager is installed on the server.
{{RootCmd|emerge syslog-ng dnsmasq tftp-hpa|emerge ltsp-server}}

=== Kernel ===
Besides the obvious drivers, the server kernel ought to have the following settings. If you're going to use NFS to serve the chroot environments, make sure to compile it in as well and reboot afterwards.

{{Kernel|LTSP server|<pre>
File systems  --->
  [*] FUSE (Filesystem in Userspace) support
  [*] Network File Systems  --->
    <*> NFS server support
    [*]  NFS server support for NFS version 3
</pre>}}

=== DHCP and PXE-boot ===
First, setup the server to provide client machines with a kernel at boottime. Install a few packages on the server. The PXE boot loader is provided by {{Package|syslinux}}. Dnsmasq is a simple DHCP/DNS server. Advanced TFTP is one of the TFTP server options, and the only one to support multicast TFTP.<sup>'''[[#External links|1]]'''</sup>
The chroot environments as well as the kernels served at boot time are stored in /opt/ltsp. Configure dnsmasq as a DHCP server:

{{File|/etc/dnsmasq.conf|edit settings as you please|<pre>
# Listen only to this interface
interface=eth1

# Set up the local-only domain
local=/lan.outerrim/
expand-hosts
domain=lan.outerrim

# Assign names based on mac adress
dhcp-host=00:1e:68:c2:ff:ee,endor,192.168.1.54,24h

# Any other DHCP request gets one from these
dhcp-range=192.168.1.100,192.168.1.120,12h

# Never forward plain names (without a dot or domain part)
domain-needed
# Never forward addresses in the non-routed address spaces.
bogus-priv

# Set the root directory for files available via FTP.
tftp-root=/var/lib/tftpboot
dhcp-boot=/pxelinux.0
</pre>}}


Configure {{Package|tftp-hpa}} next. This is used for the client nodes to retrieve the kernel and initrd/initramfs, before they mount their root filesystems via NFS.<sup>'''[[#External links|1]]'''</sup>

{{RootCmd|mkdir /var/lib/tftpboot}}

{{File|/etc/conf.d/in.tftpd|this path is an ltsp default|<pre>
INTFTPD_PATH="/var/lib/tftpboot/"
</pre>}}

Set up the PXE boot loader next. First, copy the executable into the TFTP root from where it was installed. Create the configuration directory after that and populate it with a default file. In the example configuration, the system mounts the local client disk after booting and loading the kernel from the server. Make sure the kernel and initramfs are in /var/lib/tftpboot. You can test the work so far with a working kernel and system.

{{RootCmd|cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/pxelinux.0
|mkdir /var/lib/tftpboot/pxelinux.cfg}}

{{File|/var/lib/tftpboot/pxelinux.cfg/default||<pre>
kernel kernel-YOURKERNELVERSION
append initrd=initramfs-YOURKERNELVERSION root=/dev/nfs nfsroot=YOURSERVERIP:/opt/ltsp/x86
</pre>}}


Start the services, now and at every boot
{{RootCmd|/etc/init.d/dnsmasq start && /etc/init.d/in.tftpd start
|rc-update add dnsmasq default && rc-update add in.tftpd default}}

=== NFS and Xinetd ===
The chroot environments are shared with NFS. Xinetd is used for '''ldminfod''' and '''nbd''' sharing. By default only the localhost is allowed access, so edit the /etc/xinetd.conf and restart the service.

{{File|/etc/xinetd.conf||<pre>
...
only_from = 192.168.0.1/24
...
</pre>}}

{{RootCmd|/etc/init.d/nfs start
|/etc/init.d/xinetd start
|rc-update add nfs default
|rc-update add xinetd default}}


== Client Install ==
The ltsp-server package amongst others ships a command called '''ltsp-build-client'''. This command is responsible for building the entire chroot environment. And while ltsp-build-client and available plugins setup the environment, [http://dev.gentoo.org/~agaffney/quickstart.php Quickstart] actually builds it.

=== Configuration ===
You can invoke the build script with command line arguments or configure the config file in /etc/ltsp/ltsp-build-client.conf. Commandline options take precedence over config file options. If you encounter some problems and have to perform ltsp-build-client again, the program tells you to remove the entire chroot environment. It is recommended to first copy the downloaded stage outside the chroot and point the ltsp-build-client command to it, so it won't have to be downloaded again.

{{File|/etc/ltsp/ltsp-build-client.conf||<pre>
# A custom stage location.
STAGE_URI=file:///opt/ltsp/stages/stage3-x86-current.tar.bz2

# The root dir for <arch> installations.
BASE=/opt/ltsp

# The build architecture for the chroot.
ARCH=x86

# Extra packages that are not in the quickstart profile, useful for localapps
PACKAGES="xterm"

# Set a custom kernel sources package
KERNEL_SOURCES="=sys-kernel/gentoo-sources-2.6.34-r12"

# And a matching kernel config to download from somewhere
KERNEL_CONFIG_URI="tftp://192.168.0.1/ltsp/x86/gentoo-sources-2.6.34-r12.config"
</pre>}}

=== Kernel ===
A separate section for the client kernel is in order. A standard Genkernel kernel is created during the installation when configuration changes are made. It's advisable to take a closer look at the client's kernel config and use the config during the client install.

{{Kernel|LTSP client|<pre>
General setup  --->
  [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support 

[*] Networking support  ---> 
  Networking options  --->
    [*] IP: kernel level autoconfiguration
      [*] IP: DHCP support
      [*] IP: BOOTP support 

Device Drivers -->
  [*] Block devices  --->
    <M>   Network block device support

File systems  ---> 
  <*> Kernel automounter version 4 support (also supports v3)
  <*> FUSE (Filesystem in Userspace) support
  [*] Network File Systems  --->
    <M>   NFS client support
    [*]     NFS client support for NFS version 3
    [*]     NFS client support for the NFSv3 ACL protocol extension
    [*]     NFS client support for NFS version 4 (EXPERIMENTAL)
</pre>}}

=== Building the Client ===
By default, the packaged quickstart profile in /etc/ltsp/quickstart/profile.qs is used with no debug options. Another profile can be selected with command line options. The kernel config you just made can be used in the build process by adding the server vars to ltsp-build-client.conf (See in [[#Configuration|Configuration section]] above).

{{RootCmd|<nowiki>ltsp-build-client --quickstart-profile=/root/myprofile.qs --quickstart-debug --quickstart-verbose</nowiki>}}

After invoking the ltsp-build-client command, the environment is preparing. For each architecture the first build takes up the most time because binary packages are created from source in the first run. These binary packages are stored in /usr/portage/packages through a bind mount on your server. Any consequent builds use these packages to speed up the process.

=== Finishing the Install ===
Some things still need to be done after building the environment. First up is the kernel, which needs to be put in your tftroot. In the default setup, this is copied from the chroot in /opt/ltsp and copied to the tftproot in an ltsp subdir in /var/lib/tftpboot, /tftpboot or /srv/tftp, if one exists. Calling ltsp-update-kernels with a different tftproot location:

{{RootCmd|<nowiki>ltsp-update-kernels --tftpdirs="/opt/tftproot"</nowiki>}}

Your pxelinux configuration has to be updated to reflect the changes in the setup. See the [[#DHCP and PXE-boot|PXE boot section]] for more info.


== Client Configuration ==
While some properties of the client's environment are more or less statically set in the chroot environment, others can be changed at boot time. 
The lts.conf file allows properties to be set for all clients or for each workstation specifically. Explaining the syntax of the file goes
beyond the scope of this tutorial, but it is explained on the [http://sourceforge.net/apps/mediawiki/ltsp/index.php?title=Ltsp_LtsConf LTSP wiki] and in the lts.conf man page. The latter is available after emerging the '''ltsp-docs''' package.

The lts.conf file is downloaded at client boot time from a preconfigured location in the tftproot, namely /ltsp/x86/lts.conf. Create your lts.conf
there and change your architecture if applicable.

{{File|/var/lib/tftpboot/ltsp/x86/lts.conf||<pre>
[default]
</pre>}}

{{Note|If your tftp server has another ip than your nfs server, you will have to change it in the ltsp-client-setup init file.}}

The script that invokes the download is /etc/init.d/ltsp-client-setup. Together with /etc/init.d/ltsp-client it is responsible for settings
like the swap configuration, sound daemon, and date among others. While ''ltsp-client-setup'' performs the environment settings, ''ltsp-client'' starts the sound
daemon and the ldm login process. Some of these settings will now be discussed in detail.

=== System Logging ===
System logging is performed by {{Package|sysklogd}}. Log files are not stored locally however, but sent to the server specified by SYSLOG_HOST in ''lts.conf''.
While executing, the ltsp-client-setup script adds the syslog-ng configuration to perform this. To allow the server to process these incoming log messages,
some changes have to be made in that configuration as well. In the syslog-ng setting below, messages are logged to a file named after each client's
fully qualified domain name.

{{File|/etc/syslog-ng/syslog-ng.conf||<pre>
source net { udp(); };
destination remote { file("/var/log/remote/$FULLHOST"); };
log { source(net); destination(remote); };
</pre>}}

{{RootCmd|/etc/init.d/syslog-ng restart}}

=== LDM ===
If all is well, LDM will be started by ''ltsp-client'' and you can proceed to log in with a user on the server. If not, you might want to check if the LDM Info Daemon is disabled in /etc/xinitd.d/ldminfod. When the X server cannot start it might help to add your own xorg.conf file. As many different xorg.conf files can exist for many different clients in the same chroot, make sure to name them properly.

{{File|/opt/ltsp/tftproot/ltsp/x86/lts.conf||<pre>
[acer-aspire-one]
  X_CONF = /etc/X11/xorg-acer-aspire-one.conf

[00:1E:68:C2:FF:EE]
  LIKE=acer-aspire-one
</pre>}}

For a user to be able to login over ssh from the thin client to the server, the client needs the server ssh-keys. Although executed when building the client, these can be updated to the clients chroot with the following command:
{{RootCmd|ltsp-update-sshkeys}}

If you want another window manager, install it on the server and put the following in the LTSP configuration file (replace Fluxbox with the window manager of your choice).
{{File|/var/lib/tftpboot/ltsp/x86/lts.conf||<pre>
LDM_SESSION = /usr/bin/fluxbox
</pre>}}

=== Sound ===
As you might have seen in the list of emerged dependencies for ltsp, both for the client and the server, [http://pulseaudio.org/wiki/AboutPulseAudio PulseAudio] was among them. PulseAudio allows for playing audio applications on the server, while hearing it through the client's soundcard. The application running on the server sends its audio output to the pulse server instead of the server's soundcard. The pulse client on the ltsp client receives this output and lets alsa process it to the client's soundcard. In addition to {{Package|pulseaudio}}, its alsa-plugin needs to be installed on both client and server with the ''pulseaudio'' use flag enabled.

{{RootCmd|emerge alsa-plugins}}

The kernel alsa-driver is used, so ''alsa-utils'' doesn't need to be installed. In order for alsa to route the incoming audio data to pulse, the following needs to be added on the server. 

{{File|/etc/asound.conf||<pre>
pcm.!default {
        type pulse
}

ctl.!default {
        type pulse
}
</pre>}}

Also, because the server's soundcard is not used, hardware detection can be turned off in /etc/pulse/default.pa. The RTP sender module does need to be loaded for obvious reasons.


== Tips & Tricks ==
Several optional tips and tricks concerning LTSP can be found here. They are not Gentoo specific.

=== Local Apps ===
If you want apps to run on the client itself, a few changes need to be made. First of all, an extra line in your lts.conf.
{{File|/var/lib/tftpboot/ltsp/x86/lts.conf||<pre>
[default]
  LOCAL_APPS = True
</pre>}}

Each application which has to run locally, needs to be installed in the client chroot. You can do this by [[LTSP#Chrooting|chrooting]] into to client chroot environment and emerging the desired packages. It is also possible to combine this with your '''ltsp-build-client''' by adding the packages to the [[LTSP#Configuration|build client configuration]].

When logged in on your LTSP client, you can now run an application locally by running the following command.
{{Cmd|ltsp-localapps <command>}}

=== NBD Swap from USB ===
The '''nbdswapd''' allows clients to use swap space through a NBD. For this to work, the '''ltsp-server''' has to be emerged with the nbd USE flag enabled. Also, the lts.conf needs to be updated and the nbdswapd.conf has to contain the mountpoint of your usb stick and the desired swap size (64Mb by default).

{{File|/etc/ltsp/nbdswapd.conf||<pre>
SIZE=128
SWAPDIR=/mnt/usbswap
</pre>}}

{{File|/var/lib/tftpboot/ltsp/x86/lts.conf||<pre>
[default]
  NBD_SWAP = True
</pre>}}

=== LDM Greeter ===
The language of the texts in LDM are controlled by the client's locale. Some of the texts come from gtk while most are derived from ldm. You can see in 
/opt/ltsp/x86/usr/share/locale/your-language/LC_MESSAGES if '''ldm.po''' is available. If it is, the ldm messages will be translated if you set 
the client's language locale correctly.

If it isn't, to translate the file, download the template translation file from the 
[http://bazaar.launchpad.net/~ltsp-upstream/ltsp/ldm-trunk/annotate/head%3A/po//ldm.pot LTSP upstream LDM trunk] and translate it. Compile it and copy the
binary to locale dir with:

{{RootCmd|msgfmt -cv -o ldm.mo my-language.po
|cp ldm.mo /opt/ltsp/x86/usr/share/locale/your-language/LC_MESSAGES/.}}

{{Note|You can tribute to the LTSP effort by mailing your translation to the ltsp-developer mailing list.}}

The themes of the LDM greeter are stored in /opt/ltsp/x86/usr/share/ldm/themes where the symlink '''default''' points to the chosen theme.

=== Move the Chroot ===
You might want to move the client chroot installation on the server. This can be easily done with the following command. Don't forget to change to NFS entry in /etc/exports and reload it on the server prior to booting the client again.

{{RootCmd|<nowiki>find /opt/ltsp/x86/. -depth -print | cpio -pdm /path/to/new/dir/.</nowiki>
|exportfs -r}}

If you want to copy the installation to another computer, archive it with tar, copy the archive and unpack it on the other server. Remember to not only install NFS on the new server and copy the /etc/exports file, but also the network boot file used by the PXE.

{{RootCmd|<nowiki>tar -cvzf /ltspx86.tgz --one-file-system --exclude=/lost+found /opt/ltsp/x86</nowiki>
|tar -xvzf /root/ltspx86.tgz -C /opt/ltsp}}

=== X11 Keyboard Layout ===
At the moment, X configuration is disabled. Therefore, all LTSP X settings (in lts.conf) does not work, especially XKBLAYOUT. For setting the X layout of clients do the following:

{{RootCmd|mkdir /opt/ltsp/x86/etc/X11/xorg.conf.d/}}
{{RootCmd|cp /opt/ltsp/x86/usr/share/X11/xorg.conf.d/10-evdev.conf /opt/ltsp/x86/etc/X11/xorg.conf.d/10-evdev.conf}}

Then edit the file and add the line to the keyboard section of the evdev.conf
{{File|/opt/ltsp/x86/etc/X11/xorg.conf.d/10-evdev.conf||<pre>
Option "XkbLayout" "fr"
</pre>}}

=== Debugging ===
Below some practical debug tips.

==== Chrooting ====
When chrooting into the client, you don't have a portage (and layman) tree in the client chroot by default. In the installation, the server portage tree (among others) is bind mounted in the client tree, which means the client chroot actually uses the server's copied portage tree. To chroot into a client, perform the following actions:

When I want to go in a client chroot, I perform the following actions to mimic this behaviour. Let's say the chroot is in /opt/ltsp/x86:

{{RootCmd| mount /usr/portage/ /opt/ltsp/x86/usr/portage -o bind}}
{{RootCmd| mount /var/lib/layman /opt/ltsp/x86/var/lib/layman -o bind}}
{{RootCmd| mount -t proc none /opt/ltsp/x86/proc}}
{{RootCmd| mount -o bind /dev /opt/ltsp/x86/dev}}
{{RootCmd| chroot /opt/ltsp/x86 /bin/bash}}

==== SSHD ====
Logging in to a booted client with ssh might also be useful. You need to perform three actions for this.
# Chroot into the client.
# Add sshd to the default runlevel.
# Add /etc/ssh to the copy_dirs variable in /etc/conf.d/ltsp-client-setup.

==== Log Files ====
On client:
* /var/log/ldm.log
* /var/log/Xorg.7.log
On server:
* /var/log/remote/<host>
* /home/<user>/.xsession-errors

==== Commands ====
On client:
{{RootCmd|pulseaudio -vvv}}

On Server:
{{RootCmd|echo $PULSE_AUDIO}} should return tcp:<client ip>:4713
{{RootCmd|xrestop}} Top like statistics of X11 client's server side resource usage
{{RootCmd|nmap -p 4713 <client ip>}} to check if client's Pulse Audio daemon is listing on port 4713

=== Known Issues ===
* If you get an emerge error for "=dev-lang/python-2.6* is not installed", with a "die "$(python_get_implementational_package) is not installed";", this means that some of your binary packages were installed against Python 2.6, Remove your binary packages to let them compile against your new python environment.


* Several programs will fight for the virtual terminals on the clients. Comment out getty in inittab:
{{File|/opt/ltsp/x86/etc/inittab|commenting example|<pre>
...
# TERMINALS
#c1:12345:respawn:/sbin/agetty 38400 tty1 linux
#c2:2345:respawn:/sbin/agetty 38400 tty2 linux
#c3:2345:respawn:/sbin/agetty 38400 tty3 linux
#c4:2345:respawn:/sbin/agetty 38400 tty4 linux
#c5:2345:respawn:/sbin/agetty 38400 tty5 linux
#c6:2345:respawn:/sbin/agetty 38400 tty6 linux
...</pre>}}


* ltsp-build-client does not work witch all locale. quickstart actually requires 'C' locale. So if ltsp-build-client shouts with the following message:
{{RootCmd|ltsp-build-client ...
|output=No fetcher for protocol: file}}
unset your locale, remove the directory and restart:
{{RootCmd|unset LANG; unset LC_ALL; ltsp-build-client --purge}}



== External links ==

'''Diskless Install'''
* [http://www.gentoo.org/doc/en/altinstall.xml#doc_chap4 Gentoo Diskless install using PXE boot]
* [http://www.gentoo.org/doc/en/diskless-howto.xml Diskless Nodes with Gentoo]
* [http://syslinux.zytor.com/wiki/index.php/PXELINUX Syslinux' PXE Linux page]
* [http://etherboot.org/wiki/index.php Etherboot Project page]

'''Union Mounts'''
* [http://www.linuxjournal.com/article/7714 Unionfs: Bringing Filesystems Together]
* [http://aufs.sourceforge.net/ Aufs]
* [http://www.mail-archive.com/aufs-users@lists.sourceforge.net/msg00687.html aufs example]
* [https://svn.gentooexperimental.org/genkernel/doc/HOWTO-Genkernel-SSI.txt HOWTO Simple NFS Single System Image with Genkernel 4]

'''PulseAudio'''
* [http://developer.novell.com/wiki/index.php/Feisty/HOWTO:_PulseAudio Ubuntu Feisty LTSP PulseAudio Howto]
* [http://www.pulseaudio.org/wiki/PerfectSetup PulseAudio: The Perfect Setup]
* [http://www.linux.com/feature/119926 Why you should care about PulseAudio (and how to start doing it)]

'''Other'''
* [http://wiki.ltsp.org/twiki/bin/view/Ltsp/IntegratingLtsp Integrating LTSP-5 into your favorite Linux distro]
* [http://en.opensuse.org/LTSP/Tips_and_Tricks OpenSUSE LTSP Tips & Tricks]
* [http://freenx.berlios.de/ FreeNX]
* [http://www.tuxradar.com/content/ltsp-thin-clients-made-easy LTSP: Thin clients made easy]
* [http://ubuntuforums.org/showthread.php?t=377397 A Beginner "How To" for gtkrc themes]
* [https://help.ubuntu.com/community/UbuntuLTSP Ubuntu Community LTSP docs]
