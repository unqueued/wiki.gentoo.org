{{InfoBox stack
|{{InfoBox wikipedia|Linux Terminal Server Project|header=true}}
|{{InfoBox ohloh|ltsp}}
}}
The '''Linux Terminal Server Project''' ([http://www.ltsp.org/ website]) is a collection of scripts and documentation to create a cluster of thin clients. For instance, an entire client chroot environment is built with a single command: ltsp-build-client. This article will guide you through the installation and configuration of a basic LTSP 5 system. 

This guide shows you how to install and configure the Gentoo LTSP 5 port. This guide assumes some knowledge of thin client architecture and experience in manually installing Gentoo. Also, you need a server and client with the specifications listed in the [http://wiki.ltsp.org/wiki/Installation LTSP manual]. Concerning the client networkcard, only PXE is included in this manual. 

Several resources can help you speed you on your way in time of need. Others are listed in the Resources section. For more online LTSP help, you can visit #ltsp on one of the [http://freenode.net/irc_servers.shtml freenode irc servers].
* [http://wiki.ltsp.org LTSP Docs]
* [https://launchpad.net/ltsp LTSP upstream development page]
* [http://sourceforge.net/mail/?group_id=17723 LTSP mailing lists]

'''Bugs''' can be reported in two locations. Check [[LTSP#Troubleshooting|known issues]] before entering a potential duplicate.
* {{Bug|177580|text=Gentoo}} - For issues related to Gentoo
* {{Bug|ltsp|site=launchpad|search=package|text=Upstream}} - For issues related to LTSP itself

{{Warning|LTSP and some other software used in this guide are not in the stable Portage tree.}}
{{Note|This tutorial uses '''i686''' as architecture for the client install ('''x86''' before ltsp-server-5.2.19)}}


== Server Preparation ==

=== Installation ===
Gentoo's LTSP packages are stored in the [http://git.overlays.gentoo.org/gitweb/?p=proj/ltsp.git;a=summary ltsp-overlay]. To [http://www.gentoo.org/proj/en/overlays/userguide.xml use] the Gentoo LTSP-Overlay, get it with {{Package|app-portage/layman}}. Because ltsp resides in the git overlays, the git USE flag is needed.

{{RootCmd|layman -a ltsp}}

The LTSP server package needs a tftp and dhcp server (dhcp or dnsmasq). In this tutorial {{Package|net-ftp/tftp-hpa}} and {{Package|net-dns/dnsmasq}} are [[#DHCP and PXE-boot|used]]. It also requires a system logger which can accept client messages over tcp, for which {{Package|app-admin/syslog-ng}} is [[#System Logging|used]] in this tutorial. Don't forget to add a window manager, ltsp-client won't log in if no window manager is installed on the server. The USE flags for ltsp-server:
{{USEflag
|dhcp+++Installs a dhcp server, either dhcp or dnsmasq.
|doc
|examples
|nbd+++Swap over NBD can be used, client boot over NBD is installed, but not working.
|nfs+yes+yes+Client boot over NFS options are enabled.
|pulseaudio+yes+yes
|X+yes+yes
}}
{{Emerge|app-admin/syslog-ng|net-dns/dnsmasq|net-ftp/tftp-hpa}}
<!-- Please do not use Emerge template, ltsp-server is not in the official Portage tree.-->
{{RootCmd|emerge -av net-misc/ltsp-server}}

=== Kernel ===
Besides the obvious drivers, the server kernel ought to have the following settings. If you're going to use NFS to serve the chroot environments, make sure to compile it in as well and reboot afterwards.

{{Kernel|LTSP server|<pre>
File systems  --->
  [*] FUSE (Filesystem in Userspace) support
  [*] Network File Systems  --->
    <*> NFS server support
    [*]  NFS server support for NFS version 3
</pre>}}

=== DHCP and PXE-boot ===
First, setup the server to provide client machines with a kernel at boottime. Install a few packages on the server. The PXE bootloader is provided by {{Package|sys-boot/syslinux}}. Dnsmasq is a simple DHCP/DNS server. Advanced TFTP is one of the TFTP server options, and the only one to support multicast TFTP.<sup>'''[[#External links|1]]'''</sup> The chroot environments as well as the kernels served at boot time are stored in /opt/ltsp. 

Configure {{Package|net-dns/dnsmasq}}; for help on configuration, view the the [[Dnsmasq]] page.

Setup the PXE bootloader; view the [[Syslinux_Bootloader#pxelinux_bootloader_installation|PXE install]] section for more detail. In the example configuration, the system mounts the local client disk after booting and loading the kernel from the server. Make sure the kernel and initramfs are in /var/lib/tftpboot as well as the custom real_init option. You can test the work so far with a working kernel and system.

{{File|/var/lib/tftpboot/pxelinux.cfg/default|ltsp-client 5.3+|<pre>
kernel kernel-YOURKERNELVERSION
append initrd=initramfs-YOURKERNELVERSION root=/dev/nfs nfsroot=YOURSERVERIP:/opt/ltsp/i686 real_init=/sbin/init-ltsp
</pre>}}


Configure {{Package|net-ftp/tftp-hpa}} next. This is used for the client nodes to retrieve the kernel and initrd/initramfs, before they mount their root filesystems via NFS.<sup>'''[[#External links|1]]'''</sup>. Alternatively, you can also use [[Dnsmasq]] as the tftp-server.

{{File|/etc/conf.d/in.tftpd|this path is an ltsp default|<pre>
INTFTPD_PATH="/var/lib/tftpboot/"
</pre>}}


Start the services, now and at every boot
{{RootCmd|/etc/init.d/dnsmasq start && /etc/init.d/in.tftpd start
|rc-update add dnsmasq default && rc-update add in.tftpd default}}

=== NFS and Xinetd ===
The chroot environments are shared with NFS. Xinetd is used for '''ldminfod''' and '''nbd''' sharing. By default only the localhost is allowed access, so edit the /etc/xinetd.conf and restart the service.

{{File|/etc/xinetd.conf||<pre>
...
only_from = 192.168.0.1/24
...
</pre>}}

{{RootCmd|/etc/init.d/nfs start
|/etc/init.d/xinetd start
|rc-update add nfs default
|rc-update add xinetd default}}

=== System Logging ===
System logging is performed by {{Package|app-admin/sysklogd}}. Log files are not stored locally however, but sent to the server specified by SYSLOG_HOST in ''lts.conf''.
While executing, the ltsp-client-setup script adds the syslog-ng configuration to perform this. To allow the server to process these incoming log messages,
some changes have to be made in that configuration as well. In the syslog-ng setting below, messages are logged to a file named after each client's
fully qualified domain name.
{{Note|Remote logging is only activated if SYSLOG_HOST is specified.}}

{{File|/etc/syslog-ng/syslog-ng.conf||<pre>
source net { udp(); };
destination remote { file("/var/log/remote/$FULLHOST"); };
log { source(net); destination(remote); };
</pre>}}

{{RootCmd|/etc/init.d/syslog-ng restart}}

=== Sound ===
As you might have seen in the list of emerged dependencies for ltsp, both for the client and the server, [[PulseAudio]] was among them.  In addition to {{Package|pulseaudio}}, its alsa-plugin needs to be installed on both client and server with the ''pulseaudio'' use flag enabled. Refer to the [[PulseAudio#PA installation|Gentoo Wiki]] chapter for detailed installation instructions.


== Client Install ==
The ltsp-server package amongst others ships a command called '''ltsp-build-client'''. This command is responsible for building the entire chroot environment. And while ltsp-build-client and available plugins setup the environment, 
[[Kicktoo]] actually builds it. You can also use the [[#Quickstart|Quickstart]] alternative. 
{{Note|By default a 5.3 client is installed, for a 5.2 client, read the [[#5.2 Client|instructions]].}}


=== Configuration ===
You can invoke the build script with command line arguments or configure the config file in {{Highlight|/etc/ltsp/ltsp-build-client.conf}}. An example config file was included in the installation of ltsp-server. Commandline options take precedence over config file options.
{{Note|When having to perform ltsp-build-client again, it is recommended to first copy the downloaded stage outside the chroot and point the ltsp-build-client command to it, so it won't have to be downloaded again.}}

=== Kernel ===
A separate section for the client kernel is in order. A standard Genkernel kernel is created during the installation when configuration changes are made. It's advisable to take a closer look at the client's kernel config and use the config during the client install.

{{Kernel|LTSP client|<pre>
General setup  --->
  [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support 

[*] Networking support  ---> 
  Networking options  --->
    [*] IP: kernel level autoconfiguration
      [*] IP: DHCP support
      [*] IP: BOOTP support 

Device Drivers -->
  [*] Block devices  --->
    <M>   Network block device support

File systems  ---> 
  <*> Kernel automounter version 4 support (also supports v3)
  <*> FUSE (Filesystem in Userspace) support
  [*] Network File Systems  --->
    <M>   NFS client support
    [*]     NFS client support for NFS version 3
    [*]     NFS client support for the NFSv3 ACL protocol extension
    [*]     NFS client support for NFS version 4 (EXPERIMENTAL)
</pre>}}

=== Building the Client ===
By default, the packaged [[Kicktoo|kicktoo]] profile in /etc/ltsp/profiles/kicktoo.profile is used with no debug options. Another profile can be selected with command line options. The kernel config you just made can be used in the build process by adding the server vars to ltsp-build-client.conf (See in [[#Configuration|Configuration section]] above).

{{RootCmd|<nowiki>ltsp-build-client --installer-profile=/etc/ltsp/profiles/custom-kicktoo.profile --installer-debug --installer-verbose</nowiki>}}

After invoking the ltsp-build-client command, the environment is preparing. For each architecture the first build takes up the most time because binary packages are created from source in the first run. These binary packages are stored in /usr/portage/packages through a bind mount on your server. Any consequent builds use these packages to speed up the process.

=== Finishing the Install ===
Some things still need to be done after building the environment. First up is the kernel, which needs to be put in your tftroot. In the default setup, this is copied from the chroot in /opt/ltsp and copied to the tftproot in an ltsp subdir in /var/lib/tftpboot, /tftpboot or /srv/tftp, if one exists. Calling ltsp-update-kernels with a different tftproot location:

{{RootCmd|<nowiki>ltsp-update-kernels --tftpdirs="/opt/tftproot"</nowiki>}}

Your pxelinux configuration has to be updated to reflect the changes in the setup. See the [[#DHCP and PXE-boot|PXE boot section]] for more info.

For a user to be able to login over ssh from the thin client to the server, the client needs the server ssh-keys. Although executed when building the client, these can be updated to the clients chroot with the following command:
{{RootCmd|ltsp-update-sshkeys}}

=== Client Configuration ===
While some properties of the client's environment are more or less statically set in the chroot environment, others can be changed at boot time.  The {{Highlight|lts.conf}} file allows properties to be set for all clients or for each workstation specifically. Explaining the syntax of the file goes beyond the scope of this tutorial, but it is explained on the [http://sourceforge.net/apps/mediawiki/ltsp/index.php?title=Ltsp_LtsConf LTSP wiki] and in the lts.conf man page. The latter is available after emerging the {{Highlight|ltsp-docs}} package.

The lts.conf file is downloaded at client boot time from a preconfigured location in the tftproot, namely /ltsp/i686/lts.conf. Create your lts.conf there and change your architecture if applicable.

{{File|/var/lib/tftpboot/ltsp/i686/lts.conf||<pre>
[default]
 SERVER=192.168.67.1
</pre>}}

{{Note|The default LTSP server ip is set to 192.168.67.1, set yours if it is different.}}

The script that invokes the download is /etc/init.d/ltsp-client-setup. Together with /etc/init.d/ltsp-client it is responsible for settings
like the swap configuration, sound daemon, and date among others. While ''ltsp-client-setup'' performs the environment settings, ''ltsp-client'' starts the sound
daemon and the ldm login process. Some of these settings will now be discussed in detail.

=== LDM ===
If all is well, LDM will be started by ''ltsp-client'' and you can proceed to log in with a user on the server. If not, you might want to check if the LDM Info Daemon is disabled in /etc/xinitd.d/ldminfod. When the X server cannot start it might help to add your own xorg.conf file. As many different xorg.conf files can exist for many different clients in the same chroot, make sure to name them properly.

{{File|/var/lib/tftproot/ltsp/i686/lts.conf||<pre>
[acer-aspire-one]
  X_CONF = /etc/X11/xorg-acer-aspire-one.conf

[00:1E:68:C2:FF:EE]
  LIKE=acer-aspire-one
</pre>}}

If you want another window manager, install it on the server and put the following in the LTSP configuration file (replace Fluxbox with the window manager of your choice).
{{File|/var/lib/tftpboot/ltsp/i686/lts.conf||<pre>
LDM_SESSION = /usr/bin/fluxbox
</pre>}}

=== 5.2 Client ===
A 5.2 client is somewhat different from a 5.3 client. The main difference is that a 5.2 client has to be specifically prepared to function as an LTSP client while a 5.3 client takes care of this during the boot init process. In theory ltsp-client-5.3 can be installed on any Gentoo system, allowing it to be booted as an LTSP client.

Starting from ltsp-server-5.3, it's possible to install a 5.2 or a 5.3 client. This can be done by setting one of the different provided build profiles. By default, the kicktoo-5.3.profile is used.
{{File|/etc/ltsp/ltsp-build-client.conf||<pre>
INSTALLER_PROFILE=/etc/ltsp/profiles/quickstart-5.2.profile
</pre>}}

Booting a 5.3 client requires the following PXE configuration, without a real_init.
{{File|/var/lib/tftpboot/pxelinux.cfg/default|ltsp-client-5.2|<pre>
kernel kernel-YOURKERNELVERSION
append initrd=initramfs-YOURKERNELVERSION root=/dev/nfs nfsroot=YOURSERVERIP:/opt/ltsp/i686
</pre>}}

== Tips & Tricks ==
Several optional tips and tricks concerning LTSP can be found here. Most of them are Gentoo specific. Non-Gentoo specific tips & tricks can be found on the [http://wiki.ltsp.org/wiki/Tips_and_Tricks LTSP Wiki].

=== NBD Swap from USB ===
The '''nbdswapd''' allows clients to use swap space through a NBD. For this to work, the '''ltsp-server''' has to be emerged with the nbd USE flag enabled. Also, the lts.conf needs to be updated and the nbdswapd.conf has to contain the mountpoint of your usb stick and the desired swap size (64Mb by default).

{{File|/etc/ltsp/nbdswapd.conf||<pre>
SIZE=128
SWAPDIR=/mnt/usbswap
</pre>}}

{{File|/var/lib/tftpboot/ltsp/i686/lts.conf||<pre>
[default]
  NBD_SWAP = True
</pre>}}

=== Decreasing Chroot Size ===
You can make the make the built LTSP client chroot smaller using a combination of several methods. It's possible to get a chroot less than 1Gb. First up is the {{Highlight|EXCLUDE}} var in the ltsp-build-client program. This can be used to automatically unmerge packages at the end of the client build.
{{File|/etc/ltsp/ltsp-build-client.conf||<pre>
EXCLUDE="sys-apps/man-pages sys-kernel/genkernel"
</pre>}}

If you never intend to do any maintenance on the chroot again, you can even unmerge gcc this way. Also you can remove the build time dependencies in the chroot by [[#Chrooting|chrooting]] into the client chroot and executing the following command.
{{RootCmd|<nowiki>emerge --depclean --with-bdeps=n</nowiki>}}
{{Note|If you build a client a second time from binary packages, those build time dependencies won't be installed.}}


Another option are the x11 video card drivers. By default more than 10 are installed. By setting the VIDEO_CARDS variable in the LTSP build configuration (>= 5.3.6), the installed amount can be decreased to your need.
{{File|/etc/ltsp/ltsp-build-client.conf||<pre>
...
VIDEO_CARDS="vesa intel radeon mach64"
...

</pre>}}

=== X11 Keyboard Layout ===
At the moment, X configuration is disabled. Therefore, all LTSP X settings (in lts.conf) does not work, especially XKBLAYOUT. For setting the X layout of clients do the following:

{{RootCmd|mkdir /opt/ltsp/i686/etc/X11/xorg.conf.d/}}
{{RootCmd|cp /opt/ltsp/i686/usr/share/X11/xorg.conf.d/10-evdev.conf /opt/ltsp/i686/etc/X11/xorg.conf.d/10-evdev.conf}}

Then edit the file and add the line to the keyboard section of the evdev.conf
{{File|/opt/ltsp/i686/etc/X11/xorg.conf.d/10-evdev.conf||<pre>
Option "XkbLayout" "fr"
</pre>}}

=== Quickstart ===
You can also use [http://dev.gentoo.org/~agaffney/quickstart.php Quickstart] as a possible installer for ltsp-build-client (instead of the kicktoo default). Quickstart was the foundation of Kicktoo, but is not under active development anymore. To use this option, emerge it and do the following:

{{File|/etc/ltsp/ltsp-build-client.conf||<pre>
...
INSTALLER=quickstart
INSTALLER_PROFILE=/etc/ltsp/profiles/quickstart.profile
...
</pre>}}

=== Portage Profile ===
Since ltsp-server-5.3, most of the Portage settings needed to build an ltsp-client chroot are not set in the Quickstart or Kicktoo profiles anymore. Instead they are derived from an LTSP Portage profile. This profile is present in the ltsp overlay, and symlinked to the ${chroot}/make.profile during the ltsp-client install.

{{Warning|Any changes made in this profile will be reset when syncing the overlay.}}

== Troubleshooting ==
{{User:Wimmuskee/Troubleshooting|title=python_get_implementational_package not installed|reported=2011-06-06|reporter=Wimmuskee|problem=An emerge error for "=dev-lang/python-2.6* is not installed", with a "die "$(python_get_implementational_package) is not installed";"|solution=This means that some of your binary packages were installed against Python 2.6, Remove your binary packages to let them compile against your new python environment.}}

{{User:Wimmuskee/Troubleshooting|title=do not move package and distfiles dir|reported=2012-02-19|reporter=Wimmuskee|problem=The ltsp-build-client and ltsp-chroot programs asume the portage package and distfiles dirs are at Gentoo defaults when they bind mount it into the chroot. Symlinking to another location won't work, neither is moving the dir although refering correctly in /etc/portage/make.conf, all created packages will still be made in /usr/portage version.|solution=Leave the packagedir to default.}}

=== virtual terminals on clients ===
Several programs will fight for the virtual terminals on the clients. Comment out getty in inittab:
{{File|/opt/ltsp/i686/etc/inittab|commenting example|<pre>
...
# TERMINALS
#c1:12345:respawn:/sbin/agetty 38400 tty1 linux
#c2:2345:respawn:/sbin/agetty 38400 tty2 linux
#c3:2345:respawn:/sbin/agetty 38400 tty3 linux
#c4:2345:respawn:/sbin/agetty 38400 tty4 linux
#c5:2345:respawn:/sbin/agetty 38400 tty5 linux
#c6:2345:respawn:/sbin/agetty 38400 tty6 linux
...</pre>}}

=== Locales ===
ltsp-build-client does not work witch all locale. quickstart actually requires 'C' locale. So if ltsp-build-client shouts with the following message:
{{RootCmd|ltsp-build-client ...
|output=No fetcher for protocol: file}}
unset your locale, remove the directory and restart:
{{RootCmd|unset LANG; unset LC_ALL; ltsp-build-client --purge}}

== External links ==

'''Diskless Install'''
* [http://www.gentoo.org/doc/en/altinstall.xml#doc_chap4 Gentoo Diskless install using PXE boot]
* [http://www.gentoo.org/doc/en/diskless-howto.xml Diskless Nodes with Gentoo]
* [http://syslinux.zytor.com/wiki/index.php/PXELINUX Syslinux' PXE Linux page]
* [http://etherboot.org/wiki/index.php Etherboot Project page]

'''Union Mounts'''
* [http://www.linuxjournal.com/article/7714 Unionfs: Bringing Filesystems Together]
* [http://aufs.sourceforge.net/ Aufs]
* [http://www.mail-archive.com/aufs-users@lists.sourceforge.net/msg00687.html aufs example]
* [https://svn.gentooexperimental.org/genkernel/doc/HOWTO-Genkernel-SSI.txt HOWTO Simple NFS Single System Image with Genkernel 4]

'''Other'''
* [http://wiki.ltsp.org/wiki/Packaging into your favorite Linux distro]
* [http://en.opensuse.org/LTSP/Tips_and_Tricks OpenSUSE LTSP Tips & Tricks]
* [http://freenx.berlios.de/ FreeNX]
* [http://www.tuxradar.com/content/ltsp-thin-clients-made-easy LTSP: Thin clients made easy]
* [http://ubuntuforums.org/showthread.php?t=377397 A Beginner "How To" for gtkrc themes]
* [https://help.ubuntu.com/community/UbuntuLTSP Ubuntu Community LTSP docs]

[[Category:Software]]
