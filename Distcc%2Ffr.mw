<languages />

Distcc est un programme conçu pour répartir les tâches de compilation à travers un réseau à des hôtes participants. Il comprend un serveur, <code>distccd</code> et un client, <code>distcc</code>. Distcc peut travailler en toute transparence avec [http://ccache.samba.org ccache], Portage et Automake moyennant un minimum de configuration. 

Si vous envisagez d'utiliser distcc pour vous aider à démarrer une installation de Gentoo, lisez d'abord la section [[#Using_Distcc_to_Bootstrap|Utiliser Distcc pour démarrer]]. 

== Configuration ==

=== Dépendances ===

Afin d'utiliser Distcc, tous les ordinateurs sur votre réseau doivent posséder la même version de GCC. Pour être plus précis, mélanger 3.3.x (avec x variable) est accepté, mais mélanger 3.3.x avec 3.2.x '''peut''' conduire à des erreurs de compilation ou des erreurs en exécution. 

=== Installer Distcc ===

Il y a quelques options dont vous devriez être conscient avec d'installer distcc. 

Distcc arrive avec un surveillant graphique pour surveiller les tâches que votre ordinateur envoie à l'extérieur pour compilation. Si vous utilisez Gnome, alors mettez 'gnome' dans les options de votre variable USE. Cependant, si vous n'utilisez pas Gnome et désirez quand-même avoir le moniteur, vous devriez mettre 'gtk' dans ces options. 

{{Emerge|distcc}}

{{Important|Rappelez-vous que vous devez installer distcc sur tous les ordinateurs participants.}}

=== Configurer  Portage pour l'utilisation de  Distcc ===

Configurer Portage pour l'utilisation de distcc est simple. Exécutez les étapes suivantes sur chacun des systèmes qui devraient participer à la compilation distribuée : 

{{Emerge|distcc}}

Maintenant, définissez les variables <code>MAKEOPTS</code> et <code>FEATURES</code> comme indiqué ci-dessous. Pour <code>MAKEOPTS</code>, utilisez un nombre convenable pour votre configuration particulière. Une stratégie courante est de définir N comme étant deux fois le nombre de total de processeurs disponibles +1.

{{RootCmd|nano -w /etc/portage/make.conf|output=<pre>
MAKEOPTS="-jN"
FEATURES="distcc"
</pre>
}}

=== Spécifier les hôtes participants  ===

Utilisez la commande <code>distcc-config</code> pour définir la liste des participants. Voici un exemple de quelques hôtes qui pourraient se trouver dans votre liste : 

{{Code|Exemples de définition d'hôtes participant|<pre>
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
</pre>
}}

Il y a aussi plusieurs autres méthodes pour définir les hôtes. Reportez-vous à la page de manuel pour plus de détail.

Si vous désirez compiler sur la machine locale, vous devriez mettre 'localhost' dans la liste des participants. Inversement, si vous ne voulez pas que la machine locale participe (ce qui est souvent le cas) omettez la de la liste. Sur une machine lente, utiliser localhost peut ralentir les choses. Vérifiez la performance de votre configuration.

Cela peut paraître compliqué, mais dans la plupart des cas, une variante des lignes 1 ou 2 fonctionne. 

Comme la plupart des gens n'utilisent pas les lignes 3 ou 4, reportez-vous à [http://distcc.samba.org/man/distcc_1.html à la documentation de distcc] (man distcc) pour une information plus complète qui inclut comment exécuter distcc à travers une connexion SSH. 

Par exemple, pour définir la première ligne de l'exemple précédent : 

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

Éditez le fichier  {{Path|/etc/conf.d/distccd}} en fonction de vos besoins et assurez-vous de définir la directive <code>--allow</code> pour seulement les hôtes auxquels vous accordez votre confiance. Pour une sécurité renforcée, vous devriez utiliser  aussi la directive  <code>--listen</code> afin de dire au démon distcc quelles adresses IP écouter (pour des systèmes multi-adresses). Une information complémentaire sur la sécurité avec distcc est disponible à l'adresse [http://distcc.samba.org/security.html Distcc Security Design] . 

{{Important|Il est important d'utiliser --allow et --listen. Lisez la page de manuel de distcc (distccd manpage) ou le document cité précédemment sur la sécurité pour en savoir plus. }}

Maintenant démarrez votre démon distcc sur tous les ordinateurs participants : 

{{RootCmd|rc-update add distccd default
|/etc/init.d/distccd start}}

=== Configurer  Distcc pour qu'il fonctionne avec Automake ===

Ceci est, dans certains cas, plus facile que de configurer Portage. Ce que vous avez à faire, c'est mettre votre variable <code>PATH</code> à jour pour qu'elle inclut  {{Path|/usr/lib/distcc/bin}} en face du répertoire qui contient  <code>gcc</code> ( {{Path|/usr/bin}} ). Cependant, il faut savoir que si vous utilisez ''ccache'', vous devez placer ''distcc'' après la partie ''ccache'' : 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Vous pouvez placer ceci dans votre fichier {{Path|~/.bashrc}},  ou son équivalent, pour avoir une variable PATH définie à chaque entrée dans la session.

Ensuite, là où vous taperiez normalement  <code>make</code> , vous devriez taper  <code>make -jN</code> (où N est un entier). 

== Compilation croisée ==

Cross-compiling is using one architecture to build programs for another architecture. This can be as simple as using an Athlon (i686) to build a program for a K6-2 (i586), or using a Sparc to build a program for a ppc. This is documented in our [http://www.gentoo.org//doc/en/cross-compiling-distcc.xml DistCC Cross-compiling Guide] . 

== Using Distcc to Bootstrap ==

=== Step 1: Configure Portage ===

Boot your new box with a Gentoo Linux LiveCD and follow the [http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1 installation instructions] up until the bootstrapping part. (See the [http://www.gentoo.org//doc/en/faq.xml#stage12 Gentoo FAQ] for more information about bootstrapping.) Then configure Portage to use distcc: 

{{RootCmd|nano -w /etc/portage/make.conf|output=<pre>
FEATURES="distcc"
MAKEOPTS="-jN"
</pre>
}}

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Step 2: Getting Distcc ===

Install distcc: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Step 3: Setting Up Distcc ===

Run <code>distcc-config --install</code> to setup distcc; substitute <code>host*</code> with the IP addresses or hostnames of the participating DistCC nodes.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc is now set up to bootstrap! Continue with the official installation instructions and ''do not forget'' to re-emerge distcc after <code>emerge system</code> . This is to make sure that all of the dependencies you want are installed as well. 

{{Note|During bootstrap and <code>emerge system</code> distcc may not appear to be used. This is expected as some ebuilds do not work well with distcc, so they intentionally disable it.}}

== Troubleshooting ==

=== Some Packages Don't Use Distcc ===

As you emerge various packages, you'll notice that some of them aren't being distributed (and aren't being built in parallel). This may happen because the package's Makefile doesn't support parallel operations or the maintainer of the ebuild has explicitly disabled parallel operations due to a known problem. 

Sometimes distcc might cause a package to fail to compile. If this happens for you, please [http://bugs.gentoo.org report] it to us. 

=== Mixed GCC Versions ===

If you have different GCC versions on your hosts, there will likely be very weird problems. The solution is to make certain all hosts have the same GCC version. 

Recent Portage updates have made Portage use <code>${CHOST}-gcc</code> instead of <code>gcc</code> . This means that if you're mixing i686 machines with other types (i386, i586) you will run into problems. A workaround for this may be to <code>export CC='gcc' CXX='c++'</code> or to put it in {{Path|/etc/portage/make.conf}} . 

{{Important|Doing this explicitly redefines some behavior of Portage and may have some weird results in the future. Only do this if you're mixing CHOSTs.}}

=== -march=native ===

Starting with GCC 4.3.0, the compiler supports the <code>-march=native</code> switch which turns on CPU autodetection and optimizations that are worth being enabled on the processor the GCC is running at. This is a problem with <code>distcc</code> as it allows mixing of code optimized for different processors (like AMD Athlon and Intel Pentium). ''Don't'' use <code>-march=native</code> or <code>-mtune=native</code> in your <code>CFLAGS</code> or <code>CXXFLAGS</code> when compiling with <code>distcc</code> . 

== Distcc Extras ==

=== Distcc Monitors ===

Distcc ships with two monitors. The text-based one is always built and is called <code>distccmon-text</code> . Running it for the first time can be a bit confusing, but it is really quite easy to use. If you run the program with no parameter it will run once. However, if you pass it a number it will update every N seconds, where N is the argument you passed. 

The other monitor is only turned on if you enabled <code>gtk</code> or <code>gnome</code> in your <code>USE</code> flags. This one is GTK+ based, runs in an X environment and it is quite lovely. For Gentoo the GUI monitor has been called <code>distccmon-gui</code> for less confusion. Elsewhere it may be referred to as <code>distccmon-gnome</code> . 

{{RootCmd|distccmon-text N}}

or run <code>distccmon-gui</code>:

{{RootCmd|distccmon-gui}}

To monitor Portage's distcc usage you can use:
{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text N
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|If your distcc directory is elsewhere, change the DISTCC_DIR variable accordingly.}}

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:

* Lisa Seelye
* Mike Frysinger
* Erwin
* Sven Vermeulen
* Lars Weiler
* Tiemo Kieft
* nightmorph
