<languages />

{{Metadata|abstract=Distcc est un programme conçu pour répartir les tâches de compilation à des hôtes participants sur un réseau.Il comprend un programme serveur, ditccd, et un programme client distcc. Distcc peut travailler de manière transparente avec  ccache, Portage, et Automake après un minimum de configuration.}}

{{InfoBox stack
|{{InfoBox homepage|https://code.google.com/p/distcc/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox github|distcc/distcc}}
}}

[https://github.com/distcc/distcc Distcc] est un programme conçu pour répartir des tâches de compilation à travers un réseau vers des hôtes participants. Il comprend un serveur, {{c|distccd}}, et un client, {{c|distcc}}. Distcc peut travailler en toute transparence avec [http://ccache.samba.org ccache], [[Portage]] et Automake moyennant un minimum de configuration. 

Si vous envisagez d'utiliser {{c|distcc}} pour vous aider à préparer la chaîne des outils de compilation pour une installation de Gentoo, assurez vous de lire préalablement la section [[#Utiliser_distcc_pour_amorcer|concernant l'utilisation de distcc pour l'amorçage (compilation des outils de compilation)]]. 

== Installation ==

Avant de configurer {{c|distcc}}, commençons par nous intéresser à l'installation de {{Package|sys-devel/distcc}} sur tous les hôtes.

=== Dépendances communes à tous les hôtes ===

Afin d'utiliser {{c|distcc}}, tous les ordinateurs sur votre réseau doivent posséder la même version de GCC. Pour être plus précis, mélanger 3.3.x (avec x variable) est accepté, mais mélanger 3.3.x avec 3.2.x '''peut''' conduire à des erreurs de compilation ou des erreurs en exécution. 

=== Installation du logiciel ===

Distcc comprend un utilitaire de surveillance graphique des tâches de compilation externes envoyées par un ordinateur. La présence de celui-ci est contrôlée par l'option <code>gtk</code> de la variable <code>USE</code>.

Une fois la variable USE configurée, installez le packet {{Package|sys-devel/distcc}}.

{{Emerge|sys-devel/distcc}}

{{Important|Rappelez-vous que vous devez installer {{Package|sys-devel/distcc}} sur tous les ordinateurs participants.}}

=== Démarrage automatique du daemon distcc ===

Afin de mettre en place le démarrage automatique de {{c|distccd}}, suivez les instructions suivantes, en fonction du système d'initialisation que vous utilisez.

==== Avec OpenRC ====

Éditez le fichier {{Path|/etc/conf.d/distccd}} en fonction de vos besoins et assurez-vous de définir la directive <code>--allow</code> pour seulement les hôtes auxquels vous accordez votre confiance. Pour une sécurité renforcée, utilisez aussi la directive <code>--listen</code> afin de dire au daemon {{c|distccd}} quelles adresses IP écouter (pour les systèmes multi-adresses). Des informations complémentaires sur la sécurité avec distcc sont disponibles à l'adresse [http://distcc.samba.org/security.html Distcc Security Design].

L'exemple suivant autorise les clients distcc tournant sur <code>192.168.0.4</code> et <code>192.168.0.5</code> à se connecter au serveur {{c|distccd}} local.

{{FileBox|filename=/etc/conf.d/distccd|title=Autorisation de connexion depuis des clients spécifiques au serveur distccd|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important|Il est important d'utiliser <code>--allow</code> et <code>--listen</code>. Lisez la page de manuel de {{c|distccd}} (distccd manpage) ou le document sur la sécurité cité précédemment pour en savoir plus. }}

Maintenant démarrez votre daemon {{c|distccd}} sur tous les ordinateurs participants : 

{{RootCmd|rc-update add distccd default
|rc-service distccd start}}

==== Avec systemd ====

Éditez {{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} afin d'ajouter les clients au format CIDR. Voici un exemple:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=Configuration d'ALLOWED_SERVERS|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

{{Note| Le nom "ALLOWED_SERVERS" peut porter à confusion, étant donné qu'il indique quels clients ont le droit de se connecter au serveur distccd local. Quoi qu'il en soit, c'est la variable dont la valeur est utilisée par le service distccd pour l'option <code>--allow</code> – se référer à {{Path|/usr/lib/systemd/system/distccd.service}}.}}

Recharger les nouvelles configurations:

{{RootCmd|systemctl daemon-reload}}

Activer le démarrage automatique de {{c|distccd}} et démarrer le service :

{{RootCmd|systemctl enable distccd
|systemctl start distccd}}

== Configuration ==

Jetons maintenant un œil à la configuration de {{c|distcc}}.

=== Spécification des hôtes participants ===

Utilisez la commande {{c|distcc-config}} pour définir la liste des participants. 

Voici quelques exemples de définition d’hôtes. Dans la plupart des cas, des variations des lignes 1 et 2 suffisent. Cette dernière inclue la syntaxe <code>/limit</code> afin d'informer {{c|distcc}} du nombre maximal de taches à lancer sur le nœud. Plus d'informations sur la syntaxe employée aux lignes 3 et 4 sont disponibles sur [http://distcc.googlecode.com/svn/trunk/doc/web/man/distcc_1.html  le manuel de distcc].

{{CodeBox|title=Exemples de définition d'hôtes participant|1=
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
}}

There are also several other methods of setting up hosts.  See the {{c|distcc}} man page ({{c|man distcc}}) for more details.

Si la machine locale doit elle aussi compiler, indiquez <code>localhost</code> dans la liste des hôtes participants. À l'inverse, si la machine locale ne participe pas à la compilation (ce qui est souvent le cas), omettez la de la liste. Sur une machine lente, utiliser <code>localhost</code> peut ralentir les choses. Assurez vous de la performance de votre configuration en effectuant des tests.

Configurons {{c|distcc}} afin d'utiliser les hôtes mentionnés par la première ligne de l'exemple :

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

=== Utiliser distcc avec Portage ===

Il est aisé de configurer [[Portage]] pour qu'il utilise {{c|distcc}}. Il suffit pour cela d'activer la fonctionnalité {{c|distcc}} et de choisir une valeur décente pour le nombre de taches de compilation simultanées (étant donné que {{c|distcc}} augmente le nombre de ressources disponible pour la compilation).

Set the <var>MAKEOPTS</var> variable and <var>FEATURES</var> variable as shown below.

Une stratégie courante consiste à
* mettre pour valeur de <code>N</code> le double du nombre "total" (locaux + distants) de cœurs du processeur + 1, et
* mettre pour valeur de <code>M</code> le nombre de cœurs du processeur local.

The use of <code>-lM</code> in the <var>MAKEOPTS</var> variable will prevent spawning too many tasks when some of the {{c|distcc}} cluster hosts are unavailable (increasing the amount of simultaneous jobs on the other systems) or when an ebuild is configured to disallow remote builds (such as with gcc). This is accomplished by refusing to start additional jobs when the system load is at or above the value of <code>M</code>.

{{FileBox|filename=/etc/portage/make.conf|title=Configuration de  MAKEOPTS et FEATURES|lang=bash|1=
# Remplacez N et M avec les bonnes valeurs, comme calculé précédemment
MAKEOPTS="-jN -lM"
FEATURES="distcc distcc-pump"
}}

For instance, when there are two quad-core host PCs running {{c|distccd}} and the local PC has a dual core CPU, then the <var>MAKEOPTS</var> variable could look like this:

{{FileBox|filename=/etc/portage/make.conf|exemple de MAKEOPTS pour  2 quad-core (PC distants) et un dual core (PC local) |lang=bash|1=
# 2 remote hosts with 4 cores each = 8 cores remote
# 1 local host with 2 cores = 2 cores local
# total number of cores is 10, so N = 2*10+1 and M=2
MAKEOPTS="-j21 -l2"
}}

While editing the {{Path|make.conf}} file, make sure that it does not have <code>-march=native</code> in the <var>CFLAGS</var> or <var>CXXFLAGS</var> variables. {{c|distccd}} will not distribute work to other machines if <code>march</code> is set to <code>native</code>. The appropriate <code>-march=</code> value can be obtained by running the following command:

{{Cmd|gcc -v -E -x c -march{{=}}native -mtune{{=}}native - < /dev/null 2>&1 {{!}} grep cc1 {{!}} perl -pe 's/ -mno-\S+//g; s/^.* - //g;'}}

Pour plus d'information, consultez [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Résolution de <code>-march=native</code> pour distcc]

=== Utiliser distcc avec automake ===

This is, in some cases, easier than the Portage setup. All that is needed is to update the <var>PATH</var> variable to include {{Path|/usr/lib/distcc/bin/}} in front of the directory that contains {{c|gcc}} ({{Path|/usr/bin/}}). However, there is a caveat. If {{c|ccache}} is used, then put the {{c|distcc}} location after the {{c|ccache}} one: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Put this in the user's {{Path|~/.bashrc}} or equivalent file to have the <var>PATH</var> set every time the user logs in, or set it globally through an {{Path|/etc/env.d/}} file.

Au lieu de simplement appeler {{c|make}}, ajoutez s'y un paramètre d'invocation <code>-jN</code> (où <code>N</code> est un entier naturel). La valeur de <code>N</code> dépend du réseau et du type des ordinateurs utilisés pour la compilation. Une approche heuristique pour trouver la bonne valeur a été donné plus tôt dans cet article.

== Utiliser distcc pour amorcer ==

Utiliser {{c|distcc}} pour amorcer (c'est à dire construire une chaîne d'outils avant d'installer le reste du système) requiert quelques étapes supplémentaires.

=== Étape 1: configurer Portage ===

Démarrez la nouvelle machine avec un LiveCD de Gentoo Linux et suivez les [[Handbook:AMD64|instructions d'installation]] tout en tenant compte des instructions sur le démarrage présentes dans la [[FAQ|FAQ de Gentoo]] comme source d'information sur l'amorçage. Configurez ensuite Portage pour utiliser {{c|distcc}}: 

{{FileBox|/etc/portage/make.conf|title=Configurer Portage pour utiliser distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Mettez aussi à jour la variable <code>PATH</code> de votre session d'installation:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Étape 2: obtenir distcc ===

Installez {{Package|sys-devel/distcc}}: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Étape 3: configurer distcc ===

Exécutez la commande {{c|distcc-config --install}} pour configurer distcc; remplacez les <code>host#</code> de l'exemple par les adresses IP ou les noms d'hôte des nœuds participant.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc est maintenant configuré pour l’amorçage ! Continuez avec les instructions d'installation  officielles et ''n'oubliez pas'' de lancer {{c|emerge distcc}} après avoir fait {{c|emerge @system}}. Cela permet d'être sûr que toutes les dépendances nécessaires sont installées. 

{{Note|Pendant l’amorçage et lors le l'exécution de  {{c|emerge @system}}, {{c|distcc}} peut sembler non utilisé. Ceci est prévisible, car certains ebuilds ne fonctionnent pas bien avec distcc et l'ont intentionnellement désactivé.}}

== Suppléments distcc ==

L'application {{c|distcc}} a quelques fonctionnalités supplémentaires et des outils pour aider à travailler dans un environnement {{c|distcc}}.

=== Surveillant distcc === 

Distcc arrive avec deux utilitaires de surveillance. L'un, à base de texte, est toujours compilé et est appelé {{c|distccmon-text}}. Le lancer pour la première fois peut paraître confus, mais il est en fait facile à utiliser. Si le programme est utilisé sans paramètre, il ne s'actionnera qu'une seule fois. Cependant, s'il lui est passé un nombre <code>N</code>, il se mettra à jour toutes les <code>N</code> secondes (avec <code>N</code> l'argument qui lui a été passé).

{{Cmd|distccmon-text 10}}

L'autre utilitaire de surveillance n'est activé qu'à travers l'option <code>gtk</code> de la variable <code>USE</code>. Celui-ci est basé sur GTK+, tourne dans un environnement X et est très agréable. Pour Gentoo, le surveillant graphique a été renommé {{c|distccmon-gui}} pour éviter la confusion. Il était originellement appelé {{c|distccmon-gnome}}.

{{Cmd|distccmon-gui}}

Pour surveiller l'utilisation de {{c|distcc}} par Portage:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|If the distcc directory is elsewhere, change the <var>DISTCC_DIR</var> variable accordingly.}}

A trick is to set <var>DISTCC_DIR</var> in environment variables:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

Mettez maintenant l'environnement à jour:

{{RootCmd|env-update
|source /etc/profile}}

Pour finir, démarrez l'application graphique:

{{RootCmd|distccmon-gui}}

=== Utiliser SSH pour les communications de distcc ===

Configurer distcc via SSH demande d'éviter quelques pièges. Tout d'abord, générez une paire de clés SSH sans définir le mot de passe. Restez conscient du fait que Portage compile les programmes en tant que l'utilisateur Portage (ou en tant que root si <code>FEATURES="userpriv"</code> n'est pas défini). Le dossier home de l'utilisateur Portage est {{Path|/var/tmp/portage/}}, ce qui veut dire que les clés doivent être stockées dans {{Path|/var/tmp/portage/.ssh/}}.

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Ensuite, créez une section pour chacun des hôtes dans le fichier de configuration SSH :

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Ajouter des sections par hôte|1=
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName
 
Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
}}

Envoyez la clef publique à chaque nœud de compilation:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub UserName@CompilationNode}}

Assurez-vous également que chaque hôte est disponible dans le fichier {{Path|known_hosts}}:

{{RootCmd|ssh-keyscan -t rsa <compilation-node-1> <compilation-node-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Réparez les permissions de fichiers:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

Pour mettre en place les hôtes <code>test1</code> et <code>test2</code>, lancez:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Notez le signe <code>@</code> (symbole @) qui spécifie les hôtes SSH à distcc.

Pour finir, indiquez à {{c|distcc}} quel binaire SSH utiliser"

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
DISTCC_SSH="ssh"
}}

Il n'est pas nécessaire de lancer le script d'initialisation (initscript) sur les hôtes lorsque {{c|distcc}} communique via SSH.

== Dépannage ==

<!-- Consider moving this section to a separate subpage if it becomes too large -->

Si un problème apparaît lors de l'utilisation de {{c|distcc}}, cette section pourra peut être aider à le résoudre.

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- To be removed when the bug is resolved and the fixed package is stable -->

Au jour du 22 Janvier 2015, la création du fichier {{Path|distccd.log}} dans {{Path|/var/log/}} echoue lors de l'emergement. Ceci semble n'affecter que la version 3.1-r8 de distcc. Ce bug est en cours de correction (plus plus d'information, voir {{Bug|477630}}). Il est possible de contourner le problème en créant manuellement le fichier de log, lui assigner un propriétaire convenable et redémarrer le daemon de distcc.

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

Continuez par mettre à jour le chemin de {{Path|/var/log}} présent dans le fichier de configuration de {{c|distcc}} {{Path|/etc/conf.d/distccd}} afin de pointer vers le dossier {{Path|distcc}} créé dans l’étape précédente.

{{FileBox|filename=/etc/conf.d/distccd|title=Updating log path|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

Pour finir, redémarrez le service distccd:

{{RootCmd|/etc/init.d/distccd restart}}

=== Quelques paquets n'utilisent pas distcc ===

Lorsque certains paquets sont installés, les utilisateurs remarqueront que la compilation de certain d'entre-eux n'est pas répartie (et ils ne sont pas compilés en parallèle). Ceci peut survenir du fait que le {{Path|Makefile}} du paquet ne prenne pas en charge les opérations en parallèle, ou que le mainteneur du ebuild les ai explicitement désactivées suite à un problème connu. 

Parfois {{c|distcc}} peut faire échouer la compilation d'un paquet. Si cela arrive, ayez s'il vous plaît l’amabilité de [https://bugs.gentoo.org/ le rapporter].

=== Versions mélangées de GCC ===

Si l'environnement héberge plusieurs versions différentes de GCC, il est probable que des problèmes étranges se produisent. La solution est alors de faire en sorte que tous les hôtes aient la même version de GCC. 

De récentes mises à jour de Portage ont fait que Portage utilise <code>${CHOST}-gcc</code> (tiret gcc) au lieu de <code>gcc</code> . Ceci veut dire que si des machines i686 sont mélangées avec d'autres types (i386, i586), des soucis de compilation se présenteront. Un contournement à cela peut consister à lancer :

{{RootCmd|export CC{{=}}'gcc' CXX{{=}}'c++'}}

It is also possible to set the <var>CC</var> and <var>CXX</var> variables in {{Path|/etc/portage/make.conf}} to the values list in the command above.

{{Important|Faire cela redéfinit explicitement quelques comportements de Portage et peut conduire à des résultats étranges dans le futur. Ne faites cela que si mélanger les CHOSTs est inévitable.}}

=== -march=native ===

À partir de GCC 4.3.0, le compilateur prend en charge l'option <code>-march=native</code>, qui active l’auto-détection des processeurs et les optimisations qui valent la peine d’être activées sur le processeur faisant tourner GCC. Cela pose un problème lors de l'utilisation de {{c|distcc}}, car cela engendre le mélange de codes optimisés pour différents processeurs.
Par exemple, faire tourner {{c|distcc}} avec <code>-march=native</code> sur un réseau de nœuds contenant un système utilisant un AMD Athlon et un système utilisant un Intel Pentium mélangera du code compilé sur chacun des hôtes. Une partie du code compilé sera alors optimisée pour AMD Athlon tandis qu'une autre sera optimisée pour Intel Pentium.

Prenez garde à cette avertissement:

{{Warning|N'utilisez '''PAS''' <code>-march{{=}}native</code> ou <code>-mtune{{=}}native</code> dans les variables <code>CFLAGS</code> et <code>CXXFLAGS</code> de {{Path|make.conf}} lors d'une compilation avec {{c|distcc}}.}}

Pour connaître les options que GCC activera lorsqu'il est appelé avec <code>-march=native</code>, exécutez ce qui suit :

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

== Articles connexes ==

* Le [[Distcc/Cross-Compiling|Guide de la compilation croisée avec distcc]] explique comment utiliser une architecture pour compiler des programmes pour une autre architecture avec {{c|discc}}. Cela peut simplement concerner l'utilisation d'un Athlon (i686) pour compiler un programme destiné à un K6-2 (i586), ou l'utilisation d'un SPARC pour compiler un programme destiné à un PowerPC.

== Ressources externes ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc]
* [https://github.com/distcc/distcc Distcc homepage]

{{Migrated|originalauthors=Lisa Seelye, Mike Frysinger, Erwin, Sven Vermeulen, Lars Weiler, Tiemo Kieft and nightmorph}}
