<languages />

Bu sayfada kaynak kodu, güvenli ve mantıklı CFLAGS ve CXXFLAGS kulllanarak optimize etmekle ilgili bilgi verilmektedir. Ayrıca derlemeyi optimize etmenin arkasındaki genel mantığı da ele almaktadır.

== Tanıtım ==

=== CFLAGS ve CXXFLAGS nedir? ===

CFLAGS ve CXXFLAGS değerleri, GNU Compiler Collection (<code>GCC</code>) tarafından kaynak kodu derlerken ne tür değişiklikler yapılması gerektiğini belirleyen ortam değişkenleridir. CFLAGS değerleri C dili ile yazılmış kodları etkiler, CXXFLAGS ise C++. 

Derlenen programın üreteceği hata ayıklama (debug) mesajlarının yoğunluğunu düşürebilir, hata durumunda gösterilecek uyarı mesajlarını artırabilir ve elbette üretilen kodun sisteminiz için optimize edilmesini sağlayabilirler. [http://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html#Invoking-GCC GCC yardım sayfası]nda kullanılabilecek seçenekler ve açıklamaları bulunmaktadır. 

=== Nasıl kullanılırlar? ===

CFLAGS ve CXXFLAGS iki şekilde kullanılabilir. İlk olarak, her uygulamaya özel olarak derleme sırasında automake tarafından üretilen Makefile dosyalarında bulunabilirler. 

Ancak bu yöntem Portage içerisindeki paketleri kurarken uygulanmamalıdır. Bunun yerine {{Path|/etc/portage/make.conf}} dosyasındaki CFLAGS ve CXXFLAGS değerlerini ayarlamalısınız. Tüm paketler, burada seçtiğiniz yapılandırmaya göre derlenecektir. 

{{Code|/etc/portage/make.conf dosyasındaki CFLAGS değerleri|<pre>
CFLAGS="-march=athlon64 -O2 -pipe"
CXXFLAGS="${CFLAGS}"
</pre>
}}

Gördüğünüz gibi, CXXFLAGS değerleri CFLAGS'a atanan değerlerin aynısını kullanmakta. Muhtemelen hatasız bir derleme için ihtiyacınız olan durum da budur. Normal şartlarda CXXFLAGS için farklı bir değer belirtmeye ihtiyaç duymamanız gerekir. 

=== Hatalı düşünceler ===

CFLAGS ve CXXFLAGS değerleri daha küçük veya daha hızlı çalışan dosyalar üretmekte yardımcı olabilir. Ancak bazı durumlarda yavaşlama, boyut büyümesi, derlenen dosyanın istendiği gibi çalışmaması ve tabi ki derleme sırasında hatalara sebep olabilir! 

CFLAGS değerleri sihirli değnek değildir; otomatik olarak sisteminizi daha ufak ve daha hızlı bir hale getiremezler. Gereğinden fazla ve gereksiz değerler eklemek sisteminizi çorbaya çevirebilir ve başladığınızdan daha kötü bir noktaya ulaştırabilir. 

İnternette bulacağınız övgüler bir yana, agresif CFLAGS ve CXXFlags değerleri uygulamalarınıza yarardan çok zarar getirme eğilimindedir. Bu değerlerin var olma sebebinin özel amaçlarda özel yerlerde kullanılması olduğunu unutmayınız. Bir CFLAGS değerinin bir parça kod veya bir uygulama üzerinde işe yarıyor olması tüm sisteminizi bu flag kullanılarak derlemenizin faydanıza olacağı anlamına gelmez. 

=== Hazır mısınız? ===

Karşılaşacağınız riskleri de bildiğinize göre artık bazı mantıklı ve güvenli değerleri incelemenin zamanı geldi. Bu değerler sisteminizi sağlıklı tutacak ve [http://bugs.gentoo.org Bugzilla]'ya raporlayacağınız hatalarda geliştiricilere yardımcı olacak değerlerdir. Geliştiriciler hata raporlarında genellikle (agresif değerlerin yazılıma zarar verebileceğini bildikleri için) problem oluşturan yazılımın basit CFLAGS değerleri ile tekrar derlenmesini ve problemin halen devam edip etmediğinin incelenmesini isterler. 

== Optimizasyon ==

=== Temel ===

CFLAGS ve CXXFLAGS kullanılmasının amacı sonuçta mümkün olduğu kadar güvenilir ve hızlı uygulamalara/sisteme sahip olmanız için kodları sisteminize uyumlu şekilde derlemektir. Bu seçeneklerden her CPU mimarisine göre en iyi çalışanlardan bahsedeceğiz. Ardından dikkat etmeniz gereken agresif seçeneklere de değineceğiz. <code>GCC</code> yardım sayfasındaki tüm seçenekleri açıklamayacağız (ki yüzlerce var), yalnızca en bilinen ve temel bayrakları ele alacağız. 

{{Note|Bir seçeneğin tam olarak ne yaptığından emin değilseniz, [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options GCC yardım sayfası]nın ilgili bölümüne bakın. Anlamazsanız Google'ı deneyin veya <code>GCC</code> [http://gcc.gnu.org/lists.html e-posta listeleri]ni deneyin.}}

=== -march ===

İlk ve en önemli seçenek <code>-march</code>. Bu seçenek derleyiciye kodun hangi [http://en.wikipedia.org/wiki/Microarchitecture işlemci mimarisi]ne uygun kod üretileceğini belirtir. Farklı işlemcilerin farklı özellikleri, çalışma yöntemleri ve desteklediği değerler bulunmaktadır. <code>-march</code> değeri ile derleyici sahip olduğunuz işlemcinin kapasitesine ve özelliklerine uygun bir kod üretecektir. 

{{Path|/etc/portage/make.conf}} dosyasındaki  CHOST değeri mimari seçeneğinizi iletse de, <code>-march</code> halen daha uyumlu kod üretmek için kullanılabilir. x86 ve x86-64 işlemciler (ve bazı diğerleri) <code>-march</code> bayrağından faydalanabilir. 

Ne tür bir işlemciniz var? Öğrenmek için aşağıdaki kodu çalıştırabilirsiniz: 

{{Cmd|cat /proc/cpuinfo}}

Şimdi de <code>-march</code> değerini iş başında görelim. Aşağıdaki örnek eski bir Pentium III işlemci için: 

{{Code|/etc/portage/make.conf: Pentium III|<pre>
CFLAGS="-march=pentium3"
CXXFLAGS="${CFLAGS}"
</pre>
}}

Şimdi de 64-bit bir işlemci için bir örnek: 

{{Code|/etc/portage/make.conf: AMD64|<pre>
CFLAGS="-march=athlon64"
CXXFLAGS="${CFLAGS}"
</pre>
}}

Hangi tür işlemciye sahip olduğunuzdan veya işlemciniz için ne kullanacağınızdan halen emin değilseniz <code>-march=native</code> kullanın. Bu değeri kullanarak, GCC'nin işlemcinizi otomatik olarak tanıyarak en uyumlu değerleri kendi belirlemesini sağlayabilirsiniz. '''Ancak farklı bir CPU'da çalışacak bir paket derliyorsanız bu seçeneği kullanmayın!''' 

Yani bir bilgisayarda derleme yapıp derlediğiniz paketleri farklı bir bilgisayarda (mesela daha eski ve yavaş bir cihazda) çalıştırmak istiyorsanız <code>-march=native</code> kullanmamalısınız. "Native" (doğal) seçeneği derlemenin sonunda üretilen kodun yalnızca derlendiği işlemci türünde çalışabileceği anlamına gelir. AMD Athlon 64 işlemci üzerinde <code>-march=native</code> kullanarak derlediğiniz bir paket VIA C3 işlemci üzerinde çalışamayacaktır. 

Ayrıca <code>-mtune</code> ve <code>-mcpu</code> bayraklarını da kullanabilirsiniz. Bunlar normalde yalnızca uyumlu <code>-march</code> seçeneği olmadığında kullanılan seçeneklerdir. Bazı işlemci mimarileri <code>-mtune</code> hatta <code>-mcpu</code> kullanımını gerektirebilir. Malesef <code>GCC</code>'nin her bayrak için davranışı bir mimariden diğerine farklılık göstermektedir. 

x86 ve x86-64 işlemcilerde <code>-march</code> kullandığınızda sonuç olarak işlemciniz ile tam uyumlu kodlar alırsınız, yani üretilen paketler farklı veya daha eski işlemcilerde çalışmaz. Paketleri yalnızca derlediğiniz sistemde kullanacaksanız <code>-march</code> kullanın. <code>-mtune</code> ve <code>-mcpu</code> seçeneklerini yalnızca daha eski işlemcilere (i386 ve i486 gibi) uyumlu paketler derleme amacındaysanız değerlendirin. <code>-mcpu</code> seçeneği kullanıldığında birçok gerekli değeri (ABI gibi) dikkate almadığı için, bu seçeneği x86 ve x86-64 sistemlerde kullanmayın. 

Sadece x86/x86-64 olmayan işlemciler (Sparc, Alpha ve PowerPC gibi) <code>-mtune</code> veya <code>-mcpu</code> seçeneklerine ihtiyaç duyabilir. Bu mimarilerde bu seçenekler, x86/x86-64 mimarideki <code>-march</code> seçeneğinin yaptığı görevi yapmaktadır. Emin olmak için [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options GCC yardım sayfası]nı incelediğinize emin olunuz. 

{{Note|Daha fazla <code>-march</code>/ <code>-mtune</code>/ <code>-mcpu</code> tavsiyesi için lütfen [http://www.gentoo.org//doc/en/handbook/ Gentoo Kurulum Belgesi]nin 5. bölümünü inceleyin. Ayrıca <code>GCC</code>'nin [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options mimariye özel belgeleri] de yardımcı olabilir.}}

=== -O ===

Gelecek seçeneğimiz <code>-O</code>. Bu seçenek genel optimizasyon değerini kontrol etmekte. Yüksek optimizasyon kullandığınızda biraz daha yavaş ve RAM tüketen bir derleme sürecine sahip olabilirsiniz. 

5 farklı <code>-O</code> ayarı bulunmaktadır:  <code>-O0</code> , <code>-O1</code> , <code>-O2</code> , <code>-O3</code> ve <code>-Os</code>. {{Path|/etc/portage/make.conf}} dosyasında bunlardan yalnızca birini kullanmalısınız. 

<code>-O0</code> istisna olmak üzere, tüm <code>-O</code> seçenekleri bazı farklı optimizasyon bayraklarını aktifleştirmektedir. Detay için GCC'nin [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options optimizasyon seçenekleri] sayfasını inceleyebilirsiniz. 

Optimiasyon seviyelerinin yaptıklarına bir göz atalım: 

*  <code>-O0</code> : Bu seviye (bir "O" harfinin ardından eklenmiş sıfır) tıpkı <code>-O</code> kullanılmamış gibi tüm optimiasyon seçeneklerini kapalı konuma getirir. Bu sayede derleme zamanı azalır ve hata ayıklamak kolaylaşır ancak bazı uygulamalar optimizasyon olmadan düzgün çalışamayacaktır. Hata ayıklama amacı dışında bu seçenek önerilmemektedir.

*  <code>-O1</code> : En temel optimizasyon seviyesidir. Derleme süresini çok yükseltmeden daha hızlı ve daha ufak kodlar üretir. Gayet temel bir seçenektir ancak genellikle her zaman güvenlidir diyebiliriz.

*  <code>-O2</code> : <code>-O1</code> seçeneğinin bir üstü, özel bir ihtiyacınız yok ise ''tavsiye edilen'' optimizasyon seçeneği. <code>-O2</code>,  <code>-O1</code>'in açtığı bayrakların yanı sıra bazı bayraklar açmaktadır. Bu seçenekle yine derleyici derleme zamanını fazla uzatmadan güvenli ve hızlı kod üretmeye çalışacaktır.

*  <code>-O3</code> : Mümkün olan en üst düzey optimizasyondur. Derleme süresini ve kullanılan RAM'i artırma pahasına daha fazla optimizasyon yapar. Sonuçta daha hızlı bir sistem garanti etmez, hatta fazla kaynak tüketiminden dolayı bazı durumlarda daha yavaş bir sonuçla karşılaşabilirsiniz. <code>-O3</code>'ün ayrıca bazı paketleri çalışmaz hale getirdiği bilinmektedir. Bu yüzden kullanımı tavsiye edilmemektedir.

*  <code>-Os</code> : Bu seçenek üretilen kodun boyutunu optimize eder. Boyutta büyümeye sebep olmayacak tüm <code>-O2</code> seçeneklerini açar. Çok az disk alanı ve/veya işlemcisinde ufak önbellekleri bulunan bilgisayarlarda kullanışlı olabilir.

Önceden de belirttiğimiz gibi, <code>-O2</code> önerilen optimizasyon seviyesidir. Eğer derlemeniz hata ile sonlandıysa ve <code>-O2</code> kullanmıyorsanız, öncelikle kullanarak tekrar deneyin. Hata durumlarında optimizasyonu azaltmayı (<code>-O1</code>), hatta kapatmayı (<code>-O0 -g2 -ggdb</code>) deneyebilirsiniz.

=== -pipe ===

Bir başka sık kullanılan bayrak da <code>-pipe</code>'dır. Derleme sonrası üretilen kodda bir değişikliğe sebep olmaz ancak derleme işleminin daha hızlı gerçekleştirilmesini sağlar. Derleyiciye, derleme sırasında geçici dosyalar kullanmak yerine [http://en.wikipedia.org/wiki/Pipeline_(Unix) pipe] kullanmasını belirtir. Bu işlem daha fazla RAM kullanımına sebep olduğu için, eğer cihazınızda RAM sıkıntısı yaşıyorsanız ve derleme sırasında problem oluşuyor ise bu seçeneği kullanmayın. 

=== -fomit-frame-pointer ===

Bu da üretilen kodun azaltılmasını sağlayan yaygın bir seçenektir. Hata ayıklamayı zorlaştırmadığı platformlarda (x86-64 gibi) <code>-O</code> seçeneğinin her seviyesinde (<code>-O0</code> hariç) otomatik olarak açılır. GCC belgeleri her mimari için bu durumu netleştirmemektedir ancak x86 üzerinde kendiniz ekleyerek açmanız gerektiği bilinmektedir. Bu seçeneği kullanmak hata ayıklamayı oldukça zorlaştırır. 

Özel olarak Java ile yazılmış uygulamaların hata ayıklamasını neredeyse imkansız hale getirir. Yine de bu bayrak yalnızca Java kodlarını etkilememektedir. Yani işe yaramasının bir bedeki olarak problem oluşturan uygulamalarınızın hata kaydı çıktıları işe yaramaz duruma gelecektir. Hata ayıklama işlemine ihtiyacınız yok ise ve farklı hata ayıklama seçeneklerini (<code>-ggdb</code> gibi) kullanmıyorsanız <code>-fomit-frame-pointer</code> kullanmayı deneyebilirsiniz. 

{{Important|<code>-fomit-frame-pointer</code> seçeneğini benzeri olan <code>-momit-leaf-frame-pointer</code> ile '''kullanmayın'''. Ayrıca <code>-momit-leaf-frame-pointer</code> seçeneğinin performans üzerinde negatif etkisi olduğu bilinmektedir.}}

=== -msse, -msse2, -msse3, -mmmx, -m3dnow ===

Bu bayraklar x86 ve x86-64 mimarilerinde bulunan [http://en.wikipedia.org/wiki/Streaming_SIMD_Extensions SSE], [http://en.wikipedia.org/wiki/SSE2 SSE2] , [http://en.wikipedia.org/wiki/SSSE3 SSE3] , [http://en.wikipedia.org/wiki/MMX MMX] ve [http://en.wikipedia.org/wiki/3dnow 3DNow!] seçeneklerini aktifleştirmek için bulunmaktadır. Bu seçenekler çokluortam, oyun ve diğer birçok matematiksel işlem içeren uygulamada performansı yükseltmektedir ve güncel işlemcilerin çoğunda bulunmaktadır. 

{{Important|<code>cat /proc/cpuinfo</code> komutunu çalıştırarak işlemcinizin bu bayrakları desteklediğine emin olun. Aldığınız çıktı işlemcinizin hangilerini desteklediğini gösterecektir. '''pni''' seçeneğinin SSE3 ile aynı anlama geldiğini hatırlatmak isteriz.}}

Doğru <code>-march</code> değerini kullandığınız sürece normal şartlarda bu seçenekleri {{Path|/etc/portage/make.conf}} dosyasına eklemenize gerek bulunmamakta. Örneğin <code>-march=nocona</code> seçeneği zaten içerisinde <code>-msse3</code> barındırmakta. Bazı yeni VIA ve Amd64 işlemcilerde <code>-march</code>'ın kapsamadığı seçenekler (sse3 gibi) bulunabilmekte. Bu tür durumlarda <code>cat /proc/cpuinfo</code> kodunun çıktısına bakarak gerekli eklemeyi yapmanız gerekecektir. 

{{Note|İşlemci bayraklarının tanınması ile ilgili GCC [http://gcc.gnu.org/onlinedocs/gcc/i386-and-x86_002d64-Options.html#i386-and-x86_002d64-Options notlarını] inceleyebilirsiniz. Eğer bir seçenek listelenmişse, özel olarak eklemenize gerek bulunmayacak ve doğru <code>-march</code> ayarı ile gelecektir.}}

== Optimizasyon SSS ==

=== Ama -funroll-loops -fomg-optimize seçenekleri ile daha iyi performans alıyorum! ===

Hayır. Sadece birisi sizi daha fazla seçenek eklemenin daha iyi olduğu konusuna inandırdığı için '''öyle düşünüyorsunuz'''. Agresif bayraklar sistem genelinde kullanıldığında yalnızca uygulamalarınıza zarar verecektir.  <code>GCC</code> dahi [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options belgelerinde] <code>-funroll-loops</code> ve <code>-funroll-all-loops</code> seçeneklerinin boyutu büyüttüğüne ve yavaşlamaya sebep olduğuna dikkat çekiyor. Ancak bu iki seçenek halen <code>-ffast-math</code> , <code>-fforce-mem</code> , <code>-fforce-addr</code> ve benzeri seçeneklerle birlikte övgü kaynağı olmaya devam ediyor. 

Aslında bunlar tehlikeli derecede agresif seçenekler. Bu seçeneklerin kullanımı ile ilgili [http://forums.gentoo.org Gentoo Forumları] ve [http://bugs.gentoo.org Bugzilla]'ya göz attığınızda pek iyi bir manzara ile karşılaşmayacaksınız. 

You don't need to use those flags globally in CFLAGS or CXXFLAGS. They will only hurt performance. They may make you sound like you have a high-performance system running on the bleeding edge, but they don't do anything but bloat your code and get your bugs marked INVALID or WONTFIX. 

You don't need dangerous flags like these. '''Don't use them''' . Stick to the basics: <code>-march</code> , <code>-O</code> , and <code>-pipe</code> . 

=== What about -O levels higher than 3? ===

Some users boast about even better performance obtained by using <code>-O4</code> , <code>-O9</code> , and so on, but the reality is that <code>-O</code> levels higher than 3 have no effect. The compiler may accept CFLAGS like <code>-O4</code> , but it actually doesn't do anything with them. It only performs the optimizations for <code>-O3</code> , nothing more. 

Need more proof? Examine the <code>code</code> [http://gcc.gnu.org/viewcvs/trunk/gcc/opts.c?revision=124622&view=markup source code] : 

{{Code|-O source code|<pre>
if (optimize >= 3)
    {
      flag_inline_functions = 1;
      flag_unswitch_loops = 1;
      flag_gcse_after_reload = 1;
      /* Allow even more virtual operators.  */
      set_param_value ("max-aliased-vops", 1000);
      set_param_value ("avg-aliased-vops", 3);
    }
</pre>
}}

As you can see, any value higher than 3 is treated as just <code>-O3</code> . 

=== What about redundant flags? ===

Oftentimes CFLAGS and CXXFLAGS that are turned on at various <code>-O</code> levels are specified redundantly in {{Path|/etc/portage/make.conf}} . Sometimes this is done out of ignorance, but it is also done to avoid flag filtering or flag replacing. 

Flag filtering/replacing is done in many of the ebuilds in the Portage tree. It is usually done because packages fail to compile at certain <code>-O</code> levels, or when the source code is too sensitive for any additional flags to be used. The ebuild will either filter out some or all CFLAGS and CXXFLAGS, or it may replace <code>-O</code> with a different level. 

The [http://devmanual.gentoo.org/ebuild-writing/functions/src_compile/build-environment/index.html Gentoo Developer Manual] outlines where and how flag filtering/replacing works. 

It's possible to circumvent <code>-O</code> filtering by redundantly listing the flags for a certain level, such as <code>-O3</code> , by doing things like: 

{{Code|Specifying redundant CFLAGS|<pre>
CFLAGS="-O3 -finline-functions -funswitch-loops"
</pre>
}}

However,'''this is not a smart thing to do'''. CFLAGS are filtered for a reason! When flags are filtered, it means that it is unsafe to build a package with those flags. Clearly, it is ''not'' safe to compile your whole system with <code>-O3</code> if some of the flags turned on by that level will cause problems with certain packages. Therefore, you shouldn't try to "outsmart" the developers who maintain those packages. ''Trust the developers'' . Flag filtering and replacing is done for your benefit! If an ebuild specifies alternative flags, then don't try to get around it. 

You will most likely continue to run into problems when you build a package with unacceptable flags. When you report your troubles on Bugzilla, the flags you use in {{Path|/etc/portage/make.conf}} will be readily visible and you will be told to recompile without those flags. Save yourself the trouble of recompiling by not using redundant flags in the first place! Don't just automatically assume that you know better than the developers. 

=== What about LDFLAGS? ===

The Gentoo developers have already set basic, safe LDFLAGS in the base profiles, so you don't need to change them. 

=== Can I use per-package flags? ===

{{Warning|Using per-package flags complicates debugging and support. Make sure you mention in your bug reports if you make use of this feature and what the changes are you made.}}

Information on how to use per-package environment variables (including CFLAGS) is described in the [http://www.gentoo.org//doc/en/handbook/handbook-amd64.xml?part=3&chap=6#doc_chap2 Gentoo Handbook, "Per-Package Environment Variables"] . 

== Resources ==

The following resources are of some help in further understanding optimization: 

* The [http://gcc.gnu.org/onlinedocs/ GCC online documentation] 

* Chapter 5 of the [http://www.gentoo.org//doc/en/handbook/ Gentoo Installation Handbooks] 

* <code>man make.conf</code>

* [http://en.wikipedia.org Wikipedia]

* The [http://forums.gentoo.org Gentoo Forums]

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:

* nightmorph
