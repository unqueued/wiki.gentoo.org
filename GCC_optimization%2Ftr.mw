<languages />

{{Metadata|abstract=Bu sayfada kaynak kodunu, güvenli ve mantıklı CFLAGS ve CXXFLAGS kulllanarak optimize etmekle ilgili bilgi verilmektedir. Ayrıca derlemeyi optimize etmenin arkasındaki genel mantık da ele alınmaktadır.}}

Bu sayfada kaynak kodunu, güvenli ve mantıklı CFLAGS ve CXXFLAGS kulllanarak optimize etmekle ilgili bilgi verilmektedir. Ayrıca derlemeyi optimize etmenin arkasındaki genel mantık da ele alınmaktadır.

== Tanıtım ==

=== CFLAGS ve CXXFLAGS nedir? ===

CFLAGS and CXXFLAGS are environment variables that are used to tell the GNU Compiler Collection (<kbd>gcc</kbd>) what kinds of switches to use when compiling source code. CFLAGS are for code written in C, while CXXFLAGS are for code written in C++. 

Derlenen programın üreteceği hata ayıklama (debug) mesajlarının yoğunluğunu düşürebilir, hata durumunda gösterilecek uyarı mesajlarını artırabilir ve elbette üretilen kodun sisteminiz için optimize edilmesini sağlayabilirler. [http://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html#Invoking-GCC GCC yardım sayfası]nda kullanılabilecek seçenekler ve açıklamaları bulunmaktadır. 

=== Nasıl kullanılırlar? ===

CFLAGS and CXXFLAGS can be used in two ways. First, they can be used per-program with Makefiles generated by <kbd>automake</kbd>. 

Ancak bu yöntem Portage içerisindeki paketleri kurarken uygulanmamalıdır. Bunun yerine {{Path|/etc/portage/make.conf}} dosyasındaki CFLAGS ve CXXFLAGS değerlerini ayarlamalısınız. Tüm paketler, burada seçtiğiniz yapılandırmaya göre derlenecektir. 

{{CodeBox|title=CFLAGS in /etc/portage/make.conf|lang=bash|1=
CFLAGS="-march=athlon64 -O2 -pipe"
CXXFLAGS="${CFLAGS}"
}}

{{Important|While it is possible to have multiple lines in USE flags, doing the same in CFLAGS can and will result in problems with programs such as <kbd>cmake</kbd>. Make sure your CFLAGS declaration is on a single line, with as little whitespace as possible to avoid those issues. See {{Bug|500034}} as an example.}}

Gördüğünüz gibi, CXXFLAGS değerleri CFLAGS'a atanan değerlerin aynısını kullanmakta. Muhtemelen hatasız bir derleme için ihtiyacınız olan durum da budur. Normal şartlarda CXXFLAGS için farklı bir değer belirtmeye ihtiyaç duymamanız gerekir.

=== Hatalı düşünceler ===

CFLAGS ve CXXFLAGS değerleri daha küçük veya daha hızlı çalışan dosyalar üretmekte yardımcı olabilir. Ancak bazı durumlarda yavaşlama, boyut büyümesi, derlenen dosyanın istendiği gibi çalışmaması ve tabi ki derleme sırasında hatalara sebep olabilir! 

CFLAGS değerleri sihirli değnek değildir; otomatik olarak sisteminizi daha ufak ve daha hızlı bir hale getiremezler. Gereğinden fazla ve gereksiz değerler eklemek sisteminizi çorbaya çevirebilir ve başladığınızdan daha kötü bir noktaya ulaştırabilir. 

İnternette bulacağınız övgüler bir yana, agresif CFLAGS ve CXXFlags değerleri uygulamalarınıza yarardan çok zarar getirme eğilimindedir. Bu değerlerin var olma sebebinin özel amaçlarda özel yerlerde kullanılması olduğunu unutmayınız. Bir CFLAGS değerinin bir parça kod veya bir uygulama üzerinde işe yarıyor olması tüm sisteminizi bu flag kullanılarak derlemenizin faydanıza olacağı anlamına gelmez. 

=== Hazır mısınız? ===

Karşılaşacağınız riskleri de bildiğinize göre artık bazı mantıklı ve güvenli değerleri incelemenin zamanı geldi. Bu değerler sisteminizi sağlıklı tutacak ve [http://bugs.gentoo.org Bugzilla]'ya raporlayacağınız hatalarda geliştiricilere yardımcı olacak değerlerdir. Geliştiriciler hata raporlarında genellikle (agresif değerlerin yazılıma zarar verebileceğini bildikleri için) problem oluşturan yazılımın basit CFLAGS değerleri ile tekrar derlenmesini ve problemin halen devam edip etmediğinin incelenmesini isterler. 

== Optimizasyon ==

=== Temel ===

The goal behind using CFLAGS and CXXFLAGS is to create code tailor-made to your system; it should function perfectly while being lean and fast, if possible. Sometimes these conditions are mutually exclusive, so we'll stick with combinations known to work well. Ideally, they are the best available for any CPU architecture. We'll mention the aggressive flags later so you know what to look out for. We won't discuss every option listed on the <kbd>gcc</kbd> manual (there are hundreds), but we'll cover the basic, most common flags. 

{{Note|Whenever you're not sure what a flag actually does, refer to the relevant chapter of the [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options GCC manual] . If you're still stumped, try Google, or check out the <kbd>gcc</kbd> [http://gcc.gnu.org/lists.html mailing lists] .}}

=== -march ===

The first and most important option is <code>-march</code>. This tells the compiler what code it should produce for your processor [https://en.wikipedia.org/wiki/Microarchitecture architecture] (or ''arch''); it says that it should produce code for a certain kind of CPU. Different CPUs have different capabilities, support different instruction sets, and have different ways of executing code. The <code>-march</code> flag will instruct the compiler to produce code specifically for your CPU, with all its capabilities, features, instruction sets, quirks, and so on. 

{{Path|/etc/portage/make.conf}} dosyasındaki  CHOST değeri mimari seçeneğinizi iletse de, <code>-march</code> halen daha uyumlu kod üretmek için kullanılabilir. x86 ve x86-64 işlemciler (ve bazı diğerleri) <code>-march</code> bayrağından faydalanabilir. 

Ne tür bir işlemciniz var? Öğrenmek için aşağıdaki kodu çalıştırabilirsiniz: 

{{Cmd|cat /proc/cpuinfo}}

To get more details, including <code>march</code> and <code>mtune</code> values, use:

{{Cmd|<nowiki>gcc -c -Q -march=native --help=target</nowiki>}}

Şimdi de <code>-march</code> değerini iş başında görelim. Aşağıdaki örnek eski bir Pentium III işlemci için: 

{{FileBox|filename=/etc/portage/make.conf|title=Pentium III|lang=bash|1=
CFLAGS="-march=pentium3"
CXXFLAGS="${CFLAGS}"
}}

Şimdi de 64-bit bir işlemci için bir örnek: 

{{FileBox|filename=/etc/portage/make.conf|title=AMD64|lang=bash|1=
CFLAGS="-march=athlon64"
CXXFLAGS="${CFLAGS}"
}}

Hangi tür işlemciye sahip olduğunuzdan veya işlemciniz için ne kullanacağınızdan halen emin değilseniz <code>-march=native</code> kullanın. Bu değeri kullanarak, GCC'nin işlemcinizi otomatik olarak tanıyarak en uyumlu değerleri kendi belirlemesini sağlayabilirsiniz. '''Ancak farklı bir CPU'da çalışacak bir paket derliyorsanız bu seçeneği kullanmayın!''' 

{{Warning|Do '''not''' use <code>-march{{=}}native</code> or <code>-mtune{{=}}native</code> in the <code>CFLAGS</code> or <code>CXXFLAGS</code> variables of {{Path|make.conf}} when compiling with <tt>[[Distcc#-march.3Dnative|distcc]]</tt>.}}

Yani bir bilgisayarda derleme yapıp derlediğiniz paketleri farklı bir bilgisayarda (mesela daha eski ve yavaş bir cihazda) çalıştırmak istiyorsanız <code>-march=native</code> kullanmamalısınız. "Native" (doğal) seçeneği derlemenin sonunda üretilen kodun yalnızca derlendiği işlemci türünde çalışabileceği anlamına gelir. AMD Athlon 64 işlemci üzerinde <code>-march=native</code> kullanarak derlediğiniz bir paket VIA C3 işlemci üzerinde çalışamayacaktır. 

Also available are the <code>-mtune</code> and <code>-mcpu</code> flags. These flags are normally only used when there is no available <code>-march</code> option; certain processor architectures may require <code>-mtune</code> or even <code>-mcpu</code>. Unfortunately, <kbd>gcc</kbd>'s behavior isn't very consistent with how each flag behaves from one architecture to the next. 

x86 ve x86-64 işlemcilerde <code>-march</code> kullandığınızda sonuç olarak işlemciniz ile tam uyumlu kodlar alırsınız, yani üretilen paketler farklı veya daha eski işlemcilerde çalışmaz. Paketleri yalnızca derlediğiniz sistemde kullanacaksanız <code>-march</code> kullanın. <code>-mtune</code> ve <code>-mcpu</code> seçeneklerini yalnızca daha eski işlemcilere (i386 ve i486 gibi) uyumlu paketler derleme amacındaysanız değerlendirin. <code>-mcpu</code> seçeneği kullanıldığında birçok gerekli değeri (ABI gibi) dikkate almadığı için, bu seçeneği x86 ve x86-64 sistemlerde kullanmayın. 

Only non-x86/x86-64 CPUs (such as Sparc, Alpha, and PowerPC) may require <code>-mtune</code> or <code>-mcpu</code> instead of <code>-march</code>. On these architectures, <code>-mtune</code> / <code>-mcpu</code> will sometimes behave just like <code>-march</code> (on x86/x86-64)... but with a different flag name. Again, <kbd>gcc</kbd>'s behavior and flag naming just isn't consistent across architectures, so be sure to check the <kbd>gcc</kbd> [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options manual] to determine which one you should use for your system. 

{{Note|For more suggested <code>-march</code> / <code>-mtune</code> / <code>-mcpu</code> settings, please read chapter 5 of the appropriate [[HandBook:Main_Page|Gentoo Installation Handbook]] for your arch. Also, read the <kbd>gcc</kbd> manual's list of [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options architecture-specific options], as well as more detailed explanations about the differences between <code>-march</code>, <code>-mcpu</code>, and <code>-mtune</code>.}}

=== -O ===

Gelecek seçeneğimiz <code>-O</code>. Bu seçenek genel optimizasyon değerini kontrol etmekte. Yüksek optimizasyon kullandığınızda biraz daha yavaş ve RAM tüketen bir derleme sürecine sahip olabilirsiniz. 

7 farklı <code>-O</code> ayarı bulunmaktadır:  <code>-O0</code> , <code>-O1</code> , <code>-O2</code> , <code>-O3</code> ,<code>-Os</code>, <code>-Og</code> ve <code>-Ofast</code>. {{Path|/etc/portage/make.conf}} dosyasında bunlardan yalnızca birini kullanmalısınız. 

<code>-O0</code> istisna olmak üzere, tüm <code>-O</code> seçenekleri bazı farklı optimizasyon bayraklarını aktifleştirmektedir. Detay için GCC'nin [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options optimizasyon seçenekleri] sayfasını inceleyebilirsiniz. 

Optimiasyon seviyelerinin yaptıklarına bir göz atalım: 

*  <code>-O0</code> : Bu seviye (bir "O" harfinin ardından eklenmiş sıfır) tıpkı <code>-O</code> kullanılmamış gibi tüm optimiasyon seçeneklerini kapalı konuma getirir. Bu sayede derleme zamanı azalır ve hata ayıklamak kolaylaşır ancak bazı uygulamalar optimizasyon olmadan düzgün çalışamayacaktır. Hata ayıklama amacı dışında bu seçenek önerilmemektedir.

*  <code>-O1</code> : En temel optimizasyon seviyesidir. Derleme süresini çok yükseltmeden daha hızlı ve daha ufak kodlar üretir. Gayet temel bir seçenektir ancak genellikle her zaman güvenlidir diyebiliriz.

*  <code>-O2</code> : <code>-O1</code> seçeneğinin bir üstü, özel bir ihtiyacınız yok ise ''tavsiye edilen'' optimizasyon seçeneği. <code>-O2</code>,  <code>-O1</code>'in açtığı bayrakların yanı sıra bazı bayraklar açmaktadır. Bu seçenekle yine derleyici derleme zamanını fazla uzatmadan güvenli ve hızlı kod üretmeye çalışacaktır.

*  <code>-O3</code> : Mümkün olan en üst düzey optimizasyondur. Derleme süresini ve kullanılan RAM'i artırma pahasına daha fazla optimizasyon yapar. Sonuçta daha hızlı bir sistem garanti etmez, hatta fazla kaynak tüketiminden dolayı bazı durumlarda daha yavaş bir sonuçla karşılaşabilirsiniz. <code>-O3</code>'ün ayrıca bazı paketleri çalışmaz hale getirdiği bilinmektedir. Bu yüzden kullanımı tavsiye edilmemektedir.

*  <code>-Os</code> : Bu seçenek üretilen kodun boyutunu optimize eder. Boyutta büyümeye sebep olmayacak tüm <code>-O2</code> seçeneklerini açar. Çok az disk alanı ve/veya işlemcisinde ufak önbellekleri bulunan bilgisayarlarda kullanışlı olabilir.

*  <code>-Og</code>: GCC 4.8'de yeni bir  optimizasyon seviyesi olarak <code>-Og</code> tanıtıldı. Çalıştırma hızından çok ödün vermeden, hızlı bir derleme ile hata ayıklama modunda çalışmak için kullanılmaktadır. Geliştirme için genel olarak <code>-O0</code>'dan daha rahat bir ortam sağlamaktadır. <code>-Og</code> uygulamak otomatik olarak <code>-g</code>'yi aktif hale getirmez, yalnızca hata ayıklamayı zorlaştıran optimizasyonları etkisiz hale getirir.

*  <code>-Ofast</code>: GCC 4.7 ile gelen bir seçenektir, <code>-O3</code> üzerine <code>-ffast-math</code>, <code>-fno-protect-parens</code> ve <code>-fstack-arrays</code> ekler. Bu seçenek tavsiye edilen standartların dışında olduğu için tavsiye edilmemektedir.

Önceden de belirttiğimiz gibi, <code>-O2</code> önerilen optimizasyon seviyesidir. Eğer derlemeniz hata ile sonlandıysa ve <code>-O2</code> kullanmıyorsanız, öncelikle kullanarak tekrar deneyin. Hata durumlarında optimizasyonu azaltmayı (<code>-O1</code>), hatta kapatmayı (<code>-O0 -g2 -ggdb</code>) deneyebilirsiniz.

=== -pipe ===

Bir başka sık kullanılan bayrak da <code>-pipe</code>'dır. Derleme sonrası üretilen kodda bir değişikliğe sebep olmaz ancak derleme işleminin daha hızlı gerçekleştirilmesini sağlar. Derleyiciye, derleme sırasında geçici dosyalar kullanmak yerine [http://en.wikipedia.org/wiki/Pipeline_(Unix) pipe] kullanmasını belirtir. Bu işlem daha fazla RAM kullanımına sebep olduğu için, eğer cihazınızda RAM sıkıntısı yaşıyorsanız ve derleme sırasında problem oluşuyor ise bu seçeneği kullanmayın. 

=== -fomit-frame-pointer ===

This is a very common flag designed to reduce generated code size. It is turned on at all levels of <code>-O</code> (except <code>-O0</code>) on architectures where doing so does not interfere with debugging (such as x86-64), but you may need to activate it yourself by adding it to your flags. Though the <kbd>gcc</kbd> manual does not specify all architectures it is turned on by using <code>-O</code>, you will need to explicitly activate it on x86, with <kbd>gcc</kbd> up to version 4.6 or when using <code>-Os</code>. However, using this flag will make debugging hard to impossible. 

Özel olarak Java ile yazılmış uygulamaların hata ayıklamasını neredeyse imkansız hale getirir. Yine de bu bayrak yalnızca Java kodlarını etkilememektedir. Yani işe yaramasının bir bedeki olarak problem oluşturan uygulamalarınızın hata kaydı çıktıları işe yaramaz duruma gelecektir. Hata ayıklama işlemine ihtiyacınız yok ise ve farklı hata ayıklama seçeneklerini (<code>-ggdb</code> gibi) kullanmıyorsanız <code>-fomit-frame-pointer</code> kullanmayı deneyebilirsiniz. 

{{Important/tr|<code>-fomit-frame-pointer</code> seçeneğini benzeri olan <code>-momit-leaf-frame-pointer</code> ile '''kullanmayın'''. Ayrıca <code>-momit-leaf-frame-pointer</code> seçeneğinin performans üzerinde negatif etkisi olduğu bilinmektedir.}}

=== -msse, -msse2, -msse3, -mmmx, -m3dnow ===

Bu bayraklar x86 ve x86-64 mimarilerinde bulunan [http://en.wikipedia.org/wiki/Streaming_SIMD_Extensions SSE], [http://en.wikipedia.org/wiki/SSE2 SSE2] , [http://en.wikipedia.org/wiki/SSSE3 SSE3] , [http://en.wikipedia.org/wiki/MMX MMX] ve [http://en.wikipedia.org/wiki/3dnow 3DNow!] seçeneklerini aktifleştirmek için bulunmaktadır. Bu seçenekler çokluortam, oyun ve diğer birçok matematiksel işlem içeren uygulamada performansı yükseltmektedir ve güncel işlemcilerin çoğunda bulunmaktadır. 

{{Important/tr|<code>cat /proc/cpuinfo</code> komutunu çalıştırarak işlemcinizin bu bayrakları desteklediğine emin olun. Aldığınız çıktı işlemcinizin hangilerini desteklediğini gösterecektir. '''pni''' seçeneğinin SSE3 ile aynı anlama geldiğini hatırlatmak isteriz.}}

Doğru <code>-march</code> değerini kullandığınız sürece normal şartlarda bu seçenekleri {{Path|/etc/portage/make.conf}} dosyasına eklemenize gerek bulunmamakta. Örneğin <code>-march=nocona</code> seçeneği zaten içerisinde <code>-msse3</code> barındırmakta. Bazı yeni VIA ve Amd64 işlemcilerde <code>-march</code>'ın kapsamadığı seçenekler (sse3 gibi) bulunabilmekte. Bu tür durumlarda <code>cat /proc/cpuinfo</code> kodunun çıktısına bakarak gerekli eklemeyi yapmanız gerekecektir. 

{{Note|You should check the [http://gcc.gnu.org/onlinedocs/gcc/i386-and-x86-64-Options.html#i386-and-x86-64-Options list] of x86 and x86-64-specific flags to see which of these instruction sets are activated by the proper CPU type flag. If an instruction is listed, then you don't need to specify it; it will be turned on by using the proper <code>-march</code> setting.}}

== Optimizasyon SSS ==

=== Ama -funroll-loops -fomg-optimize seçenekleri ile daha iyi performans alıyorum! ===

No, you only ''think'' you do because someone has convinced you that more flags are better. Aggressive flags will only hurt your applications when used system-wide. Even the <kbd>gcc</kbd> [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options manual] says that using <code>-funroll-loops</code> and <code>-funroll-all-loops</code> makes code larger and run more slowly. Yet for some reason, these two flags, along with <code>-ffast-math</code>, <code>-fforce-mem</code>, <code>-fforce-addr</code>, and similar flags, continue to be very popular among ricers who want the biggest bragging rights. 

Aslında bunlar tehlikeli derecede agresif seçenekler. Bu seçeneklerin kullanımı ile ilgili [http://forums.gentoo.org Gentoo Forumları] ve [http://bugs.gentoo.org Bugzilla]'ya göz attığınızda pek iyi bir manzara ile karşılaşmayacaksınız. 

Bu seçenekleri CFLAGS veya CXXFLAGS içerisinde sistem genelinde kullanmak sisteminize zarar vermenin yanı sıra raporladığınız hataların INVALID (geçersiz) veya WONTFIX (çözülmeyecek) olarak işaretlenmesine sebep olacaktır. 

Genelde böyle zararlı bayraklara ihtiyacınız olmaz. O yüzden '''kullanmayın''' . Güvenlileri deneyin: <code>-march</code> , <code>-O</code> ve <code>-pipe</code> .

=== Peki ya 3'ten büyük -O seviyeleri? ===

Bazı kullanıcılar <code>-O4</code>, <code>-O9</code> gibi yüksek optimizasyon seviyeleri ile daha iyi performans aldıklarını iddia etmekteler. Aslında <code>-O3</code>'ün üzerindeki hiçbir optimizasyon değerinin bir etkisi bulunmamakta. Derleyici yalnızca <code>-O3</code> seviyesini uygulamaktadır. 

Need more proof? Examine the [https://gcc.gnu.org/viewcvs/gcc/trunk/gcc/opts.c?view=markup source code]: 

{{CodeBox|title=-O source code|lang=bash|1=
if (optimize >= 3)
    {
      flag_inline_functions = 1;
      flag_unswitch_loops = 1;
      flag_gcse_after_reload = 1;
      /* Allow even more virtual operators.  */
      set_param_value ("max-aliased-vops", 1000);
      set_param_value ("avg-aliased-vops", 3);
    }
}}

Gördüğünüz gibi, 3'den büyük değerler <code>-O3</code> muamelesi görmekte.

=== What about compiling outside the target machine? ===

Some readers might wonder if compiling outside the target machine with a strictly inferior CPU or GCC sub-architecture will result in inferior optimization results (compared to a native compilation). The answer is simple: '''No'''.  Regardless of the actual hardware on which the compilation takes place and the CHOST for which GCC was built, as long as the same arguments are used <small>(except for <code>-march=native</code>)</small> and the same version of GCC is used <small>(although minor version might be different)</small>, the resulting optimizations are strictly the same.

To exemplify, if Gentoo is installed on a machine whose GCC's CHOST is ''i686-pc-linux-gnu'', and a [[Distcc]] server is setup on another computer whose GCC's CHOST is ''i486-linux-gnu'', then there is no need to be afraid that the results would be less optimal because of the strictly inferior sub-architecture of the remote compiler and/or hardware. The result would be as optimized as a native build, as long as the same options are passed to both compilers (and the <code>-march</code> parameter doesn't get a <code>native</code> argument).  In this particular case the target architecture needs to be specified explicitly as explained in [[Distcc#-march.3Dnative|Distcc and -march=native]].

The only difference in behavior between two GCC versions built targeting different sub-architectures is the implicit default argument for the <code>-march</code> parameter, which is derived from the GCC's CHOST when not explicitly provided in the command line.

=== Peki ihtiyaç fazlası bayraklar? ===

Çoğu zaman {{Path|/etc/portage/make.conf}} dosyasındaki CFLAGS ve CXXFLAGS değerlerinin  arasında tekrarlanan <code>-O</code> değerlerini görebilirsiniz. Bu bazen hata ile bazen de bayrak değişiminin önüne geçmek için yapılan birşeydir. 

Bayrak filtreleme/değişimi Portage içerisinde birçok uygulamada yapılmakta. Genellikle bir uygulamanın belirli bir <code>-O</code> değeri ile çalışamadığı görüldüğünde ebuild üzerinde ilgili seçeneğin kaldırılması veya değiştirilmesi ile problem aşılıyor. 

[http://devmanual.gentoo.org/ebuild-writing/functions/src_compile/build-environment/index.html Gentoo geliştirici belgelerinde] bu işlem detaylı olarak anlatılmakta. 

Gereksiz <code>-O</code> değerleri kullanarak belirli bir seviye için filtreleme işleminden kurtulmak mümkün. Örneğin <code>-O3</code> için: 

{{CodeBox|title=Specifying redundant CFLAGS|lang=bash|1=
CFLAGS="-O3 -finline-functions -funswitch-loops"
}}

Ancak bu '''akıllıca bir işlem değil'''. CFLAGS değerinin ebuild üzerinde filtrelenmesinin bir amacı var. Uygulamanın bu bayrak ile derlenmesinin güvenli '''olmadığına''' emin olunduktan sonra bu tür değişiklikler yapılmakta. Bu sebeple bu tür işlemler yapmamalısınız. 

Desteklenmeyen seçenekler kullandığınızda problemler yaşamanız ve hata raporu ilettiğinizde bu seçenekleri değiştirerek tekrar derleme yapma talebiyle karşılaşmanız kaçınılmazdır. Zaman kaybetmemek için gereksiz bayrak kullanımından kaçının.

=== Peki ya LDFLAGS? ===

Gentoo geliştiricileri zaten gerekli ve güvenli LDFLAGS değerlerini profillerin içine yerleştirmiştir. Bu yüzden herhangi bir değişiklik yapmanıza gerek bulunmamaktadır. 

=== Her paket için ayrı bayrak kullanabilir miyim? ===

{{Warning/tr|Her paket için farklı bayrak kullanımı hata ayıklama ve destek almanızı zorlaştıracaktır. Hata raporu açtığınızda bu özelliği kullanıyorsanız tüm detayları iletmeyi unutmayın.}}

Information on how to use per-package environment variables (including CFLAGS) is described in the [[Handbook:AMD64/Portage/Advanced#Per-package_environment_variables|Gentoo Handbook, "Per-Package Environment Variables"]].

== Kaynaklar ==

Aşağıdaki kaynaklar optimizasyon ile ilgili daha fazla bilgi almanıza yardımcı olabilir: 

* [http://gcc.gnu.org/onlinedocs/ GCC online dökümanları] 

* Chapter 5 of the [[Handbook:Main_Page|Gentoo Installation Handbooks]]

* <kbd>man make.conf</kbd>

* [http://en.wikipedia.org Wikipedia]

* [http://forums.gentoo.org Gentoo Forumları]

{{Migrated|originalauthors=nightmorph}}
