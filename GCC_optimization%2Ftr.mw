<languages />

{{Metadata|abstract=Bu sayfada kaynak kodunu, güvenli ve mantıklı CFLAGS ve CXXFLAGS kulllanarak optimize etmekle ilgili bilgi verilmektedir. Ayrıca derlemeyi optimize etmenin arkasındaki genel mantık da ele alınmaktadır.}}

Bu sayfada kaynak kodunu, güvenli ve mantıklı <var>CFLAGS</var> ve <var>CXXFLAGS</var> kulllanarak optimize etmekle ilgili bilgi verilmektedir. Ayrıca derlemeyi optimize etmenin arkasındaki genel mantık da ele alınmaktadır.

== Tanıtım ==

=== CFLAGS ve CXXFLAGS nedir? ===

<var>CFLAGS</var> ve <var>CXXFLAGS</var> değerleri, GNU Compiler Collection (<var>GCC</var>) tarafından kaynak kodu derlerken ne tür değişiklikler yapılması gerektiğini belirleyen ortam değişkenleridir. <var>CFLAGS</var> değerleri C dili ile yazılmış kodları etkiler, <var>CXXFLAGS</var> ise C++. 

Derlenen programın üreteceği hata ayıklama (debug) mesajlarının yoğunluğunu düşürebilir, hata durumunda gösterilecek uyarı mesajlarını artırabilir ve elbette üretilen kodun sisteminiz için optimize edilmesini sağlayabilirler. [http://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html#Invoking-GCC GCC yardım sayfası]nda kullanılabilecek seçenekler ve açıklamaları bulunmaktadır.

=== Nasıl kullanılırlar? ===

<var>CFLAGS</var> ve <var>CXXFLAGS</var> iki şekilde kullanılabilir. İlk olarak, her uygulamaya özel olarak derleme sırasında <tt>automake</tt> tarafından üretilen Makefile dosyalarında bulunabilirler. 

Ancak bu yöntem Portage içerisindeki paketleri kurarken uygulanmamalıdır. Bunun yerine {{Path|/etc/portage/make.conf}} dosyasında <var>CFLAGS</var> ve <var>CXXFLAGS</var> değerlerini ayarlamalısınız. Tüm paketler, burada seçtiğiniz yapılandırmaya göre derlenecektir.

{{CodeBox|title=/etc/portage/make.conf dosyasındaki CFLAGS değerleri|lang=bash|1=
CFLAGS="-march=athlon64 -O2 -pipe"
CXXFLAGS="${CFLAGS}"
}}

{{Important/tr|'''USE''' bayrakları için birden fazla satır kullanmanız mümkünken, <var>CFLAGS</var> için birden fazla satır tanımı özellikle <tt>cmake</tt> ile yapılan derlemelerde sorun çıkaracaktır. Bu sebeple CFLAGS tanımının tek satırda olduğuna emin olun. Bkz. {{Bug|500034}} }}

Örnekte gördüğünüz gibi, <var>CXXFLAGS</var> değerleri <var>CFLAGS</var>'a atanan değerlerin aynısını kullanmakta. Çoğu sistemin hatasız bir derleme için ihtiyacı olan da bu olacaktır. Normal şartlarda <var>CXXFLAGS</var> için farklı bir değer belirtmeye ihtiyaç duymamanız gerekir.

=== Hatalı düşünceler ===

<var>CFLAGS</var> ve <var>CXXFLAGS</var> değerleri daha küçük veya daha hızlı çalışan dosyalar üretmekte yardımcı olabilir. Ancak hatalı yapılandırma durumlarında yavaşlama, boyut büyümesi, derlenen dosyanın istendiği gibi çalışmaması ve tabi ki derleme sırasında hatalara sebep olabilir! 

<var>CFLAGS</var> değerleri bir sihirli değnek değildir; otomatik olarak sisteminizi daha ufak ve daha hızlı bir hale getiremezler. Gereğinden fazla ve gereksiz değerler eklemek sisteminizi çorbaya çevirebilir ve başladığınızdan daha kötü bir noktaya ulaştırabilir. 

İnternette bulacağınız övgüler bir yana, agresif <var>CFLAGS</var> ve <var>CXXFlags</var> değerleri uygulamalarınıza yarardan çok zarar getirme eğilimindedir. Bu değerlerin var olma sebebinin "özel amaçlar" için "özel yerlerde" kullanılması olduğunu unutmayınız. Bir <var>CFLAGS</var> değerinin bir parça kod veya bir uygulama üzerinde işe yarıyor olması tüm sisteminizi bu flag kullanılarak derlemenizin faydanıza olacağı anlamına gelmez.

=== Hazır mısınız? ===

Karşılaşacağınız riskleri de bildiğinize göre artık bazı mantıklı ve güvenli değerleri incelemenin zamanı geldi. Bu değerler sisteminizi sağlıklı tutacak ve [http://bugs.gentoo.org Bugzilla]'ya raporlayacağınız hatalarda geliştiricilere yardımcı olacak değerlerdir. Geliştiriciler hata raporlarında genellikle (agresif değerlerin yazılıma zarar verebileceğini bildikleri için) problem oluşturan yazılımın basit <var>CFLAGS</var> değerleri ile tekrar derlenmesini ve problemin halen devam edip etmediğinin incelenmesini isterler. 

== Optimizasyon ==

=== Temel ===

<var>CFLAGS</var> ve <var>CXXFLAGS</var> kullanılmasının amacı sonuçta mümkün olduğu kadar güvenilir ve hızlı uygulamalara/sisteme sahip olmanız için kodları sisteminize uyumlu şekilde derlemektir. Bu seçeneklerden her CPU mimarisine göre en iyi çalışanlardan bahsedeceğiz. Ardından dikkat etmeniz gereken agresif seçeneklere de değineceğiz. <code>GCC</code> yardım sayfasındaki tüm seçenekleri açıklamayacağız (ki yüzlerce seçenek var), yalnızca en bilinen ve temel bayrakları ele alacağız. 

{{Note/tr|Bir seçeneğin tam olarak ne yaptığından emin değilseniz, [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options GCC yardım sayfası]nın ilgili bölümüne bakın. Anlamazsanız Google'ı veya GCC   [http://gcc.gnu.org/lists.html e-posta listeleri]ni deneyin.}}

=== -march ===

İlk ve en önemli seçenek <code>-march</code>. Bu seçenek derleyiciye derleme sonucunda hangi [http://en.wikipedia.org/wiki/Microarchitecture işlemci mimarisi]ne uygun kod üretileceğini belirtir. Farklı işlemcilerin farklı özellikleri, çalışma yöntemleri ve desteklediği değerler bulunmaktadır. <code>-march</code> değerinin yardımı ile derleyici sahip olduğunuz işlemcinin kapasitesine ve özelliklerine uygun bir kod üretecektir. 

{{Path|/etc/portage/make.conf}} dosyasındaki <code>CHOST</code> değeri mimari seçeneğinizi iletse de, <code>-march</code> halen daha uyumlu kod üretmek için kullanılabilir. x86 ve x86-64 işlemciler (diğerleri gibi) <code>-march</code> bayrağından faydalanabilir. 

Ne tür bir işlemciniz var? Öğrenmek için aşağıdaki komutu çalıştırabilirsiniz: 

{{Cmd|cat /proc/cpuinfo}}

<code>march</code> ve <code>mtune</code> dahil, seçenekler hakkında daha fazla detay için iki komut kullanılabilir:

{{Cmd|<nowiki>gcc -c -Q -march=native --help=target</nowiki>}}

* The second command will show the compiler directives for building the header file, but without actually performing the steps and instead showing them on the screen (<code>-###</code>). The final output line is the command that holds all the optimization options and architecture selection:
: {{Cmd|gcc -### -march{{=}}native /usr/include/stdlib.h}}

Şimdi de <code>-march</code> değerini iş başında görelim. Aşağıdaki örnek eski bir Pentium III işlemci için: 

{{FileBox|filename=/etc/portage/make.conf|title=Pentium III örneği|lang=bash|1=
CFLAGS="-march=pentium3"
CXXFLAGS="${CFLAGS}"
}}

Şimdi de 64-bit bir işlemci için bir örnek: 

{{FileBox|filename=/etc/portage/make.conf|title=AMD64 örneği|lang=bash|1=
CFLAGS="-march=athlon64"
CXXFLAGS="${CFLAGS}"
}}

Hangi tür işlemciye sahip olduğunuzdan veya işlemciniz için ne kullanacağınızdan halen emin değilseniz <code>-march=native</code> kullanın. Bu değeri kullanarak, GCC'nin işlemcinizi otomatik olarak tanıyarak en uyumlu değerleri kendi belirlemesini sağlayabilirsiniz. '''Ancak oluşacak paketi farklı bir CPU'da çalıştırmak üzere bir derleme yapıyorsanız bu seçeneği kullanmayın!''' 

{{Warning|Do '''not''' use <code>-march{{=}}native</code> or <code>-mtune{{=}}native</code> in the <var>CFLAGS</var> or <var>CXXFLAGS</var> variables of {{Path|make.conf}} when compiling with {{c|[[Distcc#-march.3Dnative|distcc]]}}.}}

Yani bir bilgisayarda derleme yapıp derlediğiniz paketleri farklı bir bilgisayarda (mesela daha eski ve yavaş bir cihazda) çalıştırmak istiyorsanız <code>-march=native</code> kullanmamalısınız. "Native" (doğal) seçeneği derlemenin sonunda üretilen kodun yalnızca derlendiği işlemci türünde çalışabileceği anlamına gelir. AMD Athlon 64 işlemci üzerinde <code>-march=native</code> kullanarak derlediğiniz bir paket VIA C3 işlemci üzerinde çalışamayacaktır. 

Ayrıca <code>-mtune</code> ve <code>-mcpu</code> bayraklarını da kullanabilirsiniz. Bunlar normalde sadece uyumlu <code>-march</code> seçeneği bulunmadığında kullanılan seçeneklerdir; bazı işlemci mimarileri <code>-mtune</code> hatta <code>-mcpu</code> kullanımını gerektirebilir. Malesef GCC'nin her bayrak için davranışı bir mimariden diğerine farklılık göstermektedir. 

x86 ve x86-64 işlemcilerde <code>-march</code> kullandığınızda sonuç olarak işlemciniz ile tam uyumlu kodlar alırsınız, yani üretilen paketler farklı veya daha eski işlemcilerde çalışmaz. Paketleri yalnızca derlediğiniz sistemde kullanacaksanız <code>-march</code> kullanın. <code>-mtune</code> ve <code>-mcpu</code> seçeneklerini yalnızca daha eski işlemcilere (i386 ve i486 gibi) uyumlu paketler derleme amacındaysanız değerlendirin. <code>-mcpu</code> seçeneği kullanıldığında birçok gerekli değeri (ABI gibi) dikkate almadığı için, bu seçeneği x86 ve x86-64 sistemlerde kullanmayın. 

Sadece x86/x86-64 olmayan işlemciler (Sparc, Alpha ve PowerPC gibi) <code>-mtune</code> veya <code>-mcpu</code> seçeneklerine ihtiyaç duyabilir. Bu mimarilerde bu seçenekler, x86/x86-64 mimarideki <code>-march</code> seçeneğinin yaptığı görevi yapmaktadır. Emin olmak için [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options GCC yardım sayfası]nı incelediğinize emin olunuz. 

{{Note/tr|Daha fazla <code>-march</code>/ <code>-mtune</code>/ <code>-mcpu</code> tavsiyesi için lütfen [[Handbook:Main_Page|Gentoo Kurulum Belgesi]]nin 5. bölümünü inceleyin. Ayrıca GCC'nin [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options mimariye özel belgeleri] de özellikle <code>-march</code>, <code>-mcpu</code> ve <code>-mtune</code> arasındaki farkları anlamada yardımcı olabilir.}}

=== -O ===

Gelecek seçeneğimiz <code>-O</code>. Bu seçenek genel optimizasyon değerini kontrol etmekte. Bu değeri değiştirmek, özellikle yüksek değerlerde derleme sürecini biraz daha yavaş hale getirip, RAM tüketimini artırabilir. 

7 farklı <code>-O</code> ayarı bulunmaktadır:  <code>-O0</code> , <code>-O1</code> , <code>-O2</code> , <code>-O3</code> ,<code>-Os</code>, <code>-Og</code> ve <code>-Ofast</code>. {{Path|/etc/portage/make.conf}} dosyasında bunlardan yalnızca birini kullanmalısınız.

<code>-O0</code> istisna olmak üzere, tüm <code>-O</code> seçenekleri bazı farklı optimizasyon bayraklarını aktifleştirmektedir. Detay için GCC'nin [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options optimizasyon seçenekleri] sayfasını inceleyebilirsiniz. 

Optimiasyon seviyelerinin yaptıklarına bir göz atalım: 

*  <code>-O0</code>: This level (that is the letter "O" followed by a zero) turns off optimization entirely and is the default if no <code>-O</code> level is specified in <var>CFLAGS</var> or <var>CXXFLAGS</var>. This reduces compilation time and can improve debugging info, but some applications will not work properly without optimization enabled. This option is not recommended except for debugging purposes.

*  <code>-O1</code> : En temel optimizasyon seviyesidir. Derleme süresini çok yükseltmeden daha hızlı ve daha ufak kodlar üretir. Basit bir seçenektir ancak genellikle her zaman güvenlidir diyebiliriz.

*  <code>-O2</code> : <code>-O1</code> seçeneğinin bir üstü ve özel bir ihtiyacınız yok ise ''tavsiye edilen'' optimizasyon seçeneğidir. <code>-O2</code>,  <code>-O1</code>'in açtığı bayrakları da açıp, üzerine bazı bayraklar açmaktadır. Bu seçenekle yine derleyici derleme zamanını fazla uzatmadan güvenli ve hızlı kod üretmeye çalışacaktır.

*  <code>-O3</code> : Mümkün olan en üst düzey optimizasyondur. Derleme süresini ve kullanılan RAM'i artırma pahasına daha fazla optimizasyon yapar. Sonuçta daha hızlı bir sistem garanti etmez, hatta fazla kaynak tüketiminden dolayı bazı durumlarda daha yavaş bir sonuçla karşılaşabilirsiniz. <code>-O3</code>'ün ayrıca bazı paketleri çalışmaz hale getirdiği bilinmektedir. Bu yüzden kullanımı tavsiye edilmemektedir.

*  <code>-Os</code> : Bu seçenek üretilen kodun boyutunu optimize eder. Boyutta büyümeye sebep olmayacak tüm <code>-O2</code> seçeneklerini açar. Çok az disk alanı ve/veya işlemcisinde ufak önbellekleri bulunan bilgisayarlarda kullanışlı olabilir.

*  <code>-Og</code>: GCC 4.8'de yeni bir  optimizasyon seviyesi olarak <code>-Og</code> tanıtıldı. Çalıştırma hızından çok ödün vermeden, hızlı bir derleme ile hata ayıklama modunda çalışmak için kullanılmaktadır. Geliştirme için genel olarak <code>-O0</code>'dan daha rahat bir ortam sağlamaktadır. <code>-Og</code> uygulamak otomatik olarak <code>-g</code>'yi aktif hale getirmez, yalnızca hata ayıklamayı zorlaştıran optimizasyonları etkisiz hale getirir.

*  <code>-Ofast</code>: GCC 4.7 ile gelen bir seçenektir, <code>-O3</code> üzerine <code>-ffast-math</code>, <code>-fno-protect-parens</code> ve <code>-fstack-arrays</code> ekler. Bu seçenek tavsiye edilen standartların dışında olduğu için tavsiye edilmemektedir.

As previously mentioned, <code>-O2</code> is the recommended optimization level. If package compilation fails and while not using <code>-O2</code>, try rebuilding with that option. As a fallback option, try setting the <var>CFLAGS</var> and <var>CXXFLAGS</var> to a lower optimization level, such as <code>-O1</code> or even <code>-O0 -g2 -ggdb</code> (for error reporting and checking for possible problems).

=== -pipe ===

Bir başka sık kullanılan bayrak da <code>-pipe</code>'dır. Derleme sonrası üretilen kodda bir değişikliğe sebep olmaz ancak derleme işleminin daha hızlı gerçekleştirilmesini sağlar. Derleyiciye, derleme sırasında geçici dosyalar kullanmak yerine [http://en.wikipedia.org/wiki/Pipeline_(Unix) pipe] kullanmasını belirtir. Bu işlem daha fazla RAM kullanımına sebep olduğu için, eğer cihazınızda RAM sıkıntısı yaşıyorsanız ve derleme sırasında problem oluşuyor ise bu seçeneği kullanmayabilirsiniz. 

=== -fomit-frame-pointer ===

Bu da üretilen kodun azaltılmasını sağlayan yaygın bir seçenektir. Hata ayıklamayı zorlaştırmadığı platformlarda (x86-64 gibi) <code>-O</code> seçeneğinin her seviyesinde (<code>-O0</code> hariç) otomatik olarak açılır. GCC belgeleri her mimari için bu durumu netleştirmemektedir ancak x86 üzerinde kendiniz ekleyerek açmanız gerektiği bilinmektedir. Bu seçeneği kullanmak uygulamalarda oluşan hataları yakalamayı oldukça zorlaştırır. 

In particular, it makes troubleshooting applications written in Java much harder, though Java is not the only code affected by using this flag. So while the flag can help, it also makes debugging harder; backtraces in particular will be useless. When not doing software debugging and no other debugging-related <var>CFLAGS</var> such as <code>-ggdb</code> have been used, then try using <code>-fomit-frame-pointer</code>. 

{{Important/tr|<code>-fomit-frame-pointer</code> seçeneğini benzeri olan <code>-momit-leaf-frame-pointer</code> ile '''kullanmayın'''. Ayrıca <code>-momit-leaf-frame-pointer</code> seçeneğinin performans üzerinde negatif etkisi olduğu bilinmektedir.}}

=== -msse, -msse2, -msse3, -mmmx, -m3dnow ===

Bu bayraklar x86 ve x86-64 mimarilerinde bulunan [http://en.wikipedia.org/wiki/Streaming_SIMD_Extensions SSE], [http://en.wikipedia.org/wiki/SSE2 SSE2] , [http://en.wikipedia.org/wiki/SSSE3 SSE3] , [http://en.wikipedia.org/wiki/MMX MMX] ve [http://en.wikipedia.org/wiki/3dnow 3DNow!] seçeneklerini aktifleştirmek için bulunmaktadır. Bu seçenekler çokluortam, oyun ve diğer birçok matematiksel işlem içeren uygulamada performansı yükseltmektedir ve güncel işlemcilerin çoğunda bulunmaktadır. 

{{Important/tr|<code>cat /proc/cpuinfo</code> komutunu çalıştırarak işlemcinizin bu bayrakları desteklediğine emin olun. Aldığınız çıktı işlemcinizin hangilerini desteklediğini gösterecektir. '''pni''' seçeneğinin SSE3 ile aynı anlama geldiğini hatırlatmak isteriz.}}

Doğru <code>-march</code> değerini kullandığınız sürece normal şartlarda bu seçenekleri {{Path|/etc/portage/make.conf}} dosyasına eklemenize gerek bulunmamakta. Örneğin <code>-march=nocona</code> seçeneği zaten içerisinde <code>-msse3</code> barındırmakta. Bazı yeni VIA ve Amd64 işlemcilerde <code>-march</code>'ın kapsamadığı seçenekler (sse3 gibi) bulunabilmekte. Bu tür durumlarda <code>cat /proc/cpuinfo</code> kodunun çıktısına bakarak gerekli eklemeyi yapmanız gerekecektir. 

{{Note/tr|Aktifleştirilen işlemci bayrakları ile ilgili GCC [http://gcc.gnu.org/onlinedocs/gcc/i386-and-x86_002d64-Options.html#i386-and-x86_002d64-Options notlarını] inceleyebilirsiniz. Eğer bir seçenek listelenmişse, özel olarak eklemenize gerek bulunmayacak ve doğru <code>-march</code> ayarı ile gelecektir.}}

== Optimizasyon SSS ==

=== Ama -funroll-loops -fomg-optimize seçenekleri ile daha iyi performans alıyorum! ===

Hayır. Sadece birisi sizi daha fazla seçenek eklemenin daha iyi olduğu konusuna inandırdığı için '''öyle düşünüyorsunuz'''. Agresif bayraklar sistem genelinde kullanıldığında yalnızca uygulamalarınıza zarar verecektir.  <code>GCC</code> dahi [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options belgelerinde] <code>-funroll-loops</code> ve <code>-funroll-all-loops</code> seçeneklerinin boyutu büyüttüğüne ve yavaşlamaya sebep olduğuna dikkat çekiyor. Ancak bu iki seçenek halen <code>-ffast-math</code> , <code>-fforce-mem</code> , <code>-fforce-addr</code> ve benzeri seçeneklerle birlikte övgü kaynağı olmaya devam ediyor. 

Aslında bunlar tehlikeli derecede agresif seçenekler. Bu seçeneklerin kullanımı ile ilgili [http://forums.gentoo.org Gentoo Forumları] ve [http://bugs.gentoo.org Bugzilla]'ya göz attığınızda pek iyi bir manzara ile karşılaşmayacaksınız. 

You do not need to use those flags globally in <var>CFLAGS</var> or <var>CXXFLAGS</var>. They will only hurt performance. They may make you sound like you have a high-performance system running on the bleeding edge, but they don't do anything but bloat the code and get your bugs marked INVALID or WONTFIX. 

Genelde böyle zararlı bayraklara ihtiyacınız olmaz. O yüzden '''kullanmayın''' . Güvenlileri deneyin: <code>-march</code> , <code>-O</code> ve <code>-pipe</code> .

=== Peki ya 3'ten büyük -O seviyeleri? ===

Some users boast about even better performance obtained by using <code>-O4</code>, <code>-O9</code>, and so on, but the reality is that <code>-O</code> levels higher than 3 have no effect. The compiler may accept <var>CFLAGS</var> like <code>-O4</code>, but it actually doesn't do anything with them. It only performs the optimizations for <code>-O3</code>, nothing more. 

Kanıt mı istiyorsunuz? [http://gcc.gnu.org/viewcvs/trunk/gcc/opts.c?revision=124622&view=markup Kaynak kodunu] inceleyin: 

{{CodeBox|title=-O kaynak kodu|lang=bash|1=
if (optimize >= 3)
    {
      flag_inline_functions = 1;
      flag_unswitch_loops = 1;
      flag_gcse_after_reload = 1;
      /* Allow even more virtual operators.  */
      set_param_value ("max-aliased-vops", 1000);
      set_param_value ("avg-aliased-vops", 3);
    }
}}

Gördüğünüz gibi, 3'den büyük değerler <code>-O3</code> muamelesi görmekte.

=== Ya hedef bilgisayar haricinde derleme yapıyorsak? ===

Some readers might wonder if compiling outside the target machine with a strictly inferior CPU or GCC sub-architecture will result in inferior optimization results (compared to a native compilation). The answer is simple: '''No'''.  Regardless of the actual hardware on which the compilation takes place and the CHOST for which GCC was built, as long as the same arguments are used <small>(except for <code>-march=native</code>)</small> and the same version of GCC is used <small>(although minor version might be different)</small>, the resulting optimizations are strictly the same.

To exemplify, if Gentoo is installed on a machine whose GCC's CHOST is ''i686-pc-linux-gnu'', and a [[Distcc]] server is setup on another computer whose GCC's CHOST is ''i486-linux-gnu'', then there is no need to be afraid that the results would be less optimal because of the strictly inferior sub-architecture of the remote compiler and/or hardware. The result would be as optimized as a native build, as long as the same options are passed to both compilers (and the <code>-march</code> parameter doesn't get a <code>native</code> argument).  In this particular case the target architecture needs to be specified explicitly as explained in [[Distcc#-march.3Dnative|Distcc and -march=native]].

The only difference in behavior between two GCC versions built targeting different sub-architectures is the implicit default argument for the <code>-march</code> parameter, which is derived from the GCC's CHOST when not explicitly provided in the command line.

=== Peki ihtiyaç fazlası bayraklar? ===

Oftentimes <var>CFLAGS</var> and <var>CXXFLAGS</var> that are turned on at various <code>-O</code> levels are specified redundantly in {{Path|/etc/portage/make.conf}}. Sometimes this is done out of ignorance, but it is also done to avoid flag filtering or flag replacing. 

Flag filtering/replacing is done in many of the ebuilds in the Portage tree. It is usually done because packages fail to compile at certain <code>-O</code> levels, or when the source code is too sensitive for any additional flags to be used. The ebuild will either filter out some or all <var>CFLAGS</var> and <var>CXXFLAGS</var>, or it may replace <code>-O</code> with a different level. 

[http://devmanual.gentoo.org/ebuild-writing/functions/src_compile/build-environment/index.html Gentoo geliştirici belgelerinde] bu işlem detaylı olarak anlatılmakta. 

Gereksiz <code>-O</code> değerleri kullanarak belirli bir seviye için filtreleme işleminden kurtulmak mümkün. Örneğin <code>-O3</code> için: 

{{CodeBox|title=Gereksiz CFLAGS belirtme|lang=bash|1=
CFLAGS="-O3 -finline-functions -funswitch-loops"
}}

However, '''this is not a smart thing to do'''. <var>CFLAGS</var> are filtered for a reason! When flags are filtered, it means that it is unsafe to build a package with those flags. Clearly, it is ''not'' safe to compile your whole system with <code>-O3</code> if some of the flags turned on by that level will cause problems with certain packages. Therefore, you shouldn't try to "outsmart" the developers who maintain those packages. ''Trust the developers''. Flag filtering and replacing is done for your benefit! If an ebuild specifies alternative flags, then don't try to get around it. 

Desteklenmeyen seçenekler kullandığınızda problemler yaşamanız ve hata raporu ilettiğinizde bu seçenekleri değiştirerek tekrar derleme yapma talebiyle karşılaşmanız kaçınılmazdır. Zaman kaybetmemek için gereksiz bayrak kullanımından kaçının.

=== Peki ya LDFLAGS? ===

The Gentoo developers have already set basic, safe <var>LDFLAGS</var> in the base profiles, so they do not need to be changed.

=== Her paket için ayrı bayrak kullanabilir miyim? ===

{{Warning/tr|Her paket için farklı bayrak kullanımı hata ayıklama ve destek almanızı zorlaştıracaktır. Hata raporu açtığınızda bu özelliği kullanıyorsanız tüm detayları iletmeyi unutmayın.}}

Information on how to use per-package environment variables (including <var>CFLAGS</var>) is described in the [[Handbook:AMD64/Portage/Advanced#Per-package_environment_variables|Gentoo Handbook, "Per-Package Environment Variables"]].

== Kaynaklar ==

Aşağıdaki kaynaklar optimizasyon ile ilgili daha fazla bilgi almanıza yardımcı olabilir: 

* [http://gcc.gnu.org/onlinedocs/ GCC online dökümanları] 

* [[Handbook:Main_Page|Gentoo Kurulum Belgeleri]] 5. bölümü

* <kbd>man make.conf</kbd> komutu

* [http://en.wikipedia.org Wikipedia]

* [http://forums.gentoo.org Gentoo Forumları]

{{Migrated|originalauthors=nightmorph}}
