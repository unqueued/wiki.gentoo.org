<languages />

{{Metadata|abstract=Dieses Dokument hilft die MySQL Datenbank einzurichten und zu benutzen.}}

Dieses Dokument hilft die MySQL Datenbank einzurichten und zu benutzen.

== Erste Schritte mit MySQL ==

=== Hintergrund ===

MySQL ist ein populärer Datenbankserver der in verschiedensten Programmen benutzt wird. SQL steht im Englischen für (S)tructured (Q)uery (L)anguage, auf Deutsch in etwa Strukturierte Abfrage Sprache. Dieses SQL wird für die Kommunikation zwischen Server und anderen Programmen benutzt. Zusätzlich hat MySQL eigene Erweiterungen der Standard SQL-Funktionen um extra Deatures bereit zu stellen. In diesem Dokument wird die minimale MySQL Installation beschrieben, sowie die Einrichtung von Datenbasen, Tabellen und neuen Benutzern. Starten wir mit der Installation. 

=== MySQL Installation ===

Zuerst ist das Programmpaket MySQL auf dem Rechner zu installieren. Für spezielle Features sind die entsprechenden USE-Flags zu setzen. 

{{Emerge|mysql}}

Am Ende der Installation wird folgende Nachricht angezeigt: 

{{CodeBox|title=MySQL einfo message|1=
You might want to run:
"emerge --config =dev-db/mysql-[version]"
if this is a new install.
}}

Da dies eine neue Installation ist, führen wir den Befehl aus. Sie müssen bei der Konfiguration der MySQL-Datenbank <code>ENTER</code> drücken, wenn Sie dazu aufgefordert werden. Die Konfiguration richtet die Haupt-MySQL-Datenbank ein, die administrative Informationen wie Datenbanken, Tabellen, Benutzer, Berechtigungen und vieles mehr enthält. Die Konfiguration empfiehlt, dass Sie Ihr Root-Passwort so schnell wie möglich ändern. Wir werden das definitiv tun, sonst könnte jemand zufällig kommen und unseren Standard-Setup MySQL Server hacken. 

{{RootCmd|emerge --config {{=}}dev-db/mysql-[version]|output=<pre>
 * MySQL DATADIR is /var/lib/mysql
 * Press ENTER to create the mysql database and set proper
 * permissions on it, or Control-C to abort now...
 
   Preparing db table
   Preparing host table
   Preparing user table
   Preparing func table
   Preparing tables_priv table
   Preparing columns_priv table
   Installing all prepared tables
 
   To start mysqld at boot time you have to copy support-files/mysql.server
   to the right place for your system
 
   PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
   To do so, issue the following commands to start the server
   and change the applicable passwords:
 
   /etc/init.d/mysql start
   /usr/bin/mysqladmin -u root -h pegasos password 'new-password'
   /usr/bin/mysqladmin -u root password 'new-password'
   Depending on your configuration, a -p option may be needed
   in the last command. See the manual for more details.
</pre>}}

{{Note|Wenn der obige Befehl abbricht, weil der Hostname auf ''localhost'' lautet, kann man diesen auf einen anderen Wert z.B. ''gentoo'' ändern. Dazu ist {{Path|/etc/conf.d/hostname}} zu ändern und {{Path|/etc/init.d/hostname}} neu zu starten.}}

Einige MySQL spezifische Informationen, die nicht den EBuild betreffen, wurden von hier entfertn, um dieses Dokument so konsistent wie möglich zu halten.

{{Important|Ab mysql-4.0.24-r2 werden Passwörter während der config-Phase eingegeben, wodurch die Root-Passwort-Eingabe sicherer wird.}}

Das config-Skript hat bereits die Befehle ausgedruckt, die wir ausführen müssen, um unser Passwort einzurichten. 

Wenn Sie OpenRC verwenden, geben Sie diesen Befehl ein:

{{RootCmd|/etc/init.d/mysql start|output=<pre>
 * Re-caching dependency info (mtimes differ)...
 * Starting mysqld (/etc/mysql/my.cnf) ...        [ ok ]
</pre>}}

Bei der Benutzung von systemd kommt das folgende Kommando zur Anwendung:

{{RootCmd|systemctl restart mysqld.service}}

Danach ist das root Passwort zu setzen:

{{RootCmd|/usr/bin/mysqladmin -u root -h localhost password 'new-password'}}

Sie können nun testen, dass Ihr Root-Passwort erfolgreich konfiguriert wurde, indem Sie versuchen, sich bei Ihrem MySQL-Server anzumelden: 

{{Cmd|mysql -u root -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 4 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Die Option <code>-u</code> gibt den Datenbank-Benutzer an, die Option <code>-h</code> spezifiert den Host. Wird kein Server angegeben wird <code>localhost</code> verwendet. Mit der Option <code>-p</code> wird die Passwortabfrage aktiviert. Nun erscheint die <code>mysql</code> Eingabeaufforderung. Hier werden die Kommandos an den <code>mysql</code> Server abgesetzt. Da wir nun als Root am Datenbankserver angemeldet sind, können wir mit dem setup des Servers beginnen.

{{Important|Die voreingestellte mysql Installation ist für Entwicklungssysteme angelegt. Mit dem Skript <code>/usr/bin/mysql_secure_installation</code> werden die Einstellungen etwas sicherer gemacht.}}

== Einrichten der Datenbank ==

=== Erstellen einer Datenbank ===

Wir sind eingeloggt und die mysql Eingabeaufforderung wird angezeigt. Zuerst lassen wir uns die aktuell vorhanden Datenbasen anzeigen. Dafür benutzen wir den <code>SHOW DATABESES</code> Befehl. 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| mysql    |
| test     |
+----------+
2 rows in set (0.09 sec)
</pre>
}}

{{Important|MySQL Befehle enden immer mit einem Semikolon <code>;</code>}}

Obwohl schon eine Test-Datenbank eingerichtet ist, wollen wir troztdem unsere eigene Datenbank erstellen. Datenbanken werden mit dem Befehl <code>CREATE DATABASE</code> erzeugt. Unsere Datenbank soll den Namen "gentoo" erhalten. 

{{Cmd|CREATE DATABASE gentoo;|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.08 sec)
</pre>
}}

Aus der Antwort des Datenbank Servers ist ersichtlich, dass der Befehl ohne Fehler ausgeführt wurde. In unserem Fall wurde 1 Zeile verändert. Die ist ein Verweis auf die Hauptdatenbank, welche eine Liste der vorhandenen Datenbanken vorhält. Sie müssen sich nicht zu viele Gedanken über die Hintergrunddetails machen. Die letzte Zahl ist, wie schnell die Abfrage ausgeführt wurde. Wir können überprüfen, ob die Datenbank erstellt wurde, indem Sie den Befehl <code>SHOW DATABASES</code> erneut ausführen. 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| gentoo   |
| mysql    |
| test     |
+----------+
3 rows in set (0.00 sec)
</pre>
}}

In der Tat wurde unsere Datenbank erstellt. Um mit dem Erstellen von Tabellen für unsere neue gentoo Datenbank arbeiten zu können, müssen wir sie als unsere aktuelle Datenbank auswählen. Dazu verwenden wir den Befehl <code>USE</code>. Der Befehl <code>USE</code> übernimmt den Namen der Datenbank, die Sie als aktuelle Datenbank verwenden möchten. Eine weitere Möglichkeit besteht darin, sie nach dem Schalter <code>-D</code> auf die Befehlszeile zu setzen. Gehen wir weiter und wechseln in die gentoo Datenbank. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Database changed
</pre>
}}

Die aktuelle Datenbank ist nun unsere erzeugte Gentoo Datenbank und wir werden nun einige Tabellen erstellen und diese mit Daten füllen.

== Arbeiten mit Tabellen in MySQL ==

=== Erzeugen einer Tabelle ===

Die Gliederung von MySQL ist wie folgt aufgebaut:
Datenbanken, Tabellen, Records und Felder. Datenbanken beinhalten Tabellen, Tabellen halten Records zusammen, Records sind aus Felder zusammen gesetzt. Die Felder enthalten die akutellen Informationen. Diese Gliederung lässt den Benutzer die Wahl wie auf die Informationen zugegriffen werden können. Bis hierher wurden nur Datenbanken benutzt, nun sind Tabellen an der Reihe. Eine Auflistung der Tabellen erhält man mit <code>SHOW TABLES</code>. Noch gibt es keine Tabellen in unserer Datenbank, wie die Ausgabe des Kommandos zeigen wird: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
Empty set (0.00 sec)
</pre>
}}

Das bedeutet, dass wir einige Tabellen erstellen müssen. Dazu verwenden wir den Befehl <code> CREATE TABLE </code>. Dieser Befehl unterscheidet sich jedoch deutlich von dem einfachen Befehl <code> CREATE DATABASE </code>. Dieser Befehl nimmt eine Liste von Argumenten entgegen. Das Formular ist wie folgt: 

{{CodeBox|title=CREATE TABLE Syntax|lang=sql|1=
CREATE TABLE [table_name] ([field_name] [field_data_type]([size]));
}}

'''table_name''' ist der Name der Tabelle, die wir erstellen möchten. In diesem Fall erstellen wir eine Tabelle mit dem Namen <code> developers </code>. Diese Tabelle enthält den Namen des Entwicklers, E-Mail-Adresse und Job.

'''field_name''' enthält den Namen des Feldes. Wir haben in diesem Fall 3 erforderliche Namen: Name, E-Mail und Job.

Der '''field_data_type''' legt fest, welche Art von Information in dem entsprechenden Feld gespeichert werden soll. Die verschiedenen verfügbaren Formate finden Sie in der  [https://dev.mysql.com/doc/refman/5.7/en/data-types.html  MySQL-Dokumentation]. Für unsere Zwecke verwenden wir den Datentyp <code>VARCHAR</code> für alle unsere Felder. <code>VARCHAR</code> ist einer der einfachsten Datentypen, wenn es um die Arbeit mit Strings geht. 

'''size''' gibt an, wie viel Daten ein einzelnes Feld speichern wird. In diesem Fall verwenden wir 128. Dies bedeutet, dass das Feld <code>VARCHAR</code> -Daten mit 128 Byte haben kann. Sie können sich dies vorläufig als 128 Zeichen vorstellen, obwohl es eine etwas technischere Erklärung gibt, die die obige Seite Ihnen bieten wird. Jetzt, wo wir wissen, wie wir die Tabelle erstellen werden, machen wir es. 

{{Cmd|CREATE TABLE developers ( name VARCHAR(128), email VARCHAR(128), job VARCHAR(128));|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.11 sec)
</pre>
}}

Unsere Tabelle wurde erzeugt. Eine Liste der Tabellen zeigt uns der Befehl  <code>SHOW TABLES</code>: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+------------------+
| Tables_in_gentoo |
+------------------+
| developers       |
+------------------+
1 row in set (0.00 sec)
</pre>
}}

Da ist unsere Tabelle, es fehlen jedoch Informationen über die einzelnen Felder. Dafür verwenden wir den Befehl <code> DESCRIBE </code> (oder <code> DESC </code>), der den Namen der Tabelle als Argument verwendet. Mal sehen, was uns das für unsere Entwicklertabelle bringt. 

{{Cmd|DESCRIBE developers;|prompt=mysql&gt; |output=<pre>
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| name  | varchar(128) | YES  |     | NULL    |       |
| email | varchar(128) | YES  |     | NULL    |       |
| job   | varchar(128) | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
</pre>
}}

Dies zeigt die verschiedenen Felder und ihre Typen. Es zeigt auch ein paar zusätzliche Attribute, die den Rahmen dieses Howto sprengen. Weitere Informationen finden Sie im [http://dev.mysql.com/doc/mysql/en/ MySQL Referenzhandbuch]. Wir haben jetzt eine Tabelle, mit der wir arbeiten können. Lass uns im nächsten Schritt die Tabelle mit Daten füllen.

=== Füllen unserer MySQL Datenbank ===

Wir fügen Daten mittels <code>INSERT</code> Befehl ein. Ähnlich wie <code>CREATE TABLE</code>, hat er ein spezifisches Format. 

{{CodeBox|title=INSERT Syntax|lang=sql|1=
INSERT INTO table (col1, col2, ...) VALUES('value1', 'value2', ...);
}}

Dieser Befehl wird verwendet, um einen Datensatz in '''table''' einzufügen. Nach dem Tabellennamen kann die Aufzählung der Spalten folgen, in die Daten eingefügt werden sollen. Auf <code>VALUES () </code> folgen die Werte, die Sie in die Tabelle einfügen möchten. Sie können die Liste der Spalten weglassen, wenn Sie genau einen Wert für jede Spalte angeben, und wenn Sie die Werte in der gleichen Reihenfolge wie die Spalten aufführen. In diesem Fall möchten wir Daten in die Entwicklertabelle einfügen. Lassen Sie uns Beispieldatensätze einfügen: 

{{Cmd|INSERT INTO developers VALUES('Joe Smith', 'joesmith@gentoo.org', 'toolchain');|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.06 sec)
## (If you don't know the order of the columns in the table or want to insert an incomplete record)
mysql> INSERT INTO developers (job, name) VALUES('outsourced', 'Jane Doe');
Query OK, 1 row affected (0.01 sec)
</pre>
}}

Der Rückgabecode zeigt an, dass der Datensatz korrekt eingefügt worden ist. Was ist, wenn wir mehr Informationen eingeben möchten als nur einen Datensatz? Hier kommt der Befehl <code> LOAD DATA </code> ins Spiel. Dieser lädt Datensätze aus einer tabulatorgetrennten Datei. Versuchen wir das, indem wir eine Datei in unserem Home-Verzeichnis mit den Datensätzen bearbeiten. Wir nennen diese Datei {{Path | records.txt}}. Hier ein Beispiel: 

{{CodeBox|title=~/records.txt|1=
John Doe	johndoe@gentoo.org	portage
Chris White	chriswhite@gentoo.org	documentation
Sam Smith	samsmith@gentoo.org	amd64
}}

{{Important|Es ist wichtig die richtigen Daten zu verwenden, da mit fehlerhaften Daten in Verbindung mit <code>LOAD DATA</code> unerwünschte Nebeneffekte auftreten können.}}

Der Aufruf von <code>LOAD DATA</code> ist etwas umständlich, im folgenden Beispiel wird die einfachste Form verwendet. 

{{CodeBox|title=LOAD DATA Syntax|lang=sql|1=
LOAD DATA LOCAL INFILE '/pfad/zur/datei' INTO TABLE table;
}}

{{Path|/pfad/zur/Datei}} entspricht dem Verzeichnins und Dateiname der verwendet werden soll. <CODE>table</CODE> ist der Name der Tabelle. In diesem Beispiel ist {{Path|~/records.txt}} die Datei und developer ist die Tabelle. 

{{Cmd|LOAD DATA LOCAL INFILE '~/records.txt' INTO TABLE developers;|prompt=mysql&gt; |output=<pre>
Query OK, 3 rows affected (0.00 sec)
Records: 3  Deleted: 0  Skipped: 0  Warnings: 0
</pre>
}}

{{Important|Wenn Sie ein merkwürdiges Verhalten feststellen, vergewissern Sie sich, dass Ihre Felder durch Tabulatoren getrennt sind. Wenn Sie Informationen aus einer anderen Quelle in Ihre Datei einfügen, werden die Tabulatoren möglicherweise in Leerzeichen umgewandelt}}

Das hat gut funktioniert. Dies fügt jedoch einfach Datensätze ein und gibt Ihnen keinerlei Kontrolle über MySQL. Viele Webanwendungen verwenden SQL-Skripte, um MySQL schnell und einfach einzurichten. Wenn Sie ein SQL-Skript verwenden möchten, müssen Sie MySQL im Batch-Modus ausführen oder die Datei als Quelle verwenden. Hier ist ein Beispiel für die Ausführung von MySQL im Batch-Modus: 

{{Cmd|mysql -u root -h localhost -p < sqlfile}}

Wie bei <code> LOAD DATA </code> sollte man wissen was {{Path | sqlfile}} tut. Anderenfalls kann Ihre Datenbank kompromittiert werden! Eine andere Möglichkeit, dies zu erreichen, ist die Verwendung des Befehls <code> source </code>. Dieser Befehl führt mysql-Befehle aus einer SQL-Datei im interaktiven Modus von mysql aus. So erhalten Sie eine SQL-Datei: 

{{Cmd|source sqlfile;|prompt=mysql&gt; }}

Wenn Sie eine Webanwendung sehen, die eine SQL-Datei ausführen soll, können die beiden obigen Befehle zum Ausführen dieser Aufgabe verwendet werden. Wir haben unseren Tabellenaufbau, wollen wir also einaml unsere Felder überprüfen? Um unsere Tabelle zu durchsuchen benutzen wir Abfragen. 

=== Abfragen zum Durchsuchen von MySQL Tabellen ===

Abfragen sind eines der Hauptmerkmale jeder SQL-Datenbank. Sie helfen uns, Daten in unseren Tabellen in etwas Nützliches zu verwandeln. Die meisten Abfragen werden mit dem Befehl <code> SELECT </code> ausgeführt. Der <code> SELECT </code> -Befehl ist ziemlich komplex, und wir werden nur drei Hauptformen des Befehls in diesem Dokument betrachten. 

{{CodeBox|title=SELECT forms|lang=sql|1=
## (Select all entries in a table)
SELECT * FROM table;
## (Select specific entries in a table)
SELECT * FROM table WHERE field=value;
## (Select specific fields)
SELECT field1,field2,field3 FROM table [WHERE field=value];
}}

Werfen wir einen Blick auf die erste Form. Es ist relativ einfach und gibt Ihnen ein Gesamtbild Ihrer Tabelle. Wir werden weitermachen, um zu sehen, welche Daten wir bisher haben. 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

Wir sehen sowohl die Daten, die wir durch <code> INSERT </code> eingefügt haben, als auch diejenigen, die durch <code> LOAD DATA </code> eingefügt wurden. Sagen wir mal, wir wollen nur den Rekord für Chris White sehen. Wir können dies mit der zweiten Form von select tun, wie unten gezeigt. 

{{Cmd|SELECT * FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+---------------+
| name        | email                 | job           |
+-------------+-----------------------+---------------+
| Chris White | chriswhite@gentoo.org | documentation |
+-------------+-----------------------+---------------+
1 row in set (0.08 sec)
</pre>
}}

Wie erwartet, wurde der von uns gesuchte Eintrag ausgewählt. Nehmen wir an, wir wollten nur den Job und die E-Mail-Adresse der Person kennen, nicht ihren Namen. Wir können dies mit der dritten Form von <code> SELECT </code> tun, wie hier gezeigt. 

{{Cmd|SELECT email,job FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-----------------------+---------------+
| email                 | job           |
+-----------------------+---------------+
| chriswhite@gentoo.org | documentation |
+-----------------------+---------------+
1 row in set (0.04 sec)
</pre>
}}

Diese Methode der Auswahl ist viel einfacher zu verwalten, insbesondere mit größeren Mengen an Informationen, wie wir später sehen werden. Im Moment haben wir als mysql root-Benutzer unbegrenzte Rechte, um mit der MySQL-Datenbank das zu tun, was wir wollen. In einer Serverumgebung kann ein Benutzer mit solchen Berechtigungen ziemlich problematisch sein. Um zu kontrollieren, wer was mit den Datenbanken macht, richten wir Privilegien ein. 

== MySQL Berechtigungen ==

=== Gewähren von Berechtigungen with GRANT ===

Privilegien erlauben welche Art von Zugriff Benutzer auf Datenbanken, Tabellen, etc haben. In der gentoo-Datenbank ist das MySQL root-Konto das einzige Konto, das aufgrund seiner Berechtigungen darauf zugreifen kann. Lassen Sie uns nun zwei etwas generische Benutzer, guest und admin, erstellen, die auf die gentoo-Datenbank zugreifen und mit den darin enthaltenen Informationen arbeiten. Das Gastkonto wird eingeschränkt. Alles, was man mit diesem konto machen kann, ist Informationen aus der Datenbank zu lesen. admin hat die selbe Kontrolle wie root, aber nur für die gentoo-Datenbank (nicht die Haupt-mysql-Datenbanken). Bevor wir damit beginnen, wollen wir uns das etwas vereinfachte Format des Befehls <code> GRANT </code> genauer ansehen. 

{{CodeBox|title=GRANT Syntax|lang=sql|1=
GRANT [privileges] ON database.* TO '[user]'@'[host]' IDENTIFIED BY '[password]';
}}

{{Note| <code> GRANT </code> war die erste Möglichkeit einen Benutzer zu erstellen. Spätere Versionen von MySQL enthalten jedoch eine extra <code> CREATE_USER </code> -Funktion, obwohl <code> GRANT </code> immer noch bevorzugt wird.}}

Mit dem was wir bisher gelernt haben, kennen wir schon einige Berechtigungen die wir vergeben können: 

* <code>ALL</code> - Gibt alle Berechtigungen für die Datenbank
* <code>CREATE</code> - Erlaubt es Usern Tabellen zu erstellen
* <code>SELECT</code> - Erlaubt es Usern Abfragen an Tabellen zu richten
* <code>INSERT</code> - Erlaubt es Usern Daten in eine Tabelle einzufügen
* <code>SHOW DATABASES</code> - Erlaubt es Usern die Datenbasen aufzulisten
* <code>USAGE</code> - Der Benutzer hat keine Berechtigungen
* <code>GRANT OPTION</code> - Erlaubt es Usern Rechte zu vergeben

{{Note|
Benutzen Sie MySQL für das Verarbeiten von Daten aus einer Webanwendung, werden Sie hauptsächlich folgende Befehle benötigen:  <code> CREATE </code>, <code> SELECT </code>, <code> INSERT </code> (hier besprochen), sowie <code> DELETE </code> und <code> UPDATE </code> erläutert in [http://dev.mysql.com/doc/mysql/en/grant.html MySQL Referenzhandbuch - GRANT und REVOKE Syntax].
Viele Leute machen den Fehler, alle Berechtigungen zu erteilen, wenn es nicht wirklich notwendig ist. Erkundigen Sie sich bei den Anwendungsentwicklern, ob solche Berechtigungen Probleme mit dem allgemeinen Betrieb verursachen.}}

Der Benutzer 'admin' aus unserem Beispiel sollte alle Berechtigungen <code> ALL </code> erhalten.
Der Benutzer 'guest' erhält nur einen schreibgeschützten Zugriff, definiert durch <code> SELECT </code>.
'' 'gentoo' '' ist die Datenbank, für welche die Benutzer diese Berechtigungen erhalten sollen. Das * steht als Paltzhalter für alle Tabellen. Wenn Sie möchten, können Sie den Zugriff pro Tabelle zuteilen. '' 'user' '' ist der Name des Benutzers und '' 'host' '' ist der Hostname, auf den der Benutzer zugreift. In den meisten Fällen ist dies localhost. Schließlich ist '' 'password' '' das Passwort des Benutzers. Jetzt haben wir alle Informationen zusammen um die Benutzer zu erstellen. 

{{Cmd|GRANT ALL ON gentoo.* TO 'admin'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

{{Cmd|GRANT SELECT ON gentoo.* TO 'guest'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

Nachdem wir die Benutzer eingerichtet haben, testen wir sie. Zuerst beenden wir mysql durch Eingabe von <code> quit </code> an der Eingabeaufforderung: 

{{Cmd|quit|prompt=mysql&gt; }}

Wir haben die Benutzer eingerichtet und sind zurück an der Konsole. Lassen Sie uns als diese Benutzer fortfahren.

=== Testen der Benutzer Zugriffsrechte ===

Wir werden uns nun als Gastbenutzer anmelden. Dieser kann nur die Berechtigung für <code> SELECT </ code>, das bedeutet, dass nur Sucanfragen möglich sind. Melden Sie sihc mit dem Gastzugang an. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 6 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Jetzt sollten wir die Benutzerbeschränkung(en) testen. Wechseln wir zur gentoo-Datenbank: 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
</pre>
}}

Zur Probe werden wir nun etwas tun, wofür wir keine Rechte haben. Wir werden versuchen, eine Tabelle zu erstellen. 

{{Cmd|CREATE TABLE test (test VARCHAR(20), foobar VARCHAR(2));|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

Wie Sie sehen können, schlägt diese Funktion fehl, da unser Benutzer nicht über den entsprechenden Zugriff verfügt. Eine Berechtigung, die wir jedoch gewährt haben, ist die Anweisung <code> SELECT </ code>. Lassen Sie es uns damit versuchen: 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

Der Befehl ist erfolgreich und wir erhalten einen Einblick in die Möglichkeiten der Benutzerberechtigungen. Wir haben jedoch auch einen Administrator-Account erstellt. Dieser wurde erstellt, um zu zeigen, dass sogar alle Berechtigungen, die Benutzern gewährt werden, immer noch Einschränkungen haben können. Wir werden nun MySQL beenden und uns neu als Administrator einloggen. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u admin -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 7 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Zu Beginn werden wir versuchen, eine neue Datenbank mit unserem Admin-Benutzer zu erstellen. Dieser Admin-Benutzer hat Zugriff auf das root-MySQL-Konto und kann jede Art von Änderung an der ausgewählten gentoo-Datenbank vornehmen. Dadurch wird der Zugriff des Benutzers auf die Hauptdatenbank von MySQL getestet. Denken Sie daran, dass wir nur Berechtigungen für eine bestimmte Datenbank festlegen. 

{{Cmd|CREATE DATABASE gentoo2;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'admin@localhost' to database 'gentoo2'
</pre>
}}

Tatsächlich kann der Admin-Benutzer trotz aller Berechtigungen für die Gentoo-Datenbank keine Datenbanken in der MySQL-Hauptdatenbank erstellen. Wir können jedoch weiterhin das Admin-Konto verwenden, um die Gentoo-Datenbank zu ändern, wie hier anhand dieses Beispieldateneintrags gezeigt. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql> INSERT INTO developers VALUES('Bob Simmons', 'bobsimmons@gentoo.org', 'python');
Query OK, 1 row affected (0.08 sec)
</pre>
}}

Der Admin-Benutzer kann nach Belieben auf die Datenbank zugreifen. Jetzt müssen wir manchmal Benutzerrechte einschränken. Die Gründe hierfür können vielfältig sein, von einem problematischen Benutzer bis zu einem pensionierten Mitarbeiter. Werfen wir einen Blick darauf, wie Benutzerberechtigungen mit dem Befehl <code> REVOKE </code> widerrufen werden. 

=== Entfernen von Benutzerrechten mittels REVOKE Befehl ===

Mit dem Befehl <code> REVOKE </code> können wir den Zugriff für einen Benutzer verweigern. Wir können entweder den vollen Zugang oder den spezifischen Zugang verweigern. In der Tat ähnelt das Format <code> GRANT </code>. 

{{CodeBox|title=REVOKE Syntax|lang=sql|1=
REVOKE [privileges] ON database.* FROM '[user]'@'[host]';
}}

Im Abschnitt zum Befehl <code> GRANT </code> werden die Optionen erklärt. In diesem Abschnitt verweigern wir jedoch den vollen Zugriff auf einen Benutzer. Nehmen wir an, wir finden heraus, dass der Gastaccount einige Sicherheitsprobleme verursacht. Wir beschließen, alle Privilegien zu widerrufen. Wir loggen uns als root ein und führen die notwendigen Änderungen durch. 

{{Cmd|REVOKE ALL ON gentoo.* FROM 'guest'@'localhost';|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

{{Hinweis | In diesem Fall ist der Benutzerzugriff einfach, so dass das Widerrufen pro Datenbank kein Problem darstellt. In größeren Anwendungen würden Sie jedoch wahrscheinlich *. * Anstelle von gentoo.* verwenden, um den Benutzerzugriff auf alle anderen Datenbanken zu entfernen.}}

Wir loggen uns wieder aus und melden uns als Gastbenutzer an. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 9 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Obwohl wir uns einloggen können, ist unser Zugang zu Gentoo jetzt nicht mehr möglich. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

And our problematic user is no longer able to access the gentoo database. Please note that the user was still able to login. That is because they remain in the main MySQL database. Let's take a look at how to completely remove an account with <code>DELETE</code> and the MySQL user table. 

=== Removing Accounts Using DELETE ===

The MySQL user table is a listing of all users and information about them. Make sure you're logged in as root. Then go ahead and use the main MySQL database. 

{{Cmd|USE mysql;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql>
</pre>
}}

Now let's see what tables the mysql database has: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+-----------------+
| Tables_in_mysql |
+-----------------+
| columns_priv    |
| db              |
| func            |
| host            |
| tables_priv     |
| user            |
+-----------------+
6 rows in set (0.00 sec)
</pre>
}}

The user table is the table we're after. However, the user table contains 30 different fields, making it very hard to read. In order to make things easier to read, we'll go ahead and use the third version of the <code>SELECT</code> statement. The fields we're after are Host and User. 

{{Cmd|SELECT Host,User FROM user WHERE User {{=}} 'guest';|prompt=mysql&gt; |output=<pre>
+-----------+-------+
| Host      | User  |
+-----------+-------+
| localhost | guest |
+-----------+-------+
1 row in set (0.00 sec)
</pre>
}}

Now that we have our information, we can get rid of the guest user. This is done with the <code>DELETE</code> command and the syntax is shown below. 

{{CodeBox|title=DELETE Syntax|lang=sql|1=
DELETE FROM table WHERE field='value';
}}

You may notice that <code>DELETE</code> is somewhat similiar to the <code>SELECT</code> statement in its format. In this case, the field will be User, and the value guest. This will delete the record in the user table where the user is guest, successfully deleting our guest user account. Let's go ahead and do that: 

{{Cmd|DELETE FROM user WHERE User{{=}}'guest';|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.07 sec)
</pre>}}

{{Cmd|FLUSH PRIVILEGES;|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

It seems to have worked ok. Let's test by logging out and attempting to login as our guest user. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
ERROR 1045: Access denied for user: 'guest@localhost' (Using password: YES)
</pre>
}}

Our user is now successfully deleted! 

=== Conclusion ===

While this guide focuses mainly on setting up MySQL on the command line, a few alternatives are available in GUI form: 

* [http://www.phpmyadmin.net/home_page/ phpMyAdmin] - Popular php based MySQL administration tool.
* [http://sourceforge.net/projects/mysqlnavigator/ mysqlnavigator] - QT frontend to MySQL.
* [http://gmyclient.sourceforge.net/ gmyclient] - A GNOME based MySQL client.
* [http://www.knoda.org/ knoda] - A KDE MySQL client.

This ends the MySQL introductory tutorial. I hope this gives you a better understanding of the basics behind MySQL and getting a database set up.

[[Category:Database]]  {{Migrated|originalauthors=Chris White, Shyam Mani, Xavier Neys}}
