<languages />

{{Metadata|abstract=nvidia-driversはNVIDIA製グラフィックスカード用のプロプライエタリなドライバーです。オープンソースの代替としてnouveauがあります。}}

{{Package|x11-drivers/nvidia-drivers}}はNVIDIA製グラフィックスカード用のプロプライエタリなドライバーです。オープンソースの代替として[[nouveau]]があります。

Portage Treeにある{{Package|x11-drivers/nvidia-drivers}}はNVIDIAによって公開されていて、Linuxカーネルと共に動くようビルドされています。これらにはグラフィックスカードとのやりとりの大部分を行うバイナリ・ブロブが含まれています。ドライバーはカーネルモジュールとX11ドライバーの二つの部分で攻勢されています。この両方が一つのソフトウェアパッケージに含まれています。NVIDIAが行ったパッケージのしかたにより、インストール前にいくつか決めなければならない事柄があります。

{{Package|x11-drivers/nvidia-drivers}}はNVIDIAの最新のドライバーが含まれていて、大半のカードがサポートされています。カードの製造時期によっては対応するドライバーのいくつかのバージョンが含まれています。このパッケージはeclassを使用し、システムに含まれるカードの種類を特定した上で正しいバージョンのドライバーをインストールします。

== ハードウェアの互換性 ==

{{Package|x11-drivers/nvidia-drivers}}は幅広いNVIDIAのグラフィックスカードをサポートします。システムに含まれるカードに合わせられるよう、このパッケージには複数のバージョンがあります。 どのバージョンの{{Package|x11-drivers/nvidia-drivers}}を使うべきかを確認するには、NVIDIA公式ドキュメントである [http://www.nvidia.com/object/IO_32667.html What's a legacy driver?]を参照してください。 確認の際に便利なものとして[http://www.nvidia.com/Download/Find.aspx  an interactive form]があります。システムに含まれるグラフィックスカードを入力すると、もっとも適したバージョンを教えてくれます。(なお、'Product Type'の入力欄にあるLegacyオプションにはご注意ください)

もしグラフィックスカードがレガシーカードと分かったならば、以下のような最近の{{Package|nvidia-drivers}}をマスクしてください。

{{FileBox|filename=/etc/portage/package.mask|title=バージョン 174 以上のドライバーをマスクする|1=
>x11-drivers/nvidia-drivers-174
}}

Gentooが71.86.xxバージョンを提供していないことを念頭に置いておいてください。もしこのドライバーを必要とするグラフィックスカードがシステム内にあるならば、[[nouveau]]ドライバーを使うことが推奨されます。

== インストール ==

=== カーネル ===

上記の通り、NVIDIAのカーネルドライバーは現在のカーネルに合わせてインストールされ、実行されます。カーネルモジュールとしてビルドされるので、カーネルはモジュールのロードに対応していなければなりません。(下記参照)

カーネルモジュール({{Path|nvidia.ko}})は(バイナリ・ブロブとして一般的に知られている)グラフィックスチップを動かすプロプライエタリな部分と、(「のり」である)実行時にカーネルとプロプライエタリな部分の橋渡しをするオープンソースの部分から構成されます。これらがすべて協調して動作しないと、(カーネルパニックや未保存のデータが残っている状態でのXサーバーのクラッシュなどによる)データの損失につながります。また、(過熱やそのた電源管理の問題に代表される)ハードウェアの不具合も考えられます。

==== カーネルの互換性 ====

時々、新しいカーネルのリリースによってドライバー用の内部ABIが変わることがあります。これは、それらのABIを利用するすべてのドライバーをこの変更に合わせなければならないことを意味します。オープンソースのドライバー、特にカーネルとともに頒布されるものに関しては、ドライバーやカーネルの他の部分をつなぐ一連の機能呼び出しを見直すことが容易で、この様な変更はほとんど手間な加えることができます。しかし、プロプライエタリなドライバーに関しては同じようにはいきません。内部ABIが変わるとき、プロプライエタリな部分によってどのように「のり」の部分が使われているか分からないため、ただ単に「のり」の部分を修正することは不可能です。うまく修正を重ねて順調に動いているようであっても、nvidia.koを新しい、サポートされていないカーネルで使うことにはデータの損失やハードウェアの不具合が起きるといったリスクが付随します。

新しい、互換性のないバージョンのカーネルがリリースされたとき、しばらくはサポートされる最新のカーネルを使用しつづけることが最善でしょう。NVIDIAが一般に公開してもいいと判断するプロプライエタリなドライバーを公開するのには通常数週間かかります。気長に待つべきです。もし新しいカーネルが絶対に必要ならば、nvidia-driversのebuildでepatch_userコマンドを使うこともできます。これによってnvidia-driversに何らかの修正を加えて、最新のサポートされていないカーネルでも動くようにすることができます。nvidia-driversのメンテナも、NVIDIA自体もこのような用法はサポートしないことを念頭に置いてください。ハードウェアの保証もおそらく無効になるでしょう。また、NVIDIAのみがまともにデバッグできるのでGentooのメンテナも修正を加えることはできません。(Gentoo、Upstreamの双方の)カーネルのメンテナはプロプライエタリなドライバー、ひいてはプロプライエタリなソフトウェアに「汚染」されたシステムの不調に対してサポートを提供しません。

もし{{c|genkernel all}}によってカーネルが構築されたならば、準備は整っています。もしそうでなければ、以下が有効になっているかもう一度確認してください:

{{KernelBox|title=Enable loadable module support|1=
[*] Enable loadable module support --->
}}

カーネル内の''Memory Type Range Register''も有効にしてください。

{{KernelBox|title=Enable MTRR support|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

システムにAGPグラフィックスカードがある場合は、カーネルのagpgartサポートを有効にすることもできます。モジュールとして有効にする他、カーネルに組み込むこともできます。もしagpgartモジュールが使用されなければ、ドライバーに含まれるNvAGPという独自のagpgartの実装が使用されます。システムによっては、こちらを使用する方がカーネル内のagpgartよりも高いパフォーマンスが得られ、その逆も場合もあります。使用しているシステムでどちらの方がよいパフォーマンスを得られるかを確認するとよいでしょう。分からない場合は、カーネル内のagpgartを使ってください。

{{KernelBox|title=agpgartサポートを有効にする|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note|amd64では、IOMMUがagpgartの設定をします。}}

{{Important/ja|x86 および AMD64 プロセッサでは、カーネル内蔵の [[framebuffer|フレームバッファ]] ドライバがNVIDIA製のバイナリドライバと競合します。これらのCPUに対してカーネルをコンパイルするときは、以下のようにしてカーネル内臓のドライバを完全に取り除いてください:
{{KernelBox|title=カーネル内蔵ドライバのサポートを無効にする|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
nouveau ドライバを無効にすることもお忘れなく:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        < > Nouveau (nVidia) cards
}}
}}

フレームバッファーの代替品は[[uvesafb]]です。これは{{Package|x11-drivers/nvidia-drivers}}と平行してインストールすることができます。 

{{Important/ja|x86 および AMD64 プロセッサでは、[[uvesafb]] ドライバがNVIDIA製のバイナリドライバのバージョン361.28以降と競合します。}}

(U)EFIシステムでは uvesafb は動きません。またカーネルで "efifb" サポートを有効にする (<code>CONFIG_FB_EFI=y</code>) と、時々NVIDIAドライバの初期化に問題が発生することがあります。今のところ(U)EFIシステムで他に使えるフレームバッファはありません。

'''nvidia-drivers''' ebuild は {{Path|/usr/src/linux}} のシンボリックリンクを元にカーネルバージョンを決定します。このシンボリックリンクが正しいソースを指し、きちんとコンフィグレーションができていることを確認してください。カーネルのコンフィグレーションについては [[Handbook:Main_Page/ja|Gentoo Handbook]] の "カーネルの設定" をお読みください。

First, choose the right kernel source using {{c|eselect}}. When using {{Package|sys-kernel/gentoo-sources}} version 3.7.10 for instance, the kernel listing might look something like this:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the kernel that the symbolic link points to.

If the symlink is not pointing to the correct sources, update the link by selecting the number of the desired kernel sources, as in the example above.

{{RootCmd|eselect kernel set 1}}

== 設定 ==

=== ドライバー === 

いよいよドライバをインストールします。まず [[Xorg/Guide/ja|Xサーバー設定ガイド]] に従い {{Path|/etc/portage/make.conf}} で <code>VIDEO_CARDS="nvidia"</code> と設定します。そうするとXサーバーをインストールする際に、適切なバージョンの {{Package|x11-drivers/nvidia-drivers}} をインストールしてくれます。

{{Note/ja|ドライバは {{Path|/etc/portage/make.conf}} で <code>gtk</code> USEフラグを指定してインストールすることもできます。これを指定すると {{Package|media-video/nvidia-settings}} という、グラフィックカードを様々な角度からモニタ・設定できる便利なGUIツールがインストールされます。}}

{{Important/ja|[[Kernel/Upgrade/ja|カーネルをビルドする]]時は毎回、NVIDIAのカーネルモジュールを再インストールしなければなりません。{{Package|x11-drivers/nvidia-drivers}} のようにebuildでインストールされるモジュールを再ビルドするには、{{c|emerge @module-rebuild}} を実行するのが簡単です。}}

Once the installation has finished, run {{c|modprobe nvidia}} to load the kernel module into memory. If this is an upgrade, remove the previous module first.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

To prevent from having to manually load the module on every bootup, have this done automatically each time the system is booted, so edit {{Path|/etc/conf.d/modules}} and add <code>nvidia</code> to it.

{{Important/ja|もし <code>agpgart</code> をモジュールとしてコンパイルしたら、{{Path|/etc/conf.d/modules}} にも追加してください。}}

=== カーネルモジュールの署名 (任意) ===

{{Note/ja|これは署名済みカーネルモジュールを使わないシステムには関係ない話なので、読み飛ばしても構いません。}}

セキュアブートのためのカーネル署名を行っている場合は、NVIDIAのカーネルモジュールも読み込む前に署名しなければなりません。

これはカーネル付属の {{c|perl}} スクリプトで次のように行えます:

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

As of driver version 358.09 a new module has been made to handle monitor mode setting and for this driver version this module must also be signed.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Once the modules are signed, the driver will load as expected on boot up. This module signing method can be used to sign other modules too - not only the nvidia-drivers. Just modify the path and corresponding module accordingly.

=== The X server ===

Once the appropriate drivers are installed, configure the X server to use the <code>nvidia</code> driver instead of the default <code>nv</code> driver.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Run {{c|eselect}} so that the X server uses the NVIDIA GLX libraries:

{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Enabling global nvidia support ===

Some tools, such as {{Package|media-video/mplayer}} and {{Package|media-libs/xine-lib}}, use a local USE flag called <code>xvmc</code> which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in <code>xvmc</code> in the USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to {{Package|media-video/mplayer}} and/or {{Package|media-libs/xine-lib}} in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the <code>nvidia</code> USE flag, so it might be a good idea to add it to {{Path|/etc/portage/make.conf}}.

Then, run {{c|emerge -uD --newuse @world}} to rebuild the applications that benefit from the USE flag change.

=== Using the nVidia settings tool ===

NVIDIA also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as {{Package|media-video/nvidia-settings}}. As mentioned earlier, it will be pulled in automatically when installing the drivers with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== Enable OpenGL/OpenCL ===

To enable OpenGL and OpenCL though the device, run:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Make sure that the Xorg server is not running during these changes.

== Usage ==

=== カードをテストする ===

To test the NVIDIA card, fire up X and run {{c|glxinfo}}, which is part of the {{Package|x11-apps/mesa-progs}} package. It should say that direct rendering is activated:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

To monitor the FPS, run {{c|glxgears}}.

== トラブルシューティング ==

For an overview of the currently open bugs reported against the {{Package|x11-drivers/nvidia-drivers}} page, take a look at the {{Bug|nvidia-drivers|search=package}}.

=== Driver fails to initialize when MSI interrupts are enabled ===

The Linux NVIDIA driver uses Message Signaled Interrupts (MSI) by default. This provides compatibility and scalability benefits, mainly due to the avoidance of IRQ sharing. Some systems have been seen to have problems supporting MSI, while working fine with virtual wire interrupts. These problems manifest as an inability to start X with the NVIDIA driver, or CUDA initialization failures.

MSI interrupts can be disabled via the NVIDIA kernel module parameter <code>NVreg_EnableMSI=0</code>. This can be set on the command line when loading the module, or more appropriately via the distribution's kernel module configuration files (such as those under {{Path|/etc/modprobe.d/}}).

例えば:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=0660 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Getting 2D acceleration to work on machines with 4GB memory or more ===

When NVIDIA 2D acceleration is giving problems, then it is likely that the system is unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Every line should contain <code>write-back</code> or <code>write-combining</code>. When a line shows up with <code>uncachable</code> in it then it is necessary to change a BIOS setting to fix this.

Reboot and enter the BIOS, then find the MTRR settings (probably under "CPU Settings"). Change the setting from <code>continuous</code> to <code>discrete</code> and boot back into Linux. There is now no <code>uncachable</code> entry anymore and 2D acceleration now works without any glitches.

=== "no such device" appears when trying to load the kernel module ===

This is usually caused by one of the following issues:

# The system does not have a NVIDIA card at all.  Check {{c|lspci}} output to confirm that the system has a NVIDIA graphics card installed and detected.
# The currently installed version of {{Package|x11-drivers/nvidia-drivers}} does not support the installed graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Another kernel driver has control of the hardware. Check {{c|lspci -k}} to see if another driver like "nouveau" is bound to the graphics card. If so, disable or blacklist this driver.

=== Xorg says it can't find any screens ===

When after booting the system, it ends up with a black screen or a console prompt instead of the GUI; then press {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} to bring up a virtual console. Next, run:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

to see the output of Xorg. If one of the first errors is that Xorg can't find any screens, then follow the following steps to resolve the issue.

It should be enough to run the following command before rebooting:

{{RootCmd| /opt/bin/nvidia-xconfig}}

But if that doesn't work, run {{c|lspci}} and notice that the video card starts off like this:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

Take the first bit, <code>01.00.0</code> and put it in the {{Path|/etc/X11/xorg.conf}} file with the <code>BusID</code> option:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering is not enabled ===

If direct rendering does not work, it may be because the kernel has Direct Rendering Manager enabled, which conflicts with the driver. See the direct rendering status by following instructions in the section [[#Testing the card|Testing the card]].

First, disable Direct Rendering Manager (<code>CONFIG_DRM</code>) in the kernel :

{{KernelBox|title=Direct Rendering Manager を無効にする|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Next, rebuild {{Package|x11-drivers/nvidia-drivers}} since the driver may have built against the kernel DRM symbols. It should fix the problem.

=== Video playback stuttering or slow ===

Lately there seems to be some breaking with playback of some types of video with the NVIDIA binary drivers, causing slow video playback or significant stuttering. This problem seems to be occurring within the Intel CPU Idle replacement instead of the common ACPI CPU idling method for certain CPU's.

Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVIDIA Powermizer feature, or setting Powermizer to maximum performance within {{c|nvidia-settings}} has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <code>mplayer-nodeint</code> with something similar to <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> as a work around.)

=== No vertical synchronization (no VSync, tearing) in OpenGL applications ===

Adding the following option to the screen section prevents tearing on GTX 660, 660 Ti, and probably some other GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== 上級者向け設定 ==

=== Documentation ===

The {{Package|x11-drivers/nvidia-drivers}} package also comes with comprehensive documentation. This is installed into {{Path|/usr/share/doc}} and can be viewed with the following command:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== カーネルモジュールのパラメーター ===

The <code>nvidia</code> kernel module accepts a number of parameters (options) which can be used to tweak the behavior of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run {{c|update-modules}} after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

{{Warning/ja|これらのカーネルオプションはハードウェアがサポートしない機能も有効化できるため、この作業は十分に注意しなければなりません。設定値を間違えちゃった、では済まないかもしれません。その変更が本当に必要なのか、設定値は正しいのかをよく確かめない限り、変更を加えてはいけません。}}

{| class="table table-condensed table-striped"
|-
! Attribute !! Default !! Description
|-
| <code>NVreg_DeviceFileUID</code> || <code>0</code> || Modify the user ID for the device file. The default value sets it to the {{c|root}} user. Setting this to another user ID will make the driver module create the device file with access available to that user ID.
|-
| <code>NVreg_DeviceFileGID</code> || <code>27</code> || Modify the Group ID for the device file. The default value sets it to the {{c|video}} group.
|-
| <code>NVreg_DeviceFileMode</code> || Undefined || Set the permissions for the device file. A value of 0660 grants the owner and group-owner read-write access while other users cannot access the device file.
|-
| <code>NVreg_ModifyDeviceFiles</code> || <code>1</code> || Instruct the driver to enable or disable dynamic device file management.
|-
| <code>NVreg_EnablePCIeGen3</code> || <code>0</code> || Enable PCIe Gen 3.x support. If the system supports this 8GT high speed bus then enable it with this module option flag. When this is enabled but the system does not support Gen 3.0, the behavior of the system can become irratic and unstable. Some have even reported damage to hardware enabling this when it is not properly supported. By default the Nvidia driver is set to use PCIe Gen 2.x for compatibility reasons.
|-
| <code> NVreg_UsePageAttributeTable</code> || <code>0</code> || This is one of the latest and newest additions to the Nvidia driver modules option. It allows the driver to take full advantage of the PAT technology - a newer way of allocating memory, replacing the older Memory Type Range Register (MTRR) method. The PAT method creates a partition type table at a specific address mapped inside the register and utilizes the memory architecture and instruction set more efficiently and faster. If the computer supports PAT and the feature is enabled in the kernel then this flag can be enabled. Without PAT support, users may experience unstable performance and even crashes if this is enabled. So be careful with these options.
|-
| <code>NVreg_EnableVia4x</code> || <code>0</code> || Enable AGP 4x mode in the the NVIDIA driver on Via-chipset-powered systems. Some of these hardware configurations would not work properly in AGP 4x mode when others would. The default leaves it at AGP 2x mode.
|-
| <code>NVreg_EnableALiAGP</code> || <code>0</code> || On ALi1541 and ALi1647 chipsets, AGP support is by default disabled by the NVIDIA drivers. The value specifies the speed factor to use, so the values 1, 2, 4 and 8 represent AGP 1x, 2x, 4x and 8x respectively. NVIDIA does not recommend changing the value as it may lead to unstable systems.
|-
| <code>NVreg_ReqAGPRate</code> || Unspecified || Forces the AGP mode on the driver. For instance, a value of 1 means AGP 1x, while a value of 4 means AGP 4x.
|-
| <code>NVreg_NvAGP</code> || || Changes the AGP Gart mode setting. Possible values are: <code>0</code> (Disable), <code>1</code> (Enable using NVIDIAs internal AGP-Gart), <code>2</code> (Enable using the Linux kernel AGP-Gart) and <code>3</code> (Enable and use any available, but try th NVIDIA internal one first).
|-
| <code>NVreg_EnableAGPSBA</code> || <code>0</code> || Disables (<code>0</code>) or enables (<code>1</code>) AGP Side Banding. For stability reasons, the setting is by default disabled, but the setting can be enabled for testing and debugging purposes. This is not supported by NVIDIA though.
|-
| <code>NVreg_EnableAGPFW</code> || <code>0</code> || Enables AGP Fast-Writes when set to <code>1</code>. Depending on the system's chipset this may cause stability issues if enabled.
|-
| <code>NVreg_Mobile</code> || <code>0</code> || Through this setting, users can force the EDID information for particular systems. This workaround is provided for mobile GPU's where EDID information is either non-functional or disabled. Potential values are <code>0</code> (Auto detection of the correct setting), <code>1</code> (Dell notebooks), <code>2</code> (non-Compa1 Toshiba laptops), <code>3</code> (All other notebooks/laptops), <code>4</code> (Compa1 Toshiba laptops) or <code>5</code> (Gateway machines).
|-
| <code>NVreg_RemapLimit</code> || <code>60</code> || Maximum amount of system memory remapping. It specifies the amount of memory that the driver will be allowed to remap through the IOMMU/SWIOTLB on a 64-bit system. Only use it if the IOMMU or SMIOTLB is larger than 64mb. NVIDIA recommends to subtract 4mb from the total amount of memory to use. For instance, the default value is <code>60</code> which is in fact 64mb. To set it to 128mb, set the value to <code>124</code>.
|-
|<code>NVreg_UpdateMemoryTypes</code> || <code>0</code> || Tweak the use of page table attributes. Possible values are: <code>0</code> (Nvidias logic mechanism), <code>1</code> (Enable the use of changed page table attributes) and <code>2</code> (Disable the use of page table attributes).
|-
|<code>NVreg_InitializeSystemMemoryAllocations</code> || <code>1</code> || Tell the NVIDIA driver to clear system memory allocations prior to using it for the GPUs. Disabling can give a slight performance boost but at the cost of increased security risks. By default the driver will wipe the allocated by zeroing out its content.
|-
| <code>NVreg_UseVBios</code> || <code>1</code> || Enable or disable the use of the video BIOS int10 code. Set to <code>0</code> to disable.
|-
| <code>NVreg_RMEdgeIntrCheck</code> || Unspecified || Enable or disable checking for edge-triggered interrupts.
|-
| <code>NVreg_EnableMSI</code> || <code>0</code> || Enable or disable PCIe-MSI capabilities. Enable this to use MSI interrupts instead of wired interrupts.
|-
| <code>NVreg_MapRegistersEarly</code> || <code>0</code> || If set to <code>1</code>, allow the driver to map the memory locations early when the system is probing the hardware instead of the default option of doing this when loaded by {{c|modprobe}} or during {{c|startx}}. This is a debugging feature.
|-
| <code>NVreg_RegisterForACPIEvents</code> || <code>1</code> || Enable the driver to register with the ACPI of the system to receive ACPI events. This can be disabled (<code>0</code>) when issues occur with ACPI or while debugging an issue. 
|}

Edit the {{Path|/etc/modprobe.d/nvidia.conf}} file, and afterwards update the module information:

{{RootCmd|update-modules}}

<code>nvidia</code> モジュールをアンロードして...

{{RootCmd|modprobe -r nvidia}}

...もう一度読み込みます:

{{RootCmd|modprobe nvidia}}

== X の高度な設定 ==

The GLX layer also has a plethora of options which can be configured. These control the configuration of TV out, dual displays, monitor frequency detection, etc. Again, all of the available options are detailed in the documentation.

To use any of these options, list them in the relevant Device section of the X config file (usually {{Path|/etc/X11/xorg.conf}}). For example, to disable the splash logo:

{{FileBox|filename=/etc/X11/xorg.conf|title=Disable the splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== 参考 ==

* [[nouveau & nvidia-drivers switching]] - Hybrid graphics mode using open-source drivers.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configure a system to use closed-source drivers for hybrid graphics (modesetting).

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
