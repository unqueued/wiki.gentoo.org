<languages />

{{Metadata|abstract=Distcc — это программа, предназначенная для распределения по сети задач компиляции в рамках набора хостов. Она состоит из серверной части — distccd и клиентской — distcc. После небольшой настройки distcc может прозрачно работать с ccache, Portage и Automake.}}

{{InfoBox stack
|{{InfoBox homepage|https://code.google.com/p/distcc/|header=true}}
|{{InfoBox wikipedia}}
}}

[https://code.google.com/p/distcc/ Distcc] — это программа, предназначенная для распределения по сети задач компиляции в рамках набора хостов. Она состоит из серверной части — <tt>distccd</tt> и клиентской — <tt>distcc</tt>. После небольшой настройки distcc может прозрачно работать с [http://ccache.samba.org ccache], [[Portage]] и Automake. 

Если вы планируете использовать <tt>distcc</tt> при начальной сборке (bootstrap) своей установки Gentoo, обратите внимание на раздел [[#Использование_distcc_для_начальной_сборки_Gentoo|Использование distcc для начальной сборки Gentoo]]. 

== Установка ==

Before configuring <tt>distcc</tt>, let's first look into the installation of the {{Package|sys-devel/distcc}} package on all hosts.

=== Зависимости ===

Для работы с <tt>distcc</tt> все компьютеры в сети должны иметь GCC одной версии. К примеру, можно использовать на разных машинах 3.3.x (где x — разные), а смешивание 3.3.x с 3.2.x может привести к ошибкам при компиляции или выполнении. 

=== Установка distcc ===

Distcc поставляется с графическим монитором для отслеживания заданий, отправляемых компьютером на компиляцию. Данный монитор включается, когда установлен <code>USE</code>-флаг <code>gtk</code>.

После настройки <code>USE</code>-флагов установите пакет {{Package|sys-devel/distcc}}:

{{Emerge|distcc}}

{{Important/ru|Убедитесь, что {{Package|sys-devel/distcc}} установлен на все участвующие в распределённой компиляции компьютеры.}}

=== Auto-starting the distcc daemon ===

In order to have <tt>distccd</tt> started automatically, follow the next set of instructions, depending on the init system used.

==== Using OpenRC ====

Отредактируйте {{Path|/etc/conf.d/distccd}} и убедитесь, что с помощью директивы <code>--allow</code> разрешены только доверенные хосты. Для усиления безопасности можно также добавить директиву <code>--listen</code>, сообщив с её помощью демону <tt>distccd</tt>, на каком IP ожидать соединений (для систем с несколькими адресами). Подробнее о безопасности в <tt>distcc</tt> можно почитать в [http://distcc.googlecode.com/svn/trunk/doc/web/security.html Distcc security notes].

The following example allows the distcc clients running at <tt>192.168.0.4</tt> and <tt>192.168.0.5</tt> to connect to the <tt>distccd</tt> server running locally:

{{FileBox|filename=/etc/conf.d/distccd|title=Allowing specific clients to connect to distccd|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important/ru|Использовать <code>--allow</code> и <code>--listen</code> — важно. Обратитесь к man-странице <tt>distccd</tt> или указанному выше документу по безопасности для получения дополнительной информации.}}

Теперь запустите демон <tt>distccd</tt> на всех участвующих компьютерах: 

{{RootCmd|rc-update add distccd default
|rc-service distccd start}}

==== Using systemd ====

Edit {{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} and add the allowed clients in CIDR format. Here is an example:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=Setting ALLOWED_SERVERS|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

Reload the unit files after making such changes:

{{RootCmd|systemctl daemon-reload}}

Enable auto-starting <tt>distcc</tt> and then start the service:

{{RootCmd|systemctl enable distccd
|systemctl start distccd}}

== Configuration ==

Let's now look into the configuration of <tt>distcc</tt>.

=== Указание участвующих хостов ===

Для задания списка хостов используйте команду <kbd>distcc-config</kbd>. 

Далее показан пример задания хостов. Вариантов из первой и второй строки в большинстве случаев достаточно. Подробнее о синтаксисе, использованном в третьей и четвертой строках, можно прочитать в [http://distcc.googlecode.com/svn/trunk/doc/web/man/distcc_1.html man-странице distcc].

{{CodeBox|title=Примеры задания хостов|1=
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
}}

Есть также несколько других методов для настройки хостов. За подробностями обратитесь к man-странице <tt>distcc</tt> (<kbd>man distcc</kbd>).

Если локальная машина должна участвовать в компиляции, поместите <code>localhost</code> в список хостов. Наоборот, если локальная машина '''не''' должна участвовать в компиляции, не включайте её в список хостов. Использование localhost на медленной машине может, как ни странно, замедлить процесс. Всегда проверяйте влияние настроек на производительность.

Настроим <tt>distcc</tt> для компиляции на хостах из первой строчки примера:

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

=== Настройка Portage для работы с distcc ===

Настроить [[Portage]] для работы с <tt>distcc</tt> легко. Выполните следующие шаги на каждой системе, которая должна участвовать в распределенной компиляции:

Set the <code>MAKEOPTS</code> variable and <code>FEATURES</code> variable as shown below.

A common strategy is to
* set the value of <code>N</code> to ''twice'' the number of ''total'' (local + remote) CPU cores + 1, and
* set the value of <code>M</code> to the number of ''local'' CPU cores

The use of <code>-lM</code> in the <code>MAKEOPTS</code> variable will prevent spawning too many tasks when some of the <tt>distcc</tt> cluster hosts are unavailable (increasing the amount of simultaneous jobs on the other systems) or when an ebuild is configured to disallow remote builds (such as with gcc). This is accomplished by refusing to start additional jobs when the system load is at or above the value of <tt>M</tt>.

{{FileBox|filename=/etc/portage/make.conf|title=Установка переменных MAKEOPTS и FEATURES|lang=bash|1=
MAKEOPTS="-jN -lM"
FEATURES="distcc"
}}

Например, если <tt>distccd</tt> запущен на двух четырехъядерных хостах, а локальный компьютер оснащен двухъядерным процессором, то переменная <code>MAKEOPTS</code> может выглядеть так:

{{FileBox|filename=/etc/portage/make.conf|title=Пример MAKEOPTS для 1 двухъядерного (локального) и 2 четырёхъядерных (вспомогательных) компьютеров|lang=bash|1=
# 2 удалённых хоста с 4 ядрами каждый = 8 удалённых ядер
# 1 локальный хост с двумя ядрами = 2 локальных ядра
# общее количество ядер — 10, N = 2*10+1 и M=2
MAKEOPTS="-j21 -l2"
}}

Не используйте <code>-march=native</code> в переменных <code>CFLAGS</code> и <code>CXXFLAGS</code> файла {{Path|make.conf}}. Если <code>march</code> установлен в <code>native</code>, то <tt>distccd</tt> не сможет распределить работу по другим машинам. Подходящее значение для <code>march</code> можно получить с помощью следующей команды:

{{Cmd|gcc -Q -march{{=}}native --help{{=}}target}}

Подробности можно найти на странице [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining -march=native for distcc].

=== Настройка distcc для работы с automake ===

Иногда это проще настройки Portage. Всё, что нужно сделать, это обновить переменную <code>PATH</code>, добавив {{Path|/usr/lib/distcc/bin/}} перед каталогом, содержащим <tt>gcc</tt> ({{Path|/usr/bin/}}). С одной оговоркой. Если используется <tt>ccache</tt>, то нужно поместить путь к distcc после пути к ccache: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Поместите это в пользовательский {{Path|~/.bashrc}} или его эквивалент, чтобы переменная <code>PATH</code> устанавливалась при каждом входе пользователя в систему, либо задайте ее глобально через файл {{Path|/etc/env.d/}}.

К простому вызову <kbd>make</kbd> теперь нужно добавлять <kbd>-jN</kbd> (где N — целое число). Значение <code>N</code> зависит от сети и используемых для компиляции компьютеров. Эвристический подход к определению правильного значения <code>N</code> упоминался ранее в этой статье.

== Использование distcc для начальной сборки Gentoo ==

Using <tt>distcc</tt> to bootstrap (i.e. build a working toolchain before installing the remainder of the system) requires some additional steps to take.

=== Шаг 1: настройка Portage ===

Загрузите новую машину с Gentoo Linux LiveCD и следуйте [[Handbook:AMD64/ru|инструкциям по установке]], учитывая инструкции по начальной сборке (bootstrapping’у) в [[FAQ/ru|ЧаВо по Gentoo]]. Затем настройте Portage для использования <tt>distcc</tt>: 

{{FileBox|filename=/etc/portage/make.conf|title=Настройка Portage для использования distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Также обновите переменную <code>PATH</code> в установочном сеансе:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Шаг 2: установка Distcc ===

Установите {{Package|sys-devel/distcc}}: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Шаг 3: настройка distcc ===

Запустите <kbd>distcc-config --install</kbd> для настройки distcc; замените в примере <code>host#</code> на IP-адреса или имена узлов, принимающих участие в компиляции.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc теперь настроен для bootstraping’а! Продолжайте следовать соответствующим инструкциям по установке и ''не'' забудьте запустить <kbd>emerge distcc</kbd> после запуска <kbd>emerge @system</kbd>. Это нужно, чтобы убедиться, что все необходимые зависимости установлены. 

{{Note/ru|В процессе начальной установки (bootstraping’а) и выполнения <kbd>emerge @system</kbd> <tt>distcc</tt> может не использоваться. Это ожидаемое поведение: некоторые файлы ebuild плохо работают с distcc, поэтому distcc отключён в них преднамеренно.}}

== Расширения distcc ==

The <tt>distcc</tt> application has additional features and applications to support working in a <tt>distcc</tt> environment.

=== Мониторы distcc === 

Distcc поставляется с двумя инструментами мониторинга. Текстовая утилита для мониторинга собирается всегда и называется <tt>distccmon-text</tt>. Интерфейс поначалу может смутить, но на самом деле использовать его очень просто. Если запустить программу без параметров, она просто запустится однократно. Однако, если передать ей в качестве параметра число <code>N</code>, то информация будет обновляться каждые <code>N</code> секунд.

{{Cmd|distccmon-text 10}}

Другая утилита для мониторинга включается с помощью USE-флага <code>gtk</code>. Она основана на GTK+, запускается в окружении X и достаточно приятна. В Gentoo, чтобы избежать путаницы, GUI-монитор переименован в <code>distccmon-gui</code> (оригинальное название — <tt>distccmon-gnome</tt>).

{{Cmd|distccmon-gui}}

Чтобы наблюдать за тем, как Portage использует <tt>distcc</tt>, запустите:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important/ru|Если каталог distcc находится где-нибудь в другом месте, измените переменную <code>DISTCC_DIR</code> соответствующим образом.}}

A trick is to set <code>DISTCC_DIR</code> in environment variables:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

Now update the environment:

{{RootCmd|env-update
|source /etc/profile}}

Finally, start the GUI application:

{{RootCmd|distccmon-gui}}

=== Настройка distcc для работы с ssh ===

Setting up distcc via SSH includes some pitfalls. First, generate an SSH key pair without password setup. Be aware that portage compiles programs as the Portage user. The home folder of the Portage user is {{Path|/var/tmp/portage/}}, which means the keys need to be stored in {{Path|/var/tmp/portage/.ssh/}}

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Во-вторых, сделайте для каждого хоста раздел в файле конфигурации SSH:

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Разделы для хостов|1=
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName
 
Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
}}

Send the public key to each compilation node:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub UserName@CompilationNode}}

Убедитесь также, что каждый из хостов есть в файле {{Path|known_hosts}}, и добавьте на этих хостах свой открытый ключ в файл {{Path|authorized_keys}}. Хосты <tt>test1</tt> и <tt>test2</tt> можно настроить командой:

{{RootCmd|ssh-keyscan -t rsa <compilation-node-1> <compilation-node-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Fix the file permissions as follows:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

To set up the hosts <tt>test1</tt> and <tt>test2</tt>, run:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Обратите внимание на знак <tt>@</tt>, с его помощью в distcc указываются ssh-хосты.

== Устранение проблем ==

<!-- Consider moving this section to a separate subpage if it becomes too large -->

If a problem occurs while using <tt>distcc</tt>, then this section might help in resolving the problem.

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- To be removed when the bug is resolved and the fixed package is stable -->

As of January 22nd, 2015 emerging fails to create the proper {{Path|distccd.log}} file in {{Path|/var/log/}}. This apparently only effects version 3.1-r8 of distcc. This bug is in the process of being corrected (see {{Bug|477630}}). It is possible to work around this by manually creating the log file, giving it proper ownership, and restarting the distccd daemon:

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

Next update the {{Path|/var/log}} path of the <tt>distccd</tt> configuration file in {{Path|/etc/conf.d/distccd}} to the {{Path|distcc}} directory created in the step before:

{{FileBox|filename=/etc/conf.d/distccd|title=Updating log path|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

Finally, restart the distccd service:

{{RootCmd|/etc/init.d/distccd restart}}

=== Некоторые пакеты не используют distcc ===

Можно заметить, что сборка некоторых пакетов не распределяется по хостам (и не происходит параллельно, т. е. в несколько процессов). Такое может происходить, когда {{Path|Makefile}} пакета не поддерживает параллельные операции, или мейнтейнер ebuild’а явно отключил их, чтобы избежать известных проблем. 

Иногда <tt>distcc</tt> может вызывать сбой при компиляции пакета. Если такое происходит, пожалуйста, [https://bugs.gentoo.org/ сообщите] об этом.

=== Смешанные версии GCC ===

Если на взаимодействующих хостах разные версии GCC, то велика вероятность возникновения очень странных проблем. Решение — установить на все хосты одну версию GCC. 

После недавных обновлений Portage стал использовать <code>${CHOST}-gcc</code> (минус gcc) вместо <code>gcc</code>. Это значит, что совместное использование i686-машин с машинами других типов (i386, i586) может вызвать проблемы со сборкой. Обходное решение — запустить <kbd>export CC='gcc' CXX='c++'</kbd> из-под пользователя root или задать эти переменные в {{Path|/etc/portage/make.conf}}.

{{Important/ru|Так вы явно переопределите некоторую часть поведения Portage, что может привести к странным результатам в будущем. Делайте так, только если использование разных CHOST’ов неизбежно.}}

=== -march=native ===

GCC, начиная с версии 4.3.0, поддерживает параметр <code>-march=native</code>, который включает автоматическое определение CPU, на котором запущен GCC, и оптимизаций, которые стоит включить для него. Это создает проблемы при использовании <tt>distcc</tt>, так как допускает смешивание оптимизированного для разных процессоров кода. К примеру, запуск <tt>distcc</tt> с <code>-march=native</code> на системе с процессором AMD Athlon и на ''другой'' системе с процессором Intel Pentium приведет к смешиванию кода, скомпилированного на обоих процессорах.

Обратите внимание на следующее предупреждение:

{{Warning/ru|'''Не''' используйте <code>-march{{=}}native</code> и <code>-mtune{{=}}native</code> в переменных <code>CFLAGS</code> и <code>CXXFLAGS</code> файла {{Path|make.conf}} при компиляции с помощью <tt>distcc</tt>.}}

Чтобы узнать, какие флаги включит GCC при запуске с <code>-march=native</code>, выполните следующее:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

== Кросс-компиляция ==

Кросс-компиляция — это использование компьютера одной архитектуры при сборке программ для другой архитектуры. Она может быть такой же простой, как использование Athlon (i686) при сборке программы для K6-2 (i586) или использование SPARC при сборке программы для PowerPC. Эта тема описана в [[Distcc/Cross-Compiling/ru|Руководстве по кросс-компиляции с distcc]].

== Внешние источники ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining -march=native for distcc]
* [https://code.google.com/p/distcc/ Домашняя страница distcc]


{{Migrated|originalauthors=Lisa Seelye, Mike Frysinger, Erwin, Sven Vermeulen, Lars Weiler, Tiemo Kieft and nightmorph}}
