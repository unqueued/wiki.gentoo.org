<languages />

{{Metadata|abstract=Distcc — это программа, предназначенная для распределения по сети задач компиляции в рамках набора хостов. Она состоит из серверной части — distccd и клиентской — distcc. После небольшой настройки distcc может прозрачно работать с ccache, Portage и Automake.}}

{{InfoBox stack
|{{InfoBox homepage|https://github.com/distcc/distcc|header=true}}
|{{InfoBox wikipedia}}
}}

[https://github.com/distcc/distcc Distcc] is a program designed to distribute compiling tasks across a network to participating hosts. It is comprised of a server, {{c|distccd}}, and a client program, {{c|distcc}}. Distcc can work transparently with [http://ccache.samba.org ccache], [[Portage]], and Automake with a small amount of setup. 

When planning on using {{c|distcc}} to help bootstrap a Gentoo installation, make sure to read [[#To_bootstrap|Using distcc to bootstrap]]. 

== Установка ==

Перед настройкой {{c|distcc}} сперва нужно установить пакет {{Package|sys-devel/distcc}} на все хосты.

=== Требования для всех хостов ===

Для работы с {{c|distcc}} все компьютеры в сети должны иметь GCC одной версии. К примеру, можно использовать на разных машинах 3.3.x (где x — разные), а смешивание 3.3.x с 3.2.x может привести к ошибкам при компиляции или выполнении. 

=== USE-флаги ===

{{USEflag|package=sys-devel/distcc}}

=== Emerge ===

Distcc поставляется с графическим монитором для отслеживания заданий, отправляемых компьютером на компиляцию. Данный монитор включается, когда установлен USE-флаг <code>gtk</code>.

После настройки USE-флагов установите пакет {{Package|sys-devel/distcc}}:

{{Emerge|sys-devel/distcc}}

{{Important|Убедитесь, что {{Package|sys-devel/distcc}} установлен на все участвующие в распределённой компиляции компьютеры.}}

== Конфигурация ==

=== Сервис ===

Выполните следующие инструкции для того чтобы {{c|distccd}} запускался автоматически.

==== OpenRC ====

Edit {{Path|/etc/conf.d/distccd}} and make sure to set the <code>--allow</code> directive to allow only trusted clients. For added security, use the <code>--listen</code> directive to tell the {{c|distccd}} daemon what IP to listen on (for multi-homed systems). More information on {{c|distcc}} security can be found at [https://cdn.rawgit.com/distcc/distcc/master/doc/web/security.html Distcc security notes].

Следующий пример разрешает distcc клиентам, работающим на <code>192.168.0.4</code> и <code>192.168.0.5</code>, подключатся к локально запущенному серверу {{c|distccd}}:

{{FileBox|filename=/etc/conf.d/distccd|title=Разрешение некоторым клиентам подключатся к distccd|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important|Использовать <code>--allow</code> и <code>--listen</code> — важно. Обратитесь к man-странице {{c|distccd}} или указанному выше документу по безопасности для получения дополнительной информации.}}

Теперь запустите демон {{c|distccd}} на всех участвующих компьютерах: 

{{RootCmd
|rc-update add distccd default
|rc-service distccd start
}}

==== systemd ====

Отредактируйте файл {{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} для добавления доверенных клиентов в [[wikipedia:CIDR|CIDR]] формате. Пример ниже добавляет все IP-адреса из диапазона 192.168.1.xxx:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=Настройка ALLOWED_SERVERS|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

{{Note| The name "ALLOWED_SERVERS" here is rather confusing as it refers to the clients that are allowed to connect to the local distccd server. Nevertheless, it is this variable which is used in the distccd service as value for the <code>--allow option</code> – see the {{Path|/usr/lib/systemd/system/distccd.service}} file for additional information.}}

Перезагрузите unit-файлы после изменений:

{{RootCmd|systemctl daemon-reload}}

Включите автозагрузку {{c|distccd}} и запустите сервис:

{{RootCmd
|systemctl enable distccd
|systemctl start distccd
}}

=== Определение участвующих хостов ===

Для задания списка хостов используйте команду {{c|distcc-config}}. 

The following is an example list of host definitions. In most cases, variants of lines 1 and 2 suffice. The latter uses the <code>/limit</code> syntax to inform {{c|distcc}} about the maximum amount of jobs to be launched on this node. More information about the syntax used in lines 3 and 4 can be found in the [https://cdn.rawgit.com/distcc/distcc/master/doc/web/man/distcc_1.html distcc manual page].

{{CodeBox|title=Примеры задания хостов|1=
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
}}

Есть также несколько других методов для настройки хостов. За подробностями обратитесь к {{c|distcc}} man-странице {{c|man distcc}}.

Если локальная машина должна участвовать в компиляции, поместите <code>localhost</code> в список хостов. Наоборот, если локальная машина '''не''' должна участвовать в компиляции, не включайте её в список хостов. Использование localhost на медленной машине может, как ни странно, замедлить процесс. Всегда проверяйте влияние настроек на производительность.

Настроим {{c|distcc}} для компиляции на хостах из первой строчки примера:

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

Также, distcc поддерживает режим "pump" через вызов команды {{c|pump}}. Такой режим может значительно сократить время сборки при компиляции нескольких файлов параллельно. Он кэширует нужные заголовочные файлы перед компиляцией на сервере, и, как следствие, не требуется повторная загрузка и обработка этих файлов.

Чтобы настроить хост для работы в режиме pump, добавьте суффикс <code>,cpp,lzo</code> в определение хостов. Для режим pump необходимы оба флага <code>cpp</code> ''и'' <code>lzo</code> (независимо от того, какие файлы будут компилироваться C или C++).

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1,cpp,lzo 192.168.0.2,cpp,lzo 192.168.0.3,cpp,lzo"}}

== Usage ==

=== With Portage ===

Настроить [[Portage]] для работы с {{c|distcc}} легко. Речь идет о включении функции {{c|distcc}}, а также о настройки подходящего количества одновременно выполняемых задач (имея ввиду, что с {{c|distcc}} становится больше ресурсов для компиляции).

Установите переменные <var>MAKEOPTS</var> и <var>FEATURES</var> как показано ниже.

Общепринятая стратегия
* установите <code>N</code> в ''удвоенное'' значение от ''всех'' (локальных + удалённых) ядер CPU + 1,
* установите <code>M</code> число равное количеству ''локальных'' ядер CPU.

Использование <code>-lM</code> в переменной <var>MAKEOPTS</var> предотвращает запуск чрезмерно большого количества заданий в случаях, когда некоторые {{c|distcc}} хосты кластера недоступны (увеличивая количество одновременных заданий для других систем) или когда ebuild настроен так, что устанавливаемый пакет запрещает удаленную компиляцию (например, gcc). Это достигается за счет отказа начинать новые задачи компиляции, если нагрузка на систему становится равной <code>M</code> или выше.

{{FileBox|filename=/etc/portage/make.conf|title=Установка переменных MAKEOPTS и FEATURES|lang=bash|1=
# Замените N и M на подходящие значения, как писалось ранее в статье
MAKEOPTS="-jN -lM"
FEATURES="distcc distcc-pump"
}}

{{Note|Distcc’s pump mode may significantly reduce build time for big packages. Consider the [[#Specifying participating hosts|Specifying participating hosts]] section for more details.}}

Например, если {{c|distccd}} запущен на двух четырехъядерных хостах, а локальный компьютер оснащен двухъядерным процессором, то переменная <var>MAKEOPTS</var> может выглядеть так:

{{FileBox|filename=/etc/portage/make.conf|title=Пример MAKEOPTS для 1 двухъядерного (локального) и 2 четырёхъядерных (вспомогательных) компьютеров|lang=bash|1=
# 2 удалённых хоста с 4 ядрами каждый = 8 удалённых ядер
# 1 локальный хост с двумя ядрами = 2 локальных ядра
# общее количество ядер — 10, N = 2*10+1 и M=2
MAKEOPTS="-j21 -l2"
}}

Не используйте <code>-march=native</code> в переменных <var>CFLAGS</var> и <var>CXXFLAGS</var> файла {{Path|make.conf}}. Если <var>march</var> установлен в <code>native</code>, то {{c|distccd}} не сможет распределить работу по другим машинам. Подходящее значение для <code>march</code> можно получить с помощью следующей команды:

{{Cmd|gcc -v -E -x c -march{{=}}native -mtune{{=}}native - < /dev/null 2>&1 {{!}} grep cc1 {{!}} perl -pe 's/ -mno-\S+//g; s/^.* - //g;'}}

Подробности можно найти на странице [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc].

=== With automake ===

Иногда это проще настройки Portage. Всё, что нужно сделать, это обновить переменную <var>PATH</var>, добавив {{Path|/usr/lib/distcc/bin/}} перед каталогом, содержащим {{c|gcc}} ({{Path|/usr/bin/}}). С одной оговоркой. Если используется {{c|ccache}}, то нужно поместить путь к {{c|distcc}} после пути к {{c|ccache}}: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Поместите это в пользовательский {{Path|~/.bashrc}} или его эквивалент, чтобы переменная <var>PATH</var> устанавливалась при каждом входе пользователя в систему, либо задайте ее глобально через файл {{Path|/etc/env.d/}}.

Вместо вызов одного {{c|make}}, добавьте <code>-jN</code> (где N — целое число). Значение <code>N</code> зависит от сети и используемых для компиляции компьютеров. Эвристический подход к определению правильного значения <code>N</code> упоминался ранее в этой статье.

=== To bootstrap ===

Для использования {{c|distcc}} для bootstrap (то есть скомпилировать рабочие toolchain перед установкой оставшейся части системы) требуются некоторые дополнительные шаги.

==== Step 1: Configure Portage ====

Загрузите новую машину с Gentoo Linux LiveCD и следуйте [[Handbook:AMD64/ru|инструкциям по установке]], учитывая инструкции по начальной сборке (bootstrapping) в [[FAQ/ru|FAQ по Gentoo]]. Затем настройте Portage для использования {{c|distcc}}: 

{{FileBox|filename=/etc/portage/make.conf|title=Настройка Portage для использования distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Также, обновите переменную <code>PATH</code> в установочной сессии:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

==== Step 2: Getting distcc ====

Установите {{Package|sys-devel/distcc}}: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

==== Step 3: Setting up distcc ====

Запустите {{c|distcc-config --install}} для настройки distcc; замените в примере <code>host#</code> на IP-адреса или имена хостов, принимающих участие в компиляции.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc теперь настроен для bootstrap! Продолжайте следовать соответствующим инструкциям по установке и ''не'' забудьте запустить {{c|emerge distcc}} после запуска {{c|emerge @system}}. Это нужно, чтобы убедиться, что все необходимые зависимости установлены. 

{{Note|В процессе начальной установки (bootstraping’а) и выполнения {{c|emerge @system}} {{c|distcc}} может не использоваться. Это ожидаемое поведение: некоторые файлы ebuild плохо работают с distcc, поэтому distcc отключён в них преднамеренно.}}

=== Extras ===

У программы {{c|distcc}} есть множество дополнительных возможностей и приложений, помогающих работать в окружении {{c|distcc}}.

=== Monitoring utilities === 

Distcc поставляется с двумя инструментами мониторинга. Текстовая утилита для мониторинга собирается всегда и называется {{c|distccmon-text}}. Интерфейс поначалу может смутить, но на самом деле использовать его очень просто. Если запустить программу без параметров, она просто запустится однократно. Однако, если передать ей в качестве параметра число <code>N</code>, то информация будет обновляться каждые <code>N</code> секунд.

{{Cmd|distccmon-text 10}}

Другая утилита для мониторинга включается с помощью USE-флага <code>gtk</code>. Она основана на GTK+, запускается в окружении X и достаточно приятна. В Gentoo, чтобы избежать путаницы, GUI-монитор переименован в {{c|distccmon-gui}} (оригинальное название — {{c|distccmon-gnome}}).

{{Cmd|distccmon-gui}}

Чтобы наблюдать за тем, как Portage использует {{c|distcc}}, запустите:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|Если каталог distcc находится где-нибудь в другом месте, измените переменную <var>DISTCC_DIR</var> соответствующим образом.}}

Трюк: задайте <var>DISTCC_DIR</var> в переменном окружении:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

Теперь, обновите окружение:

{{RootCmd|env-update
|source /etc/profile}}

И наконец, запустите графическую оболочку приложения:

{{RootCmd|distccmon-gui}}

=== SSH for communication ===

В настройке distcc через SSH есть подводные камни. Во-первых, сгенерируйте ключевую пару SSH без пароля. Учтите, что Portage компилирует программы из-под пользователя portage (по умолчанию как root, если не включена <code>FEATURES="userpriv"</code>). Домашний каталог пользователя portage — {{Path|/var/tmp/portage/}}, поэтому ключи должны храниться в {{Path|/var/tmp/portage/.ssh/}}.

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Во-вторых, сделайте для каждого хоста раздел в файле конфигурации SSH:

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Разделы для хостов|1=
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName
 
Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
}}

Отправьте публичный ключ на все ноды, участвующие в компиляции:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub UserName@CompilationNode}}

Убедитесь также, что каждый из хостов есть в файле {{Path|known_hosts}}:

{{RootCmd|ssh-keyscan -t rsa <compilation-node-1> <compilation-node-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Измените владельца так:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

Чтобы настроить хосты <code>test1</code> и <code>test2</code>, выполните:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Обратите внимание на знак <code>@</code>, с его помощью в distcc указываются ssh-хосты.

Наконец, сообщите {{c|distcc}} какой бинарный файл SSH нужно использовать:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
DISTCC_SSH="ssh"
}}

Если взаимосвязь {{c|distcc}} осуществляется через SSH, нет нужды запускать {{Path|distccd}} init-скрипт на хостах.

=== Testing ===

Чтобы протестировать работу {{c|distcc}} напишите простую ''Hello distcc'' программу и запустите {{c|distcc}} в подробном режиме (verbose), чтобы убедится, что взаимосвязь между хостами distcc работает хорошо.

{{FileBox|filename=main.c|lang=c|1=
#include <stdio.h>
 
int main() {
    printf("Hello distcc!\n");
    return 0;
}
}}

Далее, включите подробный режим, скомпилируйте программу с помощью {{c|distcc}} и слинкуйте сгенерированный объектный файл в исполняемый:

{{Cmd
|export DISTCC_VERBOSE{{=}}1
|distcc gcc -c main.c -o main.o # or 'pump distcc <...>'
|gcc main.o -o main
}}

{{Note|Замените команду {{c|distcc}} командой {{c|pump distcc}} для pump режима.}}

There should be a bunch of output about {{c|distcc}} finding its configuration, selecting the host to connect to, starting to connect to it, and ultimately compile {{Path|main.c}}. If the output does not list the desired {{c|distcc}} hosts, check the configuration.

Наконец, проверьте, что скомпилированная программа работает хорошо. Чтобы протестировать все хосты, перечислите все хотсы компиляции в файле hosts.

{{Cmd|./main|output=<pre>Hello distcc!</pre>}}

== Устранение проблем ==

<!-- Consider moving this section to a separate subpage if it becomes too large -->

Следующий раздел может помочь в решении проблем, если такие встречаются при использовании {{c|distcc}}.

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- To be removed when the bug is resolved and the fixed package is stable -->

As of January 22nd, 2015 emerging fails to create the proper {{Path|distccd.log}} file in {{Path|/var/log/}}. This apparently only effects version 3.1-r8 of distcc. This bug is in the process of being corrected (see {{Bug|477630}}). It is possible to work around this by manually creating the log file, giving it proper ownership, and restarting the distccd daemon:

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

Затем, в конфигурационном файле {{c|distccd}}, который располагается в {{Path|/etc/conf.d/distccd}}, измените {{Path|/var/log}} на каталог {{Path|distcc}}, который был создан ранее:

{{FileBox|filename=/etc/conf.d/distccd|title=Изменение пути для лога|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

Наконец, перезапустите сервис distccd:

{{RootCmd|/etc/init.d/distccd restart}}

=== Некоторые пакеты не используют distcc ===

Можно заметить, что сборка некоторых пакетов не распределяется по хостам (и не происходит параллельно, т. е. в несколько процессов). Такое может происходить, когда {{Path|Makefile}} пакета не поддерживает параллельные операции, или мейнтейнер ebuild’а явно отключил их, чтобы избежать известных проблем. 

Иногда {{c|distcc}} может вызывать сбой при компиляции пакета. Если такое происходит, пожалуйста, [https://bugs.gentoo.org/ сообщите] об этом.

=== Смешанные версии GCC ===

Если на взаимодействующих хостах разные версии GCC, то велика вероятность возникновения очень странных проблем. Решение — установить на все хосты одну версию GCC. 

После недавных обновлений Portage стал использовать <code>${CHOST}-gcc</code> (минус gcc) вместо <code>gcc</code>. Это значит, что совместное использование i686-машин с машинами других типов (i386, i586) может вызвать проблемы со сборкой. Обходным решеним может быть запуск:

{{RootCmd|export CC{{=}}'gcc' CXX{{=}}'c++'}}

Можно задать переменные <var>CC</var> и <var>CXX</var> в {{Path|/etc/portage/make.conf}} в списком значений из команды выше.

{{Important|Так вы явно переопределите некоторую часть поведения Portage, что может привести к странным результатам в будущем. Делайте так, только если использование разных CHOST’ов неизбежно.}}

{{Note|Having the right version of gcc as a slot on a server isn’t enough. Portage uses {{c|distcc}} as a replacement for the compiler referenced by the <var>CHOST</var> variable (i.e. <code>x86_64-pc-linux-gnu</code>) and {{c|distccd}} invokes it by exactly same name. The right version of gcc should be a default system’s compiler on all involved compilation hosts.}}

=== -march=native ===

GCC, начиная с версии 4.3.0, поддерживает параметр <code>-march=native</code>, который включает автоматическое определение CPU, на котором запущен GCC, и оптимизаций, которые стоит включить для него. Это создает проблемы при использовании {{c|distcc}}, так как допускает смешивание оптимизированного для разных процессоров кода. К примеру, запуск {{c|distcc}} с <code>-march=native</code> на системе с процессором AMD Athlon и на ''другой'' системе с процессором Intel Pentium приведет к смешиванию кода, скомпилированного на обоих процессорах.

Обратите внимание на следующее предупреждение:

{{Warning|'''Не''' используйте <code>-march{{=}}native</code> и <code>-mtune{{=}}native</code> в переменных <var>CFLAGS</var> и <var>CXXFLAGS</var> файла {{Path|make.conf}} при компиляции с помощью {{c|distcc}}.}}

Чтобы узнать, какие флаги включит GCC при запуске с <code>-march=native</code>, выполните следующее:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

=== Получение более подробного вывода в логах emerge ===

Можно получить более подробное журналирование, если включить подробный режим. Этого можно добиться, если добавить <var>DISTCC_VERBOSE</var> в {{Path|/etc/portage/bashrc}}:

{{FileBox|title=Включение подробного журналирования|filename=/etc/portage/bashrc|lang=bash|1=
export DISTCC_VERBOSE=1
}}

Подробный журнал потом можно найти в {{Path|/var/tmp/portage/$CATEGORY/$PF/temp/build.log}}.

Keep in mind that the first {{c|distcc}} invocation visible in {{Path|build.log}} isn’t necessary the first {{c|distcc}} call during a build process. For example a build server can get a one-minute backoff period during the configuration stage when some checks are performed using a compiler ({{c|distcc}} sets a backoff period when compilation on a remote server failed, it doesn’t matter whether it failed on local machine or not).

Dig into the {{Path|/var/tmp/portage/$CATEGORY/$PF/work/}} directory to investigate such situations. Find other logs, or call {{c|make}} explicitly from within the working directory.

Another interesting variable to use is <var>DISTCC_SAVE_TEMPS</var>. When set, it saves the standard output/error from a remote compiler which, for Portage builds, results in files in the {{Path|/var/tmp/portage/$CATEGORY/$PF/temp/}} directory.

{{FileBox|title=Сохранение временного вывода|filename=/etc/portage/bashrc|lang=bash|1=
export DISTCC_SAVE_TEMPS=1
}}

== Смотрите также ==

* [[Distcc/Cross-Compiling/ru|Руководство по кросс-компиляции с distcc]] расскажет как компилировать программу на компьютере одной архитектуры для выполнения ее на другой архитектуре при помощи {{c|distcc}}. Это может быть так же просто, как компилировать на Athlon (i686) для выполнения на K6-2 (i586), или компилировать на SPARC для выполнения программы на PowerPC.

== Внешние ресурсы ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc]
* [https://github.com/distcc/distcc Distcc homepage]

{{Migrated|originalauthors=Lisa Seelye, Mike Frysinger, Erwin, Sven Vermeulen ({{User|SwifT}}), Lars Weiler, Tiemo Kieft, and Joshua Saddler ({{User|nightmorph}})}}
