<languages />

{{Metadata|abstract=Distcc - это программа, разработанная для распределения задач компиляции по сети принимающих участие в компиляции хостов. Она включает в себя сервер, distccd и клиентскую программу, distcc. Distcc может прозрачно работать с ccache, Portage и Automake с небольшими настройками.}}

[http://distcc.samba.org Distcc] - это программа разработанная для распределения задач компиляции по сети принимающих участие в компиляции хостов. Она включает в себя сервер, <code>distccd</code> и клиентское приложение, <code>distcc</code>. Distcc может прозрачно работать с [http://ccache.samba.org ccache], Portage и Automake с небольшими настройками. 

Если Вы планируете использование distcc для помощи в создании новой установки Gentoo с использованием существующего варианта системы (bootstrap), убедитесь, что Вы прочитали раздел [[#Using_Distcc_to_Bootstrap|Using Distcc to Bootstrap]]. 

== Установка ==

=== Зависимости ===

Чтобы использовать Distcc, все компьютеры в Вашей сети должны иметь одни и те же версии GCC. Например, смешивание 3.3.x (где x варьируется) вполне возможно, но смешивание 3.3.x с 3.2.x '''может''' привести к ошибкам компиляции или выполнения. 

=== Установка Distcc ===

Есть пара возможностей, о которой Вам должно быть известно перед началом установки distcc. 

Distcc поставляется с графическим монитором для просмотра задач, которые Ваш компьютер отправляет на компиляцию. Если Вы пользуетесь GNOME, то поместите 'gnome' в Ваши USE-флаги. Однако, если Вы не пользуетесь GNOME и все же хотите иметь монитор, то поместите 'gtk' в список Ваших USE-флагов. 

{{Emerge|distcc}}

{{Important/ru|Запомните, Вы должны быть уверены в том, что distcc установлен на все машины, принимающие участие в процессе компиляции.}}

=== Настройка Portage на использование Distcc ===

Настроить Portage на использование distcc легко. Выполните следующие шаги на каждой системе, которая принимает участие в распределенной компиляции: 

{{Emerge|distcc}}

Now, set the <code>MAKEOPTS</code> variable and <code>FEATURES</code> variable as shown below.
A common strategy is to set N as twice the number of total (local + remote) CPUs + 1 and M as number of local CPUs. In case distcc hosts are not available, or the ebuild requires local-only compile (e.g. gcc), <code>-lM</code> flag this will prevent spawning too many tasks.

{{RootCmd|nano -w /etc/portage/make.conf|output=<pre>
MAKEOPTS="-jN -lM"
FEATURES="distcc"
</pre>
}}

=== Указание участвующих хостов ===

Используйте команду <code>distcc-config</code> для установки списка хостов. Здесь приведен пример некоторых хостов, которые могут быть в Вашем списке: 

{{Code|Примеры определения хоста|<pre>
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
</pre>
}}

Также имеются несколько других методов для настройки хостов. За подробностями обратитесь к man-странице distcc.

Если Вы хотите компилировать на локальной машине, Вы должны поместить 'localhost' в список хостов. Наоборот, если Вы не хотите использовать локальную машину для компиляции (что является частым случаем), не включайте ее в список хостов. Использование localhost на медленной машине может фактически замедлить процесс. Убедитесь что Вы проверили настройки на производительность.

Это может выглядеть сложно, но в большинстве случаев вариант строки 1 или 2 будет работать. 

Так как большинство людей не будут использовать строки 3 или 4, я [http://distcc.samba.org/man/distcc_1.html обращаюсь к] документации distcc (man distcc) за подробностями, которые включают возможность запуска distcc через SSH-соединение. 

Например, чтобы установить первую строку из предыдущего примера: 

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

Edit {{Path|/etc/conf.d/distccd}} to your needs and be sure to set the <code>--allow</code> directive to allow only hosts you trust. For added security, you should also use the <code>--listen</code> directive to tell the distcc daemon what IP to listen on (for multi-homed systems). More information on distcc security can be found at [http://distcc.samba.org/security.html Distcc Security Design] . 

{{Important/ru|Важно использовать --allow и --listen. Пожалуйста, прочитайте man-страницу distccd или документ по безопасности выше для получения дополнительных подробностей.}}

Теперь запустите демон distcc на всех участвующих компьютерах: 

{{RootCmd|rc-update add distccd default
|/etc/init.d/distccd start}}

=== Setting up Distcc to Work With Automake ===

This is, in some cases, easier than the Portage setup. What you have to do is update your <code>PATH</code> variable to include {{Path|/usr/lib/distcc/bin}} in front of the directory that contains <code>gcc</code> ( {{Path|/usr/bin}} ). However, there is a caveat. If you use ccache you have to put distcc after the ccache part: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

You can put this in your {{Path|~/.bashrc}} or equivalent file to have the PATH set every time you log in.

Then, as you would normally type <code>make</code> , you would type <code>make -jN</code> (where N is an integer). The value of N depends on your network and the types of computers you are using to compile. Test your own settings to find the number that yields the best performance. 

=== Setting up Distcc to Work With ssh ===

Setting up distcc via ssh includes some pitfalls you should be aware of. First, generate a ssh key pair without password setup. Be aware that portage compiles programs as user portage. The home folder of the user portage is {{Path|/var/tmp/portage}}, which means the keys need to be stored in {{Path|/var/tmp/portage/.ssh}}.

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Second, generate a section for each host in the ssh config file:

{{RootCmd|nano -w /var/tmp/portage/.ssh/config|output=<pre>
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName

Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
</pre>
}}

Also make sure that each host is available in the {{Path|known_hosts}} file and append your public key to the {{Path|authorized_keys}} file of the hosts. To set up the hosts test1 and test2 run

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Please not the '@'-sign, which specifies ssh hosts for <code>distcc</code>.

== Cross-Compiling ==

Cross-compiling is using one architecture to build programs for another architecture. This can be as simple as using an Athlon (i686) to build a program for a K6-2 (i586), or using a Sparc to build a program for a ppc. This is documented in our [[Distcc/Cross-Compiling|DistCC Cross-compiling Guide]] .

== Using Distcc to Bootstrap ==

=== Step 1: Configure Portage ===

Boot your new box with a Gentoo Linux LiveCD and follow the [http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1 installation instructions] up until the bootstrapping part. (See the [[FAQ|Gentoo FAQ]] for more information about bootstrapping.) Then configure Portage to use distcc: 

{{RootCmd|nano -w /etc/portage/make.conf|output=<pre>
FEATURES="distcc"
MAKEOPTS="-jN"
</pre>
}}

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Step 2: Getting Distcc ===

Install distcc: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Step 3: Setting Up Distcc ===

Run <code>distcc-config --install</code> to setup distcc; substitute <code>host*</code> with the IP addresses or hostnames of the participating DistCC nodes.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc is now set up to bootstrap! Continue with the official installation instructions and ''do not forget'' to re-emerge distcc after <code>emerge system</code>. This is to make sure that all of the dependencies you want are installed as well. 

{{Note|During bootstrap and <code>emerge system</code> distcc may not appear to be used. This is expected as some ebuilds do not work well with distcc, so they intentionally disable it.}}

== Troubleshooting ==

=== Some Packages Don't Use Distcc ===

As you emerge various packages, you'll notice that some of them aren't being distributed (and aren't being built in parallel). This may happen because the package's Makefile doesn't support parallel operations or the maintainer of the ebuild has explicitly disabled parallel operations due to a known problem. 

Sometimes distcc might cause a package to fail to compile. If this happens for you, please [https://bugs.gentoo.org/ report] it to us.

=== Mixed GCC Versions ===

If you have different GCC versions on your hosts, there will likely be very weird problems. The solution is to make certain all hosts have the same GCC version. 

Recent Portage updates have made Portage use <code>${CHOST}-gcc</code> instead of <code>gcc</code> . This means that if you're mixing i686 machines with other types (i386, i586) you will run into problems. A workaround for this may be to <code>export CC='gcc' CXX='c++'</code> or to put it in {{Path|/etc/portage/make.conf}} . 

{{Important|Doing this explicitly redefines some behavior of Portage and may have some weird results in the future. Only do this if you're mixing CHOSTs.}}

=== -march=native ===

Starting with GCC 4.3.0, the compiler supports the <code>-march=native</code> switch which turns on CPU autodetection and optimizations that are worth being enabled on the processor the GCC is running at. This is a problem with <code>distcc</code> as it allows mixing of code optimized for different processors (like AMD Athlon and Intel Pentium). ''Don't'' use <code>-march=native</code> or <code>-mtune=native</code> in your <code>CFLAGS</code> or <code>CXXFLAGS</code> when compiling with <code>distcc</code> .

To know the flags that GCC would enable when called with <code>-march=native</code>, execute the following:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

== Distcc Extras ==

=== Distcc Monitors === 

Distcc ships with two monitors. The text-based one is always built and is called <code>distccmon-text</code>. Running it for the first time can be a bit confusing, but it is really quite easy to use. If you run the program with no parameter it will run once. However, if you pass it a number it will update every N seconds, where N is the argument you passed. 

The other monitor is only turned on if you enabled <code>gtk</code> or <code>gnome</code> in your <code>USE</code> flags. This one is GTK+ based, runs in an X environment and it is quite lovely. For Gentoo the GUI monitor has been called <code>distccmon-gui</code> for less confusion. Elsewhere it may be referred to as <code>distccmon-gnome</code>. 

{{RootCmd|distccmon-text N}}

or run <code>distccmon-gui</code>:

{{RootCmd|distccmon-gui}}

To monitor Portage's distcc usage you can use:
{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text N
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|If your distcc directory is elsewhere, change the DISTCC_DIR variable accordingly.}}

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:

* Lisa Seelye
* Mike Frysinger
* Erwin
* Sven Vermeulen
* Lars Weiler
* Tiemo Kieft
* nightmorph
