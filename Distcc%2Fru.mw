<languages />

{{Metadata|abstract=Distcc — это программа, предназначенная для распределения по сети задач компиляции в рамках набора хостов. Она состоит из серверной части — distccd и клиентской — distcc. После небольшой настройки distcc может прозрачно работать с ccache, Portage и Automake.}}

{{InfoBox stack
|{{InfoBox homepage|https://code.google.com/p/distcc/|header=true}}
|{{InfoBox wikipedia}}
}}

[https://code.google.com/p/distcc/ Distcc] — это программа, предназначенная для распределения по сети задач компиляции в рамках набора хостов. Она состоит из серверной части — <tt>distccd</tt> и клиентской — <tt>distcc</tt>. После небольшой настройки distcc может прозрачно работать с [http://ccache.samba.org ccache], [[Portage]] и Automake. 

Если вы планируете использовать <tt>distcc</tt> при начальной сборке (bootstrap) своей установки Gentoo, обратите внимание на раздел [[#Использование_distcc_для_начальной_сборки_(bootstrap)_Gentoo|Использование distcc для начальной сборки (bootstrap) Gentoo]]. 

== Установка ==

=== Зависимости ===

Для работы с <tt>distcc</tt> все компьютеры в сети должны иметь GCC одной версии. К примеру, можно использовать на разных машинах 3.3.x (где x — разные), а смешивание 3.3.x с 3.2.x может привести к ошибкам при компиляции или выполнении. 

=== Установка distcc ===

Distcc поставляется с графическим монитором для отслеживания заданий, отправляемых компьютером на компиляцию. Данный монитор включается, когда установлен <code>USE</code>-флаг <code>gtk</code>.

После настройки <code>USE</code>-флагов установите пакет {{Package|sys-devel/distcc}}:

{{Emerge|distcc}}

{{Important/ru|Убедитесь, что {{Package|sys-devel/distcc}} установлен на все участвующие в распределённой компиляции компьютеры.}}

=== Настройка Portage для работы с distcc ===

Настроить [[Portage]] для работы с <tt>distcc</tt> легко. Выполните следующие шаги на каждой системе, которая должна участвовать в распределенной компиляции:

Сначала удостоверьтесь, что установлен {{Package|sys-devel/distcc}}:

{{Emerge|distcc}}

Далее, установите переменные <code>MAKEOPTS</code> и <code>FEATURES</code> как показано ниже. Общепринятая стратегия — выбор в качестве <code>N</code> ''удвоенного'' числа ''всех'' (локальных + удалённых) ядер CPU + 1, а в качестве <code>M</code> — числа ''локальных'' ядер CPU. Флаг <code>-lM</code> предотвращает запуск чрезмерно большого количества заданий в случаях, когда некоторые хосты недоступны или устанавливаемый пакет требует локальной компиляции (например, gcc).

{{FileBox|filename=/etc/portage/make.conf|title=Установка переменных MAKEOPTS и FEATURES|lang=bash|1=
MAKEOPTS="-jN -lM"
FEATURES="distcc"
}}

Например, если <tt>distccd</tt> запущен на двух четырехъядерных хостах, а локальный компьютер оснащен двухъядерным процессором, то переменная <code>MAKEOPTS</code> может выглядеть так:

{{FileBox|filename=/etc/portage/make.conf|title=Пример MAKEOPTS для 1 двухъядерного (локального) и 2 четырёхъядерных (вспомогательных) компьютеров|lang=bash|1=
# 2 удалённых хоста с 4 ядрами каждый = 8 удалённых ядер
# 1 локальный хост с двумя ядрами = 2 локальных ядра
# общее количество ядер — 10, N = 2*10+1 и M=2
MAKEOPTS="-j21 -l2"
}}

Не используйте <code>-march=native</code> в переменных <code>CFLAGS</code> и <code>CXXFLAGS</code> файла {{Path|make.conf}}. Если <code>march</code> установлен в <code>native</code>, то <tt>distccd</tt> не сможет распределить работу по другим машинам. Подходящее значение для <code>march</code> можно получить с помощью следующей команды:

{{Cmd|gcc -Q -march{{=}}native --help{{=}}target}}

Подробности можно найти на странице [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining -march=native for distcc].

=== Указание участвующих хостов ===

Для задания списка хостов используйте команду <kbd>distcc-config</kbd>. 

Далее показан пример задания хостов. Вариантов из первой и второй строки в большинстве случаев достаточно. Подробнее о синтаксисе, использованном в третьей и четвертой строках, можно прочитать в [http://distcc.googlecode.com/svn/trunk/doc/web/man/distcc_1.html man-странице distcc].

{{CodeBox|title=Примеры задания хостов|1=
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
}}

Есть также несколько других методов для настройки хостов. За подробностями обратитесь к man-странице <tt>distcc</tt> (<kbd>man distcc</kbd>).

Если локальная машина должна участвовать в компиляции, поместите <code>localhost</code> в список хостов. Наоборот, если локальная машина '''не''' должна участвовать в компиляции, не включайте её в список хостов. Использование localhost на медленной машине может, как ни странно, замедлить процесс. Всегда проверяйте влияние настроек на производительность.

Настроим <tt>distcc</tt> для компиляции на хостах из первой строчки примера:

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

Отредактируйте {{Path|/etc/conf.d/distccd}} и убедитесь, что с помощью директивы <code>--allow</code> разрешены только доверенные хосты. Для усиления безопасности можно также добавить директиву <code>--listen</code>, сообщив с её помощью демону <tt>distccd</tt>, на каком IP ожидать соединений (для систем с несколькими адресами). Подробнее о безопасности в <tt>distcc</tt> можно почитать в [http://distcc.googlecode.com/svn/trunk/doc/web/security.html Distcc security notes]. 

{{Important/ru|Использовать <code>--allow</code> и <code>--listen</code> — важно. Обратитесь к man-странице <tt>distccd</tt> или указанному выше документу по безопасности для получения дополнительной информации.}}

Теперь запустите демон <tt>distccd</tt> на всех участвующих компьютерах: 

{{RootCmd|rc-update add distccd default
|rc-service distccd start}}

=== Настройка distcc для работы с automake ===

Иногда это проще настройки Portage. Всё, что нужно сделать, это обновить переменную <code>PATH</code>, добавив {{Path|/usr/lib/distcc/bin/}} перед каталогом, содержащим <tt>gcc</tt> ({{Path|/usr/bin/}}). С одной оговоркой. Если используется <tt>ccache</tt>, то нужно поместить путь к distcc после пути к ccache: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Поместите это в пользовательский {{Path|~/.bashrc}} или его эквивалент, чтобы переменная <code>PATH</code> устанавливалась при каждом входе пользователя в систему, либо задайте ее глобально через файл {{Path|/etc/env.d/}}.

К простому вызову <kbd>make</kbd> теперь нужно добавлять <kbd>-jN</kbd> (где N — целое число). Значение <code>N</code> зависит от сети и используемых для компиляции компьютеров. Эвристический подход к определению правильного значения <code>N</code> упоминался ранее в этой статье.

=== Настройка distcc для работы с ssh ===

В настройке distcc через ssh есть подводные камни. Во-первых, сгенерируйте ключевую пару SSH без пароля. Учтите, что portage компилирует программы из-под пользователя <tt>portage</tt>. Домашний каталог пользователя <tt>portage</tt> — {{Path|/var/tmp/portage/}}, поэтому ключи должны храниться в {{Path|/var/tmp/portage/.ssh/}}.

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Во-вторых, сделайте для каждого хоста раздел в файле конфигурации SSH:

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Разделы для хостов|1=
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName
 
Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
}}

Убедитесь также, что каждый из хостов есть в файле {{Path|known_hosts}}, и добавьте на этих хостах свой открытый ключ в файл {{Path|authorized_keys}}. Хосты <tt>test1</tt> и <tt>test2</tt> можно настроить командой:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Обратите внимание на знак <tt>@</tt>, с его помощью в distcc указываются ssh-хосты.

== Кросс-компиляция ==

Кросс-компиляция — это использование компьютера одной архитектуры при сборке программ для другой архитектуры. Она может быть такой же простой, как использование Athlon (i686) при сборке программы для K6-2 (i586) или использование SPARC при сборке программы для PowerPC. Эта тема описана в [[Distcc/Cross-Compiling/ru|Руководстве по кросс-компиляции с distcc]].

== Использование distcc для начальной сборки (bootstrap) Gentoo ==

=== Шаг 1: настройка Portage ===

Загрузите новую машину с Gentoo Linux LiveCD и следуйте [[Handbook:AMD64|инструкциям по установке]], учитывая инструкции по bootstrapping’у в [[FAQ/ru|ЧаВо по Gentoo]]. Затем настройте Portage для использования <tt>distcc</tt>: 

{{FileBox|filename=/etc/portage/make.conf|title=Настройка Portage для использования distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Также обновите переменную <code>PATH</code> в установочном сеансе:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Шаг 2: установка Distcc ===

Установите {{Package|sys-devel/distcc}}: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Шаг 3: настройка distcc ===

Запустите <kbd>distcc-config --install</kbd> для настройки distcc; замените в примере <code>host#</code> на IP-адреса или имена узлов, принимающих участие в компиляции.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc теперь настроен для bootstraping’а! Продолжайте следовать соответствующим инструкциям по установке и ''не'' забудьте запустить <kbd>emerge distcc</kbd> после запуска <kbd>emerge @system</kbd>. Это нужно, чтобы убедиться, что все необходимые зависимости установлены. 

{{Note/ru|В процессе начальной установки (bootstraping’а) и выполнения <kbd>emerge @system</kbd> <tt>distcc</tt> может не использоваться. Это ожидаемое поведение: некоторые файлы ebuild плохо работают с distcc, поэтому distcc отключён в них преднамеренно.}}

== Устранение проблем ==

=== Некоторые пакеты не используют distcc ===

Можно заметить, что сборка некоторых пакетов не распределяется по хостам (и не происходит параллельно, т. е. в несколько процессов). Такое может происходить, когда {{Path|Makefile}} пакета не поддерживает параллельные операции, или мейнтейнер ebuild’а явно отключил их, чтобы избежать известных проблем. 

Иногда <tt>distcc</tt> может вызывать сбой при компиляции пакета. Если такое происходит, пожалуйста, [https://bugs.gentoo.org/ сообщите] об этом.

=== Смешанные версии GCC ===

Если на взаимодействующих хостах разные версии GCC, то велика вероятность возникновения очень странных проблем. Решение — установить на все хосты одну версию GCC. 

После недавных обновлений Portage стал использовать <code>${CHOST}-gcc</code> (минус gcc) вместо <code>gcc</code>. Это значит, что совместное использование i686-машин с машинами других типов (i386, i586) может вызвать проблемы со сборкой. Обходное решение — запустить <kbd>export CC='gcc' CXX='c++'</kbd> из-под пользователя root или задать эти переменные в {{Path|/etc/portage/make.conf}}.

{{Important/ru|Так вы явно переопределите некоторую часть поведения Portage, что может привести к странным результатам в будущем. Делайте так, только если использование разных CHOST’ов неизбежно.}}

=== -march=native ===

GCC, начиная с версии 4.3.0, поддерживает параметр <code>-march=native</code>, который включает автоматическое определение CPU, на котором запущен GCC, и оптимизаций, которые стоит включить для него. Это создает проблемы при использовании <tt>distcc</tt>, так как допускает смешивание оптимизированного для разных процессоров кода. К примеру, запуск <tt>distcc</tt> с <code>-march=native</code> на системе с процессором AMD Athlon и на ''другой'' системе с процессором Intel Pentium приведет к смешиванию кода, скомпилированного на обоих процессорах.

Обратите внимание на следующее предупреждение:

{{Warning/ru|'''Не''' используйте <code>-march{{=}}native</code> и <code>-mtune{{=}}native</code> в переменных <code>CFLAGS</code> и <code>CXXFLAGS</code> файла {{Path|make.conf}} при компиляции с помощью <tt>distcc</tt>.}}

Чтобы узнать, какие флаги включит GCC при запуске с <code>-march=native</code>, выполните следующее:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

== Distcc extras ==

=== Distcc monitors === 

Distcc ships with two monitoring utilities. The text-based monitoring utility is always built and is called <tt>distccmon-text</tt>. Running it for the first time can be a bit confusing, but it is really quite easy to use. If the program is run with no parameter it will run just once. However, if it is passed a number it will update every <code>N</code> seconds, where <code>N</code> is the argument that was passed.

{{Cmd|distccmon-text 10}}

The other monitoring utility is only enabled when the <code>gtk</code> <code>USE</code> flag is set.  This one is GTK+ based, runs in an X environment, and it is quite lovely.  For Gentoo, the GUI monitor has been renamed to <tt>distccmon-gui</tt> to make it less confusing (it is originally called <tt>distccmon-gnome</tt>).

{{Cmd|distccmon-gui}}

To monitor Portage's <tt>distcc</tt> usage:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|If the distcc directory is elsewhere, change the <code>DISTCC_DIR</code> variable accordingly.}}

== External resources ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining -march=native for distcc]
* [https://code.google.com/p/distcc/ Distcc homepage]


{{Migrated|originalauthors=Lisa Seelye, Mike Frysinger, Erwin, Sven Vermeulen, Lars Weiler, Tiemo Kieft and nightmorph}}
