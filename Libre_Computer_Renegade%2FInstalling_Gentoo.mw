The Libre Computer Renegade is an ARMv8-A (Cortex-A53) based single board computer.

== Specifications ==

* SoC: Rockchip RK3328 
* CPU: Quad-core ARM Cortex-A53 @ 1.3 GHz
* GPU: Mali 450
* Board name: ROC-RK3328-CC
* Audio: I2S
* Ram: 4gb
* Storage: SDXC or eMMC
* Filename of device tree binary: rk3328-roc-cc.dtb

== What works and what doesn't ==

{| class="wikitable"
|-
! !! On >=sys-kernel/gentoo-sources-5.2
|-
| '''Suspend/Resume''' || untested
|-
| '''LAN''' || works
|-
| '''X''' || works
|-
| '''HDMI''' || works
|-
| '''Analog audio''' || no
|-
| '''HDMI-Audio''' || untested
|-
| '''GPU hardware acceleration''' || partial (lima: WIP)
|}

== Installing Gentoo on eMMC ==



=== Additional hardware requirements ===

* USB-A male to male cable
* USB drive (at least 2GB but not bigger than the eMMC)


=== Installing required tools ===

The guide assumes that the current platform is a Gentoo Linux one. The majority of steps however can be performed from any distribution, just translate the Gentoo-specific way of doing things (such as installing software) to the other distribution's practices.
{{Note|Throughout this guide this current platform will be referred to as the ''host system'' whereas the rk3328-roc-cc will be referred to as the ''target device''.}}

Install {{Package|sys-apps/dtc}} and {{Package|sys-block/parted}}

{{RootCmd
|emerge –ask sys-apps/dtc sys-block/parted
}}


=== Preparing the partitions ===

This is the recommended partition layout and size:
{| class="wikitable"
|-
! !! Purpose !! Start (Bytes) !! End (Bytes) !! Size (Bytes)
|-
| /dev/sd*1 || preloader (miniloader or U-Boot SPL) || 32768 || 4128767 || 4096000
|-
| /dev/sd*2 || U-Boot || 8388608 || 12582911 || 4194304
|-
| /dev/sd*3 || trusted OS (atf) || 12582912 || 16777215 || 4194304
|-
| /dev/sd*4 || boot partition || 16777216 || 134217727 || 117440512
|-
| /dev/sd*5 || root partition || 134217728 || arbitrary || depends
|}

{{Important|The "*" in the following commands needs to be replaced with the letter corresponding to the USB drive.}}

{{Warning|This will delete all data on {{Path|/dev/sd*}}}}

{{RootCmd
|parted /dev/sd* mklabel gpt
|parted -a optimal /dev/sd* unit b mkpart loader1 32768 4128767
|parted -a optimal /dev/sd* unit b mkpart loader2 8388608 12582911
|parted -a optimal /dev/sd* unit b mkpart atf 12582912 16777215
|parted -a optimal /dev/sd* unit b mkpart boot 16777216 134217727
|parted -a optimal /dev/sd* unit b mkpart rootfs 134217728 100%
|parted set 4 boot on
}}

Due to upstream providing only an old and buggy version of u-boot the rootfs partition's GUID must be set to {{c|B921B045-1DF0-41C3-AF44-4C6F280D3FAE}}.

{{RootCmd
|gdisk /dev/sd*
}}

Now, one after the other confirmed with {{Key|Enter}}, enter "x", "c", "5", "B921B045-1DF0-41C3-AF44-4C6F280D3FAE", "w" and "y".

=== Create the appropriate file systems and mount the partitions ===

The boot partition must contain a {{c|fat}} filesystem  

{{RootCmd
|mkfs.fat -F 16 /dev/sd*4
|mkfs.ext4 /dev/sd*5
|mkdir /mnt/{newboot,newroot}
|mount /dev/sdX4 /mnt/newboot
|mount /dev/sdX5 /mnt/newroot
}}

=== Create a cross-compiler ===

{{Important|This section can be skipped if the host system's architecture is the same as the target system's. These steps are only necessary if the host system is '''not''' based on the same architecture as the target device.}}
{{Note|The instructions for setting up a cross-compilation toolchain are very specific to Gentoo, i.e. if the host system runs a different Linux distribution the respective distribution’s documentation on cross-compilation should be consulted instead.}}

Create a local overlay for the cross toolchain, cf. [[Custom_repository#Crossdev|Custom repository for crossdev]]:

{{RootCmd
|mkdir -p /usr/local/portage-crossdev/{profiles,metadata}
|echo 'crossdev' > /usr/local/portage-crossdev/profiles/repo_name
|echo 'masters {{=}} gentoo' > /usr/local/portage-crossdev/metadata/layout.conf
|chown -R portage:portage /usr/local/portage-crossdev
}}

Then instruct Portage and {{Package|sys-devel/crossdev}} to use this overlay:

{{FileBox|filename=/etc/portage/repos.conf/crossdev.conf|lang=ini|1=
[crossdev]
location = /usr/local/portage-crossdev
priority = 10
masters = gentoo
auto-sync = no
}}

Install {{Package|sys-devel/crossdev}} and create the cross toolchain. Replace {{c|TUPLE}} with the [[Embedded_Handbook/Tuples|system tuple]] fitting the target architecture, i.e. {{c|aarch64-linux-gnueabihf}} for the ARMv8-A based Libre Computer Renegade.

{{RootCmd
|emerge --ask sys-devel/crossdev
|crossdev --stable --target TUPLE
}}


Finally prepare cross-compiling the kernel.

Replace {{c|TARGETARCH}} with the target device's architecture, {{c|arm64}}.

{{Cmd
|export ARCH{{=}}TARGETARCH
}}

Replace {{c|TUPLE}} again with the system tuple fitting the target architecture, {{c|aarch64-linux-gnueabihf}}. Mind the trailing "{{c|-}}".

{{Cmd
|export CROSS_COMPILE{{=}}TUPLE-
}}

=== Configuring the Linux kernel ===

If all necessary drivers are built into the kernel (i.e. no loadable modules are needed to boot the target device) there's no need to have an initramfs, which keeps things simple. Especially if the host system's architecture differs from the target device's architecture creating an initramfs would at least involve cross-compiling busybox. With that in mind configure {{Package|sys-kernel/gentoo-sources}} as usual, cf. [[Handbook:AMD64/Installation/Kernel|Configuring the Linux kernel]].

Build the kernel and device tree binaries:

{{Cmd
|make -j5 Image dtbs
}}

=== Finish the boot partition ===

From the kernel build directory, copy the Image and the target device's device tree binary to the desired working directory. Replace {{c|DTBINARY}} with the filename of the target device's device tree binary, {{c|rk3328-roc-cc.dtb}}.

{{RootCmd
|cp -a arch/arm/boot/Image /mnt/newboot/
|cp -a arch/arm/boot/dts/rockchip/DTBINARY /mnt/newboot/
}}

Create directory "extlinux" on the boot partition

{{RootCmd
|mkdir /mnt/newboot/extlinux
}}

Create the file {{Path|/mnt/newboot/extlinux/extlinux.conf}}

{{FileBox|filename=extlinux.conf|lang=bash|1=
label kernel-4.4
    kernel /Image
    fdt /rk3328-roc-cc.dtb
    append  earlycon=uart8250,mmio32,0xff130000 rw root=PARTUUID=b921b045-1d rootwait rootfstype=ext4 init=/sbin/init
}}

Unmount the boot partition

{{RootCmd
|umount /mnt/newboot
}}

=== Backup new boot partition ===

For example in case someday a kernel upgrade goes wrong, backup the new boot partition:

{{RootCmd
|dd if{{=}}/dev/sd*4 of{{=}}/PATH/TO/ARBITRARY_BACKUP_LOCATION/rk3328-roc-cc-boot.img
}}

=== Install a Gentoo rootfs ===

As arm64 is not yet officially supported, get a stage3 tarball from Gentoo's [https://gentoo.osuosl.org/experimental/arm64/ experimental repository] and extract it to {{Path|/mnt/newroot/}}

{{RootCmd
|tar xvpf /PATH/TO/STAGE3-TARBALL -C /mnt/newroot/
}}

Switch the new gentoo installation to unstable and adjust make.conf to utilize all four cores of the CPU. Replace {{c|TARGETARCH}} with the target device's architecture, {{c|arm64}}.

{{RootCmd
|echo "ACCEPT_KEYWORDS{{=}}\"~TARGETARCH\"" >> /mnt/newroot/etc/portage/make.conf
|echo "MAKEOPTS{{=}}\"-j4\"" >> /mnt/newroot/etc/portage/make.conf
}}

Set the new installation’s root password to “gentoo”, cf. [[TrimSlice#Setting_the_default_root_password|Setting the default root password]]

{{RootCmd
|sed -i 's/root\:\*/root\:\$6\$I9Q9AyTL\$Z76H7wD8mT9JAyrp\/vaYyFwyA5wRVN0tze8pvM\.MqScC7BBm2PU7pLL0h5nSxueqUpYAlZTox4Ag2Dp5vchjJ0/' /mnt/newroot/etc/shadow
}}

Finish this step by unmounting the bootable media’s rootfs

{{RootCmd
|umount /mnt/newroot
}}

=== Install the firmware ===

Download Firefly's Linux SDK:

{{Cmd
|git clone -b roc-rk3328-cc https://github.com/FireflyTeam/u-boot
|git clone -b debian https://github.com/FireflyTeam/build
|git clone -b master https://github.com/FireflyTeam/rkbin
}}

Assemble the firmware

{{Cmd
|./build/mk-uboot.sh roc-rk3328-cc
}}

Finish the remaining partitions by copying the firmware files to the USB drive

{{RootCmd
|dd if{{=}}out/u-boot/idbloader.img of{{=}}/dev/sd*1
|dd if{{=}}out/u-boot/uboot.img of{{=}}/dev/sd*2
|dd if{{=}}out/u-boot/trust.img of{{=}}/dev/sd*3
}}

=== Flash to eMMC ===
