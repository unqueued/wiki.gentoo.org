<languages />


{{Metadata|abstract=이 문서는 사용자를 GCC 업그레이드 과정으로 안내합니다.}}

이 문서는 사용자를 GCC 업그레이드 과정으로 안내합니다.

== 빠른 시작 ==

== 도입부 ==

GCC "업그레이드"에 대한 내용입니다. GCC를 다운그레이드 하면 원치 않는 부작용이 생길 수 있습니다. 일반적으로 보고된 문제에 대한 문제 해결 섹션을 참고하십시오. 

다음 섹션에서는 GCC 업그레이드(그리고 이게 얼마나 쉬운가!)에 대한 간단한 핵심 내용을 전달하겠습니다. GCC 업그레이드 전에 장황한 핑계(?)를 읽어보려 한다면, [[#.EC.9E.90.EC.84.B8.ED.95.9C_.EB.82.B4.EC.9A.A9.EC.9D.98_GCC_.EC.97.85.EA.B7.B8.EB.A0.88.EC.9D.B4.EB.93.9C|자세한 내용의 GCC 업그레이드]]편으로 계속 진행하십시오.

=== 간단한 버전 ===

GCC를 업그레이드 한다면 컴파일러 버전을 바꾸고 libtool을 다시 빌드하는것 이외에는 필요한 일이 없습니다: 

{{RootCmd|emerge -u sys-devel/gcc
|gcc-config -l|output=<pre>
[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3
</pre>}}

{{RootCmd|gcc-config 2
|env-update && source /etc/profile
|emerge --oneshot libtool}}

3.4.0 이전(3.x 버전대) 또는 4.1 버전대의 GCC 버전을 업그레이드 한다면, 업그레이드 후 <code>revdep-rebuild</code>를 실행해야 합니다: 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

현재 버전을 확인하고 이전 버전을 삭제하십시오
{{RootCmd|gcc --version |emerge -C &#61;sys-devel/gcc-4.4.5}}

다 됐습니다. 컴파일러 자아알~ 쓰세요! 

== 자세한 내용의 GCC 업그레이드 ==

== 도입부 ==

GCC 업그레이드는 "더이상 뭘 할 필요가 없다"부터 시작해서 "시스템 전체를 한번 더 빌드해야 한다"까지 여러가지 훈수로 인해 신비로움에 둘러쌓여 있습니다. 대부분의 FUD는 ABI 비호환성으로 인한 혼동에서 옵니다. 그러나 포인터는 신속하게<code>libtool</code>를 가리킬 것입니다.

=== libtool과 fix_libtool_files.sh ===

젠투에서 예전에 설치하던 GCC는 <code>fix_libtool_files.sh</code> 명령을 실행해야 했습니다. 얼마전에 이 명령의 실행을 패키지 배포 자신에 넣어(eclass 툴체인을 통해), 더이상 사용자가 이 명령을 불러올 필요가 없습니다. 

gcc 버전을 업그레이드 한 후 libtool을 다시 빌드해야 하는 이유는 주된 이유 하나 때문입니다. ''libtool''은 공유 라이브러리의 플랫폼 기반 양상을 판단하기 위해 무언가를 처리할 필요 없이 공유 라이브러리를 통해 프로그램을 빌드할 수 있도록 하는 공통 인터페이스에서 플랫폼 관련 코드를 모으는 도구셋입니다. 이 기능 속성대로 동작하기 위해, <code>libtool</code> 스크립트는 하드코딩한 GCC 버전을 보유한 다양한 라이브러리 위치를 각 위치에서 사용합니다.

== ABI 변경 ==

"Application Binary Interface"라고 하는 ABI는 컴파일러, 어셈블러, 링커, 언어  런타임 지원을 포함하는 프로그램의 바이너리 표현을 다루는 모든 도구에서 사용하는 관례(원본: [http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html GCC Binary Compatibility])입니다. 이진 프로그램과 라이브러리가 사용하던 ABI가 바뀌면 C++ 코드를 사용하는 모든 라이브러리를 다시 빌드하지 않는 한 프로그램이 링커 오류가 뜨거나 제대로 동작하지 않아 피해를 볼 수 있습니다. 예 그렇습니다. C++은 C++ ABI 안에서 대부분의 비호환성을 달고 있습니다. 이게 바로 {{Path|libstdc++.so.5}} 라이브러리에 대해 <code>revdep-rebuild</code> 명령을 사용해야 하는 이유입니다. 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

그래서 왜 GCC 3.4.0/4.1 이상에서만 필요할까요? 버전에 따른 이유인데, GCC는 프로그램과 라이브러리를 다시 빌드할 필요성을 제거한 차기 호환 ABI를 사용합니다. 물론 보증은 확실히 못하지만 비호환성이 또 발생하면 여기에 문서로 남겨놓도록 하겠습니다. 이 경우, {{Path|libstdc++.so}} 라이브러리의 버전은 증가할 것입니다.

=== 모두 다시 빌드 ===

어떤 사람들은 새 GCC 버전이 동작하게 하려면 시스템의 모든 단일 꾸러미를 다시 빌드해야 한다고 주장합니다. 물론, 딱히 문제가 되는건 아니고, 어쨌듵 빌드 및 설치 과정에서 GCC를 사용하지 않는 프로그램이 많이 있기 때문에, 이런 바뀐 상황에 영향을 주진 않습니다. 

그러나 이러한 주장은 확실히 잘못됐습니다: 새 GCC 버전은 일부 프로그램의 동작을 더 좋게 하는 프로세서 명령 셋을 종종 더 많이 지원합니다. 이런 개선사항이 잉여스러운 것으로 기대되지만, 어떤 경우에는(특히 CPU를 중점적으로 다루는 프로그램) 주목할만한 성능 향상을 보일 때도 있습니다. 

동일한 컴파일러로 빌드할 필요가 있는 꾸러미에 대해 몇가지 알려진 경우가 더 있습니다. 젠투를 통해 보통 꾸러미 버전이 동시에 올라가긴 하지만(그래서 항상 동일한 GCC 버전으로 빌드합니다), 이 꾸러미들을 따로 골라서 재설치하는 경우는 문제가 있음이 증명됩니다. 여러가지 {{Path|qt-*}} 패키지는 이러한 상황에 대한 좋은 예입니다. 

== 문제 해결 ==

=== libstdc++.so.6: `GLIBCXX_3.4.15' 버전을 찾을 수 없음 ===

업데이트 하는 동안 다음과 같은 오류를 만날 수 있습니다: 

{{Code|GLIBCXX_x.y.z를 찾을 수 없음|<pre>
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found 
</pre>
}}

This means that you are trying to build a package with an ''older'' GCC version than with which some depending libraries were built. Remember when we told that the C++ ABI is forward-compatible? That is true, but it ensures only that ''higher'' (or same) GCC versions can be used when building applications and linking libraries (compared to the GCC version used to build those libraries).

To rebuild all the packages depending on libstdc++ the next bash script can be executed.

{{Code|Script to rebuild libstdc++ depending packages|<pre>
#!/bin/bash
while read i ; do
  [ -n "$(ldd -r $i | grep 'libstdc++')" ] && qfile "$i" >> rebuild.packages
done < $(find $(echo $PATH | tr ':' ' ') -type f -executable)
cut -d ' ' -f1 rebuild.packages | sort -u -o rebuild.packages
emerge -1av $(cat rebuild.packages)
</pre>
}}

=== 리빌드 해야 한다고 알려진 꾸러미는 무엇인지요? ===

다음 테이블에서 ''설치했을 경우'' 꾸러미 이름과 왜 리빌드해야 하는지를 보여줍니다. 

{| class="wikitable" style="text-align: left;" 
|- 
! Package
! Rebuild needed because ...
|- 
| {{Package|sys-devel/libtool}}
| libtool application has hardcoded paths towards GCC internal libraries
|-
|}

=== 자원 ===

=== 젠투 안내서 및 자원 ===

[https://wiki.gentoo.org/wiki/Upgrade_GCC_up_to_4.1 GCC 4.1로 업그레이드하기] 이 문서의 이전 버전


[[Category:Core system]]
