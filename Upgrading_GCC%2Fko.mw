<languages />


{{Metadata|abstract=이 문서는 GCC 업그레이드 과정에 대해 사용자를 안내합니다.}}

이 문서는 GCC 업그레이드 과정에 대해 사용자를 안내합니다.

== 빠른 시작 ==

== 도입부 ==

GCC "업그레이드"에 대한 내용입니다. GCC를 다운그레이드 하면 원치 않는 부작용이 생길 수 있습니다. 일반적으로 보고된 문제에 대한 문제 해결 섹션을 참고하십시오. 

다음 섹션에서는 GCC 업그레이드(그리고 이게 얼마나 쉬운가!)에 대한 간단한 핵심 내용을 전달하겠습니다. GCC 업그레이드 전에 장황한 핑계(?)를 읽어보려 한다면, [[#GCC Upgrading Explained|자세한 내용의 GCC 업그레이드]]편으로 계속 진행하십시오.

=== 간단한 버전 ===

GCC를 업그레이드 한다면 컴파일러 버전을 바꾸고 libtool을 다시 빌드하는것 이외에는 필요한 일이 없습니다: 

{{RootCmd|emerge -u gcc
|gcc-config -l|output=<pre>
[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3
</pre>}}

{{RootCmd|gcc-config 2
|env-update && source /etc/profile
|emerge --oneshot libtool}}

3.4.0 이전(3.x 버전대) 또는 4.1 버전대의 GCC 버전을 업그레이드 한다면, 업그레이드 후 <code>revdep-rebuild</code>를 실행해야 합니다: 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

다 됐습니다. 컴파일러 자아알~ 쓰세요! 

== 자세한 내용의 GCC 업그레이드 ==

== 도입부 ==

GCC 업그레이드는 "더이상 뭘 할 필요가 없다"부터 시작해서 "시스템 전체를 한번 더 빌드해야 한다"까지 여러가지 훈수로 인해 신비로움에 둘러쌓여 있습니다. 대부분의 FUD는 ABI 비호환성으로 인한 혼동에서 옵니다. 그러나 포인터는 신속하게<code>libtool</code>를 가리킬 것입니다.

=== libtool과 fix_libtool_files.sh ===

젠투에서 예전에 설치하던 GCC는 <code>fix_libtool_files.sh</code> 명령을 실행해야 했습니다. 얼마전에 이 명령의 실행을 패키지 배포 자신에 넣어(eclass 툴체인을 통해), 더이상 사용자가 이 명령을 불러올 필요가 없습니다. 

gcc 버전을 업그레이드 한 후 libtool을 다시 빌드해야 하는 이유는 주된 이유 하나 때문입니다. ''libtool''은 공유 라이브러리의 플랫폼 기반 양상을 판단하기 위해 무언가를 처리할 필요 없이 공유 라이브러리를 통해 프로그램을 빌드할 수 있도록 하는 공통 인터페이스에서 플랫폼 관련 코드를 모으는 도구셋입니다. 이 기능 속성대로 동작하려 하드코딩한 GCC 버전을 보유한 다양한 라이브러리 위치를 <code>libtool</code> 스크립트에서 사용합니다.

== ABI 변경 ==

"Application Binary Interface"라고 하는 ABI는 컴파일러, 어셈블러, 링커, 언어  런타임 지원을 포함하는 프로그램의 바이너리 표현을 다루는 모든 도구에서 사용하는 관례(원본: [http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html GCC Binary Compatibility])입니다. 이진 프로그램과 라이브러리가 사용하던 ABI가 바뀌면 C++ 코드를 사용하는 모든 라이브러리를 다시 빌드하지 않는 한 프로그램이 링커 오류가 뜨거나 제대로 동작하지 않아 피해를 볼 수 있습니다. 예 그렇습니다. C++은 C++ ABI 안에서 대부분의 비호환성을 달고 있습니다. 이게 바로 {{Path|libstdc++.so.5}} 라이브러리에 대해 <code>revdep-rebuild</code> 명령을 사용해야 하는 이유입니다. 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

그래서 왜 GCC 3.4.0/4.1 이상에서만 필요할까요? 버전에 따른 이유인데, GCC는 프로그램과 라이브러리를 다시 빌드할 필요성을 제거한 차기 호환 ABI를 사용합니다. 물론 보증은 확실히 못하지만 비호환성이 또 발생하면 여기에 문서로 남겨놓도록 하겠습니다. 이 경우, {{Path|libstdc++.so}} 라이브러리의 버전은 증가할 것입니다.

=== 모두 다시 빌드 ===

Some people swear that they need to rebuild every single package on their system when a new GCC version is made available. Of course, that doesn't make sense, since there are many applications that are not using GCC for their build and install process anyhow, so they would never be affected by such changes. 

That however doesn't mean they are completely incorrect: newer GCC versions often include better support for the processors' instruction set, which might influence the performance of some applications in a positive way. Although it is expected that this improvement is generally only marginally, in some cases (especially CPU intensive applications) this might yield notable improvements. 

There are also known cases where packages need to be built with the same compiler. Although these packages are usually bumped by Gentoo simultaneously (so that they are always built with the same GCC version) cherry-picking reinstalls on these packages might prove to be troublesome. The various {{Path|qt-*}} packages are a nice example on this matter. 

== 문제 해결 ==

=== libstdc++.so.6: `GLIBCXX_3.4.15' 버전을 찾을 수 없음 ===

업데이트 하는 동안 다음과 같은 오류를 만날 수 있습니다: 

{{Code|GLIBCXX_x.y.z를 찾을 수 없음|<pre>
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found 
</pre>
}}

이는 빌드한 의존 라이브러리보다 "오래된" GCC 버전으로 패키지를 빌드하려 함을 의미합니다. 이전 호환성을 찾으려 할때 C++ ABI를 호출했음을 기억하십니까? 맞는 말이긴 한데, 프로그램을 빌드하고 라이브러리에 연결(이들 라이브러리를 빌드할때 사용한 GCC 버전과 비교했을 때)할 때는 "더 높은" GCC버전에 대해서만 동작이 보장됩니다. 

=== 리빌드 해야 한다고 알려진 꾸러미는 무엇인지요? ===

다음 테이블에서 ''설치했을 경우'' 꾸러미 이름과 왜 리빌드해야 하는지를 보여줍니다. 

{| class="wikitable" style="text-align: left;" 
|- 
! 패키지
! 리빌드가 필요한 이유
|- 
| sys-devel/libtool
| GCC 내부 라이브러리에 대해 libtool 프로그램에 경로가 하드코딩 되어 있음
|-
|}

=== 자원 ===

=== 젠투 안내서 및 자원 ===

[https://wiki.gentoo.org/wiki/Upgrade_GCC_up_to_4.1 GCC 4.1로 업그레이드하기] 이 문서의 이전 버전

== 감사문 ==

이 안내서에 제공한 노고에 대해 다음 작성자와 편집자분들께 감사의 말을 전하고자 합니다:


* swift

[[Category:Core system]]
