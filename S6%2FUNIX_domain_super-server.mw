s6 provides two programs, {{C|s6-ipcserver-socketbinder}} and {{C|s6-ipcserverd}}, that together implement a UNIX domain super-server. A ''UNIX domain super-server'' creates a listening sream mode UNIX domain socket (i.e. a <code>SOCK_STREAM</code> socket for address family <code>AF_UNIX</code>) and spawns a ''server program'' to handle each incoming connection after accepting it, so that from there on, the client communicates over the connection with the spawned server. This the UNIX domain equivalent of a TCP/IP super-server, such as xinetd ({{Package|sys-apps/xinetd}}) or ipsvd ({{Package|net-misc/ipsvd}}).

This article [[Article description::describes [[s6]]'s UNIX domain super-server and related tools]].

== Configuration ==

=== Environment variables ===

* <var>PROTO</var> — Set by {{C|s6-ipcclient}} and {{C|s6-ipcserverd}} to the value 'IPC', as per the IPC UCSPI specification, and used by {{C|s6-ipcserver-access}} and {{C|s6-connlimit}} to construct the names of other environment variables.
* <var>IPCREMOTEEUID</var> — Set by {{C|s6-ipcserverd}} to the effective user ID of the client, as per the IPC UCSPI specification, unless credentials lookups have been disabled. Read by {{C|s6-ipcserver-access}} (if the value of <var>PROTO</var> is 'IPC') to decide whether to allow or refuse access to the server.
* <var>IPCREMOTEEGID</var> — Set by {{C|s6-ipcserverd}} to the effective group ID of the client, as per the IPC UCSPI specification, unless credentials lookups have been disabled. Read by {{C|s6-ipcserver-access}} (if the value of <var>PROTO</var> is 'IPC') to decide whether to allow or refuse access to the server.
* <var>IPCCONNNUM</var> — Set by {{C|s6-ipcserverd}} to the number of connections originating from the same user (i.e. same user ID), and read by {{C|s6-connlimit}} (if the value of <var>PROTO</var> is 'IPC') to decide if the maximum number of connections originating from the same user will exceed the maximum allowed.
* <var>IPCCONNMAX</var> — Maximum number of connections originating from the same client allowed by {{C|s6-connlimit}} (if the value of <var>PROTO</var> is 'IPC').

== Usage ==

{{anchor|ipcserverd}}
=== s6-ipcserver-socketbinder and s6-ipcserverd ===

More specifically, what {{C|s6-ipcserver-socketbinder}} and {{C|s6-ipcserverd}} implement together is an ''IPC UCSPI super-server'', i.e. a super-server that adheres to the server side of Daniel J. Bernstein's ''UNIX Client-Server Program Interface'' (UCSPI) and supports the IPC UCSPI protocol<ref>Jonathan de Boyne Pollard, [https://jdebp.eu/FGA/UCSPI.html The gen on the UNIX Client-Server Program Interface]. Retrieved on July 22th, 2017.</ref>. The UCSPI defines an interface for client-server communications tools; ''UCSPI tools'' are executable programs that accept options, a protocol-specific ''address'', an ''application'' name and its arguments. Tools can be either clients or servers, clients communicate with servers using a ''connection''. If the UCSPI tool is a server, the application is invoked with the supplied arguments each time there is an incoming connection to the specified address, with file descriptor 0 opened for reading from the connection, file descriptor 1 opened for writing to the connection, and environment variables set to defined values. If the UCSPI tool is a client, a connection is made to the specified address and, if successful, the application is invoked with the supplied arguments, with file descriptor 6 opened for reading from the connection, file descriptor 7 opened for writing to the connection, and environment variables set to defined values. One of the application environment variables set by both UCSPI clients and servers is <var>PROTO</var>, with the name of the supported protocol as its value. The protocol implemented by the s6 programs is the ''IPC UCSPI protocol'', for which the ''address'' specified to UCSPI tools is defined to be a UNIX domain socket pathname, and the value of <var>PROTO</var> is defined to be 'IPC'.

{{C|s6-ipcserver-socketbinder}} is [[daemontools-encore#changingstate|a chain loading program]] that accepts options and a pathname. It creates a UNIX domain socket, binds it to the specified pathname and prepares it to accept connections with the POSIX <code>listen()</code> call. The next program in the chain will have its standard input connected to the listening socket, which will be '''non-blocking''' (<code>O_NONBLOCK</code>). The number of ''backlog connections'', i.e. the number of outstanding connections in the socket's listen queue, can be set with the <code>-b</code> option; additional connection attempts will be rejected by the kernel. If {{C|s6-ipcserver-socketbinder}} is invoked with a <code>-b 0</code> option, the socket will be created but won't be listening, i.e. <code>listen()</code> won't be called. If it is invoked with the <code>-m</code> option, the created socket will be a datagram mode socket (<code>SOCK_DGRAM</code>), which also requires specifying a <code>-b 0</code> option. If it is invoked without the <code>-m</code> option, or with the <code>-M</code> option, the created socket will be a stream mode socket (<code>SOCK_STREAM</code>).

{{C|s6-ipcserverd}} is a program that must have its standard input redirected to a bound and listening stream mode UNIX domain socket, and accepts a program name and its arguments. For each connection made to the socket, {{C|s6-ipcserverd}} executes the program with the supplied arguments as a child process, that has its file descriptors 0 and 1 redirected, on Gentoo, to the socket returned by a Linux <code>accept4()</code> with the listening socket's file descriptor as an argument, and the following environment variables:

* <var>PROTO</var>, <var>IPCREMOTEEUID</var>, <var>IPCREMOTEEGID</var> and <var>IPCCONNNUM</var> — set as specified in [[#Environment_variables|"Environment variables"]].
* <var>IPCREMOTEPATH</var> — set to the pathname associated with the remote UNIX domain socket (on Gentoo, as contained in the <code>sun_path</code> field of the <code>struct sockaddr_un</code> object filled by the <code>accept4()</code> call), if any, as per the IPC UCSPI specification. Be aware that it may contain arbitrary characters.

On Gentoo, <var>IPCREMOTEEUID</var> and <var>IPCREMOTEEGID</var> are set with information obtained from a POSIX <code>getsockopt()</code> call with the Linux <code>SO_PEERCRED</code> option; this is called ''credentials lookup''. If {{C|s6-ipcserverd}} is invoked with a <code>-P</code> option, credentials lookup will be disabled, and <var>IPCREMOTEEUID</var> and <var>IPCREMOTEEGID</var> will be unset. If it is invoked without a <code>-P</code> option, or with a <code>-p</code> option, credentials lookup will be enabled. {{C|s6-ipcserverd}} supports the [[s6#s6readiness|s6 readiness protocol]], and if it is invoked with a <code>-1</code> option, it will turn readiness notification on, with file descriptor 1 (i.e. its standard output) as the notification channel's file descriptor.

If {{C|s6-ipcserverd}} receives a <code>SIGTERM</code> signal it will exit, but its children will continue running. If it receives a <code>SIGQUIT</code> signal, it will send its children a <code>SIGTERM</code> signal followed by a <code>SIGCONT</code> signal and then exit. If it receives a <code>SIGABRT</code> signal, it will send its children a <code>SIGKILL</code> signal and then exit. It is possible to make {{C|s6-ipcserverd}} kill its children without exiting (with a <code>SIGTERM</code> signal followed by a <code>SIGCONT</code> signal), by sending it a <code>SIGHUP</code> signal. {{C|s6-ipcserverd}} ignores the <code>SIGPIPE</code> signal, so at program startup, every child process will ignore it as well.

{{C|s6-ipcserver}} is a helper program that accepts options, a UNIX domain socket pathname, a program name and its arguments, and invokes {{C|s6-ipcserver-socketbinder}} chained to {{C|s6-ipcserverd}}, or {{C|s6-ipcserver-socketbinder}} chained to {{C|s6-applyuidgid}}, chained to {{C|s6-ipcserverd}}, depending on the options. The socket pathname is passed to {{C|s6-ipcserver-socketbinder}}, and the program name and its arguments, to {{C|s6-ipcserverd}}. {{C|s6-ipcserver}} options specify corresponding {{C|s6-ipcserver-socketbinder}}, {{C|s6-applyuidgid}} and {{C|s6-ipcserverd}} options. The created socket is a stream mode socket.

For further information about {{C|s6-ipcserver}}, {{C|s6-ipcserver-socketbinder}} or {{C|s6-ipcserverd}} please consult the HTML documentation in the s6 package's {{Path|/usr/share/doc}} subdirectory.

=== s6-ipcclient ===

{{C|s6-ipcclient}} is an IPC UCSPI client. It is a [[daemontools-encore#changingstate|chain loading program]] that accepts options and a UNIX domain socket pathname. It creates a stream mode socket, makes a connection to the socket specified by the supplied pathname, and executes the next program in the chain with file descriptors 6 and 7 redirected to the local connected socket, and the following environment variables:

* <var>PROTO</var> — set as specified in [[#Environment_variables|"Environment variables"]].
* <var>IPCLOCALPATH</var> — set to the pathname associated with the local UNIX domain socket it is using for the connection, as per the IPC UCSPI specification, with information obtained from a POSIX <code>getsockname()</code> call.

If {{C|s6-ipcclient}} is invoked with a <code>-p pathname</code> argument, it will bind the created socket to ''pathname'' (using the POSIX <code>bind()</code> call) before initiating the connection to the remote socket. If it is invoked with a <code>-l value</code> argument, it will set <var>IPCLOCALPATH</var> to ''value'', instead of using <code>getsockname()</code>.

For further information please consult the HTML documentation in the s6 package's {{Path|/usr/share/doc}} subdirectory.

{{anchor|rulesdir}}
=== s6-ipcserver-access and rules files and directories ===

{{C|s6-ipcserver-access}} is an access control tool for UNIX domain sockets. It is a [[daemontools-encore#changingstate|chain loading program]] that must be spawned by a UCSPI server (like [[#ipcserverd|{{C|s6-ipcserverd}}]]) that appropriately sets the <var>PROTO</var>, <var>${PROTO}REMOTEEUID</var> and <var>${PROTO}REMOTEEGID</var> environment variables, where ''${PROTO}'' is the value of <var>PROTO</var>. It decides whether or not to execute the next program in the chain, or to execute a completely different program instead, based on either a ''rules directory'' or a ''rules file''. The <code>-x</code> option specifies the pathname of a rules directory and the <code>-i</code> option specifies the pathname of a rules file.

If a rules directory '''R''' is specified with an <code>-x</code> option:

# {{C|s6-ipcserver-access}} will first search the {{Path|R/uid}} directory:
## (s6 version 2.8.0.0 or later) If it finds a subdirectory named {{Path|self}}, and the value of the <var>${PROTO}REMOTEEUID</var> variable, which must be a numeric user ID, is equal to its effective user ID, and the subdirectory contains a file named {{Path|allow}}, {{C|s6-ipcserver-access}} executes the next program in the chain. If the subdirectory does not contain a file named {{Path|allow}}, but contains instead a file named {{Path|deny}}, or if it does not contain any of those files, {{C|s6-ipcserver-access}} exits with code 1, and the next program in the chain is not executed.
## Otherwise, if it finds a subdirectory with a name that matches the value of the <var>${PROTO}REMOTEEUID</var> variable, and it contains a file named {{Path|allow}}, {{C|s6-ipcserver-access}} executes the next program in the chain. If the subdirectory does not contain a file named {{Path|allow}}, but contains instead a file named {{Path|deny}}, or if it does not contain any of those files, {{C|s6-ipcserver-access}} exits with code 1, and the next program in the chain is not executed.
# If {{Path|R/uid}} search fails, or there is no such directory, {{C|s6-ipcserver-access}} will then search the {{Path|R/gid}} directory:
## (s6 version 2.8.0.0 or later) If it finds a subdirectory named {{Path|self}}, and the value of the <var>${PROTO}REMOTEEGID</var> variable, which must be a numeric group ID, is equal to its effective group ID, and the subdirectory contains a file named {{Path|allow}}, {{C|s6-ipcserver-access}} executes the next program in the chain. If the subdirectory does not contain a file named {{Path|allow}}, but contains instead a file named {{Path|deny}}, or if it does not contain any of those files, {{C|s6-ipcserver-access}} exits with code 1, and the next program in the chain is not executed.
## Otherwise, if it finds a subdirectory with a name that matches the value of the <var>${PROTO}REMOTEEGID</var> variable, and it contains a file named {{Path|allow}}, {{C|s6-ipcserver-access}} executes the next program in the chain. If the subdirectory does not contain a file named {{Path|allow}}, but contains instead a file named {{Path|deny}}, or if it does not contain any of those files, {{C|s6-ipcserver-access}} exits with code 1, and the next program in the chain is not executed.
# If {{Path|R/gid}} search fails, or there is no such directory, {{C|s6-ipcserver-access}} will finally search for an {{Path|R/default}} directory. If it contains a file named {{Path|allow}}, {{C|s6-ipcserver-access}} executes the next program in the chain. If the subdirectory does not contain a file named {{Path|allow}}, but contains instead a file named {{Path|deny}}, or if it does not contain any of those files, {{C|s6-ipcserver-access}} exits with code 1, and the next program in the chain is not executed.
# If there is no {{Path|R/default}} directory, {{C|s6-ipcserver-access}} exits with code 1, and the next program in the chain is not executed.

If in any of these steps {{C|s6-ipcserver-access}} finds an {{Path|allow}} file in a matching directory '''M''' and executes the next program in the chain:

* Unless it was invoked with an <code>-E</code> option, it will add variable <var>${PROTO}LOCALPATH</var> to the program's environment, set to the pathname associated with the local UNIX domain socket (the one its standard input and output read from and write to, respectively), as reported by the POSIX <code>getsockname()</code> call.
* If it was invoked with an <code>-E</code> option, it will remove variables <var>PROTO</var>, <var>${PROTO}REMOTEPATH</var>, <var>${PROTO}REMOTEEUID</var>, <var>${PROTO}REMOTEEGID</var> and <var>${PROTO}CONNNUM</var> from the program's environment.
* If '''M''' contains a subdirectory named {{Path|env}}, {{C|s6-ipcserver-access}} will modify the program's environment as if an <kbd>s6-envdir M/env</kbd> command had been used.
* If '''M''' contains a regular file named {{Path|exec}}, {{C|s6-ipcserver-access}} will execute a different program instead of the one supplied as an argument, as if an <kbd>execlineb -c contents</kbd> command had been used, where ''contents'' is the contents of the {{Path|M/exec}} file (e.g. the name of a program that can be found via <var>PATH</var> search plus its arguments), passed to {{C|execlineb}} as a single argument. {{C|execlineb}} is the script parser and launcher from the execline package ({{Package|dev-lang/execline}}). 

A rules file is a [https://cr.yp.to/cdb/cdb.txt constant database (CDB) file] created from a rules directory using the {{C|s6-accessrules-cdb-from-fs}} program. If a rules file is specified with an <code>-i</code> option, {{C|s6-ipcserver-access}} will behave as if the corresponding rules directory had been specified with an <code>-x</code> option. A rules directory can be re-created from a rules CDB file using the {{C|s6-accessrules-fs-from-cdb}} program.

If {{C|s6-ipcserver-access}} is invoked with neither the <code>-x</code> option nor the <code>-i</code> option, it will execute the next program in the chain, i.e. it will unconditionally grant access.

For the full description of {{C|s6-ipcserver-access}}'s, {{C|s6-accessrules-cdb-from-fs}}'s and {{C|s6-accessrules-fs-from-cdb}}'s functionality please consult the HTML documentation in the s6 package's {{Path|/usr/share/doc}} subdirectory. See also [[s6#s6sudo|suidless privilege gain tools]] for {{C|s6-ipcserver-access}} usage examples.

=== s6-connlimit and s6-ioconnect ===

{{C|s6-connlimit}} is a [[daemontools-encore#changingstate|chain loading program]] that limits connections from the same client to an UCSPI server based on the <var>PROTO</var>, <var>${PROTO}CONNNUM</var>, <var>${PROTO}CONNMAX</var> environment variables (see [[#Environment_variables|environment variables]]), where ''${PROTO}'' is the value of the <var>PROTO</var> variable.

{{C|s6-ioconnect}} is a program that performs data transmission from file descriptor 0 to file descriptor 7, and from file descriptor 6 to file descriptor 1, all of them assumed to be open at program startup. That is, {{C|s6-ioconnect}} performs full-duplex data transmission.

For the full description of {{C|s6-connlimit}}'s and {{C|s6-ioconnect}}'s functionality please consult the HTML documentation in the s6 package's {{Path|/usr/share/doc}} subdirectory.

{{anchor|examples}}
== Examples ==

{{FileBox|lang=cpp|filename=test-server.cxx|title=Example C++ aplication to be executed by a IPC UCSPI server|
1=#include <cerrno>
#include <cinttypes>
#include <cstring>
#include <iostream>
#include <pwd.h>
#include <sstream>
#include <string>
#include <unistd.h>

constexpr int ucspi_server_read = 0;
constexpr int ucspi_server_write = 1;

void read_from_socket(char *buffer, const size_t buffer_size) {
  size_t n = 0;
  while (ssize_t r = read(ucspi_server_read, buffer + n, buffer_size - n)) {
    if (r < 0) throw errno;
    n += r;
    if (n == buffer_size) break;
  }
  buffer[n] = 0;
}

void write_to_socket() {
  std::ostringstream out;
  const char *env_uid = getenv("IPCREMOTEEUID");
  const passwd *acct = env_uid? getpwuid(static_cast<uid_t>(std::strtoimax(env_uid, 0, 10))): nullptr;
  out << "Server process created with PID " << getpid() <<
    ", client is \"" << (acct? acct->pw_name: "<unavailable>") << "\"\n";
  if (write(ucspi_server_write, out.str().data(), out.str().length()) < 0) throw errno;
}

int main(){
try {
  char buffer[] = "Hello!";
  const std::string greeting(buffer);
  read_from_socket(buffer, greeting.length());
  if (greeting == buffer) write_to_socket();
  sleep(10);
  return 0;
}
catch (int err) {
  std::cerr << "test-server: fatal: " << std::strerror(err) << '\n';
  return 1;
}
catch (...) {
  return 1;
}
} }}

The application reads from the open file descriptor supplied by the UCSPI server, expecting to receive a "Hello!" message from the client, and if it does, it sends a response that contains the application's process ID and the account database username corresponding to the client's user ID, supplied by the UCSPI server via the <var>IPCREMOTEEUID</var> environment variable. The application then waits for 10 seconds, and finally exits.

{{FileBox|lang=cpp|filename=test-client.cxx|title=Example C++ aplication to be executed by a IPC UCSPI client|
1=#include <cerrno>
#include <cstring>
#include <iostream>
#include <string>
#include <unistd.h>

constexpr int ucspi_client_read = 6;
constexpr int ucspi_client_write = 7;

void read_from_socket(std::string &in) {
  const int buffer_size(100);
  char buffer[buffer_size];
  while (ssize_t r = read(ucspi_client_read, buffer, buffer_size)) {
    if (r < 0) throw errno;
    char *p = static_cast<char *>(std::memchr(buffer, '\n', buffer_size));
    in.append(buffer, p? p + 1: buffer + r);
    if (p) break;
  }
}

inline void write_to_socket(const char *greeting) {
  if (write(ucspi_client_write, greeting, std::strlen(greeting)) < 0) throw errno;
}

int main() {
try {
  std::cout << "Connecting to server...\n";
  std::cout.flush();
  const char greeting[] = "Hello!";
  write_to_socket(greeting);
  std::string in;
  read_from_socket(in);
  if (!in.empty()) std::cout << in;
  return 0;
}
catch (int err) {
  std::cerr << "test-client: fatal: " << std::strerror(err) << '\n';
  return 1;
}
catch (...) {
  return 1;
}
} }}

The application prints "Connecting to server..." to its standard output, sends a "Hello!" message to the server using the open file descriptor supplied by the UCSPI client, and waits for a reply, which is printed to its standard output. The application then exits.

Starting the UCSPI super-server:
{{Cmd|prompt=user1 $ |s6-ipcserver test-socket ./test-server &|ls -l test-socket|
output=<pre>srwxrwxrwx 1 user1 user1 0 Aug  4 12:00 test-socket</pre>}}

This shows that a socket named {{Path|test-socket}} has been created in the current working directory. Starting a UCSPI client to connect to the socket three times:
{{Cmd|prompt=user1 $ |s6-ipcclient test-socket ./test-client|
output=<pre>Connecting to server...
Server process created with PID 1992, client is "user1"</pre>}}

{{Cmd|prompt=user1 $ |s6-ipcclient test-socket ./test-client|
output=<pre>Connecting to server...
Server process created with PID 1994, client is "user1"</pre>}}

{{Cmd|prompt=user1 $ |s6-ipcclient test-socket ./test-client|
output=<pre>Connecting to server...
Server process created with PID 1996, client is "user1"</pre>}}

{{Cmd|prompt=user1 $ |ps f -o pid,ppid,args|
output=<pre> PID  PPID COMMAND
...
1977  1974 \_ bash
1985  1977     \_ s6-ipcserverd -- ./test-server
1992  1985         \_ ./test-server
1994  1985         \_ ./test-server
1996  1985         \_ ./test-server
...</pre>}}

This shows that the super-server spawned three {{C|test-server}} processes to handle each connection, and set the <var>IPCREMOTEEUID</var> environment variable to user1's user ID. <kbd>s6-ipcserver test-socket ./test-server</kbd> is equivalent to <kbd>s6-ipcserver-socketbinder test-socket s6-ipcserverd ./test-server</kbd>, but shorter. Starting a UCSPI client with effective user ''user2'':
{{Cmd|prompt=user2 $ |s6-ipcclient test-socket ./test-client|
output=<pre>Connecting to server...
Server process created with PID 2009, client is "user2"</pre>}}

This shows that the super-server set the <var>IPCREMOTEEUID</var> environment variable to user2's user ID. Starting the super-server with the <code>-P</code> option, and a client to connect to {{Path|test-socket}}:
{{Cmd|prompt=user1 $ |s6-ipcserver -P test-socket ./test-server &|s6-ipcclient test-socket ./test-client|
output=<pre>Connecting to server...
Server process created with PID 2021, client is "<unavailable>"</pre>}}

<kbd>s6-ipcserver -P test-socket ./test-server</kbd> is equivalent to <kbd>s6-ipcserver-socketbinder test-socket s6-ipcserverd -P ./test-server</kbd>, but shorter. This shows that since credentials lookup was disabled, environment variable <var>IPCREMOTEEUID</var> is unset, and {{C|test-server}} displays "&lt;unavailable&gt;" in place of a username.

== References ==

{{reflist}}

[[Category:s6]]
