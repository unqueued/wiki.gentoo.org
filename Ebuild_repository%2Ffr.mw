<languages />
'''Un arbre alternatif (parfois appelé ''surcouche'') est un dépôt additionnel que Portage prend en compte lorsqu'il s'occupe des logiciels'''.

Au cœur de Gentoo, les utilisateurs disposent déjà d'un dépôt des paquets ''principal'', appelé ''arbre de Portage''. Ce dépôt principal contient tous les paquets logiciels (encore nommés [[Ebuild|ebuilds]]) qui sont maintenus par les développeurs de Gentoo. Les utilisateurs peuvent cependant disposer de dépôts qui, en s'y ajoutant,  constitue une alternative  à l'arbre de Portage d'où leur nom d'arbres alternatifs.

Comme les dépôts de paquets ne sont rien de plus (ou de moins) que des jeux de fichiers (ebuilds, fichiers de méta-données, entrées de journaux de modifications -changelogs-, etc...), ces dépôts peuvent être tirés de dépôts publics(git, cvs, svn...) ou téléchargés en tant qu'archives tar et désarchivés à la main sur le système. Il est cependant recommandé d'utiliser des dépôts gérés par des tiers '' de confiance'' car tout arbre alternatif installé sera analysé par Portage au moment de décider quel logiciel installer.

== Traitement des arbres alternatifs ==

Portage utilise la variable <code>PORTDIR_OVERLAY</code>  pour établir un lien avec les arbres alternatifs installés sur le système. Cette variable utilise une liste de chemins sur le système, séparés par une espace, où Portage peut trouver la racine de ces dépôts additionnels.

=== Définir l'emplacement des arbres alternatifs à la main ===

Lorsque vous voulez créer vous-même un arbre alternatif, créez un emplacement (par exemple {{Path|/home/user/overlay}}) dans lequel vous placerez les paquets dans lesquels vous voulez que Portage regarde en plus de l'arbre de Portage lui-même. Ensuite, ajoutez <code>PORTDIR_OVERLAY="/home/user/overlay"</code> à votre fichier {{Path|/etc/portage/make.conf}} :

{{File|/etc/portage/make.conf|Ajout manuel d'un arbre alternatif|<pre>
PORTDIR_OVERLAY="/home/user/overlay"
</pre>}}

=== Utilisation de  crossdev ===

[[crossdev]] placera automatiquement les ebuilds/categories qu'il génère dans le premier arbre alternatif trouvé dans <code>PORTDIR_OVERLAY</code>. Vous voudrez peut-être empêcher [[crossdev]] de perturber les arbres alternatifs de  [[layman]] out votre arbre alternatif personnel par machine (créé normalement dans {{Path|/usr/local/portage}}). Vous pouvez créer un arbre alternatif spécifiquement réservé à [[crossdev]]:

{{RootCmd|mkdir -p /usr/local/portage-crossdev/profiles
|echo local-crossdev > /usr/local/portage-crossdev/profiles/repo_name}}

Then you can instruct portage and crossdev to use this overlay:

{{File|/etc/portage/make.conf|Let crossdev to store its ebuild in local-crossdev and indicate that the local overlay should override every other overlay|<pre>
source /var/lib/layman/make.conf
PORTDIR_OVERLAY="/usr/local/portage-crossdev ${PORTDIR_OVERLAY} /usr/local/portage"
</pre>}}

{{File|/etc/portage/make.conf|Prevent crossdev from messing with your local overlay when not using layman|<pre>
PORTDIR_OVERLAY="/usr/local/portage-crossdev /usr/local/portage"
</pre>}}

=== Using layman ===

To make management of multiple overlays simple, a tool called [[Layman|layman]] is developed. This tool knows about popular user- and developer managed overlays and is able to install & synchronize them as well as add them to the <code>PORTDIR_OVERLAY</code> location.

=== Local overlay ===

For instructions on setting up a local overlay, see [[Overlay/Local_overlay]].

=== Overlay priorities ===

Each overlay has its unique priority. This makes sure that in the case of a specific version being found in several overlays, the resolution is unambiguous. Ebuilds from overlays with higher priorities take precedence over ebuilds from overlays with lower priorities.

{{Note|This "natural" way of priority handling was introduced in January 2011, before that the priority resolution order was reversed, so negative numbers used to stand for high priorities}}

The list of overlays with their priorities can be obtained through the output of the following command

{{Cmd|emerge --info --verbose}}

Unless the <code>PORTDIR_OVERLAY</code> variable has been modified as described [[#Setting overlay priorities|below]], the default gentoo portage tree will have a priority of -1000. That means that all other overlays take precedence. That is the default behavior, because overlays are designed to "lay over/on top" of the portage tree.

==== Setting overlay priorities ====

The overlay priority is calculated from the order of overlay entries in the <code>PORTDIR_OVERLAY</code> variable. Portage "walks" through the variable from left to right and increments the priority on the way. The leftmost entry starts with a priority of 1, the next entry has a priority of 2 and so on.

{{Note|Some time ago the overlay priority could be set in {{Path|/etc/portage/repos.conf}}. This does not work anymore}}

Unless the <code>PORTDIR_OVERLAY</code> contains the portage tree entry, the portage tree will always be assigned a priority of -1000.
This can be easily changed by putting <code>PORTDIR</code> in the <code>PORTDIR_OVERLAY</code> variable:

{{File|/etc/portage/make.conf|Manual portage tree priority setting|<pre>
PORTDIR_OVERLAY="/home/user/overlay ${PORTDIR}"
</pre>}}

In the example above the user overlay will be assigned a priority of 1 and the portage tree will be assigned a priority of 2. 

{{Note|If you also use [[Layman|layman]] to manage your overlays, you may be interested in the article about [[Layman#Setting overlay priorities with layman|setting overlay priorities with layman]].}}

=== Using unsafe overlays ===

When using huge overlays or those with unknown/low quality it is best practice to hardmask the whole overlay.

{{File|/etc/portage/package.mask|Mask all packages in an overlay|<pre>
*/*::overlay-name
</pre>}}

After that you can unmask the packages you specifically want to emerge.

{{File|/etc/portage/package.unmask|Unmask a specific package in an overlay|<pre>
foo/bar::overlay-name
</pre>}}

This way nothing weird will happen on updates and it is safer than using priorities.

== Metadata cache ==

=== Cache generation ===

When large overlays are installed, portage may take a long time to perform operations like dependency resolution. This is because overlays do not usually contain a metadata cache.

You may generate a local metadata cache by running <code>emerge --regen</code> after syncing your overlays.

{{RootCmd|layman -S
|emerge --regen}}

=== eix integration ===

==== eix-sync ====

eix-sync can run <code>emerge --regen</code> after syncing your overlays and portage tree.

{{File|/etc/eix-sync.conf||<pre>
# Sync all overlays
*
  
# Regenerate overlay metadata
@emerge --regen || true
</pre>}}

==== eix-update ====

eix-update can utilize the metadata cache generated by <code>emerge --regen</code> for a speedup and better accuracy. To enable this, set the <code>OVERLAY_CACHE_METHOD</code> to "<code>assign</code>" in {{Path|/etc/eixrc/01-cache}}.

{{File|/etc/eixrc/01-cache|Setting OVERLAY_CACHE_METHOD|<pre>
OVERLAY_CACHE_METHOD="assign"
</pre>}}


[[Category:Portage]]
