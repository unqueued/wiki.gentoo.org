<languages />

<div class="mw-translate-fuzzy">
{{Metadata|abstract=Este artigo descreve as etapas de atualização para um novo kernel.}}
</div>

<div class="mw-translate-fuzzy">
Este artigo descreve as etapas para atualizar para um novo [[kernel]].
</div>

<div class="mw-translate-fuzzy">
== Instalando e usando um novo kernel ==
</div>

Uma atualização do kernel pode ser uma boa ideia quando novas sources do kernel forem instaladas. Novas sources do kernel são às vezes instaladas durante a atualização do sistema, executando o seguinte comando:

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse @world}}

<div class="mw-translate-fuzzy">
Claro, eles podem ser instalados diretamente usando o comando. (substitua ''gentoo-sources'' por ''hardened-sources'' caso utilize o perfil hardened):
</div>

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse sys-kernel/gentoo-sources}}

A instalação de novas sources do kernel não fornece ao usuário um novo kernel. É necessário compilar um novo kernel a partir das novas sources e, em seguida, reiniciar o sistema para realmente executar o novo kernel.

Fazer um novo kernel a partir das novas sources é basicamente o mesmo processo de quando instalou o sistema. A diferença é que pode utilizar a configuração do kernel antigo para criar uma configuração para o kernel novo. Usando a configuração antiga salva o usuário de passar por todas as opções do kernel (like {{c|make menuconfig}}) novamente.

<div class="mw-translate-fuzzy">
A configuração do kernel é salva em um arquivo chamado {{Path|.config}} No diretório que contém as sources do kernel. Um novo kernel pode ter opções ou recursos que o kernel antigo não possui, ou pode não ter mais um recurso ou opção que o kernel antigo ainda possua. A configuração do kernel especifica se os recursos e opções de um kernel devem ser ativados ou não, talvez incorporados ao kernel, ou talvez construídos como módulos que podem ser carregados no kernel em execução sob demanda. Assim, o arquivo de configuração do novo kernel pode ter novas entradas que o arquivo de configuração do kernel antigo não possui e pode não ter mais entradas que estejam presentes no arquivo de configuração do kernel antigo.
</div>

Para lidar com essas alterações do arquivo de configuração, o arquivo de configuração do kernel antigo precisa ser convertido em uma configuração que pode ser usada com o novo kernel. Este artigo mostra como fazer um novo kernel a partir de novas sources do kernel com a conversão do arquivo de configuração do kernel antigo.

<div class="mw-translate-fuzzy">
== Fazer um backup da configuração atual do kernel ==
</div>

É aconselhável fazer um backup da configuração do kernel para que as configurações anteriores não sejam perdidas. Afinal, muitos usuários dedicam um tempo considerável para descobrir a melhor configuração para o sistema, e perder essa informação é definitivamente desagradável.

É fácil fazer um backup da configuração atual do kernel:

<div class="mw-translate-fuzzy">
{{RootCmd|cd /usr/src/linux
|cp .config ~/kernel-config-`uname -r`|}}
</div>

Desde que o symlink para as sources do kernel tenha sido definido corretamente, isso copia a configuração do kernel atualmente usado para o diretório home do root, renomeando a configuração para {{Path|kernel-config-}} seguido pela versão do kernel atual em execução.

== Configuration ==

<div class="mw-translate-fuzzy">
== Definir symlink para novas sources do kernel ==
</div>

O symlink {{Path|/usr/src/linux}} deve sempre apontar para o diretório que contém as sources do kernel que atualmente é executado. Isso pode ser feito de três maneiras:

# Instalando as sources do kernel com <code>USE="symlink"</code>
# Configurando o link com eselect
# Atualização manual do link simbólico

<div class="mw-translate-fuzzy">
=== Instalando as fontes do kernel com o USE flag symlink ===
</div>

Isso fará com que o {{Path|/usr/src/linux}} aponte para as fontes do kernel recém-instaladas.

Se necessário, ele ainda pode ser modificado posteriormente com um dos outros dois métodos.

<div class="mw-translate-fuzzy">
=== Configurando o link com eselect ===
</div>

Para definir symlink com {{c|eselect}}:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

Isso fornece as sources de kernel disponíveis. O asterisco indica as sources escolhidas.

Para alterar as sources do kernel, e.g. Para a segunda entrada, faça:

{{RootCmd|eselect kernel set 2}}

<div class="mw-translate-fuzzy">
=== Atualização manual do link simbólico ===
</div>

Para definir o link simbólico manualmente:

<div class="mw-translate-fuzzy">
{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}
</div>

==== Moving to the new folder ====

Now that the symbolic link has been modified, change the working directory to the new kernel folder.

{{RootCmd|cd /usr/src/linux}}

{{Note|This command is still necessary even if the working directory was already {{Path|/usr/src/linux}} when the symlink was modified. Until the new symlink is actually followed, the console will still be in the ''old'' kernel's directory.}}

<div class="mw-translate-fuzzy">
== Copiar a configuração anterior do kernel ==
</div>

<div class="mw-translate-fuzzy">
A configuração do kernel antigo precisa ser copiada para o novo. Pode ser encontrado em vários lugares:
</div>

<div class="mw-translate-fuzzy">
* Em [[procfs]], se a opção do kernel ''Habilitar acesso ao .config através de /proc/config.gz'' foi ativada no kernel presente:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}
</div>

* Do kernel antigo. Isso só funcionará se o kernel antigo tiver sido compilado com CONFIG_IKCONFIG:
: {{RootCmd|/usr/src/linux/scripts/extract-ikconfig /path/to/old/kernel >/usr/src/linux/.config}}

* No diretório {{Path|/boot}}, se a configuração foi instalada lá:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* No diretório do kernel atualmente em execução:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

* No diretório {{Path|/etc/kernels/}}, embora <code>SAVE_CONFIG="yes"</code> é definido em {{Path|/etc/genkernel.conf}} e {{c|[[genkernel]]}} for utilizado anteriormente:
: {{RootCmd|cp /etc/kernels/kernel-config-x86_64-3.14.14-gentoo /usr/src/linux/.config}}

<div class="mw-translate-fuzzy">
== Configurando o novo kernel ==
</div>

Para usar a configuração do kernel antigo com o novo kernel, ele precisa ser convertido.  A conversão pode ser feita executando {{c|make silentoldconfig}} ou {{c|make olddefconfig}}. Use um ou outro, não ambos.

<div class="mw-translate-fuzzy">
=== make silentoldconfig ===
</div>

{{Important|{{c|make silentoldconfig}} is being removed as of linux version 4.19, it will be replaced by {{c|make syncconfig}}.}}

A configuração a seguir é como a configuração baseada em texto com {{c|make config}}.  Para novas opções de configuração, o usuário é solicitado a tomar uma decisão. Por exemplo:

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

A string ''(NEW)'' no final da linha está marcado a opção como nova. Da esquerda para a direita, em colchetes, são as possíveis respostas: ''S''im, ''N''ão, ''M''ódulos ou ''?'' para mostrar a ajuda. É recomendado (i.e. padrão) a resposta capitalizada (aqui é ''S''). A ajuda esclarece a opção ou driver.

Infelizmente {{c|make silentoldconfig}} não mostra muito mais informações para cada opção, como o contexto, por isso às vezes é difícil dar a resposta certa. Neste caso, o melhor caminho a seguir é lembrar o nome da opção e revê-lo depois através de uma das [[Kernel/Configuration#Configuration tools|graphical kernel ferramentas de configuração do kernel]].

<div class="mw-translate-fuzzy">
=== make olddefconfig ===
</div>

Todas as novas opções de configuração devem ser definidas (i.e. padrão) usando {{c|make olddefconfig}}:

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

<div class="mw-translate-fuzzy">
=== make help ===
</div>

Use {{c|make help}} para ver outros métodos de conversão disponíveis:

{{RootCmd|make help}}

== Compilação ==

<div class="mw-translate-fuzzy">
{{Important|Quando módulos externos do kernel são instalados (como nvidia ou zfs), pode ser necessário executar {{c|make modules_prepare}} como descrito [[Kernel/Upgrade#Reinstall external kernel modules|abaixo]] antes de compilar o kernel. Alguns módulos não podem ser instalados ou preparados antes que o kernel tenha sido construído.}}
</div>

{{Important|Não esqueça de reconfigurar o [[Bootloader|bootloader]] para os novos arquivos do kernel, e reconstruir o initramfs caso seja utilizado.}}

Nesta etapa, siga o procedimento deste artigo: [[Kernel/Configuration#Build|configuração manual]].

=== Automated build and installation ===

It is possible to automatically build and install the newly emerged kernel using Portage hooks. While other approaches are also possible, the following is based on genkernel and gentoo-sources package. It requires the following prerequisites:

# {{c|genkernel all}} is able to build and install the kernel to which the {{Path|/usr/src/linux}} symlink points into <code>$BOOTDIR</code> and the bootloader.
# The <code>symlink</code> use flag is set for the kernel ebuild.

If those are fulfilled, simply install a <code>post_pkg_postinst</code> Portage hook as shown below.

{{FileBox|title=Automated kernel build and installation portage hook|filename=/etc/portage/env/sys-kernel/gentoo-sources|lang=bash|1=post_pkg_postinst() {
	CURRENT_KV=$(uname -r)
	# Check to see if genkernel has been run previously for the running kernel and use that config
	if [[ -f "${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" ]] ; then
		genkernel --kernel-config="${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" all
	elif [[ -f "${EROOT}/usr/src/linux-${CURRENT_KV}/.config" ]] ; then # Use latest kernel config from current kernel
		genkernel --kernel-config="${EROOT}/usr/src/linux-${CURRENT_KV}/.config" all
	elif [[ -f /proc/config.gz ]] ; then # Use known running good kernel
		zcat /proc/config.gz >> "${EROOT}/tmp/genkernel.config"
		genkernel --kernel-config="${EROOT}/tmp/genkernel.config" all
		rm "${EROOT}/tmp/genkernel.config"
	else # No valid configs known
		genkernel all
	fi
}
}}

<div class="mw-translate-fuzzy">
== Reinstalando módulos externos do kernel ==
</div>

{{Note|The modules_prepare step is not required if building an entire kernel as this function is done as part of the standard process.}}

Qualquer módulo externo do kernel, como [[:Category:Binary kernel modules|módulos binários do kernel]], precisam ser reconstruídos em cada novo kernel. Se o kernel ainda não foi construído, ele deve primeiro ser preparado para a construção dos módulos externos do kernel:

{{RootCmd|make modules_prepare}}

Os pacotes que contêm módulos do kernel podem ser reconstruídos com <code>@module-rebuild</code>

{{Emerge|@module-rebuild}}

<div class="mw-translate-fuzzy">
== Solução de problemas de compilação ==
</div>

Ao presenciar problemas de compilação durante a reconstrução do kernel atual, uma ajuda seria a limpeza das sources do kernel. Certifique-se de fazer backup do arquivo {{Path|.config}}, pois a operação irá removê-lo. Certifique-se de não usar {{Path|.bak}} ou {{Path|~}} de sufixo no backup pois {{c|make distclean}} irá limpar também.

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

<div class="mw-translate-fuzzy">
== Removendo kernel antigo ==
</div>

Veja em [[Kernel/Removal|remoção do kernel]]. 

== See also ==

* {{See also|Genkernel}}

== Recursos externos ==

<div class="mw-translate-fuzzy">
* [http://kernelnewbies.org/LinuxChanges kernel changelog com algumas explicações de novos recursos]
</div>

[[Category:Kernel]]
