<languages />


Diese Seite gibt eine Einführung in Java und erklärt die Nutzung von Java unter Gentoo.

Diese Seite gibt eine Einführung in Java und erklärt die Nutzung von Java unter Gentoo.

== Was ist Java? ==

=== Übersicht ===

Java ist eine Programmiersprache die von Sun Microsystems entwickelt wurde. Die Sprache ist objektorientiert. Javaprogramme sind auf verschiedenen Platformen lauffähig, ohne das sie neu kompiliert werden müssen. Es ist zwar möglich Javacode für spezielle Platformen zu kompilieren, aber gerade die Portabilität ist, neben etwa dem Garbage Collector, ein Grund für Javas Popularität. Um die Platformunabhängigkeit zu gewährleisten, erstellt der Javacompiler sogenannten "Java Bytecode". Dies ist eine Zwischenstufe zwischen Quelltext und ausführbarem Binärformat. Dieser Bytecode wird nicht direkt sondern in einer Java Laufzeitumgebung (JRE) ausgeführt. 

Um Java Bytecode auszuführen, muss eine Java Laufzeitumgebung (JRE) installiert sein. Sie stellt die nötigen Bibliotheken sowie die platformabhängige Java Virtual Machine (JVM) bereit. Ein Java Development Kit (JDK) enthält zusätzliche Entwicklungswerkzeuge, etwa einen Java Bytecode Compiler und einen Debugger. 

==Eine virtuelle Maschine installieren ==

=== Die Auswahl ===

Gentoo bietet viele verschiedene Laufzeitumgebungen (JREs) und Development Kits (JDKs) an. Unter anderem sind dies: 

{| class="wikitable" style="text-align: left;" 
|- 
! Anbieter
! JDK
! JRE
|- 
| IcedTea Open Java SE (früher icedtea6-bin)
| dev-java/icedtea-bin
| 
|- 
| Oracle Java 7 SE
| dev-java/oracle-jdk-bin
| dev-java/oracle-jre-bin
|- 
| Sun Java 6 SE (maskiert, inaktiv nach der Übernahme von Sun durch Oracle)
| dev-java/sun-jdk
| dev-java/sun-jre-bin
|- 
| IBM Java SE
| dev-java/ibm-jdk-bin
| dev-java/ibm-jre-bin
|-
|}

=== Eine JRE/JDK installieren ===

Um das im aktuellen Profil als Standard gesetzte JDK zu installieren, reicht es <code> emerge virtual/jdk </code> auszuführen. Für die JRE entsprechend <code>emerge virtual/jre</code>. 

Einige JDKs und JREs, z.B. die Packete von Sun, besitzen spezielle Lizenzen. Ohne diese, z.B. dlj-1.1, explizit via ACCEPT_LICENSE in {{Path|/etc/portage/make.conf}} zu akzeptieren, können die entsprechenden Packete nicht installiert werden. Informationen wie eine Lizenz in {{Path|make.conf}} akzeptiert werden kann, befinden sich im [http://www.gentoo.org//doc/de/handbook/handbook-x86.xml?part=2&chap=1#doc_chap4 Portage Handbuch] 

Um Schwierigkeiten mit Lizenzen zu vermeiden, kann auf <code>icedtea-bin</code> zurückgegriffen werden. Dies ist eine freie Java Implementierung aus dem OpenJDK Projekt. 

{{Note|Ein JDK beinhaltet stets auch eine JRE, es ist also nicht notwendig neben einem JDK eine JRE zu installieren.}}

=== Installation von "fetch-restricted" virtuellen Maschinen ===

Einige JDKs und JREs benötigen einige extra Schritte vor der Installation. <code>emerge</code> weist beim ersten Installationsversuch darauf hin. 

In den ebuild-Dateien oder in der Ausgabe von emerge finden sich Informationen wo die benötigten Dateien manuell heruntergeladen werden können. Diese müssen, wie angegeben, in {{Path|/usr/portage/distfiles}} abgelegt werden. Danach kann die Installation wie üblich via emerge durchgeführt werden. 

== Die virtuelle Maschine konfigurieren ==

=== Übersicht ===

Gentoo bietet die Möglichkeit mehrere JDKs oder JREs parallel zu benutzen. 

Mit <code>java-config</code>, können die systemweiten Einstellungen geändert werden. Dazu sind natürlich Root-Rechte nötig. <code>java-config</code> kann aber auch als einfacher Benutzer verwendet werden um die eigenen Einstellungen anzupassen. 

{{Note|Die System- oder Benutzer-Einstellungen können auch via ''eselect'' gesetzt werden. Siehe <code>eselect java-vm help</code>.}}

=== Setzen der Standard virtuellen Maschine ===

Mit dem Kommando <code>java-config --list-available-vms</code> erhält man eine Liste aller auf dem System installierten JDKs und JREs. Eine Beispielausgabe ist: 

{{RootCmd|java-config --list-available-vms|output=<pre>
The following VMs are available for generation-2:
1)      IcedTea-bin 1.10.4 [icedtea-bin]
2)      Sun JDK 1.5.0.20 [sun-jdk-1.5] (Build Only)
*)      Sun JDK 1.6.0.16 [sun-jdk-1.6]
</pre>
}}


{{Note|Virtuelle Machinen die als "Build Only" markiert sind können Sicherheitslücken enthalten oder nicht mehr aktiv betreut sein. Es ist empfehlenswert diese weder als System- noch als Benutzer-VM zu setzen.}}

Der ''*'' markiert die aktuelle VM (Systemweit oder für den Benutzer, falls gesetzt). Der Name in eckigen Klammern ist das Handle der entsprechenden VM. Mit <code>java-config --set-system-vm</code> und dem Handle oder der ID kann die aktuelle VM gesetzt werden. Hier ist ein Beispiel: 

Setzen der System-VM via Handle (bevorzugte Methode):

{{RootCmd|java-config --set-system-vm sun-jdk-1.6|output=<pre>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>}}

Alternativ kann die VM durch die ID gewählt werden:

{{RootCmd|java-config --set-system-vm 3|output=<pre>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>
}}

Als normaler Benutzer, kann <code>java-config --set-user-vm</code> verwendet werden. 

{{Note|Es ist nicht länger nötig <code>source</code> zu verwenden um die Äderungen der System-/Nutzer-VM wirksam zu machen.}}

=== Build-Only-VM ===

Einige virtuelle Machinen sind als "build-only" markiert. Dies kann an bekannten Sicherheitslücken oder an der fehlenden aktiven Betreuung des Projekts liegen. Diese VMs werden von Gentoo nicht automatisch zum Ausführen von Anwendungen benutzt. Trotzdem sind sie noch verfügbar, da sie von einigen Packete beim komplieren benötigt werden. Vom Setzen solcher VMs als aktive System- oder Nutzer-VM wird dringend abgeraten. Andernfalls werden diese VMs bei der Ausführung von {{Path|/usr/bin/{java,javac,..}}} oder von Packeten die nicht die Gentoo Startskripte benutzen verwendet. 

=== Bevorzugte Build-VM ===

Beim Bauen von Java-Packeten, kann die verwendete VM von der als System-VM gesetzten abweichen. 

Das kann zum Beispiel erforderlich sein, wenn die System-VM Version 1.6 hat und die benötigte VM-Version jedoch 1.5 ist. Während des Bauens wird eine passende Version-1.5 VM gesetzt, ohne die Einstellung der System-VM zu beeinflussen. 

Zur Auswahl einer passenden VM existiert (pro Architektur) eine unter {{Path|/usr/share/java-config-2/config/jdk-defaults.conf}} eine Liste mit Standardeinstellungen. 

Diese Standards (und auch die System-VM) können in  {{Path|/etc/java-config-2/build/jdk.conf}} überschrieben werden. Auf diese Weise lässt sich detailliert steuern welche VM beim Bau von Packeten benutzt wird.

Um beispielsweise stets <code>sun-jdk</code> zu verwenden:

{{File|/etc/java-config-2/build/jdk.conf|Requiring sun-jdk|<pre>
*=sun-jdk
</pre>
}}

Oder, um <code>sun-jdk-1.5</code> soweit wie möglich zu verwenden, es sei denn Version 1.4 oder 1.3 wird benötigt:

{{File|/etc/java-config-2/build/jdk.conf|Requiring sun-jdk-1.5 for 1.5 VMs|<pre>
*=sun-jdk-1.5
</pre>
}}

Oder, um VMs verschiedener Anbieter zu nutzen. Etwa <code>sun-jdk-1.4</code>, falls eine 1.3 (sic!) VM benötigt wird, in allen anderen Fällen jedoch <code>ibm-jdk-bin</code> verwenden:

{{File|/etc/java-config-2/build/jdk.conf|Using multiple expressions|<pre>
1.3=sun-jdk-1.4 ibm-jdk-bin
1.5=sun-jdk
</pre>
}}


{{Warning| Es ist nicht zwingend erforderlich die Standardeinstellungen anzupassen. Falls in den Optionen eine nicht-unterstützte VM gesetzt wird, kann die Funktionsfähigkeit des Systems beeinträchtigt sein. Wegen der Vielzahl der verfügbaren VMs ist nicht jedes Packet mit jeder VM getestet. Bugs bzgl. nicht-unterstützter VMs haben eine niederige Priorität als solche mit Bezug auf unterstützte VMs.}}

== Compiler ==

Der Standard Java Compiler ist <code>javac</code>. Er ist in jedem JDK enthalten. Neben der Möglichkeit die VM beim Bau zu wählen, besteht auch die Möglichkeit den Compiler festzulegen. Im Wesentlichen wird schlicht eine Liste der gewünschten Compiler in {{Path|/etc/java-config-2/build/compilers.conf}} angegeben. 

{{File|/etc/java-config-2/build/compilers.conf|Setting compiler preferences|<pre>
COMPILERS="ecj-X.Y jikes javac"
</pre>
}}

Einige Compiler unterstützen nicht alle -target und -source Argumente. Daher wird die Liste der bevorzugten Compiler durchgegangen bis ein Passender gefunden wurde. Falls kein passender Compiler in der Liste ist, wird javac verwendet. Dieser funktioniert in jedem Fall. 

Die folgende Tabelle enthält eine kurze Beschreibung einiger Compiler: 

{| class="wikitable" style="text-align: left;" 
|- 
! Name
! Handle
! Packet
! Beschreibung
|- 
| javac
| javac
| N/A
| Dies ist der Standard Compiler. Er ist in jedem JDK enthalten.
|- 
| jikes
| jikes
| dev-java/jikes
| Jikes wurde ursprünglich von IBM entwickelt. was originally developed by IBM. Angeblich ist jikes schneller als javac. In jedem Fall ist jikes jedoch pedantischer. Bestimmter Code der von javac akzeptiert wird, wird von jikes nicht übersetzt. Außerdem gibt es noch keine Unterstützung für die Java 1.5 Syntax.
|- 
| Eclipse Compiler for Java
| ecj
| dev-java/eclipse-ecj
| ECJ ist der im Eclipse Software Development Kit enthaltene Compiler. Er unterstüzt viele Features und ist ziemlich schnell. Ebenso wird Java 1.5 unterstüzt.
|-
|}

== Setzen des standard Klassenpfads, CLASSPATH ==

{{Warning|Die Optionen in diesem Abschnitt sind veraltet und werden in Zukunft nicht mehr unterstützt. Es wird daher dringend davon abgeraten sie zu benutzen. Java-Projekte verwalten idealerweise ihren Klassenpfad selbst. Wenn explizit ein Klassenpfad via CLASSPATH gesetzt wird, können einige Anwendungen eventuell fehlerhaft ausgeführt werden. Etwa weil sich im Klassenpfad plötzlich Klassen befinden die die Anwendung dort nicht erwartet hat.}}

<code>java-config</code> kann benutzt werden um einen systemweiten oder benutzerspezifischen Klassenpfad zu setzten. 

First, you will want to list available Java libraries installed on your system that might want to be put in your CLASSPATH. Here is an example of output: 

{{RootCmd|java-config --list-available-packages|output=<pre>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>
}}

Again, the names in brackets (''[]'') are the IDs that you have to pass to <code>java-config --set-system-classpath</code>. Here is an example: 


{{RootCmd|java-config --set-system-classpath log4j,xerces-2}}

{{Note|The current directory ({{Path|.}}) will not be part of the system classpath, as that should be added in your system's login profile.}}

You will have to update your environment by logging out, then in again or sourcing {{Path|/etc/profile}}. 

For users, <code>java-config --set-user-classpath</code> will create {{Path|~/.gentoo/java-env-classpath}}, which you should then source from your shell's profile. 

{{Code|Sourcing user specific classpath|<pre>
if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
       source ${HOME}/.gentoo/java-env-classpath
fi
</pre>
}}

If you really want a system wide or user default classpath you can add something like the following to your shell's profile. But we would advise against it. 

{{RootCmd|export CLASSPATH{{=}}"${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"}}

== Java Browser Plugins ==

=== Installing a plugin ===

You can install a Java plugin for your web browser by emerging a Java VM with the <code>nsplugin</code> USE flag set.

{{Note|<code>nsplugin</code> is not available for all architectures. Check for available plugins on your arch before trying to install a VM by running<code>emerge -pv <java-vm></code>.}}

Portage will allow you to install multiple versions of Java plugins, though only one will be used by your browser. You can check the list of available plugins by running: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6
   [2]   icedtea-bin
</pre>
}}

In this example, <code>sun-jre-bin</code> is selected for the browser plugin. 

{{RootCmd|eselect java-nsplugin set sun-jre-bin-1.6}}

Verify that the correct plugin was selected: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6  current
   [2]   icedtea-bin
</pre>
}}

Java.com also provides a link to [http://java.com/en/download/installed.jsp verify your installed plugin]. Additionally, if you are using a Mozilla-based browser, you can verify your Java plugin by typing <code>about:plugins</code> into the address bar. 

=== Plugins on multilib systems ===

If you are running a mixed 64-bit and 32-bit multilib system (for example, on AMD64), you can use 64-bit and 32-bit Java plugins. Unless you have a pressing need to run 32-bit Java applications, we recommend using native 64-bit plugins on 64-bit web browsers. 

There are several native 64-bit browser plugins available. The default JDK/JRE pair, <code>sun-jdk</code> and <code>sun-jre-bin</code>, both include browser plugins. Just emerge one of them with the <code>nsplugin</code> USE flag enabled. 

{{RootCmd|echo "dev-java/sun-jre-bin nsplugin" >> /etc/portage/package.use
|emerge sun-jre-bin}}

To use a 32-bit plugin on a 32-bit browser, you will need to emerge <code>emul-linux-x86-java</code> with the <code>nsplugin</code> USE flag enabled. 

{{RootCmd|echo "app-emulation/emul-linux-x86-java nsplugin" >> /etc/portage/package.use
|emerge emul-linux-x86-java}}

Next, check which plugins are available: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6
</pre>
}}

Now select the right plugin for your browsers: 

{{RootCmd|eselect java-nsplugin set 32bit emul-linux-x86-java-1.6
|eselect java-nsplugin set 64bit sun-jre-bin-1.6}}

Verify the correct plugin was selected: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6  current
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6  current
</pre>
}}

== USE flags for use with Java ==

=== Setting USE flags ===

For more information regarding USE flags, refer to the [http://www.gentoo.org//doc/en/handbook/handbook-x86.xml?part=2&chap=2 USE flags] chapter from the Gentoo Handbook. 

=== The flags ===

* The '''java''' flag adds support for Java in a variety of programs
* The '''nsplugin''' flag adds support for Mozilla-like browsers (including Firefox). You will need this for viewing Java applets in your Mozilla-like browser.
* The '''source''' flag installs a zip of the source code of a package. This is traditionally used for IDEs to 'attach' source to the libraries you are using.
* The '''jce''' flag adds support for the Java Cryptography Engine
* For Java packages, the '''doc''' flag will build API documentation using javadoc.

== Additional resources ==

=== Off-line resources ===

* java-config man page
* <code>java-config --help</code>

=== Online resources ===

* The [http://www.gentoo.org/proj/en/java/ Java Project Page] 
* The [http://news.gmane.org/gmane.linux.gentoo.java gentoo-java], [http://news.gmane.org/gmane.linux.gentoo.user gentoo-user], and [http://news.gmane.org/gmane.linux.gentoo.devel gentoo-dev] mailing list archives
* [http://www.gentoo.org/irc://irc.gentoo.org/gentoo #gentoo] and [http://www.gentoo.org/irc://irc.gentoo.org/gentoo-java #gentoo-java] on IRC
* [http://en.wikipedia.org/wiki/Java_programming_language Wikipedia's entry for Java] 
* If you have suggestions or questions regarding this document, please email the Gentoo Java team: {{Mail|java@gentoo.org}}

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Joshua Nichols
* Karl Trygve Kalleberg
* Joshua Saddler
