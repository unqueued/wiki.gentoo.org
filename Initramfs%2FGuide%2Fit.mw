<languages />


{{Metadata|abstract=Più e più sistemi richiedono un initramfs per essere avviati correttamente. In questa guida tratteremo il concetto di initramfs, nonchè come crearlo e gestirlo correttamente.}}

Più e più sistemi richiedono un '''initramfs''' per essere avviati correttamente. In questa guida tratteremo il concetto di initramfs, nonchè come crearlo e gestirlo correttamente.

== Concetti su initramfs ==

=== Introduzione ===

Per molti utenti, un sistema initramfs non è importante. Il loro sistema utilizza uno schema di partizionamento semplice senza drivers o impostazioni particolari (tipo file systems criptati), così il kernel Linux è interamente capace di gestire il controllo del binario {{c|init}} nel loro sistema. Ma per molti sistemi, un initramfs è obbligatorio. 

Il concetto chiave per comprendere cos'è un initramfs (o per cosa è necessario) è di capire come lavora il processo di avvio del Linux, anche in un approccio di alto livello. 

=== Processo di avvio del linux ===

Da quando il kernel Linux ha il controllo sul sistema (dopo essere stato caricato dal boot loader), esso prepara la sua struttura di memoria e i drivers. Esso poi passa il controllo a un'applicazione (generalmente {{c|init}}) il cui compito è quello di preparare ulteriormente il sistema e assicurarsi che, alla fine del processo di avvio, tutti i servizi necessari siano attivi e l'utente sia in grado di accedere. L'applicazione {{c|init}} lo fa lanciando, tra gli altri servizi, il demone {{c|udev}} che caricherà e preparerà ulteriormente il sistema in base ai dispositivi rilevati. Quando {{c|udev}} viene lanciato, tutti i file systems rimanenti che non sono stati montati vengono montati e i restanti servizi vengono avviati. 

Per  i sistemi in cui tutti i necessari files e strumenti risiedono nello stesso file system, l'applicazione {{c|init}} può controllare perfettamente il successivo processo di avvio. Ma quando ci sono multipli file systems (o sono presenti più installazioni), questo potrebbe diventare un pò più complicato. 

* Quando la partizione {{Path|/usr}} è in un file system separato, i tools e i drivers che hanno files memorizzati all'interno di tale partizione {{Path|/usr}} non possono essere utilizzati a meno che {{Path|/usr}} non viene resa disponibile. Non è possibile, quindi, avviare il sistema senza questi necessari tools.

* Se il file system root è criptato, il kernel Linux non sarà in grado di trovare l'applicazione {{c|init}}, risultando un sistema inavviabile.

La soluzione a questo problema è da tempo quella di utilizzare un "initrd" (initial root device). 

=== L'initial root disk ===

L''''initrd''' è una struttura disco in-memory (ramdisk) che contiene i tools e gli script necessari per montare i file systems occorrenti "prima" che il controllo passi all'applicazione {{c|init}} nel file system root. Il kernel Linux avvia lo script setup (generalmente chiamato {{Path|linuxrc}}, ma questo nome non è  obbligatorio) in tale root disk, il quale prepara il sistema, passa al file system radice reale e chiama {{c|init}}. 

Sebbene il metodo initrd era proprio quello necessario, esso aveva alcuni inconvenienti: 

* Si tratta di un dispositivo a blocchi a tutti gli effetti, che richiede il sovraccarico di un intero file system; ha una dimensione fissa. La scelta di un initrd troppo piccolo comporta che tutti gli script necessari non possono essere eseguiti correttamente. Renderlo troppo grande, invece, sprecherà solo memoria.

* Poiché si tratta di un vero e proprio dispositivo statico, esso consuma memoria cache nel kernel Linux ed è attivo nei metodi di gestione dei file in uso (come il paging) e questo rende initrd un consumatore di memoria.

Per risolvere questo problema (che per alcuni forse è fortemente chiamato problema), è stato creato l'initramfs. 

=== L'initial ram file system ===

Un '''initramfs''' ' un initial ram file system situato su "tmpfs" (un file system in memoria leggero e di dimensione flessibile), il quale non utilizza un dispositivo di blocco separato (cosicchè non viene fatta nessuna attività di caching e tutte le attività mensionate prima scompaiono). Proprio come initrd, esso contiene i tools e gli script necessari per montare i file systems prima del binario {{c|init}} nel file system radice reale. Questi tools possono essere strati di astrazione di decrittazione (per i file systems crittografati), gestori di volume logico, software RAID, driver bluetooth situati su file system loader, etc. 

Il contenuto dell'initramfs è realizzato con la creazione di un archivio cpio. {{c|cpio}} è una vecchia (ma testata) soluzione di archivio dei file (e i suoi files di archivio risultanti sono chiamati files cpio). cpio è comparabile all'archiviatore {{c|tar}}. La scelta di {{c|cpio}}, però, è stata fatta perchè è più semplice da implementare (code-wise) e supporta i files di dispositivo che invece non supporta {{c|tar}}. 

Tutti i files, tools, le librerie, le impostazioni di sistema (se applicabili), etc. sono messi all'interno dell'archivio cpio. Questo archivio viene quindi compresso utilizzando l'utilità {{c|gzip}} e memorizzato accanto al kernel Linux. Il boot loader, quindi, lo passerà al kernel Linux all'atto dell'avvio così che il kernel saprà che è necessario un initramfs. 

Una volta individuato, il kernel Linux creerà un file system tmpfs, estrarrà il contenuto dell'archivio su di esso, e lancerà lo script {{Path|init}} collocato nella radice del file system tmpfs. Questo script monterà il file system radice reale (dopo essersi accertato di poterlo montare, per esempio caricando moduli aggiuntivi, preparando la crittografia, etc.) come pure altri file system vitali (ad esempio {{Path|/usr}} e {{Path|/var}}). 

Una volta montati il file system root e gli altri file systems vitali, lo script {{Path|init}} dalla initramfs passerà la radice verso il file system root reale e finalmente chiamerà il binario {{Path|/sbin/init}} in questo sistema per continuare il processo di avvio.

== Creare un initramfs ==

=== Introduzione e configurazione del bootloader ===

Per creare un initramfs è importante conoscere quali drivers addizionali, scripts e tools saranno necessari per avviare il sistema. Per esempio, se viene utilizzato LVM, LVM tools è necessario che sia presente su initramfs. Allo stesso modo, se il software RAID viene utilizzato, l'utilità {{c|mdadm}} sarà richiesta, etc. 

Alcuni strumenti esistono per aiutare gli utenti a creare un initramfs (compreso l'archiviatore {{c|cpio}}) per i loro sistemi. Ma per coloro che cercano totale controllo può pure essere facile creare initramfs personalizzati. 

Una volta creato, la configurazione del bootloader dovrà essere aggiustata per informarlo che dovrà essere utilizzato un initramfs. Per esempio, se l'initramfs è memorizzato come {{Path|/boot/initramfs-3.2.2-gentoo-r5}}, la configurazione in {{Path|/boot/grub/grub.conf}} può essere come la seguente: 

{{FileBox|filename=grub.conf|title=Example entry in grub.conf for booting with an initramfs|1=
title Gentoo Linux 3.2.2-r5
root (hd0,0)
kernel /boot/kernel-3.2.2-gentoo-r5
initrd /boot/initramfs-3.2.2-gentoo-r5
}}

=== Utilizzare genkernel ===

L'utilità di costruzione del kernel di Gentoo, {{c|genkernel}}, può essere usata per generare un initramfs, anche se {{c|genkernel}} non è stato utilizzato per configurare e costruire il kernel. 

Per utilizzare {{c|genkernel}} per generare l'initramfs, è consigliato che tutti i drivers e codici necessari per montare i file systems {{Path|/}} e {{Path|/usr}} siano inclusi nel kernel (non come moduli). Quindi, invocare {{c|genkernel}} come segue: 

{{RootCmd|genkernel --install --no-ramdisk-modules initramfs}}

A seconda del sistema, possono essere necessarie una o più delle seguenti opzioni: 

{| class="table" style="text-align: left;" 
|- 
! Opzione
! Descrizione
|- 
| <code>--disklabel</code>
| Aggiunge il supporto per <code>LABEL=</code> impostandolo in {{Path|/etc/fstab}} 
|- 
| <code>--dmraid</code>
| Aggiunge il supporto per l'hardware RAID contraffatto.
|- 
| <code>--firmware</code>
| Aggiunge il codice firmware rilevato nel sistema.
|- 
| <code>--gpg</code>
| Aggiunge il supporto GnuPG.
|- 
| <code>--iscsi</code>
| Aggiunge il supporto per iSCSI.
|- 
| <code>--luks</code>
| Aggiunge il supporto per i contenitori di crittografia LUKS.
|- 
| <code>--lvm</code>
| Aggiunge il supporto per LVM.
|- 
| <code>--mdadm</code>
| Aggiunge il supporto per il software RAID.
|- 
| <code>--multipath</code>
| Aggiunge il supporto per gli accessi multipli I/O verso un SAN.
|- 
| <code>--zfs</code>
| Aggiunge un supporto ZFS.
|-
|}

Uns volta terminato, il risultante file initramfs sarà memorizzato in {{Path|/boot}}.

=== Utilizzando dracut ===

{{Warning|Al momento di questa scrittura, dracut non è contrassegnato ancora come stabile, e potrebbe essere necessario smascherarlo prima di continuare.}}

L'utilità {{c|dracut}} è creata al solo scopo di gestire i files initramfs. Essa utilizza un approccio altamente modulare su quale supporto deve essere incluso e su quale non deve essere incluso. 

Quando si intalla {{c|dracut}}, fare molta attenzione di includere il supporto per i corretti valori nella variabile <var>DRACUT_MODULES</var>. Questa variabile può essere impostata in {{Path|/etc/portage/make.conf}} ed è utile per includere il supporto per configurazioni specifiche di sistema: 

{{FileBox|filename=make.conf|title=Preparing to install Dracut|lang=bash|1=<pre>
DRACUT_MODULES="dmraid lvm syslog -biosdevname -btrfs -caps -crypt -crypt-gpg
-dmsquash-live -gensplash -iscsi -livenet -mdraid -multipath -nbd -nfs -plymouth
-ssh-client"
</pre>
}}

E' consigliabile impostare (o disimpostare) i moduli necessari. Dopo aver configurato la variabile <var>DRACUT_MODULES</var> in {{Path|/etc/portage/make.conf}}, eseguire {{c|emerge dracut}} per installare l'utilità Dracut. 

Il passo successivo è di configurare {{c|dracut}} editando il file {{Path|/etc/dracut.conf}}. Nella configurazione del file, il quale è ben commentato, al fine di aggiungere il supporto per i moduli necessari.

Una volta configurato, creare un initramfs chiamando {{c|dracut}} come segue: 

{{RootCmd|dracut}}

The resulting image supports generic system boots based on the configuration in {{Path|/etc/dracut.conf}}. It is also possible to generate an initramfs specifically tailored to ''your'' system (which {{c|dracut}} tries to detect the needed tools, drivers, etc. from the existing system). If the modules and drivers are built into the kernel (not as separate modules and references to the firmware), then the <code>--no-kernel</code> option can be added: 

{{RootCmd|dracut --host-only --no-kernel}}

For more information, check out the dracut and dracut.cmdline manual pages:
{{Cmd
|man dracut
|man dracut.cmdline
}}

== See also ==

* [[Initramfs]] on the official Gentoo Wiki.
* [[Dracut]] on the official Gentoo Wiki.

== External resources ==

* The [https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt ramfs-rootfs-initramfs.txt] file within the Linux kernel documentation.


[[Category:Initramfs]]
