{{Warning|This is a work in progress!}}

== About Installation ==

This guide will walk through installing Node.js behind [[Nginx|nginx]] and using [[Monit]] to keep Node instances alive. Since Node.js is a single-process application, we will launch multiple instances of the application and load balance using nginx.

== Installation ==

=== USE flags ===

{{USEflag|package=net-libs/nodejs}}

=== npm ===

Node.js has a [[USE_flag|USE flag]] to include npm, the Node.js package manager. You will need it to install a Node.js application's dependencies, which are defined in a file named <tt>package.json</tt>. You can disable it if you don't need npm, or prefer to only install an alternative, for example, {{Package|sys-apps/yarn}}.

'''If you need a newer version''' like npm 5.6.x, use Node.js 8.9.x (the next LTS release) or later. You can configure which version to pull in by setting keywords, e.g.:
{{FileBox|filename=/etc/portage/package.keywords/nodejs|1=~net-libs/nodejs-8.9.4}}
Also see [[Knowledge_Base:Accepting_a_keyword_for_a_single_package]].

== Web application daemons with nginx and monit ==

=== Packages ===

Node.js typically responds directly to HTTP requests by running a server. Node.js works best with multiple instances running behind a load-balancing gateway, such as nginx.

Use {{Package|app-admin/monit}} for spawning Node.js servers.

{{Emerge|monit nginx nodejs}}

=== Configure Monit ===

{{FileBox|filename=/etc/monit.d/my-app|title=Auto restart NodeJS App|1=
check process mysql with pidfile /var/run/my-app/mysqld.pid
    start program = "/bin/bash -c 'rc-service mysql start'"
    stop program  = "/bin/bash -c 'rc-service mysql stop'"
}}

=== Configure Nginx ===

{{FileBox|filename=/etc/nginx/nginx.conf|title=Nginx Config|1=
http {
    upstream myapp1 {
        least_conn;
        server srv1.example.com;
        server srv2.example.com;
        server srv3.example.com;
    }

    server {
        listen 80;

        location / {
            proxy_pass http://myapp1;
        }
    }
}
}}

== Web application with openrc runscript ==


{{FileBox|filename=/etc/init.d/nodejs-server|title=Sample init.d file for a Node.js daemon|lang=bash|1=
#!/sbin/openrc-run

user{{=}}"nobody"
group{{=}}"nobody"
command{{=}}"/usr/bin/node"
command_chdir{{=}}"/opt/${RC_SVCNAME}"
command_args{{=}}"httpd.js"
command_user{{=}}"${user}:${group}"
pidfile{{=}}"/run/${RC_SVCNAME}.pid"
logfile{{=}}"/var/log/${RC_SVCNAME}.log"

depend() {
	use net
}

start() {
	ebegin "Starting ${RC_SVCNAME}"
	start-stop-daemon --start --quiet \
		--chdir "${command_chdir}" \
		--user "${command_user}" \
		--background \
		--pidfile "${pidfile}" \
		--make-pidfile \
		--stdout "${logfile}" \
		--stderr "${logfile}" \
		--exec ${command} \
		-- ${command_args}
	eend $?
}

stop() {
	ebegin "Stopping ${RC_SVCNAME}"
	start-stop-daemon --stop --quiet \
		--pidfile "${pidfile}" \
		--exec ${command}
	rm -f ${pidfile}
	eend $?
}
}}
