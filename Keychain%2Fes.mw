<languages />

{{Metadata|abstract=Este documento describe cómo utilizar las claves compartidas SSH así como el programa keychain. Asume un conocimiento básico de criptografía de clave pública por parte del lector.}}

Este documento describe cómo usar claves compartidas de SSH
junto con el programa keychain. Asume un conocimiento básico de
criptografía con clave pública.

== Conceptos previos ==

=== Descripción del problema ===

Tener que teclear contraseñas para todos y cada uno de los sistemas es bastante pesado, especialmente si se gestionan muchso sistemas. Algunos administradores podrían echar en falta un guión o trabajo programado que necesita una forma adecuada de utilizar una conexión ssh. De cualquier forma, hay una solución a este problema, que comienza con la autenticación mediante clave pública. 

=== ¿Cómo funciona la autenticación con clave pública? ===

Asumamos que un cliente quiere conectarse al demonio ssh de un servidor. El cliente, en primer lugar, genera un par de claves y le entrega la clave pública al servidor. Después de esto, cada vez que el cliente intente conectarse, el servidor envía un reto cifrado con la clave pública. Solamente el titular de la correspondiente clave privada (el cliente) puede descifrar el reto, así pues, la respuesta correcta conduce a una autenticación exitosa. 

== Cómo utilizar la autenticación de clave pública ==

=== Generar un par de claves ===

El primer paso consiste en crear un par de claves. Para hacer esto, se usa la orden <tt>ssh-keygen</tt>: 

{{Cmd|ssh-keygen}}

Accept the default values, and make sure to enter a strong passphrase.

{{Warning/es|Asegúrese de usar una contraseña robusta, ¡Especialmente si esta clave se usará para autenticar al usuario root!}}

After the generation has ended a private key should be located at {{Path|~/.ssh/id_rsa}} and a public key in {{Path|~/.ssh/id_rsa.pub}}. The public key is now ready to be copied to the remote host.

=== Preparar el servidor ===

The {{Path|~/.ssh/id_rsa.pub}} file needs to be copied over to the server running <tt>sshd</tt>. It has to be added to the {{Path|~/.ssh/authorized_keys}} file that belongs the connecting user on the remote server. After <tt>ssh</tt> access to the server has been granted by infrastructure personnel, the following steps can be used to setup automatic login using a public key on the remote server:

{{Cmd|scp ~/.ssh/id_rsa.pub usuario_del_servidor@servidor:~/miequipo.pub |ssh usuario_del_servidor@servidor "cat ~/miequipo.pub &gt;&gt; ~/.ssh/authorized_keys" |ssh usuario_del_servidor@servidor "cat ~/.ssh/authorized_keys"}}

The output from that last line should show the contents of the {{Path|~/.ssh/authorized_keys}} file. Make sure the output looks correct.

=== Probar la configuración ===

Theoretically, if all went well, and the <tt>sshd</tt> daemon on the server allows it (as this can be configured), <tt>ssh</tt> access without entering a password should now be possible on the server. The private key on the client will still need to be decrypted with the passphrase used previously, but this should not be confused with the password of the user account on the server.

{{Cmd|ssh <server_user>@<server>}}

It should have asked for a passphrase for {{Path|id_rsa}}, and then grant access via <tt>ssh</tt> as the user <code><server_user></code> on the server. If not, login as <code><server_user></code>, and verify that the contents of {{Path|~/.ssh/authorized_keys}} has each entry (which is a public key) on a single line. It is also a good idea to check the sshd configuration to make sure that it allows to use public key authorization when available.

At this point, readers might be thinking, "What's the point, I just replaced one password with another?!" Relax, the next section will show exactly how we can use this to only enter the passphrase once and re-use the (decrypted) key for multiple logins.

== Hacer que la autenticación por clave pública merezca la pena ==

=== Gestión típica de claves con ssh-agent ===

The next step is to decrypt the private key(s) once, and gain the ability to ssh freely, without any passwords. That is exactly what the program <tt>ssh-agent</tt> is for. 

<tt>ssh-agent</tt> is usually started at the beginning of the X session, or from a shell startup script like {{Path|~/.bash_profile}}. It works by creating a unix-socket, and registering the appropriate environment variables so that all subsequent applications can take advantage of its services by connecting to that socket. Clearly, it only makes sense to start it in the parent process of an X session to use the set of decrypted private keys in all subsequent X applications. 

{{Cmd|eval `ssh-agent`}}

{{Note|Este <tt>ssh-agent</tt> mantendrá las claves descifradas hasta que acabe con el proceso. Si desea establecer un límite de tiempo de vida para las claves, se usa el argumento <code>-t</code> tal y como se describe en <tt>man ssh-agent</tt>.}}

When running <tt>ssh-agent</tt>, it should output the PID of the running ssh-agent, and also set a few environment variables, namely <code>SSH_AUTH_SOCK</code> and <code>SSH_AGENT_PID</code>. It should also automatically add {{Path|~/.ssh/id_rsa}} to it's collection and ask the user for the corresponding passphrase. If other private keys exist which need to be added to the running ssh-agent, use the <tt>ssh-add</tt> command: 

{{Cmd|ssh-add algun_fichero_de_claves}}

Now for the magic. With the decrypted private key ready, ssh into a (public key configured) server without entering any passwords: 

{{Cmd|ssh server}}

In order to shut down ssh-agent (and as such require entry of the passphrase again later):

{{Cmd|ssh-agent -k}}

{{Note|It is possible to have multiple <tt>ssh-agent</tt> processes running, especially when configuring it initially took some effort and trials. These processes can be killed like any other process by running <tt>killall ssh-agent</tt>.}}

To get even more convenience from ssh-agent, proceed to the next section on using keychain. Be sure to kill the running ssh-agent as keychain will handle the <tt>ssh-agent</tt> sessions itself.

=== Sacar hasta la última gota de comodidad de ssh-agent ===

Keychain will allow to reuse an ssh-agent between logins, and optionally prompt for passphrases each time the user logs in. Let's emerge it first:

{{Emerge|keychain}}

Assuming that was successful, <tt>keychain</tt> can now be used. Add the following to the {{Path|~/.bash_profile}} file to enable it: 

{{CodeBox|title=Habilitar keychain en .bash_profile|<pre> 
keychain ~/.ssh/ir_dsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>
}}

{{Note|More private keys can be added to the command line as desired. Also, to have it ask for passphrases each time a shell is spawned, add the <code>--clear</code> option.}}

{{Note|When not using bash, check the '''EXAMPLES''' section of <tt>man keychain</tt> for examples of use in other shells. The idea is to get those commands to run each time a shell is used.}}

Now test it. First make sure the ssh-agent processes from the previous section are killed, then start up a new shell, usually by just logging in, or spawning a new terminal. It should prompt for the password for each key specified on the command line. All shells opened after that point should reuse the ssh-agent, allowing to use passwordless ssh connections over and over. 

=== Usar keychain con KDE ===

KDE users, instead of using {{Path|~/.bash_profile}}, can let KDE manage ssh-agent for them. In order to do so, edit {{Path|/etc/kde/startup/agent-startup.sh}}, which is read during KDE's startup, and {{Path|/etc/kde/shutdown/agent-shutdown.sh}}, which is executed during KDE's shutdown. Here is how one could edit those files: 

{{CodeBox|title=Editar /etc/kde/startup/agent-startup.sh|1=
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
}}

{{CodeBox|title=Editar /etc/kde/shutdown/agent-shutdown.sh|1=
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
}}

Now, all that has to be done is launch a terminal of choice, like Konsole, and load the right set of keys to use. For example: 

{{Cmd|keychain ~/.ssh/id_rsa}}

The keys will be remembered until the end of the KDE session (or until the ssh-agent process is killed manually).

== Comentarios finales ==

=== Consideraciones sobre la seguridad ===

Of course, the use of ssh-agent may add a bit of insecurity to the system. If another user would gain access to a running shell, he could login to all of the servers without passwords. As a result, it is a risk to the servers, and users should be sure to consult the local security policy (if any). Be sure to take the appropriate measures to ensure the security of all sessions. 

=== Solución de problemas ===

Most of this should work pretty well, but if problems do come up, then the following items might be of assistance. 

* If connecting without <tt>ssh-agent</tt> does not seem to work, consider using ssh with the arguments <code>-vvv</code> to find out what's happening. Sometimes the server is not configured to use public key authentication, sometimes it is configured to ask for local passwords anyway! If that is the case, try using the <code>-o</code> option with <tt>ssh</tt>, or change the server's {{Path|sshd_config}}.
* If connecting with <tt>ssh-agent</tt> or <tt>keychain</tt> does not seem to work, then it may be that the current shell does not understand the commands used.. Consult the man pages for ssh-agent and keychain for details on working with other shells.

== Recursos externos ==

* [http://www.funtoo.org/Keychain Página oficial del proyecto]
* [http://www.funtoo.org/OpenSSH_Key_Management,_Part_1 Series de artículos de IBM developerWorks] que presentan los conceptos detrás de Keychain


{{Migrated|originalauthors=Eric Brown, Marcelo Goes, nightmorph}}

[[Category:Server and Security]] 
[[Category:SSH]]
