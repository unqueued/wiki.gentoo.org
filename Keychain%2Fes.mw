<languages />

Este documento describe cómo usar claves compartidas de SSH
junto con el programa keychain. Asume un conocimiento básico de
criptografía con clave pública.

== Conceptos previos ==

=== Descripción del problema ===

Así que tiene todas esas hermosas máquinas Gentoo corriendo <c>sshd</c>,
pero supone un pequeño inconveniente tener que escribir constantemente todas esas
claves de acceso, ¿verdad? O tal vez tenga un guión o trabajo programado
que necesita una forma adecuada de utilizar una conexión ssh. De cualquier
manera, hay una solución a este problema, que comienza con la autenticación mediante
clave pública. 

=== ¿Cómo funciona la autenticación con clave pública? ===

Asumamos que tenemos un cliente que quiere conectarse a un servidor
que corre sshd. El cliente, en primer lugar, genera un par de claves y le
entrega la clave pública al servidor. Después de esto, cada vez que el cliente intente
conectarse, el servidor envía un reto cifrado con la clave
pública. Solamente el titular de la correspondiente clave privada (el
cliente) puede descifrar el reto, así pues, como habrá adivinado,
la respuesta correcta conduce a una autenticación exitosa. 

== Cómo utilizar la autenticación de clave pública ==

=== Genere su par de claves ===

El primer paso consiste en crear su par de claves. Para hacer esto,
usaremos la orden <c>ssh-keygen</c> de la siguiente forma: 

{{Cmd|ssh-keygen -t dsa}}

Simplemente acepte los valores por defecto y asegúrese de introducir una
contraseña (passphrase) robusta.

{{Warning|Asegúrese de usar una contraseña robusta, ¡Especialmente si esta clave se usará para autenticar al usuario root!}}

Ahora debería tener una clave privada en {{Path|~/.ssh/id_dsa}} y
una clave pública en {{Path|~/.ssh/id_dsa.pub}}. Estamos listos
para copiar la clave pública al servidor remoto. 

=== Preparar el servidor ===

Copiaremos el fichero {{Path|~/.ssh/id_dsa.pub}} al servidor que
corre sshd. También lo añadiremos al fichero {{Path|~/.ssh/authorized_keys}} que pertenece al usuario que se conectará a
este servidor. A continuación se muestra un ejemplo de cómo cómo hacerlo si ya tiene acceso ssh al servidor. 

{{Cmd|scp ~/.ssh/id_dsa.pub usuario_del_servidor@servidor:~/miequipo.pub |ssh usuario_del_servidor@servidor "cat ~/miequipo.pub &gt;&gt; ~/.ssh/authorized_keys" |ssh usuario_del_servidor@servidor "cat ~/.ssh/authorized_keys"}}

La salida de la última línea le debería mostrar el contenido del fichero {{Path|~/.ssh/authorized_keys}}. Asegúrese de que es correcto. 

=== Probar la configuración ===

Teóricamente, si todo ha ido bien y el demonio ssh del servidor lo
permite, debería obtener acceso ssh sin contraseña en este
momento. Todavía hará falta descifrar la clave privada en el cliente
con la contraseña que establecimos anteriormente, pero no confunda esto
con la contraseña de la cuenta del usuario en el servidor. 

{{Cmd|ssh usuario_del_servidor@servidor}}

Esperemos que se le haya solicitado la contraseña para id_dsa y que
haya podido obtener acceso ssh al servidor como usuario_del_servidor. Si no, acceda al servidor como usuario_del_servidor y verifique
el contenido del archivo {{Path|~/.ssh/authorized_keys}} para
asegurarse de que cada entrada está en su propia línea. Quizás también quiera revisar la configuración de sshd para determinar que prefiere utilizar la autenticación mediante clave pública cuando ésta esté disponible. 

En este momento, seguro que está pensando "¿Cuál será la gracia?
¡Solo he cambiado una contraseña por otra!" Relájese, en la siguiente
sección le mostraré exactamente lo que tiene que hacer para ahorrar su precioso tiempo. 

== Hacer que la autenticación por clave pública merezca la pena ==

=== Gestión típica de claves con ssh-agent ===

Si ha llegado hasta aquí, probablemente piense que
sería grandioso si pudiésemos, de alguna manera, descifrar nuestra(s)
clave(s) privada(s) una sola vez y así poder usar ssh libremente sin más
contraseñas. ¡Es afortunado! porque es exactamente para lo que
sirve el programa <code>ssh-agent</code>. 

El programa <code>ssh-agent</code> normalmente se inicia al comienzo de una sesión X, o al iniciar una sesión con un guión como {{Path|~/.bash_profile}}. Para funcionar, crea un zócalo (socket) unix y registra las variables de entorno adecuadas para que cualquier aplicación posterior pueda aprovechar sus servicios al conectarse a este zócalo (socket). Por supuesto, solo tiene sentido ejecutarlo en el proceso padre de su sesión X si desea usar las claves
privadas descifradas en las aplicaciones X posteriores. 

{{Cmd|eval `ssh-agent`}}

{{Note|This ssh-agent will keep keys decrypted until you kill ssh-agent. If you want to set a lifetime for the keys, use the -t argument as described in <code>man ssh-agent</code> .}}

Al correr ssh-agent, le debería notificar su identificador del proceso (PID) además de establecer valores para algunas variables de entorno, en particular, <code>SSH_AUTH_SOCK</code> y <code>SSH_AGENT_PID</code>. Debería también
agregar automáticamente {{Path|~/.ssh/id_dsa}} a su colección y pedirle la correspondiente contraseña. Si tiene otras claves privadas que quiera agregar al ssh-agent que está corriendo, puede utilizar la orden <code>ssh-add</code> de la siguiente forma: 

{{Cmd|ssh-add algun_fichero_de_claves}}

Now for the magic. Since you should now have your decrypted private key ready, you should be able to ssh into the server without entering any passwords. 

{{Cmd|ssh server}}

It would be nice to know how to shut down ssh-agent in case you need to, right? 

{{Cmd|ssh-agent -k}}

{{Note|If you had problems getting ssh-agent to work, it might still be running. You can kill it like any other process by running <code>killall ssh-agent</code> .}}

If you want even more convenience from ssh-agent, proceed to the next section on using keychain. Be sure to kill the running ssh-agent as in the example above if you decide to do so.

=== Squeezing the last drop of convenience out of ssh-agent ===

Keychain will allow you to reuse an ssh-agent between logins, and optionally prompt for passphrases each time the user logs in. Before we get ahead of ourselves though, let's emerge it first. 

{{Emerge|keychain}}

Assuming that was successful, we can now use keychain freely. Add the following to your {{Path|~/.bash_profile}} to enable it: 

{{Code|Enabling keychain in .bash_profile|<pre>
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>
}}

{{Note|You can add more private keys to the command line as you desire. Also, if you want it to ask for passphrases each time you spawn a shell, add the --clear option.}}

{{Note|If you are not using bash, check the '''EXAMPLES''' section of <code>man keychain</code> for examples of use in other shells. The idea is to get those commands to run each time you use a shell.}}

Let's test it. First make sure we killed the ssh-agent from the previous section, then start up a new shell, usually by just logging in, or spawning a new terminal. It should prompt you for the password for each key you specified on the command line. All shells opened after that point should reuse the ssh-agent, allowing you to make passwordless ssh connections over and over. 

=== Usar keychain con KDE ===

If you are a KDE user, instead of using {{Path|~/.bash_profile}} , you can let KDE manage ssh-agent for you. In order to do so, you will have to edit {{Path|/etc/kde/agent-startup.sh}} , which is read during KDE's startup, and {{Path|/etc/kde/shutdown/agent-shutdown.sh}} , which is executed during KDE's shutdown. Here is how you could edit those files: 

{{Code|Editing /etc/kde/agent-startup.sh|<pre>
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
</pre>
}}

{{Code|Editing /etc/kde/shutdown/agent-shutdown.sh|<pre>
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
</pre>
}}

Now, all you have to do is launch a term of your choice, like Konsole, and load the keys you would like to use. For example: 

{{Cmd|keychain ~/.ssh/id_dsa}}

Your keys will be remembered until you end your KDE session or kill the ssh-agent manually. 

== Comentarios finales ==

=== Consideraciones sobre la seguridad ===

Of course, the use of ssh-agent may add a bit of insecurity to your system. If another user were to use your shell while you were in the bathroom, he could login to all of your servers without passwords. As a result, it is a risk to the servers you are connecting to, and you should be sure to consult the local security policy. If you do use it, be sure to take the appropriate measures to ensure the security of your sessions. 

=== Solución de problemas ===

Most of this should work pretty well, but if you encounter problems, you'll certainly want to know a few useful things. 

* If you are unable to connect without ssh-agent, consider using ssh with the arguments -vvv to find out what's happening. Sometimes the server is not configured to use public key authentication, sometimes it is configured to ask for local passwords anyway! If that is the case, you may want to also use the -o option with ssh, or change the server sshd_config.
* If you are having problems with ssh-agent or keychain, it may be that you are not using a shell that understands the commands they use. Consult the man pages for ssh-agent and keychain for details on working with other shells.
* You may also want to visit the [https://github.com/funtoo/keychain keychain homepage] for more usage tips.

== Agradecimientos ==

We would like to thank the following authors and editors for their contributions to this guide:


* Eric Brown
* Marcelo Goes
* nightmorph

[[Category:Server and Security]]
