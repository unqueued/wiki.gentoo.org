{{lowercase title}}{{InfoBox stack
|{{InfoBox homepage|https://i3wm.org/|header=true}}
|{{InfoBox package|x11-wm/i3}}
|{{InfoBox github|i3/i3}}
|{{InfoBox odoc|https://i3wm.org/docs/}}
|{{InfoBox bugs|https://github.com/i3/i3/issues}}
|{{InfoBox irc|i3}}
|{{InfoBox wikipedia|i3 (window manager)}}
}}

'''i3''' is [[Article description::a minimalist [[window manager]], focusing on keyboard commands to manipulate windows.]] By default all windows are in full-screen in order to best maximize the use of the screen and have less fiddling with positioning. Even with the <code>doc</code> USE flag enabled its installed size is less than 1.6 MB. It also uses less than 10 MB of RAM under normal operating conditions. 

== Installation ==

=== USE flags ===

{{USEflag|package=x11-wm/i3}}

=== Emerge ===

{{Emerge|x11-wm/i3}}

=== Additional software ===

==== dmenu ====

It is also assumed that dmenu will be emerged. Available USE flags include:

{{USEflag|package=x11-misc/dmenu}}

==== i3status ====

i3status provides status information that can be used by i3bar which, by default, sits at the bottom of the screen. Available USE flags include:

{{USEflag|package=x11-misc/i3status}}

==== i3blocks ====

A more (relative to the more popular i3status) advanced, extensively-customizable status (for the i3bar config to use) is provided by i3block.

{{Emerge|x11-misc/i3blocks}}

==== i3lock ====

i3lock is an i3 compatible screen locker.

{{Emerge|x11-misc/i3lock}}

== Configuration ==

i3 can be extensively customized by editing its config. The main user config file for i3 can be either in {{Path|~/.config/i3/config}} or {{Path|~/.i3/config}}. By default when i3 is run for the first time a new config file is added to {{Path|~/.i3/config}} and a dialog asks what the modifier key should be set to. The default modifier key is {{Key|Alt}} and a popular alternative is the {{Key|Super}} (Windows) key (referred to as <code>$mod4</code> in {{Path|~/.i3/config}}). A popular starting point for writing the config file is copying the system config file {{Path|/etc/i3/config}} to one of the user config locations if one is not already generated.

=== Starting i3 ===

Most users will probably want i3 started via the X server's {{Path|~/.xinitrc}} file:

{{FileBox|filename=~/.xinitrc|lang=bash|1=
exec i3
}}

After this code has been added to a user's {{Path|.xinitrc}} file, running {{c|startx}} will start i3.

=== Default keybinding ===

Additional keybinding information can be found on [https://i3wm.org/docs/userguide.html#_default_keybindings upstream's website].

==== Moving around ====

* Switch focus: {{Key|META}}+{{Key|Arrow_key}}

* Alternate switch focus: {{Key|META}}+{{Key|J}},{{Key|K}},{{Key|L}},{{Key|;}}

* Split window vertically: {{Key|META}}+{{Key|V}}
** DOES NOT @$%! WORK!* - Krey

* Split window horizontally: {{Key|META}}+{{Key|H}}
** DOES NOT @$%! WORK!* - Krey

* Change workplace: {{Key|META}}+{{Key|num}}

* Resize the windows in tiled mode: {{Key|META}}+{{Key|r}}

==== Moving windows ====

* Toggle floating for focused window: {{Key|META}}+{{Key|Shift}}+{{Key|Space}}

* Move focused window: {{Key|META}}+{{Key|MOUSE1}}

* Resize focused window: {{Key|META}}+{{Key|MOUSE2}}

* Resize focused windows in tiled mode: {{Key|META}}+{{Key|R}}

* Open focused window in fullscreen: {{Key|META}}+{{Key|f}}

==== Utilities keybinding ====

* Open dmenu: {{Key|META}}+{{Key|d}}

==== Administrative keybinding ====

* Exit i3: {{Key|META}}+{{Key|Shift}}+{{Key|E}}

* Restart i3: {{Key|META}}+{{Key|Shift}}+{{Key|R}}

* Kill a window: {{Key|META}}+{{Key|Shift}}+{{Key|Q}}

=== Adding commands ===

In the user config file, adding a keyboard command is as simple as adding a line. For example, adding the following to the end of the config will open the {{c|firefox}} utility when {{Key|Ctrl}}+{{Key|Shift}}+{{Key|Escape}} is pressed:

{{CodeBox|1=bindsym Ctrl+Shift+Escape exec firefox}}

You can also have it use the default key that all other commands use by using the built-in variable:

{{CodeBox|1=bindsym $mod+f exec firefox}}

You can also set you own variable names or override values of variables. It works by replacing text, like the c pre-processor, and has no concept other than strings.

{{CodeBox|1=set $someVarName SomeValue}}

=== Changing default terminal ===

Default terminal can be configured in {{Path|/home/̩$USER/.config/i3/config}} by changing <code>bindsym $mod+Return exec i3-sensitive-terminal</code> on terminal of your choice. Alternatively, you can set the <var>TERMINAL</var> environment variable.

=== Adding modes ===

You can also add in what is called a mode. An example is the resize mode for floating windows. This changes what keyboard commands are bound and will be able to run. This is useful if there is a large set of commands often run together, or that override the keys on the keyboard as in the example below which takes over the arrow keys and the vim-style movement keys.

{{CodeBox|title=Resize mode taken from example config|1=
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}
# A binding to change over into the resize mode
bindsym $mod+r mode "resize"
}}

{{Important|1=Always provide a binding inside of any mode that returns you to the default mode, or else you will be stuck in that mode. If you get stuck, you must restart X to reset i3 into default mode.}}

=== Enabling multimedia keys ===

You can add multimedia key bindings in your i3 config. Below are example of working multimedia keys with i3wm.

{{CodeBox|title=Enabling multimedia keys|1=

# Put this in your i3 config file
             
# Alsa key bindings
bindsym XF86AudioRaiseVolume exec amixer -q set Master 10%+ unmute
bindsym XF86AudioLowerVolume exec amixer -q set Master 10%- unmute
bindsym XF86AudioMute exec amixer -q set Master toggle

# PulseAudio key bindings
bindsym XF86AudioRaiseVolume exec amixer -D pulse sset Master 10%+ unmute
bindsym XF86AudioLowerVolume exec amixer -D pulse sset Master 10%- unmute
bindsym XF86AudioMute exec amixer -D pulse sset Master toggle

# Media player key bindings (you need playerctl for this to work.)
bindsym XF86AudioPlay exec playerctl play
bindsym XF86AudioPause exec playerctl pause
bindsym XF86AudioNext exec playerctl next
bindsym XF86AudioPrev exec playerctl previous
       
# Brightness key bindings
bindsym XF86MonBrightnessUp exec xbacklight -inc 10
bindsym XF86MonBrightnessDown exec xbacklight -dec 10

}}

For a complete reference, visit the [https://i3wm.org/docs/userguide.html i3 official user guide].

== Tips and tricks ==

Section for I3 users to share their tips and tricks.

=== Setting a wallpaper ===

A wallpaper can be easily set using [[Feh]]. Example configuration line: <code>exec --no-startup-id feh --bg-scale /path/to/wallpaper</code>.

=== Adding Alt+Tab functionality ===

Add this to your i3 config file to enable {{Key|META}} + {{Key|TAB}} to switch to next open workspace and {{Key|META}} + {{Key| SHIFT}} + {{Key|TAB}} to switch to the previous one:

{{CodeBox|title=Adding ALT + TAB Functionality|1=
# enable Alt+Tab Functionality
bindsym $mod+Tab workspace next
bindsym $mod+Shift+Tab workspace prev
}}

=== The Scratchpad (i3's solution to minimising windows) ===

The i3 wm has an invisible workspace called the Scratchpad workspace. Users can move windows to and from it to hide them from the main workspaces. The i3 commands <code>move scratchpad</code> and <code>scratchpad show</code> hide and show windows respectively. It may be useful to bind these to keys within your config:

{{FileBox|filename=~/.config/i3/config|1=
# Make the currently focused window a scratchpad
bindsym $mod+minus move scratchpad

# Show the first scratchpad window
bindsym $mod+plus scratchpad show
}}

=== Configuring gaps between tiled windows (i3-gaps only) ===

A detailed description of {{C|i3-gaps}} can be found on the [[https://github.com/Airblader/i3 Github page]].

The following lines remove the window decorations and add gaps between the windows. <code>smart_gaps on</code> will disable the gaps if only one window is present on a workspace.

Change the values for preference. This will put a 5px gap between all containers and the edge of the screen.

<code>gaps inner</code> sets the distance between adjacent containers. <code>gaps outer</code> sets the distance between containers and the edge of the screen. It is worth noting that the actual distance from the containers to the edge of the screen is the sum of the <code>inner</code> and <code>outer</code> values. The actual distance between adjacent containers is the <code>inner</code> value alone.

{{CodeBox|title=Configuring gaps|1=
for_window [class="^.*"] border pixel 0
gaps inner 5
gaps outer 0
smart_gaps on
}}

== Known issues ==

=== i3 softbricks if xrandr with scale is used ===

i3 softbricks if {{c|xrandr --scale 1.1x1.1}} (or any scale above 1.1x1.1) is invoked. 

<u>Partially  solved?</u>, resolving on https://github.com/i3/i3/issues/3392

1. xrandr with --scale is still unable to work correctly (results in softbrick with GPU glitches if used) with multiple outputs. Temporary solution is to invoke xorg-server for each output, but it will make them independant from each other meaning that you can NOT drag windows through multiple outputs.

2. xrandr with --scale sometimes work and sometimes it doesn't...

Reported by [[User:Kreyren|Kreyren]] ([[User talk:Kreyren|talk]]) 14:47, 15 September 2018 (UTC)

=== Changing kill command on Alt+F4 does not affect terminal. ===

Changing <code>/home/$USER/.config/i3/config</code> section <code># kill focused windows</code> on <code>bindsym ALT+F4 kill</code> does not affect terminal emulator -> unable to close terminal emulator.

If anyone knows the solution please share it. [[User:Kreyren|Kreyren]] ([[User talk:Kreyren|talk]]) 18:26, 8 September 2018 (UTC)

== Troubleshooting ==

This section was created to help users diagnose their i3.

=== Error: status_command not found or is missing a library dependency (exit 127) ===

The default setting of <code>status_command</code> in the {{Path|/home/$USER/.config/i3/config}} expects installed [[I3#i3status|i3status]]. This error could be resolved by either emerging {{Package|x11-misc/i3status}} or changing the <code>status_command</code>.

== External resources ==

* [https://i3wm.org/docs/userguide.html i3 official user guide]
* [https://www.reddit.com/r/i3wm i3 reddit]
* [https://thomashunter.name/i3-configurator/ Online Colorscheme Configurator for i3] 

[[category:Window manager]]
