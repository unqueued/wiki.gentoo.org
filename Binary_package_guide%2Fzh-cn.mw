<languages />
{{Metadata|abstract=Portage 支持构建与安装二进制包。本指南将解释如何创建二进制包主机以及如何使用二进制包。}}

除了支持通常的 ebuilds 之外， Portage 还支持构建、安装二进制包。
本指南将解释如何创建他们，如何安装他们以及如何配置一个二进制包服务器。

=== 介绍 ===

有很多原因为什么系统管理员喜欢在 Gentoo 中使用二进制包安装方式。

# 首先，它允许管理员 ''将相似的系统保持最新''。从源代码编译所有东西是很耗费时间的。维护许多相似的系统，可能其中的一些硬件较老，如果一个系统将所有东西从源代码编译好，其他系统重用这些二进制包，工作就会变得轻松。
# 第二个原因是 ''执行安全升级''。对于关键任务系统来说，保持尽可能大的 ''可用性'' 是很重要的。这可以通过一台预备服务器来实现，它首先自己执行所有的更新。一旦预备服务器更新后状态良好，那么更新可以被应用到关键系统上。这种方法的一个变形是在同一个系统的一个 chroot 中执行更新，并且在真正的系统中使用所创建的二进制包。
# 第三个原因是 ''作为一个备份''。通常二进制包是恢复一个受损系统的唯一方法（例如编译器受损）。拥有一台二进制包服务器上的或者本地的预编译二进制包，对于工具链受损的情况有很大的帮助。
# 最后，它也支持 ''更新非常旧的系统''。更新非常旧的系统这项任务可以通过使用二进制包来大大减轻。通常在旧的系统上安装二进制包是有益的，因为它们不需要安装/更新构建时依赖。因为二进制包是预编译的，这也避免了在构建过程中发生失败。

本向导将关注下列话题：
* 如何构建二进制包；
* 如何向客户分发二进制包；
* 如何使用二进制包；
* 如何维护二进制包。

在向导的末尾还包含几个关于二进制包操作的高级话题。

{{Note|除非另行指出，本指南中使用的所有的工具都是 {{Package|sys-apps/portage}} 的组成部分。}}

== 创建二进制包 ==

主要有三种创建二进制包的方法：
# 在一次常规安装后，使用<tt>quickpkg</tt>程序；
# 在 emerge 操作中显式使用 <code>--buildpkg (-b)</code> 选项；
# 通过使用 Portage 的 <code>buildpkg</code> 特性自动完成。

所有这三种方法都将在 <code>PKGDIR</code> 变量指向的目录创建二进制包（默认为 {{Path|/usr/portage/packages}}）。

=== 使用 quickpkg ===

<tt>quickpkg</tt> 程序接收一个或多个依赖 atoms （或者包集合）并对所有与那个 atom 匹配的 ''已安装'' 包创建二进制包。

例如，要对所有已安装 GCC 版本创建二进制包：

{{RootCmd|quickpkg sys-devel/gcc}}

要对系统中所有已安装包创建二进制包，使用 <code>*</code> 通配符：

{{RootCmd|quickpkg "*/*"}}

这种方法有一点要警告：它依赖已安装的文件，会在配置文件上发生问题。管理员经常在安装完软件后改变配置文件。因为这可能向包中泄露重要（甚至可能是机密）数据， <tt>quickpkg</tt> 默认通过 <code>CONFIG_PROTECT</code> 方法保护，''不''包含配置文件。要强制包含配置文件，使用 <code>--include-config</code> 或 <code>--include-unmodified-config</code> 选项。

=== 使用 --buildpkg 作为 emerge 选项 ===

当使用 <tt>emerge</tt> 安装软件， Portage 可以通过 <code>--buildpkg (-b)</code> 选项被要求创建二进制包：

{{Emerge|params+=--buildpkg|sys-devel/gcc}}

还可以要求 Portage ''只'' 创建二进制包却 ''不'' 在活动系统上安装软件。 这种情况下，使用 <code>--buildpkgonly (-B)</code> 选项：

{{Emerge|params+=--buildpkgonly|sys-devel/gcc}}

后一种方法还是需要构建时的依赖事先已安装。

=== 作为 Portage 特性实现 buildpkg ===

最常用的自动创建二进制包的方式是每当使用 Portage 安装一个包就自动创建二进制包，通过使用 <code>buildpkg</code> 特性来实现，可以在 {{Path|/etc/portage/make.conf}} 中进行设置，例如：

{{FileBox|filename=/etc/portage/make.conf|title=打开Portage的二进制包创建功能|lang=bash|1=
FEATURES="${FEATURES} buildpkg"
}}

开启这项特性后，每次 Portage 安装软件，它将也创建一个二进制包。

=== 排除一些包的创建 ===

告诉 Portage 不要对一些指定的包或分类创建二进制包也是可以的。 这个可以通过向 emerge 传递 <code>--buildpkg-exclude</code> 选项：

{{RootCmd|emerge -uDN @world --buildpkg --buildpkg-exclude "virtual/* sys-kernel/*-sources"}}

这可以对那些不值得创建二进制包的包使用。例如 Linux 内核代码包或上游二进制包（那些以 -bin 结尾如 {{Package|www-client/firefox-bin}}）。

== 配置二进制包主机 ==

Portage 支持多种下载二进制包的协议：FTP、FTPS、HTTP、HTTPS和SSH。这为多种可能的二进制包主机的实现提供了空间。

可是，Portage 并没有提供一个“现成”的方法来分发二进制包。根据需求还需要安装额外的软件。

=== 基于 Web 的二进制包主机 ===

一种常用的分发二进制包的方法是创建一个基于 web 的二进制包主机。

使用一个 web 服务器如 [[lighttpd]] ({{Package|www-servers/lighttpd}}) 并且将其配置为提供对 {{Path|/etc/portage/make.conf}} 中 <code>PKGDIR</code> 位置的读权限。

{{FileBox|filename=/etc/lighttpd/lighttpd.conf|title=lighttpd 配置范例|lang=bash|1=}}

}}

之后，在客户系统，对应地设置 <code>PORTAGE_BINHOST</code> 变量：

{{FileBox|filename=/etc/portage/make.conf|title=使用基于Web的二进制包主机|lang=bash|1=
PORTAGE_BINHOST="http://binhost.genfic.com/Packages"
}}

=== SSH 二进制包主机 ===

要提供一种更多身份验证的二进制包方法，可是考虑使用 SSH 。

当使用 SSH ，可以使用 Portage Linux 用户的 SSH 密钥 (without passphraze as the installations need to happen in the background) 来连接到远程二进制包主机。

要实现这个，确保 Portage 用户的 SSH 密钥被服务器所允许：

{{RootCmd|cat portage.id_rsa.pub >> /home/binpkguser/.ssh/authorized_keys}}

<code>PORTAGE_BINHOST</code> 看起来如下：

{{FileBox|filename=/etc/portage/make.conf|title=配置PORTAGE_BINHOST用于SSH访问|lang=bash|1=
PORTAGE_BINHOST="ssh://binpkguser@binhostserver/usr/portage/packages"
}}

=== NFS 导出 ===

当在内网中使用二进制包，可以更简单地通过 NFS 导出包并在客户系统进行挂载。

{{Path|/etc/exports}} 文件看起来如下：

{{FileBox|filename=/etc/exports|title=导出包目录|1=
/usr/portage/packages                            2001:db8:81:e2::/48(ro,no_subtree_check,root_squash) 192.168.100.1/24(ro,no_subtree_check,root_squash)
}}

在客户系统，这个位置就可以被挂载。例如 {{Path|/etc/fstab}} 看起来如下：

{{FileBox|filename=/etc/fstab|title=包目录的挂载点|1=
binhost:/usr/portage/packages      /usr/portage/packages    nfs    defaults    0 0
}}


使用二进制包

要在其他系统使用二进制包，需要满足一些条件：
*客户机和服务器的架构以及[[CHOST]]关键字的设置必须是一致的。
*用来创建二进制包的<code>CFLAGS</code>和<code>CXXFLAGS</code>两个参数的设置必须和所有的客户机兼容。
*针对处理器特定功能的USE设置（如MMX,SSE,...）要仔细选择，以保证所有的客户机都支持这些功能。

{{Important|Portage不会验证是否满足上述条件，因为维护这些设置是系统管理员的职责。}}

除了这些，Portage将检查二进制包是否用和客户机一样的USE设置来创建。如果二进制包是用不同的USE设置来创建的，Portage将忽略这个二进制包（改为使用基于源代码的方式进行安装）或者提示安装失败，取决于运行emerge命令时所带的选项（参看[[#安装二进制包|安装二进制包]]）。

为了使用二进制包，在客户机上有几个配置需要更改。

===安装二进制包===

在运行<tt>emerge</tt>命令时有几个选项可以用于告诉Portage使用二进制包：

{| class="wikitable"
|-
! 选项 !! 描述
|-
| <code>---usepkg (-k)</code> || 尝试使用位于本地可用{{Path|packages}}目录的二进制包。适用于用[[NFS]]或者[[SSHFS]]方式来挂载二进制包主机的场景。如果找不到相应的二进制包，就使用常规的方式（基于源代码）进行安装。
|-
| <code>--usepkgonly (-K)</code> || 和<code>--usepkg (-k)</code>类似，但当找不到二进制包的时候提示失败。这个选项适用于只使用“预创建”二进制包的场景。
|-
| <code>--getbinpkg (-g)</code> || 从远程二进制包主机下载二进制包。如果找不到相应的二进制包，就使用常规的方式（基于源代码）进行安装。
|-
| <code>--getbinpkgonly (-G)</code> || 和<code>--getbinpkg (-g)</code>类似，但在下载不到二进制包的时候提示失败。这个选项适用于只使用“预创建”二进制包的场景。
|}

为了自动使用二进制包进行安装，可以在<code>EMERGE_DEFAULT_OPTS</code>变量增加适当的选项：

{{FileBox|filename=/etc/portage/make.conf|title=自动下载二进制包，二进制包不存在的时候提示失败|lang=bash|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --getbinpkgonly"
}}

There is a Portage feature that automatically implements the equivalent of <code>--getbinpkg (-g)</code> without the need for updating the <code>EMERGE_DEFAULT_OPTS</code> variable: ''getbinpkg''.

{{FileBox|filename=/etc/portage/make.conf|title=Enabling getbinpkg as Portage feature|lang=bash|1=
FEATURES="${FEATURES} getbinpkg"
}}

=== Pulling packages from a binary package host ===

When using a binary package host, clients need to have the <code>PORTAGE_BINHOST</code> variable set. Otherwise the client will not know where the binary packages are stored which results in Portage being unable to retrieve them.

{{FileBox|filename=/etc/portage/make.conf|title=Setting PORTAGE_BINHOST|lang=bash|1=
PORTAGE_BINHOST="http://binhost.genfic.com/packages"
}}

The <code>PORTAGE_BINHOST</code> variable uses a space-separated list of URIs. This allows administrators to use several binary package servers simultaneously. The URI must always point to the directory in which the {{Path|Packages}} file resides.

{{Note|The support for multiple binary package servers is somewhat incomplete. If several servers serve a binary package for the same package version, then only the first one will be considered. This can be problematic when these binary packages differ in their <code>USE</code> configuration and the <code>USE</code> configuration of a later binary package would match the systems configuration.}}

=== Reinstalling modified binary packages ===

Passing the <code>--rebuilt-binaries</code> option to emerge will reinstall every binary that has been rebuilt since the package was installed. This is useful in case rebuilding tools like <tt>revdep-rebuild</tt> or <tt>python-updater</tt> are run on the binary package server.

A related option is <code>--rebuilt-binaries-timestamp</code>. It causes emerge not to consider binary packages for a re-install if those binary packages have been built before the given time stamp. This is useful to avoid re-installing all packages, if the binary package server had to be rebuild from scratch but <code>--rebuilt-binaries</code> is used otherwise.

=== Additional client settings ===

Next to the ''getbinpkg'' feature, Portage also listens to the ''binpkg-logs'' feature. This one controls if log files for successful binary package installations should be kept. It is only relevant if <code>PORT_LOGDIR</code> is set and is enabled by default.

Similar to excluding binary packages for a certain set of packages or categories, clients can be configured to exclude binary package installations for a certain set of packages or categories.

To accomplish this, use the <code>--usepkg-exclude</code> option:

{{RootCmd|emerge -uDNg @world --usepkg-exclude "sys-kernel/gentoo-sources virtual/*"}}


== Maintaining binary packages ==

Exporting and distributing the binary packages will lead to useless storage consumption if the binary package list is not actively maintained.

=== Removing outdated binary packages ===

In the {{Package|app-portage/gentoolkit}} package an application called <tt>eclean</tt> is provided. It allows for maintaining Portage-related variable files, such as downloaded source code files, but also binary packages.

The following command will remove all binary packages that have no corresponding ebuild:

{{RootCmd|eclean packages}}

For more details please read the [[Eclean]] article.

Another tool that can be used is the <tt>qpkg</tt> tool from the {{Package|app-portage/portage-utils}}. However, this tool is a bit less configurable.

To clean up ''unused'' binary packages (in the sense of used by the server on which the binary packages are stored):

{{RootCmd|qpkg -c}}

=== Maintaining the Packages file ===

Inside the packages directory, a file called {{Path|Packages}} exists. This file acts as a cache for the metadata of all binary packages in the packages directory. The file is updated whenever Portage adds a binary package to the directory. Similarly, <tt>eclean</tt> updates it when it removes binary packages.

If for some reason binary packages are simply deleted or copied into the packages directory, or the {{Path|Packages}} file gets corrupted or deleted, then it must be recreated. This is done using <tt>emaint</tt> command:

{{RootCmd|emaint binhost --fix}}

== Advanced topics==

=== Creating snapshots of the packages directory ===

When deploying binary packages for a large number of client systems it might become worthwhile to create snapshots of the packages directory. The client systems then do not use the packages directory directly but use binary packages from the snapshot.

Snapshots can be created using the {{Path|/usr/lib64/portage/bin/binhost-snapshot}} tool. It takes four arguments, 
# A source directory (the path to the packages directory); 
# A target directory (that must not exist);
# A URI;
# A binary package server directory.

The files from the package directory are copied to the target directory. A {{Path|Packages}} file is then created inside the binary package server directory (fourth argument) with the provided URI.

Client systems need to use an URI that points to the binary package server directory. From there they will be redirected to the URI that was given to <tt>binhost-snapshot</tt>. This URI has to refer to the target directory.

=== Understanding the binary package format ===

Binary packages created by Portage have the file name ending with "tbz2". These files consist of two parts:
# A .tar.bz2 archive containing the files that will be installed on the system;
# A xpak archive containing package metadata, the ebuild and the environment file.

See <kbd>man xpak</kbd> for a description of the format.

In {{Package|app-portage/portage-utils}} some tools exists that are able to split or create tbz2 and xpak files.

The following command will split the tbz2 into a {{Path|.tar.bz2}} and an {{Path|.xpak}} file:

{{Cmd|qtbz2 -s <package>.tbz2}}

The xpak file can be examined using the <tt>qxpak</tt> utility.

To list the contents:

{{Cmd|qxpak -l <package>.xpak}}

The next command will extract a file called {{Path|USE}} which contains the enabled USE flags for this package:

{{Cmd|qxpak -x package-manager-0.xpak USE}}

=== The PKGDIR layout ===

The currently used format version 2 has the following layout:

{{CodeBox|title=Packages directory layout (version 2)|1=
PKGDIR
`+- Packages
 +- app-accessibility/
 {{!}}  +- pkg1-version.tbz2
 {{!}}  `- pkgN-version.tbz2
 +- app-admin/
 {{!}}  `- ...
 `- ...
}}

The {{Path|Packages}} is the major improvement (and also the trigger for Portage to know that the binary package directory uses version 2) over the first binary package directory layout (version 1). In version 1, all binary packages were also hosted inside a single directory (called {{Path|All/}}) and the category directories only had symbolic links to the binary packages inside the {{Path|All/}} directory.

=== Unpacking with quickunpkg ===

Zoobab wrote a simple shell tool named [https://github.com/zoobab/quickunpkg quickunpkg] to quickly unpack tbz2 files.


[[Category:Portage]]
