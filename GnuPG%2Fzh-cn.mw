<languages />


{{Metadata|abstract=这篇短小的指南将教给你GnuPG——一个用于安全通讯的工具——的基本用法。}}

这篇短小的指南将教给你GnuPG——一个用于安全通讯的工具——的基本用法。

=== 介绍 ===

=== 你能从本指南中得到什么 ===

本指南已经假定你对公钥加密法、加密和数字签名都比较熟悉。如果不是这样，请跳转到[[#公钥加密法]]，或者先看一下[http://www.gnupg.org/documentation/guides.html GnuPG手册]的第2章，然后再回到这里。 

本指南将教给你如何安装GnuPG，如何创建密钥对，如何将密钥添加到公钥环当中，如何将你的公钥提交到密钥服务器以及如何签名、加密、验证或者解密你发送或者接受到的消息。你还可以了解到如何对本地计算机上的文件加密，以防止他人读到其中内容。 

=== 安装需要的软件 ===

最基本的，你需要<code>emerge gnupg</code>。现在很多应用程序都在某种程度上支持gpg，所以在你的USE变量里加上“crypt”应该是个不错的主意。如果你想使用支持gnupg的邮件客户端，你可以选择使用pine（<code>emerge pinepgp</code>）、mutt（<code>emerge mutt</code>）、Mozilla Thunderbird（<code>emerge thunderbird</code>）、evolution（一个类似于微软Outlook的GNOME软件），或者KDE自己的Kmail。 

如果你使用KDE的话，你很可能对<code>Kgpg</code>感兴趣。这个小程序可以帮助你生成密钥对、从ASCII文件导入密钥、对导入的密钥签名，以及帮助你导出密钥还有一些其他功能。 

== 生成密钥并且将密钥加入公钥环 ==

=== 创建密钥 ===

只需运行<code>gpg --gen-key</code>就可以创建自己的密钥了。它在第一次运行时会创建一些文件夹；再次运行可以创建密钥： 

{{Cmd|gpg --gen-key|output=<pre>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.
  
Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
   Your selection? 1
</pre>
}}

此时，你可以选择你想使用的密钥的类型。大多数用户会选择默认的DSA和ElGamal类型。接下来就是密钥的大小；需要注意，虽然密钥越大越好，但是可不要对DSA/ElGamal使用大于2048的值。对于普通的电子邮件来说，2048已经足够了。 

在指定密钥大小之后，需要指定的是密钥的有效期。在这里，有效期却是越小越好，但是大多数用户会选择一个永远不会过期的密钥，或者指定有效期为2、3年。 

{{Code|Choosing key size|<pre>
RSA keypair will have 1024 bits.
RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048) 2048
Requested keysize is 2048 bits       
Please specify how long the key should be valid.
         0 = key does not expire
 <n>= key expires in n days
 <n>w = key expires in n weeks
 <n>m = key expires in n months
 <n>y = key expires in n years
 Key is valid for? (0) 0
Key does not expire at all
</pre>
}}

现在，你需要键入一些你自己的个人信息。如果你想将自己的公钥送给其他人，那么在这里必须使用真实的电子邮件地址。 

{{Code|Entering user information|<pre>
Is this correct (y/n)? y
                          
GnuPG needs to construct a user ID to identify your key.
  
Real name: John Doe
Email address: john@nowhere.someplace.flick
Comment: The Real John Doe
You selected this USER-ID:
"John Doe (The Real John Doe) <john@nowhere.someplace.flick>"
  
Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O 
You need a Passphrase to protect your secret key.    
  
Enter passphrase: 
</pre>
}}

在这儿，请键入你的密码两次。我推荐你使用一个比较复杂的密码。因为，如果有人得到你的私钥并破解了你的密码，他们就可以发送冒充你的名义签名的消息，从而欺骗所有人相信这个邮件是你发送的。 

接下来，GnuPG才会产生你的密钥。动一下鼠标或者在后台播放一个mp3将有助于加速这个过程，因为这些动作都会帮助产生随机数据。 

=== 生成吊销证书 ===

{{Important/zh-cn| 这个部分非常重要，你必须“现在”就做！}}

每当你创建了密钥，你必须同时创建这个密钥的吊销证书。因为，一旦你的密钥发生不测（例如有人得到了你的密钥和密码），只有你提前这样做了，你才有能力吊销你的密钥使它无效。 

{{Cmd|gpg --list-keys|output=<pre>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) <john@nowhere.someplace.flick>
sub  2048g/96D6CDAD 2002-12-08
</pre>}}

{{Cmd|gpg --output revoke.asc --gen-revoke 75447B14|output=<pre>
sec  1024D/75447B14 2002-12-08   John Doe (The Real John Doe) <john@nowhere.someplace.flick>
  
Create a revocation certificate for this key? y
Please select the reason for the revocation:   
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision? 1
Enter an optional description; end it with an empty line:
> Someone cracked me and got my key and passphrase
>
Reason for revocation: Key has been compromised
Someone cracked me and got my key and passphrase
Is this okay? y
  
You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) <john@nowhere.someplace.flick>"
1024-bit DSA key, ID 75447B14, created 2002-12-08
  
ASCII armored output forced.
Revocation certificate created.
  
Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
</pre>
}}

使用<code>gpg --list-keys</code>命令可以列出公钥环中的所有公钥。你可以用它来查看你密钥的ID，然后生成该密钥的吊销证书。现在，推荐你将.gnupg目录和吊销证书（ASCII形式的——{{Path|revoke.asc}}）拷贝到比较安全的媒体（两张软盘或者一张CD-R，并且，请将其保存在比较安全的地方）当中。请务必记住，将来你可以使用{{Path|revoke.asc}}来吊销密钥使密钥失效。 

{{Note/zh-cn|如果你想在多个邮件地址中使用同一个密钥，你可以尝试运行<code>gpg --edit-key YOUR_ID</code>并且使用<code>adduid</code>命令。它会询问你想要在第二个ID中使用的名字，电邮地址和注释。}}

=== 导出密钥 ===

输入<code>gpg --armor --output john.asc --export john@nowhere.someplace.flick</code>来导出你的密钥。任何时候你都可以使用密钥ID或者其他可以唯一确定该密钥的东西（这里我们使用了电子邮件地址）作为参数。John现在得到了{{Path|john.asc}}。他可以将这个文件发送给朋友，或者贴到他自己的网页上去，以便人们可以安全的同他通讯。 

=== 导入密钥 ===

为了将文件添加到你的公钥环中去，你必须先导入它，并且验证这个密钥的指纹才行。在验证指纹之后，你还需要将它设为有效。 

{{Note/zh-cn|验证密钥时请务必小心。因为这是公钥加密法的一个弱点。}}

现在我们要将Luis Pinto（我的一位朋友）的公钥加入到我的公钥环之中去。在给他打了个电话并且问到了他这个密钥的指纹之后，我仔细对照了一下该密钥的指纹和<code>fpr</code>命令的输出结果。在确认这个密钥是真实的之后，我将其添加到我的公钥环之中。这个密钥比较特殊，它将在2003年12月1日过期，所以我被问到是否要将我的签名设置为在同一天失效。 

{{Cmd|gpg --import luis.asc|output=<pre>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>}}

{{Cmd|gpg --list-keys|output=<pre>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) <john@nowhere.someplace.flick>
sub  2048g/96D6CDAD 2002-12-08
  
pub  1024D/462405BB 2002-12-01 Luis Pinto <lmpinto@student.dei.uc.pt>
uid                            Luis Pinto <lmpinto@dei.uc.pt>
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]
</pre>}}

{{Cmd|gpg --edit-key lmpinto@dei.uc.pt|output=<pre>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.
  
gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto <lmpinto@dei.uc.pt>
(2). Luis Pinto <lmpinto@student.dei.uc.pt>
</pre>}}

{{Cmd|fpr|prompt=Command> |output=<pre>
pub  1024D/462405BB 2002-12-01 Luis Pinto <lmpinto@dei.uc.pt>
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
</pre>}}

{{Cmd|sign|prompt=Command> |output=<pre>
Really sign all user IDs? y
                           
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
  
     Luis Pinto <lmpinto@dei.uc.pt>
     Luis Pinto <lmpinto@student.dei.uc.pt>
  
This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) Y
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".
  
   (0) I will not answer. (default)
   (1) I have not checked at all.
   (2) I have done casual checking.
   (3) I have done very careful checking.
  
   Your selection? 3
Are you really sure that you want to sign this key
with your key: "John Doe (The Real John Doe) <john@nowhere.someplace.flick>"
  
I have checked this key very carefully.
  
Really sign? y
              
You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) <john@nowhere.someplace.flick>"
1024-bit DSA key, ID 75447B14, created 2002-12-08
</pre>}}

{{Cmd|check|prompt=Command> |output=<pre>
uid  Luis Pinto <lmpinto@dei.uc.pt>
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) <john@nowhe
uid  Luis Pinto <lmpinto@student.dei.uc.pt>
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   John Doe (The Real John Doe) <john@nowhe
</pre>
}}

== 与密钥服务器交换密钥 ==

=== 向密钥服务器发送密钥 ===

Now that you have your key, it is probably a good idea to send it to the world key server. There are a lot of keyservers in the world and most of them exchange keys between them. Here we are going to send John Doe's key to the subkeys.pgp.net server. This uses HTTP, so if you need to use a proxy for HTTP traffic don't forget to set it ( <code>export http_proxy=http://proxy_host:port/</code> ). The command for sending the key is: <code>gpg --keyserver subkeys.pgp.net --keyserver-options honor-http-proxy --send-key 75447B14</code> where <code>75447B14</code> is the key ID. If you don't need a HTTP proxy you can remove the ''--keyserver-options honor-http-proxy'' . 

You can also send other people's keys that you have signed to the keyserver. We could send Luis Pinto's key to the keyserver. This way someone who trusts your key can use the signature that you have placed there to trust Luis's key. 

=== Getting Keys from keyservers ===

Now we are going to search for Gustavo Felisberto's key and add it to the keyring of John Doe (just in case you did not notice Gustavo Felisberto is the author this guide :)). 

{{Cmd|gpg --keyserver subkeys.pgp.net --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net|output=<pre>
gpg: searching for "humpback@felisberto.net" from HKP server subkeys.pgp.net
Keys 1-5 of 5 for "humpback@felisberto.net"
(1)Gustavo Felisberto (apt-get install anarchy) <humpback@felisberto.net> 1024
  created 2002-12-06, key B9F2D52A
(2)Gustavo Felisberto <humpback@altavista.net> 1024
  created 1999-08-03, key E97E0B46
(3)Gustavo A.S.R. Felisberto <humpback@altavista.net> 1024
  created 1998-12-10, key B59AB043
(4)Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net> 1024
  created 1998-08-26, key 39EB133D
(5)Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net> 1024
  created 1998-06-14, key AE02AF87
  Enter number(s), N)ext, or Q)uit >1
gpg: requesting key B9F2D52A from HKP keyserver subkeys.pgp.net
gpg: key B9F2D52A: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>
}}

As you can see from the server response I have a few keys submitted to the key server, but I currently only use ''B9F2D52A'' . Now John Doe can get it and sign it if he trusts it. 

== Using a GPG Agent ==

=== What is a GPG Agent? ===

Sometimes working with certain applications requires you to use your GPG key very frequently, which means that you have to type your passphrase a lot of times. Several applications used to support a passphrase caching mechanism to make life easier for users. However, this disallowed sharing this cache across programs (how secure would that be?) and forced applications to reinvent the wheel over and over again. 

A GPG agent is a separate application that GPG uses to cache the passphrase in a standard and secure way. It allows applications to use GPG concurrently: if you enter your passphrase while working in one application, the other application can work with GPG without reiterating the request for the passphrase to unlock the key - if the GPG agent is configured to allow so, of course. 

Gentoo provides a few GPG agent applications. The <code>app-crypt/gnupg</code> package contains what could be considered the reference one, and will be the one we'll use in this document. 

=== Configuring gpg-agent and pinentry ===

GnuPG includes <code>gpg-agent</code> and <code>pinentry</code> . <code>pinentry</code> is the helper application that gpg-agent uses to request the passphrase in a graphical window. It comes in three flavors: it can popup a window using the gtk+, Qt, or curses library (depending on your USE flags in {{Path|/etc/portage/make.conf}} ). 

If you installed <code>pinentry</code> with more than one popup window type, you can choose between them with <code>eselect-pinentry</code> : 

{{RootCmd|eselect pinentry list|output=<pre>
Available pinentry implementations:
  [1]   pinentry-gtk-2 *
  [2]   pinentry-curses
  [3]   pinentry-qt4
</pre>}}

{{RootCmd|eselect pinentry set 1}}

Now create a file called {{Path|~/.gnupg/gpg-agent.conf}} and enter the following lines which define the default timeout of the passphrase (e.g. 30 minutes) and the application to be called for when the passphrase should be retrieved the first time (e.g. the gtk+ version of pinentry). 

{{File|~/.gnupg/gpg-agent.conf||<pre>
pinentry-program /usr/bin/pinentry-gtk-2
no-grab
default-cache-ttl 1800
</pre>
}}

Now configure GnuPG to use an agent when appropriate. Edit {{Path|~/.gnupg/gpg.conf}} and add the following line: 

{{File|~/.gnupg/gpg.conf|Configuring GnuPG to use a GPG Agent|<pre>
use-agent
</pre>
}}

Now your system is (almost) set to use the GPG agent. 

=== Automatically Starting the GPG Agent ===

If you use KDE as your graphical environment, edit {{Path|/etc/kde/startup/agent-startup.sh}} and uncomment the following (system-wide) or {{Path|~/.kde4/env/gpg-agent.sh}} (local user) and add the following command to it to have KDE automatically starting the GPG agent: 

{{File|/etc/kde/startup/agent-startup.ksh|Make KDE automatically start the GPG agent|<pre>
eval "$(gpg-agent --daemon)"
</pre>
}}

Additionally, uncomment the following in {{Path|/etc/kde/shutdown/agent-shutdown.sh}} (system-wide) or add it to {{Path|~/.kde4/shutdown/gpg-agent.sh}} (local user): 

{{File|/etc/kde/shutdown/agent-shutdown.sh|Make KDE shut down the GPG agent|<pre>
if [ -n "${GPG_AGENT_INFO}" ]; then
  kill $(echo ${GPG_AGENT_INFO} | cut -d':' -f 2) >/dev/null 2>&1
fi
</pre>
}}

If you use a different graphical environment, put that line (the same one as mentioned above) in {{Path|~/.xinitrc}} (if you use <code>startx</code> ) or {{Path|~/.xsession}} (if you use XDM/GDM/KDM/...). 

== Working with documents ==

=== Encrypting and signing ===

Let's say that you have a file that you wish to send Luis. You can encrypt it, sign it, or encrypt it and sign it. Encrypting means that only Luis will be able to open it. The signature tells Luis that it was really you who created the file. 

The next three commands will do just that, encrypt, sign and encrypt/sign. 

{{Cmd|gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt
|gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign
|gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign}}

This will create binary files. If you wish to create ASCII files, just add a <code>--clearsign</code> to the beginning of the command. 

=== Decrypting and verifying signatures ===

Suppose that you have received a file which is encrypted to you. The command to decrypt it is <code>gpg --output document --decrypt encrypted_doc.gpg</code> . This will decrypt the document and verify the signature (if there is one). 

=== Encrypting and decrypting without keys ===

It is also possible to encrypt files using passwords instead of keys. Well, the password itself will function as the key - it will be used as a ''symmetric cypher'' . You can encrypt the file using <code>gpg</code> 's <code>--symmetric</code> argument; decrypting uses the same command as we talked about before. 

{{Cmd|gpg --output document.gpg --symmetric document}}

GnuPG will ask for a passphrase and a passphrase verification.


=== Advanced Features ===

There are some nice advanced features in GnuPG. To find them, open the {{Path|~/.gnupg/gpg.conf}} file. 

{{File|~/.gnupg/gpg.conf||<pre>
#keyserver x-hkp://subkeys.pgp.net
#keyserver-options auto-key-retrieve include-disabled include-revoked
</pre>
}}

Search for the above two lines and uncomment them. With this any time GnuPG needs to check a signature and it does not find the public key on the local keyring it will contact the key server at [http://subkeys.pgp.net:11371/ subkeys.pgp.net] and will try to fetch it from there. 

Another nice command is <code>gpg --refresh-keys</code> . This will contact the keyserver defined in the options file and refresh public keys in your local key ring from there, searching for revoked keys, new IDs, and new signatures on keys. You should probably run this once or twice a month so that if someone revokes his key you will be notified. 

== GnuPG interfaces ==

=== About email signatures ===

95% of the time you will use GnuPG with email, signing/encrypting your outgoing messages and reading signed/encrypted messages. So it is only fair that I talk about that first. 

There are two ways two sign/encrypt a email with GnuPG, the old way and the new way :). In the old way messages would appear in plain text, with no possible formatting and attached files would be unsigned/unencrypted. Here is an example of a message signed the old way: 

{{Code|A plain text signature|<pre>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1
  
Test message
  
-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.8 for non-commercial use
  
iQA/AwUBP8461jMX0745gR7AEQIEOwCg011GbufXO3ED3FkLWXmfzg7xm1cAoJD0
0EU3Kd2EKNCqataEqM5qjpPs
=LchZ
-----END PGP SIGNATURE-----
</pre>
}}

Messages this way are no good in today's world, where we have nice GUIs and email readers that understand html. 

To solve this an addition to the MIME (Multipurpose Internet Mail Extensions) was created. This adds a field to the email that tells the mail reader that the full content of the message is signed and/or encrypted. The problem with this is that not all mail readers support this. And some even mess up the content; Microsoft's Outlook is famous for not working with this. 

=== Kgpg ===

Kgpg is a nice GUI for GnuPG. In the main screen you can paste the text that you wish to sign or encrypt, and you can also paste the ASCII armored text that you which to decrypt. 

From within the main screen you can decrypt text (you will have to provide your password), encrypt other files, paste new text to sign.... 

=== Seahorse ===

Seahorse aims to be a GnuPG GUI interface for the Gnome desktop. The software has been evolving fast, but it still lacks many important features that can be found in Kgpg or the command line version. 

=== KMail ===

If you have the <code>crypt</code> USE flag set, KMail will be compiled with gpg support, and will be able to encrypt and decrypt inline PGP mails automatically as well as encrypting OpenPGP/MIME mails. If you want to decrypt OpenPGP/MIME mails as well (which you probably want) you need to have a running GPG agent. 

You can verify if KMail is properly configured by going to <code>Settings</code>, <code>Configure KMail</code>, <code>Security</code>, <code>Crypto Backends</code>. You should see a GpgME-based backend listed and you should be able to fill the OpenPGP checkbox. If it is listed but grayed out, click on <code>Rescan</code> . If the GpgME-based backend remains grayed out, KMail is not working properly. 

If you still are unable to get KMail to behave, please see the [http://kmail.kde.org/kmail-pgpmime-howto.html KMail PGP HowTo] page for more information. 

=== Claws-Mail ===

This mail reader is ''very'' fast with big mailboxes, has all the nice features one wants in mail readers and works pretty well with gpg. The only problem is that it does not work with the old PGP signatures, so when you receive those kind of mails you have to hand check the signatures. 

To use your gpg key with Claws-Mail just go to the account configuration and select the privacy tab. Once there just choose which key to use, probably most users will go with the default key. 

== Public Key Cryptography ==

=== Basic Public Key Cryptography ===

The concept of public key cryptography was originally devised by Whitfield Diffie and Martin Hellman in 1976. When I first heard the words "public key" and "cryptography" in the same sentence back in '93 I thought to myself that it would be impossible to do such a thing. In those days there was no Internet (well there was, but not for me) so I went to the public library and asked for books on Cryptography. I must say that I was 16 at the time so the clerk there looked to me in astonishment and brought me a book for children on substitution cyphers (those where you change a letter for another like the famous Caesar Cypher or ROT-13 (Tragbb Ebpxf, naq lbh xabj vg vf tbbq orpnhfr lbh ner ernqvat guvf qbp.), ( <code>emerge rotix</code> if you cannot read the preceding text)). I was very upset with this and started to search for more info. It is good to have mathematicians in the family, because as soon as I talked to one of them I was introduced to a new world. 

And now a bit of mathematics: 

{{Code|Mathematical Concepts|<pre>
Definitions:
  
1- A prime number is a positive integer number greater than one that is only
divisible by 1 and itself (the remainder of the division is 0).
The first 8 prime numbers are 2,3,5,7,11,13,17,19
  
Theorem (No proof here)
1- For any non prime positive integer it is possible to break it as the product
of prime numbers, and that product is unique.
4=2*2
6=2*3
8=2*4=2*2*2
10=2*5
12=2*6=2*2*3
  
"Facts":
1- It is mathematically easy to multiply two large integers
2- It is hard to find the prime factors of a given positive integer.
</pre>
}}

If I give you the number 35 and I tell you that this number is the product of two prime numbers it is easy to find that it was 5 and 7. But if I tell you the same for 1588522601 you will spend alot of time (or CPU cycles) to find it was 49811*31891. And if this number is really really big this task becomes "impossible". So now if I give the world my large number that is the product of two primes I know something about that number that no one else knows. 

This is the basis for Public Key Cryptography (PKC) implementations today. As an (unrealistic) example, I give anyone my number and that someone will use if for cyphering a message to me. Anyone can see the cyphered message, because I am the only one who knows a shortcut to read it, anyone else will first have to "split" that big number to be able to read the message, and it is a "fact" that it is impossible to do that in a short amount of time (todays methods and the fastest computers in the world would take thousands of years to do that). In this setup the two large prime numbers would be called the PRIVATE KEY, and the large non prime number is the PUBLIC KEY. 

In practice this is not 100% accurate with reality, but will give a good idea to the newcomer. For more information, check Wikipedia on the [http://en.wikipedia.org/wiki/Diffie-Hellman Diffie-Hellman] protocol. For even more info go to the public library and grab a copy of the [http://www.cacr.math.uwaterloo.ca/hac/ "Handbook of Applied Cryptography"] by Alfred J. Menezes, Paul C. van Oorschot and Scott A. Vanstone. This book is also available online for free at the above site. 

One consequence of the above is that if you cypher a message to me, and you loose the original uncyphered message you will no longer be able to retrieve it from the cyphered version. 

=== Signatures ===

We already saw how someone can send us a cyphered message if they have our public key. But how do we know that the author of the message is really who he claims to be? Or in other words: If I receive an email from you how do I really know it was you and not someone else claiming to be you? 

Remember me saying that PKC was not as simple as I had said? The idea is that when you cypher a message to me you sign it with your private key so that, when I receive it, I can first use your public key to check your signature and then use my private key to decypher the message. As you can see we could not do that in the setup I described before. 

It's also very important to sign messages so that you don't have to cypher them beforehand. Now you can create messages that can be read by anyone, but that come with your "branding". And if any single character is changed in the message it can (and will) be detected. 

=== Key Servers and Signed Keys ===

But let's say that I have no previous contact with you until you send me a message: how do I get your public key, and how do I really know it is yours? 

To solve this problem public Key Servers were created. When you create your key pair (Public and Private key), you send your public key to the key server. After this everyone can retrieve your key from there. This solves the problem of finding the key. But how do I really know that that key is the author's key? For this another concept must be introduced, and that is key signing: 

Key signing means that if I have the public key of another person, and I know ''for sure'' that it is really that persons key (it is my personal friend, someone I know in real life, etc.) I can sign that public key and send it to keyservers, that way I am telling the world: "This key really belongs to the person it claims to belong.". That way persons that have my public key and trust me can use that trust to trust other keys. 

This can sometimes be confusing so let's see a real world situation. 

Let's imagine a 3 person situation: John, Mary, and Lisa. John is a good friend of Mary but does not know Lisa; Lisa is a good friend of Mary but does not know John. One day Lisa sends John a signed email. John will fetch Lisa's Public Key from the keyserver and test the message, if all went ok he will see that whoever wrote that message also created that key. But how do I know it was really the person it claims to be? 

He then sees that it is signed by Mary, which he can check because he already has Mary's key and he trusts that key. With this ring of trust he continues to conclude that the email he received was really written by Lisa. 

You are now ready to use this guide, you can go back to chapter 1 and learn how to use gpg. 

== Final thoughts and Credits ==

=== Some problems ===

I had some problems with photos in keys. Check the version you are using. If you have GnuPG 1.2.1-r1 and up you are probably OK, older versions may have problems. Also most keyservers don't like keys with photos, so you are better if you don't add photos. 

The latest versions of gnupg don't seem to work with the <code>gpg --send-keys</code> that was used so send all keys in your keyring to the public server. 

=== What is not here ===

<code>gpg</code> is a very complex tool, it lets you do much more than what I have covered here. This document is for the user who is new to GnuPG. For more information, you should check the[http://www.gnupg.org GnuPG Website] . 

I did not write about other tools like <code>pgp4pine</code> , <code>gpgpine</code> , <code>evolution</code> and maybe Windows tools, but I will probably extend this document in the future. 

=== Credits ===

John Michael Ashley's [http://www.gnupg.org GnuPG Handbook] it is a very good book for beginners. 

Swift (Sven Vermeulen) for pushing me to re-write this. 

Everyone in the #gentoo-doc team you guys rock. 

Tiago Serra for getting me back to the privacy track. 

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Gustavo Felisberto
* John P. Davis
* Sven Vermeulen
* nightmorph

[[Category:Server and Security]]
