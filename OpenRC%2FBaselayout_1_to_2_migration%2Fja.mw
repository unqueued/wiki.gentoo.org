<languages />


{{Metadata|abstract=このガイドでは baselayout-1 から  OpenRC を使った baselayout-2 への移行について案内します。}}

このガイドでは baselayout-1 から OpenRCを使ったbaselayout-2 への移行について案内します。

== 背景 ==

=== baselayout とは? ===

Baselayoutは、{{Path|/etc/hosts}}など、すべてのシステムが正しく機能するために必要なファイルの基本セットを提供します。これはGentooで使われている基本的なファイルシステムレイアウトを提供しています。(すなわち {{Path|/etc}}, {{Path|/var}}, {{Path|/usr}}, {{Path|/home}}) 

=== OpenRC とは? ===

OpenRCは依存関係ベースのrc(run command)システムであり、システムから提供されるinit(通常は{{Path|/sbin/init}})と共に動作します。OpenRCは{{Path|/sbin/init}}を置き換えるものではありません。Gentooで使用されるデフォルトのinitは <code>sys-apps/sysvinit</code>です。一方、Gentoo/FreeBSDは<code>sys-freebsd/freebsd-sbin</code>から提供されるFreeBSD initを採用しています。 

=== なぜ移行するの? ===

元々Gentooのrcシステムはbaselayout 1の中で作成され、全て<tt>[[bash]]</tt>で記述されていましたが、このためにいくつかの制限が発生しました。例えば、一部のシステムコールはブート時に呼び出す必要がありますが、この部分はC言語で記述されました。また、これらの呼出し順序はそれぞれ静的に決まったため、rcシステムの実行時間増大の原因となりました。 

さらに、GentooがGentoo/FreeBSDや組み込み向けGentoo等、他のプラットフォームに広がるにつれて、<tt>bash</tt>ベースのrcシステムでは対応できなくなりました。このため、C言語で記述され、POSIX準拠のシェルのみを必要とするbaselayout 2の開発が始まりました。
baselayout 2の開発期間中、baselayoutは単に基本となるファイル群とGentoo向けのファイルシステム構成を提供すればよく、rcシステムはそれぞれのパッケージに分割されることが決定されました。
このような経緯でOpenRCは誕生したのです。

OpenRCは2010年までに[http://roy.marples.name/openrc Roy Marples]によって開発されました。そして現在は[[Project:OpenRC|Gentoo OpenRC Project]]によってメンテナンスされています。OpenRCは現在ある全てのGentoo (つまりGentoo Linux、Gentoo/FreeBSD、組み込みGentoo、Gentoo Vserver)をサポートし、FreeBSDやNetBSD等の他のプラットフォームもサポートしています。

=== OpenRC への移行 ===

OpenRCへの移行は本当に単純です。この移行はパッケージ管理による通常の更新の一部として実施されるでしょう。最も重要なステップは<code>>=sys-apps/baselayout-2</code>と{{Package|sys-apps/openrc}} がインストールされた直後です。システムをリブートする''前''に<tt>dispatch-conf</tt>もしくは類似のツールで、{{Path|/etc}}にあるファイルをアップデートすることが最重要です。'''このアップデートに失敗した場合、システムは二度とブートしません'''。その場合、LiveCDを使用してシステムを修復しなければなりません。 

設定ファイルをアップデートした際、リブートの前に確認しなければならないいくつかの点があります。 

=== /etc/conf.d/rc ===

{{Path|/etc/conf.d/rc}}は廃止されました。このファイルに記述されていた全ての設定は、{{Path|/etc/rc.conf}}に適切に移行しなければなりません。{{Path|/etc/rc.conf}}と{{Path|/etc/conf.d/rc}}の差分を確認して設定を移行してください。設定変更後、{{Path|/etc/conf.d/rc}}ファイルを手動で消去してください。 

=== カーネルモジュール ===

通常、いくつかのカーネルモジュールはブート時に自動的にロードされます。これらの設定はカーネルに渡すパラメータと共に{{Path|/etc/modules.autoload.d/kernel-2.6}}に記述していました。baselayout 2ではこのファイルは使用されません。代わりに自動でロードされるモジュールとパラメータは、カーネルのバージョンに関わらず{{Path|/etc/conf.d/modules}}に記述されます。 

旧来のスタイルでは以下のように記述されていました。 

{{FileBox|filename=/etc/modules.autoload.d/kernel-2.6|1=
<pre>
ivtv
cx88_dvb video_br=2
</pre>
}}

上記を新しいスタイルで記述すると以下のようになります。 

{{FileBox|filename=/etc/conf.d/modules|1=
<pre>
# Modules autoloaded at boot
modules_2_6="ivtv cx88_dvb"
# Module parameters
module_cx88_dvb_args_2_6="video_br=2"
</pre>
}}

最初の例では、モジュールとパラメータは2.6.x系のカーネルのみに適用されました。しかし、新しい設定スタイルではカーネルバージョンを元に、よりきめ細かくモジュールとパラメータをコントロールできます。 

{{Important/ja|複数の'''module*'''変数に記載された設定は累積されません。特定のバージョンに固有な設定は、そうでない一般的な設定を上書きします。}}

{{Note/ja|'''module_'''と'''modules_'''の違いに注意してください。}}

詳細な例は次のようになります。 

{{FileBox|filename=/etc/conf.d/modules|1=
<pre>
# Only load ivtv for 2.6.23-gentoo-r5
modules_2_6_23_gentoo_r5="ivtv"
# Only load cx88_dvb for 2.6.23 kernels (other than -gentoo-r5)
modules_2_6_23="cx88_dvb"
# Only load tun and usbserial for 2.6.x series kernels where x != 23
modules_2_6="tun usbserial"
# Otherwise load ochi1394 and ieee1394
modules="ohci1394 ieee1394"
  
# For 2.6.23-gentoo-r5, pass video_br=2 to cx88_dvb
module_cx88_dvb_args_2_6_23_gentoo_r5="video_br=2"
# For 2.6.x series kernels, always pass vendor and product
module_usbserial_args_2_6="vendor=0x1410 product=0x2110"
# Always pass debug to ieee1394
module_ieee1394_args="debug" 
</pre>
}}

=== boootランレベル ===

<code>boot</code>ランレベルは全ての performs several important steps for every machine. For example, making sure the root filesystem is mounted read/write, the filesystems are checked for errors, the mountpoints are available, and the {{Path|/proc}} pseudo-filesystem is started at boot.

With OpenRC, volume management services for block storage devices are no longer run automatically at boot. This includes [[LVM]], RAID, swap, device-mapper (dm), dm-crypt, and the like. System administrators must ensure the appropriate initscript for these services has been added to the <code>boot</code> runlevel, otherwise it is possible the system will not be able to boot.

While the OpenRC ebuild will attempt to do this migration, administrators should verify the volume management services have been migrated properly: 

{{RootCmd|ls -l /etc/runlevels/boot/}}

If {{Path|root}}, {{Path|procfs}}, {{Path|mtab}}, {{Path|swap}}, and {{Path|fsck}} are missing in the above listing, perform the following commands to add them to the <code>boot</code> runlevel: 

{{RootCmd
|rc-update add root boot
|rc-update add procfs boot
|rc-update add mtab boot
|rc-update add fsck boot
|rc-update add swap boot
}}

If the system uses mdraid and [[LVM]] and they are not mentioned in the list above, then the following initscripts should be added to the <code>boot</code> runlevel:

{{RootCmd
|rc-update add mdraid boot
|rc-update add lvm boot
}}

=== Udev ===

OpenRC no longer starts {{Path|udev}} by default; it does need to be present in the <code>sysinit</code> runlevel to be started. The OpenRC ebuild should detect if {{Path|udev}} was previously enabled and add it to the <code>sysinit</code> runlevel. However, to be safe, check if {{Path|udev}} is present: 

{{RootCmd|ls -l /etc/runlevels/sysinit|output=<pre>
lrwxrwxrwx 1 root root 14 2009-01-29 08:00 /etc/runlevels/sysinit/udev -> \
/etc/init.d/udev
</pre>
}}

If {{Path|udev}} is not listed, add it to the correct runlevel: 

{{RootCmd|rc-update add udev sysinit}}

=== ネットワーク ===

Due to baselayout and OpenRC being broken into two different packages, the net.eth0 initscript may disappear during the upgrade process. To replace this initscript and re-add it to the default runlevel, please perform the following: 

{{RootCmd
|cd /etc/init.d
|ln -s net.lo net.eth0
|rc-update add net.eth0 default
}}

When missing any other network initscripts, follow the instructions above to re-add them. Simply replace <code>eth0</code> with the name of the missing network device. 

Also, {{Path|/etc/conf.d/net}} (oldnet) no longer uses <tt>bash</tt>-style arrays for configuration. Please review {{Path|/usr/share/doc/openrc-<version>/net.example}} for configuration instructions. Conversion should be relatively straight-forward, converting to newlines for separate entries, for example a static IP assignment would change as follows: 

{{FileBox|filename=/etc/conf.d/net|title=旧スタイル|1=
<pre>
config_eth0=( "192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255" )
routes_eth0=( "default via 192.168.1.100" "10.0.0.0/8 via 192.168.1.2" )
</pre>
}}

{{FileBox|filename=/etc/conf.d/net|title=新たなスタイル|1=
<pre>
config_eth0="192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255"
routes_eth0="default via 192.168.1.100
10.0.0.0/8 via 192.168.1.2"
</pre>
}}

=== 時計 ===

Clock settings have been renamed from {{Path|/etc/conf.d/clock}} to the system's native tool for adjusting the clock. On Linux it will be {{Path|/etc/conf.d/hwclock}} and on FreeBSD it will be {{Path|/etc/conf.d/adjkerntz}}. Systems without a working real time clock (RTC) chip should use {{Path|/etc/init.d/swclock}}, which sets the system time based on the mtime of a file which is created at system shutdown. The initscripts in {{Path|/etc/init.d/}} have also been renamed accordingly, so make sure the appropriate script for the system has been added to the boot runlevel. 

Additionally, the <code>TIMEZONE</code> variable is no longer in this file. Its contents are instead found in the {{Path|/etc/timezone}} file. If it does not exist, it will need to be created with the appropriate timezone. Please review both of these files to ensure their contents. 

The proper value for this file is the path relative to the timezone from the {{Path|/usr/share/zoneinfo}} directory. For example, for users living on the east coast of the United States, the following would be a correct setting: 

{{FileBox|filename=/etc/timezone|1=
<pre>
America/New_York
</pre>
}}

=== XSESSION ===

The <code>XSESSION</code> variable is no longer found in {{Path|/etc/rc.conf}}. Instead, the <code>XSESSION</code> variable can be set on a per-user basis in the {{Path|~/.bashrc}} file (or equivalent), or system-wide in {{Path|/etc/env.d/}}. 

Here is an example of setting the default <code>XSESSION</code> for the whole system: 

{{RootCmd|echo 'XSESSION{{=}}"Xfce4"' > /etc/env.d/90xsession}}

{{Important|<tt>env-update</tt> must be ran after creating a file in {{Path|/etc/env.d}}. The user must logout and login for the changes to take effect. If the variable has been set in {{Path|~/.bashrc}}, re-source the file by running <tt>source ~/.bashrc</tt>.}}

=== EDITOR と PAGER ===

The <code>EDITOR</code> variable is no longer found in {{Path|/etc/rc.conf}}. Both <code>EDITOR<code/> and <code>PAGER</code> are set by default in {{Path|/etc/profile}}. Adjust as needed in the {{Path|~/.bashrc}} file (or equivalent) or create {{Path|/etc/env.d/99editor}} and set the system default there. 

{{Important|<tt>env-update</tt> must be ran after creating a file in {{Path|/etc/env.d}}. The user must logout and login for the changes to take effect. If the variable has been set in {{Path|~/.bashrc}}, re-source the file by running <tt>source ~/.bashrc</tt>.}}

=== Boot log ===

Previously, the boot process could be logged using the {{Package|app-admin/showconsole}} package. However, OpenRC now handles all logging internally, so there is no need for the hacks that <tt>showconsole</tt> employed. <tt>showconsole</tt> can now be safely unmerged. To continue logging boot messages, set the appropriate variable (<code>rc_logger</code>) in the {{Path|/etc/rc.conf}} file. Logs will appear in {{Path|/var/log/rc.log}}. 

{{FileBox|filename=/etc/rc.conf|title=ロギングを有効にする|1=
rc_logger="YES"
</pre>
}}

=== {{Path|local.start}} and {{Path|local.stop}} ===

With OpenRC, {{Path|/etc/conf.d/local.start}} and {{Path|local.stop}} have been deprecated. During the migration to OpenRC, the files are moved to {{Path|/etc/local.d}} and gain the suffix {{Path|.start}} or {{Path|.stop}}. OpenRC then executes those in alpha-numeric order. 

=== System sub-types: Virtualization special cases ===

Earlier versions of OpenRC detected multiple types of virtualization, which was used to note when certain init scripts should be skipped, using the <code>keyword</code> call in the <code>depend</code> functions. 

However, as of the 0.7.0 release, administers are required to explicitly configure the sub-type using the <code>rc_sys</code> variable in {{Path|/etc/rc.conf}}. The sub-type should be set to match the virtualization environment that the given root is in. In general, the non-empty <code>rc_sys</code> value should be within the virtual containers; The host node will have <code>rc_sys=""</code>. 

{{Important|If a specific sub-type does not exist, use the default of an empty string <code>""</code>. If the variable is unset, a warning will be printed and there will be an attempt to use the old detection algorithm.}}

{{Note|When the default value for automatic detection is unknown temporarily comment out the <code>rc_sys</code> variable and run the detection command: <tt>rc -S</tt>.}}

{{FileBox|filename=/etc/rc.conf|title=システムのサブタイプを無しに設定|1=
<pre>
rc_sys=""
</pre>
}}

The detection algorithm had to be replaced with manual configuration due to the introduction of new sub-types and changes to the kernel that made prior detection unreliable. 

{| class="table" style="text-align: left;" 
|- 
! Subtype
! Description
! Notes
|- 
| 
| Default, no sub-type
| Not the same as unset; FreeBSD, Linux and NetBSD
|- 
| jail
| FreeBSD jails
| 
|- 
| lxc
| Linux Containers
| Not auto-detected
|- 
| openvz
| Linux OpenVZ
| 
|- 
| prefix
| Prefix
| Not auto-detected; FreeBSD, Linux & NetBSD
|- 
| vserver
| Linux vserver
| 
|- 
| xen0
| Xen0 Domain
| Linux & NetBSD
|- 
| xenU
| XenU Domain
| Linux & NetBSD
|-
|}

=== Cleaning up stale configuration files ===

After migration, there will be files left on the file system that are not cleaned up by Portage. Those are configuration files which are protected by Portage' configuration file protection feature.

The most notable example would be {{Path|/etc/conf.d/net.example}} which is superseded by {{Path|/usr/share/doc/openrc-*/net.example.bz2}}. 

=== 仕上げ ===

Once finished updating the config files and initscripts, the last thing to do is to type <tt>reboot</tt> with root privileges at a terminal. This is necessary because system state information is not preserved during the upgrade, so a fresh boot is needed. 

== Changed functionality ==

=== The pause action ===

Previously it was possible to temporarily stop a service without taking down all the depending services by using <tt>/etc/init.d/service pause</tt>. In OpenRC, the <code>pause</code> action was removed; this functionality is supported by the <tt>/etc/init.d/service --nodeps stop</tt> , which also works in the old baselayout. 

=== rootfs entry in {{Path|/etc/mtab}} ===

Previously, the initial <code>rootfs</code> entry was removed from {{Path|/etc/mtab}}, and only the real root {{Path|/}} entry was present. The duplicate rootfs item was actually added back during shutdown. In OpenRC, both entries must be present for full support of initramfs and tmpfs-on-root. This also means that less writing is required during shutdown. 


{{Migrated|originalauthors=cardoe, nightmorph, robbat2, uberlord}}

[[Category:Server and Security]]
