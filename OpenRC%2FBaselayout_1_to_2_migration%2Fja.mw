{{Deprecated}}
<languages />


{{Metadata|abstract=このガイドでは baselayout-1 から OpenRCを使ったbaselayout-2 への移行について説明します。}}

このガイドでは baselayout-1 から OpenRCを使ったbaselayout-2 への移行について説明します。　

== 背景 ==

=== baselayout とは? ===

Baselayoutは、{{Path|/etc/hosts}}など、すべてのシステムが正しく機能するために必要なファイルの基本セットを提供します。これはGentooで使われている基本的なファイルシステムレイアウトを提供しています。(すなわち {{Path|/etc}}, {{Path|/var}}, {{Path|/usr}}, {{Path|/home}}) 

=== OpenRC とは? ===

<div class="mw-translate-fuzzy">
OpenRCは依存関係ベースのrc(run command)システムであり、システムから提供されるinit(通常は{{Path|/sbin/init}})と共に動作します。OpenRCは{{Path|/sbin/init}}を置き換えるものではありません。Gentooで使用されるデフォルトのinitは <code>sys-apps/sysvinit</code>です。一方、Gentoo/FreeBSDは<code>sys-freebsd/freebsd-sbin</code>から提供されるFreeBSD initを採用しています。
</div> 

=== なぜ移行するの? ===

<div class="mw-translate-fuzzy">
元々Gentooのrcシステムはbaselayout 1の中で作成され、全て<tt>[[bash]]</tt>で記述されていましたが、このためにいくつかの制限が発生しました。例えば、一部のシステムコールはブート時に呼び出す必要がありますが、この部分はC言語で記述されました。また、これらの呼出し順序はそれぞれ静的に決まったため、rcシステムの実行時間増大の原因となりました。
</div> 

<div class="mw-translate-fuzzy">
さらに、GentooがGentoo/FreeBSDや組み込み向けGentoo等、他のプラットフォームに広がるにつれて、<tt>bash</tt>ベースのrcシステムでは対応できなくなりました。このため、C言語で記述され、POSIX準拠のシェルのみを必要とするbaselayout 2の開発が始まりました。
baselayout 2の開発期間中、baselayoutは単に基本となるファイル群とGentoo向けのファイルシステム構成を提供すればよく、rcシステムはそれぞれのパッケージに分割されることが決定されました。
このような経緯でOpenRCは誕生したのです。
</div>

OpenRCは2010年までに[http://roy.marples.name/openrc Roy Marples]によって開発されました。そして現在は[[Project:OpenRC|Gentoo OpenRC Project]]によってメンテナンスされています。OpenRCは現在ある全てのGentoo (つまりGentoo Linux、Gentoo/FreeBSD、組み込みGentoo、Gentoo Vserver)をサポートし、FreeBSDやNetBSD等の他のプラットフォームもサポートしています。

=== OpenRC への移行 ===

<div class="mw-translate-fuzzy">
OpenRCへの移行は本当に単純です。この移行はパッケージ管理による通常の更新の一部として実施されるでしょう。最も重要なステップは<code>>=sys-apps/baselayout-2</code>と{{Package|sys-apps/openrc}} がインストールされた直後です。システムをリブートする''前''に<tt>dispatch-conf</tt>もしくは類似のツールで、{{Path|/etc}}にあるファイルをアップデートすることが最重要です。'''このアップデートに失敗した場合、システムは二度とブートしません'''。その場合、LiveCDを使用してシステムを修復しなければなりません。
</div> 

設定ファイルをアップデートした際、リブートの前に確認しなければならないいくつかの点があります。 

=== /etc/conf.d/rc ===

{{Path|/etc/conf.d/rc}}は廃止されました。このファイルに記述されていた全ての設定は、{{Path|/etc/rc.conf}}に適切に移行しなければなりません。{{Path|/etc/rc.conf}}と{{Path|/etc/conf.d/rc}}の差分を確認して設定を移行してください。設定変更後、{{Path|/etc/conf.d/rc}}ファイルを手動で消去してください。 

=== カーネルモジュール ===

通常、いくつかのカーネルモジュールはブート時に自動的にロードされます。これらの設定はカーネルに渡すパラメータと共に{{Path|/etc/modules.autoload.d/kernel-2.6}}に記述していました。baselayout 2ではこのファイルは使用されません。代わりに自動でロードされるモジュールとパラメータは、カーネルのバージョンに関わらず{{Path|/etc/conf.d/modules}}に記述されます。 

旧来のスタイルでは以下のように記述されていました。 

{{FileBox|filename=/etc/modules.autoload.d/kernel-2.6|1=
<pre>
ivtv
cx88_dvb video_br=2
</pre>
}}

上記を新しいスタイルで記述すると以下のようになります。 

{{FileBox|filename=/etc/conf.d/modules|1=
<pre>
# Modules autoloaded at boot
modules_2_6="ivtv cx88_dvb"
# Module parameters
module_cx88_dvb_args_2_6="video_br=2"
</pre>
}}

最初の例では、モジュールとパラメータは2.6.x系のカーネルのみに適用されました。しかし、新しい設定スタイルではカーネルバージョンを元に、よりきめ細かくモジュールとパラメータをコントロールできます。 

<div class="mw-translate-fuzzy">
{{Important/ja|複数の'''module*'''変数に記載された設定は累積されません。特定のバージョンに固有な設定は、そうでない一般的な設定を上書きします。}}
</div>

<div class="mw-translate-fuzzy">
{{Note/ja|'''module_'''と'''modules_'''の違いに注意してください。}}
</div>

詳細な例は次のようになります。 

{{FileBox|filename=/etc/conf.d/modules|1=
<pre>
# Only load ivtv for 2.6.23-gentoo-r5
modules_2_6_23_gentoo_r5="ivtv"
# Only load cx88_dvb for 2.6.23 kernels (other than -gentoo-r5)
modules_2_6_23="cx88_dvb"
# Only load tun and usbserial for 2.6.x series kernels where x != 23
modules_2_6="tun usbserial"
# Otherwise load ochi1394 and ieee1394
modules="ohci1394 ieee1394"
  
# For 2.6.23-gentoo-r5, pass video_br=2 to cx88_dvb
module_cx88_dvb_args_2_6_23_gentoo_r5="video_br=2"
# For 2.6.x series kernels, always pass vendor and product
module_usbserial_args_2_6="vendor=0x1410 product=0x2110"
# Always pass debug to ieee1394
module_ieee1394_args="debug" 
</pre>
}}

=== bootランレベル ===

<code>boot</code>ランレベルは全ての機器にとって重要ないくつかのステップを実行します。例えば、ルートファイルシステムが読み書き可能な状態でマウントできることを保証します。またファイルシステムにエラーが無いこと、マウントポイントが存在することを確認し、ブート時に{{Path|/proc}}疑似ファイルシステムを起動します。

OpenRCでは、ブロックストレージデバイスに対するボリューム管理サービスは、ブート時、自動的には起動されません。ここで対象になるのは[[LVM]]、RAID、swap、device-mapper (dm)、dm-crypt、およびその類似サービスです。システム管理者は、これらのサービスのinitscriptを<code>boot</code>ランレベルに追加しなければなりません。そうでない場合、そのシステムは二度と起動しないでしょう。

一方、OpenRCのebuildはこの移行を自ら試みます。管理者はボリューム管理サービスが適切に移行されたことを検証しなければなりません。 

{{RootCmd|ls -l /etc/runlevels/boot/}}

もし上記リストに{{Path|root}}、{{Path|procfs}}、{{Path|mtab}}、{{Path|swap}}、{{Path|fsck}}が無い場合は、以下のコマンドで<code>boot</code>ランレベルに追加しなければなりません。 

{{RootCmd|rc-update add root boot
|rc-update add procfs boot
|rc-update add mtab boot
|rc-update add fsck boot
|rc-update add swap boot}}

もしシステムがmdraidと[[LVM]]を使っていて、かつ上記リストに含まれていない場合、以下のinitscriptを<code>boot</code>ランレベルに追加しなければなりません。

{{RootCmd|rc-update add mdraid boot
|rc-update add lvm boot}}

=== udev ===

OpenRCは{{Path|udev}}をデフォルトでは起動しなくなったため、{{Path|udev}}を<code>sysinit</code>ランレベルに追加しなければなりません。OpenRCのebuildは過去に{{Path|udev}}が有効になっていたかを検出して、自動的に<code>sysinit</code>ランレベルに追加します。しかし、念のために次のコマンドで確認が必要です。 

{{RootCmd|ls -l /etc/runlevels/sysinit|output=<pre>
lrwxrwxrwx 1 root root 14 2009-01-29 08:00 /etc/runlevels/sysinit/udev -> \
/etc/init.d/udev
</pre>
}}

もし{{Path|udev}}が無かった場合、次のコマンドで適切なランレベルに追加してください。 

{{RootCmd|rc-update add udev sysinit}}

=== ネットワーク ===

baselayoutとOpenRCが２つの異なるパッケージに分割されたため、アップグレードの過程でnet.eth0 initscriptは無くなる可能性があります。このinitscriptを置き換えて再度defaultランレベルに追加するため、次を実行してください。 

{{RootCmd|cd /etc/init.d
|ln -s net.lo net.eth0
|rc-update add net.eth0 default}}

他のネットワークのinitscriptが無くなった時は、上記コマンドで修復してください。単純に、<code>eth0</code>を無くなったネットワークデバイス名に置き換えてください。 

<div class="mw-translate-fuzzy">
さらに、{{Path|/etc/conf.d/net}} (oldnet)は、その設定について<tt>bash</tt>スタイルの配列を使用しません。新しいやり方については{{Path|/usr/share/doc/openrc-<version>/net.example}}を参照してください。変換は直感的にできるでしょう。例えば、静的なIPアドレス割り当ては以下のように変更します。
</div> 

{{FileBox|filename=/etc/conf.d/net|title=旧スタイル|1=
<pre>
config_eth0=( "192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255" )
routes_eth0=( "default via 192.168.1.100" "10.0.0.0/8 via 192.168.1.2" )
</pre>
}}

{{FileBox|filename=/etc/conf.d/net|title=新たなスタイル|1=
<pre>
config_eth0="192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255"
routes_eth0="default via 192.168.1.100 10.0.0.0/8 via 192.168.1.2"
</pre>
}}

=== 時計 ===

時刻の設定は{{Path|/etc/conf.d/clock}}から、時刻を調整するためのシステム固有のツールにリネームされました。これはLinuxでは{{Path|/etc/conf.d/clock}}となり、FreeBSDでは{{Path|/etc/conf.d/clock}}となります。実時間で常時動作するクロック（Read Time Clock、RTC）のチップを搭載していないシステムは{{Path|/etc/init.d/swclock}}を使います。この場合、システム時刻はブート時に生成したファイルのmtimeから決められます。
{{Path|/etc/init.d/}}の中のinitscriptも適切にリネームされました。適切なスクリプトが{{Path|/etc/init.d/}}ランレベルに追加されていることを確認してください。 

<div class="mw-translate-fuzzy">
さらに、このファイルでは<code>TIMEZONE</code>変数はもう使用されません。この設定は{{Path|/etc/timezone}}ファイルにあります。もしファイルが存在しない場合、適切なタイムゾーンと共に生成されなければなりません。これらのファイルが正しく生成されていることを確認してください。
</div> 

このファイルに設定する値は、{{Path|/usr/share/zoneinfo}}ディレクトリから該当するタイムゾーンへの相対パスとなります。例えばアメリカ東海岸に住むユーザにとって、正しい設定は次のようになるでしょう。 

{{FileBox|filename=/etc/timezone|1=
<pre>
America/New_York
</pre>
}}

=== XSESSION ===

<div class="mw-translate-fuzzy">
<code>XSESSION</code>変数は{{Path|/etc/rc.conf}}から削除されました。代わりに<code>XSESSION</code>は、{{Path|~/.bashrc}}ファイルのようなユーザ毎の設定ファイルに、もしくは{{Path|/etc/env.d/}}のようなシステム全体の設定に記述します。
</div> 

<div class="mw-translate-fuzzy">
以下のコマンドは、システム全体に適用されるデフォルトの<code>XSESSION</code>を決定します。
</div> 

{{RootCmd|echo 'XSESSION{{=}}"Xfce4"' > /etc/env.d/90xsession}}

<div class="mw-translate-fuzzy">
{{important/ja|{{Path|/etc/env.d}}配下のファイルを変更した場合は、<tt>env-update</tt>を実行し、ユーザは一度ログアウト後、再度ログインしなければなりません。もし変数を{{Path|~/.bashrc}}で設定している場合は、<tt>source ~/.bashrc</tt>で変更を反映する必要があります。}}
</div>

=== EDITOR と PAGER ===

<div class="mw-translate-fuzzy">
<code>EDITOR</code>変数も{{Path|/etc/rc.conf}}から削除されました。<code>EDITOR</code> と <code>PAGER</code>はデフォルトでは{{Path|/etc/profile}}で設定されます。この設定は{{Path|~/.bashrc}}ファイル（bashの場合）でユーザ毎に、もしくは{{Path|/etc/env.d/99editor}}でシステム全体の値を決めることができます。
</div> 

<div class="mw-translate-fuzzy">
{{important/ja|{{Path|/etc/env.d}}配下のファイルを変更した場合は、<tt>env-update</tt>を実行し、ユーザは一度ログアウト後、再度ログインしなければなりません。もし変数を{{Path|~/.bashrc}}で設定している場合は、<tt>source ~/.bashrc</tt>で変更を反映する必要があります。}}
</div>

=== ブートログ ===

<div class="mw-translate-fuzzy">
これまで、ブートプロセスのログは{{Package|app-admin/showconsole}}パッケージを使って取得できました。しかしOpenRCは全てのログを内部で管理します。そのため、<tt>showconsole</tt>を使ったハックはもう必要ありません。<tt>showconsole</tt>は安全にunmerge可能です。引き続きブートメッセージのログを取得する場合は、{{Path|/etc/rc.conf}}ファイルの適切な変数（<code>rc_logger</code>）を設定してください。このログは{{Path|/var/log/rc.log}}に保存されます。
</div> 

{{FileBox|filename=/etc/rc.conf|title=ロギングを有効にする|1= <pre> rc_logger="YES" </pre> }}

=== local.start と local.stop ===

OpenRCでは{{Path|/etc/conf.d/local.start}}と{{Path|local.stop}}は使用されなくなりました。OpenRCへの移行期間中、これらのファイルを{{Path|/etc/local.d}}に移動して、サフィックス{{Path|.start}}もしくは{{Path|.stop}}を付与しておけば、OpenRCはこれらのファイルをアルファベット順に実行します。 

=== システム サブタイプ：仮想化の場合 ===

初期のOpenRCは複数の仮想化のタイプを検出できました。この情報は<code>depend</code>関数の<code>keyword</code>を呼び出しを通して、いくつかのinitscriptをスキップするために使用されていました。 

しかし、0.7.0リリース時点で、サブタイプは{{Path|/etc/rc.conf}}ファイルの<code>rc_sys</code>変数に明確に設定しなければならなくなりました。このサブタイプは、ルートが存在する仮想化環境に合致しなければなりません。一般的に空でない<code>rc_sys</code>は仮想環境で動作するシステムで使用されます。逆に仮想環境のホストは<code>rc_sys=""</code>を持つでしょう。 

{{Important/ja|もし固有のサブタイプが存在しない場合、空の文字列<code>""</code>をデフォルトとして使用しなければなりません。もし変数がセットされない場合、警告が表示されると共に、従来の検出アルゴリズムを試みます。}}

<div class="mw-translate-fuzzy">
{{Note/ja|自動検出で設定される値が不明な時は、暫定的に<code>rc_sys</code>変数をコメントアウトして、検出するためのコマンド<tt>rc -S</tt>を実行してください。}}
</div>

{{FileBox|filename=/etc/rc.conf|title=システムのサブタイプを無しに設定|1=
<pre>
rc_sys=""
</pre>
}}

新しいサブタイプを導入するため、また事前検出が信頼できないカーネルに変更するため、自動検出はマニュアルでの設定に変更されました。 

{| class="table" style="text-align: left;" 
|- 
! Subtype
! Description
! Notes
|- 
| 
| デフォルト、サブタイプ無し
| 未設定とは異なります。FreeBSD、Linux、NetBSDを想定しています。
|- 
| jail
| FreeBSDのjail
| 
|- 
| lxc
| Linux Containers
| 自動検出では検出されません。
|- 
| openvz
| Linux OpenVZ
| 
|- 
| prefix
| Prefix
| 自動検出では検出されません。FreeBSD、Linux、NetBSDを想定しています。
|- 
| vserver
| Linux vserver
| 
|- 
| xen0
| Xen0ドメイン
| Linux、NetBSDを想定しています。
|- 
| xenU
| XenUドメイン
| Linux、NetBSDを想定しています。
|-
|}

=== 使われなくなった設定ファイルの消去 ===

移行後、Portageでは自動的に削除されない設定ファイルがファイルシステムに残ります。これらは各種設定ファイルに対するPortageの保護機能のためです。

最も注目すべき例は{{Path|/etc/conf.d/net.example}}です。このファイルは{{Path|/usr/share/doc/openrc-*/net.example.bz2}}に引き継がれます。 

=== 仕上げ ===

各設定ファイルとinitscriptのアップデート完了後、ターミナルからルート権限でrebootコマンドを入力してください。理由はアップグレードの間、システム状態は適切に保持されないためです。新鮮なブートが必要です。 

== 変更された機能 ==

=== ポーズ動作 ===

<div class="mw-translate-fuzzy">
以前は<tt>/etc/init.d/service pause</tt>を使うことで、あるサービスを、それに依存するサービス全体を停止することなく中断できました。OpenRCでは、この<code>pause</code>動作は非サポートになりました。ただし、同じ機能が、古いbaselayoutでも動作する<tt>/etc/init.d/service --nodeps stop</tt>でサポートされます。
</div> 

=== {{Path|/etc/mtab}}内のrootfsエントリー  ===

これまでは、起動時の<code>rootfs</code>エントリーは{{Path|/etc/mtab}}から削除され、真のルート{{Path|/}}に対応するエントリーだけが存在していました。そしてこの重複したrootfsは、システムのシャットダウンの間に再度追加されていました。OpenRCでは、initramfsとルート上のtmpfsをフルサポートするため２つのrootfsエントリーをサポートします。これにより、シャットダウン時の再追加も不要になりました。 


{{Migrated|originalauthors=cardoe, nightmorph, robbat2, uberlord}}

[[Category:Server and Security]]
