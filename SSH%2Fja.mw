<languages />

{{Metadata|abstract=SSH (Secure Shell) は、Unix ライクな OS の古い telnet ツールを置き換える、暗号化ターミナルプログラムです。}}

{{InfoBox stack
|{{InfoBox homepage|https://www.openssh.com/|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
|{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) は、[[Article description::Unix ライクな OS の古い [[Wikipedia:telnet|telnet]] ツールを置き換える、暗号化ターミナルプログラムです。]]

主要な {{c|ssh}} バイナリが提供するリモートターミナルアクセスに加えて、SSH プログラムスイートには {{c|scp}} ('''S'''ecure '''C'''opy '''P'''rogram) や {{c|sftp}} ('''S'''ecure '''F'''ile '''T'''ransfer '''P'''rotocol) といったその他のツールも含まれるようになっています。

もともと、SSH はフリーではありませんでした。しかしながら、現在最も広く使われているデファクトスタンダードな SSH の実装は Gentoo でもプリインストールされている [https://www.openbsd.org/ OpenBSD] の OpenSSH です。

== インストール ==

=== インストールの確認 ===

Gentoo Linux のほとんどにおいては、OpenSSH が既にシステムにインストールされています。これは ssh コマンドを実行すれば確認できます。インストール済みなら使い方の文章が出力されるはずです:

{{Invocation|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

使い方が出力されない場合、{{c|ssh}} が壊れているか、またはインストールされていません。また、新しい USE フラグを導入するために OpenSSH を単に再ビルドすることもできます。いずれにせよ、使用可能な USE 設定を見てみましょう。

=== USE フラグ ===

{{USEflag|package=net-misc/openssh}}

=== Emerge ===

必要な USE フラグを変更した後には、OpenSSH をインストール(または再ビルド)するのを忘れないでください:

{{emerge|net-misc/openssh|params+=--changed-use}}

== 設定 ==

=== 鍵の作成 ===

安全なシェルを提供するために、暗号鍵が SSH の提供する暗号化、復号化、ハッシュといった機能の管理に使われています。

SSH サービスの初回起動時には、システム鍵が生成されます。鍵は {{c|ssh-keygen}} コマンドを使って(再)生成することができます。

SSH プロトコルバージョン2用の鍵(DSA および RSA アルゴリズム)を生成するには:

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N ""
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""}}

[https://stribika.github.io/2015/01/04/secure-secure-shell.html Secure Secure Shell] の記事では '''Ed25519''' および '''RSA''' 公開鍵アルゴリズムの使用が推奨されています:

{{RootCmd
|/usr/bin/ssh-keygen -t ed25519 -a 100 -f /etc/ssh/ssh_host_dsa_key -N ""
|/usr/bin/ssh-keygen -t rsa -b 4096 -o -a 100 -f /etc/ssh/ssh_host_rsa_key -N ""
}}

=== サーバーの設定 ===

SSH サーバーは設定ファイルの位置変更も含め OpenRC の {{Path|/etc/conf.d/sshd}} で設定することもできますが、通常は {{Path|/etc/ssh/sshd_config}} ファイルで設定されます。サーバーを設定する方法についての詳細は ''sshd_config'' の [[man page]] を参照してください。

セキュリティーに主眼をおいた設定をするために {{Dev|SwifT}} の [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html OpenSSH ガイド]を読むことをおすすめします。

=== クライアントの設定 ===

{{c|ssh}} クライアントや関連プログラム({{c|scp}}、{{c|sftp}} など)は以下のファイルを使って設定できます:

* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

詳細については {{Path|ssh_config}} のマニュアルを読んでください:

{{Cmd|man ssh_config}}

=== パスワードなしの認証 ===

[[git]] サーバーを管理するのに便利です。

==== クライアント ====

クライアントでは、もしまだ行っていなければ、鍵ペアを作成します。これは以下のコマンドで行えます(もちろん、パスワードは'''入力しない'''でください):

{{Cmd|ssh-keygen -t rsa|collapse-output=true|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== サーバー ====

ユーザー用のアカウントがサーバー上に存在することを確認し、クライアントの {{Path|id_rsa.pub}} ファイルをサーバーのユーザーのホームディレクトリーにある {{Path|~/.ssh/authorized_keys}} ファイルの中に配置してください。これは以下のコマンドを'''クライアントコンピューター上'''で実行することで行えます(ここではサーバー上のユーザーのパスワードを入力する必要があります):

{{Cmd|ssh-copy-id <server>|collapse-output=true|output=<pre>/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/larry/.ssh/id_rsa.pub"
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
larry@<server>'s password: 

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh '<server>'"
and check to make sure that only the key(s) you wanted were added.
</pre>}}

これ以降は以下を実行することでパスワードなしでログインできるはずです。

{{cmd|ssh <server>|output=<pre>larry@<server></pre>}}

そしてサーバー側では、{{path|/etc/ssh/sshd_config}} で <code>PasswordAuthentication no</code> を設定するべきです。

==== 単一マシンでのテスト ====

上の手順はローカルでテストすることもできます:

{{Cmd|ssh-keygen -t rsa|collapse-output=true|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

=== 侵入の防止 ===

SSH はよく攻撃されるサービスです。[[sshguard]] や [[fail2ban]] といったツールはログを監視し、繰り返しログインを試行し失敗しているリモートユーザーをブラックリストに追加してくれます。頻繁に攻撃されるシステムを安全に保つには、これらを必要に応じて活用しましょう。

== 使い方 ==

=== サービス ===

==== OpenRC ====

OpenSSH デーモンを default ランレベルに追加する:

{{RootCmd|rc-update add sshd default}}

sshd デーモンを開始するには:

{{RootCmd|rc-service sshd start}}

OpenSSH サーバーは他の OpenRC で管理されているサービスと同様にしてコントロールできます:

{{RootCmd
|rc-service sshd start
|rc-service sshd stop
|rc-service sshd restart
}}

{{Note|サーバーへのアクティブな SSH 接続は、{{c|rc-service sshd restart}} が実行されても影響を受けず維持されます。}}

==== systemd ====

システム起動時に OpenSSH デーモンを起動するには:

{{RootCmd|systemctl enable sshd.service|output=<pre>
Created symlink from /etc/systemd/system/multi-user.target.wants/sshd.service to /usr/lib64/systemd/system/sshd.service.
</pre>}}

OpenSSH デーモンをすぐに開始するには:

{{RootCmd|systemctl start sshd.service}}

サービスが開始されているか確認するには:

{{RootCmd|systemctl status sshd.service}}

=== エスケープシーケンス ===

アクティブな SSH セッションの間にチルダ({{Key|~}})キーを押すと、エスケープシーケンスが開始されます。オプションの一覧を見るには以下を入力してください:

{{GenericCmd|prompt=ssh>|color=white|~?}}

== トラブルシューティング ==

問題への対処に役立つかもしれない、3つの異なるデバッグモードレベルがあります。<code>-v</code> オプションを使うと、SSH は自身の進捗についてデバッグメッセージを出力します。これは接続、認証、そして設定の問題をデバッグする際に有用です。複数の <code>-v</code> オプションを付けるとより詳細な情報が出力されます。最も詳細なのは3番目のレベルです。

{{Cmd
|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv
}}

=== 長時間続いている接続が切断される ===

インターネットに接続するデバイスの多くはネットワークアドレス変換 (Network Address Translation、[[NAT]]) を使っています。これは、家庭やビジネスでよく使われているプライベートネットワーク上のデバイスから、ネットワークで1つの IP アドレスしか持っていないにもかかわらず、外部ネットワークにアクセスするための仕組みです。残念なことに、すべての NAT デバイスが同じに作られているわけではなく、またそのうちいくつかは SSH で使われているような長時間持続し時折使われる TCP 接続を不正に閉じてしまいます。これは一般的に、{{c|ssh}} クライアントプログラムが終了していないにも関わらず突然サーバーと対話できなくなるという形で識別できます。

この問題を解決するために、OpenSSH クライアントとサーバーでは 'keep alive'、すなわちリンクの持続状況を維持・確認するための不可視なメッセージを送信するよう設定できます:

* ''ローカルサーバーに接続しているすべてのクライアントに対して'' keep alive を有効にするには、<code>ClientAliveInterval 30</code> (またはその他の秒単位の値)を {{Path|/etc/ssh/sshd_config}} ファイルで設定します。
* ''ローカルクライアントから接続するすべてのサーバーに対して'' keep alive を有効にするには、<code>ServerAliveInterval 30</code> (またはその他の秒単位の値)を {{Path|/etc/ssh/ssh_config}} ファイルで設定します。

=== X11 フォワーディングでフォワーディングまたはトンネリングされない ===

'''問題点''': X11 フォワーディングを許可するように設定ファイルを変更した後も X アプリケーションがサーバー上で実行され、クライアントにフォワーディングされない。

'''解決策''': おそらく、リモートサーバーやホストへの SSH ログインの間に <var>DISPLAY</var> 変数が unset されたか、または SSH セッションがそれをセットした''後に''セットされています。

この状況をテストするには、リモートログインの後に以下を実行します:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

出力は <code>localhost:10.0</code> か、あるいはサーバー側で <code>X11UseLocalhost no</code> の設定をしている場合は <code>localhost2.local:10.0</code> といったものになるはずです。通常の <code>:0.0</code> が表示されない場合、{{Path|~/.bash_profile}} 中の <var>DISPLAY</var> 変数が unset または再初期化されていないことを確認してください。もしそうなっていたら、SSH ログインの途中で {{Path|~/.bash_profile}} 内のそのコードが実行されないようにするため、<var>DISPLAY</var> 変数のカスタムした初期化をすべて削除またはコメントアウトしてください:

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

上のコマンドの <code>larry</code> は適切なユーザー名に必ず置き換えてください。

この作業を完了させるために使える方法として、ユーザーの {{Path|~/.bashrc}} ファイルでエイリアスを定義するというものがあります。

== 参考 ==

* [[Security_Handbook/Securing_services#SSH|Securing the SSH service]] (セキュリティーハンドブック)
* {{See also|Keychain}}
* {{See also|autossh}}
* {{See also|SCP}}
* {{See also|SFTP}}
* {{See also|SSHFS}}
* [[Handbook:AMD64/Installation/Media/ja#追加可能：SSHデーモンの開始|Gentoo ハンドブック — インストール — SSHデーモンの開始]]
* [[Sakaki%27s_EFI_Install_Guide/Setting_Up_Networking_and_Connecting_via_ssh#Connecting_via_ssh_and_Using_screen]]

== 外部の情報 ==

* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo 開発者 ドキュメント。
* {{package|net-misc/connect}} — [https://bitbucket.org/gotoh/connect/wiki/Home SSH Proxy Command -- connect.c]
* https://lonesysadmin.net/2011/11/08/ssh-escape-sequences-aka-kill-dead-ssh-sessions/amp/ - エスケープシーケンスについてのブログ記事。
* https://hackaday.com/2017/10/18/practical-public-key-cryptography/ - Practical public key cryptography (Hackaday)。
* [https://wiki.archlinux.org/index.php/SSH wiki.archlinux.org の SSH 記事]


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
[[Category:Authentication]]
