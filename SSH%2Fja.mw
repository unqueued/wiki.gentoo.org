<languages />

{{Metadata|abstract=SSH (Secure Shell) は、Unix ライクな OS の古い telnet ツールを置き換える、暗号化ターミナルプログラムです。}}

{{InfoBox stack
|{{InfoBox homepage|https://www.openssh.com/|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
|{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) は、[[Article description::Unix ライクな OS の古い [[Wikipedia:telnet|telnet]] ツールを置き換える、暗号化ターミナルプログラムです。]]

主要な {{c|ssh}} バイナリが提供するリモートターミナルアクセスに加えて、SSH プログラムスイートには {{c|scp}} ('''S'''ecure '''C'''opy '''P'''rogram) や {{c|sftp}} ('''S'''ecure '''F'''ile '''T'''ransfer '''P'''rotocol) といったその他のツールも含まれるようになっています。

もともと、SSH はフリーではありませんでした。しかしながら、現在最も広く使われているデファクトスタンダードな SSH の実装は Gentoo でもプリインストールされている [https://www.openbsd.org/ OpenBSD] の OpenSSH です。

== インストール ==

=== インストールの確認 ===

Most deployments of Gentoo Linux will already have OpenSSH installed on the system. This can be checked by running the {{c|ssh}} command. If it is installed a usage statement should be printed:

{{Invocation|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

If no usage statement is printed {{c|ssh}} is either corrupted or not installed. It is also possible that a user is simply rebuilding OpenSSH to include a new USE configuration. Whatever the case, proceed on to view possible USE settings.

=== USE flags ===

{{USEflag|package=net-misc/openssh}}

=== Emerge ===

After changing the necessary USE flags, do not forget to install (or rebuild) OpenSSH:

{{emerge|net-misc/openssh|params+=--changed-use}}

== 設定 ==

=== Create keys ===

In order to provide a secure shell, cryptographic keys are used to manage the encryption, decryption, and hashing functionalities offered by SSH.

On the first start of the SSH service, system keys will be generated. Keys can be (re)generated using the {{c|ssh-keygen}} command.

To generate the keys for SSH protocol version 2 (DSA and RSA algorithms):

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N ""
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""}}

The article [https://stribika.github.io/2015/01/04/secure-secure-shell.html Secure Secure Shell] suggests using '''Ed25519''' and '''RSA''' public key algorithms with:

{{RootCmd
|/usr/bin/ssh-keygen -t ed25519 -a 100 -f /etc/ssh/ssh_host_dsa_key -N ""
|/usr/bin/ssh-keygen -t rsa -b 4096 -o -a 100 -f /etc/ssh/ssh_host_rsa_key -N ""
}}

=== Server configuration ===

The SSH server is usually configured in the {{Path|/etc/ssh/sshd_config}} file, though it is also possible to perform further configuration in OpenRC's {{Path|/etc/conf.d/sshd}}, including changing the location of the configuration file.  For detailed information on how to configure the server see the ''sshd_config'' [[man page]].

Users should study {{Dev|SwifT}}'s [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html OpenSSH guide] for a security focused configuration.

=== Client configuration ===

The {{c|ssh}} client and related programs ({{c|scp}}, {{c|sftp}}, etc.) can be configured using the following files:

* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

For more information read the {{Path|ssh_config}} manual:

{{Cmd|man ssh_config}}

=== Passwordless authentication ===

Handy for [[git]] server management.

==== Client ====

On the client, if not already done, create a key pair. This can be done by running the following command (of course, '''not entering''' a passphrase):

{{Cmd|ssh-keygen -t rsa|collapse-output=true|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== Server ====

Make sure an account for the user exists on the server, and then place the clients' {{Path|id_rsa.pub}} file into the server's {{Path|~/.ssh/authorized_keys}} file in the user's home directory. This can be done by running the following command '''on the client computer''' (here, the user's passphrase on the server needs to be entered):

{{Cmd|ssh-copy-id <server>|collapse-output=true|output=<pre>/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/larry/.ssh/id_rsa.pub"
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
larry@<server>'s password: 

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh '<server>'"
and check to make sure that only the key(s) you wanted were added.
</pre>}}

Afterwards a passwordless login should be possible doing

{{cmd|ssh <server>|output=<pre>larry@<server></pre>}}

Then on the server, the file {{path|/etc/ssh/sshd_config}} should be set to <code>PasswordAuthentication no</code>.

==== Single machine testing ====

The above procedure can be tested out locally:

{{Cmd|ssh-keygen -t rsa|collapse-output=true|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

=== Intrusion prevention ===

SSH is a commonly attacked service. Tools such as [[sshguard]] and [[fail2ban]] monitor logs and black list remote users who have repeatedly attempted, yet failed to login. Utilize them as needed to secure a frequently attacked system.

== Usage ==

=== Services ===

==== OpenRC ====

Add the OpenSSH daemon to the default runlevel:

{{RootCmd|rc-update add sshd default}}

Start the sshd daemon with:

{{RootCmd|rc-service sshd start}}

The OpenSSH server can be controlled like any other [[OpenRC]]-managed service:

{{RootCmd
|rc-service sshd start
|rc-service sshd stop
|rc-service sshd restart
}}

{{Note|Active SSH connections to the server remain unaffected when issuing {{c|rc-service sshd restart}}.}}

==== systemd ====

To have the OpenSSH daemon start when the system starts:

{{RootCmd|systemctl enable sshd.service|output=<pre>
Created symlink from /etc/systemd/system/multi-user.target.wants/sshd.service to /usr/lib64/systemd/system/sshd.service.
</pre>}}

To start the OpenSSH daemon now:

{{RootCmd|systemctl start sshd.service}}

To check if the service has started:

{{RootCmd|systemctl status sshd.service}}

=== Escape sequences ===

During an active SSH session, pressing the tilde ({{Key|~}}) key starts an escape sequence. Enter the following for a list of options:

{{GenericCmd|prompt=ssh>|color=white|~?}}

== Troubleshooting ==

There are 3 different levels of debug modes that can help troubleshooting issues. With the <code>-v</code> option SSH prints debugging messages about its progress. This is helpful in debugging connection, authentication, and configuration problems. Multiple <code>-v</code> options increase the verbosity. Maximum verbosity is three levels deep.

{{Cmd
|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv
}}

=== Death of long-lived connections ===

Many internet access devices perform Network Address Translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network. Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, even though the {{c|ssh}} client program has not exited.

In order to resolve the issue, OpenSSH clients and servers can be configured to send a 'keep alive', or invisible message aimed at maintaining and confirming the live status of the link:

* To enable keep alive ''for all clients connecting to your local server'', set <code>ClientAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/sshd_config}} file.
* To enable keep alive ''for all servers connected to by your local client'', set <code>ServerAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/ssh_config}} file.

=== X11 forwarding, not forwarding, or tunneling ===

'''Problem''': After having made the necessary changes to the configuration files for permitting X11 forwarding, it is discovered X applications are executing on the server and are not being forwarded to the client.

'''Solution''': What is likely occurring during SSH login into the remote server or host, the <var>DISPLAY</var> variable is either being unset or is being set ''after'' the SSH session sets it.

Test for this scenario perform the following after logging in remotely:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

The output should be something similar to <code>localhost:10.0</code> or <code>localhost2.local:10.0</code> using server side <code>X11UseLocalhost no</code> setting. If the usual <code>:0.0</code> is not displayed, check to make sure the <var>DISPLAY</var> variable within {{Path|~/.bash_profile}} is not being unset or re-initializing. If it is, remove or comment out any custom initialization of the <var>DISPLAY</var> variable to prevent the code in {{Path|~/.bash_profile}} from executing during a SSH login:

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

Be sure to substitute <code>larry</code> in the command above with the proper username.

A trick that works to complete this task would be to define an alias within the users' {{Path|~/.bashrc}} file.

== 参考 ==

* [[Security_Handbook/Securing_services#SSH|Securing the SSH service]] (Security Handbook)
* {{See also|Keychain}}
* {{See also|autossh}}
* {{See also|SCP}}
* {{See also|SFTP}}
* {{See also|SSHFS}}
* [[Handbook:AMD64/Installation/Media#Optional:_Starting_the_SSH_daemon|Gentoo Handbook — Installation — Starting the SSH daemon]]
* [[Sakaki%27s_EFI_Install_Guide/Setting_Up_Networking_and_Connecting_via_ssh#Connecting_via_ssh_and_Using_screen]]

== 外部の情報 ==

* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.
* {{package|net-misc/connect}} — [https://bitbucket.org/gotoh/connect/wiki/Home SSH Proxy Command -- connect.c]
* https://lonesysadmin.net/2011/11/08/ssh-escape-sequences-aka-kill-dead-ssh-sessions/amp/ - A blog entry on escape sequences.
* https://hackaday.com/2017/10/18/practical-public-key-cryptography/ - Practical public key cryptography (Hackaday).
* [https://wiki.archlinux.org/index.php/SSH SSH on wiki.archlinux.org]


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
[[Category:Authentication]]
