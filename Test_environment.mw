Testing your ebuilds (see also [[Package testing]]) can be a tedious task. Beside a simple re-emerge of the package in question, to see whether it merges successfully, a good testing practice usually needs to take one or more of the following questions into account:

* Having a clean gentoo installation to test with: Using your day to day desktop, might miss on dependencies, which you happen to have installed already and thus producing false positives, i.e. letting your ebuild successfully install, while on a new system it would have been failed due to missing dependencies.
* An exhaustive testing of all possible '''USE flag combinations:''' For ebuilds with only a few USE flags, this can be done easily by hand. For packages with a lot of USE flags, such an approach is error-prone. You might be better by writing a shell or python script to enumerate all the possibilities.
* '''Profile testing:''' Here testing of default vs. hardened and multilib vs. no-multilib profiles is of interest. It may for example uncover problems with PIC/PIE code in hardened profiles or problems of missing proper multiclassing in the ebuild. Usually you don't want to switch profiles just for the purpose of testing an ebuild.
* '''Keyword testing:''' This requires the proper hardware and is done by the arch projects.

So to run proper and efficient tests for your ebuild, a dedicated test environment seems necessary. There are several options for this, like using a chroot environment, VM's, a containerized enviroment or even dedicated hardware. The table below summarizes some of the pros and cons of these options.

{| class="table table-striped table-condensed"
|-
! Method !! Pros !! Cons
|-
| [[chroot for package testing|chroot]] || 
* fast setup
* small memory footprint 
|| need to reset the environment after each emerge
|-
| VM 
|| 
* easy to set up from a live DVD 
* snapshot's can be used to avoid reinstallation
|| large memory footprint
|-
| Docker container ||
* fast setup
* re-usable (with some work)
|| large memory footprint, a container should be stateless and needs an external mount
|}

==== Using docker for ebuild testing ====

{{Package|dev-python/ebuildtester}} is a python script for testing ebuilds within an {{Package|app-emulation/docker}} container. The script compiles a docker container with the parameters passed at invocation time and either installs the specified package or puts the user into a shell inside the container. Usage of the script is simple:

{{Invocation|ebuildtester --help|output=
ebuildtester [-h] [--atom ATOM [ATOM ...]] [--manual]
                           --portage-dir PORTAGE_DIR
                           [--overlay-dir OVERLAY_DIR] [--update]
                           [--threads N] [--use USE [USE ...]] [--unmask ATOM]
                           [--gcc-version VER] [--with-X]

optional arguments:
  -h, --help            show this help message and exit
  --atom ATOM [ATOM ...]
                        The package atom(s) to install
  --manual              Install package manually
  --portage-dir PORTAGE_DIR
                        The local portage directory
  --overlay-dir OVERLAY_DIR
                        Add overlay dir (can be used multiple times)
  --update              Update container before installing atom
  --threads N           Use N threads to build packages
  --use USE [USE ...]   The use flags for the atom
  --unmask ATOM         Unmask atom (can be used multiple times)
  --gcc-version VER     Use gcc version VER
  --with-X              Install VNC server to test graphical applications
}}

The <nowiki>--portage-dir</nowiki> option is mandatory, as well as use of either <nowiki>--atom</nowiki> or <nowiki>--manual</nowiki>. You can pass in one or more additional overlays with the <nowiki>--overlay-dir</nowiki> option. The script maps the portage and overlay dirs into the container, so changes to the files inside the container will affect the files outside the container on your file system. A one time use case for this script could look something like {{CodeBox|title=One-time test|lang=bash|1=ebuildtester --portage-dir /usr/portage --overlay-dir /usr/local/portage --use R boost imaging python qt5 rendering views --unmask =sci-libs/vtk-8.0.1 --with-X --atom =sci-libs/vtk-8.0.1}} assuming, you have a modified vtk-8.0.1.ebuild file in a local repositoy at <nowiki>/usr/local/portage</nowiki>.
