<languages />

{{Metadata|abstract=Команда sudo предлагает простой и безопасный способ настройки повышения привилегий, то есть, разрешения обычным пользователям выполнять определенные (или все) команды от учетной записи root или какого-либо другого пользователя, возможно без указания пароля.}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://www.sudo.ws/|header=true}}
|{{InfoBox wikipedia|sudo}}
|{{InfoBox gitweb|http://www.sudo.ws/repos/sudo|raw=true}}
}}

Команда <tt>sudo</tt> предлагает простой и безопасный способ настройки повышения привилегий, то есть разрешения обычным пользователям выполнять определенные (или все) команды от учетной записи root или какого-либо другого пользователя, возможно без указания пароля.

sudo является наилучшим выбором в случае, когда необходимо предоставить какой-либо группе людей возможность выполнять определенный круг задач по администрированию системы без передачи им учетной записи суперпользователя root. С помощью sudo вы можете задать правила, кто и что может делать в системе. В данном руководстве вы ознакомитесь с основными возможностями этого чудесного инструмента.

__TOC__

Это руководство предназначается в качестве быстрого ознакомления. Пакет {{Package|app-admin/sudo}} обладает гораздо более широкими возможностями, чем описано в данном руководстве. Он обладает специальной возможностью редактирования файлов от имени другого пользователя (<tt>sudoedit</tt>), запуска из сценария (так, чтобы он мог выполняться в фоновом режиме, считывать пароль со стандартного потока ввода вместо клавиатуры) и так далее. 

Чтобы получить больше информации, прочтите man-страницы <tt>sudo</tt> и <tt>sudoers</tt>.

== Установка ==

=== USE флаги ===

{{USEflag|package=app-admin/sudo
|ldap
|nls+Yes+Yes
|pam+Yes+Yes
|offensive
|skey
|selinux
|sendmail+Yes+Yes
}}

=== Emerge === 

{{Emerge|app-admin/sudo}}

== Конфигурация == 

=== Журналирование событий === 

One additional advantage of <tt>sudo</tt> is that it can log any attempt (successful or not) to run an application. This is very useful if you want to track who made that one fatal mistake that took you 10 hours to fix :) 

=== Granting permissions === 

The {{Package|app-admin/sudo}} package allows the system administrator to grant permission to other users to execute one or more applications they would normally have no right to. Unlike using the <code>setuid</code> bit on these applications <tt>sudo</tt> gives a more fine-grained control on ''who'' can execute a certain command and ''when''. 

С <tt>sudo</tt> вы можете создать определённый список тех, ''кто'' может выполнять определенное приложение. Если же вы установите бит setuid, то запустить такое приложение сможет любой пользователь (или пользователь, принадлежащий к определенной группе, в зависимости от используемых разрешений). Вы можете (и, может, даже должны) потребовать от пользователя указания пароля, в тех случаях, когда он захочет запустить приложение. 

The <tt>sudo</tt> configuration is managed by the {{Path|/etc/sudoers}} file. This file should never be edited through <tt>nano /etc/sudoers</tt> or <tt>vim /etc/sudoers</tt> or any other editor you might like. When you want to alter this file, you should use <tt>visudo</tt>. 

Этот инструмент проверяет, что файл не редактируется одновременно сразу двумя администраторами, сохраняет разрешения доступа к файлу и выполняет некоторую проверку синтаксиса, чтобы убедиться, что в файле не допущено  фатальных ошибок. 

=== Основной синтаксис ===

Наиболее трудной частью <tt>sudo</tt> является синтаксис {{Path|/etc/sudoers}}. Основной синтаксис выглядит так: 

{{CodeBox|title=Основной синтаксис /etc/sudoers|1=
user  host = commands
}}

This syntax tells <tt>sudo</tt> that the user, identified by <code>user</code> and logged in on the system <code>host</code> can execute any of the commands listed in <code>commands</code> as the root user. A more real-life example might make this more clear: allow the user ''larry'' to execute <tt>emerge</tt> if he is logged in on localhost: 

{{CodeBox|title=Live /etc/sudoers examples|1=
larry  localhost = /usr/bin/emerge
}}

{{Note/ru|Имя хоста должно соответствовать тому, что возвращает команда <tt>hostname</tt>.}}

{{Warning|Не разрешайте пользователю запускать приложение, которое может повысить его текущие привилегии. Например, разрешение пользователям выполнения <tt>emerge</tt> с правами root на самом деле может предоставить им полный доступ к системе с этими правами, так как <tt>emerge</tt> можно заставить изменить реальную файловую систему на выгоду пользователю. Если вы не доверяете своим пользователям <code>sudo</code>, не предоставляйте им вообще никаких прав.}}

Имя пользователя также может быть заменено на имя группы - в этом случае оно должно начаться со знака <code>%</code>. Вот пример разрешения кому-либо в группе <tt>wheel</tt> запускать <tt>emerge</tt>: 

{{CodeBox|title=Разрешение членам группы wheel запускать emerge|1=
%wheel  localhost = /usr/bin/emerge
}}

Эту строку можно расширить на несколько команд (чтобы не создавать записи для каждой команды). Например, чтобы разрешить тому же пользователю не только запускать <tt>emerge</tt>, но также и <tt>ebuild</tt> и <tt>emerge-webrsync</tt> с правами root: 

{{CodeBox|title=Multiple commands|1=
larry  localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
}}

You can also specify a precise command and not only the tool itself. This is useful to restrict the use of a certain tool to a specified set of command options. The <tt>sudo</tt> tool allows shell-style wildcards (AKA meta or glob characters) to be used in path names as well as command-line arguments in the sudoers file. Note that these are ''not'' regular expressions. 

Давайте это протестируем: 

{{Cmd|sudo emerge -uDN world|output=<pre>
We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:
  
    #1&#41; Respect the privacy of others.
    #2&#41; Think before you type.
    #3&#41; With great power comes great responsibility.
  
Password: ## (Введите пароль пользователя, не root!)
</pre>
}}

Пароль, который требует <tt>sudo</tt> — это личный пароль пользователя. Это нужно для того, чтобы убедиться, что ни один из терминалов, который был случайно оставлен открытым, не мог быть использован в злонамеренных целях. 

Также следует помнить, что <tt>sudo</tt> не изменяет переменную <code>${Path}</code>: любая команда, размещенная после <tt>sudo</tt>, обрабатывается из ''вашей'' среды. Если необходимо, чтобы пользователь запускал утилиты, к примеру, из {{Path|/sbin}}, он должен предоставить <code>sudo</code> полный путь, как показано ниже: 

{{Cmd|sudo /usr/sbin/emerge-webrsync}}

=== Basic syntax with LDAP === 

The following USE flags are needed for the LDAP support.
{{USEflag|package=app-admin/sudo
|ldap++yes
|pam++Yes
}}

При использовании sudo с LDAP, sudo будет также читать конфигурацию с LDAP-сервера. Поэтому вам нужно будет отредактировать два файла.

{{FileBox|filename=/etc/ldap.conf.sudo|title=Пожалуйста, измените права на 400 когда закончите|1=
# See ldap.conf(5) and README.LDAP for details
# This file should only be readable by root
  
# supported directives: host, port, ssl, ldap_version
# uri, binddn, bindpw, sudoers_base, sudoers_debug
# tls_{checkpeer,cacertfile,cacertdir,randfile,ciphers,cert,key}
  
host ldap.example.com
port 389
  
base dc=example,dc=com
  
uri ldap://ldap.example.com/
#uri ldapi://%2fvar%2frun%2fopenldap%2fslapd.sock
  
ldap_version 3
#ssl start_tls
  
sudoers_base ou=SUDOers,dc=example,dc=com
#sudoers_debug 2
  
bind_policy soft
}}

{{FileBox|filename=/etc/nsswitch.conf|title=Добавьте строчку с sudoers|1=
sudoers:     ldap files
}}

Также нужно будет добавить следующую запись LDAP для sudo.

{{Note|По соображениям безопасности ветка Sudoers находится в вершине дерева. Поэтому вы можете иметь отличные права от ldap на чтение/запись данной ветки.}}

{{CodeBox|title=Запись LDAP для Sudo|lang=ldif|1=
version: 1
DN: ou=SUDOers,dc=example,dc=com
objectClass: organizationalUnit
objectClass: top
objectClass: domainRelatedObject
associatedDomain: example.com
ou: SUDOers
  
DN: cn=defaults,ou=SUDOers,dc=example,dc=com
objectClass: top
objectClass: sudoRole
cn: defaults
description: Default sudoOption's go here
sudoOption: env_reset
  
DN: cn=root,ou=SUDOers,dc=example,dc=com
objectClass: top
objectClass: sudoRole
cn: root
sudoCommand: ALL
sudoHost: ALL
sudoUser: root
  
DN: cn=%wheel,ou=SUDOers,dc=example,dc=com
objectClass: top
objectClass: sudoRole
cn: %wheel
sudoCommand: ALL
sudoHost: ALL
sudoOption: !authenticate
sudoUser: %wheel
}}

{{CodeBox|title=Запись LDAP для группы wheel|lang=ldif|1=
version: 1
DN: cn=wheel,ou=Group,dc=example,dc=com
objectClass: top
objectClass: posixGroup
cn: wheel
description: Wheel Group
gidNumber: 10
memberUid: useradmin1
memberUid: root
}}

Конфигурация sudoer на LDAP похожа на такую же конфигурацию в случае файлов, с некоторыми отличиями. Прочитайте больше о LDAP по ссылке ниже.<ref name="test">[http://www.sudo.ws/sudo/sudoers.ldap.man.html]man-страница Sudoers LDAP</ref>

<references />

=== Using aliases ===

In larger environments having to enter all users over and over again (or hosts, or commands) can be a daunting task. To ease the administration of {{Path|/etc/sudoers}} you can define ''aliases''. The format to declare aliases is quite simple: 

{{CodeBox|title=Объявление псевдонимов в /etc/sudoers|1=
Host_Alias hostalias = hostname1, hostname2, ...
User_Alias useralias = user1, user2, ...
Cmnd_Alias cmndalias = command1, command2, ...
}}

Одним из псевдонимов, который работает всегда и в любом месте, является псевдоним <code>ALL</code> (чтобы провести хорошее различие между псевдонимами и не псевдонимами, рекомендуется использовать заглавные буквы для псевдонимов). Как вы, несомненно, уже догадались, псевдоним <code>ALL</code> - это псевдоним для всех возможных настроек. 

Пример использования псевдонима <code>ALL</code> для разрешения ''любому'' пользователю выполнения команды <tt>shutdown</tt>, если он вошел в систему локально: 

{{CodeBox|title=Разрешение выполнения команды shutdown любому пользователю|lang=bash|1=
ALL  localhost = /sbin/shutdown
}}

Another example is to allow the user <tt>larry</tt> to execute the <tt>emerge</tt> command as root, regardless of where he is logged in from: 

{{CodeBox|title=Allowing a user to run an application regardless of his location|1=
larry   ALL = /usr/bin/emerge
}}

Более интересно определить набор пользователей, которые могут запускать приложения, администрирующие программное обеспечение (такие как <tt>emerge</tt> и <tt>ebuild</tt>), в системе, и группу администраторов, которые могут изменять пароль любого пользователя, за исключением учетной записи root! 

{{CodeBox|title=Using aliases for users and commands|1=
User_Alias  SOFTWAREMAINTAINERS = larry, john, danny
User_Alias  PASSWORDMAINTAINERS = larry, sysop
Cmnd_Alias  SOFTWARECOMMANDS    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  PASSWORDCOMMANDS    = /usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root
  
SOFTWAREMAINTAINERS  localhost = SOFTWARECOMMANDS
PASSWORDMAINTAINERS  localhost = PASSWORDCOMMANDS
}}

=== Non-root execution ===

It is also possible to have a user run an application as a different, non-root user. This can be very interesting if you run applications as a different user (for instance <tt>apache</tt> for the web server) and want to allow certain users to perform administrative steps as that user (like killing zombie processes). 

Inside {{Path|/etc/sudoers}} you list the user(s) in between <code>(</code> and <code>)</code> before the command listing: 

{{CodeBox|title=Non-root execution syntax|1=
users  hosts = (run-as) commands
}}

For instance, to allow <tt>larry</tt> to run the <tt>kill</tt> tool as the <tt>apache</tt> or <tt>gorg</tt> user: 

{{CodeBox|title=Non-root execution example|1=
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill
  
larry   ALL = (apache, gorg) KILL
}}

With this set, the user can run <tt>sudo -u</tt> to select the user he wants to run the application as: 

{{Cmd|sudo -u apache pkill apache}}

You can set an alias for the user to run an application as using the <code>Runas_Alias</code> directive. Its use is identical to the other <code>_Alias</code> directives we have seen before. 

=== Passwords and default settings ===

By default, <tt>sudo</tt> asks the user to identify himself using his own password. Once a password is entered, <tt>sudo</tt> remembers it for 5 minutes, allowing the user to focus on his tasks and not repeatedly re-entering his password. 

Of course, this behavior can be changed: you can set the <code>Defaults:</code> directive in {{Path|/etc/sudoers}} to change the default behavior for a user. 

For instance, to change the default 5 minutes to 0 (never remember): 

{{CodeBox|title=Changing the timeout value|1=
Defaults:larry  timestamp_timeout=0
}}

A setting of <code>-1</code> would remember the password indefinitely (until the system reboots). 

A different setting would be to require the password of the user that the command should be run as and not the users' personal password. This is accomplished using <code>runaspw</code>. In the following example we also set the number of retries (how many times the user can re-enter a password before <tt>sudo</tt> fails) to <code>2</code> instead of the default 3: 

{{CodeBox|title=Requiring the root password instead of the user's password|1=
Defaults:john   runaspw, passwd_tries=2
}}

Another interesting feature is to keep the <code>DISPLAY</code> variable set so that you can execute graphical tools: 

{{CodeBox|title=Keeping the DISPLAY variable alive|1=
Defaults:john env_keep=DISPLAY
}}

You can change dozens of default settings using the <code>Defaults:</code> directive. Fire up the <tt>sudoers</tt> manual page and search for <code>Defaults</code>. 

If you however want to allow a user to run a certain set of commands without providing any password whatsoever, you need to start the commands with <code>NOPASSWD:</code>, like so: 

{{CodeBox|title=Allowing emerge to be ran as root without asking for a password|1=
larry     localhost = NOPASSWD: /usr/bin/emerge
}}

=== Bash completion ===

Users that want bash completion with sudo need to run this once.

{{Cmd|sudo echo "complete -cf sudo" >> $HOME/.bashrc}}

=== Zshell completion ===

Users that want zsh completion for sudo can set the following in {{Path|.zprofile}} and {{Path|.zshrc}} respectively

{{FileBox|filename=.zprofile|title=Adding zshell completion|lang=bash|1=
if [[ $EUID != 0 ]]; then
    typeset -xT SUDO_PATH sudo_path
    typeset -U sudo_path 
    sudo_path=({,/usr/local,/usr}/sbin(N-/))
    alias sudo="sudo env PATH=\"SUDO_PATH:$PATH\""
fi
}}

{{FileBox|filename=.zshrc|title=Adding zshell completion|lang=bash|1=
zstyle ':completion:*:sudo:*' environ PATH="$SUDO_PATH:$PATH"
}}

With the above change, all commands in the {{Path|/sbin}}, {{Path|/usr/sbin}} and {{Path|/usr/local/sbin}} locations will be available to the shell for completion when the command is prefaced with 'sudo'.

== Usage ==

=== Listing privileges ===

Чтобы узнать, какими возможностями Вы обладаете, запустите <tt>sudo -l</tt> : 

{{Cmd|sudo -l|output=<pre>
User larry may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z0-9_-]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
</pre>
}}

Если у вас есть какая-либо команда в {{Path|/etc/sudoers}}, которая не требует ввода пароля, пароль для перечисления этих записей также не потребуется. Иначе будет запрошен запрошен пароль (если он не запомнен). 

=== Prolonging password timeout ===

By default, if a user has entered their password to authenticate their self to <tt>sudo</tt>, it is remembered for 5 minutes. If the user wants to prolong this period, he can run <tt>sudo -v</tt> to reset the time stamp so that it will take another 5 minutes before <tt>sudo</tt> asks for the password again. 

{{Cmd|sudo -v}}

The inverse is to kill the time stamp using <tt>sudo -k</tt>. 


[[Category:Software]]
