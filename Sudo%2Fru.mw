<languages />

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://www.sudo.ws/|header=true}}
|{{InfoBox wikipedia|sudo}}
}}

Команда '''sudo''' предлагает простой и безопасный способ настройки повышения привилегий, т.е., разрешения обычным пользователям выполнять определенные (или все) команды от учетной записи root или какого-либо другого пользователя, возможно без указания пароля.

Когда Вы хотите, чтобы какие-либо люди выполняли определенный круг задач администрирования системы без предоставления им полного доступа root, использование sudo является наилучшим выбором. С sudo Вы можете контролировать кто что может делать. Это руководство предлагает небольшое введение в этот чудесный инструмент.

== О Sudo ==

=== Предоставление Разрешений ===

Пакет <code>app-admin/sudo</code> позволяет системному администратору предоставить другим пользователям разрешение на выполнение одного или более приложений, к которым у них обычно нет прав. В отличие от использования на этих приложениях бита ''setuid'', <code>sudo</code> дает более тонкий контроль над тем ''кто'' может выполнить определенную команду и ''когда''. 

С <code>sudo</code> Вы можете создать четкий список ''кто'' может выполнять определенное приложение. Если Вы установите бит setuid, любой пользователь сможет запустить это приложение (или любой пользователь, принадлежащий к определенной группе, в зависимости от используемых разрешений). Вы можете (и, может, даже должны) потребовать от пользователя указания пароля, в тех случаях когда он хочет запустить приложение. 

=== Запись действий в лог ===

Одним дополнительным преимуществом <code>sudo</code> является то, что оно может записывать в лог любую попытку (успешную или нет) запустить приложение. Это очень полезно, если Вы хотите отследить кто сделал ту фатальную ошибку, которая заняла 10 часов на исправление :&#41; 

=== Настройка Sudo ===

Конфигурация <code>sudo</code> управляется файлом {{Path|/etc/sudoers}}. Этот файл никогда не должен редактироваться через <code>nano /etc/sudoers</code> или <code>vim /etc/sudoers</code> или любой другой предпочитаемый Вами редактор. Когда требуется изменить этот файл, Вы должны использовать <code>visudo</code> . 

Этот инструмент проверяет, что этот файл не редактируется сразу двумя системными администраторами в один и тот же момент, сохраняет разрешения доступа к файлу и выполняет некоторую проверку синтаксиса, чтобы убедиться, что Вы не допустили фатальных ошибок в этом файле. 

=== Об этом руководстве ===

Это руководство предназначается в качестве быстрого введения. Пакет <code>sudo</code> - гораздо более мощный, чем описано в этом руководстве. Он имеет специальные возможности для редактирования файлов от имени другого пользователя (<code>sudoedit</code>), запуска из сценария (так, чтобы он мог выполняться на заднем плане, считывать пароль со стандартного потока ввода, вместо клавиатуры, ...), и т.д. 

Чтобы получить больше информации, прочтите man-страницы <code>sudo</code> и <code>sudoers</code>. 

== Синтаксис Sudoers ==

=== Основной Синтаксис ===

Наиболее трудной частью <code>sudo</code> является синтаксис {{Path|/etc/sudoers}}. Основной синтаксис выглядит так: 

{{Code|Основной синтаксис /etc/sudoers|<pre>
user  host = commands
</pre>
}}

Этот синтаксис сообщает <code>sudo</code>, что пользователь, идентифицированный как ''пользователь'' и вошедший в систему ''host'' может выполнить любую из команд, перечисленных в ''commands'' под учетной записью root. Более реальный пример может прояснить ситуацию: разрешить пользователю ''swift'' запуск <code>emerge</code>, если он вошел в систему на localhost: 

{{Code|Реальные примеры /etc/sudoers|<pre>
swift  localhost = /usr/bin/emerge
</pre>
}}

{{Note/ru|Имя хоста (hostname) должно соответствовать тому, что возвращает команда <code>hostname</code>.}}

Все же, есть одно '''большое предупреждение''': не разрешайте пользователю запускать приложение, которое может позволить повышение привилегий. Например, разрешение пользователям выполнения <code>emerge</code> под учетной записью root может на самом деле предоставить им полный доступ к системе от учетной записи root, потому что <code>emerge</code> можно управлять для изменения реальной файловой системы на выгоду пользователя. Если Вы не доверяете Вашим пользователям <code>sudo</code>, не предоставляйте им никаких прав. 

Имя пользователя также может быть заменено на имя группы - в этом случае Вы должны начать имя группы со знака <code>%</code>. К примеру, чтобы разрешить кому-либо в группе <code>wheel</code> запуск <code>emerge</code> : 

{{Code|Разрешение членам группы wheel запускать emerge|<pre>
%wheel  localhost = /usr/bin/emerge
</pre>
}}

Вы можете расширить эту строку на несколько команд (вместо создания одиночной записи для каждой команды). Например, чтобы разрешить тому же пользователю не только запускать <code>emerge</code> но и также <code>ebuild</code> и <code>emerge-webrsync</code> под учетной записью root: 

{{Code|Составные команды|<pre>
swift  localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
</pre>
}}

Вы также можете указать точное имя команды, а не инструмент сам по себе. Это полезно для ограничения использования определенного инструмента к указанному набору параметров командной строки. Инструмент <code>sudo</code> разрешает использование символов-джокеров в стиле скриптовой оболочки (также известных как метасимволы или glob-символы) в именах путей, также как и в аргументах командной строки в файле sudoers. Заметьте, что они ''не'' являются регулярными выражениями. 

Давайте это протестируем: 

{{Cmd|sudo emerge -uDN world|output=<pre>
We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:
  
    #1&#41; Respect the privacy of others.
    #2&#41; Think before you type.
    #3&#41; With great power comes great responsibility.
  
Password: ## &#40;Enter the user password, not root!&#41;
</pre>
}}

Пароль, который требует <code>sudo</code> - это собственный пароль пользователя. Это нужно для того чтобы убедиться, что никакой из терминалов, который был случайно оставлен открытым для других, не мог быть использован в нехороших целях. 

Вам нужно знать, что <code>sudo</code> не изменяет переменную <code>${Path}</code>: любая команда, размещенная Вами после <code>sudo</code> обрабатывается ''Вашей'' средой. Если Вы хотите, чтобы пользователь запускал инструменты, к примеру, в {{Path|/sbin}}, он должен указать полный путь к <code>sudo</code>, подобно тому как: 

{{Cmd|sudo /usr/sbin/emerge-webrsync}}

=== Использование Псевдонимов ===

В более широком окружении, необходимость ввода всех пользователей снова и снова (или хостов, или команд), может обернуться обескураживающей задачей. Чтобы облегчить администрирование {{Path|/etc/sudoers}}, Вы можете определить псевдонимы (''aliases''). Формат для их объявления достаточно прост. 

{{Code|Объявление псевдонимов в /etc/sudoers|<pre>
Host_Alias hostalias = hostname1, hostname2, ...
User_Alias useralias = user1, user2, ...
Cmnd_Alias cmndalias = command1, command2, ...
</pre>
}}

Одним из псевдонимов, который работает всегда и на любом месте, является псевдоним <code>ALL</code> (чтобы провести хорошее различие между псевдонимами и не псевдонимами, рекомендуется использовать заглавные буквы для псевдонимов). Как Вы, несомненно, уже догадались, псевдоним <code>ALL</code> - это псевдоним для всех возможных настроек. 

Пример использования псевдонима <code>ALL</code> для разрешения ''любому'' пользователю выполнения команды <code>shutdown</code>, если он вошел в систему локально: 

{{Code|Разрешение выполнения команды shutdown любому пользователю|<pre>
ALL  localhost = /sbin/shutdown
</pre>
}}

Другим примером является разрешение пользователю <code>swift</code> выполнения команды <code>emerge</code> под учетной записью root, независимо от того, откуда он вошел в систему: 

{{Code|Разрешение пользователю выполнения приложения, независимо от его нахождения|<pre>
swift   ALL = /usr/bin/emerge
</pre>
}}

Более интересно определить набор пользователей, которые могут запускать приложения, администрирующие программное обеспечение (такие как <code>emerge</code> и <code>ebuild</code> ), на системе и группу администраторов, которые могут изменять пароль любого пользователя, за исключением администратора! 

{{Code|Использование псевдонимов для пользователей и команд|<pre>
User_Alias  SOFTWAREMAINTAINERS = swift, john, danny
User_Alias  PASSWORDMAINTAINERS = swift, sysop
Cmnd_Alias  SOFTWARECOMMANDS    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  PASSWORDCOMMANDS    = /usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root
  
SOFTWAREMAINTAINERS  localhost = SOFTWARECOMMANDS
PASSWORDMAINTAINERS  localhost = PASSWORDCOMMANDS
</pre>
}}

=== Выполнение под другим пользователем ===

Также возможен запуск пользователем приложения от имени другого пользователя, а не администратора. Очень интересное применение может быть, если Вы запускаете приложения от имени другого пользователя (например, <code>apache</code> для веб-сервера)  и хотите разрешить определенным пользователям выполнять шаги администрирования в качестве того пользователя (такие как завершение процессов-зомби). 

В файле {{Path|/etc/sudoers}} перечислите пользователя/-лей внутри <code>(</code> и <code>)</code> перед списком команд: 

{{Code|Синтаксис выполнения от другой учетной записи|<pre>
users  hosts = (run-as) commands
</pre>
}}

Например, чтобы разрешить пользователю <code>swift</code> запуск инструмента <code>kill</code> от пользователя <code>apache</code> или <code>gorg</code> : 

{{Code|Пример выполнения от другой учетной записи|<pre>
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill
  
swift   ALL = (apache, gorg) KILL
</pre>
}}

С этим набором, пользователь может запускать <code>sudo -u</code> для выбора пользователя, от имени которого он хочет запустить приложение: 

{{Cmd|sudo -u apache pkill apache}}

Вы можете установить псевдоним для пользователя от имени которого нужно запустить приложение, используя директиву <code>Runas_Alias</code> . Ее использование идентично другим директивам <code>_Alias</code>, которые мы видели ранее. 

=== Пароли и Настройки по Умолчанию ===

По умолчанию, <code>sudo</code> просит пользователя идентифицировать себя, используя его собственный пароль. Как только пароль введен, <code>sudo</code> запоминает его в течение 5 минут, позволяя пользователю сосредоточиться на своих задачах, не вводя свой пароль повторно. 

Конечно же, это поведение можно изменить: Вы можете установить директиву <code>Defaults:</code> в {{Path|/etc/sudoers}}, чтобы изменить поведение по умолчанию для пользователя. 

Например, чтобы изменить 5 минут по умолчанию на 0 (не запоминать пароль никогда): 

{{Code|Изменение значения истечения времени|<pre>
Defaults:swift  timestamp_timeout=0
</pre>
}}

Настройка <code>-1</code> запомнит пароль навсегда (до перезагрузки системы). 

Другой настройкой было бы требование пароля пользователя от имени которого нужно запустить команду, а не личного пароля пользователя. Это достигается использованием <code>runaspw</code>. В последующем примере, мы также установим число повторных попыток (как много раз пользователь может ввести пароль заново, перед тем как <code>sudo</code> завершит работу)  на <code>2</code> вместо значения по умолчанию 3: 

{{Code|Требование пароля администратора вместо пароля пользователя|<pre>
Defaults:john   runaspw, passwd_tries=2
</pre>
}}

Другим интересным свойством является настройка переменной <code>DISPLAY</code>, чтобы Вы могли запускать графические инструменты: 

{{Code|Сохранение переменной DISPLAY|<pre>
Defaults:john env_keep=DISPLAY
</pre>
}}

Вы можете изменять десятки настроек по умолчанию, используя директиву <code>Defaults:</code>. Откройте man-страницу <code>sudo</code> и найдите <code>Defaults</code>. 

Если Вы, все же, хотите разрешить пользователю запускать определенный набор команд без ввода какого-либо пароля, Вам нужно начать команды с <code>NOPASSWD:</code> : 

{{Code|Разрешение emerge запуска от администратора без запроса пароля|<pre>
swift     localhost = NOPASSWD: /usr/bin/emerge
</pre>
}}

== Использование Sudo ==

=== Перечисление Привилегий ===

Чтобы узнать, какими возможностями Вы обладаете, запустите <code>sudo -l</code> : 

{{Cmd|sudo -l|output=<pre>
User swift may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z0-9_-]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
</pre>
}}

Если у Вас имеется какая-либо команда в {{Path|/etc/sudoers}}, которая не требует ввода пароля, пароль для перечисления этих записей также не потребуется. Иначе, у Вас может быть запрошен пароль, если он не запомнен. 

=== Продление Времени Истечения Пароля ===

By default, if a user has entered his password to authenticate himself to <code>sudo</code> , it is remembered for 5 minutes. If the user wants to prolong this period, he can run <code>sudo -v</code> to reset the time stamp so that it will take another 5 minutes before <code>sudo</code> asks for the password again. 

{{Cmd|sudo -v}}

The inverse is to kill the time stamp using <code>sudo -k</code> . 

== Sudo enhancements ==

=== Bash Completion ===

Users that want bash completion with sudo need to run this once.

{{Cmd|sudo echo "complete -cf sudo" >> $HOME/.bashrc}}

=== Zshell Completion ===

Users that want zsh completion for sudo can set the following in {{Path|.zprofile}} and {{Path|.zshrc}} respectively

{{File|.zprofile|Adding zshell completion|<pre>
if [[ $EUID != 0 ]]; then
    typeset -xT SUDO_PATH sudo_path
    typeset -U sudo_path 
    sudo_path=({,/usr/local,/usr}/sbin(N-/))
    alias sudo="sudo env PATH=\"SUDO_PATH:$PATH\""
fi</pre>
}}

{{File|.zshrc|Adding zshell completion|<pre>
zstyle ':completion:*:sudo:*' environ PATH="$SUDO_PATH:$PATH"</pre>
}}

With the above change, all commands in the {{Path|/sbin}}, {{Path|/usr/sbin}} and {{Path|/usr/local/sbin}} locations will be available to the shell for completion when the command is prefaced with 'sudo'.


[[Category:Software]]
