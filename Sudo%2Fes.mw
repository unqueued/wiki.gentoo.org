<languages />

{{Lowercase title}} {{InfoBox stack |{{InfoBox homepage|http://www.sudo.ws/|header=true}} |{{InfoBox wikipedia|sudo}} }}

La orden '''sudo''' ofrece una forma sencilla y segura de configurar el escalado de privilegios, esto es, permitir a los usuarios normales correr algunas (o todas) las órdenes que se deseen como root o como otro usuario, posiblemente sin tener que suministrar una contraseña.

Cuando quiera que varias personas realicen ciertas tareas administrativas en su sistema sin que tenga que concederles un acceso total como root, el uso de sudo es la mejor opción. Con sudo puede controlar quién puede hacer según qué. Esta guía le ofrece una pequeña introducción a esta maravillosa herramienta.

== Acerca de Sudo ==

=== Conceder Permisos ===

El paquete <code>app-admin/sudo</code> permite al administrador del sistema otorgar permiso a otros usuarios para ejecutar una o más aplicaciones y que, normalmente, no tendría permiso. A diferencia de usar el bit "setuid" en estas aplicaciones, <code>sudo</code> proporciona un control más fino acerca de "quién" puede ejecutar cierta orden y "cuándo" puede hacerlo. 

Con <code>sudo</code> puede hacer una lista completa de "quién" puede ejecutar una aplicación determinada. Si estableciera el bit setuid, cualquier usuario podría ejecutar la aplicación (o cualquier usuario de un grupo en concreto, dependiendo de los permisos empleados). Puede (e incluso debería) exigir al usuario que proporcione una contraseña cuando éste quiera ejecutar la aplicación. 

=== Registrar la Actividad ===

Una ventaja adicional de <code>sudo</code> es que registra cualquier intento (satisfactorio o no) de ejecución de una aplicación. Esto es de gran utilidad si le quiere seguir la pista al que hizo ese error fatal que le llevó diez horas arreglar :&#41; 

== Configurar Sudo ==

La configuración de <code>sudo</code> se gestiona mediante el fichero {{Path|/etc/sudoers}}. Este fichero no se debe editar con <code>nano /etc/sudoers</code> o <code>vim /etc/sudoers</code> o cualquier otro editor. Cuando quiera modificar este fichero, tendrá que utilizar <code>visudo</code>. 

Esta herramienta se asegura que no haya dos administradores del sistema editando el fichero al mismo tiempo, conserva sus permisos y realiza una comprobación de la sintaxis para cerciorarse de que no se cometan errores fatales en el fichero. 

=== Acerca de esta Guía ===

Esta guía pretende ser una introducción rápida. El paquete <code>sudo</code> es mucho más potente que lo que aquí se describe. Tiene características especiales para la edición de ficheros como un usuario distinto (<code>sudoedit</code>), se puede correr desde un guión (por lo que puede estar en segundo plano, leer la contraseña desde la entrada estándar en lugar del teclado, ...), etc. 

Por favor, lea las páginas de <code>sudo</code> y <code>sudoers</code> del manual para obtener mayor información. 

== Sintaxis de Sudoers ==

=== Sintaxis básica ===

La parte más difícil de <code>sudo</code> es la sintaxis de {{Path|/etc/sudoers}}. La sintaxis básica es la siguiente: 

{{Code|Sintaxis básica de /etc/sudoers|<pre>
usuario nombre_de_equipo = órdenes
</pre>
}}

Esta sintaxis le indica a <code>sudo</code> que el usuario, identificado como "usuario" y conectado al sistema <e>nombre_de_equipo</e>, puede ejecutar cualquiera de las órdenes listados en "órdenes" como usuario root. Un ejemplo más real podría ser más clarificador: permitir al usuario "swift" ejecutar <code>emerge</code> si está conectado al equipo localhost. 

{{Code|Ejemplo real del fichero /etc/sudoers|<pre>
swift localhost = /usr/bin/emerge
</pre>
}}

{{Note|El nombre del equipo debe coincidir con lo que devuelve la orden <code>hostname</code>.}}

De todos modos, una '''gran advertencia''': no permita que un usuario corra una aplicación que pueda permitir incrementar los privilegios a otros. Por ejemplo, permitir que los usuarios ejecuten <code>emerge</code> como root puede en efecto otorgarles acceso total como root al sistema, puesto que <code>emerge</code> se puede modificar para cambiar el comportamiento del sistema de ficheros en beneficio del usuario. Si no confía en los usuarios que pueden emplear <code>sudo</code>, no les conceda ningún derecho. 

El nombre de usuario también se puede sustituir por un nombre de grupo. En este caso, debería anteponer el signo <code>%</code> al nombre del grupo. Por ejemplo, para permitir que cualquier usuario del grupo <code>wheel</code> pueda correr <code>emerge</code>: 

{{Code|Permitir la ejecución de emerge a los miembros del grupo wheel|<pre>
%wheel localhost = /usr/bin/emerge
</pre>
}}

Puede ampliar la línea para permitir varias órdenes (en lugar de escribir una línea para cada orden). Por ejemplo, para permitir al mismo usuario no sol correr <code>emerge</code> como root sino también <code>ebuild</code> y <code>emerge-webrsync</code>: 

{{Code|Multiples órdenes|<pre>
swift localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
</pre>
}}

Puede incluso especificar una orden preciso y no solo la propia herramienta en sí. Esto es útil para restringir el uso de cierta herramienta a un grupo
específico de argumentos. La herramienta <code>sudo</code> permite el uso de caracteres comodín del estilo del intérprete de órdenes (también conocidos como metacaracteres o caracteres "glob") en nombres de ruta así como en argumentos de la línea de órdenes dentro del fichero sudoers. Observe que estos "no" son expresiones regulares. 

Pongamos todo esto a prueba: 

{{Cmd|sudo emerge -uDN world|output=<pre>
We trust you have received the usual lecture from the local System Administrator. It usually boils down to these three things:

    #1&#41; Respect the privacy of others.
    #2&#41; Think before you type.
    #3&#41; With great power comes great responsibility.

Contraseña: ## (Introduzca la contraseña del usuario ¡No la de root!)
</pre>
}}

La contraseña solicitada por <code>sudo</code> es la del propio usuario. Esto es para asegurarse de que ninguna terminal abierta accidentalmente a otros por error sea utilizada con fines dañinos. 

Debería saber que <code>sudo</code> no cambia la variable <code>${PATH}</code>: cualquier orden situada después de <code>sudo</code> se trata desde "su" entorno. Si desea que el usuario corra una herramienta ubicada en, por ejemplo, {{Path|/sbin}} éste debería proporcionar a <code>sudo</code> la ruta completa, algo como: 

{{Cmd|sudo /usr/sbin/emerge-webrsync}}

=== Utilizar Alias ===

En entornos más extensos que tengan que dar acceso a todos los usuarios una y otra vez (o equipos u órdenes) las tareas pueden ser más costosas de realizar. Para facilitar la administración de {{Path|/etc/sudoers}}, puede definir "alias". El formato para declarar los alias es muy fácil: 

{{Code|Declararar alias en /etc/sudoers|<pre>
Host_Alias hostalias = equipo1, equipo2, ...
User_Alias useralias = usario1, usuario2, ...
Cmnd_Alias cmndalias = orden1, orden2, ...
</pre>
}}

Un alias que siempre funciona, en cualquier posición, es <code>ALL</code> (para distinguir correctamente entre lo que son y no son alias, se recomienda utilizar mayúsculas para los alias). Como indudablemente habrá deducido, el alias <code>ALL</code> sirve para todas los valores posibles. 

Un ejemplo de uso del alias <code>ALL</code> para permitir a "cualquier" usuario lanzar la orden <code>shutdown</code> si ha accedido al sistema local es: 

{{Code|Permitir que cualquier usuario puede ejecutar shutdown|<pre>
ALL localhost = /sbin/shutdown
</pre>
}}

Otro ejemplo es permitir al usuario <code>swift</code> lanzar la orden <code>emerge</code> como root, independientemente del equipo donde haya iniciado sesión: 

{{Code|Permiter al usuario lanzar una aplicación independientemente de su localización|<pre>
swift ALL = /usr/bin/emerge
</pre>
}}

More interesting is to define a set of users who can run software administrative applications (such as <code>emerge</code> and <code>ebuild</code> ) on the system and a group of administrators who can change the password of any user, except root! 

{{Code|Using aliases for users and commands|<pre>
User_Alias  SOFTWAREMAINTAINERS = swift, john, danny
User_Alias  PASSWORDMAINTAINERS = swift, sysop
Cmnd_Alias  SOFTWARECOMMANDS    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  PASSWORDCOMMANDS    = /usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root
  
SOFTWAREMAINTAINERS  localhost = SOFTWARECOMMANDS
PASSWORDMAINTAINERS  localhost = PASSWORDCOMMANDS
</pre>
}}

=== Ejecución como no Root ===

It is also possible to have a user run an application as a different, non-root user. This can be very interesting if you run applications as a different user (for instance <code>apache</code> for the web server) and want to allow certain users to perform administrative steps as that user (like killing zombie processes). 

Inside {{Path|/etc/sudoers}} you list the user(s) in between <code>(</code> and <code>)</code> before the command listing: 

{{Code|Non-root execution syntax|<pre>
users  hosts = (run-as) commands
</pre>
}}

For instance, to allow <code>swift</code> to run the <code>kill</code> tool as the <code>apache</code> or <code>gorg</code> user: 

{{Code|Non-root execution example|<pre>
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill
  
swift   ALL = (apache, gorg) KILL
</pre>
}}

With this set, the user can run <code>sudo -u</code> to select the user he wants to run the application as: 

{{Cmd|sudo -u apache pkill apache}}

You can set an alias for the user to run an application as using the <code>Runas_Alias</code> directive. Its use is identical to the other <code>_Alias</code> directives we have seen before. 

=== Contraseñas y Configuraciones por Defecto ===

By default, <code>sudo</code> asks the user to identify himself using his own password. Once a password is entered, <code>sudo</code> remembers it for 5 minutes, allowing the user to focus on his tasks and not repeatedly re-entering his password. 

Of course, this behavior can be changed: you can set the <code>Defaults:</code> directive in {{Path|/etc/sudoers}} to change the default behavior for a user. 

For instance, to change the default 5 minutes to 0 (never remember): 

{{Code|Changing the timeout value|<pre>
Defaults:swift  timestamp_timeout=0
</pre>
}}

A setting of <code>-1</code> would remember the password indefinitely (until the system reboots). 

A different setting would be to require the password of the user that the command should be run as and not the users' personal password. This is accomplished using <code>runaspw</code> . In the following example we also set the number of retries (how many times the user can re-enter a password before <code>sudo</code> fails) to <code>2</code> instead of the default 3: 

{{Code|Requiring the root password instead of the user's password|<pre>
Defaults:john   runaspw, passwd_tries=2
</pre>
}}

Another interesting feature is to keep the <code>DISPLAY</code> variable set so that you can execute graphical tools: 

{{Code|Keeping the DISPLAY variable alive|<pre>
Defaults:john env_keep=DISPLAY
</pre>
}}

You can change dozens of default settings using the <code>Defaults:</code> directive. Fire up the <code>sudo</code> manual page and search for <code>Defaults</code> . 

If you however want to allow a user to run a certain set of commands without providing any password whatsoever, you need to start the commands with <code>NOPASSWD:</code> , like so: 

{{Code|Allowing emerge to be ran as root without asking for a password|<pre>
swift     localhost = NOPASSWD: /usr/bin/emerge
</pre>
}}

== Utilizar Sudo ==

=== Listar Privilegios ===

To inform yourself what your capabilities are, run <code>sudo -l</code> : 

{{Cmd|sudo -l|output=<pre>
User swift may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z0-9_-]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
</pre>
}}

If you have any command in {{Path|/etc/sudoers}} that does not require you to enter a password, it will not require a password to list the entries either. Otherwise you might be asked for your password if it isn't remembered. 

=== Prolongar la Caducidad de la Contraseña ===

By default, if a user has entered his password to authenticate himself to <code>sudo</code> , it is remembered for 5 minutes. If the user wants to prolong this period, he can run <code>sudo -v</code> to reset the time stamp so that it will take another 5 minutes before <code>sudo</code> asks for the password again. 

{{Cmd|sudo -v}}

The inverse is to kill the time stamp using <code>sudo -k</code> . 

== Mejoras en Sudo ==

=== Completado de Órdenes en Bash ===

Users that want bash completion with sudo need to run this once.

{{Cmd|sudo echo "complete -cf sudo" >> $HOME/.bashrc}}


[[Category:Software]]
