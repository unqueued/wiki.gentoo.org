<languages />


{{Metadata|abstract=PostgreSQL 간던한 시작 안내서입니다. PostgreSQL을 이머지하고 설정하는 내용을 다룹니다. 이 안내서는 공식 문서와 상호 보완적인 역할을 하지만, 대체 수단은 아닙니다.}}

PostgreSQL 간단한 시작 안내서입니다. PostgreSQL을 이머지하고 설정하는 내용을 다룹니다. 이 안내서는 공식 문서와 상호 보완적인 역할을 하지만, 대체 수단은 아닙니다.

== 도입부 ==

=== PostgreSQL에 대한 약간의 정보 ===

[http://www.postgresql.org PostgreSQL]은 자유 오픈소스 관계 데이터베이스 관리 시스템(RDBMS)입니다. 트랜잭션, 스키메타, 외래 키, 여기서 자주 언급하는 SQL 표준을 좀 더 엄격하게 지원하며, 기본적으로 다른 상용 데이터베이스 등보다 안전합니다. 

더 많은 정보는 postgresql.org의 [http://www.postgresql.org/about/ About] 페이지를 방문하여 살펴보십시오.

=== 이 글은 무엇을 다루는가 ===

이 안내문에서는 PostgreSQL RDBMS를 젠투 방식으로 설치하는 과정을 안내합니다. 

이 글에서 다루는 이빌드는 {{Package|dev-db/postgresql}}입니다.

이 글에서는 여러분이 PostgreSQL 최신 안정 버전을 설치함을 가정합니다. 이 글을 쓰는 시점에는 9.3.5가 최신 버전이었습니다. 이 글의 명령을 여러분이 사용하는 버전에 따라 조금씩 바꾸십시오.

=== 이빌드 이야기 ===

포티지에 있는 PostgreSQL 이빌드는 주 버전을 기반으로 슬롯 처리합니다. 따라서 시스템에 PostgreSQL의 각기 다른 메이저 버전이 동시에 돌아갈 수 있게 합니다. 9.0 부터 9.4 까지의 라이브러리 및 서버는 동시에 설치하고 가동할 수 있습니다. 이전 데이터베이스에서 새 데이터베이스로 데이터를 옮겨야 하는 상황이거나, 동일한 머신에 상용 데이터베이스와 시험용 데이터베이스를 운영할 경우 이런 슬롯 방식이 쓸모가 있습니다. 또한 이러한 방식을 통해 데이터베이스에 대한 불완전한 업데이트로 라이브러리 또는 실행 파일을 각각 엎는 일을 막습니다. 이런 관리 방식은 이 안내서에서 설명하는 이전 작업 과정에서 필요합니다. 

게다가, 마이너 버전 업데이트를 진행할 때 가져오는 버그 수정 및 보안 수정을 진행할 때 데이터베이스 또는 PostgreSQL 설치 자체 과정이 깨지는 경우에 대해 어떠한 걱정없이 적용할 수 있습니다. 9.3.4를 9.3.5로 업데이트할 때 이전 작업, 재 설정 뿐만 아니라 초기화 작업 없이도 PostgreSQL을 이머지하고 서버를 재시작하는 번거로운 절차 진행에 비해 사용자와 어떤 확인 절차를 거치지 않아도 될 정도로 호환성을 보장합니다. 

자세한 정보는 [http://www.postgresql.org/support/versioning PostgreSQL 버전 정책]<sup style="color:#ff0077">en</sup>을 읽어보십시오. 

=== 이 글에서 다루지 않을 내용은 무엇인가 ===

일부 다루지 않을 내용이 있습니다. 관련 사이트 어딘가에 있을 [http://www.postgresql.org/docs/ 공식 문서]<sup style="color:#ff0077">en</sup>는 2000 페이지에 육박합니다. 따라서 이에 대한 자세한 내용은 빠른 시작 안내서에서 뺐습니다. 오직 젠투와 관련된 내용만 다루며 일부 기본 설정 지침을 넣었습니다. 

== 설치 ==

=== 오래된 이빌드 ===

다음 이빌드 중 하나를 설치했다면, 이전의 오래된 PostgreSQL 젠투 설치판을 보유하고 있어 이전 작업을 진행해야합니다. 9.0 이전 버전의 {{Package|dev-db/postgresql-libs}}, {{Package|dev-db/postgresql-client}}, {{Package|dev-db/libpq}}, {{Package|dev-db/postgresql}} 를 이머지하십시오.

따로 나누어놓은 {{Package|dev-db/postgresql-docs}}, {{Package|dev-db/postgresql-base}}, {{Package|dev-db/postgresql-server}} 이빌드는 {{Package|dev-db/postgresql}} 이빌드로 단일화했습니다. 분열 상태의 이빌드로부터 단일화 이빌드로 옮겨야 할 요소는 없으며 통합 이빌드를 이머지하시면 됩니다.

이 글에서는 이전 이빌드에서 새 이빌드로 이전하는 방법을 다루지는 않습니다. 

=== USE 플래그 ===

{{USEflag|package=dev-db/postgresql}}

{{Note|'pg_legacytimestamp' 값을 달리 설정하면 타임스탬프 값을 유효화할 경우 덤프를 떴다가 다시 복우너해야합니다. 두가지 방식은 서로 호환성이 없습니다.}}

=== 이머지 시작 ===

{{Emerge|dev-db/postgresql|output=<pre>
[ebuild N ] dev-db/postgresql-9.3.5 USE="doc -kerberos -ldap -pg_legacytimestamp
  nls perl python -pg_legacytimestamp (-selinux) readline ssl -tcl -threads
  -uuid -xml zlib" LINGUAS="-af -cs -de -es -fa -fr -hr -hu -it -ko -nb -pl
  -pt_BR -ro -ru -sk -sl -sv -tr -zh_CN -zh_TW" 0 kB
</pre>
}}

{{Package|dev-db/postgresql-libs}}, {{Package|dev-db/postgresql-client}}, {{Package|dev-db/libpq}} 꾸러미 일부 또는 전체가 위에서 언급한 꾸러미를 막는다는 알림을 띄울 수 있습니다. 이 꾸러미는 '''관리하지 않는''' 꾸러미이며, 오래됐습니다. 이 상황을 처리하려면 이전 이빌드에서 새로운 이빌드로 이전하는 내용을 담는 부분을 참고하십시오. 

=== 데이터베이스 클러스터 초기화 준비 ===

꾸러미 이머지가 끝나면, {{Path|/etc/conf.d/postgresql-9.3}}를 편집할겁니다. 서버 기본값에 영향을 주는 세 줄이 있고 데이터 베이스 클러스가 들어있는 디렉터리를 삭제하지 않거나 다시 초기화하지 않으면 바꿀 '''수 없'''습니다. 

''PGDATA''는 설정 파일 위치를 정의합니다. ''DATA_DIR''은 데이터베이스 클러스터 및 관련 파일을 만들 위치를 정의합니다. ''PG_INITDB_OPTS''는 조심스럽게 설정해야 할 [http://www.postgresql.org/docs/current/static/app-initdb.html 추가 옵션]이 들어갑니다. 추가 옵션은 그럴만한 기본 값이...크흠...다 이유가 있기 때문에 필요하지 '''않습니다'''. 

다음 예제에서 ''PGDATA''에서는 설정 파일이 {{Path|/etc/postgresql-9.3/}} 위치에 있음을 언급합니다. ''DATA_DIR''에서는 데이터베이스 클러스터를 기본적으로 {{Path|/var/lib/postgresql/9.3/data/}} 위치에 설치해야 함을 나타냅니다. 기본 위치를 바꾸려면 경로의 버전을 유지하는게 '''아주 좋습니다'''. ''PG_INITDB_OPTS''는 기본 로캘을 ''en_US.UTF-8''로 설정했음을 나타냅니다. 미국 영어의 순서 및 형식을 맞추며 UTF-8 문자 인코딩을 사용한다는 의미입니다. 

{{FileBox|filename=/etc/conf.d/postgresql-9.3|title=예제 설정 내용|lang=bash|1=
# Location of configuration files
PGDATA="/etc/postgresql-9.3/"
# Where the data directory is located/to be created
DATA_DIR="/var/lib/postgresql/9.3/data"
# Additional options to pass to initdb.
# See 'man initdb' for available options.
PG_INITDB_OPTS="--locale=en_US.UTF-8"
}}


{{Note|This only determines the default locale and character encoding. You can specify different locales and/or character encodings at database creation time ( <code>CREATE DATABASE</code> ) in the same database cluster.}}

''--locale='' 대신 중복 우선적용할 수 있는 여섯가지 로캘 옵션이 있습니다. 다음 테이블은 해당 옵션을 보여주는데, 옵션을 사용하는 경우 다음과 같은 형식이 됩니다: <code>--option=lo_LO.ENCODING</code>. 

{| class="wikitable" style="text-align: left;" 
|- 
! 옵션
! 역할
|- 
| lc-collate
| 문자열 정렬 순서
|- 
| lc-ctype
| 문자 분류(어떤 문자인가? 대문자랑 동일한가?)
|- 
| lc-messages
| 메시지 언어
|- 
| lc-monetary
| 화폐 단위 규정
|- 
| lc-numeric
| 숫자 형식 규정
|- 
| lc-time
| 날짜 시간 형식 규정
|-
|}

So, if you would like the default to be English, but you want messages in, say, Swedish, then your ''PG_INITDB_OPTS'' would look like so:

{{CodeBox|title=PG_INITDB_OPTS 설정|lang=bash|1=
PG_INITDB_OPTS="--locale=en_US.UTF-8 --lc-messages=sv_SE.UTF-8"
}}

A complete list of language and character encodings supported by the server can be found in the documentation, but your system must also support the respective languages and character encodings. Compare the output of <code>locale -a</code> to the [http://www.postgresql.org/docs/current/static/multibyte.html encodings] in the documentation. 

You can change your locale and encoding selections at database [http://www.postgresql.org/docs/current/static/sql-createdatabase.html creation time.] In order to change the locale for a database after you have created it, you must drop the database and start over again. 

{{RootCmd|emerge --config dev-db/postgresql:9.3}}

This will create the database cluster and store all the related server files into ''PGDATA'' and ''DATA_DIR'' . 

== 설정 ==

=== 설정 파일이 있는 곳 ===

This time the focus is upon the files in the ''PGDATA'' directory, {{Path|/etc/postgresql-9.3}} , instead with primary focus on the {{Path|postgresql.conf}} and {{Path|pg_hba.conf}} files. 

=== postgresql.conf ===

This is the main configuration file. The line that you may find of immediate interest is ''listen_addresses'' . This variable defines to which addresses PostgreSQL will bind. By default, only localhost and the Unix socket are bound. Changing ''listen_addresses'' is not enough to enable remote connections. That will be covered in the next section. The [http://www.postgresql.org/docs/current/static/runtime-config.html official documentation] is fairly easy to understand and is exhaustive on all the settings available. It would behoove you to read that in addition to what is covered here as some things may change. 

Of secondary interest is the logging destination. By default, everything is logged to {{Path|postmaster.log}} in the ''DATA_DIR'' directory. There is an entire subsection of {{Path|postgresql.conf}} that covers a slew of options for how, what and where to log. The subsection is marked: ERROR REPORTING AND LOGGING. 

Other than ''listen_addresses'' and the logging options, the rest of the defaults in {{Path|postgresql.conf}} are reasonable enough to get you going. 

=== pg_hba.conf ===

The {{Path|pg_hba.conf}} file states who is allowed to connect to the database server and which authentication method must be used to establish the connection. Again, the documentation is quite exhaustive on the settings and what they all mean, but a few things are covered here for clarification. 

{{FileBox|filename=pg_hba.conf|title=기본 설정|1=
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
# 
# "local" is for Unix domain socket connections only
local   all         all                               trust
# IPv4 local connections:
host    all         all         127.0.0.1/32          trust
# IPv6 local connections:
host    all         all         ::1/128               trust
}}

As has been mentioned before, by default the server is secure. Kind of. There is only one database role that is available for log in by default: ''postgres'' . And, the only way to initiate a connection to the database is through the {{Path|/run/postgresql/.s.PGSQL.5432}} Unix socket, which is owned by the ''postgres'' system user and system group, or via localhost. Now for the "kind of" bit: Any user on the system can make a connection to the database through the localhost. Even as the ''postgres'' database superuser. 

{{Warning|Never disable the Unix socket entirely. The initscripts require access to it in order to operate properly. The method can be changed freely.}}

The ''trust'' method is what allows any user to log on as any user without a password. It specifies just what it implies: Trust all connections for the given type to the given database from the given database user (but not the system user) from the given location without a password. This is what allows any user on the system to log on as any user through the localhost connection from the get go. This is not as dangerous as it seems, but does pose a serious security risk in most circumstances. 

The two methods you will most likely use are: ''password'' and ''md5'' . The password method only specifies that a password is required to start the connection and the password is sent "in-the-clear". This method is fine when such information will never leave the machine, such as connecting via the Unix socket or localhost. The md5 method is like password, but protects the password by using an md5 hash. This is what you want to use whenever the password is going to traverse a network. 

At this point, this author would like to bring your attention to the last two lines, four lines including comments, of the {{Path|pg_hba.conf}} file. PostgreSQL has native support for IPv6 regardless of your desires for such support. Additionally, IPv4 addresses are automatically mapped to IPv6 addresses, ''i.e.'' , 127.0.0.1 will be mapped to ::FFFF:127.0.0.1 and as "pure" IPv6 ::FFFF:7F00:0001. 

There seems to be some misunderstanding, though, as to how host names are mapped to IP addresses. Let us take a look at the {{Path|/etc/hosts}} file. 

{{FileBox|filename=/etc/hosts|1=
# IPv4 and IPv6 localhost aliases
127.0.0.1       localhost
::1             localhost
}}

From the example above you can see that both an IPv4 and an IPv6 IP address are mapped to localhost. When <code>psql</code> refers to this file, it will grab the first match and use that as the address; in this case 127.0.0.1. When PostgreSQL parses this, it will match the IPv6 formatted address as well, e.g. ::ffff:127.0.0.1. If, however, the IPv6 address appears first, then <code>psql</code> will map to ::1 alone; ::1 is not the same as ::ffff:127.0.0.1. As such, if you do not have ::1 as a permitted means of access, <code>psql</code> will not be able to establish a connection. Furthermore, your kernel needs to support the IPv6 protocol. 

So, it is better to specify IP addresses alone to <code>psql</code> and in {{Path|pg_hba.conf}} rather than to rely on {{Path|/etc/hosts}} to be ordered properly, and it removes any doubt as to which IP addresses are allowed or to which server you will connect. 

== 서버 시작하기 ==

=== 시작합시다! ===

이제 PostgreSQL을 시작하고 ''postgres'' 데이터베이스 최고 사용자의 암호를 설정하십시오.

'trust'를 'host'(유닉스 도메인 소켓 'local' 이 아님) 연결의 'password'로 바꾸십시오.

{{RootCmd|nano -w /etc/postgresql-9.3/pg_hba.conf}}

이제 데이터베이스를 시작하십시오:

{{RootCmd|/etc/init.d/postgresql-9.3 start|output=<pre>
postgresql-9.3  | * Starting PostgreSQL ...                             [ ok ]
</pre>}}

서버의 연결을 열고 암호를 설정하십시오:

{{RootCmd|psql -U postgres|output=<pre>
psql (9.3.5)
Type "help" for help.
</pre>}}

{{Cmd|\password|prompt=postgres{{=}}# |output=<pre>
Enter new password:
Enter it again:
</pre>}}

{{Cmd|\q|prompt=postgres{{=}}# }}

로컬 연결의 'trust'를 'password'로 바꾸십시오:

{{RootCmd|nano -w /etc/postgresql-9.3/pg_hba.conf}}

이제 데이터베이스 설정을 다시 불러오십시오:

{{RootCmd|/etc/init.d/postgresql-9.3 reload|output=<pre>
postgresql-9.3 | * Reloading PostgreSQL configuration ...               [ ok ]
</pre>
}}

마지막으로, 진행한대로 동작한다면, PostgreSQL을 부팅할 때 시작하도록 하십시오:
{{RootCmd|# rc-update add postgresql-9.3 default|output=<pre>
 * service postgresql-9.3 added to runlevel default
</pre>
}}

여기서 공식 [http://www.postgresql.org/docs/current/static/tutorial.html PostgreSQL 지침서]의 내용으로 계속 진행할 수 있습니다. 지침서는 역할, 데이터베이스, 스키메타, 쓸만한 재미거리를 고안하는 방식으로 안내해드립니다.

== PostgreSQL 이전 작업 ==

=== 이전 작업이 필요할 때 ===

이전 작업을 수정해야 하는 이유는 두가지가 있습니다. PostgreSQL 9.0.2가 아닌 8.4.7에서 9.0.3으로 메이저 버전 단위로 옮겨가는 경우를 예로 들거나 오래된 소숫점 방식 타임스탬프를 64비트 정수형 타임스탬프 형식으로 옮겨가는 경우를 예로 들어보겠습니다. 

{{Note| 오래된 {{Package|dev-db/libpq}}, {{Package|dev-db/postgresql-libs}},   {{Package|dev-db/postgresql-client}} 또는 9.0 이전 버전의 {{Package|dev-db/postgresql}} 을 새 이빌드로 갈아탈 경우 데이터베이스를 이전해야합니다.}}


== 9.0 이후 버전 이전 작업 ==

최근 8.4 이상 버전 빌드의 이전 버전으로 업그레이드할 경우, 이전 과정을 진행하기 전에 이 안내서 앞부분을 따라가십시오.

''pg_upgrade''는 9.0 이상에서 도입한 새 유틸리티이며, 이전 과정을 과감하게 하기보단 단순화했습니다. 

허나, {{c|pg_upgrade}}를 사용할 때 두가지 단점이 있습니다. 우선 데이터가 들어간 다른 디렉터리에 있는 설정 파일을 지원하지 않습니다. 이 문제는 심볼릭 링크로 해결할 수 있습니다. 다른 단점 하나는 8.3 이상의 데이터베이스에서만 이전할 수 있습니다. 이전 데이터베이스를 사용중이었다면 9.0 이전 배포판으로 이전하는 방식을 따라야합니다.

우선 ([[#.EB.8D.B0.EC.9D.B4.ED.84.B0.EB.B2.A0.EC.9D.B4.EC.8A.A4_.ED.81.B4.EB.9F.AC.EC.8A.A4.ED.84.B0_.EC.B4.88.EA.B8.B0.ED.99.94_.EC.A4.80.EB.B9.84|위]]에 설명한대로)데이터베이스 클러스터를 초기화했는지 확인하십시오. 초기화가 끝났으면 이전 작업을 진행할 목적 서버와 대상 서버를 멈추십시오:

{{RootCmd|/etc/init.d/postgresql-8.4 stop
|/etc/init.d/postgresql-9.3 stop
|ln -s /etc/postgresql-8.4/*.conf /var/lib/postgresql/8.4/data/
|ln -s /etc/postgresql-9.3/*.conf /var/lib/postgresql/9.3/data/}}

{{Note | 9.4 이상에서는 심볼릭 링크가 이미 있습니다.}}

사용중인 버전을 확인하고, 현재 사용중인 버전을 선택하십시오:

{{RootCmd|eselect postgresql list
|eselect postgresql set 9.3}}

모든 데이터베이스의 로컬 연결 신뢰 대상 데이터베이스 사용자를 'postgres'로 바꾸십시오:

{{RootCmd|nano -w /etc/postgresql-8.4/pg_hba.conf
|nano -w /etc/postgresql-9.3/pg_hba.conf}}

다음 과정을 진행하기 전에  {{Path|/var/lib/postgresql/}}의 권한을 바꿔야합니다.

{{RootCmd|su - postgres}}

{{Cmd|pg_upgrade -U postgres \
-d /var/lib/postgresql/8.4/data -D /var/lib/postgresql/9.3/data \
-b /usr/lib/postgresql-8.4/bin -B /usr/lib/postgresql-9.3/bin}}

{{Note | 9.4 버전 이전의 PostgreSQL은 <code>-U</code> 대신 <code>-u</code> 옵션을 사용합니다.}}

여러분이 할 일이 있다면 해당 작업을 <code>pg_upgrade</code> 에 알려 작업을 진행하십시오.

{{Cmd|logout}}

그리고 이제 끝낼 차례입니다:

{{RootCmd|/etc/init.d/postgresql-9.3 start}}

=== 9.0 이전 버전 이전작업: 새 이빌드 활용 ===

새 이빌드에서는 이전 버전과는 달리 좀 더 진보된(고급) 슬롯 방식을 채택하고 있기에, 가동 중지 시간은 시간 단위에서 분 단위로 좀 더 최소화되겠습니다. 

다음 예제에서는 기본 위치와 포트 설정을 사용하며, 8.3 버전에서 8.4 버전으로 데이터를 이전한다고 가정하겠습니다. 기본 설정과 다르다면 설정에 따라 바꾸십시오. 

여기까지 끝내지 못했다면 이전 작업을 진행하기 전 설치 절차를 따르십시오. 컴파일 작업은 데이터베이스 서버의 성능 발휘를 방해하겠지만, 계속할 수 있습니다. 

이전 작업을 시작하기 전에 몇가지 파일을 고쳐야합니다. {{Path|/etc/conf.d/postgresql-8.4}} 설정 파일의 ''PGPORT'' 값을 6543으로 고치십시오(이전에 설치한 PostgreSQL에서 사용하는 포트와는 다른 아무 포트 값이든 부여하십시오). 

다음 {{Path|/etc/postgresql-8.3/pg_hba.conf}} 파일을 편집하여 데이터베이스 최고 관리자 ''postgres''가 유닉스 소켓을 통해 데이터베이스 클러스터에 접근할 수 있게 하십시오. 

{{RootCmd|cp -p /etc/postgresql-8.3/pg_hba.conf /etc/postgresql-8.4/}}

다음 명령은 안전하게 진행해야 합니다. 문서를 읽어 확인하십시오.

{{RootCmd|cp -p /etc/postgresql-8.3/postgresql.conf /etc/postgresql-8.4/}}

잊지 말고 필요한 다른 설정 파일도 복사하십시오.

{{RootCmd|/etc/init.d/postgresql-8.3 reload
|/etc/init.d/postgresql-8.4 start}}

이전 클러스터에서 새 클러스터로 데이터 파이핑을 시작하십시오.

{{RootCmd|pg_dumpall -U postgres -p 5432 {{!}} psql -U postgres -d postgres -p 6543
|/etc/init.d/postgresql-8.3 stop
|/etc/init.d/postgresql-8.4 stop}}

PGPORT를 5432로 되돌리십시오.

{{RootCmd|nano -w /etc/conf.d/postgresql-8.4}}

사용자에게 한번 더 접근을 허용하십시오.

{{RootCmd|nano -w /etc/postgresql-8.4/pg_hba.conf
|/etc/init.d/postgresql-8.4 start
|rc-update del postgresql-8.3 && rc-update add postgresql-8.4 default}}

원하는 만큼 모든 부분이 계획에 따라 진행됐으며, 이전 서버와 비트 단위별로 정확히 동일한 데이터가 들어있는 서버로 성공적으로 업데이트했습니다. 

=== 9.0 이전 버전 이전작업: 오래된 이빌드 활용 ===

서버를 내린 시간에 어떤 계획을 진행해야 할 수도 있습니다. 이전 이빌드는 새 이빌드로 동시에 설치'''할 수 없습니다'''. 때문에 몇시간 동안은 그냥 서버를 내려야 하는구나 라고 보시면 됩니다. 아마 주말이나 그쯤 되겠죠. 

시작하기 전에 서버로의 접근을 막아서 외부에서 어떤 변경도 하지 못하게 해야 합니다. {{Path|postgresql.conf}} 및 {{Path|pg_hba.conf}}, 그리고 여러분이 손을 대어 중요하다고 생각하는 다른 설정 파일을 백업하시는게 좋습니다. 

{{RootCmd|pg_dumpall -U postgres > backup_file
|/etc/init.d/postgresql stop
|emerge -C dev-db/libpq dev-db/postgresql-client dev-db/postgresql-libs}}

이 글에서 자세하게 다루는 서버 설치 및 설정을 따르십시오.

{{RootCmd|/etc/init.d/postgresql-8.4 start
|psql -f backup_file postgres}}

아마도 이들 꾸러미로 빌드한 일부 꾸러미가 깨질지 모르겠지만 {{Package|dev-db/postgresql}} 를 설치했다면 {{c|revdep-rebuild}} 명령을 실행하여 깨진 것 같은 꾸러미를 다시 이머지할 수 있습니다.

== 유틸리티 ==

=== pgAdmin III ===

[http://www.pgadmin.org/ pgAdmin III] 는 PostgreSQL을 관리하는 그래픽 인터페이스 유틸리티입니다. 

== 문제 해결 ==

=== 서버에 편성 기능이 빠져 있음 ===

이 문제는 어떤 버전을 사용하느냐에 따라 해결 방법이 다르지만 쉽습니다. 답을 찾는게 어려울 뿐입니다. 가져와야 할 필요한 파일은 저장소 드라이브에 이미 있는{{Path|adminpack.sql}} 파일입니다. 이 문제를 해결하려면, 보유하고 있는 버전에 따라 다음 명령 중 하나를 실행하시면 됩니다.

PostgreSQL 9.0 이전 버전:
{{cmd|psql -U postgres --file /usr/share/postgresql-9.0/contrib/adminpack.sql}}

PostgreSQL 9.1 이후 버전:
{{Cmd|psql -U postgres -c "CREATE EXTENSION adminpack;"}}

=== {{Path|/etc/postgresql-9.x}}과 {{Path|/var/lib/postgresql/9.x/data}}에 설정 파일 빠짐 ===

디렉터리에 설정 파일을 이동해볼 수 있는데, 다음에서 x 대신 postgresql 버전 번호를 넣으시면 됩니다:

{{RootCmd|cp /var/lib/postgresql/9.x/data/*.conf /etc/postgresql-9.x/}}

파일이 빠져있다면 초기화해야합니다.

우선 postgres 사용자로 전환하십시오:

{{RootCmd|su postgres}}

postgres 사용자로 {{c|initdb}} 명령을 실행하여 데이터 디렉터리를 지정하십시오:

{{Cmd|initdb -D /var/lib/postgresql/9.x/data/}}

이 명령은 설정 파일을 만들며 이 섹션의 첫 명령에서 보신바와 같이 {{Path|/etc/postgresql-9.x/}}에 복사합니다.

=== "ERROR: timezone directory stack overflow" 또는 "FATAL: too many private dirs demanded" 오류 발생 ===

심볼릭 링크 루프 때문에 일어나는 문제입니다. 문제를 해결하려면 다음 명령을 입력하십시오:

{{RootCmd|rm /usr/share/zoneinfo/posix}}

시간대 정보를 업데이트 하면 심볼릭 링크를 다시 만드므로 심볼릭 링크를 다시 제거해야합니다.

=== Systemd ===

시작시 서비스를 시작하도록 강제하려면:

{{RootCmd|systemctl enable postgresql-9.4}}

서비스를 즉시 시작하려면:

{{RootCmd|systemctl start postgresql-9.4}}

{{Path|/run/postgresql/}} 디렉터리가 올바른 위치에 있는지 확인하라는 오류가 나타나는 경우가 있습니다. 디렉터리가 없다면 다음 명령으로 만드십시오:

{{RootCmd|systemd-tmpfiles --create}}

설정 파일 권한을 확인하십시오:

{{RootCmd|ls -l /etc/postgresql-9.*/*}}
{{RootCmd|chown postgres:postgres /etc/postgresql-9.*/*}}
{{RootCmd|chmod 600 /etc/postgresql-9.*/*}}


{{Migrated|originalauthors=Aaron W. Swenson,Mikkel A. Clausen}}

[[Category:Database]]
