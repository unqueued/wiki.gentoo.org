This document features the grsecurity 2.x security patches, supported kernel configuration options and tools provided by the grsecurity project to lift your system's security to higher standards.

== About Grsecurity ==

=== The Grsecurity Project ===

The grsecurity project, hosted on [http://grsecurity.net http://grsecurity.net], provides various patches to the Linux kernel which enhance your system's overall security. The various features brought by grsecurity are discussed in the next chapter; a comprehensive list is maintained on the [http://en.wikibooks.org/wiki/Grsecurity/Appendix/Grsecurity_and_PaX_Configuration_Options grsecurity features page] itself. 

As grsecurity's features are mostly kernel-based, the majority of this document explains the various kernel features and their respective sysctl operands (if applicable).

=== Gentoo Hardened Integration ===

The [[Project:Hardened|Gentoo Hardened Project]] maintains security-enhancement features for Gentoo, including but not limited to grsecurity.

=== Kernel Configuration ===

Throughout this document we will talk about kernel configuration using the kernel variables like <code>CONFIG_GRKERNSEC_PAX_NO_ACL_FLAGS</code>. These are the variables that the kernel build process uses to determine if a certain feature needs to be compiled. 

When you configure your kernel through <code>make menuconfig</code> or similar, you receive a user interface through which you can select the various kernel options. If you select the ''Help'' button at a certain kernel feature you will see at the top that it lists such a kernel variable. 

You can therefore still configure your kernel as you like - with a bit of thinking. And if you can't find a certain option, there's always the possibility to edit {{Path|/usr/src/linux/.config}} by hand :) 

Of course, to be able to select the various grsecurity kernel options, you must enable grsecurity in your kernel: 

{{Kernel|Activating grsecurity|<pre>
CONFIG_GRKERNSEC=y
</pre>
}}

== PaX ==

=== Fighting the Exploitation of Software Bugs ===

PaX introduces a couple of security mechanisms that make it harder for attackers to exploit software bugs that involve memory corruption (so don't treat PaX as if it protects against all possible software bugs). The [http://pax.grsecurity.net/docs/pax.txt PaX introduction document] talks about three possible exploit techniques: 

# introduce/execute arbitrary code
# execute existing code out of original program order
# execute existing code in original program order with arbitrary data

One prevention method disallows executable code to be stored in writable memory. When we look at a process, it requires five memory regions: 

# a ''data section'' which contains the statically allocated and global data
# a ''BSS region'' (Block Started by Symbol) which contains information about the zero-initialized data of the process
# a ''code region'' , also called the ''text segment'' , which contains the executable instructions
# a ''heap'' which contains the dynamically allocated memory
# a ''stack'' which contains the local variables

The first PaX prevention method, called '''NOEXEC''', is meant to give control over the runtime code generation. It marks memory pages that do not contain executable code as non-executable. This means that the heap and the stack, which only contain variable data and shouldn't contain executable code, are marked as non-executable. Exploits that place code in these areas with the intention of running it will fail. 

NOEXEC does more than this actually, interested readers should focus their attention to the [http://pax.grsecurity.net/docs/noexec.txt PaX NOEXEC documentation]. 

The second PaX prevention method, called '''ASLR''' (Address Space Layout Randomization), randomize the addresses given to memory requests. Where previously memory was assigned contiguously (which means exploits know where the tasks' memory regions are situated) ASLR randomizes this allocation, rendering techniques that rely on this information useless. 

More information about ASLR can be found [http://pax.grsecurity.net/docs/aslr.txt online]. 

=== Enabling PaX ===

The recommended kernel setting for PaX is: 

{{Kernel|Recommended PaX Kernel Configuration|<pre>
#
# PaX Control
#
# CONFIG_PAX_SOFTMODE is not set
CONFIG_PAX_PT_PAX_FLAGS=y
CONFIG_PAX_NO_ACL_FLAGS=y
# CONFIG_PAX_HAVE_ACL_FLAGS is not set
# CONFIG_PAX_HOOK_ACL_FLAGS is not set
  
#
# Non-executable pages
#
CONFIG_PAX_NOEXEC=y
# CONFIG_PAX_PAGEEXEC is not set
CONFIG_PAX_SEGMEXEC=y
CONFIG_PAX_EMUTRAMP=y
CONFIG_PAX_MPROTECT=y
# CONFIG_PAX_NOELFRELOCS is not set

#
# Address Space Layout Randomization
#
CONFIG_PAX_ASLR=y
CONFIG_PAX_RANDKSTACK=y
CONFIG_PAX_RANDUSTACK=y
CONFIG_PAX_RANDMMAP=y

#
# Memory Protections
#
# CONFIG_GRKERNSEC_KMEM is not set
# CONFIG_GRKERNSEC_IO is not set
CONFIG_GRKERNSEC_PROC_MEMMAP=y
CONFIG_GRKERNSEC_HIDESYM=y
</pre>
}}

If you are running a non-x86 system you will observe that there is no CONFIG_PAX_NOEXEC. You should select CONFIG_PAX_PAGEEXEC instead as it is the only non-exec implementation around.

=== Controlling PaX ===

Not all Linux applications are happy with the PaX security restrictions. These tools include xorg-x11, java, mplayer, xmms and others. If you plan on using them you can elevate the protections for these applications using <code>paxctl</code>. 

{{Emerge|sys-apps/paxctl}}

<code>pax-utils</code> is a small toolbox which contains useful applications to administrate a PaX aware server. 

{{RootCmd|emerge pax-utils}}

Interesting tools include <code>scanelf</code> and <code>pspax</code>: 

* With <code>scanelf</code> you can scan over library and binary directories and list the various permissions and ELF types that pertain to running an ideal pax/grsec setup
* With <code>pspax</code> you can display PaX flags/capabilities/xattr from the kernel's perspective

=== Verifying the PaX Settings ===

Peter Busser has written a regression test suite called <code>paxtest</code>. This tool will check various cases of possible attack vectors and inform you of the result. When you run it, it will leave a logfile called {{Path|paxtest.log}} in the current working directory. 

{{Emerge|emerge paxtest}}

{{RootCmd|paxtest blackhat|output=<pre>
Executable anonymous mapping             : Killed
Executable bss                           : Killed
Executable data                          : Killed
Executable heap                          : Killed
Executable stack                         : Killed
Executable anonymous mapping (mprotect)  : Killed
Executable bss (mprotect)                : Killed
Executable data (mprotect)               : Killed
Executable heap (mprotect)               : Killed
Executable stack (mprotect)              : Killed
Executable shared library bss (mprotect) : Killed
Executable shared library data (mprotect): Killed
Writable text segments                   : Killed
Anonymous mapping randomisation test     : 16 bits (guessed)
Heap randomisation test (ET_EXEC)        : 13 bits (guessed)
Heap randomisation test (PIE)            : 25 bits (guessed)
Main executable randomisation (ET_EXEC)  : 16 bits (guessed)
Main executable randomisation (PIE)      : 17 bits (guessed)
Shared library randomisation test        : 16 bits (guessed)
Stack randomisation test (SEGMEXEC)      : 23 bits (guessed)
Stack randomisation test (PAGEEXEC)      : No randomisation
Return to function (strcpy)              : Vulnerable
Return to function (memcpy)              : Vulnerable
Return to function (strcpy, RANDEXEC)    : Killed
Return to function (memcpy, RANDEXEC)    : Killed
</pre>
}}

In the above example run you notice that: 

* strcpy and memcpy are listed as ''Vulnerable''. This is expected and normal - it is simply showing the need for a technology such as ProPolice/SSP
* there is no randomization for PAGEEXEC. This is normal since our recommended x86 kernel configuration didn't activate the PAGEEXEC setting. However, on arches that support a true NX (non-executable) bit (most of them do, including x86_64), PAGEEXEC is the only method available for NOEXEC and has no performance hit.

== RBAC ==

=== Role Based Access Control ===

There are two basic types of access control mechanisms used to prevent unauthorized access to files (or information in general): DAC (Discretionary Access Control) and MAC (Mandatory Access Control). By default, Linux uses a DAC mechanism: the creator of the file can define who has access to the file. A MAC system however forces everyone to follow rules set by the administrator. 

The MAC implementation grsecurity supports is called Role Based Access Control. RBAC associates ''roles'' with each user. Each role defines what operations can be performed on certain objects. Given a well-written collection of roles and operations your users will be restricted to perform only those tasks that you tell them they can do. The default "deny-all" ensures you that a user cannot perform an action you haven't thought of. 

=== Configuring the Kernel ===

The recommended kernel setting for RBAC is: 

{{Kernel|Recommended RBAC Kernel Configuration|<pre>
#
# Role Based Access Control Options
#
CONFIG_GRKERNSEC_ACL_HIDEKERN=y
CONFIG_GRKERNSEC_ACL_MAXTRIES=3
CONFIG_GRKERNSEC_ACL_TIMEOUT=30
</pre>
}}

=== Working with gradm ===

<code>gradm</code> is a tool which allows you to administer and maintain a policy for your system. With it, you can enable or disable the RBAC system, reload the RBAC roles, change your role, set a password for admin mode, etc. 

When you install <code>gradm</code> a default policy will be installed in {{Path|/etc/grsec/policy}}: 

{{Emerge|gradm}}

By default, the RBAC policies are not activated. It is the sysadmin's job to determine when the system should have an RBAC policy enforced and not Gentoo's. Before activating the RBAC system you should set an admin password. 

{{RootCmd|gradm -P|output=<pre>
Setting up grsecurity RBAC password
Password: ## (Enter a well-chosen password)
Re-enter Password: ## (Enter the same password for confirmation)
Password written in /etc/grsec/pw
</pre>}}

{{RootCmd|gradm -E}}

To disable the RBAC system, run <code>gradm -D</code>. If you are not allowed to, you first need to switch to the admin role: 

{{RootCmd|gradm -a admin|output=<pre>
Password: ## (Enter your admin role password)
</pre>}}

{{RootCmd|gradm -D}}

If you want to leave the admin role, run <code>gradm -u admin</code>: 

{{RootCmd|gradm -u admin}}

=== Generating a Policy ===

The RBAC system comes with a great feature called "learning mode". The learning mode can generate an anticipatory least privilege policy for your system. This allows for time and money savings by being able to rapidly deploy multiple secure servers. 

To use the learning mode, activate it using <code>gradm</code>: 

{{RootCmd|gradm -F -L /etc/grsec/learning.log}}

Now use your system, do the things you would normally do. Try to avoid rsyncing, running locate of any other heavy file i/o operation as this can really slow down the processing time. 

When you believe you have used your system sufficiently to obtain a good policy, let <code>gradm</code> process them and propose roles under {{Path|/etc/grsec/learning.roles}}: 

{{RootCmd|gradm -F -L /etc/grsec/learning.log -O /etc/grsec/learning.roles}}

{{Note|You will need to disable the RBAC learning mode before doing this. You can use <code>gradm -D</code> for this.}}

Audit the {{Path|/etc/grsec/learning.roles}} and save it as {{Path|/etc/grsec/policy}} (mode 0600) when you are finished. 

{{RootCmd|mv /etc/grsec/learning.roles /etc/grsec/policy
|chmod 0600 /etc/grsec/policy}}

You will now be able to enable the RBAC system with your new learned policy. 

=== Tweaking your Policy ===

An interesting feature of grsecurity 2.x is ''Set Operation Support'' for the configuration file. Currently it supports unions, intersections and differences of sets (of objects in this case). 

{{Code|Example sets|<pre>
define objset1 {
/root/blah rw
/root/blah2 r
/root/blah3 x
}
  
define somename2 {
/root/test1 rw
/root/blah2 rw
/root/test3 h
}
</pre>
}}

Here is an example of its use, and the resulting objects that will be added to your subject: 

{{Code|Example set use of the & sign|<pre>
subject /somebinary o
$objset1 & $somename2
</pre>
}}

The above would expand to: 

{{Code|Resulting subject settings|<pre>
subject /somebinary o
/root/blah2 r
</pre>
}}

This is the result of the & operator which takes both sets and returns the files that exist in both sets and the permission for those files that exist in both sets. 

{{Code|{{!}} Example|<pre>
subject /somebinary o
$objset1 | $somename2
</pre>
}}

This example would expand to: 

{{Code|Resulting subject settings|<pre>
subject /somebinary o
/root/blah rw
/root/blah2 rw
/root/blah3 x
/root/test1 rw
/root/test3 h
</pre>
}}

This is the result of the | operator which takes both sets and returns the files that exist in either set. If a file exists in both sets, it is returned as well and the mode contains the flags that exist in either set. 

{{Code|- Example|<pre>
subject /somebinary o
$objset1 - $somename2
</pre>
}}

This example would expand to: 

{{Code|Resulting subject settings|<pre>
subject /somebinary o
/root/blah rw
/root/blah2 h
/root/blah3 x
</pre>
}}

This is the result of the - operator which takes both sets and returns the files that exist in the set on the left but not in the match of the file in set on the right. If a file exists on the left and a match is found on the right (either the filenames are the same, or a parent directory exists in the right set), the file is returned and the mode of the second set is removed from the first set, and that file is returned. 

In some obscure pseudo-language you could see this as: 

{{Code|Pseudo-language explanation|<pre>
if ( ($objset1 contained /tmp/blah rw) and
     ($objset2 contained /tmp/blah r) )
then
  $objset1 - $objset2 would contain /tmp/blah w
  
if ( ($objset1 contained /tmp/blah rw) and
     ($objset2 contained / rwx) )
then 
  $objset1 - $objset2 would contain /tmp/blah h
</pre>
}}

As for order of precedence (from highest to lowest): "-, & |". 

If you do not want to bother remembering precedence, parenthesis support is also included, so you can do things like: 

{{Code|Parenthesis example|<pre>
(($set1 - $set2) | $set3) & $set4
</pre>
}}

== Filesystem Protection ==

=== Fighting Chroot and Filesystem Abuse ===

Grsecurity2 includes many patches that prohibits users from gaining unnecessary knowledge about the system. This includes restrictions on {{Path|/proc}} usage, chrooting, linking, etc. 

=== Kernel Configuration ===

We recommend the following grsecurity kernel configuration for filesystem protection: 

{{Kernel|Activating Filesystem Protection|<pre>
#
# Filesystem Protections
#
CONFIG_GRKERNSEC_PROC=y
# CONFIG_GRKERNSEC_PROC_USER is not set
CONFIG_GRKERNSEC_PROC_USERGROUP=y
CONFIG_GRKERNSEC_PROC_GID=10
CONFIG_GRKERNSEC_PROC_ADD=y
CONFIG_GRKERNSEC_LINK=y
CONFIG_GRKERNSEC_FIFO=y
CONFIG_GRKERNSEC_CHROOT=y
CONFIG_GRKERNSEC_CHROOT_MOUNT=y
CONFIG_GRKERNSEC_CHROOT_DOUBLE=y
CONFIG_GRKERNSEC_CHROOT_PIVOT=y
CONFIG_GRKERNSEC_CHROOT_CHDIR=y
CONFIG_GRKERNSEC_CHROOT_CHMOD=y
CONFIG_GRKERNSEC_CHROOT_FCHDIR=y
CONFIG_GRKERNSEC_CHROOT_MKNOD=y
CONFIG_GRKERNSEC_CHROOT_SHMAT=y
CONFIG_GRKERNSEC_CHROOT_UNIX=y
CONFIG_GRKERNSEC_CHROOT_FINDTASK=y
CONFIG_GRKERNSEC_CHROOT_NICE=y
CONFIG_GRKERNSEC_CHROOT_SYSCTL=y
CONFIG_GRKERNSEC_CHROOT_CAPS=y
</pre>
}}

=== Triggering the Security Mechanism ===

When you're using a kernel compiled with the above (or similar) settings, you will get the option to enable/disable many of the options through the {{Path|/proc}} filesystem or via <code>sysctl</code>. 

The example below shows an excerpt of a typical {{Path|/etc/sysctl.conf}}: 

{{Code|Example settings inside /etc/sysctl.conf|<pre>
kernel.grsecurity.chroot_deny_sysctl = 1
kernel.grsecurity.chroot_caps = 1
kernel.grsecurity.chroot_execlog = 0
kernel.grsecurity.chroot_restrict_nice = 1
kernel.grsecurity.chroot_deny_mknod = 1
kernel.grsecurity.chroot_deny_chmod = 1
kernel.grsecurity.chroot_enforce_chdir = 1
kernel.grsecurity.chroot_deny_pivot = 1
kernel.grsecurity.chroot_deny_chroot = 1
kernel.grsecurity.chroot_deny_fchdir = 1
kernel.grsecurity.chroot_deny_mount = 1
kernel.grsecurity.chroot_deny_unix = 1
kernel.grsecurity.chroot_deny_shmat = 1
</pre>
}}

You can enable or disable settings at will using the <code>sysctl</code> command: 

Toggling the exec_logging feature ON

{{RootCmd|sysctl -w kernel.grsecurity.exec_logging {{=}} 1}}

Toggling the exec_logging feature OFF

{{RootCmd|sysctl -w kernel.grsecurity.exec_logging {{=}} 0}}

There is a very important sysctl setting pertaining to grsecurity, namely <code>kernel.grsecurity.grsec_lock</code>. When set, you are not able to change any setting anymore. 

{{RootCmd|sysctl -w kernel.grsecurity.grsec_lock {{=}} 1}}

== Kernel Auditing ==

=== Extend your System's Logging Facilities ===

grsecurity adds extra functionality to the kernel pertaining the logging. With grsecurity's ''Kernel Auditing'' the kernel informs you when applications are started, devices (un)mounted, etc. 

=== The various Kernel Audit Settings ===

The following kernel configuration section can be used to enable grsecurity's Kernel Audit Settings: 

{{Kernel|Activating Kernel Auditing|<pre>
#
# Kernel Auditing
#
# CONFIG_GRKERNSEC_AUDIT_GROUP is not set
CONFIG_GRKERNSEC_EXECLOG=y
CONFIG_GRKERNSEC_RESLOG=y
CONFIG_GRKERNSEC_CHROOT_EXECLOG=y
CONFIG_GRKERNSEC_AUDIT_CHDIR=y
CONFIG_GRKERNSEC_AUDIT_MOUNT=y
CONFIG_GRKERNSEC_AUDIT_IPC=y
CONFIG_GRKERNSEC_SIGNAL=y
CONFIG_GRKERNSEC_FORKFAIL=y
CONFIG_GRKERNSEC_TIME=y
CONFIG_GRKERNSEC_PROC_IPADDR=y
CONFIG_GRKERNSEC_AUDIT_TEXTREL=y
</pre>
}}

== Process Restrictions ==

=== Executable Protection ===

With grsecurity you can restrict executables. Since most exploits work through one or more running processes this protection can save your system's health. 

=== Network Protection ===

Linux' TCP/IP stack is vulnerable to prediction-based attacks. grsecurity includes randomization patches to counter these attacks. Apart from these you can also enable socket restrictions, disallowing certain groups network access alltogether. 

=== Kernel Settings ===

The following kernel settings enable various executable and network protections: 

{{Kernel|Kernel setting|<pre>
#
# Executable Protections
#
CONFIG_GRKERNSEC_EXECVE=y
CONFIG_GRKERNSEC_DMESG=y
CONFIG_GRKERNSEC_RANDPID=y
CONFIG_GRKERNSEC_TPE=y
CONFIG_GRKERNSEC_TPE_ALL=y
CONFIG_GRKERNSEC_TPE_GID=100
  
#
# Network Protections
#
CONFIG_GRKERNSEC_RANDNET=y
CONFIG_GRKERNSEC_RANDISN=y
CONFIG_GRKERNSEC_RANDID=y
CONFIG_GRKERNSEC_RANDSRC=y
CONFIG_GRKERNSEC_RANDRPC=y
# CONFIG_GRKERNSEC_SOCKET is not set
</pre>
}}

== The Hardened Toolchain ==

Although it is outside the scope of this document we mention the use of the [[Project:Hardened/FAQ#How_do_I_switch_to_the_hardened_profile.3F|hardened toolchain]] which completes the grsec/PaX model from userspace.

== Resources ==

* [http://grsecurity.net/ Grsecurity Homepage]
* [http://forums.grsecurity.net/ Grsecurity Forums]
* [http://grsecurity.net/researchpaper.pdf Increasing Performance and Granularity in Role-Based Access Control Systems] 
* [[Project:Hardened/Overview_of_POSIX_capabilities|Capability Names and Descriptions]]
* [http://grsecurity.net/quickstart.pdf Grsecurity Quick-Start Guide] (NEW .pdf)
* [[Project:Hardened/PaX_Quickstart|Using PaX with Gentoo QuickStart]] (NEW)
* [[Project:Hardened/Grsecurity2_Quickstart|Grsecurity with Gentoo 1.9.x MAC system]] (OLD)
* [http://grsecurity.net/PaX-presentation_files/frame.htm PaX: The Guaranteed End of Arbitrary Code Execution] 
* [http://pax.grsecurity.net PaX HomePage and Documentation]

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:

* Ned Ludd
* Sven Vermeulen
