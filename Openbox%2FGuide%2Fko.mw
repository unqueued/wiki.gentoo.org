<languages />


{{Metadata|abstract=이 안내서에서는 사용자에게 OpenBox 창 관리자를 설치하고 설정하는 방법을 알려주려합니다. 대부분의 OpenBox와 관련있을 프로그램은 이 게시물을 참조합니다.}}

이 안내서에서는 사용자에게 OpenBox 창 관리자를 설치하고 설정하는 방법을 알려주려합니다. 대부분의 OpenBox와 관련있을 프로그램은 이 게시물을 참조합니다. 간단한 설치 안내서와 같은 더 간단한 내용을 원하신다면  [[Openbox/ko|Openbox]]를 보십시오.

== 도입부 ==

=== Openbox란 무엇인가요?===

[[Xorg/Configuration/ko|X 서버]]를 설치한 후 기본 창 관리자(Tab Window Manager, or TWM)는 그 자체로 되는게 없습니다. 대부분의 사용자는 [[KDE/ko|KDE]], [[GNOME/ko|GNOME]], [[Xfce/HOWTO/ko|Xfce]]와 같은 거대한 데스크톱 환경을 보유할겁니다. 이 거대한 데스크톱 모음의 한 구성요소를 창 관리자(또는 줄여서 WM)라고 합니다. 창 관리자는 프로그램을 실행하는 컨테이너(또는 "창")의 모양새와 위치를 책임집니다. Openbox는 간소하며 장식이 빠진 창 관리자입니다.

=== 왜 Openbox를 사용해야 하죠? ===

Openbox는 거대한 데스크톱 환경과는 달리 매우 적은 라이브러리에 의존합니다. 이 때문에 오래된 하드웨어에서도 빠르게 실행하는 가벼운 그래픽 환경을 제공할 수 있습니다. 시스템 하드웨어가 최신이든 아니든, Openbox는 상당히 이곳저곳을 설정할 수 있으며 돋보이지 않은 평범한 작업 환경을 갖추고 있습니다. 패널, 작업 표시줄, 시계 또는 기타 프로그램이 없다면 만들어서 쓸 수 있는 선택권이 있다는 의미입니다! 

== 설치 및 설정 ==

=== 초기 설정 ===

{{Package|x11-base/xorg-server}}를 이머지하고 설정하고 나면, Openbox 설치는 간단한 하나의 명령으로 끝낼 수 있습니다: 

{{Emerge|x11-wm/openbox}}

다른 창 관리자와 데스크톱 환경처럼, Openbox를 자동으로 불러오려면, X 서버에서 Openbox를 시작하라고 해야 합니다. 사용자 내 폴더에서 {{Path|~/.xinitrc}} 파일에 Openbox를 추가하면 됩니다:

{{Cmd|echo "exec openbox-session" >> ~/.xinitrc}}

이 명령은 터미널에 <kbd>startx</kbd> 명령을 입력했을 때 자동으로 Openbox 세션을 시작합니다. 

{{Important/ko|각 사용자가 {{Path|.xinitrc}} 파일을 지니고 있기에 startx 명령을 <tt>root</tt> 사용자가 아닌 일반 사용자의 자격으로 실행했는지 확인하십시오.}}

{{Note/ko|자동 마운트에 문제가 있거나, dbus와 ConsoleKit을 사용했다면 <code>exec ck-launch-session dbus-launch --sh-syntax --exit-with-session openbox-session</code> 명령을 위에서 사용한 <code>exec openbox-session</code> 명령 ''대신'' 각 사용자의 {{Path|.xinitrc}} 파일에 넣어야합니다.}}

{{Note|It is possible to replace the KDE, GNOME, or Xfce default window manager with Openbox by following the [[#Openbox inside desktop environments|Openbox inside desktop environments]] directions.}}

이제 Openbox를 이머지했고 적당한 명령을 사용자의 {{Path|.xinitrc}}파일에 넣었으며, 실제 동작을 통해 <kbd>startx</kbd> 명령으로 Openbox를 열어보았습니다. 조심하십시오! 데스크톱이 잡동사니로 가득찬 모양으로 나타날 수 있습니다. 다음의 Openbox 철학에 따르면, 베어본 환경에서는 사용자가 원하는 데스크톱을 사용자 스스로가 스스로 만들어냅니다. 

startx 명령을 입력하면 보통 기본 Openbox의 시커먼 환경 이외에는 아무것도 나타나지 않습니다. 메뉴는 어디있을까요? 마우스 오른쪽 버튼을 눌러보십시오. 커서 위치에 메뉴가 뜹니다. 이 메뉴는 Openbox 메뉴의 ''스타일''을 나타내는 예제 그 이상의 무엇도 아닙니다. 단지 예제일 뿐이며, 프로그램을 이머지하기 전에는 메뉴의 어떤 항목도 동작하지 않습니다. 다음 절에서는, 개별 설정 메뉴에 사용자가 원하는 프로그램의 링크를 넣어 만드는 방법을 알려드리겠습니다. 

{{Important|When right clicking to view the menu pop up menu generates a box with no legible entries, then the system will need to install some fonts. Two common font choices are {{Package|media-fonts/corefonts}} (under EULA license, or its free counterpart {{Package|media-fonts/croscorefonts}} for freedom conscious individuals) and {{Package|media-fonts/ttf-bitstream-vera}}.}}

=== 메뉴 설정 ===

기본 상태의 Openbox 메뉴는 본질적으로 위에 언급한대로 쓸모가 없기 때문에 이걸 가지고 제대로 동작하도록 하는 시간을 갖도록 하겠습니다. Openbox 의 모든 요소는 {{Path|menu.xml}} 파일로 작성하며, 사용자별 위치에 따른 {{Path|~/.config/openbox/menu.xml}}, 또는 시스템 전체 기본으로 사용할 {{Path|/etc/xdg/openbox/menu.xml}} 파일이 될 수 있습니다. 기본적으로 시스템 전체 사용자를 위해 만든 {{Path|menu.xml}} 파일만 존재합니다. 

수정할 수 있는 기본 메뉴 파일을 가져올 쉬운 방법은 MenuMaker를 사용하여 현재 시스템에 설치한 프로그램을 기반으로 {{Path|menu.xml}} 파일을 만드는 것입니다. 

{{RootCmd|emerge menumaker}}

Once it is installed, make sure to logout of root, and back into the user account. Then instruct MenuMaker to create a menu specifically using the Openbox XML syntax: 

{{Cmd|mmaker -v OpenBox3}}

The generated menu will be located at {{Path|~/.config/openbox/menu.xml}}. Users can then choose to leave it as the user-specific {{Path|menu.xml}}, or to additionally copy it to the system-wide menu configuration as well: 

{{RootCmd|cp .config/openbox/menu.xml /etc/xdg/openbox/menu.xml}}

{{Important|It is a good idea to use MenuMaker to generate a default menu, as it will have the Openbox root-menu items. These items include a virtual desktop switcher, and the commands to restart and exit the Openbox session.}}

When opening up the {{Path|menu.xml}} file in an editor (nano, for example), users will notice that the XML tags used are very human-readable and easily understandable. Users can modify the default file to fit their needs, or they can write it from scratch (don't worry, it's really not that difficult). The basic syntax for the menu XML is as follows: 

{{FileBox|filename=menu.xml|title=메뉴용 XML 문법 예제|lang=xml|1=
<?xml version="1.0" encoding="UTF-8"?>
<openbox_menu>
<separator label="NAME_OF_SEPARATOR" />
<menu id="IDENTIFIER" label="NAME_OF_MENU">
  <item label="NAME_OF_PROGRAM">
    <action name="execute"><execute>/LOCATION/OF/BINARY</execute></action>
  </item>
</menu>
</openbox_menu>
}}

The above example will work for any applications that launch with standard options in their own windows, but what if one needs to append options to the program at launch time? That is no problem either, just add the options to the command, as usual.

{{FileBox|filename=menu.xml|title=명령 옵션 추가|lang=xml|1=
<?xml version="1.0" encoding="UTF-8"?>
<openbox_menu>
<separator label="NAME_OF_SEPARATOR" />
<menu id="IDENTIFIER" label="NAME_OF_MENU">
  <item label="NAME_OF_PROGRAM">
    <action name="execute"><command>/LOCATION/OF/BINARY --OPTION1 --OPTION2</command></action>
  </item>
</menu>
</openbox_menu>
}}

Simply replace anything in ALL_CAPS in the above two examples with the right information. Alternatively, use <tt>obmenu</tt>, which is a graphical interface allowing users to create personalized menus without having to manually edit the {{Path|menu.xml}} file. It is a very small application and offers a nice amount of customization without typing any XML.

=== Openbox 테마 및 동작 설정 ===

Aside from being minimalistic and lightweight, Openbox is also surprisingly customizable and flexible. A user can easily change various settings related to theme, appearance, window placement, docking, and more. There are two options for configuring these settings within Openbox. It is possible to either manually edit {{Path|~/.config/openbox/rc.xml}}, or to use a GUI to help in quickly changing the settings. 

To manually edit {{Path|rc.xml}}, open up a text editor and start making changes. Don't forget to make a backup of the original file just in case, and store it in a location like {{Path|~/.config/openbox/rc.xml.default}}. There are plenty of comments within the document itself that should help with editing. Alternatively, take a look at the [http://openbox.org/wiki/Help:Contents#Configuration Openbox configuration guides]. 

If manually editing {{Path|rc.xml}} isn't preferred, then try to use the GTK+ application to manage themes and behaviors in Openbox. The application that can be used is called ObConf, and can be installed on the system just as easily as was Openbox itself. 

{{RootCmd|emerge obconf}}

Next open the configurator by typing <code>obconf</code> in the terminal. Go and add an entry for ObConf into the {{Path|menu.xml}} so it will show up in the Openbox menu. If the "editing the menu.xml file" code listing above seemed too vague to be helpful, we'll use ObConf as an example of a menu entry: 

{{FileBox|filename=menu.xml|title=Using obconf|lang=xml|1=
<?xml version="1.0" encoding="UTF-8"?>
<openbox_menu>
<menu id="1" label="Configuration">
  <item label="OpenBox Config">
    <action name="execute"><execute>/usr/bin/obconf</execute></action>
  </item>
</menu>
</openbox_menu>
}}

While ObConf is a great GUI tool for editing many behavior-related settings for Openbox, it doesn't allow one to manipulate nearly as many settings as are presented in the {{Path|rc.xml}} file itself. Please consult the [http://openbox.org/wiki/Configuration Openbox Wiki] for more information.

{{Note|In recent versions of Openbox (namely >3.4.7.2), one may experience a delay in the submenu opening. This setting was introduced into the rc.xml file, and is listed as <code><nowiki><submenuShowDelay>100</submenuShowDelay></nowiki></code>. Simply choose a lower number that suits personal needs.}}

=== 자동 시작 설정 ===

As mentioned above, not a whole lot is seen when running the <code>startx</code> command for the first time after installing Openbox. In addition to customizing menus and changing the behavior of the window manager, most users will probably want to have some programs automatically start with their Openbox session. There is an easily-editable {{Path|autostart.sh}} script that allows to do just that. Just like with the {{Path|menu.xml}} file, there are two different locations of the {{Path|autostart.sh}} script--the system-wide ({{Path|/etc/xdg/openbox/autostart.sh}}), and the user-defined ({{Path|~/.config/openbox/autostart.sh}}). 

In the default {{Path|autostart.sh}}, notice a bunch of lines calling for programs like the gnome-settings-daemon, XDG, and others. These lines will generate errors upon logout if the programs are not installed and configured. The easiest thing to do when getting started with Openbox is to just comment out these lines by using the # symbol. 

{{FileBox|filename=autostart.sh|title=Commenting out snippets in autostart|lang=bash|1=
# Run XDG autostart things. By default don't run anything desktop-specific
# DESKTOP_ENV=""
# if which /usr/lib/openbox/xdg-autostart >/dev/null; then
#  /usr/lib/openbox/xdg-autostart $DESKTOP_ENV
# fi
}}

In the above example, the comment symbol (#) was added before each line. The commenting method is preferred to just deleting the lines because users may want to add support for some of those startup items at a later time. Thus, leaving the default lines in place could ease that process. 

{{Path|autostart.sh}} 스크립트로의 프로그램 추가는 많은 프로그램의 이름을 쓰는 만큼 쉽습니다. {{Package|app-admin/conky}}(경량 시스템 감시 프로그램)를 설치했고 Openbox 세션에서 자동으로 시작해야 한다면, 다음 줄을 {{Path|autostart.sh}} 파일에 간단하게 추가하기만 하면 됩니다: 

{{FileBox|filename=autostart.sh|title=Conky를 autostart.sh에 추가하기|lang=bash|1=
conky &
}}

명령 뒤에 붙은 앰퍼샌드(&)는 프로그램을 백그라운드에 불러오도록 합니다. 대부분 사용자는 Openbox와 기타 프로그램이 앞서 실행한 프로그램이 끝날 때까지 기다리지 않고 동작하게 하려고 {{Path|autostart.sh}} 스크립트에서 모든 프로그램을 백그라운드에 불러내려 할 것입니다.

=== PolKit 설정 ===

수많은 프로그램은 [http://www.freedesktop.org/wiki/Software/polkit/ PolKit] 인증 프레임워크에 의존합니다. 해당 프로그램은 Openbox 세션에서 실행하는 <code>polkit-gnome</code>과 같은 PolKit 대리자 프로그램이 필요합니다. 

먼저 대리자 프로그램을 설치하십시오: 

{{RootCmd|emerge polkit-gnome}}

이제 Openbox에 로그인할 때 PolKit을 자동으로 시작하도록 설정할 차례입니다. 다음 줄을 {{Path|~/.config/openbox/autostart}}(단일 사용자용) 또는  {{Path|/etc/xdg/openbox/autostart.sh}}(모든 사용자용)에 추가하십시오: 

{{FileBox|filename=autostart.sh|title=자동으로 PolKit 시작|lang=bash|1=
sleep 1 && /usr/libexec/polkit-gnome-authentication-agent-1 &
}}

=== 바탕 화면 설정 ===

거대한 데스크톱 환경에서 사용자가 권한을 받아야 할 어떤 요소는 Openbox에 기본으로 들어있지 않습니다. 데스크톱 바탕 화면이 이 경우입니다. 그림을 바탕 화면으로 설정하려면 {{Package|media-gfx/feh}} 또는 {{Package|x11-misc/nitrogen}}과 같은 프로그램으로 이머지하십시오. <code>feh</code>는 간단한 이미지 보기 프로그램이며 바탕 화면을 지정할 수 있으며, ''그리고'' 자동 시작 스크립트에 간단하게 넣을 수 있습니다. <code>feh</code>를 이머지 하고 나면 바탕 화면을 설정할 다음 명령을 실행하십시오: 

{{Note/ko|feh는 화면 해상도만큼 크기를 늘리는 --bg-scale 대신 쓸 수 있는 옵션이 여러가지가 있습니다. feh 문서를 참고하십시오.}}

{{Cmd|feh --bg-scale /path/to/image.jpg}}

바탕 화면을 직접 설정하고 나면, 사용자 내 폴더에 {{Path|.fehbg}} 파일을 만듭니다. 이 파일에는 터미널에 들어갔을 때 입력한 명령이 들어있기만 할 뿐이며, 다른 바탕 화면 명령을 실행하면 자동으로 업데이트합니다. 이제, 바탕화면을 로그인한 후 자동으로 설정하려면 {{Path|autostart.sh}} 스크립트에 다음 줄을 추가하십시오: 

{{Cmd|source $HOME/.fehbg &}}

이 프로그램 대신 <code>nitrogen</code>을 사용해보십시오. 이 프로그램은 바탕 화면 그림용 폴더를 사용자가 설정할 수 있으며, 그림의 미리보기를 볼 수 있고, 데스크톱 크기만큼 크기를 맞추고, 늘이며, 바둑판 형식으로 데스크톱에 배치할 수 있습니다. 

<code>nitrogen</code>을 설치하고 Openbox 메뉴에 끌어 다 넣으려면 확실하지 않다기보단, 더 많은 처리 과정이 필요합니다. 먼저 <code>emerge nitrogen</code>를 실행한 후, 바탕 화면 그림이 있는 폴더를 매개변수로 지정하여 <code>nitrogen</code>를 실행하십시오: 

{{Cmd|nitrogen /path/to/the/backgrounds/folder}}

그 다음, 바탕 화면 그림을 설정하는데, 로그아웃을 하면 그 자리에에 그림이 더이상 남아나지 않음을 기억해두십시오. <code>feh</code>와 마찬가지로 {{Path|autostart.sh}} 스크립트를 편집하여 다음 줄을 추가하면 바탕 화면을 복구합니다. 

{{Cmd|nitrogen --restore &}}

이 명령은 Openbox 세션을 시작할 때 nitrogen을 자동으로 불러오며, feh보단 불러오는 시간이 약간 느릴 수 있습니다. 

== Openbox와 사용할 프로그램 ==

다음은 Openbox 환경에서 사용할 몇가지 프로그램의 목록입니다. 목록에는 여러가지 터미널 에뮬레이터, 파일 관리자, 패널 등이 있으며, 이들 목록은 철저하게 고려한게 아닙니다. 더 많은 옵션의 정보는 포티지의 적당한 항목 분류에서 확인해보십시오. 

=== 터미널 에뮬레이터 ===

* {{Package|lxde-base/lxterminal}} is the default terminal emulator for LXDE. It is very lightweight, and based on VTE. While EvilVTE offers many more customization options (including transparency), LXterminal has a graphical interface for some of the more common options (font, colors, et cetera).

* {{Package|x11-terms/evilvte}} is an extremely lightweight terminal emulator based on VTE. It supports tabs, multiple encodings, as well as an easy and extensible configuration file.

* {{Package|x11-terms/mrxvt}} is a multi-tabbed rxvt clone with XFT, transparent background and CJK support. It also features session support for each tab.

* {{Package|x11-terms/aterm}} supports transparency and backwards compatibility with rxvt. It was originally designed for the AfterStep window manager, but easily integrates with other environments.

* {{Package|x11-terms/eterm}} is a terminal based on vt102 and designed to be a more feature-rich replacement for xterm.

* {{Package|x11-terms/rxvt-unicode}} is a clone of rxvt that supports Unicode, daemons, embedded perl, and multiple fonts simultaneously.

* {{Package|x11-terms/xfce4-terminal}} is the VTE-based default for the Xfce desktop environment, so it does require some Xfce libraries to run. However, it is still fairly speedy, and supports transparency and is easily customized.

=== 파일 관리자 ===

* {{Package|x11-misc/pcmanfm}} is the lightweight file manager from LXDE. It supports tabbed browsing, drag and drop, thumbnails for images, bookmarks, volume management, searching, and more. It also provides supports for managing the desktop background and drawing desktop icons (both optionally).

* {{Package|xfce-base/thunar}} is the standard file manager from Xfce. It features a bulk renamer, user-customizable actions, and an extension framework, along with many optional plug-ins, such as media tag editing. It depends on several Xfce libraries, but it's still slimmed down compared to other file managers like Nautilus (from GNOME), and Konqueror (from KDE).

* {{Package|gnome-base/nautilus}} is the powerful file manager from the GNOME desktop environment. It features volume management, thumbnails for images, searching, and some system configuration. As it depends on many of the GNOME libraries for proper function, it can seem a bit heavy compared to some of the other file managers.

* {{Package|app-misc/gentoo}} (no relation to this glorious Linux distribution) is a two-pane style file manager. It is incredibly lightweight, but lacks a some features now prominent in modern file managers. It should definitely be considered for older hardware, or if a barebones setup is needed.

* {{Package|app-misc/emelfm2}} is another file manager in the vein of Midnight Commander. It features a two-pane window. As with the Gentoo file manager (listed above), it is bare bones and does not include many features prevalent in newer file managers. However, it also offers a few features not found in other file managers, such as a built-in command line in a separate pane.

=== 데스크톱 관리 프로그램 ===

* Though {{Package|x11-misc/pcmanfm}} is mainly a file manager, it also gives the option to manage the desktop background (instead of using <code>feh</code> or <code>nitrogen</code> ) and draw desktop icons.

* {{Package|x11-misc/idesk}} is a simple program used to draw desktop icons. It supports shadowed and anti-aliased fonts, PNG images, "snap-to-grid" placement, and changing the desktop background.

=== 패널 ===


*  [http://code.google.com/p/tint2/ Tint2] is a simple, lightweight panel and taskbar. It supports color, transparency, a clock, drag and drop between virtual desktops, a system tray, and comes with a battery monitor. One can even add a button to display the applications menu from the window manager.

* {{Package|x11-misc/pypanel}} is an easily customized panel written in Python and C. It features transparency, shading, tinting, location and layout configuration, font type, auto-hiding, application launcher, clock, and more.

* {{Package|lxde-base/lxpanel}} is the default panel and taskbar from LXDE. It features a launcher, menu, clock, and a GUI-based configurator. It is feature-rich while depending on very few packages, making it a good choice for a lean system.

* {{Package|xfce-base/xfce4-panel}} is the default panel from the Xfce desktop environment. It supports application launchers, detachable menus, a pager, tasklist, clock, applets, and more. It does, however, require a few of the Xfce libraries which are not dependencies of some other panels.

* {{Package|x11-misc/fbpanel}} is a simple, extremely lightweight panel that supports window lists, launchers, a clock, and a few other goodies. It's not the most featureful panel, and it can be cumbersome to configure, but it needs only GTK+ to run.

=== 페이저 및 시스템 표시줄 프로그램 ===


* {{Package|x11-misc/netwmpager}} is an EWMH-compliant pager that integrates nicely into any of the *box environments. It is not as obtrusive, and is much more readily customizable than many of the other available pagers.

* {{Package|x11-misc/bbpager}} is a desktop pager that was originally written for BlackBox, but works nicely with Openbox as well. It does have some BlackBox dependencies though.

* {{Package|x11-plugins/docker}} is the system tray that is made especially for Openbox. It has no extra dependencies, and gives the ability to view and use tray icons for supported GTK and QT-based applications.

* {{Package|x11-misc/trayer}} is a system tray that was modified from the FBpanel code, and is often used with FVWM. One of its perks is that it supports transparency.

=== Session management ===


* {{Package|lxde-base/lxsession}} is the stripped down session manager from LXDE. It is designed to remember applications that the user was running at the last logout, and to automatically restart those programs. It also supports the HAL daemon.

* {{Package|xfce-base/xfce4-session}} is the session manager from Xfce. It is capable of saving several sessions, and provides methods for logging out, rebooting, and suspending the computer. It does, however, have many Xfce dependencies.

=== Configuration tools ===


* {{Package|x11-misc/obconf}} is a GUI application allowing to customize the Openbox window manager without manually editing {{Path|~/.config/openbox/rc.conf}}.

* {{Package|lxde-base/lxappearance}} is a GTK theme and icon configurator used with LXDE. It provides a nice graphical interface for setting the theme and icons, while depending on very few extra libraries.

* {{Package|x11-themes/gtk-chtheme}} is a simple application allowing for easier switching of GTK themes and the font. Currently, it does not allow for the switching of icon themes.

* {{Package|x11-themes/gtk-theme-switch}} is another simple application that allows users to change their GTK theme.

=== Miscellaneous ===

* {{Package|app-admin/conky}} is a lightweight system monitor that can display over 250 objects, including date and time, CPU usage, memory usage, IMAP/POP3 email, top processes, hardware sensor data, and even info from the music player. It is highly customizable both in appearance and data display. We also have a [[Conky/HOWTO|Conky configuration guide]] available.

* {{Package|app-editors/leafpad}} is a simple text editor. It is very lightweight, but includes features like codeset options, and the ability to undo/redo without limits.

* {{Package|media-gfx/feh}} is a simple image viewer that runs from the terminal, but it also has many other features. It can display a slideshow of images, create an index print, dynamically zoom, and set the desktop background (detailed instructions above).

* {{Package|media-gfx/gpicview}} is a GUI-based image viewer. Though it has more dependencies than <code>feh</code>, it is incredibly quick to load and run.

* {{Package|x11-misc/slim}} is the Simple Login Manager, which allows to login to the Openbox session via a graphical interface instead of the terminal. It has very few dependencies, and supports many themes, but should not be used on machines that require remote logins.

== Openbox inside desktop environments ==

=== LXDE ===

If installing each component of a working environment sounds like a little ''too'' much customization, but the flexibility of Openbox is still wanted, then take a look into a desktop environment that uses Openbox as its default window manager. That environment is [http://www.lxde.org/ LXDE], the Lightweight X Desktop Environment. Designed to require even fewer system resources than Xfce, it is built around Openbox. 

=== Openbox inside GNOME ===

If a GNOME environment is already installed, then just replace the Metacity window manager with Openbox. Fortunately, this is quite a simple task! Fire up an editor, open the {{Path|~/.xinitrc}} file, and put the following command inside it: 

{{FileBox|filename=~/.xinitrc|title=Adding an Openbox-GNOME session to .xinitrc|lang=bash|1=
exec openbox-gnome-session
}}

When using GDM or another graphical login manager, notice a new "GNOME/Openbox" option in the session menu. Simply select that option instead of manually editing the {{Path|~/.xinitrc}}. 

=== Openbox inside KDE ===

It is possible to use Openbox as the window manager inside of KDE by simply editing the {{Path|~/.xinitrc}} file, and replacing the current exec command with the following: 

{{FileBox|filename=~/.xinitrc|title=Adding an Openbox-KDE session to .xinitrc|lang=bash|1=
exec openbox-kde-session
}}

Now when issuing <code>startx</code> users will see KDE, but instead of KWin, they will have the customizability of the Openbox window manager. 

When using KDM or another graphic login manager, a new "KDE/Openbox" option will appear in the session menu. Simply select that option instead of manually editing the {{Path|~/.xinitrc}}. 

{{Note|This method of using Openbox with KDE has been tested with the KDE 3.x releases. While it seems highly likely that it will work with the KDE 4.x series, it has not been thoroughly tested as of yet.}}

=== Openbox inside Xfce ===

To use Xfce4 with Openbox, first start a normal Xfce session, and open up a terminal. From the terminal, issue the following command: 

{{Cmd|killall xfwm4 ; openbox & exit}}

Second, exit out of the Xfce session, and make sure to tick the checkbox that says "Save session for future login." This will keep Openbox as the default window manager. Third, notice that the default logout menu action no longer works. To fix this problem, open up the {{Path|menu.xml}} file, and locate this line: 

{{FileBox|filename=menu.xml|title=Exit action|lang=xml|1=
<item label="Exit">
     <action name="Exit"/>
</item>
}}

Change it to this: 

{{FileBox|filename=menu.xml|title=New exit action|lang=xml|1=
<item label="Exit">
  <action name="Execute">
    <command>xfce4-session-logout</command>
  </action>
</item>
}}

{{Note|With Xfce4, the root-menu provided by Xfdesktop will be used instead of the Openbox root-menu.}}

== External resources ==

While this document will easily take users through the initial installation and customization of Openbox, it is by no means the only reference on the topic. There are several other resources that will aid in creating a perfect Openbox setup. Some of them are listed below: 

* On [http://openbox.org/wiki/Main_Page The Official Openbox website] users will find more detailed information regarding theming, creating menus (including pipe menus), autostart scripting, and much more. This site also has information regarding new releases, upgrades, and instructions on how to contribute to development.

* The [http://urukrama.wordpress.com/openbox-guide/ Urukrama's Guide to Openbox] blog contains a plethora of information about switching GTK+ themes, setting up keybindings, desktop effects, and other programs to use in conjunction with Openbox. Though the tutorial was originally written for use with Ubuntu, everything is applicable to Gentoo (and other Linux distributions for that matter).

*  [http://box-look.org/ Box-Look] provides numerous themes, icons, wallpapers, fonts, and tools to be used with Openbox (as well as the other *box window managers like Fluxbox, Blackbox, PekWM, etc.)




{{Migrated|originalauthors=nathanzachary and nightmorph}}

[[Category:Window manager]]
