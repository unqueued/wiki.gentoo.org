<languages />

{{InfoBox stack
|{{InfoBox homepage|http://btrfs.wiki.kernel.org|header=true}}
|{{InfoBox gitweb|http://git.kernel.org/cgit/linux/kernel/git/kdave/btrfs-progs.git|raw=true|text=Userspace}}
|{{InfoBox gitweb|http://git.kernel.org/cgit/linux/kernel/git/mason/linux-btrfs.git/tree/fs/btrfs?id{{=}}HEAD|raw=true|text=Kernel}}
|{{InfoBox wikipedia}}
|{{InfoBox ohloh}}
}}

'''Btrfs''' — это [[Article description::copy-on-write (копирование при записи (CoW)) [[filesystem/ru|файловая система]] для Linux, предназначенная для реализации расширенных возможностей, с уделением особого внимания отказоустойчивости, восстановлению и простоте администрирования.]] Совместно разработана Oracle, Red Hat, Fujitsu, Intel, SUSE, STRATO и многими другими. Btrfs лицензирована под [[wikipedia:GNU_General_Public_License|GPL]] лицензией и открыта для участия всех желающих.

== Возможности ==

Ext4 является безопасной и стабильной и может обрабатывать большие файловые системы с экстентами, но зачем переключаться? Хотя Btrfs все еще считается экспериментальной, стабильность её растет, и время, когда Btrfs станет файловой системой по умолчанию для систем Linux, становится все ближе. Некоторые дистрибутивы Linux уже начали переключаться на нее в своих текущих релизах. Btrfs имеет ряд дополнительных функций, общих с ZFS, которые и сделали файловую систему ZFS популярной для BSD дистрибутивов и устройств NAS.

*'''"Копирование при записи" и создание снимков''' - Делает инкрементные резервные копии безболезненными даже из "активной" файловой системы или виртуальной машины (ВМ).
*'''Контрольные суммы уровня файла''' - Метаданные для каждого файла включают контрольную сумму, которая используется для обнаружения и исправления ошибок.
*'''Сжатие''' - Файлы могут быть сжаты и распакованы "на лету", что ускоряет работу чтения.
*'''Автоматическая дефрагментация''' - Файловые системы настраиваются фоновым потоком, ''в то время как'' они используются.
*'''Подтома''' - Файловые системы могут совместно использовать одно общее пространство (pool) вместо того, чтобы размещаться в собственных разделах.
*'''RAID''' - Btrfs осуществляет свои собственные реализации RAID, поэтому LVM или {{c|mdadm}} не требуются для RAID. В настоящее время поддерживаются RAID 0 и 1; на подходе RAID 5 и 6.
*'''Разделы являются необязательными''' - Хотя Btrfs может работать с разделами, она может напрямую использовать неформатированные устройства ({{Path|/dev/<device>}}).
*'''Дедупликация данных''' - Существует ограниченная поддержка дедупликации данных; однако, дедупликация в конечном итоге станет стандартной функцией в Btrfs. Это позволяет Btrfs экономить место, сравнивая файлы через бинарные изменения (binary diff).

{{Tip|Обновленный и отчасти исчерпывающий список функций смотрите на [https://btrfs.wiki.kernel.org/index.php/Status upstream wiki]. Однако не все функции достаточно стабильны для повсеместного использования.}}

В будущем новые кластерные файловые системы легко могут использовать Btrfs с её копированием при записи и другими расширенными функциями для своих хранилищ объектов. [http://ceph.com/ Ceph] - один из примеров кластерной файловой системы, которая выглядит очень перспективно и может использовать Btrfs.

== Установка ==

=== Ядро ===

Активируйте следующий параметр ядра, чтобы включить поддержку файловой системы Btrfs:

{{KernelBox|title=Включение Btrfs в ядре|1=
File systems  --->
    <*> Btrfs filesystem
}}

=== Emerge ===

Пакет {{Package|sys-fs/btrfs-progs}} содержит утилиты необходимые для работы с файловой системой Btrfs.

{{Emerge|sys-fs/btrfs-progs}}

== Использование ==

Ввод длинных команд Btrfs может быстро надоесть. Каждая команда (кроме начальной команды {{c|btrfs}}) может быть сведена к очень короткому набору инструкций. Этот метод полезен при работе в командной строке, чтобы уменьшить количество вводимых символов.

Например, ниже показана длинная команда, чтобы дефрагментировать файловую систему расположенную в {{Path|/}}.

{{RootCmd|btrfs filesystem defragment -v / }}

Сократите каждую из длинных команд после команды {{c|btrfs}}, уменьшив их до их уникального, кратчайшего префикса. В этом контексте '''уникальный''' означает, что нет '''других''' команд {{c|btrfs}}, которые соответствуют команде в  самом коротком её варианте. Укороченная версия указанной команды:

{{RootCmd|btrfs fi de -v / }}

Никакие другие команды {{c|btrfs}} не начинаются с <code>fi</code>; <code>filesystem</code> - единственная. То же самое относится к подкоманде <code>de</code> команды <code>filesystem</code>.

=== Создание ===

{{Warning|Команда {{c|mkfs.btrfs}} необратимо уничтожит все содержимое раздела, который будет форматироваться. Пожалуйста убедитесь, что выбран правильный раздел ''перед'' запуском какой-либо {{c|mkfs}} команды!}}

Чтобы создать файловую систему Btrfs на разделе {{Path|/dev/sdXN}}:

{{RootCmd|mkfs.btrfs /dev/sdXN}}

В примере выше замените <code>N</code> на номер раздела, а <code>X</code> на букву диска. Например, чтобы отформатировать в Btrfs третий раздел на первом диске запустите:

{{RootCmd|mkfs.btrfs /dev/sda3}}

{{Important|Для всех разделов Btrfs в файле {{Path|/etc/fstab}} в последней колонке нужно выставить <code>0</code>. Нет нужды запускать {{c|fsck.btrfs}} и {{c|btrfsck}} при каждом запуске системы.}}

=== Монтирование ===

После создания, файловую систему можно смонтировать несколькими способами:

* {{c|[[mount]]}} - смонтировать вручную.
* {{Path|[[fstab]]}} - определить точку монтирования в файле {{Path|/etc/fstab}}, что позволит автоматически монтировать файловую систему во время загрузки.
* [[Removable media|съемные носители]] - автоматическое монтирование по запросу (полезно для USB-носителей).
* [[AutoFS]] - автоматическая настройка для доступа к файловой системе.

=== Конвертация ext* файловых систем ===

Можно сконвертировать файловые системы ext2, ext3 и ext4 в Btrfs с помощью утилиты {{c|btrfs-convert}}.

Следующие инструкции подходят только для преобразования отмонтированных файловых систем. Чтобы сконвертировать root-раздел, загрузитесь с системного аварийного диска (SystemRescueCD работает отлично) и запустите команду конвертации для root-раздела.

Сперва убедитесь, что отмонтировали раздел:

{{RootCmd|umount ''<mounted_device>''}}

Проверьте целостность файловой системы с помощью соответствующей утилиты {{c|fsck}}. Далее показан пример для файловой системы ext4:

{{RootCmd|fsck.ext4 -f ''<unmounted_device>''}}

Воспользуйтесь {{c|btrfs-convert}} для того чтобы сконвертировать отформатированное в ext* устройство в Btrfs:

{{RootCmd|btrfs-convert ''<unmounted_device>''}}

Убедитесь, что после форматирования устройства не забыли отредактировать файл {{Path|/etc/fstab}} и изменить значение в колонке файловая система с ext4 на Btrfs:

{{FileBox|filename=/etc/fstab|title=Замена ext4 на btrfs|1=<pre>
<device>   <mountpoint>  btrfs  defaults  0 0</pre>}}

=== Дефрагментация ===

Другая полезная функция Btrfs это онлайн дефрагментация. Чтобы дефрагментировать файловую систему root с Btrfs запустите:

{{RootCmd|btrfs filesystem defragment -r -v /}}

{{Warning|Дефрагментация с версиями ядра < 3.9 или ≥ 3.14-rc2, а также со стабильными версиями ядра Linux ≥ 3.10.31, ≥ 3.12.12 или ≥ 3.13.4 разрывает ссылки между файлами и их копиями COW<ref>[https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs-filesystem man page for btrfs-filesystem(8)], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on 6th February, 2017.</ref> и, таким образом, может значительно увеличить использование пространства. Убедитесь, что достаточно свободного места и не слишком много снимков на диске, так как заполненные разделы btrfs могут быть очень медленными.}}

=== Сжатие ===

Btrfs поддерживает прозрачное сжатие с помощью алгоритмов zlib и lzo.

Можно сжать конкретный файл с помощью атрибутов файла:

{{Cmd|chattr +c}}

Параметр монтирования <code>compress</code> по умолчанию сжимает все вновь созданные файлы. Чтобы повторно сжать всю файловую систему выполните следующую команду:

{{RootCmd|btrfs filesystem defragment -r -v -clzo /}}

В зависимости от производительности процессора и диска использование сжатия lzo может улучшить общую пропускную способность.

Можно использовать алгоритм сжатия zlib вместо lzo. zlib более медленный, но имеет более высокую степень сжатия:

{{RootCmd|btrfs filesystem defragment -r -v -czlib /}}

=== RAID ===

Создать RAID в Btrfs гораздо проще, чем создать RAID с помощью {{c|mdadm}}.

Самый простой способ создать RAID, это использовать все устройства:

{{RootCmd|mkfs.btrfs -m raid1 ''<device1>'' ''<device2>'' -d raid1 ''<device1>'' ''<device2>''}}

{{Warning|В настоящее время не безопасно использовать уровни RAID 5 или 6<ref>[https://btrfs.wiki.kernel.org/index.php/RAID56 Article mentioning that parity RAID code has multiple serious data-loss bugs], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on January 1st, 2017.</ref>. В уровнях RAID 5 и 6 были исправления<ref>Michael Larabel, [http://www.phoronix.com/scan.php?page=news_item&px=Linux-4.12-Btrfs-RAID-Mostly-OK Btrfs RAID56 "Mostly OK"], Phoronix. July 8, 2017.</ref> в Linux 4.12, но общее состояние по-прежнему помечено как '''нестабильное'''.<ref>[https://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs.git/commit/?h{{=}}for-linus-4.12&id{{=}}28d70e237dac905cd8d1896af10216b7d2bced24 btrfs: scrub: Fix RAID56 recovery race condition], source commit, April 18th 2017.</ref><ref>[http://lkml.iu.edu/hypermail/linux/kernel/1705.1/01197.html GIT PULL Btrfs from Chris Mason], [http://lkml.iu.edu/hypermail/linux/kernel/index.html Linux kernel mailinglist], May 9th 2017.</ref>. Пользователям, которые хотят использовать функции btrfs RAID5 или RAID6, рекомендуется проверять [https://btrfs.wiki.kernel.org/index.php/Status страницу состояния btrfs] на предмет стабильности указанных уровней перед их использованием.}}

=== Подтома ===

Как уже упоминалось выше в списке функций, Btrfs может создавать подтома. Подтома могут быть использованы, чтобы лучше организовать и управлять данными. Они становятся особенно мощными в сочетании с моментальными снимками. Важное различие должно быть сделано между подтомами Btrfs и подтомами созданными менеджером логических томов ([[LVM|LVM/ru]]). Подтома Btrfs не являются устройствами уровня блока, они представляют собой пространства имен файлов POSIX.<ref name="subvolumes">[https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Subvolumes Section explaining the differences between subvolumes and logical volumes in LVM], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on January 1st, 2017.</ref> Они могут быть созданы в любом месте файловой системы и будут действовать как любой другой каталог в системе с одной оговоркой: подтома могут быть смонтированы и размонтированы. Подтома вкладываемы (подтома могут быть созданы внутри других подтомов), и легко создаются или удаляются.

{{Note|A subvolume cannot be created ''across'' different Btrfs filesystems. If {{Path|/dev/sda}} and {{Path|/dev/sdb}} both contain separate (non-RAID) Btrfs filesystems, there is no way a subvolume can expand across the two filesystems. The snapshot can be ''moved'' from one filesystem to another, but it cannot span across the two. It must be on {{Path|/dev/sda}} ''or'' {{Path|/dev/sdb}}.}}

==== Создание ====

Чтобы создать подтом, выполните следующую команду внутри пространства имен файловой системы Btrfs:

{{RootCmd|btrfs subvolume create ''<dest-name>''}}

Replace <code>''<dest-name>''</code> with the desired destination and subvolume name. For example, if a Btrfs filesystem exists at {{Path|/mnt/btrfs}}, a subvolume could be created inside it using the following command:

{{RootCmd|btrfs subvolume create /mnt/btrfs/subvolume1}}

==== Список ====

To see the subvolume(s) that have been created, use the <code>subvolume list</code> command followed by a Btrfs filesystem location. If the current directory is somewhere inside a Btrfs filesystem, the following command will display the subvolume(s) that exist on the filesystem:

{{RootCmd|btrfs subvolume list .}}

If a Btrfs filesystem with subvolumes exists at the mount point created in the example command above, the output from the list command will look similar to the following:

{{RootCmd|btrfs subvolume list /mnt/btrfs|output=<pre>
ID 309 gen 102913 top level 5 path mnt/btrfs/subvolume1
</pre>}}

==== Удаление ====

Subvolumes can be properly removed by using the <code>subvolume delete</code> command followed by the path to the subvolume. All available subvolume paths in a Btrfs filesystem can be seen using the list command above.

{{RootCmd|btrfs subvolume delete ''<subvolume-path>''}}

As above, replace <code>''<subvolume-path>''</code> with the actual path to the subvolume to be removed. To delete the subvolume used in the examples above, the following command would be issued:

{{RootCmd|btrfs subvolume delete /mnt/btrfs/subvolume1|output=<pre>
Delete subvolume (no-commit): '/mnt/btrfs/subvolume1'
</pre>}}

==== Снимки ====

Snapshots are subvolumes that share data and metadata with other subvolumes. This is made possible by Btrfs' Copy on Write (CoW) ability.<ref name="subvolumes" /> Snapshots can be used for several purposes, one of which is to create backups of file system structures at specific points in time.

If the root filesystem is Btrfs, it is possible to create a snapshot using the <code>subvolume snapshot</code> commands:

{{RootCmd
|mkdir -p /mnt/backup/rootfs
|btrfs subvolume snapshot / /mnt/backup/rootfs/
}}

The following small shell script can be added to a timed cron job to create a timestamped snapshot backup of a Btrfs formatted root filesystem. The timestamps can be adjusted to whatever is preferred by the user.

{{FileBox|filename=btrfs_snapshot.sh|title=Пример задачи cron для снятия снимка с root файловой системы Btrfs|lang=bash|1=
#!/bin/bash
NOW=$(date +"%Y-%m-%d_%H:%M:%S")
 
if [ ! -e /mnt/backup ]; then
mkdir -p /mnt/backup
fi
 
cd /
/sbin/btrfs subvolume snapshot / "/mnt/backup/backup_${NOW}"
}}

==== Монтирование ====

A subvolume can be mounted in a location different from where it was created, or users can choose to not mount them at all. For example, a user could create a Btrfs filesystem in {{Path|/mnt/btrfs}} and create {{Path|/mnt/btrfs/home}} and {{Path|/mnt/btrfs/portage}} subvolumes. The subvolumes could then be mounted at {{Path|/home}} and {{Path|/usr/portage}}, with the original top level subvolume left unmounted. This results in a configuration where the subvolumes' relative path from the top level subvolume is different from their actual path.

To mount a subvolume, perform the following command, where <code>''<rel-path>''</code> is the relative path of the subvolume from the top level subvolume, obtainable through the <code>subvolume list</code> command:

{{RootCmd|mount -o subvol{{=}}''<rel-path>'' ''<device>'' ''<mountpoint>''}}

Аналогично, можно обновить колонку filesystem, чтобы смонтировать подтома Btrfs следующим образом:

{{FileBox|filename=/etc/fstab|title=Монтирование подтомов|1=<pre>
<device>  <mountpoint>  btrfs  subvol=<rel-path>  0 2</pre>}}

== Устранение проблем ==

=== Clear the free space cache ===

It is possible to clear Btrfs' free space cache by mounting the filesystem with the <code>clear_cache</code> mount option. For example:

{{RootCmd|mount -o clear_cache /path/to/device /path/to/mountpoint}}

=== Btrfs hogging memory (disk cache) ===

When utilizing some of Btrfs' special abilities (like making many <code>--reflink</code> copies or creating a crazy amount of snapshots), lot of memory can be eaten and not freed fast enough by the kernel's inode cache. This issue can go undiscovered since memory dedicated to the disk cache might not be clearly visible in traditional system monitoring utilities. The {{c|slabtop}} utility (available as part of the {{Package|sys-process/procps}} package) was specifically created to determine how much memory kernel objects are consuming:

{{RootCmd|slabtop}}

If the inode cache is consuming too much memory, the kernel can be manually instructed to drop the cache by echoing an integer value to the {{Path|/proc/sys/vm/drop_caches}} file<ref>[https://www.kernel.org/doc/Documentation/sysctl/vm.txt Documentation for /proc/sys/vm/*], [https://www.kernel.org Kernel.org]. Retrieved on January 1st, 2017.</ref>.

To be safe, and to help the kernel determine the maximum amount of freeable memory, be sure to run a {{c|sync}} ''before'' running the {{c|echo}} commands below:

{{Cmd|sync}}

Most of the time Btrfs users will probably want to {{c|echo 2}} to reclaim just the slab objects (dentries and btrfs_inodes):

{{RootCmd|echo 2 > /proc/sys/vm/drop_caches}}

To clear the entire disk cache (slab objects ''and'' the page cache) use {{c|echo 3}} instead:

{{RootCmd|echo 3 > /proc/sys/vm/drop_caches}}

{{Warning|While the above commands are non-destructive (as long as a {{c|sync}} was completed before running them), they could seriously but temporarily slow down the system while the kernel loads only the necessary items back into memory. Think twice before running the above commands for systems under heavy load!}}

More information on kernel slabs can be found in this [https://www.dedoimedo.com/computers/slabinfo.html dedoimedo blog entry].

=== Mounting Btrfs fails, returning mount: unknown filesystem type 'btrfs' ===

The [http://unix.stackexchange.com/questions/121611/gentoo-does-not-seem-to-be-booting-new-kernel original solution by Tim on Stack Exchange] inspired the following solution: build the kernel manually instead of using [[genkernel]]:

{{GenericCmd|prompt=#|color=green
|cd /usr/src/linux
|make menuconfig
|make && make modules_install
|cp arch/x86_64/boot/bzImage /boot
|mv /boot/bzImage /boot/whatever_kernel_filename
|genkernel --install initramfs
}}

=== Btrfs root doesn't boot ===

Genkernel's initramfs as created with the command below doesn't load btrfs:

{{RootCmd|genkernel --btrfs initramfs }}

Compile support for btrfs in the kernel rather than as a module, or use [https://packages.gentoo.org/packages/sys-kernel/genkernel-next genkernel-next] or [[Dracut]] to generate the initramfs.

== Смотрите также ==

* [[Btrfs snapshots]] - Script that creates snapshots when files have changed
* [[Btrfs/System Root Guide]] - Use the Btrfs filesystem as a collection of subvolumes including one as a system root.
* [[Btrfs/Native System Root Guide|Btrfs native system root guide]] - An alternative guide on using a subvolume in a Btrfs filesystem as the system's root.
* [[ext4]] - The default filesystem for most Linux distributions.
* [[Samba shadow copies]] - Using Samba to expose Shadow Copies as 'Previous Versions' to Windows clients.
* [[Snapper]] - A command-line program capable of managing Btrfs filesystem snapshots.
* [[ZFS]] - A filesystem that shares much in common with Btrfs, but has licensing issues.

== Внешние ресурсы ==

* https://wiki.debian.org/Btrfs - As described by the Debian wiki.
* https://wiki.archlinux.org/index.php/Btrfs Btrfs article - As described by the Arch Linux wiki.
* http://www.funtoo.org/BTRFS_Fun - BTRFS Fun on the Funtoo wiki.
* http://marc.merlins.org/perso/btrfs/post_2014-05-04_Fixing-Btrfs-Filesystem-Full-Problems.html - Tips and tricks on fixing niche Btrfs filesystem problems in some situations.

== Ссылки ==

{{reflist}}

[[Category:Filesystems]]
