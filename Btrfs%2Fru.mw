<languages />

{{InfoBox stack
|{{InfoBox homepage|http://btrfs.wiki.kernel.org|header=true}}
|{{InfoBox gitweb|http://git.kernel.org/cgit/linux/kernel/git/kdave/btrfs-progs.git|raw=true|text=Userspace}}
|{{InfoBox gitweb|http://git.kernel.org/cgit/linux/kernel/git/mason/linux-btrfs.git/tree/fs/btrfs?id{{=}}HEAD|raw=true|text=Kernel}}
|{{InfoBox wikipedia}}
|{{InfoBox ohloh}}
}}

'''Btrfs''' is [[Article description::a copy-on-write (CoW) [[filesystem]] for Linux aimed at implementing advanced features while focusing on fault tolerance, repair, and easy administration.]] Jointly developed at Oracle, Red Hat, Fujitsu, Intel, SUSE, STRATO, and many others. Btrfs is licensed under the [[wikipedia:GNU_General_Public_License|GPL]] and open for contribution from anyone.

== Возможности ==

Ext4 является безопасной и стабильной и может обрабатывать большие файловые системы с экстентами, но зачем переключаться? Хотя Btrfs все еще считается экспериментальной, стабильность её растет, и время, когда Btrfs станет файловой системой по умолчанию для систем Linux, становится все ближе. Некоторые дистрибутивы Linux уже начали переключаться на нее в своих текущих релизах. Btrfs имеет ряд дополнительных функций, общих с ZFS, которые и сделали файловую систему ZFS популярной для BSD дистрибутивов и устройств NAS.

*'''"Копирование при записи" и создание снимков''' - Делает инкрементные резервные копии безболезненными даже из "активной" файловой системы или виртуальной машины (ВМ).
*'''Контрольные суммы уровня файла''' - Метаданные для каждого файла включают контрольную сумму, которая используется для обнаружения и исправления ошибок.
*'''Сжатие''' - Файлы могут быть сжаты и распакованы "на лету", что ускоряет работу чтения.
*'''Автоматическая дефрагментация''' - Файловые системы настраиваются фоновым потоком, ''в то время как'' они используются.
*'''Подтома''' - Файловые системы могут совместно использовать одно общее пространство (pool) вместо того, чтобы размещаться в собственных разделах.
*'''RAID''' - Btrfs осуществляет свои собственные реализации RAID, поэтому LVM или {{c|mdadm}} не требуются для RAID. В настоящее время поддерживаются RAID 0 и 1; на подходе RAID 5 и 6.
*'''Разделы являются необязательными''' - Хотя Btrfs может работать с разделами, она может напрямую использовать неформатированные устройства ({{Path|/dev/<device>}}).
*'''Дедупликация данных''' - Существует ограниченная поддержка дедупликации данных; однако, дедупликация в конечном итоге станет стандартной функцией в Btrfs. Это позволяет Btrfs экономить место, сравнивая файлы через бинарные изменения (binary diff).

{{Tip|For an up-to-date and somewhat exhaustive listing of features see the [https://btrfs.wiki.kernel.org/index.php/Status upstream wiki's status page]. Not all features are sufficiently mature for wide use though.}}

Down the road, new clustered filesystems will readily take advantage of Btrfs with its copy on write and other advanced features for their object stores. [https://ceph.com/ Ceph] is one example of a clustered filesystem that looks very promising, and can take advantage of Btrfs.

== Установка ==

=== Ядро ===

Активируйте следующий параметр ядра, чтобы включить поддержку файловой системы Btrfs:

{{KernelBox|title=Включение Btrfs в ядре|1=
File systems  --->
    <*> Btrfs filesystem
}}

=== Emerge ===

Пакет {{Package|sys-fs/btrfs-progs}} содержит утилиты необходимые для работы с файловой системой Btrfs.

{{Emerge|sys-fs/btrfs-progs}}

== Использование ==

Ввод длинных команд Btrfs может быстро надоесть. Каждая команда (кроме начальной команды {{c|btrfs}}) может быть сведена к очень короткому набору инструкций. Этот метод полезен при работе в командной строке, чтобы уменьшить количество вводимых символов.

Например, ниже показана длинная команда, чтобы дефрагментировать файловую систему расположенную в {{Path|/}}.

{{RootCmd|btrfs filesystem defragment -v / }}

Сократите каждую из длинных команд после команды {{c|btrfs}}, уменьшив их до их уникального, кратчайшего префикса. В этом контексте '''уникальный''' означает, что нет '''других''' команд {{c|btrfs}}, которые соответствуют команде в  самом коротком её варианте. Укороченная версия указанной команды:

{{RootCmd|btrfs fi de -v / }}

Никакие другие команды {{c|btrfs}} не начинаются с <code>fi</code>; <code>filesystem</code> - единственная. То же самое относится к подкоманде <code>de</code> команды <code>filesystem</code>.

=== Создание ===

{{Warning|The {{c|mkfs.btrfs}} command irreversibly destroys any content of the partition it is told to format. Please be sure the correct drive and partition have been selected ''before'' running any {{c|mkfs}} command!}}

Чтобы создать файловую систему Btrfs на разделе {{Path|/dev/sdXN}}:

{{RootCmd|mkfs.btrfs /dev/sdXN}}

В примере выше замените <code>N</code> на номер раздела, а <code>X</code> на букву диска. Например, чтобы отформатировать в Btrfs третий раздел на первом диске запустите:

{{RootCmd|mkfs.btrfs /dev/sda3}}

{{Important|Для всех разделов Btrfs в файле {{Path|/etc/fstab}} в последней колонке нужно выставить <code>0</code>. Нет нужды запускать {{c|fsck.btrfs}} и {{c|btrfsck}} при каждом запуске системы.}}

=== Монтирование ===

После создания, файловую систему можно смонтировать несколькими способами:

* {{c|[[mount]]}} - смонтировать вручную.
* {{Path|[[fstab]]}} - определить точку монтирования в файле {{Path|/etc/fstab}}, что позволит автоматически монтировать файловую систему во время загрузки.
* [[Removable media|съемные носители]] - автоматическое монтирование по запросу (полезно для USB-носителей).
* [[AutoFS]] - автоматическая настройка для доступа к файловой системе.

=== Конвертация ext* файловых систем ===

Можно сконвертировать файловые системы ext2, ext3 и ext4 в Btrfs с помощью утилиты {{c|btrfs-convert}}.

Следующие инструкции подходят только для преобразования отмонтированных файловых систем. Чтобы сконвертировать root-раздел, загрузитесь с системного аварийного диска (SystemRescueCD работает отлично) и запустите команду конвертации для root-раздела.

Сперва убедитесь, что отмонтировали раздел:

{{RootCmd|umount ''<mounted_device>''}}

Проверьте целостность файловой системы с помощью соответствующей утилиты {{c|fsck}}. Далее показан пример для файловой системы ext4:

{{RootCmd|fsck.ext4 -f ''<unmounted_device>''}}

Воспользуйтесь {{c|btrfs-convert}} для того чтобы сконвертировать отформатированное в ext* устройство в Btrfs:

{{RootCmd|btrfs-convert ''<unmounted_device>''}}

Убедитесь, что после форматирования устройства не забыли отредактировать файл {{Path|/etc/fstab}} и изменить значение в колонке файловая система с ext4 на Btrfs:

{{FileBox|filename=/etc/fstab|title=Замена ext4 на btrfs|1=<pre>
<device>   <mountpoint>  btrfs  defaults  0 0</pre>}}

=== Дефрагментация ===

Другая полезная функция Btrfs это онлайн дефрагментация. Чтобы дефрагментировать файловую систему root с Btrfs запустите:

{{RootCmd|btrfs filesystem defragment -r -v /}}

{{Warning|Дефрагментация с версиями ядра < 3.9 или ≥ 3.14-rc2, а также со стабильными версиями ядра Linux ≥ 3.10.31, ≥ 3.12.12 или ≥ 3.13.4 разрывает ссылки между файлами и их копиями COW<ref>[https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs-filesystem man page for btrfs-filesystem(8)], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on 6th February, 2017.</ref> и, таким образом, может значительно увеличить использование пространства. Убедитесь, что достаточно свободного места и не слишком много снимков на диске, так как заполненные разделы btrfs могут быть очень медленными.}}

=== Сжатие ===

Btrfs supports transparent compression using the zlib, lzo, and zstd<ref>https://btrfs.wiki.kernel.org/index.php/Compression#Can_I_set_the_compression_level.3F</ref> compression algorithms.

Можно сжать конкретный файл с помощью атрибутов файла:

{{Cmd|chattr +c}}

The <code>compress</code> mount option sets the default behavior to compress all the newly created files. To re-compress the whole filesystem, run the following command:

{{RootCmd|btrfs filesystem defragment -r -v -clzo /}}

В зависимости от производительности процессора и диска использование сжатия lzo может улучшить общую пропускную способность.

Можно использовать алгоритм сжатия zlib вместо lzo. zlib более медленный, но имеет более высокую степень сжатия:

{{RootCmd|btrfs filesystem defragment -r -v -czlib /}}

==== Уровень сжатия ====

Since kernel version 4.15.0<ref>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f51d2b59120ff364a5e612a594ed358767e1cd09</ref>, zlib compression can now be set by levels 1-9. For example, to set zlib to maximum compression at mount time:

{{RootCmd|mount -o compress{{=}}zlib:9 /dev/sdXY /path/to/btrfs/mountpoint}}

Or to set minimal compression:

{{RootCmd|mount -o compress{{=}}zlib:1 /dev/sdXY /path/to/btrfs/mountpoint}}

Or adjust compression by remounting:

{{RootCmd|mount -o remount,compress{{=}}zlib:3 /path/to/btrfs/mountpoint}}

The compression level should be visible in {{Path|/proc/mounts}} or by checking the most recent output of <code>dmesg |grep -i btrfs</code>.

{{RootCmd|dmesg {{!}}grep -i btrfs |output=<pre>
[    0.495284] Btrfs loaded, crc32c=crc32c-intel
[ 3010.727383] BTRFS: device label My Passport devid 1 transid 31 /dev/sdd1
[ 3111.930960] BTRFS info (device sdd1): disk space caching is enabled
[ 3111.930973] BTRFS info (device sdd1): has skinny extents
[ 9428.918325] BTRFS info (device sdd1): use zlib compression, level 3
</pre>
}}


==== Compression ratio and disk usage ====

The usual userspace tools for determining used and free space like <code>du</code> and <code>df</code> may provide inaccurate results on a ''Btrfs'' partition due to inherent design differences in the way files are written compared to ,for example, ''ext2/3/4''<ref>https://btrfs.wiki.kernel.org/index.php/Compression#How_can_I_determine_compressed_size_of_a_file.3F</ref>.

It is therefore advised to use the du/df alternatives provided by the btrfs userspace tool <code>btrfs filesystem</code>. In Addition to that, The <code>compsize</code> tool found from the [https://packages.gentoo.org/packages/sys-fs/compsize sys-fs/compsize] package can be helpful in providing additional information regarding compression ratios and the disk usage of compressed files. 
The following are example uses of these tools for a btrfs partition mounted under {{Path|/media/drive}}.


{{Cmd|btrfs filesystem du -s /media/drive |output=<pre>
     Total   Exclusive  Set shared  Filename
 848.12GiB   848.12GiB       0.00B  /media/drive/
</pre>
}}
{{Cmd|btrfs filesystem df /media/drive |output=<pre>
Data, single: total=846.00GiB, used=845.61GiB
System, DUP: total=8.00MiB, used=112.00KiB
Metadata, DUP: total=2.00GiB, used=904.30MiB
GlobalReserve, single: total=512.00MiB, used=0.00B
</pre>}}
{{Cmd|compsize /media/drive |output=<pre>
Processed 2262 files, 112115 regular extents (112115 refs), 174 inline.
Type       Perc     Disk Usage   Uncompressed Referenced  
TOTAL       99%      845G         848G         848G       
none       100%      844G         844G         844G       
zlib        16%      532M         3.2G         3.2G 
</pre>
}}

=== Multiple devices (RAID) ===

Btrfs can be used with multiple devices in order to create RAIDs. Using Btrfs to create filesystems that span multiple devices is much easier than creating using {{c|mdadm}}; there is no initialization time needed for creation.

The simplest method is to use the entirety of the unpartitioned block device to create a filesystem that spans multiple devices. For example, to create a filesystem in RAID1 mode across two devices:

{{RootCmd|mkfs.btrfs -m raid1 ''<device1>'' ''<device2>'' -d raid1 ''<device1>'' ''<device2>''}}

Converting between RAID modes is possible with the balance sub-command. For example, say a multiple device RAID 1 is mounted at {{Path|/srv}}. It is possible to convert this RAID1 to RAID0 with using the following command:

{{RootCmd|btrfs balance start -dconvert{{=}}raid0 -mconvert{{=}}raid0 --force /srv}}

RAID mode conversion can be performed while the filesystem is online and in use. Possible RAID modes in btrfs include RAID0, RAID1, RAID5, RAID6, and RAID10. See the [https://btrfs.wiki.kernel.org/index.php/Using_Btrfs_with_Multiple_Devices upstream BTRFS wiki] for more information.

{{Warning|В настоящее время не безопасно использовать уровни RAID 5 или 6<ref>[https://btrfs.wiki.kernel.org/index.php/RAID56 Article mentioning that parity RAID code has multiple serious data-loss bugs], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on January 1st, 2017.</ref>. В уровнях RAID 5 и 6 были исправления<ref>Michael Larabel, [http://www.phoronix.com/scan.php?page=news_item&px=Linux-4.12-Btrfs-RAID-Mostly-OK Btrfs RAID56 "Mostly OK"], Phoronix. July 8, 2017.</ref> в Linux 4.12, но общее состояние по-прежнему помечено как '''нестабильное'''.<ref>[https://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs.git/commit/?h{{=}}for-linus-4.12&id{{=}}28d70e237dac905cd8d1896af10216b7d2bced24 btrfs: scrub: Fix RAID56 recovery race condition], source commit, April 18th 2017.</ref><ref>[http://lkml.iu.edu/hypermail/linux/kernel/1705.1/01197.html GIT PULL Btrfs from Chris Mason], [http://lkml.iu.edu/hypermail/linux/kernel/index.html Linux kernel mailinglist], May 9th 2017.</ref>. Пользователям, которые хотят использовать функции btrfs RAID5 или RAID6, рекомендуется проверять [https://btrfs.wiki.kernel.org/index.php/Status страницу состояния btrfs] на предмет стабильности указанных уровней перед их использованием.}}

=== Подтома ===

Как уже упоминалось выше в списке функций, Btrfs может создавать подтома. Подтома могут быть использованы, чтобы лучше организовать и управлять данными. Они становятся особенно мощными в сочетании с моментальными снимками. Важное различие должно быть сделано между подтомами Btrfs и подтомами созданными менеджером логических томов ([[LVM/ru|LVM]]). Подтома Btrfs не являются устройствами уровня блока, они представляют собой пространства имен файлов POSIX.<ref name="subvolumes">[https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Subvolumes Section explaining the differences between subvolumes and logical volumes in LVM], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on January 1st, 2017.</ref> Они могут быть созданы в любом месте файловой системы и будут действовать как любой другой каталог в системе с одной оговоркой: подтома могут быть смонтированы и размонтированы. Подтома вкладываемы (подтома могут быть созданы внутри других подтомов), и легко создаются или удаляются.

{{Note|Подтом не может быть создан ''между'' разными файловыми системами Btrfs. Если {{Path|/dev/sda}} и {{Path|/dev/sdb}} содержат отдельные (не RAID-массивы) файловые системы Btrfs, то нет возможности, чтобы подтом можно было бы распределить по двум файловым системам. Снимок можно ''перенести'' из одной файловой системы в другую, но он не может охватывать обе. Он должен быть на {{Path|/dev/sda}} ''или'' {{Path|/dev/sdb}}.}}

==== Создание ====

Чтобы создать подтом, выполните следующую команду внутри пространства имен файловой системы Btrfs:

{{RootCmd|btrfs subvolume create ''<dest-name>''}}

Замените <code>''<dest-name>''</code> на желаемое место и имя подтома. Например, если существует файловая система btrfs в {{Path|/mnt/btrfs}}, подтом может быть создан внутри неё, используя следующую команду:

{{RootCmd|btrfs subvolume create /mnt/btrfs/subvolume1}}

==== Список ====

Чтобы увидеть созданный(е) подтом(а), используйте команду <code>subvolume list</code> в соответствующем месте файловой системы Btrfs. Если текущий каталог находится где-то внутри файловой системы Btrfs, следующая команда отобразит подтом(а), которые существуют в файловой системе:

{{RootCmd|btrfs subvolume list .}}

Если в точке монтирования файловой системы Btrfs, существуют подтома, созданные командой из примера выше, вывод команды списка будет выглядеть примерно так:

{{RootCmd|btrfs subvolume list /mnt/btrfs|output=<pre>
ID 309 gen 102913 top level 5 path mnt/btrfs/subvolume1
</pre>}}

==== Удаление ====

Подтома могут быть корректно удалены с помощью команды <code>subvolume delete</code>, за которой следует путь к подтому. Все доступные пути подтомов в файловой системе Btrfs можно увидеть, используя приведенную выше команду списка.

{{RootCmd|btrfs subvolume delete ''<subvolume-path>''}}

Как и выше, замените <code>''<subvolume-path>''</code> на фактический путь к подлежащему удалению подтому. Чтобы удалить подтом, используемый в приведенных выше примерах, будет выполнена следующая команда:

{{RootCmd|btrfs subvolume delete /mnt/btrfs/subvolume1|output=<pre>
Delete subvolume (no-commit): '/mnt/btrfs/subvolume1'
</pre>}}

==== Снимки ====

Снимки - это подтома, которые обмениваются данными и метаданными с другими подтомами. Это стало возможным благодаря способности Btrfs копирование при записи (CoW).<ref name="subvolumes" /> Снимки можно использовать для нескольких целей, одной из которых является создание резервных копий структур файловой системы в определенные моменты времени.

Если корневая файловая система - это Btrfs, то можно создать снимок с помощью команды <code>subvolume snapshot</code>:

{{RootCmd
|mkdir -p /mnt/backup/rootfs
|btrfs subvolume snapshot / /mnt/backup/rootfs/
}}

Следующий небольшой сценарий оболочки можно добавить в cron задание, срабатывающее в определенное время, для создания снимка/резервной копии корневой файловой системы, отформатированной в Btrfs. Временные метки могут быть скорректированы с учетом предпочтений пользователя.

{{FileBox|filename=btrfs_snapshot.sh|title=Пример задачи cron для снятия снимка с root файловой системы Btrfs|lang=bash|1=
#!/bin/bash
NOW=$(date +"%Y-%m-%d_%H:%M:%S")
 
if [ ! -e /mnt/backup ]; then
mkdir -p /mnt/backup
fi
 
cd /
/sbin/btrfs subvolume snapshot / "/mnt/backup/backup_${NOW}"
}}

==== Монтирование ====

Подтом может быть смонтирован в месте, отличном от того, где он был создан, или пользователи могут не монтировать их вообще. Например, пользователь может создать файловую систему Btrfs в {{Path|/mnt/btrfs}} и создать подтома {{Path|/mnt/btrfs/home}} и {{Path|/mnt/btrfs/portage}}. Затем подтома могут быть смонтированы в {{Path|/home}} и {{Path|/usr/portage}}, при этом исходный верхний уровень подтома оставлен не примонтированным. Это приводит к конфигурации, в которой относительные пути подтомов от верхнего уровня подтома отличаются от их фактического пути.

Чтобы смонтировать подтом, выполните следующую команду, где <code>''<rel-path>''</code> - это относительный путь подтома от подтома верхнего уровня, который можно получить через команду <code>subvolume list</code>:

{{RootCmd|mount -o subvol{{=}}''<rel-path>'' ''<device>'' ''<mountpoint>''}}

Аналогично, можно обновить колонку filesystem, чтобы смонтировать подтома Btrfs следующим образом:

{{FileBox|filename=/etc/fstab|title=Монтирование подтомов|1=<pre>
<device>  <mountpoint>  btrfs  subvol=<rel-path>  0 2</pre>}}

== Устранение проблем ==

=== Using with VM disk images ===

When using Btrfs with virtual machine disk images, it is best to disable copy-on-write on the disk images in order to speed up IO performance. This can only be performed on files that are newly created. It also possible to disable CoW on all files created within a certain directory. For example, using the {{c|chattr}} command: 

{{RootCmd|chattr +C /var/lib/libvirt/images}}

=== Очистка кэша свободного места ===

Можно очистить кэш свободного места Btrfs путем монтирования файловой системы с помощью параметра монтирования <code>clear_cache</code>. Например:

{{RootCmd|mount -o clear_cache /path/to/device /path/to/mountpoint}}

=== Btrfs захват памяти (дискового кеша) ===

При использовании некоторых специальных способностей Btrfs (таких как создание множества <code>--reflink</code> копий или создание безумного количества снимков) много памяти можно съесть и не освободить достаточно быстро от кеша индексного дескриптора ядра. Эта проблема может быть не обнаружена, поскольку память, предназначенная для кеша диска, может быть не видна в традиционных утилитах мониторинга системы. Утилита {{c|slabtop}} (доступная как часть пакета {{Package|sys-process/procps}}) была специально создана для определения того, сколько памяти потребляют объекты ядра:

{{RootCmd|slabtop}}

Если кэш индексного дескриптора потребляет слишком много памяти, ядру можно вручную указать на сброс кэша путем передачи целочисленного значения с помощью команды {{c|echo}} в файл {{Path|/proc/sys/vm/drop_caches}}<ref>[https://www.kernel.org/doc/Documentation/sysctl/vm.txt Documentation for /proc/sys/vm/*], [https://www.kernel.org Kernel.org]. Retrieved on January 1st, 2017.</ref>.

Для безопасности и чтобы помочь ядру определить максимальный объем освобождаемой памяти, обязательно запустите {{c|sync}} ''перед'' запуском {{c|echo}} команд как показано ниже:

{{Cmd|sync}}

В большинстве случаев, пользователям Btrfs, вероятно, потребуется {{c|echo 2}}, чтобы просто восстановить объекты slab (dentries и btrfs_inodes):

{{RootCmd|echo 2 > /proc/sys/vm/drop_caches}}

Чтобы очистить весь дисковый кэш (объекты slab ''и'' кэш страниц), используйте {{c|echo 3}}:

{{RootCmd|echo 3 > /proc/sys/vm/drop_caches}}

{{Warning|Хотя приведенные выше команды являются неразрушающими (при условии завершения выполнения команды {{c|sync}} перед их запуском), они могут серьезно, но временно замедлить работу системы, пока ядро опять загружает в память только необходимые элементы. Дважды подумайте, прежде чем запускать вышеуказанные команды на системах под большой нагрузкой!}}

Более подробную информацию о slab ядра можно найти в этой [https://www.dedoimedo.com/computers/slabinfo.html записи блога dedoimedo].

=== Не удается смонтировать btrfs, при монтировании возвращается: неизвестный тип файловой системы 'btrfs' ===

[http://unix.stackexchange.com/questions/121611/gentoo-does-not-seem-to-be-booting-new-kernel Оригинальное решение Тима на Stack Exchange] вдохновило на следующий способ - сборка ядра вручную, вместо использования [[genkernel/ru|genkernel]]:

{{GenericCmd|prompt=#|color=green
|cd /usr/src/linux
|make menuconfig
|make && make modules_install
|cp arch/x86_64/boot/bzImage /boot
|mv /boot/bzImage /boot/whatever_kernel_filename
|genkernel --install initramfs
}}

=== Корневая файловая система Btrfs не загружается ===

Genkernel's initramfs, созданная с помощью приведенной ниже команды, не загружает btrfs:

{{RootCmd|genkernel --btrfs initramfs }}

Компилируйте поддержку btrfs в ядре, а не как модуль, или используйте [https://packages.gentoo.org/packages/sys-kernel/genkernel-next genkernel-next] или [[Dracut]] для генерации initramfs.

== Смотрите также ==

* [[Btrfs snapshots]] - Скрипт, который создает моментальные снимки при изменении файлов.
* [[Btrfs/System Root Guide]] - Использование файловой системы btrfs, как коллекции подтомов, в том числе, в качестве корневой файловой системы.
* [[Btrfs/Native System Root Guide|Btrfs native system root guide]] - Альтернативное руководство по использованию подтома в файловой системе btrfs в качестве корневой файловой системы.
* [[ext4]] - Файловая система по умолчанию для большинства дистрибутивов Linux.
* [[Samba shadow copies]] - Использование Samba для предоставления теневых копий как 'предыдущих версий' клиентам Windows.
* [[Snapper]] - Программа командной строки, способная управлять снимками файловой системы Btrfs.
* [[ZFS]] - Файловая система, которая имеет много общего с Btrfs, но имеет проблемы с лицензированием.

== Внешние ресурсы ==

* https://wiki.debian.org/ru/Btrfs - Как описано в Debian вики.
* https://wiki.archlinux.org/index.php/Btrfs_(Русский) Статья Btrfs - как описано в Arch Linux вики.
* http://www.funtoo.org/BTRFS_Fun - BTRFS Fun на вики Funtoo.
* http://marc.merlins.org/perso/btrfs/post_2014-05-04_Fixing-Btrfs-Filesystem-Full-Problems.html - Советы и рекомендации по устранению проблем файловой системы Btrfs в некоторых ситуациях.

== Ссылки ==

{{reflist}}

[[Category:Filesystems]]
