<languages />


{{Metadata|abstract=Este documento guía al usuario a través del proceso de actualizar GCC.}}

Este documento guía al usuario a través del proceso de actualizar GCC.

== Guía rápida ==

=== Introducción ===

Este documento trata de ''actualizar'' GCC. Cambiar a una versión más antigua de GCC podría provocar efectos laterales no deseados. Por favor, eche un vistazo a la sección de resolución de problemas para informarse de algunos problemas de los que se informa frecuentemente. 

La siguiente sección ofrece una introducción rápida a las actualizaciones de GCC (y lo fáciles que son). Si desea leer el razonamiento completo detrás de las actualizaciones de GCC, por favor, continue con [[#Explicación de actualizaciones de GCC|explicación de actualizaciones de GCC]].

=== Versión corta ===

Si está actualizando GCC entonces no necesita hacer nada salvo cambiar la versión del compilador y reconstruir libtool: 

{{RootCmd|emerge -u sys-devel/gcc
|gcc-config -l|output=<pre>
[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3
</pre>}}

{{RootCmd|gcc-config 2
|env-update && source /etc/profile
|emerge --oneshot libtool}}

Si actualiza GCC desde una versión anterior a la 3.4.0 (para las series 3.x) o la 4.1, necesitará tambiér lanzar <tt>revdep-rebuild</tt>: 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

Compruebe la versión actual y desinstale la versión antigua {{RootCmd|gcc --version |emerge -C &#61;sys-devel/gcc-4.4.5}}

Ya lo tiene. ¡Disfrute del nuevo compilador! 

== Explicación de cómo actualizar GCC ==

=== Introducción ===

Las actualizaciones de GCC siempre han sido rodeadas de un aura de misterio, con sugerencias que van desde "No hace falta hacer nada" hasta "Tendrá que reconstruir el sistema completo, dos veces". La mayoría de estas medias informaciones (FUD) vienen de la confusión que rodea las incompatibilidades del ABI. Antes, unas palabras sobre <tt>libtool</tt>.

=== libtool y fix_libtool_files.sh ===

Las instalaciones anteriores de GCC en Gentoo requerían ejecutar una orden específica llamado <code>fix_libtool_files.sh</code>. Hace algún
tiempo, la ejecución de esta orden se ha integrado en la propia instalación del paquete (a través del eclass toolchain), así que ya  no es necesario que los usuarios ejecuten esta orden. 

La razón por la cual necesitamos reconstruir libtool después de actualizar las versiones de <tt>gcc</tt> es debida a su función principal: ''libtool'' reúne un conjunto de herramientas que agregan código específico en
un interfaz genérico permitiendo que las aplicaciones se construyan contra librerías compartidas sin tener que manejar aspectos específicos en cada plataforma de estas librerías. Para que realice su función correctamente, el guión <tt>libtool</tt> utiliza varias localizaciones en la librería con la versión de <tt>gcc</tt> previamente fijada dentro de ella.

=== Cambios en el ABI ===

An ABI, or [https://en.wikipedia.org/wiki/Application_binary_interface ''Application Binary Interface''], is a set of conventions used by all tools that deal with binary representation of programs, including compilers, assemblers, linkers and language runtime support (source: [http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html GCC Binary Compatibility]). When the ABI used for binary applications and libraries is changed, you will risk getting linker errors or malfunctioning programs unless you rebuild all libraries that use C++ code. Yes, C++, since most incompatibilities occur within the C++ ABI. This is also why we use the <tt>revdep-rebuild</tt> command against the {{Path|libstdc++.so.5}} library. 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

So why is this only needed up to GCC 3.4.0/4.1? That's because from that version onward, GCC uses a forward compatible ABI, which removes the need for rebuilding applications and libraries. Of course, guarantees can never be given indefinitely, but when an incompatibility occurs again, we'll definitely document it here. In that case, the version of the {{Path|libstdc++.so}} library will probably be increased.

=== Rebuilding everything ===

Algunos juran que al aparecer una nueva versión de GCC, se debe reconstruir hasta el último paquete del sistema. Por supuesto, esto no tiene sentido, ya que de todas formas hay muchas aplicaciones que no
usan GCC en su proceso de construcción e instalación y por tanto nunca serían afectados por estos cambios. 

Sin embargo, esto no significa que estén completamente equivocados: las versiones recientes de GCC suelen incluir soporte mejorado para los conjuntos de instrucciones de los procesadores, lo que podría influenciar el desempeño de algunas aplicaciones positivamente. Aunque se estima que estas mejoras sean generalmente marginales, en algunos casos (especialmente en aplicaciones que usan intensivamente el CPU) podrían traer mejoras notables. 

There are also known cases where packages need to be built with the same compiler. Although these packages are usually bumped by Gentoo simultaneously (so that they are always built with the same GCC version) cherry-picking re-installs on these packages might prove to be troublesome. The various {{Path|qt-*}} packages are a nice example on this matter. 

== Resolución de problemas ==

=== libstdc++.so.6: version `GLIBCXX_3.4.15' not found ===

Durante las actualizaciones puede que obtenga un error como el siguiente: 

{{CodeBox|title=No se encuentra GLIBCXX_x.y.z|1=
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found 
}}

Esto significa que está intentando construir un paquete con una versión de GCC ''más antigua'' que el usado para construir algunas de sus librerías dependientes. ¿Recuerde cuando dijimos que el ABI C++ era compatible a futuro? Esto es cierto, pero segura solamente que versiones ''más recientes'' (o iguales) de GCC se pueden utilizar para construir aplicaciones y librerías enlazadas (en comparación con la versión de GCC usada para construir esas librerías).

Para reconstruir todos los paquetes que dependen de libstdc++ se puede lanzar el siguiente guión bash.

{{CodeBox|title=Guión para reconstruir paquetes que dependen de libstdc++|lang=bash|1=
#!/bin/bash
while read i ; do
  [ -n "$(ldd -r $i {{!}} grep 'libstdc++')" ] && qfile "$i" >> rebuild.packages
done <<< "$(find $(echo $PATH {{!}} tr ':' ' ') -type f -executable)"
cut -d ' ' -f1 rebuild.packages {{!}} sort -u -o rebuild.packages
emerge -1av $(cat rebuild.packages)
}}

=== ¿Qué paquetes se sabe que deben reconstruirse? ===

La siguiente tabla indica los paquetes que ''si se instalan'', se necesitarán reconstruir y el motivo por el cual necesitan reconstruirse. 

{| class="table" style="text-align: left;" 
|- 
! Paquete
! La reconstrucción es necesaria debido a ...
|- 
| {{Package|sys-devel/libtool}}
| La aplicación libtool tiene las rutas definidas de forma inamovible hacia librerias internas de GCC
|-
|}

== See also ==

*  [https://wiki.gentoo.org/wiki/Upgrade_GCC_up_to_4.1 GCC Upgrading up to 4.1], the previous version of this document


[[Category:Core system]]
