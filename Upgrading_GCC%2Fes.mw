<languages />


{{Metadata|abstract=Este documento guía al usuario a través del proceso de actualizar GCC.}}

Este documento guía al usuario a través del proceso de actualizar GCC.

== Guía rápida ==

=== Introducción ===

Este documento trata de ''actualizar'' GCC. Cambiar a una versión más antigua de GCC podría provocar efectos laterales no deseados. Por favor, eche un vistazo a la sección de resolución de problemas para informarse de algunos problemas de los que se informa frecuentemente. 

La siguiente sección ofrece una introducción rápida a las actualizaciones de GCC (y lo fáciles que son). Si desea leer el razonamiento completo detrás de las actualizaciones de GCC, por favor, continue con [[#Explicación de actualizaciones de GCC|explicación de actualizaciones de GCC]].

=== Versión corta ===

Si está actualizando GCC entonces no necesita hacer nada salvo cambiar la versión del compilador y reconstruir libtool: 

{{RootCmd|emerge -u sys-devel/gcc
|gcc-config -l|output=<pre>
[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3
</pre>}}

{{RootCmd|gcc-config 2
|env-update && source /etc/profile
|emerge --oneshot libtool}}

Si actualiza GCC desde una versión anterior a la 3.4.0 (para las series 3.x) o la 4.1, necesitará tambiér lanzar {{c|revdep-rebuild}}: 

{{RootCmd|revdep-rebuild --library 'libstdc++\.so\.5'}}

Compruebe la versión actual y desinstale la versión antigua {{RootCmd|gcc --version |emerge -C &#61;sys-devel/gcc-4.4.5}}

Ya lo tiene. ¡Disfrute del nuevo compilador! 

== Explicación de cómo actualizar GCC ==

=== Introducción ===

Las actualizaciones de GCC siempre han sido rodeadas de un aura de misterio, con sugerencias que van desde "No hace falta hacer nada" hasta "Tendrá que reconstruir el sistema completo, dos veces". La mayoría de estas medias informaciones (FUD) vienen de la confusión que rodea las incompatibilidades del ABI. Antes, unas palabras sobre {{c|libtool}}.

=== libtool y fix_libtool_files.sh ===

Las instalaciones anteriores de GCC en Gentoo requerían ejecutar una orden específica llamado <code>fix_libtool_files.sh</code>. Hace algún
tiempo, la ejecución de esta orden se ha integrado en la propia instalación del paquete (a través del eclass toolchain), así que ya  no es necesario que los usuarios ejecuten esta orden. 

La razón por la cual necesitamos reconstruir libtool después de actualizar las versiones de {{c|gcc}} es debida a su función principal: ''libtool'' reúne un conjunto de herramientas que agregan código específico en
un interfaz genérico permitiendo que las aplicaciones se construyan contra librerías compartidas sin tener que manejar aspectos específicos en cada plataforma de estas librerías. Para que realice su función correctamente, el guión {{c|libtool}} utiliza varias localizaciones en la librería con la versión de {{c|gcc}} previamente fijada dentro de ella.

=== Cambios en el ABI ===

Un ABI o ,[https://es.wikipedia.org/wiki/Interfaz_binaria_de_aplicaciones ''Interfaz Binaria para Aplicaciones''] (en inglés Application Binary Interface), es un conjunto de convenciones usadas por todas las herramientas que manejan representaciones binarias de los programas, incluyendo compiladores, ensambladores, enlazadores y soporte en tiempo de ejecución (fuente: [http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html GCC Binary Compatibility]). Al cambiar el ABI usado para aplicaciones binarias y librerías, existirá el riesgo de obtener errores de enlazado o programas funcionando incorrectamente si no se reconstruyen todas las librerías que usen el código C++. 

 Si, C++, ya que la mayoría de las incompatibilidades suceden en el ABI de C++. Si se está actualizando a GCC 4.1 o GCC 5.1 probablemente se encuentren problemas en el ABI. Por ello también se utiliza la orden {{c|revdep-rebuild}} contra  {{Path|libstdc++.so.5}} (desde GCC 3 hacia GCC 4.1), o {{Path|libstdc++.so.6}} (desde GCC 4 hacia GCC 5.1).

{{RootCmd|revdep-rebuild --library 'libstdc\+\+.so.6'}}

Asi que, ¿Por qué se requiere esto para GCC hasta las versiones 3.4.0, 4.1 ó 5.1? A partir de estas versiones, GCC usa un ABI compatible a futuro, que elimina la necesidad de reconstruir las aplicaciones y librerías. Por supuesto que no se pueden dar garantía indefinidamente, pero cuando ocurra nuevamente una incompatibilidad, definitivamente la documentaremos aquí. En este caso la versión de la librería {{Path|libstdc++.so}} probablemente será superior.

==== El caso especial C++11 (y C++14) ====

While GCC (or more specifically, libstdc++) goes to great lengths to guarantee stability of the ABI, this guarantee does not extend to all parts of C++ within libstdc++. Formally, with versions starting from 3.4, GCC/libstdc++ only guarantees C++98/C++03 ABI stability and not more. This is crucial for packages that depend on C++11. GCC only makes C++11 ABI stability guarantees beginning with version 5.1. This means that switching (even minor) versions of gcc (say from 4.7.3 -> 4.7.4) might cause ABI breakage for binaries built from C++11 code.

Para obtener más información y ver algunos ejemplos, echar un vistazo a:

* https://bugs.gentoo.org/show_bug.cgi?id=513386
* https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61758
* https://blogs.gentoo.org/blueness/2015/03/10/the-c11-abi-incompatibility-problem-in-gentoo/
* http://stackoverflow.com/a/16196475

=== Reconstruir todo ===

Algunos juran que al aparecer una nueva versión de GCC, se debe reconstruir hasta el último paquete del sistema. Por supuesto, esto no tiene sentido, ya que de todas formas hay muchas aplicaciones que no
usan GCC en su proceso de construcción e instalación y por tanto nunca serían afectados por estos cambios. 

Sin embargo, esto no significa que estén completamente equivocados: las versiones recientes de GCC suelen incluir soporte mejorado para los conjuntos de instrucciones de los procesadores, lo que podría influenciar el desempeño de algunas aplicaciones positivamente. Aunque se estima que estas mejoras sean generalmente marginales, en algunos casos (especialmente en aplicaciones que usan intensivamente el CPU) podrían traer mejoras notables. 

Existen también casos conocidos donde un conjunto de paquetes se deben construir con el mismo compilador. Aunque la versión de estos paquetes se suele aumentar simultáneamente con el compilador (de forma que se construyan con la misma versión de GCC) el escoger selectivamente reinstalaciones de algunos de estos paquetes puede traer problemas. Los paquetes de {{Path|qt-*}} son un ejemplo de esto.

== Resolución de problemas ==

=== libstdc++.so.6: version `GLIBCXX_3.4.15' not found ===

Durante las actualizaciones puede que obtenga un error como el siguiente: 

{{CodeBox|title=No se encuentra GLIBCXX_x.y.z|1=
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found 
}}

Esto significa que está intentando construir un paquete con una versión de GCC ''más antigua'' que el usado para construir algunas de sus librerías dependientes. ¿Recuerde cuando dijimos que el ABI C++ era compatible a futuro? Esto es cierto, pero segura solamente que versiones ''más recientes'' (o iguales) de GCC se pueden utilizar para construir aplicaciones y librerías enlazadas (en comparación con la versión de GCC usada para construir esas librerías).

Para reconstruir todos los paquetes que dependen de libstdc++, echar un vistazo a la sección previa sobre revdep-rebuild.

=== ¿Qué paquetes se sabe que deben reconstruirse? ===

La siguiente tabla indica los paquetes que ''si se instalan'', se necesitarán reconstruir y el motivo por el cual se necesitan reconstruir. 

{| class="table" style="text-align: left;" 
|- 
! Paquete
! La reconstrucción es necesaria debido a ...
|- 
| {{Package|sys-devel/libtool}}
| La aplicación libtool tiene las rutas definidas de forma inamovible hacia librerias internas de GCC
|}

== Ver también ==

* [https://wiki.gentoo.org/wiki/Upgrade_GCC_up_to_4.1 Actualizar GCC hasta la versión 4.1], la versión anterior a este documento.
* [[Upgrading from gcc-4.x to gcc-5.x|Actualizar de gcc-4.x a gcc-5.x]]


[[Category:Core system]]
