Building almost anything on the [[Raspberry Pi]] takes a very, very long time - especially when there are a lot of dependencies involved.

Fortunately, you can offload much of the heavy lifting work to a more powerful system (such as your main Gentoo desktop/server) using distcc and crossdev (though this will only work for packages must compile C/C++). 

== distcc ==
It is also suggested that the first package you build on the Raspberry Pi should be distcc, as it will dramatically speed up subsequent packages that require a lot of compilation.

=== Raspberry Pi and Build servers ===
On the Raspberry Pi and on all build servers install {{Package|sys-devel/distcc}}:
{{Emerge|distcc}}

Edit the distcc config file to ensure it is on the right subnet for your network configuration, for example:
{{File|/etc/conf.d/distccd||<pre>
DISTCCD_OPTS="${DISTCCD_OPTS} --allow 192.168.1.0/24"
</pre>}}

Then register and start the distcc daemon:
{{RootCmd|rc-update add distccd default
|rc-config start distccd}}

=== Raspberry Pi only ===
Tell portage to use distcc:
{{File|/etc/portage/make.conf||<pre>
FEATURES="distcc"
</pre>}}

(Optional) Also add to FEATURES "buildpkg" to tell the Raspberry Pi to build package files for everything it builds (if you want to use the same setup on multiple Raspberry Pis without recompiling).


Edit the distcc host file to tell your Raspberry Pi to submit compile jobs to your server:
{{File|/etc/distcc/hosts||<pre>
# --- /etc/distcc/hosts -----------------------
# See the "Hosts Specification" section of
# "man distcc" for the format of this file.
#
# By default, just test that it works in loopback mode.
[YOUR HOSTS HERE - first host is first preference] 127.0.0.1 
</pre>}}

Now you will need to tell distcc the specific compiler name to use instead of just "gcc":
{{RootCmd|cd /usr/lib/distcc/bin
|ls -l|output=<pre>
total 0
lrwxrwxrwx  1 root root 15 Dec 23 20:13 c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 cc -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 gcc -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 armv6j-hardfloat-linux-gnueabi-c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 armv6j-hardfloat-linux-gnueabi-g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 armv6j-hardfloat-linux-gnueabi-gcc -> /usr/bin/distcc
</pre>}}

We need to replace those symlinks with the following script: 
{{File|/usr/lib/distcc/bin/armv6j-hardfloat-linux-gnueabi-wrapper|Distcc crossdev wrapper file|<pre>
#!/bin/bash
exec /usr/lib/distcc/bin/armv6j-hardfloat-linux-gnueabi-g${0:$[-2]} "$@"
</pre>}}

{{RootCmd|rm c++ g++ gcc cc
|chmod a+x /usr/lib/distcc/bin/armv6j-hardfloat-linux-gnueabi-wrapper
|ln -s armv6j-hardfloat-linux-gnueabi-wrapper cc
|ln -s armv6j-hardfloat-linux-gnueabi-wrapper gcc
|ln -s armv6j-hardfloat-linux-gnueabi-wrapper g++
|ln -s armv6j-hardfloat-linux-gnueabi-wrapper c++
}}

Double check that you did things right:
{{RootCmd|ls -l|output=<pre>
total 4
lrwxrwxrwx 1 root root 15 Dec  8 00:38 armv6j-hardfloat-linux-gnueabi-c++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec  8 00:38 armv6j-hardfloat-linux-gnueabi-g++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec  8 00:38 armv6j-hardfloat-linux-gnueabi-gcc -> /usr/bin/distcc
-rwxr-xr-x 1 root root 85 Dec  8 01:04 armv6j-hardfloat-linux-gnueabi-wrapper
lrwxrwxrwx 1 root root 38 Dec  8 01:05 c++ -> armv6j-hardfloat-linux-gnueabi-wrapper
lrwxrwxrwx 1 root root 38 Dec  8 01:04 cc -> armv6j-hardfloat-linux-gnueabi-wrapper
lrwxrwxrwx 1 root root 38 Dec  8 01:04 g++ -> armv6j-hardfloat-linux-gnueabi-wrapper
lrwxrwxrwx 1 root root 38 Dec  8 01:04 gcc -> armv6j-hardfloat-linux-gnueabi-wrapper
</pre>}}

You can now check what is being dispatched to your build machines while doing an emerge operation with this script:
{{File|/usr/sbin/distcc-watch|Portage distcc monitor|<pre>
#!/bin/bash
# This script will only print non-blank results from distccmon-text
N=1 # seconds to sleep in between checks

while true; do
	task=`DISTCC_DIR="/var/tmp/portage/.distcc/" distccmon-text`
	taskshort=`echo $task | tr -d ' '`
	len=${#taskshort}
	if [ $len -ne 0 ];then
		echo "$task"
	fi

	sleep $N
done
</pre>}}

Or simpler with:
{{RootCmd|watch -n1 DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text}}

== crossdev ==
This will setup crossdev on your build servers so that they can compile binaries compatible with the Raspberry Pi. Note that you can have multiple compilation nodes - just add them to the list of hosts on the Raspberry Pi. Distcc will decide when to distribute the compilation though, so chances are you will never be able to fully load even a single modern build server with jobs from the Raspberry Pi.

Install {{Package|sys-devel/crossdev}}:
{{Emerge|crossdev}}

You will need to maintain separate portage profiles for the Raspberry Pi and your server's default, so you must convert your existing profile files to folders.
Copy the following file to {{Path|~/convert-profile-to-files.sh}}, and then run it as root:
{{File|~/convert-profile-to-files.sh|Convert profile files to folders|<pre>
#!/bin/bash
PROFILE_DIR="/etc/portage"

if [ ! -e ${PROFILE_DIR} ]; then
  mkdir ${PROFILE_DIR};
fi;

for PACK_DIR in package.accept_keywords package.keywords package.use package.unmask package.mask; do
  CUR_DIR="${PROFILE_DIR}/${PACK_DIR}"
  if [ ! -e ${CUR_DIR} ]; then
    mkdir ${CUR_DIR}
  fi

  if [ -e ${CUR_DIR} -a ! -d ${CUR_DIR} ]; then
    mv ${CUR_DIR} ${CUR_DIR}.moving
    mkdir ${CUR_DIR}
    mv ${CUR_DIR}.moving ${CUR_DIR}/monolithic
  fi
done

echo "Completed!"
</pre>}}

Create a cross toolchain for ARM: (drop ''-S'' if you plan to run an unstable system):
{{RootCmd|crossdev -S -v -t armv6j-hardfloat-linux-gnueabi}}

If the cross toolchain for ARM fail to build try this:
{{RootCmd|CFLAGS{{=}}"-O2 -pipe" CXXFLAGS{{=}}"${CFLAGS}" crossdev -S -v -t armv6j-hardfloat-linux-gnueabi}}

== See also ==
* [http://www.gentoo.org/doc/en/cross-compiling-distcc.xml DistCC Cross-compiling Guide] about cross-compiling with DistCC

[[Category:Cross building]]
[[Category:Embedded systems]]
