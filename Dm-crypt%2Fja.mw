<languages />


{{Metadata|abstract=DM-CryptはLinuxカーネルのcrypto APIフレームワーク及びデバイスマッパーサブシステムを利用したディスク暗号化システムです。}}

{{InfoBox stack
|{{InfoBox homepage|https://gitlab.com/cryptsetup/cryptsetup|header=true}}
|{{InfoBox wikipedia}}
}}

"dm-crypt"はLinuxカーネルのcrypto APIフレームワーク及びデバイスマッパーサブシステムを利用したディスク暗号化システムです。dm-cryptを利用するとシステム管理者はディスク全体または論理ボリューム単位またはパーティション単位、あるいは一ファイル単位で暗号化をする事ができます。

dm-cryptサブシステムは"Linux Unified Key Setup (LUKS)"仕様に準じています。つまり、複数の鍵でデータの復号化ができたり、鍵の変更やパスフレーズの追加といった鍵の操作をする事ができます。dm-cryptを用いてLUKSに準じない暗号化も可能ですが、LUKSがフレキシブルで管理がしやすく広くコミュニティでサポートされている事からこの記事では主にLUKS準拠の機能について記述します。

== 設定 ==

dm-cryptを使用するためには、2つの条件があります。

# Linuxカーネル設定
# {{Package|sys-fs/cryptsetup}}のインストール

== カーネル コンフィグレーション ==

dm-cryptを使用するにはいくつかの項目の設定が必要です。

まず、"device mapper"と"crypt target"を有効にしなければなりません。

{{KernelBox|title=device mapperとcrypt targetの有効化|1=
[*] Enable loadable module support
Device Drivers --->
    [*] Multiple devices driver support (RAID and LVM) --->
        <*> Device mapper support
        <*>   Crypt target support
}}

次に、データの暗号化に使用したい暗号化APIを有効にしなければなりません。暗号化APIの一覧は"Cryptographic API"セクション以下にあります。

{{KernelBox|title=暗号化APIの有効化|1=
[*] Cryptographic API --->
    <*> XTS support
    <*> SHA224 and SHA256 digest algorithm
    <*> AES cipher algorithms
    <*> AES cipher algorithms (x86_64)
    <*> User-space interface for symmetric key cipher algorithms
}}

rootファイルシステムも暗号化したい場合、rootファイルシステムを復号化するためのinitramfsも必要です。そのため、"initramfs support"も有効化する必要があります。

{{KernelBox|title=initramfs supportの有効化|1=
General setup  --->
    [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
}}

=== Cryptsetupのインストール ===

{{Package|sys-fs/cryptsetup}}パッケージは{{c|cryptsetup}}コマンドを提供します。このコマンドはデータを暗号化や復号化したり、パスフレーズや鍵の管理をするためのコマンドです。

{{Emerge|sys-fs/cryptsetup}}

== 暗号化ストレージ ==

=== 鍵ファイルまたはパスフレーズ ===

ストレージの暗号化を始めるには、管理者は暗号化鍵に何を使うかを決める必要があります。{{c|cryptsetup}}ではパスフレーズか鍵ファイルを選ぶ事ができます。鍵ファイルはどのようなファイルでも構いませんが、適切に保護されたランダムなデータのファイルを使う事を推奨します。誰かが鍵ファイルを読めるならばその人は暗号化されたデータもまた読めるという事になります。

{{c|dd}}コマンドを使って鍵ファイルを生成する事ができます:

{{RootCmd|dd if{{=}}/dev/urandom of{{=}}/etc/keys/enc.key bs{{=}}1 count{{=}}4096}}

次の項目では、パスフレーズの場合と鍵ファイルの場合どちらの場合のコマンドも例示します。どちらか一方のみを実行する必要があります。

=== 暗号化ストレージの作成 ===

暗号化ストレージ(ディスク、パーティション、ファイル等)の作成には {{c|cryptsetup}} コマンドで <code>luksFormat</code> を指定します。

例えば、パスフレーズを鍵として{{Path|/dev/vdb2}}を暗号化ストレージに指定する場合:

{{RootCmd|cryptsetup -s 512 luksFormat /dev/vdb2|output=<pre>
This will overwrite data on /dev/vdb2 irrevocably.
  
Are you sure? (Type uppercase yes): YES
Enter LUKS passphrase: ...
Verify passphrase: ...
</pre>}}

パスフレーズの代わりに鍵ファイルを使う場合:

{{RootCmd|cryptsetup -s 512 luksFormat /dev/vdb2 /etc/keys/enc.key|output=<pre>
This will overwrite data on /dev/vdb2 irrevocably.
  
Are you sure? (Type uppercase yes): YES
</pre>}}

{{c|cryptsetup}}の<code>-s 512</code>オプションは実際の暗号化鍵の鍵長を指定します。(パスフレーズや鍵ファイルはこの暗号化鍵を利用するための鍵です。)

=== 暗号化ストレージを開く ===

暗号化ストレージを開くには(つまり、データを復号化して読み取れるようにするには)<code>luksOpen</code>オプションを指定します。

{{RootCmd|cryptsetup luksOpen /dev/vdb2 myname|output=<pre>
Enter passphrase for /dev/vdb2: ...
</pre>}}

鍵ファイルを利用した場合、コマンドはこのようになります:

{{RootCmd|cryptsetup luksOpen -d /etc/keys/enc.key /dev/vdb2 myname}}

コマンドの実行に成功すると、{{Path|/dev/mapper/myname}}という名前のデバイスが作成され、読み取る事ができるようになります。 

初めて暗号化デバイスを使用する場合、これをフォーマットしなければなりません。次の例では[[Btrfs]]ファイルシステムを使用していますが、他のファイルシステムも使用できます。

{{RootCmd|mkfs.btrfs /dev/mapper/myname}}

ファイルスステムのフォーマットが完了したら、あるいは以前にフォーマットを済ませた事のあるデバイスであれば、次のようにしてマウントできます:

{{RootCmd|mount /dev/mapper/myname /home}}

=== 暗号化ストレージを閉じる ===

暗号化ストレージを閉じるには(つまり、復号化した状態のデータを扱えなくするには)<code>luksClose</code>オプションを使用します:

{{RootCmd|cryptsetup luksClose myname}}

もちろん、デバイスがまだ使用されていない事を確認してください。

== LUKS用の鍵の操作 ==

LUKSの鍵(先の例で指定したパスフレーズや鍵ファイル)は実際のデータ暗号化に用いられる暗号化鍵を利用するための鍵です。これは暗号化されたパーティションやディスクあるいはファイルの先頭のスロットに保管されています。

=== スロットの一覧表示 ===

<code>luksDump</code>オプションで暗号化ストレージの情報を表示する事ができます。これにはスロットも含まれます:

{{RootCmd|cryptsetup luksDump /dev/vdb2|output=<pre>
LUKS header information for /dev/vdb2
  
Version:        1
Cipher name:    aes
Cipher mode:    xts-plain64
Hash spec:      sha1
Payload offset: 4096
MK bits:        512
MK digest:      34 3b ec ac 10 af 19 e7 e2 d4 c8 90 eb a8 da 3c e4 4f 2e ce
MK salt:        ff 7c 7f 53 db 53 48 02 a4 32 dc e0 22 fc a3 51
                06 ba b3 48 b3 28 13 a8 7a 68 43 d6 46 79 14 fe
MK iterations:  59375
UUID:           2921a7c9-7ccb-4300-92f4-38160804e08c
  
Key Slot 0: ENABLED
        Iterations:             241053
        Salt:                   90 0f 0f db cf 66 ea a9 6c 7c 0c 0d b0 28 05 2f
                                8a 5c 14 54 98 62 1a 29 f3 08 25 0c ec c2 b1 68
        Key material offset:    8
        AF stripes:             4000
Key Slot 1: ENABLED
        Iterations:             273211
        Salt:                   01 4c 26 ed ff 18 75 31 b9 89 5d a6 e0 b5 f4 14
                                48 d0 23 47 a9 85 78 fb 76 c4 a9 d0 cd 63 fb d7
        Key material offset:    512
        AF stripes:             4000
Key Slot 2: DISABLED
Key Slot 3: DISABLED
Key Slot 4: DISABLED
Key Slot 5: DISABLED
Key Slot 6: DISABLED
Key Slot 7: DISABLED
</pre>}}

上の例では2つのスロットが使用されています。<code>luksDump</code>は機微情報を表示はしません。単にLUKSヘッダの内容を表示しているだけです。そのため、<code>luksDump</code>では復号のための鍵は必要ありません。

=== 鍵ファイルやパスフレーズの追加 ===

暗号化ストレージを利用するための鍵ファイルやパスフレーズを追加するためには、 <code>luksAddKey</code> オプションを使用します:

{{RootCmd|cryptsetup luksAddKey /dev/vdb2|output=<pre>
Enter any passphrase: (Enter a valid, previously used passphrase to unlock the key)
Enter new passphrase for key slot: ... 
Verify passphrase: ...
</pre>}}

鍵ファイルを使用してパスフレーズを追加する場合:

{{RootCmd|cryptsetup luksAddKey -d /etc/keys/enc.key /dev/vdb2|output=<pre>
Enter new passphrase for key slot: ...
Verify passphrase: '''
</pre>}}

パスフレーズを使用して新たな鍵ファイル({{Path|/etc/keys/backup.key}})を追加する場合:

{{RootCmd|cryptsetup luksAddKey /dev/vdb2 /etc/keys/backup.key}}

鍵ファイルを使用して新たな鍵ファイルを追加する場合:

{{RootCmd|cryptsetup luksAddKey -d /etc/keys/enc.key /dev/vdb2 /etc/keys/backup.key}}

=== 鍵ファイルやパスフレーズの削除 ===

<code>luksRemoveKey</code>オプションを利用して鍵ファイルやパスフレーズを削除する事ができます。削除した鍵ではストレージの利用ができなくなります。

{{RootCmd|cryptsetup luksRemoveKey /dev/vdb2|output=<pre>
Enter LUKS passphrase to be deleted: ...
</pre>}}

鍵ファイルを削除する場合:

{{RootCmd|cryptsetup luksRemoveKey -d /etc/keys/backup.key /dev/vdb2}}

最低でも一つの鍵ファイルやパスフレーズが使えるようにしてください。一度削除されたパスフレーズや鍵ファイルは(別の鍵を利用して同じものを再度追加しない限り)二度と復旧する事ができません。

=== スロットを指定して削除 ===

パスフレーズや鍵ファイルがわからない場合、スロットを空ける事ができます。もちろん、どのスロットにどの鍵ファイルやパスフレーズが入っているかを知っていなければいけません。

例えば、スロット2を空ける場合(0から数えはじめるので、3番目のスロット):

{{RootCmd|cryptsetup luksKillSlot /dev/vdb2 2}}

This command will ask for a valid passphrase before continuing. Or one can pass on the keyfile to use:

{{RootCmd|cryptsetup luksKillSlot -d /etc/keys/enc.key /dev/vdb2 2}}

== Automate mounting encrypted file systems ==

Until now, the article focused on manual setup and mounting/unmounting of encrypted file systems. An init service {{Path|dmcrypt}} exists which automates the decrypting and mounting of encrypted file systems.

=== Configuring dm-crypt ===

Edit the {{Path|/etc/conf.d/dmcrypt}} file and add in entries for each file system. The supported entries are well documented in the file, the below example is just that - an example:

{{FileBox|filename=/etc/conf.d/dmcrypt|title=Automatically enabling two encrypted file systems|1=
# Definition for /dev/mapper/home (for /home)
target=home
source=UUID="abcdef12-321a-a324-a88c-cac412befd98"
key=/etc/keys/home.key
 
# Definition for /dev/mapper/local (for /usr/local)
target=local
source=UUID="fedcba34-4823-b423-a94c-cadbefda2943"
key=/etc/keys/local.key
}}

=== Configuring fstab ===

The next step is to configure {{Path|/etc/fstab}} to automatically mount the (decrypted) file systems when they become available. It is recommended to first obtain the UUID of the decrypted (mounted) file system:

{{RootCmd|blkid /dev/mapper/home|output=<pre>
/dev/mapper/home: UUID="4321421a-4321-a6c9-de52-ba6421efab76" TYPE="ext4"
</pre>}}

Then, update the {{Path|/etc/fstab}} file accordingly:

{{FileBox|filename=/etc/fstab|title=Automounting the decrypted file systems|1=
UUID="4321421a-4321-a6c9-de52-ba6421efab76"   /home        ext4   defaults   0   0
UUID="bdef2432-3bd1-4ab4-523d-badcf234a342"   /usr/local   ext4   defaults   0   0
}}

=== Add initscript to bootlevel ===

Don't forget to have the {{Path|dmcrypt}} init service launched at boot:

{{RootCmd|rc-update add dmcrypt boot}}

== さらなる情報 ==

* [[Dm-crypt full disk encryption]] on the Gentoo Wiki provides supplementary information on using encrypted file systems for Gentoo Linux installations
* The [https://gitlab.com/cryptsetup/cryptsetup/wikis/FrequentlyAskedQuestions cryptsetup FAQ] hosted on GitLab covers a wide range of frequently asked questions.


[[Category:Core system]]
