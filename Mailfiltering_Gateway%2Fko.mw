<languages />


{{Metadata|abstract=이 안내서는 Postfix의 스팸 차단 기능에 대한 과정별 안내서입니다. 이 과정에서 Amavisd-new, 스팸 어쌔신, ClamAV, 그레이 리스팅, SPF를 활용합니다.}}

이 안내서는 Postfix의 스팸 차단 기능에 대한 과정별 안내서입니다. 이 과정에서 Amavisd-new, 스팸 어쌔신, ClamAV, 그레이 리스팅, SPF를 활용합니다.

== 도입부 ==

이 안내서에서는 스팸 및 바이러스를 걸러내는 메일 게이트웨이를 설치하는 방법을 과정별로 설명합니다. 단일 서버 솔루션에 적용할 때 꽤 단순합니다. 

=== 대략적인 그림 ===

이 문서는 다중 도메인에 대한 스팸 차단 메일 게이트웨이 설정 방법을 설명합니다. 이 서버는 메일 계정을 실제로 보유하고 있는 메일 서버(마이크로소프트 익스체인지 또는 로터스 노츠 등)의 앞단에서 실행합니다. 

이 설치 과정에서 적절한 보안 레코드와 알아보기 쉬운 설정 파일을 갖춘 프로그램을 선택합니다. 전자메일 MTA로는 적절한 보안레코드를 보유하고 있으며 설정을 올바르게 처리하는데 상당히 쉬운 postfix를 활용합니다. Postfix는 메일 수신에 보통 25번 포트로 감청합니다. 이 과정에서 Amavisd-new에 10024번 포트를 통해 전달합니다. Amavisd-new 는 다음 메일 서버로 메일을 전달할 10025번 포트를 통해 Postfix로 메일을 다시 되돌리기  전에 다양한 필터를 거칩니다. 

Amavisd-new는 내용 기반 차단 프레임워크이며 바이러스 및 스팸을 차단하는 도우미 프로그램을 제대로 동작하게 합니다. 이 설치 과정에서 바이러스를 차단하는 ClamAV 그리고 스팸을 차단하는 스팸 어쌔신을 두가지 도우미 프로그램으로 활용하겠습니다. 스팸 어쌔신 자체는 내용 기반 차단 프레임워크 계층 기능을 잇따라 수행하며, Vipul's Razor2와 DCC 도우미 프로그램을 동작합니다. 

RBL 및 기타 스팸 처리 기능 프로그램과는 달리 스팸 어쌔신은 단순히 일회 시험만을 기반으로 하는 전자메일 수용, 거절 기능만을 수행하지 않습니다. 내부 시험과 외부 도우미 프로그램을 통해 거쳐간 모든 전자메일을 기반으로 스팸 가중치를 계산합니다. 이 가중치는 다음 시험 과정을 기반으로 합니다: 

* 베이지안 필터링
* 정규 표현식에 기반한 정적 규칙
* 분산 협업 네트워크
** RBLs
** Razor2
** Pyzor
** DCC

The first part (chapters 1 to 4) of the guide will describe the basic setup of a mailfiltering gateway. The next chapters can be implemented individually with no dependence between each chapter. These chapters describe how to: 

* setup special IMAP folders for learning of the Bayesian filter and for delivery of false positives
* setup greylisting with Postfix
* setup Amavisd-new to use a MySQL backend for user preferences
* setup Spamassassin to use a MySQL backend for AWL and Bayes data

{{Note|The IMAP folders will be using the maildir format. Having each mail in a separate file makes handling much simpler. If you're using mbox I propose to give maildir a try. If you're not already using maildir emerge the necessary tools with <code>emerge courier-imap</code> .}}

A planned fifth part will contain various tips regarding performance and things you may want to know (running chrooted, postfix restrictions, etc.). 

{{Note|Delegating responsibility to third parties is not without risks. You have to know and trust these third parties. In this setup only the decision to quarantine virus mails are based on a single third party. Using Spamassassin's scoring system the decision to stop spam mails are not made by a single authority except perhaps Spamassassins own static rules.}}

{{Warning|When rejecting spam mails at the MTA level you have to be very careful when selecting the RBL's you want to use, i.e. SpamCop is a bad RBL to use at the MTA level because you will experience false positives because sometimes their listing is just too aggressive. Further info at [http://www.geekcomix.com/cgi-bin/classnotes/wiki.pl?UNIX03/Realtime_Blackhole_Lists_Are_Bad Realtime Blackhole Lists Are Bad] and [http://theory.whirlycott.com/~phil/antispam/rbl-bad/rbl-bad.html The Spam Problem: Moving Beyond RBLs]}}

=== 준비 ===

설치한 Postfix가 잘 동작하는지 확인하기 전에 메일을 주고 받을 수 있는 네트워크에 백엔드 메일 서버가 필요합니다. Postfix를 설정해본 경험이 없다면 한번에 모든 부분을 설정해야 한다고 할 경우 상당히 복잡한 느낌이 바로 찾아올 것입니다. 도움이 필요하다면 젠투 위키에 있는 [[Complete_Virtual_Mail_Server/ko|가상 메일 서버 완벽 안내서]] 를 참고하십시오 

== 필요한 프로그램 설치 ==

가장 중요한 Amavisd-new, Spamassassin, ClamAV 프로그램 설치로 시작하겠습니다. 

{{RootCmd|echo "mail-filter/amavisd-new spamassassin clamav" >> /etc/portage/package.use}}
{{RootCmd|emerge amavisd-new}}
{{RootCmd|freshclam}}

{{Note|As previously mentioned you should already have a working <code>postfix</code> instance running on the box. Basically this shouldn't be much more than <code>emerge postfix</code> ''and'' have a basic understanding of how Postfix is working.}}

=== DNS 설정 ===

{{Note|If you're not setting up a gateway server but have the mailboxes on the same server you only have to create the MX-Record.}}

프로그램을 이머지하는 동안 다른 쉘을 띄우시고 필요한 DNS 레코드를 만드십시오. 

Start out by creating a <code>MX</code> record for the mail gateway and an <code>A</code> record for the next destination. 

{{CodeBox|title=DNS 설정|1=
(Create a MX record for the gateway server)
                MX      10      mailgateway.mydomain.tld.
(Create an A record for the gateway server)
mailgateway     A       mgw.ip.add.here
(Create an A record for the next hop mail server)
mail            A       ms.ip.add.here
}}


{{Note|Some ADSL providers might block port 25 and force you to relay mail through one of their servers. Typically you have to create a secondary MX-Record like <code>MX 20 backup-mx.some-isp.tld</code>}}


=== 방화벽 개방 ===

In addition to allowing normal mail traffic you have to allow a few services through your firewall to allow the network checks to communicate with the servers. 

{| class="wikitable" style="text-align: left;" 
|- 
! Application
! Protocol
! Port
|- 
| DCC
| UDP
| 6277
|- 
| Razor(outgoing ping)
| TCP
| 7
|- 
| Razor
| TCP
| 2703
|-
|}

Razor 은 어떤 서버가 가장 가까운 곳에 있는지 찾기 위해 ping을 활용합니다. 

=== Postfix 설정 ===

First we have to tell <code>postfix</code> to listen on port 10025 and we remove most of the restrictions as they have already been applied by the <code>postfix</code> instance listening on port 25. Also we ensure that it will only listen for local connections on port 10025. To accomplish this we have to add the following at the end of {{Path|/etc/postfix/master.cf}}  

{{CodeBox|title=master.cf 파일 수정|1=
smtp-amavis     unix -        -       n     -       2  smtp
  -o smtp_data_done_timeout=1200
  -o smtp_send_xforward_command=yes
#Equivalently when using lmtp:
#lmtp-amavis    unix -        -       n     -       2  lmtp
#   -o lmtp_data_done_timeout=1200
#   -o lmtp_send_xforward_command=yes
  
127.0.0.1:10025 inet n        -       n     -       -  smtpd
  -o content_filter=
  -o local_recipient_maps=
  -o relay_recipient_maps=
  -o smtpd_restriction_classes=
  -o smtpd_client_restrictions=
  -o smtpd_helo_restrictions=
  -o smtpd_sender_restrictions=
  -o smtpd_recipient_restrictions=permit_mynetworks,reject
  -o mynetworks=127.0.0.0/8
  -o strict_rfc821_envelopes=yes
  -o smtpd_error_sleep_time=0
  -o smtpd_soft_error_limit=1001
  -o smtpd_hard_error_limit=1000
  
#If you want to use proxy filtering instead
#smtp            inet n         -       n      -       8 smtpd
# -o smtpd_proxy_filter=127.0.0.1:10024
# -o smtpd_client_connection_count_limit=4
#If you don't want to scan outgoing mail use this
#10.0.0.2:smtp   inet n         -       n       -      - smtpd
#-o content_filter=
}}

{{Note|The <code>smtp-amavis</code> line specifies that a maximum of two of these processes may run at any time. If you need a greater degree of concurrency tune this number to fit your needs. Remember that to match the number with <code>$max_servers</code> in {{Path|amavisd.conf}} . Keep in mind that <code>amavisd-new</code> is quite memory-intensive and raising the amount of <code>amavisd-new</code> processes too high can easily lead to memory starvation and heavy swapping, which leads to drastically reduced performance.}}

{{Note|If you want to reject spam early on in the process you can use the Before-Queue (proxy) method instead of the filter method. If you uncomment the three lines you will have to set <code>content_filter{{=}}</code> in {{Path|main.cf}} . This is not recommended for high traffic servers as the number of concurrent connections are limited to the number of amavisd instances.}}

{{Warning|Before-Queue(프록시) 방식은 아직 제대로 시험해보지 않았습니다.}}

{{Note|If you, for any reason whatsoever, want to send mail from this box and don't want it scanned, add another postfix instance by uncommenting the last two lines and substitute with a proper IP.}}

The file {{Path|master.cf}} tells the postfix master program how to run each individual postfix process. More info with <code>man 8 master</code> . 

Next we need the main <code>postfix</code> instance listening on port 25 to filter the mail through <code>amavisd-new</code> listening on port 10024. 

We also need to set the next hop destination for mail. Tell Postfix to filter all mail through an external content filter and enable explicit routing to let Postfix know where to forward the mail to. 

{{FileBox|filename=/etc/postfix/main.cf|lang=ini|1=
biff = no
empty_address_recipient = MAILER-DAEMON
queue_minfree = 120000000
  
content_filter = smtp-amavis:[127.0.0.1]:10024
#Equivalently when using lmtp:
#content_filter = lmtp-amavis:[127.0.0.1]:10024
  
# TRANSPORT MAP
#
# Insert text from sample-transport.cf if you need explicit routing.
transport_maps = hash:/etc/postfix/transport
  
relay_domains = $transport_maps
}}

Postfix has a lot of options set in {{Path|main.cf}} . For further explanation of the file please consult <code>man 5 postconf</code> or the same online [http://www.postfix.org/postconf.5.html Postfix Configuration Parameters] . 

The format of the {{Path|transport}} file is the normal Postfix hash file. Mail to the domain on the left hand side is forwarded to the destination on the right hand side. 

{{FileBox|filename=/etc/postfix/transport|1=
mydomain.tld                          smtp:mail.mydomain.tld
}}

After we have edited the file we need to run the <code>postmap</code> command. Postfix does not actually read this file so we have to convert it to the proper format with <code>postmap /etc/postfix/transport</code> . This creates the file {{Path|/etc/postfix/transport.db}} . There is no need to reload Postfix as it will automatically pick up the changes. 

{{Note|If the next hop mail server is not listening on the standard SMTP port 25 you can tell postfix to use a given port number, like <code>smtp:mail.mydomain.tld:25000</code> .}}

If your first attempts to send mail result in messages bouncing, you've likely made a configuration error somewhere. Try temporarily enabling <code>soft_bounce</code> while you work out your configuration issues. This prevents postfix from bouncing mails on delivery errors by treating them as temporary errors. It keeps mails in the mail queue until <code>soft_bounce</code> is disabled or removed. 

{{RootCmd|postconf -e "soft_bounce {{=}} yes"
|/etc/init.d/postfix reload}}

Once you've finished creating a working configuration, be sure to disable or remove <code>soft_bounce</code> and reload postfix.

=== Amavisd-new 설정 ===

Amavisd-new is used to handle all the filtering and allows you to easily glue together severel different technologies. Upon reception of a mail message it will extract the mail, filter it through some custom filters, handle white and black listing, filter the mail through various virus scanners and finally it will filter the mail using SpamAssassin. 

Amavisd-new 자체에는 몇가지 추가 기능이 있습니다: 

* it identifies dangerous file attachments and has policies to handle them
* per-user, per-domain and system-wide policies for:
** whitelists
** blacklists
** spam score thresholds
** virus and spam policies

Apart from <code>postfix</code> and <code>freshclam</code> we will run all applications as the user <code>amavis</code> . 

{{Path|/etc/amavisd.conf}}에서 다음 부분을 편집하십시오  

{{FileBox|filename=/etc/amavisd.conf|lang=ini|1=
# (Insert the domains to be scanned)
$mydomain = 'example.com';
# (Bind only to loopback interface)
$inet_socket_bind = '127.0.0.1';
# (Forward to Postfix on port 10025)
$forward_method = 'smtp:127.0.0.1:10025';
$notify_method = $forward_method;
# (Define the account to send virus alert emails)
$virus_admin = "virusalert\@$mydomain";
# (Always add spam headers)
$sa_tag_level_deflt  = -100;
# (Add spam detected header aka X-Spam-Status: Yes)
$sa_tag2_level_deflt = 5;
# (Trigger evasive action at this spam level)
$sa_kill_level_deflt = $sa_tag2_level_deflt;
# (Do not send delivery status notification to sender.  It does not affect
# delivery of spam to recipient. To do that, use the kill_level)
$sa_dsn_cutoff_level = 10;
# Don't bounce messages left and right, quarantine
# instead
$final_virus_destiny      = D_DISCARD;  # (defaults to D_DISCARD)
$final_banned_destiny     = D_DISCARD;  # (defaults to D_BOUNCE)
$final_spam_destiny       = D_DISCARD;  # (defaults to D_BOUNCE)
}}

{{Note|With this line <code>$sa_tag2_level_deflt {{=}} 5;</code> you set the Spamassassin spam score to 5. This might be a bit low. As you might have noticed the Amavisd-new default is <code>6.3</code> . If you don't want to see a single spam mail in your mail folder choose <code>5</code> , but if you don't want to deal with false positives choose <code>6.3</code> .}}

Create a quarantine directory for the virus mails as we don't want these delivered to our users. 

{{RootCmd|mkdir /var/amavis/virusmails
|chown amavis:amavis /var/amavis/virusmails
|chmod 750 /var/amavis/virusmails}}

{{Note|Amavisd-new 에서는 정책 뱅크를 활용한 잘 다듬어놓은 정책 설정을 제공합니다.}}

=== ClamAV 설정 ===

As virus scanner we use ClamAV as it has a fine detection rate comparable with commercial offerings, it is very fast and it is Open Source Software. We love log files, so make <code>clamd</code> log using <code>syslog</code> and turn on verbose logging. Also do not run <code>clamd</code> as <code>root</code> . Now edit {{Path|/etc/clamd.conf}}  

{{FileBox|filename=/etc/clamd.conf|1=
# (Verbose logging with syslog)
LogSyslog
LogVerbose
LogFacility LOG_MAIL
# (Change pid file location)
PidFile /var/run/amavis/clamd.pid
# (Set the clamav socket)
LocalSocket /var/amavis/clamd
# (Close the connection when this limit is exceeded)
StreamMaxLength 10M
# (Don't run clamd as root)
User amavis
# (Newer versions require you to uncomment this)
ScanMail
ScanArchive
}}

{{Note | ClamAV를 동작하게 하는 예제의 지시 구문 제거를 기억하십시오.}}

ClamAV comes with the <code>freshclam</code> deamon dedicated to periodical checks of virus signature updates. Instead of updating virus signatures twice a day we will make <code>freshclam</code> update virus signatures every two hours. 

{{FileBox|filename=/etc/freshclam.conf|1=
# (Syslog logging)
LogSyslog
# (Verbose logging)
LogVerbose
# (Explicitly drop root privileges)
DatabaseOwner clamav
# (Check for updates every two hours. That is the official recommendation)
Checks 12
# (Use the mirror closest to you. Replace XY with your country code
DatabaseMirror db.XY.clamav.net
}}

Start <code>clamd</code> with <code>freshclam</code> using the init scripts by modifying {{Path|/etc/conf.d/clamd}} . 

{{FileBox|filenam=/etc/conf.d/clamd|lang=bash|1=
START_CLAMD=yes
FRESHCLAM_OPTS="-d"
}}

마지막으로 {{Path|amavisd.conf}} 파일에서 새 소켓 위치 값으로 바꾸십시오. 

{{FileBox|filename=/etc/amavisd.conf|lang=bash|1=
# (Uncomment the clamav scanner and modify socket location)
['ClamAV-clamd',
\&ask_daemon, ["CONTSCAN {}\n", "/var/amavis/clamd"],
  qr/\bOK$/, qr/\bFOUND$/,
  qr/^.*?: (?!Infected Archive)(.*) FOUND$/ ],
}}

{{Warning|Do NOT modify the <code>$unix_socketname</code> unless you know what you're doing.}}

=== Vipul's Razor 설정 ===

Razor2는 협업 분산 스팸 검사합 네트워크입니다. {{c|emerge razor}} 명령으로 설치하고 필요한 설정 파일을 만드십시오. <code>amavis</code> 사용자로 {{c|su - amavis}} 다음 <code>razor-admin -create</code>를 입력하여 실행하십시오. 

{{RootCmd|emerge razor}}

{{RootCmd|su - amavis -s /bin/bash}}

{{Cmd|razor-admin -create
|exit}}

=== 분산 검사합 정리 저장소(Distributed Checksum Clearinghouse : dcc) 설정 ===

Like Razor2, dcc is a collaborative and distributed spam checksum network. Its philosopy is to count the number of recipients of a given mail identifying each mail with a fuzzy checksum. 

{{RootCmd|emerge dcc}}

=== Spamassassin 설정 ===

Amavis is using the Spamassassin Perl libraries directly so there is no need to start the service. Also this creates some confusion about the configuration as some Spamassassin settings are configured in {{Path|/etc/mail/spamassassin/local.cf}} and overridden by options in {{Path|/etc/amavisd.conf}} . 

{{FileBox|filename=/etc/mail/spamassassin/local.cf|1=
# Enable the Bayes system
use_bayes               1
  
# Enable all network checks
skip_rbl_checks         0
  
# Mail using languages used in these country codes will not be marked
# as being possibly spam in a foreign language.
# - danish english norwegian swedish
ok_languages            da en no sv
  
# Mail using locales used in these country codes will not be marked
# as being possibly spam in a foreign language.
ok_locales              en
  
# Use a sensible bayes path
bayes_path              /var/amavis/.spamassassin/bayes
}}


{{Note|With Spamassassin version 3.1 you have to enable DCC, Razor2 by uncommenting the corresponding lines in {{Path|v310.pre}} .}}

{{Note|You can find inspiration for your {{Path|local.cf}} file by trying the [http://www.yrex.com/spam/spamconfig.php SpamAssassin Configuration Generator] .}}

{{Note|You might also want to switch the <code>ok_languages</code> and <code>ok_locales</code> .}}

== 모든 바람직한 규칙에는 마찬가지로 바람직한 예외가 있습니다 ==

Once mail really starts passing through this mail gateway you will probably discover that the above setup is not perfect. Maybe some of your customers like to receive mails that others wouldn't. You can whitelist/blacklist envelope senders quite easily. Uncomment the following line in {{Path|amavisd.conf}} . 

{{FileBox|filename=amavisd.conf|title=사이트 범위 가중치 부여 처리|lang=bash|1=
read_hash("/var/amavis/sender_scores_sitewide"),
}}

In the {{Path|sender_scores_sitewide}} file you put complete email addresses or just the domian parts and then note a positive/negative score to add to the spam score. 

{{FileBox|filename=whitelist_sender|title=예제|1=
# (Whitelist all emails from the specific email address)
postmaster@example.net                -3.0
# (Whitelist all emails from the example.net excluding subdomains)
.example.net                          1.0
}}


{{Note| 더 많은 예제를 보려면 {{Path|/etc/amavisd.conf}} 파일을 살펴보십시오.}}

{{Note|Placing these addresses outside {{Path|amavisd.conf}} is a cleaner and safer solution.}}

{{Note|Alternatively it can be done in Spamassassin's configuration file {{Path|/etc/mail/spamassassin/local.cf}} but I think it is cleaner to do it in {{Path|/etc/amavisd.conf}} .}}

{{Note|In a later chapter I will show how to implement per-user policies using MySQL.}}

While waiting for a better method you can add the following to {{Path|amavisd.conf}} to bypass spam checks for <code>postmaster</code> and <code>abuse</code> mailboxes. 

{{CodeBox|title=postmaster 및 abuse 메일에 대한 스팸 필터 통과 처리|1=
map { $bypass_spam_checks{lc($_)}=1 } (qw(
        postmaster@
        abuse@
));
}}

{{Important|While we are at it we should ''never'' automatically discard mails to the <code>postmaster</code> or the <code>abuse</code> accounts. See [http://www.ietf.org/rfc/rfc2142.txt RFC 2142 MAILBOX NAMES FOR COMMON SERVICES, ROLES AND FUNCTIONS] . Otherwise your domains might end up listed in some of the evil lists over at [http://www.rfc-ignorant.org/ rfc-ignorant.org] .}}

== 더 많은 규칙 추가 ==

If you want to use more rules provided by the SARE Ninjas over at the [http://www.rulesemporium.com/ SpamAssassin Rules Emporium] you can easily add and update them using the <code>sa-update</code> mechanism included in Spamassassin. 

A brief guide to using SARE rulesets with <code>sa-update</code> can be found [http://daryl.dostech.ca/sa-update/sare/sare-sa-update-howto.txt here] . 

== 시험 및 마무리 ==

=== 설정 시험 ===

Now before you start <code>freshclam</code> you can manually verify that it works. 

{{RootCmd|freshclam|output=<pre>
ClamAV update process started at Sun May  2 09:13:41 2004
Reading CVD header (main.cvd): OK
Downloading main.cvd [*]
main.cvd updated (version: 22, sigs: 20229, f-level: 1, builder: tkojm)
Reading CVD header (daily.cvd): OK
Downloading daily.cvd [*]
daily.cvd updated (version: 298, sigs: 1141, f-level: 2, builder: diego)
Database updated (21370 signatures) from database.clamav.net (193.1.219.100).
</pre>
}}

Now you have updated virus definitions and you know that {{Path|freshclam.conf}} is working properly. 

Test freshclam and amavisd from the cli and amavisd testmails. Start <code>clamd</code> and <code>amavis</code> with the following commands: 

{{RootCmd|/etc/init.d/clamd start
|/etc/init.d/amavisd start
|/etc/init.d/postfix reload}}

If everything went well <code>postfix</code> should now be listening for mails on port 25 and for reinjected mails on port 10024. To verify this check your log file. 

{{RootCmd|tail -f /var/log/mail.log}}

{{Note| 로그 설정에 따라 {{Path|/var/log/messages}}가 올바른 경로일 수 있습니다.}}

이제 로그 파일에 이상한 메시지가 안나타난다면 새로 테스트 해볼 시간입니다. 

<code>netcat</code>으로 <code>amavisd</code>에 접속할 때 10024 포트를, <code>postfix</code>에 접속할 때 10025 포트를 활용하십시오. 

{{Note|Netcat can be used as an advanced replacement for <code>telnet</code> . Install it with <code>emerge netcat</code> .}}

{{Note|For some unknown reason you can not complete a manual mail injection to <code>amavisd</code> with netcat. Use <code>telnet</code> instead.}}

{{RootCmd|nc localhost 10024|output=<pre>
220 [127.0.0.1] ESMTP amavisd-new service ready
</pre>}}

{{RootCmd|nc localhost 10025|output=<pre>
220 example.com ESMTP Postfix
</pre>
}}


{{Note|If you want to see the complete output from amavisd-new start <code>amavisd debug-sa</code> as the <code>amavis</code> user and send a mail. For this to work you might have to change the default shell in {{Path|/etc/passwd}} .}}

<code>amavisd</code> 와 <code>clamd</code>를 <code>default</code> 런레벨에 추가하십시오. 

{{RootCmd|rc-update add clamd default
|rc-update add amavisd default}}

{{Note|<code>amavisd</code>가 스팸 어쌔신 펄 라이브러리를 바로 사용하므로 <code>spamd</code>를 기본 런레벨에 바로 추가하면 안됩니다.}}

{{Note|You might notice <code>Net::Server: Couldn't POSIX::setuid to ... []</code> lines in your log. According to [http://www.ijs.si/software/amavisd/README.chroot amavis chroot README] , if the process UID remains 0 ( <code>root</code> ), the program will terminate, otherwise you can consider the message just as informative. This is because <code>POSIX::setuid()</code> returns a string <code>0 but true</code> .}}

{{Important|If you enabled login for amavis remember to set back the login shell in {{Path|/etc/passwd}} to <code>/bin/false</code> .}}

== 전자메일 자동 숙지 및 열외처리 ==

=== spamtrap 사용자 만들기 ===

spamtrap 계정과 디렉터리를 민드십시오. 

{{RootCmd|useradd -m spamtrap
|maildirmake /home/spamtrap/.maildir
|chown -R spamtrap:spamtrap /home/spamtrap/.maildir}}

spamtrap 사용자에게 제대로 된 암호를 부여하십시오.

{{RootCmd|passwd spamtrap}}

If you manually want to check some of the mails to ensure that you have no false positives you can use the following <code>procmail</code> recipe to sideline spam found into different mail folders. 

=== .procmailrc 만들기 ===

{{FileBox|filename=/home/spamtrap/.procmailrc|lang=bash|1=
#Set some default variables
MAILDIR=$HOME/.maildir
  
SPAM_FOLDER=$MAILDIR/.spam-found/
  
LIKELY_SPAM_FOLDER=$MAILDIR/.likely-spam-found/
  
#Sort mails with a spamscore of 7+ to the spamfolder
:0:
* ^X-Spam-Status: Yes
* ^X-Spam-Level: \*\*\*\*\*\*\*
$SPAM_FOLDER
  
#Sort mail with a spamscore between 5-7 to the likely spam folder
:0:
* ^X-Spam-Status: Yes
$LIKELY_SPAM_FOLDER
  
#Sort all other mails to the inbox
:0
*
./
}}

{{Warning|If your mail server is going to receive a lot of mail you should NOT use the likely-spam recipe. Instead set <code>$sa_tag2_level_deflt</code> high enough to avoid false positives and filter it directly to <code>$SPAM_FOLDER</code> .}}

{{Note|If you haven't already installed <code>procmail</code> do it with <code>emerge procmail</code> .}}

이제 Postfix 에서 메일을 전달할 때 <code>procmail</code>을 사용하는지 확인하십시오. 

{{FileBox|filename=/etc/postfix/main.cf|lang=ini|1=
mailbox_command = /usr/bin/procmail -a "DOMAIN"
}}

=== 메일 폴더 만들기 ===

이제 햄과 스팸을 처리할 공유 폴더를 만들겠습니다. 

{{RootCmd|maildirmake /var/amavis/.maildir
|maildirmake -S /var/amavis/.maildir/Bayes
|maildirmake -s write -f spam /var/amavis/.maildir/Bayes
|maildirmake -s write -f ham /var/amavis/.maildir/Bayes
|maildirmake -s write -f redeliver /var/amavis/.maildir/Bayes}}

Amavisd-new needs to be able to read these files as well as all mailusers. Therefore we add all the relevant users to the mailuser group along with amavis. 

{{RootCmd|groupadd mailusers
|usermod -G mailusers spamtrap
|chown -R amavis:mailusers /var/amavis/.maildir/
|chown amavis:mailusers /var/amavis/
|chmod -R 1733 /var/amavis/.maildir/Bayes/
|chmod g+rx /var/amavis/.maildir/
|chmod g+rx /var/amavis/.maildir/Bayes/}}

{{Warning|This grants members of the <code>mailusers</code> groups access to <code>amavis</code> mail.}}

This makes the spam and ham folders writable but not readable. This way users can safely submit their ham without anyone else being able to read it. 

<code>spamtrap</code> 사용자로 다음 명령을 실행하십시오: 

{{Cmd|maildirmake --add Bayes{{=}}/var/amavis/.maildir/Bayes $HOME/.maildir}}

{{Note|We have to give the group read permissions on the {{Path|Bayes}} folder in order for the mail client to be able to see the subdirectories used by IMAP.}}

=== 크론 작업 추가 ===

Now run <code>crontab -u amavis -e</code> to edit the amavis crontab to enable automatic learning of the Bayes filter every hour. 

{{FileBox|filename=crontab|title=amavis 사용자용 설정|1=
#Auto learn
0 * * * *          /usr/bin/sa-learn --spam /var/amavis/.maildir/Bayes/.spam/{cur,new} \
                    > /dev/null 2>&1
0 * * * *          /usr/bin/sa-learn --ham /var/amavis/.maildir/Bayes/.ham/{cur,new} > \
                   /dev/null 2>&1
}}

{{Note| 크론을 실행하려면 <code>amavis</code> 는 <code>cron</code> 그룹의 구성원이어야 합니다.}}

{{Note|It seems like the shared maildir folders will make <code>sa-learn</code> examine all messages twice. This should not be a problem. The output will also show that the maximum of messages learned from is half or less than the messages examined.}}

=== amavisd.conf 수정 ===

Now modify amavis to redirect spam emails to the <code>spamtrap</code> account and keep spamheaders. 

{{FileBox|filename=/etc/amavisd.conf|lang=ini|1=
# (Define the account to send virus spam emails)
$spam_quarantine_to = "spamtrap\@$myhostname";
}}

=== 정리 ===

We don't want to keep mail forever so we use <code>tmpwatch</code> to clean up regularily. Emerge it with <code>emerge tmpwatch</code> . Only <code>root</code> is able to run <code>tmpwatch</code> so we have to edit the <code>root</code> crontab. 

{{FileBox|filename=crontab|title=root user|1=
# Clean up
# Keep virusmails for a week (24*7 hours)
15 0 * * *      /usr/sbin/tmpwatch -c -f -d --quiet 168 /var/amavis/virusmails/
# Delete spam and ham learned after a week
15 0 * * *      /usr/sbin/tmpwatch -c -f -d --quiet 168 /var/amavis/.maildir/Bayes/
}}

== 그레이 리스팅 ==

=== 도입부 ===

Greylisting is one of the newer weapons in the spam fighting arsenal. As the name implies it is much like whitelisting and blacklisting. Each time an unknown mailserver tries to deliver mail the mail is rejected with a ''try again later'' message. This means that mail gets delayed but also that stupid spam bots that do not implement the RFC protocol will drop the attempt to deliver the spam and never retry. With time spam bots will probably adjust, however it will give other technologies more time to identify the spam. 

{{Note|If your ISP blocks incoming traffic on port 25 and relays all mail to you through their own mail server greylisting will not work.}}

Postfix 2.1 come with a simple Perl greylisting policy server that implements such a scheme. However it suffers from unpredictable results when the partition holding the greylisting database run out of space. There exists an improved version that do not suffer this problem. First I will show how to install the builtin greylisting support that come with Postfix and then I will show how to configure the more robust replacement. 

{{Note|There are other greylisting policy servers for Postfix around (such as [http://www.gasmi.net/gld.html Gld] , which is in Portage, and [http://sqlgrey.sourceforge.net/ SQLgrey] ). Some of them support database backends, auto whitelisting and other neat features.}}

=== 간단한 그레이 리스팅 ===

{{Note|If you prefer to use the improved greylisting with postgrey you can safely skip this section.}}

We need the file {{Path|greylist.pl}} but unfortunately the ebuild does not install it as default. 

{{RootCmd|cp /usr/portage/distfiles/postfix-your-version-here.tar.gz /root/
|tar xzf postfix-your-version-here.tar.gz
|cp postfix-2.1.0/examples/smtpd-policy/greylist.pl /usr/bin/}}

Now we have the file in place we need to create the directory to hold the greylisting database: 

{{RootCmd|mkdir /var/mta
|chown nobody /var/mta}}

{{Warning|Do not create the greylisting database directory on a partition that might run out of space. While postfix can recover from no-space-left situations for the mail queue and mail box situations, this is not the case with the greylisting database. If the file becomes corrupted you may not be able to receive mail at all until you delete the file by hand.}}

=== 그레이 리스팅 설정 ===

Now that we have all this ready all that is left is to add it to the postfix configuration. First we add the necessary information to the {{Path|master.cf}} : 

{{CodeBox|title=그레이 리스팅을 활용할 목적으로 master.cf 수정|1=
policy-greylist  unix  -       n       n       -       -       spawn
   user=nobody argv=/usr/bin/perl /usr/bin/greylist.pl
}}

The postfix spawn daemon normally kills its child processes after 1000 seconds but this is too short for the greylisting process so we have to increase the timelimit in {{Path|main.cf}} : 

{{FileBox|filename=main.cf|title=그레이 리스팅 활용|lang=ini|1=
policy-greylist_time_limit = 3600
# (Under smtpd_recipient_restrictions add:)
check_sender_access hash:/etc/postfix/sender_access
# (Later on add:)
restriction_classes = greylist
greylist = check_policy_service unix:private/policy-greylist
}}

{{Warning|Be sure to specify <code>check_sender_access</code> AFTER <code>reject_unauth_destination</code> or else your system could become an open mail relay.}}

{{Note|The greylist database gets polluted quickly with bogus addresses. It helps if you protect greylist lookups with other restrictions that reject unknown senders and/or recipients.}}

We don't want to use greylisting for all domains but only for those frequently abused by spammers. After all it will delay mail delivery. A list of frequently forged MAIL FROM domains can be found [http://www.monkeys.com/anti-spam/filtering/sender-domain-validate.in online] . Add the domains you receive a lot of spam from to {{Path|/etc/postfix/sender_access}} : 

{{CodeBox|title=Format of sender_access|1=
aol.com     greylist
hotmail.com greylist
bigfoot.com greylist
}}

If you want a more extensive list: 

{{RootCmd|wget http://www.monkeys.com/anti-spam/filtering/sender-domain-validate.in
|cat sender-domain-validate.in {{!}} sort {{!}} awk {'print $1 "\t\t greylist"'} > /etc/postfix/sender_access}}

Now we only have to initialize the {{Path|sender_access}} database: 

{{RootCmd|postmap /etc/postfix/sender_access}}

이제 간단한 그레이 리스팅 설정은 끝났습니다. 

{{Warning|I tried this on one box handling thousands of mails daily and the results were almost a complete disaster. After four days the box was bogged down with hundreds of old <code>greylist.pl</code> processes.}}

=== postgrey로 그레이 리스팅 설정 개선하기 ===

간단한 {{c|emerge}} 명령으로 개선된 그레이 리스팅 정책 서버를 설치할 수 있습니다: 

{{RootCmd|emerge postgrey}}

<code>postgrey</code>를 설치한 후 {{Path|main.cf}}를 편집해야 합니다. 바꿀 내용은 이미 그레이리스팅한 내용과 거의 정확하게 비슷합니다. 

{{FileBox|filename=main.cf|title=그레이 리스팅 활용|lang=ini|1=
# (Under smtpd_recipient_restrictions add:)
check_sender_access hash:/etc/postfix/sender_access
# (Later on add:)
smtpd_restriction_classes = greylist
greylist = check_policy_service inet:127.0.0.1:10030
}}

{{Note|The Postfix SMTPD_POLICY_README only uses <code>restriction_classes</code> but that does not appear to work.}}

{{Note|If you want to greylist everything instead add <code>check_policy_service inet:127.0.0.1:10030</code> .}}

마지막으로, 서버를 시작하고 적당한 런레벨에 추가하십시오. 

{{RootCmd|/etc/init.d/postgrey start
|rc-update add postgrey default}}

{{Note|Some people like to get their mail fast and thus greylisting is worthless. However if you employ a backup mail server you can safely setup greylisting on that server. My limited experiences tell me that it can stop up to a third of the spam received.}}

== SPF (전송 정책 프레임워크) ==

=== 도입부 ===

SPF allows domain owners to state in their DNS records which IP addressess should be allowed to send mails from their domain. This will prevent spammers from spoofing the <code>Return-Path</code>. 

{{Note|If your ISP blocks incoming traffic on port 25 and relays all mail to you through their own mail server SPF will not work.}}

First domain owners have to create a special <code>TXT</code> DNS record. Then an SPF-enabled MTA can read this and if the mail originates from a server that is not described in the SPF record the mail can be rejected. An example entry could look like this: 

{{CodeBox|title=SPF 레코드 예제|1=
example.com.  IN TXT  "v=spf1 a mx ptr -all"
}}

The <code>-all</code> means to reject all mail by default but allow mail from the <code>A</code>( <code>a</code> ), <code>MX</code>( <code>mx</code> ) and <code>PTR</code>( <code>ptr</code> ) DNS records. For more info consult further resources below. 

{{Note|If you relay outgoing mail through your ISP you will have to add: <code>include:yourisp.com</code> .}}

Spamassassin 3.0 has support for SPF, however it is not enabled by default and the new policy daemon in Postfix supports SPF so let's install SPF support for Postfix. 

{{Note|If you want to use SPF with Spamassassin instead simply <code>emergeÂ dev-perl/Mail-SPF-Query</code> and restart Amavisd-new.}}

=== 준비 ===

First you have to install Postfix 2.1 as described above. When you have fetched the source grab the {{Path|spf.pl}} with: 

{{RootCmd|cp postfix-<version>/examples/smtpd-policy/spf.pl /usr/local/bin/}}

{{Note|The {{Path|spf.pl}} coming with Postfix is slightly buggy so find and uncomment the following line: <code>push @HANDLERS, "sender_permitted_from"; use Mail::SPF::Query;</code> . Furthermore in about line 199 substitute <code>comemnt</code> with <code>comment</code> . Alternatively you can download a [http://spf.pobox.com/postfix-policyd.txt development version] .}}

This Perl script also needs some Perl libraries that are not in portage but it is still quite simple to install them: 

{{RootCmd|emerge Mail-SPF-Query Net-CIDR-Lite Sys-Hostname-Long}}

Now that we have everything in place all we need is to configure Postfix to use this new policy. 

{{FileBox|filename=master.cf|title=SPF 활용|1=
policy-spf  unix  -       n       n       -       -       spawn
   user=nobody argv=/usr/bin/perl /usr/local/bin/spf.pl
}}

Now add the SPF check in {{Path|main.cf}} . Properly configured SPF should do no harm so we could check SPF for all domains: 

{{FileBox|filename=main.cf|title=SPF 활용|1=
# (Under smtpd_recipient_restrictions add:)
check_policy_service unix:private/policy-spf
}}

{{Note|If you're experiencing problems with SPF, e.g. when using <code>fetchmail</code> , you might want to enable SPF for certain domains only.}}

== MySQL을 활용하여 amavisd-new 설정 ==

=== MySQL 설정 ===

{{Note|This has not been tested on versions higher than 2.2. Feedback is welcome :)}}

For large domains the default values you can set in {{Path|amavisd.conf}} might not suit all users. If you configure amavisd-new with MySQL support you can have individual settings for users or groups of users. 

{{Cmd|mysql -u root -p mysql|output=<pre>
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 78 to server version: 4.0.18-log
  
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
</pre>}}

{{Cmd|create database maildb;|prompt=mysql> 
|GRANT INSERT,UPDATE,DELETE,SELECT ON maildb.* TO 'mail'@'localhost' IDENTIFIED BY 'very_secret_password';
|use maildb;}}

Now that the database is created we'll need to create the necessary tables. You can cut and paste the following into the mysql prompt: 

{{CodeBox|title=MySQL 테이블 구성|lang=sql|1=
CREATE TABLE users (
    id         int unsigned NOT NULL auto_increment,
    priority   int          NOT NULL DEFAULT '7',  -- 0 is low priority
    policy_id  int unsigned NOT NULL DEFAULT '1',
    email      varchar(255) NOT NULL,
    fullname   varchar(255) DEFAULT NULL,    -- not used by amavisd-new
    local      char(1),     -- Y/N  (optional field, see note further down)
    PRIMARY KEY (id),
    KEY email (email)
    );
CREATE UNIQUE INDEX users_idx_email ON users(email);
  
# (any e-mail address, external or local, used as senders in wblist)
CREATE TABLE mailaddr (
   id         int unsigned NOT NULL auto_increment,
   priority   int          NOT NULL DEFAULT '7',  -- 0 is low priority
   email      varchar(255) NOT NULL,
   PRIMARY KEY (id),
   KEY email (email)
   );
CREATE UNIQUE INDEX mailaddr_idx_email ON mailaddr(email);
  
# (-- per-recipient whitelist and/or blacklist,
# -- puts sender and recipient in relation wb)
# (white or blacklisted sender)
CREATE TABLE wblist (
   rid        int unsigned NOT NULL,     -- recipient: users.id
   sid        int unsigned NOT NULL,     -- sender:    mailaddr.id
   wb         char(1) NOT NULL, -- W or Y / B or N / space=neutral
   PRIMARY KEY (rid,sid)
   );
  
CREATE TABLE policy (
   id               int unsigned NOT NULL auto_increment,
   policy_name      varchar(32),     -- not used by amavisd-new
   virus_lover          char(1),     -- Y/N
   spam_lover           char(1),     -- Y/N  (optional field)
   banned_files_lover   char(1),     -- Y/N  (optional field)
   bad_header_lover     char(1),     -- Y/N  (optional field)
   bypass_virus_checks  char(1),     -- Y/N
   bypass_spam_checks   char(1),     -- Y/N
   bypass_banned_checks char(1),     -- Y/N  (optional field)
   bypass_header_checks char(1),     -- Y/N (optional field)
   spam_modifies_subj   char(1),     -- Y/N (optional field)
   spam_quarantine_to   varchar(64) DEFAULT NULL, -- (optional field)
   spam_tag_level  float,  -- higher score inserts spam info headers
   spam_tag2_level float DEFAULT NULL,  -- higher score inserts
               -- 'declared spam' info header fields
   spam_kill_level float,  -- higher score activates evasive actions, e.g.
               -- reject/drop, quarantine, ...
               -- (subject to final_spam_destiny setting)
   PRIMARY KEY (id)
  );
}}

{{Note|If you have problems using copy/paste you might have to copy this somewhere else and clean out the unneeded characters.}}

{{Note|Lookups trying to match email are done with raw (rfc2821-unquoted and unbracketed) addresses as a key, i.e.: <code>John "Funny" Smith@example.com</code>}}

{{Note|Lookups are performed in the following order: <code>SQL</code> , <code>LDAP</code> , <code>hash</code> , <code>ACL</code> , <code>regexp</code> , <code>constant</code> . The first that returns a definitive answer (not <code>undef/NULL</code> ) stops the search.}}

If you wish to use whitelisting and blacklisting you must add the sender and receiver to <code>mailadr</code> after which you create the relation between the two e-mail addresses in <code>wblist</code> and state if it is whitelisting ( <code>W</code> ) or blacklisting ( <code>B</code> ). 

Now that we have created the tables let's insert a test user and a test policy: 

{{CodeBox|title=test 사용자 및 test 정책 만들기|lang=sql|1=
INSERT INTO users
   SET
      id         =1,
      priority   =9,
      policy_id  =1,
      email      ="johndoe@example.com",
      fullname   ="John Doe",
      local      ="Y";
  
INSERT INTO policy
   SET
      id                     =1,
      policy_name            ="Test policy 1",
      virus_lover            ="N",
      spam_lover             ="N",
      banned_files_lover     ="N",
      bad_header_lover       ="N",
      bypass_virus_checks    ="N",
      bypass_spam_checks     ="N",
      bypass_banned_checks   ="N",
      bypass_header_checks   ="N",
      spam_modifies_subj     ="N",
      spam_quarantine_to     =NULL,
      spam_tag_level         =-50.0,
      spam_tag2_level        =7.0,
      spam_kill_level        =10.0;
}}

{{Note|Copy this to somewhere else and adjust to suit your own environment.}}

{{Note|<code>local</code> should be set to<code>Y</code> otherwise the mail will not be scanned for spam.}}

This inserts a test user and a Test policy. Adjust these examples to fit your needs. Further explanation of the configuration names can be found in {{Path|amavisd.conf}} . 

=== MySQL을 활용하여 amavisd 설정 ===

Now that MySQL is ready we need to tell amavis to use it: 

{{FileBox|filename=amavisd.conf|title=MySQL을 사용하도록 업데이트|lang=ini|1=
@lookup_sql_dsn =
   ( ['DBI:mysql:maildb:host1', 'mail', 'very_secret_password']  );
  
# (For clarity uncomment the default)
$sql_select_policy = 'SELECT *,users.id FROM users,policy'.
   ' WHERE (users.policy_id=policy.id) AND (users.email IN (%k))'.
   ' ORDER BY users.priority DESC';
  
# (If you want sender white/blacklisting)
   $sql_select_white_black_list = 'SELECT wb FROM wblist,mailaddr'.
     ' WHERE (wblist.rid=?) AND (wblist.sid=mailaddr.id)'.
     '   AND (mailaddr.email IN (%k))'.
     ' ORDER BY mailaddr.priority DESC';
</pre>
}}

== MySQL을 활용하도록 스팸 어쌔신 설정 ==

As of Spamassassin 3.0 it is possible to store the Bayes and AWL data in a MySQL database. We will use MySQL as the backend as it can generally outperform other databases. Also, using MySQL for both sets of data makes system management much easier. Here I will show how to easily accomplish this. 

First start out by creating the new MySQL user and then create the needed tables. 

{{RootCmd|mysql -u root -p mysql|output=<pre>
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 78 to server version: 4.0.18-log
  
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
</pre>}}

{{Cmd|create database dbname;|prompt=mysql> 
|GRANT INSERT,UPDATE,DELETE,SELECT ON dbname.* TO 'dbuser'@'localhost' IDENTIFIED BY 'another_very_secret_password';
|use dbname;}}

Now that the database is created we'll create the necessary tables. You can cut and paste the following into the mysql prompt: 

{{CodeBox|title=MySQL 테이블 구성|lang=sql|1=
      CREATE TABLE bayes_expire (
          id                    int(11)         NOT NULL default '0',
          runtime               int(11)         NOT NULL default '0',
          KEY bayes_expire_idx1 (id)
          ) TYPE=MyISAM;
  
      CREATE TABLE bayes_global_vars (
          variable              varchar(30)     NOT NULL default '',
          value                 varchar(200)    NOT NULL default '',
          PRIMARY KEY           (variable)
          ) TYPE=MyISAM;
  
      INSERT INTO bayes_global_vars VALUES ('VERSION','3');
  
      CREATE TABLE bayes_seen (
          id                    int(11)         NOT NULL default '0',
          msgid                 varchar(200) binary NOT NULL default '',
          flag                  char(1)         NOT NULL default '',
          PRIMARY KEY           (id,msgid)
          ) TYPE=MyISAM;
  
      CREATE TABLE bayes_token (
          id                    int(11)         NOT NULL default '0',
          token                 char(5)         NOT NULL default '',
          spam_count            int(11)         NOT NULL default '0',
          ham_count             int(11)         NOT NULL default '0',
          atime                 int(11)         NOT NULL default '0',
          PRIMARY KEY           (id, token),
          INDEX (id, atime)
          ) TYPE=MyISAM;
  
      CREATE TABLE bayes_vars (
          id                    int(11)         NOT NULL AUTO_INCREMENT,
          username              varchar(200)    NOT NULL default '',
          spam_count            int(11)         NOT NULL default '0',
          ham_count             int(11)         NOT NULL default '0',
          token_count           int(11)         NOT NULL default '0',
          last_expire           int(11)         NOT NULL default '0',
          last_atime_delta      int(11)         NOT NULL default '0',
          last_expire_reduce    int(11)         NOT NULL default '0',
          oldest_token_age      int(11)         NOT NULL default '2147483647',
          newest_token_age      int(11)         NOT NULL default '0',
          PRIMARY KEY           (id),
          UNIQUE bayes_vars_idx1 (username)
          ) TYPE=MyISAM;
  
      CREATE TABLE awl (
          username              varchar(100)    NOT NULL default '',
          email                 varchar(200)    NOT NULL default '',
          ip                    varchar(10)     NOT NULL default '',
          count                 int(11)         default '0',
          totscore              float           default '0',
          PRIMARY KEY           (username,email,ip)
          ) TYPE=MyISAM;
}}

{{Important|The <code>INSERT</code> line is needed otherwise Spamassassin will not work.}}

{{Note|This is also available in the source tarball in the files {{Path|awl_mysql.sql}} and {{Path|bayes_mysql.sql}} .}}

=== MySQL 백엔드를 사용하도록 스팸 어쌔신 설정 ===

DBM 데이터베이스에서 오래된 Bayes 데이터베이스를 보유하고 있고 다음 절차를 통해 유지하려면: 

{{RootCmd|su - amavis}}

{{Cmd|sa-learn --sync
|sa-learn --backup > backup.txt
|sa-learn --restore backup.txt}}

{{Note|MySQL 데이터베이스와 {{Path|secrets.cf}} 설정 파일을 업데이트 한 후 마지막 과정을 수행해야 함을 참고하십시오.}}

이제 필요한 정보를 스팸 어쌔신에 제공하십시오: 

{{FileBox|filename=/etc/mail/spamassassin/secrets.cf|1=
# (Tell Spamassassin to use MySQL for bayes data)
bayes_store_module              Mail::SpamAssassin::BayesStore::SQL
bayes_sql_dsn                   DBI:mysql:sa_bayes:localhost:3306
bayes_sql_username              db_name
bayes_sql_password              another_very_secret_password
  
# (Tell Spamassassin to use MySQL for AWL data)
auto_whitelist_factory          Mail::SpamAssassin::SQLBasedAddrList
user_awl_dsn                    DBI:mysql:sa_bayes:localhost:3306
user_awl_sql_username           db_name
user_awl_sql_password           another_very_secret_password
}}

다음 보안 수준을 만족스러운 수준으로 끌어올리기 위해 권한을 바꾸십시오: 

{{RootCmd|chmod 400 /etc/mail/spamassassin/secrets.cf}}

{{Note|To create a very secret password use <code>emerge app-admin/makepasswd</code> and <code>makepasswd -chars{{=}}8</code>}}

이제 해야 할 일은 {{c|/etc/init.d/amavisd restart}} 명령의 실행입니다.

== 문제 해결 ==

=== Amavisd-new ===

Amavisd-new 문제를 해결하려면 {{c|/etc/init.d/amavisd stop}} 명령으로 서비스를 멈추고 {{c|amavisd debug}} 명령으로 전면 실행하여 출력 내용에 이상한 점이 없는지 관찰하십시오. 

=== 스팸 어쌔신 ===

스팸 어쌔신의 문제를 찾을 때 {{c|spamassassin -D < mail}} 명령으로 전자메일을 걸러볼 수 있습니다. 헤더에 문제가 없는지 확인하려면 다른 머신에서 IMAP으로 메일을 가져올 수 있습니다. 

{{Note| 문제를 찾아야 한다면 <code>amavis</code> 사용자의 로그인 쉘을 {{Path|/etc/passwd}}에서 {{Path|/bin/bash}} 로 바꿔서 로그인할 수 있게 해야 합니다.}}

If you want you can make get the same information and more with Amavisd-new using <code>amavisd debug-sa</code> . 

=== 설치 후 작업 반복 처리 ===

Some of the activities mentioned in this guide will need to be repeated after upgrades. For instance, the <code>chown -R amavis:mailusers</code> in the section on [[#doc_chap6]] will need to be repeated after every update of amavisd-new. 

Luckily, Gentoo provides you with the means to perform these steps automatically. In [http://www.gentoo.org//doc/en/handbook/handbook-amd64.xml?part=3&chap=6#doc_chap3 Hooking in the Emerge Process] , the Gentoo Handbook explains how to execute tasks after installations of a particular package, like so: 

{{CodeBox|title=언급한 chown을 실행하는 bashrc 코드 일부 예제|lang=bash|1=
if [ "${PN}" == "amavisd-new" ] &&
   [ "${EBUILD_PHASE}" == "postinst" ]; 
then
  chown -R amavis:mailusers /var/amavis/.maildir
fi
}}

=== 도움 받기 ===

If you need help a good place to go is the amavis-user mailing list. Before postting a question try searching the [http://marc.theaimsgroup.com/?l=amavis-user Amavis User mailing list archives] . If you find no answer here you can subscribe to the [https://lists.sourceforge.net/lists/listinfo/amavis-user Amavis User mailing list] 

If your question is specific to SpamAssassin, DCC, Razor, or Postfix, please refer to their respective home pages listed below. 

== 자료 ==

=== 더 많은 정보 ===

* [http://www.ijs.si/software/amavisd/INSTALL Amavisd-new INSTALL] 
* [http://www.ijs.si/software/amavisd/README.postfix Amavisd-new Postfix README] 
* [http://www.ijs.si/software/amavisd/amavisd-new-docs.html#pbanks Amavisd-new Policy bank documentation] 
* [http://spamassassin.apache.org/full/3.0.x/dist/sql/README Spamassassin SQL README] 
* [http://www.greylisting.org Greylisting] 
* [http://www.postfix.org/FILTER_README.html Postfix SMTPD_POLICY_README] 
* [http://www.unixwiz.net/techtips/postfix-HELO.html Blocking spammers with Postfix HELO controls] 
* [http://www.linuxjournal.com/article.php?sid=7327 SPF Overview] 
* [http://jimsun.linxnet.com/misc/postfix-anti-UCE.txt Jim Seymour's Postfix Anti-UCE Cheat Sheet] 

=== 일반 자료 ===

* [http://www.spamassassin.org Spamassassin]
* [http://www.ijs.si/software/amavisd/ Amavisd-new]
* [http://www.ijs.si/software/amavisd/amavisd-new-docs.html Amavisd-new documentation bits and pieces] 
* [http://razor.sourceforge.net/ Vipuls's Razor]
* [http://pyzor.sourceforge.net/ Pyzor]
* [http://www.rhyolite.com/anti-spam/dcc/ Distributed Checksum Clearinghouse] 
* [http://www.renaissoft.com/projects/maia/ Maia Mailguard] 

=== 다른 설명서 ===

* [http://www.flakshack.com/anti-spam/ Fairly-Secure Anti-SPAM Gateway Using OpenBSD, Postfix, Amavisd-new, SpamAssassin, Razor and DCC] 

[[Category:Server and Security]] {{Migrated|originalauthors=Sune Kloppenborg Jeppesen, Jens Hilligs, Joshua Saddler}}
