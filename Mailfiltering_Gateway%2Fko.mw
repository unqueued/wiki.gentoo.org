<languages />


{{Metadata|abstract=이 안내서는 Postfix의 스팸 차단 기능에 대한 과정별 안내서입니다. 이 과정에서 Amavisd-new, 스팸 어쌔신, ClamAV, 그레이 리스팅, SPF를 활용합니다.}}

이 안내서는 Postfix의 스팸 차단 기능에 대한 과정별 안내서입니다. 이 과정에서 Amavisd-new, 스팸 어쌔신, ClamAV, 그레이 리스팅, SPF를 활용합니다.

== 도입부 ==

이 안내서에서는 스팸 및 바이러스를 걸러내는 메일 게이트웨이를 설치하는 방법을 과정별로 설명합니다. 단일 서버 솔루션에 적용할 때 꽤 단순합니다. 

=== 대략적인 그림 ===

이 문서는 다중 도메인에 대한 스팸 차단 메일 게이트웨이 설정 방법을 설명합니다. 이 서버는 메일 계정을 실제로 보유하고 있는 메일 서버(마이크로소프트 익스체인지 또는 로터스 노츠 등)의 앞단에서 실행합니다. 

이 설치 과정에서 적절한 보안 레코드와 알아보기 쉬운 설정 파일을 갖춘 프로그램을 선택합니다. 전자메일 MTA로는 적절한 보안레코드를 보유하고 있으며 설정을 올바르게 처리하는데 상당히 쉬운 postfix를 활용합니다. Postfix는 메일 수신에 보통 25번 포트로 감청합니다. 이 과정에서 Amavisd-new에 10024번 포트를 통해 전달합니다. Amavisd-new 는 다음 메일 서버로 메일을 전달할 10025번 포트를 통해 Postfix로 메일을 다시 되돌리기  전에 다양한 필터를 거칩니다. 

Amavisd-new는 내용 기반 차단 프레임워크이며 바이러스 및 스팸을 차단하는 도우미 프로그램을 제대로 동작하게 합니다. 이 설치 과정에서 바이러스를 차단하는 ClamAV 그리고 스팸을 차단하는 스팸 어쌔신을 두가지 도우미 프로그램으로 활용하겠습니다. 스팸 어쌔신 자체는 내용 기반 차단 프레임워크 계층 기능을 잇따라 수행하며, Vipul's Razor2와 DCC 도우미 프로그램을 동작합니다. 

RBL 및 기타 스팸 처리 기능 프로그램과는 달리 스팸 어쌔신은 단순히 일회 시험만을 기반으로 하는 전자메일 수용, 거절 기능만을 수행하지 않습니다. 내부 시험과 외부 도우미 프로그램을 통해 거쳐간 모든 전자메일을 기반으로 스팸 가중치를 계산합니다. 이 가중치는 다음 시험 과정을 기반으로 합니다: 

* 베이지안 필터링
* 정규 표현식에 기반한 정적 규칙
* 분산 협업 네트워크
** RBLs
** Razor2
** Pyzor
** DCC

안내서의 첫부분(1~4장)에서는 메일 차단 게이트웨이의 기본 설정을 설명합니다. 다음 장에서는 이전 장과 관계없이 제각각 구현할 수 있습니다. 아래 언급 한 장에서는 다음 방법에 대해 설명합니다: 

* 베이지언 필터 숙지 동작과 거짓 양성 메일 배달을 처리할 특수 IMAP 폴더 설정
* Postfix로 그레이리스팅 설정
* Amavisd-new에서 사용자 설정을 담을 MySQL 백엔드 사용 설정
* Spamassassin에서 AWL과 Bayes 데이터를 담을 MySQL 백엔드 사용 설정

{{Note|IMAP 폴더는 maildir 형식을 사용합니다. 여러개의 파일로 나눈 각각의 메일은 처리를 더욱 단순하게 합니다. mbox를 사용한다면 maildir을 시도해볼만한 대상으로 추천합니다. 아직 maildir을 사용하지 않는다면 {{c|emerge courier-imap}} 명령으로 필요한 도구를 이머지하십시오.}}

계획한 다섯번째 부분에서는 성능과 관련있는 내용 그리고 알고 싶은 부분(루트를 전환한 환경에서 실행, postfix 제한, 등)에 대한 다양한 실마리를 제공합니다. 

{{Note|서드파티의 기능을 가져오는 작업은 위험을 동반하지 않습니다. 이 서드파티의 기능을 알고 믿을 수 있어야합니다. 이 설정 과정에서 바이러스 메일의 격리 결정은 단일 서드 파티 기능을 기반으로 합니다. 스팸 어쌔신의 가중치 처리 시스템을 활용하면, 아마도 스팸 어쌔신 자체 정적 규칙을 제외하고 단일 권한으로는 스팸 메일을 차단할 규칙을 결정하지 않을 것입니다.}}

{{Warning|MTA 수준에서 스팸 메일을 거절할 때 여러분이 사용하려는 RBL을 선택하는 경우 신중을 기해야 합니다. 예를 들면, SpamCop은 MTA 수준에서 활용하기엔 썩 좋지 않은 RBL인데 때로는 목록을 통한 처리가 너무 적극적이어서 잘못된 양성 반응이 나올 수 있기 떄문입니다. [http://www.geekcomix.com/cgi-bin/classnotes/wiki.pl?UNIX03/Realtime_Blackhole_Lists_Are_Bad 실시간 블랙홀 리스트는 별로다] 와 [http://theory.whirlycott.com/~phil/antispam/rbl-bad/rbl-bad.html The Spam Problem: Moving Beyond RBLs]에서 나오는 내용을 살펴보십시오.}}

=== 준비 ===

설치한 Postfix가 잘 동작하는지 확인하기 전에 메일을 주고 받을 수 있는 네트워크에 백엔드 메일 서버가 필요합니다. Postfix를 설정해본 경험이 없다면 한번에 모든 부분을 설정해야 한다고 할 경우 상당히 복잡한 느낌이 바로 찾아올 것입니다. 도움이 필요하다면 젠투 위키에 있는 [[Complete_Virtual_Mail_Server/ko|가상 메일 서버 완벽 안내서]] 를 참고하십시오 

== 필요한 프로그램 설치 ==

가장 중요한 Amavisd-new, Spamassassin, ClamAV 프로그램 설치로 시작하겠습니다. 

{{RootCmd|echo "mail-filter/amavisd-new spamassassin clamav" >> /etc/portage/package.use}}
{{RootCmd|emerge amavisd-new}}
{{RootCmd|freshclam}}

{{Note|앞서 언급한대로 여러분은 <code>postfix</code> 인스턴스를 머신에서 실행해야하합니다. 기본적으로 이 부분에서는 {{c|emerge postfix}} ''와'' postfix 동작 방식의 기본적인 이해 내용의 선 이상을 넘지 않습니다.}}

=== DNS 설정 ===

{{Note|게이트웨이 서버를 설정하지 않았지만 동일한 서버에 메일함을 구축했다면, MX 레코드만 만들면 됩니다.}}

프로그램을 이머지하는 동안 다른 쉘을 띄우시고 필요한 DNS 레코드를 만드십시오. 

메일 게이트웨이에 <code>MX</code> 레코드를 우선 생성하고, 다음 목적지의 <code>A</code> 레코드를 생성하십시오. 

{{CodeBox|title=DNS 설정|1=
(Create a MX record for the gateway server)
                MX      10      mailgateway.mydomain.tld.
(Create an A record for the gateway server)
mailgateway     A       mgw.ip.add.here
(Create an A record for the next hop mail server)
mail            A       ms.ip.add.here
}}


{{Note|일부 ADSL 서비스 제공자는 25번 포트를 차단하고, 서비스에서 제공하는 서버로 메일을 전달하라고 합니다. 보통 여러분은 <code>MX 20 backup-mx.some-isp.tld</code>와 같이 두번째 MX 레코드를 만들어야합니다.}}


=== 방화벽 개방 ===

일반 메일 흐름을 허용하려면 서버 통신을 확인하는 네트워크에서 몇가지 서비스를 방화벽을 뚫어 허용해야합니다. 

{| class="wikitable" style="text-align: left;" 
|- 
! 프로그램
! 프로토콜
! 포트번호
|- 
| DCC
| UDP
| 6277
|- 
| Razor(나가는 ping)
| TCP
| 7
|- 
| Razor
| TCP
| 2703
|-
|}

Razor 은 어떤 서버가 가장 가까운 곳에 있는지 찾을 때 ping을 활용합니다. 

=== Postfix 설정 ===

우선 <code>postfix</code>에게 포트 10025번에서의 감청을 지시하고, 포트 25번에서 감청중인  <code>postfix</code> 인스턴스에 적용한 상당부분의 제약을 제거해야합니다. 또한 10025 포트는 로컬 연결만 기다립니다. 이 조건을 충족하기 위해 {{Path|/etc/postfix/master.cf}}의 마지막 부분에 다음 내용을 추가해야합니다.  

{{CodeBox|title=master.cf 파일 수정|1=
smtp-amavis     unix -        -       n     -       2  smtp
  -o smtp_data_done_timeout=1200
  -o smtp_send_xforward_command=yes
#Equivalently when using lmtp:
#lmtp-amavis    unix -        -       n     -       2  lmtp
#   -o lmtp_data_done_timeout=1200
#   -o lmtp_send_xforward_command=yes
  
127.0.0.1:10025 inet n        -       n     -       -  smtpd
  -o content_filter=
  -o local_recipient_maps=
  -o relay_recipient_maps=
  -o smtpd_restriction_classes=
  -o smtpd_client_restrictions=
  -o smtpd_helo_restrictions=
  -o smtpd_sender_restrictions=
  -o smtpd_recipient_restrictions=permit_mynetworks,reject
  -o mynetworks=127.0.0.0/8
  -o strict_rfc821_envelopes=yes
  -o smtpd_error_sleep_time=0
  -o smtpd_soft_error_limit=1001
  -o smtpd_hard_error_limit=1000
  
#If you want to use proxy filtering instead
#smtp            inet n         -       n      -       8 smtpd
# -o smtpd_proxy_filter=127.0.0.1:10024
# -o smtpd_client_connection_count_limit=4
#If you don't want to scan outgoing mail use this
#10.0.0.2:smtp   inet n         -       n       -      - smtpd
#-o content_filter=
}}

{{Note|<code>smtp-amavis</code> 줄에서는 언제든 실행할 이들 두 프로세스의 최대 갯수를 정의합나다. 더 큰 동시성 설정값이 필요하다면 이 숫자값이 요구조건에 맞습니다. {{Path|amavisd.conf}} 에 있는 <code>$max_servers</code>의 숫자값과 일치시켜야 함을 기억하십시오. Keep in mind that <code>amavisd-new</code> 는 메모리를 중점적으로 활용하며 <code>amavisd-new</code> 프로세스를 상당히 많이 띄우면 메모리가 쉽게 고갈되고 스왑영역을 많이 소모하며, 눈에 띄게 성능이 줄어드는 결과를 초래합니다.}}

{{Note|프로세스에 도달하기 전에 스팸을 차단하려 한다면 차단 기법 중 Before-Queue(프록시) 기법을 활용할 수 있습니다. 언급한 세 줄의 주석 표시를 없애면 {{Path|main.cf}} 의 <code>content_filter{{=}}</code>변수를 설정해야합니다. amavisd 인스턴스의 수 만큼 동시 연결 수를 제한하므로 상당량의 트래픽을 보유하는 서버에서의 설정은 추천하지 않습니다.}}

{{Warning|Before-Queue(프록시) 방식은 아직 제대로 시험해보지 않았습니다.}}

{{Note | 어떤 이유에서든 이 머신에서 메일을 보내고 검사처리를 하지 않으려면, 마지막 두 줄의 주석 표시를 제거하여 다른 postfix 인스턴스를 추가하고 적당한 IP로 바꾸십시오.}}

{{Path|master.cf}} 파일은 postfix master 프로그램에 개별 postfix 프로세스를 실행하는 방식을 지시합니다. 더 많은 내용은 {{c|man 8 master}} 명령을 참고하십시오. 

다음 10024 포트에서 대기중인 <code>amavisd-new</code>로 오는 메일을 걸러내기 위해 <code>postfix</code> 인스턴스를 25번 포트에서 대기하도록 해야합니다. 

또한 메일의 다음 홉 대상을 설정해야합니다. postfix에게 모든 메일이 외부 컨텐트 필터를 거치도록하고, postfix가 메일을 어디로 전달할 지 알도록 명시한 경로 지정을 활성화하십시오. 

{{FileBox|filename=/etc/postfix/main.cf|lang=ini|1=
biff = no
empty_address_recipient = MAILER-DAEMON
queue_minfree = 120000000
  
content_filter = smtp-amavis:[127.0.0.1]:10024
#Equivalently when using lmtp:
#content_filter = lmtp-amavis:[127.0.0.1]:10024
  
# TRANSPORT MAP
#
# Insert text from sample-transport.cf if you need explicit routing.
transport_maps = hash:/etc/postfix/transport
  
relay_domains = $transport_maps
}}

postfix는 {{Path|main.cf}}에 설정할 많은 옵션이 있습니다. 파일에 대한 더 많은 정보는 {{c|man 5 postconf}} 명령 또는 동일한 내용을 지닌 [http://www.postfix.org/postconf.5.html Postfix 설정 매개변수] 온라인 문서를 참고하십시오. 

{{Path|transport}} 파일의 형식은 일반 postfix 해시 파일입니다. 왼편에 있는 도메인에 보내는 메일은 오른편에 있는 목적 대상으로 전달합니다. 

{{FileBox|filename=/etc/postfix/transport|1=
mydomain.tld                          smtp:mail.mydomain.tld
}}

파일을 편집하고 나면 {{c|postmap}} 명령을 실행해야합니다. postfix는 이 파일을 실제로 읽지 않기 때문에 {{c|postmap /etc/postfix/transport}} 명령을 통해 적당한 형식으로 편집한 파일을 변환해야합니다. 이 명령은 {{Path|/etc/postfix/transport.db}} 파일을 만듭니다. postfix에서 바뀐 설정을 자동으로 가져오므로 postfix를 통해 설정을 다시 불러올 필요가 없습니다. 

{{Note|다음 홉에 위치한 메일 서버가 표준 SMTP 포트 25번에서 대기중이 아니라면, postfix에게 <code>smtp:mail.mydomain.tld:25000</code>처럼 지정 포트 번호를 사용하도록 지시할 수 있습니다.}}

처음 메일을 보냈을때 메시지 결과가 되돌아온다면, 어딘가에 설정 오류를 안고 있을지도 모릅니다. 설정 문제를 해결하는 동안 <code>soft_bounce</code>를 임시로 활성화 하십시오. 이 옵션을 설정하면 postfix 가 전송 오류 때문에 되돌아오는 메일을 일시적 오류에 의한 반송으로 간주합니다. <code>soft_bounce</code> 옵션을 비활성화했거나 제거할 때까지는 메일 큐에서 대기중인 메일을 그대로 둡니다. 

{{RootCmd|postconf -e "soft_bounce {{=}} yes"
|/etc/init.d/postfix reload}}

동작하는 설정을 만들어 마무리했다면 <code>soft_bounce</code> 옵션을 비활성화하거나 제거하시고 postfix를 재가동하십시오.

=== Amavisd-new 설정 ===

Amavisd-new는 모든 필터링을 관리하고 여러가지 제각각의 기술을 쉽게 연계할 수 있도록 하는데 사용하빈다. 메일 메시지를 받을 때 메일을 추출하고, 몇가지 개별 필터로 걸러내며, 화이트/블랙 리스팅 처리한 후 여러가지 바이러스 검색기로 메일을 걸러낸 다음 스팸 어쌔신을 활용하여 메일을 최종적으로 걸러냅니다. 

Amavisd-new 자체에는 몇가지 추가 기능이 있습니다: 

* 위험한 첨부 파일을 식별하고 이 파일을 처리할 정책을 보유합니다
* 사용자별, 도메인 별 시스템 범위 정책:
** 화이트리스트
** 블랙리스트
** 스팸 가중치 한계치 설정
** 바이러스 및 스팸 처리 정책

<code>postfix</code> 와 <code>freshclam</code> 와는 별개로 <code>amavis</code> 사용자로 모든 프로그램을 실행하겠습니다. 

{{Path|/etc/amavisd.conf}}에서 다음 부분을 편집하십시오  

{{FileBox|filename=/etc/amavisd.conf|lang=ini|1=
# (Insert the domains to be scanned)
$mydomain = 'example.com';
# (Bind only to loopback interface)
$inet_socket_bind = '127.0.0.1';
# (Forward to Postfix on port 10025)
$forward_method = 'smtp:127.0.0.1:10025';
$notify_method = $forward_method;
# (Define the account to send virus alert emails)
$virus_admin = "virusalert\@$mydomain";
# (Always add spam headers)
$sa_tag_level_deflt  = -100;
# (Add spam detected header aka X-Spam-Status: Yes)
$sa_tag2_level_deflt = 5;
# (Trigger evasive action at this spam level)
$sa_kill_level_deflt = $sa_tag2_level_deflt;
# (Do not send delivery status notification to sender.  It does not affect
# delivery of spam to recipient. To do that, use the kill_level)
$sa_dsn_cutoff_level = 10;
# Don't bounce messages left and right, quarantine
# instead
$final_virus_destiny      = D_DISCARD;  # (defaults to D_DISCARD)
$final_banned_destiny     = D_DISCARD;  # (defaults to D_BOUNCE)
$final_spam_destiny       = D_DISCARD;  # (defaults to D_BOUNCE)
}}

{{Note| <code>$sa_tag2_level_deflt {{=}} 5;</code> 줄에서 스팸 어쌔신 스팸 가중치를 5로 설정했습니다. 가중치 값이 좀 낮은 것 같습니다. 보셨을지도 모르겠지만 Amavisd-new의 기본값은 <code>6.3</code>입니다. 메일 폴더에서 단일 스팸 메일을 보고 싶지 않다면 <code>5</code> 값으로 설정하지만, 거짓 양성 처리 결과를 다루기 싫다면 <code>6.3</code>로 설정하십시오.}}

사용자에게 배달을 원치 않는 바이러스 메일를 보관할 격리 디렉터리를 만드십시오. 

{{RootCmd|mkdir /var/amavis/virusmails
|chown amavis:amavis /var/amavis/virusmails
|chmod 750 /var/amavis/virusmails}}

{{Note|Amavisd-new 에서는 정책 뱅크를 활용한 잘 다듬어놓은 정책 설정을 제공합니다.}}

=== ClamAV 설정 ===

바이러스 검사기로 상업용 프로그램과 거의 비슷하게 양호한 감지율을 보이는 ClamAV를 활용하겠습니다. 상당히 빠르고 게다가 오픈소스 소프트웨어입니다. 기록 파일을 좋아하니 <code>syslog</code> 에게 <code>clamd</code> 로그를 만들게 하고 로그 내용을 자세하게 뽑도록 하겠습니다. <code>clamd</code>를 <code>root</code> 계정으로 실행하지 마십시오. 이제 {{Path|/etc/clamd.conf}} 파일을 편집하겠습니다.  

{{FileBox|filename=/etc/clamd.conf|1=
# (Verbose logging with syslog)
LogSyslog
LogVerbose
LogFacility LOG_MAIL
# (Change pid file location)
PidFile /var/run/amavis/clamd.pid
# (Set the clamav socket)
LocalSocket /var/amavis/clamd
# (Close the connection when this limit is exceeded)
StreamMaxLength 10M
# (Don't run clamd as root)
User amavis
# (Newer versions require you to uncomment this)
ScanMail
ScanArchive
}}

{{Note | ClamAV를 동작하게 하는 예제의 지시 구문 제거를 기억하십시오.}}

ClamAV는 바이러스 서명 업데이트를 주기적으로 확인하는 <code>freshclam</code> 데몬을 포함하고 있습니다. <code>freshclam</code>가 바이러스 서명을 하루에 두번 업데이트 하게 하는 대신 매 두시간마다 업데이트하게 하도록 하겠습니다. 

{{FileBox|filename=/etc/freshclam.conf|1=
# (Syslog logging)
LogSyslog
# (Verbose logging)
LogVerbose
# (Explicitly drop root privileges)
DatabaseOwner clamav
# (Check for updates every two hours. That is the official recommendation)
Checks 12
# (Use the mirror closest to you. Replace XY with your country code)
DatabaseMirror db.XY.clamav.net
}}

{{Path|/etc/conf.d/clamd}}를 수정하여 초기화 스크립트로 <code>clamd</code>와 <code>freshclam</code>를 시작하십시오. 

{{FileBox|filenam=/etc/conf.d/clamd|lang=bash|1=
START_CLAMD=yes
FRESHCLAM_OPTS="-d"
}}

마지막으로 {{Path|amavisd.conf}} 파일에서 새 소켓 위치 값으로 바꾸십시오. 

{{FileBox|filename=/etc/amavisd.conf|lang=bash|1=
# (Uncomment the clamav scanner and modify socket location)
['ClamAV-clamd',
\&ask_daemon, ["CONTSCAN {}\n", "/var/amavis/clamd"],
  qr/\bOK$/, qr/\bFOUND$/,
  qr/^.*?: (?!Infected Archive)(.*) FOUND$/ ],
}}

{{Warning|무얼 하고 있는지 알기 전까지는 <code>$unix_socketname</code> 값을 수정하지 마십시오.}}

=== Vipul's Razor 설정 ===

Razor2는 협업 분산 스팸 검사합 네트워크입니다. {{c|emerge razor}} 명령으로 설치하고 필요한 설정 파일을 만드십시오. <code>amavis</code> 사용자로 {{c|su - amavis}} 다음 <code>razor-admin -create</code>를 입력하여 실행하십시오. 

{{RootCmd|emerge razor}}

{{RootCmd|su - amavis -s /bin/bash}}

{{Cmd|razor-admin -create
|exit}}

=== 분산 검사합 정리 저장소(Distributed Checksum Clearinghouse : dcc) 설정 ===

Razor2와 같이 dcc는 협업 분산 스팸 검사합 네트워크입니다. 이 프로그램의 동작 개념은 제각각의 메일을 식별하도록 주어진 메일의 여러 수신자를 퍼지 체크섬을 통해 계수하는 것입니다. 

{{RootCmd|emerge dcc}}

=== Spamassassin 설정 ===

Amavis는 스팸 어쌔신 펄 라이브러리를 바로 활용하므로 서비스를 시작할 필요가 없습니다. 또한 {{Path|/etc/mail/spamassassin/local.cf}}에 일부 스팸 어쌔신 설정을 넣고 {{Path|/etc/amavisd.conf}} 의 옵션을 덮어쓰므로 설정상 혼동을 유발합니다. 

{{FileBox|filename=/etc/mail/spamassassin/local.cf|1=
# Enable the Bayes system
use_bayes               1
  
# Enable all network checks
skip_rbl_checks         0
  
# Mail using languages used in these country codes will not be marked
# as being possibly spam in a foreign language.
# - danish english norwegian swedish
ok_languages            da en no sv
  
# Mail using locales used in these country codes will not be marked
# as being possibly spam in a foreign language.
ok_locales              en
  
# Use a sensible bayes path
bayes_path              /var/amavis/.spamassassin/bayes
}}


{{Note|스팸 어쌔신 3.1에서는 {{Path|v310.pre}}의 다음 줄 주석을 해제하여 DCC, Razor2를 활성화해야합니다.}}

{{Note|You can find inspiration for your {{Path|local.cf}} file by trying the [http://www.yrex.com/spam/spamconfig.php SpamAssassin Configuration Generator] .}}

{{Note|<code>ok_languages</code> 와<code>ok_locales</code> 값을 바꾸셔도 좋습니다 .}}

== 모든 바람직한 규칙에는 마찬가지로 바람직한 예외가 있습니다 ==

Once mail really starts passing through this mail gateway you will probably discover that the above setup is not perfect. Maybe some of your customers like to receive mails that others wouldn't. You can whitelist/blacklist envelope senders quite easily. Uncomment the following line in {{Path|amavisd.conf}} . 

{{FileBox|filename=amavisd.conf|title=사이트 범위 가중치 부여 처리|lang=bash|1=
read_hash("/var/amavis/sender_scores_sitewide"),
}}

{{Path|sender_scores_sitewide}} 파일에는 완전한 전자메일 주소를 넣거나 도메인 부분만 넣고 양/음 가중치를 표기하여 스팸 가중치를 추가할 수 있습니다. 

{{FileBox|filename=whitelist_sender|title=예제|1=
# (Whitelist all emails from the specific email address)
postmaster@example.net                -3.0
# (Whitelist all emails from the example.net excluding subdomains)
.example.net                          1.0
}}


{{Note| 더 많은 예제를 보려면 {{Path|/etc/amavisd.conf}} 파일을 살펴보십시오.}}

{{Note|{{Path|amavisd.conf}} 밖에 이 주소를 넣으면 깔끔하고 안전한 해결책이 될 수있습니다.}}

{{Note|Alternatively it can be done in Spamassassin's configuration file {{Path|/etc/mail/spamassassin/local.cf}} but I think it is cleaner to do it in {{Path|/etc/amavisd.conf}} .}}

{{Note|다음에 MySQL을 활용하여 사용자별 정책을 설정하는 방법을 보여드리겠습니다.}}

While waiting for a better method you can add the following to {{Path|amavisd.conf}} to bypass spam checks for <code>postmaster</code> and <code>abuse</code> mailboxes. 

{{CodeBox|title=postmaster 및 abuse 메일에 대한 스팸 필터 통과 처리|1=
map { $bypass_spam_checks{lc($_)}=1 } (qw(
        postmaster@
        abuse@
));
}}

{{Important|While we are at it we should ''never'' automatically discard mails to the <code>postmaster</code> or the <code>abuse</code> accounts. See [http://www.ietf.org/rfc/rfc2142.txt RFC 2142 MAILBOX NAMES FOR COMMON SERVICES, ROLES AND FUNCTIONS] . Otherwise your domains might end up listed in some of the evil lists over at [http://www.rfc-ignorant.org/ rfc-ignorant.org] .}}

== 더 많은 규칙 추가 ==

If you want to use more rules provided by the SARE Ninjas over at the [http://www.rulesemporium.com/ SpamAssassin Rules Emporium] you can easily add and update them using the <code>sa-update</code> mechanism included in Spamassassin. 

A brief guide to using SARE rulesets with <code>sa-update</code> can be found [http://daryl.dostech.ca/sa-update/sare/sare-sa-update-howto.txt here] . 

== 시험 및 마무리 ==

=== 설정 시험 ===

이제 <code>freshclam</code>을 시작하기 전에 동작하는지 직접 확인할 수 있습니다. 

{{RootCmd|freshclam|output=<pre>
ClamAV update process started at Sun May  2 09:13:41 2004
Reading CVD header (main.cvd): OK
Downloading main.cvd [*]
main.cvd updated (version: 22, sigs: 20229, f-level: 1, builder: tkojm)
Reading CVD header (daily.cvd): OK
Downloading daily.cvd [*]
daily.cvd updated (version: 298, sigs: 1141, f-level: 2, builder: diego)
Database updated (21370 signatures) from database.clamav.net (193.1.219.100).
</pre>
}}

이제 최신 바이러스 정의를 받았고 {{Path|freshclam.conf}}가 제대로 동작함을 알았습니다. 

freshclam과 amavisd를 명령행 인터페이스와 amavisd 시험 메일로 시험해보십시오.  다음 명령으로 <code>clamd</code>와 <code>amavis</code> 를 시작하십시오: 

{{RootCmd|/etc/init.d/clamd start
|/etc/init.d/amavisd start
|/etc/init.d/postfix reload}}

모든게 잘 처리됐다면 <code>postfix</code>는 25번 포트를 통해 메일을 기다리며 10024번을 통해 메일을 다시 넣습니다. 동작을 확인하려면 로그 파일을 확인하십시오. 

{{RootCmd|tail -f /var/log/mail.log}}

{{Note| 로그 설정에 따라 {{Path|/var/log/messages}}가 올바른 경로일 수 있습니다.}}

이제 로그 파일에 이상한 메시지가 안나타난다면 새로 테스트 해볼 시간입니다. 

<code>netcat</code>으로 <code>amavisd</code>에 접속할 때 10024 포트를, <code>postfix</code>에 접속할 때 10025 포트를 활용하십시오. 

{{Note|Netcat은 <code>telnet</code>의 고급진 대체 프로그램으로 활용할 수 있습니다. {{c|emerge netcat}} 명령으로 설치하십시오.}}

{{Note|어떤 알 수 없는 이유 때문에 netcat에서 <code>amavisd</code>로의 직접 메일 전송을 처리할 수 없으면,  <code>telnet</code>을 대신 사용하십시오.}}

{{RootCmd|nc localhost 10024|output=<pre>
220 [127.0.0.1] ESMTP amavisd-new service ready
</pre>}}

{{RootCmd|nc localhost 10025|output=<pre>
220 example.com ESMTP Postfix
</pre>
}}


{{Note|If you want to see the complete output from amavisd-new start <code>amavisd debug-sa</code> as the <code>amavis</code> user and send a mail. For this to work you might have to change the default shell in {{Path|/etc/passwd}} .}}

<code>amavisd</code> 와 <code>clamd</code>를 <code>default</code> 런레벨에 추가하십시오. 

{{RootCmd|rc-update add clamd default
|rc-update add amavisd default}}

{{Note|<code>amavisd</code>가 스팸 어쌔신 펄 라이브러리를 바로 사용하므로 <code>spamd</code>를 기본 런레벨에 바로 추가하면 안됩니다.}}

{{Note|You might notice <code>Net::Server: Couldn't POSIX::setuid to ... []</code> lines in your log. According to [http://www.ijs.si/software/amavisd/README.chroot amavis chroot README] , if the process UID remains 0 ( <code>root</code> ), the program will terminate, otherwise you can consider the message just as informative. This is because <code>POSIX::setuid()</code> returns a string <code>0 but true</code> .}}

{{Important|If you enabled login for amavis remember to set back the login shell in {{Path|/etc/passwd}} to <code>/bin/false</code> .}}

== 전자메일 자동 숙지 및 열외처리 ==

=== spamtrap 사용자 만들기 ===

spamtrap 계정과 디렉터리를 민드십시오. 

{{RootCmd|useradd -m spamtrap
|maildirmake /home/spamtrap/.maildir
|chown -R spamtrap:spamtrap /home/spamtrap/.maildir}}

spamtrap 사용자에게 제대로 된 암호를 부여하십시오.

{{RootCmd|passwd spamtrap}}

If you manually want to check some of the mails to ensure that you have no false positives you can use the following <code>procmail</code> recipe to sideline spam found into different mail folders. 

=== .procmailrc 만들기 ===

{{FileBox|filename=/home/spamtrap/.procmailrc|lang=bash|1=
#Set some default variables
MAILDIR=$HOME/.maildir
  
SPAM_FOLDER=$MAILDIR/.spam-found/
  
LIKELY_SPAM_FOLDER=$MAILDIR/.likely-spam-found/
  
#Sort mails with a spamscore of 7+ to the spamfolder
:0:
* ^X-Spam-Status: Yes
* ^X-Spam-Level: \*\*\*\*\*\*\*
$SPAM_FOLDER
  
#Sort mail with a spamscore between 5-7 to the likely spam folder
:0:
* ^X-Spam-Status: Yes
$LIKELY_SPAM_FOLDER
  
#Sort all other mails to the inbox
:0
*
./
}}

{{Warning|If your mail server is going to receive a lot of mail you should NOT use the likely-spam recipe. Instead set <code>$sa_tag2_level_deflt</code> high enough to avoid false positives and filter it directly to <code>$SPAM_FOLDER</code> .}}

{{Note|If you haven't already installed <code>procmail</code> do it with <code>emerge procmail</code> .}}

이제 Postfix 에서 메일을 전달할 때 <code>procmail</code>을 사용하는지 확인하십시오. 

{{FileBox|filename=/etc/postfix/main.cf|lang=ini|1=
mailbox_command = /usr/bin/procmail -a "DOMAIN"
}}

=== 메일 폴더 만들기 ===

이제 햄과 스팸을 처리할 공유 폴더를 만들겠습니다. 

{{RootCmd|maildirmake /var/amavis/.maildir
|maildirmake -S /var/amavis/.maildir/Bayes
|maildirmake -s write -f spam /var/amavis/.maildir/Bayes
|maildirmake -s write -f ham /var/amavis/.maildir/Bayes
|maildirmake -s write -f redeliver /var/amavis/.maildir/Bayes}}

Amavisd-new needs to be able to read these files as well as all mailusers. Therefore we add all the relevant users to the mailuser group along with amavis. 

{{RootCmd|groupadd mailusers
|usermod -G mailusers spamtrap
|chown -R amavis:mailusers /var/amavis/.maildir/
|chown amavis:mailusers /var/amavis/
|chmod -R 1733 /var/amavis/.maildir/Bayes/
|chmod g+rx /var/amavis/.maildir/
|chmod g+rx /var/amavis/.maildir/Bayes/}}

{{Warning|This grants members of the <code>mailusers</code> groups access to <code>amavis</code> mail.}}

This makes the spam and ham folders writable but not readable. This way users can safely submit their ham without anyone else being able to read it. 

<code>spamtrap</code> 사용자로 다음 명령을 실행하십시오: 

{{Cmd|maildirmake --add Bayes{{=}}/var/amavis/.maildir/Bayes $HOME/.maildir}}

{{Note|We have to give the group read permissions on the {{Path|Bayes}} folder in order for the mail client to be able to see the subdirectories used by IMAP.}}

=== 크론 작업 추가 ===

Now run <code>crontab -u amavis -e</code> to edit the amavis crontab to enable automatic learning of the Bayes filter every hour. 

{{FileBox|filename=crontab|title=amavis 사용자용 설정|1=
#Auto learn
0 * * * *          /usr/bin/sa-learn --spam /var/amavis/.maildir/Bayes/.spam/{cur,new} \
                    > /dev/null 2>&1
0 * * * *          /usr/bin/sa-learn --ham /var/amavis/.maildir/Bayes/.ham/{cur,new} > \
                   /dev/null 2>&1
}}

{{Note| 크론을 실행하려면 <code>amavis</code> 는 <code>cron</code> 그룹의 구성원이어야 합니다.}}

{{Note|It seems like the shared maildir folders will make <code>sa-learn</code> examine all messages twice. This should not be a problem. The output will also show that the maximum of messages learned from is half or less than the messages examined.}}

=== amavisd.conf 수정 ===

Now modify amavis to redirect spam emails to the <code>spamtrap</code> account and keep spamheaders. 

{{FileBox|filename=/etc/amavisd.conf|lang=ini|1=
# (Define the account to send virus spam emails)
$spam_quarantine_to = "spamtrap\@$myhostname";
}}

=== 정리 ===

We don't want to keep mail forever so we use <code>tmpwatch</code> to clean up regularily. Emerge it with <code>emerge tmpwatch</code> . Only <code>root</code> is able to run <code>tmpwatch</code> so we have to edit the <code>root</code> crontab. 

{{FileBox|filename=crontab|title=루트 사용자|1=
# Clean up
# Keep virusmails for a week (24*7 hours)
15 0 * * *      /usr/sbin/tmpwatch -c -f -d --quiet 168 /var/amavis/virusmails/
# Delete spam and ham learned after a week
15 0 * * *      /usr/sbin/tmpwatch -c -f -d --quiet 168 /var/amavis/.maildir/Bayes/
}}

== 그레이 리스팅 ==

=== 도입부 ===

Greylisting is one of the newer weapons in the spam fighting arsenal. As the name implies it is much like whitelisting and blacklisting. Each time an unknown mailserver tries to deliver mail the mail is rejected with a ''try again later'' message. This means that mail gets delayed but also that stupid spam bots that do not implement the RFC protocol will drop the attempt to deliver the spam and never retry. With time spam bots will probably adjust, however it will give other technologies more time to identify the spam. 

{{Note|If your ISP blocks incoming traffic on port 25 and relays all mail to you through their own mail server greylisting will not work.}}

Postfix 2.1 come with a simple Perl greylisting policy server that implements such a scheme. However it suffers from unpredictable results when the partition holding the greylisting database run out of space. There exists an improved version that do not suffer this problem. First I will show how to install the builtin greylisting support that come with Postfix and then I will show how to configure the more robust replacement. 

{{Note|There are other greylisting policy servers for Postfix around (such as [http://www.gasmi.net/gld.html Gld] , which is in Portage, and [http://sqlgrey.sourceforge.net/ SQLgrey] ). Some of them support database backends, auto whitelisting and other neat features.}}

=== 간단한 그레이 리스팅 ===

{{Note|postgrey로 개선된 그레이 리스팅 기능을 활용하는게 좋다면 이 부분을 안전하게 건너뛰어도 됩니다.}}

We need the file {{Path|greylist.pl}} but unfortunately the ebuild does not install it as default. 

{{RootCmd|cp /usr/portage/distfiles/postfix-your-version-here.tar.gz /root/
|tar xzf postfix-your-version-here.tar.gz
|cp postfix-2.1.0/examples/smtpd-policy/greylist.pl /usr/bin/}}

Now we have the file in place we need to create the directory to hold the greylisting database: 

{{RootCmd|mkdir /var/mta
|chown nobody /var/mta}}

{{Warning|Do not create the greylisting database directory on a partition that might run out of space. While postfix can recover from no-space-left situations for the mail queue and mail box situations, this is not the case with the greylisting database. If the file becomes corrupted you may not be able to receive mail at all until you delete the file by hand.}}

=== 그레이 리스팅 설정 ===

Now that we have all this ready all that is left is to add it to the postfix configuration. First we add the necessary information to the {{Path|master.cf}} : 

{{CodeBox|title=그레이 리스팅을 활용할 목적으로 master.cf 수정|1=
policy-greylist  unix  -       n       n       -       -       spawn
   user=nobody argv=/usr/bin/perl /usr/bin/greylist.pl
}}

The postfix spawn daemon normally kills its child processes after 1000 seconds but this is too short for the greylisting process so we have to increase the timelimit in {{Path|main.cf}} : 

{{FileBox|filename=main.cf|title=그레이 리스팅 활용|lang=ini|1=
policy-greylist_time_limit = 3600
# (Under smtpd_recipient_restrictions add:)
check_sender_access hash:/etc/postfix/sender_access
# (Later on add:)
restriction_classes = greylist
greylist = check_policy_service unix:private/policy-greylist
}}

{{Warning|Be sure to specify <code>check_sender_access</code> AFTER <code>reject_unauth_destination</code> or else your system could become an open mail relay.}}

{{Note|The greylist database gets polluted quickly with bogus addresses. It helps if you protect greylist lookups with other restrictions that reject unknown senders and/or recipients.}}

We don't want to use greylisting for all domains but only for those frequently abused by spammers. After all it will delay mail delivery. A list of frequently forged MAIL FROM domains can be found [http://www.monkeys.com/anti-spam/filtering/sender-domain-validate.in online] . Add the domains you receive a lot of spam from to {{Path|/etc/postfix/sender_access}} : 

{{CodeBox|title=Format of sender_access|1=
aol.com     greylist
hotmail.com greylist
bigfoot.com greylist
}}

If you want a more extensive list: 

{{RootCmd|wget http://www.monkeys.com/anti-spam/filtering/sender-domain-validate.in
|cat sender-domain-validate.in {{!}} sort {{!}} awk {'print $1 "\t\t greylist"'} > /etc/postfix/sender_access}}

Now we only have to initialize the {{Path|sender_access}} database: 

{{RootCmd|postmap /etc/postfix/sender_access}}

이제 간단한 그레이 리스팅 설정은 끝났습니다. 

{{Warning|I tried this on one box handling thousands of mails daily and the results were almost a complete disaster. After four days the box was bogged down with hundreds of old <code>greylist.pl</code> processes.}}

=== postgrey로 그레이 리스팅 설정 개선하기 ===

간단한 {{c|emerge}} 명령으로 개선된 그레이 리스팅 정책 서버를 설치할 수 있습니다: 

{{RootCmd|emerge postgrey}}

<code>postgrey</code>를 설치한 후 {{Path|main.cf}}를 편집해야 합니다. 바꿀 내용은 이미 그레이리스팅한 내용과 거의 정확하게 비슷합니다. 

{{FileBox|filename=main.cf|title=그레이 리스팅 활용|lang=ini|1=
# (Under smtpd_recipient_restrictions add:)
check_sender_access hash:/etc/postfix/sender_access
# (Later on add:)
smtpd_restriction_classes = greylist
greylist = check_policy_service inet:127.0.0.1:10030
}}

{{Note|The Postfix SMTPD_POLICY_README only uses <code>restriction_classes</code> but that does not appear to work.}}

{{Note|If you want to greylist everything instead add <code>check_policy_service inet:127.0.0.1:10030</code> .}}

마지막으로, 서버를 시작하고 적당한 런레벨에 추가하십시오. 

{{RootCmd|/etc/init.d/postgrey start
|rc-update add postgrey default}}

{{Note|어떤 사람은 메일을 빨리 받는걸 좋아하기 때문에 그레이리스팅이 별로 가치가 없을 수 있습니다. 허나, 백업 메일 서버를 도입하면 서버에서 안전하게 그레이리스팅을 설정할 수 있습니다. 제 좁은 식견에 따르면 세번만에 스팸 수신을 차단할 수 있습니다.}}

== SPF (전송 정책 프레임워크) ==

=== 도입부 ===

SPF allows domain owners to state in their DNS records which IP addressess should be allowed to send mails from their domain. This will prevent spammers from spoofing the <code>Return-Path</code>. 

{{Note|If your ISP blocks incoming traffic on port 25 and relays all mail to you through their own mail server SPF will not work.}}

First domain owners have to create a special <code>TXT</code> DNS record. Then an SPF-enabled MTA can read this and if the mail originates from a server that is not described in the SPF record the mail can be rejected. An example entry could look like this: 

{{CodeBox|title=SPF 레코드 예제|1=
example.com.  IN TXT  "v=spf1 a mx ptr -all"
}}

<code>-all</code>은 기본적으로 모든 메일을 거절하지만 <code>A</code>( <code>a</code> ), <code>MX</code>( <code>mx</code> ), <code>PTR</code>( <code>ptr</code> ) DNS 레코드의 조건에 일치하는 도메인에서 온 메일은 허용한다는 의미입니다. 더 많은 내용을 찾아보려면 페이지 하단의 자료를 참고하십시오. 

{{Note|ISP를 통해 내보내는 메일을 릴레이처리할 경우 <code>include:yourisp.com</code> 을 추가해야 합니다.}}

스팸 어쌔신 3.0에서는 SPF를 지원합니다만, 기본적으로 활성화 상태가 아니며 Postfix의 새 정책 데몬에서 SPF를 지원합니다. 따라서, Postfix의 SPF 지원을 설치하겠습니다. 

{{Note|스팸 어쌔신의 SPF를 대신 사용한다면, 간단하게 {{c|emerge dev-perl/Mail-SPF-Query}}를 실행하고 Amavisd-new를 다시 시작하십시오}}

=== 준비 ===

우선 postfix 2.1을 위에서 설명한대로 설치하십시오. 소스코드를 가져왔으면 {{Path|spf.pl}}을 찾아 다음 명령을 수행하십시오: 

{{RootCmd|cp postfix-<version>/examples/smtpd-policy/spf.pl /usr/local/bin/}}

{{Note| postfix에 딸려오는 {{Path|spf.pl}} 파일은 약간 문제가 있으므로 다음 부분을 찾아 주석 표시를 없애십시오: <code>push @HANDLERS, "sender_permitted_from"; use Mail::SPF::Query;</code>. 게다가 199번째 줄 쯤의 <code>comemnt</code>를 <code>comment</code>로 바꾸십시오. 바꾸기가 귀찮으면, 대신 [http://spf.pobox.com/postfix-policyd.txt 개발 버전]을 내려받을 수 있습니다.}}

펄 스크립트는 현재 포티지에 없는 펄 라이브러리를 필요로하지만, 설치는 여전히 단순합니다: 

{{RootCmd|emerge Mail-SPF-Query Net-CIDR-Lite Sys-Hostname-Long}}

이제 적재적소에 갖춰야할 모든 것을 갖췄으니 이제 필요한 모든건 postfix를 새 정책을 기반으로 동작하도록 설정하는 일입니다. 

{{FileBox|filename=master.cf|title=SPF 활용|1=
policy-spf  unix  -       n       n       -       -       spawn
   user=nobody argv=/usr/bin/perl /usr/local/bin/spf.pl
}}

SPF 검사항목을  {{Path|main.cf}}에 추가하십시오. 제대로 설정한 SPF에는 문제가 없어야 하며 모든 도메인에 대해 SPF를 점검할 수 있어야합니다: 

{{FileBox|filename=main.cf|title=SPF 활용|1=
# (Under smtpd_recipient_restrictions add:)
check_policy_service unix:private/policy-spf
}}

{{Note| <code>fetchmail</code>을 쓸 때 SPF에 문제가 있다면, 일부 지정 도메인에 대해서만 SPF를 활성화하는게 좋을지도 모릅니다.}}

== MySQL을 활용하여 amavisd-new 설정 ==

=== MySQL 설정 ===

{{Note|2.2버전 위로는 시험해보지 않았습니다. 시험 경험에 대해 언제든지 보내주세요 :&#41;}}

거대 도메인에 대해 {{Path|amavisd.conf}}에서 설정할 수 있는 기본 값은 모든 사용자에게 적절한 값이 아닐 수도 있습니다. amavisd-new와 MySQL 지원기능을 함께 쓰도록 설정한다면 사용자 또는 사용자의 그룹별로 각각 설정할 수 있습니다. 

{{Cmd|mysql -u root -p mysql|output=<pre>
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 78 to server version: 4.0.18-log
  
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
</pre>}}

{{Cmd|create database maildb;|prompt=mysql> 
|GRANT INSERT,UPDATE,DELETE,SELECT ON maildb.* TO 'mail'@'localhost' IDENTIFIED BY 'very_secret_password';
|use maildb;}}

이제 데이터베이스를 만들었으니 필요한 테이블을 만들겠습니다. mysql 프롬프트에 다음 구문을 잘라다가 붙여넣을 수 있습니다: 

{{CodeBox|title=MySQL 테이블 구성|lang=sql|1=
CREATE TABLE users (
    id         int unsigned NOT NULL auto_increment,
    priority   int          NOT NULL DEFAULT '7',  -- 0 is low priority
    policy_id  int unsigned NOT NULL DEFAULT '1',
    email      varchar(255) NOT NULL,
    fullname   varchar(255) DEFAULT NULL,    -- not used by amavisd-new
    local      char(1),     -- Y/N  (optional field, see note further down)
    PRIMARY KEY (id),
    KEY email (email)
    );
CREATE UNIQUE INDEX users_idx_email ON users(email);
  
# (any e-mail address, external or local, used as senders in wblist)
CREATE TABLE mailaddr (
   id         int unsigned NOT NULL auto_increment,
   priority   int          NOT NULL DEFAULT '7',  -- 0 is low priority
   email      varchar(255) NOT NULL,
   PRIMARY KEY (id),
   KEY email (email)
   );
CREATE UNIQUE INDEX mailaddr_idx_email ON mailaddr(email);
  
# (-- per-recipient whitelist and/or blacklist,
# -- puts sender and recipient in relation wb)
# (white or blacklisted sender)
CREATE TABLE wblist (
   rid        int unsigned NOT NULL,     -- recipient: users.id
   sid        int unsigned NOT NULL,     -- sender:    mailaddr.id
   wb         char(1) NOT NULL, -- W or Y / B or N / space=neutral
   PRIMARY KEY (rid,sid)
   );
  
CREATE TABLE policy (
   id               int unsigned NOT NULL auto_increment,
   policy_name      varchar(32),     -- not used by amavisd-new
   virus_lover          char(1),     -- Y/N
   spam_lover           char(1),     -- Y/N  (optional field)
   banned_files_lover   char(1),     -- Y/N  (optional field)
   bad_header_lover     char(1),     -- Y/N  (optional field)
   bypass_virus_checks  char(1),     -- Y/N
   bypass_spam_checks   char(1),     -- Y/N
   bypass_banned_checks char(1),     -- Y/N  (optional field)
   bypass_header_checks char(1),     -- Y/N (optional field)
   spam_modifies_subj   char(1),     -- Y/N (optional field)
   spam_quarantine_to   varchar(64) DEFAULT NULL, -- (optional field)
   spam_tag_level  float,  -- higher score inserts spam info headers
   spam_tag2_level float DEFAULT NULL,  -- higher score inserts
               -- 'declared spam' info header fields
   spam_kill_level float,  -- higher score activates evasive actions, e.g.
               -- reject/drop, quarantine, ...
               -- (subject to final_spam_destiny setting)
   PRIMARY KEY (id)
  );
}}

{{Note|복사/붙여넣기에 문제가 있다면 구문을 어딘가에 복사하고 필요없는 문자를 지워나가십시오.}}

{{Note| <code>John "Funny" Smith@example.com</code>와 같은 RAW(rfc2821-unquoted and unbracketed) 주소를 키로 간주하여 일치하는 전자메일 주소 찾기 사도를 진행합니다}}

{{Note|검색은 <code>SQL</code> , <code>LDAP</code> , <code>hash</code> , <code>ACL</code> , <code>regexp</code> , <code>constant</code> 순서대로 진행합니다. 분명한 응답(<code>undef/NULL</code> 아님)이 나오기 시작하면, 검색을 중단합니다.}}

화이트리스팅 및 블랙리스팅을 활용하려면  <code>wblist</code>에 송신자와 수신자의 전자메일 주소간 관계를 만들고 난 후 <code>mailadr</code> 에 송신자 및 수신자 메일 주소를 추가하고, 화이트리스트 처리할 지( <code>W</code> ), 블랙리스트 처리할 지( <code>B</code> )를 명시해야합니다. 

이제 테이블을 만들었으니 test 사용자와 test 정책을 넣어보겠습니다: 

{{CodeBox|title=test 사용자 및 test 정책 만들기|lang=sql|1=
INSERT INTO users
   SET
      id         =1,
      priority   =9,
      policy_id  =1,
      email      ="johndoe@example.com",
      fullname   ="John Doe",
      local      ="Y";
  
INSERT INTO policy
   SET
      id                     =1,
      policy_name            ="Test policy 1",
      virus_lover            ="N",
      spam_lover             ="N",
      banned_files_lover     ="N",
      bad_header_lover       ="N",
      bypass_virus_checks    ="N",
      bypass_spam_checks     ="N",
      bypass_banned_checks   ="N",
      bypass_header_checks   ="N",
      spam_modifies_subj     ="N",
      spam_quarantine_to     =NULL,
      spam_tag_level         =-50.0,
      spam_tag2_level        =7.0,
      spam_kill_level        =10.0;
}}

{{Note|이 구문을 어딘가에 복사해두고  여러분의 환경에 맞게 값을 조정하십시오.}}

{{Note|<code>local</code>을 <code>Y</code>값으로 설정하지 않으면 스팸 메일을 검색하지 않습니다.}}

이 구문은 test 사용자와 Test 정책을 넣습니다. 이 예제를 요구에 맞춰 약간 조절해나가십시오. 설정 이름에 대한 더 많은 설명은 {{Path|amavisd.conf}} 에서 찾을 수 있습니다. 

=== MySQL을 활용하여 amavisd 설정 ===

이제 amavis에 MySQL을 사용하라고 할 준비가 되었습니다: 

{{FileBox|filename=amavisd.conf|title=MySQL을 사용하도록 업데이트|lang=ini|1=
@lookup_sql_dsn =
   ( ['DBI:mysql:maildb:host1', 'mail', 'very_secret_password']  );
  
# (For clarity uncomment the default)
$sql_select_policy = 'SELECT *,users.id FROM users,policy'.
   ' WHERE (users.policy_id=policy.id) AND (users.email IN (%k))'.
   ' ORDER BY users.priority DESC';
  
# (If you want sender white/blacklisting)
   $sql_select_white_black_list = 'SELECT wb FROM wblist,mailaddr'.
     ' WHERE (wblist.rid=?) AND (wblist.sid=mailaddr.id)'.
     '   AND (mailaddr.email IN (%k))'.
     ' ORDER BY mailaddr.priority DESC';
</pre>
}}

== MySQL을 활용하도록 스팸 어쌔신 설정 ==

스팸 어쌔신 3.0에서 Bayes와 AWL 데이터를 MySQL에 저장할 수 있습니다. MySQL이 다른 데이터베이스에 비하면 무난한 동작을 수행할 수 있으므로 MySQL을 백엔드로 활용하겠습니다. 두가지 데이터 모음을 처리하는데 MySQL을 활용하면 시스템 관리가 더 쉬워집니다. 쉽게 처리하는 방법을 보여드리겠습니다. 

우선 새 MySQL 사용자를 만들고 필요한 테이블을 만드십시오. 

{{RootCmd|mysql -u root -p mysql|output=<pre>
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 78 to server version: 4.0.18-log
  
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
</pre>}}

{{Cmd|create database dbname;|prompt=mysql> 
|GRANT INSERT,UPDATE,DELETE,SELECT ON dbname.* TO 'dbuser'@'localhost' IDENTIFIED BY 'another_very_secret_password';
|use dbname;}}

이제 데이터베이스를 만들었으니 필요한 테이블을 만들겠습니다. mysql 프롬프트에 다음 구문을 잘라다가 붙여넣을 수 있습니다: 

{{CodeBox|title=MySQL 테이블 구성|lang=sql|1=
      CREATE TABLE bayes_expire (
          id                    int(11)         NOT NULL default '0',
          runtime               int(11)         NOT NULL default '0',
          KEY bayes_expire_idx1 (id)
          ) TYPE=MyISAM;
  
      CREATE TABLE bayes_global_vars (
          variable              varchar(30)     NOT NULL default '',
          value                 varchar(200)    NOT NULL default '',
          PRIMARY KEY           (variable)
          ) TYPE=MyISAM;
  
      INSERT INTO bayes_global_vars VALUES ('VERSION','3');
  
      CREATE TABLE bayes_seen (
          id                    int(11)         NOT NULL default '0',
          msgid                 varchar(200) binary NOT NULL default '',
          flag                  char(1)         NOT NULL default '',
          PRIMARY KEY           (id,msgid)
          ) TYPE=MyISAM;
  
      CREATE TABLE bayes_token (
          id                    int(11)         NOT NULL default '0',
          token                 char(5)         NOT NULL default '',
          spam_count            int(11)         NOT NULL default '0',
          ham_count             int(11)         NOT NULL default '0',
          atime                 int(11)         NOT NULL default '0',
          PRIMARY KEY           (id, token),
          INDEX (id, atime)
          ) TYPE=MyISAM;
  
      CREATE TABLE bayes_vars (
          id                    int(11)         NOT NULL AUTO_INCREMENT,
          username              varchar(200)    NOT NULL default '',
          spam_count            int(11)         NOT NULL default '0',
          ham_count             int(11)         NOT NULL default '0',
          token_count           int(11)         NOT NULL default '0',
          last_expire           int(11)         NOT NULL default '0',
          last_atime_delta      int(11)         NOT NULL default '0',
          last_expire_reduce    int(11)         NOT NULL default '0',
          oldest_token_age      int(11)         NOT NULL default '2147483647',
          newest_token_age      int(11)         NOT NULL default '0',
          PRIMARY KEY           (id),
          UNIQUE bayes_vars_idx1 (username)
          ) TYPE=MyISAM;
  
      CREATE TABLE awl (
          username              varchar(100)    NOT NULL default '',
          email                 varchar(200)    NOT NULL default '',
          ip                    varchar(10)     NOT NULL default '',
          count                 int(11)         default '0',
          totscore              float           default '0',
          PRIMARY KEY           (username,email,ip)
          ) TYPE=MyISAM;
}}

{{Important|<code>INSERT</code>줄은 반드시 실행해야 하며 그렇지 않으면 스팸 어쌔신이 동작하지 않습니다.}}

{{Note|소스 타르볼에 있는 {{Path|awl_mysql.sql}} 파일 및  {{Path|bayes_mysql.sql}} 파일에도 있습니다.}}

=== MySQL 백엔드를 사용하도록 스팸 어쌔신 설정 ===

DBM 데이터베이스에서 오래된 Bayes 데이터베이스를 보유하고 있고 다음 절차를 통해 유지하려면: 

{{RootCmd|su - amavis}}

{{Cmd|sa-learn --sync
|sa-learn --backup > backup.txt
|sa-learn --restore backup.txt}}

{{Note|MySQL 데이터베이스와 {{Path|secrets.cf}} 설정 파일을 업데이트 한 후 마지막 과정을 수행해야 함을 참고하십시오.}}

이제 필요한 정보를 스팸 어쌔신에 제공하십시오: 

{{FileBox|filename=/etc/mail/spamassassin/secrets.cf|1=
# (Tell Spamassassin to use MySQL for bayes data)
bayes_store_module              Mail::SpamAssassin::BayesStore::SQL
bayes_sql_dsn                   DBI:mysql:sa_bayes:localhost:3306
bayes_sql_username              db_name
bayes_sql_password              another_very_secret_password
  
# (Tell Spamassassin to use MySQL for AWL data)
auto_whitelist_factory          Mail::SpamAssassin::SQLBasedAddrList
user_awl_dsn                    DBI:mysql:sa_bayes:localhost:3306
user_awl_sql_username           db_name
user_awl_sql_password           another_very_secret_password
}}

다음 보안 수준을 만족스러운 수준으로 끌어올리기 위해 권한을 바꾸십시오: 

{{RootCmd|chmod 400 /etc/mail/spamassassin/secrets.cf}}

{{Note|상당히 안전한 암호를 만들려면 {{c|emerge app-admin/makepasswd}} 명령을 실행한 후,  {{c|makepasswd -chars{{=}}8}} 명령을 활용하십시오}}

이제 해야 할 일은 {{c|/etc/init.d/amavisd restart}} 명령의 실행입니다.

== 문제 해결 ==

=== Amavisd-new ===

Amavisd-new 문제를 해결하려면 {{c|/etc/init.d/amavisd stop}} 명령으로 서비스를 멈추고 {{c|amavisd debug}} 명령으로 전면 실행하여 출력 내용에 이상한 점이 없는지 관찰하십시오. 

=== 스팸 어쌔신 ===

스팸 어쌔신의 문제를 찾을 때 {{c|spamassassin -D < mail}} 명령으로 전자메일을 걸러볼 수 있습니다. 헤더에 문제가 없는지 확인하려면 다른 머신에서 IMAP으로 메일을 가져올 수 있습니다. 

{{Note| 문제를 찾아야 한다면 <code>amavis</code> 사용자의 로그인 쉘을 {{Path|/etc/passwd}}에서 {{Path|/bin/bash}} 로 바꿔서 로그인할 수 있게 해야 합니다.}}

동일한 정보와 Amavisd-new 동작에 대한 더 많은 정보를 가져오고 싶게 하려면 {{c|amavisd debug-sa}} 명령을 사용하십시오. 

=== 설치 후 작업 반복 처리 ===

이 안내서에서 언급한 일부 처리 과정은 업그레이드를 하고 나서도 반복해야합니다. 예를 들면, [[#.EC.A0.84.EC.9E.90.EB.A9.94.EC.9D.BC_.EC.9E.90.EB.8F.99_.EC.88.99.EC.A7.80_.EB.B0.8F_.EC.97.B4.EC.99.B8.EC.B2.98.EB.A6.AC]] 의 섹션에서 언급한  {{c|chown -R amavis:mailusers}} 명령은 amavisd-new를 업데이트한 후 매번 반복해야합니다. 

다행스럽게도 젠투에서는 이 과정을 자동으로 처리하는 수단을 제공합니다. [[Handbook:AMD64/Portage/Advanced/ko#.EC.9D.B4.EB.A8.B8.EC.A7.80_.ED.94.84.EB.A1.9C.EC.84.B8.EC.8A.A4_.ED.9B.84.ED.82.B9|이머지 프로세스 후킹]] 편에서 젠투 핸드북은 각 꾸러미 설치 후 작업을 실행하는 방법을 다음과 같이 설명하고 있습니다: 

{{CodeBox|title=언급한 chown을 실행하는 bashrc 코드 일부 예제|lang=bash|1=
if [ "${PN}" == "amavisd-new" ] &&
   [ "${EBUILD_PHASE}" == "postinst" ]; 
then
  chown -R amavis:mailusers /var/amavis/.maildir
fi
}}

=== 도움 받기 ===

도움이 필요하다면 amavis-user 메일링 리스트가 바람직한 곳이 되겠습니다. 질문을 올리기 전에 [http://marc.theaimsgroup.com/?l=amavis-user Amavis 사용자 메일링 리스트 보관소]에서 검색해보십시오. 만약 답변을 못찾았다면 [https://lists.sourceforge.net/lists/listinfo/amavis-user Amavis 사용자 메일링 리스트]에 가입할 수 있습니다. 

질문이 스팸 어쌔신, DCC, Razor, Postfix에 관련된 질문이라면 하단에 언급한 각각의 홈페이지를 참고하십시오. 

== 자료 ==

=== 더 많은 정보 ===

* [http://www.ijs.si/software/amavisd/INSTALL Amavisd-new INSTALL] 
* [http://www.ijs.si/software/amavisd/README.postfix Amavisd-new Postfix README] 
* [http://www.ijs.si/software/amavisd/amavisd-new-docs.html#pbanks Amavisd-new Policy bank documentation] 
* [http://spamassassin.apache.org/full/3.0.x/dist/sql/README Spamassassin SQL README] 
* [http://www.greylisting.org Greylisting] 
* [http://www.postfix.org/FILTER_README.html Postfix SMTPD_POLICY_README] 
* [http://www.unixwiz.net/techtips/postfix-HELO.html Blocking spammers with Postfix HELO controls] 
* [http://www.linuxjournal.com/article.php?sid=7327 SPF Overview] 
* [http://jimsun.linxnet.com/misc/postfix-anti-UCE.txt Jim Seymour's Postfix Anti-UCE Cheat Sheet] 

=== 일반 자료 ===

* [http://www.spamassassin.org 스팸 어쌔신]
* [http://www.ijs.si/software/amavisd/ Amavisd-new]
* [http://www.ijs.si/software/amavisd/amavisd-new-docs.html Amavisd-new 문서 모음] 
* [http://razor.sourceforge.net/ Vipuls's Razor]
* [http://pyzor.sourceforge.net/ Pyzor]
* [http://www.rhyolite.com/anti-spam/dcc/ 분산 검사합 정리 저장소] 
* [http://www.renaissoft.com/projects/maia/ Maia Mailguard] 

=== 다른 설명서 ===

* [http://www.flakshack.com/anti-spam/ OpenBSD, Postfix, Amavisd-new, 스팸 어쌔신, Razor, DCC를 활용한 매우 안전한 스팸 차단 게이트웨이] 

[[Category:Server and Security]] {{Migrated|originalauthors=Sune Kloppenborg Jeppesen, Jens Hilligs, Joshua Saddler}}
