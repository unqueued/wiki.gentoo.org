You need to log in to a server on an internal network, but you can only access the internal network through a gateway machine. If both these machines are running [[SSH]], it is convenient to set up an SSH [[Wikipedia:Tunneling protocol|tunnel]].

== Usage ==
Begin with creating a ssh tunneling session:
{{Cmd|ssh -f <GWUSERNAME@>GATEWAY -L localhost:CPORT:SERVER:SPORT -N}}
The ''-f'' argument instructs the ssh instance to go into the background, and ''-N'' instructs it to not launch a shell. Followd by:
{{Cmd|ssh -p CPORT <SUSERNAME@>localhost}}
The variables above represent:
* '''GATEWAY''' = The hostname/IP address of the gateway machine.
* '''GWUSERNAME''' = The username on the gateway (optional if this username is the same as on the client).
* '''SERVER''' = The hostname/IP address of the server you wish to log into.
* '''SUSERNAME''' = The username on the server (optional if this username is the same as on the client).
* '''SPORT''' = The port number on which the server SSH daemon is listening, by default 22.
* '''CPORT''' = The port number of your choosing on which the tunnel will be receiving connections on the client machine (should be greater than 1024 unless you are invoking as root).

You can [[Wikipedia:Secure copy|scp]] files from the server as you would normally by specifying the tunnel port:
{{Cmd|scp -P CPORT localhost:REMOTEPATH LOCALPATH}}
Similarly for sending files to the server:
{{Cmd|scp -P CPORT LOCALPATH localhost:REMOTEPATH}}

=== Tips ===
In order to make this tunneling process less onerous in the future:
* Set these commands as [[Wikipedia:Alias_%28command%29|shell aliases]] (in [[Bash]], usually in {{Path|~/.bashrc}}).
* To avoid typing passwords, copy the client key to the gateway, and the client and gateway keys to the server. This process is described in the official Gentoo documentation [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH key management].
* If you rely upon keeping an unattended connection alive which may become dropped due to timeouts, consider altering the various TCP keepalive settings in the client and server configurations. Perhaps the most robust solution is to install a connection watchdog such as '''net-misc/autossh''' which will babysit an ssh session and restart it if necessary.

== X11 forwarding ==
To enable X11 forwarding, first the '''X11Forwarding''' and '''ForwardX11''' options must be configured to '''yes''' for both the client and server being connected to respectively. In your client connection, add the '''-Y''' switch to the second invocation above, and optionally the '''-C''' switch to also enable compression i.e:
{{Cmd|ssh -YC -p CPORT <SUSERNAME@>localhost}}
The following is required for the forwarding of X11 connections from the server to client to work:

* The SSH daemon on the gateway machine must have TCP forwarding must be enabled, otherwise X11 connections won't be forwarded:
: {{File|/etc/ssh/sshd_config|On the gateway|<pre>TCPForwarding yes</pre>}}

* The '''xauth''' tool must be present on the server. Install {{Package|net-misc/openssh}} with the ''X'' USE flag set to pull it in or install {{Package|x11-apps/xauth}}.

* X11 forwarding must be enabled in the server SSH daemon configuration:
: {{File|/etc/ssh/sshd_config|On the server|<pre>X11Forwarding yes</pre>}}

== See also ==
* [[SSH jump host]]

[[Category:SSH]]
