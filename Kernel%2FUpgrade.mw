<languages />
<translate>

<!--T:39-->
{{Metadata|abstract=This article describes the steps to upgrade to a newer version of the Linux kernel.}}

<!--T:1-->
This article [[Article description::describes the steps to upgrade to a newer version of the Linux [[kernel]].]]

== Installation == <!--T:2-->

<!--T:3-->
A kernel upgrade may be a good idea when new kernel sources are installed. New kernel sources are sometimes installed while updating the system by running the following command:

<!--T:89-->
{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse @world}}

<!--T:90-->
Of course, they can be installed directly using the next command (replace ''gentoo-sources'' with whatever version of the kernel that is in-use):

<!--T:91-->
{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse sys-kernel/gentoo-sources}}

<!--T:42-->
Installing new kernel sources doesn't provide the user with a new kernel. It is necessary to make and install a new kernel from the new sources and then reboot the system to actually run the new kernel.

<!--T:43-->
Making a new kernel from the new sources is basically the same process as making a kernel when installing the system. The difference is that one can use the configuration of the old kernel to create a configuration for the new kernel. Using the old configuration saves the user from going through all the kernel options (like {{c|make menuconfig}}) again.

<!--T:44-->
The kernel configuration is saved in a file named {{Path|.config}} in the directory that holds the kernel sources. A new kernel may have had options or features added or removed since the old kernel. The kernel configuration specifies whether a kernel's features and options will be enabled or not, perhaps built into the kernel, or perhaps built as modules which can be loaded into the running kernel on demand. Hence the configuration file of the new kernel may have new entries the configuration file of the old kernel doesn't have, and it might not have entries anymore which are present in the configuration file of the old kernel.

<!--T:45-->
To deal with such changes of the configuration file, the configuration file of the old kernel needs to be converted to a configuration that can be used with the new kernel. This article shows how to make a new kernel from new kernel sources with converting the configuration file of the old kernel.

=== Backup the current kernel configuration === <!--T:46-->

<!--T:47-->
It is wise to make a backup of the kernel configuration so that the previous configurations are not lost. After all, many users devote considerable time to figure out the best configuration for the system, and losing that information is definitely not wanted.

<!--T:48-->
It is easy to make a backup of the current kernel configuration:

<!--T:49-->
{{RootCmd|cp /usr/src/linux/.config ~/kernel-config-`uname -r`}}

<!--T:50-->
Provided that the symlink to the kernel sources has been set correctly, this copies the configuration of the currently used kernel to the home directory of root, renaming the configuration to {{Path|kernel-config-}} followed by the version of the current running Linux kernel.

== Configuration ==

=== Set symlink to new kernel sources === <!--T:51-->

<!--T:7-->
The symlink {{Path|/usr/src/linux}} should always point to the directory that holds the sources of the kernel which currently runs. This can be done in one of three ways:

<!--T:52-->
# Installing the kernel sources with <code>USE="symlink"</code>
# Setting the link with eselect
# Manually updating the symbolic link

==== Installing the kernel sources with the symlink USE flag ==== <!--T:53-->

<!--T:54-->
This will make the {{Path|/usr/src/linux}} point to the newly installed kernel sources.

<!--T:55-->
If necessary, it can still be modified later with one of the other two methods.

==== Setting the link with eselect ==== <!--T:56-->

<!--T:57-->
To set the symlink with {{c|eselect}}:

<!--T:58-->
{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

<!--T:59-->
This outputs the available kernel sources. The asterisk indicates the chosen sources.

<!--T:60-->
To change the kernel sources, e.g. to the second entry, do:

<!--T:61-->
{{RootCmd|eselect kernel set 2}}

==== Manually updating the symbolic link ==== <!--T:62-->

<!--T:63-->
To set the symbolic link manually:

<!--T:64-->
{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

==== Moving to the new folder ====

Now that the symbolic link has been modified, change the working directory to the new kernel folder.

{{RootCmd|cd /usr/src/linux}}

{{Note|This command is still necessary even if the working directory was already {{Path|/usr/src/linux}} when the symlink was modified. Until the new symlink is actually followed, the console will still be in the ''old'' kernel's directory.}}

=== Copy previous kernel configuration === <!--T:65-->

<!--T:66-->
The configuration of the old kernel needs to be copied to the new one. In addition to the backup copy that was saved to {{Path|/root}} in an earlier step, the old configuration can be found in several places:

<!--T:9-->
* In the [[procfs]] filesystem, if the kernel option ''Enable access to .config through /proc/config.gz'' (CONFIG_IKCONFIG_PROC) was activated in the present kernel:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}

<!--T:92-->
* From the old kernel. This will only work when the old kernel was compiled with CONFIG_IKCONFIG:
: {{RootCmd|/usr/src/linux/scripts/extract-ikconfig /path/to/old/kernel >/usr/src/linux/.config}}

<!--T:10-->
* In the {{Path|/boot}} directory, if the configuration was installed there:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

<!--T:11-->
* In the kernel directory of the currently-running kernel:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

<!--T:83-->
* In the {{Path|/etc/kernels/}} directory, if <code>SAVE_CONFIG="yes"</code> is set in {{Path|/etc/genkernel.conf}} and {{c|[[genkernel]]}} was previously used:
: {{RootCmd|cp /etc/kernels/kernel-config-x86_64-3.14.14-gentoo /usr/src/linux/.config}}

=== .config file === <!--T:67-->

<!--T:68-->
To use the configuration of the old kernel with the new kernel, it needs to be converted.  The conversion can be done by running either {{c|make silentoldconfig}} or {{c|make olddefconfig}}. Use either, not both.

==== make silentoldconfig ==== <!--T:70-->

{{Important|{{c|make silentoldconfig}} is being removed as of linux version 4.19, it will be replaced by {{c|make syncconfig}}.}}

<!--T:71-->
The following configuration is like the text based configuration with {{c|make config}}.  For new configuration options, the user is asked for a decision. For example:

<!--T:72-->
{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

<!--T:73-->
The string ''(NEW)'' at the end of the line marks this option as new. Left to the string in square brackets are the possible answers: ''Y''es, ''n''o, ''m''odule or ''?'' to show the help. The recommend (i.e. default) answer is capitalized (here ''Y''). The help explains the option or driver.

<!--T:74-->
Unfortunately {{c|make silentoldconfig}} doesn't show a lot more information for each option, such as the context, so it is sometimes difficult to give the right answer. In this case the best way to go is to remember the option name and revise it afterwards through one of the [[Kernel/Configuration#Configuration tools|graphical kernel configuration tools]].

==== make olddefconfig ==== <!--T:75-->

<!--T:76-->
If all new configuration options should be set to their recommended (i.e. default) values use {{c|make olddefconfig}}:

<!--T:77-->
{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

==== make help ==== <!--T:81-->

<!--T:82-->
Use {{c|make help}} to see other conversion methods available:

<!--T:84-->
{{RootCmd|make help}}

== Build == <!--T:23-->

<!--T:78-->
{{Important|When external kernel modules are installed (like nvidia or zfs), it may be necessary to run {{c|make modules_prepare}} as described [[Kernel/Upgrade#Reinstalling external kernel modules|below]] before building the kernel. Some modules cannot be installed or prepared before the kernel has been built.}}

<!--T:79-->
{{Important|Do not forget to reconfigure the [[Bootloader|bootloader]] to account for the new kernel filenames, and rebuild the initramfs if one is used as well.}}

<!--T:24-->
For this step, follow the steps in the [[Kernel/Configuration#Build|manual configuration]] article.

=== Automated build and installation ===

It is possible to automatically build and install the newly emerged kernel using Portage hooks. While other approaches are also possible, the following is based on genkernel and gentoo-sources package. It requires the following prerequisites:

# {{c|genkernel all}} is able to build and install the kernel to which the {{Path|/usr/src/linux}} symlink points into <code>$BOOTDIR</code> and the bootloader.
# The <code>symlink</code> use flag is set for the kernel ebuild.

If those are fulfilled, simply install a <code>post_pkg_postinst</code> Portage hook as shown below.

{{FileBox|title=Automated kernel build and installation portage hook|filename=/etc/portage/env/sys-kernel/gentoo-sources|lang=bash|1=post_pkg_postinst() {
	CURRENT_KV=$(uname -r)
	# Check to see if genkernel has been run previously for the running kernel and use that config
	if [[ -f "${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" ]] ; then
		genkernel --kernel-config="${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" all
	elif [[ -f "${EROOT}/usr/src/linux-${CURRENT_KV}/.config" ]] ; then # Use latest kernel config from current kernel
		genkernel --kernel-config="${EROOT}/usr/src/linux-${CURRENT_KV}/.config" all
	elif [[ -f /proc/config.gz ]] ; then # Use known running good kernel
		zcat /proc/config.gz >> "${EROOT}/tmp/genkernel.config"
		genkernel --kernel-config="${EROOT}/tmp/genkernel.config" all
		rm "${EROOT}/tmp/genkernel.config"
	else # No valid configs known
		genkernel all
	fi
}
}}

=== Reinstalling external kernel modules === <!--T:17-->

<!--T:21-->
Any external kernel modules, such as [[:Category:Binary kernel modules|binary kernel modules]], need to be rebuilt for each new kernel. If the kernel has not been built yet, it has to first be prepared for the building of the external kernel modules:

<!--T:85-->
{{RootCmd|make modules_prepare}}

<!--T:18-->
Packages containing kernel modules can be rebuilt using the <code>@module-rebuild</code> set:

<!--T:86-->
{{Emerge|@module-rebuild}}

=== Solving build problems === <!--T:80-->

<!--T:40-->
When experiencing build problems while rebuilding the current kernel, it might help to sanitize the kernel sources. Make sure to backup the {{Path|.config}} file first, as the operation will remove it. Make sure not to use a {{Path|.bak}} or {{Path|~}} suffix as backup as {{c|make distclean}} will clean those up as well.

<!--T:41-->
{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

== Removal == <!--T:25-->

<!--T:26-->
See the [[Kernel/Removal|kernel removal]] article. 

== See also ==

* {{See also|Genkernel}}

== External resources == <!--T:35-->

<!--T:36-->
* [https://kernelnewbies.org/LinuxChanges kernel changelog with some explanations of new features]

</translate>
[[Category:Kernel]]
