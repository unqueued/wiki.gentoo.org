<languages />
<translate>

<!--T:39-->
{{Metadata|abstract=This article describes the steps to upgrade to a new kernel.}}

<!--T:1-->
This article describes the steps to upgrade to a new [[kernel]].

== Installing and Using a new Kernel == <!--T:2-->

<!--T:3-->
A kernel upgrade may be a good idea when new kernel sources are installed.  New kernel sources are sometimes installed when you update your system by running '''emerge -a --update --deep --with-bdeps=y --newuse @world''' --- or you might have them installed yourself.

Installing new kernel sources doesn't provide you with a new kernel.  You need to make and install a new kernel from the new sources and then reboot your system to actually run the new kernel.

Making a new kernel from the new sources is basically the same process as making a kernel when installing the system.  The difference is that you can use the configuration of the old kernel to create a configuration for the new kernel.  Using the old configuration saves you from going through all the kernel options --- as '''make menuconfig''' presents you with --- again.

The configuration of the kernel is saved in a file named '''.config''' in the directory that holds the kernel sources.  A new kernel may have options or features the old kernel does not have, or it might not have a feature or option anymore which the old kernel still has.  The kernel configuration specifies whether the features and options of a kernel are to be enabled or not, perhaps built into the kernel, or perhaps built as modules which can be loaded into the running kernel on demand.  Hence the configuration file of the new kernel may have new entries the configuration file of the old kernel doesn't have, and it might not have entries anymore which are present in the configuration file of the old kernel.

To deal with such changes of the configuration file, the configuration file of the old kernel needs to be converted to a configuration that can be used with the new kernel.  This article shows you how to make a new kernel from new kernel sources with converting the configuration file of the old kernel.

== Make a Backup of the current kernel configuration ==

You probably do not want to lose your kernel configuration --- after all, you probably have spent quite some time to figure out the best configuration for your system.  It's easy to make a backup of it:

: {{RootCmd|cd /usr/src/linux|
  |cp .config ~/|}}

Provided that the symlink to the kernel sources has been set correctly, this copies the configuration of the currently used kernel to the home directory of root.  (In case a backup already exists, it will be overwritten.)

== Set symlink to kernel sources ==

<!--T:7-->
The symlink {{Path|/usr/src/linux}} should always point to the directory that holds the sources of the kernel which currently runs. This can be done in one of three ways:

<!--T:28-->
; 1. Installing the kernel sources with active ''symlink'' [[USE flag]]
: This will make the {{Path|/usr/src/linux}} point to your newly installed kernel sources. If necessary, it can still be modified later with the following two methods:

<!--T:29-->
; 2. Setting the symlink with '''eselect''':

</translate>
: {{RootCmd| eselect kernel list |
  |output=Available kernel symlink targets:<br /> &nbsp; [1] linux-3.14.14-gentoo *<br /> &nbsp; [2]   linux-3.16.3-gentoo}}
<translate>

<!--T:37-->
: This outputs the available kernel sources. The asterisk indicates the chosen sources. To change the kernel sources, e.g. to the second entry, do:

</translate>
: {{RootCmd|eselect kernel set 2}}
<translate>

<!--T:30-->
; 3. Setting the symlink manually:

</translate>
: {{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux |
  |ls -l /usr/src/linux |
  |output=lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo}}
<translate>

== Copy previous kernel configuration ==

The configuration of the old kernel needs to be copied to the new one. It can be found in several places:

<!--T:9-->
* In the [[procfs]] filesystem, if the kernel option ''Enable access to .config through /proc/config.gz'' was activated in your present kernel:

</translate>
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}
<translate>

<!--T:10-->
* In the {{Path|/boot}} directory, if you installed the config file there:

</translate>
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}
<translate>

<!--T:11-->
* In the kernel directory of the currently-running kernel:

</translate>
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}
<translate>

== Configure the new kernel ==

To use the configuration of the old kernel with the new kernel, it needs to be converted.  The conversion can be done by running either '''make oldconfig''' or '''make silentoldconfig'''.

'''make oldconfig''' gives you choices, '''make silentconfig''' does not.  Use either, not both.

=== make oldconfig ===

The following configuration is like the text based configuration with '''make config'''.  For new configuration options, it gives you a choice.  For example:

{{RootCmd|make oldconfig
|output=Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
}}

The string ''(NEW)'' at the end of the line marks this option as new. Left to the string in square brackets are the possible answers: ''Y''es, ''n''o, ''m''odule or ''?'' to show the help. The recommend answer is capitalized (here ''Y''). The help explains the option or driver.

Unfortunately '''make oldconfig''' doesn't show - next to the help - a lot more information for each option, like the context, so that it is sometimes difficult to give the right answer. In this case the best way to go is to remember the option name and revise it afterwards through one of the [[Kernel/Configuration#Configuration tools|graphical kernel configuration tools]].

=== make silentoldconfig ===

When you can't be bothered with choices, you can use '''make silentoldconfig''':

{{RootCmd|cd /usr/src/linux
|make silentoldconfig}}

== Build == <!--T:23-->

; In case you have external kernel modules installed (like nvidia or zfs), you may need to run '''make modules_prepare''' as described in [[Kernel/Upgrade#Reinstall external kernel modules]] before bulding the kernel.

<!--T:24-->
For this step, follow the steps in the [[Kernel/Configuration#Build|manual configuration]] article.

{{Important|Do not forget to reconfigure the [[Bootloader|bootloader]] to account for the new kernel filenames. You might want to rebuild the initramfs if you're using one, too.}}

== Reinstall external kernel modules == <!--T:17-->

<!--T:21-->
Any external kernel modules, such as [[:Category:Binary kernel modules|binary kernel modules]], need to be rebuilt for each new kernel. If the kernel hasn't been built yet, it has to first be prepared for the building of the external kernel modules:

</translate>
{{RootCmd|make modules_prepare}}
<translate>

<!--T:18-->
You can rebuild the packages using the ''@module-rebuild'' set:

</translate>
{{Emerge|@module-rebuild}}
<translate>

== Solving build problems ==

<!--T:40-->
If you are experiencing build problems while rebuilding the current kernel, it might help to sanitize the kernel sources. Make sure you backup the {{Path|.config}} file first, as the operation will remove it. Make sure not to use a <code>.bak</code> or <code>~</code> suffix as backup as <code>make distclean</code> will clean those up as well.

<!--T:41-->
{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}


== Removing old kernels == <!--T:25-->

<!--T:26-->
See the [[Kernel/Removal|kernel removal]] article. 

== External resources == <!--T:35-->

<!--T:36-->
* [http://kernelnewbies.org/LinuxChanges kernel changelog with some explanations of new features]

<!--T:27-->
[[Category:Kernel]]
</translate>
