Laptops with NVIDIA graphics cards using NVIDIA Optimus can be configured to
render scenes on the discrete NVIDIA GPU (Graphics Processing Unit) card using
x11-drivers/nvidia-drivers and copy the rendered scenes to the Intel GPU using
XRandR.

{{Note|This article is about native Optimus support using the official NVIDIA drivers ({{package|x11-drivers/nvidia-drivers}}) â€“ it is '''not''' about bumblebee; bumblebee is not used in this configuration.}}

{{Important|In the case that something should go wrong, it is recommended to have live media to assist in reverting any changes. Having a [http://www.gentoo.org/main/en/where.xml Gentoo Minimal Install CD], [http://www.sysresccd.org/ SystemRescueCD] (which is a Gentoo based recovery image), or a [[LiveUSB]] around work nicely for this purpose. '''If you choose to proceed without having a "just in case" alternative boot method do so with extreme caution!'''}}

== Installation ==

At the time this article was written version 346.22 of {{Package|nvidia-drivers}} was the most recent (unstable) version of the driver in the Portage tree, therefore examples that reference a specific version will presume 346.22. When a newer version of the driver is released, or if an older version is selected, simply substitute 346.22 for the desired version.

Installing NVIDIA drivers is easy, simply run the following: 

{{Emerge|nvidia-drivers}}

== Configuration ==
Configuring a system to use NVIDIA's propritary driver is not easy as the installation. There are several configuration files that will need to be modified in order for a system to work properly.

=== Kernel Configuration ===

Since NVIDIA Optimus will be using the integrated Intel graphics, the following kernel options will need to be enabled:

{{Kernel||<pre>
DeviceDrivers  --->
    Graphics Support  --->
        <*> Intel 8xx/9xx/Gex/G4x/HD Graphics
        [*]   Enable modetting on intel by default
</pre>}}

=== Xorg.conf Configuration ===
The best way to set the system's xorg.conf correctly would be to read the documentation NVIDIA has provided. The documentation can be found in a couple of locations. To save time, consider reading only the pages on Optimus and XRandR, as they are vital to correct configuration. If the driver has already been emerged (done in the installation step above), the documentation can be found locally at {{Path|/usr/share/doc/nvidia-drivers-346.22/README.bz2}}.

Example: Use the less command to read the local documentation:
{{Cmd|less /usr/share/doc/nvidia-drivers-346.22/README.bz2}}

It is also possible to read the documentation at NVIDIA's website by following these (external) links:

http://us.download.nvidia.com/XFree86/Linux-x86_64/346.22/README/optimus.html

http://us.download.nvidia.com/XFree86/Linux-x86_64/346.22/README/randr14.html

=== Using Specific Monitor via EDID ===
It is probably best to first try a simple configuration first like described in the NVIDIA driver manual:

http://us.download.nvidia.com/XFree86/Linux-x86_64/346.22/README/randr14.html

==== Saving the Monitor's EDID ====
Some laptops/notebooks may benefit from saving the EDID screen information to a file so it can be passed to the NVIDIA and Intel modesetting drivers. The EDID information can be saved using the read-edid utility.

{{RootCmd|emerge -v x11-misc/read-edid}}
{{RootCmd|get-edid >/lib/firmware/edid/1920x1080_Clevo_W670SR.bin}}

The EDID information is provided to the Intel GPU (Graphics Processing Unit) by specifying its
location in the kernel boot parameter:

 <nowiki>
drm_kms_helper.edid_firmware=edid/1920x1080_clevo_W670SR.bin</nowiki>

If you are using the grub boot loader on Gentoo this can be configured in the file /etc/default/grub:

{{File|/etc/default/grub||<pre>
GRUB_CMDLINE_LINUX_DEFAULT="drm_kms_helper.edid_firmware=edid/1920x1080_clevo_W670SR.bin"
GRUB_GFXMODE=1920x1080
</pre>}}

Note: On Sabayon linux the kernel boot parameters should be specified in the /etc/default/sabayon-grub file
instead of /etc/default/grub.

==== Example Xorg.conf Using Specific Monitor EDID ====

{{File|/etc/X11/xorg.conf||<pre>
# nvidia-xconfig: X configuration file generated by nvidia-xconfig
# nvidia-xconfig:  version 331.20  (buildmeister@swio-display-x86-rhel47-05)  Wed Oct 30 18:20:53 PDT 2013

Section "ServerLayout"
    Identifier     "Layout0"
    Screen      0  "Screen0"
    Inactive       "intel"
    InputDevice    "Keyboard0" "CoreKeyboard"
    InputDevice    "Mouse0" "CorePointer"
EndSection

Section "Files"
EndSection

Section "InputDevice"
    # generated from data in "/etc/conf.d/gpm"
    Identifier     "Mouse0"
    Driver         "mouse"
    Option         "Protocol"
    Option         "Device" "/dev/input/mice"
    Option         "Emulate3Buttons" "no"
    Option         "ZAxisMapping" "4 5"
EndSection

Section "InputDevice"
    # generated from default
    Identifier     "Keyboard0"
    Driver         "kbd"
EndSection

Section "Monitor"
    Identifier     "Monitor0"
    VendorName     "Unknown"
    ModelName      "Unknown"
EndSection

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    # Stuff on the net says to use BusID "PCI:1:0:0" but the manual says to use "1@0:0:0"
    BusID          "1@0:0:0"
    Option         "ConnectedMonitor" "DFP-0"
    Option         "CustomEDID" "DFP-0:/lib/firmware/edid/1920x1080_Clevo_W670SR.bin"
    Option         "UseEDID" "True"
    Option         "ModeValidation" "NoVirtualSizeCheck"
    # Option       "ModeDebug" "True"
EndSection

Section "Screen"
    Identifier     "Screen0"
    Device         "Device0"
    Monitor        "Monitor0"
    Option         "RenderAccel" "True"
    Option         "NoRenderExtension" "False"
    Option         "AllowGLXWithComposite" "True"
    Option         "AddARGBGLXVisuals" "True"
    Option         "DamageEvents" "True"
    Option         "ConnectToAcpid" "True"
    SubSection     "Display"
        Depth       24
        Modes      "1920x1080"
    EndSubSection
EndSection

Section "Device"
    Identifier     "intel"
    Driver         "modesetting"
    Option         "CustomEDID" "DFP-0:/lib/firmware/edid/1920x1080_Clevo_W670SR.bin"
EndSection

Section "Screen"
    Identifier    "intel"
    Device        "intel"
    SubSection     "Display"
        Depth       24
        Modes      "1920x1080"
    EndSubSection
    Monitor        "Monitor0"
EndSection

Section "Extensions"
    Option         "Composite" "Enable"
EndSection
</pre>}}

== Configuration prior to starting X ==

Per NVIDIA's [http://us.download.nvidia.com/XFree86/Linux-x86/346.22/README/randr14.html instructions], the following commands are required before starting X:

<nowiki>
$ xrandr --setprovideroutputsource modesetting NVIDIA-0
$ xrandr --auto
</nowiki>

This is to say any Display Manager that starts X-Windows then asks the user to log in will result in a black screen unless the above  XRandR commands are run ''before'' asking the user to log in.

{{Warning|The XRandR commands must be added to the system's X session startup scripts (such as ~/.xinitrc) in order for the X display to start using modesetting. Failed to do so will result in a black screen.}}

Use the XRandR command to find the appropriate graphics device:

<nowiki>
$ xrandr --listproviders
</nowiki>

== Display Manager Configuration ==

=== Qingy ===

{{RootCmd|emerge -v sys-apps/qingy}}

==== for menu option (a) KDE-4 ====

Add the xrandr commands to the end of the file:

 <nowiki>
/etc/X11/Sessions/KDE-4</nowiki>

==== for menu option (b) Your .xsession ====

Add the xrandr commands to the file:

 <nowiki>
~/.xsession</nowiki>

==== qingy directfb ====

In the directfb configuration file:

<nowiki>
/etc/directfbrc
</nowiki>

It is necessary to set the busid parameter to the BusID of the Intel graphics card as reported by the lspci command:

{{RootCmd|lspci}}

For example, if lspci says the Intel graphics card is on BusID 00:02.0, then add the following line to {{Path}/etc/directfbrc}}

{{File|/etc/directfbrc||<pre>
busid=0:02:0
</pre>}}

=== CDM ===

{{RootCmd|emerge -v x11-misc/cdm}}

Add the xrandr commands to the file:

<nowiki>
~/.xinitrc
</nowiki>

=== KDM ===

{{RootCmd|emerge -v kde-base/kdm}}

Add the xrandr commands to the file:

<nowiki>
/usr/share/config/kdm/Xsetup
</nowiki>

=== MDM ===
For Mint desktop Manager fetch the ebuild and install {{Package|gnome-base/mdm}}

{{RootCmd|emerge -v gnome-base/mdm}}

Add the xrandr commands to the file:

<nowiki>
/etc/X11/mdm/Init/Default
</nowiki>

=== XDM ===

Add the xrandr commands to the file:

<nowiki>
/usr/lib/X11/xdm/Xsetup_0
</nowiki>

If the system is a 32-bit system, modify:

<nowiki>
/usr/lib64/X11/xdm/Xsetup_0
</nowiki>

If a using a 64-bit system, then modify:

<nowiki>
/etc/X11/xdm/xdm-config
</nowiki>

Edit the follwing line to point to another script that will run the xrandr commands:

<nowiki>
DisplayManager._0.setup: /usr/lib/X11/xdm/Xsetup_0
</nowiki>

== See Also ==

== External Links ==
