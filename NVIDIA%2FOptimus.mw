{{InfoBox stack|{{InfoBox homepage|http://www.nvidia.com/object/optimus_technology.html|header=true}}|{{InfoBox wikipedia|Nvidia Optimus}}}}

Laptops with Nvidia graphics cards using Nvidia Optimus can be configured to render scenes on the discrete Nvidia GPU (Graphics Processing Unit) card using {{Package|x11-drivers/nvidia-drivers}} and copy the rendered scenes to the Intel GPU using XRandR.

{{Note|This article is about native Optimus support using the official Nvidia drivers ({{package|x11-drivers/nvidia-drivers}}) â€“ it is ''not'' about {{c|bumblebee}}; for a configuration that uses {{c|bumblebee}}, see the [[NVIDIA/Bumblebee|Bumblebee Page]].}}

== Installation ==

=== Kernel ===

Since Nvidia Optimus will be using the integrated Intel graphics for modesetting, the following kernel options will need to be enabled:

{{KernelBox|title=Linux kernel 4.3.3+|1=
Device Drivers  --->
   Graphics Support  --->
      Direct Rendering Manager (Xfree86 4.1.0 and higher DRI support)   --->
         [*]   Enable legacy fbdev support for your modesetting driver 
      <*> Intel 8xx/9xx/G3x/G4x/HD Graphics
         [*]   Enable preliminary support for prerelease Intel hardware by default
}}

{{Important|In the case that something should go wrong, it is recommended to have live media to assist in reverting any changes. Having a [http://get.gentoo.org/ Gentoo Minimal Install CD], [http://www.sysresccd.org/ SystemRescueCD] (which is a Gentoo based recovery image), or a [[LiveUSB]] around work nicely for this purpose. If you choose to proceed without having a "just in case" alternative boot method '''proceed with extreme caution!'''}}

{{Note|At the time this article was written version 343.36 of {{Package|x11-drivers/nvidia-drivers}} was the most recent (stable) version of the driver in the Portage tree, therefore examples that reference a specific version will presume version 343.36 is being used. When a newer version of the driver is released, or if an older version is selected, simply substitute 343.36 for the desired version.}}

=== USE flags ===

{{USEflag|package=x11-drivers/nvidia-drivers}}

=== Emerge ===

Installing Nvidia drivers is easy, run the following: 
{{Emerge|x11-drivers/nvidia-drivers}}

{{Note|Since xorg 1.18 if the intel screen is always disabled enable <code>glamor</code> USE flag on xorg-server}}

== Configuration ==

Configuring a system to use Nvidia's proprietary driver is not easy as the installation. There are several configuration files that will need to be modified in order for a system to work properly.

=== Kernel modules ===

If the user has chosen to not use built-in modules, then the init system should load the necessary modules on system boot. If {{Path|/proc/config.gz}} is available, this can verified by running the following command:

{{Cmd|zgrep "CONFIG_MODULES{{=}}" /proc/config.gz|output=
CONFIG_MODULES=y
}}

If the output returns <var>CONFIG_MODULES</var> set to <code>N</code>, then the kernel will need recompiled with support to load modules. Information about that can be found over here. After module loading support has been added, return to this article and continue reading.

Create a new file called {{Path|nvidia.conf}} in the {{Path|/etc/modules-load.d}} directory. It should contain the nvidia module name:

{{FileBox|filename=/etc/modules-load.d/nvidia.conf|1=
nvidia
}}

<br />
==== OpenRC ====

Verify the modules-load init script has been added to the boot runlevel (it should be by default, but double check):

{{RootCmd|rc-update add modules boot}}

==== Systemd ====

Check the status of the systemd-modules-load.service to verify things are running smoothly. If issues arise this service unit will be the place to check: 

{{RootCmd|systemctl start systemd-modules-load.service}}

=== xorg.conf ===

The best way to set the system's {{Path|xorg.conf}} correctly would be to read the documentation Nvidia has provided. The documentation can be found in a couple of locations. To save time, consider reading only the pages on Optimus and XRandR, as they are vital to correct configuration. If the driver has already been emerged (done in the installation step above), the documentation can be found locally at {{Path|/usr/share/doc/nvidia-drivers-343.36/README.bz2}}.

Example: Use the {{c|less}} command to read the local documentation:

{{Cmd|less /usr/share/doc/nvidia-drivers-343.36/README.bz2}}

It is also possible to read the documentation at Nvidia's website by following these (external) links:

http://us.download.nvidia.com/XFree86/Linux-x86_64/343.36/README/optimus.html

http://us.download.nvidia.com/XFree86/Linux-x86_64/343.36/README/randr14.html

Replace 343.36 with your version of nvidia-drivers e.g. 390.42 to get the most suitable configuration.

For a quick example here on the wiki, view [[NVIDIA/Optimus/xorg.conf|this xorg.conf file]].

{{Warning|The xorg.conf is an example here and since the configuration might change in any version of nvidia-drivers you had better consult the nvidia document noted above.}}

[[NVidia/nvidia-drivers#Xorg_says_it_can.27t_find_any_screens|How to find the busid]]

=== Using a specific monitor via EDID ===

It is probably best to first try a simple configuration first like described in the Nvidia driver manual:

http://us.download.nvidia.com/XFree86/Linux-x86_64/346.22/README/randr14.html

==== Saving the monitor's EDID ====

{{Important|Ensure the currently running kernel has <var>CONFIG_I2C_CHARDEV</var> enabled and the resulting i2c-dev module loaded or compiled monolithically for {{c|read-edid}} to work.}}

Some laptops/notebooks may benefit from saving the EDID screen information to a file so it can be passed to the Intel modesetting driver. The EDID information can be saved using the {{c|read-edid}} utility.

{{Emerge|x11-misc/read-edid}}

{{RootCmd|get-edid > /lib/firmware/edid/1920x1080_Clevo_W670SR.bin}}

The EDID information is provided to the Intel GPU (Graphics Processing Unit) by specifying its
location in the kernel boot parameter:

<code>drm_kms_helper.edid_firmware=edid/1920x1080_clevo_W670SR.bin</code>

If the GRUB2 bootloader is being used, this can be configured in the file {{Path|/etc/default/grub}}

{{FileBox|filename=/etc/default/grub|lang=bash|1=
GRUB_CMDLINE_LINUX_DEFAULT="drm_kms_helper.edid_firmware=edid/1920x1080_clevo_W670SR.bin"
GRUB_GFXMODE=1920x1080
}}

Note: If using Sabayon Linux, the kernel boot parameters should be specified in the {{Path|/etc/default/sabayon-grub}} file
instead of {{Path|/etc/default/grub}} file.

==== Example xorg.conf for EDID ====

See [[NVIDIA_Driver_with_Optimus_Laptops/EDID_Xorg.conf_Example| EDID xorg.conf Example]] to view an example {{Path|xorg.conf}} using an EDID for a specific monitor.

=== Before starting X ===

Per Nvidia's [http://us.download.nvidia.com/XFree86/Linux-x86/346.22/README/randr14.html instructions], the following commands are required before starting X:

{{CodeBox|title=XRandR commands:|lang=bash|1=
xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto
}}

This is to say any Display Manager that starts X-Windows then asks the user to log in '''''will''''' result in a black screen unless the above {{c|xrandr}} commands are run ''before'' asking the user to log in.

{{Warning|The {{c|xrandr}} commands must be added to the system's X session start up scripts (such as {{Path|~/.xinitrc}}) in order for the X display to start using modesetting. Failure to do so will result in a black screen.}}

NOTE: If you get a black screen with no back-lighting from the previous steps, creating .xsessionrc and placing the xinitrc commands in there COULD fix it.

Use the {{c|xrandr}} command to find the appropriate graphics device:

{{RootCmd|xrandr --listproviders}}

=== Display manager configuration ===

The following shows a list of where to add the required xrandr commands, sorted by desktop.

{{Note|For some window managers, the config files are not located under {{Path|/etc}}. In case of updates of these window managers, your edits may get lost causing black screens. In order to get warned by emerge if it wants to override your changes, config-protect the corresponding files to your {{Path|/etc/portage/make.conf}} like, e.g. in case of SDDM:

{{FileBox|filename=/etc/portage/make.conf|title=Protect your changes from updates|lang=bash|1=
CONFIG_PROTECT="/usr/share/sddm/scripts/Xsetup"
}}

}}

{{Warning|If you are sure you have done every step accordingly and still you get a black screen, chances are that the display manager your are using might have problems. Switch to another display manager like {{Package|x11-misc/lightdm}}. }}
==== Qingy ====


{{Emerge|sys-apps/qingy}}

===== For menu option (A) KDE-4 =====

Add the {{c|xrandr}} commands to the end of the {{Path|/etc/X11/Sessions/KDE-4}} file: 

{{FileBox|filename=/etc/X11/Sessions/KDE-4|title=KDE-4's X session file|lang=bash|1=
xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto
}}

===== For menu option (B) your .xsession =====

Add the {{c|xrandr}} commands to the end of the {{Path|~/.xsession}} file.

===== Qingy DirectFB =====

In the {{Path|/etc/directfbrc}} configuration file. It is necessary to set the <code>busid</code> variable to the BusID of the Intel graphics card as reported by the {{c|lspci}} command:

{{RootCmd|lspci}}

For example, if {{c|lspci}} says the Intel graphics card is on BusID 00:02.0, then add the following line to {{Path}/etc/directfbrc}}

{{FileBox|filename=/etc/directfbrc|lang=bash|1=
busid=0:02:0
}}

==== The Console Display Manager (CDM) ====

{{Emerge|x11-misc/cdm}}

Add the {{c|xrandr}} commands to {{Path|~/.xinitrc}} file: 

==== KDE Display Manager (KDM) ====

{{Emerge|kde-base/kdm}}

Add the {{c|xrandr}} commands to the {{Path|/usr/share/config/kdm/Xsetup}} file and protect them like described above.

==== Simple Desktop Display Manager (SDDM) ====

Add the {{c|xrandr}} commands to the {{Path|/usr/share/sddm/scripts/Xsetup}} file and protect them like described above.

==== Mint Desktop Manager (MDM) ====

For Mint Desktop Manager fetch the ebuild and install {{Package|gnome-base/mdm}}:

{{Emerge|gnome-base/mdm}}

Add the {{c|xrandr}} commands to the {{Path|/etc/X11/mdm/Init/Default}} file: 

==== X Display Manager (XDM) ====

Add the {{c|xrandr}} commands to the {{Path|/usr/lib/X11/xdm/Xsetup_0}} file and protect them like described above.

<b>NOTE:</b> if the system is a 32-bit system, add the commands to the {{Path|/usr/lib64/X11/xdm/Xsetup_0}} file.

If using a 64-bit system, edit the {{Path|/etc/X11/xdm/xdm-config}} configuration file and change the following line to point to the {{c|Xsetup_0}} file created above:

{{CodeBox|filename=/etc/X11/xdm/xdm-config|title=X Display Manager Example|lang=bash|1=
DisplayManager._0.setup: /usr/lib/X11/xdm/Xsetup_0
}}

==== LXDE Display Manager (LXDM) ====

Add the following lines to {{Path|/etc/lxdm/LoginReady}}:

{{CodeBox|filename=/etc/lxdm/LoginReady|title=LXDE Display Manager Example|lang=bash|1=
xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto
}}

==== Gnome Display Manager (GDM) ====

For the Gnome Desktop Manager fetch the ebuild and install {{Package|gnome-base/gdm}}:

{{Emerge|gnome-base/gdm}}

Create two .desktop files:

{{FileBox|filename=/etc/xdg/autostart/optimus.desktop & /usr/share/gdm/greeter/autostart/optimus.desktop|title=Desktop Entries|lang=bash|1=
[Desktop Entry]
Type=Application
Name=Optimus
Exec=sh -c "xrandr --setprovideroutputsource modesetting NVIDIA-0; xrandr --auto"
NoDisplay=true
X-GNOME-Autostart-Phase=DisplayServer

}}

Make sure that GDM uses X as default backend (this does only affect {{Package|gnome-base/gdm}}. {{Package|gnome-base/gnome-shell}} will still use wayland when USE="wayland" is enabled):

{{FileBox|filename=/etc/gdm/custom.conf|title=custom.conf|lang=bash|1=
# GDM configuration storage

[daemon]
# Uncoment the line below to force the login screen to use Xorg
WaylandEnable=false

[security]

[xdmcp]

[chooser]

[debug]
# Uncomment the line below to turn on debugging
#Enable=true

}}

== Troubleshooting ==

Since there are many files to configure and because the Nvidia's proprietary support for Optimus in Linux is buggy, it is rather easy to create a faulty Optimus configuration. It is possible something was typed incorrectly, or a certain configuration was not compatible with the hardware being used. Whatever the case, a broken configuration means that debugging is required.

To debug, carefully read the logs from {{c|dmesg}} ({{Path|/var/log/dmesg}}) and Xorg ({{Path|/var/log/Xorg.0.log}}) with a favorite text editor; they are the best indicators to find issues. If something irregular is discovered, make changes to the respective configuration files. Other areas to inspect for debugging include any of the configuration files that were modified through the course of this article (the kernel's {Path|.config}}, kernel boot parameters passed at {{Path|/etc/default/grub}}, the Xorg's {{Path|/etc/X11/xorg.conf}} file, etc.). Continue checking the files as necessary then reboot the system and try again. Many attempts may be required in order to obtain a working configuration! It is not exciting process; time ''could'' be spent on something more interesting, but if debugging is required in order to get Optimus working then it needs to happen.

{{Note|In a shell to quickly find warnings and errors:
<code>grep -E 'WW&#124;EE' /var/log/Xorg.0.log</code>}}

{{Note|When viewing {{Path|/var/log/Xorg.0.log}} using a text editor such as {{Package|app-editors/vim}}, search for <code>(WW)</code> or <code>(EE)</code> to quickly find warnings and errors. This will speed up debugging time considerably.}}

To aid in distinguishing between important and unimportant messages in {{Path|/var/log/dmesg}} and {{Path|/var/log/Xorg.0.log}} files, working examples have been provided at these sub-articles:

=== Specific models ===

* [[Lenovo Thinkpad W530]] - In short, for all the screens to work, set the configuration to discrete mode in the motherboard firmware.

=== D-Bus ===

* [[NVIDIA_Driver_with_Optimus_Laptops/Debugging_D-Bus|Troubleshooting D-Bus]]

=== Xorg ===

* [[NVIDIA_Driver_with_Optimus_Laptops/Debugging_Xorg|Troubleshooting Xorg]]

== See also ==

* [[nouveau & nvidia-drivers switching]]
* [[NVidia/nvidia-drivers]]

== External resources ==

* [http://www.nvidia.com Official Nvidia website]
[[Category:NVIDIA]]
