Laptops with Nvidia graphics cards using Nvidia Optimus can be configured to
render scenes on the discrete Nvidia GPU (Graphics Processing Unit) card using
x11-drivers/nvidia-drivers and copy the rendered scenes to the Intel GPU using
XRandR.

{{Note|This article is about native Optimus support using the official Nvidia drivers ({{package|x11-drivers/nvidia-drivers}}) â€“ it is '''not''' about bumblebee; bumblebee is not used in the following configuration.}}

== Installation ==

{{Important|In the case that something should go wrong, it is recommended to have live media to assist in reverting any changes. Having a [http://get.gentoo.org/ Gentoo Minimal Install CD], [http://www.sysresccd.org/ SystemRescueCD] (which is a Gentoo based recovery image), or a [[LiveUSB]] around work nicely for this purpose. If you choose to proceed without having a "just in case" alternative boot method '''proceed with extreme caution!'''}}

{{Note|At the time this article was written version 343.36 of {{Package|x11-drivers/nvidia-drivers}} was the most recent (stable) version of the driver in the Portage tree, therefore examples that reference a specific version will presume version 343.36 is being used. When a newer version of the driver is released, or if an older version is selected, simply substitute 343.36 for the desired version.}}

Installing Nvidia drivers is easy, run the following: 

{{Emerge|x11-drivers/nvidia-drivers}}

{{USEflag
|package=x11-drivers/nvidia-drivers
|desc=Nvidia Accelerated Graphics Driver ''USE'' Flags:
|X+yes+yes
|acpi+yes+yes
|gtk2+++Install nvidia-settings with support for GTK+ 2
|gtk3+yes++Install nvidia-settings with support for GTK+ 3
|multilib+yes+yes
|pax_kernel
|tools+yes+yes
|uvm+yes+yes+Install the Unified Memory kernel module (nvidia-uvm) for sharing memory between CPU and GPU in CUDA programs
|}}

== Configuration ==
Configuring a system to use Nvidia's proprietary driver is not easy as the installation. There are several configuration files that will need to be modified in order for a system to work properly.

=== Kernel Configuration ===

Since Nvidia Optimus will be using the integrated Intel graphics for modesetting, the following kernel options will need to be enabled:

{{KernelBox|lang=bash|1=
DeviceDrivers  --->
    Graphics Support  --->
        <*> Intel 8xx/9xx/Gex/G4x/HD Graphics
        [*]   Enable modesetting on intel by default
}}

=== Xorg.conf Configuration ===
The best way to set the system's {{Path|xorg.conf}} correctly would be to read the documentation Nvidia has provided. The documentation can be found in a couple of locations. To save time, consider reading only the pages on Optimus and XRandR, as they are vital to correct configuration. If the driver has already been emerged (done in the installation step above), the documentation can be found locally at {{Path|/usr/share/doc/nvidia-drivers-343.36/README.bz2}}.

Example: Use the <kbd>less</kbd> command to read the local documentation:
{{Cmd|less /usr/share/doc/nvidia-drivers-343.36/README.bz2}}

It is also possible to read the documentation at Nvidia's website by following these (external) links:

http://us.download.nvidia.com/XFree86/Linux-x86_64/343.36/README/optimus.html

http://us.download.nvidia.com/XFree86/Linux-x86_64/343.36/README/randr14.html

=== Using Specific Monitor via EDID ===
It is probably best to first try a simple configuration first like described in the Nvidia driver manual:

http://us.download.nvidia.com/XFree86/Linux-x86_64/346.22/README/randr14.html

==== Saving the Monitor's EDID ====
Some laptops/notebooks may benefit from saving the EDID screen information to a file so it can be passed to the Intel modesetting driver. The EDID information can be saved using the <kbd>read-edid</kbd> utility.

{{Emerge|x11-misc/read-edid}}
{{RootCmd|get-edid > /lib/firmware/edid/1920x1080_Clevo_W670SR.bin}}

The EDID information is provided to the Intel GPU (Graphics Processing Unit) by specifying its
location in the kernel boot parameter:

<code>drm_kms_helper.edid_firmware=edid/1920x1080_clevo_W670SR.bin</code>

If the GRUB2 bootloader is being used, this can be configured in the file {{Path|/etc/default/grub}}

{{FileBox|filename=/etc/default/grub|lang=bash|1=
GRUB_CMDLINE_LINUX_DEFAULT="drm_kms_helper.edid_firmware=edid/1920x1080_clevo_W670SR.bin"
GRUB_GFXMODE=1920x1080
}}

Note: If using Sabayon Linux, the kernel boot parameters should be specified in the {{Path|/etc/default/sabayon-grub}} file
instead of {{Path|/etc/default/grub}} file.

==== Example Xorg.conf for EDID ====

See [[NVIDIA_Driver_with_Optimus_Laptops/EDID_Xorg.conf_Example| EDID Xorg.conf Example]] to view an example Xorg.conf using an EDID for a specific monitor.

== Configuration Prior to Starting X ==

Per Nvidia's [http://us.download.nvidia.com/XFree86/Linux-x86/346.22/README/randr14.html instructions], the following commands are required before starting X:

{{CodeBox|title=XRandR commands:|lang=bash|1=
xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto
}}

This is to say any Display Manager that starts X-Windows then asks the user to log in '''''will''''' result in a black screen unless the above <kbd>xrandr</kbd> commands are run ''before'' asking the user to log in.

{{Warning|The <kbd>xrandr</kbd> commands must be added to the system's X session start up scripts (such as {{Path|~/.xinitrc}}) in order for the X display to start using modesetting. Failed to do so will result in a black screen.}}

Use the <kbd>xrandr</kbd> command to find the appropriate graphics device:

{{RootCmd|xrandr --listproviders}}

=== Display Manager Configuration ===

==== Qingy ====


{{Emerge|sys-apps/qingy}}


===== For Menu Option (A) KDE-4 =====

Add the <kbd>xrandr</kbd> commands to the end of the {{Path|/etc/X11/Sessions/KDE-4}} file: 

{{FileBox|filename=/etc/X11/Sessions/KDE-4|title=KDE-4's X session file|lang=bash|1=
xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto
}}

===== For Menu Option (B) Your .xsession =====

Add the <kbd>xrandr</kbd> commands to the end of the {{Path|~/.xsession}} file.

===== Qingy DirectFB =====

In the {{Path|/etc/directfbrc}} configuration file. It is necessary to set the <code>busid</code> parameter to the BusID of the Intel graphics card as reported by the <kbd>lspci</kbd> command:

{{RootCmd|lspci}}

For example, if <kbd>lspci</kbd> says the Intel graphics card is on BusID 00:02.0, then add the following line to {{Path}/etc/directfbrc}}

{{FileBox|filename=/etc/directfbrc|lang=bash|1=
busid=0:02:0
}}

==== The Console Display Manager (CDM) ====

{{Emerge|x11-misc/cdm}}

Add the <kbd>xrandr</kbd> commands to {{Path|~/.xinitrc}} file: 

==== KDE Display Manager (KDM) ====

{{Emerge|kde-base/kdm}}

Add the <kbd>xrandr</kbd> commands to the {{Path|/usr/share/config/kdm/Xsetup}} file.

==== Mint Desktop Manager (MDM) ====
For Mint Desktop Manager fetch the ebuild and install {{Package|gnome-base/mdm}}:

{{Emerge|gnome-base/mdm}}

Add the <kbd>xrandr</kbd> commands to the {{Path|/etc/X11/mdm/Init/Default}} file: 

==== X Display Manager (XDM) ====

Add the <kbd>xrandr</kbd> commands to the {{Path|/usr/lib/X11/xdm/Xsetup_0}} file: 

If the system is a 32-bit system, add the commands to the {{Path|/usr/lib64/X11/xdm/Xsetup_0}} file.

If a using a 64-bit system, then add the commands to {{Path|/etc/X11/xdm/xdm-config}} Then edit the following line to point to another script that will run the <kbd>xrandr</kbd> commands:

{{CodeBox|filename=/etc/X11/xdm/xdm-config|title=X Display Manager Example|lang=bash|1=
DisplayManager._0.setup: /usr/lib/X11/xdm/Xsetup_0
}}

== Debugging ==

Since there are many files to configure and because the Nvidia's proprietary support for Optimus in Linux is buggy, it is rather easy to create a faulty Optimus configuration. It is possible something was typed incorrectly, or a certain configuration was not compatible with the hardware being used. Whatever the case, a broken configuration means that debugging is required.

To debug, carefully read the logs from <kbd>dmesg</kbd> ({{Path|/var/log/dmesg}}) and Xorg ({{Path|/var/log/Xorg.0.log}}) with a favorite text editor; they are the best indicators to find issues. If something irregular is discovered, make changes to the respective configuration files. Other areas to inspect for debugging include any of the configuration files that were modified through the course of this article (the kernel's {Path|.config}}, kernel boot parameters passed at {{Path|/etc/default/grub}}, the Xorg's {{Path|/etc/X11/xorg.conf}} file, etc.). Continue checking the files as necessary then reboot the system and try again. Many attempts may be required in order to obtain a working configuration! It is not exciting process; time ''could'' be spent on something more interesting, but if debugging is required in order to get Optimus working then it needs to happen.

{{Note|When viewing {{Path|/var/log/Xorg.0.log}} using a text editor such as {{Package|app-editors/vim}}, search for <code>(EE)</code> to quickly find errors. This will speed up debugging time considerably.}}

To aid in distinguishing between important and unimportant messages in {{Path|/var/log/dmesg}} and {{Path|/var/log/Xorg.0.log}} files, working examples have been provided at these sub-articles:

=== Debugging D-Bus ===
[[NVIDIA_Driver_with_Optimus_Laptops/Debugging_D-Bus|Debugging D-Bus]]

=== Debugging Xorg ===
[[NVIDIA_Driver_with_Optimus_Laptops/Debugging_Xorg|Debugging Xorg]]

== See Also ==
* [[nouveau & nvidia-drivers switching]]
* [[NVidia/nvidia-drivers]]

== External Links ==
[http://www.nvidia.com Official Nvidia website]
