<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

이 글은 젠투 리눅스의 크론 설치 및 사용법을 설명합니다.

== 크론 기초 ==

=== 크론이 하는 일 ===

크론은 <code>crontab</code>에 입력한 명령을 기반으로 하여 일정에 따라 계획한 작업을 실행하는 데몬입니다. 각 시간마다 작업을 실행하며 사용자 크론탭을 실행할 크론 작업이 있는지 살펴보는 역할을 합니다. 

{{Note|Notice that <tt>crontab</tt> is both the name of a list of cron-jobs as well as the name of the command to edit that list.}}

=== 사실상 표준이나 다름 없는 크론 ===

There are a few cron implementations to choose from in Portage. All of them offer a similar interface, namely the use of <tt>crontab</tt> or a similar command. There is also a related utility called Anacron which is meant to work with cron on systems that are not continuously running. 

{{Package|sys-process/cronbase}}에 따라 존재하는 모든 크론 패키지를 참고할 만 합니다. 언급한 패키지는 다른 어떤 크론 패키지에 기술적으로 의존하는건 아니지만, 대부분의 사용자가 만족할 수 있는 크론 같은 기능을 제공합니다. 

Before getting started working with cron, a proper cron implementation has to be selected . In this article information is provided for each cron implementation available in Gentoo Linux.

== 어떤 크론이 적합할까요? ==

=== vixie-cron ===

빅시 크론(Vixie-cron)은 SysV 크론 기반으로 완전한 기능을 갖춘 구현체입니다. 각각의 사용자는 자신의 크론탭을 지니고 있으며, 크론탭에 환경 변수를 지정할 수 있습니다. 다른 크론 변형과는 달리, SELinux와 PAM을 지원합니다. Dcron과는 적은 일부 아키텍처만 지원하지만, Fcron보다는 많이 지원합니다. 

<code>sys-process/vixie-cron</code>의 기능은 다음과 같습니다: 

* SELinux 지원
* PAM 지원  ({{Path|/etc/security/limits.conf}})
* 크론탭에서의 환경변수 설정 (PATH, SHELL, HOME 등)
* 각각의 사용자가 크론탭을 보유할 수 있음. {{Path|cron.allow}}와 {{Path|cron.deny}}에서 접근 권한을 다룹니다. 

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) is a fork of vixie-cron done by [https://fedorahosted.org/cronie/wiki Fedora]. Because of it being a fork it has the same feature set the original vixie-cron provides. Additionally cronie comes with an anacron implementation which must be enabled through the <code>anacron</code> USE flag.

=== dcron (Dillon's Cron) ===

[http://www.jimpryor.net/linux/dcron.html Dcron] aims to be a simple, elegant and secure implementation of cron. It does not allow the specification of environment variables in crontabs and all cron-jobs are run from {{Path|/bin/sh}}. Like vixie-cron, each user has his own crontab. 

{{Package|sys-process/dcron}}의 기능은 다음과 같습니다: 

* Fast, simple and free of unnecessary features;
* Access to <tt>crontab</tt> is limited to the cron group, i.e. it doesn't rely on any external faculties.

=== fcron ===

fcron은 빅시 크론과 아나크론을 대체하는것이 목표입니다. 지속적으로 동작하지 않는 시스템에서 동작하도록 설쳬했으며 추가 기능을 포함했습니다. 작업 시작 강제, 작업 직렬화 관리, 작업에 적절한 값 할당, 시스템 시작히 실행할 작업 배치 능력을 보유하고 있습니다. 더 알아보시려면 [http://fcron.free.fr/ fcron's 홈페이지]를 보십시오. 

{{Package|sys-process/fcron}}의 기능은 다음과 같습니다: 

* Designed to work on systems that are not continuously running, i.e. it can run a job after restarting if it was missed;
* Setting of environment variables and many other options in crontabs;
* Enhanced crontab syntax with support for many new features;
* Each user can have a personal crontab, access is controlled by {{Path|cron.allow}} and {{Path|cron.deny}}


=== bcron ===

bcron은 안전한 동작을 개념으로 하여 설계한 새로운 크론 시스템입니다. 이를 실행하려면 시스템은 몇가지로 나누어 놓은 프로그램으로 쪼개져야 하는데, 각각의 프로그램은 서로간의 통신을 엄격하게 관리하면서 각자 맏은 작업을 처리해야 합니다. 사용자 인터페이스는 비슷한 체계 의 기능을 대체하지만, 내부적으론 상당히 다릅니다. [http://untroubled.org/bcron http://untroubled.org/bcron] 홈페이지를 살펴보십시오. 

{{Package|sys-process/bcron}}의 기능은 다음과 같습니다: 

* Drop-in replacement for vixie-cron;
* Multiprocess design;
* Native daylight savings time support.

=== 아나크론 ===

아나크론(Anacron)은 크론 데몬이 아니고 크론과 같이 동작하는 프로그램입니다. 지정한 날짜 간격대로 명령을 실행하며 시스템이 계속 동작함을 고려하진 않습니다. 시스템이 멈추었을때 놓친 작업을 실행합니다. 아나크론은 보통 각각의 날짜별로 실행할 크론 데몬과 관련이 있습니다.

== 크론 사용 ==

=== 설치 ===

Select the right cron implementation for the job, and then emerge it:

{{Emerge|dcron}}

Make sure the cron daemon of choice has been added to the system's init process; without this step the cron daemon will not perform its job.
{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

Optionally, if Fcron has '''not''' been installed, installing Anacron as a helper to the cron daemon might be a wise choice. 

{{Emerge|anacron}}

Again, do not forget to add anacron to the system's init process.
{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== 시스템 크론탭 ===

The post install messages from some of these cron packages instruct the user to run <tt>crontab /etc/crontab</tt>. The {{Path|/etc/crontab}} file is the ''system crontab''. A cron installation can use it in conjunction with {{Package|sys-process/cronbase}} to run the scripts in {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}. Note that only vixie-cron and cronie schedule jobs in {{Path|/etc/crontab}} automatically. Dcron and fcron users will need to run <tt>crontab /etc/crontab</tt> every time they make changes to the {{Path|/etc/crontab}} file.

Please note that jobs scheduled in the system crontab might not show up in the list of cron-jobs displayed by running <tt>crontab -l</tt>. 

Of course, users can choose not to use any system crontab at all. If dcron or fcron has been chosen, do '''not''' run <tt>crontab /etc/crontab</tt>. If vixie-cron, cronie or bcron has been chosen comment all lines in {{Path|/etc/crontab}}. 

A quick and easy way to comment out all the lines in a file is by using the sed command. Run the following command to comment out all the lines in {{Path|etc/crontab}}
{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== 신뢰하는 사용자에게 크론 접근 권한 부여하기 ===

For users other than root to have access to the cron daemon, read this section, otherwise proceed to the next section: [[#Scheduling_cron-jobs|Scheduling cron-jobs]]. 

{{Note|Giving another user access to crontab does not let him run cron-jobs as root. For a user to be able to edit the root crontab, look into using <tt>sudo</tt> ({{Package|app-admin/sudo}}). Please read the [[Sudo|Gentoo Sudo(ers) Guide]] for more details.}}

No matter which cron package has been chosen, to allow a user to use crontab he will first have to be in the cron group. As an example, to add the user ''wepy'' to the cron group run: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note|When adding a user to the cron group, make sure that the user logs out and logs back in for the group change to take effect.}}

When using '''dcron''', the above step is all that is needed to give a user access to crontab. Dcron users may proceed to the next section [[#Scheduling_cron-jobs|Scheduling cron-jobs]], all others need to keep reading. 

When using '''fcron''', edit the {{Path|/etc/fcron/fcron.deny}} and {{Path|/etc/fcron/fcron.allow}} files. The most secure way to run a system is to first deny all users in {{Path|/etc/fcron/fcron.deny}}, and then explicitly allow users in {{Path|/etc/fcron/fcron.allow}}. 

{{Important|If neither {{Path|/etc/fcron/fcron.allow}} nor {{Path|/etc/fcron/fcron.deny}} exist then all users in the cron group will be allowed to use crontab. fcron comes with a default {{Path|fcron.allow}} which '''allows all users''' in the cron group access to fcrontab.}}

{{CodeBox|title=Permissions in fcron.deny|1=
all
}}

If a user (''wepy'' again for this example) should be able to schedule his own cron-jobs, then add him to {{Path|/etc/fcron/fcron.allow}} as follows: 

{{CodeBox|title=Permissions in fcron.allow|1=
wepy
}}

If '''vixie-cron''' or '''cronie''' has been chosen, then simply edit the {{Path|/etc/cron.allow}} file. 

{{Important|It is important to note that if only {{Path|/etc/cron.allow}} exists, then only the cron group users listed there will have access. Otherwise, if only an empty {{Path|/etc/cron.deny}} exists, then ''all'' cron group users will be allowed. Do not leave an empty {{Path|/etc/cron.deny}} if no {{Path|/etc/cron.allow}} file exists!}}

예컨대, "wepy" 사용자 접근을 허락하려면 다음과 같이 {{Path|/etc/cron.allow}} 파일에 추가하십시오: 

{{Code|/etc/cron.allow 권한|1=
wepy
}}

=== 크론 작업 일정 설정 ===

크론탭 편집 과정은 꾸러미마다 다르지만 지원하는 명령 기본 모음은 같습니다. 크론탭을 추가하고, 내용을 바꾸고, 편집하고, 삭제하며, 크론탭의 항목을 조회합니다. 다음 목록엔 각 꾸러미에 대한 다양한 명령을 어떻게 실행하는지 보여줍니다. 

{| class="wikitable" style="text-align: left;" 
|- 
! 버전
! crontab 편집
! crontab 제거
! 새 crontab
! cron-jobs 목록
|- 
| dcron
| {{c|crontab -e}}
| {{c|crontab -d ''[user]'' }}
| {{c|crontab ''file'' }}
| {{c|crontab -l}}
|- 
| fcron
| {{c|fcrontab -e}}
| {{c|fcrontab -r ''[user]'' }}
| {{c|fcrontab ''file'' }}
| {{c|fcrontab -l}}
|- 
| vixie-cron, cronie & bcron
| {{c|crontab -e}}
| {{c|crontab -r ''-u [user]'' }}
| {{c|crontab ''file'' }}
| {{c|crontab -l}}
|-
|}

{{Note/ko|명령 제거를 사용할 때 인자를 포함하지 않으면 현재 사용자의 크론탭을 삭제합니다.}}

{{Note/ko|fcron은{{c|fcrontab}}에 대한 {{c|crontab}} 심볼릭 링크가 있습니다.}}

이 명령을 사용할 수 있기 전에 먼저 크론탭 자체를 이해해야 합니다. 크론탭의 각 줄은 다음 순서로 다섯개의 시간 값을 지정합니다. 분(0-59), 시(0-23), 월 중 일수(1-31), 월(1-12), 주중 일수(0-7, 월요일은 1, 토요일은 7). 주중 일수와 월중 일수는 mon, tue, jan, feb 등의 세글자 약자로 지정할 수 있습니다. 또한 값의 범위(1-5 또는 mon-fri) 또는 쉼표 구분 값(1,2,3 또는 mon,tue,wed), "단계"값을 병기한 범위값 표기식(1-6/2는 1, 3, 5와 같음)으로 지정할 수 있습니다. 

얘기가 조금 혼동스럽지만, 몇가지 예제를 통해, 말씀드린대로 그다지 복잡하지 않음을 이해할 수 있습니다.

{{CodeBox|title=예제|1=
# Run /bin/false every minute year round
*     *     *     *     *        /bin/false
  
# Run /bin/false at 1:35 on the mon,tue,wed and the 4th of every month
35    1     4     *     mon-wed  /bin/false
  
# Run /bin/true at 22:25 on the 2nd of March
25    22    2     3     *        /bin/true
  
# Run /bin/false at 2:00 every Monday, Wednesday and Friday
0     2     *     *     1-5/2    /bin/false
}}

{{Note/ko|작업 일정을 합치기 전에 주당 며칠을 어떻게 지정해야 하는지, 월별로 며칠간 실행해야 하는지 확인하십시오. 각 시간 요소에 * 만을 포함하면 *가 매일을 의미하지만서도 확실하게 설정한 다른 내용을 우선으로 합니다.}}

To test what was just covered go through the steps of actually inputting a few cron-jobs. First, create a file called {{Path|crons.cron}} and make it look like the this: 

{{FileBox|filename=crons.cron|title=Create a crons.cron file|1=
#Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
}}

Now add that crontab to the system with the "new command" from the table above. 

{{RootCmd|crontab crons.cron}}

{{Note|The output from the echo commands will not be seen unless redirection is used.}}

To verify the scheduled cron-jobs, use the proper ''list command'' from the table above. 

{{RootCmd|crontab -l}}

A list resembling {{Path|crons.cron}} should be displayed; if not maybe the wrong command was issued to input the crontab. 

This crontab should echo "I really like cron" every minute of every hour of every day every other month. Obviously a user would only do that if they really liked cron. The crontab will also echo "I like cron a little" at 16:30 every day in January and February. It will also echo "I don't really like cron" at 3:10 on the January 1st. 

If using anacron keep reading this section. Otherwise, proceed to the next section on [[#Editing_crontabs|Editing crontabs]]. 

아나크론 사용자는 {{Path|/etc/anacrontab}} 파일을 편집하려 할 것입니다. 이 파일은 매 실행 일자 간격, 실행 후 지연 시간, 작업 이름, 실행할 명령 네가지 내용으로 구성되어 있습니다. 

For example, to have it run <tt>echo "I like anacron"</tt> every 5 days, 10 minutes after anacron is started, enter the following: 

{{FileBox|filename=/etc/anacrontab|1=
5 10 wasting-time /bin/echo "I like anacron"
}}

Anacron exits after all of the jobs in anacrontab have finished. To check to see if these jobs should be performed every day, a cron daemon will be used. The instructions at the end of the next section explain how this should be handled.

=== 크론탭 편집 ===

Being realistic, no user would want their system telling them how much they like cron every minute. As a step forward, remove the previous example crontab using the corresponding ''remove command'' from the table above. Use the corresponding list command to view the cron-jobs afterward to make sure it worked. 

{{RootCmd|crontab -d
|crontab -l}}

No cron-jobs should be displayed in the output from <tt>crontab -l</tt>. If cron jobs are listed, then the remove command failed to remove the crontab; verify the correct ''remove command'' for the system's cron package. 

Now that we have a clean state, let's put something useful into the '''root''' crontab. Most people will want to run <tt>updatedb</tt> on a weekly basis to make sure that mlocate works properly. To add that to the system's crontab, first edit {{Path|crons.cron}} again so that it looks like the following: 

{{CodeBox|title=실제 크론탭|1=
22 2 * * 1    /usr/bin/updatedb
}}

위 항목은 updatedb를 매주 월요일 새벽 2시 22분에 실행합니다. 위 표를 통해 적당한 "새로 만들기 명령"으로 크론탭에 입력하고 목록을 확인하십시오. 

{{RootCmd|crontab crons.cron
|crontab -l}}

이제, 여러분이 매일 포티지 트리를 최신으로 유지하려 매일 실행할 {{c|emerge --sync}} 명령을 추가해보겠습니다. 먼저 {{Path|crons.cron}} 파일을 열고, 앞에서 했던 것처럼 {{c|crontab crons.cron}} 명령을 사용''하거나'', 앞서 표에서 언급했던 적당한 ''편집 명령''을 사용할 수 있습니다. 이렇게 하면, {{Path|crons.cron}} 파일 같은 외부 파일에 의존하지 않고도 이런 상황에서 사용자 크론탭을 편집할 수 있습니다. 

{{RootCmd|crontab -e}}

The above command should open the user's crontab with an editor. For example, if <tt>emerge --sync</tt> is to be run every day at 6:30 A.M., make the crontab look something like this: 

{{Code|title=실제 크론탭|1=
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if you're using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
}}

Again, check the cron-jobs list as done in the previous examples to make sure the jobs are scheduled. If they are all there, then the system is ready to rock and roll.

== 크론 베이스 사용 ==

As mentioned earlier, all of the available cron packages depend on {{Package|sys-process/cronbase}}. The cronbase package creates {{Path|/etc/cron.{hourly,daily,weekly,monthly}}}, and a script called {{Path|run-crons}}. Notice the default {{Path|/etc/crontab}} file contains something like this: 

{{Code|title=기본 시스템 크론탭|1=
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
}}

너무 자세한 내용 진행을 막기 위해, 그냥 명령 하나가 시간별, 일자별, 주별, 월별 스크립트로 동작함을 가정할 수 있습니다. 이런 크론 작업 일정 계획 방식은 몇가지 중요한 장점이 있습니다: 

* 실행하기로 되어 있을때 전원이 꺼져도 실행합니다
* 꾸러미 관리자가 제대로 정의한 위치에 스크립트를 쉽게 놓을 수 있습니다
* 관리자는 크론 작업과 크론 탭을 저장하는 위치를 정확히 알며, 이 덕분에 시스템의 이 언급한 부분을 백업하고 복구하기 쉽습니다

{{Note/ko|다시 말씀드리는대로, dcron과 fcron은 {{Path|/etc/crontab}} 파일을 가리키지 않지만, vixie-cron, cronie, bcron은 자동으로 {{Path|/etc/crontab}} 파일을 가리키는 것이 유용합니다. 더 많은 내용을 알아보려면[[#.EC.8B.9C.EC.8A.A4.ED.85.9C_.ED.81.AC.EB.A1.A0.ED.83.AD|시스템 크론탭]] 장을 읽으십시오.}}

== 아나크론 사용 ==

As mentioned earlier, anacron is used on systems not meant to be run continuously (like most of the desktop installations). Its default configuration file, {{Path|/etc/anacrontab}}, is usually similar to the following:

{{FileBox|filename=/etc/anacrontab|1=
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
}}

The main difference between this and other common crontabs is that with anacron there is no fixed date/hour for the job scheduling, but only the period between every run. When anacron is started, it will check the contents of a set of files in {{Path|/var/spool/anacron}} and calculate if the corresponding entry in the configuration file has expired since the last run. If it has, then the command is invoked again.

마지막 참고할 사항으로, 다음 vixie-crom 크론탭 예제에서와 같이 시스템에 설치한 다른 크론의 중복 적용 항목을 주석처리하는것이 매우 중요합니다.

{{FileBox|filename=/etc/crontab|1=
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
}}

이 동작을 처리하지 않으면, 일일, 주간, 월간 부분의 각기 다른 부분을 - 각자 다른 시간에 - 크론 데몬과 아나크론이 실행하여 작업을 두번 실행하도록 유발합니다.

== 마지막 참고 ==

Remember, each cron package is different and the range of features varies greatly. Be sure to consult the man pages for crontab, fcrontab or anacrontab, depending on which cron daemon has been used. 

행운을 빕니다 :-P ! 

=== 문제 해결 ===

When having problems getting cron to work properly, this quick checklist might be helpful. 

==== 크론이 실행하는 중인가요? ====

To verify that cron is running, see if it shows up in the process list:

{{RootCmd|<nowiki>ps ax | grep cron</nowiki>}}

==== 크론이 동작중인가요? ====

다음 명령을 실행해보세요:

{{CodeBox|title=crontab to see if cron is running|1=
* * * * * /bin/echo "foobar" >> /file_you_own
}}

다음 {{Path|/file_you_own}}이 주기적으로 바뀌는지 확인해보세요.

==== Is the command working? ====

이전과 마찬가지지만, 표준 오류 출력을 있는 그대로 리다리렉트 해야 합니다:

{{CodeBox|title=crontab to verify application runs|1=
* * * * * /bin/echo "foobar" >> /file_you_own 2>&1
}}

==== Can cron run the job? ====

보통 {{Path|/var/log/cron.log}}에서, 오류 내용은 {{Path|/var/log/messages}}에서 크론 로그를 확인해보세요.

==== {{Path|dead.letter}}가 있나요? ====

cron usually sends mail when there is a problem; check for mail and look for the creation of a {{Path|~/dead.letter}} file.

== 대응 크론 프로그램 ==

Some hosting companies do not allow access to cron, but many cron jobs alternatives can be found which are free or commercially available:

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
