<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

이 안내서는 크론 설치 및 사용법을 설명합니다.

== 크론 기초 ==

=== 크론이 하는 일 ===

크론은 <code>crontab</code>에 입력한 명령을 기반으로 하여 일정에 따라 계획한 작업을 실행하는 데몬입니다. 각 시간마다 작업을 실행하며 사용자 크론탭을 실행할 크론 작업이 있는지 살펴보는 역할을 합니다. 

{{Note/ko|''crontab''은 크론 작업 목록의 이름이기도 하며 편집할 목록에 있는 명령의 이름이기도 합니다.}}

=== 사실상 표준이나 다름 없는 크론 ===

포티지에는 골라 사용할 수 있는 여러가지 크론 구현체가 있습니다. <code>crontab</code>이라고 알려진 이름의 수단 또는 유사 명령으로 사용하는 비슷한 인터페이스를 제공합니다. 관련 유틸리티로는 아나크론(Anacron)이 있는데 계속 동작하지 않는 시스템의 크론과 함께 동작함을 의미합니다. 

<code>sys-process/cronbase</code>에 따라 존재하는 모든 크론 패키지를 참고할 만 합니다. 언급한 패키지는 다른 어떤 크론 패키지에 기술적으로 의존하는건 아니지만, 대부분의 사용자가 만족할 수 있는 크론 같은 기능을 제공합니다. 

크론을 다루기 전에, 사용하려는 구현제를 선택해야 합니다. 편의를 위해 각각에 대한 내용을 아래에 모아보았습니다.

== 어떤 크론이 적합할까요? ==

=== vixie-cron ===

빅시 크론(Vixie-cron)은 SysV 크론 기반으로 완전한 기능을 갖춘 구현체입니다. 각각의 사용자는 자신의 크론탭을 지니고 있으며, 크론탭에 환경 변수를 지정할 수 있습니다. 다른 크론 변형과는 달리, SELinux와 PAM을 지원합니다. Dcron과는 적은 일부 아키텍처만 지원하지만, Fcron보다는 많이 지원합니다. 

<code>sys-process/vixie-cron</code>의 기능은 다음과 같습니다: 

* SELinux 지원
* PAM 지원
* 크론탭에서의 환경변수 설정 (PATH, SHELL, HOME 등)
* 각각의 사용자가 크론탭을 보유할 수 있습니다. {{Path|cron.allow}}와 {{Path|cron.deny}}에서 접근 권한을 다룹니다. 

=== cronie ===
크로니(Cronie) (sys-process/cronie)는 [https://fedorahosted.org/cronie/wiki 페도라]가 vixie-cron에서 분리한 꾸러미입니다. 원래 빅시 크론에서 제공하는 동일한 기능 모음을 제공하려는 것이 이유입니다. 게다가 anacron 구현체로서 크로니를 사용하려면 ''anacron'' USE 플래그를 활성화해야 합니다.

=== dcron (Dillon's Cron) ===

dcron의 목표는 단순하고 우아하며 안전한 크론 구현체입니다. 크론탭의 환경 변수 지정을 허용하지 않으며 모든 크론 작업은 {{Path|/bin/sh}}에서 실행합니다. 빅시 크론과 비슷하게 각각의 사용자는 자신의 크론탭을 지닙니다. 

<code>sys-process/dcron</code>의 기능은 다음과 같습니다: 

* 빠르고 단순하며 필요없는 기능으로부터 자유롭습니다.
* <code>crontab</code>의 접근은 cron 그룹으로 제한합니다. 예를 들어 다른 조직(그룹)과는 관련이 없습니다.

=== fcron ===

fcron은 빅시 크론과 아나크론을 대체하는것이 목표입니다. 지속적으로 동작하지 않는 시스템에서 동작하도록 설쳬했으며 추가 기능을 포함했습니다. 작업 시작 강제, 작업 직렬화 관리, 작업에 적절한 값 할당, 시스템 시작히 실행할 작업 배치 능력을 보유하고 있습니다. 더 알아보시려면 [http://fcron.free.fr/ fcron's 홈페이지]를 보십시오. 

<code>sys-process/fcron</code>의 기능은 다음과 같습니다: 

* 계속 동작하지 않는 시스템에서 동작하도록 설계함. 예를 들어 작업을 놓쳤을 경우에도 다음에 다시 시작할 때 작업을 실행할 수 있음
* 크론탭에서 환경 변수와 기타 옵션을 설정할 수 있음
* 각각의 사용자는 크론탭을 보유하며 cron.allow와 cron.deny로 관리함
* 많은 새로운 기능을 지원하여 크론 문법을 개선

=== bcron ===

bcron은 안전한 동작을 개념으로 하여 설계한 새로운 크론 시스템입니다. 이를 실행하려면 시스템은 몇가지로 나누어 놓은 프로그램으로 쪼개져야 하는데, 각각의 프로그램은 서로간의 통신을 엄격하게 관리하면서 각자 맏은 작업을 처리해야 합니다. 사용자 인터페이스는 비슷한 체계 의 기능을 대체하지만, 내부적으론 상당히 다릅니다. [http://untroubled.org/bcron http://untroubled.org/bcron] 홈페이지를 살펴보십시오. 

<code>sys-process/bcron</code>의 기능은 다음과 같습니다: 

* 빅시 크론 기능 대체
* 멀티 프로세싱 설계
* 자체 일광 절약 시간 기능 지원

=== anacron ===

아나크론(Anacron)은 크론 데몬이 아니고 크론과 같이 동작하는 프로그램입니다. 지정한 날짜 간격대로 명령을 실행하며 시스템이 계속 동작함을 고려하진 않습니다. 시스템이 멈추었을때 놓친 작업을 실행합니다. 아나크론은 보통 각각의 날짜별로 실행할 크론 데몬과 관련이 있습니다. 

== 크론 사용 ==

=== 설치 ===

사용하고 싶은 크론 구현체를 고른후 이머지 하십시오. 

{{Emerge|dcron}}

{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

추가적으로 Fcron을 설치하지 않았다면 Anacron을 설치해도 됩니다. 

{{Emerge|anacron}}

{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== 시스템 크론탭 ===

크론 패키지 설치후 메시지에서는 <code>crontab /etc/crontab</code>을 실행하라고 알려줍니다. <code>crontab /etc/crontab</code> 파일은 ''시스템 크론탭'' 입니다. 설치한 크론에서는 {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}에 언급한 스크립트를 실행하도록 <code>sys-process/cronbase</code>와 결합하여 사용할 수 있습니다. 참고로 빅시 크론과 크로니에서는 {{Path|/etc/crontab}}의 작업을 자동으로 일정에 넣습니다. dcron과 fcron 사용자라면 {{Path|/etc/crontab}}의 내용을 바꿀 때마다 <code>crontab /etc/crontab</code>을 실행해야 합니다. 

참고로 시스템 크론탭의 일정에 들어간 작업은 <code>crontab -l</code>에서 나타나는 크론 작업 목록에 나타나지 않습니다. 

물론 어떤 시스템 크론탭도 사용하지 못하게 할 수 있습니다. dcron이나 fcron을 선택했다면 <code>crontab /etc/crontab</code>을 실행 ''안하면'' 됩니다. 빅시 크론, 크로니, bcron을 골랐다면 {{Path|/etc/crontab}}의 모든 줄을 주석처리 하십시오. 

{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== 신뢰하는 사용자에게 크론 접근 권한 부여하기 ===

루트가 아닌 다른 사용자에게 크론 데몬 접근 권한을 주려 한다면, 이 장을 읽는 것이 좋겠습니다만, 그렇지 않으면 그냥 다음의 [[#Scheduling_cron-jobs|크론 작업 일정 설정]] 장으로 넘어가셔도 됩니다. 

{{Note/ko|크론탭에 다른 사용자 접근 권한을 부여한다고 해서 루트 사용자가 크론 작업을 실행하는것을 허용하는건 아닙니다. 사용자가 루트 크론탭을 편집할 수 있게 하려면 해당 사용자를 <code>sudo</code> 목록에 넣어야 합니다. 자세한 내용은 [http://www.gentoo.org//doc/en/sudo-guide.xml 젠투 Sudo(er) 안내서]를 보십시오.}}

어떤 크론 패키지를 사용하든지간에, 사용자가 크론 탭을 사용할 수 있게 하려면, 해당 사용자를 크론 그룹에 넣어야 합니다. 예를 들어 ''wepy''라는 사용자를 크론 그룹에 넣으려면 다음을 실행하십시오. 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/ko|크론 그룹에 사용자를 추가할 때 사용자를 로그아웃 시킨 후 다시 로그인하게 하여 설정이 올바르게 되었는지 확인하십시오.}}

'''dcron'''을 사용한다면, 크론탭 접근 권한을 부여하기 위한 할일은 이게 전부입니다. dcron 사용자는 다음 장의 [[#Scheduling_cron-jobs|크론 작업 일정 설정]] 과정을 진행해야 하며, 나머지 내용은 그냥 계속 읽어 내려가십시오. 

'''fcron'''을 사용한다면, {{Path|/etc/fcron/fcron.deny}} 와 {{Path|/etc/fcron/fcron.allow}}를 편집해야 합니다. 가장 안전한 방법은 전부를 {{Path|/etc/fcron/fcron.deny}}에 넣고, 분명하게 허용할 사용자를 {{Path|/etc/fcron/fcron.allow}}에 넣는 방법입니다. 

{{Important/ko| {{Path|/etc/fcron/fcron.allow}} 또는 {{Path|/etc/fcron/fcron.deny}} 둘 중 어디에도 내용을 넣지 않으면, 크론 그룹의 모든 사용자가 크론탭을 사용할 수 있습니다. fcron은 처음에 fcrontab에 cron 그룹의 '''모든 사용자들이 접근할 수 있'''는 기본 조건을 {{Path|fcron.allow}}에 넣은 상태로 설치됩니다.}}

{{Code|Permissions in fcron.deny|<pre>
all
</pre>
}}

Now, say we have a user ''wepy'' who should be able to schedule his own cron-jobs. We would add him to {{Path|/etc/fcron/fcron.allow}} as follows: 

{{Code|Permissions in fcron.allow|<pre>
wepy
</pre>
}}

If you chose '''vixie-cron''' or '''cronie''', you'll probably just want to edit {{Path|/etc/cron.allow}} . 

{{Important|It is important to note that if only {{Path|/etc/cron.allow}} exists, then only the cron group users listed there will have access. Otherwise, if only an empty {{Path|/etc/cron.deny}} exists, then all cron group users will be allowed! Do not leave an empty {{Path|/etc/cron.deny}} if you have no {{Path|/etc/cron.allow}} .}}

For example, if you wanted to allow access to the user ''wepy'' , you would add him to {{Path|/etc/cron.allow}} as follows: 

{{Code|Permissions in /etc/cron.allow|<pre>
wepy
</pre>
}}

=== Scheduling cron-jobs ===

The process of editing crontabs is different for each package, but they all support the same basic set of commands: adding and replacing crontabs, editing crontabs, deleting crontabs, and listing cron-jobs in crontabs. The following list shows you how to run those commands for each package. 

{| class="wikitable" style="text-align: left;" 
|- 
! Version
! Edit crontab
! Remove crontab
! New crontab
! List cron-jobs
|- 
| dcron
| <code>crontab -e</code>
| <code>crontab -d ''[user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|- 
| fcron
| <code>fcrontab -e</code>
| <code>fcrontab -r ''[user]'' </code>
| <code>fcrontab ''file'' </code>
| <code>fcrontab -l</code>
|- 
| vixie-cron, cronie & bcron
| <code>crontab -e</code>
| <code>crontab -r ''-u [user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|-
|}

{{Note|When using the remove command, if no argument is supplied, it deletes the current user's crontab.}}

{{Note|Fcron also has a symlink from <code>crontab</code> to <code>fcrontab</code> .}}

Before we can use any of these commands though, you first need to understand the crontab itself. Each line in a crontab needs to specify five time fields in the following order: the minutes (0-59), hours (0-23), days of the month (1-31), months (1-12), and days of the week (0-7, Monday is 1, Sunday is 0 and 7). The days of the weeks and months can be specified by three-letter abbreviations like mon, tue, jan, feb, etc. Each field can also specify a range of values (e.g. 1-5 or mon-fri), a comma separated list of values (e.g. 1,2,3 or mon,tue,wed) or a range of values with a ''step'' (e.g. 1-6/2 as 1,3,5). 

That sounds a little confusing, but with a few examples, you will see that it is not as complicated as it sounds. 

{{Code|Examples|<pre>
## # Run /bin/false every minute year round
*     *     *     *     *        /bin/false
  
## # Run /bin/false at 1:35 on the mon,tue,wed and the 4th of every month
35    1     4     *     mon-wed  /bin/false
  
## # Run /bin/true at 22:25 on the 2nd of March
25    22    2     3     *        /bin/true
  
## # Run /bin/false at 2:00 every Monday, Wednesday and Friday
0     2     *     *     1-5/2    /bin/false
</pre>
}}

{{Note|Notice how you have to specify specific days of the week and days of the month before they are combined. If you have * for only one of them, the other takes precedence, while * for both just means every day.}}

To test what we have just learned, let's go through the steps of actually inputting a few cron-jobs. First, create a file called {{Path|crons.cron}} and make it look like the this: 

{{RootCmd|nano crons.cron|output=<pre>
## #Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
</pre>
}}

Now we can add that crontab to the system with the "new command" from the table above. 

{{RootCmd|crontab crons.cron}}


{{Note/ko|실제로 리다이렉션하기 전에는 명령 출력 내용을 볼 수 없습니다.}}

To verify the cron-jobs you scheduled, we'll use the proper ''list command'' from the table above. 

{{RootCmd|crontab -l}}

You should see a list resembling {{Path|crons.cron}} , if not, maybe you used the wrong command to input your new crontab. 

This crontab should echo "I really like cron" every minute of every hour of every day every other month. Obviously you would only do that if you really liked cron. The crontab will also echo "I like cron a little" at 16:30 every day in January and February. It will also echo "I don't really like cron" at 3:10 on the January 1st. 

If you are using anacron, you should keep reading this section. Otherwise, proceed to the next section on [[#Editing_crontabs|Editing crontabs]] . 

Anacron users will want to edit {{Path|/etc/anacrontab}} . This file has four fields: the number of days between each run, the delay in minutes after which it runs, the name of the job, and the command to run. 

For example, to have it run <code>echo "I like anacron"</code> every 5 days, 10 minutes after anacron is started, you would have: 

{{Code|/etc/anacrontab|<pre>
5 10 wasting-time /bin/echo "I like anacron"
</pre>
}}

Anacron exits after all of the jobs in anacrontab are done, so if we want it to check these jobs every day, we will need to use cron. The instructions at the end of the next section tell you how to do that.

=== Editing crontabs ===

Let's be realistic though, you don't want your system telling you how much you like cron every minute. As a step forward, let's remove that crontab using the corresponding ''remove command'' from the table above. We will also list the cron-jobs after, just to make sure it worked. 

{{RootCmd|crontab -d
|crontab -l}}

You should see no cron-jobs in the output from <code>crontab -l</code> . If you do see jobs listed, that means we failed to remove the crontab, and that you should make sure that you used the correct ''remove command'' for your cron package. 

Now that we have a clean state, let's put something useful into the '''root''' crontab. Most people will want to run <code>updatedb</code> on a weekly basis to make sure that <code>mlocate</code> works properly. To add that to your crontab, let's first edit {{Path|crons.cron}} again so that it looks like the following: 

{{Code|A real crontab|<pre>
22 2 * * 1    /usr/bin/updatedb
</pre>
}}

That would make cron run updatedb at 2:22 A.M. on Monday morning every week. You should now input the crontab with the proper ''new command'' from the table above, and check the list again. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Now let's say that you also want to add <code>emerge --sync</code> to your daily schedule. You could do this by first editing {{Path|crons.cron}} and then using <code>crontab crons.cron</code> just as we did before, or you could use the proper ''edit command'' from the table above. This gives you a way to edit your user's crontab in situ, without depending on external files like {{Path|crons.cron}} . 

{{RootCmd|crontab -e}}

That should open your user's crontab with an editor. We want to have <code>emerge --sync</code> run every day at 6:30 A.M., so we'll make it look something like this: 

{{Code|A real crontab|<pre>
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if you're using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
</pre>
}}

Again, check the cron-jobs list as we did in the previous examples to make sure the jobs are scheduled. If they are all there, then you're all set. 

== 크론 베이스 사용 ==

As mentioned earlier, all of the available cron packages depend on <code>sys-process/cronbase</code> . The cronbase package creates {{Path|/etc/cron.{hourly,daily,weekly,monthly}}} , and a script called <code>run-crons</code> . You might have noticed that the default {{Path|/etc/crontab}} contains something like this: 

{{Code|기본 시스템 크론탭|<pre>
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>
}}

To avoid going into much detail, we can just assume that these commands will effectively run your hourly, daily, weekly and monthly scripts. This method of scheduling cron-jobs has some important advantages: 

* They will run even if your computer was off when they were scheduled to run
* It is easy for package maintainers to place scripts in those well defined places
* You know exactly where your cron-jobs and your crontab are stored, making it easy for you to backup and restore this part of your system

{{Note|Again, it is useful to point out that vixie-cron, cronie and bcron automatically read {{Path|/etc/crontab}} , while dcron and fcron do not. Please read the [[#System_crontab|System crontab]] section to learn more about this.}}

== 아나크론 사용 ==

As mentioned earlier, anacron is used on systems not meant to be run continuously (like most of the desktop installations). Its default configuration file, {{Path|/etc/anacrontab}}, is usually like the following:

{{File|/etc/anacrontab||<pre>
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
</pre>}}

As you see the main difference between this and other common crontabs is that with anacron there is no fixed date/hour for the job scheduling, but only the period between every run. When anacron is started, it will check the contents of a set of files in {{Path|/var/spool/anacron}} and calculate if the corresponding entry in the configuration file has expired since the last run. If it has, then the command is invoked again.

As a final note, it is important to comment out any overlapping entry in any other cron installed in the system, such as in the following vixie-cron crontab example:

{{File|/etc/crontab||<pre>
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
</pre>}}

Without doing this, the daily, weekly and monthly parts will be executed - at different times - by both the cron daemon and anacron, leading to possible double job executions.

== 마지막 참고 ==

각각의 크론 꾸러미는 다르며 기능 범위도 확연히 차이가 있음을 기억해두십시오. 꾸러미를 사용 종류에 따라 crontab, fcrontab, anacrontab에 대한 맨 페이지를 살펴보십시오. 

행운을 빕니다 :-P ! 

== 문제 해결 ==

If you're having problems getting cron to work properly, you might want to go through this quick checklist. 

==== Is cron running? ====

Run <code>ps ax | grep cron</code> and make sure it shows up!

==== Is cron working? ====

Try the following:

{{Code|crontab to see if cron is running|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own
</pre>}}

Then check if {{Path|/file_you_own}} is modified periodically.

==== Is your command working? ====

Same as before, but perhaps redirect the standard error output as well:

{{Code|crontab to verify application runs|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own 2>&amp;1
</pre>}}

==== Can cron run your job? ====

Check the cron log, usually {{Path|/var/log/cron.log}} or {{Path|/var/log/messages}} for errors

==== Are there any {{Path|dead.letter}}s? ====

cron usually sends mail when there's a problem; check your mail and also look for {{Path|~/dead.letter}} .

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Eric Brown
* Xavier Neys
* nightmorph


[[Category:Core system]]
[[Category:Daemons]]
