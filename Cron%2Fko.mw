<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

이 안내서는 크론 설치 및 사용법을 설명합니다.

== 크론 기초 ==

=== 크론이 하는 일 ===

크론은 <code>crontab</code>에 입력한 명령을 기반으로 하여 일정에 따라 계획한 작업을 실행하는 데몬입니다. 각 시간마다 작업을 실행하며 사용자 크론탭을 실행할 크론 작업이 있는지 살펴보는 역할을 합니다. 

{{Note/ko|''crontab''은 크론 작업 목록의 이름이기도 하며 편집할 목록에 있는 명령의 이름이기도 합니다.}}

=== 사실상 표준이나 다름 없는 크론 ===

포티지에는 골라 사용할 수 있는 여러가지 크론 구현체가 있습니다. <code>crontab</code>이라고 알려진 이름의 수단 또는 유사 명령으로 사용하는 비슷한 인터페이스를 제공합니다. 관련 유틸리티로는 아나크론(Anacron)이 있는데 계속 동작하지 않는 시스템의 크론과 함께 동작함을 의미합니다. 

It is also worth noting that all of the available cron packages depend on {{Package|sys-process/cronbase}}. This package is not technically depended on by any of the cron packages, but it does provide cron-like functionality that most users can appreciate. 

크론을 다루기 전에, 사용하려는 구현제를 선택해야 합니다. 편의를 위해 각각에 대한 내용을 아래에 모아보았습니다.

== 어떤 크론이 적합할까요? ==

=== vixie-cron ===

빅시 크론(Vixie-cron)은 SysV 크론 기반으로 완전한 기능을 갖춘 구현체입니다. 각각의 사용자는 자신의 크론탭을 지니고 있으며, 크론탭에 환경 변수를 지정할 수 있습니다. 다른 크론 변형과는 달리, SELinux와 PAM을 지원합니다. Dcron과는 적은 일부 아키텍처만 지원하지만, Fcron보다는 많이 지원합니다. 

<code>sys-process/vixie-cron</code>의 기능은 다음과 같습니다: 

* SELinux 지원
* PAM 지원
* 크론탭에서의 환경변수 설정 (PATH, SHELL, HOME 등)
* 각각의 사용자가 크론탭을 보유할 수 있습니다. {{Path|cron.allow}}와 {{Path|cron.deny}}에서 접근 권한을 다룹니다. 

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) is a fork of vixie-cron done by [https://fedorahosted.org/cronie/wiki Fedora]. Because of it being a fork it has the same feature set the original vixie-cron provides. Additionally cronie comes with an anacron implementation which must be enabled through the ''anacron'' USE flag.

=== dcron (Dillon's Cron) ===

dcron의 목표는 단순하고 우아하며 안전한 크론 구현체입니다. 크론탭의 환경 변수 지정을 허용하지 않으며 모든 크론 작업은 {{Path|/bin/sh}}에서 실행합니다. 빅시 크론과 비슷하게 각각의 사용자는 자신의 크론탭을 지닙니다. 

<code>sys-process/dcron</code>의 기능은 다음과 같습니다: 

* 빠르고 단순하며 필요없는 기능으로부터 자유롭습니다.
* <code>crontab</code>의 접근은 cron 그룹으로 제한합니다. 예를 들어 다른 조직(그룹)과는 관련이 없습니다.

=== fcron ===

fcron은 빅시 크론과 아나크론을 대체하는것이 목표입니다. 지속적으로 동작하지 않는 시스템에서 동작하도록 설쳬했으며 추가 기능을 포함했습니다. 작업 시작 강제, 작업 직렬화 관리, 작업에 적절한 값 할당, 시스템 시작히 실행할 작업 배치 능력을 보유하고 있습니다. 더 알아보시려면 [http://fcron.free.fr/ fcron's 홈페이지]를 보십시오. 

{{Package|sys-process/fcron}}의 기능은 다음과 같습니다: 

* Designed to work on systems that are not continuously running, i.e. it can run a job after restarting if it was missed
* Setting of environment variables and many other options in crontabs
* Each user can have his own crontab, access is controlled by {{Path|cron.allow}} and {{Path|cron.deny}}
* Enhanced crontab syntax with support for many new features

=== bcron ===

bcron은 안전한 동작을 개념으로 하여 설계한 새로운 크론 시스템입니다. 이를 실행하려면 시스템은 몇가지로 나누어 놓은 프로그램으로 쪼개져야 하는데, 각각의 프로그램은 서로간의 통신을 엄격하게 관리하면서 각자 맏은 작업을 처리해야 합니다. 사용자 인터페이스는 비슷한 체계 의 기능을 대체하지만, 내부적으론 상당히 다릅니다. [http://untroubled.org/bcron http://untroubled.org/bcron] 홈페이지를 살펴보십시오. 

{{Package|sys-process/bcron}}의 기능은 다음과 같습니다: 

* 빅시 크론 기능 대체
* 멀티 프로세싱 설계
* 자체 일광 절약 시간 기능 지원

=== 아나크론 ===

아나크론(Anacron)은 크론 데몬이 아니고 크론과 같이 동작하는 프로그램입니다. 지정한 날짜 간격대로 명령을 실행하며 시스템이 계속 동작함을 고려하진 않습니다. 시스템이 멈추었을때 놓친 작업을 실행합니다. 아나크론은 보통 각각의 날짜별로 실행할 크론 데몬과 관련이 있습니다.

== 크론 사용 ==

=== 설치 ===

사용하고 싶은 크론 구현체를 고른후 이머지 하십시오. 

{{Emerge|dcron}}

{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

추가적으로 Fcron을 설치하지 않았다면 Anacron을 설치해도 됩니다. 

{{Emerge|anacron}}

{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== 시스템 크론탭 ===

The post install messages from some of these cron packages tell you to run <code>crontab /etc/crontab</code>. The {{Path|/etc/crontab}} file is your ''system crontab''. A cron installation can use it in conjunction with {{Package|sys-process/cronbase}} to run the scripts in {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}. Note that only vixie-cron and cronie schedule jobs in {{Path|/etc/crontab}} automatically. Dcron and fcron users will need to run <code>crontab /etc/crontab</code> every time they make changes to {{Path|/etc/crontab}}. 

참고로 시스템 크론탭의 일정에 들어간 작업은 <code>crontab -l</code>에서 나타나는 크론 작업 목록에 나타나지 않습니다. 

물론 어떤 시스템 크론탭도 사용하지 못하게 할 수 있습니다. dcron이나 fcron을 선택했다면 <code>crontab /etc/crontab</code>을 실행 ''안하면'' 됩니다. 빅시 크론, 크로니, bcron을 골랐다면 {{Path|/etc/crontab}}의 모든 줄을 주석처리 하십시오. 

{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== 신뢰하는 사용자에게 크론 접근 권한 부여하기 ===

루트가 아닌 다른 사용자에게 크론 데몬 접근 권한을 주려 한다면, 이 장을 읽는 것이 좋겠습니다만, 그렇지 않으면 그냥 다음의 [[#Scheduling_cron-jobs|크론 작업 일정 설정]] 장으로 넘어가셔도 됩니다. 

{{Note|Giving another user access to crontab does not let him run cron-jobs as root. If you want a user to be able to edit the root crontab, you should look into <code>sudo</code>. Please read our [[Sudo|Gentoo Sudo(ers) Guide]] for more details.}}

어떤 크론 패키지를 사용하든지간에, 사용자가 크론 탭을 사용할 수 있게 하려면, 해당 사용자를 크론 그룹에 넣어야 합니다. 예를 들어 ''wepy''라는 사용자를 크론 그룹에 넣으려면 다음을 실행하십시오. 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/ko|크론 그룹에 사용자를 추가할 때 사용자를 로그아웃 시킨 후 다시 로그인하게 하여 설정이 올바르게 되었는지 확인하십시오.}}

'''dcron'''을 사용한다면, 크론탭 접근 권한을 부여하기 위한 할일은 이게 전부입니다. dcron 사용자는 다음 장의 [[#Scheduling_cron-jobs|크론 작업 일정 설정]] 과정을 진행해야 하며, 나머지 내용은 그냥 계속 읽어 내려가십시오. 

'''fcron'''을 사용한다면, {{Path|/etc/fcron/fcron.deny}} 와 {{Path|/etc/fcron/fcron.allow}}를 편집해야 합니다. 가장 안전한 방법은 전부를 {{Path|/etc/fcron/fcron.deny}}에 넣고, 분명하게 허용할 사용자를 {{Path|/etc/fcron/fcron.allow}}에 넣는 방법입니다. 

{{Important/ko| {{Path|/etc/fcron/fcron.allow}} 또는 {{Path|/etc/fcron/fcron.deny}} 둘 중 어디에도 내용을 넣지 않으면, 크론 그룹의 모든 사용자가 크론탭을 사용할 수 있습니다. fcron은 처음에 fcrontab에 cron 그룹의 '''모든 사용자들이 접근할 수 있'''는 기본 조건을 {{Path|fcron.allow}}에 넣은 상태로 설치됩니다.}}

{{Code|Permissions in fcron.deny|<pre>
all
</pre>
}}

이제, 자신의 크론 작업 일정을 세울 수 있는 사용자 "wepy"가 있다고 하겠습니다. 다음과 같이 {{Path|/etc/fcron/fcron.allow}} 파일에 추가하겠습니다: 

{{Code|fcron.allow 권한|<pre>
wepy
</pre>
}}

If you chose '''vixie-cron''' or '''cronie''', you'll probably just want to edit {{Path|/etc/cron.allow}}. 

{{Important/ko|{{Path|/etc/cron.allow}} 파일만 있을 경우 cron 그룹에 있는 사용자만 접근할 수 있음을 참고하는 것이 중요합니다. 그렇지 않으면 비어있는 {{Path|/etc/cron.deny}} 파일이 있을 때 모든 cron 그룹 사용자의 접근을 허용합니다!  {{Path|/etc/cron.allow}} 파일이 없으면 {{Path|/etc/cron.deny}} 파일을 비워두지 마십시오. }}

예컨대, "wepy" 사용자 접근을 허락하려면 다음과 같이 {{Path|/etc/cron.allow}} 파일에 추가하십시오: 

{{Code|/etc/cron.allow 권한|<pre>
wepy
</pre>
}}

=== 크론 작업 일정 설정 ===

크론탭 편집 과정은 꾸러미마다 다르지만 지원하는 명령 기본 모음은 같습니다. 크론탭을 추가하고, 내용을 바꾸고, 편집하고, 삭제하며, 크론탭의 항목을 조회합니다. 다음 목록엔 각 꾸러미에 대한 명령을 어떻게 실행하는지 보여줍니다. 

{| class="wikitable" style="text-align: left;" 
|- 
! 버전
! crontab 편집
! crontab 제거
! 새 crontab
! cron-jobs 목록
|- 
| dcron
| <code>crontab -e</code>
| <code>crontab -d ''[user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|- 
| fcron
| <code>fcrontab -e</code>
| <code>fcrontab -r ''[user]'' </code>
| <code>fcrontab ''file'' </code>
| <code>fcrontab -l</code>
|- 
| vixie-cron, cronie & bcron
| <code>crontab -e</code>
| <code>crontab -r ''-u [user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|-
|}

{{Note/ko|명령 제거를 사용할 때 인자를 포함하지 않으면 현재 사용자의 크론탭을 삭제합니다.}}

{{Note/ko|fcron은 <code>fcrontab</code>에 대한 <code>crontab</code> 심볼릭 링크가 있습니다.}}

이 명령을 사용할 수 있기 전에 먼저 크론탭 자체를 이해해야 합니다. 크론탭의 각 줄은 다음 순서로 다섯개의 시간 값을 지정합니다. 분(0-59), 시(0-23), 월 중 일수(1-31), 월(1-12), 주중 일수(0-7, 월요일은 1, 토요일은 7). 주중 일수와 월중 일수는 mon, tue, jan, feb 등의 세글자 약자로 지정할 수 있습니다. 또한 값의 범위(1-5 또는 mon-fri) 또는 쉼표 구분 값(1,2,3 또는 mon,tue,wed), "단계"값을 병기한 범위값 표기식(1-6/2는 1, 3, 5와 같음)으로 지정할 수 있습니다. 

얘기가 조금 혼동스럽지만, 몇가지 예제를 통해, 말씀드린대로 그다지 복잡하지 않음을 볼 수 있습니다. 

{{Code|예제|<pre>
# Run /bin/false every minute year round
*     *     *     *     *        /bin/false
  
# Run /bin/false at 1:35 on the mon,tue,wed and the 4th of every month
35    1     4     *     mon-wed  /bin/false
  
# Run /bin/true at 22:25 on the 2nd of March
25    22    2     3     *        /bin/true
  
# Run /bin/false at 2:00 every Monday, Wednesday and Friday
0     2     *     *     1-5/2    /bin/false
</pre>
}}

{{Note/ko|작업 일정을 합치기 전에 주당 며칠을 어떻게 지정해야 하는지, 월별로 며칠간 실행해야 하는지 확인하십시오. 각 시간 요소에 * 만을 포함하면 *가 매일을 의미하지만서도 확실하게 설정한 다른 내용을 우선으로 합니다.}}

우리가 배운 것을 시험해보기 위해 몇가지 크론 작업을 실제로 입력하는 단계를 진행해보도록 하겠습니다. 먼저, {{Path|crons.cron}} 파일을 만드시고 다음과 같이 내용을 입력하십시오: 

{{RootCmd|nano crons.cron|output=<pre>
#Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
</pre>
}}

이제 위 표에 주어진 "새로 만들기 명령"으로 시스템의 크론탭에 추가할 수 있습니다. 

{{RootCmd|crontab crons.cron}}


{{Note/ko|실제로 리다이렉션하기 전에는 명령 출력 내용을 볼 수 없습니다.}}

여러분의 계획한 크론 작업을 검증하려면 위의 표에 있는 적당한 ''목록 출력 명령''을 사용하십시오. 

{{RootCmd|crontab -l}}

{{Path|crons.cron}} 파일과 닮은 목록을 봐야 하는데, 그렇지 않으면 새 크론탭에 입력할 명령을 잘못 사용했을 수도 있습니다. 

이 크론탭은 echo "I really like cron" 명령을 매분 매시간 매일 매달마다 실행합니다. 확실히 여러분은 cron이 좋을 때만 그렇게 해야 합니다. 또한 echo "I like cron a little" 명령을 1월과 2월에 매일 16:30에 실행합니다.  echo "I don't really like cron" 명령을 1월 1일 3:10에 실행하기도 합니다. 

아나크론을 사용한다면, 이 장을 계속 읽어내려가야 합니다. 그렇지 않으면, 다음장 [[#.ED.81.AC.EB.A1.A0.ED.83.AD_.ED.8E.B8.EC.A7.91|크론탭 편집]]으로 내용 읽기를 진행하십시오. 

아나크론 사용자는 {{Path|/etc/anacrontab}} 파일을 편집하려 할 것입니다. 이 파일은 매 실행 일자 간격, 실행 후 지연 시간, 작업 이름, 실행할 명령 네가지 내용으로 구성되어 있습니다. 

예를 들어 <code>echo "I like anacron"</code> 명령을 5일마다 아나크론 시작 10분 후에 실행한다면 다음과 같이 적으십시오: 

{{Code|/etc/anacrontab|<pre>
5 10 wasting-time /bin/echo "I like anacron"
</pre>
}}

anacron은 아나크론 탭 작업을 모두 끝난 다음에 빠져나가므로, 이 작업을 매일 확인하려면, cron을 사용해야 합니다. 다음 장의 끝에서 설명하는 절차에서 어떻게 하는지 설명하겠습니다.

=== 크론탭 편집 ===

실제로 해보도록 하겠습니다만, 얼마나 자주 분단위로 크론을 실행할지 시스템에 언급하고 싶지는 않을것입니다. 이전 단계에서와 같이, 위 표에서 언급한 각각의 ''제거 명령''으로 크론 탭을 삭제하겠습니다. 또한 그 다음에 크론 작업을 목록으로 출력하여, 동작했는지 확인해보겠습니다. 

{{RootCmd|crontab -d
|crontab -l}}

<code>crontab -l</code> 명령의 출력에서 어떤 크론 작업도 보이지 않아야 합니다. 나타난 작업이 있다면, 크론탭 제거에 실패했으며, 크론 꾸러미에 대한 올바른 ''제거 명령''을 수행했는지 확인해야 함을 의미합니다. 

이제 깔끔한 상태가 되었으니, '''root''' 크론탭에 몇가지 쓸모있는 작업을 넣어보도록 하겠습니다. 대부분 사람들은 <code>mlocate</code>가 제대로 동작하는지 주 단위로 <code>updatedb</code>를 실행하려 할 것입니다. 이 작업을 크론탭에 추가하려면 {{Path|crons.cron}} 파일을 다시 편집해서 다음처럼 나타나게 해야 합니다: 

{{Code|실제 크론탭|<pre>
22 2 * * 1    /usr/bin/updatedb
</pre>
}}

위 항목은 updatedb를 매주 월요일 새벽 2시 22분에 실행합니다. 위 표를 통해 적당한 "새로 만들기 명령"으로 크론탭에 입력하고 목록을 확인해야 합니다. 

{{RootCmd|crontab crons.cron
|crontab -l}}

이제, 여러분이 일일 작업 계획으로 <code>emerge --sync</code> 명령을 추가하려 한다고 해보겠습니다. 먼저 {{Path|crons.cron}} 파일을 열고, 앞에서 했던 것처럼 <code>crontab crons.cron</code> 명령을 사용하거나, 앞서 표에서 언급했던 적당한 ''편집 명령''을 사용할 수 있습니다. 이렇게 하면, {{Path|crons.cron}} 파일 같은 외부 파일에 의존하지 않고도 이런 상황에서 사용자 크론탭을 편집할 수 있습니다. 

{{RootCmd|crontab -e}}

이 명령을 통해 사용자의 크론탭을 편집기에서 엽니다. 매일 오전 6시 30분에 <code>emerge --sync</code> 명령을 실행하려, 다음과 같이 작성하려고 합니다: 

{{Code|실제 크론탭|<pre>
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if you're using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
</pre>
}}

일정에 넣은 작업을 확인하기 위해 이전 예제에서 우리가 한 바와 같이 크론 작업 목록이 있는지 다시 확인해보십시오. 만약 다 있다면, 모든 내용을 설정하신 것입니다.

== 크론 베이스 사용 ==

As mentioned earlier, all of the available cron packages depend on {{Package|sys-process/cronbase}}. The cronbase package creates {{Path|/etc/cron.{hourly,daily,weekly,monthly}}}, and a script called <code>run-crons</code>. You might have noticed that the default {{Path|/etc/crontab}} contains something like this: 

{{Code|기본 시스템 크론탭|<pre>
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>
}}

너무 자세한 내용 진행을 막기 위해, 그냥 명령 하나가 시간별, 일자별, 주별, 월별 스크립트로 동작함을 가정할 수 있습니다. 이런 크론 작업 일정 계획 방식은 몇가지 중요한 장점이 있습니다: 

* 실행하기로 되어 있을때 전원이 꺼져도 실행합니다
* 꾸러미 관리자가 제대로 정의한 위치에 스크립트를 쉽게 놓을 수 있습니다
* 크론 작업과 크론 탭을 저장하는 위치를 정확히 알며, 이 덕분에 시스템의 일부를 백업하고 복구하기 쉽습니다

{{Note/ko|다시 말씀드리는대로, dcron과 fcron은 {{Path|/etc/crontab}} 파일을 가리키지 않지만, vixie-cron, cronie, bcron은 자동으로 {{Path|/etc/crontab}} 파일을 가리키는 것이 유용합니다. 더 많은 내용을 알아보려면[[#.EC.8B.9C.EC.8A.A4.ED.85.9C_.ED.81.AC.EB.A1.A0.ED.83.AD|시스템 크론탭]] 장을 읽으십시오.}}

== 아나크론 사용 ==

앞서 이야기한 바와 같이 시스템에서 사용하는 아나크론은 지속적으로 (데스크톱 설치처럼) 실행함을 의미하는 것은 아닙니다. {{Path|/etc/anacrontab}} 기본 설정 파일은 보통 다음과 같습니다:

{{File|/etc/anacrontab||<pre>
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
</pre>}}

이 부분과 다른 크론탭과의 주된 차이점을 보신바와 같이, 작업 일정 계획에 정해진 날짜와 시간이 없지만 실행 주기는 존재합니다. 아나크론을 시작하면 {{Path|/var/spool/anacron}} 파일 내용을 확인하고 설정 파일의 관련 항목이 마지막으로 실행한 후 유효기간을 경과 했는지 계산합니다. 만약 그런 작업이 있다면 명령을 다시 실행합니다.

마지막 참고할 사항으로, 다음 vixie-crom 크론탭 예제에서와 같이 시스템에 설치한 다른 크론의 중복 적용 항목을 주석처리하는것이 매우 중요합니다.

{{File|/etc/crontab||<pre>
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
</pre>}}

이 동작을 처리하지 않으면, 일일, 주간, 월간 부분의 각기 다른 부분을 - 각자 다른 시간에 - 크론 데몬과 아나크론이 실행하여 작업을 두번 실행하도록 유발합니다.

== 마지막 참고 ==

각각의 크론 꾸러미는 다르며 기능 범위도 확연히 차이가 있음을 기억해두십시오. 꾸러미를 사용 종류에 따라 crontab, fcrontab, anacrontab에 대한 맨 페이지를 살펴보십시오. 

행운을 빕니다 :-P ! 

=== 문제 해결 ===

크론을 제대로 동작하도록 하는데 문제가 있다면 간단한 확인 목록을 통해 점검해보셔도 좋습니다. 

==== 크론이 실행하는 중인가요? ====

<code>ps ax | grep cron</code>를 실행해서 나타나는지 확인해보세요!

==== 크론이 동작중인가요? ====

다음 명령을 실행해보세요:

{{Code|크론이 실행중인지 보여주는 crontab|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own
</pre>}}

다음 {{Path|/file_you_own}}이 주기적으로 바뀌는지 확인해보세요.

==== 명령이 동작하나요? ====

이전과 마찬가지지만, 표준 오류 출력을 있는 그대로 리다리렉트 해야 합니다:

{{Code|프로그램 실행을 확인하는 crontab|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own 2>&amp;1
</pre>}}

==== 여러분 소유의 작업을 크론이 실행할 수 있나요? ====

Check the cron log, usually {{Path|/var/log/cron.log}} or {{Path|/var/log/messages}} for errors.

==== {{Path|dead.letter}}가 있나요? ====

문제가 있으면 보통 크론이 메일을 보냅니다. {{Path|~/dead.letter}}에서 메일 내용을 확인해보십시오.

== Cron Jobs Alternatives ==

Some hosting companies don’t allow access to cron, but you can find a lot of cron jobs alternatives which are free or paid:

* [https://www.easycron.com/ EasyCron]

== 감사문 ==

이 안내서에 제공한 노고에 대해 다음 작성자와 편집자분들께 감사의 말을 전하고자 합니다:


* Eric Brown
* Xavier Neys
* nightmorph


[[Category:Core system]]
[[Category:Daemons]]
