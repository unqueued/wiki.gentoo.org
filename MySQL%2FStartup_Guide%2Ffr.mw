<languages />

Ce document vous assiste dans la configuration et l'utilisation de MySQL.

== Démarrer avec MySQL ==

=== Fondamentaux ===

MySQL est un serveur de bases de données utilisé dans des applications variées. SQL signifie (S)tructured (Q)uery (L)anguage (Langage de requêtes structuré), langage que MySQL utilise pour communiquer avec d'autres programmes. Par dessus tout cela, MySQL possède ses propres fonctions SQL étendues pour offrir à l'utilisateur des fonctionnalités additionnelles. Dans ce document, nous allons voir comment procéder à l'installation initiale de MySQL, configurer des bases de données et des tables puis créer de nouveaux utilisateurs. Commençons par l'installation. 

=== Installation de MySQL ===

Assurez-vous d'abord que MySQL est installé sur votre système. Dans le cas où vous auriez besoin de fonctionnalités spécifiques de MySQL, vérifiez que vous avez activé les options requises de la variable USE qui vous permettent de peaufiner votre installation. 

{{Emerge|mysql}}

À la fin de l'installation vous recevrez la notification suivante : 

{{Code|MySQL einfo message|<pre>
You might want to run:
"emerge --config =dev-db/mysql-[version]"
if this is a new install.
</pre>
}}

Comme il s'agit d'une nouvelle installation, exécutez la commande. Vous devez presser la touche <code>ENTREE</code> lorsque vous y êtes invité durant la configuration de la base de données MySQL. La configuration met en place la base de données MySQL principale qui contient les informations administratives telles que les bases de données, les tables, les utilisateurs, les droits et plus encore. La configuration vous recommande de changer le mot de passe root dès que possible. Vous devez absolument le faire, sinon quelqu'un pourrait arriver par hasard et hacker la configuration de votre serveur MySQL. 

{{RootCmd|emerge --config {{=}}dev-db/mysql-[version]|output=<pre>
 * MySQL DATADIR is /var/lib/mysql
 * Pressez ENTREE pour créer la base de données mysql et définir les 
 * permissions adéquates sur elles, ou Control-C pour abandonner maintenant...
 
   Preparing db table
   Preparing host table
   Preparing user table
   Preparing func table
   Preparing tables_priv table
   Preparing columns_priv table
   Installing all prepared tables
 
   Pour lancer  mysqld au démarrage vous devez  copier support-files/mysql.server
   au bon emplacement pour votre système.
 
  PENSEZ À DÉFINIR UN MOT DE PASSE MySQL POUR L'UTILISATEUR root  !
   Pour cela, exécutez les commandes suivantes pour démarrer le serveur et changer le mot de passe :
 
   /etc/init.d/mysql start
   /usr/bin/mysqladmin -u root -h pegasos password 'new-password'
   /usr/bin/mysqladmin -u root password 'new-password'
   Selon votre configuration, une option -p peut être nécessaire
   dans la dernière commande. Reportez-vous au manuel pour les détails.
</pre>}}

Quelques  informations MySQL, non spécifiques à l'ebuild, ont été retirées de manière à conserver autant de cohérence que possible dans ce document.

{{Important|Depuis mysql-4.0.24-r2, les mots de passe sont entrés pendant la phase de configuration rendant la saisie du mot de passe root plus sûre.}}

Le script de configuration a déjà imprimé les commandes dont vous avez besoin pour définir  votre mot de passe. Exécutez les. 

{{RootCmd|/etc/init.d/mysql start|output=<pre>
 * Re-caching dependency info (mtimes differ)...
 * Starting mysqld (/etc/mysql/my.cnf) ...        [ ok ]
</pre>}}

{{RootCmd|/usr/bin/mysqladmin -u root -h localhost password 'new-password'}}

Vous pouvez désormais tester votre mot de passe root en essayant de vous connecter au serveur MySQL : 

{{Cmd|mysql -u root -h localhost -p|output=<pre>
Entrez le mot de passe:
Bienvenue dans le surveillant MySQL. Les commandes se terminent par ; ou \g.
Votre identifiant de connexion MySQL est 4 pour la version du serveur : 4.0.25
 
Tapez 'help;' ou '\h' pour de l'aide. Tapez '\c' pour effacer le tampon
 
mysql>
</pre>
}}

L'option <code>-u</code> définit le nom de l'utilisateur qui désire se connecter.   L'option <code>-h</code> définit l'hôte. C'est en général <code>localhost</code> sauf si vous êtes en train de configurer un serveur distant. Pour finir, l'option <code>-p</code> informe le client  mysql que vous aller saisir le mot de passe d'accès à la base de données. Notez l'apparition de l'invite de commande  <code>mysql></code>. C'est dans ce contexte que vous saisissez toutes les commandes mysql. Maintenant que vous avez l'invite de commande mysql en tant que root, vous pouvez commencer à  configurer votre base de données. 

== Configurer la base de données ==

=== Créer une base de données ===

Vous vous êtes connecté et vous disposez d'une invite de commande mysql. Commençons par regarder les bases de données dont vous disposez. Pour cela, utilisez la commande <code>SHOW DATABASES</code>. 

{{Cmd|SHOW DATABASES|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| mysql    |
| test     |
+----------+
2 rows in set (0.09 sec)
</pre>
}}

{{Important|Rappelez-vous que les commandes  MySQL doivent se terminer par un point-virgule -- <code>;</code>}}

Bien qu'une base de données de test soit déjà créée, nous allons créer la notre. Les bases de données sont créées en utilisant la commande  <code>CREATE DATABASE</code>. Nous allons en créer une appelée "gentoo". 

{{Cmd|CREATE DATABASE gentoo;|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.08 sec)
</pre>
}}

La réponse nous fait savoir que la commande a été exécutée sans erreur. Dans ce cas, une ligne a été modifiée. Ceci se réfère à la base de données principale, qui contient la liste de toutes les bases de données. Vous n'avez pas à trop vous préoccuper des détails d'arrière-plan. Le dernier nombre indique combien de temps l'exécution de le requête a nécessité. Vous pouvez vérifier que la base de données a été créée en exécutant la commande <code>SHOW DATABASES</code> à nouveau. 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| gentoo   |
| mysql    |
| test     |
+----------+
3 rows in set (0.00 sec)
</pre>
}}

Votre base de données a bien été créée. Afin de commencer à créer des tables dans votre nouvelle base gentoo, vous devez la sélectionner comme base de données courante en utilisant la commande <code>USE</code>. La commande <code>USE</code> prend comme argument le nom de la base de données que vous voulez utiliser comme base de données courante. Une autre possibilité est de la définir dans les commandes avec l'option  <code>-D</code>. Définissez maintenant votre base de données courante. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Database changed
</pre>
}}

La base de données courante est maintenant votre base de données gentoo fraîchement créée. Maintenant que vous l'utilisez, vous pouvez commencer à créer des tables et y placer des informations.

== Travailler avec des tables dans MySQL ==

=== Créer une table ===

Dans la structure de MySQL, il y a les bases de données, les tables, les enregistrements et les champs. Les bases de données contiennent les tables, les tables contiennent les enregistrements et les enregistrements contiennent les champs qui contiennent, pour leur part, les informations réelles. Cette structure permet aux utilisateurs de préciser comment ils veulent accéder à leurs données.  Jusqu'à maintenant vous avez manipulé des bases de données, passez maintenant aux tables. Tout d'abord, les tables peuvent être listées comme les bases de données avec la commande <code>SHOW TABLES</code>. Actuellement, il n'y a pas de table dans la base gentoo, et la sortie de la commande indique : 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
Empty set (0.00 sec) (Jeu vide)
</pre>
}}

Ceci signifie qu'il faut créer quelques tables. Pour cela utilisez la commande  <code>CREATE TABLE</code>. Cette commande est très différente de la commande <code>CREATE DATABASE</code> en ce sens qu'elle demande une liste d'arguments. Elle a la forme suivante : 

{{Code|CREATE TABLE Syntax|<pre>
CREATE TABLE [nom_de_table] ([nom_de_champ] [type_de_données_de_champ]([taille]));
</pre>
}}

'''nom_de_table''' est le nom de la table que vous voulez créer. Dans notre cas créez une table nommée <code>développeurs</code> . Cette table contiendra le nom des développeurs, leur adresse de courriel et leur travail.'''nom_de_champ''' est le nom des champ. Dans notre exemple, il nous faut trois noms :  nom, courriel et travail. L'argument '''type_de_données_du_champ''' représente le type d'information qui sera stocké. Les différents formats valides peuvent être trouvés sur les pages [http://dev.mysql.com/doc/mysql/fr/column-types.html  Types de colonnes] de MySQL. Pour nos besoins, nous utiliserons le type de données <code>VARCHAR</code> pour tous les champs.<code>VARCHAR</code> est l'un des types de données les plus simples pour travailler avec des chaînes de caractères.'''taille ''' représente le quantité de données un simple champ contiendra. Dans notre cas nous utiliserons   128. Ceci signifie que le champ peut contenir jusqu'à  128 octets. Vous pouvez vous les figurer sans crainte  128 caractères pour le moment, bien qu'il existe une information plus technique que le site cité ci-dessus puisse vous fournir. Maintenant créez la table. 

{{Cmd|CREATE TABLE développeurs ( nom VARCHAR(128), courriel VARCHAR(128), travail VARCHAR(128));|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.11 sec)
</pre>
}}

Il semble que votre table ait bien été créée.  Vérifions cela avec la commande <code>SHOW TABLES</code> : 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+------------------+
| Tables_in_gentoo |
+------------------+
| développeurs     |
+------------------+
1 row in set (0.00 sec)
</pre>
}}

Bien ! Notre table est là ! Néanmoins, elle ne semble pas contenir la moindre information sur les types de champs que nous avons définis. Pour cela, utilisez la commande <code>DESCRIBE</code> (ou <code>DESC</code> en forme raccourcie), qui prend le nom de la table en argument. Regardons à quoi cela ressemble avec notre table développeurs. 

{{Cmd|DESCRIBE développeurs;|prompt=mysql&gt; |output=<pre>
+----------+--------------+------+-----+----------+---------+
| Champ    | Type         | Null | Key | Defaut     | Extra   |
+----------+--------------+------+-----+------------+---------+
| nom      | varchar(128) | YES  |     | NULL       |         |
| courriel | varchar(128) | YES  |     | NULL       |         |
| travail  | varchar(128) | YES  |     | NULL       |         |
+----------+--------------+------+-----+------------+---------+
3 rows in set (0.00 sec)
</pre>
}}

Ceci montre les différents champs et leur type ainsi que quelques attributs supplémentaires qui sont au delà du champ de ce document. Reportez-vous au [http://dev.mysql.com/doc/mysql/fr/ Manuel de référence de MySQL ] pour une information plus complète. Vous disposez maintenant d'une table avec laquelle travailler. Nous allons la remplir. 

=== Remplir la base de données  MySQL  ===

Nous remplissons une table (ou y ajoutons des données) avec la commande <code>INSERT</code>. Comme la commande <code>CREATE TABLE</code>, elle utilise un format spécifique : 

{{Code|INSERT Syntax|<pre>
INSERT INTO table (col1, col2, ...) VALUES('valeur1', 'valeur2', ...);
</pre>
}}

Cette commande est utilisée pour insérer un enregistrement dans une table. ''table'' contient le nom de la table dans laquelle nous désirons entrer des informations. Le nom de la table peut être suivi par une liste des colonnes dans lesquelles nous voulons insérer des données et <code>VALEURS()</code> contiennent les valeurs à insérer dans la table. Vous pouvez ne pas fournir la liste des colonnes si vous écrivez dans toutes les colonnes et que si vous fournissez les valeurs dans l'ordre dans lequel vous avez défini les colonnes. Dans ce cas, nous voulons insérer des données dans la table ''développeurs''. Insérons un enregistrement : 

{{Cmd|INSERT INTO développeurs VALUES('Joe Smith', 'joesmith@gentoo.org', 'toolchain');|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.06 sec)
## (Si vous ne connaissez pas l'ordre des colonnes dans la table ou voulez insérer 
un enregistrement incomplet.)
mysql> INSERT INTO développeurs (travail, nom) VALUES('outsourced', 'Jane Doe');
Query OK, 1 row affected (0.01 sec)
</pre>
}}

Si on se réfère au résultat retourné, il apparaît que l'enregistrement a été correctement inséré. Mais comment faire pour insérer plus qu'un seul enregistrement ? C'est là que la commande <code>LOAD DATA</code> entre en scène. Elle charge les enregistrements depuis un fichier. Essayons en éditant un tel fichier dans notre répertoire home. Nous appellerons ce fichier {{Path|records.txt}}. En voici un échantillon : 

{{Code|~/records.txt|<pre>
John Doe	johndoe@gentoo.org	portage
Chris White	chriswhite@gentoo.org	documentation
Sam Smith	samsmith@gentoo.org	amd64
</pre>
}}

{{Important|Vous devez absolument connaître les données que vous manipulez. Il est très dangereux d'utiliser <code>LOAD DATA</code> sans une parfaite maîtrise des données du fichier !}}

La commande <code>LOAD DATA</code> a une définition beaucoup plus longue, mais nous utiliserons ici une forme simplifiée. 

{{Code|LOAD DATA Syntax|<pre>
LOAD DATA LOCAL INFILE '/chemin/vers/fichier' INTO TABLE table;
</pre>
}}

{{Path|/chemin/vers/fichier}} représente le chemin et le nom du fichier à charger. table est le nom de la  table concernée. Dans ce cas, le fichier est {{Path|~/records.txt}} et la table est  développeurs. 

{{Cmd|LOAD DATA LOCAL INFILE '~/records.txt' INTO TABLE développeurs;|prompt=mysql&gt; |output=<pre>
Query OK, 3 rows affected (0.00 sec)
Records: 3  Deleted: 0  Skipped: 0  Warnings: 0
</pre>
}}

{{Important| Si vous obtenez un comportement étrange, assurez-vous que vous champs sont séparés par des tabulations. Si vous copiez-collez vous données dans le fichier à partir d'une autre source, cela pourrait changer vous tabulations en espaces.}}

Ça a marché ! Cependant, ceci insère seulement des enregistrements et ne vous donne aucun contrôle sur MySQL. Beaucoup d'application du Web utilisent des scripts sql afin de configurer MySQL rapidement et facilement. Si vous voulez utiliser un script sql, vous devez lancer mysql en mode batch, ou « sourcer » le fichier. Voici un exemple où mysql est utilisé en mode batch : 

{{Cmd|mysql -u root -h localhost -p < sqlfile}}

Comme avec <code>LOAD DATA</code> , vous devez savoir précisément ce que  {{Path|sqlfile}} contient. ''Dans le cas contraire votre base peut être compromise !'' Une  autre façon de faire la même chose consiste à utiliser la commande <code>source</code>. Cette commande exécutera les commandes mysql trouvée dans un fichier sql tout en étant en mode mysql interactif. Voici comment « sourcer » un fichier sql : 

{{Cmd|source sqlfile;|prompt=mysql&gt; }}

Si vous rencontrez une application Web vous demandant d'exécuter un fichier sql, les deux commandes vues ci-dessus peuvent être utilisées pour le faire. Nous avons configuré notre table, mais comment vérifier nos champs ? Nous pouvons le faire en exécutant des requêtes de recherche sur la table. 

=== Parcourir une table  MySQL avec des requêtes ===

Les requêtes sont l'une des fonctionnalités principales de toute base SQL. Elles permettent de transformer les données dans les tables en quelque chose d'utile. La plupart des requêtes sont faites avec la commande <code>SELECT</code>. La commande  <code>SELECT</code> est très complexe, et nous allons nous limiter à trois formes principales de cette commande dans ce document. 

{{Code|SELECT forms|<pre>
## (Sélectionne toutes les entrées dans une table )
SELECT * FROM table;
## (Sélectionne des entrées spécifiques dans une table )
SELECT * FROM table WHERE champ=valeur;
## (Sélectionne des champs spécifiques)
SELECT champ1,champ2,champ3 FROM table [WHERE champ=valeur];
</pre>
}}

Jetons un coup d'œil rapide à la première forme. Elle est relativement simple et retourne une vue d'ensemble de la table. Nous allons avancer et la lancer pour voir de quelles données nous disposons jusqu'à maintenant. 

{{Cmd|SELECT * FROM développeurs;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| nom         | courriel              | travail        |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

Nous pouvons voir à la fois les données que nous avons insérées via <code>INSERT</code>  et celles que nous avons insérées via <code>LOAD DATA</code>. Maintenant, supposons que nous ne voulions voir que l'enregistrement par Chris White. Nous pouvons le faire en utilisant la deuxième forme de <code>SELECT</code>. Comme ceci : 

{{Cmd|SELECT * FROM développeurs WHERE nom {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+---------------+
| nom         | courriel              | travail       |
+-------------+-----------------------+---------------+
| Chris White | chriswhite@gentoo.org | documentation |
+-------------+-----------------------+---------------+
1 row in set (0.08 sec)
</pre>
}}

Comme attendu, l'entrée spécifique que nous cherchons a été sélectionnée et est affichée. Maintenant, supposons que nous ne voulions voir que le travail et le courriel des personnes et pas leur nom. Nous pouvons pour cela utiliser la troisième forme de <code>SELECT</code> comme ceci : 

{{Cmd|SELECT courriel,travail FROM développeurs WHERE nom {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-----------------------+---------------+
| courrie               | travail       |
+-----------------------+---------------+
| chriswhite@gentoo.org | documentation |
+-----------------------+---------------+
1 row in set (0.04 sec)
</pre>
}}

Cette méthode de sélection est beaucoup plus facile à gérer, en particulier avec une grande quantité d'informations, comme nous allons le voir. Tout de suite, étant utilisateur root de mysql, nous avons des droits illimités pour faire tout ce que nous voulons dans la base MySQL. Dans un environnement de serveur, un utilisateur avec de tels privilèges peut être source de gros problèmes. Afin de définir qui fait quoi dans la base, nous devons définir les privilèges. 

== Privilèges MySQL ==

=== Accorder des privilèges avec la commande GRANT ===

Privileges are what kind of access users have to databases, tables, pretty much anything. Right now in the gentoo database, the MySQL root account is the only account that can access it, given its permissions. Now, let's create two somewhat generic users, guest and admin, who will access the gentoo database and work with the information in it. The guest account will be a restricted one. All it will be able to do is get information from the database, and that's it. admin will have the same control as root, but only for the gentoo database (not the main mysql databases). Before we start on that, let's have a closer look at this somewhat simplified format of the <code>GRANT</code> command. 

{{Code|GRANT Syntax|<pre>
GRANT [privileges] ON database.* TO '[user]'@'[host]' IDENTIFIED BY '[password]';
</pre>
}}

{{Note|<code>GRANT</code> is considered to be the way to create a user. Later versions of MySQL, however, do contain a<code>CREATE_USER</code> function, though<code>GRANT</code> is still preferred.}}

First we have the privileges we wish to assign. With what we've learned so far, here are some of the privileges you can set: 

* <code>ALL</code> - Gives the all privilege control for the database
* <code>CREATE</code> - Allows users to create tables
* <code>SELECT</code> - Allows users to query tables
* <code>INSERT</code> - Allows users to insert data into a table
* <code>SHOW DATABASES</code> - Allows users to see a list of databases
* <code>USAGE</code> - User has no privileges
* <code>GRANT OPTION</code> - Allows users to grant privileges

{{Note|If you're running MySQL to communicate data to a web application, <code>CREATE</code> , <code>SELECT</code> , <code>INSERT</code> (discussed here), <code>DELETE</code> and <code>UPDATE</code> (for further infomation look up the [http://dev.mysql.com/doc/mysql/en/grant.html MySQL Reference Manual - GRANT and REVOKE Syntax] section) are the only permissions you will most likely need. A lot of people make the mistake of granting all permissions when it's not really necessary. Check with the application developers to see if such permissions will cause issues with general operation.}}

For our admin user, ALL will do. For the guest user, <code>SELECT</code> will be sufficient for read only access. database is the database we wish the user to have these permissions on. In this example, gentoo is the database. The .* means all tables. If you wanted to, you could apply per table access. user is the name of the user and host is the hostname the user will be accessing from. In most cases, this will be localhost. Finally, password is the user's password. Given the information, let's go ahead and create our users. 

{{Cmd|GRANT ALL ON gentoo.* TO 'admin'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

{{Cmd|GRANT SELECT ON gentoo.* TO 'guest'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

Now that we have the users setup, let's test them out. First we quit mysql by typing <code>quit</code> at the command prompt: 

{{Cmd|quit|prompt=mysql&gt; }}

We're now back at the console. Now that we have our users setup, let's go ahead and see what they can do. 

=== Testing User Permissions ===

We shall now attempt to login as the guest user. Currently, the guest user has <code>SELECT</code> only privileges. This basically comes down to being able to search and nothing more. Go ahead and login with the guest account. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 6 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Now we should test the user restriction(s). Let's switch to the gentoo database: 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
</pre>
}}

Now let's try to do something we are not supposed to. We'll attempt to create a table. 

{{Cmd|CREATE TABLE test (test VARCHAR(20), foobar VARCHAR(2));|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

As you can see, this function fails, as our user does not have the appropriate access. However, one access we did grant is the <code>SELECT</code> statement. Let's go ahead and try that: 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

The command succeeds, and we're given a glimpse of what user permissions can do. We did, however, create an admin account as well. This was created to show that even all permissions granted users can still have limitations. Go ahead and quit MySQL and login as the admin. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u admin -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 7 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

To begin, we'll try creating a new database with our admin user. This admin user will have access similiar to the root MySQL account, and will be able to do any kind of modification to the gentoo database it chooses. This will test the user's access to the main MySQL database. Remember ealier that we only set permissions to a specific database. 

{{Cmd|CREATE DATABASE gentoo2;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'admin@localhost' to database 'gentoo2'
</pre>
}}

Indeed, the admin user cannot create databases on the main MySQL database, despite all his permissions on the gentoo database. However, we're still able to use the admin account to modify the gentoo database, as shown here by this example data insertion. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql> INSERT INTO developers VALUES('Bob Simmons', 'bobsimmons@gentoo.org', 'python');
Query OK, 1 row affected (0.08 sec)
</pre>
}}

The admin user can access the database as they please. Now sometimes, we need to get rid of user permissions. This could be anything from a problematic user to a retired employee. Let's take a look at how to disable user permissions with the <code>REVOKE</code> command. 

=== Removing User Access With The REVOKE Command ===

The <code>REVOKE</code> command lets us deny access to a user. We can either deny full access, or specific access. In fact, the format is very similiar to <code>GRANT</code> . 

{{Code|REVOKE Syntax|<pre>
REVOKE [privileges] ON database.* FROM '[user]'@'[host]';
</pre>
}}

Options here are explained in the <code>GRANT</code> command section. In this section however, we're going to deny full access to a user. Let's say we find out the guest account is causing some problems security wise. We decide to revoke all privileges. We login as root and do the needful. 

{{Cmd|REVOKE ALL ON gentoo.* FROM 'guest'@'localhost';|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

{{Note|In this case, user access is simple, so per database revoking is not a problem. However, in larger cases, you would most likely be using *.* instead of gentoo.* to remove user access to all other databases.}}

Now let's quit and attempt to login as a guest user. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 9 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Although we're able to login, our access to gentoo is now gone. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

And our problematic user is no longer able to access the gentoo database. Please note that the user was still able to login. That is because they remain in the main MySQL database. Let's take a look at how to completely remove an account with <code>DELETE</code> and the MySQL user table. 

=== Removing Accounts Using DELETE ===

The MySQL user table is a listing of all users and information about them. Make sure you're logged in as root. Then go ahead and use the main MySQL database. 

{{Cmd|USE mysql;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql>
</pre>
}}

Now let's see what tables the mysql database has: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+-----------------+
| Tables_in_mysql |
+-----------------+
| columns_priv    |
| db              |
| func            |
| host            |
| tables_priv     |
| user            |
+-----------------+
6 rows in set (0.00 sec)
</pre>
}}

The user table is the table we're after. However, the user table contains 30 different fields, making it very hard to read. In order to make things easier to read, we'll go ahead and use the third version of the <code>SELECT</code> statement. The fields we're after are Host and User. 

{{Cmd|SELECT Host,User FROM user WHERE User {{=}} 'guest';|prompt=mysql&gt; |output=<pre>
+-----------+-------+
| Host      | User  |
+-----------+-------+
| localhost | guest |
+-----------+-------+
1 row in set (0.00 sec)
</pre>
}}

Now that we have our information, we can get rid of the guest user. This is done with the <code>DELETE</code> command and the syntax is shown below. 

{{Code|DELETE Syntax|<pre>
DELETE FROM table WHERE field='value';
</pre>
}}

You may notice that <code>DELETE</code> is somewhat similiar to the <code>SELECT</code> statement in its format. In this case, the field will be User, and the value guest. This will delete the record in the user table where the user is guest, successfully deleting our guest user account. Let's go ahead and do that: 

{{Cmd|DELETE FROM user WHERE User{{=}}'guest';|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.07 sec)
</pre>}}

{{Cmd|FLUSH PRIVILEGES;|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

It seems to have worked ok. Let's test by logging out and attempting to login as our guest user. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
ERROR 1045: Access denied for user: 'guest@localhost' (Using password: YES)
</pre>
}}

Our user is now successfully deleted! 

=== Conclusion ===

While this guide focuses mainly on setting up MySQL on the command line, a few alternatives are available in GUI form: 

* [http://www.phpmyadmin.net/home_page/ phpMyAdmin] - Popular php based MySQL administration tool.
* [http://sourceforge.net/projects/mysqlnavigator/ mysqlnavigator] - QT frontend to MySQL.
* [http://gmyclient.sourceforge.net/ gmyclient] - A GNOME based MySQL client.
* [http://www.knoda.org/ knoda] - A KDE MySQL client.

This ends the MySQL introductory tutorial. I hope this gives you a better understanding of the basics behind MySQL and getting a database set up.

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:

* Chris White
* Shyam Mani
* Xavier Neys
