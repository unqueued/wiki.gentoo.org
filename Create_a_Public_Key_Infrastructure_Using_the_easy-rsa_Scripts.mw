[[OpenVPN|<< back to OpenVPN]]

The first step to setup a OpenVPN server is to create a [http://en.wikipedia.org/wiki/Public_key_infrastructure PKI (Public Key Infrastructure)] from scratch. It consists of 

*A public master Certificate Authority (CA) certificate and a private key
*A separate public certificate and private key pair (hereafter referred to as a certificate) for each server and each client.

We could use easy-rsa scripts to do this. Install it by running

{{emerge|app-crypt/easy-rsa}}


== Creating certificates ==

To keep creating process separated, we could copy scripts to different place every time to do the job.

{{RootCmd|cp -a /usr/share/easy-rsa /root/easy-rsa-example}}

change directory

{{RootCmd|cd /root/easy-rsa-example}}
{{RootCmd|mv vars.example vars}}

To ensure the consistent use of values when generating the PKI, set default values to be used by the PKI generating scripts. Edit /root/easy-rsa/vars and at a minimum set the 
* EASYRSA_DN "org"
* EASYRSA_REQ_COUNTRY
* EASYRSA_REQ_PROVINCE
* EASYRSA_REQ_CITY
* EASYRSA_REQ_ORG
* EASYRSA_REQ_EMAIL
parameters (do not leave any of these parameters blank). Change the KEY_SIZE parameter to 2048 for the SSL/TLS to use 2048bit RSA keys for authentication.

{{FileBox|filename=/root/easy-rsa-example/vars|1=
# Choices are:
#   cn_only  - use just a CN value
#   org      - use the "traditional" Country/Province/City/Org/OU/email/CN format

set_var EASYRSA_DN      "org"

# Organizational fields (used with 'org' mode and ignored in 'cn_only' mode.)
# These are the default values for fields which will be placed in the
# certificate.  Don't leave any of these fields blank, although interactively
# you may omit any specific field by typing the "." symbol (not valid for
# email.)

set_var EASYRSA_REQ_COUNTRY     "US"
set_var EASYRSA_REQ_PROVINCE    "CA"
set_var EASYRSA_REQ_CITY        "SanFrancisco"
set_var EASYRSA_REQ_ORG         "Fort-Funston"
set_var EASYRSA_REQ_EMAIL       "me@myhost.mydomain"
}}

Delete any previously created certificates.

{{Warning|This will delete any previously generated certificates stored in /root/easy-rsa/keys, including the Certificate Authority (CA) certificate.}}

{{RootCmd| ./easyrsa init-pki}}

The build-ca script generates the Certificate Authority (CA) certificate.

{{RootCmd|# ./easyrsa build-ca|output=<pre>
Generating a 2048 bit RSA private key
.............................+++
................+++
writing new private key to 'ca.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [US]:
State or Province Name (full name) [CA]:
Locality Name (eg, city) [SanFrancisco]:
Organization Name (eg, company) [Fort-Funston]:
Organizational Unit Name (eg, section) [changeme]:
Common Name (eg, your name or your server's hostname) [changeme]:
Name [changeme]:
Email Address [mail@host.domain]:</pre>}}

The build-key-server script <code>#  ./easyrsa gen-req <server name> nopass </code> generates a server certificate. Make sure that the server name (Common Name when running the script) is unique.
Option nopass means no need to import password.

{{RootCmd|./easyrsa gen-req example|output=<pre>
Generating a 2048 bit RSA private key
.........+++
............................................+++
writing new private key to 'example.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [US]:
State or Province Name (full name) [CA]:
Locality Name (eg, city) [SanFrancisco]:
Organization Name (eg, company) [Fort-Funston]:
Organizational Unit Name (eg, section) [changeme]:
Common Name (eg, your name or your server's hostname) [example]:
Name [changeme]:
Email Address [mail@host.domain]:

Keypair and certificate request completed. Your files are:
req: /root/easy-rsa/pki/reqs/example.req
key: /root/easy-rsa/pki/private/example.key
</pre>}}

The option gen-dh generates the Diffie-Hellman parameters .pem file needed by the server.

{{Note|It would be better to generate a new one for each server, but you can use the same one if you want to.}}

{{RootCmd| ./easyrsa gen-dh |output=<pre>
Generating DH parameters, 2048 bit long safe prime, generator 2
This is going to take a long time
...........................+...........+......................
................+
...........
...........+.......................++*++*</pre>}}

The build-client-full script <code>#  ./easyrsa build-client-full <client name> nopass </code> generates a client certificate. Make sure that the client name (Common Name when running the script) is unique. Option nopass means no need to input password.

{{Note|Do not enter a challenge password or company name when the script prompts you for one.}}

{{Important|Every time to create a new client's key, you would just to do this step.}}

{{RootCmd|./easyrsa build-client-full client1 nopass|output=<pre>

Note: using Easy-RSA configuration from: ./vars
Generating a 2048 bit RSA private key
.................................................................+++
..+++
writing new private key to '/root/easy-rsa/pki/private/client1.key.GIukBzmSVv'
-----
Using configuration from /root/easy-rsa/openssl-1.0.cnf
Enter pass phrase for /root/easy-rsa/pki/private/ca.key:
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
countryName           :PRINTABLE:'US'
stateOrProvinceName   :PRINTABLE:'CA'
localityName          :PRINTABLE:'SanFrancisco'
organizationName      :PRINTABLE:'Fort-Funston'
organizationalUnitName:PRINTABLE:'changeme'
commonName            :PRINTABLE:'client1'
name                  :PRINTABLE:'changeme'
emailAddress          :IA5STRING:'mail@host.domain'
Certificate is to be certified until Jan 16 12:56:33 2027 GMT (3650 days)

Write out database with 1 new entries
Data Base Updated</pre>}}

Generate a secret Hash-based Message Authentication Code (HMAC) by running

{{RootCmd|openvpn --genkey --secret /root/easy-rsa-example/keys/ta.key}}

{{Important|You would like to keep the <code>/root/easy-rsa-example</code> folder for further usage.}}

And now, you can go on to setup the server configuration.

The build-server-full script <code>#  ./easyrsa build-server-full <client name> nopass </code> generates a server certificate. Make sure that the Server name (Common Name when running the script) is unique. Option nopass means no need to input password. The command usage just like build-client-full.
