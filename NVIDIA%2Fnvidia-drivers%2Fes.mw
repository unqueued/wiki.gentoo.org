<languages />

{{Metadata|abstract=nvidia-drivers es el driver propietario para placas de video NVIDIA. Una alternativa de codigo abierto es nouveau.}}

{{Package|x11-drivers/nvidia-drivers}} es el controlador propietario para tarjetas de vídeo NVIDIA. Una alternativa de código abierto es [[nouveau]].

El paquete {{Package|x11-drivers/nvidia-drivers}} del árbol lo mantiene NVIDIA y se construye con el núcleo Linux. Contienen un gran fichero binario (blob) que realiza el trabajo pesado para comunicarse con la tarjeta de vídeo. Los controladores están compuestos por dos partes, un módulo para el núcleo y un controlador X11. Ambas partes se incluyen en un solo paquete. Debido a la forma en que NVIDIA empaqueta sus controladores, es necesario tomar algunas decisiones antes de instalar los controladores.

El paquete {{Package|x11-drivers/nvidia-drivers}} contiene los controladores más recientes de NVIDIA con soporte para la mayoría de las tarjetas, con varias versiones disponibles, dependiendo de la antigüedad que tenga su tarjeta. Utiliza un «eclass» para detectar qué tipo de tarjeta está funcionando en el sistema para que se instale la versión correcta.

== Compatibilidad del hardware ==

El paquete {{Package|x11-drivers/nvidia-drivers}} es compatible con una amplia gama de tarjetas NVIDIA disponibles. Están disponibles múltiples versiones para su instalación, dependiendo de la tarjeta(s) que tenga el sistema. Consulte la documentación oficial de NVIDIA, [http://www.nvidia.com/object/IO_32667.html ¿Qué es un controlador antiguo?], para averiguar qué versión de {{Package|x11-drivers/nvidia-drivers}} debe ser utilizada. Una manera bastante decente para encontrar esta versión es a través de  [http://www.nvidia.com/Download/Find.aspx  un formulario interactivo]. Introduzca la tarjeta gráfica que es utilizada por el sistema (no olvide la opción de Legacy en el campo «Product Type») y el formulario debe terminar con la versión más compatible.

Si la tarjeta ha sido identificada como una tarjeta antigua entonces se enmascara con los lanzamientos más recientes de {{Package|nvidia-drivers}}, esto es:

{{FileBox|filename=/etc/portage/package.mask|titlə=Enmascarar los controladores con la versión superior a 174|1=
>x11-drivers/nvidia-drivers-174
}}

Observe que Gentoo no proporciona las versiones 71.86.xx. Si el sistema tiene una tarjeta que necesita estos controladores, entonces se recomienda utilizar el controlador [[nouveau]].

== Instalación ==

=== El núcleo de Linux===

Como se mencionó anteriormente, el controlador NVIDIA del núcleo se instala y ejecuta al margen del núcleo actual. Se construye como módulo, por lo que el núcleo debe soportar la carga de los módulos del núcleo (ver más abajo).

El módulo del núcleo ({{Path|nvidia.ko}}) consta de una parte propietaria comúnmente conocida como [http://es.wikipedia.org/wiki/Binary_large_object «blob»] (abreviatura en inglés de ''Binary Large Objects''  —objetos binarios grandes—) que controla el [https://es.wikipedia.org/wiki/Circuito_integrado chip] gráfico, y una parte de código abierto (el [http://es.wikipedia.org/wiki/Lenguaje_pegamento «glue»] o ''lenguaje de pegamento''), que, en tiempo de ejecución, actúa como intermediario entre la parte propietaria y el núcleo. Ambos tienen que trabajar muy bien juntos, dado que, de otra manera, el usuario podría sufir la pérdida de datos (a través de un ''kernel panic'', servidores X que se bloquean sin que las aplicaciones X hayan guardado los datos) e, incluso, un fallo de hardware (pensemos en sobrecalentamientos y otros temas relacionados con la administración de energía).

==== Compatibilidad del núcleo ====

De vez en cuando, una nueva versión del núcleo cambia la [https://es.wikipedia.org/wiki/Interfaz_binaria_de_aplicaciones ABI] (siglas en inglés de ''application binary interface'' —interfaz binaria de aplicación—) interna para los controladores, lo que significa que todos los controladores que utilizan esas ABI deben cambiar en consecuencia. Para controladores de código abierto, especialmente los distribuidos con el núcleo, estos cambios son casi triviales de arreglar, ya que toda la cadena de llamadas entre los controladores y otras partes del núcleo pueden ser revisadas con bastante facilidad. Para los controladores propietarios, como nvidia.ko, esto no funciona exactamente igual. Cuando cambia la ABI interna, entonces no es posible simplemente ajustar el «glue», porque nadie sabe cómo el glue se utiliza por la parte propietaria. Incluso después de arreglar las cosas de manera que parezcan funcionar bien, el usuario corre el riesgo de que la ejecución de nvidia.ko en el nuevo núcleo no esté soportada, dando lugar a la pérdida de datos y fallos del hardware.

Cuando se libera una nueva versión del núcleo incompatible, probablemente sea mejor quedarse, por un tiempo, con el núcleo con soporte más reciente. NVIDIA suele tardar un par de semanas en preparar una nueva versión patentada que considere apta para su uso general. Sea paciente. Si es absolutamente necesario, entonces es posible utilizar la orden ''epatch_user'' con los ebuilds de nvidia-drivers: esto permite al usuario parchear nvidia-drivers para adaptarse, de alguna manera, con lo último, es decir, la liberación del núcleo no compatible. Tenga en cuenta que ni los mantenedores de nvidia-drivers ni de NVIDIA dan soporte a esta situación. No habrá ninguna garantía para el hardware, los mantenedores de Gentoo no pueden comenzar a solucionar los problemas, ya que es un driver propietario que solo NVIDIA puede depurar adecuadamente, y los mantenedores del núcleo (tanto de Gentoo como los de desarrollo) no darán, sin duda, soporte a los controladores propietarios, o, de hecho, a cualquier sistema «viciado por estos» que pase a tener problemas.

Si se utiliza  {{c|genkernel all}} para configurar el núcleo, entonces todo estará listo. En caso contrario, vuelva a comprobar la configuración del núcleo para que este soporte (cargas los módulos) esté activado:

{{KernelBox|title=Activar soporte para cargar módulos|1=
[*] Enable loadable module support --->
}}

Active también ''Memory Type Range Register'' en el núcleo:

{{KernelBox|title=Activar soporte para MTRR|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

Si el sistema tiene una tarjeta gráfica [https://es.wikipedia.org/wiki/Accelerated_Graphics_Port AGP] , entonces, active opcionalmente el soporte agpgart para el núcleo, ya sea compilado (en el núcleo) o como módulo. Si (la opción) del módulo agpgart (compilado) en el núcleo no se utiliza, entonces, los controladores usarán su propia implementación de agpgart, llamada NvAGP. En algunos sistemas, esto produce un mejor comportamiento que el módulo agpgart en el núcleo, y en otros, se comporta peor. Evalúe una u otra opción en el sistema para obtener el mejor rendimiento. Cuando no sepa qué hacer, utilice agpgart en el núcleo:

{{KernelBox|title=Activar soporte para agpgart|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note/es|En amd64, el IOMMU controla el ajuste agpgart.}}

{{Important|For x86 and AMD64 processors, the in-kernel [[framebuffer]] driver conflicts with the binary driver provided by NVIDIA. When compiling the kernel for these CPUs, completely remove support for the in-kernel driver as shown:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Now make sure the nouveau driver is disabled:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        < > Nouveau (nVidia) cards
}}
}}

Una alternativa framebuffer [[uvesafb]], que puede ser instalado en paralelo a {{Package|x11-drivers/nvidia-drivers}}. 

{{Important|For x86 and AMD64 processors, the [[uvesafb]] driver conflicts with the binary driver provided by NVIDIA above 361.28 versions.}}

For (U)EFI systems, uvesafb will not work. Be warned that enabling ''efifb'' support in kernel (<code>CONFIG_FB_EFI=y</code>) causes intermittent problems with the initialization of the NVIDIA drivers. There is no known alternative framebuffer for (U)EFI systems.

The '''nvidia-drivers''' ebuild automatically discovers the kernel version based on the {{Path|/usr/src/linux}} symlink. Please ensure that this symlink is pointing to the correct sources and that the kernel is correctly configured. Please refer to the "Configuring the Kernel" section of the [[Handbook:Main_Page|Gentoo Handbook]] for details on configuring the kernel.

First, choose the right kernel source using {{c|eselect}}. When using {{Package|sys-kernel/gentoo-sources}} version 3.7.10 for instance, the kernel listing might look something like this:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the kernel that the symbolic link points to.

If the symlink is not pointing to the correct sources, update the link by selecting the number of the desired kernel sources, as in the example above.

{{RootCmd|eselect kernel set 1}}

== Configuration ==

=== Controladores === 

Ahora es el momento de instalar los controladores. En primer lugar, siga la [[Xorg/Guide|X Server Configuration Guide]] y ajuste la variable <code>VIDEO_CARDS="nvidia"</code> en {{Path|/etc/portage/make.conf}}. Durante la instalación del servidor X, esto hará que se instale la versión correcta de {{Package|x11-drivers/nvidia-drivers}}.

{{Note/es|Los controladores se pueden instalar con el parámetro USE <code>gtk</code> establecido en {{Path|/etc/portage/make.conf}}. Esto instalará {{Package|media-video/nvidia-settings}}, una herramienta gráfica muy útil para supervisar y configurar varios aspectos de la tarjeta NVIDIA.}}

{{Important|Every time a [[Kernel/Upgrade|kernel is built]], it is necessary to reinstall the NVIDIA kernel modules. An easy way to rebuild the modules installed by ebuilds (such as {{Package|x11-drivers/nvidia-drivers}}) is to run {{c|emerge @module-rebuild}}.}}

Una vez finalizada la instalación, ejecute {{c|modprobe nvidia}} para cargar el módulo del núcleo en la memoria. Si se trata de una actualización, retire primero el módulo anterior.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Para evitar tener que cargar manualmente el módulo en cada arranque, puede hacer que este se cargue de forma automática cada vez que se arranca el sistema, editando el fichero {{Path|/etc/conf.d/modules}} y añadiendo <code>nvidia</code> al mismo.

{{Important/es|Si <code>agpgart</code> se compila como un módulo, entonces, añádalo a {{Path|/etc/conf.d/modules}} también.}}

=== Kernel module signing (optional) ===

{{Note|The information in this section in unnecessary for systems that do not implement signed kernel modules. Feel free to skip it.}}

If secure boot kernel signing is used, then the NVIDIA kernel modules need to be signed before they can be loaded.

This can be accomplished by using the kernel-provided {{c|perl}} script as follows.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

As of driver version 358.09 a new module has been made to handle monitor mode setting and for this driver version this module must also be signed.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Once the modules are signed, the driver will load as expected on boot up. This module signing method can be used to sign other modules too - not only the nvidia-drivers. Just modify the path and corresponding module accordingly.

=== The X server ===

Once the appropriate drivers are installed, configure the X server to use the <code>nvidia</code> driver instead of the default <code>nv</code> driver.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Run {{c|eselect}} so that the X server uses the NVIDIA GLX libraries:

{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Enabling global nvidia support ===

Some tools, such as {{Package|media-video/mplayer}} and {{Package|media-libs/xine-lib}}, use a local USE flag called <code>xvmc</code> which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in <code>xvmc</code> in the USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to {{Package|media-video/mplayer}} and/or {{Package|media-libs/xine-lib}} in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the <code>nvidia</code> USE flag, so it might be a good idea to add it to {{Path|/etc/portage/make.conf}}.

Then, run {{c|emerge -uD --newuse @world}} to rebuild the applications that benefit from the USE flag change.

=== Using the nVidia settings tool ===

NVIDIA also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as {{Package|media-video/nvidia-settings}}. As mentioned earlier, it will be pulled in automatically when installing the drivers with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== Activar OpenGL/OpenCL ===

To enable OpenGL and OpenCL though the device, run:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Make sure that the Xorg server is not running during these changes.

== Usage ==

=== Probar la tarjeta gráfica ===

Para probar la tarjeta NVIDIA, encienda X y ejecute {{c|glxinfo}}, que es parte del paquete {{Package|x11-apps/mesa-progs}}. Este debería decir que el renderizado directo está activado:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Para los FPS (siglas en inglés ''frames per second'' —fotogramas por segundo—) del monitor, ejecute {{c|glxgears}}.

== Solución de problemas ==

For an overview of the currently open bugs reported against the {{Package|x11-drivers/nvidia-drivers}} page, take a look at the {{Bug|nvidia-drivers|search=package}}.

===  El controlador falla al intentar inicializarse cuando las interrupciones MSI están activadas ===

El controlador Linux de NVIDIA utiliza Message Signaled Interrupts (MSI) de forma predeterminada. Esto proporciona beneficios de compatibilidad y escalabilidad, debido principalmente a la prevención de compartir [https://es.wikipedia.org/wiki/Interrupci%C3%B3n IRQ] (siglas en inglés de ''interrupt request'' —petición de interrupción—). Algunos sistemas ha tenido problemas con el soporte MSI, al tiempo que trabajan bien con las interrupciones de virtualwire. Estos problemas se manifiestan como una incapacidad para iniciar X con el controlador de NVIDIA, o fallos de inicialización de [https://es.wikipedia.org/wiki/CUDA CUDA].

Las interrupciones MSI se pueden desactivar a través del parámetro del módulo del núcleo de NVIDIA  <code>NVreg_EnableMSI=0</code>. Esto se puede establecer en la línea de órdenes al cargar el módulo, o más apropiadamente a través de los ficheros de configuración de los módulos del núcleo de la distribución (por ejemplo, en {{Path|/etc/modprobe.d/}}).

Por ejemplo:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Configurar NVreg_EnableMSI de nvidia|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=0660 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Obtener aceleración 2D para funcionar en máquinas con 4GB o más de memoria ===

When NVIDIA 2D acceleration is giving problems, then it is likely that the system is unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Cada línea mostrada debe contener <code>write-back</code> o <code>write-combining</code>. Cuando una línea se presenta con <code>uncachable</code> en ella, entonces es necesario cambiar la configuración de la BIOS para solucionar este problema.

Reinicie y entre en la BIOS, y luego encontre la configuración MTRR (probablemente bajo «CPU Settings»). Cambie el ajuste de <code>continuous</code> por <code>discrete</code>  y arranque de nuevo en Linux. Ahora no habŕa ninguna entrada <code>uncachable</code> y la aceleración 2D funcionará sin ningún tipo de interferencias.

=== «no such device» aparece al intentar cargar el módulo del núcleo ===

Esto, por lo general, es causado por uno de los siguientes problemas:

# El sistema no tiene una tarjeta NVIDIA en absoluto. Verifique la salida de  {{c|lspci}} para confirmar que el sistema tiene una tarjeta gráfica NVIDIA instalada y detectada.
# La versión actual instalada de {{Package|x11-drivers/nvidia-drivers}} no es compatible con el modelo de tarjeta gráfica instalado. Consulte el fichero README en /usr/share/nvidia-drivers-*/ para obtener una lista de dispositivos compatibles, o utilice la búsqueda del controlador en  [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Otro controlador del núcleo tiene el control del hardware. Verifique la salida de {{c|lspci -k}} para ver si otro controlador, como «nouveau», maneja la tarjeta gráfica. Si es así, puede desactivar este controlador o incluirlo en una lista negra (conocida como ''blacklist'').

=== Xorg dice que no puede encontrar las pantallas ===

Cuando después de arrancar el sistema, este termina con una pantalla en negro o con un prompt de consola, en lugar de la interfaz gráfica de usuario, entonces, pulse  {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} para que aparezca una consola virtual. A continuación, ejecute:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

para ver la salida de Xorg. Si uno de los primeros errores que muestra Xorg es que este no puede encontrar ninguna pantalla, entonces, siga los siguientes pasos para resolver el problema.

Debería ser suficiente con ejecutar la siguiente orden antes de reiniciar:

{{RootCmd|/opt/bin/nvidia-xconfig}}

Pero, si eso no funciona, ejecute  {{c|lspci}} y observe el comienzo de la línea de la tarjeta de vídeo, como esta:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

Tome el primer dígito, <code>01.00.0</code>, y póngalo en el fichero {{Path|/etc/X11/xorg.conf}}, con la opción <code>BusID</code>:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# Esto no es todo el fichero, solo la parte que necesita ser editada
# El fichero ya debe existir después de ejecutar nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== El renderizado directo no está activado ===

Si el [https://es.wikipedia.org/wiki/Direct_Rendering_Infrastructure renderizado directo] no funciona, puede ser debido a que el núcleo tiene activado el Direct Rendering Manager, que entra en conflicto con el controlador. Vea el estado del renderizado directo, siguiendo las instrucciones de la sección [[#Probar la tarjeta|Probar la tarjeta]].

Primero, desactive [https://es.wikipedia.org/wiki/Direct_Rendering_Manager Direct Rendering Manager] (<code>CONFIG_DRM</code>) en el núcleo:

{{KernelBox|title=Desactivar Direct Rendering Manager|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

A continuación, recompile {{Package|x11-drivers/nvidia-drivers}}, ya que el controlador pudo haberse construido en contra de los símbolos de DRM del núcleo. Esto debería solucionar el problema.

=== Reproducción de vídeo lenta o con parpadeo ===

Lately there seems to be some breaking with playback of some types of video with the NVIDIA binary drivers, causing slow video playback or significant stuttering. This problem seems to be occurring within the Intel CPU Idle replacement instead of the common ACPI CPU idling method for certain CPU's.

Desactive el método Intel CPU idling con <code>intel_idle.max_cstate=0</code> en la fase de arranque de línea de órdenes del núcleo, que hace que el núcleo vuelva automáticamente al método antiguo o normal de ACPI CPU idling. Además, desactivar la función NVIDIA Powermizer, o ajustar Powermizer al rendimiento máximo con  {{c|nvidia-settings}}, se dice que puede ayudar. Aunque el método Intel CPU idling recientemente fue presentado como el método por defecto de CPU idling para CPU i5 y i7 (frente a la utilización de la ACPI CPU idling) esta es la raíz del problema aquí. Cambiar el método idling resuelve de manera significativa el problema, sin embargo, todavía se puede encontrar con algunos parpadeos mínimos o lentitud de vídeo si deinterlacing (''«desentrelazado»'') fue desactivado; esto ocurre cuando el vídeo está probablemente ya desentrelazado (es decir, alias <code>mplayer-nodeint</code> junto con algo similar a <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> lo que daría como resultado trabajar sobre lo ya trabajado).

=== No vertical synchronization (no VSync, tearing) in OpenGL applications ===

Adding the following option to the screen section prevents tearing on GTX 660, 660 Ti, and probably some other GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== Configuración experta ==

=== Documentación ===

El paquete {{Package|x11-drivers/nvidia-drivers}} también viene con una amplia documentación. Esta se instala en {{Path|/usr/share/doc}} y se puede ver con la siguiente orden:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Parámetros del módulo del núcleo ===

El módulo <code>nvidia</code>  del núcleo acepta un número de parámetros (opciones) que se pueden utilizar para modificar el comportamiento del controlador. La mayoría de ellos son mencionados en la documentación. Para agregar o cambiar los valores de estos parámetros, modifique el fichero {{Path|/etc/modprobe.d/nvidia}}. Recuerde que debe ejecutar {{c|update-modules}} después de modificar este fichero y, para que la nueva configuración surta efecto, recargar el módulo <code>nvidia</code> previamente.

{{Warning|Pay close attention to this section as these kernel options can enable features that the hardware may or may not support. These options are not forgiving, so be careful with the parameters. Do not made any changes without validating and double-checking that the change is needed.}}

{| class="table table-condensed table-striped"
|-
! Attribute !! Default !! Description
|-
| <code>NVreg_DeviceFileUID</code> || <code>0</code> || Modify the user ID for the device file. The default value sets it to the {{c|root}} user. Setting this to another user ID will make the driver module create the device file with access available to that user ID.
|-
| <code>NVreg_DeviceFileGID</code> || <code>27</code> || Modify the Group ID for the device file. The default value sets it to the {{c|video}} group.
|-
| <code>NVreg_DeviceFileMode</code> || Undefined || Set the permissions for the device file. A value of 0660 grants the owner and group-owner read-write access while other users cannot access the device file.
|-
| <code>NVreg_ModifyDeviceFiles</code> || <code>1</code> || Instruct the driver to enable or disable dynamic device file management.
|-
| <code>NVreg_EnablePCIeGen3</code> || <code>0</code> || Enable PCIe Gen 3.x support. If the system supports this 8GT high speed bus then enable it with this module option flag. When this is enabled but the system does not support Gen 3.0, the behavior of the system can become irratic and unstable. Some have even reported damage to hardware enabling this when it is not properly supported. By default the Nvidia driver is set to use PCIe Gen 2.x for compatibility reasons.
|-
| <code>NVreg_UsePageAttributeTable</code> || <code>0</code> || This is one of the latest and newest additions to the Nvidia driver modules option. It allows the driver to take full advantage of the PAT technology - a newer way of allocating memory, replacing the older Memory Type Range Register (MTRR) method. The PAT method creates a partition type table at a specific address mapped inside the register and utilizes the memory architecture and instruction set more efficiently and faster. If the computer supports PAT and the feature is enabled in the kernel then this flag can be enabled. Without PAT support, users may experience unstable performance and even crashes if this is enabled. So be careful with these options.
|-
| <code>NVreg_EnableVia4x</code> || <code>0</code> || Enable AGP 4x mode in the the NVIDIA driver on Via-chipset-powered systems. Some of these hardware configurations would not work properly in AGP 4x mode when others would. The default leaves it at AGP 2x mode.
|-
| <code>NVreg_EnableALiAGP</code> || <code>0</code> || On ALi1541 and ALi1647 chipsets, AGP support is by default disabled by the NVIDIA drivers. The value specifies the speed factor to use, so the values 1, 2, 4 and 8 represent AGP 1x, 2x, 4x and 8x respectively. NVIDIA does not recommend changing the value as it may lead to unstable systems.
|-
| <code>NVreg_ReqAGPRate</code> || Unspecified || Forces the AGP mode on the driver. For instance, a value of 1 means AGP 1x, while a value of 4 means AGP 4x.
|-
| <code>NVreg_NvAGP</code> || || Changes the AGP Gart mode setting. Possible values are: <code>0</code> (Disable), <code>1</code> (Enable using NVIDIAs internal AGP-Gart), <code>2</code> (Enable using the Linux kernel AGP-Gart) and <code>3</code> (Enable and use any available, but try th NVIDIA internal one first).
|-
| <code>NVreg_EnableAGPSBA</code> || <code>0</code> || Disables (<code>0</code>) or enables (<code>1</code>) AGP Side Banding. For stability reasons, the setting is by default disabled, but the setting can be enabled for testing and debugging purposes. This is not supported by NVIDIA though.
|-
| <code>NVreg_EnableAGPFW</code> || <code>0</code> || Enables AGP Fast-Writes when set to <code>1</code>. Depending on the system's chipset this may cause stability issues if enabled.
|-
| <code>NVreg_Mobile</code> || <code>0</code> || Through this setting, users can force the EDID information for particular systems. This workaround is provided for mobile GPU's where EDID information is either non-functional or disabled. Potential values are <code>0</code> (Auto detection of the correct setting), <code>1</code> (Dell notebooks), <code>2</code> (non-Compa1 Toshiba laptops), <code>3</code> (All other notebooks/laptops), <code>4</code> (Compa1 Toshiba laptops) or <code>5</code> (Gateway machines).
|-
| <code>NVreg_RemapLimit</code> || <code>60</code> || Maximum amount of system memory remapping. It specifies the amount of memory that the driver will be allowed to remap through the IOMMU/SWIOTLB on a 64-bit system. Only use it if the IOMMU or SMIOTLB is larger than 64mb. NVIDIA recommends to subtract 4mb from the total amount of memory to use. For instance, the default value is <code>60</code> which is in fact 64mb. To set it to 128mb, set the value to <code>124</code>.
|-
|<code>NVreg_UpdateMemoryTypes</code> || <code>0</code> || Tweak the use of page table attributes. Possible values are: <code>0</code> (Nvidias logic mechanism), <code>1</code> (Enable the use of changed page table attributes) and <code>2</code> (Disable the use of page table attributes).
|-
|<code>NVreg_InitializeSystemMemoryAllocations</code> || <code>1</code> || Tell the NVIDIA driver to clear system memory allocations prior to using it for the GPUs. Disabling can give a slight performance boost but at the cost of increased security risks. By default the driver will wipe the allocated by zeroing out its content.
|-
| <code>NVreg_UseVBios</code> || <code>1</code> || Enable or disable the use of the video BIOS int10 code. Set to <code>0</code> to disable.
|-
| <code>NVreg_RMEdgeIntrCheck</code> || Unspecified || Enable or disable checking for edge-triggered interrupts.
|-
| <code>NVreg_EnableMSI</code> || <code>0</code> || Enable or disable PCIe-MSI capabilities. Enable this to use MSI interrupts instead of wired interrupts.
|-
| <code>NVreg_MapRegistersEarly</code> || <code>0</code> || If set to <code>1</code>, allow the driver to map the memory locations early when the system is probing the hardware instead of the default option of doing this when loaded by {{c|modprobe}} or during {{c|startx}}. This is a debugging feature.
|-
| <code>NVreg_RegisterForACPIEvents</code> || <code>1</code> || Enable the driver to register with the ACPI of the system to receive ACPI events. This can be disabled (<code>0</code>) when issues occur with ACPI or while debugging an issue. 
|}

Edit the {{Path|/etc/modprobe.d/nvidia.conf}} file, and afterwards update the module information:

{{RootCmd|update-modules}}

Retire el módulo <code>nvidia</code>...

{{RootCmd|modprobe -r nvidia}}

...y cárguelo de nuevo:

{{RootCmd|modprobe nvidia}}

=== Configuración avanzada de X ===

La capa [https://es.wikipedia.org/wiki/GLX GLX] también tiene una gran cantidad de opciones que se pueden configurar. Estas opciones controlan la configuración de salida de TV, pantallas duales, detección de frecuencia del monitor, etc. Una vez más, todas las opciones disponibles se detallan en la documentación.

Para utilizar cualquiera de estas opciones, lístelas en la sección Device correspondiente del fichero de configuración de X (normalmente {{Path|/etc/X11/xorg.conf}}). Por ejemplo, para desactivar el logo de bienvenida:

{{FileBox|filename=/etc/X11/xorg.conf|title=Desactivar el logo de bienvenida|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== Véase también ==

* [[nouveau & nvidia-drivers switching]] - modo gráfico híbrido utilizando los controladores de código abierto.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configurar un sistema para utilizar los controladores de código cerrado para gráficos híbridos (modesetting).

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
