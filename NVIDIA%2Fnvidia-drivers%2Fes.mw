<languages />

{{Metadata|abstract=nvidia-drivers es el driver propietario para placas de video nVidia. Una alternativa de codigo abierto es nouveau.}}

{{Package|x11-drivers/nvidia-drivers}} es el controlador propietario para tarjetas de vídeo nVidia. Una alternativa de código abierto es [[nouveau]].

El paquete {{Package|x11-drivers/nvidia-drivers}} del árbol lo mantiene nVidia y se construye con el núcleo Linux. Contienen un gran fichero binario (blob) que realiza el trabajo pesado para comunicarse con la tarjeta de vídeo. Los controladores están compuestos por dos partes, un módulo para el núcleo y un controlador X11. Ambas partes se incluyen en un solo paquete. Debido a la forma en que nVidia empaqueta sus controladores, es necesario tomar algunas decisiones antes de instalar los controladores.

El paquete {{Package|x11-drivers/nvidia-drivers}} contiene los controladores más recientes de nVidia con soporte para ''todas'' las tarjetas, con varias versiones disponibles, dependiendo de la antigüedad que tenga su tarjeta. Utiliza un «eclass» para detectar qué tipo de tarjeta está funcionando en el sistema para que se instale la versión correcta.

== Compatibilidad del hardware ==

El paquete {{Package|x11-drivers/nvidia-drivers}} es compatible con una amplia gama de tarjetas nVidia disponibles. Están disponibles múltiples versiones para su instalación, dependiendo de la tarjeta(s) que tenga el sistema. Consulte la documentación oficial de nVidia, [http://www.nvidia.com/object/IO_32667.html ¿Qué es un controlador antiguo?], para averiguar qué versión de {{Package|x11-drivers/nvidia-drivers}} debe ser utilizada. Una manera bastante decente para encontrar esta versión es a través de  [http://www.nvidia.com/Download/Find.aspx  un formulario interactivo]. Introduzca la tarjeta gráfica que es utilizada por el sistema (no olvide la opción de Legacy en el campo «Product Type») y el formulario debe terminar con la versión más compatible.

Si la tarjeta ha sido identificada como una tarjeta antigua entonces se enmascara con los lanzamientos más recientes de {{Package|nvidia-drivers}}, esto es:

{{FileBox|filename=/etc/portage/package.mask|titlə=Enmascarar los controladores con la versión superior a 174|1=
>x11-drivers/nvidia-drivers-174
}}

Observe que Gentoo no proporciona las versiones 71.86.xx. Si el sistema tiene una tarjeta que necesita estos controladores, entonces se recomienda utilizar el controlador [[nouveau]].

== Installation ==

=== Kernel ===

Como se mencionó anteriormente, el controlador nVidia del núcleo se instala y ejecuta al margen del núcleo actual. Se construye como módulo, por lo que el núcleo debe soportar la carga de los módulos del núcleo (ver más abajo).

The kernel module ({{Path|nvidia.ko}}) consists of a proprietary part (commonly known as the "binary blob") which drives the graphics chip(s), and an open source part (the "glue") which at runtime acts as intermediary between the proprietary part and the kernel. These all need to work nicely together as otherwise the user might be faced with data loss (through kernel panics, X servers crashing with unsaved data in X applications) and even hardware failure (overheating and other power management related issues should spring to mind).

==== Kernel compatibility ====

De vez en cuando, una nueva versión del núcleo cambia la [https://es.wikipedia.org/wiki/Interfaz_binaria_de_aplicaciones ABI] (siglas en inglés de ''application binary interface'' —interfaz binaria de aplicación—) interna para los controladores, lo que significa que todos los controladores que utilizan esas ABI deben cambiar en consecuencia. Para controladores de código abierto, especialmente los distribuidos con el núcleo, estos cambios son casi triviales de arreglar, ya que toda la cadena de llamadas entre los controladores y otras partes del núcleo pueden ser revisadas con bastante facilidad. Para los controladores propietarios, como nvidia.ko, esto no funciona exactamente igual. Cuando cambia la ABI interna, entonces no es posible simplemente ajustar el «glue», porque nadie sabe cómo el glue se utiliza por la parte propietaria. Incluso después de arreglar las cosas de manera que parezcan funcionar bien, el usuario corre el riesgo de que la ejecución de nvidia.ko en el nuevo núcleo no esté soportada, dando lugar a la pérdida de datos y fallos del hardware.

Cuando se libera una nueva versión del núcleo incompatible, probablemente sea mejor quedarse, por un tiempo, con el núcleo con soporte más reciente. nVidia suele tardar un par de semanas en preparar una nueva versión patentada que considere apta para su uso general. Sea paciente. Si es absolutamente necesario, entonces es posible utilizar la orden ''epatch_user'' con los ebuilds de nvidia-drivers: esto permite al usuario parchear nvidia-drivers para adaptarse, de alguna manera, con lo último, es decir, la liberación del núcleo no compatible. Tenga en cuenta que ni los mantenedores de nvidia-drivers ni de nVidia dan soporte a esta situación. No habrá ninguna garantía para el hardware, los mantenedores de Gentoo no pueden comenzar a solucionar los problemas, ya que es un driver propietario que solo nVidia puede depurar adecuadamente, y los mantenedores del núcleo (tanto de Gentoo como los de desarrollo) no darán, sin duda, soporte a los controladores propietarios, o, de hecho, a cualquier sistema «viciado por estos» que pase a tener problemas.

If {{c|genkernel all}} was used to configure the kernel, then everything is all set. If not, double check the kernel configuration so that this support is enabled:

{{KernelBox|title=Activar soporte para cargar módulos|1=
[*] Enable loadable module support --->
}}

Active también ''Memory Type Range Register'' en el núcleo:

{{KernelBox|title=Activar soporte para MTRR|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

If the system has an AGP graphics card, then optionally enable agpgart support to the kernel, either compiled in or as a module. If the in-kernel agpgart module is not used, then the drivers will use its own agpgart implementation, called NvAGP.  On certain systems, this performs better than the in-kernel agpgart, and on others, it performs worse. Evaluate either choice on the system to get the best performance. When uncertain what to do, use the in-kernel agpgart:

{{KernelBox|title=Enable agpgart support|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note/es|En amd64, el IOMMU controla el ajuste agpgart.}}

{{Important|For x86 and AMD64 processors, the in-kernel [[framebuffer]] driver conflicts with the binary driver provided by nVidia. When compiling the kernel for these CPUs, completely remove support for the in-kernel driver as shown:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Now make sure the nouveau driver is disabled:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        <*> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
            < > Nouveau (nVidia) cards
}}
}}

A framebuffer alternative is [[uvesafb]], which can be installed parallel to {{Package|x11-drivers/nvidia-drivers}}. 

For (U)EFI systems, uvesafb will not work. Be warned that enabling ''efifb'' support in kernel (<code>CONFIG_FB_EFI=y</code>) causes intermittent problems with the initialization of the nvidia drivers. There is no known alternative framebuffer for (U)EFI systems.

The '''nvidia-drivers''' ebuild automatically discovers the kernel version based on the {{Path|/usr/src/linux}} symlink. Please ensure that this symlink is pointing to the correct sources and that the kernel is correctly configured. Please refer to the "Configuring the Kernel" section of the [[Handbook:Main_Page|Gentoo Handbook]] for details on configuring the kernel.

First, choose the right kernel source using {{c|eselect}}. When using {{Package|sys-kernel/gentoo-sources}} version 3.7.10 for instance, the kernel listing might look something like this:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the symlinked kernel.

If the symlink is not pointing to the correct sources, update the link by selecting the number of the desired kernel sources, as in the example above.

{{RootCmd|eselect kernel set 1}}

== Configuration ==

=== Drivers === 

Ahora es el momento de instalar los controladores. En primer lugar, siga la [[Xorg/Guide|X Server Configuration Guide]] y ajuste la variable <code>VIDEO_CARDS="nvidia"</code> en {{Path|/etc/portage/make.conf}}. Durante la instalación del servidor X, esto hará que se instale la versión correcta de {{Package|x11-drivers/nvidia-drivers}}.

{{Note/es|Los controladores se pueden instalar con el parámetro USE <code>gtk</code> establecido en {{Path|/etc/portage/make.conf}}. Esto instalará {{Package|media-video/nvidia-settings}}, una herramienta gráfica muy útil para supervisar y configurar varios aspectos de la tarjeta nVidia.}}

{{Important|Every time a [[Kernel/Upgrade|kernel is built]], it is necessary to reinstall the nVidia kernel modules. An easy way to rebuild the modules installed by ebuilds (such as {{Package|x11-drivers/nvidia-drivers}}) is to run {{c|emerge @module-rebuild}}.}}

Once the installation has finished, run {{c|modprobe nvidia}} to load the kernel module into memory. If this is an upgrade, remove the previous module first.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Para evitar tener que cargar manualmente el módulo en cada arranque, puede hacer que este se cargue de forma automática cada vez que se arranca el sistema, editando el fichero {{Path|/etc/conf.d/modules}} y añadiendo <code>nvidia</code> al mismo.

{{Important/es|Si <code>agpgart</code> se compila como un módulo, entonces, añádalo a {{Path|/etc/conf.d/modules}} también.}}

=== Kernel module signing (optional) ===

{{Note|The information in this section in unnecessary for systems that do not implement signed kernel modules. Feel free to skip it.}}

If you are using secure boot kernel signing then you will need to sign the Nvidia kernel modules before they can be loaded.

You do this by using the kernel provided {{c|perl}} script as follows.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

As of driver version 358.09 a new module has been made to handle monitor mode setting and for this driver version this module must also be signed.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Once you have signed these modules then the driver will load as expected on boot up. This module signing method can be used to sign other modules not only your nvidia-drivers. You would have to modify the path and corresponding module accordingly.

=== The X server ===

Once the appropriate drivers are installed, configure the X server to use the <code>nvidia</code> driver instead of the default <code>nv</code> driver.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Run {{c|eselect}} so that the X server uses the nVidia GLX libraries:

{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Enabling global nvidia support ===

Some tools, such as {{Package|media-video/mplayer}} and {{Package|media-libs/xine-lib}}, use a local USE flag called <code>xvmc</code> which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in <code>xvmc</code> in the USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to {{Package|media-video/mplayer}} and/or {{Package|media-libs/xine-lib}} in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the <code>nvidia</code> USE flag, so it might be a good idea to add it to {{Path|/etc/portage/make.conf}}.

Then, run {{c|emerge -uD --newuse @world}} to rebuild the applications that benefit from the USE flag change.

=== Using the nVidia settings tool ===

nVidia also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as {{Package|media-video/nvidia-settings}}. As mentioned earlier, it will be pulled in automatically when installing the drivers with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== Activar OpenGL/OpenCL ===

To enable OpenGL and OpenCL though the device, run:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Make sure that the Xorg server is not running during these changes.

== Usage ==

=== Testing the card ===

To test the nVidia card, fire up X and run {{c|glxinfo}}, which is part of the {{Package|x11-apps/mesa-progs}} package. It should say that direct rendering is activated:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

To monitor the FPS, run {{c|glxgears}}.

== Solución de problemas ==

* {{Bug|nvidia-drivers|search=package}}

===  El controlador falla al intentar inicializarse cuando las interrupciones MSI están activadas ===

El controlador Linux de NVIDIA utiliza Message Signaled Interrupts (MSI) de forma predeterminada. Esto proporciona beneficios de compatibilidad y escalabilidad, debido principalmente a la prevención de compartir [https://es.wikipedia.org/wiki/Interrupci%C3%B3n IRQ] (siglas en inglés de ''interrupt request'' —petición de interrupción—). Algunos sistemas ha tenido problemas con el soporte MSI, al tiempo que trabajan bien con las interrupciones de virtualwire. Estos problemas se manifiestan como una incapacidad para iniciar X con el controlador de NVIDIA, o fallos de inicialización de [https://es.wikipedia.org/wiki/CUDA CUDA].

Las interrupciones MSI se pueden desactivar a través del parámetro del módulo del núcleo de NVIDIA  <code>NVreg_EnableMSI=0</code>. Esto se puede establecer en la línea de órdenes al cargar el módulo, o más apropiadamente a través de los ficheros de configuración de los módulos del núcleo de la distribución (por ejemplo, en {{Path|/etc/modprobe.d/}}).

Por ejemplo:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Configurar NVreg_EnableMSI de nvidia|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Obtener aceleración 2D para funcionar en máquinas con 4GB o más de memoria ===

Cuando la aceleración 2D de nVidia está dando problemas, entonces es probable que el sistema no sea capaz de establecer un rango de combinación de escritura con MTRR. Para verificarlo, compruebe el contenido de {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Every line should contain <code>write-back</code> or <code>write-combining</code>. When a line shows up with <code>uncachable</code> in it then it is necessary to change a BIOS setting to fix this.

Reboot and enter the BIOS, then find the MTRR settings (probably under "CPU Settings"). Change the setting from <code>continuous</code> to <code>discrete</code> and boot back into Linux. There is now no <code>uncachable</code> entry anymore and 2D acceleration now works without any glitches.

=== «no such device» aparece al intentar cargar el módulo del núcleo ===

Esto, por lo general, es causado por uno de los siguientes problemas:

# The system does not have a nVidia card at all.  Check {{c|lspci}} output to confirm that the system has a nVidia graphics card installed and detected.
# The currently installed version of {{Package|x11-drivers/nvidia-drivers}} does not support the installed graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Another kernel driver has control of the hardware. Check {{c|lspci -k}} to see if another driver like "nouveau" is bound to the graphics card. If so, disable or blacklist this driver.

=== Xorg dice que no puede encontrar las pantallas ===

Cuando después de arrancar el sistema, este termina con una pantalla en negro o con un prompt de consola, en lugar de la interfaz gráfica de usuario, entonces, pulse  {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} para que aparezca una consola virtual. A continuación, ejecute:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

para ver la salida de Xorg. Si uno de los primeros errores que muestra Xorg es que este no puede encontrar ninguna pantalla, entonces, siga los siguientes pasos para resolver el problema.

Debería ser suficiente con ejecutar la siguiente orden antes de reiniciar:

{{Cmd| /opt/bin/nvidia-xconfig}}

But if that doesn't work, run {{c|lspci}} and notice that the video card starts off like this:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

Tome el primer dígito, <code>01.00.0</code>, y póngalo en el fichero {{Path|/etc/X11/xorg.conf}}, con la opción <code>BusID</code>:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# Esto no es todo el fichero, solo la parte que necesita ser editada
# El fichero ya debe existir después de ejecutar nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== El renderizado directo no está activado ===

Si el [https://es.wikipedia.org/wiki/Direct_Rendering_Infrastructure renderizado directo] no funciona, puede ser debido a que el núcleo tiene activado el Direct Rendering Manager, que entra en conflicto con el controlador. Vea el estado del renderizado directo, siguiendo las instrucciones de la sección [[#Probar la tarjeta|Probar la tarjeta]].

Primero, desactive [https://es.wikipedia.org/wiki/Direct_Rendering_Manager Direct Rendering Manager] (<code>CONFIG_DRM</code>) en el núcleo:

{{KernelBox|title=Desactivar Direct Rendering Manager|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

A continuación, recompile {{Package|x11-drivers/nvidia-drivers}}, ya que el controlador pudo haberse construido en contra de los símbolos de DRM del núcleo. Esto debería solucionar el problema.

=== Reproducción de vídeo lenta o con parpadeo ===

Últimamente parece que hay cierta ruptura entre la reproducción de algunos tipos de vídeo con los controladores binarios nVidia, haciendo que la reproducción de vídeo sea lenta o con parpadeos significativos. Este problema parece estar ocurriendo como consecuencia de la sustitución del método más común ACPI CPU idling por el metodo Intel CPU Idle para ciertas CPU.

Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVidia Powermizer feature, or setting Powermizer to maximum performance within {{c|nvidia-settings}} has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <code>mplayer-nodeint</code> with something similar to <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> as a work around.)

=== No vertical synchronization (no VSync, tearing) in OpenGL applications ===

Adding the following option to the screen section prevents tearing on GTX 660, 660 Ti, and probably some other GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== Configuración experta ==

=== Documentación ===

El paquete {{Package|x11-drivers/nvidia-drivers}} también viene con una amplia documentación. Esta se instala en {{Path|/usr/share/doc}} y se puede ver con la siguiente orden:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Parámetros del módulo del núcleo ===

The <code>nvidia</code> kernel module accepts a number of parameters (options) which can be used to tweak the behaviour of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run {{c|update-modules}} after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

Modifique {{Path|/etc/modprobe.d/nvidia.conf}}:

{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Actualice la información del módulo:

{{RootCmd|update-modules}}

Unload the <code>nvidia</code> module...

{{RootCmd|modprobe -r nvidia}}

...y cárguelo de nuevo:

{{RootCmd|modprobe nvidia}}

=== Configuración avanzada de X ===

La capa [https://es.wikipedia.org/wiki/GLX GLX] también tiene una gran cantidad de opciones que se pueden configurar. Estas opciones controlan la configuración de salida de TV, pantallas duales, detección de frecuencia del monitor, etc. Una vez más, todas las opciones disponibles se detallan en la documentación.

Para utilizar cualquiera de estas opciones, lístelas en la sección Device correspondiente del fichero de configuración de X (normalmente {{Path|/etc/X11/xorg.conf}}). Por ejemplo, para desactivar el logo de bienvenida:

{{FileBox|filename=/etc/X11/xorg.conf|title=Desactivar el logo de bienvenida|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== Véase también ==

* [[nouveau & nvidia-drivers switching]] - Hybrid graphics mode using open-source drivers.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configure a system to use closed-source drivers for hybrid graphics (modesetting).

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
