<languages />

{{Metadata|abstract=nvidia-drivers es el driver propietario para placas de video nVidia. Una alternativa de codigo abierto es nouveau.}}

{{Package|x11-drivers/nvidia-drivers}} es el controlador propietario para tarjetas de vídeo nVidia. Una alternativa de código abierto es [[nouveau]].

El paquete {{Package|x11-drivers/nvidia-drivers}} del árbol lo mantiene nVidia y se construye con el núcleo Linux. Contienen un gran fichero binario (blob) que realiza el trabajo pesado para comunicarse con la tarjeta de vídeo. Los controladores están compuestos por dos partes, un módulo para el núcleo y un controlador X11. Ambas partes se incluyen en un solo paquete. Debido a la forma en que nVidia empaqueta sus controladores, es necesario tomar algunas decisiones antes de instalar los controladores.

El paquete {{Package|x11-drivers/nvidia-drivers}} contiene los controladores más recientes de nVidia con soporte para ''todas'' las tarjetas, con varias versiones disponibles, dependiendo de la antigüedad de tenga su tarjeta. Utiliza un «eclass» para detectar qué tipo de tarjeta está funcionando en el sistema para que se instale la versión correcta.

== Compatibilidad del hardware ==

El paquete {{Package|x11-drivers/nvidia-drivers}} es compatible con una amplia gama de tarjetas nVidia disponibles. Están disponibles múltiples versiones para su instalación, dependiendo de la tarjeta(s) que tenga el sistema. Consulte la documentación oficial de nVidia, [http://www.nvidia.com/object/IO_32667.html ¿Qué es un controlador antiguo?], para averiguar qué versión de {{Package|x11-drivers/nvidia-drivers}} debe ser utilizada. Una manera bastante decente para encontrar esta versión es a través de  [http://www.nvidia.com/Download/Find.aspx  un formulario interactivo]. Introduzca la tarjeta gráfica que es utilizada por el sistema (no olvide la opción de Legacy en el campo «Product Type») y el formulario debe terminar con la versión más compatible.

Si la tarjeta ha sido identificada como una tarjeta antigua entonces se enmascara con los lanzamientos más recientes de {{Package|nvidia-drivers}}, esto es:

{{FileBox|filename=/etc/portage/package.mask|Enmascarar los controladores con la versión superior a 174|1=
>x11-drivers/nvidia-drivers-174
}}

Observe que Gentoo no proporciona las versiones 71.86.xx. Si el sistema tiene una tarjeta que necesita estos controladores, entonces se recomienda utilizar el controlador [[nouveau]].

=== El núcleo de línux===

Como se mencionó anteriormente, el controlador nVidia del núcleo se instala y ejecuta al margen del núcleo actual. Se construye como módulo, por lo que el núcleo debe soportar la carga de los módulos del núcleo (ver más abajo).

El módulo del núcleo (nvidia.ko) consta de una parte propietaria comúnmente conocida como [http://es.wikipedia.org/wiki/Binary_large_object «blob»] (abreviatura en inglés de ''Binary Large Objects''  —objetos binarios grandes—) que controla el [https://es.wikipedia.org/wiki/Circuito_integrado chip] gráfico, y una parte de código abierto (el [http://es.wikipedia.org/wiki/Lenguaje_pegamento «glue»] o ''lenguaje de pegamento''), que, en tiempo de ejecución, actúa como intermediario entre la parte propietaria y el núcleo. Ambos tienen que trabajar muy bien juntos, dado que, de otra manera, el usuario podría sufir la pérdida de datos (a través de un ''kernel panic'', servidores X que se bloquean sin que las aplicaciones X hayan guardado los datos) e, incluso, un fallo de hardware (pensemos en sobrecalentamientos y otros temas relacionados con la administración de energía).

=== Compatibilidad del núcleo ===

De vez en cuando, una nueva versión del núcleo cambia la [https://es.wikipedia.org/wiki/Interfaz_binaria_de_aplicaciones ABI] (siglas en inglés de ''application binary interface'' —interfaz binaria de aplicación—) interna para los controladores, lo que significa que todos los controladores que utilizan esas ABI deben cambiar en consecuencia. Para controladores de código abierto, especialmente los distribuidos con el núcleo, estos cambios son casi triviales de arreglar, ya que toda la cadena de llamadas entre los controladores y otras partes del núcleo pueden ser revisadas con bastante facilidad. Para los controladores propietarios, como nvidia.ko, esto no funciona exactamente igual. Cuando cambia la ABI interna, entonces no es posible simplemente ajustar el «glue», porque nadie sabe cómo el glue se utiliza por la parte propietaria. Incluso después de arreglar las cosas de manera que parezcan funcionar bien, el usuario corre el riesgo de que la ejecución de nvidia.ko en el nuevo núcleo no esté soportada, dando lugar a la pérdida de datos y fallos del hardware.

Cuando se libera una nueva versión del núcleo incompatible, probablemente sea mejor quedarse, por un tiempo, con el núcleo con soporte más reciente. nVidia suele tardar un par de semanas en preparar una nueva versión patentada que considere apta para su uso general. Sea paciente. Si es absolutamente necesario, entonces es posible utilizar la orden ''epatch_user'' con los ebuilds de nvidia-drivers: esto permite al usuario parchear nvidia-drivers para adaptarse, de alguna manera, con lo último, es decir, la liberación del núcleo no compatible. Tenga en cuenta que ni los mantenedores de nvidia-drivers ni de nVidia dan soporte a esta situación. No habrá ninguna garantía para el hardware, los mantenedores de Gentoo no pueden comenzar a solucionar los problemas, ya que es un driver propietario que solo nVidia puede depurar adecuadamente, y los mantenedores del núcleo (tanto de Gentoo como los de desarrollo) no darán, sin duda, soporte a los controladores propietarios, o, de hecho, a cualquier sistema «viciado por estos» que pase a tener problemas.

=== Opciones obligatorias del núcleo ===

Si se utiliza <tt>genkernel all</tt> para configurar el núcleo, entonces todo estará listo. En caso contrario, vuelva a comprobar la configuración del núcleo para que este soporte (cargas los módulos) esté activado:

{{KernelBox|title=Activar soporte para cargar módulos|1=
[*] Enable loadable module support --->
}}

Active también ''Memory Type Range Register'' en el núcleo:

{{KernelBox|title=Activar soporte para MTRR|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

Si el sistema tiene una tarjeta gráfica [https://es.wikipedia.org/wiki/Accelerated_Graphics_Port AGP] , entonces, active opcionalmente el soporte <tt>agpgart</tt> para el núcleo, ya sea compilado (en el núcleo) o como módulo. Si (la opción) del módulo <tt>agpgart</tt> (compilado) en el núcleo no se utiliza, entonces, los controladores usarán su propia implementación de <tt>agpgart</tt>, llamada <tt>NvAGP</tt>. En algunos sistemas, esto produce un mejor comportamiento que el módulo <tt>agpgart</tt> en el núcleo, y en otros, se comporta peor. Evalúe una u otra opción en el sistema para obtener el mejor rendimiento. Cuando no sepa qué hacer, utilice <tt>agpgart</tt> en el núcleo:

{{KernelBox|title=Activar soporte para agpgart|1=
Device Drivers --->
    Graphics support --->
        -*- /dev/agpgart (AGP Support) --->
}}

{{Note/es|En amd64, el IOMMU controla el ajuste agpgart.}}

{{Important/es|Para los procesadores x86 y AMD64, el controlador [[framebuffer]] en el núcleo entra en conflicto con el controlador binario proporcionado por nVidia. Al compilar el núcleo para estas CPU, elimine por completo el apoyo para el controlador en el núcleo como se muestra:
{{KernelBox|title=Desactivar soporte para el controlador en el núcleo|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
}}

Una alternativa a framebuffer es [[uvesafb]], que se puede instalar en paralelo a {{Package|x11-drivers/nvidia-drivers}}. 

Para sistemas (U)EFI, uvesafb no funcionará. Advierta que activar el soporte para ''efifb'' en el núcleo (<code>CONFIG_FB_EFI=y</code>) provocará problemas intermitentes con la inicialización de los controladores de nVidia. No hay alternativa conocida para framebuffer en los sistemas (U)EFI.

Los ebuild de '''nvidia-drivers''' detectan automáticamente la versión del núcleo basándose en el enlace simbólico {{Path|/usr/src/linux}}. Asegúrese de que este enlace simbólico apunta a las fuentes correctas y que el núcleo está configurado correctamente. Por favor, consulte la sección  «Configurar el núcleo» del [[Handbook:Main_Page|Gentoo Handbook]] para obtener más detalles sobre la configuración del núcleo.

En primer lugar, elija la fuente del núcleo adecuada con <tt>eselect</tt>. Cuando utilizamos <tt>gentoo-sources-3.7.10</tt>, el núcleo listado podría ser algo como esto:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

En la salida anterior, notará que el núcleo <tt>linux-3.7.10-gentoo</tt> está marcado con un asterisco (<code>*</code>) para mostrar que es el núcleo vinculado.

Si el enlace simbólico no apunta a las fuentes correctas, actualice el enlace, seleccionando el número de la fuente del núcleo deseada, como en el ejemplo anterior.

{{RootCmd|eselect kernel set 1}}

== Controladores == 

Ahora es el momento de instalar los controladores. En primer lugar, siga la [[Xorg/Guide|X Server Configuration Guide]] y ajuste la variable <code>VIDEO_CARDS="nvidia"</code> en {{Path|/etc/portage/make.conf}}. Durante la instalación del servidor X, esto hará que se instale la versión correcta de {{Package|x11-drivers/nvidia-drivers}}.

{{Note/es|Los controladores se pueden instalar con el parámetro USE <code>gtk</code> establecido en {{Path|/etc/portage/make.conf}}. Esto instalará {{Package|media-video/nvidia-settings}}, una herramienta gráfica muy útil para supervisar y configurar varios aspectos de la tarjeta nVidia.}}

{{Important/es|Cada vez que un [[Kernel/Upgrade|núcleo es compilado]], es necesario volver a instalar los módulos del núcleo de NVIDIA. Una manera fácil de reconstruir los módulos instalados por los ebuilds (como {{Package|x11-drivers/nvidia-drivers}}) es ejecutar <tt>emerge @module-rebuild</tt>.}}

Una vez finalizada la instalación, ejecute <tt>modprobe nvidia</tt> para cargar el módulo del núcleo en la memoria. Si se trata de una actualización, retire primero el módulo anterior.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Para evitar tener que cargar manualmente el módulo en cada arranque, puede hacer que este se cargue de forma automática cada vez que se arranca el sistema, editando el fichero {{Path|/etc/conf.d/modules}} y añadiendo <code>nvidia</code> al mismo.

{{Important/es|Si <code>agpgart</code> se compila como un módulo, entonces, añádalo a {{Path|/etc/conf.d/modules}} también.}}

=== El servidor X ===

Una vez instalados los controladores adecuados, hay que configurar el servidor X para utilizar el controlador <tt>nvidia</tt>, en lugar del controlador predeterminado <tt>nv</tt>.

{{FileBox|filename=/etc/X11/xorg.conf.d/nvidia.conf|title=Sección explícita para el controlador nvidia|lang=xorg_conf|
Section "Device"
  Identifier "nVidia"
  Driver     "nvidia"
EndSection
}}

Ejecute <tt>eselect</tt> para que el servidor X utilice las bibliotecas GLX de nVidia:

{{RootCmd|eselect opengl set nvidia}}

=== Permisos ===

Tendrá que añadir el usuario al que desea dar capacidad de acceder a la tarjeta de vídeo al grupo «video»:

{{RootCmd|passwd -a <usuario> video}}

Observe que todavía será capaz de ejecutar X sin permiso para el subsistema DRI, pero, por lo general, no con la aceleración activada.

== Probar la tarjeta gráfica==

Para probar la tarjeta nVidia, encienda X y ejecute <tt>glxinfo</tt>, que es parte del paquete {{Package|x11-apps/mesa-progs}}. Este debería decir que el renderizado directo está activado:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Para los FPS (siglas en inglés ''frames per second'' —fotogramas por segundo—) del monitor, ejecute <tt>glxgears</tt>.

== Activar soporte para nVidia ==

Algunas herramientas, como {{Package|media-video/mplayer}} y {{Package|media-libs/xine-lib}}, utilizan un parámetro USE local llamado <code>xvmc</code> que permite el apoyo de XvMCNVIDIA, útil cuando se visionan películas de alta resolución. Añada <code>xvmc</code> en la línea USE en {{Path|/etc/portage/make.conf}} o añádalo como parámetro USE para  <code>media-video/mplayer</code> y/o <code>media-libs/xine-lib</code> en {{Path|/etc/portage/package.use}}.

Las CPU «GeForce 8 series» y posteriores vienen con soporte VDPAU que viene a sustituir al soporte para XvMCNVIDIA. Consulte el artículo [[VDPAU]] para activar el soporte VDPAU.

También hay algunas aplicaciones que utilizan el parámetro USE <code>nvidia</code>, por lo que podría ser una buena idea añadirlo a {{Path|/etc/portage/make.conf}}.

A continuación, ejecute <tt>emerge -uD --newuse @world</tt> para recompilar las aplicaciones que se benefician del cambio de los parámetros USE.

=== Utilizar la herramienta de configuración de nVidia ===

nVidia también proporciona una herramienta de configuración. Esta herramienta permite al usuario controlar y cambiar la configuración gráfica sin reiniciar el servidor X y está disponible a través de Portage como {{Package|media-video/nvidia-settings}}. Como se mencionó anteriormente, dicha herramienta se extrae de forma automática al instalar los controladores con el parámetro USE <code>gtk</code> establecido en {{Path|/etc/portage/make.conf}} o en {{Path|/etc/portage/package.use}}.

=== Activar OpenGL/OpenCL ===

Para activar OpenGL y OpenCL.

{{RootCmd|eselect opengl set nvidia}}
{{RootCmd|eselect opencl set nvidia}}

Asegúrese de que el servidor Xorg no se está ejecutando mientras se realizan estos cambios.

== Solución de problemas ==

* {{Bug|nvidia-drivers|search=package}}

===  El controlador falla al intentar inicializarse cuando las interrupciones MSI están activadas ===

El controlador Linux de NVIDIA utiliza Message Signaled Interrupts (MSI) de forma predeterminada. Esto proporciona beneficios de compatibilidad y escalabilidad, debido principalmente a la prevención de compartir [https://es.wikipedia.org/wiki/Interrupci%C3%B3n IRQ] (siglas en inglés de ''interrupt request'' —petición de interrupción—). Algunos sistemas ha tenido problemas con el soporte MSI, al tiempo que trabajan bien con las interrupciones de virtualwire. Estos problemas se manifiestan como una incapacidad para iniciar X con el controlador de NVIDIA, o fallos de inicialización de [https://es.wikipedia.org/wiki/CUDA CUDA].

Las interrupciones MSI se pueden desactivar a través del parámetro del módulo del núcleo de NVIDIA  <code>NVreg_EnableMSI=0</code>. Esto se puede establecer en la línea de órdenes al cargar el módulo, o más apropiadamente a través de los ficheros de configuración de los módulos del núcleo de la distribución (por ejemplo, en {{Path|/etc/modprobe.d/}}).

Por ejemplo:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Obtener aceleración 2D para funcionar en máquinas con 4GB o más de memoria ===

When nVidia 2D acceleration is giving problems, then it is likely that the system is unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Every line should contain <tt>write-back</tt> or <tt>write-combining</tt>. When a line shows up with <tt>uncachable</tt> in it then it is necessary to change a BIOS setting to fix this.

Reboot and enter the BIOS, then find the MTRR settings (probably under "CPU Settings"). Change the setting from <tt>continuous</tt> to <tt>discrete</tt> and boot back into Linux. There is now no <tt>uncachable</tt> entry anymore and 2D acceleration now works without any glitches.

=== "no such device" appears when trying to load the kernel module ===

This is usually caused by one of the following issues:

# The system does not have a nVidia card at all.  Check <tt>lspci</tt> output to confirm that the system has a nVidia graphics card installed and detected.
# The currently installed version of {{Package|x11-drivers/nvidia-drivers}} does not support the installed graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Another kernel driver has control of the hardware.  Check <tt>lspci -k</tt> to see if another driver like "nouveau" is bound to the graphics card.  If so, disable or blacklist this driver.

=== Xorg says it can't find any screens ===

When after booting the system, it ends up with a black screen or a console prompt instead of the GUI; then press {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} to bring up a virtual console. Next, run:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

to see the output of Xorg. If one of the first errors is that Xorg can't find any screens, then follow the following steps to resolve the issue.

It should be enough to run the following command before rebooting:

{{Cmd| /opt/bin/nvidia-xconfig}}

But if that doesn't work, run <tt>lspci</tt> and notice that the video card starts off like this:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

Take the first bit, <code>01.00.0</code> and put it in the {{Path|/etc/X11/xorg.conf}} file with the <code>BusID</code> option:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering is not enabled ===

If direct rendering does not work, it may be because the kernel has Direct Rendering Manager enabled, which conflicts with the driver. See the direct rendering status by following instructions in the section [[#Testing the card|Testing the card]].

First, disable Direct Rendering Manager (<code>CONFIG_DRM</code>) in the kernel :

{{KernelBox|title=Disabling Direct Rendering Manager|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Next, rebuild {{Package|x11-drivers/nvidia-drivers}} since the driver may have built against the kernel DRM symbols. It should fix the problem.

=== Video playback stuttering or slow ===

Lately there seems to be some breaking with playback of some types of video with the NVidia binary drivers, causing slow video playback or significant stuttering. This problem seems to be occurring within the Intel CPU Idle replacement instead of the common ACPI CPU idling method for certain CPU's.

Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVidia Powermizer feature, or setting Powermizer to maximum performance within <tt>nvidia-settings</tt> has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <tt>mplayer-nodeint</tt> with something similar to <tt>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</tt> as a work around.)

== Expert configuration ==

=== Documentation ===

The {{Package|x11-drivers/nvidia-drivers}} package also comes with comprehensive documentation. This is installed into {{Path|/usr/share/doc}} and can be viewed with the following command:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Kernel module parameters ===

The <tt>nvidia</tt> kernel module accepts a number of parameters (options) which can be used to tweak the behaviour of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run <tt>update-modules</tt> after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

Edit {{Path|/etc/modprobe.d/nvidia.conf}}:

{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Update module information:

{{RootCmd|update-modules}}

Unload the <tt>nvidia</tt> module...

{{RootCmd|modprobe -r nvidia}}

...and load it once again:

{{RootCmd|modprobe nvidia}}

=== Advanced X configuration ===

The GLX layer also has a plethora of options which can be configured. These control the configuration of TV out, dual displays, monitor frequency detection, etc. Again, all of the available options are detailed in the documentation.

To use any of these options, list them in the relevant Device section of the X config file (usually {{Path|/etc/X11/xorg.conf}}). For example, to disable the splash logo:

{{FileBox|filename=/etc/X11/xorg.conf|title=Disable the splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== See also ==

* [[nouveau & nvidia-drivers switching]]
* [[NVIDIA Driver with Optimus Laptops]]

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
