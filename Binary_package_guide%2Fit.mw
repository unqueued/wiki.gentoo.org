<languages />
{{Metadata|abstract=Portage supporta la costruzione e la compilazione di pacchetti binari. Questa guida spiega come crearli, installarli, e come configurare un server di pacchetti binari.}}

Oltre al supporto classico alle ebuild, Portage supporta anche la costruzione e l'installazione di pacchetti binari. Questa guida spiega come crearli, installartli, e come configurare un server di pacchetti binari.

== Introduzione ==

Ci sono molte ragioni per cui ad alcuni amministratori di sistemi piace usare pacchetti binari per le installazioni di software su Gentoo:

# Permette agli amministratori di "risparmiare tempo nel momento in cui sistemi simili devono essere aggiornati". Dover compilare tutto da sorgenti può diventare consumare molto tempo. Mantenere numerosi sistemi simili, alcuni dei quali con hardware più datati, può essere molto più facile se solo un sistema deve compilare tutto da sorgente e gli altri usano i pacchetti binari.
# ''Fare aggiornamenti sicuri''. Per sistemi di importanza critica per la produzione è importante rimanere "usabili" il maggior tempo possibile. Ciò si può ottenere tramite un server di staging che effettua prima tutti gli aggiornamenti su di sé. Una volta osservato che il server è in uno stato funzionante, gli aggiornamenti possono essere estesi ai sistemi critici. Una variante di questo approccio consiste nell'applicare gli aggiornamenti in un chroot sullo stesso sistema e poi usare i binari creati qui sul sistema reale.
# ''Come backup''. Spesso i pacchetti binari sono l'unica maniera per ripristinare un sistema non funzionante (per esempio, un compilatore che non funziona). Avere a disposizione dei binari precompilati su un server o localmente può essere di grande aiuto in caso di catena di compilazione danneggiata.
# Permette di ''aggiornare sistemi molto vecchi''. L'attività di aggiornamento di sistemi molto vecchi può essere ampiamente facilitata usando pacchetti binari. È solitamente utile installare pacchetti binari su vecchi sistemi in quanto essi non necessitano l'installazione o l'aggiornamento delle dipendenze necessarie per la compilazione. I pacchetti binari evitano anche errori nel processo di compilazione in quanto sono già precompilati.

Questa guida si concentrerà sui seguenti argomenti: 

* Creare pacchetti binari.
* Distribuire i pacchetti ai client.
* Implementare i pacchetti binari.
* Mantenere i pacchetti binari.

Verso la fine verranno coperti ulteriori dettagli più avanzati su come gestire i pacchetti binari.

{{Note/it|Tutti gli strumenti usati in questa guida fanno parte di {{Package|sys-apps/portage}}, a meno che non sia specificato diversamente.}}

== Creare pacchetti binari ==

Esistono tre metodi principali per la creazione di pacchetti binari:

# Dopo un'installazione regolare, usando l'applicazione {{c|quickpkg}}.
# In maniera esplicita durante un'operazione {{c|emerge}} usando l'opzione <code>--buildpkg</code> (<code>-b</code>).
# In maniera automatica usando il valore <code>buildpkg</code> nella variabile <var>FEATURES</var> di Portage.

Tutti e tre i metodi creeranno un pacchetto binario nella directory indicata dalla variabile <var>PKGDIR</var> (che ha un valore predefinito uguale a {{Path|/usr/portage/packages}}).

=== Usare quickpkg ===

L'applicazione {{c|quickpkg}} prende uno o più atom di dipedenza (o insiemi di pacchetti) e crea pacchetti binari per tutti i pacchetti ''installati'' corrispondenti a quell'atom.

Per esempio, per creare pacchetti binari di tutte le versioni di GCC ''installate'':

{{RootCmd|quickpkg sys-devel/gcc}}

Per creare pacchetti binari di tutti i pacchetti installati nel sistema, si usi il simbolo <code>*</code>:

{{RootCmd|quickpkg "*/*"}}

Occorre fare una precisazione riguardo questo metodo: esso si basa sui file installati, che possono essere un problema nel caso dei file di configurazione. Gli amministratori cambiano spesso i file di configurazione dopo aver installato del software. Poiché ciò potrebbe far trasparire dati importanti (magari anche confidenziali) nei pacchetti, {{c|quickpkg}} ''non'' include in maniera predefinita tutti i file di configurazione protetti tramite il metodo <var>CONFIG_PROTECT</var>. Per forzare l'inclusione dei file di configurazione, si usino le opzioni <code>--include-config</code> o <code>--include-unmodified-config</code>.

=== Usare --buildpkg come opzione di emerge ===

Quando si installa del software usando {{c|emerge}}, si può chiedere a Portage di creare pacchetti binari usando l'opzione <code>--buildpkg</code> (<code>-b</code>):

{{Emerge|params+=--buildpkg|sys-devel/gcc}}

È anche possibile chiedere a Portage di creare ''solamente'' un pacchetto binario ma di ''non'' installare il software sul sistema live. Per questo, si può usare l'opzione <code>--buildpkgonly</code> (<code>-B</code>):

{{Emerge|params+=--buildpkgonly|sys-devel/gcc}}

Quest'ultimo approccio tuttavia richiede che tutte le dipendenze per la compilazione siano state già installate.

=== Implementare buildpkg come funzionalità di Portage ===

La maniera più comune per creare automaticamente pacchetti binari ogni qual volta che un pacchetto viene installato da Portage è quella di usare la funzionalità <code>buildpkg</code>, che può essere impostata in {{Path|/etc/portage/make.conf}} come di seguito:

{{FileBox|filename=/etc/portage/make.conf|title=Abilitare la funzionalità buildpkg di Portage|lang=bash|1=
FEATURES="buildpkg"
}}

Con questa funzionalità attivata, ogni volta che Portage installerà del software esso creerà anche un pacchetto binario.

=== Escludere la creazione di alcuni pacchetti ===

È possibile dire a Portage di non creare pacchetti binari per una certa selezione di pacchetti o categorie. Per ottnere ciò, si deve passare l'opzione <code>--buildpkg-exclude</code> ad emerge:

{{RootCmd|emerge -uDN @world --buildpkg --buildpkg-exclude "virtual/* sys-kernel/*-sources"}}

Ciò può essere usato per pacchetti che hanno poco o nulla da beneficiare nell'avere disponibili un pacchetto binario. Dei casi possibili sono le sorgenti del kernel Linux o i pacchetti binari upstream (quelli che terminano con ''-bin'' come {{Package|www-client/firefox-bin}}).

== Configurare un host di pacchetti binari ==

Portage supporta un grande numero di protocolli per lo scaricamento di pacchetti binari: FTP, FTPS, HTTP, HTTPS e SSH. Ciò lascia spazio a molte implementazioni di host di pacchetti binari diverse.

Non esiste, tuttavia, un metodo "automatico" fornito da Portage per la distribuzione di pacchetti binari. A seconda dell'installazione desiderata sarà necessario scaricare ulteriore software.

=== Host di pacchetti binari basato sul web ===

A common approach for distributing binary packages is to create a web-based binary package host.

Use a web server such as [[lighttpd]] ({{Package|www-servers/lighttpd}}) and configure it to provide read access to {{Path|/etc/portage/make.conf}}'s <var>PKGDIR</var> location.

{{FileBox|filename=/etc/lighttpd/lighttpd.conf|title=lighttpd configuration example|lang=bash|1=
# add this to the end of the standard configuration
server.modules += ( "mod_alias" )
alias.url = ( "/packages" => "/usr/portage/packages/" )
}}

Then, on the client systems, configure the <var>PORTAGE_BINHOST</var> variable accordingly:

{{FileBox|filename=/etc/portage/make.conf|title=Using a web-based binary package host|lang=bash|1=
PORTAGE_BINHOST="http://binhost.example.com/packages"
}}

=== SSH binary package host ===

To provide a more authenticated approach for binary packages, one can consider using SSH.

When using SSH, it is possible to use the root Linux user's SSH key (without passphrase as the installations need to happen in the background) to connect to a remote binary package host.

To accomplish this, make sure that the root user's SSH key is allowed on the server. This will need to happen for each machine that will connect to the SSH capable binary host:

{{RootCmd|cat root.id_rsa.pub >> /home/binpkguser/.ssh/authorized_keys}}

The <var>PORTAGE_BINHOST</var> variable could then look like so:

{{FileBox|filename=/etc/portage/make.conf|title=Setting up PORTAGE_BINHOST for SSH access|lang=bash|1=
PORTAGE_BINHOST="ssh://binpkguser@binhostserver/usr/portage/packages"
}}

{{Note|Do not use the SSH configuration files found in {{Path|~/.ssh/config}} for setting ports or username. This location is ignored when Portage tries to rsync the packages back onto the client. Instead set all the options correctly in the <var>PORTAGE_BINHOST</var> variable.}}

=== NFS exported ===

When using binary packages on an internal network, it might be easier to export the packages through NFS and mount it on the clients.

The {{Path|/etc/exports}} file could look like so:

{{FileBox|filename=/etc/exports|title=Exporting the packages directory|1=
/usr/portage/packages   2001:db8:81:e2::/48(ro,no_subtree_check,root_squash) 192.168.100.1/24(ro,no_subtree_check,root_squash)
}}

On the clients, the location can then be mounted. An example {{Path|/etc/fstab}} entry would look like so:

{{FileBox|filename=/etc/fstab|title=Entry for mounting the packages folder|1=
binhost:/usr/portage/packages      /usr/portage/packages    nfs    defaults    0 0
}}

== Using binary packages ==

For binary packages to be usable on other systems they must fulfill some requirements:

* The client and server architecture and <var>[[CHOST]]</var> must match.
* The <var>CFLAGS</var> and <var>CXXFLAGS</var> variables used to build the binary packages must be compatible with all clients.
* USE flags for processor specific instruction set features (like MMX, SSE, etc.) have to be carefully selected; all clients need to support them.

{{Important|Portage can not validate if these requirements match. It is the responsibility of the system administrator to guard these settings.}}

Next to these, Portage will check if the binary package is built using the same USE flags as expected on the client. If a package is built with a different USE flag combination, Portage will either ignore the binary package (and use source-based build) or fail, depending on the options passed to the {{c|emerge}} command upon invocation (see [[#Installing binary packages|Installing binary packages]]).

On clients, a few configuration changes are needed in order for the binary packages to be used.

=== Installing binary packages ===

There are a few options that can be passed on to the {{c|emerge}} command that inform Portage about using binary packages:

{| class="table table-condensed table-striped"
|-
! scope="col" width="20%" | Option 
! Description
|-
| <code>--usepkg</code> (<code>-k</code>) || Tries to use the binary package(s) in the locally available {{Path|packages}} directory. Useful when using [[NFS]] or [[SSHFS]] mounted binary package hosts. If the binary packages are not found, a regular (source-based) installation will be performed.
|-
| <code>--usepkgonly</code> (<code>-K</code>) || Similar to <code>--usepkg</code> (<code>-k</code>) but fail if the binary package cannot be found. This option is useful if only ''pre-built'' binary packages are to be used.
|-
| <code>--getbinpkg</code> (<code>-g</code>) || Download the binary package(s) from a remote binary package host. If the binary packages are not found, a regular (source-based) installation will be performed.
|-
| <code>--getbinpkgonly</code> (<code>-G</code>) || Similar to <code>--getbinpkg</code> (<code>-g</code>) but will fail if the binary package(s) cannot be downloaded. This option is useful if only ''pre-built'' binary packages are to be used.
|}

In order to automatically use binary package installations, the appropriate option can be added to the <var>EMERGE_DEFAULT_OPTS</var> variable:

{{FileBox|filename=/etc/portage/make.conf|title=Automatically fetch binary packages and fail the package if not available|lang=bash|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --getbinpkgonly"
}}

There is a Portage feature that automatically implements the equivalent of <code>--getbinpkg</code> (<code>-g</code>) without the need for updating the <var>EMERGE_DEFAULT_OPTS</var> variable with the <code>--getbinpkg</code> value:

{{FileBox|filename=/etc/portage/make.conf|title=Enabling getbinpkg in the <var>FEATURES</var> variable|lang=bash|1=
FEATURES="getbinpkg"
}}

=== Pulling packages from a binary package host ===

When using a binary package host, clients need to have the <var>PORTAGE_BINHOST</var> variable set. Otherwise the client will not know where the binary packages are stored which results in Portage being unable to retrieve them.

{{FileBox|filename=/etc/portage/make.conf|title=Setting PORTAGE_BINHOST|lang=bash|1=
PORTAGE_BINHOST="http://binhost.example.com/packages"
}}

The <var>PORTAGE_BINHOST</var> variable uses a space-separated list of URIs. This allows administrators to use several binary package servers simultaneously. The URI must always point to the directory in which the {{Path|Packages}} file resides.

{{Note|The support for multiple binary package servers is somewhat incomplete. If several servers serve a binary package for the same package version, then only the first one will be considered. This can be problematic when these binary packages differ in their USE variable configuration and the USE variable configuration of a later binary package would match the systems configuration.}}

=== Reinstalling modified binary packages ===

Passing the <code>--rebuilt-binaries</code> option to {{c|emerge}} will reinstall every binary that has been rebuilt since the package was installed. This is useful in case rebuilding tools like {{c|revdep-rebuild}} are run on the binary package server.

A related option is <code>--rebuilt-binaries-timestamp</code>. It causes emerge not to consider binary packages for a re-install if those binary packages have been built before the given time stamp. This is useful to avoid re-installing all packages, if the binary package server had to be rebuild from scratch but <code>--rebuilt-binaries</code> is used otherwise.

=== Additional client settings ===

Next to the <code>getbinpkg</code> feature, Portage also listens to the <code>binpkg-logs</code> feature. This one controls if log files for successful binary package installations should be kept. It is only relevant if the <var>PORT_LOGDIR</var> variable has been set and is enabled by default.

Similar to excluding binary packages for a certain set of packages or categories, clients can be configured to exclude binary package installations for a certain set of packages or categories.

To accomplish this, use the <code>--usepkg-exclude</code> option:

{{RootCmd|emerge -uDNg @world --usepkg-exclude "sys-kernel/gentoo-sources virtual/*"}}

To enable such additional settings for each emerge command, add the options to the <var>EMERGE_DEFAULT_OPTS</var> variable in the {{Path|make.conf}} file:

{{FileBox|title=Enabling emerge settings on every invocation|filename=/etc/portage/make.conf|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --usepkg-exclude 'sys-kernel/gentoo-sources virtual/*'"
}}

== Maintaining binary packages ==

Exporting and distributing the binary packages will lead to useless storage consumption if the binary package list is not actively maintained.

=== Removing outdated binary packages ===

In the {{Package|app-portage/gentoolkit}} package an application called {{c|eclean}} is provided. It allows for maintaining Portage-related variable files, such as downloaded source code files, but also binary packages.

The following command will remove all binary packages that have no corresponding ebuild in the installed ebuild repositories:

{{RootCmd|eclean packages}}

For more details please read the [[Eclean]] article.

Another tool that can be used is the {{c|qpkg}} tool from the {{Package|app-portage/portage-utils}} package. However, this tool is a bit less configurable.

To clean up ''unused'' binary packages (in the sense of used by the server on which the binary packages are stored):

{{RootCmd|qpkg -c}}

=== Maintaining the Packages file ===

Inside the packages directory exists a [[wikipedia:Manifest_file|manifest file]] called {{Path|Packages}}. This file acts as a cache for the metadata of all binary packages in the packages directory. The file is updated whenever Portage adds a binary package to the directory. Similarly, {{c|eclean}} updates it when it removes binary packages.

If for some reason binary packages are simply deleted or copied into the packages directory, or the {{Path|Packages}} file gets corrupted or deleted, then it must be recreated. This is done using {{c|emaint}} command:

{{RootCmd|emaint binhost --fix}}

== Advanced topics ==

=== Creating snapshots of the packages directory ===

When deploying binary packages for a large number of client systems it might become worthwhile to create snapshots of the packages directory. The client systems then do not use the packages directory directly but use binary packages from the snapshot.

Snapshots can be created using the {{Path|/usr/lib64/portage/python2.7/binhost-snapshot}} or {{Path|/usr/lib64/portage/python3.3/binhost-snapshot}} tool. It takes four arguments:

# A source directory (the path to the packages directory).
# A target directory (that must not exist).
# A URI.
# A binary package server directory.

The files from the package directory are copied to the target directory. A {{Path|Packages}} file is then created inside the binary package server directory (fourth argument) with the provided URI.

Client systems need to use an URI that points to the binary package server directory. From there they will be redirected to the URI that was given to {{c|binhost-snapshot}}. This URI has to refer to the target directory.

=== Understanding the binary package format ===

Binary packages created by Portage have the file name ending with {{Path|.tbz2}}. These files consist of two parts:

# A {{Path|.tar.bz2}} archive containing the files that will be installed on the system.
# A {{Path|xpak}} archive containing package metadata, the ebuild, and the environment file.

See {{c|man xpak}} for a description of the format.

In {{Package|app-portage/portage-utils}} some tools exists that are able to split or create {{Path|tbz2}} and {{Path|xpak}} files.

The following command will split the {{Path|tbz2}} into a {{Path|.tar.bz2}} and an {{Path|.xpak}} file:

{{Cmd|qtbz2 -s <package>.tbz2}}

The {{Path|.xpak}} file can be examined using the {{c|qxpak}} utility.

To list the contents:

{{Cmd|qxpak -l <package>.xpak}}

The next command will extract a file called {{Path|USE}} which contains the enabled USE flags for this package:

{{Cmd|qxpak -x package-manager-0.xpak USE}}

=== The PKGDIR layout ===

The currently used format version 2 has the following layout:

{{CodeBox|title=Packages directory layout (version 2)|1=
PKGDIR
`+- Packages
 +- app-accessibility/
 {{!}}  +- pkg1-version.tbz2
 {{!}}  `- pkgN-version.tbz2
 +- app-admin/
 {{!}}  `- ...
 `- ...
}}

The {{Path|Packages}} file is the major improvement (and also the trigger for Portage to know that the binary package directory uses version 2) over the first binary package directory layout (version 1). In version 1, all binary packages were also hosted inside a single directory (called {{Path|All/}}) and the category directories only had symbolic links to the binary packages inside the {{Path|All/}} directory.

=== Unpacking with quickunpkg ===

Zoobab wrote a simple shell tool named [https://github.com/zoobab/quickunpkg quickunpkg] to quickly unpack {{Path|tbz2}} files.


[[Category:Portage]]
