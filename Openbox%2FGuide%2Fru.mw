<languages />


{{Metadata|abstract=Это руководство покажет Вам как установить оконный менеджер Openbox и упомянет множество возможных программ для использования в соединении с сессией Openbox.}}

Это руководство покажет Вам как установить оконный менеджер Openbox и упомянет множество возможных программ для использования в соединении с сессией Openbox.

== Введение ==

=== Что такое Openbox? ===

Итак, Вы установили [https://wiki.gentoo.org/wiki/Xorg/Configuration X-сервер] и поняли, что TWM просто не может быть приемлемым для Ваших нужд. Вы также, может быть, имели некоторый опыт работы с полновесными окружениями рабочего стола, такими как [http://www.gentoo.org//proj/en/desktop/kde/kde4-guide.xml KDE] , [http://www.gentoo.org//doc/en/gnome-config.xml GNOME] , и [http://www.gentoo.org//doc/en/xfce-config.xml Xfce] . Один из компонентов этих крупных окружений рабочего стола называется оконный менеджер (window manager, или в сокращении WM). Оконный менеджер отвечает за появление и размещение контейнеров (или "окон"), внутри которых запускаются программы. Openbox - это минималистичный оконный менеджер без рюшек и оборочек. 

=== Почему я должен это использовать? ===

Openbox, в отличие от более крупных окружений рабочего стола, зависит от очень небольшого количества библиотек. По этой причине, он может предоставить легковесное графическое окружение, которое запускается очень быстро, даже на устаревшем аппаратном обеспечении. Является ли Ваше аппаратное обеспечение новым или старым, Openbox также предусматривает легконастраиваемую и ненавязчивую рабочую среду. Это значит, что если Вам не нужна панель задач, часы, лишняя панель или любая другая программа, эти возможности оставлены на Ваш выбор! 

== Установка и конфигурация ==

=== Первоначальная установка ===

После того как Вы установили и настроили <code>xorg-server</code>, установка Openbox может быть выполнена одной простой командой: 

{{RootCmd|emerge -av openbox}}

Как и в случае с другими оконными менеджерами и окружениями рабочего стола, Вам нужно сообщить X-серверу, чтобы он загружал Openbox автоматически, добавив его в {{Path|~/.xinitrc}} . 

{{Cmd|echo "exec openbox-session" >> ~/.xinitrc}}

Это автоматически запустит сессию Openbox, когда Вы введете <code>startx</code> в терминале. 

{{Important/ru|Так как каждый пользователь имеет свой собственный {{Path|.xinitrc}}, Вам нужно убедиться, что Вы запустили эту команду от имени ''вашего пользователя'', а не под учетной записью администратора.}}

{{Note/ru|Если Вы испытываете проблемы с автомонтированием, или если Вы используете dbus и ConsoleKit, Вы можете поместить <code>exec ck-launch-session dbus-launch --sh-syntax --exit-with-session openbox-session</code> в Ваш {{Path|.xinitrc}} вместо значения по умолчанию, упомянутого выше.}}

{{Note/ru|Вы также можете заменить оконный менеджер по умолчанию в KDE, GNOME или Xfce на Openbox, следуя директивам [[#inside-desktop-env]].}}

Теперь, когда Вы установили Openbox и добавили его в Ваш {{Path|.xinitrc}}, продолжайте и запустите команду <code>startx</code>, чтобы увидеть Openbox в действии. Как видите, рабочий стол в полном беспорядке! Следуя философии Openbox, то, что Вы видите, это чистая среда, из которой Вы можете построить рабочий стол в полном соответствии с Вашим вкусом. 

Так как Вы смотрите в черный экран, и ничего больше, Вы можете удивиться, куда подевалось меню. Если Вы кликнете правой кнопкой мыши, Вы заметите, что меню возникает в местоположении курсора. Это меню не что иное как пример, для того чтобы проиллюстрировать стиль меню Openbox. Так как это просто пример, ни один из элементов меню не будет работать, если только Вы не установили эти программы на самом деле. В следующем разделе Вы увидите как создать Ваше собственное меню, которое содержит ссылки на ''Ваши'' программы. 

{{Important/ru|Если Вы кликнете мышкой для просмотра меню и заметите, что там нет ничего разборчивого, Вам нужно установить некоторые шрифты. Двумя распространенными выборами являются <code>media-fonts/corefonts</code> и <code>media-fonts/ttf-bitstream-vera</code> .}}

=== Конфигурация меню ===

Так как меню Openbox по умолчанию, в сущности, бесполезно, по причинам, упомянутым выше, пришло время создать то меню, которое будет работать. Все, что есть в меню Openbox, написано в соответствующим образом названном файле, {{Path|menu.xml}}, который может находиться в пользовательском файле {{Path|~/.config/openbox/menu.xml}}, или в системном файле {{Path|/etc/xdg/openbox/menu.xml}} . По умолчанию, только одним созданным файлом {{Path|menu.xml}} является системный файл, который применяется ко всем пользователям системы. 

Простым способом получить основной файл меню, который Вы можете изменить, является использование MenuMaker, который сгенерирует файл {{Path|menu.xml}}, основанный на программах, который установлены на Вашу систему. Чтобы так сделать, Вы должны сначала его установить: 

{{RootCmd|emerge menumaker}}

Как только он установлен, убедитесь, что Вы вышли из учетной записи администратора и вошли обратно под учетной записью Вашего пользователя. Затем Вы можете проинструктировать MenuMaker чтобы он создал меню специально используя синтаксис Openbox XML: 

{{Cmd|mmaker -v OpenBox3}}

Сгенерированное меню будет расположено в {{Path|~/.config/openbox/menu.xml}} . Затем Вы можете по своему выбору оставить его в качестве пользовательского файла {{Path|menu.xml}}, или дополнительно скопировать его в конфигурацию системного меню: 

{{RootCmd|cp .config/openbox/menu.xml /etc/xdg/openbox/menu.xml}}

{{Important/ru|Хорошей идеей является использование MenuMaker для генерирования меню по умолчанию, так как оно будет иметь элементы корневого меню Openbox. Эти элементы включают переключатель виртуального рабочего стола и команды для перезапуска и выхода из сессии Openbox.}}

Когда Вы откроете файл {{Path|menu.xml}} в Вашем любимом редакторе (например, vi), Вы можете заметить, что используемые XML-тэги удобочитаемы и легки для понимания. Вы можете по Вашему выбору изменить файл по умолчанию для удовлетворения Вашим нуждам, или Вы можете пожелать написать его с нуля (не беспокойтесь, это на самом деле не так сложно). Основной синтаксис XML-меню выглядит следующим образом: 

{{File|menu.xml||<pre>
<?xml version="1.0" encoding="UTF-8"?>
<openbox_menu>
<separator label="NAME_OF_SEPARATOR" />
<menu id="IDENTIFIER" label="NAME_OF_MENU">
  <item label="NAME_OF_PROGRAM">
    <action name="execute"><execute>/LOCATION/OF/BINARY</execute></action>
  </item>
</menu>
</openbox_menu>
</pre>
}}

The above example will work for any applications that launch with standard options in their own windows, but what if you need to append options to the program at launch time? That is no problem either, but the syntax of the menu item is slightly different. 

{{File|menu.xml||<pre>
<?xml version="1.0" encoding="UTF-8"?>
<openbox_menu>
<separator label="NAME_OF_SEPARATOR" />
<menu id="IDENTIFIER" label="NAME_OF_MENU">
  <item label="NAME_OF_PROGRAM">
    <action name="execute"><command>/LOCATION/OF/BINARY --OPTION1 --OPTION2</command></action>
  </item>
</menu>
</openbox_menu>
</pre>
}}

Simply replace anything in CAPS in the above two examples with your information. Alternatively, you can <code>emerge obmenu</code> , which is a graphical interface allowing you to create your menus without having to manually edit the {{Path|menu.xml}} file. It is a very small application and offers a nice amount of customisation without typing any XML. 

=== Openbox theme and behaviour configuration ===

Aside from being minimalistic and lightweight, Openbox is also surprisingly customisable and flexible. As a user, you can easily change various settings related to theme, appearance, window placement, docking, and more. There are two options for configuring these settings within Openbox. You may either manually edit {{Path|~/.config/openbox/rc.xml}} , or you may want a GUI to help you quickly change settings. 

If you want to manually edit {{Path|rc.xml}} , you simply open up your favourite text editor and start making changes. You might want to make a backup of the original file just in case, and store it in a location like {{Path|~/.config/openbox/rc.xml.default}} . There are plenty of comments within the document itself that should help you with editing. Alternatively, you may want to look at the [http://icculus.org/openbox/index.php/Help:Contents#Configuration Openbox configuration guides] . 

If manually editing {{Path|rc.xml}} doesn't sound like your cup of tea, you may want to use the GTK+ application to manage your themes and behaviours in Openbox. The application that you will use is called ObConf, and can be installed on your system just as easily as was Openbox itself. 

{{RootCmd|emerge obconf}}

You can then open the configurator by typing <code>obconf</code> in your terminal. Next, you can go and add an entry for ObConf into your {{Path|menu.xml}} so it will show up in your Openbox menu. If the "editing the menu.xml file" code listing above seemed too vague to be helpful, we'll use ObConf as an example of a menu entry: 

{{File|menu.xml||<pre>
<?xml version="1.0" encoding="UTF-8"?>
<openbox_menu>
<menu id="1" label="Configuration">
  <item label="OpenBox Config">
    <action name="execute"><execute>/usr/bin/obconf</execute></action>
  </item>
</menu>
</openbox_menu>
</pre>
}}

While ObConf is a great GUI tool for editing many behaviour-related settings for Openbox, it doesn't allow one to manipulate nearly as many settings as are presented in the {{Path|rc.xml}} file itself. If you are having trouble finding a particular setting which you would like to change, please consult the [http://openbox.org/wiki/Configuration Openbox Wiki] for more information.

{{Note|In recent versions of Openbox (namely >3.4.7.2), one may experience a delay in the submenu opening. This setting was introduced into the rc.xml file, and is listed as <submenuShowDelay>100</submenuShowDelay>. Simply choose a lower number that suits your needs.}}

=== Autostart configuration ===

As mentioned above, you don't see a whole lot when you issue the <code>startx</code> command for the first time after installing Openbox. In addition to customising your menus and changing the behaviour of the window manager, you will probably want to have some programs automatically start with your Openbox session. There is an easily-editable {{Path|autostart.sh}} script that allows you to do just that. Just like with the {{Path|menu.xml}} file, there are two different locations of the {{Path|autostart.sh}} script--the system-wide ( {{Path|/etc/xdg/openbox/autostart.sh}} ), and the user-defined ( {{Path|~/.config/openbox/autostart.sh}} ). 

In the default {{Path|autostart.sh}} , you will notice a bunch of lines calling for programs like the gnome-settings-daemon, XDG, and others. These lines will generate errors upon logout if you don't have the programs installed and configured. The easiest thing to do when getting started with Openbox is to just comment out these lines by using the # symbol. 

{{File|autostart.sh||<pre>
# Run XDG autostart things. By default don't run anything desktop-specific
# DESKTOP_ENV=""
# if which /usr/lib/openbox/xdg-autostart >/dev/null; then
#  /usr/lib/openbox/xdg-autostart $DESKTOP_ENV
# fi
</pre>
}}

In the above example, the comment symbol (#) was added before each line. The commenting method is preferred to just deleting the lines because you may want to add support for some of those startup items at a later time. Thus, leaving the default lines in place could ease that process. 

Adding your own programs to the {{Path|autostart.sh}} script is as easy as writing in the program name for many applications. For instance, if you have [http://packages.gentoo.org/package/app-admin/conky Conky] (a lightweight system monitor) installed, and want it to start automatically with your Openbox session, you simply add the following line to your {{Path|autostart.sh}} : 

{{Code|Adding Conky to your autostart.sh|<pre>
conky &
</pre>
}}

The ampersand (&) after the command allows that application to load up in the background. You will most likely want to load all the applications in your {{Path|autostart.sh}} script in the background because doing so will let Openbox and other programs load without the previous one finishing. 

=== Configuring PolKit ===

Many applications depend on the [http://hal.freedesktop.org/docs/PolicyKit PolKit] authentication framework. You may need a PolKit agent, such as <code>polkit-gnome</code> , running in your Openbox session. 

First, install the agent: 

{{RootCmd|emerge polkit-gnome}}

Now configure PolKit to start automatically when you login to Openbox. Add the following line to {{Path|~/.config/openbox/autostart}} (for a single user) or {{Path|/etc/xdg/openbox/autostart.sh}} (for all users): 

{{Code|Start PolKit automatically|<pre>
sleep 1 && /usr/libexec/polkit-gnome-authentication-agent-1 &
</pre>
}}

=== Setting the background ===

Some things that you might take for granted in bigger desktop environments are not included by default in Openbox. One such thing is setting your desktop background. In order to place an image as your wallpaper, you will need to emerge a program like [http://packages.gentoo.org/package/media-gfx/feh feh] or [http://packages.gentoo.org/package/x11-misc/nitrogen nitrogen] . <code>feh</code> is a simple image viewer that can also set the background, ''and'' it can easily be put into the autostart script. Once you have emerged <code>feh</code> , you can issue the following command to set the background: 

feh has many other options instead of --bg-scale, which will scale the image to the screen dimensions. Consult the feh documentation.

{{Cmd|feh --bg-scale /path/to/image.jpg}}

Once you have set the background manually, a file called {{Path|.fehbg}} will be created in your home directory. This file simply contains the above command that you just entered in the terminal, and is automatically updated when you issue a different background command. Now, to set your background automatically upon login, you can add the following line to your {{Path|autostart.sh}} script: 

{{Cmd|source $HOME/.fehbg &}}

If you don't particularly care for the idea of having to issue a command in the terminal in order to set your background, you can alternatively use <code>nitrogen</code> . It will allow you to set a folder for your background images, view thumbnails of those images, and fit, stretch, or tile them to your desktop. 

Installing <code>nitrogen</code> and getting it into your Openbox menu requires a few more steps than are readily apparent. First, you need to <code>emerge nitrogen</code> . Second, you need to run <code>nitrogen</code> with your backgrounds folder appended: 

{{Cmd|nitrogen /path/to/your/backgrounds/folder}}

Third, you can set your background image, but it will not be there after you logout. Just as with <code>feh</code> , you need to restore your background by editing your {{Path|autostart.sh}} script to have the following line: 

{{Cmd|nitrogen --restore &}}

This will cause nitrogen to load automatically when you start your Openbox session, and that can lead to a slightly slower load time than using feh. 

== Programs to use with Openbox ==

The following is a list of some programs which you might want to use within your Openbox environment. While the list contains numerous terminal emulators, file managers, panels, and more, it should by no means be considered exhaustive. If none of the programs listed fit your needs, please check the appropriate categories in Portage for more options. 

=== Terminal emulators ===

*  [http://packages.gentoo.org/package/lxde-base/lxterminal LXterminal] is the default terminal emulator for LXDE. It is very lightweight, and based on VTE. While EvilVTE offers many more customisation options (including transparency), LXterminal has a graphical interface for some of the more common options (font, colors, et cetera).

*  [http://packages.gentoo.org/package/x11-terms/evilvte EvilVTE] is an extremely lightweight terminal emulator based on (you guessed it) VTE. It supports tabs, multiple encodings, as well as an easy and extensible configuration file.

*  [http://packages.gentoo.org/package/x11-terms/mrxvt Mrxvt] is a multi-tabbed rxvt clone with XFT, transparent background and CJK support. It also features session support for each tab.

*  [http://packages.gentoo.org/package/x11-terms/aterm Aterm] supports transparency and backwards compatibility with rxvt. It was originally designed for the AfterStep window manager, but easily integrates with other environments.

*  [http://packages.gentoo.org/package/x11-terms/eterm Eterm] is a terminal based on vt102 and designed to be a more feature-rich replacement for xterm.

*  [http://packages.gentoo.org/package/x11-terms/rxvt-unicode Rxvt-unicode] is a clone of rxvt that supports Unicode, daemons, embedded perl, and multiple fonts simultaneously.

*  [http://packages.gentoo.org/package/x11-terms/xfce4-terminal Terminal] is the VTE-based default for the Xfce desktop environment, so it does require some Xfce libraries to run. However, it is still fairly speedy, and supports transparency and is easily customised.

=== File managers ===

*  [http://packages.gentoo.org/package/x11-misc/pcmanfm PCManFM] is the lightweight filemanager from LXDE. It supports tabbed browsing, drag and drop, thumbnails for images, bookmarks, volume management, searching, and more. It also provides supports for managing the desktop background and drawing desktop icons (both optionally).

*  [http://packages.gentoo.org/package/xfce-base/thunar Thunar] is the standard file manager from Xfce. It features a bulk renamer, user-customisable actions, and an extension framework, along with many optional plugins, such as media tag editing. It depends on several Xfce libraries, but it's still slimmed down compared to other file managers like Nautilus (from GNOME), and Konqueror (from KDE).

*  [http://packages.gentoo.org/package/gnome-base/nautilus Nautilus] is the powerful file manager from the GNOME desktop environment. It features volume management, thumbnails for images, searching, and some system configuration. As it depends on many of the GNOME libraries for proper function, it can seem a bit heavy compared to some of the other file managers.

*  [http://packages.gentoo.org/package/app-misc/gentoo Gentoo] (no relation to this glorious Linux distribution) is a two-pane style file manager. It is incredibly lightweight, but lacks a some features now prominent in modern file managers. It should definitely be considered for older hardware, or if you are wanting a barebones setup.

*  [http://packages.gentoo.org/package/app-misc/emelfm2 emelFM2] is another file manager in the vein of Midnight Commander. It features a two-pane window. As with the Gentoo file manager (listed above), it is barebones and does not include many features prevalent in newer file managers. However, it also offers a few features not found in other file managers, such as a built-in commandline in a separate pane.

=== Desktop management ===

* Though [http://packages.gentoo.org/package/x11-misc/pcmanfm PCManFM] is mainly a file manager, it also gives you the option to manage the desktop background (instead of using <code>feh</code> or <code>nitrogen</code> ) and draw desktop icons.

*  [http://packages.gentoo.org/package/x11-misc/idesk iDesk] is a simple program used to draw desktop icons. It supports shadowed and anti-aliased fonts, PNG images, "snap-to-grid" placement, and changing the desktop background.

=== Panels ===


*  [http://code.google.com/p/tint2/ Tint2] is a simple, lightweight panel and taskbar. It supports color, transparency, a clock, drag and drop between virtual desktops, a system tray, and comes with a battery monitor. You can even add a button to display the applications menu from your window manager.

*  [http://packages.gentoo.org/package/x11-misc/pypanel PyPanel] is an easily customised panel written in Python and C. It features transparency, shading, tinting, location and layout configuration, font type, autohiding, application launcher, clock, and more.

*  [http://packages.gentoo.org/package/lxde-base/lxpanel LXPanel] is the default panel and taskbar from LXDE. It features a launcher, menu, clock, and a GUI-based configurator. It is feature-rich while depending on very few packages, making it a good choice for a lean system.

*  [http://packages.gentoo.org/package/xfce-base/xfce4-panel Xfce4-panel] is the default panel from the Xfce desktop environment. It supports application launchers, detachable menus, a pager, tasklist, clock, applets, and more. It does, however, require a few of the Xfce libraries which are not dependencies of some other panels.

*  [http://packages.gentoo.org/package/x11-misc/fbpanel FBpanel] is a simple, extremely lightweight panel that supports window lists, launchers, a clock, and a few other goodies. It's not the most featureful panel, and it can be cumbersome to configure, but it needs only GTK+ to run.

=== Pagers and systrays ===


*  [http://packages.gentoo.org/package/x11-misc/netwmpager NetWMpager] is an EWMH-compliant pager that integrates nicely into any of the *box environments. It is not as obtrusive, and is much more readily customisable than many of the other available pagers.

*  [http://packages.gentoo.org/package/x11-misc/bbpager BBpager] is a desktop pager that was originally written for BlackBox, but works nicely with Openbox as well. It does have some BlackBox dependencies though.

*  [http://packages.gentoo.org/package/x11-plugins/docker Docker] is the system tray that is made especially for Openbox. It has no extra dependencies, and gives you the ability to view and use tray icons for supported GTK and QT-based applications.

*  [http://packages.gentoo.org/package/x11-misc/trayer Trayer] is a system tray that was modified from the FBpanel code, and is often used with FVWM. One of its perks is that it supports transparency.

=== Session management ===


*  [http://packages.gentoo.org/package/lxde-base/lxsession LXsession] is the stripped down session manager from LXDE. It is designed to remember applications that the user was running at the last logout, and to automatically restart those programs. It also supports the HAL daemon.

*  [http://packages.gentoo.org/package/xfce-base/xfce4-session Xfce4-session] is the session manager from, you guessed it, Xfce. It is capable of saving several sessions, and provides methods for logging out, rebooting, and suspending your computer. It does, however, have many Xfce dependencies.

=== Configuration tools ===


*  [http://packages.gentoo.org/package/x11-misc/obconf ObConf] is a GUI application allowing you to customise the Openbox window manager without manually editing {{Path|~/.config/openbox/rc.conf}} .

*  [http://packages.gentoo.org/package/lxde-base/lxappearance LXappearance] is a GTK theme and icon configurator used with LXDE. It provides a nice graphical interface for setting the theme and icons, while depending on very few extra libraries.

*  [http://packages.gentoo.org/package/x11-themes/gtk-chtheme GTK-ChTheme] is a simple application allowing for easier switching of GTK themes and your font. Currently, it does not allow for the switching of icon themes.

*  [http://packages.gentoo.org/package/x11-themes/gtk-theme-switch GTK-theme-switch] is another simple application that lets you change your GTK theme.

=== Miscellaneous ===

*  [http://packages.gentoo.org/package/app-admin/conky Conky] is a lightweight system monitor that can display over 250 objects, including date and time, CPU usage, memory usage, IMAP/POP3 email, top processes, hardware sensor data, and even info from your music player. It is highly customisable both in appearance and data display. We also have a [http://www.gentoo.org//doc/en/conky-howto.xml Conky configuration guide] available.

*  [http://packages.gentoo.org/package/app-editors/leafpad Leafpad] is a simple text editor. It is very lightweight, but includes features like codeset options, and the ability to undo/redo without limits.

*  [http://packages.gentoo.org/package/media-gfx/feh feh] is a simple image viewer that runs from the terminal, but it also has many other features. It can display a slideshow of images, create an index print, dynamically zoom, and set the desktop background (detailed instructions above).

*  [http://packages.gentoo.org/package/media-gfx/gpicview GPicView] is a GUI-based image viewer. Though it has more dependencies than <code>feh</code> , it is incredibly quick to load and run.

*  [http://packages.gentoo.org/package/x11-misc/slim SLiM] is the Simple Login Manager, which allows you to login to your Openbox session via a graphical interface instead of the terminal. It has very few dependencies, and supports many themes, but should not be used on machines that require remote logins.

== Openbox inside desktop environments ==

=== LXDE ===

If installing each component of a working environment sounds like a little ''too'' much customisation, but you still want the flexibility of Openbox, you may want to look into a desktop environment that uses Openbox as its default window manager. That environment is [http://www.lxde.org/ LXDE] , the Lightweight X Desktop Environment. Designed to require even fewer system resources than Xfce, it is built around Openbox. 

=== Openbox inside GNOME ===

If you already have a GNOME environment installed, you may just want to replace the Metacity window manager with Openbox. Fortunately, this is quite a simple task! You will need to fire up your favourite editor, open your {{Path|~/.xinitrc}} file, and put the following command inside it: 

{{Code|Adding an Openbox-GNOME session to your .xinitrc|<pre>
exec openbox-gnome-session
</pre>
}}

If you use GDM or another graphical login manager, you will see a new "GNOME/Openbox" option in your session menu. You can simply select that option instead of manually editing your {{Path|~/.xinitrc}} . 

=== Openbox inside KDE ===

Say you have KDE installed and like it, but you want more flexibility with your window management than KWin offers. You can use Openbox as your window manager inside of KDE by simply editing your {{Path|~/.xinitrc}} file, and replacing your current exec command with the following: 

{{Code|Adding an Openbox-KDE session to your .xinitrc|<pre>
exec openbox-kde-session
</pre>
}}

Now when you issue <code>startx</code> you will see KDE, but instead of KWin, you will have the customisability of the Openbox window manager. 

If you use KDM or another graphic login manager, you will see a new "KDE/Openbox" option in your session menu. You can simply select that option instead of manually editing your {{Path|~/.xinitrc}} . 

{{Note|This method of using Openbox with KDE has been tested with the KDE 3.x releases. While it seems highly likely that it will work with the KDE 4.x series, it has not been thoroughly tested as of yet.}}

=== Openbox inside Xfce ===

If you use Xfce4 and would like to replace xfwm4 with Openbox, you will need to go about it a little differently than with KDE or GNOME. First, you need to start your normal Xfce session, and open up a terminal. From the terminal, issue the following command: 

{{Cmd|killall xfwm4 ; openbox & exit}}

Second, you need to exit out of your Xfce session, and make sure to tick the checkbox that says "Save session for future login." This will keep Openbox as your default window manager. Third, you will notice that you can't logout properly when using the default menu action. To fix this problem, open up your {{Path|menu.xml}} , and locate this line: 

{{File|menu.xml|exit action|<pre>
<item label="Exit">
     <action name="Exit"/>
</item>
</pre>
}}

Change it to this: 

{{File|menu.xml|new exit action|<pre>
<item label="Exit">
  <action name="Execute">
    <command>xfce4-session-logout</command>
  </action>
</item>
</pre>
}}

{{Note|With Xfce4, the root-menu provided by Xfdesktop will be used instead of the Openbox root-menu.}}

== Further documentation ==

=== External resources ===

While this document will easily take you through the inital installation and customisation of Openbox, it is by no means the only reference on the topic. There are several other resources that will aid you in creating your perfect Openbox setup. Some of them are listed below: 

* On [http://openbox.org/ The Official Openbox website] you will find more detailed information regarding theming, creating menus (including pipe menus), autostart scripting, and much more. This site also has information regarding new releases, upgrades, and instructions on how you can contribute to development.

* The [http://urukrama.wordpress.com/openbox-guide/ Urukrama's Guide to Openbox] blog contains a plethora of information about switching GTK+ themes, setting up keybindings, desktop effects, and other programs to use in conjunction with Openbox. Though the tutorial was originally written for use with Ubuntu, everything is applicable to Gentoo (and other Linux distributions for that matter).

*  [http://www.box-look.org/ Box-Look] provides numerous themes, icons, wallpapers, fonts, and tools to be used with Openbox (as well as the other *box window managers like Fluxbox, Blackbox, PekWM, etc.)

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* nathanzachary
* nightmorph

[[Category:Window manager]]
