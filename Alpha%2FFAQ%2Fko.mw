<languages />


{{Metadata|abstract=이 자주 묻는 질문 문서에서는 젠투/알파와 일반적인 리눅스/알파와 관련된 자주 묻는 대부분의 질문 일부에 대해 답을 하려 합니다.}}

이 자주 묻는 질문 문서에서는 젠투/알파와 일반적인 리눅스/알파와 관련된 자주 묻는 대부분의 질문 일부에 대해 답을 하려 합니다.

=== 도입부 ===

이 문서에서는 젠투/알파와 알파/리눅스 관련된 보통 많이 묻는 질문에 대한 대답을 넣었습니다. 새 사용자와 경험자 모두를 대상으로 합니다. 

== 젠투/알파 프로젝트 관련 ==

=== 젠투/알파가 뭐죠? ===

젠투/알파 프로젝트는 알파 플랫폼에 대한 최신의 젠투 배포판과 현재 상태를 유지하는 책임을 가지고 있습니다. 근본적으로 패키지 키워딩, 프로그램 포팅, 새 릴리즈 만들기가 이에 포함됩니다. 젠투/알파 프로젝트는 데스크톱/서버용으로 쓸만한 환경을 제공하는것이 목표입니다. 

== 알파 아키텍처 ==


=== 알파 아키텍처는 죽었나요? ===

거의 뭐 그렇습니다. HP는 새 알파 시스템에 대한 주문을 2007년 4월 27일부로 중단했고 알파기종에 대한 추가 및 업그레이드는 2008년 4월 25일 중단했습니다. 더 많은 정보는 [http://h18002.www1.hp.com/alphaserver/evolution.html 계획 페이지]를 참고하세요. 

=== 32비트 프로그램은 실행할 수 있나요? ===

아니요. 모든 알파 시스템은 순수하게 64비트 커널을 사용하고 순수한 64비트 사용자 환경(userland)입니다. 심지어 gcc의 결과물을 <code>-m32</code> 플래그를 사용하여 32비트로 강제로 결과물을 낼 수 없습니다. 

=== 알파는 빅-엔디안 인가요 아니면 리틀-엔디안 인가요? ===

알파 시스템은 리틀 엔디안이죠. 알파를 사용하는 거대한 크레이 시스템은 빅-엔디안 이었지만 리눅스는 지원하지 않습니다. 

=== 리눅스/x86 프로그램을 알파에서 실행할 수 있나요?===

아니요. [http://wiki.qemu.org/Main_Page qemu] 같은 x86 에뮬레이터 없이는 안됩니다. 과거의 DEC/Compaq/HP에서는 리눅스/알파 시스템에서 리눅스/x86 프로그램을 동작할 수 있게 하는 <code>em86</code> 이라는 프로그램을 관리했었습니다만, 이 프로그램은 폐쇄 소스였고 업스트림에서 더이상 관리하지 않습니다. gcc-3의 ABI와 호환되는 <code>em86</code> 바이너리는 없습니다. 

=== 알파에 왜 젠투를 설치해야 하죠? ===

분명하게, amd64같이 더 빠른 64비트 시스템을 찾을 수 있습니다만 알파 시스템이 쓸모가 없다는 얘긴 아닙니다. 이런 종류의 하드웨어에 리눅스를 설치하려 할 때 약간의 바람직한 이유가 있습니다: 

* 오래된 컴퓨터를 쓸모있는 걸로 변모시킬 수 있습니다. 더 오래된 알파 머신은 멋진 라우터 내지는 서버가 될 수 있습니다. 이들 데스크톱의 성능 또한 뒤쳐지는건 아닙니다.
* 흔하지 않은 컴퓨터 하드웨어에 대해 배울 수도 있습니다.
* 괜찮죠. 알파 머신에서 리눅스가 돌아간다는 사실을 얼마나 많은 사람들이 말할 수 있을까요?

=== 알파 하드웨어를 어디서 살 수 있죠? ===

알파 하드웨어는 동네 컴퓨터 가게에서는 보통 없습니다. [http://ebay.com eBay]는 보통 좋은 선택이 되겠지만, 선적 가격이 꽤 비싸지 않을 경우에나 해당합니다. 구글을 통해서라면 중고 장비 유통업자가 있을텐데, 가격을 비싸게 부릅니다. 

== 하드웨어 ==

=== 알파 서버 껍데기를 열었는데 전원을 넣을 수가 없네요? 뭘 어떻게 해야 하죠? ===

케이스의 상판이 제위치에 있는지 확인하십시오. 중판은 하부로 향한 철 재질의 작은 조각들입니다. 상판을 제대로 돌려놓으면 철 조각들이 스위치를 누릅니다. 스위치가 눌려진 상태가 아니라면, 시스템이 전원 인가를 거부할것입니다. 

== 알파 관련 컴파일러 플래그 ==

=== 추천하는 알파 관련 컴파일러 플래그가 있나요? ===

컴파일러 최적화에 따라, 그 이상은 하지 마십시오. 해당 플래그를 조심스레 사용하면 안정적이고 상당히 빠른 시스템을 제공합니다. 옵션을 공격적으로 사용하면 시스템을 갑작스레 망가뜨릴 수 있습니다. 의심된다면 그냥 포기하십시오. 좀 더 많은 설명이 필요하다면 <code>gcc</code> 맨페이지를 확인하십시오 

=== 특정 명령셋과 스케줄링 모델을 어떻게 최적화 하죠? ===

You can optimize for a specific instruction set and scheduling model with <code>-mcpu=XXX</code> , where XXX is your cpu type. Valid cpu types are <code>ev4</code> , <code>ev45</code> , <code>ev5</code> , <code>ev56</code> , <code>pca56</code> , <code>ev6</code> and <code>ev67</code> . If you do not use the <code>-mcpu=XXX</code> flag, then <code>gcc</code> will default to the cpu type of the machine it was compiled on. <code>-mcpu=</code> is equivalent to the <code>-march=</code> flag on x86. 

{{Note|AlphaServer 800 users should set <code>ev5</code> . There are known issues setting <code>ev56</code> particularly with Xorg causing a full system lock up.}}

=== How do I specify the scheduling model without changing the instruction set? ===

You can specify the scheduling model without changing the instruction set with <code>-mtune=XXX</code> , where XXX is your cpu type. Valid cpu types are <code>ev4</code> , <code>ev45</code> , <code>ev5</code> , <code>ev56</code> , <code>pca56</code> , <code>ev6</code> and <code>ev67</code> . <code>-mtune=</code> is implied by <code>-mcpu=</code> , so you don't need to specify this with if you set <code>-mcpu=</code> . <code>-mtune=</code> is equivalent to the <code>-mcpu=</code> flag on x86. 

=== How do I enable software assisted floating point numbers? ===

You can enable software assisted floating point numbers with <code>-mieee</code> . This will enable software assistance to correctly support denormalized numbers and exceptional IEEE values such as not-a-number and plus/minus infinity. 

This should be in your global <code>CFLAGS</code> unless you really know what you are doing. 

=== How do I specify the memory latency of my system? ===

You can specify the memory latency of your system with <code>-mmemory-latency=XXX</code> , where XXX is the number of clock cycles. This sets the latency time that the scheduler should assume for memory references. <code>gcc</code> has some predefined "typical" values that are also accepted by <code>-mmemory-latency=XXX</code> . Those values are <code>L1</code> for Dcache, <code>L2</code> for Scache, <code>L3</code> for Bcache, and <code>main</code> for main memory. 

This flag should probably not be use in your global <code>CFLAGS</code> as the value you choose is highly dependent on the memory access pattern of the application you are compiling. 

=== How do I specify that static data should be placed in the small data area? ===

You can specify that static data should be placed in the small data area with <code>-msmall-data</code> . This will cause <code>gcc</code> to take advantage of some features of the Alpha architecture by storing heavily used pieces of data in specific sections called the small memory sections. The sections are limited to 64KiB which means accessing anything stored in them will only take one instruction. 

<code>-fPIC</code> will override<code>-msmall-data</code> , so you should use the<code>-fpic</code> flag instead if you do not want<code>-msmall-data</code> to be overridden. 

This flag should probably not be used in your global <code>CFLAGS</code> as some objects require more than 64KiB to be stored, and this will cause a gp_overflow ld error. 

=== How do I specify that object code should be placed in the small text area? ===

You can specify that object code should be placed in the small text area with <code>-msmall-text</code> . This will cause <code>gcc</code> to assume that the entire program (or library) fits in 4MB, and is thus reachable with a branch instruction. This reduces the number of instructions required for a function call from 4 to 1. 

This flag should probably not be used in your global <code>CFLAGS</code> as some programs (or libraries) are larger than 4MB, and this will cause an ld error. 

=== What do I do if any of these compiler flags cause a compile, linker, or runtime error? ===

As [[#CFLAGS]] , please use these <code>CFLAGS</code> cautiously. They may break your system. If you experience problems, try using less aggressive <code>CFLAGS</code> before [[#bugs]] . 

== Alpha Booting and Bootloaders ==

=== What is SRM? ===

SRM is based on the Alpha Console Subsystem specification, which provides an operating environment for OpenVMS, Tru64 UNIX, and Linux operating systems. See the [http://www.alphalinux.org/faq/SRM-HOWTO/ SRM Howto] for more information about SRM. 

=== What is ARC? ===

ARC is based on the Advanced RISC Computing (ARC) specification, which provides an operating environment for Windows NT. 

=== How can I tell if which firmware my Alpha has, ARC or SRM? ===

When you power your system on you will see a screen with a blue background and white text if it is using SRM. You will see a graphical boot system if it is using ARC. 

=== 어떤 부트로더를 사용해야 하나요? ===

If your Alpha system supports SRM, then you should use aboot. If your system supports both SRM and ARCs (ARC, AlphaBIOS, ARCSBIOS), then you should follow [http://www.alphalinux.org/faq/x31.html the SRM Firmware Howto] for switching to SRM and use aboot. If your system can only use ARCs (Ruffian, xl, etc.) then you will need to choose milo. 

=== Can aboot boot kernels from EXT4, XFS, ReiserFS, or JFS partitions? ===

No, <code>aboot</code> only supports booting kernels from <code>ext2</code> and <code>ext3</code> partitions. You may still use other files systems for your root partition, you just need to create a {{Path|/boot}} partition with either <code>ext2</code> or <code>ext3</code> on it. 

Support for ext4 is planned. In fact, there are patches floating around that add support for [https://bugs.gentoo.org/show_bug.cgi?id=106855 ReiserFS] , [https://bugs.gentoo.org/show_bug.cgi?id=107103 XFS] , and [http://alphalinux.org/wiki/index.php/Aboot_EXT4_support ext4] . 

== 프로그램 ==

== 젠투/알파 에서 자바 지원은 어떻게 되나요? ==

컴팩/HP에서 <code>compaq-jre</code> 와 <code>compaq-jdk</code>라고 하는 바이너리 패키지를 제공합니다. 모든 지원을 중단했고 패키지는 2006년 10월 11일부로 젠투에서 제거했습니다. 그 이후로, 자바를 지원하지 않습니다. 

=== 자바 지원을 위한 작업을 할건가요? ===

알파에서 <code>icedtea</code>를 사용할 수는 있겠지만, 엄청나게 많은 추가 패키지를 시험하는데 상당한 유지 비용이 수반되기 때문에 지원 계획은 없습니다. 

=== 젠투/알파에서 .NET 지원은 어떻게 되나요? ===

알파 지원에 대해서는 [http://www.mono-project.com/Main_Page 모노] 또는 [http://www.dotgnu.org/ DotGNU] 그 어디에도 없습니다. 

=== .NET 지원에 필요한건 무엇인가요? ===

.NET을 알파로 끌어오는건 간단한 일이 아닙니다. JIT 컴파일러에 대한 모든 어셈블리 언어 코드 생성 매크로를 코딩해야 하고 아키텍처 관련 함수(레지스터 할당자 등)도 코딩해야 합니다. 

== 알파 리눅스 커널 ==

=== 어떤 커널 소스코드를 사용해야 하나요? ===

<code>gentoo-sources</code> 사용을 추천하지만 <code>vanilla-sources</code>도 젠투/알파에서 지원합니다. 어떤 커널이 필요에 맞는지 판단하려면 [http://www.gentoo.org//doc/en/gentoo-kernel.xml 젠투 커널 안내서]를 읽어보시는것이 좋습니다. 

=== kernel-2.6에서 동작을 안하는데요, 2.4 기반 시스템으로 빌드할 수 있을까요? ===

젠투/알파는 2008년 1월을 기점으로 2.4 커널과 프로파일의 지원을 중단했는데요. 기술적으로는 2.4 젠투 시스템(트리의 커널)을 빌드할 수 있지만, 2.6 전용 꾸러미는 여러분 자신이 가려야 하고, 이 문제에 대해서는 개발자들의 지원을 받을 수 없습니다. 

젠투/알파는 동작하지 않는 2.6 시스템에 대해 버그 보고서를 확인하고, 할 수 있는 한 최대한 도움을 드리려 할 것입니다. 

=== hardened-sources를 지원하나요? ===

간단하게는 "아니요"입니다. 얼마전까지만 해도 지원했지만, 하드웨어와 관리자를 잃음으로서 지원하지 않습니다. 초기 작업을 계속해보고 싶고 관심이 있다면 알려주십시오. 

=== 2.6 커널에 알파 SMP를 지원하나요? ===

과거에 몇번 깨진 적이 있습니다. 그러나 최근 버전에서는 잘 동작하는 걸로 알려져 있습니다. 

== 젠투/알파 프로젝트 돕기 ==

=== 버그를 어떻게 보고하죠? ===

버그를 찾으려 하거나 패치를 보내려 한다면, 버그를 보고해야 합니다. 시간이 약간 걸릴 수 있을 뿐, 도움은 정말로 고맙게 생각합니다. [https://wiki.gentoo.org/wiki/Bugzilla_HOWTO 젠투 버그 보고 안내서]를 따라주십시오. 

=== 젠투/알파 프로젝트를 어떻게 돕죠? ===

다음 방식으로 도와주실 수 있습니다: 

* Filing clear and concise [[#bugs]].
* Testing software that does not yet have the <code>~alpha</code> keyword.
* Answering questions on the [http://www.gentoo.org//main/en/lists.xml mailing lists] , [http://forums.gentoo.org/viewforum-f-32.html forum] and IRC channel.
* Sending patches
* Becoming an [http://www.gentoo.org/proj/en/base/alpha/AT/index.xml AT] 

=== 알파 아키텍처 테스터 프로젝트가 있나요? ===

예. 자세한 내용은 [http://www.gentoo.org/proj/en/base/alpha/AT/index.xml 젠투 리눅스 알파 아키텍처 테스터 프로젝트]를 보십시오. 

== 문제 해결 ==

=== 왜이리 Xorg가 알파 머신을 뒤지는거죠? ===

잘못된 -mcpu 설정으로 인해 일어납니다. 예를 들어 AlphaServer 800에서는 xorg '''와''' glibc를 컴파일할 때 <code>ev5</code> 플래그로 컴파일 해야 합니다. 알파 머신을 뒤지다 실패하면 기대치 못한 결과가 야기됩니다. 

== 기타 자원 ==

=== 젠투 알파 포럼이 왜 없죠? ===

On the [http://forums.gentoo.org Gentoo Forums] there are several arch specific categories like [http://forums.gentoo.org/viewforum-f-24.html Gentoo on PPC] and [http://forums.gentoo.org/viewforum-f-24.html Gentoo on Sparc] . There is no Gentoo on Alpha category because there simply isn't enough Gentoo/Alpha activity on the forums to warrant one. All Alpha related posts should go in the [http://forums.gentoo.org/viewforum-f-32.html Gentoo on Alternative Architectures] category. 

=== 젠투/알파에 대해 더 많은 도움이나 정보는 어디서 얻나요? ===

If any of your questions weren't answered here, you can try other resources like the [http://www.gentoo.org//doc/en/handbook/handbook-alpha.xml Alpha Handbook] or [http://www.gentoo.org//proj/en/base/alpha/ our project homepage]. You can also ask us at <code>#gentoo-alpha</code> on <code>irc.freenode.net</code> , [http://forums.gentoo.org/viewforum-f-32.html Gentoo on Alternative Architectures Forum] , or on the {{Mail|gentoo-alpha@lists.gentoo.org}}mailing list. 

=== 알파/리눅스에 대해 더 많은 도움이나 정보는 어디서 얻나요? ===

[http://alphalinux.org/wiki/index.php/Main_Page AlphaLinux.org] is a central repository for all things Alpha/Linux. 

== 감사문 ==

이 안내서에 제공한 노고에 대해 다음 작성자와 편집자분들께 감사의 말을 전하고자 합니다:


* Thomas Cort
* Brian Evans
* nightmorph
* Matt Turner

[[Category:Core system]]
