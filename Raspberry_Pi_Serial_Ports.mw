The Gentoo Stage3 at the time of this writing is missing a couple of things to make the serial ports behave as they do in Raspbian Jessie. There is no Udev rule to create the serial0 and serial1 symlinks that point to the serial ports. In Raspbian, the serial0 symlink always points to the serial port assigned to GPIO14:15 while serial1 always points to the other serial port. Raspbian has a custom Udev rule that is responsible for this, but missing in the arm64 Gentoo Stage 3.

The other issue at hand is the console serial port assignment in /etc/inittab. By default, /etc/inittab assigns ttyAMA0 as the console serial port. For non-wireless/Bluetooth Pi units, it works perfectly fine as ttyAMA0 is the console serial port. However, on wireless/Bluetooth equipped units such as the Pi 3 and the Pi Zero W, ttyAMA0 defaults to the Bluetooth module. This cannot work as the console takes over ttyAMA0, creating a conflict.

== UART Setup ==

In order to set up Gentoo such that it follows the Raspbian configuration, we need to do a few things -

*Unassign ttyAMA0 as the console UART in /etc/inittab
*Assign ttyS0 as the console UART in /etc/inittab (optional)
*Create the dialout group
*Create udev rules file which handles the serial symlinks and assigns the serial ports to the dialout group
*Edit the config.txt and cmdline.txt files for your desired operation

=== Changing Console Assignment ===

Open up /etc/inittab -

{{RootCmd| nano -w /etc/inittab}}

Find the line below and comment it out by appending a # at the beginning of the line -

{{FileBox|filename=/etc/inittab|f0:12345:respawn:/sbin/agetty 9600 ttyAMA0 vt100}}

{{Note|Optional: If you need a console serial port, find the line below and uncomment it by removing the # at the beginning of the line -
{{FileBox|filename=/etc/inittab|#s0:12345:respawn:/sbin/agetty -L 9600 ttyS0 vt100}}
}}
Save the file and exit.

=== Create The Dialout Group ===

Create the dialout group with a GID of 20 -

{{RootCmd| groupadd -g 20 dialout}}

=== Create Udev Rules ===

In Raspbian Jessie, there is a custom Udev rule in /etc/udev/rules.d called 99-com.rules. This rule is responsible for ensuring that the serial0 symlink always points to the GPIO14:15 UART while serial1 always points to the other UART. I've made a slight modification to it to assign the serial hardware to the dialout group.

Create the file 99-com.rules -

{{RootCmd| nano -w /etc/udev/rules.d/99-com.rules}}

Copy this text and paste it into the file.

{{FileBox|filename=/etc/udev/rules.d/99-com.rules|
<nowiki>
SUBSYSTEM=="input", GROUP="input", MODE="0660"
SUBSYSTEM=="i2c-dev", GROUP="i2c", MODE="0660"
SUBSYSTEM=="spidev", GROUP="spi", MODE="0660"
SUBSYSTEM=="bcm2835-gpiomem", GROUP="gpio", MODE="0660"

SUBSYSTEM=="gpio*", PROGRAM="/bin/sh -c '\
        chown -R root:gpio /sys/class/gpio && chmod -R 770 /sys/class/gpio;\
        chown -R root:gpio /sys/devices/virtual/gpio && chmod -R 770 /sys/devices/virtual/gpio;\
        chown -R root:gpio /sys$devpath && chmod -R 770 /sys$devpath\
'"

KERNEL=="ttyAMA[01]", GROUP="dialout", PROGRAM="/bin/sh -c '\
        ALIASES=/proc/device-tree/aliases; \
        if cmp -s $ALIASES/uart0 $ALIASES/serial0; then \
                echo 0;\
        elif cmp -s $ALIASES/uart0 $ALIASES/serial1; then \
                echo 1; \
        else \
                exit 1; \
        fi\
'", SYMLINK+="serial%c"

KERNEL=="ttyS0", GROUP="dialout", PROGRAM="/bin/sh -c '\
        ALIASES=/proc/device-tree/aliases; \
        if cmp -s $ALIASES/uart1 $ALIASES/serial0; then \
                echo 0; \
        elif cmp -s $ALIASES/uart1 $ALIASES/serial1; then \
                echo 1; \
        else \
                exit 1; \
        fi \
'", SYMLINK+="serial%c"</nowiki>}}

Save and exit the file.

=== Modify The Boot Files ===

==== config.txt ====
Mount the boot partition -
{{RootCmd| mount /boot}}

Open up config.txt -

{{RootCmd| nano -w /boot/config.txt}}

Add the following at the end of the file -

{{FileBox|filename=/boot/config.txt|enable_uart{{=}}1}}

This locks the VPU core frequency at 250MHz under normal mode and 400MHz in turbo mode.

Save and exit the file.

==== cmdline.txt ====

Open up cmdline.txt -

{{RootCmd| nano -w /boot/cmdline.txt}}

Add console=ttyS0,115200 to the kernel command line in the file. An example kernel command line is shown below -

{{FileBox|filename=/boot/cmdline.txt|dwc_otg.lpm_enable{{=}}0 console{{=}}tty1 console{{=}}ttyS0,115200 root{{=}}/dev/mmcblk0p7 rootfstype{{=}}ext4 elevator{{=}}deadline fsck.repair{{=}}yes rootwait}}

Save and exit the file, then reboot the Pi -

{{RootCmd| reboot}}

=== Checking Your Configuration ===

Once the Pi is back up, type the following commands -

{{RootCmd| ls -l /dev {{!}} grep ttyS0
|output=<pre>lrwxrwxrwx 1 root root           7 Jul 24 23:26 serial1 -> ttyAMA0
crw-rw---- 1 root dialout 204,  64 Aug 14 15:08 ttyAMA0</pre>}}
{{RootCmd| ls -l /dev {{!}} grep ttyAMA0
|output=<pre>
lrwxrwxrwx 1 root root           5 Jul 24 23:26 serial0 -> ttyS0
crw--w---- 1 root dialout   4,  64 Jul 24 23:26 ttyS0</pre>
}}
