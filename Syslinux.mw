<translate>

<!--T:71-->
{{Metadata|abstract=Syslinux is a package that contains a family of bootloaders. The package includes SYSLINUX (for FAT file systems), EXTLINUX (for Linux file systems), PXELINUX (for network PXE boot) and ISOLINUX (ISO-9660) for CD/DVD bootloading.}}

<!--T:1-->
{{InfoBox stack
|{{InfoBox homepage|http://www.syslinux.org|header=true}}
|{{InfoBox wikipedia|SYSLINUX}}
|{{InfoBox ohloh}}
}}

<!--T:2-->
'''Syslinux''' is a package that contains a family of [[:Category:Bootloaders|bootloaders]]. The package includes SYSLINUX (FAT filesystem bootloader), EXTLINUX ([[ext4|ext2/3/4]], [[btrfs]] and [[XFS|xfs]] filesystem bootloader), PXELINUX (Network PXE bootloader) and ISOLINUX (ISO-9660) for CD/DVD bootloading.

== Installation == <!--T:3-->

<!--T:4-->
The installation of the Syslinux package will provide the software on the system but not install or activate any of the various bootloaders contained in the package.

<!--T:5-->
=== USE flags ===
{{USEflag|package=sys-boot/syslinux|desc=Optional USE flags for {{Package|sys-boot/syslinux}}:
|custom-cflags++no
}}

=== Emerge ===

<!--T:6-->
{{Emerge|sys-boot/syslinux}}

== Setup on BIOS systems == <!--T:7-->

<!--T:8-->
{{Note|These instructions are for BIOS systems. For (U)EFI, read [[#Setup_on_EFI_systems|Setup on EFI systems]].}}

<!--T:73-->
The rest of this section will presume the boot partition is located at {{Path|/dev/sda1}} (which is a common location). If this is not the case be sure to make adjustments as needed.}}

<!--T:9-->
To use EXTLINUX be sure to install the proper ''boot sector'', then install the boot loader into the partition. If these steps are omitted EXTLINUX will not be operational. This type of a boot sector setup is not needed for the SYSLINUX, PXELINUX and ISOLINUX installations.

=== Boot sector setup === <!--T:11-->

==== MBR (msdos) setup ==== <!--T:12-->

<!--T:13-->
{{Note|These instructions are for a MBR (msdos) partition layout. For GPT, skip down to the [[#GPT_setup|GPT setup]] section.}}

<!--T:14-->
First, install the boot sector provided by Syslinux. Use extra care with this command; if <code>count=1</code> is not given it will overwrite the entire disk rather than just the first 440 bytes:

<!--T:15-->
{{RootCmd|dd bs{{=}}440 conv{{=}}notrunc count{{=}}1 if{{=}}/usr/share/syslinux/mbr.bin of{{=}}/dev/sda}}

<!--T:16-->
Mark the boot partition as active. A <code>*</code> will appear in the "Boot" column:

<!--T:17-->
{{RootCmd|fdisk /dev/sda|output=<pre>
Command (m for help): a
Partition number (1-4): 1
Command (m for help): p
 ...
   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048      133119       65536   83  Linux
/dev/sda2          133120     4327423     2097152   82  Linux swap / Solaris
/dev/sda3         4327424  1953525167   974598872   83  Linux
  
Command (m for help): w
</pre>}}

==== GPT setup ==== <!--T:18-->

<!--T:19-->
{{Note|These instructions are for GPT partition layouts. For MBR (msdos), read the section for [[#MBR_(msdos)_setup|MBR (msdos)]].}}

<!--T:20-->
First, install the boot sector provided by Syslinux. Use special care with this command; if <code>count=1</code> is not given it will overwrite the entire disk rather than just the first 440 bytes:

<!--T:21-->
{{RootCmd|dd bs{{=}}440 conv{{=}}notrunc count{{=}}1 if{{=}}/usr/share/syslinux/gptmbr.bin of{{=}}/dev/sda}}

<!--T:22-->
Next, run <tt>gdisk</tt> and enable legacy BIOS boot partition attributes on the partition where {{Path|/boot/extlinux}} is stored.

=== Boot loader installation === <!--T:23-->

==== EXTLINUX setup ==== <!--T:24-->

<!--T:25-->
Use the <tt>extlinux</tt> command to install the necessary files to {{Path|/boot/extlinux}}

<!--T:26-->
{{RootCmd
|mkdir /boot/extlinux
|extlinux --install /boot/extlinux
|ln -snf . /boot/boot
}}

<!--T:27-->
{{Note|The "boot -> ." symlink is not necessary ''per se'', but for the sake of consistency, it is made so the example configurations are the same for users with {{Path|/boot}} on same partition and those with separate partitions.}}

<!--T:28-->
The Syslinux package contains various modules to enable additional features. Starting with Syslinux version 5, some modules depends on others, so it is a good idea to copy most basic modules regardless of the use case. See [[#Checking_dynamic_links|Checking dynamic links]] to verify whether all dependencies are installed.

<!--T:29-->
{{RootCmd|cd /usr/share/syslinux
|cp menu.c32 memdisk libcom32.c32 libutil.c32 /boot/extlinux}}

==== ISOLINUX setup ==== <!--T:30-->

<!--T:31-->
To install ISOLINUX, start off with a base directory in which all the files that need to reside on the CD or DVD are situated. In the base directory, create a subdirectory called {{Path|isolinux}} and copy the {{Path|isolinux.bin}} file from the Syslinux package into the {{Path|isolinux}} folder:

<!--T:33-->
{{RootCmd|mkdir isolinux
|cp /usr/share/syslinux/isolinux.bin isolinux/}}

<!--T:34-->
Create the {{Path|isolinux.cfg}} file according to the instructions mentioned below.

<!--T:35-->
Next, create two more directories {{Path|kernel}} and {{Path|images}} in the base directory:

<!--T:36-->
{{RootCmd|mkdir kernel images}}

<!--T:37-->
Copy the {{Path|memdisk}} binary into the {{Path|kernel}} directory:

<!--T:38-->
{{RootCmd|cp /usr/share/syslinux/memdisk kernel/}}

<!--T:97-->
{{Note|In order to use the mkisofs command the {{Package|app-cdr/cdrtools}} package will need to be installed. This can be obtained by running:
{{Emerge|app-cdr/cdrtools}}
}}

<!--T:39-->
When the configuration has been made, the following <tt>mkisofs</tt> command can be used to create the final ISO image (remember to substitute <code>${BASEDIR}</code> with the same base directory used in the previous commands):

<!--T:40-->
{{RootCmd|mkisofs -o output.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table ${BASEDIR} }}

<!--T:41-->
The file {{Path|boot.cat}} will be automatically created.

==== PXELINUX setup ==== <!--T:42-->

<!--T:43-->
With PXELINUX is possible to netboot using images that are shared through a TFTP server. This article will assume there is a TFTP server installed, and its TFTP root directory is located at {{Path|/var/lib/tftpboot}} With this setup, copy the PXELINUX loader to the TFTP boot directory and create a configuration directory:

<!--T:44-->
{{RootCmd|cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/pxelinux.0
|mkdir /var/lib/tftpboot/pxelinux.cfg}}

<!--T:72-->
{{Note|When copying the newer {{Path|lpxelinux.0}} instead of {{Path|pxelinux.0}}, it is also possible to load the kernel and ramdisk via HTTP and to make use of DNS names in the configuration file.}}

<!--T:45-->
The config directory can be used to store different configurations for the netbooted clients. When a client tries to boot, the MAC address or the IP address is used to determine the appropriate client config file. First it tries to look for the MAC address, followed by a try on the hexadecimal representation of the client IP. After that a character is stripped from the end of this hexadecimal representation until no more characters are left, or until a configuration file is located. If none of the tries match, the ''default'' config file is used. 

<!--T:46-->
The hexadecimal representation of an IP can be found by using the <tt>gethostip</tt> command:

<!--T:47-->
{{Cmd|gethostip -x 192.168.0.50|output=<pre>
C0A80032
</pre>}}

<!--T:48-->
An example config file matching sequence occurs as follows:

<!--T:49-->
{{CodeBox|1=
01-88-99-aa-bb-cc-dd
C0A80032
C0A8003
C0A800
C0A80
C0A8
C0A
C0
C
default
}}

<!--T:50-->
{{Note|For easy maintenance, create configuration files by hostname and symlink to the IP representation. To re-enabled the defaults simply delete or rename the symlink.}}

==== SYSLINUX setup ==== <!--T:51-->

<!--T:52-->
Use the <tt>syslinux</tt> command to install the SYSLINUX bootloader on the (FAT) file system:

<!--T:53-->
{{RootCmd
|syslinux --install /dev/sda1
}}

== Setup on EFI systems == <!--T:74-->

<!--T:75-->
{{Note|EFI is supported since Syslinux 6.00.}}

=== EFI system partition === <!--T:76-->

<!--T:77-->
Create a partition of type <code>EF</code> (MBR) or <code>EF00</code> (GPT) with a FAT32 file system. It is also possible to use an existing EFI system partition if one is present. It is advisable to mount this partition at {{Path|/boot/efi/}}

<!--T:79-->
{{Note|The following assumes that the system is booted in EFI mode, and that the EFI system partition is located at {{Path|/dev/sda1}}}}

=== Boot loader install === <!--T:80-->

<!--T:81-->
In the EFI system partition, create a directory for the Syslinux files. This directory will also contain the configuration files that will be created later.

<!--T:82-->
{{RootCmd|mkdir -p /boot/efi/EFI/syslinux}}

<!--T:83-->
Copy the {{Path|syslinux.efi}} and {{Path|ldlinux.e64}} files along with the other desired .c32 files from {{Path|/usr/share/syslinux/efi64/}} to the Syslinux directory. For example:

<!--T:84-->
{{RootCmd|cd /usr/share/syslinux/efi64
|cp syslinux.efi ldlinux.e64 menu.c32 libcom32.c32 libutil.c32 /boot/efi/EFI/syslinux}}

<!--T:85-->
If the system has not been booted in EFI mode, then the Syslinux files need to be copied to the {{Path|/boot/efi/EFI/Boot}} directory instead and {{Path|syslinux.efi}} needs to be renamed to {{Path|bootx64.efi}}. If this is the case then skip the next section concerning the <tt>efibootmgr</tt> utility.

=== Making Syslinux known to EFI === <!--T:86-->

<!--T:87-->
Ensure that <code>CONFIG_EFI_VARS</code> is enabled in the kernel. If it was built as a module, ensure that it is loaded into memory. This action can be done using the <tt>modprobe</tt> utility. After the modules has been loaded create a new boot entry using <tt>efibootmgr</tt>:

<!--T:89-->
{{RootCmd|modprobe efivars
|efibootmgr -c -l '\EFI\syslinux\syslinux.efi' -L SYSLINUX -p 1}}

<!--T:90-->
<tt>efibootmgr</tt> will automatically adjust the EFI boot order to put the most recently created entry at the top of the list. If that is undesired, change the boot order with the <code>-o</code> option.

{{Note|In order for the <tt>efibootmgr</tt> command to work the {{Package|sys-boot/efibootmgr}} much be emerged. If needed, so do using the following command:
{{Emerge|sys-boot/efibootmgr}}
}}

== Configuration == <!--T:54-->

<!--T:55-->
The configuration file for Syslinux is called {{Path|syslinux.cfg}}. For compatibility with existing installs, the following legacy configuration file names are still supported:
* EXTLINUX: {{Path|extlinux.conf}}
* ISOLINUX: {{Path|isolinux.cfg}}

<!--T:57-->
The configuration ''format'', however, is the same. The configuration file must be present in the directory where Syslinux is installed.

=== Simple configuration === <!--T:58-->

<!--T:59-->
This will provide a simple "{{Path|boot:}}" prompt, similar to the one in Gentoo's Minimal LiveCD:

<!--T:60-->
{{FileBox|filename=syslinux.cfg||1=
DEFAULT gentoo
LABEL gentoo
      LINUX /boot/kernel-3.6.11-gentoo
}}

=== Menu configuration === <!--T:61-->

<!--T:62-->
The following configuration provides a simple text menu example. This is done via the <code>vesamenu</code> module, in some cases where <code>vesa</code> is not compatible, the simpler menu module will work. Copy the VESA menu module into the boot filesystem or EFI system partition. BIOS systems should use the following example:

<!--T:65-->
{{RootCmd|cp /usr/share/syslinux/vesamenu.c32 /boot/extlinux/}}

<!--T:92-->
EFI systems should use:

<!--T:93-->
{{RootCmd|cp /usr/share/syslinux/efi64/vesamenu.c32 /boot/efi/EFI/syslinux/}}

<!--T:66-->
{{FileBox|filename=/boot/extlinux/extlinux.conf||1=
TIMEOUT 30
ONTIMEOUT gentoo
  
UI vesamenu.c32
MENU TITLE Boot
  
LABEL gentoo
      MENU LABEL Gentoo Linux
      LINUX /boot/kernel-3.6.11-gentoo
  
LABEL gentoo-old
      MENU LABEL Gentoo Linux (previous kernel)
      LINUX /boot/kernel-3.5.7-gentoo
}}

<!--T:67-->
{{Note|Avoid using <code>KERNEL</code> for selecting the Linux kernel images, use <code>LINUX</code> instead. If <code>KERNEL</code> is used and the image filename ends with a {{Path|.0}} then extlinux will misinterpret it and try to PXE its ending with a screen full of graphical artifacts and nothing else. See <ref>this section [http://www.syslinux.org/wiki/index.php/SYSLINUX#KERNEL_file "KERNEL file"]</ref> of the SYSLINUX wiki for more information.}}

<!--T:94-->
{{Note|In the configuration file, absolute paths will be relative to the filesystem's root, non-absolute paths will be relative to the Syslinux installation directory.}}

=== Passing kernel parameters === <!--T:68-->

<!--T:69-->
Unless the kernel parameters are hard-coded and the initramfs is built-in into the kernel image, these may need to be passed on to the kernel through the boot loader. To do so, use the <code>APPEND</code> and/or <code>INITRD</code> parameter:

<!--T:70-->
{{FileBox|filename=syslinux.cfg|title=Adding kernel parameters|1=
DEFAULT gentoo
  
LABEL gentoo
      LINUX /boot/kernel-3.6.11-gentoo
      INITRD /boot/initramfs-3.6.11-gentoo
      APPEND root=/dev/sda1
}}

=== Checking dynamic links === <!--T:95-->

Since syslinux-5.00, the {{Path|.c32}} modules use dynamic linking. To verify if the dependencies has been installed enter the Syslinux directory and use the <tt>ldd</tt> command:

<!--T:96-->
{{RootCmd|LD_LIBRARY_PATH{{=}}. ldd *.c32}}

If any {{Path|.c32}} modules are missing be sure to copy them to the directory.

== See also ==

* [[GRUB|GRUB Legacy]]
* [[GRUB2]]

== External resources ==

* [http://git.kernel.org/cgit/boot/syslinux/syslinux.git SYSLINUX git sources.]

</translate>

== References ==
{{reflist}}

[[Category:Bootloaders]]
