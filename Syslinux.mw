<translate>

<!--T:71-->
{{Metadata|abstract=Syslinux is a package that contains a family of bootloaders. The package includes SYSLINUX (for FAT file systems), EXTLINUX (for Linux file systems), PXELINUX (for network PXE boot) and ISOLINUX (for CD/DVDs)}}

<!--T:1-->
{{InfoBox stack
|{{InfoBox homepage|http://www.syslinux.org|header=true}}
|{{InfoBox wikipedia|SYSLINUX}}
|{{InfoBox ohloh}}
}}

<!--T:2-->
'''Syslinux''' is a package that contains a family of [[:Category:Bootloaders|bootloaders]]. The package includes SYSLINUX (FAT filesystem bootloader), EXTLINUX ([[ext4|ext2/3/4]], [[btrfs]] and [[XFS|xfs]] filesystem bootloader), PXELINUX (Network PXE bootloader) and ISOLINUX (ISO-9660 (CDROM) bootloader).

== Installation == <!--T:3-->

<!--T:4-->
The installation of {{Package|sys-boot/syslinux}} will provide the software on the system but not install (activate) the bootloader itself.

<!--T:5-->
{{USEflag
|custom-cflags++no
}}

<!--T:6-->
{{Emerge|syslinux}}

== Setup on BIOS systems == <!--T:7-->

<!--T:8-->
{{Note|These instructions are for BIOS systems. For (U)EFI, read [[#Setup_on_EFI_systems|Setup on EFI systems]].}}

{{Note|Assuming {{Path|/dev/sda1}} is the boot partition. If not: make adjustments!}}

<!--T:9-->
To use EXTLINUX you need to make sure to both install the proper boot sector, and then to install the actual boot loader into the partition. Make sure not to omit steps.

<!--T:10-->
The boot sector setups are not needed for the SYSLINUX, PXELINUX and ISOLINUX installations.

=== Boot sector setup === <!--T:11-->

==== MBR (msdos) setup ==== <!--T:12-->

<!--T:13-->
{{Note|These instructions are for MBR (msdos) partition layout. For GPT, read [[#GPT_setup|GPT setup]].}}

<!--T:14-->
First install the boot sector provided by syslinux. Take due care with this command; if <code>count=1</code> is not given it will overwrite the entire disk rather than just the first 440 bytes:

<!--T:15-->
{{RootCmd|dd bs{{=}}440 conv{{=}}notrunc count{{=}}1 if{{=}}/usr/share/syslinux/mbr.bin of{{=}}/dev/sda}}

<!--T:16-->
Mark the boot partition as active. A <code>*</code> will appear in the "Boot" column:

<!--T:17-->
{{RootCmd|fdisk /dev/sda|output=<pre>
Command (m for help): a
Partition number (1-4): 1
Command (m for help): p
 ...
   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048      133119       65536   83  Linux
/dev/sda2          133120     4327423     2097152   82  Linux swap / Solaris
/dev/sda3         4327424  1953525167   974598872   83  Linux
  
Command (m for help): w
</pre>}}

==== GPT setup ==== <!--T:18-->

<!--T:19-->
{{Note|These instructions are for the GPT partition layout. For MBR (msdos), read [[#MBR_(msdos)_setup|MBR (msdos) setup]].}}

<!--T:20-->
First install the boot sector provided by syslinux. Take due care with this command; if <code>count=1</code> is not given it will overwrite the entire disk rather than just the first 440 bytes:

<!--T:21-->
{{RootCmd|dd bs{{=}}440 conv{{=}}notrunc count{{=}}1 if{{=}}/usr/share/syslinux/gptmbr.bin of{{=}}/dev/sda}}

<!--T:22-->
Next, run <code>gdisk</code> and enable legacy BIOS boot partition attributes on the partition where {{Path|/boot/extlinux}} is stored.

=== Boot Loader Install === <!--T:23-->

==== EXTLINUX setup ==== <!--T:24-->

<!--T:25-->
Use the <code>extlinux</code> command to install the necessary files in {{Path|/boot/extlinux}}:

<!--T:26-->
{{RootCmd
|mkdir /boot/extlinux
|extlinux --install /boot/extlinux
|ln -snf . /boot/boot
}}

<!--T:27-->
{{Note|The "boot -> ." symlink is not necessary ''per se'', but for the sake of consistency, it's made so the example configurations are the same for users with {{Path|/boot}} on same partition and those with separate partitions.}}

<!--T:28-->
The syslinux package contains various modules to enable additional features. Starting with syslinux version 5, some modules depends on others, so it is a good idea to copy most basic modules regardless of the use case. See [[#Checking_dynamic_links|Checking dynamic links]] to verify whether all dependencies are installed.

<!--T:29-->
{{RootCmd|cd /usr/share/syslinux
|cp menu.c32 memdisk libcom32.c32 libutil.c32 /boot/extlinux}}

==== ISOLINUX setup ==== <!--T:30-->

<!--T:31-->
To install ISOLINUX, start off with a base directory in which all the files that need to reside on the CD or DVD are situated.

<!--T:32-->
In that base directory, create a subdirectory called {{Path|isolinux}} and copy the {{Path|isolinux.bin}} file from the syslinux package into it.

<!--T:33-->
{{RootCmd|mkdir isolinux
|cp /usr/share/syslinux/isolinux.bin isolinux/}}

<!--T:34-->
Create the {{Path|isolinux.cfg}} file according to the instructions mentioned below.

<!--T:35-->
Next, create two more directories {{Path|kernel}} and {{Path|images}} in the base directory:

<!--T:36-->
{{RootCmd|mkdir kernel images}}

<!--T:37-->
Copy the {{Path|memdisk}} binary into the {{Path|kernel}} directory:

<!--T:38-->
{{RootCmd|cp /usr/share/syslinux/memdisk kernel/}}

<!--T:39-->
When the configuration has been made, the following <code>mkisofs</code> command can be used to create the final ISO image (substitute <code>${BASEDIR}</code> with the actual base directory):

<!--T:40-->
{{RootCmd|mkisofs -o output.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table ${BASEDIR} }}

<!--T:41-->
The file {{Path|boot.cat}} will be automatically created.

==== PXELINUX setup ==== <!--T:42-->

<!--T:43-->
With PXELINUX is possible to netboot using images that are shared through a TFTP server. This article will assume there is a TFTP server installed, and its TFTP root directory is in {{Path|/var/lib/tftpboot}}. With this setup, copy the PXELINUX loader to the TFTP boot dir and create a config dir.

<!--T:44-->
{{RootCmd|cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/pxelinux.0
|mkdir /var/lib/tftpboot/pxelinux.cfg}}

<!--T:72-->
{{Note|If you copy the newer {{Path|lpxelinux.0}} instead of {{Path|pxelinux.0}}, you can also load the kernel and ramdisk via http and use make use of dns names in config file.}}

<!--T:45-->
The config dir can be used to store different configurations for the netbooted clients. When a client tries to boot, the MAC address or the IP address is used to determine the appropriate client config file. First it tries to look for the MAC address, followed by a try on the hexadecimal representation of the client IP. Next, a character is stripped from the end of this hexadecimal representation until no more characters are left, or until a config file is found. If none of the tries match, the ''default'' config file is used. 

<!--T:46-->
The hexadecimal representation of an IP can be found with the following command:

<!--T:47-->
{{Cmd|gethostip -x 192.168.0.50|output=<pre>
C0A80032
</pre>}}

<!--T:48-->
An example config file matching sequence occurs as follows:

<!--T:49-->
{{Code||<pre>
01-88-99-aa-bb-cc-dd
C0A80032
C0A8003
C0A800
C0A80
C0A8
C0A
C0
C
default
</pre>}}

<!--T:50-->
{{Note|For easy maintenance, create config files by hostname and symlink to the IP representation. If you want a default netboot, just delete or rename the symlink.}}

==== SYSLINUX setup ==== <!--T:51-->

<!--T:52-->
Use the <code>syslinux</code> command to install the SYSLINUX bootloader on the (FAT) file system:

<!--T:53-->
{{RootCmd
|syslinux --install /dev/sda1
}}

== Setup on EFI systems ==

{{Note|EFI is supported since Syslinux 6.00.}}

=== EFI system partition ===

Create a partition of type EF (MBR) or EF00 (GPT) with a FAT32 file system. You can also use an already existing EFI system partition.

It is advisable to mount this partition as {{Path|/boot/efi/}}.

{{Note|The following assumes that your system is booted in EFI mode, and that your EFI system partition is {{Path|/dev/sda1}}.}}

=== Boot Loader Install ===

In the EFI system partition, create a directory for the syslinux files. This directory will also contain the configuration files that you will create later.

{{RootCmd|mkdir -p /boot/efi/EFI/syslinux}}

Copy the files {{Path|syslinux.efi}}, {{Path|ldlinux.e64}} along with the other desired .c32 files from {{Path|/usr/share/syslinux/efi64/}} to your syslinux directory. Example:

{{RootCmd|cd /usr/share/syslinux/efi64
|cp syslinux.efi ldlinux.e64 menu.c32 libcom32.c32 libutil.c32 /boot/efi/EFI/syslinux}}

If you are not booted in EFI mode, then the syslinux files need to be copied to {{Path|/boot/efi/EFI/Boot}} instead, and {{Path|syslinux.efi}} needs to be renamed to {{Path|bootx64.efi}}. You can then skip the next section about <code>efibootmgr</code>.

=== Making Syslinux known to EFI ===

Ensure that <code>CONFIG_EFI_VARS</code> is enabled in your kernel. If built as a module, ensure that it is loaded.

Now create a new boot entry using {{Package|sys-boot/efibootmgr}}:

{{RootCmd|modprobe efivars
|efibootmgr -c -l '\EFI\syslinux\syslinux.efi' -L SYSLINUX -p 1}}

<code>efibootmgr</code> will automatically adjust the EFI boot order to put the most recently created entry to the front. If that is undesired, change the boot order with the <code>-o</code> option.

== Configuration == <!--T:54-->

<!--T:55-->
The configuration file is called {{Path|syslinux.cfg}}.

<!--T:56-->
For compatibility with existing installs, the following legacy configuration file names are still supported:
* EXTLINUX: {{Path|extlinux.conf}}
* ISOLINUX: {{Path|isolinux.cfg}}

<!--T:57-->
The configuration format however is the same. The configuration file must be present in the directory where syslinux is installed.

=== Simple configuration === <!--T:58-->

<!--T:59-->
This will give you a simple "<tt>boot:</tt>" prompt, similar to the one in Gentoo's Minimal LiveCD:

<!--T:60-->
{{File|syslinux.cfg||<pre>
DEFAULT gentoo
  
LABEL gentoo
      LINUX /boot/kernel-3.6.11-gentoo
</pre>}}

=== Menu configuration === <!--T:61-->

<!--T:62-->
The following configuration provides a simple text menu example.

<!--T:63-->
This is done via the vesamenu module, in some cases where vesa is not compatible, the simpler menu module will work.

<!--T:64-->
Copy the VESA menu module into the boot filesystem or EFI system partition.

<!--T:65-->
On BIOS systems:
{{RootCmd|cp /usr/share/syslinux/vesamenu.c32 /boot/extlinux/}}

On EFI systems:
{{RootCmd|cp /usr/share/syslinux/efi64/vesamenu.c32 /boot/efi/EFI/syslinux/}}
<!--T:66-->
{{File|/boot/extlinux/extlinux.conf||<pre>
TIMEOUT 30
ONTIMEOUT gentoo
  
UI vesamenu.c32
MENU TITLE Boot
  
LABEL gentoo
      MENU LABEL Gentoo Linux
      LINUX /boot/kernel-3.6.11-gentoo
  
LABEL gentoo-old
      MENU LABEL Gentoo Linux (previous kernel)
      LINUX /boot/kernel-3.5.7-gentoo
</pre>}}

<!--T:67-->
{{Note|Avoid using 'KERNEL' for selecting the Linux kernel images, use LINUX instead. If you use KERNEL and the image ends with .0 then extlinux will misinterpret it and try to PXE it ending with a screen full of graphical artifacts and nothing else.}}

{{Note|In the configuration file, absolute paths will be relative to the filesystem root, non-absolute paths will be relative to the syslinux installation directory.}}
<!--T:68-->
=== Passing Kernel Parameters ===

<!--T:69-->
Unless the kernel parameters are hard-coded and the initramfs is built-in into the kernel image, these may need to be passed on to the kernel through the boot loader. To do so, use the <code>APPEND</code> and/or <code>INITRD</code> parameter, like this:

<!--T:70-->
{{File|syslinux.cfg|Adding kernel parameters|<pre>
DEFAULT gentoo
  
LABEL gentoo
      LINUX /boot/kernel-3.6.11-gentoo
      INITRD /boot/initramfs-3.6.11-gentoo
      APPEND root=/dev/sda1
</pre>}}

=== Checking dynamic links ===
Since syslinux-5.00, the .c32 modules use dynamic linking. To verify whether you have installed the dependencies, enter the directory where syslinux is installed and use the ldd command:

{{RootCmd|LD_LIBRARY_PATH{{=}}. ldd *.c32}}
If it shows any missing .c32 modules, copy them to the directory, too.
</translate>

[[Category:Bootloaders]]
