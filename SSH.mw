<languages />
<translate>

<!--T:66-->
{{Metadata|abstract=SSH (Secure Shell) is an encrypted terminal program that replaces the classic telnet tool on Unix-like operating systems.}}

<!--T:1-->
{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
|{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) is an encrypted terminal program that replaces the classic [[Wikipedia:telnet|telnet]] tool on Unix-like operating systems.

<!--T:2-->
In addition to remote terminal access provided by the main <tt>ssh</tt> binary, the SSH suite of programs has grown to include other tools such as <tt>scp</tt> ('''s'''ecure '''c'''o'''p'''y) and <tt>sftp</tt> ('''s'''ecure '''f'''ile '''t'''ransfer '''p'''rotocol).

<!--T:3-->
Originally, SSH was not free.  However, today the most popular and de-facto standard implementation of SSH is [http://www.openbsd.org/ OpenBSD]'s OpenSSH, which comes pre-installed on Gentoo.

== Installation == <!--T:24-->

=== Check install === <!--T:68-->

<!--T:69-->
Most deployments of Gentoo Linux will already have OpenSSH installed on the system. This can be checked by running the <tt>ssh</tt> command. If it is installed a usage statement should be printed:

<!--T:70-->
{{Cmd|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

<!--T:71-->
If no usage statement is printed ssh is either corrupted or not installed. It is also possible that a user is simply rebuilding OpenSSH to include a new USE configuration. Whatever the case, proceed on to view possible USE settings.

=== USE flags === <!--T:72-->

<!--T:73-->
{{USEflag|package=net-misc/openssh|desc=The {{Package|net-misc/openssh}} package is capable of the following USE flags:
|bindist
|hpn
|pam
|tcpd
|kerberos
|ldap
|libedit
|selinux
|skey
|static
|X
|X509
}}

=== Emerge OpenSSH === <!--T:74-->

<!--T:75-->
After changing the necessary USE flags, do not forget to install (or rebuild) OpenSSH:

<!--T:76-->
{{emerge|net-misc/openssh|params+=--changed-use}}

== Running OpenSSH == <!--T:4-->

=== Server === <!--T:5-->

<!--T:29-->
Add openssh to the default runlevel if this has not been done already:

<!--T:30-->
{{RootCmd|rc-update add sshd default}}

<!--T:31-->
Start the sshd daemon with:

<!--T:32-->
{{RootCmd|/etc/init.d/sshd start}}

<!--T:33-->
The OpenSSH server can be controlled like any other [[OpenRC]]-managed service:

<!--T:34-->
{{RootCmd|/etc/init.d/sshd start
|/etc/init.d/sshd stop
|/etc/init.d/sshd restart}}

<!--T:35-->
{{Note|Active SSH connections to the server remain unaffected when issuing <tt>/etc/init.d/sshd restart</tt>.}}

== Configuration == <!--T:7-->

=== Create keys === <!--T:36-->

<!--T:37-->
In order to provide a secure shell, cryptographic keys are used to manage the encryption, decryption, and hashing functionalities offered by SSH.

<!--T:38-->
On the first start of the SSH service, system keys will be generated. Keys can be (re)generated using the <tt>ssh-keygen</tt> command.

<!--T:39-->
{{Important|Be sure to substitute <code><SecretPassphrase></code> in the following examples with a personal passphrase.}}

<!--T:40-->
To generate the key used for SSH protocol version 1 (which usually is not enabled anymore; it has been deprecated in favor of protocol version 2) use:

<!--T:41-->
{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "<SecretPassphrase>"}}

<!--T:42-->
To generate the keys for SSH protocol version 2 (DSA and RSA algorithms):

<!--T:43-->
{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N "<SecretPassphrase>"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "<SecretPassphrase>"}}

=== Server configuration === <!--T:44-->

<!--T:45-->
The SSH server is usually configured in the {{Path|/etc/ssh/sshd_config}} file, though it is also possible to perform further configuration in OpenRC's {{Path|/etc/conf.d/sshd}}, including changing the location of the configuration file.  For detailed information on how to configure the server see the ''sshd_config'' [[man page]].

<!--T:9-->
Users should study [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Sven's OpenSSH guide] for a security focused configuration.

=== Client configuration === <!--T:10-->

<!--T:46-->
The <tt>ssh</tt> client and related programs (<tt>scp</tt>, <tt>sftp</tt>, etc.) can be configured using the following files:
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

<!--T:47-->
For more information read the {{Path|ssh_config}} manual:

<!--T:48-->
{{Cmd|man ssh_config}}

=== Passwordless Authentication === <!--T:11-->

<!--T:49-->
Handy for [[git]] server management.

==== Client ==== <!--T:12-->

<!--T:50-->
On the client run the following command:

<!--T:51-->
{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== Server ==== <!--T:13-->

<!--T:52-->
Make sure an account for the user exists on the server, and then place the clients' {{Path|id_rsa.pub}} file into the {{Path|~/.ssh/authorized_keys}} file.

==== Single machine testing ==== <!--T:15-->

<!--T:53-->
The above procedure can be tested out locally:

<!--T:54-->
{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

<!--T:16-->
{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

<!--T:55-->
{{Cmd|ssh localhost}}

== Troubleshooting == <!--T:17-->

<!--T:56-->
There are 3 different levels of debug modes that can help troubleshooting issues. With the <code>-v</code> option SSH prints debugging messages about its progress. This is helpful in debugging connection, authentication, and configuration problems. Multiple <code>-v</code> options increase the verbosity. Maximum verbosity is three levels deep.

<!--T:18-->
{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== Death of long-lived connections === <!--T:21-->

<!--T:57-->
Many internet access devices perform Network Address Translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network. Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, even though the <tt>ssh</tt> client program has not exited.

<!--T:22-->
In order to resolve the issue, OpenSSH clients and servers can be configured to send a 'keep alive', or invisible message aimed at maintaining and confirming the live status of the link.
* To enable keep alive ''for all clients connecting to your local server'', set <code>ClientAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/sshd_config}} file.
* To enable keep alive ''for all servers connected to by your local client'', set <code>ServerAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/ssh_config}} file.

=== X11 forwarding, not forwarding, or tunneling === <!--T:58-->

<!--T:59-->
'''Problem''': After having made the necessary changes to the configuration files for permitting X11 forwarding, it is discovered X applications are executing on the server and are not being forwarded to the client.

<!--T:60-->
'''Solution''': What is likely occurring during SSH login into the remote server or host, the <code>$DISPLAY</code> variable is either being unset or is being set ''after'' the SSH session sets it.

<!--T:61-->
Test for this scenario perform the following after logging in remotely:

<!--T:62-->
{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

<!--T:63-->
The output should be something similar to <code>localhost:10.0</code> or <code>localhost2.local:10.0</code> using server side <code>X11UseLocalhost no</code> setting. If the usual <code>:0.0</code> is not displayed, check to make sure the <code>$DISPLAY</code> variable within {{Path|~/.bash_profile}} is not being unset or re-initializing. If it is, remove or comment out any custom initialization of <code>$DISPLAY</code> to prevent the code in {{Path|~/.bash_profile}} from executing during a SSH login:

<!--T:64-->
{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

<!--T:77-->
{{Note|Be sure to substitute "larry" in the command above with the proper username.}}

<!--T:65-->
A trick that works to complete this task would be to define an alias within the users' {{Path|~/.bashrc}} file.

== Intrusion prevention == <!--T:67-->
SSH is a commonly attacked service. Tools such as [[sshguard]] and [[fail2ban]] monitor logs and black list remote users who have repeatedly attempted, yet failed to login. Utilized them as needed to secure a frequently attacked system.

== See also == <!--T:23-->
* [[Keychain|Gentoo Linux Keychain Guide]]
* [[autossh]] - Detects when SSH connections drop and auto-reconnects.

== External resources == <!--T:78-->
* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo documentation, have a look at all 3 parts.

</translate>

[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
