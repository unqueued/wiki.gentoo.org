<languages />
<translate>

<!--T:1-->
{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) is an encrypted terminal program that replaces the classic [[Wikipedia:telnet|telnet]] tool on Unix-like operating systems.

<!--T:2-->
In addition to remote terminal access provided by the main '''ssh''' binary, the SSH suite of programs has grown to include other tools such as '''scp''' (in very common use) and '''sftp''' (less common).

<!--T:3-->
Originally, SSH was not free.  However, today the most popular and de-facto standard version of SSH is [http://www.openbsd.org/ OpenBSD]'s OpenSSH, which comes pre-installed on Gentoo.

== Installation ==
Install {{Package|net-misc/openssh}}:
{{USEflag|package=net-misc/openssh
|bindist
|hpn
|pam
|tcpd
|kerberos
|ldap
|libedit
|selinux
|skey
|static
|X
|X509
}}

{{emerge|net-misc/openssh}}

== Running OpenSSH == <!--T:4-->

=== Server === <!--T:5-->
Add openssh to the default runlevel
{{RootCmd|rc-upadate add sshd default}}

Start sshd daemon with:
{{RootCmd|/etc/init.d/sshd start}}

The OpenSSH server can be controlled like any other [[OpenRC]]-managed service, with 
* <code>/etc/init.d/sshd start</code>
* <code>/etc/init.d/sshd stop</code>
* <code>/etc/init.d/sshd restart</code>

<!--T:6-->
{{Note|Active SSH connections to the server remain unaffected when issuing '''/etc/init.d/sshd restart'''}}

== Configuration == <!--T:7-->

=== Create Keys === <!--T:8-->

The following commands will generate new keys:

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N ""}}
{{RootCmd|/usr/bin/ssh-keygen -d -f /etc/ssh/ssh_host_dsa_key -N ""}}
{{RootCmd|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""}}

where -N "" is the passphrase. With "" it's empty. If you require one, put your phrase into it.

=== Server configuration === <!--T:8-->
The SSH server is usually configured in the {{Path|/etc/ssh/sshd_config}} file, though it is also possible to perform further configuration in OpenRC's {{Path|/etc/conf.d/sshd}}, including changing the location of the former.  For detailed information on how to configure the server see the ''sshd_config'' [[man page]].

<!--T:9-->
You should also study this [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html guide] for a security focused configuration.

=== Client configuration === <!--T:10-->
The '''ssh''' client and related programs ('''scp''', '''sftp''', etc.) are configured in the {{Path|/etc/ssh/ssh_config}} file.  

For more information on how to configure these programs read the <code>ssh_config</code>manual:
{{Cmd|ssh_config}}

=== Passwordless Authentication === <!--T:11-->
Handy for [[git]] server management

==== Client ==== <!--T:12-->
On the client run
{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}
Follow further instructions. 

After successful key generation move the generated <code>~/.ssh/id_rsa.pub</code> key to the target server home directory <code>~/.ssh/authorized_keys</code>

==== Server ==== <!--T:13-->
useradd a user

<!--T:14-->
then place clients id_rsa.pub file into the new users <code>~/.ssh/authorized_keys</code>

==== Single Machine Testing ==== <!--T:15-->
{{Cmd|ssh-keygen -t rsa}}
enter 5 times

<!--T:16-->
{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}
{{Cmd|ssh localhost}}

== Troubleshooting == <!--T:17-->
There are 3 different levels of debug modes.  ''-v'' Causes ssh to print debugging messages about its progress.  This is helpful in debugging connection, authentication, and configuration problems.  Multiple -v options increase the verbosity.  The maximum is 3.

<!--T:18-->
debug1 mode:
{{Cmd|ssh example.org -v}}

<!--T:19-->
debug2 mode:
{{Cmd|ssh example.org -vv}}

<!--T:20-->
debug3 mode:
{{Cmd|ssh example.org -vvv}}

=== Death of Long-lived Connections === <!--T:21-->
Many internet access devices perform network address translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network.  Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, though the '''ssh''' client program has not exited.

<!--T:22-->
In order to resolve the issue, OpenSSH clients and servers can be configured to send a 'keep alive', or invisible message aimed at maintaining and confirming the live status of the link.
* To enable keep alive '''for all clients connecting to your local server''', set ''ClientAliveInterval 30'' (or some other value, in seconds) within the {{Path|/etc/ssh/sshd_config}} file.
* To enable keep alive '''for all servers connected to by your local client''', set ''ServerAliveInterval 30'' (or some other value, in seconds) within the {{Path|/etc/ssh/ssh_config}} file.

=== X11 Forwarding Not Forwarding or Tunneling! ===
<b>Problem</b>: After you have made the necessary changes to the configuration files for permitting X11 Forwarding, you find X applications are executing on the server and are not being forwarded to the client.

<b>Solution</b>: What is likely occurring during SSH login into the remote server or host, the $DISPLAY variable is either being unset or is being set after the SSH session sets it.  Test for this scenario by doing "echo $DISPLAY" within the remote shell and you should get something similar to "localhost:10.0" or "localhost2.local:10.0" using server side "X11UseLocalhost no" setting.  If you're getting the usual ":0.0", check to make sure you are not unsetting or initializing the $DISPLAY variable within $HOME/.bash_profile.  And if so, remove or comment your custom initialization of $DISPLAY or prevent bash_profile from executing during SSH login using "ssh -t me@localhost2 bash --noprofile".  (Can alias this within bashrc.)

== See also == <!--T:23-->
* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo documentation, have a look at all 3 parts.
* [http://www.gentoo.org/doc/en/keychain-guide.xml Gentoo Linux Keychain Guide]
* [[autossh]] - Detects when SSH connections drop and auto-reconnects.

</translate>

[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
