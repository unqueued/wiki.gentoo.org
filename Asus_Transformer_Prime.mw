'''Installing Gentoo on the Asus Transformer Prime (TF201)'''

This is an introduction to installing gentoo on the Asus Transformer Prime (TF201).  At the moment, we can get it to boot and launch X, but there are quite a few problems.  Hopefully, this site will invite others to share their own experiences, and maybe even generate some solutions to these problems.

==== News ====

Created a mailing list:  [https://groups.google.com/group/linux-tf201 linux-tf201].  Please join!  Discussion is not limited to just Gentoo.

==== Installation instructions ====

The basic steps are as follows:

===== Preliminaries =====

This guide requires the Jelly Bean bootloader from ASUS, and will assume you already have it installed. This guide is a work in progress: check back often for updates! (Check the history.) 

{{Warning|We are not responsible for any damage done to your TFP!}}

===== Create a chroot =====

The first thing you'll want to do is generate a gentoo "rootFS".  You can either do this by using a [http://www.gentoo.org/proj/en/base/embedded/handbook/ cross-compiler] on another computer or on the TFP within
a chroot environment.  This guide assumes that you are doing the latter.  It further assumes that you will be installing the rootFS on the microSD card (mmcblk1p1) which you have mounted on the TFP in the directory /sdcard/gentoo.

Follow the standard Gentoo Installation Guide. You should use the [http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv7a_hardfp/ armv7a-hardfp] stage3.

{{RootCmd
|cd /sdcard
|wget http://distfiles.gentoo.org/releases/arm/autobuilds/current-stage3-armv7a_hardfp/stage3-armv7a_hardfp-<date>.tar.bz2
|mkdir gentoo
|sudo mount -t ext4 /dev/block/mmcblk1p1 /sdcard/gentoo
|cd loop/
|tar -xvjf ../stage3-armv7a_hardfp-<date>.tar.bz2
|cd ..
|sudo umount gentoo/
}}

Changeroot to gentoo on the microSD card. You will also need to establish {{Path|/etc/resolv.conf}} by hand, by adding "nameserver x.x.x.x" to use it inside the chroot.  You can get the  in Android by running getprop. I found that mounting {{Path|/dev/pts}} to {{Path|/sdcard/gentoo/dev/pts}} before you chroot allows tmux to work.

{{RootCmd
|mount -t ext4 /dev/block/mmcblk1p1 /sdcard/gentoo
|busybox mount -o bind /dev /gentoo/dev
|busybox mount -o bind /dev/pts /gentoo/dev/pts
|busybox mount -o bind /sys /gentoo/sys
|busybox mount -t proc /proc /gentoo/proc
|sysctl -w net.ipv4.ip_forward=1
|echo "nameserver 8.8.8.8" > /gentoo/etc/resolv.conf  # google DNS-Server for simplicity
|echo "nameserver 8.8.4.4" >> /gentoo/etc/resolv.conf # google DNS-Server for simplicity
|echo "127.0.0.1 localhost" > /gentoo/etc/hosts
|chroot gentoo/ /bin/su
|source /etc/profile 
}}

Download and extract [https://github.com/tux-mind/tf201-dev/blob/master/v3/root_patch.tar.gz root_patch.tar.gz] inside your chroot. This will install some configuration files and the kernel modules and the (binary) firmware.

If you don't trust us, then run:
{{RootCmd|emerge linux-firmware}}
Or just:
{{RootCmd|mkdir /lib/firmware}}

{{RootCmd|mkdir /system && ln -s /lib /system/vendor && ln -s /lib/firmware /system/etc}}

Outside chroot:
{{RootCmd|cp -R /system/vendor/firmware/* /system/etc/*.txt /sdcard/gentoo/lib/firmware}}

TODO: Not all of these files are necessary.  We should weed out the ones that aren't.  AFAIK, just the bcm4329 firmware is required.  See make menuconfig for more information.

Compile your own kernel (see below) to populate {{Path|/lib/modules}}.

Comment all serial consoles and ttyX where X > 1 in your {{Path|/etc/inittab}} and in {{Path|/etc/syslog-ng/syslog-ng.conf}}, if you use syslog-ng 

{{FileBox|filename=/etc/inittab|lang=bash|1=
# ------ 8< --
# TERMINALS
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
#c2:2345:respawn:/sbin/agetty 38400 tty2 linux
#c3:2345:respawn:/sbin/agetty 38400 tty3 linux
#c4:2345:respawn:/sbin/agetty 38400 tty4 linux
#c5:2345:respawn:/sbin/agetty 38400 tty5 linux
#c6:2345:respawn:/sbin/agetty 38400 tty6 linux

# SERIAL CONSOLES
#s0:12345:respawn:/sbin/agetty -L 9600 ttyS0 vt100
#s1:12345:respawn:/sbin/agetty -L 9600 ttyS1 vt100
# ------ >8 --
}}

Add to {{Path|/etc/conf.d/modules}}:

{{FileBox|filename=/etc/conf.d/modules|lang=bash|1=
modules="bcm4329"
module_bcm4329_args="iface_name=wlan0"
}}

You can either add -userfetch to {{Path|make.conf}} FEATURES (to fix an emerge error about the user being unable to fetch packages) or add the portage user to the 3003 group.  See [https://github.com/keesj/gomo/wiki/AndroidSecurityUserAndGroups AndroidSecurityUserAndGroups]. See also CONFIG_ANDROID_PARANOID_NETWORK=y.

{{RootCmd
|groupadd -g 3003 inet
|usermod -aG inet portage
}}

You must install {{Package|wpa_supplicant}}, {{Package|dhcpcd}}, and {{Package|sshd}} and add them to the default run-level. It would be easiest to disable qt4 USE flag with respect to wpa_supplicant (for now).

{{RootCmd
|emerge wpa_supplicant
|emerge dhcpcd
|emerge sshd
|rc-update add sshd default
}}

TODO: Configure {{Path|/etc/wpa_supplicant/wpa_supplicant.conf}}, {{Path|/etc/conf.d/net}}, etc.

Verify if you have the right profile.
{{RootCmd|eselect profile list}}

Configure your timezone:
{{FileBox|filename=/etc/timezone|lang=bash|1=
Europe/Brussels
}}

Enabling US and DE locales with the appropriate character formats
{{FileBox|filename=/etc/locale.gen|lang=bash|1=
en_US ISO-8859-1
en_US.UTF-8 UTF-8
de_DE ISO-8859-1
de_DE@euro ISO-8859-15
de_DE.UTF-8 UTF-8
}}
Generare the locales.
{{RootCmd|locale-gen}}

Print the locales which were generated.
{{RootCmd|eselect locale list|output=<pre>
Available targets for the LANG variable:
  [1] C
  [2] POSIX
  [3] en_US
  [4] en_US.iso88591
  [5] en_US.utf8
  [6] de_DE
  [7] de_DE.iso88591
  [8] de_DE.iso885915
  [9] de_DE.utf8
  [ ] (free form)</pre>
}}

Selest your locales.
{{RootCmd|eselect locale set 9}}

Now reload the environment:
{{RootCmd|env-update && source /etc/profile}}

Adjust the {{Path|/etc/fstab}}

{{FileBox|filename=/etc/fstab|lang=bash|1=
# <fs>                  <mountpoint>    <type>          <opts>          <dump/pass>
# NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
#/dev/BOOT               /boot           ext2            noauto,noatime  1 2
/dev/mmcblk1p1          /               ext4            noatime         0 1
#/dev/SWAP               none            swap            sw              0 0
#/dev/cdrom              /mnt/cdrom      auto            noauto,ro       0 0
#/dev/fd0                /mnt/floppy     auto            noauto          0 0
}}
See the Tips-Section at the end and create a 2G swap partition.

There are some sysloggers like sysklogd, syslog-ng, metalog, etc. Here is the example how to install syslog-ng:
{{RootCmd| emerge syslog-ng
|rc-update add syslog-ng default
}}
You need to uncomment the ttyX > tty1. For me it was quickfix to uncomment these lines complete so you will not get any syslogs. If you use /dev/tty1 you will get syslog on tty1, which could be annoying.
{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|lang=bash|1=
# ------ 8< --
# By default messages are logged to tty12...
#destination console_all { file("/dev/tty12"); };
destination console_all { file("/dev/tty1"); };
# ------ >8 --
}}

Exit the chroot environment.

{{RootCmd
|exit
|busybox umount -l /gentoo/proc
|busybox umount -l /gentoo/sys
|busybox umount -l /gentoo/dev/pts
|busybox umount -l /gentoo/dev
|busybox umount -l /gentoo
}}

TIPS

If you get a "sandbox violation" error while emerging, you have to emerge the single package that cause you this as follows (ideally, these should be reported as bug reports to [https://bugs.gentoo.org/ Gentoo Bugzilla]):

{{RootCmd|<nowiki>FEATURES="-sandbox" emerge -1 packagename</nowiki>}}

If you have emerge errors like "/dev/fd/<number> file or directory not found", needs to be done after every chroot:
{{RootCmd
|cd /dev
|ln -s /proc/self/fd
}}

If you have emerge errors because you have no internet connection:
{{RootCmd|chmod 644 /etc/resolv.conf}}

===== Installing the kernel =====

There are at present two ways to install the kernel on the TFP: nvflash or fastboot.  Once you have installed the kernel on the TFP and reboot, your machine should boot into Android (not Linux).  In order to have it boot into Linux, you need to configure the rootchooser.  See the next section.  Instructions on how to regenerate a kernel, blob, and LNX file are given further below.

{{Warning|Keep a boot partition backup! (Can do this from your recovery)}}

====== Fastboot method ======

{{Warning|As usual, Fastboot and the TFP are cranky and so what follows might "brick" your device. Please research the Fastboot utility beforehand.}}

In order to do fastboot, do the following:
* Download the blob file to your computer: [https://github.com/tux-mind/tf201-dev/blob/master/v3/images/fastboot.blob fastboot.blob]
* Check the md5sum of the downloaded file : [https://github.com/tux-mind/tf201-dev/blob/master/v3/images/md5sums md5sums]
* Put the TFP in 'fastboot' mode: connect it to the computer via a usb cable, install ClockworkModRecovery app on the TFP, reboot the TFP and hold down VOLUMEDOWN upon reboot until some text shows up about going into recovery.  Release VOLUMEDOWN and wait, then select the USB ICON (VOLUMEDOWN to move, VOLUMEUP to select).  This is all standard, and documented elsewhere.
* Flash the blob to your TFP: 
{{Cmd|fastboot -i 0x0b05 flash boot fastboot.blob}}
* NB: 'flashboot devices' will claim there is no device.  But it is there.

====== Fastboot method on device ======

In order to do fastboot directly from the TFP, do the following:
* Download the blob file to your computer: [https://github.com/tux-mind/tf201-dev/blob/master/v3/images/fastboot.blob fastboot.blob]
* Check the md5sum of the downloaded file : [https://github.com/tux-mind/tf201-dev/blob/master/v3/images/md5sums md5sums]
* Run:
{{RootCmd|<nowiki>dd if=fastbott.blob of=/dev/mmcblk0p4 # or /dev/block/mmcblk0p4 if you are on android</nowiki>}}
* reboot
* NB: you should see a blue bar after rebooting

====== Nvflash method ======

{{Warning|As usual, Nvflash and the TFP are cranky. It might "brick" your device. Please research Wheelie and Nvflash beforehand.}}

{{Warning|Wheelie is a binary with no open source (yet), and as with any binary you should be worried.}}

In order to do the nvflash method, do the following:
* Download the LNX file: [https://github.com/tux-mind/tf201-dev/blob/master/v2/images/nvflash.LNX nvflash.LNX]
* Put the TFP in nvflash APX mode (reboot + VOLUMEUMP; this will yield a blank screen, but check dmesg to see that it is in APX mode).
* Run wheelie ({{Path|mysecret.blob}} is the blob you created when you installed wheelie):
{{Cmd|wheelie --blob mysecret.blob}}
* Flash the LNX file to your TFP:
{{Cmd|nvflash -r --download 6 nvflash.LNX}}
* Reboot the TFP (this sometimes won't reboot the machine):
{{Cmd|nvflash -r --go}}

===== Configure rootchooser =====

The blob and LNX files we provide in git include a modified initrd.  What we did is overwrite 'init' with [https://github.com/tux-mind/tf201-dev/tree/master/root_chooser root_chooser].  Rootchooser will mount the 8th (/data) partition of your eMMC, read the first line of the root-level file '.root', which will be parsed as "blkdev:root_directory_or_image:init_path init_args" where:
* 'blkdev' is the block device to mount, e.g. {{Path|/dev/mmcblk0p8}}, {{Path|/dev/mmcblk1p1}}, or {{Path|/dev/sda1}}.
* 'root_directory_or_image' is the directory inside the previous device where your installation lives, e.g. {{Path|/gentoo}} or {{Path|/}}. It can also be the path to an ext4 formatted image to use.
* 'init_path' is the init script location in your rootfs, usually {{Path|/sbin/init}}.
* 'init_args' are optional arguments for the init program.
If anything goes wrong, rootchooser will boot into Android.

Hence, if you have gentoo on the microSD card, .root will be:
 /dev/mmcblk1p1:/:/sbin/init
If it is on /data/gentoo, then:
 /dev/mmcblk0p8:/gentoo:/sbin/init
If on the usb stick:
 /dev/sda1:/:/sbin/init
If from a ext FS image file in /data/media:
 /dev/mmcblk0p8:/media/ubuntu.img:/:/sbin/init

If you would like to test a configuration, or boot into another system once the .root.tmp file may be used instead.
It follows the same syntax as .root, and will be removed upon the next reboot.

{{Note|If the first character is a '#' rootchooser boot into android, ignoring the file's content.}}

Once you have created this file, reboot and it should boot into Linux.  However, unless you have configured your Gentoo to automatically start Xorg, you will see nothing but the ASUS logo.  In order to verify that it worked, either ssh in or reboot back into Android and check {{Path|/sdcard/gentoo/var/log/messages}}.  You can debug problems by checking root_chooser.log which is generated in the root (/) of the Android filesystem.

===== Generate a test.blob / modify initrd / compile the kernel =====

The are not steps, but pointers.

Unpack the blob (test.blob in git) to generate a .LNX file:
{{Cmd|blobunpack test.blob}}

Extract the zImage and initrd from the .LNX file:
{{Cmd|abootimg -x test.LNX}}

Extract the initrd:
{{Cmd|<nowiki>mkdir tmp && cd tmp && gunzip < ../initrd.img | cpio -i --make-directories</nowiki>}}

Regenerate the initrd (from tmp):
{{Cmd|find . | cpio --create --format='newc' > ../initrd.img && gzip ../initrd.img}}

{{Note|Don't forget to gcc -o root_chooser4.c init and cp that over to initrd as your init file.}}

Regenerate the zImage (kernel): you will want to apply the JB15.patch in our git kernel/ directory, fixing many problems. The kernel we used was the one from ASUS: {{Path|kernel_v10_4_2_15.zip}}.  The patch also applies our {{Path|.config}} file.

Regenerate the .LNX file:
{{Cmd|abootimg --create test.LNX -r initrd.img -k zImage}}

Reblob pack: Use blobpack and when done add 28 bytes to the front of the file (see the fastboot method section above).

==== Configuration ====


===== Keyboard =====

It is possible to change the keyboard layout to be similar to a normal desktop's. If you are using at least the [https://github.com/tux-mind/tf201-dev/tree/master/v3/images v3 kernel] you're able to modify the kernel keyboard layout using setkeycodes. Give a look to the [https://github.com/tux-mind/tf201-dev/blob/master/scripts/00-setkeycodes.start /etc/local.d/00-setkeycodes.start] script installed from the root_patch. Otherwise you have to change the way Xorg translate keycodes throught xmodmap (it's slower, do it only if you have a kernel version minor than the v3).

{{Emerge|xmodmap}}

Create a config file:
{{Cmd|xmodmap -pke > ~/.Xmodmap}}

Edit the key bindings.
{{FileBox|filename=~/.Xmodmap|lang=ini|1=
# For example to change home to windows key (Super). Change
keycode 180 = XF86HomePage NoSymbol XF86HomePage
# to
keycode 180 = Super_L NoSymbol Super_L
}}

{{Note|You can use xev to get the keycode and name of a button press.}}

Add the following to {{Path|~/.xinitrc}} to automatically apply this configuration

{{Cmd|xmodmap ~/.Xmodmap}}

===== Graphics / Video / Xorg =====

The tegra xorg driver (from L4T RC16.2) works! Be sure to use at least the v2 images.

Install X11:
{{Emerge|xorg-x11}}

Download the latest Cardu driver package from Nvidia (https://developer.nvidia.com/linux-tegra).

Extract the package and copy {{Path|config.tbz2}} and {{Path|nvidia_drivers.tgz}} from {{Path|Linux_for_Tegra/nv_tegra/}} to the device.

Extract (using --backup!) the two tars to {{Path|/}}.

{{Note|The two files {{Path|libjpeg.so}} and {{Path|libEGL.so.1}} are overwritten (TODO: test the conflicts))}}

Remove {{Path|/etc/wpa_supplicant.conf}} (unnecessary; and in the wrong place).

{{Cmd|cd /usr/lib/xorg/modules/drivers; ln -s tegra_drv.abi13.so tegra_drv.so}}

Place the contents {{Path|/etc/init/nv.conf}} in an local.d/mystart.start (I'm not sure what these do, but they cause cpufreq-set to not work and give us wonderful new messages in messages).

{{Cmd
|# the ttyS0.conf file has no effect
|rm -rf /etc/init
}}

Add "vt01" to the end of the command line in {{Path|/etc/X11/xinit/xserverrc}} (see FAQ below for details).

Run "startx". If no window/desktop manager is configured but everything is working you'll get a usual X output log and then dumped back at the command prompt; if you have configured a window/desktop manager (e.g. "echo startxfce4 > ~/.xinitrc") it should start; if the system is misconfigured a hang followed by reboot is possible.

Recently (December 2012 / January 2013), Stephen Warren and Thierry Reding have been working on getting an open tegra implementation in the kernel and also an xorg driver associated with that.  Purportedly, this will be in the 3.8 kernel.  We'll be keeping an eye on this over the next few weeks!  If anyone has given it a go, drop me a line!  Thierry's git is: https://gitorious.org/thierryreding/xf86-video-opentegra

===== Atmel Maxtouch touchscreen =====

I'll be busy over the next few weeks, so here's a status quaestionis:

The nvidia tegra drivers (Linux For Tegra RC16.2, documented on the wiki) seem to work.  There will be conflicts with two files, and it would be nice to package things in an ebuild.

As a result, <tt>xrandr -o left/right/normal/inverted</tt> work!

But xinput set-prop 8 "Evdev Axis Inversion" 1, 1 && xinput set-prop "Evdev Axes Swap" 1 don't (i.e. I can't get the input to switch its coordiantes when I rotate the screen).

{{Note|Fiddling with xinput set-prop 8 "Coordinate Transformation Matrix" does change the input coordinates, but it is strange. I fiddled with this for a while.}}

The problem must be with the Atmel-Maxtouch code. I did some digging around and comparison to other atmel_maxtouch.c files located in:

* https://github.com/EnJens/kernel_tf201_stock: this seems to have an older version, although Rayman doesn't document where he patched it from.
* https://github.com/AndroidRoot/android_kernel_asus_tf201/tree/10.4.2.17-mr1: Rayman recommended this as the latest and greatest, and it has the latest Asus kernel_V10_4_2_17.zip (We should probably upgrade at some point!), but the files in question related to atmel_maxtouch are the same as Asus 10.4.2.15 (our version).
* https://github.com/atmel-maxtouch/linux/tree/maxtouch-v3.0/drivers/input/touchscreen: this looks promising. CFR http://forum.xda-developers.com/showthread.php?t=1496246

And that's where I am at.  So if you ever get around to thinking about this problem -- and solve it or have more hints --- let me know.

===== Battery =====

I had no problems with the battery.
If do you have any trouble with this try installing your DesktopEnvironment's power manager.
For those curious, the battery information files are stored in /sys/class/power_supply/ 

===== Touchpad =====

Please install the [https://github.com/tux-mind/tf201-dev/tree/master/v1/images v1 kernel].
Use [https://github.com/tux-mind/tf201-dev/tree/master/touchpad_control touchpad_control] to enable and disable the touchpad.

===== Sound =====

Sound now works, but must be manually configured to use the correct card.
Write the following to {{Path|/etc/asound.conf}}:

{{FileBox|filename=/etc/asound.conf|1=
defaults.ctl.card 1
defaults.pcm.card 1
defaults.timer.card 1
}}

==== Known bugs ====

* Problem: After I launch X and I kill X, the screen is blank. Solution: There is none.  Make sure you have sshd installed.
* Problem: X goes blank and won't go unblank. Solution: Disable X blanking.  <tt>xset -dpms </tt>or <tt>xset s off</tt> or <tt>xset s noblank</tt> (or all three)
* Problem: <tt>xrandr -o left/right/normal/inverted</tt> don't work. Solution: Install the tegra_drv (xorg driver) from RC16.2 of their Linux For Tegra release (see above)
* Problem: With Tegra Drivers (RC16.2) installed, <tt>xinput set-int-prop 8 "Evdev Axes Swap" 8 1</tt> and <tt>xinput set-int-prop 8 "Evdev Axis Inversion" 8 1 0</tt> get registered in, e.g., <tt>xinput list-props</tt> but fail to have an actual effect on the input x/y coordinates. Solution: None yet.  (See above)
* My messages is spammed up with asusdec_kp_key and asusdec_keypad_processing debugging statements in {{Path|/var/log/messages}}. Solution: install at least the [https://github.com/tux-mind/tf201-dev/tree/master/v2/images v2 kernel].
* With Tegra Drivers (RC16.2) installed, I also get some further cpu spam messages. Solution: None yet.
* The touchpad (on the ASUS Keyboard Dock) doesn't work. Solution: See above.
* Sound doesn't work. Solution: See above.
* Compositing doesn't work due to unavailable graphics shared memory. Solution: Upgrade to Tegra Drivers (RC16.2)
* In login screen keyboard has a wrong layout. Solution: add that line 'Option "XkbLayout" "$YOUR_KEYBOARD_LAYOUT"' to {{Path|/usr/share/X11/xorg.conf.d/10-evdev.conf}} in the InputClass with "evdev keyboard catchall" as Identifier.
* Xorg crash with v3 kernel. Solution: append vt01 to {{Path|/etc/X11/xinit/xserverrc}} to make X always use vt1. Other vt's will cause a crash.
* Cannot emerge firefox. Solution: you have to upgrade gcc to 4.6.*, emerge firefox with a swapfile, you'll get an error on install. swapoff. ebuild /usr/portage/www-client/firefox-17.0.3/firefox-....ebuil install qmerge celan

==== Tips ====

Here are some tips:
* if you are using a kernel previous then the v3 one edit {{Path|/etc/inittab}} and comment out the c* and s* entries.
* mount {{Path|/var/tmp}} and {{Path|/tmp}} as tmpfs
* make a 2G swapfile
* /dev/mmcblk0p1,2,8 are ext4; mount these in /mnt as system, cache, data respectively.
* sudo -u yourusername startx in /etc/local.d/mystuff.start for a quick and dirty test
* cpufreq-set -c 0 -g performance|powersave (do this for 0-3) (For some reason, placing {{Path|/etc/init/nv.conf}} contents in local.d/start.start causes cpufreq-set to stop working,s o whatever those things do, they broke this.)

==== Contribute ====
Please feel free to add new problems!  Even better: new solutions!

The current [https://github.com/tux-mind/tf201-dev/blob/master/TODO TODO list] is on github.

Please contact peter period hartman at utoronto period ca a.k.a. wart_ in #gentoo-embedded (and elsewhere)<br />
Or contact massimo period dragano at gmail period com a.k.a tux_mind all over the internet

[[Category:Tablets]]
