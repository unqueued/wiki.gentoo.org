<languages />

Distcc ist ein Programm, das die einzelnen Aufgaben bei der Kompilierung eines Paketes auf verschiedene Hosts in einem Netzwerk verteilt. Es besteht aus einem Server, distccd und einem Client-Programm, distcc. Mit geringem Aufwand ist es möglich ccache, Portage und Automake zu benutzen.

{{InfoBox stack
|{{InfoBox homepage|https://github.com/distcc/distcc|header=true}}
|{{InfoBox wikipedia}}
}}

[https://github.com/distcc/distcc Distcc] ist ein Programm, das die einzelnen Aufgaben bei der Kompilierung eines Paketes auf verschiedene Hosts in einem Netzwerk verteilt. Es besteht aus einem Server, distccd und einem Client-Programm, distcc. Mit geringem Aufwand ist es möglich [http://ccache.samba.org ccache], [[Portage]] und Automake zu benutzen. 

Bevor {{c|distcc}} verwendet wird um eine Gentoo bootstrap Installation durchzuführen, wird empfohlen die Anleitung unter [[#To_bootstrap|Using distcc to bootstrap]] gelesen zu haben. 

== Installation ==

Das Packet {{Package|sys-devel/distcc}} sollte auf allen teilnehemenden Hosts installiert sein, bevor mit der Konfiguration von {{c|distcc}} begonnen wird.

=== Anforderungen an die teilnehmenden Rechner ===

{{c|distcc}} sollte nur verwendet werden, wenn alle beteiligten Rechner die gleiche GCC-Hauptversion benutzen. Zum Beispiel ist das Verwenden von 3.3.x (x ist hier beliebig) problemlos, dagegen sollte 3.3.x nicht mit 3.2.x gemixt werden. 

=== Die USE-Flags ===

{{USEflag|package=sys-devel/distcc}}

=== Emerge ===

Distccd beinhaltet ein graphisches Tool zur Überwachung der Aufgaben die ein Rechner an andere Hosts übertragen hat. Dieses Tool ist verfügbar, wenn das USE Flag <code>gtk</code> gesetzt wird.

Wenn die USE-Flags entsprechend angepasst sind, kann mit der Installation des Paketes {{Package|sys-devel/distcc}} begonnen werden:

{{Emerge|sys-devel/distcc}}

{{Important|An dieser Stelle wird nochmals darauf hingewiesen, erst auf allen teilnehmenden Hosts das Paket
{{Package|sys-devel/distcc}} zu installieren.}}

== Konfiguration ==

=== Server ===

Im Folgenden wird beschrieben, wie vorgegangen werden muss, um {{c|distccd}} automatisch zu starten.

==== OpenRC ====

Es ist sicher zu stellen, dass alle teilnehmenden Hostes in 
{{Path|/etc/conf.d/distccd}} mittels <code>--allow</code> als vertrauenswürdig benannt sind. Um die sicherheit zu erhöhen, kann mit <code>--listen</code> der {{c|distccd}} auf eine bestimmte Netzwerkschnittstelle gebunden werden.
Mehr Informationen zum Thema Sicherheit kann unter [https://cdn.rawgit.com/distcc/distcc/master/doc/web/security.html Distcc security notes] abgerufen werden.

Im folgenden Beispiel wird den Rechnern mit den IP-Adressen <code>192.168.0.4</code> und <code>192.168.0.5</code> die Verbindung zum lokalen {{c|distccd}} server erlaubt:

{{FileBox|filename=/etc/conf.d/distccd|title=Erlaube bestimmten Rechners die Verbindung zu distccd|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important|Es ist wichtig <code>--allow</code> und <code>--listen</code>. Weitere Informationen hierzu in der {{c|distccd}} man page oder in der obigen Sicherheitsrichtlinie.}}

Der {{c|distccd}} daemon ist auf allen beteiligten Rechnern zu starten. 

{{RootCmd
|rc-update add distccd default
|rc-service distccd start
}}

==== systemd ====

Um mehreren Rechnern aus einem bestimmten Adressbereich den Zugriff zu erlauben, so ist dieser Bereich im [[wikipedia:CIDR|CIDR]] Format in {{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} einzutragen. Im folgenden Beispiel wird allen Rechnern mit der IP-Adresse 192.168.1.xxx der Zugriff erlaubt:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=Clients den Zugriff erlauben|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

{{Note| Die Option "ALLOWED_SERVERS" ist irreführend, da nicht der Zugriff eines Servers, sondern Client-Rechnern das Verbinden mit dem lokalen distccd-Daemon erlaubt wird. Der Inhalt dieser Variablen wird dann an den distccd Service als <code>--allow option</code> übergeben. Weitere Informationen unter {{Path|/usr/lib/systemd/system/distccd.service}}.}}

Mit dem folgendem Befehl wird der Dienst neu eingelesen:

{{RootCmd|systemctl daemon-reload}}

Die folgenden Befehle starten {{c|distccd}} während des Boot-Vorganges zu starten bzw. sofort.

{{RootCmd
|systemctl enable distccd
|systemctl start distccd
}}

=== Teilnehmende Rechner auflisten ===

Hierfür wird der Befehl {{c|distcc-config}} verwendet. 

Im Folgenden sind verschiedene Varianten der Host-Definition zu sehen. Mit dem Zeichen <code>/</code> wird ein Limit gesetzt, wie viele Aufgaben diesem Host gleichzeitig übergeben werden können. Die Zeilen 3 und 4 werden in der [https://cdn.rawgit.com/distcc/distcc/master/doc/web/man/distcc_1.html distcc manual page] näher erläutert.

{{CodeBox|title=Beispiele für Host-Definitionen|1=
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
}}

Es gibt noch weitere Methoden um teilnehmende Hosts anzugeben. Einzelheiten dazu enthält die ({{c|man distcc}}) Manpage.

Ohne die Angabe <code>localhost</code> wird {{c|distcc}} keinen Kompiliervorgang auf dem lokalen Rechner anstoßen. Handelt es sich bei dem lokalen Host um einen langsamen Rechner, kann dieser sich als Flaschenhals des Übersetzungsvorganges herausstellen. Die bestmöglichen Einstellungen für das eigene Setup können nur durch Experimentieren mit dem <code>localhost</code> Eintrag herausgefunden werden.

Der folgende Befehl konfiguriert {{c|distcc}} so, dass die Aufgaben auf die Rechner der 1.Zeile im obigen Beispiel verteilt werden:

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

In {{c|distcc}} ist ein "pump" Modus implementiert, dieser wird durch den Befehl {{c|pump}} aufgerufen. Dieser Modus kann zu einer beträchtlichen Einsparung an Rechenzeit führen, wenn viele verschiedene Dateien gleichzeitg übersetzt werden müssen. Es werden übersetzte Header-Dateien auf dem Server zwischengespeichert, wadurch sich bei wiederholten Upload Zeitersparnisse ergeben.

Um für einen Host den pump-Modus zu aktivieren, werden die Flags <code>,cpp,lzo</code> an dessen Definition angehängt. Der Pump-Modus benötigt <code>cpp</code> ''und'' <code>lzo</code>, ungeachtet ob es sich bei den zu übersetzenden Dateien um C oder C++-Quelltext handelt.

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1,cpp,lzo 192.168.0.2,cpp,lzo 192.168.0.3,cpp,lzo"}}

== Benutzungshinweise ==

=== für Portage ===

[[Portage]] für die Benutzung mit {{c|distcc}} einzurichten, ist einfach. Es muss nur die <code>FEATURE</code> Option mit den gewünschten Modi in make.conf definiert werden. Weiterhin ist die <code>MAKE</code> Variable an die gewünschte Anzahl anzupassen.

Die <var>MAKEOPTS</var> und <var>FEATURES</var> ist wie unten gezeigt zu setzen:

Es wird folgende Strategie empfohlen:
* <code>N</code> ist auf die Gesamtanzahl +1 (lokal und remote) an Rechnerkernen zu setzen
* <code>M</code> ist auf die Anzahl an lokalen Rechnerkernen zu setzen

Die Benutzung von <code>-lM</code> in der <var>MAKEOPTS</var> Variable, verhindert das Starten zu vieler lokaler Aufgaben, wenn entfernte Rechner nicht erreichbar sind oder die Vorgaben des Ebuild ein Übersetzen auf entfernten Rechner nicht zulassen. Es werden dann keine weiteren Jobs mehr gestartet, wenn die Systemlast auf einen Wert größer als <code>M</code> steigt.

{{FileBox|filename=/etc/portage/make.conf|title=Definition MAKEOPTS and FEATURES|lang=bash|1=
# Für N und M sind die Werte des eigenen Setup einzusetzen
MAKEOPTS="-jN -lM"
FEATURES="distcc distcc-pump"
}}

{{Note|Ist das Flag <code>network-sandbox</code> in der <var>FEATURES</var> Variablen auf dem Client gesetzt, wird die Verteilung der Compilier-Aufgaben über das Netzwerk verhindert, nicht einmal die Loopback-Schnittstelle 127.0.0.1 steht zur Verfügung. Um Aufgaben über das Netzwerk zu verteilen darf diese Variable nicht gesetzt sein oder muss deaktivieret werden (<code>-network-sandbox</code>).}}

{{Note|Distcc’s pump Modus kann die Übersetzungszeit für große Ebuilds spürbar senken.Weitere Informationen sind unter [[#Specifying participating hosts|Specifying participating hosts]] zu finden.}}

Die Werte in der <var>MAKEOPTS</var> Varibalen können bei 2 PC mit einer QuadCore CPU auf denen {{c|distccd}} und der lokale Rechner ist eine DualCore CPU folgendermaßen belegt werden:

{{FileBox|filename=/etc/portage/make.conf|title=MAKEOPTS Beispiel für 2 QuadCore (remote) und einen DualCore (local) PC|lang=bash|1=
# 2 * 4 Kerne remote = 8
# 1 * 2 Kerne lokal  = 2 
# Gesamtanzahl Kerne 10, also N = 2*10+1 und M=2
MAKEOPTS="-j21 -l2"
}}

Wenn die {{Path|make.conf}} bearbeitet wird, ist darauf zu achten, das nicht die <code>-march=native</code> in <var>CFLAGS</var> oder <var>CXXFLAGS</var> verwendet wird.
{{c|distccd}} wird keine Aufgaben an Remote Hosts übertragen, wenn <code>march</code> auf <code>native</code> steht. Der passende <code>-march=</code> Wert kann durch folgenden Befehl herausgefunden werden:

{{Cmd|gcc -v -E -x c -march{{=}}native -mtune{{=}}native - < /dev/null 2>&1 {{!}} grep cc1 {{!}} perl -pe 's/ -mno-\S+//g; s/^.* - //g;'}}

Der [//blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Blog-Eintrag] Inlining <code>-march=native</code> for distcc enthält hierzu Hintergrundinformationen.

=== Mit automake ===

In einigen Fällen ist dies einfacher als das Portage-Setup.
Hierzu ist die Reihenfolge der Suchpfade in der <var>PATH</var> Variablen folgendermaßen zu setzen:

# {{c | ccache}} (wenn verwendet)
# {{Path|/usr/lib/distcc/bin/}}
# {{Path|${PATH} }} (enthält /usr/bin/gcc) 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Die obige Anweisung kann in der {{Path|~/.bashrc}} jedes einzelnen Benutzer hinterlegt werden, so dass die <var>PATH</var> Variable bei jedem Login entsprechend gesetzt wird. Um dieses Verhalten für alle Benutzer zu erreichen, kann diese Anweisung in einer Datei in {{Path|/etc/env.d/}} gespeichert werden.

Der Befehl {{c|make}} sollte nicht ohne zusätzliche Argumente aufgerufen werden, sondern mit dem Zusatz <code>-jN</code>, wie früher in diesem Artikel beschrieben.

=== Verwendung für Bootstrapping ===

Wenn {{c|distcc}} für das [//de.wikipedia.org/wiki/Bootstrapping_(Informatik) Bootstrapping] verwendet werden soll, z.B. um verschiedene Tools vor dem Hauptteil des Systems zu erstellen, sind einige vorbereitende Schritte erforderlich.

==== Schritt 1: Konfiguration von Portage ====

Der neue Rechner ist mit einer Gentoo Linux LiveCD zu starten und den Installations-Anweisungen des Handbuches zu folgen, mit besonderem Augenmerk auf die Informationen  aus der FAQ für [//wiki.gentoo.org/wiki/FAQ/de Bootstrapping]. Danach ist Portage für die Verwendung von {{c|distcc}} zu konfigurieren: 

{{FileBox|filename=/etc/portage/make.conf|title=Konfiguration von Portage zur Verwendung von distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Die <code>PATH</code> Variable ist für die Installation wie folgt zu setzen:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

==== Schritt 2: Installation von distcc ====

Für die Installation von {{Package|sys-devel/distcc}} ist folgendes Kommando zu verwenden: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

==== Schritt 3: Konfiguration von distcc ====

Für das Setup von {{c|distcc}} ist der Befehl {{c|distcc-config --install}} aufzurufen, hierzu sind die <code>host</code> im folgenden Beispiel entsprechend der teilnehmenden Rechner mit ihrer IP-Adresse bzw. Host-Namen anzupassen.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

{{c|Distcc}} ist nun bereit für das Bootstrapping! Nun kann mit den normalen Installationsanweisungen fortgefahren werden. Nachdem {{c|emerge @system}} ausgeführt wurde, ist zwingend {{c|emerge distcc}} erneut durchzuführen um sicherzustellen, dass die notwendigen Abhängigkeiten installiert werden. 

{{Note| Während des Bootstrapping und der Ausführung von {{c|emerge @system}} scheint {{c|distcc}} nicht verwendet zu werden. Dieses Verhalten ist gewollt, da einige grundlegende Pakete nicht gut mit distcc zusammenarbeiten, so das diese absichtlich deaktiviert sind.}}

=== Extras ===

Im Paket {{c|distcc}} sind einige zusätzliche Funktionen und Tools enthalten, die die Arbeit in einer {{c|distcc}} Umgebung unterstützen.

=== Tools zur Überwachung === 

{{c|Distcc}} enthält zwei Überwachungs-Tools. Bei {{c|distccmon-text}} handelt es sich um eine Text basiertes Programm. Wird es das erste Mal aufgerufen, kann sich etwas Verwirrung einstellen, aber es ist sehr einfach zu benutzen. Wird das Programm ohne Parameter aufgerufen, beendet es sich nach einem Durchlauf. Wenn das Programm mit einem Parameter N aufgerufen wird, aktualisiert es die Anzeige der laufenden Aufgaben alle N Sekunden.

{{Cmd|distccmon-text 10}}

Das andere Tool zur Verfolgung des Build-Prozesses {{c|distccmon-gui}} steht nur zur verfügung, wenn das USE-Flag <code>gtk</code> gesetzt ist. Dieses Programm basiert auf GTK+ und läuft in einer X-Window Umgebung. Für Gentoo wurde dieses Programm von {{c|distccmon-gui}} nach {{c|distccmon-gui}} umbenannt, um Verwirrung zu vermeiden.

{{Cmd|distccmon-gui}}

Für die Überwachung von Portage's {{c|distcc}} werden die folgenden Kommandos verwendet:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|Wenn das distcc Verzeichnis an einem anderen Ort liegt, sind die Verzeichnisangaben entsprechend anzupassen.}}

Als Alternative bietet sich an dieses Verzeichnis  <var>DISTCC_DIR</var> dauerhaft beim Login einzulesen:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

Nun ist die Umgebung neu eunzulesen:

{{RootCmd|env-update
|source /etc/profile}}

Das Starten des Programmes geschieht mit der folgenden Anweisung:

{{RootCmd|distccmon-gui}}

=== SSH-verschlüsselte Kommunikation ===

Das {{c|distcc}} Setup für SSH beinhaltet einige Fallstricke. Als Erstes wird ein SSH-Schlüsselpaar benötigt, welches die Authentifizierung ohne Passwortabfrage durchführt. Es sei darauf hingewiesen, das Portage die Progamme als Portage-User übersetzt oder als root wenn <code>FEATURES="userpriv"</code> nicht gesetzt ist. Das Heimat-Verzeichnis des Portage User ist {{Path|/var/tmp/portage/}}, was zur Folge hat, dass die Schlüssel in {{Path|/var/tmp/portage/.ssh/}} gespeichert werden.

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Als Nächstes muss in der SSH Konfigurations-Datei für jeden Host ein Abschnitt angelegt werden:

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Hostkonfiguration|1=
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName
 
Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
}}

Die öffentlichen Schlüssel müssen auf die teilnehmenden Hosts übertragen werden:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub UserName@CompilationNode}}

Weiterhin ist sicherzustellen, das jeder Host in {{Path|known_hosts}} bekannt gegeben ist.

{{RootCmd|ssh-keyscan -t rsa <compilation-node-1> <compilation-node-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Die Zugriffsrechte müssen wie folgt gesetzt werden:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

Jetzt ist der SSH-Teil der Konfiguration erledigt, es folgt noch der {{c|distcc}} Teil. Für das Beispiel mit den Hosts  <code>test1</code> und <code>test2</code> ist folgender Aufruf notwendig:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Wichtig ist der Aufruf mit dem <code>@</code> (at-Zeichen), welches anzeigt, dass es sich um eine SSH gestützte Kommunikation handelt.

Zuletzt muss die make.conf angepasst werden, damit {{c|ssh}} das passende Programm benutzt.

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
DISTCC_SSH="ssh"
}}

Es ist nicht notwendig, das {{Path|distccd}} Init-Skript auf den teilnehmenden Hosts aufzurufen, wenn {{c|distcc}} via SSH kommuniziert.

=== Testen ===

Um {{c|distcc}} zu testen, kann ein einfaches "Hallo distcc" Programm geschrieben werden und die Übersetzung im ausführlichen Modus gestartet werden um die fehlerfreie Kommunikation zu überprüfen.

{{FileBox|filename=main.c|lang=c|1=
#include <stdio.h>
 
int main() {
    printf("Hallo distcc!\n");
    return 0;
}
}}

Nun ist der ausführliche Modus einzuschalten, der Quelltext zu übersetzen und schlussendlich ein ausführbares Programm mit dem Linker zu erzeugen.

{{Cmd
|export DISTCC_VERBOSE{{=}}1
|distcc gcc -c main.c -o main.o # oder 'pump distcc <...>'
|gcc main.o -o main
}}

{{Note|Um den Pump Modus zu verwenden, ist {{c|distcc}} durch {{c|pump distcc}} zu ersetzen.}}

Es sollten eine Menge Ausgaben von {{c|distcc}} über das Auffinden der Konfiguration, Auswahl der teilnehmenden Hosts, das Starten der Übersetzung auf diesen und schlussendlich die Übersetzung von {{Path|main.c}} zu finden sein. Wenn die gewünschten Hosts nicht in der Ausgabe zu finden sind, muss die Konfiguration überprüft werden.

Ein letzter Test stellt sicher, dass das übersetzte Programm  fehlerfrei funktioniert.

{{Cmd|./main|output=<pre>Hallo distcc!</pre>}}

== Fehlersuche ==

<!-- Consider moving this section to a separate subpage if it becomes too large -->
<!-- Sollte dieser Abschnitt zu gross werden, könnte er in einen separaten Abschnitt verschoben werden. -->

Sollte ein Problem bei der Benutzung von {{c|distcc}} auftreten, sind in diesem Abschnitt Lösungsansätze zur Fehlerbehebung zu finden.

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- To be removed when the bug is resolved and the fixed package is stable -->
<!-- Dieses Hinweis entfernen, wenn der Bug behoben ist und das betreffende Paket als stabil eingestuft ist -->

Seit dem 22.Januar 2015 kann Portage nicht das passende {{Path|distccd.log}} File in {{Path|/var/log/}} erzeugen. Dieses Verhalten tritt nur bei Version distcc 3.1-r8 auf. Dieser Fehler wird gerade behoben (siehe {{Bug|477630}}): Es ist möglich diesen Fehler zu umgehen, wenn das Log-File manuell erzeugt wird, mit den passenden Zugriffrechten versehen wird und der distccd Daemon neu gestartet wird.

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

In der Datei {{Path|/etc/conf.d/distccd}} ist nun der neue Pfad der Log-Datei {{Path|/var/log}} einzutragen.

{{FileBox|filename=/etc/conf.d/distccd|title=Anpassung des Pfades|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

Neustart des Distccd Service:

{{RootCmd|/etc/init.d/distccd restart}}

=== Einige Pakete benutzen nicht dictcc ===

Bei der Übersetzung von verschiedenen Paketen kann es vorkommen, das diese nicht verteilt übersetzt werden, sondern nur lokal. Dieses Verhalten tritt auf, wenn das {{Path|Makefile}} keine parallelen Operationen unterstützt oder der Betreuer des Ebuild parallele Operationen aufgrund bekannter Fehler deaktiviert hat. 

Manchmal tritt unerwartet ein Fehler bei einem Paket auf, so das es nicht verteilt übersetzt werden kann. Sollte dies eintreten, kann hier ein [//bugs.gentoo.org Fehlerreport] erstellt werden.

=== Unterschiedliche GCC-Versionen ===

Wenn auf den teilnehmenden Hosts unterschiedliche gcc-Versionen aktiv sind, kann es zu sehr seltsamen Fehlern bei der Übersetzung kommen. Um dies zu vermeiden, sind stets nur gleiche gcc-Versionen zur Übersetzung einzusetzen. 

Die aktuellen Portage Aktualisierungen benutzen <code>${CHOST}-gcc</code> (minus gcc) anstelle <code>gcc</code>. Werden i686 Rechner im Verbund mit anderen Rechner benutzt (i386, i586) treten sehr wahrscheinlich Probleme bei der Übersetzung auf. Abhilfe kann folgende Anweisung schaffen:

{{RootCmd|export CC{{=}}'gcc' CXX{{=}}'c++'}}

Es ist ebenfalls möglich die <var>CC</var> und <var>CXX</var> Variablen in {{Path|/etc/portage/make.conf}} auf die oben genannten Werte zu setzen.

{{Important|Mit diesen Modifikationen wird das Verhalten von Portage beeiflusst, was in der Zukunft zu komischen Resultaten führen kann. Diese Modifikation sollte nur benutzt werden, wenn verschiedene CHOST unvermeidbar sind.}}

{{Note|Den gcc Compiler nur in einem Slot als passende Version installiert zu haben, reicht nicht aus. Portage benutzt {{c|distcc}} als Ersatz für den Compiler auf den die Variable <var>CHOST</var> verweist (z.B <code>x86_64-pc-linux-gnu</code>) und {{c|distcc}} ruft genau diesen Namen auf. Die passende Version von gcc soll als voreingestellter System-Compiler auf allen teilnehmenden Hosts eingestellt sein.}}

=== -march=native ===

Seit der Version 4.3.0 unterstützt der gcc Compiler die <code>-march=native</code> Option, mit der das übersetzte Programm auf die gerade benutzte CPU optimiert wird. Dies schafft ein Problem, da hier Code erzeugt wird, der für unterschiedliche Prozessoren optimiert ist. Als Beispiel sei das Mixen von AMD-Athlon und Intel-Pentium optimierten Code genannt, wenn auf den beteiligten Rechnern jeweils die<code>-march=native</code> Option gesetzt ist.

Daher sollte die folgende Warnung beachtet werden:

{{Warning|Wenn zur Übersetzung {{c|distcc}} benutzt wird, dürfen die Optionen <code>-march{{=}}native</code> bzw. <code>-mtune{{=}}native</code> in den Variablen <var>CFLAGS</var> und <var>CXXFLAGS</var> nicht benutzt werden.}}

Die Optimierungen die auf der jeweiligen CPU durch die <code>-march=native</code> Option eingeschaltet werden, macht der folgende Befehl sichtbar:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

=== Ausführlichere Ausgaben der emerge Logs ===

Durch das Einschalten des verbose-Modus werden mehr Logging Ausgaben angezeigt. Die wird durch Hinzufügen der Option <var>DISTCC_VERBOSE</var> in {{Path|/etc/portage/bashrc}} erreicht:

{{FileBox|title=Einschalten des verbose-Modus|filename=/etc/portage/bashrc|lang=bash|1=
export DISTCC_VERBOSE=1
}}

Die Ausgaben können in {{Path|/var/tmp/portage/$CATEGORY/$PF/temp/build.log}} gefunden werden.

Der erste Aufruf von {{c|distcc}} der in {{Path|build.log}} sichtbar ist, ist nicht notwendigerweise der erste {{c|distcc}} Aufruf während des Build-Prozesses. Zum Beispiel kann ein Build-Server eine einminütige Auszeit bekommen (BackOff), wenn während der Konfiguration (configure ...) für einige Tests ein Compiler benutzt wird ({{c|distcc}} sperrt einen Remote Host für eine Minute, wenn dieser nicht erreichbar ist, unabhängig davon ob die Übersetzung auf der lokalen Maschine fehlschlug oder nicht).

Solche Fehler können durch die Analyse von {{Path|/var/tmp/portage/$CATEGORY/$PF/work/}} gefunden werden. Alternativ kann {{c|make}} händisch im work-Verzeichnis aufgerufen werden.

Eine weitere Option ist <var>DISTCC_SAVE_TEMPS</var>. Wenn diese gesetzt ist, wird die Ausgabe auch der Remote-Rechner im {{Path|/var/tmp/portage/$CATEGORY/$PF/temp/}} Verzeichnis gespeichert.

{{FileBox|title=Speichern der temporären Ausgaben|filename=/etc/portage/bashrc|lang=bash|1=
export DISTCC_SAVE_TEMPS=1
}}

== Siehe auch ==

Der [[Distcc/Cross-Compiling|DistCC Cross-compiling guide]] erläutert, wie Übersetzungen für eine andere Architektur, als die vorhandene, durch {{c|distcc}} durchgeführt werden kann. Es ist z.B. möglich unter Benutzung eines Athlon(i686) Programme für einen K6-2(i586), oder auf einer SPARC-Architektur für einen PowerPC zu übersetzen.

== Weiterführendes Material ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc]
* [https://github.com/distcc/distcc Distcc homepage]

[[Category:Compilation]]
{{Migrated|originalauthors=Lisa Seelye, {{Dev|floppym}}, Erwin, {{Dev|SwifT}}, Lars Weiler, Tiemo Kieft, and {{Dev|nightmorph}}}}
