<languages />

Distcc ist ein Programm, das die einzelnen Aufgaben bei der Kompilierung eines Paketes auf verschiedene Hosts in einem Netzwerk verteilt. Es besteht aus einem Server, distccd und einem Client-Programm, distcc. Mit geringem Aufwand ist es möglich ccache, Portage und Automake zu benutzen.

{{InfoBox stack
|{{InfoBox homepage|https://github.com/distcc/distcc|header=true}}
|{{InfoBox wikipedia}}
}}

[https://github.com/distcc/distcc Distcc] ist ein Programm, das die einzelnen Aufgaben bei der Kompilierung eines Paketes auf verschiedene Hosts in einem Netzwerk verteilt. Es besteht aus einem Server, distccd und einem Client-Programm, distcc. Mit geringem Aufwand ist es möglich [http://ccache.samba.org ccache], [[Portage]] und Automake zu benutzen. 

Bevor {{c|distcc}} verwendet wird um eine Gentoo bootstrap Installation durchzuführen, wird empfohlen die Anleitung unter [[#To_bootstrap|Using distcc to bootstrap]] gelesen zu haben. 

== Installation ==

Das Packet {{Package|sys-devel/distcc}} sollte auf allen teilnehemenden Hosts installiert sein, bevor mit der Konfiguration von {{c|distcc}} begonnen wird.

=== Anforderungen an die teilnehmenden Rechner ===

{{c|distcc}} sollte nur verwendet werden, wenn alle beteiligten Rechner die gleiche GCC-Hauptversion benutzen. Zum Beispiel ist das Verwenden von 3.3.x (x ist hier beliebig) problemlos, dagegen sollte 3.3.x nicht mit 3.2.x gemixt werden. 

=== Die USE-Flags ===

{{USEflag|package=sys-devel/distcc}}

=== Emerge ===

Distccd beinhaltet ein graphisches Tool zur Überwachung der Aufgaben die ein Rechner an andere Hosts übertragen hat. Dieses Tool ist verfügbar, wenn das USE Flag <code>gtk</code> gesetzt wird.

Wenn die USE-Flags entsprechend angepasst sind, kann mit der Installation des Paketes {{Package|sys-devel/distcc}} begonnen werden:

{{Emerge|sys-devel/distcc}}

{{Important|An dieser Stelle wird nochmals darauf hingewiesen, erst auf allen teilnehmenden Hosts das Paket
{{Package|sys-devel/distcc}} zu installieren.}}

== Konfiguration ==

=== Server ===

Im Folgenden wird beschrieben, wie vorgegangen werden muss, um {{c|distccd}} automatisch zu starten.

==== OpenRC ====

Es ist sicher zu stellen, dass alle teilnehmenden Hostes in 
{{Path|/etc/conf.d/distccd}} mittels <code>--allow</code> als vertrauenswürdig benannt sind. Um die sicherheit zu erhöhen, kann mit <code>--listen</code> der {{c|distccd}} auf eine bestimmte Netzwerkschnittstelle gebunden werden.
Mehr Informationen zum Thema Sicherheit kann unter [https://cdn.rawgit.com/distcc/distcc/master/doc/web/security.html Distcc security notes] abgerufen werden.

Im folgenden Beispiel wird den Rechnern mit den IP-Adressen <code>192.168.0.4</code> und <code>192.168.0.5</code> die Verbindung zum lokalen {{c|distccd}} server erlaubt:

{{FileBox|filename=/etc/conf.d/distccd|title=Erlaube bestimmten Rechners die Verbindung zu distccd|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important|Es ist wichtig <code>--allow</code> und <code>--listen</code>. Weitere Informationen hierzu in der {{c|distccd}} man page oder in der obigen Sicherheitsrichtlinie.}}

Der {{c|distccd}} daemon ist auf allen beteiligten Rechnern zu starten. 

{{RootCmd
|rc-update add distccd default
|rc-service distccd start
}}

==== systemd ====

Um mehreren Rechnern aus einem bestimmten Adressbereich den Zugriff zu erlauben, so ist dieser Bereich im [[wikipedia:CIDR|CIDR]] Format in {{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} einzutragen. Im folgenden Beispiel wird allen Rechnern mit der IP-Adresse 192.168.1.xxx der Zugriff erlaubt:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=Clients den Zugriff erlauben|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

{{Note| Die Option "ALLOWED_SERVERS" ist irreführend, da nicht der Zugriff eines Servers, sondern Client-Rechnern das Verbinden mit dem lokalen distccd-Daemon erlaubt wird. Der Inhalt dieser Variablen wird dann an den distccd Service als <code>--allow option</code> übergeben. Weitere Informationen unter {{Path|/usr/lib/systemd/system/distccd.service}}.}}

Mit dem folgendem Befehl wird der Dienst neu eingelesen:

{{RootCmd|systemctl daemon-reload}}

Die folgenden Befehle starten {{c|distccd}} während des Boot-Vorganges zu starten bzw. sofort.

{{RootCmd
|systemctl enable distccd
|systemctl start distccd
}}

=== Teilnehmende Rechner auflisten ===

Hierfür wird der Befehl {{c|distcc-config}} verwendet. 

Im Folgenden sind verschiedene Varianten der Host-Definition zu sehen. Mit dem Zeichen <code>/</code> wird ein Limit gesetzt, wie viele Aufgaben diesem Host gleichzeitig übergeben werden können. Die Zeilen 3 und 4 werden in der [https://cdn.rawgit.com/distcc/distcc/master/doc/web/man/distcc_1.html distcc manual page] näher erläutert.

{{CodeBox|title=Beispiele für Host-Definitionen|1=
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
}}

Es gibt noch weitere Methoden um teilnehmende Hosts anzugeben. Einzelheiten dazu enthält die ({{c|man distcc}}) Manpage.

Ohne die Angabe <code>localhost</code> wird {{c|distcc}} keinen Kompiliervorgang auf dem lokalen Rechner anstoßen. Handelt es sich bei dem lokalen Host um einen langsamen Rechner, kann dieser sich als Flaschenhals des Übersetzungsvorganges herausstellen. Die bestmöglichen Einstellungen für das eigene Setup können nur durch Experimentieren mit dem <code>localhost</code> Eintrag herausgefunden werden.

Der folgende Befehl konfiguriert {{c|distcc}} so, dass die Aufgaben auf die Rechner der 1.Zeile im obigen Beispiel verteilt werden:

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

In {{c|distcc}} ist ein "pump" Modus implementiert, dieser wird durch den Befehl {{c|pump}} aufgerufen. Dieser Modus kann zu einer beträchtlichen Einsparung an Rechenzeit führen, wenn viele verschiedene Dateien gleichzeitg übersetzt werden müssen. Es werden übersetzte Header-Dateien auf dem Server zwischengespeichert, wadurch sich bei wiederholten Upload Zeitersparnisse ergeben.

Um für einen Host den pump-Modus zu aktivieren, werden die Flags <code>,cpp,lzo</code> an dessen Definition angehängt. Der Pump-Modus benötigt <code>cpp</code> ''und'' <code>lzo</code>, ungeachtet ob es sich bei den zu übersetzenden Dateien um C oder C++-Quelltext handelt.

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1,cpp,lzo 192.168.0.2,cpp,lzo 192.168.0.3,cpp,lzo"}}

== Benutzungshinweise ==

=== für Portage ===

[[Portage]] für die Benutzung mit {{c|distcc}} einzurichten, ist einfach. Es muss nur die <code>FEATURE</code> Option mit den gewünschten Modi in make.conf definiert werden. Weiterhin ist die <code>MAKE</code> Variable an die gewünschte Anzahl anzupassen.

Die <var>MAKEOPTS</var> und <var>FEATURES</var> ist wie unten gezeigt zu setzen:

Es wird folgende Strategie empfohlen:
* <code>N</code> ist auf die Gesamtanzahl +1 (lokal und remote) an Rechnerkernen zu setzen
* <code>M</code> ist auf die Anzahl an lokalen Rechnerkernen zu setzen

Die Benutzung von <code>-lM</code> in der <var>MAKEOPTS</var> Variable, verhindert das Starten zu vieler lokaler Aufgaben, wenn entfernte Rechner nicht erreichbar sind oder die Vorgaben des Ebuild ein Übersetzen auf entfernten Rechner nicht zulassen. Es werden dann keine weiteren Jobs mehr gestartet, wenn die Systemlast auf einen Wert größer als <code>M</code> steigt.

{{FileBox|filename=/etc/portage/make.conf|title=Definition MAKEOPTS and FEATURES|lang=bash|1=
# Für N und M sind die Werte des eigenen Setup einzusetzen
MAKEOPTS="-jN -lM"
FEATURES="distcc distcc-pump"
}}

{{Note|Ist das Flag <code>network-sandbox</code> in der <var>FEATURES</var> Variablen auf dem Client gesetzt, wird die Verteilung der Compilier-Aufgaben über das Netzwerk verhindert, nicht einmal die Loopback-Schnittstelle 127.0.0.1 steht zur Verfügung. Um Aufgaben über das Netzwerk zu verteilen darf diese Variable nicht gesetzt sein oder muss deaktivieret werden (<code>-network-sandbox</code>).}}

{{Note|Distcc’s pump Modus kann die Übersetzungszeit für große Ebuilds spürbar senken.Weitere Informationen sind unter [[#Specifying participating hosts|Specifying participating hosts]] zu finden.}}

Die Werte in der <var>MAKEOPTS</var> Varibalen können bei 2 PC mit einer QuadCore CPU auf denen {{c|distccd}} und der lokale Rechner ist eine DualCore CPU folgendermaßen belegt werden:

{{FileBox|filename=/etc/portage/make.conf|title=MAKEOPTS Beispiel für 2 QuadCore (remote) und einen DualCore (local) PC|lang=bash|1=
# 2 * 4 Kerne remote = 8
# 1 * 2 Kerne lokal  = 2 
# Gesamtanzahl Kerne 10, also N = 2*10+1 und M=2
MAKEOPTS="-j21 -l2"
}}

Wenn die {{Path|make.conf}} bearbeitet wird, ist darauf zu achten, das nicht die <code>-march=native</code> in <var>CFLAGS</var> oder <var>CXXFLAGS</var> verwendet wird.
{{c|distccd}} wird keine Aufgaben an Remote Hosts übertragen, wenn <code>march</code> auf <code>native</code> steht. Der passende <code>-march=</code> Wert kann durch folgenden Befehl herausgefunden werden:

{{Cmd|gcc -v -E -x c -march{{=}}native -mtune{{=}}native - < /dev/null 2>&1 {{!}} grep cc1 {{!}} perl -pe 's/ -mno-\S+//g; s/^.* - //g;'}}

Der [//http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Blog-Eintrag] Inlining <code>-march=native</code> for distcc enthält hierzu Hintergrundinformationen.

=== With automake ===

This is, in some cases, easier than the Portage setup. All that is needed is to update the <var>PATH</var> variable to include {{Path|/usr/lib/distcc/bin/}} in front of the directory that contains {{c|gcc}} ({{Path|/usr/bin/}}). However, there is a caveat. If {{c|ccache}} is used, then put the {{c|distcc}} location after the {{c|ccache}} one: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Put this in the user's {{Path|~/.bashrc}} or equivalent file to have the <var>PATH</var> set every time the user logs in, or set it globally through an {{Path|/etc/env.d/}} file.

Instead of calling {{c|make}} alone, add in <code>-jN</code> (where <code>N</code> is an integer). The value of <code>N</code> depends on the network and the types of computers that are used to compile. A heuristic approach to the right value is given earlier in this article.

=== To bootstrap ===

Using {{c|distcc}} to bootstrap (i.e. build a working toolchain before installing the remainder of the system) requires some additional steps to take.

==== Step 1: Configure Portage ====

Boot the new box with a Gentoo Linux LiveCD and follow the [[Handbook:AMD64|installation instructions]], while keeping track of the instructions in the [[FAQ|Gentoo FAQ]] for information about bootstrapping. Then configure Portage to use {{c|distcc}}: 

{{FileBox|filename=/etc/portage/make.conf|title=Configure Portage to use distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Update the <code>PATH</code> variable in the installation session as well:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

==== Step 2: Getting distcc ====

Install {{Package|sys-devel/distcc}}: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

==== Step 3: Setting up distcc ====

Run {{c|distcc-config --install}} to setup distcc; substitute the <code>host#</code> in the example with the IP addresses or hostnames of the participating nodes.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc is now set up to bootstrap! Continue with the proper installation instructions and do ''not'' forget to run {{c|emerge distcc}} after running {{c|emerge @system}}. This is to make sure that all of the necessary dependencies are installed. 

{{Note|During bootstrap and {{c|emerge @system}} {{c|distcc}} may not appear to be used. This is expected as some ebuilds do not work well with distcc, so they intentionally disable it.}}

=== Extras ===

The {{c|distcc}} application has additional features and applications to support working in a {{c|distcc}} environment.

=== Monitoring utilities === 

Distcc ships with two monitoring utilities. The text-based monitoring utility is always built and is called {{c|distccmon-text}}. Running it for the first time can be a bit confusing, but it is really quite easy to use. If the program is run with no parameter it will run just once. However, if it is passed a number it will update every <code>N</code> seconds, where <code>N</code> is the argument that was passed.

{{Cmd|distccmon-text 10}}

The other monitoring utility is only enabled when the <code>gtk</code> USE flag is set. This one is GTK+ based, runs in an X environment, and it is quite lovely. For Gentoo, the GUI monitor has been renamed to {{c|distccmon-gui}} to make it less confusing (it is originally called {{c|distccmon-gnome}}).

{{Cmd|distccmon-gui}}

To monitor Portage's {{c|distcc}} usage:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|If the distcc directory is elsewhere, change the <var>DISTCC_DIR</var> variable accordingly.}}

A trick is to set <var>DISTCC_DIR</var> in environment variables:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

Now update the environment:

{{RootCmd|env-update
|source /etc/profile}}

Finally, start the GUI application:

{{RootCmd|distccmon-gui}}

=== SSH for communication ===

Setting up distcc via SSH includes some pitfalls. First, generate an SSH key pair without password setup. Be aware that portage compiles programs as the Portage user (or as root if <code>FEATURES="userpriv"</code> is not set). The home folder of the Portage user is {{Path|/var/tmp/portage/}}, which means the keys need to be stored in {{Path|/var/tmp/portage/.ssh/}}

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Second, create a section for each host in the SSH configuration file:

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Add per-host sections|1=
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName
 
Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
}}

Send the public key to each compilation node:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub UserName@CompilationNode}}

Also make sure that each host is available in the {{Path|known_hosts}} file:

{{RootCmd|ssh-keyscan -t rsa <compilation-node-1> <compilation-node-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Fix the file ownership as follows:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

To set up the hosts <code>test1</code> and <code>test2</code>, run:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Please note the <code>@</code> (@ sign), which specifies ssh hosts for distcc.

Finally, tell {{c|distcc}} which SSH binary to use:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
DISTCC_SSH="ssh"
}}

It is not necessary to run the {{Path|distccd}} initscript on the hosts when {{c|distcc}} communicates via SSH.

=== Testing ===

To test {{c|distcc}}, write a simple ''Hello distcc'' program and run {{c|distcc}} in verbose mode to see if it communicates properly.

{{FileBox|filename=main.c|lang=c|1=
#include <stdio.h>
 
int main() {
    printf("Hello distcc!\n");
    return 0;
}
}}

Next, turn on verbose mode, compile the program using {{c|distcc}} and link the generated object file into an executable:

{{Cmd
|export DISTCC_VERBOSE{{=}}1
|distcc gcc -c main.c -o main.o # or 'pump distcc <...>'
|gcc main.o -o main
}}

{{Note|Replace {{c|distcc}} command with {{c|pump distcc}} for use pump mode.}}

There should be a bunch of output about {{c|distcc}} finding its configuration, selecting the host to connect to, starting to connect to it, and ultimately compile {{Path|main.c}}. If the output does not list the desired {{c|distcc}} hosts, check the configuration.

Finally, ensure the compiled program works properly. To test each host, enumerate each compile host in the hosts file.

{{Cmd|./main|output=<pre>Hello distcc!</pre>}}

== Troubleshooting ==

<!-- Consider moving this section to a separate subpage if it becomes too large -->

If a problem occurs while using {{c|distcc}}, then this section might help in resolving the problem.

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- To be removed when the bug is resolved and the fixed package is stable -->

As of January 22nd, 2015 emerging fails to create the proper {{Path|distccd.log}} file in {{Path|/var/log/}}. This apparently only effects version 3.1-r8 of distcc. This bug is in the process of being corrected (see {{Bug|477630}}). It is possible to work around this by manually creating the log file, giving it proper ownership, and restarting the distccd daemon:

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

Next update the {{Path|/var/log}} path of the {{c|distccd}} configuration file in {{Path|/etc/conf.d/distccd}} to the {{Path|distcc}} directory created in the step before:

{{FileBox|filename=/etc/conf.d/distccd|title=Updating log path|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

Finally, restart the distccd service:

{{RootCmd|/etc/init.d/distccd restart}}

=== Some packages do not use distcc ===

As various packages are installed, users will notice that some of them aren't being distributed (and aren't being built in parallel). This may happen because the package' {{Path|Makefile}} doesn't support parallel operations, or the maintainer of the ebuild has explicitly disabled parallel operations due to a known problem. 

Sometimes {{c|distcc}} might cause a package to fail to compile. If this happens, please [https://bugs.gentoo.org/ report] it.

=== Mixed GCC versions ===

If the environment hosts different GCC versions, there will likely be very weird problems. The solution is to make certain all hosts have the same GCC version. 

Recent Portage updates have made Portage use <code>${CHOST}-gcc</code> (minus gcc) instead of <code>gcc</code>. This means that if i686 machines are mixed with other types (i386, i586) then the builds will run into troubles. A workaround for this may be to run:

{{RootCmd|export CC{{=}}'gcc' CXX{{=}}'c++'}}

It is also possible to set the <var>CC</var> and <var>CXX</var> variables in {{Path|/etc/portage/make.conf}} to the values list in the command above.

{{Important|Doing this explicitly redefines some behavior of Portage and may have some weird results in the future. Only do this if mixing CHOSTs is unavoidable.}}

{{Note|Having the right version of gcc as a slot on a server isn’t enough. Portage uses {{c|distcc}} as a replacement for the compiler referenced by the <var>CHOST</var> variable (i.e. <code>x86_64-pc-linux-gnu</code>) and {{c|distccd}} invokes it by exactly same name. The right version of gcc should be a default system’s compiler on all involved compilation hosts.}}

=== -march=native ===

Starting with GCC 4.3.0, the compiler supports the <code>-march=native</code> option which turns on CPU auto-detection and optimizations that are worth being enabled on the processor on which GCC is running. This creates a problem when using {{c|distcc}} because it allows the mixing of code optimized for different processors. For example, running {{c|distcc}} with <code>-march=native</code> on a system that has an AMD Athlon processor and doing the same on ''another'' system that has an Intel Pentium processor will mix code compiled on both processors together.

Heed the following warning:

{{Warning|Do '''not''' use <code>-march{{=}}native</code> or <code>-mtune{{=}}native</code> in the <var>CFLAGS</var> or <var>CXXFLAGS</var> variables of {{Path|make.conf}} when compiling with {{c|distcc}}.}}

To know the flags that GCC would enable when called with <code>-march=native</code>, execute the following:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

=== Get more output from emerge logs ===

It is possible to obtain more logging by enabling verbose mode. This is accomplished by adding <var>DISTCC_VERBOSE</var> to {{Path|/etc/portage/bashrc}}:

{{FileBox|title=Enabling verbose logging|filename=/etc/portage/bashrc|lang=bash|1=
export DISTCC_VERBOSE=1
}}

The verbose logging can then be found in {{Path|/var/tmp/portage/$CATEGORY/$PF/temp/build.log}}.

Keep in mind that the first {{c|distcc}} invocation visible in {{Path|build.log}} isn’t necessary the first {{c|distcc}} call during a build process. For example a build server can get a one-minute backoff period during the configuration stage when some checks are performed using a compiler ({{c|distcc}} sets a backoff period when compilation on a remote server failed, it doesn’t matter whether it failed on local machine or not).

Dig into the {{Path|/var/tmp/portage/$CATEGORY/$PF/work/}} directory to investigate such situations. Find other logs, or call {{c|make}} explicitly from within the working directory.

Another interesting variable to use is <var>DISTCC_SAVE_TEMPS</var>. When set, it saves the standard output/error from a remote compiler which, for Portage builds, results in files in the {{Path|/var/tmp/portage/$CATEGORY/$PF/temp/}} directory.

{{FileBox|title=Saving temporary output|filename=/etc/portage/bashrc|lang=bash|1=
export DISTCC_SAVE_TEMPS=1
}}

== See also ==

* The [[Distcc/Cross-Compiling|DistCC Cross-compiling guide]] explains how using one architecture to build programs for another architecture is done through {{c|distcc}}. This can be as simple as using an Athlon (i686) to build a program for a K6-2 (i586), or using a SPARC to build a program for a PowerPC.

== External resources ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc]
* [https://github.com/distcc/distcc Distcc homepage]

[[Category:Compilation]]
{{Migrated|originalauthors=Lisa Seelye, {{Dev|floppym}}, Erwin, {{Dev|SwifT}}, Lars Weiler, Tiemo Kieft, and {{Dev|nightmorph}}}}
