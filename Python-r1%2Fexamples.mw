== Distutils examples ==

=== Basic example ===

{|
!distutils.eclass
!distutils-r1
|-
|
 EAPI=<span style='color:red'>4</span>
 <span style='color:red'>PYTHON_DEPEND='2:2.6 3:3.2'
 SUPPORT_PYTHON_ABIS=1
 RESTRICT_PYTHON_ABIS='2.4 2.5 3.1'</span>
 
 inherit <span style='color:red'>base distutils</span>
 
 # …
 
 RDEPEND="app-portage/flaggie
 	dev-python/lxml"
 
 <span style='color:red'>PYTHON_MODNAME=installmask
 
 src_prepare() {
 	base_src_prepare
 	distutils_src_prepare
 }</span>
|
 EAPI=<span style='color:green'>5</span>
 <span style='color:green'>PYTHON_COMPAT=( python{2_6,2_7,3_2,3_3} )</span>
 
 
 
 inherit <span style='color:green'>distutils-r1</span>
 
 # …
 
 RDEPEND="app-portage/flaggie<span style='color:green'>[${PYTHON_USEDEP}]</span>
 	dev-python/lxml<span style='color:green'>[${PYTHON_USEDEP}]</span>"
 
 
 
 
 
 
 
|}

The PYTHON_DEPEND and RESTRICT_PYTHON_ABIS tandem was replaced with a common PYTHON_COMPAT variable. The variable needs to list explicitly every supported Python implementation. It is used to construct USE flags for the implementations and prepare proper dependency strings. 

The SUPPORT_PYTHON_ABIS variable was replaced with an implication of eclass choice. The python-r1 and distutils-r1 eclasses require the package to support being built for multiple Python implementations. 

The PYTHON_MODNAME variable was removed. The modules are compiled during the install phase, therefore the ebuild is perfectly aware of the module naming. 

A PYTHON_USEDEP variable has been introduced. It holds a USE dependency string requiring the dependency to have at least the same Python implementations enabled as the ebuild in question. Its use is for packages that inherit the python-r1 or distutils-r1 eclasses. 

The default phase functions handle all the common tasks which base.eclass did. Therefore, it is no longer necessary to use it explicitly.
