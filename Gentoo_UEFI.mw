{{InfoBox stack |{{InfoBox wikify|header=true}} }} 

==Introduction==

The UEFI is a new extensible firmware which means it is a way to open up the old style BIOS so that more functionality can be added and used in today's computing going forward into the future.
It can be simply understood in that the old BIOS used to just boot a MBR based bootable device and would just hand off the BIOS function to a specific address on the disk then execute it. With UEFI the MBR has been scrapped and now you have a extension which can hand itself off to just about anything from a shell to GRUB to multiple boot managers.

{{Warning|You must make sure that your hard disk drives use GPT tables only as using the old MBR will render your system Un-Bootable in UEFI mode. Compatibility mode is also a bit hit and miss when using UEFI GPT as boot managers all default to MBR legacy boot if it is available. Microsoft Windows particularly with it's autodetection during installation will almost always choose a non UEFI install in BIOS Compatibility mode. This results in a Hybrid MBR/GPT layout which is not desirable if you want to use UEFI boot.}}

===How it works(simply)===

The UEFI system unlike the old BIOS which handed off to a specific location(address) in the start of the bootable media now executes files in a dedicated partition of type 0xEE(ESP System) partition. The UEFI looks for specific files with extension *.EFI in particular folder structure. Once it find these files it will display them in your mainboards boot order screen. It does not stop their as you can modify this order within your OS as well as within the mainboards firmware or even the UEFI built in shell. 

The most important thing to understand about this new system is that each hard disk drive that will require the firmware to execute a bootloader must have a FAT 0xEE ESP system partition. So if you have Gentoo on one hard disk and another OS on a second hard disk then each disk will need a small FAT partition marked of type 0xEE ESP system partition. If you multi-boot on a single hard disk then only that disk will need is one of these dedicated partitions in FAT to store the *.EFI files that can be executed once the mainboards firmware executes the one of your selection.

===Common Layout in Gentoo===

We commonly layout this partition schema in Gentoo so that we have the Grub /boot partition and then a /boot/efi mount point which is mounted to a small FAT32 partition to hold the *.EFI files that your mainboard UEFI can execute.

{| class="table table-condensed table-striped"
|-
! Device !! Partition !! type !! Description
|-
| /dev/sda1 || /boot || ext4 || Boot partition where your kernel images will be held and Grub bootloader
|-
| /dev/sda2 || /boot/efi || FAT32 || ESP System partition where the EFI files will be held to boot into the bootloader 0xEE
|-
| /dev/sda3 || / || ext4 || root partition for your system
|-
|}

The ESP partition can be anywhere on the disk start, middle, or end although it is best to put it at the start especially if your disk is a spinning disk type. The UEFI firmware will first search for the partition type(flag) and once found it will read the folder structure to find the *.EFI files. This is what you will see inn your mainboard utility screen under the boot section. 

===Multi-Boot===

As mentioned above Multi-Boot is not difficult in a UEFI system. All that is required is that the FAT32 UEFI partition contain the relevant EFI files for that OS to be selected for boot. Microsoft Windows is a problematic OS in that it does not want anything other than it's own EFI files to be populated in this partition and if you want to boot Windows you MUST install windows before you install another OS as it will detect your other OS and give you false misleading errors in the installation process. 

As with the old BIOS MBR Windows never played nice and wanted the installation drive it was to be use on to be the master drive and the primary OS set in the BIOS or it would not install, well it is not any different for UEFI just adds more annoyance and complication as you need install Windows first then Gentoo afterwards.
If you have Windows and Gentoo on two different drives and have HotSwap you can just pull your Gentoo Linux installed drive and after you install Windows you can return your Gentoo Linux drive and all is good.

==File Structure==

There is a standard layout for this and the firmware will always look inside a folder called /EFI. 
Assuming the above layout where the FAT partition is mounted to /boot/efi then the full path to this folder should be /boot/efi/EFI.

{| class="table table-condensed table-striped"
|-
! Path !! Sub-Folder !! Description
|-
| /boot/efi/EFI || - || Folder where firmware looks for the *.EFI files
|-
| /boot/efi/EFI || MICROSFT || This is where Microsoft place their BOOTMGFW.EFI file
|-
| /boot/efi/EFI || GENTOO || This is where Grub places the GRUBX64.EFI or X32 depending on your architecture.
|-
| /boot/efi/EFI || BOOT || This is the fallback folder, if it can't find any vendor specific foolders it will boot from here usually good to add Grubs BOOTX64.EFI here.
|}

You can add other EFI Executable files in these folders so that they can be detected and selected for boot as you wish. 

==Grub==
Grub can Multi-Boot just the same as before when dealing with different kernels, OS's, drives and so on. You just need to remember if you want to boot an OS on a separate hard disk you must have also placed a FAT ESP system partition on that drive as well so that the Grub configuration can find it.

===Windows Grub UEFI===

To add a section in the Grub loader to boot windows is simple as before by adding this to the {{path|/etc/grub.d/40_custom}}

{{FileBox|filename=/etc/grub.d/40_custom|title=Grub 40 custom windows add|lang=text|1=

if [ "${grub_platform}" == "efi" ]; then
	menuentry "Microsoft Windows UEFI-GPT" {
		insmod part_gpt
		insmod fat
		insmod search_fs_uuid
		insmod chain
		search --fs-uuid --set=root $hints_string $fs_uuid
		chainloader /EFI/Microsoft/Boot/bootmgfw.efi
	}
fi

}}

Grub does not care what drive this is locate on. It just searches for any and all partitions and if found then it will add it to your grub.cfg.

== External resources == 

For more information, please see:

*  [https://wiki.archlinux.org/index.php/GRUB GRUB on Arch wiki]
