<noinclude>{{:{{ROOTPAGENAME}}/TOC}}</noinclude>
<includeonly>== Cross-compiling with Portage ==</includeonly>
<noinclude>Leverage Portage as a cross-compiling package manager.</noinclude>
=== Variables ===

There are a few important variables that we will use throughout this section:

{| class="table table-striped table-condensed" style="width: auto;"
|-
! Variable name !! Meaning
|-
| <var>CBUILD</var> || Platform you are building on.
|-
| <var>CHOST</var> || Platform you are compiling for.
|-
| <var>ROOT</var> || The virtual {{Path|/}} you are installing into.
|-
| <var>PORTAGE_CONFIGROOT</var> || The virtual {{Path|/}} Portage can find its config files (like {{Path|make.conf}}).
|}

You can either set this all by hand, but that obviously gets quite tedious very quickly. A better idea is to stick these into a shell script so you can avoid typing it out all the time.

=== Filesystem setup ===

Cross-compiling a system generally involves two directory trees. The differences
between them can be difficult to understand, but they are important concepts to
cross-compiling.

The first directory structure to consider is the ''sysroot''. Please read the
[[Embedded_Handbook/General/Introduction#More_terminology_and_variables|Introduction]] chapter for the sysroot definition.

The second directory structure is the real root. This one is much simpler to understand: it's where the bootable stage3-like installation of Gentoo is located. This installation can then be copied to the target device. 

The common convention is to use the {{Path|/usr/${CTARGET}/}} tree as the sysroot since the include/library directories in this tree are already encoded into the gcc cross-compiler for searching. You could use another directory and then add custom <code>-I</code>/<code>-L</code> paths to the <var>CPPFLAGS</var>/<var>LDFLAGS</var>, but this has historically proven to be problematic in enough corner cases to be discouraged for practical use. In the embedded handbook, we'll assume the sysroot is being used as the development <var>ROOT</var>.

For your runtime system, you'll need a much slimmer/trimmed-down setup. The files you remove from a normal installed package is why this tree is not suitable for compiling against. If you build binary packages while installing into your sysroot, then you can use those binary packages in conjunction with the <var>INSTALL_MASK</var> variable to trim out most things. See {{c|man make.conf}} for more information.

=== Intro: crossdev's wrappers ===

These are simple wrapper scripts that will setup the environment variables to point to the right places for you to be able to cross compile using {{c|emerge}}. <var>PORTAGE_CONFIGROOT</var> and <var>ROOT</var> both point to the <var>SYSROOT</var>.

{{Emerge|sys-devel/crossdev}}

{{Note|Before beginning any cross-emerge, you'll need to run {{c|emerge-wrapper --init}}. Be sure to follow any instructions printed by {{c|emerge-wrapper}} before beginning your cross-emerge.}}

We can use these tools for both installing into your development root (sysroot) and into your runtime root. For the latter, simply specify by using the <code>--root</code> option. For example if you had merged via crossdev an armv4tl-softfloat-linux-gnueabi toolchain you would then invoke the command just like normal emerge. But using the ctarget prefix:

{{RootCmd|armv4tl-softfloat-linux-gnueabi-emerge pkg0 pkg1 pkg2}}

By default these wrappers use the <code>--root-deps=rdeps</code> option to avoid the host dependencies from being pulled into the deptree. This can lead to incomplete deptrees. Therefore you may want to use <code>--root-deps</code> alone to see the full depgraph.

By default the wrappers will link to the generic embedded profile. This is done to simpilify things, but the user may wish to use a more advanced targeted profile. In order to do that we can update the profile symlink.

{{RootCmd|ln -s /usr/portage/profiles/default/linux/arm/13.0 ${SYSROOT}/etc/portage/make.profile}}

And naturally to change settings for the target system like USE flags, <var>FEATURES</var>, and <var>VIDEO_CARDS</var>. We would edit the standard portage config files.

{{RootCmd|$EDITOR ${SYSROOT}/etc/portage/make.conf}}

Sometimes there are some additional tests we need override for configure scripts. To do this the wrappers export a few variables to force the test to get the answer it should. This will help prevent bloat in packages which add local functions to workaround issues it assumes your system has because it could not run the test. From time to time you may find you need to add additional variables to these files in /usr/share/crossdev/include/site/ to get a package to compile. To figure out the variable you need to add, it's often as simple as greping the configure script for the autoconf variable and adding it to the appropriate target file. This becomes obvious after the first few times of doing it.

=== Uninstall ===

If you want to uninstall and delete your work, then you can safely remove the sysroot tree without affecting any native packages. See also the section in the [[{{ROOTPAGENAME}}/General/Creating a cross-compiler|crossdev guide]] about uninstalling.

<noinclude>{{#set:Has short Title={{SUBPAGENAME}}|Has Title={{SUBPAGENAME}}}}
{{:{{ROOTPAGENAME}}/Navigator|Prev={{ROOTPAGENAME}}/General/Creating_a_cross-compiler|Next={{ROOTPAGENAME}}/General/Cross-compiling_the_kernel}}
{{migrated|originalauthors=Mike Frysinger, Ned Ludd, Robin H. Johnson, Alex Tarkovsky, Alexey Shvetsov, Ra√∫l Porcel, Joshua Saddler on April 28, 2013.}}</noinclude>
