<languages />


{{Metadata|abstract=이 안내서는 OpenRC를 통해 baselayout-1 에서 baselayout-2 로 옮겨가는 방법을 안내합니다.}}

이 안내서는 OpenRC를 통해 baselayout-1 에서 baselayout-2 로 옮겨가는 방법을 안내합니다.

== 배경 ==

=== baselayout이 뭐죠? ===

Baselayout은 전체 시스템을 제대로 동작하기 위해 {{Path|/etc/hosts}}와 같은 기본 파일을 모아둔 모음입니다. 또한 젠투에서 활용하는 기본 파일 시스템 배치(예: {{Path|/etc}}, {{Path|/var}}, {{Path|/usr}}, {{Path|/home}} 디렉터리)를 제공하기도합니다. 

=== OpenRC는 뭔가요? ===

OpenRC는 보통 {{Path|/sbin/init}}라고 하는 시스템에서 제공하는 {{c|init}} 프로그램과 함께 동작하는 의존성 기반 rc (run command) 시스템입니다.  OpenRC는 {{Path|/sbin/init}}를 대체하지 ''않습니다''. Gentoo/FreeBSD에서는 {{Path|sys-freebsd/freebsd-sbin}}에서 제공하는 FreeBSD init 을 활용하지만, 젠투에서 사용하는 기본 init 시스템은 {{Package|sys-apps/sysvinit}}입니다. 

=== 왜 옮겨야 하나요? ===

원래 젠투 rc 시스템은 baselayout 1에 빌드했으며 {{c|[[bash]]}}로 작성했습니다. 몇가지 제한 사항이 있습니다. 예를 들면 각 시스템 콜은 부팅 과정에 접근해야 하는데 C 기반 콜 아웃을 추가해야합니다. 이 콜 아웃은 정적으로 연결하는데 rc 시스템이 팽창하는 문제를 야기합니다. 

게다가 Gentoo/FreeBSD와 Gentoo 임베디드와 같은 다른 플랫폼에서의 경우는 <tt>bash</tt> 기반 rc 시스템을 요구할 수 없습니다. 이 때문에 C로 작성했고 POSIX 호환 쉘만 필요한 baselayout 2를 개발했습니다. baselayout 2를 개발하는 동안 baselayout이 젠투용 근본 파일과 파일 시스템 구성요소를 제공하고 rc 시스템이 꾸러미 자체에서 깨진다면 꽤 괜찮겠다 생각했습니다. 그래서 OpenRC가 생겼습니다.

OpenRC는 처음에는 [http://roy.marples.name/openrc Roy Marples]가 2010년까지 개발했습니다. 그리고 지금은 [[Project:OpenRC|Gentoo OpenRC Project]]에서 관리합니다. OpenRC는 현재 다양한 모든 젠투 변형 버전(Gentoo Linux, Gentoo/FreeBSD, Gentoo Embedded, Gentoo Vserver)과 FreeBSD, NetBSD 같은 다른 플랫폼을 지원합니다.

== OpenRC로 옮겨가기 ==

OpenRC를 옮겨가는 과정은 상당히 간단합니다. 꾸러미 관리자에서 일반 업그레이드 절차 일부를 끌어냅니다. 대부분 중요한 단계는 <code>>=sys-apps/baselayout-2</code> 및 {{Package|sys-apps/openrc}} 꾸러미를 설치하고 나서 이루어집니다.  시스템을 다시 부팅하기 전에 {{c|dispatch-conf}} 또는 유사 도구를 실행하여  {{Path|/etc}} 에 있는 파일이 최신인지 확인하는 과정이 ''중요''합니다. '''이 과정을 실패하면 시스템을 부팅하지 못하게 만드는 결과를 초래''' 하고 아래 절차를 거쳐 시스템을 복구하기 위해 LiveCD가 필요합니다. 

설정 파일을 업데이트 하고 나면 다시 부팅하기 전에 우선 확인해야 할 몇가지가 있습니다. 

=== {{Path|/etc/conf.d/rc}} ===

{{Path|/etc/conf.d/rc}}는 오래됐습니다. 이 파일에 들어간 설정은 {{Path|/etc/rc.conf}}에 적당한 설정 값으로 옮겨야합니다. {{Path|/etc/rc.conf}} 파일과 {{Path|/etc/conf.d/rc}} 파일을 살펴보시고 설정을 옮기십시오. 끝나면 {{Path|/etc/conf.d/rc}} 파일을 직접 제거하십시오. 

=== 커널 모듈 ===

보통 부팅하는 과정에서 각각의 커널 모듈을 자동으로 불러올 때, 매개 변수를 전달할 모듈은 {{Path|/etc/modules.autoload.d/kernel-2.6}} 에 있습니다. baselayout-2에서는 이 파일을 더 이상 사용하지 않습니다. 대신, 자동으로 불러오는 모듈과 모듈 매개변수는 {{Path|/etc/conf.d/modules}} 파일에 있으며, 커널 버전은 상관없습니다. 

예전 방식의 설정 예제는 다음과 같습니다: 

{{FileBox|filename=/etc/modules.autoload.d/kernel-2.6|1=
<pre>
ivtv
cx88_dvb video_br=2
</pre>
}}

이걸 다음과 같이 바꾸면: 

{{FileBox|filename=/etc/conf.d/modules|1=
<pre>
# Modules autoloaded at boot
modules_2_6="ivtv cx88_dvb"
# Module parameters
module_cx88_dvb_args_2_6="video_br=2"
</pre>
}}

위 예제에서, 모듈과 모듈에 붙은 매개변수는 2.6.x 계열 커널로 전달합니다. 새 설정에서는 커널 버전을 기반으로 어떤 모듈이든 세밀하게 모듈과 매개변수를 다룰 수 있습니다. 

{{Important| '''module*''' 변수는 누적 방식이 아닙니다. 버전별 변수 값은 일반 변수값보다 우선합니다.}}

{{Note|''module_''' 및 '''modules_''' 차이점을 참고하십시오.}}

더 자세한 예제는 다음과 같습니다: 

{{FileBox|filename=/etc/conf.d/modules|1=
<pre>
# Only load ivtv for 2.6.23-gentoo-r5
modules_2_6_23_gentoo_r5="ivtv"
# Only load cx88_dvb for 2.6.23 kernels (other than -gentoo-r5)
modules_2_6_23="cx88_dvb"
# Only load tun and usbserial for 2.6.x series kernels where x != 23
modules_2_6="tun usbserial"
# Otherwise load ochi1394 and ieee1394
modules="ohci1394 ieee1394"
  
# For 2.6.23-gentoo-r5, pass video_br=2 to cx88_dvb
module_cx88_dvb_args_2_6_23_gentoo_r5="video_br=2"
# For 2.6.x series kernels, always pass vendor and product
module_usbserial_args_2_6="vendor=0x1410 product=0x2110"
# Always pass debug to ieee1394
module_ieee1394_args="debug" 
</pre>
}}

=== 부팅 런레벨 ===

<code>boot</code> 런레벨에서는 전체 머신에 중요한 몇가지 단계를 거칩니다. 예를 들어, 부팅을 시작할 때 루트 파일 시스템을 읽기/쓰기로 마운트했는지, 파일시스템 오류, 마운트 지점의 존재여부를 확인한 후 {{Path|/proc}} 의사 파일 시스템을 시작합니다.

OpenRC에서 블록 저장 장치에 대한 볼륨 관리자 서비스는 더이상 부팅 과정에서 자동으로 실행하지 않습니다. [[LVM]], RAID, swap, device-mapper (dm), dm-crypt 같은게 여기에 해당합니다. 시스템 관리자는 이 서비스에 대한 적당한 초기화 스크립트를 <code>boot</code> 런레벨에 추가했는지 확인해야 하며, 그렇지 않으면 시스템을 부팅할 수 없습니다.

OpenRC 이빌드에서 이전 작업을 시도하는 동안, 관리자는 볼륨 관리 서비스를 제대로 옮겼는지 확인해야합니다: 

{{RootCmd|ls -l /etc/runlevels/boot/}}

{{Path|root}}, {{Path|procfs}}, {{Path|mtab}}, {{Path|swap}}, {{Path|fsck}}가 위 항목에서 빠져있다면 다음 명령을 실행하여 <code>boot</code> 런레벨에 해당 항목을 추가하십시오: 

{{RootCmd
|rc-update add root boot
|rc-update add procfs boot
|rc-update add mtab boot
|rc-update add fsck boot
|rc-update add swap boot
}}

시스템에서 mdraid, [[LVM]] 을 사용하는데 목록에 언급되지 않았다면 다음 초기화 스크립트를 <code>boot</code> 런레벨에 추가해야합니다:

{{RootCmd
|rc-update add mdraid boot
|rc-update add lvm boot
}}

=== Udev ===

OpenRC는 {{Path|udev}}를 기본으로 시작하지 않습니다. {{Path|/udev}}는 <code>sysinit</code> 런레벨에서 시작하도록 표시해야합니다. 앞서 {{Path|udev}}를 활성화했고 <code>sysinit</code> 런레벨에 추가했는지 OpenRC 이빌드에서 발견합니다. 하지만, 안전하게 처리하려면 {{Path|udev}}가 있는지부터 확인하십시오: 

{{RootCmd|ls -l /etc/runlevels/sysinit|output=<pre>
lrwxrwxrwx 1 root root 14 2009-01-29 08:00 /etc/runlevels/sysinit/udev -> \
/etc/init.d/udev
</pre>
}}

{{Path|udev}}가 목록에 없다면, 올바른 런레벨에 추가하십시오: 

{{RootCmd|rc-update add udev sysinit}}

=== 네트워크 ===

baselayout과 OpenRC가 두 개의 다른 꾸러미로 갈라졌기 때문에 net.eth0 초기화 스크립트는 업그레이드 과정에서 나타나지 않습니다. 이 초기화 스크립트를 바꾸고 기본 런레벨에 넣으려면 다음 과정을 진행하십시오: 

{{RootCmd
|cd /etc/init.d
|ln -s net.lo net.eth0
|rc-update add net.eth0 default
}}

다른 네트워크 초기화 스크립트가 빠졌다면 다시 추가하기 위해 위 과정을 따르십시오. 간단하게, <code>eth0</code> 를 빠진 네트워크 장치 이름으로 바꾸면됩니다. 

{{Path|/etc/conf.d/net}}(oldnet)은 더이상 <tt>bash</tt> 방식 배열 값을 설정에 활용하지 않습니다. 설정 방법을 알아보려면 {{Path|/usr/share/doc/openrc-<version>/net.example}} 파일을 검토하십시오. 변한 과정은 상대적으로 간단하며, 각각의 항목을 새로운 줄로 바꾸면 됩니다. 예를 들면 정적 IP  할당은 다음과 같이 바꿉니다: 

{{FileBox|filename=/etc/conf.d/net|title=예전 방식|1=
<pre>
config_eth0=( "192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255" )
routes_eth0=( "default via 192.168.1.100" "10.0.0.0/8 via 192.168.1.2" )
</pre>
}}

{{FileBox|filename=/etc/conf.d/net|title=새 방식|1=
<pre>
config_eth0="192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255"
routes_eth0="default via 192.168.1.100
10.0.0.0/8 via 192.168.1.2"
</pre>
}}

=== 시계 ===

Clock settings have been renamed from {{Path|/etc/conf.d/clock}} to the system's native tool for adjusting the clock. On Linux it will be {{Path|/etc/conf.d/hwclock}} and on FreeBSD it will be {{Path|/etc/conf.d/adjkerntz}}. Systems without a working real time clock (RTC) chip should use {{Path|/etc/init.d/swclock}}, which sets the system time based on the mtime of a file which is created at system shutdown. The initscripts in {{Path|/etc/init.d/}} have also been renamed accordingly, so make sure the appropriate script for the system has been added to the boot runlevel. 

Additionally, the <code>TIMEZONE</code> variable is no longer in this file. Its contents are instead found in the {{Path|/etc/timezone}} file. If it does not exist, it will need to be created with the appropriate timezone. Please review both of these files to ensure their contents. 

The proper value for this file is the path relative to the timezone from the {{Path|/usr/share/zoneinfo}} directory. For example, for users living on the east coast of the United States, the following would be a correct setting: 

{{FileBox|filename=/etc/timezone|1=
<pre>
America/New_York
</pre>
}}

=== XSESSION ===

The <code>XSESSION</code> variable is no longer found in {{Path|/etc/rc.conf}}. Instead, the <code>XSESSION</code> variable can be set on a per-user basis in the {{Path|~/.bashrc}} file (or equivalent), or system-wide in {{Path|/etc/env.d/}}. 

Here is an example of setting the default <code>XSESSION</code> for the whole system: 

{{RootCmd|echo 'XSESSION{{=}}"Xfce4"' > /etc/env.d/90xsession}}

{{Important|<tt>env-update</tt> must be ran after creating a file in {{Path|/etc/env.d}}. The user must logout and login for the changes to take effect. If the variable has been set in {{Path|~/.bashrc}}, re-source the file by running <tt>source ~/.bashrc</tt>.}}

=== EDITOR 및 PAGER 변수 ===

The <code>EDITOR</code> variable is no longer found in {{Path|/etc/rc.conf}}. Both <code>EDITOR</code> and <code>PAGER</code> are set by default in {{Path|/etc/profile}}. Adjust as needed in the {{Path|~/.bashrc}} file (or equivalent) or create {{Path|/etc/env.d/99editor}} and set the system default there. 

{{Important|<tt>env-update</tt> must be ran after creating a file in {{Path|/etc/env.d}}. The user must logout and login for the changes to take effect. If the variable has been set in {{Path|~/.bashrc}}, re-source the file by running <tt>source ~/.bashrc</tt>.}}

=== 부팅 기록 ===

Previously, the boot process could be logged using the {{Package|app-admin/showconsole}} package. However, OpenRC now handles all logging internally, so there is no need for the hacks that <tt>showconsole</tt> employed. <tt>showconsole</tt> can now be safely unmerged. To continue logging boot messages, set the appropriate variable (<code>rc_logger</code>) in the {{Path|/etc/rc.conf}} file. Logs will appear in {{Path|/var/log/rc.log}}. 

{{FileBox|filename=/etc/rc.conf|title=기록 활성화|1=
<pre>
rc_logger="YES"
</pre>
}}

=== {{Path|local.start}} 과 {{Path|local.stop}} ===

With OpenRC, {{Path|/etc/conf.d/local.start}} and {{Path|local.stop}} have been deprecated. During the migration to OpenRC, the files are moved to {{Path|/etc/local.d}} and gain the suffix {{Path|.start}} or {{Path|.stop}}. OpenRC then executes those in alpha-numeric order. 

=== 시스템 하위 유형: 특수한 가상화 사례 ===

Earlier versions of OpenRC detected multiple types of virtualization, which was used to note when certain init scripts should be skipped, using the <code>keyword</code> call in the <code>depend</code> functions. 

However, as of the 0.7.0 release, administers are required to explicitly configure the sub-type using the <code>rc_sys</code> variable in {{Path|/etc/rc.conf}}. The sub-type should be set to match the virtualization environment that the given root is in. In general, the non-empty <code>rc_sys</code> value should be within the virtual containers; The host node will have <code>rc_sys=""</code>. 

{{Important|If a specific sub-type does not exist, use the default of an empty string <code>""</code>. If the variable is unset, a warning will be printed and there will be an attempt to use the old detection algorithm.}}

{{Note|When the default value for automatic detection is unknown temporarily comment out the <code>rc_sys</code> variable and run the detection command: <tt>rc -S</tt>.}}

{{FileBox|filename=/etc/rc.conf|title=시스템 하위 형식 설정 비우기|1=
<pre>
rc_sys=""
</pre>
}}

발견 알고리즘은 새 하위 형식 도입 및 우선순위 발견을 신뢰할 수 없는 커널로의 변경 때문에 수동 설정 방식으로 바꾸었습니다. 

{| class="table" style="text-align: left;" 
|- 
! 하위 형식
! 설명
! 참고
|- 
| 
| 기본, 하위 형식 없음
| 설정을 안한 상태와는 다릅니다; FreeBSD, Linux, NetBSD
|- 
| jail
| FreeBSD 제한
| 
|- 
| lxc
| Linux 컨테이너
| 자동발견 방식 아님
|- 
| openvz
| Linux OpenVZ
| 
|- 
| prefix
| Prefix
| 자동발견 방식 아님; FreeBSD, Linux & NetBSD
|- 
| vserver
| Linux vserver
| 
|- 
| xen0
| Xen0 Domain
| Linux & NetBSD
|- 
| xenU
| XenU Domain
| Linux & NetBSD
|-
|}

=== 오래된 설정 파일 지우기 ===

이전 작업이 끝나면 아직 포티지에서 지우지 않은 파일이 시스템에 남습니다. 이들은 설정 파일 보호 기능이 동작하는 포티지가 보호한 설정 파일입니다.

대부분 볼만한 예제는 {{Path|/usr/share/doc/openrc-*/net.example.bz2}}에서 온 {{Path|/etc/conf.d/net.example}}입니다. 

=== 끝내기 ===

설정 파일과 초기화 스크립트 업데이트가 끝나면, 마지막으로 할 일은 {{c|reboot}}를 루트 권한으로 터미널에 입력하는 일입니다. 업그레이드를 하는 중에는 시스템 상태 정보를 보존하지 못하기 때문에 새로 부팅해야합니다. 

== 바뀐 기능 ==

=== 멈춤 동작 ===

{{c|/etc/init.d/service pause}} 명령으로 모든 의존 서비스를 내리지 않고 임시로 서비스를 멈출 수 있습니다. OpenRC에서 <code>pause</code> 동작을 제거했습니다. 이 기능은 이전 baselayout에서도 동작하는 {{c|/etc/init.d/service --nodeps stop}} 명령으로 지원합니다. 

=== {{Path|/etc/mtab}}의 루트 파일 시스템 항목 ===

이전에, 초기 <code>rootfs</code> 항목을 {{Path|/etc/mtab}}에서 제거하고 실제 {{Path|/}} 루트 항목만 남겨두었습니다. 중복 rootfs 항목은 시스템을 끄는 동안 다시 추가합니다. OpenRC에서는 initramfs와 tmpfs-on-root를 완전하게 지원하려면 두 항목이 있어야합니다. 이는 시스템을 끄는 과정을 처리하는 동안 기록 작업을 덜 처리해야 함을 의미합니다. 


{{Migrated|originalauthors=cardoe, nightmorph, robbat2, uberlord}}

[[Category:Server and Security]]
