{{InfoBox stack
|{{InfoBox wikipedia|Loadable kernel module|header=true}}
}}
{{Stub}}
Kernel modules are object files that contain code to extend the kernel of operating system. Kernel modules are used to add support for new hardware and/or filesystems, or for adding system calls. Modules can be built into the kernel or compiled as loadable kernel modules.

== Compile-in-kernel modules vs Loadable kernel modules (LKMs)==
This page is meant to help picking between compile-in-kernel ("<*>") and compile-as-module ("<M>") when [[Kernel/Gentoo Kernel Configuration Guide#Built-in vs modular|configuring a kernel]].

=== Advantages ===
A module
* Is loadable without reboot (at least most of them).
* Results in smaller kernel memory footprint (when the module is not loaded).
* Can be loaded on demand by [[udev]] (for example DVB drivers for DVB stick).
* Allows easy reloading of kernel drivers in case of module crash.
* Allows specifying module-specific parameters in {{Path|/etc/conf.d/modules}}

=== Drawbacks ===
Using a module
* May require an update of the [[initramfs]] for modules needed early in the boot process (i.e. [[filesystem]] drivers).
* May result in performance losses due to the addition of an API layer and slightly more memory usage.

Also:
* Beware of file system module X located on a partition formatted with X (unbootable system at worst).

== Loadable Kernel Modules ==

Loadable modules can be defined in the {{Path|/etc/conf.d/modules}} file in order to load modules to the kernel during the init process.

A module can be load or unload manually by the <tt>modprobe</tt> command. For example, to unload the <tt>nvidia</tt> and load the <tt>nouveau</tt> module, run:
{{RootCmd|modprobe -r nvidia}}
{{RootCmd|modprobe nouveau}}

To list currently loaded modules, run <kbd>lsmod</kbd>.

== Going Completely Module-less ==

If, for some reason, you want to have a completely module-less system, you can disable loadable module support in your kernel configuration (making sure to build-in any required drivers/features, of course). Setting <tt>CONFIG_MODULES=n</tt> will disable loadable module support:

{{KernelBox|title=Disable loadable module support (<var>CONFIG_MODULES</var>)|1=
[ ] Enable loadable module support  ----
}}

With a module-less kernel, you may also wish to dispense with the userspace programs that manage loadable modules (e.g. <tt>lsmod</tt>, <tt>modprobe</tt>, etc). To do this, you'll need to remove <tt>kmod</tt> support from packages that use it, and you'll need to unmerge <tt>kmod</tt> and the virtual <tt>modutils</tt> packages. Because <tt>modutils</tt> is part of the <tt>@system</tt> set, you'll need to remove it from the <tt>@system</tt> set before it can be unmerged.

First, add <tt>-kmod</tt> to your USE flags in {{Path|/etc/portage/make.conf}}.

Next, rebuild installed packages without <tt>kmod</tt> support:
{{RootCmd|emerge -aDNuv @world}}

Follow any special instructions given by rebuilt packages (for example, if <tt>udev</tt> was rebuilt, then you'll want to restart it according to the instructions in the <tt>emerge</tt> output).

Now add <tt>-*virtual/modutils</tt> to {{Path|/etc/portage/profile/packages}} (create the "profile" directory and "packages" file if they don't exist). This removes the <tt>modutils</tt> virtual package from the <tt>@system</tt> set.

Then unmerge <tt>modutils</tt> and <tt>kmod</tt> packages:
{{RootCmd|emerge -ac}}

If the above command only removes <tt>modutils</tt>, then some package still depends on <tt>kmod</tt> even with the <tt>-kmod</tt>  USE flag set. You can run <kbd>equery depends kmod</kbd> to find out which package still depends on <tt>kmod</tt>.

If you previously had a kernel installed with modules, then you'll also want to remove the {{Path|/lib/modules/<kernel-version>}} directory. Since you've built your kernel without any loadable modules, there won't be anything useful in there anymore.

Also, if you are using a genkernel initramfs, then you may want to add <tt>nomodules</tt> to the kernel command line in your bootloader (e.g. GRUB) configuration so that the initramfs doesn't waste any time looking for modules to load.

[[Category:Kernel]]
