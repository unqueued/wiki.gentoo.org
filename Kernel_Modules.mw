{{DISPLAYTITLE:Kernel modules}}{{InfoBox stack
|{{InfoBox wikipedia|Loadable kernel module|header=true}}
}}
{{Stub}}

Kernel modules are object files that contain code to extend the kernel of an operating system. Kernel modules are used to add support for new hardware and/or filesystems, or for adding system calls. Modules can be built into the kernel or compiled as loadable kernel modules.

== Compile-in-kernel modules vs Loadable kernel modules (LKMs) ==

This page is meant to help picking between compile-in-kernel (<code><*></code>) and compile-as-module (<code><M></code>) when [[Kernel/Gentoo Kernel Configuration Guide#Built-in vs modular|configuring a kernel]].

=== Advantages ===

A module:

* Is loadable without reboot (at least most of them).
* Results in smaller kernel memory footprint (when the module is not loaded).
* Can be loaded on demand by [[udev]] (for example DVB drivers for DVB stick).
* Allows easy reloading of kernel drivers in case of module crash.
* Allows specifying module-specific parameters in {{Path|/etc/conf.d/modules}}

=== Drawbacks ===

Using a module:

* May require an update of the [[initramfs]] for modules needed early in the boot process (i.e. [[filesystem]] drivers).
* May result in performance losses due to the addition of an API layer and slightly more memory usage.

Also:
* Beware of file system module X located on a partition formatted with X (unbootable system at worst).

== Loadable kernel modules ==

=== Automatic loading ===

==== OpenRC ====

Loadable modules can be defined in the {{Path|/etc/conf.d/modules}} file in order to load modules to the kernel during the init process.

===== Blacklist =====

To avoid a module from loading, add it to a file in {{Path|/etc/modprobe.d/}}:

{{FileBox|filename=/etc/modprobe.d/blacklist.conf|1=
blacklist uhci_hcd
blacklist nvidia
}}

More information on module blacklisting can be found by reading the man page:

{{Cmd|man 5 modprobe.d}}

==== systemd ====

See the [[Systemd#Automatic_module_loading|automatic module loading]] section in the systemd article for module loading when using systemd.

Also see the modules-load.d man page:

{{Cmd|man 5 modules-load.d}}

=== Manual loading ===

A module can be load or unload manually by the {{c|modprobe}} command. For example, to unload the <code>nvidia</code> module and load the <code>nouveau</code> module, run:

{{RootCmd
|modprobe -r nvidia
|modprobe nouveau
}}

To list currently loaded modules, run {{c|lsmod}}.

== Going completely module-less ==

If, for some reason, you want to have a completely module-less system, you can disable loadable module support in your kernel configuration (making sure to build-in any required drivers/features, of course). Setting <code>CONFIG_MODULES=n</code> will disable loadable module support:

{{KernelBox|title=Disable loadable module support (<var>CONFIG_MODULES</var>)|1=
[ ] Enable loadable module support  ----
}}

With a module-less kernel, you may also wish to dispense with the userspace programs that manage loadable modules (e.g. {{c|lsmod}}, {{c|modprobe}}, etc). To do this, you'll need to remove kmod support from packages that use it, and you'll need to unmerge kmod and the virtual {{Package|virtual/modutils}} package(s). Because modutils is part of the system set, it first must be removed from the set before it can be unmerged.

First, add <code>-kmod</code> to the system's USE flags in {{Path|/etc/portage/make.conf}}.

Next, rebuild installed packages without kmod support:

{{Emerge|params+=--deep --newuse --update --verbose|@world}}

Follow any special instructions given by rebuilt packages (for example, if udev was rebuilt, then restart it according to the instructions in the {{c|emerge}} output).

Now add <code>-*virtual/modutils</code> to {{Path|/etc/portage/profile/packages}} (create the "profile" directory and "packages" file if they don't exist). This removes the {{Package|virtual/modutils}} virtual package from the system set.

Then unmerge modutils and kmod packages:

{{RootCmd|emerge -ac}}

If the above command only removes modutils, then some package still depends on kmod even with the <code>-kmod</code> USE flag set. You can run {{c|equery depends kmod}} to find out which package still depends on kmod.

If you previously had a kernel installed with modules, then you'll also want to remove the {{Path|/lib/modules/<kernel-version>}} directory. Since you've built your kernel without any loadable modules, there won't be anything useful in there anymore.

When using a {{c|[[genkernel]]}} generated initramfs, it may be necessary to add <code>nomodules</code> to the kernel command line in the system's bootloader (e.g. GRUB) configuration so that the initramfs does not waste any time looking for modules to load.

[[Category:Kernel]]
