<languages />

{{Metadata|abstract=Distcc è un programma progettato per distribuire processi di compilazione agli host partecipanti attraverso una rete. È composto da un server, distccd, e da un client, distcc. Distcc funziona in modo trasparente con ccache, Portage e persino Automake, con un po' di lavoro.}}

{{InfoBox stack
|{{InfoBox homepage|https://github.com/distcc/distcc|header=true}}
|{{InfoBox wikipedia}}
}}

[http://distcc.samba.org Distcc] è un programma progettato per distribuire processi di compilazione agli host partecipanti attraverso una rete. È composto da un server, {{c|distccd}} e da un client, {{c|distcc}}. Distcc funziona in maniera trasparente con [http://ccache.samba.org ccache], Portage e Automake con poco lavoro per la configurazione. 

Se si intende usare {{c|distcc}} per facilitare il bootstrap dell'installazione di Gentoo, assicurarsi di leggere la sezione [[#Uso_di_Distcc_per_il_Bootstrap|Uso di Distcc per il Bootstrap]]. 

== Installazione ==

Prima di configurare {{c|distcc}}, diamo un'occhiata all'installazione del pacchetto {{Package|sys-devel/distcc}} su tutti gli host.

=== Requisiti per tutti gli host ===

Per poter usare {{c|distcc}}, tutti i computer sulla rete devono avere la stessa versione di GCC. Ad esempio, mischiare GCC 3.3.x (dove la x è variabile) non è un problema, ma mischiare 3.3.x e 3.2.x potrebbe generare errori in fase di compilazione o di esecuzione. 

Verify that all systems use the same version of binutils (eselect binutils list) or many packages will fail linking with various errors like text relocation.

=== Opzioni USE ===

{{USEflag|package=sys-devel/distcc}}

=== Emerge ===

Distcc viene distribuito con un monitor grafico per controllare le attività che un computer destina alla compilazione. Questo monitor viene abilitato quando si usa l'opzione USE <code>gtk</code>.

Dopo aver configurato le opzioni USE, si installi il pacchetto {{Package|sys-devel/distcc}}:

{{Emerge|sys-devel/distcc}}

{{Important/it|Assicurarsi di aver installato {{Package|sys-devel/distcc}} su tutte le macchine che partecipano alla compilazione.}}

== Configurazione ==

=== Servizi ===

Affinché {{c|distccd}} venga avviato automaticamente, si osservino le seguenti istruzioni.

==== OpenRC ====

Modificare {{Path|/etc/conf.d/distccd}} ed assicurarsi di aver impostato la direttiva <code>--allow</code> di modo da accettare solo host fidati. Per aumentare la sicurezza, si può usare la direttiva <code>--listen</code> per indicare al demone {{c|distccd}} quale IP ascoltare (per sistemi multi-homed). Per ulteriori informazioni su {{c|distcc}}, consultare la pagina rigurdante le  [https://cdn.rawgit.com/distcc/distcc/master/doc/web/security.html note sulla sicurezza di Distcc].

{{Warning|Anyone who can connect to the distcc server port can run arbitrary commands on that machine as the distccd user. }}

Il seguente esempio permette ai client distcc con indirizzo IP <code> 192.168.0.4</code> e <code>192.168.0.5</code> di connettersi al server {{c|distccd}} in esecuzione sulla macchina locale:

{{FileBox|filename=/etc/conf.d/distccd|title=Permettere a client specifici di connettersi a distccd|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important/it|È importante usare <code>--allow</code> e <code>--listen</code>. Per ulteriori informazioni si prega di consultare la pagina del manuale di {{c|distcc}} o la sezione sulla sicurezza qui sopra.}}

A questo punto, lanciare il demone di {{c|distccd}} su tutti i computer partecipanti: 

{{RootCmd
|rc-update add distccd default
|rc-service distccd start
}}

==== systemd ====

Modificare il file {{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} per aggiungere i client permessi in formato [[wikipedia:CIDR/it|CIDR]]. Se si usa l'esempio, verranno aggiunti tutti gli indirizzi IP nell'intervallo 192.168.1.xxx:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=Configurazione di  ALLOWED_SERVERS|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

{{Note/it|Il nome "ALLOWED_SERVERS" qui è piuttosto ambiguo, in quanto si riferisce ai client a cui è permesso connettersi al server distccd locale. In ogni caso, è questa variabile che viene usata dal servizio distccd come valore per l'opzione <code>--allow</code> - vedere il file {{Path|/usr/lib/systemd/system/distccd.service}} per ulteriori informazioni.}}

Ricaricare i file unit dopo aver apportato tali cambiamenti:

{{RootCmd|systemctl daemon-reload}}

Abilitare l'avvio automatico di {{c|distccd}} e poi avviare il servizio:

{{RootCmd
|systemctl enable distccd
|systemctl start distccd
}}

=== Specificare gli Host Partecipanti ===

Utilizzare il comando {{c|distcc-config}} per configurare la lista degli host. 

Il seguente è un esempio di lista per la definizione degli host. Nella maggior parte dei casi, sono sufficienti varianti delle linee 1 e 2. Quest'ultima usa la sintassi <code>/limit</code> per informare {{c|distcc}} circa il numero massimo di lavori che possono essere lanciati sul nodo attuale. Per ulteriori informazioni riguardo la sintassi usata nelle linee 3 e 2, consultare la [https://cdn.rawgit.com/distcc/distcc/master/doc/web/man/distcc_1.html pagina del manuale di distcc].

{{CodeBox|title=Esempi di definizioni degli host|1=
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
}}

Ci sono anche altri modi per impostare gli host. Consultare la pagina del manuale {{c|man distcc}} di {{c|distcc}} per ulteriori dettagli.

Se si deve anche compilare sulla macchina locale, occorre inserire <code>localhost</code> nella lista degli host. Per contro, se si vuole evitare di usare la macchina locale per compilare (caso d'uso comune), bisogna ometterlo dalla lista. Inserire localhost su una macchina lenta potrebbe addirittura rallentare le cose. È consigliabile effettuare dei test per raggiungere le prestazioni migliori.

Configuriamo {{c|distcc}} affinché usi gli host menzionati nella prima linea dell'esempio:

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

Distcc supporta anche una modalità "pompa", invocando il comando {{c|pump}}. Ciò può ridurre significativamente i tempi di compilazione quando vengono compilati più file in parallelo. Questa modalità mette in cache gli header preprocessati nel lato server e, di conseguenza, evita di ricaricarli e di preprocessarli nuovamente.

Per configurare un host affinché usi la modalità pompa, aggiungere il suffisso <code>,cpp,lzo</code> alle definizioni degli host. La modalità pompa richiede sia l'opzione <code>cpp</cpp> ''sia'' l'opzione <code>lzo</code> (a prescindere dal fatto che i file siano in C o in C++).

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1,cpp,lzo 192.168.0.2,cpp,lzo 192.168.0.3,cpp,lzo"}}

== Utilizzo ==

=== Con Portage ===

Far usare {{c|distcc}} a [[Portage]] è semplice. Si tratta semplicemente di abilitare la feature {{c|distcc}} e di impostare un valore decente per il numero di lavori paralleli (in quando {{c|distcc}} fa crescere la quantità di risorse per la compilazione).

Adesso, impostare le variabili <var>MAKEOPTS</var> e <var>FEATURES</var> come mostrato sotto.

Una strategia comune consiste 
* nell'impostare il valore di <code>N</code> al ''doppio'' del numero ''totale'' (locali + remoti) di core di CPU + 1, e 
* nell'impostare il valore di <code>M</code> al numero di core di CPU ''locali''

L'uso di <code>-lM</code> nella variabile <var>MAKEOPTS</var> preverrà la comparsa di troppe attività quando uno degli host cluster di {{c|distcc}} non è disponibile (accrescendo il numero di lavori simultanei negli altri sistemi) o quando un'ebuild è configurata per non permettere compilazioni remote (come nel caso di gcc). Tutto ciò viene raggiunto rifiutando di avviare lavori aggiuntivi quando il carico di sistema è maggiore o uguale al valore di <code>M</code>.

<div class="mw-translate-fuzzy">
{{FileBox|filename=/etc/portage/make.conf|title=Configurare MAKEOPTS e FEATURES|lang=bash|1=
# Sostituire N e M con il valore corretto come calcolato precedentemente
MAKEOPTS="-jN -lM"
FEATURES="distcc distcc-pump"
}}
</div>

{{Warning|distcc-pump is known to break multiple packages in unpredictable ways. Do not ever use it system-wide. Bug reports filed with distcc-pump enabled may be rejected.}}

Per esempio, quando ci sono due PC host quad-core che usano {{c|distccd}} e il computer locale ha un processore dual-core, allora la variabile <var>MAKEOPTS</var> potrebbe essere come di seguito:

{{FileBox|filename=/etc/portage/make.conf|title=Esempio di MAKEOPTS per 2 PC quad-core (remoti) e un PC dual core (locale)|lang=bash|1=
# 2 host remoti con 4 core ciascuno = 8 core remoti
# 1 host locale con 2 core = 2 core locali
# il numero complessivo di core è 10, quindi N = 2*10+1 e M=2
MAKEOPTS="-j21 -l2"
}}

==== CFLAGS e CXXFLAGS ====

While editing the {{Path|make.conf}} file, make sure that it does not have <code>-march=native</code> in the <var>CFLAGS</var> or <var>CXXFLAGS</var> variables. {{c|distccd}} will not distribute work to other machines if <code>march</code> is set to <code>native</code>. An approximate set of <code>-march=</code> and machine flags can be obtained by running the following command:

{{Cmd|gcc -v -E -x c -march{{=}}native -mtune{{=}}native - < /dev/null 2>&1 {{!}} grep cc1 {{!}} perl -pe 's/^.* - //g;'}}

See [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc] for more information.

A GCC [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=39851 bug] has recently been fixed in the 8.0 dev tree which facilitates a more reliable and succinct mechanism for extrapolating appropriate machine flags.  The fix has been backported to the 6 and 7 branches and should be released fairly soon.  Some processing is still required and a script can be found in the [https://github.com/daniel-santos/distccflags distccflags repo], or via {{c|wget}}:

{{Warning|Downloading scripts and executing them without any validation is a security risk. Before executing such scripts, take a good look at what they want to accomplish and refrain from executing it when the content or behavior is not clear and purposeful.}}

{{Cmd
|wget 'https://raw.githubusercontent.com/daniel-santos/distccflags/master/distccflags'
|chmod +x distccflags
|./distccflags -march{{=}}native
}}

<div class="mw-translate-fuzzy">
=== Configurare Distcc per funzionare con Automake ===
</div>

<div class="mw-translate-fuzzy">
In molti casi, questa procedura è anche più semplice della parte riguardante Portage. Ciò che bisogna fare è aggiornare la propria variabile <code>PATH</code> per farle includere {{Path|/usr/lib/distcc/bin}} di fronte alla directory che contiene <code>gcc</code>  ( {{Path|/usr/bin}} ). In ogni caso, c'è da fare attenzione. Se si usa ccache bisogna inserire distcc dopo ccache:
</div> 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

<div class="mw-translate-fuzzy">
Si può inserire tutto questo dentro il proprio {{Path|~/.bashrc}} o equivalente, di modo da impostare PATH ogni volta che si esegue il login.
</div>

Instead of calling {{c|make}} alone, add in <code>-jN</code> (where <code>N</code> is an integer). The value of <code>N</code> depends on the network and the types of computers that are used to compile. A heuristic approach to the right value is given earlier in this article.

<div class="mw-translate-fuzzy">
{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}
</div>

Using {{c|distcc}} to bootstrap (i.e. build a working toolchain before installing the remainder of the system) requires some additional steps to take.

<div class="mw-translate-fuzzy">
Fase 3: Configurare Distcc ===
</div>

<div class="mw-translate-fuzzy">
Lanciare <code>distcc-config --install</code> per configurare distcc; sostituire <code>host*</code> con gli indirizzi IP o con gli hostname delle macchine partecipanti.
</div> 

<div class="mw-translate-fuzzy">
{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}
</div>

Update the <var>PATH</var> variable in the installation session as well:

<div class="mw-translate-fuzzy">
Distcc è configurato per il bootstrap! Continuare con le istruzioni di installazioni ufficiali e '''non dimenticare''' di ri-emergere Distcc dopo aver lanciato <code>emerge system</code>, per assicurarsi che tutte le dipendenze desiderate vengano installate.
</div>

<div class="mw-translate-fuzzy">
{{Note/it|Durante il bootstrap e l'<code>emerge system</code> distcc potrebbe dare l'impressione di non essere usato. Questo è un comportamento normale in quanto alcune ebuild non funzionano correttamente con distcc, e di conseguenza lo disabilitano intenzionalmente.}}
</div>

<div class="mw-translate-fuzzy">
== Risoluzione dei problemi ==
</div> 

<div class="mw-translate-fuzzy">
=== Alcuni pacchetti non usano Distcc ===
</div>

<div class="mw-translate-fuzzy">
Man mano che si emergono pacchetti, si può notare come alcuni di essi non vengano compilati in modalità distribuita (e neanche in parallelo). Questo è possibile quando il Makefile del pacchetto in questione non supporta le operazioni parallele, o quando il manutentore dell'ebuild le ha esplicitamente disabilitate, spesso a causa di problemi noti.
</div>

<div class="mw-translate-fuzzy">
A volte distcc può causare fallimenti nelle compilazioni. Se succede, si è pregati di [http://bugs.gentoo.org comunicarlo] nel bugtracker.
</div>

<div class="mw-translate-fuzzy">
=== Versioni di GCC differenti ===
</div>

<div class="mw-translate-fuzzy">
Se si hanno diverse versioni di gcc nei propri host, molto probabilmente si manifesteranno problemi di varia natura. La soluzione consiste nell'installare in tutti gli host la stessa versione di GCC.
</div> 

<div class="mw-translate-fuzzy">
Gli aggiornamenti più recenti di Portage usano <code>${CHOST}-gcc</code> invece di <code>gcc</code>. Questo significa che se si stanno usando macchine i686 insieme ad altre di diverso tipo (i586,i386) si incontreranno problemi. Una soluzione può essere quella di specificare <code>export CC='gcc' CXX='c++'</code> o di inserirlo direttamente in  {{Path|/etc/portage/make.conf}}.
</div>

=== Extras ===

The {{c|distcc}} application has additional features and applications to support working in a {{c|distcc}} environment.

=== Monitoring utilities === 

Distcc ships with two monitoring utilities. The text-based monitoring utility is always built and is called {{c|distccmon-text}}. Running it for the first time can be a bit confusing, but it is really quite easy to use. If the program is run with no parameter it will run just once. However, if it is passed a number it will update every <code>N</code> seconds, where <code>N</code> is the argument that was passed.

{{Cmd|distccmon-text 10}}

The other monitoring utility is only enabled when the <code>gtk</code> USE flag is set. This one is GTK+ based, runs in an X environment, and it is quite lovely. For Gentoo, the GUI monitor has been renamed to {{c|distccmon-gui}} to make it less confusing (it is originally called {{c|distccmon-gnome}}).

{{Cmd|distccmon-gui}}

To monitor Portage's {{c|distcc}} usage:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|If the distcc directory is elsewhere, change the <var>DISTCC_DIR</var> variable accordingly.}}

A trick is to set <var>DISTCC_DIR</var> in environment variables:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

Now update the environment:

{{RootCmd|env-update
|source /etc/profile}}

Finally, start the GUI application:

{{RootCmd|distccmon-gui}}

=== SSH for communication ===

<div class="mw-translate-fuzzy">
== Cross-Compilazione ==
</div>

<div class="mw-translate-fuzzy">
La cross-compilazione consiste nell'utilizzare un'architettura per costruire software che verranno eseguiti su un'altra architettura. La cosa può essere semplice come ad esempio usare un Athlon (i686) per compilare un programma per K6-2(i586), o usare uno Sparc per compilare un programma per ppc. Tutto ciò è documentato nella nostra  [[Distcc/Cross-Compiling|Guida a DistCC per la Cross-compilazione]] .
</div>

<div class="mw-translate-fuzzy">
== Usare Distcc per il Bootstrap ==
</div>

<div class="mw-translate-fuzzy">
=== Fase 1: Configurare Portage ===
</div>

Send the public key to each compilation node:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub UserName@CompilationNode}}

<div class="mw-translate-fuzzy">
Avviare il computer con un Gentoo Linux LiveCD e seguire le  [http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1 istruzioni di installazione] fino alla parte riguardante il bootstrap (consultare le [http://www.gentoo.org//doc/en/faq.xml#stage12 Gentoo FAQ] per ulteriori informazioni riguardo il bootstrap.). In seguito, configurare Portage per l'uso di Distcc
</div>

{{RootCmd|ssh-keyscan -t rsa <compilation-node-1> <compilation-node-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Fix the file ownership as follows:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

To set up the hosts <code>test1</code> and <code>test2</code>, run:

<div class="mw-translate-fuzzy">
{{RootCmd|nano -w /etc/portage/make.conf|output=<pre>
FEATURES="distcc"
MAKEOPTS="-jN"
</pre>
}}
</div>

<div class="mw-translate-fuzzy">
{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}
</div>

Finally, tell {{c|distcc}} which SSH binary to use:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
DISTCC_SSH="ssh"
}}

It is not necessary to run the {{Path|distccd}} initscript on the hosts when {{c|distcc}} communicates via SSH.

=== Testing ===

To test {{c|distcc}}, write a simple ''Hello distcc'' program and run {{c|distcc}} in verbose mode to see if it communicates properly.

{{FileBox|filename=main.c|lang=c|1=
#include <stdio.h>
 
int main() {
    printf("Hello distcc!\n");
    return 0;
}
}}

Next, turn on verbose mode, compile the program using {{c|distcc}} and link the generated object file into an executable:

{{Cmd
|export DISTCC_VERBOSE{{=}}1
|distcc gcc -c main.c -o main.o # or 'pump distcc <...>'
|gcc main.o -o main
}}

{{Note|Replace {{c|distcc}} command with {{c|pump distcc}} for use pump mode.}}

There should be a bunch of output about {{c|distcc}} finding its configuration, selecting the host to connect to, starting to connect to it, and ultimately compile {{Path|main.c}}. If the output does not list the desired {{c|distcc}} hosts, check the configuration.

Finally, ensure the compiled program works properly. To test each host, enumerate each compile host in the hosts file.

{{Cmd|./main|output=<pre>Hello distcc!</pre>}}

<div class="mw-translate-fuzzy">
{{Important/it|Effettuare questa modifica cambia alcuni comportamenti di Portage, il che potrebbe portare a strani risultati in futuro. Effettuare tutto ciò solo nel caso in cui si stiano usando CHOST differenti.}}
</div>

<!-- Consider moving this section to a separate subpage if it becomes too large -->

If a problem occurs while using {{c|distcc}}, then this section might help in resolving the problem.

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- To be removed when the bug is resolved and the fixed package is stable -->

As of January 22nd, 2015 emerging fails to create the proper {{Path|distccd.log}} file in {{Path|/var/log/}}. This apparently only effects version 3.1-r8 of distcc. This bug is in the process of being corrected (see {{Bug|477630}}). It is possible to work around this by manually creating the log file, giving it proper ownership, and restarting the distccd daemon:

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

Next update the {{Path|/var/log}} path of the {{c|distccd}} configuration file in {{Path|/etc/conf.d/distccd}} to the {{Path|distcc}} directory created in the step before:

{{FileBox|filename=/etc/conf.d/distccd|title=Updating log path|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

Finally, restart the distccd service:

{{RootCmd|/etc/init.d/distccd restart}}

<div class="mw-translate-fuzzy">
=== -march=native ===
</div>

<div class="mw-translate-fuzzy">
A partire da GCC 4.3.0, il compilatore supporta l'opzione <code>-march=native</code>, che abilita il rilevamento automatico della CPU e le conseguenti ottimizzazioni che val la pena utilizzare. L'uso di questa opzione rappresenta un problema per <code>distcc</code> in quanto abilita il mix di codice ottimizzato per processori differenti (come AMD Athlon e Intel Pentium). ''NON'' usare <code>-march=native</code> o <code>-mtune=native</code> nelle proprie <code>CFLAGS</code> o <code>CXXFLAGS</code> durante le compilazioni con <code>distcc</code>.
</div> 

<div class="mw-translate-fuzzy">
== Gli extra di Distcc ==
</div>

<div class="mw-translate-fuzzy">
=== Distcc Monitor ===
</div>

<div class="mw-translate-fuzzy">
Distcc viene distribuito con due monitor. Quello testuale è sempre incluso, e viene lanciato con <code>distccmon-text</code>. La prima volta può apparire confusionario, ma è molto semplice da usare. Se si lancia il comando senza parametri aggiuntivi verrà eseguito solo una volta, mentre se gli si passa un numero N, verrà aggiornato ogni N secondi.
</div> 

<div class="mw-translate-fuzzy">
L'altro monitor viene attivato solo se è stata abilitata la <code>USE</code> flag <code>gtk</code> o <code>gnome</code> . Questo monitor è basato su gtk+, gira dentro l'ambiente X ed è molto bello. Per Gentoo il monitor con interfaccia grafica risponde al comando <code>distccmon-gui</code>. In altri ambienti dovrebbe rispondere al nome di <code>distccmon-gnome</code>.
</div>

{{RootCmd|export CC{{=}}'gcc' CXX{{=}}'c++'}}

It is also possible to set the <var>CC</var> and <var>CXX</var> variables in {{Path|/etc/portage/make.conf}} to the values list in the command above.

<div class="mw-translate-fuzzy">
{{RootCmd|distccmon-text N}}
</div>

{{Note|Having the right version of gcc as a slot on a server isn’t enough. Portage uses {{c|distcc}} as a replacement for the compiler referenced by the <var>CHOST</var> variable (i.e. <code>x86_64-pc-linux-gnu</code>) and {{c|distccd}} invokes it by exactly same name. The right version of gcc should be a default system’s compiler on all involved compilation hosts.}}

<div class="mw-translate-fuzzy">
o lanciare <code>distccmon-gui</code>:
</div>

<div class="mw-translate-fuzzy">
{{RootCmd|distccmon-gui}}
</div>

Heed the following warning:

{{Warning|Do '''not''' use <code>-march{{=}}native</code> or <code>-mtune{{=}}native</code> in the <var>CFLAGS</var> or <var>CXXFLAGS</var> variables of {{Path|make.conf}} when compiling with {{c|distcc}}.}}

See the [[#CFLAGS_and_CXXFLAGS|CFLAGS and CXXFLAGS section]] and [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc] for more information.

=== Get more output from emerge logs ===

It is possible to obtain more logging by enabling verbose mode. This is accomplished by adding <var>DISTCC_VERBOSE</var> to {{Path|/etc/portage/bashrc}}:

{{FileBox|title=Enabling verbose logging|filename=/etc/portage/bashrc|lang=bash|1=
export DISTCC_VERBOSE=1
}}

The verbose logging can then be found in {{Path|/var/tmp/portage/$CATEGORY/$PF/temp/build.log}}.

Keep in mind that the first {{c|distcc}} invocation visible in {{Path|build.log}} isn’t necessary the first {{c|distcc}} call during a build process. For example a build server can get a one-minute backoff period during the configuration stage when some checks are performed using a compiler ({{c|distcc}} sets a backoff period when compilation on a remote server failed, it doesn’t matter whether it failed on local machine or not).

Dig into the {{Path|/var/tmp/portage/$CATEGORY/$PF/work/}} directory to investigate such situations. Find other logs, or call {{c|make}} explicitly from within the working directory.

Another interesting variable to use is <var>DISTCC_SAVE_TEMPS</var>. When set, it saves the standard output/error from a remote compiler which, for Portage builds, results in files in the {{Path|/var/tmp/portage/$CATEGORY/$PF/temp/}} directory.

{{FileBox|title=Saving temporary output|filename=/etc/portage/bashrc|lang=bash|1=
export DISTCC_SAVE_TEMPS=1
}}

<div class="mw-translate-fuzzy">
=== Fase 2: Procurarsi Distcc ===
</div>

<div class="mw-translate-fuzzy">
Installare distcc:
</div>

== External resources ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc]
* [https://github.com/distcc/distcc Distcc homepage]

[[Category:Compilation]]
{{Migrated|originalauthors=Lisa Seelye, {{Dev|floppym}}, Erwin, {{Dev|SwifT}}, Lars Weiler, Tiemo Kieft, and {{Dev|nightmorph}}}}
