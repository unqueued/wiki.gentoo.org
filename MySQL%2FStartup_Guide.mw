<languages />
<translate>

<!--T:138-->
{{Metadata|abstract=This document helps a user set up and use MySQL.}}

<!--T:1-->
This document helps a user set up and use MySQL.

== Getting Started With MySQL == <!--T:2-->

=== Background === <!--T:3-->

<!--T:4-->
MySQL is a popular database server that is used in various applications. SQL stands for (S)tructured (Q)uery (L)anguage, which is what MySQL uses to communicate with other programs. On top of that, MySQL has its own expanded SQL functions to provide additional functionality to users. In this document, we'll look at how to do the initial MySQL installation, set up databases and tables, and create new users. Let's start out with the installation. 

=== MySQL Installation === <!--T:5-->

<!--T:6-->
First make sure you have MySQL installed on your system. In case you need specific functionality from MySQL, please make sure you have the required USE flags enabled as they will help fine tune your installation. 

<!--T:7-->
{{Emerge|mysql}}

<!--T:8-->
Upon completion of the installation, you will see the following notice: 

<!--T:9-->
{{Code|MySQL einfo message|<pre>
You might want to run:
"emerge --config =dev-db/mysql-[version]"
if this is a new install.
</pre>
}}

<!--T:10-->
Since this is a new installation, we run the command. You need to press <code>ENTER</code> when prompted while configuring the MySQL database. The configuration sets up the main MySQL database which contains administrative information such as databases, tables, users, permissions and more. The configuration recommends that you change your root password as soon as possible. We will definitely do this, otherwise someone could come along by chance and hack our default setup MySQL server. 

<!--T:11-->
{{RootCmd|emerge --config {{=}}dev-db/mysql-[version]|output=<pre>
 * MySQL DATADIR is /var/lib/mysql
 * Press ENTER to create the mysql database and set proper
 * permissions on it, or Control-C to abort now...
 
   Preparing db table
   Preparing host table
   Preparing user table
   Preparing func table
   Preparing tables_priv table
   Preparing columns_priv table
   Installing all prepared tables
 
   To start mysqld at boot time you have to copy support-files/mysql.server
   to the right place for your system
 
   PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
   To do so, issue the following commands to start the server
   and change the applicable passwords:
 
   /etc/init.d/mysql start
   /usr/bin/mysqladmin -u root -h pegasos password 'new-password'
   /usr/bin/mysqladmin -u root password 'new-password'
   Depending on your configuration, a -p option may be needed
   in the last command. See the manual for more details.
</pre>}}

<!--T:12-->
Some MySQL non-ebuild specific information has been removed from here so as to keep this document as consistent as possible.

<!--T:13-->
{{Important|As of mysql-4.0.24-r2, passwords are entered during the config phase making root password entry more secure.}}

<!--T:14-->
The config script has already printed out the commands we need to run to setup our password, so we shall now run them. 

<!--T:15-->
{{RootCmd|/etc/init.d/mysql start|output=<pre>
 * Re-caching dependency info (mtimes differ)...
 * Starting mysqld (/etc/mysql/my.cnf) ...        [ ok ]
</pre>}}

<!--T:16-->
{{RootCmd|/usr/bin/mysqladmin -u root -h localhost password 'new-password'}}

<!--T:17-->
You can now test that your root password was successfully configured by trying to login to your MySQL server: 

<!--T:18-->
{{Cmd|mysql -u root -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 4 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

<!--T:19-->
The <code>-u</code> switch sets the user that will be logging in. The <code>-h</code> switch sets the host. This will usually be <code>localhost</code> unless you are setting up a remote server. Finally, <code>-p</code> tells the mysql client that you will be entering a password to access your database. Notice the <code>mysql></code> prompt. This is where you type in all your commands. Now that we're in the mysql prompt as the root user, we can begin to setup our database. 

== Setting Up The Database == <!--T:20-->

=== Creating A Database === <!--T:21-->

<!--T:22-->
We have logged in and a mysql prompt is displayed. First let's take a look at the databases we currently have. To do so, we use the <code>SHOW DATABASES</code> command. 

<!--T:23-->
{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| mysql    |
| test     |
+----------+
2 rows in set (0.09 sec)
</pre>
}}

<!--T:24-->
{{Important|Please remember that MySQL commands should end with a semicolon -- <code>;</code>}}

<!--T:25-->
Despite the fact that a test database is already created, we are going to create our own. Databases are created using the <code>CREATE DATABASE</code> command. We'll create one named "gentoo". 

<!--T:26-->
{{Cmd|CREATE DATABASE gentoo;|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.08 sec)
</pre>
}}

<!--T:27-->
The response lets us know that the command was executed without any errors. In this case, 1 row was modified. This is a reference to the main mysql database, which carries a list of all the databases. You won't need to worry too much about the background details. The last number is how fast the query was executed. We can verify the database was created by running the <code>SHOW DATABASES</code> command again. 

<!--T:28-->
{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| gentoo   |
| mysql    |
| test     |
+----------+
3 rows in set (0.00 sec)
</pre>
}}

<!--T:29-->
Indeed our database has been created. In order to work with creating tables for our new gentoo database, we need to select it as our current database. To do so, we use the <code>USE</code> command. The <code>USE</code> command takes the name of the database you wish to use as your current database. Another option is to set it on the command line after the <code>-D</code> switch. Let's go ahead and switch to the gentoo database. 

<!--T:30-->
{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Database changed
</pre>
}}

<!--T:31-->
And the current database is now our previously created gentoo database. Now that we're using it, we can start to create some tables and put information in them.

== Working With Tables In MySQL == <!--T:32-->

=== Creating a Table === <!--T:33-->

<!--T:34-->
In the structure of MySQL, there are databases, tables, records, and fields. Databases hold together tables, tables hold together records, records hold together fields, which contain the actual information. This structure lets users select how they want to access their information. So far we've dealt with databases, now let's work with tables. First off, tables can be listed similiarly to databases using the <code>SHOW TABLES</code> command. Right now there are no tables in our gentoo database, as running the command will show us: 

<!--T:35-->
{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
Empty set (0.00 sec)
</pre>
}}

<!--T:36-->
This means we need to create some tables. In order to do so, we use the <code>CREATE TABLE</code> command. However, this command is quite different from simple <code>CREATE DATABASE</code> command. This command takes a list of arguments. The form is as follows: 

<!--T:37-->
{{Code|CREATE TABLE Syntax|<pre>
CREATE TABLE [table_name] ([field_name] [field_data_type]([size]));
</pre>
}}

<!--T:38-->
'''table_name''' is the name of the table we wish to create. In this case, let's make a table named <code>developers</code>. This table will contain the developer's name, email and job.

<!--T:139-->
'''field_name''' will contain the name of the field. We have 3 required names in this case: name, email, and job.

<!--T:140-->
The '''field_data_type''' is what type of information will be stored. The different formats available can be found at the [http://dev.mysql.com/doc/mysql/en/column-types.html MySQL Column Types Page] . For our purposes, we'll use the <code>VARCHAR</code> data type for all of our fields. <code>VARCHAR</code> is one of the simplest of data types when it comes to working with strings. 

<!--T:141-->
'''size''' is how much of data a single field will store. In this case, we'll use 128. This means that the field can have <code>VARCHAR</code> data that is 128 bytes. You can safely think of this as 128 characters for the time being, though there is a somewhat more technical explanation that the above site will provide you with. Now that we know how we are going to create the table, let's do it. 

<!--T:39-->
{{Cmd|CREATE TABLE developers ( name VARCHAR(128), email VARCHAR(128), job VARCHAR(128));|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.11 sec)
</pre>
}}

<!--T:40-->
Looks like our table was created ok. Let's check it with the <code>SHOW TABLES</code> command: 

<!--T:41-->
{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+------------------+
| Tables_in_gentoo |
+------------------+
| developers       |
+------------------+
1 row in set (0.00 sec)
</pre>
}}

<!--T:42-->
Yes, there's our table. However, it doesn't seem to have any information on the types of fields we setup. For that, we use the <code>DESCRIBE</code> command (or <code>DESC</code> for short), which takes the name of the table as its argument. Let's see what that gives us for our developers table. 

<!--T:43-->
{{Cmd|DESCRIBE developers;|prompt=mysql&gt; |output=<pre>
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| name  | varchar(128) | YES  |     | NULL    |       |
| email | varchar(128) | YES  |     | NULL    |       |
| job   | varchar(128) | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
</pre>
}}

<!--T:44-->
This shows the different fields and their types. It also shows a few extra attributes that are beyond the scope of this howto. Feel free to refer to the [http://dev.mysql.com/doc/mysql/en/ MySQL Reference Manual] for more information. We now have a table to work with. Now let's go ahead and populate it.

=== Populating Our MySQL Database === <!--T:45-->

<!--T:46-->
We populate a table (or add data) using the <code>INSERT</code> command. Like the <code>CREATE TABLE</code> command, it also has a specific format: 

<!--T:47-->
{{Code|INSERT Syntax|<pre>
INSERT INTO table (col1, col2, ...) VALUES('value1', 'value2', ...);
</pre>
}}

<!--T:48-->
This command is used to insert a record into table. table contains the MySQL table we wish to enter the information into. The table name may be followed by the list of columns to insert data into and <code>VALUES()</code> contains the values you wish to insert into the table. You may omit the list of columns if you insert a value into each one and if you write the values in the same order the columns have been defined. In this case, we want to insert data into the developers table. Let's insert sample records: 

<!--T:49-->
{{Cmd|INSERT INTO developers VALUES('Joe Smith', 'joesmith@gentoo.org', 'toolchain');|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.06 sec)
## (If you don't know the order of the columns in the table or want to insert an incomplete record)
mysql> INSERT INTO developers (job, name) VALUES('outsourced', 'Jane Doe');
Query OK, 1 row affected (0.01 sec)
</pre>
}}

<!--T:50-->
According to our return result, it appears that the record was inserted correctly. What if we want to input more information than just one record? That's where the <code>LOAD DATA</code> command comes into play. This loads records from a tab separated file. Let's try that by editing a file in our home directory with the records. We'll call this file {{Path|records.txt}} . Here's a sample: 

<!--T:51-->
{{Code|~/records.txt|<pre>
John Doe	johndoe@gentoo.org	portage
Chris White	chriswhite@gentoo.org	documentation
Sam Smith	samsmith@gentoo.org	amd64
</pre>
}}

<!--T:52-->
{{Important|Be sure you know what data you're dealing with. It's very unsafe to use <code>LOAD DATA</code> when you are uncertain of the file's contents!}}

<!--T:53-->
Now the <code>LOAD DATA</code> command has a somewhat elongated definition, but we'll use the simplest form here. 

<!--T:54-->
{{Code|LOAD DATA Syntax|<pre>
LOAD DATA LOCAL INFILE '/path/to/filename' INTO TABLE table;
</pre>
}}

<!--T:55-->
{{Path|/path/to/filename}} is the directory and filename that will be used. table is the name of our table. In this case, our file is {{Path|~/records.txt}} and the table is developers. 

<!--T:56-->
{{Cmd|LOAD DATA LOCAL INFILE '~/records.txt' INTO TABLE developers;|prompt=mysql&gt; |output=<pre>
Query OK, 3 rows affected (0.00 sec)
Records: 3  Deleted: 0  Skipped: 0  Warnings: 0
</pre>
}}

<!--T:57-->
{{Important|If you come up with any strange behavior, make sure your fields are separated by tabs. If you paste information into your infile from another source, it may convert your tabs to spaces.}}

<!--T:58-->
That worked well. However, this simply inserts records, and does not give you any sort of control over MySQL. Many web applications use sql scripts in order to setup MySQL quickly and easily. If you want to use an sql script, you'll need to run mysql in batch mode, or source the file. Here's an example of running mysql in batch mode: 

<!--T:59-->
{{Cmd|mysql -u root -h localhost -p < sqlfile}}

<!--T:60-->
Like <code>LOAD DATA</code> , be sure you can tell what {{Path|sqlfile}} does. ''Failure to do so may cause your database to be compromised!'' Another way you can accomplish this is to use the <code>source</code> command. This command will run mysql commands from an sql file while in the mysql interactive mode. Here is how to source an sql file: 

<!--T:61-->
{{Cmd|source sqlfile;|prompt=mysql&gt; }}

<!--T:62-->
If you see a web application wanting you to run an sql file, the two above commands can be used to accomplish that task. We have our table setup, so how do we check our fields? We do this by searching our table with queries. 

=== Browsing MySQL Tables With Queries === <!--T:63-->

<!--T:64-->
Queries are one of the main features of any SQL database. They help us turn data in our tables into something useful. Most queries are done with the <code>SELECT</code> command. The <code>SELECT</code> command is fairly complex, and we're only going to look at three main forms of the command in this document. 

<!--T:65-->
{{Code|SELECT forms|<pre>
## (Select all entries in a table)
SELECT * FROM table;
## (Select specific entries in a table)
SELECT * FROM table WHERE field=value;
## (Select specific fields)
SELECT field1,field2,field3 FROM table [WHERE field=value];
</pre>
}}

<!--T:66-->
Let's take a quick look at the first form. It's relatively simple and gives you an overall look of your table. We'll go ahead and run it to see what data we have so far. 

<!--T:67-->
{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

<!--T:68-->
We see both the data we inserted through <code>INSERT</code> and those inserted by <code>LOAD DATA</code> present. Now, let's say that we just want to see the record for Chris White. We can do so with the second form of select as shown below. 

<!--T:69-->
{{Cmd|SELECT * FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+---------------+
| name        | email                 | job           |
+-------------+-----------------------+---------------+
| Chris White | chriswhite@gentoo.org | documentation |
+-------------+-----------------------+---------------+
1 row in set (0.08 sec)
</pre>
}}

<!--T:70-->
As expected, the specific entry that we were looking for has been selected. Now, let's say we only wanted to know the person's job and email address, not their name. We can do so with the third form of <code>SELECT</code> as shown here. 

<!--T:71-->
{{Cmd|SELECT email,job FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-----------------------+---------------+
| email                 | job           |
+-----------------------+---------------+
| chriswhite@gentoo.org | documentation |
+-----------------------+---------------+
1 row in set (0.04 sec)
</pre>
}}

<!--T:72-->
This method of selection is a lot easier to manage, expecially with larger amounts of information, as we'll see later on. Right now, being the root mysql user, we have unlimited permissions to do what we wish with the MySQL database. In a server environment, a user with such privileges can be quite problematic. In order to control who does what with the databases, we setup privileges. 

== MySQL Privileges == <!--T:73-->

=== Granting Privileges with GRANT === <!--T:74-->

<!--T:75-->
Privileges are what kind of access users have to databases, tables, pretty much anything. Right now in the gentoo database, the MySQL root account is the only account that can access it, given its permissions. Now, let's create two somewhat generic users, guest and admin, who will access the gentoo database and work with the information in it. The guest account will be a restricted one. All it will be able to do is get information from the database, and that's it. admin will have the same control as root, but only for the gentoo database (not the main mysql databases). Before we start on that, let's have a closer look at this somewhat simplified format of the <code>GRANT</code> command. 

<!--T:76-->
{{Code|GRANT Syntax|<pre>
GRANT [privileges] ON database.* TO '[user]'@'[host]' IDENTIFIED BY '[password]';
</pre>
}}

<!--T:77-->
{{Note|<code>GRANT</code> is considered to be the way to create a user. Later versions of MySQL, however, do contain a<code>CREATE_USER</code> function, though<code>GRANT</code> is still preferred.}}

<!--T:78-->
First we have the privileges we wish to assign. With what we've learned so far, here are some of the privileges you can set: 

<!--T:79-->
* <code>ALL</code> - Gives the all privilege control for the database
* <code>CREATE</code> - Allows users to create tables
* <code>SELECT</code> - Allows users to query tables
* <code>INSERT</code> - Allows users to insert data into a table
* <code>SHOW DATABASES</code> - Allows users to see a list of databases
* <code>USAGE</code> - User has no privileges
* <code>GRANT OPTION</code> - Allows users to grant privileges

<!--T:80-->
{{Note|If you're running MySQL to communicate data to a web application, <code>CREATE</code> , <code>SELECT</code> , <code>INSERT</code> (discussed here), <code>DELETE</code> and <code>UPDATE</code> (for further infomation look up the [http://dev.mysql.com/doc/mysql/en/grant.html MySQL Reference Manual - GRANT and REVOKE Syntax] section) are the only permissions you will most likely need. A lot of people make the mistake of granting all permissions when it's not really necessary. Check with the application developers to see if such permissions will cause issues with general operation.}}

<!--T:81-->
For our admin user, ALL will do. For the guest user, <code>SELECT</code> will be sufficient for read only access. The database is the database we wish the user to have these permissions on. In this example, gentoo is the database. The .* means all tables. If you wanted to, you could apply per table access. user is the name of the user and host is the hostname the user will be accessing from. In most cases, this will be localhost. Finally, password is the user's password. Given the information, let's go ahead and create our users. 

<!--T:82-->
{{Cmd|GRANT ALL ON gentoo.* TO 'admin'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

<!--T:83-->
{{Cmd|GRANT SELECT ON gentoo.* TO 'guest'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

<!--T:84-->
Now that we have the users setup, let's test them out. First we quit mysql by typing <code>quit</code> at the command prompt: 

<!--T:85-->
{{Cmd|quit|prompt=mysql&gt; }}

<!--T:86-->
We're now back at the console. Now that we have our users setup, let's go ahead and see what they can do.

=== Testing User Permissions === <!--T:87-->

<!--T:88-->
We shall now attempt to login as the guest user. Currently, the guest user has <code>SELECT</code> only privileges. This basically comes down to being able to search and nothing more. Go ahead and login with the guest account. 

<!--T:89-->
{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 6 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

<!--T:90-->
Now we should test the user restriction(s). Let's switch to the gentoo database: 

<!--T:91-->
{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
</pre>
}}

<!--T:92-->
Now let's try to do something we are not supposed to. We'll attempt to create a table. 

<!--T:93-->
{{Cmd|CREATE TABLE test (test VARCHAR(20), foobar VARCHAR(2));|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

<!--T:94-->
As you can see, this function fails, as our user does not have the appropriate access. However, one access we did grant is the <code>SELECT</code> statement. Let's go ahead and try that: 

<!--T:95-->
{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

<!--T:96-->
The command succeeds, and we're given a glimpse of what user permissions can do. We did, however, create an admin account as well. This was created to show that even all permissions granted users can still have limitations. Go ahead and quit MySQL and login as the admin. 

<!--T:97-->
{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

<!--T:98-->
{{Cmd|mysql -u admin -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 7 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

<!--T:99-->
To begin, we'll try creating a new database with our admin user. This admin user will have access similiar to the root MySQL account, and will be able to do any kind of modification to the gentoo database it chooses. This will test the user's access to the main MySQL database. Remember ealier that we only set permissions to a specific database. 

<!--T:100-->
{{Cmd|CREATE DATABASE gentoo2;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'admin@localhost' to database 'gentoo2'
</pre>
}}

<!--T:101-->
Indeed, the admin user cannot create databases on the main MySQL database, despite all his permissions on the gentoo database. However, we're still able to use the admin account to modify the gentoo database, as shown here by this example data insertion. 

<!--T:102-->
{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql> INSERT INTO developers VALUES('Bob Simmons', 'bobsimmons@gentoo.org', 'python');
Query OK, 1 row affected (0.08 sec)
</pre>
}}

<!--T:103-->
The admin user can access the database as they please. Now sometimes, we need to get rid of user permissions. This could be anything from a problematic user to a retired employee. Let's take a look at how to disable user permissions with the <code>REVOKE</code> command. 

=== Removing User Access With The REVOKE Command === <!--T:104-->

<!--T:105-->
The <code>REVOKE</code> command lets us deny access to a user. We can either deny full access, or specific access. In fact, the format is very similiar to <code>GRANT</code> . 

<!--T:106-->
{{Code|REVOKE Syntax|<pre>
REVOKE [privileges] ON database.* FROM '[user]'@'[host]';
</pre>
}}

<!--T:107-->
Options here are explained in the <code>GRANT</code> command section. In this section however, we're going to deny full access to a user. Let's say we find out the guest account is causing some problems security wise. We decide to revoke all privileges. We login as root and do the needful. 

<!--T:108-->
{{Cmd|REVOKE ALL ON gentoo.* FROM 'guest'@'localhost';|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

<!--T:109-->
{{Note|In this case, user access is simple, so per database revoking is not a problem. However, in larger cases, you would most likely be using *.* instead of gentoo.* to remove user access to all other databases.}}

<!--T:110-->
Now let's quit and attempt to login as a guest user. 

<!--T:111-->
{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 9 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

<!--T:112-->
Although we're able to login, our access to gentoo is now gone. 

<!--T:113-->
{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

<!--T:114-->
And our problematic user is no longer able to access the gentoo database. Please note that the user was still able to login. That is because they remain in the main MySQL database. Let's take a look at how to completely remove an account with <code>DELETE</code> and the MySQL user table. 

=== Removing Accounts Using DELETE === <!--T:115-->

<!--T:116-->
The MySQL user table is a listing of all users and information about them. Make sure you're logged in as root. Then go ahead and use the main MySQL database. 

<!--T:117-->
{{Cmd|USE mysql;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql>
</pre>
}}

<!--T:118-->
Now let's see what tables the mysql database has: 

<!--T:119-->
{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+-----------------+
| Tables_in_mysql |
+-----------------+
| columns_priv    |
| db              |
| func            |
| host            |
| tables_priv     |
| user            |
+-----------------+
6 rows in set (0.00 sec)
</pre>
}}

<!--T:120-->
The user table is the table we're after. However, the user table contains 30 different fields, making it very hard to read. In order to make things easier to read, we'll go ahead and use the third version of the <code>SELECT</code> statement. The fields we're after are Host and User. 

<!--T:121-->
{{Cmd|SELECT Host,User FROM user WHERE User {{=}} 'guest';|prompt=mysql&gt; |output=<pre>
+-----------+-------+
| Host      | User  |
+-----------+-------+
| localhost | guest |
+-----------+-------+
1 row in set (0.00 sec)
</pre>
}}

<!--T:122-->
Now that we have our information, we can get rid of the guest user. This is done with the <code>DELETE</code> command and the syntax is shown below. 

<!--T:123-->
{{Code|DELETE Syntax|<pre>
DELETE FROM table WHERE field='value';
</pre>
}}

<!--T:124-->
You may notice that <code>DELETE</code> is somewhat similiar to the <code>SELECT</code> statement in its format. In this case, the field will be User, and the value guest. This will delete the record in the user table where the user is guest, successfully deleting our guest user account. Let's go ahead and do that: 

<!--T:125-->
{{Cmd|DELETE FROM user WHERE User{{=}}'guest';|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.07 sec)
</pre>}}

<!--T:126-->
{{Cmd|FLUSH PRIVILEGES;|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

<!--T:127-->
It seems to have worked ok. Let's test by logging out and attempting to login as our guest user. 

<!--T:128-->
{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

<!--T:129-->
{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
ERROR 1045: Access denied for user: 'guest@localhost' (Using password: YES)
</pre>
}}

<!--T:130-->
Our user is now successfully deleted! 

=== Conclusion === <!--T:131-->

<!--T:132-->
While this guide focuses mainly on setting up MySQL on the command line, a few alternatives are available in GUI form: 

<!--T:133-->
* [http://www.phpmyadmin.net/home_page/ phpMyAdmin] - Popular php based MySQL administration tool.
* [http://sourceforge.net/projects/mysqlnavigator/ mysqlnavigator] - QT frontend to MySQL.
* [http://gmyclient.sourceforge.net/ gmyclient] - A GNOME based MySQL client.
* [http://www.knoda.org/ knoda] - A KDE MySQL client.

<!--T:134-->
This ends the MySQL introductory tutorial. I hope this gives you a better understanding of the basics behind MySQL and getting a database set up.

== Acknowledgements == <!--T:135-->

<!--T:136-->
We would like to thank the following authors and editors for their contributions to this guide:

<!--T:137-->
* Chris White
* Shyam Mani
* Xavier Neys

</translate>

[[Category:Database]]
