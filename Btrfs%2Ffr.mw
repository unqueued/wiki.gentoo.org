<languages />

{{InfoBox stack
|{{InfoBox homepage|http://btrfs.wiki.kernel.org|header=true}}
|{{InfoBox gitweb|http://git.kernel.org/cgit/linux/kernel/git/kdave/btrfs-progs.git|raw=true|text=Userspace}}
|{{InfoBox gitweb|http://git.kernel.org/cgit/linux/kernel/git/mason/linux-btrfs.git/tree/fs/btrfs?id{{=}}HEAD|raw=true|text=Kernel}}
|{{InfoBox wikipedia}}
|{{InfoBox ohloh}}
}}

'''Btrfs''' is [[Article description::a copy-on-write (CoW) [[filesystem]] for Linux aimed at implementing advanced features while focusing on fault tolerance, repair, and easy administration.]] Jointly developed at Oracle, Red Hat, Fujitsu, Intel, SUSE, STRATO, and many others,  btrfs is licensed under the [[wikipedia:GNU_General_Public_License|GPL]] and open for contribution from anyone.

== Fonctionnalités ==

Ext4 is safe and stable and can handle large filesystems with extents, but why switch?  While it is true that Btrfs is still considered experimental and is growing in stability, the time when Btrfs will become the default filesystem for Linux systems is getting closer. Some Linux distributions have already begun to switch to it with their current releases. Btrfs has a number of advanced features in common with ZFS, which is what made the ZFS filesystem popular with BSD distributions and NAS devices.

* '''Copy on Write (CoW) and snapshotting''' - Make incremental backups painless even from a "hot" filesystem or virtual machine (VM).
* '''File level checksums''' - Metadata for each file includes a checksum that is used to detect and repair errors.
* '''Compression''' - Files may be compressed and decompressed on the fly, which speeds up read performance.
* '''Auto defragmentation''' - The filesystems are tuned by a background thread ''while'' they are in use.
* '''Subvolumes''' - Filesystems can share a single pool of space instead of being put into their own partitions.
* '''RAID''' - Btrfs does its own RAID implementations so LVM or {{c|mdadm}} are not required in to have RAID. Currently RAID 0 and 1 are supported; RAID 5 and 6 are upcoming.
* '''Partitions are optional''' - While Btrfs can work with partitions, it has the potential to use raw devices ({{Path|/dev/<device>}}) directly.
* '''Data deduplication''' - There is limited data deduplication support; however, deduplication will eventually become a standard feature in Btrfs. This enables Btrfs to save space by comparing files via binary diffs.

{{Tip|For an up-to-date and somewhat exhaustive listing of features see the [https://btrfs.wiki.kernel.org/index.php/Status upstream wiki's status page]. Not all features are sufficiently mature for wide use though.}}

Down the road, new clustered filesystems will readily take advantage of Btrfs with its copy on write and other advanced features for their object stores. [https://ceph.com/ Ceph] is one example of a clustered filesystem that looks very promising, and can take advantage of Btrfs.

== Installation ==

=== Noyau ===

Activez les options suivantes du noyau pour activer la prise en charge de Btrfs :

{{KernelBox|title=Activate Btrfs in the kernel|1=
File systems  --->
    <*> Btrfs filesystem
}}

=== Emerge ===

Le paquet {{Package|sys-fs/btrfs-progs}} contient les utilitaires nécessaire au fonctionnent de Btrfs.

{{Emerge|sys-fs/btrfs-progs}}

== Utilisation ==

Typing long Btrfs commands can quickly become a hassle. Each command (besides the initial {{c|btrfs}} command) can be reduced to a very short set of instructions. This method is helpful when working from the command line to reduce the amount of characters typed.

For example, to defragment a filesystem located at {{Path|/}}, the following shows the long command:

{{RootCmd|btrfs filesystem defragment -v / }}

Shorten each of the longer commands after the {{c|btrfs}} command by reducing them to their unique, shortest prefix. In this context, unique means that no ''other'' {{c|btrfs}} commands will match the command at the command's shortest length. The shortened version of the above command is:

{{RootCmd|btrfs fi de -v / }}

No other {{c|btrfs}} commands start with <code>fi</code>; <code>filesystem</code> is the only one. The same goes for the <code>de</code> sub-command under the <code>filesystem</code> command.

=== Creation ===

{{Warning|The {{c|mkfs.btrfs}} command irreversibly destroys any content of the partition it is told to format. Please be sure the correct drive and partition have been selected ''before'' running any {{c|mkfs}} command!}}

To create a Btrfs filesystem on the {{Path|/dev/sdXN}} partition:

{{RootCmd|mkfs.btrfs /dev/sdXN}}

In the example above, replace <code>N</code> with the partition number and <code>X</code> with the disk letter that is to be formatted. For example, to format the third partition of the first drive in the system with Btrfs, run:

{{RootCmd|mkfs.btrfs /dev/sda3}}

{{Important|The last number column in {{Path|/etc/fstab}} should be <code>0</code> for all Btrfs partitions. {{c|fsck.btrfs}} and {{c|btrfsck}} should not be run during each system boot.}}

=== Mount ===

Après création, les systèmes de fichiers peuvent être montés de différentes manières :

* {{c|[[mount]]}} - Manual mount.
* {{Path|[[fstab]]}} - Defining mount points in {{Path|/etc/fstab}} enables automatic mounts on system boot.
* [[Removable media]] - Automatic mounts on demand (useful for USB drives).
* [[AutoFS]] - Automatic mount on filesystem access.

=== Conversion de systèmes de fichiers basés sur ext* ===

Il est possible de convertir des systèmes de fichiers ext2, ext3, et ext4 en Btrfs en utilisant l'utilitaire {{c|btrfs-convert}}.

The following instructions only supports the conversion of filesystems that are unmounted. To convert the root partition, boot to a system rescue disk (SystemRescueCD works nicely) and run on the conversion commands on the root partition.

First be sure the the mount point is unmounted:

{{RootCmd|umount ''<mounted_device>''}}

Vérifiez l'intégrité du système de fichier en utilisant l'outil adéquat {{c|fsck}}. Dans l'exemple suivant, le système de fichier est du ext4 :

{{RootCmd|fsck.ext4 -f ''<unmounted_device>''}}

Utilisez {{c|btrfs-convert}} pour convertir un périphérique formaté en ext*, en Btrfs :

{{RootCmd|btrfs-convert ''<unmounted_device>''}}

Assurez-vous d'éditer {{Path|/etc/fstab}} après que le périphérique est été formaté, en changeant la colonne correspondant au système de fichiers utilisé, d'ext4 en Btrfs :

{{FileBox|filename=/etc/fstab|title=Changement d'ext4 en Btrfs|1=
<périphérique>   <point de montage>  btrfs  defaults  0 0
}}

=== Défragmentation ===

Une autre fonctionnalité du Btrfs est la défragmentation en ligne. Pour défragmenter un système de fichiers racine en Btrfs, lancez :

{{RootCmd|btrfs filesystem defragment -r -v /}}

{{Warning|Defragmenting with kernel versions < 3.9 or ≥ 3.14-rc2 as well as with Linux stable kernel versions ≥ 3.10.31, ≥ 3.12.12 or ≥ 3.13.4 breaks up ref-links between files and their COW copies<ref>[https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs-filesystem man page for btrfs-filesystem(8)], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on 6th February, 2017.</ref> and thus may increase space usage considerably. Make sure to have enough free space available and not too many snapshots on the drive as full btrfs partitions can get really slow.}}

=== Compression ===

Btrfs supporte la compression transparente : trois alghorithmes de compression sont disponibles zlib, lzo, et zstd<ref>https://btrfs.wiki.kernel.org/index.php/Compression#Can_I_set_the_compression_level.3F</ref>.

Il est possible de compresser des fichiers spécifiques, en utilisant l'attribut suivant :

{{Cmd|chattr +c}}

The <code>compress</code> mount option sets the default behavior to compress all the newly created files. To re-compress the whole filesystem, run the following command:

{{RootCmd|btrfs filesystem defragment -r -v -clzo /}}

Depending on the CPU and disk performance, using lzo compression could improve the overall throughput.

It is possible to use the zlib compression algorithm instead of lzo. Zlib is slower but has a higher compression ratio:

{{RootCmd|btrfs filesystem defragment -r -v -czlib /}}

==== Niveau de compression ====

Depuis la version 4.15.0 du noyau<ref>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f51d2b59120ff364a5e612a594ed358767e1cd09</ref>, la compression utilisant zlib peut maintenant utiliser différents niveaux de compression, allant de 1 à 9. Par exemple, pour utiliser le niveau de compression maximum au montage :

{{RootCmd|mount -o compress{{=}}zlib:9 /dev/sdXY /chemin/vers/point_de_montage}}

Ou pour utiliser le niveau de compression minimal :

{{RootCmd|mount -o compress{{=}}zlib:1 /dev/sdXY /chemin/vers/point_de_montage}}

Ou ajuster la compression au remontage :

{{RootCmd|mount -o remount,compress{{=}}zlib:3 /chemin/vers/point_de_montage}}

The compression level should be visible in {{Path|/proc/mounts}} or by checking the most recent output of <code>dmesg |grep -i btrfs</code>.

{{RootCmd|dmesg {{!}}grep -i btrfs |output=<pre>
[    0.495284] Btrfs loaded, crc32c=crc32c-intel
[ 3010.727383] BTRFS: device label My Passport devid 1 transid 31 /dev/sdd1
[ 3111.930960] BTRFS info (device sdd1): disk space caching is enabled
[ 3111.930973] BTRFS info (device sdd1): has skinny extents
[ 9428.918325] BTRFS info (device sdd1): use zlib compression, level 3
</pre>
}}


==== Ratio de compression et usage du disque ====

The usual userspace tools for determining used and free space like <code>du</code> and <code>df</code> may provide inaccurate results on a ''Btrfs'' partition due to inherent design differences in the way files are written compared to, for example, ''ext2/3/4''<ref>https://btrfs.wiki.kernel.org/index.php/Compression#How_can_I_determine_compressed_size_of_a_file.3F</ref>.

It is therefore advised to use the du/df alternatives provided by the btrfs userspace tool <code>btrfs filesystem</code>. In Addition to that, The <code>compsize</code> tool found from the [https://packages.gentoo.org/packages/sys-fs/compsize sys-fs/compsize] package can be helpful in providing additional information regarding compression ratios and the disk usage of compressed files. 
The following are example uses of these tools for a btrfs partition mounted under {{Path|/media/drive}}.


{{Cmd|btrfs filesystem du -s /media/drive |output=<pre>
     Total   Exclusive  Set shared  Filename
 848.12GiB   848.12GiB       0.00B  /media/drive/
</pre>
}}

{{Cmd|btrfs filesystem df /media/drive |output=<pre>
Data, single: total=846.00GiB, used=845.61GiB
System, DUP: total=8.00MiB, used=112.00KiB
Metadata, DUP: total=2.00GiB, used=904.30MiB
GlobalReserve, single: total=512.00MiB, used=0.00B
</pre>}}

{{Cmd|compsize /media/drive |output=<pre>
Processed 2262 files, 112115 regular extents (112115 refs), 174 inline.
Type       Perc     Disk Usage   Uncompressed Referenced  
TOTAL       99%      845G         848G         848G       
none       100%      844G         844G         844G       
zlib        16%      532M         3.2G         3.2G 
</pre>
}}

=== Périphériques multiples (RAID) ===

Btrfs can be used with multiple devices in order to create RAIDs. Using Btrfs to create filesystems that span multiple devices is much easier than creating using {{c|mdadm}}; there is no initialization time needed for creation.

The simplest method is to use the entirety of the unpartitioned block device to create a filesystem that spans multiple devices. For example, to create a filesystem in RAID1 mode across two devices:

{{RootCmd|mkfs.btrfs -m raid1 ''<périphérique1>'' ''<périphérique2>'' -d raid1 ''<périphérique1>'' ''<périphérique2>''}}

Converting between RAID modes is possible with the balance sub-command. For example, say a multiple device RAID 1 is mounted at {{Path|/srv}}. It is possible to convert this RAID1 to RAID0 with using the following command:

{{RootCmd|btrfs balance start -dconvert{{=}}raid0 -mconvert{{=}}raid0 --force /srv}}

RAID mode conversion can be performed while the filesystem is online and in use. Possible RAID modes in btrfs include RAID0, RAID1, RAID5, RAID6, and RAID10. See the [https://btrfs.wiki.kernel.org/index.php/Using_Btrfs_with_Multiple_Devices upstream BTRFS wiki] for more information.

{{Warning|It is currently not safe to use the RAID 5 or 6 modes<ref>[https://btrfs.wiki.kernel.org/index.php/RAID56 Article mentioning that parity RAID code has multiple serious data-loss bugs], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on January 1st, 2017.</ref>. RAID 5 and 6 modes have seen some fixes<ref>Michael Larabel, [http://www.phoronix.com/scan.php?page=news_item&px=Linux-4.12-Btrfs-RAID-Mostly-OK Btrfs RAID56 "Mostly OK"], Phoronix. July 8, 2017.</ref> in Linux 4.12, but overall status is still marked as '''unstable'''.<ref>[https://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs.git/commit/?h{{=}}for-linus-4.12&id{{=}}28d70e237dac905cd8d1896af10216b7d2bced24 btrfs: scrub: Fix RAID56 recovery race condition], source commit, April 18th 2017.</ref><ref>[http://lkml.iu.edu/hypermail/linux/kernel/1705.1/01197.html GIT PULL Btrfs from Chris Mason], [http://lkml.iu.edu/hypermail/linux/kernel/index.html Linux kernel mailinglist], May 9th 2017.</ref>. Users who want to use RAID5 or RAID6 functionality of btrfs are encouraged to check the [https://btrfs.wiki.kernel.org/index.php/Status btrfs status page] for stability status of said modes before utilizing the modes.}}

=== Sous-volumes ===

As mentioned above in the features list, Btrfs can create subvolumes. Subvolumes can be used to better organize and manage data. They become especially powerful when combined with snapshots. Important distinctions must be made between Btrfs subvolumes and subvolumes created by Logical Volume Management ([[LVM]]). Btrfs subvolumes are not block level devices, they are POSIX file namespaces.<ref name="subvolumes">[https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Subvolumes Section explaining the differences between subvolumes and logical volumes in LVM], [https://btrfs.wiki.kernel.org Btrfs wiki]. Retrieved on January 1st, 2017.</ref> They can be created at any location in the filesystem and will act like any other directory on the system with one caveat: subvolumes can be mounted and unmounted. Subvolumes are nestable (subvolumes can be created inside other subvolumes), and easily created or removed.

{{Note|A subvolume cannot be created ''across'' different Btrfs filesystems. If {{Path|/dev/sda}} and {{Path|/dev/sdb}} both contain separate (non-RAID) Btrfs filesystems, there is no way a subvolume can expand across the two filesystems. The snapshot can be ''moved'' from one filesystem to another, but it cannot span across the two. It must be on {{Path|/dev/sda}} ''or'' {{Path|/dev/sdb}}.}}

==== Création ====

To create a subvolume, issue the following command inside a Btrfs filesystem's name space:

{{RootCmd|btrfs subvolume create ''<dest-name>''}}

Replace <code>''<dest-name>''</code> with the desired destination and subvolume name. For example, if a Btrfs filesystem exists at {{Path|/mnt/btrfs}}, a subvolume could be created inside it using the following command:

{{RootCmd|btrfs subvolume create /mnt/btrfs/subvolume1}}

==== List ====

To see the subvolume(s) that have been created, use the <code>subvolume list</code> command followed by a Btrfs filesystem location. If the current directory is somewhere inside a Btrfs filesystem, the following command will display the subvolume(s) that exist on the filesystem:

{{RootCmd|btrfs subvolume list .}}

If a Btrfs filesystem with subvolumes exists at the mount point created in the example command above, the output from the list command will look similar to the following:

{{RootCmd|btrfs subvolume list /mnt/btrfs|output=<pre>
ID 309 gen 102913 top level 5 path mnt/btrfs/subvolume1
</pre>}}

==== Remove ====

Subvolumes can be properly removed by using the <code>subvolume delete</code> command followed by the path to the subvolume. All available subvolume paths in a Btrfs filesystem can be seen using the list command above.

{{RootCmd|btrfs subvolume delete ''<subvolume-path>''}}

As above, replace <code>''<subvolume-path>''</code> with the actual path to the subvolume to be removed. To delete the subvolume used in the examples above, the following command would be issued:

{{RootCmd|btrfs subvolume delete /mnt/btrfs/subvolume1|output=<pre>
Delete subvolume (no-commit): '/mnt/btrfs/subvolume1'
</pre>}}

==== Snapshots ====

Snapshots are subvolumes that share data and metadata with other subvolumes. This is made possible by Btrfs' Copy on Write (CoW) ability.<ref name="subvolumes" /> Snapshots can be used for several purposes, one of which is to create backups of file system structures at specific points in time.

If the root filesystem is Btrfs, it is possible to create a snapshot using the <code>subvolume snapshot</code> commands:

{{RootCmd
|mkdir -p /mnt/backup/rootfs
|btrfs subvolume snapshot / /mnt/backup/rootfs/
}}

The following small shell script can be added to a timed cron job to create a timestamped snapshot backup of a Btrfs formatted root filesystem. The timestamps can be adjusted to whatever is preferred by the user.

{{FileBox|filename=btrfs_snapshot.sh|title=Btrfs rootfs snapshot cron job example|lang=bash|1=
#!/bin/bash
NOW=$(date +"%Y-%m-%d_%H:%M:%S")
 
if [ ! -e /mnt/backup ]; then
mkdir -p /mnt/backup
fi
 
cd /
/sbin/btrfs subvolume snapshot / "/mnt/backup/backup_${NOW}"
}}

==== Mounting ====

A subvolume can be mounted in a location different from where it was created, or users can choose to not mount them at all. For example, a user could create a Btrfs filesystem in {{Path|/mnt/btrfs}} and create {{Path|/mnt/btrfs/home}} and {{Path|/mnt/btrfs/portage}} subvolumes. The subvolumes could then be mounted at {{Path|/home}} and {{Path|/usr/portage}}, with the original top level subvolume left unmounted. This results in a configuration where the subvolumes' relative path from the top level subvolume is different from their actual path.

To mount a subvolume, perform the following command, where <code>''<rel-path>''</code> is the relative path of the subvolume from the top level subvolume, obtainable through the <code>subvolume list</code> command:

{{RootCmd|mount -o subvol{{=}}''<rel-path>'' ''<device>'' ''<mountpoint>''}}

Similarly, one can update the filesystem tab to mount their Btrfs subvolumes like so:

{{FileBox|filename=/etc/fstab|title=Mounting Subvolumes|1=
<device>  <mountpoint>  btrfs  subvol=<rel-path>  0 2
}}

== Troubleshooting ==

=== Using with VM disk images ===

When using Btrfs with virtual machine disk images, it is best to disable copy-on-write on the disk images in order to speed up IO performance. This can only be performed on files that are newly created. It also possible to disable CoW on all files created within a certain directory. For example, using the {{c|chattr}} command: 

{{RootCmd|chattr +C /var/lib/libvirt/images}}

=== Clear the free space cache ===

It is possible to clear Btrfs' free space cache by mounting the filesystem with the <code>clear_cache</code> mount option. For example:

{{RootCmd|mount -o clear_cache /path/to/device /path/to/mountpoint}}

=== Btrfs hogging memory (disk cache) ===

When utilizing some of Btrfs' special abilities (like making many <code>--reflink</code> copies or creating a crazy amount of snapshots), lot of memory can be eaten and not freed fast enough by the kernel's inode cache. This issue can go undiscovered since memory dedicated to the disk cache might not be clearly visible in traditional system monitoring utilities. The {{c|slabtop}} utility (available as part of the {{Package|sys-process/procps}} package) was specifically created to determine how much memory kernel objects are consuming:

{{RootCmd|slabtop|collapse-output=true|output=<pre>
Active / Total Objects (% used)    : 2259363 / 2338091 (96.6%)
Active / Total Slabs (% used)      : 467797 / 467803 (100.0%)
Active / Total Caches (% used)     : 83 / 175 (47.4%)
Active / Total Size (% used)       : 1489775.62K / 1512200.52K (98.5%)
Minimum / Average / Maximum Object : 0.02K / 0.65K / 4096.00K

OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME
1034532 1032386  99%    1.04K 344844        3   1379376K btrfs_inode
</pre>}}

If the inode cache is consuming too much memory, the kernel can be manually instructed to drop the cache by echoing an integer value to the {{Path|/proc/sys/vm/drop_caches}} file<ref>[https://www.kernel.org/doc/Documentation/sysctl/vm.txt Documentation for /proc/sys/vm/*], [https://www.kernel.org Kernel.org]. Retrieved on January 1st, 2017.</ref>.

To be safe, and to help the kernel determine the maximum amount of freeable memory, be sure to run a {{c|sync}} ''before'' running the {{c|echo}} commands below:

{{Cmd|sync}}

Most of the time Btrfs users will probably want to {{c|echo 2}} to reclaim just the slab objects (dentries and btrfs_inodes):

{{RootCmd|echo 2 > /proc/sys/vm/drop_caches}}

To clear the entire disk cache (slab objects ''and'' the page cache) use {{c|echo 3}} instead:

{{RootCmd|echo 3 > /proc/sys/vm/drop_caches}}

{{Warning|While the above commands are non-destructive (as long as a {{c|sync}} was completed before running them), they could seriously but temporarily slow down the system while the kernel loads only the necessary items back into memory. Think twice before running the above commands for systems under heavy load!}}

More information on kernel slabs can be found in this [https://www.dedoimedo.com/computers/slabinfo.html dedoimedo blog entry].

=== Mounting Btrfs fails, returning mount: unknown filesystem type 'btrfs' ===

The [http://unix.stackexchange.com/questions/121611/gentoo-does-not-seem-to-be-booting-new-kernel original solution by Tim on Stack Exchange] inspired the following solution: build the kernel manually instead of using [[genkernel]]:

{{GenericCmd|prompt=#|color=green
|cd /usr/src/linux
|make menuconfig
|make && make modules_install
|cp arch/x86_64/boot/bzImage /boot
|mv /boot/bzImage /boot/whatever_kernel_filename
|genkernel --install initramfs
}}

=== Btrfs root doesn't boot ===

Genkernel's initramfs as created with the command below doesn't load btrfs:

{{RootCmd|genkernel --btrfs initramfs }}

Compile support for btrfs in the kernel rather than as a module, or use [https://packages.gentoo.org/packages/sys-kernel/genkernel-next genkernel-next] or [[Dracut]] to generate the initramfs.

== See also ==

* [[Btrfs snapshots]] - Script that creates snapshots when files have changed
* [[Btrfs/System Root Guide]] - Use the Btrfs filesystem as a collection of subvolumes including one as a system root.
* [[Btrfs/Native System Root Guide|Btrfs native system root guide]] - An alternative guide on using a subvolume in a Btrfs filesystem as the system's root.
* [[ext4]] - The default filesystem for most Linux distributions.
* [[Samba shadow copies]] - Using Samba to expose Shadow Copies as 'Previous Versions' to Windows clients.
* [[Snapper]] - A command-line program capable of managing Btrfs filesystem snapshots.
* [[ZFS]] - A filesystem that shares much in common with Btrfs, but has licensing issues.

== External resources ==

* https://wiki.debian.org/Btrfs - As described by the Debian wiki.
* https://wiki.archlinux.org/index.php/Btrfs Btrfs article - As described by the Arch Linux wiki.
* http://www.funtoo.org/BTRFS_Fun - BTRFS Fun on the Funtoo wiki.
* http://marc.merlins.org/perso/btrfs/post_2014-05-04_Fixing-Btrfs-Filesystem-Full-Problems.html - Tips and tricks on fixing niche Btrfs filesystem problems in some situations.

== References ==

{{reflist}}

[[Category:Filesystems]]
