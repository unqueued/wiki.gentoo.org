<languages />
<translate>

<!--T:130-->
{{Metadata|abstract=This guide should help users localize their Gentoo Linux distribution to any known locale. It uses Germany as a case-study, since it is translated from the German doc. Includes configuration for use of the euro currency symbol.}}

== Time zone == <!--T:1-->

<!--T:2-->
In order to keep the system time properly according to the present location, the timezone needs to be set.  Instructions how to do this for [[System_time#OpenRC|OpenRC based systems]] and [[System_time#systemd|systemd based systems]] can be found in the [[System_time|system time]] article.

== Locale system == <!--T:23-->

=== What are locales? === <!--T:24-->

<!--T:25-->
A locale is a set of information that most programs use for determining country and language specific settings. The locales and their data are part of the system library and can be found at {{Path|/usr/share/i18n/locales/}} on most systems. A locale name is generally named <code>ab_CD</code> where <code>ab</code> is the two (or three) letter language code (as specified in [[wikipedia:ISO_639|ISO-639]]) and <code>CD</code> is the two letter country code (as specified in [[wikipedia:ISO_3166|ISO-3166]]). Variants like <code>@euro</code> or <code>@latin</code> are often appended to locale names, e.g. <code>de_DE@euro</code> or <code>nan_TW@latin</code>. Please explore [[wikipedia:Locale_(computer_software)|Wikipedia]] to read more about locales and related articles.

=== Environment variables for locales === <!--T:26-->

<!--T:27-->
The variables controlling different aspects of locale settings are given in the table below. All of them take one name of a locale in <code>ab_CD</code> format given above. 

<!--T:28-->
{| class="table table-striped" style="text-align: left;" 
|- 
! scope=col width=25% | Variable name
! scope=col width=75% | Explanation
|- 
| <var>LANG</var>
| Defines all locale settings at once, while allowing further individual customization via the LC_* settings below.
|- 
| <var>LC_COLLATE</var>
| Define alphabetical ordering of strings. This affects e.g. output of sorted directory listings.
|- 
| <var>LC_CTYPE</var>
| Define the character-handling properties for the system. This determines which characters are seen as alphabetic, numeric, and so on. This also determines the character set used, if applicable.
|- 
| <var>LC_MESSAGES</var>
| Programs' localizations stored in {{Path|/usr/share/locale/}} for applications that use a message-based localization scheme (the majority of GNU programs).
|- 
| <var>LC_MONETARY</var>
| Defines currency units and formatting of currency-type numeric values.
|- 
| <var>LC_NUMERIC</var>
| Defines formatting of numeric values which aren't monetary. Affects things such as thousand separator and decimal separator.
|- 
| <var>LC_TIME</var>
| Defines formatting of dates and times.
|- 
| <var>LC_PAPER</var>
| Defines default paper size.
|- 
| <var>LC_ALL</var>
| Overrides all other settings.
|-
|}

<!--T:29-->
{{Note|Some programs are written in such a way that they expect traditional English ordering of the alphabet, while some locales, most notably the Estonian one, use a different ordering. Therefore it's recommended to explicitly set <var>LC_COLLATE</var> to C when dealing with system-wide settings.}}

<!--T:30-->
{{Warning|Using <var>LC_ALL</var> is strongly discouraged as it automatically overrides all other <var>LC_*</var> variables (<var>LANG</var> is not affected). This means that changes made by other means will be hidden until <var>LC_ALL</var> is set to a null string. It is probably best not to set it in a startup file.}}

<!--T:31-->
Most typically, users only set the <var>LANG</var> variable globally.

=== Generating specific locales === <!--T:32-->

<!--T:33-->
Most users will probably only use one or maybe two locales on their system. How additional locales can be specified is explained in the {{Path|/etc/locale.gen}} file. 

<!--T:34-->
{{CodeBox|title=Adding locales to /etc/locale.gen|1=
en_GB ISO-8859-1
en_GB.UTF-8 UTF-8
de_DE ISO-8859-1
de_DE@euro ISO-8859-15
}}

<!--T:153-->
{{Note|Use an <code>@euro</code> value from {{Path|/usr/share/i18n/SUPPORTED/}} as the locale when using the Euro currency symbol (â‚¬) on non UTF-8 based locales.}}

<!--T:35-->
The next step is to run {{c|locale-gen}}. It will generate all the locales specified in the {{Path|/etc/locale.gen}} file and write them to the locale-archive ({{Path|/usr/lib/locale/locale-archive}}). 

<!--T:137-->
{{RootCmd|locale-gen|output=<pre>
 * Generating 4 locales (this might take a while) with 1 jobs
 *  (1/4) Generating en_GB.ISO-8859-1 ...                       [ ok ]
 *  (2/4) Generating en_GB.UTF-8 ...                            [ ok ]
 *  (3/4) Generating de_DE.ISO-8859-1 ...                       [ ok ]
 *  (4/4) Generating de_DE.ISO-8859-15@euro ...                 [ ok ]
 * Generation complete
</pre>}}

<!--T:37-->
Verify that the selected locales are available by running {{c|locale -a}}.

<!--T:138-->
{{Cmd|locale -a|output=<pre>
C
POSIX
de_DE
de_DE.iso88591
de_DE.iso885915@euro
de_DE@euro
deutsch
en_GB
en_GB.iso88591
en_GB.utf8
german
</pre>}}

<!--T:145-->
The {{Path|/usr/lib/locale/locale-archive}} file can be shown by {{c|localedef}}.

<!--T:154-->
{{Cmd|localedef --list-archive}}

<!--T:155-->
Its raw content can be displayed using the {{c|strings}} command.

<!--T:146-->
{{Cmd|strings /usr/lib/locale/locale-archive {{!}} less}}

=== Setting a locale === <!--T:38-->

==== OpenRC ==== <!--T:39--> 

<!--T:40-->
When using OpenRC locale settings are stored in environment variables. These are typically set in {{Path|/etc/env.d/02locale}} (for system-wide settings) and {{Path|~/.bashrc}} (for user-specific settings).  More details can be found in the [[UTF-8#Setting_the_locale|UTF-8]] article.  The system wide settings ({{Path|/etc/env.d/02locale}}) can be managed through {{c|eselect locale}}. For instance, to set the <var>LANG</var> variable to the <code>C</code> value:

<!--T:41-->
{{RootCmd|eselect locale list|output=<pre>
Available targets for the LANG variable:
  [1]   C 
  [2]   POSIX
  [3]   en_US
  [4]   en_US.iso885915
  [5]   en_US.utf8
  [ ]   (free form)
</pre>}}

<!--T:42-->
{{RootCmd|eselect locale set 1}}

<!--T:43-->
Of course, editing the file manually is possible as well to diversify the locale variables.

<!--T:44-->
{{FileBox|filename=/etc/env.d/02locale|title=Setting the default system locale in /etc/env.d/02locale|lang=bash|1=
LANG="de_DE.UTF-8"
LC_COLLATE="C"
}}

In some cases users may notice glitchy non-English representation in some applications like Krusader (https://bugs.kde.org/show_bug.cgi?id=371582). Removing or commenting the <code>LC_ALL=""</code> line from {{Path|/etc/env.d/02locale}} should fix the problem.

<!--T:46-->
It's also possible, and pretty common especially in a more traditional UNIX environment, to leave the global settings unchanged, i.e. in the <code>C</code> locale. Users can still specify their preferred locale in their own shell configuration file: 

<!--T:47-->
{{FileBox|filename=~/.bashrc|title=Setting the user locale|lang=bash|1=
export LANG="de_DE.UTF-8"
export LC_COLLATE="C"
}}

<!--T:48-->
Another way of configuring system is to leave it in the default <code>C</code> locale, but enable UTF-8 character representation at the same time. This option is achieved using the following settings in {{Path|/etc/env.d/02locale}}: 

<!--T:49-->
{{CodeBox|title=Using traditional C locale while specifying UTF-8|lang=bash|1=
LC_CTYPE=de_DE.UTF-8
}}

<!--T:50-->
Using the above snippet, users will be able to see localized file names properly, while not being forced to completely use the selected language. 

<!--T:51-->
Once the right locale is set up, be sure to update the environment variables to make the system aware of the change.

<!--T:52-->
For a system-wide default locale:

<!--T:53-->
{{RootCmd|env-update && source /etc/profile}}

<!--T:54-->
For a user-specific locale:

<!--T:55-->
{{Cmd|source ~/.bashrc}}

<!--T:56-->
After this, kill the X server by pressing {{Key|Ctrl}}+{{Key|Alt}}+{{Key|Backspace}}, log out, then log in as a user. 

<!--T:57-->
Now, verify that the changes have taken effect: 

<!--T:58-->
{{Cmd|locale}}

==== systemd ==== <!--T:59-->

<!--T:60-->
With systemd set the locale with the {{c|localectl}} command. Check the list of available locales with:

<!--T:61-->
{{RootCmd|localectl list-locales}}

<!--T:62-->
Then set the desired locale:

<!--T:63-->
{{RootCmd|<nowiki>localectl set-locale LANG=de_DE.utf8</nowiki>}}

<!--T:64-->
Finally check if the result is good:

<!--T:65-->
{{RootCmd|<nowiki>localectl | grep "System Locale"</nowiki>|output=<pre>
   System Locale: LANG=de_DE.utf8
</pre>}}

== Keyboard layout for the console == <!--T:66-->

=== OpenRC === <!--T:67-->

<!--T:68-->
The keyboard layout used by the console is set in {{Path|/etc/conf.d/keymaps}} by the <var>keymap</var> variable. Valid values can be found in {{Path|/usr/share/keymaps/YOUR_ARCH/}}. {{Path|i386}} has further subdivisions into layout ({{Path|qwerty/}}, {{Path|azerty/}}, etc.). Some languages have multiple options - experiment with the various options to decide which one fits your needs best. 

<!--T:69-->
{{FileBox|filename=/etc/conf.d/keymaps|title=Setting the console keymap|lang=bash|1=
keymap="de"
#keymap="de-latin1"
#keymap="de-latin1-nodeadkeys"
}}

=== systemd === <!--T:70-->

<!--T:71-->
With systemd the keymap layout used for the console can be set using the {{c|localectl}} command. First check the available keymap layouts:

<!--T:72-->
{{RootCmd|localectl list-keymaps}}

<!--T:73-->
Then set the requested console keymap layout:

<!--T:74-->
{{RootCmd|localectl set-keymap it}}

<!--T:75-->
Finally check if the console keymap layout was set correctly:

<!--T:76-->
{{RootCmd|<nowiki>localectl | grep "VC Keymap"</nowiki>|output=<pre>
       VC Keymap: it
</pre>}}

== Keyboard layout for the X server == <!--T:77-->

=== OpenRC === <!--T:149-->

<!--T:78-->
The keyboard layout to be used by the X server is specified in {{Path|/etc/X11/xorg.conf.d/30-keyboard.conf}} by the <var>XkbLayout</var> option. For details visit the [[Xorg/Guide#Configuring_the_keyboard|Xorg guide]] and the article about [[Keyboard_layout_switching#X11|Keyboard layout switching]].

=== systemd === <!--T:85-->

<!--T:86-->
With systemd the keymap layout for the X11 server can be set using the {{c|localectl}} command. First check the available X11 keymap layouts:

<!--T:87-->
{{RootCmd|localectl list-x11-keymap-layouts}}

<!--T:88-->
Then set the requested X11 keymap layout:

<!--T:89-->
{{RootCmd|localectl set-x11-keymap it}}

<!--T:90-->
Finally check if the X11 keymap layout was set correctly:

<!--T:91-->
{{RootCmd|<nowiki>localectl | grep "X11 Layout"</nowiki>|output=<pre>
      X11 Layout: it
</pre>}}

== Native Language Support == <!--T:114-->

<!--T:115-->
For message based localization to work in programs that support it and have the <code>nls</code> [https://packages.gentoo.org/useflags/nls  USE flag], compile the programs with this flag set. Message strings are installed in {{Path|/usr/share/locale/<locale>/LC_MESSAGES/<package>.mo}} files. Most of the programs using the ''Native Language Support (NLS)'' also need the gettext library to extract and use localized messages. Of course, Portage will automatically install it when needed.

<!--T:116-->
After enabling the <code>nls</code> USE flag some packages might need to be re-emerged:

<!--T:117-->
{{Emerge|params+=--changed-use --deep --with-bdeps=y|@world}}

== LINGUAS == <!--T:118-->

{{Warning|LINGUAS causes packages to implicitly skip locales. When using it, the package manager cannot determine which locales were omitted. Do not use LINGUAS if you intend to redistribute binary packages.}}

There is also an additional <var>LINGUAS</var> variable that is used by some gettext-based build systems to control which localization files are built and installed. The variable takes in ''space''-separated list of language codes, and a suggested place to set it is {{Path|[[:/etc/portage/make.conf|/etc/portage/make.conf]]}}: 

<!--T:120-->
{{RootCmd|nano -w /etc/portage/make.conf|output=<pre>
## (Add in the LINGUAS variable. For instance, for German, Finnish and English:)
LINGUAS="de fi en"
</pre>}}

<!--T:147-->
Note that there is a large difference between <var>LINGUAS</var> being unset and being set to an empty value: with <code>LINGUAS=""</code>, most ebuilds would install only the packages' default language but none of the <code>LC_MESSAGES</code> files.

== L10N == <!--T:159-->

<!--T:160-->
A <var>USE_EXPAND</var> variable called <var>L10N</var> decides which extra localization support will be installed. This is commonly used for downloads of additional language packs by packages. Similar to <var>LINGUAS</var>, the variable takes a space separated list of language tags, and it can be set in {{Path|/etc/portage/make.conf}}:

<!--T:161-->
{{RootCmd|nano -w /etc/portage/make.conf|output=<pre>
## (Add in the L10N variable. For instance, for German and Brazilian Portuguese:)
L10N="de pt-BR"
</pre>}}

<!--T:167-->
To set it per-package, edit {{Path|[[:/etc/portage/package.use]]}} and prefix the requested language packs with "l10n_", as shown in the next example:

<!--T:168-->
{{FileBox|filename=/etc/portage/package.use|lang=bash|1=
app-text/aspell l10n_de l10n_pt-BR
}}

<!--T:162-->
Note that while the common two letter language codes (like <code>de</code> or <code>fr</code>) are identical in <var>LINGUAS</var> and <var>L10N</var>, more complex entries have a different syntax because <var>L10N</var> uses [https://www.w3.org/International/articles/language-tags/ IETF language tags] (aka BCP 47). For example, <code>pt_BR</code> and <code>sr@latin</code> in <var>LINGUAS</var> become <code>pt-BR</code> and <code>sr-Latn</code> in <var>L10N</var>, respectively.

<!--T:163-->
A list of <var>L10N</var> values that can be used is provided as {{Path|/usr/portage/profiles/desc/l10n.desc}}:

<!--T:164-->
{{Cmd|grep -i portuguese /usr/portage/profiles/desc/l10n.desc|output=<pre>
pt - Portuguese
pt-BR - Portuguese (Brazil)
pt-PT - Portuguese (Portugal)
</pre>}}

<!--T:165-->
After setting the <var>L10N</var> <var>USE_EXPAND</var> variable it may be necessary to re-emerge some packages:

<!--T:166-->
{{Emerge|params+=--changed-use --deep --with-bdeps=y|@world}}

== See also == <!--T:142-->


<!--T:150-->
* [[Handbook:AMD64/Installation/Base#Configure_locales|Configuring locales]] (Gentoo Handbook)
* [[Evdev#Keyboard_layout|Keyboard layout]] inside the Evdev article
* [[X resources]]
* {{See also|Localization/Guide/The Euro symbol}}

== External resources == <!--T:151--> 

<!--T:152-->
* [https://www.gnu.org/software/libc/manual/html_node/Locales.html Locales and Internationalization] (gnu.org)
* [https://gentoo.org/support/news-items/2016-06-23-l10n-use_expand.html L10N USE_EXPAND variable replacing LINGUAS]
* [https://blogs.gentoo.org/mgorny/2016/05/16/how-linguas-are-thrice-wrong/ MichaÅ‚ GÃ³rny: How LINGUAS are thrice wrong!]
* [https://archives.gentoo.org/gentoo-dev/message/a08ea09c2c8e534fd9bc1146703c66ff <nowiki>[gentoo-dev] [RFC] How to deal with LINGUAS mess?</nowiki>]
* [https://archives.gentoo.org/gentoo-dev/message/41e09d1ddc8b30abb9f9d21d205b7b82 <nowiki>[gentoo-dev] [RFC] Masterplan for solving LINGUAS problems</nowiki>]

== References == <!--T:156-->

<!--T:157-->
{{reflist}}

</translate>

[[Category:Localization]] {{Migrated|originalauthors=Alexander Holler, Steven Lucy, Benny Chuang, Lars Weiler, Tobias Scherbaum, Flammie Pirinen, {{Dev|nightmorph}}, {{Dev|klondike}}}}
