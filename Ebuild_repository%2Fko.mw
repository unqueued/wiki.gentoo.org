<languages />
'''오버레이는 프로그램을 다룰 때, 포티지가 제자리를 찾아 처리하는 추가 저장소입니다.'''

젠투 리눅스에서 사용자에게 이미 "포티지 트리"라는 "주" 꾸러미 저장소 하나를 제공합니다. 주 저장소에는 젠투 개발자가 관리하는 모든 프로그램 꾸러미([[Ebuild|이빌드]])가 있습니다. 다만, 사용자는 주 트리에 "겹쳐 올리는" 추가 저장소를 넣을 수 있습니다. 그래서 이름이 "오버레이" 입니다.

꾸러미 저장소에는 파일 모음 말고도 더(또는 덜) 들어있는 곳이 아니기에 이 저장소는 공개 저장소(git, cvs, svn 등) 또는 타르볼로 다운로드 하고 시스템에 직접 추출하는 방식으로 가져올 수 있습니다. 그러나, 오버레이를 설치하면 포티지가 이 파일 또한 어떤 프로그램을 설치할지 파일을 찾아보고 결정하므로, 관리중이며 "신뢰하는" 제 3자 저장소를 사용하시는 것이 좋습니다.

== 오버레이 다루기 �==

포티지에서는 시스템에 설치한 오버레이를 연결할 때 <code>PORTDIR_OVERLAY</code> 변수를 활용합니다. 이 변수에는 포티지가 추가 저장소의 루트를 찾을 수 있는 위치로, 시스템의 경로를 공백 문자로 구분한 경로 목록을 사용합니다.

=== 오버레이 위치 직접 설정 ===

오버레이를 직접 만들어 사용하려면, 포티지가 주 트리 처럼 찾아보도록 패키지를 놓을 위치에 경로를 만드십시오(<code>/home/user/overlay</code>). 경로를 만들었다면 {{Path|/etc/portage/make.conf}} 파일에 <code>PORTDIR_OVERLAY="/home/user/overlay"</code> 값을 추가하십시오.

{{File|/etc/portage/make.conf|오버레이 직접 추가|<pre>
PORTDIR_OVERLAY="/home/user/overlay"
</pre>}}

=== crossdev 활용하기 ===

[[crossdev]] will automatically place the ebuilds/categories it generates into the first overlay found in <code>PORTDIR_OVERLAY</code>. You might want to prevent [[crossdev]] from disturbing [[layman]]'s overlays or your personal per-machine overlay (normally created at <code>/usr/local/portage</code>). You can create an overlay specifically for [[crossdev]]'s use:

{{RootCmd|mkdir -p /usr/local/portage-crossdev/profiles
|echo local-crossdev > /usr/local/portage-crossdev/profiles/repo_name}}

Then you can instruct portage and crossdev to use this overlay:

{{File|/etc/portage/make.conf|Let crossdev to store its ebuild in local-crossdev and indicate that the local overlay should override every other overlay|<pre>
source /var/lib/layman/make.conf
PORTDIR_OVERLAY="/usr/local/portage-crossdev ${PORTDIR_OVERLAY} /usr/local/portage"
</pre>}}

{{File|/etc/portage/make.conf|Prevent crossdev from messing with your local overlay when not using layman|<pre>
PORTDIR_OVERLAY="/usr/local/portage-crossdev /usr/local/portage"
</pre>}}

=== layman 사용하기 ===

여러가지 오버레이를 단순하게 관리하기 위해 [[Layman|layman]]이라는 도구를 개발했습니다. 이 도구는 사용자와 개발자가 관리하는 오버레이를 알아내며 <code>PORTDIR_OVERLAY</code> 위치에 오버레이를 추가하여 설치하고 동기화 할 수 있게 합니다.

=== 로컬 오버레이 ===

로컬 오버레이 설정 방법은 [[Overlay/Local_overlay|로컬 오버레이]]<sup>en</sup>를 보십시오.

=== 오버레이 우선순위 ===

각각의 오버레이에는 유일의 우선순위가 있습니다. 여러 오버레이에 특정 버전을 발견했을 경우 확인하며, 해결 방법은 혼란스럽지 않습니다. 높은 우선순위를 지닌 오버레이의 이빌드는 낮은 우선순위를 가진 오버레이의 이빌드보다 우선합니다.

{{Note|This "natural" way of priority handling was introduced in January 2011, before that the priority resolution order was reversed, so negative numbers used to stand for high priorities}}

The list of overlays with their priorities can be obtained through the output of the following command

{{Cmd|emerge --info --verbose}}

Unless the <code>PORTDIR_OVERLAY</code> variable has been modified as described [[#Setting overlay priorities|below]], the default gentoo portage tree will have a priority of -1000. That means that all other overlays take precedence. That is the default behavior, because overlays are designed to "lay over/on top" of the portage tree.

==== Setting overlay priorities ====

The overlay priority is calculated from the order of overlay entries in the <code>PORTDIR_OVERLAY</code> variable. Portage "walks" through the variable from left to right and increments the priority on the way. The leftmost entry starts with a priority of 1, the next entry has a priority of 2 and so on.

{{Note|Some time ago the overlay priority could be set in <code>/etc/portage/repos.conf</code>. This does not work anymore}}

Unless the <code>PORTDIR_OVERLAY</code> contains the portage tree entry, the portage tree will always be assigned a priority of -1000.
This can be easily changed by putting <code>PORTDIR</code> in the <code>PORTDIR_OVERLAY</code> variable:

{{File|/etc/portage/make.conf|Manual portage tree priority setting|<pre>
PORTDIR_OVERLAY="/home/user/overlay ${PORTDIR}"
</pre>}}

In the example above the user overlay will be assigned a priority of 1 and the portage tree will be assigned a priority of 2. 

{{Note|If you also use [[Layman|layman]] to manage your overlays, you may be interested in the article about [[Layman#Setting overlay priorities with layman|setting overlay priorities with layman]].}}

=== Using unsafe overlays ===

When using huge overlays or those with unknown/low quality it is best practice to hardmask the whole overlay.

{{File|/etc/portage/package.mask|Mask all packages in an overlay|<pre>
*/*::overlay-name
</pre>}}

After that you can unmask the packages you specifically want to emerge.

{{File|/etc/portage/package.unmask|Unmask a specific package in an overlay|<pre>
foo/bar::overlay-name
</pre>}}

This way nothing weird will happen on updates and it is safer than using priorities.

== Metadata cache ==

=== Cache generation ===

When large overlays are installed, portage may take a long time to perform operations like dependency resolution. This is because overlays do not usually contain a metadata cache.

You may generate a local metadata cache by running emerge --regen after syncing your overlays.

{{RootCmd|layman -S
|emerge --regen}}

=== eix integration ===

==== eix-sync ====

eix-sync can run <code>emerge --regen</code> after syncing your overlays and portage tree.

{{File|/etc/eix-sync.conf||<pre>
# Sync all overlays
*
  
# Regenerate overlay metadata
@emerge --regen || true
</pre>}}

==== eix-update ====

eix-update can utilize the metadata cache generated by <code>emerge --regen</code> for a speedup and better accuracy. To enable this, set the <code>OVERLAY_CACHE_METHOD</code> to "<code>assign</code>" in {{Path|/etc/eixrc/01-cache}}.

{{File|/etc/eixrc/01-cache|Setting OVERLAY_CACHE_METHOD|<pre>
OVERLAY_CACHE_METHOD="assign"
</pre>}}


[[Category:Portage]]
