<languages />

{{Metadata|abstract=Este documento describe como cambiar la variable CHOST en un sistema ya existente.}}

This document explains how to change the <var>[[CHOST]]</var> variable of an existing system.

== Introducción ==

Changing the <var>CHOST</var> is a big issue that can seriously screw up a system - so why is there a guide for that if it can cause that much havoc? 

There are certain situations where changing the <var>CHOST</var> variable is inevitable, e.g. when upgrading to glibc 2.4 which only supports nptl and the user finds out that the current <var>CHOST</var> is i386, which makes it impossible to use nptl. In this case, there are not a lot of options, and changing <var>CHOST</var> is one of them. 

Even after following these instructions, problems may arise, so please make sure to read and execute them very carefully. In this example the <var>CHOST</var> variable will be changed from i386 to i686. Please change the commands according to the personal situation. 

== Cambiar la variable CHOST ==

=== Construir los paquetes ===

To start out with the <var>CHOST</var> variable change, edit the {{Path|/etc/portage/make.conf}} file and change the <var>CHOST</var> value to suit the requirements. Then, rebuild the following packages in this order: 

{{Emerge|binutils gcc glibc}}

{{Important|Please be aware that major gcc upgrades executed at the same time as changing the <var>CHOST</var> variable (e.g. starting with gcc 3.3, CHOST i386 and switching to gcc 4.1, CHOST i686) can lead to severe side effects. While it may not be impossible to do so, it is hard to predict which potential problems may arise and almost impossible to document them in this guide. As a consequence, please do one thing at a time, e.g. upgrade gcc first according to the [[Upgrading_GCC|gcc upgrade guide]] and change the <var>CHOST</var> afterwards. On a system with <var>CHOST</var> set to an i386 value, mask glibc 2.4 (or newer) during the gcc upgrade as it cannot be used with i386. Unmask it once the change has been performed completely.}}

{{Note|It may be necessary to run {{c|binutils-config}} before compiling gcc.}}

=== Comprobar que la cosa funciona ===

Now it is time to make sure that the {{c|gcc-config}} and {{c|binutils-config}} settings are sane and that there are no leftovers in {{Path|/etc/env.d/}}. 

The output of {{c|gcc-config}} and {{c|binutils-config}} should look like the following:

{{Note|The output may, or even will differ according to the gcc version and <var>CHOST</var> settings. The example below uses gcc 4.1.1 on i686.}} 

{{RootCmd|gcc-config -l|output=<pre>
 [1] i686-pc-linux-gnu-4.1.1 *</pre>}}

{{RootCmd|gcc-config -c|output=<pre>
i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|binutils-config -l|output=<pre>
 [1] i686-pc-linux-gnu-2.16.1 *
# binutils-config -c
i686-pc-linux-gnu-2.16.1
</pre>
}}

Next, check to see if there are references to the old <var>CHOST</var> variable in {{Path|/etc/env.d/}}: 

{{RootCmd|cd /etc/env.d/
|grep 386 *|output=<pre>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>
}}

{{Note|This may not happen in every case, but in this case {{Path|05gcc-i386-pc-linux-gnu}} contains references to the old <var>CHOST</var> value. Things may look differently on each system depending on which <var>CHOST</var> value the system is changing to/from. In some cases, no references are left at all. The name may also be {{Path|05gcc-''new_CHOST''-pc-linux-gnu}}.}}

Before deleting the file, let's check for files with the updated <var>CHOST</var> value: 

{{RootCmd|grep 686 *|output=<pre>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>
}}

Este tiene buena pinta, ya que siempre debe haber un solo archivo para <code>gcc</code> en {{Path|/etc/env.d/}} ({{Path|05gcc}} en este ejemplo), por lo que se debe eliminar el que tiene las referencias incorrectas: 

{{RootCmd|rm 05gcc-i386-pc-linux-gnu}}

The same also applies to {{Path|binutils}} - if there's an extra one, see which is the outdated one and delete it. Next, check the contents of {{Path|/etc/env.d/binutils/}}:

{{RootCmd|cd /etc/env.d/binutils/
|ls -la|output=<pre>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1
</pre>}}

{{RootCmd|cat config-i686-pc-linux-gnu|output=<pre>
CURRENT=2.16.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-2.16.1|output=<pre>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>
}}

Este parece correcto, los dos ficheros deberían estar ahí. Es el momento de moverlos al directorio {{Path|gcc}}. 

{{RootCmd|cd /etc/env.d/gcc|output=<pre>
# ls -la
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1
</pre>}}

{{RootCmd|cat config|output=<pre>
CURRENT=i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat config-i386-pc-linux-gnu|output=<pre>
CURRENT=i386-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-4.1.1|output=<pre>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>
}}

{{Path|config}} y {{Path|i686-pc-linux-gnu-4.1.1}} son correctos, sin embargo {{Path|config-i386-pc-linux-gnu}} un sobrante que se debe eliminar. 

{{Note|De nuevo, el nombre del archivo que contiene referencias a una versión anticuada de gcc puede tener un nombre diferente, por ejemplo, {{Path|config-i686-pc-linux-gnu}} incluso si el sistema se está cambiando a (en este caso) i686. Es importante identificar el archivo leyendo su contenido, no sólo su nombre.}}

{{RootCmd|rm config-i386-pc-linux-gnu}}

Ahora lance las siguientes órdenes para actualizar el entorno: 

{{RootCmd|env-update && source /etc/profile}}

A continuación compruebe que todo está en su sitio: 

{{RootCmd|grep -r 386 /etc/env.d/}}

Si todavía aparece algún fichero, inténte echarle un vistazo antes de continuar.

=== Terminar con el cambio ===

Now it is necessary to re-emerge {{Package|sys-devel/libtool}} and run {{c|fix_libtool_files.sh}} which can be found in {{Path|/usr/share/gcc-data/''$CHOST''/''<gcc-version>''/}}. Make sure to use the correct gcc version (the current one, 4.1.1 here) and pass the old architecture (i386 here) as argument. Replace <code>$CHOST</code> with the new <var>CHOST</var> value, and <code><gcc-version></code> with the gcc version. This example assumes a <var>CHOST</var> value applicable to i686. 

{{Emerge|libtool}}

{{RootCmd|/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu}}

Ahora será posible reconstruir todos los paquetes: 

{{RootCmd|emerge -e world}}

In theory, it should not be necessary to do so, but it cannot be 100% guaranteed that this is actually the case.

Se necesita reconstruir el siguiente conjunto de paquetes 

{{Emerge|python}}

All packages using perl install to the <var>CHOST</var> directory and hence need rebuilding. In case {{c|qfile}} is not available on the system yet, install {{Package|app-portage/portage-utils}} first.

{{Emerge|portage-utils}}

Ahora se deben reconstruir todos los paquetes que tiene fichero instalados en la localización {{Path|/usr/lib/perl*}}:

{{RootCmd|emerge -av1 `qfile /usr/lib/perl* -Cq {{!}} sort -u`}}

Si encuentra otros paquetes que se necesita reconstruir, por favor, hagánoslo saber a través de la [[{{TALKPAGENAME}}|página de discusión]] de esta guía.

=== Problemas comunes ===

When upgrading from gcc 3.3 to 4.1 at the same time as changing the <var>CHOST</var> variable (please don't do that anyway), a couple of users reported broken packages that need recompiling, such as {{Package|sys-apps/groff}} and {{Package|mail-mta/courier}}: 

{{CodeBox|title=Mensaje de error|1=
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
}}

This happens because during the upgrade, the <var>CHOST</var> variable doesn't exactly match the <var>CTARGET</var> variable value, making the compiler assume that the system is using cross-compiling. As a consequence, <var>LDPATH</var> isn't inserted into {{Path|ld.so.conf}}, resulting in this error. 

Por favor, consulte la guía de [[Upgrading GCC/es|Actualización de GCC]] para saber lo que se necesita reconstruir después de una actualización de GCC. 

In some rare cases, this can break old versions of python, too. This may be fixed by adding {{Path|/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6}} (change accordingly to the old <var>CHOST</var> and gcc version) to {{Path|/etc/ld.so.conf}}, running {{c|ldconfig}} and then {{c|emerge libstdc++-v3}}. However, as can be seen, this situation needs to be avoided - don't change <var>CHOST</var> and gcc at the same time.

=== Comentarios ===

Eso sería todo, los comentarios (tanto si funcionó, falló o se encontraron otros problemas) son bienvenidos, por favor, utilice la [[{{TALKPAGENAME}}|página de discusión]] o publique un hilo de discusión en [https://forums.gentoo.org/viewtopic-t-494147.html este hilo del foro]. La mayor parte de esta guía la ha escrito vapier, ¡Gracias por tu ayuda!


{{Migrated|originalauthors=Wernfried Haas, Mike Frysinger, Chris White}}
