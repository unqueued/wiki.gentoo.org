<languages />

{{Metadata|abstract=Este documento describe como cambiar la variable CHOST en un sistema ya existente.}}

Este documento describe como cambiar la variable [[CHOST]] en un sistema ya existente.

== Introducción ==

Cambiar el CHOST es una cuestión importante ya que puede desestabilizar seriamente el sistema. Así pues, ¿Por qué hay una guía para ello? 

Hay ciertas situaciones en las que el cambio de CHOST es inevitable, por ejemplo, si se quiere actualizar a glibc 2.4 que únicamente admite nptl y se encuetra que su CHOST es i386, lo que hace imposible el uso de nptl. En este caso no hay muchas opciones y cambiar CHOST es una de ellas. 

Incluso siguiendo estas instrucciones pueden surgir problemas así que, por favor, asegúrese de leer y ejecutarlas con mucho cuidado. En este ejemplo se cambiará CHOST desde i386 a i686. Si se quiere hacer otro cambio distinto, por favor, modifique las órdenes apropiadamente. 

== Cambiar la variable CHOST ==

=== Construir los paquetes ===

Para comenzar con el cambio de CHOST, edite el archivo  {{Path|/etc/portage/make.conf}} y cambie el valor de '''CHOST''' para adaptarlo a sus necesidades. A continuación reconstruya los siguientes paquetes en este orden: 

{{Emerge|binutils gcc glibc}}

{{Important|Please be aware that major gcc upgrades at the same time as changing CHOST (e.g. starting with gcc 3.3, CHOST i386 and switching to gcc 4.1, CHOST i686) can lead to severe side effects. While it may not be impossible to do so, it is hard to predict which potential problems may arise and document them in this guide. As a consequence, please do one thing at a time, e.g. upgrade gcc first according to our [[Upgrading_GCC|gcc upgrade guide]] and change your CHOST afterwards. If you are on a system with CHOST{{=}}i386, you will need to mask glibc 2.4 (or newer) during the gcc upgrade as it cannot be used with i386 and unmask it once you're done.}}

{{Note/es|Puede que se necesita lanzar <code>binutils-config</code> antes de compilar gcc.}}

=== Comprobar que la cosa funciona ===

Now it is time to make sure that your <code>gcc-config</code> and <code>binutils-config</code> settings are sane and you do not have any leftovers in {{Path|/etc/env.d/}}. 

The output of <code>gcc-config</code> and <code>binutils-config</code> should look like this (may differ according to your gcc version and chost, gcc 4.1.1 and i686 here): 

{{RootCmd|gcc-config -l|output=<pre>
 [1] i686-pc-linux-gnu-4.1.1 *</pre>}}

{{RootCmd|gcc-config -c|output=<pre>
i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|binutils-config -l|output=<pre>
 [1] i686-pc-linux-gnu-2.16.1 *
# binutils-config -c
i686-pc-linux-gnu-2.16.1
</pre>
}}

A continuación compruebe si hay referencias al antiguo CHOST en {{Path|/etc/env.d/}}: 

{{RootCmd|cd /etc/env.d/
|grep 386 *|output=<pre>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>
}}

{{Note|This may not happen to you, but in this case 05gcc-i386-pc-linux-gnu contains references to the old CHOST. Things may look differently on your system depending on which CHOST you are changing to/from, or even be just fine. The name may also be 05gcc-your_new_CHOST-pc-linux-gnu.}}

Before deleting the file, let's check for files with the updated CHOST: 

{{RootCmd|grep 686 *|output=<pre>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>
}}

This one looks good as there should always be only one file for <code>gcc</code> in {{Path|/etc/env.d/}} (05gcc in this example), so let's delete the one with the wrong references: 

{{RootCmd|rm 05gcc-i386-pc-linux-gnu}}

The same also applies to <code>binutils</code> - if there's an extra one, see which is the outdated one and delete it. Next, check your {{Path|/etc/env.d/binutils/}}  

{{RootCmd|cd /etc/env.d/binutils/
|ls -la|output=<pre>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1
</pre>}}

{{RootCmd|cat config-i686-pc-linux-gnu|output=<pre>
CURRENT=2.16.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-2.16.1|output=<pre>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>
}}

That one looks good, those two files actually should be there. Time to move on to the gcc directory. 

{{RootCmd|cd /etc/env.d/gcc|output=<pre>
# ls -la
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1
</pre>}}

{{RootCmd|cat config|output=<pre>
CURRENT=i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat config-i386-pc-linux-gnu|output=<pre>
CURRENT=i386-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-4.1.1|output=<pre>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>
}}

{{Path|config}} y {{Path|i686-pc-linux-gnu-4.1.1}} son correctos, sin embargo {{Path|config-i386-pc-linux-gnu}} un sobrante que se debe eliminar. 

{{Note|Again, the name of the file containing references to an outdated gcc version may have a different name, e.g. config-i686-pc-linux-gnu even though you are changing to i686. It is important you identify the file on its content, not only the name.}}

{{RootCmd|rm config-i386-pc-linux-gnu}}

Ahora lance las siguientes órdenes para actualizar su entorno: 

{{RootCmd|env-update && source /etc/profile}}

A continuación comprueba que todo está en su sitio: 

{{RootCmd|grep -r 386 /etc/env.d/}}

If you still find something, you must have missed some file, try to track it down before going on. 

=== Terminar con el cambio ===

Now it is necessary to re-emerge <code>libtool</code> and run {{Path|/usr/share/gcc-data/$CHOST/<gcc-version>/fix_libtool_files.sh}}. Make sure to use the correct gcc version (your current one, 4.1.1 here) and pass your old architecture (i386 here) as argument. Replace $CHOST with your new CHOST, and <gcc-version> with your gcc version. This example assumes a CHOST of i686. 

{{Emerge|libtool}}

{{RootCmd|/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu}}

Quizás quiera volver a reconstruir todos los paquetes: 

{{RootCmd|emerge -e world}}

Now, in theory it should not be necessary to do so, but it can not be 100% guaranteed that this is actually the case. If you do not recompile the world target, I have been told at least some packages need recompiling, so you should do: 

{{Emerge|python}}

All packages using perl install to the CHOST directory and hence need remerging. In case you haven't installed <code>qfile</code>, you will need to install {{Package|app-portage/portage-utils}} first. 

{{Emerge|portage-utils}}

{{RootCmd|emerge -av1 `qfile /usr/lib/perl* -Cq {{!}} sort -u`}}

If you encounter other packages that need recompiling, please let the author of this document know.

=== Problemas comunes ===

When upgrading from gcc 3.3 to 4.1 at the same time as changing the CHOST (please don't do that anyway), a couple of users reported broken packages that need recompiling, such as groff and courier: 

{{CodeBox|title=Error messsage|1=
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
}}

This happens because during the upgrade, the CHOST doesn't exactly match CTARGET and the compiler assumes cross-compiling. As a consequence, LDPATH isn't inserted into {{Path|ld.so.conf}}, resulting in this error. 

Please see our [[Upgrading GCC|GCC upgrade guide]] for what needs to be rebuilt after a GCC upgrade. 

In some rare cases, this can break old versions of python, too. This may be fixed by adding {{Path|/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6}} (change accordingly to your old chost and gcc version) to {{Path|/etc/ld.so.conf}}, running <code>ldconfig</code> and then <code>emerge libstdc++-v3</code>. However, as you can see, you really should avoid running into this problem - don't change CHOST and your gcc version at the same time.

=== Comentarios ===

Eso sería todo, los comentarios (tanto si funcionó, falló o se encontraron otros problemas) son bienvenidos, por favor envíe un correo electrónico a {{Mail|amne@gentoo.org}} o publique en [https://forums.gentoo.org/viewtopic-t-494147.html este hilo del foro]. La mayor parte de este documento lo ha escrito vapier, ¡Gracias por tu ayuda!


{{Migrated|originalauthors=Wernfried Haas, Mike Frysinger, Chris White}}
