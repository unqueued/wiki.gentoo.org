When emerging packages it is possible to build them in tmpfs (RAM) space instead of having build files pushed and pulled to Hard Disk Drive (HDD) or Solid State Drive (SSD) space. Building in tmpfs both speeds up emerge times and reduces HDD/SSD wearing. For system's containing SSDs, it is generally a good idea to have Portage compile using tmpfs (RAM) instead burning up precious SSD write cycles (especially on something like compiling software).

== fstab Configuration ==

Mount Portage's <code>TMPDIR</code> to tmpfs by adding the following to the system's {{Path|/etc/fstab}} config file:
{{FileBox|filename=/etc/fstab|title=tmpfs fstab example|1=
tmpfs		/var/tmp/portage		tmpfs	uid=portage,gid=portage,mode=775,size=2048M,noatime	0 0
}}

Adjust the <code>size</code> parameter {{Path|/etc/fstab}} to the desired amount of RAM. Systems with large amounts of RAM can increase the number quite significantly.

After {{Path|/etc/fstab}} has been modified, mount Portage's TMPDIR to RAM by running the <kbd>mount</kbd> command followed by the directory location outline in {{Path|fstab}}:
{{RootCmd|mount /var/tmp/portage}}

== Considering tmpfs' Size ==
The system's tmpfs space should be large enough to handle the largest packages to be compiled on the system. If the tmpfs space were to ever become completely full then the emerge will fail. Most packages do not need more than 1 GB of tmpfs space their compiles, but there are few ''very'' large packages. If you have a lot of RAM, setting be careful to include enough tmpfs space when installing the following packages:

{{package|app-office/openoffice}}: 10GBs or so.

{{package|www-client/chromium}}: More than 2GBs.

{{package|sys-devel/gcc}}: More than 4 GiB.

== Per-Package Choices at Compile Time ==
Portage can be configured to build large packages outside of the tmpfs space on a per-package basis.

Create a file to tell Portage where to place the temporary files directory:
{{FileBox|filename=/etc/portage/env/notmpfs.conf|1=
PORTAGE_TMPDIR="/var/tmp/notmpfs"
}}

Create a separate temporary file directory outside of the tmpfs mount location:
{{RootCmd
|mkdir /var/tmp/notmpfs
|chown portage:portage /var/tmp/notmpfs
|chmod 775 /var/tmp/notmpfs
}}

Create a special Portage file called [[!/etc/portage/package.env|{{Path|package.env}}]] in {{Path|[[:/etc/portage]]}} and list all the packages that are too large to be compiled using tmpfs:
{{FileBox|filename=[[:/etc/portage/package.env]]|1=
app-office/libreoffice notmpfs.conf
mail-client/thunderbird notmpfs.conf
www-client/chromium notmpfs.conf
www-client/firefox notmpfs.conf
}}

== Pro Tips ==

=== No space left on device problem ===

If you encounter a not-enough space error or anything similar, there are basically two things to do:

1) You should check <code>/var/tmp/portage</code> for stale directories from packages that previously failed to compile.  You should delete them besides the one that belongs to the current package so you can still try to resume it later.

2) You can resize your tmpfs.

=== Resizing tmpfs ===

To resize your current tmpfs instance in <code>/var/tmp/portage</code>, you can run

{{RootCmd
|mount -o remount,size{{=}}N /var/tmp/portage
}}
Where N is in the form of bytes.  It can also be suffixed with k, m, or g to have the form of kilobytes, megabytes and gigabytes.  It can also be suffixed with % to limit the tmpfs instance to the percentage of current physical RAM, in which the default is 50% of it.

Note that it would not persist into the next boot.  You can make it permanent by modifying the parameters in <code>/etc/fstab</code>, but that would not really be necessary as having a large tmpfs would only be important during compilation of large packages.

It is recommended to leave-out at least 1G space for the system to prevent out-of-memory problems.  Using swap-disks for some heavy compile-time and link-time instances which are unexpected may also be helpful.  Now even if you use swap-disks, reads and writes to it would only be minimal compared to having a physical filesystem behind <code>/var/tmp/portage</code>.

Here's a note about the size parameter in Linux kernel's documentation which can be found in <code><kernel_source_dir>/Documentation/filesystems/tmpfs.txt</code>:
<pre>size: The limit of allocated bytes for this tmpfs instance. The default is half of your physical RAM without swap. If you oversize your tmpfs instances the machine will deadlock since the OOM handler will not be able to free that memory.</pre>

Besides the obvious danger of allocating too much memory for tmpfs that it could choke the system, it generally should be be safe to enlarge the tmpfs during an emerge as technically what it only does is increase the size limit of it.

It's not often that you'll ever have to do it and <code>emerge</code> would tell you that tmpfs is too small however there are instances that the package's ebuild would be not so accurate at estimating the amount of disk space necessary for building the package.  Newer packages may end up allocating more space, whereas using lesser USE flags would make it allocate less.

Anyway your solution for this is to either enlarge tmpfs, or add the exception to <code>/etc/portage/package.env</code>, and then <code>emerge</code> again.

=== Save an emerge and Resume Later ===

{{Note|This is experimental. ebuild experts should be queried about how reliable this command is; when to use it and when not to.}}
'''Example''': emerging webkit-gtk can take a long time. I want to reboot into another OS and resume this ebuild later.

* ''Optional'': I use ''app-portage/genlop'' to inspect my current emerge. I like using it to remind me of the ebuild version number or hopefully to get an ETA.
{{Cmd|genlop -c|output=<pre>

Currently merging 1 out of 2

 * net-libs/webkit-gtk-2.4.8 

       current merge time: 4 hours, 27 minutes and 35 seconds.
       ETA: unknown.

</pre>
}}
* I Ctrl-C out of the current emerge

* Since I am rebooting, I'll have to use cp -a or tar -cpf to save /var/tmp/portage/* while preserving permissions. Otherwise the tmpfs contents will be lost; You may want to inspect the memory size of /var/tmp/portage by using du:
{{RootCmd|du -sh /var/tmp/portage/|output=<pre>251M	/var/tmp/portage/</pre>}}

* Reboot, do other stuff, come back

* Restore /var/tmp/portage/*

* Resume the ebuild with <code>ebuild <repository_directory>/<category>/<package_name>-<version>.ebuild merge</code>
{{RootCmd
|ebuild /usr/portage/net-libs/webkit-gtk/webkit-gtk-2.6.5.ebuild merge
|output=<pre>

>>> Existing ${T}/environment for 'webkit-gtk-2.6.5' will be sourced. Run
>>> 'clean' to start with a fresh environment.
>>> Checking webkitgtk-2.6.5.tar.xz's mtime...
>>> WORKDIR is up-to-date, keeping...
 * checking ebuild checksums ;-) ...                                                                                                                   [ ok ]
 * checking auxfile checksums ;-) ...                                                                                                                  [ ok ]
 * checking miscfile checksums ;-) ...                                                                                                                 [ ok ]
>>> It appears that 'setup' has already executed for 'webkit-gtk-2.6.5'; skipping.
>>> Remove '/var/tmp/portage/net-libs/webkit-gtk-2.6.5/.setuped' to force setup.
>>> It appears that 'unpack' has already executed for 'webkit-gtk-2.6.5'; skipping.
>>> Remove '/var/tmp/portage/net-libs/webkit-gtk-2.6.5/.unpacked' to force unpack.
>>> It appears that 'prepare' has already executed for 'webkit-gtk-2.6.5'; skipping.
>>> Remove '/var/tmp/portage/net-libs/webkit-gtk-2.6.5/.prepared' to force prepare.
>>> Configuring source in /var/tmp/portage/net-libs/webkit-gtk-2.6.5/work/webkitgtk-2.6.5 ...
>>> Working in BUILD_DIR: "/var/tmp/portage/net-libs/webkit-gtk-2.6.5/work/webkit-gtk-2.6.5_build"
..
..
.</pre>
}}
If you're using other repository sources besides <code>gentoo</code> like layman overlays, make sure that you're using the correct repository directory of the ebuild as one package can also belong to other repositories and be chosen to be installed over the one in <code>gentoo</code>.  You can get the repository name of the current package by reading the last action entry in <code>/var/log/emerge.log</code> or reading the build.log file in the package's build directory with a command like <code>fgrep Repository: /var/tmp/portage/net-libs/webkit-gtk-2.6.5/temp/build.log</code>.

Do not use the .ebuild file found in <code>/var/tmp/portage/<category>/<package_name>-<version>/build-info/<package_name>-<version>.ebuild</code> as it seems to be only a reference.  Perhaps there's way to use it but one would have to thoroughly understand how <code>ebuild</code> and <code>ebuild.sh</code> works.

Happy hacking :)

[[Category:Portage]]
