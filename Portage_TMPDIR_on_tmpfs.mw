When emerging packages it is possible to build them in tmpfs (RAM) space instead of having build files pushed and pulled to Hard Disk Drive (HDD) or Solid State Drive (SSD) space. Building in tmpfs both speeds up emerge times and reduces HDD/SSD wear. For system's containing SSDs, it is generally a good idea to have Portage compile using tmpfs (RAM) instead burning up precious SSD write cycles (especially on something like compiling software).

Generally speaking, unless the system has a large amount of RAM, it may be more of a hassle to setup Portage in tmpfs. Larger packages such as {{package|sys-devel/gcc}} ([[#Considering tmpfs' size|see below]]) will fail on only 2 GBs of tmpfs. Keep this in mind when proceeding!

== Configuration ==

=== Considering tmpfs' size ===

The system's tmpfs space should be large enough to handle the largest packages to be compiled on the system. If the tmpfs space were to ever become completely full then the emerge will fail.  Most packages would not need more than 1 GB for compilation, but there are a few that are very large and would need more. If you would still want to compile these packages on tmpfs, make sure you would have enough space for it. The following list are estimates on how much space would be allocated on each package. Some of these are based on the minimum space requirements specified on the ebuilds themselves. Note that the actual allocated size may vary depending on the features included when building the package.  It should also vary on every version update.

{| class="table table-striped table-condensed"
|-
! Package !! Memory usage
|-
| {{package|www-client/chromium}} || 10 GBs or so with 3 GBs of extra system memory.
|-
| {{package|www-client/firefox}} || Around 4 GBs; or 8 GBs if the <code>pgo</code>, <code>debug</code>, or <code>test</code> USE flag is enabled.
|-
| {{package|sys-devel/gcc}} || Around 4 GBs, but should be much less if Java and Objective C is not included.
|-
| {{package|app-office/libreoffice}} || 6 GBs or so with 512 MBs extra system memory.
|-
| {{package|dev-lang/ghc}} || More than 4 GBs ('''will''' fail with 4GB)
|}

=== fstab ===

Mount Portage's <var>TMPDIR</var> to tmpfs by adding the following to the system's {{Path|[[fstab|/etc/fstab]]}} config file:

{{FileBox|filename=/etc/fstab|title=tmpfs fstab example|1=
tmpfs		/var/tmp/portage		tmpfs	size=4G,uid=portage,gid=portage,mode=775,noatime	0 0
}}

Adjust the <code>size</code> parameter {{Path|/etc/fstab}} to the desired amount of RAM. Systems with large amounts of RAM can increase the number quite significantly.

After {{Path|/etc/fstab}} has been modified, mount Portage's <var>TMPDIR</var> to RAM by running the {{c|mount}} command followed by the directory location outline in {{Path|fstab}}:

{{RootCmd|mount /var/tmp/portage}}

In the unlikely event that the entire {{Path|/var/tmp/}} directory is ''already'' mounted as tmpfs, it can be worked around by the special <code>x-mount.mkdir</code> mount option:

{{FileBox|filename=/etc/fstab|title=tmpfs fstab example|1=
tmpfs /var/tmp         tmpfs rw,nosuid,noatime,nodev,size=4G,mode=1777 0 0
tmpfs /var/tmp/portage tmpfs rw,nosuid,noatime,nodev,size=4G,mode=775,uid=portage,gid=portage,x-mount.mkdir=775 0 0
}}

=== Per-package choices at compile time ===

Portage can be configured to build large packages outside of the tmpfs space on a per-package basis.

Create a file to tell Portage where to place the temporary files directory:

{{FileBox|filename=/etc/portage/env/notmpfs.conf|1=
PORTAGE_TMPDIR="/var/tmp/notmpfs"
}}

Create a separate temporary file directory outside of the tmpfs mount location:

{{RootCmd
|mkdir /var/tmp/notmpfs
|chown portage:portage /var/tmp/notmpfs
|chmod 775 /var/tmp/notmpfs
}}

Create a special Portage file called [[:/etc/portage/package.env|{{Path|package.env}}]] in [[:/etc/portage|{{Path|/etc/portage/}}]] and list all the packages that are too large to be compiled using tmpfs:

{{FileBox|filename=[[:/etc/portage/package.env]]|1=
app-office/libreoffice notmpfs.conf
mail-client/thunderbird notmpfs.conf
sys-devel/gcc notmpfs.conf
www-client/chromium notmpfs.conf
www-client/firefox notmpfs.conf
}}

== Tips ==

=== Resizing tmpfs ===

To resize the current tmpfs instance in {{Path|/var/tmp/portage}}, run:

{{RootCmd
|mount -o remount,size{{=}}N /var/tmp/portage
}}

Where <code>N</code> is in the form of bytes. It can also be suffixed with <code>k</code>, <code>m</code>, or <code>g</code> to respectively have the form of (k)ilobytes, (m)egabytes or (g)igabytes. It can also be suffixed with a <code>%</code> to limit the tmpfs instance to the percentage of current physical RAM, the default being 50% when the parameter is not specified.

The resized tmpfs will not persist to the next boot unless the <code>size</code> parameter is modified in {{Path|/etc/fstab}}. This is not necessary since a larger tmpfs is only needed during large package compilations.

It is recommended to leave-out at least 1 GB of space for the system to prevent out-of-memory problems. Using swap-disks for some heavy compile-time and link-time instances which are unexpected may also be helpful. Now even if swap-disks are used, reads and writes to it would only be minimal compared to having a physical filesystem behind {{Path|/var/tmp/portage}}.

Here is a note about the size parameter in Linux kernel's documentation which can be found in {{Path|/usr/src/linux/Documentation/filesystems/tmpfs.txt}} as long as a kernel has been emerged:

{{FileBox|filename=tmpfs.txt|title=TMPFS information|lang=text|1=<pre>
size: The limit of allocated bytes for this tmpfs instance. The default is half of your physical RAM without swap. If you oversize your tmpfs instances the machine will deadlock since the OOM handler will not be able to free that memory.
</pre>}}

Besides the obvious danger of choking the system by allocating too much memory for tmpfs space, it should be generally safe to enlarge the tmpfs during an emerge as this would only increase the size limit of the tmpfs without destroying any data from the emerge process.

For example, if a system has 12 GB of RAM and 3 disks with 2 GB of swap space working in parallel on each disk, then it would be pretty safe to choose size limit equal to <code>16G</code>. 16 GB size is usually enough to compile Libreoffice and Chromium in parallel (usual {{c|emerge -1uDN @world}}) while reading Internet in a web browser.

It's not often that you'll ever have to do it and {{c|emerge}} would tell you that tmpfs is too small however there are instances that the package's ebuild would be not accurate at estimating the amount of disk space necessary for building the package. Newer packages may end up allocating more space, whereas using lesser USE flags would make it allocate less.

The solution for this is to either enlarge tmpfs, or add the exception to {{Path|/etc/portage/package.env}}, and then run {{c|emerge}} again.

=== Save an emerge and resume later ===

{{Note|This is experimental. ebuild experts should be queried about how reliable this command is; when to use it and when not to.}}

'''Example''': emerging webkit-gtk can take a long time. I want to reboot into another OS and resume this ebuild later.

''Optional'': I use {{Package|app-portage/genlop}} to inspect the current emerge session. I like using it to remind me of the ebuild version number or hopefully to get an estimated time remaining.

{{Cmd|genlop -c|output=<pre>

Currently merging 1 out of 2

 * net-libs/webkit-gtk-2.4.8 

       current merge time: 4 hours, 27 minutes and 35 seconds.
       ETA: unknown.

</pre>
}}

Press {{Key|Ctrl}}+{{Key|C}} to quit the current {{c|emerge}} session.

Since I am rebooting, I'll have to use {{c|cp -a}} or {{c|tar -cpf}} to save {{Path|/var/tmp/portage/*}} while preserving permissions. Otherwise the tmpfs contents will be lost; You may want to inspect the memory size of {{Path|/var/tmp/portage}} by using {{c|du}}:

{{RootCmd|du -sh /var/tmp/portage/|output=<pre>251M	/var/tmp/portage/</pre>}}

Reboot, do other stuff, come back later.

Restore {{Path|/var/tmp/portage/*}}.

Resume the ebuild with {{c|ebuild <repository_directory>/<category>/<package_name>-<version>.ebuild merge}}:

{{RootCmd
|ebuild /usr/portage/net-libs/webkit-gtk/webkit-gtk-2.6.5.ebuild merge
|output=<pre>

>>> Existing ${T}/environment for 'webkit-gtk-2.6.5' will be sourced. Run
>>> 'clean' to start with a fresh environment.
>>> Checking webkitgtk-2.6.5.tar.xz's mtime...
>>> WORKDIR is up-to-date, keeping...
 * checking ebuild checksums ;-) ...                                                                                                                   [ ok ]
 * checking auxfile checksums ;-) ...                                                                                                                  [ ok ]
 * checking miscfile checksums ;-) ...                                                                                                                 [ ok ]
>>> It appears that 'setup' has already executed for 'webkit-gtk-2.6.5'; skipping.
>>> Remove '/var/tmp/portage/net-libs/webkit-gtk-2.6.5/.setuped' to force setup.
>>> It appears that 'unpack' has already executed for 'webkit-gtk-2.6.5'; skipping.
>>> Remove '/var/tmp/portage/net-libs/webkit-gtk-2.6.5/.unpacked' to force unpack.
>>> It appears that 'prepare' has already executed for 'webkit-gtk-2.6.5'; skipping.
>>> Remove '/var/tmp/portage/net-libs/webkit-gtk-2.6.5/.prepared' to force prepare.
>>> Configuring source in /var/tmp/portage/net-libs/webkit-gtk-2.6.5/work/webkitgtk-2.6.5 ...
>>> Working in BUILD_DIR: "/var/tmp/portage/net-libs/webkit-gtk-2.6.5/work/webkit-gtk-2.6.5_build"
..
..
.</pre>
}}

If you're using other repository sources besides <code>gentoo</code> like layman overlays, make sure that you're using the correct repository directory of the ebuild as one package can also belong to other repositories and be chosen to be installed over the one in <code>gentoo</code>.  You can get the repository name of the current package by reading the last action entry in {{Path|/var/log/emerge.log}} or reading the build.log file in the package's build directory with a command like <code>fgrep Repository: /var/tmp/portage/net-libs/webkit-gtk-2.6.5/temp/build.log</code>.

Do not use the {{Path|.ebuild}} file found in {{Path|/var/tmp/portage/<category>/<package_name>-<version>/build-info/<package_name>-<version>.ebuild}} as it seems to be only a reference. Perhaps there's a way to use it, but one would have to thoroughly understand how {{c|ebuild}} and {{Path|ebuild.sh}} work.

Happy hacking!

== Troubleshooting ==

=== No space left on device ===

If you encounter a not-enough space error or anything similar, there are basically two things to do:

# Check the {{Path|/var/tmp/portage}} directory for old package directories from previously failed compiles. Any packages found therein should be deleted; with exceptions made for any failed packages the user would like to resume compiling later.
# [[#Resizing_tmpfs|Resize the tmpfs]].

[[Category:Portage]]
