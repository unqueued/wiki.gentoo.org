<noinclude>{{:{{ROOTPAGENAME}}/TOC}}</noinclude>
<noinclude>This section is on ensuring daemons are secure.</noinclude>
<includeonly>== Securing services ==</includeonly>
=== Apache ===

Apache comes with a pretty decent configuration file but again, we need to improve some things, like binding Apache to one address and preventing it from leaking information. Below are the options that you should apply the configuration file.

If you did not disable the <code>ssl</code> USE flag in {{Path|/etc/portage/make.conf}} before installing Apache, you should have access to an ssl enabled server. Inside {{Path|/etc/apache2/vhosts.d}} example configuration files can be found. These are working examples and it is best to verify those or disable them.

It is important to define your configuration(s) to listen to a particular IP address (rather than all available IP addresses on your system). For instance, for the {{Path|00_default_vhost.conf}} file:

{{FileBox|filename=/etc/apache2/vhosts.d/00_default_vhost.conf|1=
# Make it listen on your ip
Listen 127.0.0.1
}}

We also recommend you to disable showing any information about your Apache installation to the world. By default, the configuration will add server version and virtual host name to server-generated pages. To disable this, change the <var>ServerSignature</var> variable to <code>Off</code>:

{{FileBox|filename=/etc/apache2/vhosts.d/00_default_vhost.conf|1=
ServerSignature Off
}}

Apache is compiled with <code>--enable-shared=max</code> and <code>--enable-module=all</code>. This will by default enable all modules, so you should comment out all modules in the LoadModule section (LoadModule and AddModule) that you do not use in the main {{Path|/etc/apache2/httpd.conf}} configuration file. When using OpenRC, restart the service by executing {{c|/etc/init.d/apache2 restart}}.

Documentation is available at https://www.apache.org.

=== Bind ===

One can find [[BIND|Bind]] documentation at the [https://www.isc.org/ https://www.isc.org/bind-9-11-arm/]. The [https://www.isc.org/downloads/bind/doc/ BIND 9 Administrator Reference Manual] is also in the doc/arm.

The newer {{Package|net-dns/bind}} BIND ebuilds support chrooting out of the box. After emerging {{c|bind}} follow these simple instructions:

=== Djbdns ===

Djbdns is a DNS implementation on the security of which its author is willing to bet [https://cr.yp.to/djbdns/guarantee.html money]. It is very different from how Bind 9 works but worth a try. More information can be obtained from http://cr.yp.to/djbdns.html.

=== FTP ===

Generally, using FTP (File Transfer Protocol) is a bad idea. It uses unencrypted data (ie. passwords are sent in clear text), listens on 2 ports (normally port 20 and 21), and attackers are frequently looking for anonymous logins for trading warez. Since the FTP protocol contains several security problems you should instead use {{c|[[Sftp|sftp]]}} or HTTP. If this is not possible, secure your services as well as you can and prepare yourself.

=== MySQL ===

If you only need local applications to access the mysql database, uncomment the following line in {{Path|/etc/mysql/my.cnf}}.

Disable network access:

{{FileBox|filename=/etc/mysql/my.cnf|1=
skip-networking
}}

Then we disable the use of the LOAD DATA LOCAL INFILE command. This is to prevent against unauthorized reading from local files. This is relevant when new SQL Injection vulnerabilities in PHP applications are found.

Disable LOAD DATA LOCAL INFILE in the [mysqld] section:

{{FileBox|filename=/etc/mysql/my.cnf|1=
set-variable=local-infile=0
}}

Next, we must remove the sample database (test) and all accounts except the local root account.

Removing sample database and all unnecessary users:

{{GenericCmd|prompt=mysql>
|drop database test;
|use mysql;
|delete from db;
|delete from user where not (host="localhost" and user="root");
|flush privileges;
}}

{{Warning|Be careful with the above if you have already configured user accounts.}}

{{Note|If you have been changing passwords from the MySQL prompt, you should always clean out {{Path|~/.mysql_history}} and {{Path|/var/log/mysql/mysql.log}} as they store the executed SQL commands with passwords in clear text.}}

=== Proftpd ===

Proftpd has had several security problems, but most of them seem to have been fixed. Nonetheless, it is a good idea to apply some enhancements:

{{FileBox|filename=/etc/proftpd/proftpd.conf|1=
ServerName "My ftp daemon"
#Don't show the ident of the server
ServerIdent on "Go away"

#Makes it easier to create virtual users
RequireValidShell off

#Use alternative password and group file (passwd uses crypt format)
AuthUserFile "/etc/proftpd/passwd"
AuthGroupFile "/etc/proftpd/group"

# Permissions
Umask 077

# Timeouts and limitations
MaxInstances 30
MaxClients 10 "Only 10 connections allowed"
MaxClientsPerHost 1 "You have already logged on once"
MaxClientsPerUser 1 "You have already logged on once"
TimeoutStalled 10
TimeoutNoTransfer 20
TimeoutLogin 20

#Chroot everyone
DefaultRoot ~

#don't run as root
User  nobody
Group nogroup

#Log every transfer
TransferLog /var/log/transferlog

#Problems with globbing
DenyFilter \*.*/
}}

One can find documentation at http://www.proftpd.org.

=== Pure-ftpd ===

Pure-ftpd is an branch of the original trollftpd, modified for security reasons and functionality by Frank Dennis.

Use virtual users (never system accounts) by enabling the <var>AUTH</var> option. Set this to <code>-lpuredb:/etc/pureftpd.pdb</code> and create your users by using {{path|/usr/bin/pure-pw}}.

{{FileBox|filename=/etc/conf.d/pure-ftpd|1=
AUTH="-lpuredb:/etc/pureftpd.pdb"

## Misc. Others ##
MISC_OTHER="-A -E -X -U 177:077 -d -4 -L100:5 -I 15"
}}

Configure your <var>MISC_OTHER</var> setting to deny anonymous logins (<code>-E</code>), chroot everyone (<code>-A</code>), prevent users from reading or writing to files beginning with a . (dot) (<code>-X</code>), max idle time (<code>-I</code>), limit recursion (<code>-L</code>), and a reasonable umask value.

Warning: Do not use the <code>-w</code> or <code>-W</code> options! If you want to have a warez site, stop reading this guide!

One can find documentation at http://www.pureftpd.org.

=== Vsftpd ===

[[Vsftpd]] (short for very secure ftp) is a small ftp daemon running a reasonably default configuration. It is simple and does not have as many features as pureftp and proftp.

{{FileBox|filename=/etc/vsftpd|1=
anonymous_enable=NO
local_enable=YES

#read only
write_enable=NO

#enable logging of transfers
xferlog_std_format=YES

idle_session_timeout=20
data_connection_timeout=20
nopriv_user=nobody

chroot_list_enable=YES
chroot_list_file=/etc/vsftpd/chrootlist

ls_recurse_enable=NO
}}

As you can see, there is no way for this service to have individual permissions, but when it comes to anonymous settings it is quite good. Sometimes it can be nice to have an anonymous ftp server (for sharing open source), and vsftpd does a really good job at this.

=== Netqmail ===

[[Netqmail]] is often considered to be a very secure mail server. It is written with security (and paranoia) in mind. It does not allow relaying by default and has not had a security hole since 1996. Simply {{c|emerge netqmail}} and go configure!

=== Samba ===

[[Samba]] is a protocol to share files with Microsoft/Novell networks and it should not be used over the Internet. Nonetheless, it still needs securing.

{{FileBox|filename=/etc/samba/smb.conf|1=
[global]
  #Bind to an interface
  interfaces = eth0 10.0.0.1/32

  #Make sure to use encrypted password
  encrypt passwords = yes
  directory security mask = 0700

  #allow traffic from 10.0.0.*
  hosts allow = 10.0.0.

  #Enables user authentication
  #(don't use the share mode)
  security = user

  #Disallow privileged accounts
  invalid users = root @wheel

  #Maximum size smb shows for a share (not a limit)
  max disk size = 102400

  #Uphold the password policy
  min password length = 8
  null passwords = no

  #Use PAM (if added support)
  obey pam restrictions = yes
  pam password change = yes
}}

Make sure that permissions are set correct on every share and remember to read the [https://www.samba.org/ documentation].

Now restart the server and add the users who should have access to this service. This is done though the command {{Path|/usr/bin/smbpasswd}} with the parameter <code>-a</code>.

=== ssh ===

The most important securing that OpenSSH needs is turning on a stronger authentication based on public key encryption. Too many sites (like [https://www.sourceforge.net Sourceforge], [https://www.php.net PHP] and [https://www.apache.org Apache]) have suffered unauthorized intrusion due to password leaks or bad passwords.

{{FileBox|filename=/etc/ssh/sshd_config|1=
#Only enable version 2
Protocol 2

# Don't enable DSA and ECDSA server authentication
HostKey /etc/ssh/ssh_host_ed25519_key
HostKey /etc/ssh/ssh_host_rsa_key

# If you have a recent OpenSSH client, disable weak ciphers and Message Authentication Code
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com

#Disable root login. Users have to su to root
PermitRootLogin no

#Turn on Public key authentication
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys

#Disable .rhost and normal password authentication
HostbasedAuthentication no
PasswordAuthentication no
PermitEmptyPasswords no

#Only allow userin the wheel or admin group to login
AllowGroups wheel admin

#In those groups only allow the following users
#The @<domainname> is optional but replaces the
#older AllowHosts directive
AllowUsers kn@gentoo.org bs@gentoo.org

#Logging
SyslogFacility AUTH
LogLevel INFO

(Change this to your address)
ListenAddress 127.0.0.1
}}

Also verify that you don't have <code>UsePAM yes</code> in your configuration file as it overrides the public key authentication mechanism, or you can disable either <var>PasswordAuthentication</var> or <var>ChallengeResponseAuthentication</var>. More information about these options can be found in the sshd_config manual page.

Now all that your users have to do is create a key (on the machine they want to login from) and type in a passphrase with the following command:

{{RootCmd|/usr/bin/ssh-keygen -t ed25519|output=<pre>
Generating public/private ed25519 key pair.
Enter file in which to save the key (/home/kn/.ssh/id_ed25519):[Press enter]
Created directory '/home/kn/.ssh'.
Enter passphrase (empty for no passphrase): [Enter passphrase]
Enter same passphrase again: [Enter passphrase again]
Your identification has been saved in /home/kn/.ssh/id_ed25519.
Your public key has been saved in /home/kn/.ssh/id_ed25519.pub.
The key fingerprint is:
SHA256:UZwgOwzktPyblYRMZjKnaD0HizvtnX+qVnk4liaZewI kn@knielsen
</pre>}}

This will add two files in your {{Path|~/.ssh/}} directory called {{Path|id_ed25519}} and {{Path|id_ed25519.pub}}. The file called {{Path|id_ed25519}} is your private key and should be kept from other people than yourself. The other file {{Path|id_ed25519.pub}} is to be distributed to every server that you have access to. Add the key to the users home directory in {{Path|~/.ssh/authorized_keys}} and the user should be able to login:

{{Cmd
|scp id_ed25519.pub other-host:/var/tmp/currenthostname.pub
|ssh other-host
}}

View password:

{{Cmd|cat /var/tmp/currenthostname.pub >> ~/.ssh/authorized_keys}}

Now your users should guard this private key well. Put it on a media that they always carry with them or keep it on their workstation (put this in the [[Security_Handbook/Pre-installation_concerns#Security_policies|password policy]]).

For more information go to the [https://www.openssh.com/ OpenSSH] web site.

=== Using xinetd ===

[[wikipedia:xinetd|xinetd]] ({{Package|sys-apps/xinetd}}) is a replacement for {{c|inetd}} (which Gentoo does not have), the Internet services daemon. It supports access control based on the address of the remote host and the time of access. It also provide extensive logging capabilities, including server start time, remote host address, remote user name, server run time, and actions requested.

As with all other services it is important to have a good default configuration. But since {{c|xinetd}} is run as root and supports protocols that you might not know how they work, we recommend not to use it. But if you want to use it anyway, here is how you can add some security to it:

{{Emerge|sys-apps/xinetd sys-apps/tcp-wrappers}}

And edit the configuration file:

{{FileBox|filename=/etc/xinetd.conf|1=
defaults
{
 only_from = localhost
 instances = 10
 log_type = SYSLOG authpriv info
 log_on_success = HOST PID
 log_on_failure = HOST
 cps = 25 30
}

# This will setup pserver (cvs) via xinetd with the following settings:
# max 10 instances (10 connections at a time)
# limit the pserver to tcp only
# use the user cvs to run this service
# bind the interfaces to only 1 ip
# allow access from 10.0.0.*
# limit the time developers can use cvs from 8am to 5pm
# use tpcd wrappers (access control controlled in
# /etc/hosts.allow and /etc/hosts.deny)
# max_load on the machine set to 1.0
# The disable flag is per default set to no but I like having
# it in case of it should be disabled
service cvspserver
{
 socket_type = stream
 protocol = tcp
 instances = 10
 protocol = tcp
 wait = no
 user = cvs
 bind = 10.0.0.2
 only_from = 10.0.0.0
 access_times = 8:00-17:00
 server = /usr/sbin/tcpd
 server_args = /usr/bin/cvs --allow-root=/mnt/cvsdisk/cvsroot pserver
 max_load = 1.0
 log_on_failure += RECORD
 disable = no
}
}}

For more information read {{c|man 5 xinetd.conf}}.

=== X ===

By default [[Xorg]] is configured to act as an X server. This can be dangerous since X uses unencrypted TCP connections and listens for X clients.

{{Important|If you do not need this service disable it!}}

But if you depend on using the workstation as a X server use the {{Path|/usr/bin/xhost}} command with caution. This command allows clients from other hosts to connect and use your display. This can become handy if you need an X application from a different machine and the only way is through the network, but it can also be exploited by an attacker. The syntax of this command is {{Path|/usr/bin/xhost +hostname}}

{{Warning|Do not ever use the xhost + feature! This will allow any client to connect and take control of the X server. If an attacker can get access to the X server, he can log keystrokes and take control over desktop. If it is absolutely necessary to use xhost always, always remember to specify a host.}}

A more secure solution is to disable this feature completely by starting X with {{c|[[Xorg/Guide#Using_startx|startx]] -- -nolisten tcp}} or disable it permanently in the configuration.

{{FileBox|filename=/usr/bin/startx|1=
defaultserverargs="-nolisten tcp"
}}

To make sure that {{c|[[Xorg/Guide#Using_startx|startx]]}} does not get overwritten when emerging a new version of Xorg you must protect it. Add the following line to {{Path|/etc/portage/make.conf}}:

{{FileBox|filename=[[:/etc/portage/make.conf]]|1=
CONFIG_PROTECT_MASK="/usr/bin/startx"
}}

When using a graphical [[login manager]], a different approach is needed.

==== GDM ====

{{Dated|section}}

For [[GNOME/gdm|gdm]] (Gnome Display Manager):

{{FileBox|filename=/etc/X11/gdm/gdm.conf|1=
[server-Standard]
command=/usr/X11R6/bin/X -nolisten tcp
}}

==== XDM and KDM ====

{{Dated|section}}

For [[XDM|xdm]] (X Display Manager) and [[KDE#Display_manager|kdm]] (KDE Display Manager):

{{FileBox|filename=/etc/X11/xdm/Xservers|1=
:0 local /usr/bin/X11/X -nolisten tcp
}}

<noinclude>{{#set:Has short Title={{SUBPAGENAME}}|Has Title={{SUBPAGENAME}}}}
{{:{{ROOTPAGENAME}}/Navigator|Prev={{ROOTPAGENAME}}/Kernel security|Next={{ROOTPAGENAME}}/Chrooting_and_virtual servers}}</noinclude>
