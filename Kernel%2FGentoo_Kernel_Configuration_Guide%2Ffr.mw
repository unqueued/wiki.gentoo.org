<languages />


{{Metadata|abstract=Le but de ce document est d'introduire les concepts d'une configuration manuelle du noyau, et d'en détailler les pièges les plus courants.}}

Le but de ce document est d'introduire les concepts d'une configuration manuelle du noyau, et d'en détailler les pièges les plus courants.

== Introduction ==

Gentoo met à la disposition des utilisateurs deux moyens d'installation, de configuration, et de mise à jour du noyau : ''automatique'' (genkernel) et ''manuel''. Bien que la méthode automatique puisse être considérée comme plus facile pour la plupart des utilisateurs, il y a plusieurs raisons pour lesquelles un grand nombre d'utilisateurs de Gentoo choisit de configurer le noyau à la main :

# Plus grande flexibilité
# Noyau plus compact
# Temps de compilation plus court
# Expérience didactique
# Ennui sérieux
# Connaissance absolue de la configuration noyau, et/ou
# Contrôle complet

Ce guide ne parle pas de la méthode automatique (avec genkernel). Si l'utilisation de genkernel est préférée pour gérer le noyau, reportez-vous à la documentation de  [[Genkernel/fr|Genkernel]] pour plus de détails. 

Ce guide n'a pas l'ambition de documenter la configuration manuelle de A à Z — le processus de configuration s'appuie sur un large degré de bon sens, et un niveau de connaissance technique relativement élevé du système utilisé. Au lieu de cela, il vous présente les concepts de la configuration manuelle et détaille les pièges les plus courants que les utilisateurs se doivent d'éviter. 

{{Note|Ce guide est écrit avec les noyaux récents à l'esprit pour les architectures les plus courantes. Quelques détails peuvent différer pour les noyaux plus anciens et les architectures plus exotiques; cependant la majeure partie du contenu reste pertinente.}}

À ce stade, l'utilisateur est supposé avoir décompressé les sources du noyau Linux sur le disque dur (de façon générale sous {{Path|/usr/src}}), et devrait savoir comment lancer l'utilitaire de configuration {{c|menuconfig}} ansi que comment se déplacer dans le système de menus basé sur ncurse. Si l'utilisateur n'en est pas encore là, d'autres documentations sont disponibles. Lisez les articles suivant puis revenez sur ce guide :

* Le document [[Kernel/Overview/fr| Noyau/Vue d'ensemble]] contient des informations sur les différents noyaux disponibles dans l'arbre Portage.
* La page [[Kernel/Upgrade/fr|Noyau/Mise à jour]] explique comment mettre à jour un noyau ou comment commuter vers un autre noyau.
* La section [[Handbook:Main_Page/fr| Configuration du noyau]] du manuel gentoo couvre également quelques aspects de l'installation du noyau. Sélectionnez l'architecture appropriée, puis naviguez vers la section intitulée "Configurer le noyau Linux"

== Concepts de la configuration ==

=== Les bases ===

Le processus général est plutôt simple : une série d'options, sous forme de menus et sous-menus, sont présentées et le support matériel et les fonctionnalités du noyau pertinentes pour le système sont sélectionnées.

Le noyau comprend une ''configuration par défaut'', qui est présentée la première fois que <code>menuconfig</code> est exécuté sur un jeu de sources particulier. Les choix par défaut sont en général à large portée et raisonnables, ce qui veut dire qu'une majorité d'utilisateurs n'auront que peu de changements à faire à cette configuration de base. Quand le choix est fait de désactiver une option qui été activée dans la configuration par défaut du noyau, il est important de s'assurer qu'une bonne compréhension de ce que cette option fait exactement est obtenue, et des conséquence de sa déactivation. 

Lors d'une première configuration d'un noyau Linux, tentez de rester conservateur ; ne soyez pas trop aventurier, et contentez-vous de faire aussi peu de modification aux réglages par défaut que possible. En même temps, pensez bien qu'il y a une partie de la configuration qui se doit absolument d'être adaptée au système pour que ce dernier ne démarre !

=== Compilé en dur ou compilé en tant que module ===

Majoritairement, les options de configuration sont ''à trois état'' : elles peuvent être non compilées du tout <code>(N)</code>, compilées en dur dans le noyau <code>(Y)</code> ou compilées sous forme de module <code>(M)</code>. Les modules sont stockés en externe sur le système de fichiers, alors que les options compilées en dur sont incluses dans l'image du noyau elle-même. 

Il y a une différence importante entre compilé en dur et sous forme de modules : sauf quelques exceptions, le noyau n'essaye pas de charger un module externe quand le système pourrait en avoir besoin ; ceci est laissé à l'initiative de l'utilisateur. Alors que certaines autres parties du système peuvent disposer de mécanismes de ''chargement à la demande'', et qu'il y ait quelques mécanismes de chargement automatique de module, il est recommandé de compiler la prise en charge du matériel et les fonctionnalités du noyau directement dans le noyau. Le noyau est ainsi assuré de disposer des fonctionnalités et de la prise en charge du matériel quand il en a besoin. Cela se fait en configurant chaque fonctionnalité du kernel à <code>(Y)</code>. Pour que cette configuration soit cohérente, il est également nécessaire d'inclure le support des firmware directement dans le noyau. Cela se fait en configurant les options <code>FW_LOADER=y</code> et <code>CONFIG_FIRMWARE_IN_KERNEL=y</code> dans le fichier {{Path|.config}} du noyau ou par les choix suivants :

{{KernelBox|title=Inclure firmware dans le noyau|
Device Drivers  --->
   Generic Driver Options  --->
       -*- Userspace firmware loading support
       [*] Include in-kernel firmware blobs in kernel binary
}}

Pour d'autres parties de la configuration, ''compilée en dur'' est une absolue nécessité. Par exemple, si la partition root comporte un système de fichiers btrfs, le système ne démarrera pas si la prise en charge de brtfs a été compilée en tant que module. Le système devrait alors regarder dans la partition root pour trouver le module btrs (vu que les modules sont stockés dans la partition root), mais il ne peut pas lire la partition root à moins d'avoir déjà chargé le support pour btrfs! Si btrfs n'a pas été compilé en dur, le processus de démarrage n'arrivera pas à trouver la partition root.

=== Prise en charge du matériel ===

Au delà de détecter le ''type d'architecture'' du système, l'utilitaire de configuration ne cherche pas à identifier quel matériel est réellement présent sur le système. Bien qu'il existe des réglages par défaut pour la prise en charge de ''quelques'' matériels, il reviendra aux utilisateurs de trouver et sélectionner les options pertinentes pour chaque configuration matérielle. 

Sélectionner les options de configuration correctes nécessite une connaissance des composants à l'intérieur de, et connectés à, l'ordinateur. La plupart du temps, ces composants peuvent être identifiés sans avoir beoin de soulever le capot. Pour la plupart des composants, l'utilisateur doit identifier le ''jeu de circuits'' (chipset) utilisé par chacun d'entre-eux, plutôt que leur nom commercial. Beaucoup de cartes d'extension sont commercialisées avec une certaine marque, mais utilisent le chipset d'un autre fabricant.

Quelques utilitaires sont là pour aider les utilisateurs à déterminer quelles configurations du noyau utiliser. {{c|lspci}} (du paquet {{Package|sys-apps/pciutils}}) identifiera votre matériel PCI et AGP, ce qui inclut les composants construits sur la carte mère elle-même.  {{c|lsusb}} (du paquet {{Package|sys-apps/usbutils}} ) identifiera divers périphériques raccordés aux ports USB du système. 

The situation is somewhat confused by varying degrees of standardization in the hardware world. Unless the user selects extreme deviation from the default configuration settings, the IDE hard disks should "just work", as will the PS/2 or USB keyboard and mouse. Basic VGA display support is also included. However, some devices such as Ethernet adapters are hardly standardized at all; for these devices users will have to identify the Ethernet chipset and select the appropriate hardware support for the specific card to get network access.

In addition, while some things just-about-work with the default settings, more specialized options may need to be selected to get the full potential from the system. For example, if support for the appropriate IDE chipset has not been enabled, the IDE hard disks will run ''very'' slowly.

=== Fonctionnalités du noyau ===

In addition to hardware support, users need to consider the software features that will be required in the kernel. One important example of such a feature is filesystem support: users must select support for the filesystems in use on their hard disks, as well as any filesystems they might use on external storage devices (e.g. VFAT on USB drives). 

Another common software feature example is advanced network functionality. In order to do some kind of routing or firewalling the relevant configuration items must be included in the kernel configuration. 

=== Prêt ? ===

Now that the concepts have been introduced, it should be easy to start identifying the system hardware, browsing through the menuconfig interface, and selecting the required kernel options for the system. 

The rest of this guide should clear up common areas of confusion, and provide advice for how to avoid common problems which users often run into. Best wishes!

== Problèmes courants et zones de confusion ==

=== Les disques SATA sont SCSI ===

La plupart des ordinateurs de bureau modernes sont livrés avec des unités de stockage (disques durs et lecteurs de CD/DVD) sur un bus [https://en.wikipedia.org/wiki/SATA Serial ATA], plutôt que sur l'ancien bus [https://en.wikipedia.org/wiki/IDE Parallel_ATA ](câble en ruban). 

SATA support in Linux is implemented in a layer referred to as ''libata'', which sits below the SCSI subsystem. For this reason, SATA drivers are found in the SCSI driver section of the configuration. Additionally, the system's storage devices will be treated as SCSI devices, which means SCSI disk/cdrom support will also be required. The first SATA hard disk will be named {{Path|/dev/sda}} and the first SATA CD/DVD drive will be named {{Path|/dev/sr0}}. 

Bien que la majorité de ces pilotes soit pour les contrôleurs SATA, ''libata'' n'a pas été conçue pour être spécifique à SATA. Tous les pilotes courants IDE seront aussi portés dans ''libata'' dans un futur proche, et après cela, les considérations évoquées plus haut, s'appliqueront aussi aux utilisateurs d'IDE. 

{{KernelBox|title=Configuration options for libata|1=
Device Drivers  --->
   SCSI device support  --->
      <*> SCSI device support
      <*> SCSI disk support
      <*> SCSI CDROM support
 
      [ ] SCSI low-level drivers  --->
 
   <*> Serial ATA and Parallel ATA drivers (libata)  --->
}}

{{Note|Non-standard chipset(s) are listed under <code>SCSI low-level drivers</code> in the <code>Serial ATA and Parallel ATA drivers (libata)</code> kernel box above.}}

=== Jeux de circuits IDE et DMA ===

Despite the introduction of SATA, IDE devices are still very common and depended upon by many systems. IDE is a fairly generic technology, and as such, Linux supports almost all IDE controllers out-of-the-box without any controller-specific options selected. 

However, IDE is an old technology, and in its original ''Programmed Input/Output'' incarnation, it is unable to provide the transfer rates required for speedy access to modern storage devices. The generic IDE driver is limited to these PIO transfer modes which result in slow data transfer rates and significantly high CPU usage while data is being transferred to and from disk. 

Unless a user is dealing with a pre-1995 system, the IDE controller will also support an alternative transfer mode, known as ''Direct Memory Access (DMA)''. DMA is much much faster, and CPU utilization is barely affected while data transfers are taking place. If the system is suffering from really poor general system performance while it is using an IDE disk, chances are that DMA is not being used and should be enabled.

{{Note|As mentioned earlier, libata is available even for IDE drives. If using libata, then all the drives, including IDE drives, will be using DMA. There is no need to do any further checking or configuration.}}

When not using libata for IDE disks check for DMA usage and enable it. The following command can be used to determine if DMA is being used:

{{RootCmd|hdparm -d /dev/hda|output=<pre>
/dev/hda:
 using_dma    =  0 (off)
</pre>
}}

To enable DMA for older IDE devices (which is a deprecated setting), enable the following kernel features.

{{Warning|Enabling <var>CONFIG_BLK_DEV_IDE_SATA</var> will create a conflict with the libata SATA driver. Normally support for SATA is disabled on IDE controllers because it is handled better by the actively maintained SCSI subsystem. Enabling <var>CONFIG_BLK_DEV_IDE_SATA</var> will cause this driver to conflict with libata's support for SATA, which is generally a bad idea. This driver exists to handle old IDE drives, leave the handling of SATA to libata if possible!}}

{{KernelBox|title=Configuration options for deprecated IDE controllers|1=
Device Drivers  --->
   <*> ATA/ATAPI/MFM/RLL support (DEPRECATED)  --->
      --- ATA/ATAPI/MFM/RLL support (DEPRECATED)
      [ ]   Support for SATA (deprecated; conflicts with libata SATA driver)
      <*>   generic ATA/ATAPI disk support
      [*]     ATA disk support
      [*]     ATAPI floppy support
      <*>   Include IDE/ATAPI CDROM support
      <*>   Include IDE/ATAPI TAPE support
  
            *** IDE chipset support/bugfixes ***
      <*>   generic/default IDE chipset support
  
            *** PCI IDE chipsets support ***
}}

{{Note|Select the correct chipset(s) from the choices listed under <code>*** PCI IDE chipset support ***</code> in the ''Configuration options for IDE controllers'' kernel box above.}}

=== USB host controllers ===

[[USB]] is a widely adopted bus for connecting external peripherals to a computer. One of the reasons behind the success of USB is that it is a standardized protocol, however the USB ''host controller devices (HCDs)'' implemented on the host computer do vary a little. There are 4 main types: 

# <code>UHCI</code> is the Universal Host Controller Interface. It supports USB 1.1, and is usually found on motherboards based on a VIA or Intel chipset.
# <code>OHCI</code> is the Open Host Controller Interface. It supports USB 1.1 and is usually found on motherboards based on an Nvidia or SiS chipset.
# <code>EHCI</code> is the Extended Host Controller Interface. It is the only common host controller to support USB 2.0, and can typically be found on any computer that supports USB 2.0.
# <code>XHCI</code> is the eXtensible Host Controller Interface. It is the host controller for USB 3.0 and is compatible with USB 1.0, 1.1, 2.0, 3.0 and future speeds. Enable this feature when the board supports USB 3.0.

Most systems come with two of the above interface types: XHCI (USB 3.0) ''and'' EHCI (USB 2.0). To use USB devices, it is no longer necessary to select both options since XHCI is compatible with slower USB-controllers. Users can also enable EHCI to be "extra" safe; it does no harm if USB 2.0 controllers are unavailable.

If the relevant options corresponding to the USB HCD types present on the system are not selected, then 'dead' USB ports may be experienced. This case can be determined if a working USB device is plugged in, but it does not get power or respond in any way. 

A neat {{c|lspci}} trick (from the {{Package|sys-apps/pciutils}} package) makes it relatively easy to detect which HCDs are present on system. Ignoring the SATA controller which was also matched, it is easy to spot that this system requires EHCI and XHCI support:

{{RootCmd|lspci -v {{!}} grep HCI|output=<pre>
00:14.0 USB controller: Intel Corporation 8 Series/C220 Series Chipset Family USB xHCI (rev 04) (prog-if 30 [XHCI])
00:1a.0 USB controller: Intel Corporation 8 Series/C220 Series Chipset Family USB EHCI #2 (rev 04) (prog-if 20 [EHCI])
00:1d.0 USB controller: Intel Corporation 8 Series/C220 Series Chipset Family USB EHCI #1 (rev 04) (prog-if 20 [EHCI])
00:1f.2 SATA controller: Intel Corporation 8 Series/C220 Series Chipset Family 6-port SATA Controller 1 [AHCI mode] (rev 04) (prog-if 01 [AHCI 1.0])
</pre>
}}

Select the HCDs present on the system. In general select all three options for maximum support, or if the correct option is uncertain:

{{KernelBox|title=[[USB#Kernel_Configuration|Configuration for USB HCDs]]|1=
Device Drivers  --->
   USB support  --->
      <*> Support for Host-side USB
      ---   USB Host Controller Drivers
      <*>   xHCI HCD (USB 3.0) support
      <*>   EHCI HCD (USB 2.0) support
      < >   OHCI HCD  (USB 1.1) support
      < >   UHCI HCD (most Intel and VIA) support
}}

In Linux kernel 3.12.13 and later, <code>OHCI support for PCI-bus USB controllers</code> (<code>USB_OHCI_HCD_PCI</code>) has to be enabled if the USB controller is OHCI and a USB keyboard or mouse is used.

=== Multiprocessor, Hyper-Threading and multi-core systems ===

Many computer systems are based on multiple processors, but not always in an immediately obvious way. 

* Many of Intel's CPUs support a technology which they call [https://en.wikipedia.org/wiki/Hyperthreading hyper-threading]. This technology enables a single CPU to be viewed by the system as two ''logical'' processors.
* Most Intel/AMD CPUs actually consist of multiple physical processors inside a single package, these processors are known as [https://en.wikipedia.org/wiki/Multi-core_processor multi-core] processors.
* Some high-end computer systems actually have multiple physical processors installed on specialized motherboards to provide a significant performance increase over a ''uniprocessor'' system. System users will probably know if they have such a system, since they are not cheap.

In all of these cases, the appropriate kernel options must be selected to obtain optimum performance from these setups:

{{KernelBox|title=Configuration for multi-processing support|1=
Processor type and features  --->
 [*] Symmetric multi-processing support
 [*]   SMT (Hyperthreading) scheduler support
 [*]   Multi-core scheduler support (NEW)
}}

The next option not only enables power management features, but might also be a requirement for making all CPUs available to the system:

{{KernelBox|title=Power management for multi-processor systems|1=
Power management and ACPI options  --->
 [*] ACPI (Advanced Configuration and Power Interface) Support
}}

=== Prise en charge de la mémoire x86 haute ===

Due to limitations in the 32-bit address space of the {{Keyword|x86}} architecture, a kernel with default configuration can only support up to 896MB RAM. If a system has more memory, only the first 896MB will be visible, unless high memory support has been enabled. 

{{Note|This limitation is specific to the {{Keyword|x86}} (IA32) architecture. Other architectures naturally support large amounts of memory, with no configuration tweaks required.}}

La prise en charge de la mémoire haute n'est pas activée par défaut, parce qu'elle introduit une légère surcharge. Ne vous laissez pas distraire par cela, la surcharge est insignifiante comparée au gain de performance procuré par une augmentation de la taille de la mémoire ! 

Choose the 4GB option, unless your system has more than 4GB of RAM:

{{KernelBox|title=Enabling high memory support on x86|1=
Processor type and features  --->
 High Memory Support  --->
  (X) 4GB
  ( ) 64GB
}}

=== Compressed kernel modules ===

From kernel version 3.18.x (and up) compression of kernel modules has been possible. gzip and xz compression are available. It is important to emerge {{Package|sys-apps/kmod}} with the proper USE flags ''before'' compiling a kernel with compressed modules:

{{FileBox|filename=/etc/portage/package.use|title=Enabling compression support for kmod|1=
sys-apps/kmod lzma zlib
}}

Re-emerge {{Package|sys-apps/kmod}}:

{{Emerge|params+=--oneshot --changed-use|sys-apps/kmod}}

Enable module compression and select a preferred compression method:
{{KernelBox|title=Enable module compression|1=
Enable loadable module support --->
  [*]   Compress modules on installation
  Compression algorithm ()  --->
    <X> GZIP
        XZ
}}

Usually {{c|make modules_install}} runs {{c|depmod}}. If {{Package|sys-apps/kmod}} did not have the proper USE flags set (see the {{Path|package.use}} step above) the first time it was run, then the dependency list will be empty. The system will therefore be unable to load any modules that were built compressed.

After kmod has been recompiled, re-run {{c|depmod}} as a solution to this problem:

{{RootCmd|depmod -a
|modprobe <module_name>
}}

== Configuration du noyau et notation abrégée  ==

=== Introduction ===

When reading about kernel configuration, often times settings are described as <var>CONFIG_<something></var>. This short-hand notation is what the kernel configuration actually uses internally, and is what will be found in the kernel configuration file (be it {{Path|/usr/src/linux/.config}} or in the auto-generated {{Path|/proc/config.gz}} file). Of course, using short-hand notation would not do much good if this cannot translate this to the real location in the kernel configuration. The {{c|make menuconfig}} tool makes this possible.

=== Traduire  CONFIG_FOO en un emplacement réel dans les menus de configuration ===

Suppose the <var>CONFIG_TMPFS_XATTR</var> feature needs to be enabled. Launch the kernel configuration menu ({{c|make menuconfig}}) and press the {{Key|/}} key. This will open a search box. In the search box, type <var>CONFIG_TMPFS_XATTR</var>. 

The following is an output of the result of this search:

{{KernelBox|title=Result of searching menuconfig for "CONFIG_TMPFS_XATTR"|1=
Symbol: TMPFS_XATTR [=n]
Type  : boolean
Prompt: Tmpfs extended attributes
  Defined at fs/Kconfig:138
  Depends on: TMPFS [=y]
  Location:
    -> File systems
      -> Pseudo filesystems
        -> Virtual memory file system support (former shm fs) (TMPFS [=y])
  Selected by: TMPFS_POSIX_ACL [=n] && TMPFS [=y]
}}

Cette sortie nous fournit une multitude d'informations intéressantes.

{| class="table table-condensed table-striped" style="text-align: left;" 
|- 
! Entry
! Description
|- 
| Symbol: TMPFS_XATTR [=n]
| This identifies the kernel configuration entry being searched for. It also shows that this setting is currently ''not enabled'' ([=n]).
|- 
| Type: boolean
| The setting searched for is a boolean (which means it can be one of two options: enabled or disabled). Some settings are numbers or strings.
|- 
| Prompt: Tmpfs extended attributes
| This is the text found in the {{c|make menuconfig}} entry that controls the variable (<var>TMPFS_XATTR</var>) in the {{Path|.config}} file. It is essentially the variable name in a more human readable format.
|- 
| Depends on: TMPFS [=y]
| Before this entry can be seen <var>CONFIG_TMPFS</var> must be enabled. In this case it is already done (hence the [=y]) but if this is not the case, first look for (and enable) <var>CONFIG_TMPFS</var>.
|- 
| Location: ...
| This is the location in the {{c|make menuconfig}} structure where the setting can be found. Remember, the setting to look for is ''Tmpfs extended attributes''.
|- 
| Selected by: TMPFS_POSIX_ACL [=n] && TMPFS [=y]
| If the settings described here are both enabled (in this case the first one is not), then <var>CONFIG_TMPFS_XATTR</var> will be automatically enabled and will not be possible to be ''disabled'' until one of these settings is de-selected.
|-
|}

With this information, it should be possible to translate any <var>CONFIG_*</var> requirements fairly easily. In short, it means a user must

# Enable the settings described in the ''Depends on'' field;
# Navigate where ''Location:'' points;
# Toggle the value referred to by ''Prompt:'';

== Autres documentations sur la configuration du noyau ==

So far only general concepts and specific problems related to kernel configuration has been discussed; precise details have been left up to the user to discover. However, other parts of the Gentoo documentation collection provide specialized details for the topics at hand.

Such documents may be helpful while configuring specific areas of the kernel. Although this warning was mentioned previously in this guide, remember: users who are new to kernel configuration should not be adventurous when attempting to configure their kernels. Start by getting a basic system up and running, support for your audio, printing, etc., can always be added at a later date.

Getting the basics of a kernel operational will help users in later configuration steps because the user will know what is breaking their system and what is not. It is always wise to save the base (working) kernel configuration in a folder other than the kernel's sources folder ''before'' attempting to add new features or hardware.  

* The [[ALSA|ALSA article]] details the configuration options required for sound card support. Note that ALSA is an exception to the suggested scheme of not building things as modules: ALSA is actually much easier to configure when the components are modular.

* The [[Bluetooth|Bluetooth article]] details the options needed in order to use Bluetooth devices.

* The [[IPv6 router guide]] describes how to configure the kernel for routing using the next generation network addressing scheme.

* If the closed-source nVidia graphics drivers will be used for improved 3D graphics performance, the [[NVidia/nvidia-drivers|nVidia Guide]] lists the options that should and should not be selected on such a system.

* Amongst other things, the [[Power_management/Guide|Power Management guide]] explains how to configure the kernel for CPU frequency scaling, and for suspend and hibernate functionality.

* If running a PowerPC system, the [[PPC/FAQ|PPC FAQ]] has a few sections about PPC kernel configuration.

* The [[Printing|Printing guide]] lists the kernel options needed to support printing in Linux.

* The [[USB/Guide|USB Guide]] details the configuration settings required to use common USB devices such as keyboards, mice, storage devices, and USB printers.

== Dépannage ==

=== Les changements apportés à la configuration restent sans effet ===

It is very common for users to make a configuration change, but then make a small mistake in the process of actually booting to their newly configured kernel. They reboot into a kernel image that is not the one they just reconfigured, observe that whatever problem they were trying to solve is still present, and conclude that the configuration change does not solve the problem. 

The process of compiling and installing kernels is outside the scope of this document; refer to the [[Kernel/Upgrade|Kernel Upgrade Guide]] for general guidance. In short, the process to get a modified kernel is the following: 1) configure, 2) compile, 3) mount {{Path|/boot}} (if not already mounted), 4) copy new kernel image to {{Path|/boot}}, 5) Make sure the bootloader will reference the new kernel, 6) reboot. If one of those final stages has been missed, then the changes will not properly take effect.

It is possible to verify if the kernel that has booted matches the newly kernel compiled on the hard disk. This is performed by examining the date and time of the kernel's compilation. Assuming the system architecture is {{Keyword|x86}} and the kernel sources are installed at {{Path|/usr/src/linux}}, the following command can be used:

{{RootCmd|uname -v|sortie=<pre>
#4 SMP PREEMPT Sat Jul 15 08:49:26 BST 2006
</pre>}}

The above command will display the date and time the currently booted kernel was compiled.

{{RootCmd|ls -l /usr/src/linux/arch/i386/boot/bzImage|sortie=<pre>
-rw-r--r-- 1 dsd users 1504118 Jul 15 08:49 /usr/src/linux/arch/i386/boot/bzImage
</pre>}}

The above command displays the date and time that the kernel image on the hard disk was last compiled.

If the time stamps from the above commands differ by more than 2 minutes, it indicates a mistake was made during kernel reinstallation and the system has not booted from the newly modified kernel image.

=== Les modules ne sont pas chargés automatiquement ===

As mentioned earlier in this document, the kernel configuration system hides a large behavioral change when selecting a kernel component as a module (M) rather than built-in (Y). It is worth repeating this again because so many users fall into this trap.

When selecting a component as built-in, the code is built into the kernel image (bzImage). When the kernel needs to use that component, it can initialize and load it automatically, without any user intervention. 

When selecting a component as a module, the code is built into a kernel module file and installed on the filesystem. In general, when the kernel needs to use that component, it will not be able to find it. With some exceptions, the kernel makes no effort to actually load these modules — this task is left up to the user. 

If building support for a network card as a module, and it is discovered the network is not accessible, it is probably because the module is not loaded — either this must be done manually or the system must be configured to autoload the module at boot time.

Unless a user has a reasons to do otherwise, some time can be saved by building these components directly into the kernel image, so that the kernel can automatically configure these small settings by itself. 

== See also ==

* [[genkernel]] - A tool used to automate the build process of the kernel and initramfs.
* [[Security Handbook/Kernel security#The proc filesystem|proc filesystem (Security Handbook)]] - Dynamically change kernel parameters and variables on the fly.


[[Category:Kernel]] [[Category:Server and Security]] {{Migrated|originalauthors=Daniel Drake, Curtis Napier, Justin Robinson, Lukasz Damentko, Jonathan Smith, nightmorph}}
