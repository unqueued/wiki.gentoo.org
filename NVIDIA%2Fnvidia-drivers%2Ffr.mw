<languages />

{{Metadata|abstract=nvidia-drivers est le pilote graphique propriétaire pour les cartes graphiques nVidia. [[nouveau]] est une alternative Open Source à ce pilote.}}

'''{{Package|x11-drivers/nvidia-drivers}}''' est le pilote graphique propriétaire pour les cartes graphiques nVidia. [[nouveau]] est une alternative Open Source à ce pilote.

Les pilotes {{Package|x11-drivers/nvidia-drivers}} de l'arbre sont distribues par nVidia est compilés pour une prise en charge par le noyau Linux. Ils contiennent un objet binaire (blob) qui fait l'essentiel du travail de discussion avec la carte. Ils comprennent deux parties, un module du noyau et un pilote X11. Les deux parties sont incluses dans un paquet unique. Du a la manière dont nVidia empaquettent leurs pilotes, il est nécessaire de faire des choix avant de les installer.

Le paquet '''{{Package|x11-drivers/nvidia-drivers}}'''  contient la dernière version des pilotes nVidia qui prennent en charge ''toutes'' les cartes, avec plusieurs versions disponibles selon l'âge de la carte. Il a recours à une eclass pour détecter le type de carte  utilisée et ainsi installer la version adéquate.

== Compatibilité matérielle ==

Le paquet {{Package|x11-drivers/nvidia-drivers}} prend en charge de nombreuses cartes nVidia. De multiples versions sont disponibles selon la (les) carte(s) que vous avez. Reportez-vous à la page [http://www.nvidia.fr/object/legacy_drivers_fr.html Qu'est-ce qu'un « Legacy GPU »?],de la documentation officielle de nVidia pour déterminer la version du pilote qui doit être utilisée. Un moyen très commode pour la trouver est d'utiliser [http://www.nvidia.fr/Download/Find.aspx cet utilitaire]. Saisissez le nom de votre carte graphique (en faisant attention à cocher l'option « Legacy » dans le champ produit) et la version la plus adaptée à votre carte s'affichera sous le formulaire.

Si vous avez identifié votre carte comme étant une carte ancienne/obsolete, vous devez masquer les versions plus récentes des pilotes {{Package|nvidia-drivers}},par exemple:

 {{FileBox|filename=/etc/portage/package.mask|title=Masker les pilotes d'une version supérieure a 174|1=
>x11-drivers/nvidia-drivers-174
}}

Note that Gentoo does not provide the 71.86.xx versions. If the system has a card that needs these drivers then it is recommended to use the [[nouveau]] driver.

== Installation ==

=== Noyau ===

Comme mentionné ci-dessus, le pilote noyau nVidia s'installe et fonctionne en lien avec le noyau en service. Il est compilé en tant que module, c'est pourquoi votre noyau doit supporter le chargement de modules (voir ci-dessous).

Le module du noyau ({{Path|nvidia.ko}}) comprend une partie propriétaire (communément appelée le « blob ») (Binary Large Object pour Grand Objet Binaire)  qui pilote les circuits de votre carte, et une partie Open Source (la  « colle ») qui, en exécution, agit comme intermédiaire entre la partie propriétaire et le noyau. Tout cela doit s’emboîter proprement sous peine de devoir faire face à des pertes de données (via des paniques du noyau, des crash du serveur X sans sauvegarde des données des applications X) et même des pannes matérielles (surchauffe et autres problèmes en relation avec la gestion de l'énergie).

===Compatibilité du noyau===

De temps à autres, une nouvelle version du noyau modifie les ABI (Interface Binaire d'Applications) des pilotes, ce qui signifie que tous les pilotes qui ont recours à ces ABI doivent être changés. Pour les pilotes Open Source, en particulier ceux distribués avec le noyau, effectuer ces changements est presque trivial, dans la mesure où la chaîne complète des appels entre les pilotes et les autres parties du noyau, peut être passée en revue très facilement. Pour les pilotes propriétaires, comme le nvidia.ko, ce n'est pas la même partie de plaisir. Lorsque les ABI internes changent, vous ne pouvez pas tout simplement adapter la « colle », parce que vous ne savez pas comment cette colle est utilisée par la partie propriétaire. Si vous parvenez à réparer les choses et que tout semble marcher correctement, vous risquez encore, que le lancement de nvidi.ko dans votre noyau, nouveau et non pris en charge, aboutisse à des pertes de données et des pannes matérielles.

Lorsqu'une version nouvelle et incompatible du noyau sort, il est probablement mieux de s'en tenir, pendant un temps, à la version du noyau prise en charge la plus récente. Nvidia nécessite ordinairement quelques semaines pour préparer la nouvelle version propriétaire qu'ils jugent adaptée à un usage général. Soyez tout simplement patient. 
Si vous voulez faire fi de toute précaution, il est possible d'utiliser la commande epatch_user des eutils.eclass  avec le ebuild nvidia-drivers : ceci permet a l’utilisateur d'amender nvidia-drivers pour qu'il s'adapte d'une certaine manière à la version non prise en charge du noyau que vous avez choisie. Notez bien que dans ce cas ni les mainteneurs de nvidia-drivers, ni Nvidia ne vous apporteront leur aide si vous rencontrez des problèmes. Votre garantie matérielle sera très vraisemblablement rendue caduque. Les développeurs de Gentoo ne peuvent pas se mettre à régler vos problèmes dans la mesure où il s'agit d'un pilote propriétaire que seul Nvidia peut déboguer correctement. Par ailleurs, les mainteneurs du noyau (à la fois de Gentoo et de l'amont) ne prendront certainement pas en charge des pilotes propriétaires, où des systèmes « impures » qui rencontrerait des problèmes.

Si {{c|genkernel all}} a été utiliser pour configurer le noyau, alors tout est prêt. Dans le cas contraire revérifier la configuration du noyau afin d’être sure que l'option est activé:

{{KernelBox|title=Enable loadable module support|1=
[*] Enable loadable module support --->
}}

Vous devez aussi activer la prise en charge de '''MTRR''' (Memory Type Range Register) dans votre noyau :

{{KernelBox|title=Enable MTRR support|1=
Processor type and features --->
   [*] MTRR (Memory Type Range Register) support
}}

De plus, si vous avez une carte graphique AGP, vous pouvez ajouter en option la prise en charge de '''agpgart''' à votre noyau, soit incorporée au noyau, soit en tant que module.
Si vous ne choisissez pas d'utiliser le module incorporée au noyau de agpgart, alors les pilotes utiliseront leur propre mise en œuvre de '''agpgart''', appelée '''NvAGP'''. Sur certains systèmes, cela conduit à de meilleures performances, sur d'autres c'est l'inverse. Vous devrez apprécier cela vous-même sur votre système pour trouver ce qui apporte la meilleure performance. En cas de doute, utilisez la mise en œuvre incorporée au noyau agpgart:

{{KernelBox|title=Enable agpgart support|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note|Sur amd64,  IOMMU gère les réglages agpgart.}}

{{Important|Pour les processeurs x86 et AMD64 , les pilotes [[framebuffer]] interne du noyau génèrent des conflits avec les pilotes binaires de nVidia. Avant de copiler le kernel por ces pilotes, enlever complètement le support pour ces pilotes interne ainsi:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Maintenant vérifier que le pilote [nouveau] n'est pas activé:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        < > Nouveau (nVidia) cards
}}
}}

Il existe un tampon de trames alternatif, [[uvesafb]], qui peut être installé en parallèle aux pilotes nvidia {{Package|x11-drivers/nvidia-drivers}}. 

{{Important|Pour les processeurs x86 et AMD64 ,le pilote [[uvesafb]] du noyau entre en conflit avec le pilote binaire fournis par nVidia pour les version supérieures a 361.28 .}}


Pour les systemes (U)EFI, [uvesafb] ne foncionera pas.
Mise en gardeː activer le module ''efifb'' dans le noyau (<code>CONFIG_FB_EFI=y</code>) génère des problèmes intermittent avec l'initialisation des pilotes nVidia.
Il n'y a pas d'alternative connue au frambuffer pour des systèmes (U)EFI.

L'ebuild '''{{Package|x11-drivers/nvidia-drivers}}''' détecte automatiquement la version de votre noyau en se basant sur le lien symbolique {{Path|/usr/src/linux}}. Assurez-vous que ce lien symbolique pointe bien sur les bonnes sources et que votre noyau est bien configuré.
Reportez-vous à la section "Configurer votre noyau" du [http://www.gentoo.org/doc/fr/handbook/ Manuel de Gentoo] pour une plus ample information sur la manière de configurer votre noyau.

Sélectionner le noyau en utilisant {{c|eselect}}.
Par exemple pour utiliser le noyau {{Package|sys-kernel/gentoo-sources}} version  3.7.10 le listing du noyau peut apparaître ainsiː

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the symlinked kernel.

Si le lien symbolique ne pointe pas sur les bonnes sources, actualiser en choisissant le numéro correspondant aux sources du noyau que vous voulez utiliser, comme dans l'exemple ci-dessus.

{{RootCmd|eselect kernel set 1}}

== Configuration ==

=== Pilotes === 

Il est temps maintenant d'installer les pilotes. Vous pouvez le faire en suivant les instructions du [[Xorg/Guide/fr| Guide de configuration du serveur X]]    et en définissant <code>VIDEO_CARDS="nvidia"</code> dans  {{Path|/etc/portage/make.conf}}. Lors de l'installation du serveur X, il sélectionnera alors la bonne version du pilote {{Package|x11-drivers/nvidia-drivers}} pour vous.

{{Note|Les pilotes peuvent être installés en activant l'option <code>gtk</code> de la variable USE dans le fichier {{Path|/etc/portage/make.conf}}. Cela installera le paquet {{Package|media-video/nvidia-settings}}, un outil convivial pour voir et configurer de nombreux aspects de votre carte nVidia.}}

{{Important|À chaque  [[Kernel/Upgrade/fr| actualisation du noyau]] ou re-compilation du noyau actuel, vous devez réinstaller les modules du noyau  nVidia. Une façon aisée de recompiler les  modules installés par les ebuilds (tel que {{Package|x11-drivers/nvidia-drivers}}) consiste à exécuter {{c|emerge @module-rebuild}}.}}

Une fois l'installation terminée, exécutez {{c|modprobe nvidia}} pour charger le module du noyau en mémoire. S'il s'agit d'une mise à jour, vous devez préalablement retirer le module précédent.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Pour ne pas avoir à charger manuellement le module à chaque démarrage, et pour automatiser cette tâche, éditez le fichier {{Path|/etc/conf.d/modules}} et ajoutez-y <code>nvidia</code>.

{{Important|Si <code>agpgar</code> est compilé en tant que module, vous devez aussi l'ajouter au fichier {{Path|/etc/conf.d/modules}}.}}

=== Signature des modules du noyeau (optionnel) ===

{{Note|L'information fournie dans cette section est hors propos pour les systèmes qui n'implémente pas la signature des modules du noyeau.Libre a vous de la sauter.}}

If you are using secure boot kernel signing then you will need to sign the Nvidia kernel modules before they can be loaded.

You do this by using the kernel provided {{c|perl}} script as follows.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

As of driver version 358.09 a new module has been made to handle monitor mode setting and for this driver version this module must also be signed.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Once you have signed these modules then the driver will load as expected on boot up. This module signing method can be used to sign other modules not only your nvidia-drivers. You would have to modify the path and corresponding module accordingly.

===Le serveur X===

Dès lors que les pilotes appropriés sont installés, configurer le serveur X pour qu'il utilise le pilote <code>nvidia</code> a la place du pilote par défaut <code>nv</code>.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Run {{c|eselect}} so that the X server uses the nVidia GLX libraries:

{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Enabling global nvidia support ===

Some tools, such as {{Package|media-video/mplayer}} and {{Package|media-libs/xine-lib}}, use a local USE flag called <code>xvmc</code> which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in <code>xvmc</code> in the USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to {{Package|media-video/mplayer}} and/or {{Package|media-libs/xine-lib}} in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the <code>nvidia</code> USE flag, so it might be a good idea to add it to {{Path|/etc/portage/make.conf}}.

Then, run {{c|emerge -uD --newuse @world}} to rebuild the applications that benefit from the USE flag change.

=== Using the nVidia settings tool ===

nVidia also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as {{Package|media-video/nvidia-settings}}. As mentioned earlier, it will be pulled in automatically when installing the drivers with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

===Activer OpenGL/OpenCL===

To enable OpenGL and OpenCL though the device, run:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Make sure that the Xorg server is not running during these changes.

== Utilisation ==

==Tester la carte==

Pour tester votre carte nVidia, lancez X et exécutez la commande {{c|glxinfo}}, qui fait partie du paquet {{Package|x11-apps/mesa-progs}}. Elle devrait vous notifier que le rendu direct est activé :

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

To monitor the FPS, run {{c|glxgears}}.

== Dépannage ==

* {{Bug|nvidia-drivers|search=package}}

=== Le pilote ne s'initialise pas lorsque les interruptions  MSI sont activées ===

Par défaut, le pilote NVIDIA Linux utilise les interruptions signalées par message '''MSI'''('''M'''essage '''S'''ignaled '''I'''nterrupts ). Ceci procure des avantages de compatibilité et d'adaptabilité, principalement parce que cela évite le partage des requêtes d'interruption (IRQ). Quelques systèmes ont été identifiés comme ayant des problèmes de prise en charge des MSI, alors qu'ils fonctionnent bien avec les interruptions câblées virtuelles. Ces problèmes  se traduisent par une inaptitude à démarrer le serveur X avec le pilote NVIDIA, ou des échecs dans l'initialisation de la plate-forme de compilation parallèle CUDA de NVIDIA.

Les MSI peuvent être désactivées  via le paramètre <code>NVreg_EnableMSI=0</code> du module NVIDIA du noyau. Ceci peut être défini en ligne de commande au moment du chargement du module, ou de manière plus appropriée via les fichiers de configuration du module du noyau de la distribution (tel que ceux placés dans {{Path|/etc/modprobe.d/}}).

Par exemple :

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Faire fonctionner l'accélération 2D sur des machines possédant 4 GB de mémoire ou plus ===

Si vous rencontrez des problèmes avec l'accélération 2D de nVidia, il est probable que ce soit parce le système ne peut pas définir une plage mémoire associée au mode write-combining pour les MTTR (Memory Type Range Registers). Pour le savoir, vérifiez le contenu de {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Chacune des lignes devrait contenir <code>write-back</code> ou <code>write-combining</code>. Si vous apercevez une ligne avec <code>uncachable</code> vous devez changer un paramètre de votre BIOS pour régler ce problème.

Redémarrez et entrez dans la configuration du BIOS (probablement sous ''Paramètres du processeur''). Changez le paramètre <code>continuous</code> en <code>discrete</code> et redémarrez votre Linux. Vous verrez alors qu'il n'y a plus d'entrée <code>uncachable</code> et que l'accélération 2D fonctionne sans problème.

===Lors du chargement du module du noyau, apparition du message ''no such device''===

Ceci est généralement dû à un des problèmes suivants :

# The system does not have a nVidia card at all.  Check {{c|lspci}} output to confirm that the system has a nVidia graphics card installed and detected.
# The currently installed version of {{Package|x11-drivers/nvidia-drivers}} does not support the installed graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Another kernel driver has control of the hardware. Check {{c|lspci -k}} to see if another driver like "nouveau" is bound to the graphics card. If so, disable or blacklist this driver.

=== Xorg says it can't find any screens ===

When after booting the system, it ends up with a black screen or a console prompt instead of the GUI; then press {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} to bring up a virtual console. Next, run:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd|startx}}

to see the output of Xorg. If one of the first errors is that Xorg can't find any screens, then follow the following steps to resolve the issue.

It should be enough to run the following command before rebooting:

{{Cmd| /opt/bin/nvidia-xconfig}}

But if that doesn't work, run {{c|lspci}} and notice that the video card starts off like this:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

Take the first bit, <code>01.00.0</code> and put it in the {{Path|/etc/X11/xorg.conf}} file with the <code>BusID</code> option:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Le rendu direct n'est pas activé ===

If direct rendering does not work, it may be because the kernel has Direct Rendering Manager enabled, which conflicts with the driver. See the direct rendering status by following instructions in the section [[#Testing the card|Testing the card]].

First, disable Direct Rendering Manager (<code>CONFIG_DRM</code>) in the kernel :

{{KernelBox|title=Disabling Direct Rendering Manager|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Next, rebuild {{Package|x11-drivers/nvidia-drivers}} since the driver may have built against the kernel DRM symbols. It should fix the problem.

=== Video playback stuttering or slow ===

Lately there seems to be some breaking with playback of some types of video with the NVidia binary drivers, causing slow video playback or significant stuttering. This problem seems to be occurring within the Intel CPU Idle replacement instead of the common ACPI CPU idling method for certain CPU's.

Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVidia Powermizer feature, or setting Powermizer to maximum performance within {{c|nvidia-settings}} has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <code>mplayer-nodeint</code> with something similar to <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> as a work around.)

=== No vertical synchronization (no VSync, tearing) in OpenGL applications ===

Adding the following option to the screen section prevents tearing on GTX 660, 660 Ti, and probably some other GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== Configuration expert ==

=== Documentation ===

Le paquet du pilote nVidia {{Package|x11-drivers/nvidia-drivers}} est fourni avec une documentation exhaustive. Elle est installée dans  {{Path|/usr/share/doc}} et peut être lue en utilisant la commande suivante :

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Paramètres du module du noyau ===

Le module du noyau <code>nvidia</code> reconnaît un certain nombre de paramètres (options) qui peuvent être utiliser pour peaufiner le comportement du pilote. La plupart d'entre-eux sont mentionnés dans la documentation. Pour ajouter des paramètres, ou pour en changer la valeur, éditez le fichier {{Path|/etc/modprobe.d/nvidia.conf}}. Pensez à exécuter la commande {{c|update-modules}} après avoir modifié ce fichier, et '''n'oubliez pas''' que vous devrez recharger le module  <code>nvidia</code> pour que les nouveaux paramètres soient pris en compte.

Edit {{Path|/etc/modprobe.d/nvidia.conf}}:

{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Mettez les informations du module à jour :

{{RootCmd|update-modules}}

Décharger le module <code>nvidia</code>

{{RootCmd|modprobe -r nvidia}}

...et rechargez-le :

{{RootCmd|modprobe nvidia}}

=== Configuration avancée de X ===

La couche GLX possède aussi une pléthore d'options. Elles contrôlent la configuration de la sortie TV, du double-écran, contrôle la détection de fréquence, etc. Là-encore, les options disponibles sont expliquées en détail dans la documentation.

Pour utiliser ces options, vous devez les lister dans la section périphérique ad hoc de votre fichier de configuration de X (en général {{Path|/etc/X11/xorg.conf}}). Par exemple, pour désactiver le logo de démarrage :

{{FileBox|filename=/etc/X11/xorg.conf|title=Disable the splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== Voir aussi ==

* [[nouveau & nvidia-drivers switching]] - Hybrid graphics mode utilisant les pilotes open-source.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configurer un système utilisant les pilotes source-fermée pour les hybrid graphics (modesetting).

== Remerciements ==
Nous tenons à remercier les auteurs et éditeurs suivants pour leur contribution à ce guide :Sven Vermeulen, Joshua Saddler, M Curtis Napier, Chris Gianelloni et José Fournier.

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
