<languages />

{{Metadata|abstract=nvidia-drivers est le pilote graphique propriétaire pour les cartes graphiques NVIDIA. [[nouveau]] est une alternative Open Source à ce pilote.}}

[[Article description::The {{Package|x11-drivers/nvidia-drivers}} package contains the ''proprietary'' graphics driver for NVIDIA graphic cards.]] An open source alternative is [[nouveau]].

Les pilotes {{Package|x11-drivers/nvidia-drivers}} de l'arbre sont distribués par NVIDIA et compilés pour une prise en charge par le noyau Linux. Ils contiennent une partie binaire (blob) qui fait l'essentiel du travail de discussion avec la carte. Ils comprennent deux parties, un module du noyau et un pilote X11. Les deux parties sont incluses dans un paquet unique. Dû a la manière dont NVIDIA empaquettent leurs pilotes, il est nécessaire de faire des choix avant de les installer.

Le paquet {{Package|x11-drivers/nvidia-drivers}} contient la dernière version des pilotes NVIDIA qui prennent en charge la plupart des cartes, avec plusieurs versions disponibles selon l'âge de la carte. Il a recours à une ''eclass'' pour détecter le type de carte  utilisée et ainsi installer la version adéquate.

== Compatibilité matérielle ==

Le paquet {{Package|x11-drivers/nvidia-drivers}} prend en charge de nombreuses cartes NVIDIA. De multiples versions sont disponibles selon la (les) carte(s) que vous avez. Reportez-vous à la page [http://www.nvidia.fr/object/legacy_drivers_fr.html Qu'est-ce qu'un « Legacy GPU »?],de la documentation officielle de NVIDIA pour déterminer la version du pilote qui doit être utilisée. Un moyen très commode pour la trouver est d'utiliser [http://www.nvidia.fr/Download/Find.aspx cet utilitaire]. Saisissez le nom de votre carte graphique (en faisant attention à cocher l'option « Legacy » dans le champ produit) et la version la plus adaptée à votre carte s'affichera sous le formulaire.

Si vous avez identifié votre carte comme étant une carte ancienne/obsolete, vous devez masquer les versions plus récentes des pilotes {{Package|nvidia-drivers}},par exemple:

 {{FileBox|filename=/etc/portage/package.mask|title=Masker les pilotes d'une version supérieure a 174|1=
>x11-drivers/nvidia-drivers-174
}}

Notez que Gentoo ne fournit pas les versions 71.86.xx. Si votre carte requiert ces pilotes, il est conseiller d'utiliser le pilote [[nouveau]].

== Installation ==

=== Noyau ===

Comme mentionné ci-dessus, le pilote noyau NVIDIA s'installe et fonctionne en lien avec le noyau en service. Il est compilé en tant que module, c'est pourquoi votre noyau doit supporter le chargement de modules (voir ci-dessous).

Le module du noyau ({{Path|nvidia.ko}}) comprend une partie propriétaire (communément appelée le « blob ») (Binary Large Object pour Grand Objet Binaire)  qui pilote les circuits de votre carte, et une partie Open Source (la  « colle ») qui, en exécution, agit comme intermédiaire entre la partie propriétaire et le noyau. Tout cela doit s’emboîter proprement sous peine de devoir faire face à des pertes de données (via des paniques du noyau, des crash du serveur X sans sauvegarde des données des applications X) et même des pannes matérielles (surchauffe et autres problèmes en relation avec la gestion de l'énergie).

=== Compatibilité du noyau ===

De temps à autres, une nouvelle version du noyau modifie les ABI (Interface Binaire d'Applications) des pilotes, ce qui signifie que tous les pilotes qui ont recours à ces ABI doivent être changés. Pour les pilotes Open Source, en particulier ceux distribués avec le noyau, effectuer ces changements est presque trivial, dans la mesure où la chaîne complète des appels entre les pilotes et les autres parties du noyau, peut être passée en revue très facilement. Pour les pilotes propriétaires, comme le nvidia.ko, ce n'est pas la même partie de plaisir. Lorsque les ABI internes changent, vous ne pouvez pas tout simplement adapter la « colle », parce que vous ne savez pas comment cette colle est utilisée par la partie propriétaire. Si vous parvenez à réparer les choses et que tout semble marcher correctement, vous risquez encore, que le lancement de nvidi.ko dans votre noyau, nouveau et non pris en charge, aboutisse à des pertes de données et des pannes matérielles.

Lorsqu'une version nouvelle et incompatible du noyau sort, il est probablement mieux de s'en tenir, pendant un temps, à la version du noyau prise en charge la plus récente. NVIDIA prend ordinairement quelques semaines pour préparer la nouvelle version propriétaire qu'ils jugent adaptée à un usage général. Soyez tout simplement patient. 
Si c'est vraiment nécessaire, il est possible d'utiliser la commande epatch_user des eutils.eclass avec le ebuild nvidia-drivers : ceci permet à l’utilisateur d'amender nvidia-drivers pour qu'il s'adapte d'une certaine manière à la version non prise en charge du noyau choisie. Bien noter que dans ce cas ni les mainteneurs de nvidia-drivers, ni NVIDIA n'apporteront leur aide en cas de problème. La garantie matérielle sera très vraisemblablement rendue caduque. Les développeurs de Gentoo ne peuvent pas se mettre à régler ces problèmes dans la mesure où il s'agit d'un pilote propriétaire que seul NVIDIA peut déboguer correctement. Par ailleurs, les mainteneurs du noyau (à la fois de Gentoo et de l'amont) ne prendront certainement pas en charge des pilotes propriétaires, ou des systèmes « impurs » qui rencontreraient des problèmes.

Si {{c|genkernel all}} a été utiliser pour configurer le noyau, alors tout est prêt. Dans le cas contraire revérifier la configuration du noyau afin d’être sure que l'option est activé:

{{KernelBox|title=Enable loadable module support|1=
[*] Enable loadable module support --->
}}

Vous devez aussi activer la prise en charge de '''MTRR''' (Memory Type Range Register) dans votre noyau :

{{KernelBox|title=Activer le support MTRR|1=
Processor type and features --->
   [*] MTRR (Memory Type Range Register) support
}}

De plus, si vous avez une carte graphique AGP, vous pouvez ajouter en option la prise en charge de '''agpgart''' à votre noyau, soit incorporée au noyau, soit en tant que module.
Si vous ne choisissez pas d'utiliser le module incorporée au noyau de agpgart, alors les pilotes utiliseront leur propre mise en œuvre de '''agpgart''', appelée '''NvAGP'''. Sur certains systèmes, cela conduit à de meilleures performances, sur d'autres c'est l'inverse. Vous devrez apprécier cela vous-même sur votre système pour trouver ce qui apporte la meilleure performance. En cas de doute, utilisez la mise en œuvre incorporée au noyau agpgart:

{{KernelBox|title=Activer le spport agpgart|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note|Sur amd64,  IOMMU gère les réglages agpgart.}}

{{Important|Pour les processeurs x86 et AMD64, les pilotes [[framebuffer]] internes du noyau génèrent des conflits avec les pilotes binaires de NVIDIA. Avant de compiler le noyau pour ces processeurs, enlever complètement le support pour ces pilotes internes ainsi:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Maintenant, vérifier que le pilote [nouveau] n'est pas activé :
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        < > Nouveau (nVidia) cards
}}
}}

Il existe un tampon de trames ([[framebuffer]])  alternatif, [[uvesafb]], qui peut être installé en parallèle aux pilotes nVidia {{Package|x11-drivers/nvidia-drivers}}. 

{{Important|Pour les processeurs x86 et AMD64, le pilote [[uvesafb]] du noyau entre en conflit avec le pilote binaire fourni par NVIDIA pour les version supérieures a 361.28 .}}

Pour les systèmes (U)EFI, [uvesafb] ne fonctionnera pas.
Mise en garde ː activer le module ''efifb'' dans le noyau (<code>CONFIG_FB_EFI=y</code>) génère des problèmes intermittents avec l'initialisation des pilotes NVIDIA.
Il n'y a pas d'alternative connue au frambuffer pour les systèmes (U)EFI.

L'ebuild {{Package|x11-drivers/nvidia-drivers}} détecte automatiquement la version de votre noyau en se basant sur le lien symbolique {{Path|/usr/src/linux}}. Assurez-vous que ce lien symbolique pointe bien sur les bonnes sources et que votre noyau est bien configuré.
Reportez-vous à la section "Configurer votre noyau" du [[Handbook:Main_Page/fr|Manuel de Gentoo]] pour une plus ample information sur la manière de configurer votre noyau.

Sélectionner le noyau en utilisant {{c|eselect}}.
Par exemple pour utiliser le noyau {{Package|sys-kernel/gentoo-sources}} version  3.7.10 le listing du noyau peut apparaître ainsiː

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

Dans la liste ci-dessus, notez que le noyau linux-3:7:10-gentoo est marqué d'un astérisque (<code>*</code>) pour montrer qu'il est le noyau pointé par le lien symbolique.

Si le lien symbolique ne pointe pas sur les bonnes sources, actualiser en choisissant le numéro correspondant aux sources du noyau que vous voulez utiliser, comme dans l'exemple ci-dessous.

{{RootCmd|eselect kernel set 1}}

== Configuration ==

=== Pilotes === 

Il est temps maintenant d'installer les pilotes. Vous pouvez le faire en suivant les instructions du [[Xorg/Guide/fr| Guide de configuration du serveur X]]    et en définissant <code>VIDEO_CARDS="nvidia"</code> dans  {{Path|/etc/portage/make.conf}}. Lors de l'installation du serveur X, il sélectionnera alors la bonne version du pilote {{Package|x11-drivers/nvidia-drivers}} pour vous.

{{Note|Les pilotes peuvent être installés en activant l'option <code>gtk</code> de la variable USE dans le fichier {{Path|/etc/portage/make.conf}}. Cela installera le paquet {{Package|media-video/nvidia-settings}}, un outil pratique pour voir et configurer de nombreux aspects de votre carte NVIDIA.}}

{{Important|À chaque [[Kernel/Upgrade/fr| mise à jour du noyau]] ou re-compilation du noyau actuel, vous devez réinstaller les modules du noyau NVIDIA. Une façon aisée de recompiler les  modules installés par les ebuilds (tel que {{Package|x11-drivers/nvidia-drivers}}) consiste à exécuter {{c|emerge @module-rebuild}}.}}

Une fois l'installation terminée, exécutez {{c|modprobe nvidia}} pour charger le module du noyau en mémoire. S'il s'agit d'une mise à jour, vous devez préalablement retirer le module précédent.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Pour ne pas avoir à charger manuellement le module à chaque démarrage, et pour automatiser cette tâche, éditez le fichier {{Path|/etc/conf.d/modules}} et ajoutez-y <code>nvidia</code>.

{{Important|Si <code>agpgar</code> est compilé en tant que module, vous devez aussi l'ajouter au fichier {{Path|/etc/conf.d/modules}}.}}

=== Signature des modules du noyeau (optionnel) ===

{{Note|L'information fournie dans cette section est hors propos pour les systèmes qui n'implémente pas la signature des modules du noyeau.Libre a vous de la sauter.}}

Si la signature du démarrage du noyau est utilisée, alors il faut signer les modules NVIDIA avant qu'ils soient chargés.

Effectuer ceci en utilisant le script fourni par le noyau {{c|perl}} de la façon suivante.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

Depuis la version 358.09 du pilote un nouveau module a été créer qui gère le mode setting et pour ces version du pilote ce module doit lui aussi être signer.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Une fois ces modules signés, le pilote se chargera comme prévu au démarrage.
La méthode de signature des modules peut être utilisée pour signer d'autre modules − pas seulement le pilote NVIDIA. Dans ce cas il faut modifier le chemin et le module correspondant en conséquence.

===Le serveur X===

Dès lors que les pilotes appropriés sont installés, configurer le serveur X pour qu'il utilise le pilote <code>nvidia</code> a la place du pilote par défaut <code>nv</code>.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Entrer {{c|eselect}} de sorte que le serveur X utilise les librairies GLX de NVIDIA :

{{RootCmd|eselect opengl set nvidia}}

=== Droits d'accès/Permissions ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Activer le support Global de nVidia ===

Certain outils,tels que {{Package|media-video/mplayer}} et {{Package|media-libs/xine-lib}}, utilisent un USE flag locale nommer <code>xvmc</code> qui active le support XvMCNVIDIA , utile por regarder des filmes en Haute Résolution . Ajouter <code>xvmc</code> dans les variables USE de {{Path|/etc/portage/make.conf}} ou ajouter le USE flag a {{Package|media-video/mplayer}} et/ou {{Package|media-libs/xine-lib}} dans {{Path|/etc/portage/package.use}}.

Les processeurs graphiques des séries GeForce 8 et postérieures sont fournis avec la prise en charge VDPAU qui a supplanté la prise en charge  XvMCNVIDIA. Reportez-vous à l'article [[VDPAU]] pour savoir comment activer la prise en charge [[VDPAU]].

Il y a également des applications qui ont besoin de l'option  <code>nvidia</code> de la variable USE, aussi désirerez-vous peut-être l'ajouter au fichier {{Path|/etc/portage/make.conf}}.

Exécutez ensuite {{c|emerge -uD --newuse @world}} pour recompiler les applications qui bénéficient du changement d'option de la variable USE.

=== Utiliser l'outil de configuration de nVidia ===

NVIDIA fournit également un outil de configuration. Cet outi permet de voir et de modifier des réglages graphiques sans avoir à redémarrer le serveur X. Il est disponible dans Portage sous le nom {{Package|media-video/nvidia-settings}}. Comme indiqué plus haut, il sera automatiquement installé si vous installez les pilotes avec l'option <code>gtk</code> de la variable USE activée, soit dans {{Path|/etc/portage/make.conf}}, soit dans {{Path|/etc/portage/package.use}}.

===Activer OpenGL/OpenCL===

Pour activer OpenGL et OpenCL , lancer:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Assurez-vous que le serveur Xorg est arrêté lors de ces modifications.

== Utilisation ==

=== Tester la carte ===

Pour tester votre carte NVIDIA, lancer X et exécuter la commande {{c|glxinfo}}, qui fait partie du paquet {{Package|x11-apps/mesa-progs}}. Elle devrait notifier que le rendu direct est activé :

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Pour contrôler le FPS (nombre de trames par seconde), exécuter {{c|glxgears}}.

== Dépannage ==

Pour une vue d'ensemble des bogues reportés non résolus du paquet {{Package|x11-drivers/nvidia-drivers}}, se reporter à {{Bug|nvidia-drivers|search=package}}.

=== FATAL: modpost: GPL-incompatible module *.ko uses GPL-only symbol ===

When the ebuild is complaining about the 'mutex_destroy' GPL-only symbol:

{{RootCmd|emerge nvidia-drivers|output=<pre>
FATAL: modpost: GPL-incompatible module nvidia.ko uses GPL-only symbol 'mutex_destroy' 
</pre>}}

Be sure to disable <var>CONFIG_DEBUG_MUTEXES</var> in the kernel's {{Path|.config}} file, as suggested by [https://forums.gentoo.org/viewtopic-p-7964326.html this forum thread].

=== Le pilote ne s'initialise pas lorsque les interruptions  MSI sont activées ===

Par défaut, le pilote NVIDIA Linux utilise les interruptions signalées par message '''MSI'''('''M'''essage '''S'''ignaled '''I'''nterrupts ). Ceci procure des avantages de compatibilité et d'adaptabilité, principalement parce que cela évite le partage des requêtes d'interruption (IRQ). Quelques systèmes ont été identifiés comme ayant des problèmes de prise en charge des MSI, alors qu'ils fonctionnent bien avec les interruptions câblées virtuelles. Ces problèmes  se traduisent par une inaptitude à démarrer le serveur X avec le pilote NVIDIA, ou des échecs dans l'initialisation de la plate-forme de compilation parallèle CUDA de NVIDIA.

Les MSI peuvent être désactivées  via le paramètre <code>NVreg_EnableMSI=0</code> du module NVIDIA du noyau. Ceci peut être défini en ligne de commande au moment du chargement du module, ou de manière plus appropriée via les fichiers de configuration du module du noyau de la distribution (tel que ceux placés dans {{Path|/etc/modprobe.d/}}).

Par exemple :

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=0660 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Faire fonctionner l'accélération 2D sur des machines possédant 4 GB de mémoire ou plus ===

Lorsque l'accélération 2D de NVIDIA provoque des problèmes, il est probable que ce soit parce le système ne peut pas définir une plage mémoire associée au mode ''write-combining'' pour les MTTR (Memory Type Range Registers). Pour en être sûr, vérifier le contenu de {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Chacune des lignes devrait contenir <code>write-back</code> ou <code>write-combining</code>. Si vous apercevez une ligne avec <code>uncachable</code> vous devez changer un paramètre de votre BIOS pour régler ce problème.

Redémarrez et entrez dans la configuration du BIOS (probablement sous ''Paramètres du processeur''). Changez le paramètre <code>continuous</code> en <code>discrete</code> et redémarrez votre Linux. Vous verrez alors qu'il n'y a plus d'entrée <code>uncachable</code> et que l'accélération 2D fonctionne sans problème.

===Lors du chargement du module du noyau, apparition du message ''no such device''===

Ceci est généralement dû à un des problèmes suivants :

# Le système n'a pas de carte NVIDIA. Vérifier le résultat de la commande {{c|lspci}} pour confirmer qu'une carte graphique NVIDIA est installée et reconnue.
# La version installée du pilote {{Package|x11-drivers/nvidia-drivers}} ne supporte pas le modèle de carte installée. Vérifier le README {{pathːusr/share/nvidia-drivers-*/}} pour une liste de cartes supportées, ou utiliser la recherche de pilote à [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Un autre pilote du noyau contrôle la carte. Vérifier {{c|lspci -k}} si un autre pilote tel que [[nouveau]] est lié a la carte graphique. Dans ce cas, désactiver ou ''blacklister'' ce pilote.

=== Xorg dit qu'il ne peut trouver aucun écran ===

Lorsque vous démarrez votre ordinateur et vous retrouvez avec un écran noir, ou une invite de commande en console au lieu de votre interface graphique ; vous pouvez utiliser la combinaison de touches {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} pour obtenir une console. Ensuite, vous pouvez exécuter la commande :

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd|startx}}

pour voir la sortie de Xorg. Si l'une des premières erreurs est que Xorg est incapable de trouver un écran, suivez les étapes suivantes pour résoudre votre problème.

Exécuter la commande suivante avant de redémarrer devrait être suffisant :

{{RootCmd|/opt/bin/nvidia-xconfig}}

Se cela ne fonctionne pas, exécutez {{c|lspci}} et vous devriez apercevoir quelque chose concernant votre carte graphique qui débute par :

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

Prenez la première partie, <code>01.00.0</code> et placez-la dans votre fichier {{Path|/etc/X11/xorg.conf}} avec l'option <code>BusID</code> :

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Le rendu direct n'est pas activé ===

Si le rendu direct ne fonctionne pas, c'est peut-être parce que le '''DRI''' ou ''Direct Rendering Manager (gestionnaire de rendu direct)'' est activé dans le noyau, et qu'il entre en conflit avec le pilote.  Vous pouvez vérifier l'état du rendu direct en suivant les instructions de la section  [[#Tester la carte|Tester la carte]].

Tout d'abord, désactivez le gestionnaire de rendu direct (<code>CONFIG_DRM</code>) dans le noyau :

{{KernelBox|title=Désactivez le gestionnaire de rendu direct(DRI)|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Puis recompilez les pilotes  {{Package|x11-drivers/nvidia-drivers}} car le pilote peut avoir été compilé avec les symboles DRM du noyau. Cela devrait régler le problème.

=== Vidéo saccadée ou lente ===

Dernièrement, il semble qu'il y ait des problèmes avec certains types de vidéo avec le pilote NVIDIA binaire, ayant pour résultat des lenteur dans la lecture vidéo ou des "bégaiement". Ce problème semble survenir avec le ''Intel CPU Idle replacement'' plutôt que la méthode commune ''[[ACPI]] CPU idling'' pour certains microprocesseurs.

Désactiver la méthode ''CPU idling'' d'Intel en utilisant <code>intel_idle.max_cstate=0</code> dans la commande de démarrage du noyau, ce qui doit avoir pour résultat l'utilisation automatique par le noyau de l'ancienne méthode ACPI pour la veille du CPU. De même, désactiver ''NVIDIA Powermizer'', ou régler ''Powermizer'' à la performance maximum avec {{c|nvidia-settings}} peut aider à résoudre les problèmes. Bien que la méthode ''CPU idling'' d'Intel a été récemment introduite comme méthode par défaut pour les processeurs i5 et i7 (en lieu et place d'ACPI), c'est ici la source du problème. Cette méthode résout de façon significative le problème, cependant des "bégaiements" ou lenteurs de la vidéo apparaissent si le désentrelacement a été activé ; c'est le cas quand la vidéo a  probablement déjà été désentrelacée (par exemple, alias <code>mplayer-nodeint</code> et quelque chose de similaire pour <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> comme solution.)

=== Pas de synchronisation verticale (no VSync, tearing) dans les applications OpenGL ===

Ajouter les options suivante dans la section écran pour éviter le tearing (déchirure) on GTX 660, 660 Ti, et probablement d'autre GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ référence]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== Configuration expert ==

=== Documentation ===

Le paquet du pilote nVidia {{Package|x11-drivers/nvidia-drivers}} est fourni avec une documentation exhaustive. Elle est installée dans  {{Path|/usr/share/doc}} et peut être lue en utilisant la commande suivante :

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Paramètres du module du noyau ===

The <code>nvidia</code> kernel module accepts a number of parameters (options) which can be used to tweak the behavior of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run {{c|update-modules}} after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

{{Warning|Pay close attention to this section as these kernel options can enable features that the hardware may or may not support. These options are not forgiving, so be careful with the parameters. Do not made any changes without validating and double-checking that the change is needed.}}

{| class="table table-condensed table-striped"
|-
! Attribute !! Default !! Description
|-
| <code>NVreg_DeviceFileUID</code> || <code>0</code> || Modify the user ID for the device file. The default value sets it to the {{c|root}} user. Setting this to another user ID will make the driver module create the device file with access available to that user ID.
|-
| <code>NVreg_DeviceFileGID</code> || <code>27</code> || Modify the Group ID for the device file. The default value sets it to the {{c|video}} group.
|-
| <code>NVreg_DeviceFileMode</code> || Undefined || Set the permissions for the device file. A value of 0660 grants the owner and group-owner read-write access while other users cannot access the device file.
|-
| <code>NVreg_ModifyDeviceFiles</code> || <code>1</code> || Instruct the driver to enable or disable dynamic device file management.
|-
| <code>NVreg_EnablePCIeGen3</code> || <code>0</code> || Enable PCIe Gen 3.x support. If the system supports this 8GT high speed bus then enable it with this module option flag. When this is enabled but the system does not support Gen 3.0, the behavior of the system can become irratic and unstable. Some have even reported damage to hardware enabling this when it is not properly supported. By default the Nvidia driver is set to use PCIe Gen 2.x for compatibility reasons.
|-
| <code>NVreg_UsePageAttributeTable</code> || <code>0</code> || This is one of the latest and newest additions to the Nvidia driver modules option. It allows the driver to take full advantage of the PAT technology - a newer way of allocating memory, replacing the older Memory Type Range Register (MTRR) method. The PAT method creates a partition type table at a specific address mapped inside the register and utilizes the memory architecture and instruction set more efficiently and faster. If the computer supports PAT and the feature is enabled in the kernel then this flag can be enabled. Without PAT support, users may experience unstable performance and even crashes if this is enabled. So be careful with these options.
|-
| <code>NVreg_EnableVia4x</code> || <code>0</code> || Enable AGP 4x mode in the the NVIDIA driver on Via-chipset-powered systems. Some of these hardware configurations would not work properly in AGP 4x mode when others would. The default leaves it at AGP 2x mode.
|-
| <code>NVreg_EnableALiAGP</code> || <code>0</code> || On ALi1541 and ALi1647 chipsets, AGP support is by default disabled by the NVIDIA drivers. The value specifies the speed factor to use, so the values 1, 2, 4 and 8 represent AGP 1x, 2x, 4x and 8x respectively. NVIDIA does not recommend changing the value as it may lead to unstable systems.
|-
| <code>NVreg_ReqAGPRate</code> || Unspecified || Forces the AGP mode on the driver. For instance, a value of 1 means AGP 1x, while a value of 4 means AGP 4x.
|-
| <code>NVreg_NvAGP</code> || || Changes the AGP Gart mode setting. Possible values are: <code>0</code> (Disable), <code>1</code> (Enable using NVIDIAs internal AGP-Gart), <code>2</code> (Enable using the Linux kernel AGP-Gart) and <code>3</code> (Enable and use any available, but try th NVIDIA internal one first).
|-
| <code>NVreg_EnableAGPSBA</code> || <code>0</code> || Disables (<code>0</code>) or enables (<code>1</code>) AGP Side Banding. For stability reasons, the setting is by default disabled, but the setting can be enabled for testing and debugging purposes. This is not supported by NVIDIA though.
|-
| <code>NVreg_EnableAGPFW</code> || <code>0</code> || Enables AGP Fast-Writes when set to <code>1</code>. Depending on the system's chipset this may cause stability issues if enabled.
|-
| <code>NVreg_Mobile</code> || <code>0</code> || Through this setting, users can force the EDID information for particular systems. This workaround is provided for mobile GPU's where EDID information is either non-functional or disabled. Potential values are <code>0</code> (Auto detection of the correct setting), <code>1</code> (Dell notebooks), <code>2</code> (non-Compa1 Toshiba laptops), <code>3</code> (All other notebooks/laptops), <code>4</code> (Compa1 Toshiba laptops) or <code>5</code> (Gateway machines).
|-
| <code>NVreg_RemapLimit</code> || <code>60</code> || Maximum amount of system memory remapping. It specifies the amount of memory that the driver will be allowed to remap through the IOMMU/SWIOTLB on a 64-bit system. Only use it if the IOMMU or SMIOTLB is larger than 64mb. NVIDIA recommends to subtract 4mb from the total amount of memory to use. For instance, the default value is <code>60</code> which is in fact 64mb. To set it to 128mb, set the value to <code>124</code>.
|-
|<code>NVreg_UpdateMemoryTypes</code> || <code>0</code> || Tweak the use of page table attributes. Possible values are: <code>0</code> (Nvidias logic mechanism), <code>1</code> (Enable the use of changed page table attributes) and <code>2</code> (Disable the use of page table attributes).
|-
|<code>NVreg_InitializeSystemMemoryAllocations</code> || <code>1</code> || Tell the NVIDIA driver to clear system memory allocations prior to using it for the GPUs. Disabling can give a slight performance boost but at the cost of increased security risks. By default the driver will wipe the allocated by zeroing out its content.
|-
| <code>NVreg_UseVBios</code> || <code>1</code> || Enable or disable the use of the video BIOS int10 code. Set to <code>0</code> to disable.
|-
| <code>NVreg_RMEdgeIntrCheck</code> || Unspecified || Enable or disable checking for edge-triggered interrupts.
|-
| <code>NVreg_EnableMSI</code> || <code>0</code> || Enable or disable PCIe-MSI capabilities. Enable this to use MSI interrupts instead of wired interrupts.
|-
| <code>NVreg_MapRegistersEarly</code> || <code>0</code> || If set to <code>1</code>, allow the driver to map the memory locations early when the system is probing the hardware instead of the default option of doing this when loaded by {{c|modprobe}} or during {{c|startx}}. This is a debugging feature.
|-
| <code>NVreg_RegisterForACPIEvents</code> || <code>1</code> || Enable the driver to register with the ACPI of the system to receive ACPI events. This can be disabled (<code>0</code>) when issues occur with ACPI or while debugging an issue. 
|}

Edit the {{Path|/etc/modprobe.d/nvidia.conf}} file, and afterwards update the module information:

{{RootCmd|update-modules}}

Décharger le module <code>nvidia</code>

{{RootCmd|modprobe -r nvidia}}

...et rechargez-le :

{{RootCmd|modprobe nvidia}}

=== Configuration avancée de X ===

La couche GLX possède aussi une pléthore d'options. Elles contrôlent la configuration de la sortie TV, du double-écran, contrôle la détection de fréquence, etc. Là-encore, les options disponibles sont expliquées en détail dans la documentation.

Pour utiliser ces options, vous devez les lister dans la section périphérique ad hoc de votre fichier de configuration de X (en général {{Path|/etc/X11/xorg.conf}}). Par exemple, pour désactiver le logo de démarrage :

{{FileBox|filename=/etc/X11/xorg.conf|title=Disable the splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== Voir aussi ==

* [[nouveau & nvidia-drivers switching]] - Hybrid graphics mode utilisant les pilotes open-source.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configurer un système utilisant les pilotes source-fermée pour les hybrid graphics (modesetting).

== Remerciements ==
Nous tenons à remercier les auteurs et éditeurs suivants pour leur contribution à ce guide :Sven Vermeulen, Joshua Saddler, M Curtis Napier, Chris Gianelloni et José Fournier.

{{Migrated|originalauthors={{Dev|SwifT}}, {{Dev|nightmorph}}, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
