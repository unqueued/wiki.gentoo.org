<languages />

{{Metadata|abstract=nvidia-drivers est le pilote propriétaire pour les cartes graphiques nVidia dont le pilote   « open source »  nouveau est une alternative.}}

'''x11-drivers/nvidia-drivers''' est le pilote graphique propriétaire pour les cartes graphiques nVidia. [[nouveau]] est une alternative Open Source à ce pilote.

Les pilotes nVidia de l'arbre sont compilés pour une prise en charge par le noyau Linux. Ils contiennent un objet binaire (blob) qui fait l'essentiel du travail de discussion avec la carte. Ils comprennent deux parties, un module du noyau et un pilote X11. Les deux parties sont incluses dans un paquet unique. À cause de la manière dont nVidia empaquettent leurs pilotes, vous devrez  fixer quelques options avant de les installer.

Le paquet '''nvidia-drivers'''  contient la dernière version des pilotes nVidia qui prennent en charge ''toutes'' les cartes, avec plusieurs versions disponibles selon l'âge de votre carte. Il a recours à une eclass pour détecter le type de carte que vous utilisez et installer ainsi la version adaptée.

== Compatibilité matérielle ==
Le paquet {{Package|x11-drivers/nvidia-drivers}} prend en charge de nombreuses cartes nVidia. De multiples versions sont disponibles selon la (les) carte(s) que vous avez. Reportez-vous à la page [http://www.nvidia.fr/object/legacy_drivers_fr.html Qu'est-ce qu'un « Legacy GPU »?],de la documentation officielle de nVidia pour déterminer la version du pilote que vous devriez utiliser. Un moyen très commode pour la trouver est d'utiliser [http://www.nvidia.fr/Download/Find.aspx cet utilitaire]. Saisissez le nom de votre carte graphique (en faisant attention à cocher l'option « Legacy » dans le champ produit) et la version la plus adaptée à votre carte s'affichera sous le formulaire.

Si vous avez identifié votre carte comme étant une carte patrimoniale, vous devez masquer les versions plus récentes des pilotes {{Package|nvidia-drivers}}, c'est à dire : 
{{RootCmd|echo ">x11-drivers/nvidia-drivers-174" >> /etc/portage/package.mask}}

Notez bien que Gentoo ne fournit pas les versions 71.86.xx. Si votre carte requiert ces pilotes, nous vous conseillons d'utiliser le pilote [[nouveau]].

==Noyau==
Comme nous l'avons mentionné plus haut, le pilote noyau nVidia s'installe et fonctionne en lien avec votre noyau courant. Il est compilé en tant que module, c'est pourquoi votre noyau doit prendre en charge le chargement de modules (voir ci-dessous).

Le module du noyau (nvidia.ko) comprend une partie propriétaire (communément appelée le « blob ») (Binary Large Object pour Grand Objet Binaire)  qui pilote les circuits de votre carte, et une partie Open Source (la  « colle ») qui, en exécution, agit comme intermédiaire entre la partie propriétaire et le noyau. Tout cela doit s'articuler proprement sous peine de devoir faire face à des pertes de données (via des paniques du noyau, des crash du serveur X sans sauvegarde des données des applications X) et même des pannes matérielles (surchauffe et autres problèmes en relation avec la gestion de l'énergie).

===Compatibilité du noyau===
De temps à autres, une nouvelle version du noyau modifie les ABI (Interface Binaire d'Applications) des pilotes, ce qui signifie que tous les pilotes qui ont recours à ces ABI doivent être changés. Pour les pilotes Open Source, en particulier ceux distribués avec le noyau, effectuer ces changements est presque trivial, dans la mesure où la chaîne complète des appels entre les pilotes et les autres parties du noyau, peut être passée en revue très facilement. Pour les pilotes propriétaires, comme le nvidia.ko, ce n'est pas la même partie de plaisir. Lorsque les ABI internes changent, vous ne pouvez pas tout simplement adapter la « colle », parce que vous ne savez pas comment cette colle est utilisée par la partie propriétaire. Si vous parvenez à réparer les choses et que tout semble marcher correctement, vous risquez encore, que le lancement de nvidi.ko dans votre noyau, nouveau et non pris en charge, aboutisse à des pertes de données et des pannes matérielles.

Lorsqu'une version nouvelle et incompatible du noyau sort, il est probablement mieux de s'en tenir, pendant un temps, à la version du noyau prise en charge la plus récente. Nvidia demande ordinairement quelques semaines pour préparer la nouvelle version propriétaire qu'ils jugent adaptée à un usage général. Soyez tout simplement patient. Si vous voulez faire fi de toute précaution, les ebuilds nvidia-drivers acceptent des commandes utilisateur epatch_user des eutils.eclass : ceci vous permet d'amender votre nvidia-drivers pour qu'il s'adapte d'une certaine manière à la version non prise en charge du noyau que vous avez choisie. Notez bien que ni les mainteneurs de nvidia-drivers, ni Nvidia ne vous apporteront leur aide si vous rencontrez des problèmes. Votre garantie matérielle sera très vraisemblablement rendue caduque. Les développeurs de Gentoo ne peuvent pas se mettre à régler vos problèmes dans la mesure où il s'agit d'un pilote propriétaire que seul Nvidia peut déboguer correctement. Par ailleurs, les mainteneurs du noyau (à la fois de Gentoo et de l'amont) ne prendront certainement pas en charge des pilotes propriétaires, où des systèmes « impures » qui semblent provoquer des problèmes.

=== Options requises du noyau ===
Si vous avez eu recours à  '''genkernel all''' pour configurer votre noyau, alors tout est pour le mieux. Si ce n'est pas le cas, examinez attentivement votre configuration du noyau pour vérifier que la prise en charge du chargement de modules est activée :
{{Kernel||<pre>
Loadable module support --->
    [*] Enable loadable module support
</pre>
}}

Vous devez aussi activer la prise en charge de ''Memory Type Range Register'' dans votre noyau :
{{Kernel||<pre>
Processor and Features --->
    [*] MTRR (Memory Type Range Register) support
</pre>}}

De plus, si vous avez une carte graphique AGP, vous pouvez ajouter en option la prise en charge de '''agpgart''' à votre noyau, soit incorporée au noyau, soit en tant que module.
Si vous ne choisissez pas d'utiliser la version incorporée de agpgart, alors les pilotes utiliseront leur propre mise en œuvre de '''agpgart''', appelée '''NvAGP'''. Sur certains systèmes, cela conduit à de meilleures performances, sur d'autres c'est l'inverse. Vous devrez apprécier cela vous-même sur votre système pour trouver ce qui apporte la meilleure performance. S'il vous reste un doute, utilisez la mise en œuvre incorporée au noyau :
{{Kernel||<pre>
Device Drivers --->
    Graphics Support --->
        -*- /dev/agpgart (AGP Support) --->
</pre>}}

{{Note|Sur amd64,  IOMMU gère les réglages agpgart.}}

{{Important|Pour les processeurs x86 et AMD64, le pilote de [[framebuffer]] (tampon de trames) entre en conflit avec le pilote binaire fournit par nVidia. Si vous compilez votre noyau pour ces processeurs, vous devez retirez la prise en charge du pilote incorporé de la manière suivante :
{{Kernel||<pre>
Device Drivers --->
    Graphics Support --->
        <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
</pre>}}
}}

Il existe un tampon de trames alternatif, [[uvesafb]], qui peut être installé en parallèle aux pilotes nvidia.

L'ebuild '''nvidia-drivers''' détecte automatiquement la version de votre noyau en se basant sur le lien symbolique {{Path|/usr/src/linux}}. Assurez-vous que ce lien symbolique pointe bien sur les bonnes sources et que votre noyau est bien configuré.
Reportez-vous à la section "Configurer votre noyau" du [http://www.gentoo.org/doc/fr/handbook/ Manuel de Gentoo] pour une plus ample information sur la manière de configurer votre noyau.

Vous devez, d'abord choisir les bonnes sources du noyau à l'aide de '''eselect'''. Si vous utilisez les sources '''gentoo-sources-3.7.10''', la liste des noyaux retournée par eselect devrait ressembler à ceci :
{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

Dans la liste ci-dessus, vous noterez que le noyau '''linux-3:7:10-gentoo''' est marqué d'un astérisque ('''*''') pour montrer qu'il est le noyau pointé par le lien symbolique.

Si le lien symbolique ne pointe pas sur les bonnes sources, vous devez le mettre à jour en choisissant le numéro correspondant aux sources du noyau que vous voulez utiliser, comme dans l'exemple ci-dessus.
{{RootCmd|eselect kernel set 1}}

== Pilotes == 

Il est temps maintenant d'installer les pilotes. Vous pouvez le faire en suivant les instructions du  [http://www.gentoo.org/doc/fr/xorg-config.xml guide de configuration du serveur X ] et en définissant '''VIDEO_CARDS="nvidia"''' dans  {{Path|/etc/portage/make.conf}}. Losque vous installerez le serveur X, il choisira alors la bonne version du pilote (
'''nvidia-drivers''') pour vous.

{{Note|Les pilotes peuvent être installés en positionnant l'option '''gtk''' de la variable USE dans le fichier {{Path|/etc/portage/make.conf}}. Cela installera le paquet '''media-video/nvidia-settings''', un outil convivial pour voir et configurer de nombreux aspects de votre carte nVidia.}}

{{Important|À chaque fois que vous [http://www.gentoo.org/doc/fr/kernel-upgrade.xml compilez un nouveau noyau] ou recompilez le noyau courant, vous devez réinstaller les modules du noyau  nVidia. Une façon aisée de recompiler les  modules installés par les  ebuilds (comme '''nvidia-drivers''') consiste à exécuter '''emerge @module-rebuild'''.}}

Une fois l'installation terminée, exécutez '''modprobe nvidia''' pour charger le module du noyau en mémoire. S'il s'agit d'une mise à jour, vous devez préalablement retirer le module précédent.
{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Pour ne pas avoir à charger manuellement le module à chaque démarrage, et pour automatiser cette tâche, éditez le fichier {{Path|/etc/conf.d/modules}} et ajoutez-y '''nvidia'''.

{{Important|Si vous avez compilé '''agpgart''' en tant que module, vous devez aussi l'ajouter au fichier {{Path|/etc/conf.d/modules}}.}}

===Le serveur X===
Dès lors que les pilotes appropriés sont installés, vous devez configurer le serveur X pour qu'il utilise les pilotes '''nvidia''' plutôt que le pilote par défaut '''nv'''.
{{VIDEO_CARDS/xorg.conf|nvidia}}

Exécutez '''eselect''' pour faire en sorte que le serveur X utilise les bibliothèques GLX de nVidia :
{{RootCmd|eselect opengl set nvidia}}

===Droits d'accès===
{{VIDEO_CARDS/Permissions|nvidia}}

==Tester votre carte==
Pour tester votre carte nVidia, lancez X et exécutez la commande '''glxinfo''', qui fait partie du paquet '''mesa-progs'''. Elle devrait vous notifier que le rendu direct est activé :
{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Pour vérifier votre FPS (mombre de trames par seconde), exécutez '''glxgears'''.

==Activer la prise en charge de nvidia==
Certains outils, comme '''mplayer''' et '''xine-lib''' utilisent une option locale de la variable USE appelée '''xvmc''' qui active la prise en charge de XvMCNVIDIA - utile lorsque vous regardez des films en haute définition. Ajoutez '''xvmc''' aux options de votre variable USE globale dans le fichier  {{Path|/etc/portage/make.conf}}  ou ajoutez-la aux options de la variable USE du(des) paquet(s) en question ('''media-vidéo/mplayer''' et/ou '''media-libs/xine-lib''') dans le fichier {{Path|/etc/portage/package.use}}.

Les processeurs graphiques des séries GeForce 8 et postérieures sont fournis avec la prise en charge VDPAU qui a supplanté la prise en charge  XvMCNVIDIA. Reportez-vous à l'article [[VDPAU]] pour savoir comment activer la prise en charge VDPAU.

Il y a également quelques applications qui ont besoin de l'option '''nvidia''' de la variable USE, aussi désirerez-vous peut-être l'ajouter au fichier {{Path|/etc/portage/make.conf}}.

Exécutez ensuite '''emerge -uD --newuse @world''' pour recompiler les applications qui bénéficient du changement d'option de la variable USE.

===Utiliser l'outil de configuration de NVidia===
nVidia fournit également un outil de configuration. Cet outil vous permet de voir et de modifier des réglages graphiques sans avoir à redémarrer le serveur X. Il est disponible dans l'arbre de Portage sous le nom  '''media-video/nvidia-settings'''. Comme indiqué plus haut, il sera automatiquement installé si vous installez les pilotes avec l'option '''gtk''' de la variable USE activée, soit dans {{Path|/etc/portage/make.conf}}, soit dans {{Path|/etc/portage/package.use}}.

===Activer OpenGL/OpenCL===

Pour activer openGL et openCL.

{{RootCmd|eselect opengl set nvidia}}
{{RootCmd|eselect opencl set nvidia}}

Assurez-vous que le serveur Xorg est arrêté lors de ces modifications.

== Dépannage ==
* {{Bug|nvidia-drivers|search=package}}

=== Driver fails to initialize when MSI interrupts are enabled ===

The Linux NVIDIA driver uses Message Signaled Interrupts (MSI) by default. This provides compatibility and scalability benefits, mainly due to the avoidance of IRQ sharing. Some systems have been seen to have problems supporting MSI, while working fine with virtual wire interrupts. These problems manifest as an inability to start X with the NVIDIA driver, or CUDA initialization failures.

MSI interrupts can be disabled via the NVIDIA kernel module parameter <code>NVreg_EnableMSI=0</code>. This can be set on the command line when loading the module, or more appropriately via the distribution's kernel module configuration files (such as those under {{Path|/etc/modprobe.d/}}).

For instance:

{{File|/etc/modprobe.d/nvidia.conf|Setting nvidia NVreg_EnableMSI|<pre>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</pre>}}

===Faire fonctionner l'accélération 2D sur des machines possédant 4 Mo de mémoire ou plus===
Si vous rencontrez des problèmes avec l'accélération 2D de nVidia, il est probable que ce soit parce que vous ne pouvez pas définir une plage mémoire associée au mode write-combining pour les MTTR (Memory Type Range Registers). Pour le savoir, vérifiez le contenu de {{Path|/proc/mtrr}}:
{{RootCmd|cat /proc/mtrr}}

Chacune des lignes devrait contenir ''write-back'' ou ''write-combining''. Si vous apercevez une ligne avec ''uncachable'' vous devez changer un paramètre de votre BIOS pour régler ce problème.

Redémarrez et entrez dans la configuration du BIOS (probablement sous ''Paramètres du processeur''). Changez le paramètre ''continuous'' en ''discrete'' et redémarrez votre Linux. Vous verrez alors qu'il n'y a plus d'entrée ''uncachable'' et que l'accélération 2D fonctionne sans problème.

===Lorsque j'essaye de charger le module du noyau, je reçois un message ''no such device''===
Ceci est généralement dû à un des problèmes suivants :

1. Vous n'avez aucune carte nVidia. Regardez la sortie de la commande '''lspci''' pour vérifier si vous avez une carte graphique nVidia installée et reconnue.

2. La version installée courante du paquet x11-drivers/nvidia-drivers ne prend pas en charge votre modèle de carte. Lisez le fichier README dans  /usr/share/nvidia-drivers-*/ pour obtenir la liste des périphériques pris en charge, ou utilisez la recherche de pilotes sur la page http://www.geforce.com/drivers. Reportez-vous à la section [[NVidia/nvidia-drivers#Which_version.3F|Which Version]] ci-dessus.

3. Un autre pilote du noyau gère le matériel. Vérifiez la sortie de la commande '''lspci -k''' pour savoir si un autre pilote, tel que ''nouveau'' est attaché à la carte graphique. Si oui, vous devrez désactiver ce pilote ou le mettre en liste rouge.

=== Xorg dit qu'il ne peut trouver aucun écran ===
Lorsque vous démarrez votre ordinateur  et vous retrouvez avec un écran noir, ou une invite de commande en console au lieu de votre interface graphique ; vous pouvez utiliser la combinaison de touches  Ctrl+Alt+F2 pour obtenir une invite de commande si ce n'est pas déjà le cas. Ensuite, vous pouvez exécuter la commande : 
{{RootCmd| /etc/init.d/xdm stop}}
{{Cmd| startx}}pour voir la sortie de Xorg. Si l'une des premières erreurs est que Xorg est incapable de trouver un écran, suivez les étapes suivantes pour résoudre votre problème..<br />
Exécuter la commande suivante devrait suffire avant de redémarrer :
{{Cmd| nvidia-xconfig}}
Se cela ne fonctionne pas, exécutez lspci et vous devriez apercevoir quelque chose concernant votre carte graphique qui débute par :
01:00.0 VGA compatible controller: make and model of videocard <br />
Prenez la première partie, ''01.00.0'' et placez-la dans votre fichier /etc/X11/xorg.conf avec l'option BusID :
{{File|/etc/X11/xorg.conf||<pre>
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection

</pre>}}

--

=== Le rendu direct n'est pas activé ===

If Direct rendering does not work, it may be because you have Direct Rendering Manager enabled in the kernel, which conflicts with the driver. You can see Direct rendering Status by following instructions in the section "Testing your card".

Tout d'abord, désactivez le gestionnaire de rendu direct (CONFIG_DRM) dans le noyau :

{{Kernel||<pre>
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
</pre>
}}

Recompilez les pilotes  '''x11-drivers/nvidia-drivers'''  car le pilote peut avoir été compilé avec les symboles DRM du noyau. Cela devrait régler votre problème.

==Configuration pour expert==

== Documentation ==
Le paquet du pilote nVidia est fourni avec une documentation exhaustive. Elle est installée dans '''/usr/share/doc''' et peut être lue en utilisant la commande suivante :
{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Paramètres du module du noyau ===
Le module du noyau '''nvidia''' reconnaît un certain nombre de paramètres (options) que vous pouvez utiliser pour peaufiner le comportement du pilote. La plupart d'entre-eux est mentionnée dans la documentation. Pour ajouter des paramètres, ou pour en changer la valeur, éditez le fichier '''/etc/modprobe.d/nvidia.conf'''. Pensez à exécuter la commande '''update-modules''' après avoir modifié ce fichier, et n'oubliez pas que vous devrez recharger le module '''nvidia''' pour que les nouveaux paramètres soient pris en compte.

Éditez /etc/modprobe.d/nvidia.conf dans votre éditeur favori :
{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Mettez les informations du module à jour :
{{RootCmd|update-modules}}

Déchargez le module nvidia...
{{RootCmd|modprobe -r nvidia}}

...et rechargez-le :
{{RootCmd|modprobe nvidia}}

=== Configuration avancée de X ===
La couche GLX possède aussi une pléthore d'options. Elles contrôlent la configuration de la sortie TV, du double-écran, contrôle la détection de fréquence, etc. Là-encore, les options disponibles sont expliquées en détail dans la documentation.

Si vous désirez utiliser certaines de ces options, vous devez les lister dans la section périphérique ad hoc de votre fichier de configuration de X (en général '''/etc/X11/xorg.conf'''). Par exemple, en supposant que vous désiriez désactiver le logo de démarrage :

{{File|/etc/X11/xorg.conf|Disable the splash logo|<pre>
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
</pre>}}

== Remerciements ==
Nous tenons à remercier les auteurs et éditeurs suivants pour leur contribution à ce guide :Sven Vermeulen, Joshua Saddler, M Curtis Napier, Chris Gianelloni et José Fournier.

== See also ==
* [[nouveau & nvidia-drivers switching]]
* [[NVIDIA Driver with Optimus Laptops]]

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
