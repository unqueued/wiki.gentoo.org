<languages />
'''nvidia''' est le pilote graphique propriétaire pour les cartes graphiques nVidia. [[nouveau]] est une alternative open source à ce pilote.

Les pilotes nVidia de l'arbre sont compilés pour une prise en charge par le noyau Linux. Ils contiennent un objet binaire (blob) qui fait l'essentiel du travail de discussion avec la carte. Ils comprennent deux parties, un module du noyau et un pilote X11. Les deux parties sont incluses dans un paquet unique. À cause de la manière dont nVidia empaquettent leurs pilotes, vous devrez  fixer quelques options avant de les installer.

Le paquet '''nvidia-drivers'''  contient la dernière version des pilotes nVidia qui prennent en charge ''toutes'' les cartes, avec plusieurs versions disponibles selon l'âge de votre carte. Il a recours à une eclass pour détecter le type de carte que vous utilisez et installer ainsi la version adaptée.

== Compatibilité du pilote ==
Le paquet {{Package|x11-drivers/nvidia-drivers}} prend en charge de nombreuses cartes nVidia. De multiples versions sont disponibles selon la (les) carte(s) que vous avez. Reportez-vous à la page [http://www.nvidia.fr/object/legacy_drivers_fr.html Qu'est-ce qu'un Legacy GPU?],de la documentation officielle de nVidia pour déterminer la version du pilote que vous devriez utiliser.

Si vous avez identifiée votre carte comme étant une carte patrimoniale, vous devez masquer les versions plus récentes des {{Package|nvidia-drivers}}, c'est à dire, 
{{RootCmd|echo ">x11-drivers/nvidia-drivers-174" >> /etc/portage/package.mask}}

Notez bien que Gentoo ne fournit pas les versions 71.86.xx. Si votre carte requiert ces pilotes, nous vous conseillons d'utiliser le pilote [[nouveau]].

==Noyau==
Comme nous l'avons mentionné plus haut, le pilote noyau nVidia s'installe et fonctionne en lien avec votre noyau courant. Il est compilé en tant que module, c'est pourquoi votre noyau doit prendre en charge le chargement de modules. Si vous avez utilisé '''genkernel all''' pour configurer votre noyau, c'est déjà le cas. Si vous avez procédé différemment, regardez attentivement votre configuration du noyau pour vérifier que cette prise en charge est activée :
{{Kernel||<pre>
Loadable module support --->
    [*] Enable loadable module support
</pre>
}}

Vous devez aussi activer ''Memory Type Range Register'' dans votre noyau :
{{Kernel||<pre>
Processor and Features --->
    [*] MTRR (Memory Type Range Register) support
</pre>}}

De plus, si vous avez une carte graphique AGP, vous pouvez activer en option la prise en charge '''agpgart''' à votre noyau, soit incorporée au noyau, soit en tant que module.
Si vous ne choisissez pas d'utiliser la version incorporée de agpgart, alors les pilotes utiliseront leur propre mise en œuvre de '''agpgart''', appelée '''NvAGP'''. Sur certains systems, cela conduit à de meilleures performances, sur d'autres c'est l'inverse. Vous devrez apprécier cela vous-même sur votre système pour trouver ce qui apporte la meilleure performance. S'il vous reste un doute, utilisez la mise en œuvre incorporée au noyau :
{{Kernel||<pre>
Device Drivers --->
    Graphics Support --->
        -*- /dev/agpgart (AGP Support) --->
</pre>}}

{{Note|Sur amd64,  IOMMU gère les règlages agpgart.}}

{{Important|Pour les processeurs x86 et AMD64, le pilote de [[framebuffer]] (tampon de trames) entre en conflit avec le pilote binaire fournit par nVidia. Si vous compilez votre noyau pour ces processeurs, vous devez retirez la prise en charge du pilote incorporé de la manière suivante :
{{Kernel||<pre>
Device Drivers --->
    Graphics Support --->
        <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
</pre>}}
}}

Un tampon de trames alternatif est [[uvesafb]] qui peut être installé en parallèle aux pilotes nvidia.

L'ebuild '''nvidia-drivers''' détecte automatiquement la version de votre noyau en se basant sur le lien symbolique {{Path|/usr/src/linux}}. Assurez-vous que ce lien symbolique pointe bien sur les bonnes sources et que votre noyau est bien configuré.
Reportez-vous à la section "Configurer votre noyau" du [http://www.gentoo.org/doc/fr/handbook/ Manuel de Gentoo] pour une plus ample information sur la manière de configurer votre noyau.

Vous devez, d'abord choisir les bonnes sources du noyau à l'aide de '''eselect'''. Si vous utilisez les sources '''gentoo-sources-3.7.10''', la liste des noyaux retournée par eselect devrait ressembler à ceci :
{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

Dans la liste ci-dessus, vous noterez que le noyau '''linux-3:7:10-gentoo''' est marqué d'un astérisque ('''*''') pour montrer qu'il est le noyau pointé par le lien symbolique.

Si le lien symbolique ne pointe pas sur les bonnes sources, vous devez le mettre à jour en choisissant le numéro correspondant aux sources du noyau que vous voulez utiliser, comme dans l'exemple ci-dessus.
{{RootCmd|eselect kernel set 1}}

==Pilotes==
Il est temps maintenant d'installer les pilotes. Vous pouvez le faire en suivant les directives du [http://www.gentoo.org/doc/fr/xorg-config.xml guide de configuration du serveur X ] et définissant la variable '''VIDEO_CARDS=''nvidia''''' dans {{Path|/etc/portage/make.conf}}. Quand vous installerez le serveur X, il installera la bonne version du pilote '''nvidia-drivers''' pour vous.

{{Note|Les pilotes peuvent être installés en positionnant l'option '''gtk''' de la variable USE dans le fichier {{Path|/etc/portage/make.conf}}. Cela installera le paquet '''media-video/nvidia-settings''', un outil convivial pour voir et configurer de nombreux aspects de votre carte nVidia.}}

{{Important|À chaque fois que vous [http://www.gentoo.org/doc/fr/kernel-upgrade.xml compilez un nouveau noyau] ou recompilez le noyau courant, vous devrez réinstaller les modules du noyau  nVidia. Une manière aisée de connaître les modules installés par des ebuilds (comme '''nvidia-drivers''')consiste à installer '''sys-kernel/module-rebuild'''. Une fois que vous l'avez installé, exécutez tout simplement la commande '''module-rebuild populate''' pour repeupler sa base de données avec la liste des paquets à recompiler. Après en avoir terminé avec la compilation ou la recompilation d'un noyau, exécutez simplement  la commande '''module-rebuild rebuild''' pour recompiler les pilotes pour votre nouveau noyau.}}

Une fois l'installation terminée, exécutez '''modprobe nvidia''' pour charger le module du noyau en mémoire. S'il s'agit d'une mise à jour, vous devez préalablement retirer le module précédent.
{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Pour ne pas avoir à charger manuellement le module à chaque démarrage, et pour automatiser cette tâche, éditez le fichier {{Path|/etc/conf.d/modules}} et ajoutez-y '''nvidia'''.

{{Important|Si vous avez compilé '''agpgart''' en tant que module, vous devez aussi l'ajouter au fichier {{Path|/etc/conf.d/modules}}.}}

=== The X Server ===
Once the appropriate drivers are installed you need to configure your X Server to use the '''nvidia''' driver instead of the default '''nv''' driver.
{{VIDEO_CARDS/xorg.conf|nvidia}}

Run '''eselect''' so that the X Server uses the nVidia GLX libraries:
{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===
{{VIDEO_CARDS/Permissions|nvidia}}

== Testing your Card ==
To test your nVidia card, fire up X and run '''glxinfo''', which is part of the '''mesa-progs''' package. It should say that direct rendering is activated:
{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

To monitor your FPS, run '''glxgears'''.

== Enabling nvidia Support ==
Some tools, such as '''mplayer''' and '''xine-lib''', use a local USE flag called '''xvmc''' which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in '''xvmc''' in your USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to '''media-video/mplayer''' and/or '''media-libs/xine-lib''' in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the '''nvidia''' USE flag, so you may want to add it to {{Path|/etc/portage/make.conf}}.

Then, run '''emerge -uD --newuse @world''' to rebuild the applications that benefit from the USE flag change.

=== Using NVidia Settings Tool ===
nVidia also provides you with a settings tool. This tool allows you to monitor and change graphical settings without restarting the X server and is available through Portage as '''media-video/nvidia-settings'''. As mentioned earlier, it will be pulled in automatically if you install the drivers with the '''gtk''' USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== Enable Opengl/Opencl ===

To enable opengl and opencl.

{{RootCmd|eselect opengl set nvidia}}
{{RootCmd|eselect opencl set nvidia}}

Setting opengl will require your systems x11 to not be running.

== Troubleshooting ==
* {{Bug|nvidia-drivers|search=package}}

=== Getting 2D to work on machines with 4Gb or more memory ===
If you are having troubles with the nVidia 2D acceleration it is likely that you are unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:
{{RootCmd|cat /proc/mtrr}}

Every line should contain "write-back" or "write-combining". If you see a line with "uncachable" in it you will need to change a BIOS setting to fix this.

Reboot and enter the BIOS, then find the MTRR settings (probably under "CPU Settings"). Change the setting from "continuous" to "discrete" and boot back into Linux. You will now find out that there is no "uncachable" entry anymore and 2D acceleration now works without any glitches.

=== When I attempt to load the kernel module, I receive a "no such device" ===
This is usually caused by one of the following issues:

1.  You don't have an nVidia card at all.  Check '''lspci''' output to confirm that you have an nVidia graphics card installed and detected.

2.  The currently installed version of x11-drivers/nvidia-drivers does not support your graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at http://www.geforce.com/drivers.  See the [[NVidia/nvidia-drivers#Which_version.3F|Which Version]] section above.

3.  Another kernel driver has control of the hardware.  Check '''lspci -k''' to see if another driver like "nouveau" is bound to the graphics card.  If so, you will need to disable or blacklist this driver.

=== Xorg says it can't find any screens ===
When you boot up your computer and end up with a black screen or a console prompt instead of your GUI; you can press Ctrl+Alt+F2 to bring up a console prompt if you don't already have one. Then you can run:
{{RootCmd| /etc/init.d/xdm stop}}
{{Cmd| startx}}
to see the output of Xorg. If one of the first errors is that Xorg can't find any screens, then follow these steps to resolve your issue.<br />
It should be enough to run the following command before rebooting:
{{Cmd| nvidia-xconfig}}
But if that doesn't work, run lspci and you'll find your video card starts off like this:
01:00.0 VGA compatible controller: make and model of videocard <br />
Take the first bit, ''01.00.0'' and put it in your /etc/X11/xorg.conf with the BusID option:
{{File|/etc/X11/xorg.conf||<pre>
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection


</pre>}}

== Expert Configuration ==

=== Documentation ===
The nVidia driver package also comes with comprehensive documentation. This is installed into '''/usr/share/doc''' and can be viewed with the following
command:
{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.gz}}

=== Kernel module parameters ===
The '''nvidia''' kernel module accepts a number of parameters (options) which you can use to tweak the behaviour of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file '''/etc/modprobe.d/nvidia.conf'''. Remember to run '''update-modules''' after modifying this file, and bear in mind that you will need to reload the '''nvidia''' module before the new settings take effect.

Edit /etc/modprobe.d/nvidia.conf in your favourite editor:
{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Update module information:
{{RootCmd|update-modules}}

Unload the nvidia module...
{{RootCmd|modprobe -r nvidia}}

...and load it once again:
{{RootCmd|modprobe nvidia}}

=== Advanced X configuration ===
The GLX layer also has a plethora of options which can be configured. These control the configuration of TV out, dual displays, monitor frequency detection, etc. Again, all of the available options are detailed in the documentation.

If you wish to use any of these options, you need to list them in the relevant Device section of your X config file (usually '''/etc/X11/xorg.conf'''). For example, suppose I wanted to disable the splash logo:

{{File|/etc/X11/xorg.conf|Disable the splash logo|<pre>
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
</pre>}}

== Acknowledgements ==
We would like to thank the following authors and editors for their contributions to this guide: Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni.

== See also ==
* [[nouveau & nvidia-drivers switching]]

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
