<languages />


{{Metadata|abstract=Целью данного документа является ознакомление с основными понятиями конфигурации ядра вручную и подробное описание наиболее распространенных подводных камней.}}

Целью данного документа является ознакомление с основными понятиями конфигурации ядра вручную и подробное описание наиболее распространенных подводных камней.

== Введение ==

Операционной системой Gentoo предусматриваются два способа управления установкой и обновлением ядра: ''автоматический'' (genkernel) и ''вручную'' . Хотя автоматический способ может рассматриваться как ''более легкий'' для пользователя, существует множество причин, по которым большинство пользователей Gentoo выбирают конфигурацию ядра вручную: большая гибкость, меньшие размеры ядра, более короткое время компиляции, приобретение опыта, сильная скука и т. д. 

В этом руководстве не охватывается автоматический способ конфигурации ядра (genkernel). Если для компиляции и установки ядра требуется использовать утилиту genkernel, обратитесь к [http://www.gentoo.org/doc/en/genkernel.xml документации по Genkernel]. 

Данное руководство не стремится задокументировать процесс конфигурации вручную от начала до конца -- процесс конфигурации опирается на определенную долю здравого смысла и относительно высокий уровень технической подготовки и знаний о системе. Вместо этого, в руководстве вводятся основные представления о конфигурации ядра вручную и описываются в подробностях наиболее распространенные подводные камни, с которыми сталкиваются пользователи. 

Данный документ написан с учетом последних версий ядер и наиболее распространенных архитектур компьютера. Некоторые подробности могут отличаться в случае использования старых ядер или более экзотических архитектур, но большая часть содержимого будет все же применима. 

В данный момент подразумевается, что исходные тексты ядра Linux распакованы на жесткий диск (обычно в каталоге {{Path|/usr/src}}) и предполагается, что вам известно как вызвать утилиту конфигурации <code>menuconfig</code> и перемещаться по меню. Если вы еще не дошли до этого уровня, то имеется следующая вспомогательная документация. 

* В [[Kernel/Overview|Руководстве по версиям ядер]] перечислены различные доступные пакеты с исходными текстами ядра.
* В [[Kernel/Upgrade|Руководстве по обновлению ядра]] объясняется как обновить ядро или перейти с одного на другое.
* В [http://www.gentoo.org//doc/en/handbook/index.xml Настольной книге Gentoo]  также охватываются некоторые аспекты установки ядра.

== Основные понятия конфигурации ==

=== Основные идеи ===

Общий процесс достаточно прост: предлагаются несколько возможностей на выбор, распределенные по категориям в отдельные меню и подменю, и выбирается поддержка аппаратного обеспечения и функций ядра, подходящих для системы. 

Ядро включает ''конфигурацию по умолчанию'', которая показывается в первое время запуска команды menuconfig для отдельного набора исходных текстов ядра. В целом, предлагается широкий выбор разумных значений по умолчанию, что означает, что большинству пользователей потребуется только внести небольшое количество изменений в основную конфигурацию. Если необходимо отключить параметр, который был включен по умолчанию, убедитесь что вы хорошо понимаете что в точности делает данный параметр и последствия его отключения. 

При конфигурации ядра в первый раз, следует придерживаться умеренных настроек и вносить так мало изменений в основные настройки, насколько это возможно. В то же время, следует учитывать, что существуют определенные настройки, которые необходимо изменить, чтобы система действительно могла загружаться!

=== Сравнение встроенных в ядро параметров и загружаемых модулей ядра ===

Большинство параметров конфигурации могут находиться в трех состояниях: они могут быть как отключены вовсе (N), прямо встроены в ядро (Y), или собраны в качестве модулей (M). Модули хранятся вне ядра на файловой системе, в то время как встроенные компоненты встраиваются прямо в образ ядра. 

Между встроенными параметрами и модулями существует важное различие: за некоторыми исключениями, ядро не предпринимает каких-либо попыток загрузить внешние модули, если они нужны (это задача пользователя). В то время как определенные части системы могут иметь возможность загрузки модулей по требованию, и доступны несколько утилит для автоматической загрузки модулей, рекомендуется включение аппаратных функций и функций ядра непосредственно в само ядро. В этом случае, ядром может гарантироваться поддержка программных функций и аппаратного обеспечения при необходимости. 

С некоторыми настройками, встроенные параметры являются абсолютной необходимостью. Например, если раздел root расположен на файловой системе <code>ext2</code>, система не загрузится, если ext2 был встроен в качестве модуля (системе потребуется обратиться к разделу root чтобы найти модуль ext2, но обращения не произойдет до тех пор, пока модуль ext2 не будет загружен!).

=== Поддержка аппаратного обеспечения ===

Помимо обнаружения ''типа архитектуры'' системы, утилита конфигурации не предпринимает попыток обнаружить какое аппаратное обеспечение имеется на системе. В то время как для определенного типа аппаратного обеспечения имеются настройки по умолчанию, вам почти наверняка потребуется найти и выбрать параметры конфигурации, подходящие для аппаратного обеспечения системы. 

Это просто требует знания внутренних компонентов системы и компонентов, подключенных к компьютеру, или их идентификации. Для большинства внутренних компонент, необходимо определить ''чипсет'', используемый для каждой из них, вместо названия компонента на розничном рынке. 

Доступны несколько вспомогательных утилит. <code>lspci</code> (часть пакета {{Package|sys-apps/pciutils}}) определяет аппаратное обеспечение, основанное на PCI и AGP, включая компоненты, встроенные в материнскую плату. <code>lsusb</code> (из пакета {{Package|sys-apps/usbutils}}) определяет устройства, подсоединенные к USB-портам. 

Положение в некотором смысле запутывается изменяющейся степенью стандартизации аппаратного обеспечения. До тех пор, пока не происходит отклонения от значений по умолчанию, жесткие диски IDE будут работать, как и PS/2 или USB-клавиатура и мышь. Основная поддержка дисплея VGA также будет включена. Однако, некоторые устройства, такие как адаптеры ethernet, едва стандартизированы, поэтому чтобы получить доступ к сети, потребуется идентифицировать чипсет ethernet и выбрать подходящую поддержку для сетевой платы. 

Кроме того, в то время как некоторые вещи просто работают с настройками по умолчанию, имеется возможность выбора более    индивидуальных параметров, чтобы извлечь полный потенциал из системы. Например, если поддержка правильного чипсета IDE отключена, жесткие диски работают ''очень'' медленно.

=== Функции ядра ===

Наряду с поддержкой аппаратного обеспечения, необходимо также задуматься о включении в ядро определенных функций программного обеспечения. Одним из важных примеров такой функции является поддержка файловой системы: необходимо выбрать поддержку файловых систем для использования на жестком диске, наряду с любыми другими файловыми системами, которые могут понадобиться для использования на внешнем хранилище (например, VFAT на флеш-накопителях USB). 

Другим распространенным примером является расширенная функциональность сети. При необходимости включить маршрутизацию или межсетевую фильтрацию, нужно проверить, что соответствующие настройки конфигурации включены в файл конфигурации ядра. 

=== Ready? ===

Now that we've introduced the concepts, you should be able to start identifying your hardware and browsing through the configuration menus, selecting the required kernel options for your system. 

The rest of this page aims to clear up common areas of confusion, and provide advice for how to avoid common problems which users often run into. Good luck! 

== Common problems and areas of confusion ==

=== SATA disks are SCSI ===

Most modern desktop systems ship with storage devices (hard disk and CD/DVD drives) on a [https://en.wikipedia.org/wiki/SATA Serial ATA] bus, rather than the older [https://en.wikipedia.org/wiki/Parallel_ATA IDE] (ribbon cable) bus type. 

SATA support in Linux is implemented in a layer referred to as ''libata'', which sits below the SCSI subsystem. For this reason, SATA drivers are found in the SCSI driver section of the configuration. Additionally, your storage devices will be treated as SCSI devices, which means SCSI disk/cdrom support is required too. Your SATA hard disk will be named as (e.g.) {{Path|/dev/sda}} and your SATA CD/DVD drive will be named as (e.g.) {{Path|/dev/sr0}}. 

Although the majority of these drivers are for SATA controllers, libata was not designed to be SATA-specific. All common IDE drivers will also be ported to libata in the near future, and at this point, the above considerations will also apply for IDE users. 

{{Code|Configuration options for libata|<pre>
Device Drivers  --->
 SCSI device support  --->
  <*> SCSI device support
  <*>   SCSI disk support
  <*>   SCSI CDROM support
  
  SCSI low-level drivers  --->
   <*> Serial ATA (SATA) support
    Select your chipset from the choices listed below the above option
</pre>
}}

=== IDE chipsets and DMA ===

Despite the introduction of SATA, IDE devices are still very common and depended upon by many. IDE is a fairly generic technology, and as such, Linux supports almost all IDE controllers out-of-the-box without any controller-specific options selected. 

However, IDE is an old technology, and in it's original ''Programmed Input/Output'' incarnation, it is unable to provide the transfer rates required for speedy access to modern storage devices. The generic IDE driver is limited to these PIO transfer modes, which result in slow data transfer rates, and significantly high CPU usage while data is being transferred to/from disk. 

Unless you're dealing with a pre-1995 system, your IDE controller will also support an alternative transfer mode, known as ''Direct Memory Access'' (DMA). DMA is much much faster, and CPU utilisation is barely affected while data transfers are taking place. If you are suffering from really poor general system performance and you are using an IDE disk, chances are that DMA is not being used. 


{{Note|As mentioned earlier, libata is available even for IDE drives. If you're using libata, then all your drives, including your IDE drives, will be using DMA. There's no need to do any further checking or configuration.}}

If you're not using libata for your IDE disks, then you'll need to check for DMA usage and enable it. 

{{RootCmd|hdparm -d /dev/hda|output=<pre>
/dev/hda:
 using_dma    =  0 (off)
</pre>
}}

To enable DMA on your IDE devices, you simply need to enable the configuration option for your IDE controller. 

{{Kernel|Configuration options for IDE controllers|<pre>
Device Drivers  --->
 ATA/ATAPI/MFM/RLL support  --->
  <*> ATA/ATAPI/MFM/RLL support
  <*>   Enhanced IDE/MFM/RLL disk/cdrom/tape/floppy support
  [*]     PCI IDE chipset support
  Select your chipset from the choices listed below the above option
</pre>
}}

=== USB Host Controllers ===

[http://en.wikipedia.org/wiki/USB USB] is a widely adopted bus for connecting external peripherals to your computer. One of the reasons behind the success of USB is that it is a standardised protocol, however the USB ''host controller devices'' (HCDs) implemented on the host computer do vary a little. There are 3 main types: 

* <code>UHCI</code> is the Universal Host Controller Interface. It supports USB 1.1, and is usually found on motherboards based on a VIA or Intel chipset.
* <code>OHCI</code> is the Open Host Controller Interface. It supports USB 1.1 and is usually found on motherboards based on an Nvidia or SiS chipset.
* <code>EHCI</code> is the Extended Host Controller Interface. It is the only common host controller to support USB 2.0, and can typically be found on any computer that supports USB 2.0.

Most systems will come with two of the above interface types: EHCI (USB 2.0), plus either UHCI or OHCI (USB 1.1). It is important that you select both types present on your system. While all USB 2.0 devices are backwards compatible with USB 1.1, a large proportion of USB devices (even the ones being manufactured today) are based on the USB 1.1 interface - why would a USB mouse need more than 1.5mbit/sec? 

If you do not select the relevant options corresponding to the USB HCD types present on your system, you may experience 'dead' USB ports: you plug a device in, but it does not get power or respond in any way. 

A neat <code>lspci</code> trick (from the {{Package|sys-apps/pciutils}} package) makes it relatively easy to detect which HCDs are present in your system. Ignoring the FireWire controller which was also matched, it is easy to spot that my system requires OHCI and EHCI support: 

{{RootCmd|lspci -v {{!}} grep HCI|output=<pre>
00:02.0 USB Controller: nVidia Corporation CK804 USB Controller (rev a2) (prog-if 10 [OHCI])
00:02.1 USB Controller: nVidia Corporation CK804 USB Controller (rev a3) (prog-if 20 [EHCI])
01:0b.0 FireWire (IEEE 1394): Agere Systems FW323 (rev 61) (prog-if 10 [OHCI])
</pre>
}}

{{Kernel|Configuration for USB HCDs|<pre>
Device Drivers  --->
 USB support  --->
  <*> Support for Host-side USB
  ---   USB Host Controller Drivers
  <*>   EHCI HCD (USB 2.0) support
  <*>   OHCI HCD support
  <*>   UHCI HCD (most Intel and VIA) support
  Select the HCDs present on your system, or all 3 if you are unsure.
</pre>
}}

=== Multiprocessor, Hyper-Threading and Multi-Core systems ===

Many computer systems are based on multiple processors, but not always in immediately obvious ways. 

* Many of Intel's CPUs support a technology which they call [https://en.wikipedia.org/wiki/Hyperthreading hyper-threading], which is where the CPU is actually viewed by the system as two ''logical'' processors.
* Most Intel/AMD CPUs actually consist of multiple physical processors inside a single package, these are known as [https://en.wikipedia.org/wiki/Multi-core_processor multi-core] processors.
* Some high-end computer systems actually have multiple physical processors installed on specialised motherboards to provide a significant performance increase over a ''uniprocessor'' system. You'll probably know if you have such a system, since they aren't cheap.

In all of these cases, you need to select the appropriate kernel options to obtain optimum performance from these setups. 

{{Kernel|Configuration for multi-processing|<pre>
Processor type and features  --->
 [*] Symmetric multi-processing support
 Select the above option if you are on a multi-processor system (of any type)
 [*]   SMT (Hyperthreading) scheduler support
 Select the above option if you are on an Intel Hyper-Threading CPU
 [*]   Multi-core scheduler support (NEW)
 Select the above option if your CPU is multi-core
Power management and ACPI options  --->
 [*] ACPI (Advanced Configuration and Power Interface) Support
 The above option not only enables power management features, but might
 also be a requirement for making all CPUs available to your system
</pre>
}}

=== x86 High Memory support ===

Due to limitations in the 32-bit address space of the x86 architecture, a kernel with default configuration can only support up to 896mb RAM. If your system has more memory, only the first 896mb will be visible, unless you enable high memory support. 

{{Note|This limitation is specific to the x86 (IA32) architecture. Other architectures naturally support large amounts of memory, with no configuration tweaks required.}}

High memory support is not enabled by default, because it introduces a small system overhead. Do not be distracted by this, the overhead is insignificant when compared to the performance increase of having more memory available! 

{{Kernel|Enabling high memory support on x86|<pre>
Processor type and features  --->
 High Memory Support  --->
  (X) 4GB
  ( ) 64GB
  Choose the 4GB option, unless your system has more than 4GB of RAM.
</pre>
}}

== Kernel configuration shorthand notation ==

=== Introduction ===

When you read about kernel configurations, you will often see that settings are described as <code>CONFIG_<something></code>. This short-hand notation is what the kernel configuration actually uses internally, and is what you will find in the kernel configuration file (be it {{Path|/usr/src/linux/.config}} or in the auto-generated {{Path|/proc/config.gz}} file). Of course, using short-hand notation wouldn't do much good if you cannot translate this to the real location in the kernel configuration. Luckily, the <code>make menuconfig</code> tool allows you to do just that.

=== Translating CONFIG_FOO to the real configuration location ===

Suppose you need to enable <code>CONFIG_TMPFS_XATTR</code>, launch the kernel configuration menu (<code>make menuconfig</code>) and type in {{Key|/}}. This will open the search box. In this search box, type <code>CONFIG_TMPFS_XATTR</code> (you can even drop the <code>CONFIG_</code>). The next code listing shows the result of this search. 

{{Kernel|Result of looking for CONFIG_TMPFS_XATTR|<pre>
Symbol: TMPFS_XATTR [=n]
Type  : boolean
Prompt: Tmpfs extended attributes
  Defined at fs/Kconfig:138
  Depends on: TMPFS [=y]
  Location:
    -> File systems
      -> Pseudo filesystems
        -> Virtual memory file system support (former shm fs) (TMPFS [=y])
  Selected by: TMPFS_POSIX_ACL [=n] && TMPFS [=y]
</pre>
}}

This output yields lots of interesting information. 

{| class="wikitable" style="text-align: left;" 
|- 
! Entry
! Description
|- 
| Symbol: TMPFS_XATTR [=n]
| This identifies the kernel configuration entry you are looking for. It also already tells you that the setting is currently ''not enabled'' ([=n]).
|- 
| Type: boolean
| The setting you looked for is a boolean (which means you can enable or disable it). Some settings are numbers or strings.
|- 
| Prompt: Tmpfs extended attributes
| This is the text you will find in <code>make menuconfig</code> and as such, is the entry that you are looking for in a more human readable format.
|- 
| Depends on: TMPFS [=y]
| Before you can even see this entry, you need to have <code>CONFIG_TMPFS</code> enabled. In this case, this is done (hence the [=y]) but if this is not the case, you will first need to look (and enable) <code>CONFIG_TMPFS</code>.
|- 
| Location: ...
| This is the location in the <code>make menuconfig</code> structure where you can find the setting. Remember, the setting you are looking for is ''Tmpfs extended attributes''.
|- 
| Selected by: TMPFS_POSIX_ACL [=n] && TMPFS [=y]
| If the settings described here are both enabled (in our case, the first one isn't), then <code>CONFIG_TMPFS_XATTR</code> will be automatically enabled as well and you will not be able to disable it.
|-
|}

With this information, you should be able to translate any <code>CONFIG_*</code> requirements tossed at you easily. In short, it means you 

# need to enable the settings described in the ''Depends on'' field
# navigate where ''Location:'' points you towards
# toggle the value referred to by ''Prompt:''

== Other kernel configuration documentation ==

So far, we have only discussed general concepts and specific problems related to kernel configuration, without going into any precise details (such details are for you to discover!). However, other parts of the Gentoo documentation collection provide specialised details for the topics at hand. 

You may find these documents helpful while configuring those specific areas, but if you are new to kernel configuration, don't be too adventurous. Start by getting a basic system up and running, you can always come back later to add support for your audio, printing, etc. 

* The [[ALSA]] article details the configuration options required for sound card support. Note that ALSA is one exception to the suggested scheme of not building things as modules: ALSA is actually much easier to configure when the components are modular.

* The [[Bluetooth]] article details the options you need in order to use bluetooth devices on your system.

* The [[IPv6 router guide]] describes how to configure your kernel for routing using the next generation network addressing scheme.

* If you will be using the closed-source nVidia graphics drivers for improved 3D graphics performance, the [[NVidia/nvidia-drivers|nVidia Guide]] lists the options that should and should not be selected on such a system.

* Amongst other things, the [[Power_management/HOWTO|Power Management Guide]] explains how to configure your kernel for CPU frequency scaling, and for suspend and hibernate functionality.

* If you are running a PowerPC system, the [[PPC/FAQ|PPC FAQ]] has a few sections about kernel configuration.

* The [[Printing|Printing HOWTO]] lists the kernel options needed to support printing in Linux.

* The [[USB/HOWTO|USB Guide]] details the configuration required to use common USB devices such as keyboards/mice, storage devices, and printers.

== Troubleshooting ==

=== Configuration changes do not take effect ===

It is very common for users to make a configuration change, but then make a small mistake in the process following on from that point. They reboot into a kernel image that is not the one they just reconfigured, observe that whatever problem they were trying to solve is still present, and conclude that the configuration change does not solve the problem. 

The process of compiling and installing kernels is outside the scope of this document, you should refer to the [[Kernel/Upgrade|Kernel Upgrade Guide]] for general guidance. In short, the process is: configure, compile, mount {{Path|/boot}} (if not already mounted), copy new kernel image over, reboot. If you miss out any of those final stages, your changes will not take effect! 

It is possible to verify if the kernel you are booted from matches the kernel compiled on your hard disk by examining the date and time of compilation. Assuming your architecture is x86 and your kernel sources are installed at {{Path|/usr/src/linux}}: 

{{RootCmd|uname -v|output=<pre>
#4 SMP PREEMPT Sat Jul 15 08:49:26 BST 2006
</pre>}}

The above command displays the date and time that the kernel you are currently booted from was compiled.

{{RootCmd|ls -l /usr/src/linux/arch/i386/boot/bzImage|output=<pre>
-rw-r--r-- 1 dsd users 1504118 Jul 15 08:49 /usr/src/linux/arch/i386/boot/bzImage
</pre>}}

The above command displays the date and time that the kernel image on your hard disk was last compiled.

If the two times from the above commands differ by more than 2 minutes, it indicates that you have made a mistake during kernel reinstallation and you are not booted from the kernel image that you thought you were!

=== Modules do not get loaded automatically ===

As mentioned earlier in this document, the kernel configuration system hides a large behavioural change when selecting a kernel component as a module (M) rather than built-in (Y). It is worth repeating this again because so many users fall into this trap. 

When you select a component as built-in, the code is built into the kernel image (bzImage). When the kernel needs to use that component, it can initialise and load it automatically, without any user intervention. 

When you select a component as a module, the code is built into a kernel module file and installed on your filesystem. In general, when the kernel needs to use that component, it can't! With some exceptions, the kernel makes no effort to actually load these modules - this task is left up to the user. 

So, if you build support for your network card as a module, and you then find that you cannot access your network, it is probably because the module is not loaded - you must either do this manually or configure your system to autoload it at boot time. 

Unless you have reasons to do otherwise, save yourself some time by building these components directly into the kernel image, so that the kernel can automatically set these things up for you. 

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Daniel Drake
* Curtis Napier
* Justin Robinson
* Åukasz Damentko
* Jonathan Smith
* nightmorph

[[Category:Server and Security]]
