<languages />

<translate>

<!--T:72-->
{{Metadata|abstract=This document is a guide to getting 3D acceleration working using the DRM with Xorg in Gentoo}}

<!--T:1-->
This document is [[Article description::a guide to getting 3D acceleration working using the DRM with Xorg in Gentoo.]]

== Introduction == <!--T:2-->

=== What is hardware 3D acceleration and why do I want it? === <!--T:3-->

<!--T:4-->
With hardware 3D acceleration, three-dimensional rendering uses the graphics processor on the video card instead of taking up valuable CPU resources drawing 3D images. It's also referred to as "hardware acceleration" instead of "software acceleration" because without this 3D acceleration the CPU is forced to draw everything itself using the Mesa software rendering libraries, which takes up quite a bit of processing power. 

<!--T:73-->
While Xorg typically supports 2D hardware acceleration, it often lacks hardware 3D acceleration. Three-dimensional hardware acceleration is valuable in situations requiring rendering of 3D objects such as games, 3D CAD, and modeling.

=== Getting 3D acceleration === <!--T:5-->

<!--T:6-->
In many cases, both binary and open-source drivers exist. Open source drivers are preferable since we're using Linux and open source is one of its underlying principles. Sometimes, binary drivers are the only option, especially if the graphics card is so new that open source drivers have not yet been written to support its features. Binary drivers include {{Package|x11-drivers/nvidia-drivers}} for nVidia cards and {{Package|x11-drivers/xf86-video-ati}} (used to be {{Package|x11-drivers/ati-drivers}}) for older AMD/ATI cards, {{Package|dev-libs/amdgpu-pro-opencl}} for newer AMD cards.

=== What is DRI? === <!--T:7-->

<!--T:8-->
The [https://dri.freedesktop.org/wiki/ Direct Rendering Infrastructure], also known as the DRI, is a framework for allowing direct access to graphics hardware in a safe and efficient manner. It includes changes to the X server, to several client libraries and to the kernel. The first major use for the DRI is to create fast OpenGL implementations. 

=== What is the DRM and how does it relate to regular Xorg? === <!--T:9-->

<!--T:10-->
The DRM (Direct Rendering Manager) is an ''enhancement'' to Xorg that adds 3D acceleration for cards by adding the kernel module necessary for direct rendering. 

=== Purpose === <!--T:11-->

<!--T:12-->
This guide is for people who can't get direct rendering working with just Xorg. The DRM works for the following drivers: 

<!--T:13-->
* 3dfx
* [[AMDGPU|amdgpu]]
* [[AMDGPU-PRO|amdgpu-pro]] (closed source)
* [[fglrx]] (closed source; deprecated)
* [[intel]]
* matrox
* [[nouveau]]
* [[NVidia/nvidia-drivers|nvidia-drivers]] (closed source)
* rage128
* [[radeon]]
* radeonhd (deprecated)
* mach64
* sis300
* via

<!--T:14-->
See the [https://dri.freedesktop.org/ DRI homepage] for more info and documentation.

== Install Xorg and configure the kernel == <!--T:15-->

=== Install Xorg === <!--T:16-->

<!--T:17-->
Please read our [https://wiki.gentoo.org/wiki/Xorg/Guide Xorg Configuration Guide] to get Xorg up and running. 

=== Configure the kernel === <!--T:18-->

<!--T:19-->
Probe for the chipset and enable just that one. 

<!--T:20-->
{{Emerge|sys-apps/pciutils}}

<!--T:21-->
{{RootCmd|lspci {{!}} grep AGP|output=<pre>
# 00:01.0 PCI bridge: Intel Corp. 440BX/ZX/DX - 82443BX/ZX/DX AGP bridge (rev 03)
</pre>
}}

<!--T:22-->
The output may not match the above due to different hardware.

<!--T:23-->
If the chipset is not supported by the kernel, some success may be obtained by passing <code>agp=try_unsupported</code> as a kernel parameter. This will use Intel's generic routines for AGP support. To add this parameter, edit the bootloader's configuration file.

<!--T:24-->
Most, if not all, kernels should have these options. This was configured using a standard {{Package|sys-kernel/gentoo-sources}} kernel.

<!--T:25-->
{{RootCmd|ls -l /usr/src/linux |output=<pre>
lrwxrwxrwx 1 root root 22 2007-02-14 20:12 /usr/src/linux -> linux-2.6.18-gentoo-r4
</pre>}}

<!--T:26-->
Make sure {{Path|/usr/src/linux}} links to the current kernel:

<!--T:27-->
{{Cmd|eselect kernel list}}
OR
{{RootCmd
|cd /usr/src/linux
|make menuconfig
}}


<!--T:28-->
{{KernelBox|title=Hardware 3D acceleration options|1=
Processor type and features --->
<*> MTRR (Memory Type Range Register) support
Device drivers --->
   Graphics support --->
   <M> /dev/agpgart (AGP Support) --->
      (The agpgart option is not present on 64-bit kernels;
      just choose the appropriate chipset support.)
      <M> Intel 440LX/BX/GX, I8xx and E7x05 support
      (Enable the appropriate chipset instead of the above.)
   <M> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
      <M> (Select the appropriate  graphics card from the list)
}}

=== Compile and install the kernel === <!--T:29-->

<!--T:30-->
{{RootCmd|make && make install && make modules_install}}

<!--T:31-->
Don't forget to set up {{Path|grub.conf}} or {{Path|lilo.conf}}.

<!--T:74-->
When using LILO, issue:

<!--T:75-->
{{RootCmd|lilo}}

<!--T:76-->
When using GRUB 2, run:

<!--T:77-->
{{RootCmd|grub-mkconfig -o /boot/grub/grub.cfg}}

=== Add appropriate user(s) to the video group === <!--T:32-->

<!--T:33-->
Next, add the appropriate user(s) to the video group: 

<!--T:34-->
{{RootCmd|gpasswd -a $USER video}}

== Configure direct rendering == <!--T:35-->

=== Configure Xorg === <!--T:36-->

<!--T:37-->
Hopefully just adding the appropriate user to the <code>video</code> group is sufficient to enable direct rendering. However, Xorg may need some additional configuration via the {{Path|/etc/X11/xorg.conf.d/}} directory. New configuration files created in this directory may be named any alpha-numeric file name, as long as the file suffix ends in {{Path|.conf}}. Open up a favorite text editor and create a file with this inside it: 

<!--T:38-->
{{FileBox|filename=/etc/X11/xorg.conf.d/10-dri.conf|1=
Section "Device"
  Driver "radeon"
EndSection
Section "dri"
  Mode 0666
EndSection
}}

<!--T:39-->
Replace <code>radeon</code> with the name of the appropriate driver.

=== Changes to automatic module loading === <!--T:40-->

<!--T:41-->
You will need to add the module name that your card uses to {{Path|/etc/modules-load.d/video.conf}} to ensure that the module is loaded automatically when the system starts up. 

<!--T:42-->
{{FileBox|filename=/etc/modules-load.d/video.conf|1=
intel-agp # Substitute with your driver
}}

<!--T:43-->
{{Note|If you compiled <code>agpgart</code> as a module, you will also need to add it to {{Path|/etc/modules-load.d/video.conf}}.}}

== Test 3D acceleration == <!--T:44-->

=== Reboot to the new kernel === <!--T:45-->

<!--T:46-->
Reboot your computer to your new kernel and login as a normal user. It's time to see if you have direct rendering and how good it is. <code>glxinfo</code> and <code>glxgears</code> are part of the {{Package|x11-apps/mesa-progs}} package, so make sure it is installed before you attempt to run these commands.

<!--T:47-->
{{Cmd|startx}}

<!--T:48-->
No need to load modules for your driver or agpgart, even if you compiled them as a module. They will be loaded automatically.

<!--T:49-->
{{Cmd|glxinfo {{!}} grep rendering|output=<pre>
direct rendering: Yes
</pre>}}

<!--T:50-->
If it outputs "No", you don't have 3D acceleration.

<!--T:51-->
{{Cmd|glxgears}}

<!--T:52-->
Test your frames per second (FPS) at the default size. The number should be significantly higher than before configuring DRM. Do this while the CPU is as idle as possible.

<!--T:53-->
{{Note|FPS may be limited by your screen's refresh rate, so keep this in mind if <code>glxgears</code> reports only about 70-100 FPS. {{Package|games-fps/xonotic}} or other 3D games are better benchmarking tools, as they give you real-world performance results.}}

=== Get the most out of direct rendering === <!--T:54-->

<!--T:55-->
If you want to set more features, for performance or other reasons, check out the [https://dri.freedesktop.org/wiki/FeatureMatrix feature matrix] on the DRI web site or the [http://dri.sourceforge.net/doc/dri_driver_features.phtml features listing] on Sourceforge. 

== Troubleshooting == <!--T:56-->

=== Problem with rendering === <!--T:57-->

<!--T:58-->
Try <code>modprobe radeon</code> before you start the X server (replace <code>radeon</code> with the name of your driver). Also, try building agpgart into the kernel instead of as a module.

=== Failed to load kernel module agpgart when running startx === <!--T:59-->

<!--T:60-->
error: "[drm] failed to load kernel module agpgart" after invoking `startx` is caused by presents of compiled agpgart in the kernel instead of as a module. Ignore it unless you're having problems.

=== TV-Out on Radeon GPU === <!--T:61-->

<!--T:62-->
The drivers originally developed by the [http://gatos.sourceforge.net/ GATOS] project have been merged into Xorg's codebase. You don't need anything special for TV-Out; {{Package|x11-drivers/xf86-video-ati}} will work just fine.

=== Compatibility for freshly released GPUs === <!--T:63-->

<!--T:64-->
Try out the binary drivers. For AMD cards, use <code>ati-drivers</code>. If those don't support it, use fbdev. It's slow, but it works.

=== PCI card doesn't work properly === <!--T:65-->

<!--T:66-->
Create a config file in {{Path|/etc/X11/xorg.conf.d/}}; name it anything you want as long as it ends in {{Path|.conf}}. Add the following to it: 

<!--T:67-->
{{FileBox|filename=/etc/X11/xorg.conf.x/10-pcimode.conf|title=Adding ForcePCI Mode|1=
Section "Device"
  Option "ForcePCIMode" "True"
EndSection
}}

== External resources == <!--T:68-->

<!--T:69-->
* [https://forums.gentoo.org/viewtopic.php?t=46681 Direct rendering (DRI) using X11-DRM HOWTO] on the Gentoo forums
* [https://forums.gentoo.org/viewtopic.php?t=29264 Radeon 7000-9700 DRI CVS Install Guide] on the Gentoo forums
* [https://dri.freedesktop.org/ https://dri.freedesktop.org/]
</translate>

[[Category:X.Org]] {{Migrated|originalauthors={{Dev|dberkholz}}, peesh, {{Dev|nightmorph}}}}
