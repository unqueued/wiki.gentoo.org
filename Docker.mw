{{InfoBox stack
|{{InfoBox homepage|https://www.docker.com/|header=true}}
|{{InfoBox gdoc|Docker}}
|{{InfoBox wikipedia|Docker_(software)}}
}}

Docker is a container virtualization environment which can establish development or runtime environments without modifying the environment of the base operating system. It has the ability to deploy instances of containers that provide a thin virtualization, using the host kernel, which makes it faster and lighter than full hardware visualization.

{{Warning|Containers that produce kernel panics will induce kernel panics into the host operating system.}}

== Installation ==

=== Kernel ===

You need at least a 3.10+ kernel to run Docker.

If you miss the kernel config, you will get a list of kernel options missing. You can set them manually, by using / (slash) in menuconfig to search the name of the option.

{{KernelBox|title=Configuring the kernel for Docker|1=
   General setup  --->
    [*] POSIX Message Queues
    [*] Control Group support  --->
        [*]   Freezer cgroup subsystem
        [*]   Device controller for cgroups
        [*]   Cpuset support
        [*]   Simple CPU accounting cgroup subsystem
        [*]   Enable perf_event per-cpu per-container group (cgroup) monitoring
        [*]   Group CPU scheduler  --->
            [*]   Group scheduling for SCHED_OTHER
            [*]     CPU bandwidth provisioning for FAIR_GROUP_SCHED
    -*- Namespaces support
        [*]   UTS namespace
        [*]   IPC namespace
        [*]   PID Namespaces
        [*]   Network namespace
[*] Networking support  --->
       Networking options  --->
        [*] Network packet filtering framework (Netfilter)  --->
            [*]   Advanced netfilter configuration
            [*]     Bridged IP/ARP packets filtering
         Core Netfilter Configuration  --->
                  *** Xtables matches ***
            <*>   "addrtype" address type match support
            <*>   "conntrack" connection tracking match support
         IP: Netfilter Configuration  --->
            <*> IPv4 connection tracking support (required for NAT)
            <*> IP tables support (required for filtering/masq/NAT)
            <*>   Packet filtering
            <*>   IPv4 NAT
            <*>     MASQUERADE target support
        <*> 802.1d Ethernet Bridging
Device Drivers  --->
    [*] Multiple devices driver support (RAID and LVM)  --->
        <*>   Device mapper support
        <*>     Thin provisioning target
    [*] Network device support  --->
        [*]   Network core driver support
        <*>     Virtual ethernet pair device
       Character devices  --->
        -*- Enable TTY
        -*-   Unix98 PTY support
        [*]     Support multiple instances of devpts
}}

Exit the kernel configuration, [[Kernel/Rebuild|rebuild the kernel]], and reboot the system to the new kernel.

=== Emerge ===

Install {{Package|app-emulation/docker}}:

{{Emerge|params+=--verbose|app-emulation/docker}}

== Configuration ==

=== Services ===

==== OpenRC ====

After Docker has been successfully installed, start it and add it to the system's default runlevel:

{{RootCmd
|/etc/init.d/docker start
|rc-update add docker default
}}

=== Permissions ===

Add relevant users to the docker group:

{{RootCmd|usermod -aG docker <username>}}

== Usage ==

=== Testing ===

In order to test your installation, run the following command:

{{Cmd|docker run --rm hello-world|output=<pre>

Hello from Docker.
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker Hub account:
 https://hub.docker.com

For more examples and ideas, visit:
 https://docs.docker.com/userguide/

</pre>}}

That will first download from the [https://hub.docker.com/ Docker Hub] the image named ''hello-world'' (if you don't have it locally yet) and then it'll run it inside new namespaces. It purpose is just to display some text through a container.

==== Building from a Dockerfile ====

Create a new Dockerfile in an empty directory with the following content:

{{FileBox|filename=Dockerfile|1=
FROM php:5.6-apache
}}

Run:

{{Cmd
|docker build -t my-php-app .
|docker run -it --rm --name my-running-app my-php-app
}}

== See also ==

* [[LXC]] - Linux containers.
