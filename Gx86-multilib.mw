{{Lowercase title}}
Gentoo's gx86-multilib project has a two-fold missionː
# Provide a means to build Gentoo packages for multiple ABIs ([[multilib]]); and 
# Empower package maintainers to implement multiple ABIs in a consistent manner.

== Goals ==
Our main goal is to provide a feasible and user-friendly way of supporting applications which are not compatible with the native ABI. This means, we effectively target the following three kinds of applicationsː
# Closed-source applications, such as Skype, which are not released for the native ABI or architecture;
# Applications interfacing with closed source applications, such as wine; and
# Applications which break when compiled for the native ABI.

A side goal is to deprecate and remove the emul-linux packages, replacing them with a better solution.

== Eclasses ==
We provide the following eclasses for multilib-related use:

# [http://devmanual.gentoo.org/eclass-reference/multilib-build.eclass/ multilib-build.eclass] provides the raw tools to build packages with multilib support. It sets the necessary USE flags for the package and provides functions to perform the build. It should be used only in meta-packages, as it exclusively affects USE flags.
# [http://devmanual.gentoo.org/eclass-reference/autotools-multilib.eclass/ autotools-multilib.eclass] is a very simple wrapper on top of the [http://devmanual.gentoo.org/eclass-reference/autotools-utils.eclass/ autotools-utils.eclass]. It should be used for all multilib-capable autotools packages. It uses the out-of-source build feature to support multilib builds with almost no need of modifying autotools-utils ebuilds.
# [http://devmanual.gentoo.org/eclass-reference/multilib-minimal.eclass/ multilib-minimal.eclass] provides a simple, wrapper to build the packages where no other eclass fits better.

== USE flags ==

Multilib-capable packages request proper package variants and satisfy dependencies through the use of ''abi_*'' USE flags. To ensure the consistency of a package's IUSE flags, '''please define architecture flags in packages'''.

By default, ''abi_*'' flags are masked and hidden. Architecture-specific profiles unmask the flags and force the native flag (it remains hidden from the user). Multilib profiles may also un-hide the flags to unmask additional variants.

The native ABI flag must always be enabled on multilib libraries to guarantee that plain (non-multilib aware) package dependencies always pull in the native variant. To maintain backwards compatibility and user convenience, multilib support needs to be transparent to non-multilib packages.

Some leaf packages, like {{Package|app-emulation/wine}} or {{Package|www-plugins/adobe-flash}}, may need the default ''abi̜̞_*'' flags removed.  You may edit the profile's package.use.force file. However, please note that afterwards non-multilib packages won't be able to properly depend on the package in question.

{{File|profiles/arch/amd64/package.use.force|Example of un-forcing abi_x86_64|<pre>
# Michał Górny <mgorny@gentoo.org> (02 Sep 2013)
# Packages with optional 64-bit variant.
app-emulation/wine -abi_x86_64
www-plugins/adobe-flash -abi_x86_64
</pre>}}

[[Category:Development]]
