<languages />

<translate>

<!--T:98-->
{{Metadata|abstract=This guide introduces the basics of LDAP and shows you how to setup OpenLDAP for authentication purposes between a group of computers.}}


<!--T:102-->
This guide introduces the basics of LDAP and shows you how to setup OpenLDAP for authentication purposes between a group of computers.


== Getting started with OpenLDAP == <!--T:2-->

=== What is LDAP? === <!--T:3-->

<!--T:4-->
LDAP stands for ''Lightweight Directory Access Protocol''. Based on X.500 it encompasses most of its primary functions, but lacks the more esoteric functions that X.500 has. Now what is this X.500 and why is there an LDAP? 

<!--T:5-->
X.500 is a model for Directory Services in the OSI concept. It contains namespace definitions and the protocols for querying and updating the directory. However, X.500 has been found to be overkill in many situations. Enter LDAP. Like X.500 it provides a data/namespace model for the directory and a protocol. However, LDAP is designed to run directly over the TCP/IP stack. See LDAP as a slim-down version of X.500. 

=== I don't get it. What is a directory? === <!--T:6-->

<!--T:7-->
A directory is a specialized database designed for frequent queries but infrequent updates. Unlike general databases they don't contain transaction support or roll-back functionality. Directories are easily replicated to increase availability and reliability. When directories are replicated, temporary inconsistencies are allowed as long as they get synchronised eventually. 

=== How is information structured? === <!--T:8-->

<!--T:9-->
All information inside a directory is structured hierarchically. Even more, if you want to enter data inside a directory, the directory must know how to store this data inside a tree. Lets take a look at a fictional company and an Internet-like tree: 

<!--T:10-->
{{CodeBox|title=Organisational structure for GenFic, a Fictional Gentoo company|1=
dc:         com
             {{!}}
dc:        genfic         ## (Organisation)
          /      \
ou:   People   servers    ## (Organisational Units)
      /    \     ..
uid: ..   John            ## (OU-specific data)
}}

<!--T:11-->
Since you don't feed data to the database in this ascii-art like manner, every node of such a tree must be defined. To name such nodes, LDAP uses a naming scheme. Most LDAP distributions (including OpenLDAP) already contain quite a number of predefined (and general approved) schemas, such as the ''inetOrgPerson'', or a frequently used schema to define users which Unix/Linux boxes can use, called ''posixAccount''. Note there are GUI web based tools to make managing LDAP painless: see [[#Working_with_OpenLDAP|Working with OpenLDAP]] for an non-exhaustive list.

<!--T:12-->
Interested users are encouraged to read the [http://www.openldap.org/doc/admin24/ OpenLDAP Admin Guide].

=== So... what can it be used for? === <!--T:13-->

<!--T:14-->
LDAP can be used for various things. This document focuses on centralised user management, keeping all user accounts in a single LDAP location (which doesn't mean that it's housed on a single server, LDAP supports high availability and redundancy), yet other goals can be achieved using LDAP as well. 

<!--T:15-->
* Public Key Infrastructure

<!--T:16-->
* Shared Calendar

<!--T:17-->
* Shared Addressbook

<!--T:18-->
* Storage for DHCP, DNS, ...

<!--T:19-->
* System Class Configuration Directives (keeping track of several server configurations)

<!--T:103-->
* Centralised Authentication (PosixAccount)

<!--T:20-->
* ...

== OpenLDAP server setup  == <!--T:21-->

=== Common notes ===

<!--T:23-->
The domain genfic.org is an example in this guide. You will of course want to change this. However, make sure that the top node is an official top level domain (net, com, cc, be, ...).

<!--T:24-->
Let's first emerge OpenLDAP. Ensure the USE flags ''berkdb, crypt, gnutls, ipv6, sasl, ssl, syslog, -minimal'' and ''tcpd'' are used.

<!--T:25-->
{{Emerge|openldap}}

<!--T:26-->
OpenLDAP has a main user called "rootdn" (Root Distinguished Name), which is hardcoded in the application. Unlike the classic Unix root user, the rootdn user still needs to be assigned with proper permissions. The rootdn user may be used only in the context of the configuration, but it can also be used in the directory definition. In that case a user can authenticate himself as rootdn with either the configuration used password and the tree (directory-based) password.

<!--T:146-->
User passwords (regardless if it is for rootdn users or others) for verification purposes can be stored as cleartext or hashed. Multiple different hash algorithms are available, but usage of weak algorythms (up to MD5) is not recommended. SHA is currently considered sufficiently cryptographically secure.

<!--T:147-->
In the below command, a hashed value is created for a given password; the result of this command can be used in the {{Path|slapd.conf}} configuration file, or in the internal directory definition of a user:

<!--T:27-->
{{RootCmd|slappasswd|output=<pre>
New password: my-password
Re-enter new password: my-password
{SSHA}EzP6I82DZRnW+ou6lyiXHGxSpSOw2XO4
</pre>
}}

=== Legacy configuration (flat config slapd.conf) ===

<!--T:28-->
Now edit the LDAP Server configuration in {{Path|/etc/openldap/slapd.conf}}. The provided {{Path|slapd.conf}} is from the original OpenLDAP source. Below is a sample configuration file one can use to replace it with to get things started. 

<!--T:29-->
{{FileBox|filename=/etc/openldap/slapd.conf|1=
include	/etc/openldap/schema/core.schema
include /etc/openldap/schema/cosine.schema
include /etc/openldap/schema/inetorgperson.schema
include /etc/openldap/schema/nis.schema
include	/etc/openldap/schema/misc.schema
 
pidfile  /var/run/openldap/slapd.pid
argsfile /var/run/openldap/slapd.args
 
## ## ServerID used in case of replication
serverID 0 
loglevel 0
 
## ## Certificate/SSL Section
TLSCipherSuite normal
TLSCACertificateFile /etc/openldap/ssl/ldap.crt
TLSCertificateFile /etc/openldap/ssl/ldap.pem
TLSCertificateKeyFile /etc/openldap/ssl/ldap.key
TLSVerifyClient never
 
## ## Access Controls
access to dn.base="" by * read
access to dn.base="cn=Subschema" by * read
access to *
  by self write
  by users read
  by anonymous read
 
## ## Database definition
database mdb
suffix "dc=genfic,dc=org"
checkpoint 32 30
maxsize 10485760
#Note: It is important to set this to as large a value as possible,
#(relative to anticipated growth of the actual data over time)
#since growing the size later may not be practical when the system is under heavy load.
 
rootdn "cn=Manager,dc=genfic,dc=org"
## ## rootpwd generated earlier via slappasswd command
rootpw "{SSHA}EzP6I82DZRnW+ou6lyiXHGxSpSOw2XO4" 
directory "/var/lib/openldap-data"
index objectClass eq
 
## ## Synchronisation (pull from other LDAP server)
syncrepl rid=000
  provider=ldap://ldap2.genfic.org
  type=refreshAndPersist
  retry="5 5 300 +"
  searchbase="dc=genfic,dc=org"
  attrs="*,+"
  bindmethod="simple"
  binddn="cn=ldapreader,dc=genfic,dc=org"
  credentials="ldapsyncpass"
 
index entryCSN eq
index entryUUID eq
 
mirrormode TRUE
 
overlay syncprov
syncprov-checkpoint 100 10
}}

<!--T:104-->
For a more detailed analysis of the configuration file, we suggest that you work through the OpenLDAP Administrator's Guide, although {{Path|man 5 slapd.conf}} may be enough. 

<!--T:106-->
If it does not start, the first thing you ''must'' do is to check the config file. You can do it with the following command.

<!--T:107-->
{{Cmd|slaptest -v -d 1 -f /etc/openldap/slapd.conf}}

<!--T:108-->
Vary the debug level (the "-d 1" above) for more info. If all goes well you will see ''config file testing succeeded''.
If there's an error, <code>slaptest</code> will list the line number to which it applies (of the {{Path|slapd.conf}} file).

By default {{c|slapd}} writes the log events to the ''local4'' syslog facility.

<!--T:109-->
{{Warning|Note that since version 2.4.23, OpenLDAP default finally moved from traditional flat config files (<code>slapd.conf</code>) to OLC (OnLineConfiguration, also known through its <code>cn{{=}}config</code> structure) as default configuration method. One of benefits of using OLC is that the dynamic backend (<code>cn{{=}}config</code>) doesn't require restart of server after updating the configuration. Existing users can migrate to the new configuration method by invoking <code>slaptest</code> setting both -f and -F options. Traditionally OLC is stored in ldif back-end (which keep benefits of human-readability) in the <code>/etc/openldap/slapd.d</code> directory. In Gentoo it is not required to convert the configuration yet, but support for the currently documented approach will be removed in the future.}}

=== Migration from slapd.conf to OLC ===

<!--T:133-->
If you want to be able to change OpenLDAP server's configuration, you must define at least write (or normally manage) access to <code>cn=config</code>.

<!--T:150-->
The example below shows how to grant manage access on OLC (''cn=config'' database) to the system administrator (root user) by adding the proper lines at the end of the {{Path|slapd.conf}} file:

<!--T:151-->
{{FileBox|filename=/etc/openldap/slapd.conf|title=Granting root Linux account manage rights to cn{{=}}config|1=
database config
access to *
        by dn.exact="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" manage
        by * none
}}

Then, we invoke the {{c|slaptest}} utility with the <code>-f</code> and <code>-F</code> options to convert the {{Path|slapd.conf}} file into a configuration directory ({{Path|slapd.d}}).

<!--T:134-->
{{RootCmd|mkdir /etc/openldap/slapd.d
|slaptest -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.d
|chown -R ldap /etc/openldap/slapd.d}}

<!--T:135-->
Running this command will transfer and translate the configuration. After that you are expected to update the configuration using specially prepared ldif files. And only if you aren't enough familiar with them, you can first edit {{Path|slapd.conf}} and after that re-translate the {{Path|slapd.conf}} into {{Path|slapd.d/}}. Don't forget to check the directory's permissions.

<!--T:112-->
For more instructions read the in-line comments of the generated files.

<!--T:113-->
The below line will enable the {{Path|slapd.d/}} configuration method. 

<!--T:33-->
{{FileBox|filename=/etc/conf.d/slapd|lang=bash|1=
OPTS="-F /etc/openldap/slapd.d -h 'ldaps:// ldap:// ldapi://%2fvar%2frun%2fopenldap%2fslapd.sock'"
}}

<!--T:34-->
Finally, create the {{Path|/var/lib/openldap-data}} structure: 

<!--T:35-->
{{RootCmd|mkdir -p /var/lib/openldap-data
|chown -R ldap:ldap /var/lib/openldap-data
|chmod -R 0700 /var/lib/openldap-data}}

<!--T:39-->
Start slapd: 

<!--T:40-->
{{RootCmd|/etc/init.d/slapd start}}

=== Initial setup with OLC ===

An initial configuration is shipped as a standard LDAP database dump, available as {{Path|slapd.ldif}} or {{Path|config.ldif}}.

It can be loaded (and ''only'' loaded, unlike ordinary LDAP databases) by the <code>slapadd</code> utility:

{{RootCmd|slapadd -d -1 -F /etc/openldap/slapd.d -n 0 -l /etc/openldap/config.ldif}}

{{Warning|The default configuration does not provide permissions to change the server's configuration to anybody.}}

If you need the right to change the configuration database, you must provide the proper permissions. The next example shows how these privileges are granted to the {{c|root}} system user:

{{FileBox|filename=config-access.ldif|1=
# {0}config, config
dn: olcDatabase={0}config,cn=config
objectClass: olcDatabaseConfig
olcDatabase: {0}config
olcAccess: {0}to *  by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" manage  by * none
olcAddContentAcl: TRUE
olcLastMod: TRUE
olcMaxDerefDepth: 15
olcReadOnly: FALSE
olcRootDN: cn=config
olcSyncUseSubentry: FALSE
olcMonitoring: FALSE
}}

See {{Path|man 5 slapd-config}} for more details.

When using OLC, never manually edit the configuration files. The directory files can be used to check the consistency of the configuration through:

<!--T:149-->
{{RootCmd|slaptest -v -d 1 -F /etc/openldap/slapd.d}}

=== Server management with OLC ===

{{Note|One of the benefits of using OLC-style configuration is that you don't need to restart the LDAP server to apply configuration changes.}}

<!--T:137-->
Some examples of updates on the OLC-style configuration are mentioned below.

<!--T:138-->
For instance, to change the location of the OLC configuration directory (needed after switching from a config file to config directory style):

<!--T:139-->
{{FileBox|filename=fix-configs.ldif|1=
dn: cn=config
changetype: modify
delete: olcConfigFile
dn: cn=config
changetype: modify
replace: olcConfigDir
olcConfigDir: /etc/openldap/slapd.d
}}

<!--T:141-->
To change the log level used by the OpenLDAP instance:

<!--T:142-->
{{FileBox|filename=loglevel.ldif|1=
dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: stats stats2 sync
}}

<!--T:152-->
To add the syncprov overlay:

<!--T:153-->
{{FileBox|filename=add-syncprov-overlay.ldif|1=
# Add indexes for replica to the frontend db.
dn: olcDatabase={1}mdb,cn=config
changetype: modify
add: olcDbIndex
olcDbIndex: entryCSN eq
-
add: olcDbIndex
olcDbIndex: entryUUID eq
 
# Load the syncprov module.
# Skip if included statically, see slapd -VVV output for details
dn: cn=module{0},cn=config
changetype: modify
add: olcModuleLoad
olcModuleLoad: syncprov
 
# syncrepl Provider for primary db
dn: olcOverlay=syncprov,olcDatabase={1}mdb,cn=config
changetype: add
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
olcSpNoPresent: TRUE
olcSpCheckpoint: 100 10
olcSpSessionlog: 100
}}

<!--T:143-->
In order to apply the changes, run the following command:

<!--T:144-->
{{RootCmd|ldapmodify -Y EXTERNAL -H ldapi:/// -f loglevel.ldif|output=<pre>
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry "cn=config"
</pre>
}}

=== OpenLDAP logging ===

OpenLDAP produces numerous log events, which might not be obvious to interpret, but are necessary for debugging purposes.

As OpenLDAP by default writes the log events into the system log, it is advisable to reconfigure the system logger to direct OpenLDAP log events into a dedicated log file.

=== Access management (ACLs) ===

The authorizations and access control mechanism used in OpenLDAP is described in the {{Path|slapd.access}} manual page. Its base syntax is as follows:

{{CodeBox|title=ACL syntax in OpenLDAP|1=
  access to <what> [ by <who> [ <access> ] [ <control> ] ]+}}

The following table shows the access levels available in OpenLDAP:

{| class="table table-striped table-condensed" style="text-align: left;" 
|- 
! Access level
! Privileges
! Description
|- 
| none
| 0
| no access
|- 
| disclose
| d
| needed for information disclosure on error 
|- 
| auth
| dx
| needed to authenticate (bind)
|- 
| compare
| cdx
| needed to compare 
|- 
| search
| scdx
| needed to apply search filters 
|- 
| read
| rscdx
| needed to read search results 
|- 
| {write|add|delete}
| wrscdx
| needed to modify/rename 
|- 
| manage
| mwrscdx
| needed to manage 
|-
|}

For details about the exact privilege settings, see the manual pages and official OpenLDAP documentation.

==== Config file ====

ACLs are parsed in the order they are set in the configuration, and are applied based on the specificity (meaning that, when an ACL rule is considered, the remainder of ACL rules is no longer checked). As such, more specific definitions should go first, before more generic ones are listed. For more information, see [http://www.openldap.org/doc/admin24/access-control.html#Access%20Control%20Evaluation Access Control Evaluation].

For example:

{{FileBox|filename=/etc/openldap/slapd.conf|1=
…
access to attrs=userPassword
         by dn="cn=ldapreader,dc=genfic,dc=org" read
         by self read
         by anonymous auth
         by * none
  
access to dn.base="cn=Subschema" by users read
access to dn.base="" by * read
…
}}

Remember that the ''rootdn'' user can read and write everything.

==== Config directory ====

ACLs are parsed in the order they are set in the configuration, and are applied based on the specificity (meaning that, when an ACL rule is considered, the remainder of ACL rules is no longer checked). As such, more specific definitions should go first, before more generic ones are listed. This order, when using OLC, is handled through the <code>olcAccess</code> directives.

For example:

{{FileBox|filename=add_acl.ldif|1=
dn: olcDatabase={-1}frontend,cn=config
changetype: modify
add: olcAccess
olcAccess: {0}to dn.base="cn=subschema"  by users read
olcAccess: {1}to dn.base="" by * read
}}

To insert a new ACL, the following example will add one on top, making the existing <code>olcAccess</code> entries to shift by one:

{{FileBox|filename=insert_acl.ldif|1=
dn: olcDatabase={-1}frontend,cn=config
changetype: modify
add: olcAccess
olcAccess: {0}to attrs=userPassword  by dn="cn=ldapreader,dc=genfic,dc=org" read by self read by anonymous auth by * noneby * none
}}

To delete an ACL:

{{FileBox|filename=delete_acl.ldif|1=
dn: olcDatabase={-1}frontend,cn=config
changetype: modify
delete: olcAccess
olcAccess: {1}
}}

== Configuring the OpenLDAP Client tools == <!--T:116--> 

<!--T:117-->
Edit the LDAP Client configuration file. This file is read by ldapsearch and other ldap command line tools.

<!--T:118-->
{{FileBox|filename=/etc/openldap/ldap.conf|title=Add the following|1=
BASE         dc=genfic, dc=org
URI          ldap://ldap.genfic.org:389/ ldap://ldap1.genfic.org:389/ ldap://ldap2.genfic.org:389/
TLS_REQCERT  allow
TIMELIMIT    2
}}

<!--T:99-->
You can test the running server with the following command: 

<!--T:100-->
{{Cmd|ldapsearch -x -D "cn{{=}}Manager,dc{{=}}genfic,dc{{=}}org" -W}}

<!--T:101-->
If you receive an error, try adding <code>-d 255</code> to increase the verbosity and solve the issue you have.

== Client Configuration for Centralised Authentication  == <!--T:53-->

<!--T:119-->
There are numerous methods/tools that can be used for remote authentication. Some distributions also have their own easy to use configuration tool. Below there are some in no particular order. It is possible to combine local users and centrally authorized accounts at the same time. This is important because, for instance, if the LDAP server cannot be accessed one can still login as root.

<!--T:120-->
* SSSD  (Single Sign-on Services Daemon). Its primary function is to provide access to identity and authentication remote resource through a common framework that can provide caching and offline support to the system. It provides PAM and NSS modules, and in the future will support D-Bus interfaces for extended user information. It also provides a better database to store local users as well as extended user data.

<!--T:121-->
* Use <code>pam_ldap</code> to login to the LDAP server and authenticate. Passwords are ''not'' sent over the network in clear text.  

<!--T:122-->
* NSLCD (Name Service Look up Daemon). Similar to SSSD, but older.

<!--T:123-->
* NSS (Name Service Switch) using the traditional <code>pam_unix</code> module to fetch password hashes over the network. To permit users to update their password this has to be combined with the <code>pam_ldap</code> method.

<!--T:124-->
The first two are demonstrated below with the minimum necessary configuration options to get working.

=== Client PAM configuration SSSD Method === <!--T:125-->

<!--T:126-->
Here is the more direct method. The three files that are required to be edited are mentioned below. 

<!--T:127-->
{{FileBox|filename=/etc/sssd/sssd.conf|lang=ini|1=
[sssd]
config_file_version = 2
services = nss, pam
domains = genfic
debug_level = 5
  
[nss]
filter_users = root,ldap,named,avahi,haldaemon,dbus,radiusd,news,nscd
  
[domain/genfic]
id_provider = ldap
auth_provider = ldap
ldap_search_base = dc=genfic,dc=org
ldap_tls_reqcert = never
# primary and backup ldap servers below [first server and],[second server]
ldap_uri = ldap://X.X.X.X,ldap://X.X.X.X
}}


<!--T:128-->
Add sss to the end as shown below to enable the lookup to be handed to the sssd system service. Once you have finished editing start the sssd daemon.

<!--T:129-->
{{FileBox|filename=/etc/nsswitch.conf|title=Example nsswitch.conf with SSSD support|1=
passwd:     files sss
shadow:     files sss
group:      files sss
  
netgroup:   files sss
automount:  files sss
sudoers:    files sss
}}

<!--T:130-->
The last file is the most critical. Open an extra root terminal as a fallback before editing this. The lines that end with <code>#</code> have been added to enable remote authentication. Note the use of {{Path|pam_mkhomedir.so}} to support creating the user home directories.

<!--T:131-->
{{FileBox|filename=/etc/pam.d/system-auth|title=Enable pam_sss support|1=
#%PAM-1.0
# This file is auto-generated.
# User changes will be destroyed the next time authconfig is run.
auth        required      pam_env.so
auth        sufficient    pam_unix.so nullok try_first_pass
auth        requisite     pam_succeed_if.so uid >= 500 quiet
auth        sufficient    pam_sss.so use_first_pass                                         #
auth        required      pam_deny.so
  
account     required      pam_unix.so
account     sufficient    pam_localuser.so
account     sufficient    pam_succeed_if.so uid < 500 quiet
account     [default=bad success=ok user_unknown=ignore] pam_sss.so                         #
account     required      pam_permit.so
  
password    requisite     pam_cracklib.so try_first_pass retry=3
password    sufficient    pam_unix.so md5 shadow nullok try_first_pass use_authtok
password    sufficient    pam_sss.so use_authtok                                            #
password    required      pam_deny.so
  
session     required      pam_mkhomedir.so skel=/etc/skel/ umask=0077
session     optional      pam_keyinit.so revoke
session     required      pam_limits.so
session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
session     required      pam_unix.so
session     optional      pam_sss.so                                                        #
}}

<!--T:132-->
Now try logging in from another box.

=== Client PAM configuration the pam_ldap Module Method === <!--T:64-->

<!--T:65-->
First, we will configure PAM to allow LDAP authorization. Install {{Package|sys-auth/pam_ldap}} so that PAM supports LDAP authorization, and {{Package|sys-auth/nss_ldap}} so that your system can cope with LDAP servers for additional information (used by {{Path|nsswitch.conf}}). 

<!--T:66-->
{{Emerge|pam_ldap nss_ldap}}

<!--T:67-->
The last file is the most critical. Open a few extra root terminals as a backup before editing this. The lines that end with <code>#</code> have been added to enable remote authentication.

<!--T:68-->
{{FileBox|filename=/etc/pam.d/system-auth|1=
#%PAM-1.0
 
auth       required     pam_env.so
auth       sufficient   pam_unix.so try_first_pass likeauth nullok
auth       sufficient   pam_ldap.so use_first_pass                                                    #
auth       required     pam_deny.so
 
account    sufficient   pam_ldap.so                                                                   #
account    required     pam_unix.so
 
password   required     pam_cracklib.so difok=2 minlen=8 dcredit=2 ocredit=2 try_first_pass retry=3
password   sufficient   pam_unix.so try_first_pass use_authtok nullok md5 shadow
password   sufficient   pam_ldap.so use_authtok use_first_pass                                        #
password   required     pam_deny.so
 
session    required     pam_limits.so
session    required     pam_unix.so
session    optional     pam_ldap.so                                                                   #
}}

<!--T:69-->
Now change {{Path|/etc/ldap.conf}} to read: 

<!--T:70-->
{{FileBox|filename=/etc/ldap.conf|1=
## #host 127.0.0.1
## #base dc=padl,dc=com
 
base dc=genfic,dc=org
## #rootbinddn uid=root,ou=People,dc=genfic,dc=org
bind_policy soft
bind_timelimit 2
ldap_version 3
nss_base_group ou=Group,dc=genfic,dc=org
nss_base_hosts ou=Hosts,dc=genfic,dc=org
nss_base_passwd ou=People,dc=genfic,dc=org
nss_base_shadow ou=People,dc=genfic,dc=org
pam_filter objectclass=posixAccount
pam_login_attribute uid
pam_member_attribute memberuid
pam_password exop
scope one
timelimit 2
uri ldap://ldap.genfic.org/ ldap://ldap1.genfic.org ldap://ldap2.genfic.org
}}

<!--T:71-->
Next, copy over the (OpenLDAP) {{Path|ldap.conf}} file from the server to the client so the clients are aware of the LDAP environment: 

<!--T:72-->
{{RootCmd|scp ldap-server:/etc/openldap/ldap.conf /etc/openldap}}

<!--T:73-->
Finally, configure your clients so that they check the LDAP for system accounts: 

<!--T:74-->
{{FileBox|filename=/etc/nsswitch.conf|1=
passwd:         files ldap
group:          files ldap
shadow:         files ldap
}}

<!--T:75-->
If you noticed one of the lines you pasted into your {{Path|/etc/ldap.conf}} was commented out (the <code>rootbinddn</code> line): you don't need it unless you want to change a user's password as superuser. In this case you need to echo the root password to {{Path|/etc/ldap.secret}} in plaintext. This is '''DANGEROUS''' and should be chmoded to 600. What you might want to do is keep that file blank and when you need to change someone's password that's both in the LDAP and {{Path|/etc/passwd}}, put the pass in there for 10 seconds while changing the users password and remove it when done.

== Migrate existing data to LDAP == <!--T:54-->

<!--T:55-->
Configuring OpenLDAP for centralized administration and management of common Linux/Unix items isn't easy, but thanks to some tools and scripts available on the Internet, migrating a system from a single-system administrative point-of-view towards an OpenLDAP-based, centralized managed system isn't hard either. 

<!--T:56-->
Go to [http://www.padl.com/OSS/MigrationTools.html http://www.padl.com/OSS/MigrationTools.html] and fetch the scripts there. You'll need the migration tools and the {{Path|make_master.sh}} script. 

<!--T:57-->
Next, extract the tools and copy the {{Path|make_master.sh}} script inside the extracted location: 

<!--T:58-->
{{RootCmd|mktemp -d|output=<pre>
/tmp/tmp.zchomocO3Q
</pre>}}

<!--T:59-->
{{RootCmd|cd /tmp/tmp.zchomocO3Q
|tar xvzf /path/to/MigrationTools.tgz
|mv /path/to/make_master.sh MigrationTools-47
|cd MigrationTools-47</pre>}}

<!--T:60-->
The next step now is to migrate the information of your system to OpenLDAP. The {{Path|make_master.sh}} script will do this for you, after you have provided it with the information regarding your LDAP structure and environment. 

<!--T:61-->
At the time of writing, the tools require the following input: 

<!--T:62-->
{| class="wikitable" style="text-align: left;" 
|- 
! Input
! Description
! Example
|- 
| LDAP BaseDN
| The base location (root) of your tree
| dc=genfic,dc=org
|- 
| Mail domain
| Domain used in e-mail addresses
| genfic.org
|- 
| Mail host
| FQDN of your mail server infrastructure
| smtp.genfic.org
|- 
| LDAP Root DN
| Administrative account information for your LDAP structure
| cn=Manager,dc=genfic,dc=org
|- 
| LDAP Root Password
| Password for the administrative account, cfr earlier <code>slappasswd</code> command
| 
|-
|}

<!--T:63-->
The tool will also ask you which accounts and settings you want to migrate. 

<!--T:97-->
{{Warning| You don't need to make changes to pam.d/system-auth}}

== Replication == <!--T:41-->

=== High availability === <!--T:42-->

<!--T:43-->
To setup replication of changes across multiple LDAP systems. Replication within OpenLDAP is, in this guide, set up using a specific replication account ( <code>ldapreader</code> ) which has read rights on the primary LDAP server and which pulls in changes from the primary LDAP server to the secondary. 

<!--T:44-->
This setup is then mirrored, allowing the secondary LDAP server to act as a primary. Thanks to OpenLDAP's internal structure, changes are not re-applied if they are already in the LDAP structure.

=== Setting Up Replication === <!--T:45-->

<!--T:46-->
To setup replication, first setup a second OpenLDAP server, similarly as above. However take care that, in the configuration file:

<!--T:47-->
* The ''sync replication provider'' is pointing to the ''other'' system

<!--T:48-->
* The ''serverID'' of each OpenLDAP system is different

<!--T:154-->
{{Note|Using a mirrored installation means that the OpenLDAP service should be configured like a single server installation, so the ''serverID'' value on each of the nodes must be the same. Instances are identified by ''rid'' values, which must be unique.}}

<!--T:49-->
Next, create the synchronisation account. We will create an LDIF file (the format used as data input for LDAP servers) and add it to each LDAP server: 

<!--T:50-->
{{Cmd|slappasswd -s myreaderpassword|output=<pre>
 {SSHA}XvbdAv6rdskp9HgFaFL9YhGkJH3HSkiM
</pre>}}

<!--T:51-->
{{Cmd|cat ldapreader.ldif|output=<pre>
dn: cn=ldapreader,dc=genfic,dc=org
userPassword: {SSHA}XvbdAv6rdskp9HgFaFL9YhGkJH3HSkiM
objectClass: organizationalRole
objectClass: simpleSecurityObject
cn: ldapreader
description: LDAP reader used for synchronization
</pre>}}

<!--T:52-->
{{Cmd|ldapadd -x -W -D "cn{{=}}Manager,dc{{=}}genfic,dc{{=}}org" -f ldapreader.ldif|output=<pre>
Password: ## enter the administrative password
</pre>}}

== LDAP Server Security Settings == <!--T:76-->

=== OpenLDAP permissions === <!--T:77-->

<!--T:78-->
If we take a look at {{Path|/etc/openldap/slapd.conf}} you'll see that you can specify the ACLs (permissions if you like) of what data users can read and/or write: 

<!--T:79-->
{{FileBox|filename=/etc/openldap/slapd.conf|1=
access to attrs=userPassword,gecos,description,loginShell
  by self write
  
access to *
  by dn="uid=root,ou=People,dc=genfic,dc=org" write
  by users read
  by anonymous auth
}}

<!--T:80-->
This gives you access to everything a user should be able to change. If it's your information, then you got write access to it; if it's another user their information then you can read it; anonymous people can send a login/pass to get logged in. There are four levels, ranking them from lowest to greatest: <code>auth search read write</code>. 

<!--T:81-->
The next ACL is a bit more secure as it blocks normal users to read other people their shadowed password: 

<!--T:82-->
{{FileBox|filename=/etc/openldap/slapd.conf|1=
access to attrs="userPassword"
  by dn="uid=root,ou=People,dc=genfic,dc=org" write
  by dn="uid=John,ou=People,dc=genfic,dc=org" write
  by anonymous auth
  by self write
  by * none
 
access to *
  by dn="uid=root,ou=People,dc=genfic,dc=org" write
  by dn="uid=John,ou=People,dc=genfic,dc=org" write
  by * search
}}

<!--T:83-->
This example gives root and John access to read/write/search for everything in the the tree below {{Path|dc{{=}}genfic,dc{{=}}org}}. This also lets users change their own <code>userPassword</code>'s. As for the ending statement everyone else just has a search ability meaning they can fill in a search filter, but can't read the search results. Now you can have multiple ACLs but the rule of the thumb is it processes from bottom up, so your toplevel should be the most restrictive one.

== Working with OpenLDAP == <!--T:84-->

=== Maintaining the directory === <!--T:85-->

<!--T:86-->
You can start using the directory to authenticate users in apache/proftpd/qmail/samba. You can manage it with [https://www.ldap-account-manager.org/lamcms/ LAM (Ldap Account Manager)], phpldapadmin, diradm, jxplorer, or lat, which provide easy management interfaces.

== Acknowledgements == <!--T:87-->

<!--T:88-->
We would like to thank Matt Heler for lending us his box for the purpose of this guide. Thanks also go to the cool guys in #ldap @ irc.freenode.net 
</translate>

[[Category:Server and Security]] {{Migrated|originalauthors=Benjamin Coles, swift, Brandon Hale, Benny Chuang, jokey, nightmorph}}
