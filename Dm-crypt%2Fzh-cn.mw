<languages />


{{Metadata|abstract=DM-Crypt是使用Linux内核加密API框架和设备映射（device mapper）子系统的磁盘加密系统。}}

{{InfoBox stack
|{{InfoBox homepage|https://gitlab.com/cryptsetup/cryptsetup|header=true}}
|{{InfoBox wikipedia}}
}}

'''dm-crypt''' 是使用内核加密API框架和设备映射器（device mapper）子系统的磁盘加密系统。使用dm-crypt，管理员可以加密整个磁盘，逻辑卷，分区以及单个文件。

dm-crypt子系统支持''Linux Unified Key Setup (LUKS)''结构，允许多个密钥访问加密数据，以及操作密钥（例如更改密钥，添加额外的密码等）。尽管dm-crypt也支持非LUKS，本文将重点关注LUKS功能，主要是因为它的灵活性，可管理性以及社区中的广泛支持。

== 配置 ==

在开始使用dm-crypt之前有两个先决条件：

# 配置Linux内核
# 安装 {{Package|sys-fs/cryptsetup}} 包

=== 内核配置 ===

要使用dm-crypt，有一些必要的配置条目。

首先，必须包括对''device mapper''基础结构以及'crypt target'' 的支持：

{{KernelBox|title=Enabling device mapper and crypt target|1=
[*] Enable loadable module support
Device Drivers --->
    [*] Multiple devices driver support (RAID and LVM) --->
        <*> Device mapper support
        <*>   Crypt target support
}}

接下来，Linux内核需要支持管理员想要用于加密的一组加密API。这些可以在''Cryptographic API''部分找到：

{{KernelBox|title=Enabling cryptographic API functions|1=
[*] Cryptographic API --->
    <*> XTS support
    <*> SHA224 and SHA256 digest algorithm
    <*> AES cipher algorithms
    <*> AES cipher algorithms (x86_64)
    <*> User-space interface for hash algorithms
    <*> User-space interface for symmetric key cipher algorithms
}}

如果根文件系统也要被加密，则需要创建初始ram文件系统，其中根文件系统在挂载之前被解密。 因此，这也需要initramfs支持：

{{KernelBox|title=Enabling initramfs support|1=
General setup  --->
    [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
}}

如果使用''tcrypt''加密选项（TrueCrypt/tcplay/VeraCrypt兼容模式），则还需要将以下项目添加到内核中。否则，cryptsetup将返回以下错误："''device-mapper: reload ioctl failed: Invalid argument''" 和 "''Kernel doesn't support TCRYPT compatible mapping''"。

{{KernelBox|title=Enabling tcrypt (TrueCrypt/tcplay/VeraCrypt compatibility mode) support|1=
Device Drivers --->
    [*] Block Devices ---> 
        <*> Loopback device support 
File systems ---> 
     <*> FUSE (Filesystem in Userspace) support 
[*] Cryptographic API ---> 
     <*> RIPEMD-160 digest algorithm 
     <*> SHA384 and SHA512 digest algorithms 
     <*> Whirlpool digest algorithms 
     <*> LRW support 
     <*> Serpent cipher algorithm 
     <*> Twofish cipher algorithm 
}}

=== 安装 Cryptsetup ===

{{Package|sys-fs/cryptsetup}}包提供{{c|cryptsetup}}命令，该命令用于打开或关闭加密存储以及管理与之关联的密码或密钥。

{{Emerge|sys-fs/cryptsetup}}

== 加密存储 ==

=== 密钥文件或密码 ===

为了开始加密存储，管理员需要决定使用哪种方法作为加密密钥。{{c|cryptsetup}}支持使用密码或密钥文件。对于密钥文件，这可以是任何文件，但建议使用具有适当保护的随机数据的文件（考虑到访问此密钥文件将意味着访问加密数据）。

要创建密钥文件，可以使用{{c|dd}}命令：

{{RootCmd|dd if{{=}}/dev/urandom of{{=}}/etc/keys/enc.key bs{{=}}1 count{{=}}4096}}

在接下来的部分中，我们将显示两种情况的每个命令 - 密码和密钥文件。当然，只需要其中一种方法。

=== 创建加密存储平台 ===

要创建加密存储平台（可以是磁盘，分区，文件......），请使用{{c|cryptsetup}}命令和<code>luksFormat</code>操作。

例如，要将 {{Path|/dev/vdb2}}作为加密数据的存储介质：

{{RootCmd|cryptsetup -s 512 luksFormat /dev/vdb2|output=<pre>
This will overwrite data on /dev/vdb2 irrevocably.
  
Are you sure? (Type uppercase yes): YES
Enter LUKS passphrase: ...
Verify passphrase: ...
</pre>}}

要使用密钥文件而不是密码：

{{RootCmd|cryptsetup -s 512 luksFormat /dev/vdb2 /etc/keys/enc.key|output=<pre>
This will overwrite data on /dev/vdb2 irrevocably.
  
Are you sure? (Type uppercase yes): YES
</pre>}}

<code>-s 512</code>告诉{{c|cryptsetup}}用于真实加密密钥的密钥长度（与密码或密钥文件不同，这是用于真实加密密钥的）。

=== 打开加密存储 ===

为了打开加密存储（即通过透明解密使真实数据可访问），请使用<code>luksOpen</code>操作。

{{RootCmd|cryptsetup luksOpen /dev/vdb2 myname|output=<pre>
Enter passphrase for /dev/vdb2: ...
</pre>}}

如果使用了密钥文件，那么命令将如下所示：

{{RootCmd|cryptsetup luksOpen -d /etc/keys/enc.key /dev/vdb2 myname}}

命令成功完成后，名为{{Path|/dev/mapper/myname}}的新设备文件将可用。 

如果这是第一次使用此加密设备，则需要对其进行格式化。以下示例使用[[Btrfs]]文件系统，但当然任何其他文件系统都可以：

{{RootCmd|mkfs.btrfs /dev/mapper/myname}}

格式化文件系统或过去已完成格式化后，可以在系统上挂载这个设备文件：

{{RootCmd|mount /dev/mapper/myname /home}}

=== 关闭加密存储 ===

为了关闭加密存储（即确保不再通过透明解密访问实际数据），请使用<code>luksClose</code>操作：

{{RootCmd|cryptsetup luksClose myname}}

当然，请确保设备不再使用。

== 操作 LUKS 密钥 ==

LUKS密钥用于访问真正的加密密钥。它们存储在（加密）分区，磁盘或文件的标头中的插槽中。

=== 列出插槽 ===

使用<code>luksDump</code>操作，可以显示有关加密分区，磁盘或文件的信息。这包括插槽：

{{RootCmd|cryptsetup luksDump /dev/vdb2|output=<pre>
LUKS header information for /dev/vdb2
  
Version:        1
Cipher name:    aes
Cipher mode:    xts-plain64
Hash spec:      sha1
Payload offset: 4096
MK bits:        512
MK digest:      34 3b ec ac 10 af 19 e7 e2 d4 c8 90 eb a8 da 3c e4 4f 2e ce
MK salt:        ff 7c 7f 53 db 53 48 02 a4 32 dc e0 22 fc a3 51
                06 ba b3 48 b3 28 13 a8 7a 68 43 d6 46 79 14 fe
MK iterations:  59375
UUID:           2921a7c9-7ccb-4300-92f4-38160804e08c
  
Key Slot 0: ENABLED
        Iterations:             241053
        Salt:                   90 0f 0f db cf 66 ea a9 6c 7c 0c 0d b0 28 05 2f
                                8a 5c 14 54 98 62 1a 29 f3 08 25 0c ec c2 b1 68
        Key material offset:    8
        AF stripes:             4000
Key Slot 1: ENABLED
        Iterations:             273211
        Salt:                   01 4c 26 ed ff 18 75 31 b9 89 5d a6 e0 b5 f4 14
                                48 d0 23 47 a9 85 78 fb 76 c4 a9 d0 cd 63 fb d7
        Key material offset:    512
        AF stripes:             4000
Key Slot 2: DISABLED
Key Slot 3: DISABLED
Key Slot 4: DISABLED
Key Slot 5: DISABLED
Key Slot 6: DISABLED
Key Slot 7: DISABLED
</pre>}}

在上面的例子中，使用了两个插槽。请注意，<code>luksDump</code>不会泄露任何敏感内容 - 它只是显示LUKS标头内容。不需要提供解密密钥来调用<code>luksDump</code>。

=== 添加一个密钥文件或密码 ===

要添加其他密钥文件或密码来访问加密存储，请使用<code>luksAddKey</code>操作：

{{RootCmd|cryptsetup luksAddKey /dev/vdb2|output=<pre>
Enter any passphrase: (Enter a valid, previously used passphrase to unlock the key)
Enter new passphrase for key slot: ... 
Verify passphrase: ...
</pre>}}

要使用密钥文件解锁密钥（但仍然需要密码）：

{{RootCmd|cryptsetup luksAddKey -d /etc/keys/enc.key /dev/vdb2|output=<pre>
Enter new passphrase for key slot: ...
Verify passphrase: '''
</pre>}}

如果要添加密钥文件（例如{{Path|/etc/keys/backup.key}}）：

{{RootCmd|cryptsetup luksAddKey /dev/vdb2 /etc/keys/backup.key}}

或者，使用第一个密钥文件解锁主密钥：

{{RootCmd|cryptsetup luksAddKey -d /etc/keys/enc.key /dev/vdb2 /etc/keys/backup.key}}

=== 删除一个密钥文件或密码 ===

使用<code>luksRemoveKey</code>操作，可以删除密钥文件或密码（因此它们不能再用于解密存储）：

{{RootCmd|cryptsetup luksRemoveKey /dev/vdb2|output=<pre>
Enter LUKS passphrase to be deleted: ...
</pre>}}

或者删除密钥文件：

{{RootCmd|cryptsetup luksRemoveKey -d /etc/keys/backup.key /dev/vdb2}}

确保至少有一种访问数据的方法仍然可用。一旦使用的密码或密钥文件被删除，就无法再次恢复。

=== 清空一个插槽 ===

Suppose the passphrase or keyfile is no longer known, then the slot can be freed. Of course, this does require prior knowledge of which slot that the passphrase or keyfile was stored in.
假设密码或密钥文件已遗失，则可以释放插槽。当然，这需要事先知道密码或密钥文件存储在哪个插槽中。

例如，要清空插槽2（这是第3个插槽，因为插槽从0开始编号）：

{{RootCmd|cryptsetup luksKillSlot /dev/vdb2 2}}

This command will ask for a valid passphrase before continuing. Or one can pass on the keyfile to use:

{{RootCmd|cryptsetup luksKillSlot -d /etc/keys/enc.key /dev/vdb2 2}}

== 自动挂载加密文件系统 ==

到目前为止，本文主要关注加密文件系统的手动设置和挂载/卸载。存在一个init服务{{Path|dmcrypt}}，它自动解密和挂载加密文件系统。

=== 配置 dm-crypt ===

Edit the {{Path|/etc/conf.d/dmcrypt}} file and add in entries for each file system. The supported entries are well documented in the file, the below example is just that - an example:

{{FileBox|filename=/etc/conf.d/dmcrypt|title=Automatically enabling two encrypted file systems|1=
# Definition for /dev/mapper/home (for /home)
target=home
source=UUID="abcdef12-321a-a324-a88c-cac412befd98"
key=/etc/keys/home.key
 
# Definition for /dev/mapper/local (for /usr/local)
target=local
source=UUID="fedcba34-4823-b423-a94c-cadbefda2943"
key=/etc/keys/local.key
}}

=== Configuring fstab ===

The next step is to configure {{Path|/etc/fstab}} to automatically mount the (decrypted) file systems when they become available. It is recommended to first obtain the UUID of the decrypted (mounted) file system:

{{RootCmd|blkid /dev/mapper/home|output=<pre>
/dev/mapper/home: UUID="4321421a-4321-a6c9-de52-ba6421efab76" TYPE="ext4"
</pre>}}

Then, update the {{Path|/etc/fstab}} file accordingly:

{{FileBox|filename=/etc/fstab|title=Automounting the decrypted file systems|1=
UUID="4321421a-4321-a6c9-de52-ba6421efab76"   /home        ext4   defaults   0   0
UUID="bdef2432-3bd1-4ab4-523d-badcf234a342"   /usr/local   ext4   defaults   0   0
}}

=== Add initscript to bootlevel ===

Don't forget to have the {{Path|dmcrypt}} init service launched at boot:

{{RootCmd|rc-update add dmcrypt boot}}


== Mounting TrueCrypt/tcplay/VeraCrypt volumes ==

{{RootCmd|cryptsetup --type tcrypt open ''container-to-mount'' ''container-name''}}

Replace ''container-to-mount'' with the device file under {{Path|/dev}} or the path to the file you wish to open. Upon successful opening, the plaintext device will appear as {{Path|/dev/mapper/container-name}}, which you can <code>mount</code> like any normal device.

If you are using key files, supply them using the <code>--key-file</code> option, to open a hidden volume, supply the <code>--tcrypt-hidden</code> option and for a partition or whole drive that is encrypted in system mode use the <code>--tcrypt-system</code> option.

When done, <code>unmount</code> the volume, and close the container using the following command:

{{RootCmd|cryptsetup close ''container-name''}}

== Additional resources ==

* [[Dm-crypt full disk encryption]] on the Gentoo Wiki provides supplementary information on using encrypted file systems for Gentoo Linux installations
* The [https://gitlab.com/cryptsetup/cryptsetup/wikis/FrequentlyAskedQuestions cryptsetup FAQ] hosted on GitLab covers a wide range of frequently asked questions.


[[Category:Core system]]
