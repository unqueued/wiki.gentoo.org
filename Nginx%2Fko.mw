<languages />

{{Metadata|abstract=nginx는 견고하고 작은 고성능 웹서버이며 역방향 프록시 서버입니다. Apache 또는 lighttpd와 같은 현존하는 유명 웹서버 대신 사용하기에 좋습니다.}}

{{InfoBox stack
|{{InfoBox homepage|http://nginx.org/en/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox odoc|http://nginx.org/en/docs/}}
}}

'''nginx'''는 견고하고 작은 고성능 [[:Category:Web Servers|웹 서버]]이며 역방향 프록시 서버입니다. [[Apache/ko|아파치]] 또는 [[lighttpd]]와 같은 현존하는 유명 웹서버 대신 사용하기에 좋습니다.

== 설치 ==

{{Package|www-servers/nginx}} 꾸러미를 바로 설치하기 전에, 먼저 nginx에 대한 USE 플래그를 살펴보는 것이 좋습니다.

=== 확장 USE 플래그 ===

Nginx uses modules to enhance its features. To simplify the maintenance of this modular approach, the nginx ebuild uses expanded USE (<var>[[USE_EXPAND]]</var>) flags to denote which modules should be installed.

* HTTP 관련 모듈은 <var>NGINX_MODULES_HTTP</var> 변수로 활성화할 수 있습니다.
* 전자메일 관련 모듈은 <var>NGINX_MODULES_MAIL</var> 변수로 활성화할 수 있습니다.
* 서드파티 모듈은 <var>NGINX_ADD_MODULES</var> 변수로 활성화할 수 있습니다.

These variables need to be set in {{Path|/etc/portage/make.conf}}. Their descriptions can be found in {{Path|[https://gitweb.gentoo.org/repo/gentoo.git/plain/profiles/desc/nginx_modules_http.desc /usr/portage/profiles/desc/nginx_modules_http.desc]}} and {{Path|[https://gitweb.gentoo.org/repo/gentoo.git/plain/profiles/desc/nginx_modules_mail.desc /usr/portage/profiles/desc/nginx_modules_mail.desc]}}.

예를 들어 <code>fastcgi</code> 모듈을 활성화하려면:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
NGINX_MODULES_HTTP="fastcgi"
}}

The above will overwrite the default value of <var>NGINX_MODULES_HTTP</var> and set it to <code>fastcgi</code>. To enable the <code>fastcgi</code> module without overwriting the default <var>NGINX_MODULES_HTTP</var> value, the following USE flag notation can be specified in {{Path|[[:/etc/portage/package.use]]}}:

{{FileBox|filename=/etc/portage/package.use|lang=bash|1=
www-servers/nginx NGINX_MODULES_HTTP: fastcgi
}}

=== USE 플래그 ===

{{USEflag|package=www-servers/nginx}}

=== Emerge ===

USE 플래그를 설정한 후 {{Package|www-servers/nginx}}를 설치하십시오:

{{Emerge|www-servers/nginx}}

=== 설치 검증 ===

The default nginx configuration defines a virtual server with the root directory set to {{Path|/var/www/localhost/htdocs}}. However due to {{Bug|449136}}, the nginx ebuild will only create the {{Path|/var/www/localhost}} directory and without an index file. To have a working default configuration, create the {{Path|/var/www/localhost/htdocs}} directory and and simple index file:

{{RootCmd
|mkdir /var/www/localhost/htdocs
|echo 'Hello, world!' > /var/www/localhost/htdocs/index.html
}}

nginx 꾸러미는 관리자가 서비스를 멈추고 시작하고 다시 시작하도록 하는 초기화 서비스 스크립트를 설치합니다. 다음 명령을 실행하여 nginx 서비스를 시작하십시오:

{{RootCmd|/etc/init.d/nginx start}}

nginx가 동작중인지 확인하려면 웹 브라우저 또는 {{c|curl}} 같은 다음 명령행 웹 도구에게 [http://localhost http://localhost] 주소를 제시하십시오:

{{Cmd|curl http://localhost}}

== 설정 ==

nginx 설정은 {{Path|/etc/nginx/nginx.conf}} 파일에서 다룹니다.

=== 단일 사이트 접근 ===

다음 예제는 ([[PHP]] 같은) 동적 기능을 뺀 단일 사이트 접근을 보여줍니다.

{{FileBox|filename=/etc/nginx/nginx.conf|title=젠투 기본 설정|1=
user nginx nginx;
worker_processes 1;
  
error_log /var/log/nginx/error_log info;
  
events {
        worker_connections 1024;
        use epoll;
}
  
http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
  
        log_format main
                '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $bytes_sent '
                '"$http_referer" "$http_user_agent" '
                '"$gzip_ratio"';
  
        client_header_timeout 10m;
        client_body_timeout 10m;
        send_timeout 10m;
  
        connection_pool_size 256;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 2k;
        request_pool_size 4k;
  
        gzip on;
        gzip_min_length 1100;
        gzip_buffers 4 8k;
        gzip_types text/plain;
  
        output_buffers 1 32k;
        postpone_output 1460;
  
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
  
        keepalive_timeout 75 20;
  
        ignore_invalid_headers on;
  
        index index.html;
  
        server {
                listen 127.0.0.1;
                server_name localhost;
  
                access_log /var/log/nginx/localhost.access_log main;
                error_log /var/log/nginx/localhost.error_log info;
  
                root /var/www/localhost/htdocs;
        }
}
}}

=== 다중 사이트 접근 ===

설정을 여러 파일로 쪼개기 위해 <code>include</code> 지시어를 활용할 수 있습니다.

{{FileBox|filename=/etc/nginx/nginx.conf|title=다중 사이트 설정|1=
user nginx nginx;
worker_processes 1;
   
error_log /var/log/nginx/error_log info;
  
events {
        worker_connections 1024;
        use epoll;
}
http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
  
        log_format main
                '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $bytes_sent '
                '"$http_referer" "$http_user_agent" '
                '"$gzip_ratio"';
  
        client_header_timeout 10m;
        client_body_timeout 10m;
        send_timeout 10m;
  
        connection_pool_size 256;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 2k;
        request_pool_size 4k;
  
        gzip on;
        gzip_min_length 1100;
        gzip_buffers 4 8k;
        gzip_types text/plain;
  
        output_buffers 1 32k;
        postpone_output 1460;
  
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
  
        keepalive_timeout 75 20;
  
        ignore_invalid_headers on;
  
        index index.html;
 
        include /etc/nginx/conf.d/*.conf;
}
}}

{{FileBox|filename=/etc/nginx/conf.d/local.conf|title=단순 호스트|1=
server {
        listen 127.0.0.1;
        server_name localhost;
  
        access_log /var/log/nginx/localhost.access_log main;
        error_log /var/log/nginx/localhost.error_log info;
  
        root /var/www/localhost/htdocs;
}
}}

{{FileBox|filename=/etc/nginx/conf.d/local-ssl.conf|title=단순 SSL 호스트|1=
server {
    listen 443 ssl;
    server_name host.tld;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_dhparam /etc/ssl/nginx/host.tld.dh4096.pem;
    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;
}
}}

=== PHP 지원 ===

다음 줄을 추가하여 nginx 설정에서 PHP 지원을 활성화하도록 하십시오. 이 예제에서 nginx는 유닉스 소켓을 통해 PHP 프로세스와 정보를 교환합니다.

{{FileBox|filename=/etc/nginx/nginx.conf|title=PHP 지원 활성화|1=
...
http {
...
    server { 
    ...
            location ~ \.php$ {
                       # Test for non-existent scripts or throw a 404 error
                       # Without this line, nginx will blindly send any request ending in .php to php-fpm
                       try_files $uri =404;
                       include /etc/nginx/fastcgi.conf;
                       fastcgi_pass unix:/run/php-fpm.socket;
           }
    }
}
}}

이 설정 과정을 지원하려면, PHP에서 FastCGI 프로세스 관리자 지원({{Package|dev-lang/php}})과 빌드해야 하며, 이 지원 사항은 <code>fpm</code> USE 플래그를 통해 처리할 수 있습니다:

{{RootCmd|echo "dev-lang/php fpm" >> /etc/portage/package.use}}

<code>fpm</code> USE 플래그를 활성화 한 상태에서 php를 다시 빌드하십시오.

{{Emerge|dev-lang/php}}
 
{{Note/ko|유닉스 소켓 통신을 사용하는 것이 적당하며 권장하는 설정 방식입니다}}

{{Path|/etc/php/fpm-php5.5/php-fpm.conf}} 설정을 검토하고 다음 줄을 추가하십시오:

{{FileBox|filename=/etc/php/fpm-php5.5/php-fpm.conf|title=유닉스 소켓 지원 PHP 실행|lang=ini|1=
listen = /run/php-fpm.socket
listen.owner = nginx
}}

php-fpm {{Path|php.ini}} 파일에서 시간대를 설정하십시오. 하단의 파일 상자에서<code><PUT_TIMEZONE_HERE></code>  부분을 적합한 시간대 정보로 바꾸십시오:

{{FileBox|filename=/etc/php/fpm-php5.5/php.ini|title=php.ini에서 시간대 설정|lang=ini|1=
date.timezone = <PUT_TIMEZONE_HERE>
}}

{{c|php-fpm}} 데몬을 시작하십시오:

{{RootCmd|/etc/init.d/php-fpm start}}

기본 런레벨에 {{c|php-fpm}}을 추가하십시오:

{{RootCmd|rc-update add php-fpm default}}

바뀐 설정 내용으로 {{c|nginx}}를 다시 불러오십시오:

{{RootCmd|/etc/init.d/nginx reload}}

=== IP 주소 접근 목록 ===

다음 예제에서는 각각의 URL(이 경우 {{Path|/nginx_status}})에서 다음에 대해서만 접근을 허용하는 방법을 보여줍니다

* 각각의 호스트 (예: ''192.0.2.1 127.0.0.1'')
* IP 네트워크 (예: ''198.51.100.0/24'')

{{FileBox|filename=/etc/nginx/nginx.conf|title=/nginx_status 페이지의 IP 접근 목록 활성화 및 설정|1=
http {
    server { 
            location /nginx_status {
                     stub_status on;
                     allow 127.0.0.1/32;
                     allow 192.0.2.1/32;
                     allow 198.51.100.0/24;
                     deny all;
             }
     }
}
}}

=== 기본 인증 ===

nginx에서는 사용자 이름과 암호를 검증하는 방식으로 자원 접근을 제한할 수 있습니다:

{{FileBox|filename=/etc/nginx/nginx.conf|title=/  위치에 대한 사용자 인증 활성화 및 설정|1=
http {
    server { 
            location / {
                   auth_basic           "Authentication failed";
                   auth_basic_user_file conf/htpasswd;
             }
     }
}
}}
 
The {{Path|htpasswd}} file can be generated using:

{{Cmd|openssl passwd}}

=== TLS 지원 ===

TLS ''만'' 분명하게 제안하며 보안성이 떨어진 것으로 알려진 암호화 수단은 비활성화하십시오.

{{FileBox|filename=/etc/nginx/nginx.conf|title=SSL 활성화|1=
server {
    listen 443;
    server_name host.tld;
    ssl on;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_dhparam /etc/ssl/nginx/host.tld.dh4096.pem;
}
}}

이빌드에서는  {{Path|/etc/ssl/nginx/}}를 통해 보급형 자체 서명 인증서를 제공합니다

==== 기밀 전달 ====

diffie-hellman 인증서는 {{c|openssl}}로 만들 수 있습니다:

{{Cmd|openssl dhparam -out dh4096.pem 4096}}

=== 서드파티 모듈 ===

서드 파티 모듈 소스를 다운로드하고 {{Path|/usr/src}}로 옮겨놓으십시오. 선택한 nginx 모듈을 직접 컴파일한 후, {{Path|/etc/portage/make.conf}}에 모듈 이름을 추가하십시오:

{{FileBox|filename=/etc/portage/make.conf|title=서드파티 모듈 추가|1=
NGINX_ADD_MODULES="/usr/src/nginxmodule"}}

서드파티 모듈을 활성화하려면 nginx를 다시 빌드하십시오:

{{Emerge|www-servers/nginx}}

== 사용법 ==

=== 서비스 관리 ===

==== OpenRC ====

nginx를 시작하십시오:

{{RootCmd|/etc/init.d/nginx start}}

nginx를 멈추십시오:

{{RootCmd|/etc/init.d/nginx stop}}

nginx를 기본 런레벨에 추가하십시오:

{{RootCmd|rc-update add nginx default}}

nginx를 다시 시작하십시오: 

{{RootCmd|/etc/init.d/nginx restart}}

== 문제 해결 ==

이 문제의 경우 다음 명령이 상태 문제를 해결하는데 도움을 줍니다.

=== 설정 확인 ===

nginx 설정에 오류가 없는지 확인하십시오:

{{RootCmd|/usr/sbin/nginx -t|output=<pre>
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
</pre>}}

{{c|nginx}}에 <code>-t</code> 옵션을 추가하여 실행하면, {{c|nginx}} 데몬을 실제로 시작하지 않고도 설정 파일을 확인합니다.

=== 프로세스 실행 확인 ===

{{c | nginx}} 프로세스가 실행 중인지 확인하십시오:

{{Cmd|ps aux {{!}} egrep 'nginx{{!}}PID'|output=<pre>
  PID TTY      STAT   TIME COMMAND
26092 ?        Ss     0:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
26093 ?        S      0:00 nginx: worker proces
</pre>}}

=== 범위 주소 및 포트 확인 ===

nginx 데몬이 올바른 TCP 포트에 대한 응답을 기다리는지 확인하십시오(HTTP에 대해서는 80, HTTPS에 대해서는 443):

{{RootCmd|netstat -tulpen {{!}} grep :80|output=<pre>
tcp        0      0 127.0.0.1:80            0.0.0.0:*               LISTEN      0          12336835   -26092/nginx: master
</pre>}}

== 추가 참조 ==

* [[Apache/ko|Apache]] - 인터넷에서 사용하는 가장 인기있는 HTTP 서버.
* [[Lighttpd]] - 빠르고 가벼운 웹 서버

== 외부 자료 ==

* http://nginx.org/en/docs/beginners_guide.html - {{c|nginx}} 초보자 안내서. {{c | nginx}}에 대해 잘 알지 못하는 이들에게 도움을 줍니다.
* http://nginx.com/resources/admin-guide/ - {{c|ngnix}} 관리자 안내서. 현업에서 일하는 웹 관리자에게 도움을 줍니다.
* http://wiki.nginx.org/Main - nginx 위키.
* https://github.com/h5bp/server-configs-nginx - H5BP nginx 설정.

[[Category:Web Servers]]
