<languages />

{{Metadata|abstract=nginx는 견고하고 작은 고성능 웹서버이며 역방향 프록시 서버입니다.}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://nginx.org/en/|header=true}}
|{{InfoBox wikipedia}}
}}

'''nginx'''는 견고하고 작은 고성능 [[:Category:Web Servers|웹 서버]]이며 역방향 프록시 서버입니다. [[Apache/ko|아파치]] 또는 [[lighttpd]]와 같은 현존하는 유명 웹서버 대신 사용하기에 좋습니다.

== 설치 ==

{{Package|www-servers/nginx}} 꾸러미를 바로 설치하기 전에, 먼저 nginx에 대한 USE 플래그를 살펴보는 것이 좋습니다.

nginx는 기능을 더 키워나가기 위해 모듈을 사용합니다. 모듈 방식의 접근으로 관리를 단순화 하여, nginx에서는 어떤 모듈을 설치해야 할지 표기하기 위해 확장 USE 플래그를 사용합니다. HTTP 관련 모듈은 <code>${NGINX_MODULES_HTTP}</code>  변수로 활성화 할 수 있으며, 메일 관련 모듈은 <code>${NGINX_MODULES_MAIL}</code> 변수로 활성화 할 수 있습니다.

이 변수는  {{Path|/etc/portage/make.conf}}에 설정해야 합니다. 설명은 [http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/profiles/desc/nginx_modules_http.desc /usr/portage/profiles/desc/nginx_modules_http.desc]와 [http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/profiles/desc/nginx_modules_mail.desc /usr/portage/profiles/desc/nginx_modules_mail.desc]에 있습니다.

다른 USE 플래그는 다음과 같습니다:

{{USEflag|package=www-servers/nginx
|aio
|debug
|http+yes
|http-cache+yes
|ipv6+yes
|libatomic 
|pcre
|pcre-jit
|syslog 
|vim-syntax
|ssl+yes
}}

USE 플래그를 설정한 후 {{Package|www-servers/nginx}}를 설치하십시오:

{{Emerge|nginx}}

nginx를 기본 런레벨에 추가하는걸 잊지 마십시오:

{{RootCmd|rc-update add nginx default}}

== 운영 ==

nginx 꾸러미는 관리자가 서비스를 멈추고 시작하거나 다시 시작하도록 하는 서비스 스크립트를 설치합니다:

{{RootCmd|/etc/init.d/nginx start}}

nginx가 올바로 동작하는지 확인하려면 브라우저로 nginx를 가리키거나 (<code>curl</code> 같은) 명령행 웹 클라이언트를 활용하십시오:

{{Cmd|curl http://localhost}}

== 설정 ==

nginx 설정은 {{Path|/etc/nginx/nginx.conf}} 파일에서 다룹니다.

=== 단일 사이트 접근 ===

The following example shows a single-site access, without dynamic capabilities (such as [[PHP]]).

{{File|/etc/nginx/nginx.conf|Gentoo's default configuration|<pre>
user nginx nginx;
worker_processes 1;
  
error_log /var/log/nginx/error_log info;
  
events {
        worker_connections 1024;
        use epoll;
}
  
http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
  
        log_format main
                '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $bytes_sent '
                '"$http_referer" "$http_user_agent" '
                '"$gzip_ratio"';
  
        client_header_timeout 10m;
        client_body_timeout 10m;
        send_timeout 10m;
  
        connection_pool_size 256;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 2k;
        request_pool_size 4k;
  
        gzip on;
        gzip_min_length 1100;
        gzip_buffers 4 8k;
        gzip_types text/plain;
  
        output_buffers 1 32k;
        postpone_output 1460;
  
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
  
        keepalive_timeout 75 20;
  
        ignore_invalid_headers on;
  
        index index.html;
  
        server {
                listen 127.0.0.1;
                server_name localhost;
  
                access_log /var/log/nginx/localhost.access_log main;
                error_log /var/log/nginx/localhost.error_log info;
  
                root /var/www/localhost/htdocs;
        }
}
</pre>}}

=== PHP 지원 활성화 ===

다음 줄을 추가하여 nginx 설정에서 PHP 지원을 활성화하도록 하십시오. 이 예제에서 nginx는 유닉스 소켓을 통해 PHP 프로세스와 정보를 교환합니다.

{{File|/etc/nginx/nginx.conf|Enabling PHP support|<pre>
...
http {
...
    server { 
    ...
            location ~ \.php$ {
                       include /etc/nginx/fastcgi.conf;
                       fastcgi_pass unix:/run/php-fpm.socket;
           }
    }
}
</pre>}}

To support this setup, PHP needs to be build with FastCGI Process Manager support (php-fpm), which is handled through the <code>fpm</code> USE flag:

{{RootCmd|echo "dev-lang/php fpm" >> /etc/portage/package.use}}

새 USE 플래그를 활성화 한 상태에서 php를 다시 빌드하십시오.

{{Emerge|dev-lang/php}}
 
{{Note/ko|유닉스 소켓 통신을 사용하는 것이 적당하며 권장하는 설정 방식입니다}}

Review the {{Path|/etc/php/fpm-php5.4/php-fpm.conf}} configuration and add following line:

{{File|/etc/php/fpm-php5.4/php-fpm.conf|Running PHP with UNIX socket support|<pre>
listen = /run/php-fpm.socket
</pre>}}

Start the php-fpm daemon:

{{RootCmd|/etc/init.d/php-fpm start}}

기본 런레벨에 php-fpm을 추가하십시오

{{RootCmd|rc-update add php-fpm default}}

바뀐 설정 내용으로 nginx를 다시 불러오십시오:

{{RootCmd|/etc/init.d/nginx reload}}

=== IP 접근 목록 활성화 ===

다음 예제에서는 각각의 URL(이 경우 ''/nginx_status'')에서 다음에 대해서만 접근을 허용하는 방법을 보여줍니다
* 각각의 호스트(예: ''192.0.2.1 127.0.0.1'')
* IP 네트워크(예: ''198.51.100.0/24'')

{{File|/etc/nginx/nginx.conf|Enabling and configuring an IP access lists for /nginx_status page|<pre>
http {
    server { 
            location /nginx_status {
                     stub_status on;
                     allow 127.0.0.1/32;
                     allow 192.0.2.1/32;
                     allow 198.51.100.0/24;
                     deny all;
             }
     }
}
</pre>}}

== 문제 해결 ==

이 문제의 경우 다음 명령이 상태 문제를 해결하는데 도움을 줍니다.

=== 설정 확인 ===

nginx 설정에 오류가 없는지 확인하십시오. 

{{RootCmd|/usr/sbin/nginx -t|output=<pre>
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
</pre>}}

<code>nginx</code>에 <code>-t</code> 옵션을 추가하면, nginx 데몬을 실제로 시작하지 않고도 설정 파일을 확인합니다.

=== 프로세스 실행 확인 ===

프로세스가 실행하는지 확인하십시오:

{{Cmd|ps aux {{!}} egrep 'nginx{{!}}PID'|output=<pre>
  PID TTY      STAT   TIME COMMAND
26092 ?        Ss     0:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
26093 ?        S      0:00 nginx: worker proces
</pre>}}

=== 범위 주소 및 포트 확인 ===

Verify nginx daemon is listening on the right TCP port (such as 80 for HTTP or 443 for HTTPS):

{{RootCmd|netstat -tulpen {{!}} grep :80|output=<pre>
tcp        0      0 127.0.0.1:80            0.0.0.0:*               LISTEN      0          12336835   -26092/nginx: master
</pre>}}

== 외부 자료 ==
* [http://wiki.nginx.org/Main nginx Wiki]

[[Category:Web Servers]]
