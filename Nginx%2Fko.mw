<languages />

{{Metadata|abstract=nginx is a robust, small, high performance web server and reverse proxy server. It is a good alternative to popular web servers like Apache and lighttpd.}}

{{InfoBox stack
|{{InfoBox homepage|http://nginx.org/en/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox odoc|http://nginx.org/en/docs/}}
}}

'''nginx'''는 견고하고 작은 고성능 [[:Category:Web Servers|웹 서버]]이며 역방향 프록시 서버입니다. [[Apache/ko|아파치]] 또는 [[lighttpd]]와 같은 현존하는 유명 웹서버 대신 사용하기에 좋습니다.

== 설치 ==

{{Package|www-servers/nginx}} 꾸러미를 바로 설치하기 전에, 먼저 nginx에 대한 USE 플래그를 살펴보는 것이 좋습니다.

=== 확장 USE 플래그 ===

Nginx uses modules to enhance its features. To simplify the maintenance of this modular approach, the nginx ebuild uses expanded USE (<code>[[USE_EXPAND]]</code>) flags to denote which modules should be installed.

* HTTP related modules can be enabled through the <var>NGINX_MODULES_HTTP</var> variable
* Mail related modules can be enabled through the <var>NGINX_MODULES_MAIL</var> variable
* Third party modules can be enabled through the <var>NGINX_ADD_MODULES</var> variable

These variables need to be set in {{Path|/etc/portage/make.conf}}. Their descriptions can be found in {{Path|[http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/profiles/desc/nginx_modules_http.desc /usr/portage/profiles/desc/nginx_modules_http.desc]}} and {{Path|[http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/profiles/desc/nginx_modules_mail.desc /usr/portage/profiles/desc/nginx_modules_mail.desc]}}.

For example, to enable the <code>fastcgi</code> module:

{{FileBox|filename=/etc/portage/make.conf|title=Nginx 확장 USE 플래그 예제|lang=bash|1=
NGINX_ADD_HTTP="fastcgi"
}}

=== USE 플래그 ===

{{USEflag|package=www-servers/nginx}}

=== Emerge ===

USE 플래그를 설정한 후 {{Package|www-servers/nginx}}를 설치하십시오:

{{Emerge|www-servers/nginx}}

=== 설치 검증 ===

The nginx package installs a init service script allowing administrators to stop, start, or restart the service. Run the next command to start the nginx service:

{{RootCmd|/etc/init.d/nginx start}}

To verify that nginx is properly running, point a web browser to the [http://localhost http://localhost] address or use a command-line web tool like {{c|curl}}:

{{Cmd|curl http://localhost}}

== 설정 ==

nginx 설정은 {{Path|/etc/nginx/nginx.conf}} 파일에서 다룹니다.

=== 단일 사이트 접근 ===

다음 예제는 ([[PHP]] 같은) 동적 기능을 뺀 단일 사이트 접근을 보여줍니다.

{{FileBox|filename=/etc/nginx/nginx.conf|title=Gentoo's default configuration|1=
user nginx nginx;
worker_processes 1;
  
error_log /var/log/nginx/error_log info;
  
events {
        worker_connections 1024;
        use epoll;
}
  
http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
  
        log_format main
                '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $bytes_sent '
                '"$http_referer" "$http_user_agent" '
                '"$gzip_ratio"';
  
        client_header_timeout 10m;
        client_body_timeout 10m;
        send_timeout 10m;
  
        connection_pool_size 256;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 2k;
        request_pool_size 4k;
  
        gzip on;
        gzip_min_length 1100;
        gzip_buffers 4 8k;
        gzip_types text/plain;
  
        output_buffers 1 32k;
        postpone_output 1460;
  
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
  
        keepalive_timeout 75 20;
  
        ignore_invalid_headers on;
  
        index index.html;
  
        server {
                listen 127.0.0.1;
                server_name localhost;
  
                access_log /var/log/nginx/localhost.access_log main;
                error_log /var/log/nginx/localhost.error_log info;
  
                root /var/www/localhost/htdocs;
        }
}
}}

=== 다중 사이트 접근 ===

It is possible to leverage the <code>include</code> directive to split the configuration in multiple files:

{{FileBox|filename=/etc/nginx/nginx.conf|title=다중 사이트 설정|1=
user nginx nginx;
worker_processes 1;
   
error_log /var/log/nginx/error_log info;
  
events {
        worker_connections 1024;
        use epoll;
}
http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
  
        log_format main
                '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $bytes_sent '
                '"$http_referer" "$http_user_agent" '
                '"$gzip_ratio"';
  
        client_header_timeout 10m;
        client_body_timeout 10m;
        send_timeout 10m;
  
        connection_pool_size 256;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 2k;
        request_pool_size 4k;
  
        gzip on;
        gzip_min_length 1100;
        gzip_buffers 4 8k;
        gzip_types text/plain;
  
        output_buffers 1 32k;
        postpone_output 1460;
  
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
  
        keepalive_timeout 75 20;
  
        ignore_invalid_headers on;
  
        index index.html;
 
        include /etc/nginx/conf.d/*.conf;
}
}}

{{FileBox|filename=/etc/nginx/conf.d/local.conf|title=단순 호스트|1=
server {
        listen 127.0.0.1;
        server_name localhost;
  
        access_log /var/log/nginx/localhost.access_log main;
        error_log /var/log/nginx/localhost.error_log info;
  
        root /var/www/localhost/htdocs;
}
}}

{{FileBox|filename=/etc/nginx/conf.d/local-ssl.conf|title=단순 SSL 호스트|1=
server {
    listen 443 ssl;
    server_name host.tld;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_dhparam /etc/ssl/nginx/host.tld.dh4096.pem;
    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;
}
}}

=== PHP 지원 ===

다음 줄을 추가하여 nginx 설정에서 PHP 지원을 활성화하도록 하십시오. 이 예제에서 nginx는 유닉스 소켓을 통해 PHP 프로세스와 정보를 교환합니다.

{{FileBox|filename=/etc/nginx/nginx.conf|title=PHP 지원 활성화|1=
...
http {
...
    server { 
    ...
            location ~ \.php$ {
                       # Test for non-existent scripts or throw a 404 error
                       # Without this line, nginx will blindly send any request ending in .php to php-fpm
                       try_files $uri =404;
                       include /etc/nginx/fastcgi.conf;
                       fastcgi_pass unix:/run/php-fpm.socket;
           }
    }
}
}}

To support this setup, PHP needs to be build with FastCGI Process Manager support ({{Package|dev-lang/php}}), which is handled through the <code>fpm</code> USE flag:

{{RootCmd|echo "dev-lang/php fpm" >> /etc/portage/package.use}}

<code>fpm</code> USE 플래그를 활성화 한 상태에서 php를 다시 빌드하십시오.

{{Emerge|dev-lang/php}}
 
{{Note/ko|유닉스 소켓 통신을 사용하는 것이 적당하며 권장하는 설정 방식입니다}}

Review the {{Path|/etc/php/fpm-php5.5/php-fpm.conf}} configuration and add following line:

{{FileBox|filename=/etc/php/fpm-php5.5/php-fpm.conf|title=Running PHP with UNIX socket support|lang=ini|1=
listen = /run/php-fpm.socket
listen.owner = nginx
}}

Set the timezone in the php-fpm {{Path|php.ini}} file. Substitute the <code><PUT_TIMEZONE_HERE></code> text in the FileBox below with the appropriate timezone information:

{{FileBox|filename=/etc/php/fpm-php5.5/php.ini|title=php.ini에서 시간대 설정|lang=ini|1=
date.timezone = <PUT_TIMEZONE_HERE>
}}

{{c|php-fpm}} 데몬을 시작하십시오:

{{RootCmd|/etc/init.d/php-fpm start}}

기본 런레벨에 {{c|php-fpm}}을 추가하십시오:

{{RootCmd|rc-update add php-fpm default}}

바뀐 설정 내용으로 {{c|nginx}}를 다시 불러오십시오:

{{RootCmd|/etc/init.d/nginx reload}}

=== IP 주소 접근 목록 ===

The next example shows how to allow access to a particular URL (in this case {{Path|/nginx_status}}) only to:

* certain hosts (e.g. ''192.0.2.1 127.0.0.1'')
* and IP networks (e.g. ''198.51.100.0/24'')

{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling and configuring an IP access lists for /nginx_status page|1=
http {
    server { 
            location /nginx_status {
                     stub_status on;
                     allow 127.0.0.1/32;
                     allow 192.0.2.1/32;
                     allow 198.51.100.0/24;
                     deny all;
             }
     }
}
}}

=== 기본 인증 ===

nginx allows limiting access to resources by validating the user name and password:

{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling and configuring user authentication for the / location|1=
http {
    server { 
            location / {
                   auth_basic           "Authentication failed";
                   auth_basic_user_file conf/htpasswd;
             }
     }
}
}}
 
The {{Path|htpasswd}} file can be generated using:

{{Cmd|openssl passwd}}

=== TLS 지원 ===

It is warmly suggested to support ''only'' TLS and disable known insecure ciphers.

{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling SSL|1=
server {
    listen 443;
    server_name host.tld;
    ssl on;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_dhparam /etc/ssl/nginx/host.tld.dh4096.pem;
}
}}

The ebuild provides stock self signed certificates in {{Path|/etc/ssl/nginx/}}

==== 기밀 전달 ====

The diffie-hellman certificate can be created using {{c|openssl}}:

{{Cmd|openssl dhparam -out dh4096.pem 4096}}

=== 서드파티 모듈 ===

Download third party module source and move it to {{Path|/usr/src}}. Manually compile the selected Nginx module, then add the following line to {{Path|/etc/portage/make.conf}}:

{{FileBox|filename=/etc/portage/make.conf|title=서드파티 모듈 추가|1=
NGINX_ADD_MODULES="/usr/src/nginxmodule"}}

Rebuild nginx with the third party module enabled:

{{Emerge|www-servers/nginx}}

== 사용법 ==

=== 서비스 관리 ===

==== OpenRC ====

Start nginx:

{{RootCmd|/etc/init.d/nginx start}}

Stop nginx:

{{RootCmd|/etc/init.d/nginx stop}}

Add nginx to the default runlevel:

{{RootCmd|rc-update add nginx default}}

Restart the nginx service: 

{{RootCmd|/etc/init.d/nginx restart}}

== 문제 해결 ==

In case of problems, the following commands can help troubleshoot the situation.

=== 설정 확인 ===

Verify that the running nginx configuration has no errors:

{{RootCmd|/usr/sbin/nginx -t|output=<pre>
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
</pre>}}

By running {{c|nginx}} with the <code>-t</code> option, it will validate the configuration file without actually starting the {{c|nginx}} daemon.

=== 프로세스 실행 확인 ===

Check if {{c|nginx}} processes are running:

{{Cmd|ps aux {{!}} egrep 'nginx{{!}}PID'|output=<pre>
  PID TTY      STAT   TIME COMMAND
26092 ?        Ss     0:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
26093 ?        S      0:00 nginx: worker proces
</pre>}}

=== 범위 주소 및 포트 확인 ===

nginx 데몬이 올바른 TCP 포트에 대한 응답을 기다리는지 확인하십시오(HTTP에 대해서는 80, HTTPS에 대해서는 443):

{{RootCmd|netstat -tulpen {{!}} grep :80|output=<pre>
tcp        0      0 127.0.0.1:80            0.0.0.0:*               LISTEN      0          12336835   -26092/nginx: master
</pre>}}

== 추가 참조 ==

* [[Apache]] - The most popular HTTP server used the Internet.
* [[Lighttpd]] - A fast, lightweight web server.

== 외부 자료 ==

* http://nginx.org/en/docs/beginners_guide.html - A {{c|nginx}} beginner's guide. Helpful for those who do not know much about {{c|nginx}}.
* http://nginx.com/resources/admin-guide/ - The {{c|ngnix}} administration guide. Helpful for web administrators who have been working in the field.
* http://wiki.nginx.org/Main - The nginx wiki.
* https://github.com/h5bp/server-configs-nginx - H5BP nginx config.

[[Category:Web Servers]]
