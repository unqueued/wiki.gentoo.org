<!--
{{InfoBox stack
|{{InfoBox homepage|[[]]|header=true}}
|{{InfoBox wikipedia|}}
}}
-->

'''Catalyst''' is a release building tool, used by Gentoo Linux. With Catalyst, users are able to completely customize a Gentoo install by customizing the very tools that are used to install a system. Official Gentoo Linux release media is built using Catalyst.

Catalyst is capable of:

* Building installation stages;
* Building bootable LiveCDs;
* Building GRP (Gentoo Reference Platform) sets;
* Setting up a Tinderbox target for test building;
* Building netboot images.

__TOC__

== Installation ==

=== USE flags ===

{{USEflag|package=dev-util/catalyst|desc=Optional USE flags for {{Package|dev-util/catalyst}}:
|ccache
|python_targets_python2_7+Yes++Build with Python 2.7
}}

=== Emerge ===

To install Catalyst, run:

{{Emerge|dev-util/catalyst}}

== Configuration ==

After emerging Catalyst, the first (and probably only) configuration step is to edit {{Path|/etc/catalyst/catalyst.conf}}

== How to build simple stage3 ==

=== Seed tarball ===

For creating a stage3 a seed tarball is needed. Catalyst will <tt>chroot</tt> into the seed and <tt>emerge</tt> the packages for the new stages inside it, so it does not pollute the build system.

The seed tarball should be placed the following temporary directory unless the temporary directory location was modified during the Catalyst configuration in the [[Catalyst#Configuration|configuration section]] above. If the temporary directory was modified put the seed in the appropriate directory, otherwise:

{{RootCmd|mkdir -p /var/tmp/catalyst/builds/default && cd /var/tmp/catalyst/builds/default}}

The seed tarball can be a current stage3 tarball downloaded from one of the Gentoo mirrors.

Relatively recent AMD64 tarballs can be found [http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64/ here], and
x86 tarballs can be found [http://distfiles.gentoo.org/releases/x86/autobuilds/current-stage3-i686/ here].

Use <tt>wget</tt> to download from the command line. For example, to download an AMD64 tarball:

{{RootCmd|wget http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64/stage3-amd64-20150402.tar.bz2}}

=== Snapshot ===

==== Local generation ====

Along with the tarball a snapshot of the Gentoo-x86 Portage tree is required. Catalyst can create a snapshot of the system's current {{Path|/usr/portage}} directory with the <tt>catalyst -s <date></tt> command.

The snapshot will be saved to {{Path|/var/tmp/catalyst/snapshots/portage-<date>.tar.bz2}}

In the example below <code>2015.04.07</code> (April 7th, 2015 in an easy to read command-line format) is the argument passed to the <code>--snapshot (-s)</code> option as the snapshot date:

{{RootCmd|catalyst -s 2015.04.07}}

The <code><date></code> argument can be any date format that makes sense to the user.

==== Remote download ====

Another option is to use one of the Portage tree snapshots available on the mirrors. Current snapshots can be found [http://distfiles.gentoo.org/snapshots/ here].

As mentioned above, the <tt>wget</tt> command can be used to download a remote snapshot hosted on a HTTP(S) server:

{{RootCmd|wget -O portage-latest.tar.bz2 http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2}}

=== Specs ===

Catalyst uses specs files for reading the parameters to create a stage. For building a stage3 a stage1 and stage2 must be built, then the stage3 will be created. Therefore a spec file is needed for each of the stages.

The specs the Gentoo Release team use for autobuilds can be found in the releng git repository:

https://gitweb.gentoo.org/proj/releng.git/tree/releases/weekly/specs

This article will use the specs for {{Keyword|amd64}}:

https://gitweb.gentoo.org/proj/releng.git/plain/releases/weekly/specs/amd64/

{{RootCmd
|wget -O stage1.spec "https://gitweb.gentoo.org/proj/releng.git/plain/releases/weekly/specs/amd64/stage1.spec"
|wget -O stage2.spec "https://gitweb.gentoo.org/proj/releng.git/plain/releases/weekly/specs/amd64/stage2.spec"
|wget -O stage3.spec "https://gitweb.gentoo.org/proj/releng.git/plain/releases/weekly/specs/amd64/stage3.spec"}}

Download the three files files above. These specs are very simple; all three of them contain many of the same parameters.

=== Inside a {{Path|.spec}} file ===

Check out the {{Path|stage1.spec}} file:

{{FileBox|filename=stage1.spec|title=amd64 stage1 spec file example|1=
subarch: amd64
target: stage1
version_stamp: 2015.04.07
rel_type: default
profile: default/linux/amd64/13.0
snapshot: 2015.04.07
source_subpath: default/stage3-amd64-latest
update_seed: yes
update_seed_command: --update --deep @world
portage_confdir: /release/releng/releases/weekly/portage/stages
}}

{| class="wikitable"
|-
! Option !! Description
|-
| <code>subarch</code> || The subarch can be any of the supported Catalyst sub-architectures. Check the available sub-architectures in {{Path|/usr/lib/catalyst/arch/${ARCH}.py}}, <code>${ARCH}</code> being the arch to be built. <code>subarch</code> simply sets the <code>CHOST</code> and <code>CFLAGS</code>/<code>CXXFLAGS</code> accordingly.
|-
| <code>version_stamp</code> || The version stamp is used as an identifier for the build. On the autobuilds the date is utilized for this setting, however it can be anything the user desires. This parameter will be used on the output tarball (stage1-${ARCH}-${version_stamp}.tar.bz2), temporary directories, etc...
|-
| <code>target</code> || The target specifies what target Catalyst will build. For building a CD, <code>livecd-stage1</code> should be defied as the target. The example above specifies a stage1 is to be built.
|-
| <code>rel_type</code> || <code>rel_type</code> defines what kind of build the system will perform. This is merely another identifier that is available to be used in case (more) differentiation of the builds is needed. If a normal, hardened, and uclibc stages were to be built these could be defined here. Changing it will change the sub-directory inside {{Path|/var/tmp/catalyst/builds}} from default to whatever has been set for this value.
|-
| <code>profile</code> || This is the system profile to be used by Catalyst to build this target. It is specified as a relative path and must be one of the system profiles available at {{Path|/usr/portage/profiles}}
|-
| <code>snapshot</code> || This value specifies which snapshot of the Gentoo tree to use. See the section above on creating a snapshot for more information on snapshots. If 2015.04.07 is used like in the example, it will use the snapshot available at {{Path|/var/tmp/catalyst/snapshots/portage-2015.04.07.tar.bz2}}
|-
| <code>source_subpath</code> || This is the relative path which specifies where the seed stage comes from for this target. In the example above, it will use {{Path|/var/tmp/catalyst/builds/default/stage3-sh4a-2015.04.07.tar.bz2}} as the seed tarball.
|-
| <code>distcc_hosts</code> || These are the hosts used as distcc slaves when distcc is enabled in the {{Path|/etc/catalyst/catalyst.conf}} file. It follows the same syntax as <tt>distcc-config --set-hosts</tt> and is entirely optional. It is possible to see that this setting is lacking from the example above.
|-
| <code>portage_confdir</code> || This is an absolute path where a custom Portage configuration directory can be defined. This comes in handy when desiring to include unstable (<code>~</code>) packages or include a specific {{Path|make.conf}}. If this line is left out of the {{Path|.spec}} file, then Catalyst will default to using it's default configuration. If this line is defined make sure it is defined across all targets to minimize problems.
|-
| <code>portage_overlay</code> || This option specifies the location to a portage overlay that you would like to have used when building the target.
|-
| <code>pkgcache_path</code> || This allows the optional directory containing the output packages for Catalyst. Mainly used as a way for different {{Path|.spec}} files to access the same cache directory. Default behavior is for this location to be autogenerated by Catalyst based on the {{Path|.spec}} file.
|}

On stage2 and stage3, the <code>source_subpath</code> needs to be the stage1 and stage2 built respectively. For an example, if 2015.04.07 is used as the <code>version_stamp</code>, the <code>source_subpath</code> for stage2 should be: default/stage1-sh4a-2015.04.07, and the <code>source_subpath</code> for stage3 should be: default/stage2-sh4a-2015.04.07.

=== Running Catalyst ===

Once the specs have been reviewed, start <tt>catalyst</tt> by running the following command:

{{RootCmd|catalyst -f stage1.spec && catalyst -f stage2.spec && catalyst -f stage3.spec}}

If everything went as expected a stage3 should be show up in the {{Path|/var/tmp/catalyst/builds/default/}} directory.

== External resources ==

* [[Project:Catalyst|Catalyst project page]] - The official project main documentation page.
* [[Project:Catalyst/FAQ|Catalyst FAQ]] - A frequently asked questions article for official Catalyst documentation.
* [https://gitweb.gentoo.org/proj/catalyst.git/ Official Catalyst source code] - Hosted on Gentoo's GitWeb site.
