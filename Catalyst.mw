{{InfoBox stack
|{{InfoBox project|Catalyst|header=true}}
|{{InfoBox gitweb|catalyst.git}}
}}

{{Note|This page is about the release building tool. For the AMD graphics drivers, and the configuration tool that comes with them, see [[fglrx]]}}

{{c|catalyst}} is [[Article description::Gentoo's release building tool.]] With {{c|catalyst}} users are able to completely customize a Gentoo install by customizing the very tools that are used to install a system. [https://get.gentoo.org Official Gentoo Linux release media] is built using Catalyst.

{{c|catalyst}} is capable of:

* Building [[Stage tarball|installation stages]].
* Building bootable LiveCDs.
* Building GRP (Gentoo Reference Platform) sets. [Note: GRP has been discontinued]
* Setting up a Tinderbox target for test building.
* Building netboot images.

__TOC__

== Installation ==

=== USE flags ===

{{USEflag|package=dev-util/catalyst}}

=== Emerge ===

To install {{c|catalyst}}, run:

{{Emerge|dev-util/catalyst}}

== Configuration ==

After emerging {{c|catalyst}}, the first (and probably only) configuration step is to edit {{Path|/etc/catalyst/catalyst.conf}}

== Usage ==

=== Seed tarball ===

For creating a stage3 a seed tarball is needed. Catalyst will {{c|chroot}} into the seed and {{c|emerge}} the packages for the new stages inside it, so it does not pollute the build system.

The seed tarball should be placed in the following temporary directory unless the temporary directory location was modified during the Catalyst configuration in the [[Catalyst#Configuration|configuration section]] above. If the temporary directory was modified put the seed in the appropriate directory, otherwise:

{{RootCmd|mkdir -p /var/tmp/catalyst/builds/default}}

The seed tarball can be a current stage3 tarball downloaded from one of the Gentoo mirrors.

Relatively recent {{Keyword|amd64}} tarballs can be found [http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64/ here], and
{{Keyword|x86}} tarballs can be found [http://distfiles.gentoo.org/releases/x86/autobuilds/current-stage3-i686/ here].

Use {{c|wget}} to download from the command line. For example, to download an {{Keyword|amd64}} tarball:

{{RootCmd|wget <nowiki>http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64/stage3-amd64-20150402.tar.bz2</nowiki> -O /var/tmp/catalyst/builds/default}}

=== Snapshot ===

==== Local generation ====

Along with the tarball a snapshot of the Portage tree is required. Catalyst can create a snapshot of the system's current {{Path|/usr/portage}} directory with the {{c|catalyst -s <date>}} command.

The snapshot will be saved to {{Path|/var/tmp/catalyst/snapshots/portage-<date>.tar.bz2}}

In the example below <code>2015.04</code> (April, 2015 in an easy to read command-line format) is the argument passed to the <code>--snapshot (-s)</code> option as the snapshot date:

{{RootCmd|catalyst -s 2015.04}}

The <code><date></code> argument can be any date format that makes sense to the user. To use the current year/month following format above, simply:

{{RootCmd|catalyst -s $(date +%Y.%m)}}

{{Note|Since the file might be created under different name than expected, you may want to link {{Path|/var/tmp/catalyst/snapshots/portage-latest}} to the snapshot. Ensure the extension (e.g. .tar.xz) match!}}

==== Remote download ====

Another option is to use one of the Portage tree snapshots available on the mirrors. Current snapshots can be found [http://distfiles.gentoo.org/snapshots/ here].

As mentioned above, the {{c|wget}} command can be used to download a remote snapshot hosted on a HTTP(S) server:

{{RootCmd|wget -O portage-latest.tar.bz2 <nowiki>http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2</nowiki>}}

=== Specs ===

Catalyst uses specs files for reading the parameters to create a stage. For building a stage3 a stage1 and stage2 must be built, then the stage3 will be created. Therefore a spec file is needed for each of the stages.

The specs the Gentoo Release team use for autobuilds can be found in the RelEng git repository:

https://gitweb.gentoo.org/proj/releng.git/tree/releases/weekly/specs

This article will use the specs for {{Keyword|amd64}}:

https://gitweb.gentoo.org/proj/releng.git/plain/releases/weekly/specs/amd64/

{{RootCmd
|wget -O stage1.spec "<nowiki>https://gitweb.gentoo.org/proj/releng.git/plain/releases/weekly/specs/amd64/stage1.spec</nowiki>"
|wget -O stage2.spec "<nowiki>https://gitweb.gentoo.org/proj/releng.git/plain/releases/weekly/specs/amd64/stage2.spec</nowiki>"
|wget -O stage3.spec "<nowiki>https://gitweb.gentoo.org/proj/releng.git/plain/releases/weekly/specs/amd64/stage3.spec</nowiki>"}}

Download the three files files above. These specs are very simple; all three of them contain many of the same parameters.

==== Inside a {{Path|stage1.spec}} file ====

Check out the {{Path|stage1.spec}} file:

{{FileBox|filename=stage1.spec|title=amd64 stage1 spec file example|1=
subarch: amd64
target: stage1
version_stamp: 2015.04
rel_type: default
profile: default/linux/amd64/13.0
snapshot: 2015.04
source_subpath: default/stage3-amd64-latest
update_seed: yes
update_seed_command: --update --deep @world
#portage_confdir: /release/releng/releases/weekly/portage/stages
}}

==== .spec file option list ====

The following table provides a list of {{Path|.spec}} file options and their descriptions.

{| class="table table-striped table-condensed"
|-
! Option !! Description
|-
| <code>subarch</code> || The subarch can be any of the supported Catalyst sub-architectures. Check the available sub-architectures in {{Path|/usr/lib/catalyst/arch/${ARCH}.py}}, <code>${ARCH}</code> being the arch to be built. <code>subarch</code> simply sets the <code>CHOST</code> and <code>CFLAGS</code>/<code>CXXFLAGS</code> accordingly.
|-
| <code>target</code> || The target specifies what target Catalyst will build. The example above specifies <code>stage1</code> as the target to be built. For building a CD, <code>livecd-stage1</code> should be defied as the target.
|-
| <code>version_stamp</code> || The version stamp is used as an identifier for the build. On the autobuilds the date is utilized for this setting, however it can be anything the user desires. This parameter will be used on the output tarball, (<code>${target}</code>-<code>${ARCH}</code>-<code>${version_stamp}</code>.tar.bz2), temporary directories, etc...
|-
| <code>rel_type</code> || <code>rel_type</code> defines what kind of build the system will perform. This is merely another identifier that is available to be used in case (more) differentiation of the builds is needed. If a normal, hardened, and uclibc stages were to be built these could be defined here. Changing it will change the sub-directory inside {{Path|/var/tmp/catalyst/builds}} from default to whatever has been set for this value.
|-
| <code>profile</code> || This is the system profile to be used by Catalyst to build this target. It is specified as a relative path and ''must be set'' to one of the system profiles available at {{Path|/usr/portage/profiles}}. In the example above the default profile is used (<code>default/linux/amd64/13.0</code>).
|-
| <code>snapshot</code> || This value specifies which snapshot of main Gentoo repository. See the [[#Snapshot|section above]] on creating a snapshot for more information on snapshots. If <code>2015.04</code> is used like in the example above, {{c|catalyst}} will look for a snapshot available at {{Path|/var/tmp/catalyst/snapshots/portage-2015.04.tar.bz2}}.
|-
| <code>source_subpath</code> || This is the relative path which specifies where the seed stage comes from for this target. In the example above, it will use {{Path|/var/tmp/catalyst/builds/default/stage3-amd64-latest.tar.bz2}} as the seed stage. The prefix of this filesystem path ({{Path|/var/tmp/catalyst/builds}}) is determined by the value contained in the <code>storedir</code> variable the {{Path|/etc/catalyst/catalyst.conf}} file. The suffix ({{Path|.tar.bz2}}) is automatically generated by {{c|catalyst}} at build time.
|-
| <code>distcc_hosts</code> || These are the hosts used as {{c|distcc}} slaves when {{c|distcc}} is enabled in the {{Path|/etc/catalyst/catalyst.conf}} file. It follows the same syntax as {{c|distcc-config --set-hosts}} and is entirely optional. This setting is lacking from the example above.
|-
| <code>portage_confdir</code> || This is an absolute path where a custom Portage configuration directory can be defined. This comes in handy when desiring to include unstable (<code>~</code>) packages or include a specific {{Path|make.conf}}. If this line is left out of the {{Path|.spec}} file, then Catalyst will default to using its default configuration. If this line ''is'' defined make sure it is defined across all targets ({{Path|.spec}} files) to minimize problems.
|-
| <code>portage_overlay</code> || This option specifies the location to a Portage overlay to use when building the target.
|-
| <code>pkgcache_path</code> || This allows the optional directory containing the output packages for {{c|catalyst}}. Mainly used as a way for different {{Path|.spec}} files to access the same cache directory. Default behavior is for this location to be auto-generated by {{c|catalyst}} based on the {{Path|.spec}} file.
|}

On {{Path|stage2.spec}} and {{Path|stage3.spec}} files, <code>source_subpath</code> needs to reference the stage1 and stage2 tarballs respectively. In other words, with exception of the first {{Path|.spec}} file in the sequence, <code>source_subpath</code> should be set to the tarball build previously. For an example, if 2015.04 was used as the <code>version_stamp</code>, the <code>source_subpath</code> for stage2 should be: default/stage1-amd64-2015.04, and the <code>source_subpath</code> for stage3 should be: default/stage2-amd64-2015.04.

=== Invocation ===

{{RootInvocation|catalyst --help|output=<pre>
Catalyst, version 2.0.18
Copyright 2003-2008 Gentoo Foundation
Copyright 2008-2012 various authors
Distributed under the GNU General Public License version 2.1

Usage catalyst [options] [-C variable=value...] [ -s identifier]
 -a --clear-autoresume	clear autoresume flags
 -c --config     use specified configuration file
 -C --cli        catalyst commandline (MUST BE LAST OPTION)
 -d --debug      enable debugging
 -f --file       read specfile
 -F --fetchonly  fetch files only
 -h --help       print this help message
 -p --purge      clear tmp dirs,package cache and autoresume flags
 -P --purgeonly  clear tmp dirs,package cache and autoresume flags and exit
 -T --purgetmponly  clear tmp dirs and autoresume flags and exit
 -s --snapshot   generate a release snapshot
 -V --version    display version information
 -v --verbose    verbose output

Usage examples:

Using the commandline option (-C, --cli) to build a Portage snapshot:
catalyst -C target=snapshot version_stamp=my_date

Using the snapshot option (-s, --snapshot) to build a release snapshot:
catalyst -s 20071121

Using the specfile option (-f, --file) to build a stage target:
catalyst -f stage1-specfile.spec
</pre>}}

=== Building ===

Once the specs have been reviewed, start {{c|catalyst}} by running the following command:

{{RootCmd|catalyst -f stage1.spec && catalyst -f stage2.spec && catalyst -f stage3.spec}}

If everything went as expected a stage3 should be show up in the {{Path|/var/tmp/catalyst/builds/default/}} directory.

{{Note|Some {{Path|.spec}} files (noticably {{Path|stage3.spec}}) would have <code>portage_confdir</code> option included in it. If so, you may want to fetch the files from corresponding path on the server. These files are to be put under a directory specified on (corrected) <code>portage_confdir</code>. Make sure to maintain the directory structure (i.e. package.use).}}

== See also ==

* [[Project:Catalyst/FAQ|Catalyst FAQ]] - A frequently asked questions article via official Catalyst documentation.
* [[Stage tarball]]
