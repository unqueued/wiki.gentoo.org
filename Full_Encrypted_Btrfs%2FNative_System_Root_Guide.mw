Basically this article is an extension to [[Btrfs/Native System Root Guide]] which adds [[Dm-crypt]] and uses [[Dracut]] to create the initramfs rather then dealing with the [[Early Userspace Mounting]] approach. As the root partition, which also includes {{Path|/boot}}, will end up encrypted, we'll store the keyfile to unlock the btrfs raid partitions within the initramfs. This may be a bit unsafer on runtime as the keyfile ends up in memory but we gain a faster boot process without the need to input the password 4 times (2 x grub and 2 x  btrfs raid1). I also have an btrs raid6 with 6 full encrypted disks and this would lead me to enter my password 10 times to have a fully working system. so i'm happy with embedding the keyfile within the initramfs.

As i didn't find a way to get a working system with the initramfs generated by genkernel I've decided to use dracut.

We'll migrate an existing MD software raid1 to an btrfs raid1 without adding extra disks. So better make backups of your data!
I assume the raid members of {{Path|/dev/md1}} to be {{Path|/dev/sda}} and {{Path|/dev/sdb}}.

The whole procedure is straight forward but you have to double check a few things i'll mention later. Please carefully read the whole post and pay extra attention to grub2 and dracut.

There may be better ways to accomplish this setup but after nights of research and testing within a virtual machine this procedure has worked for me.

== Required packages ==

First add the required use flags for the packages.
As i'm a lazy person :) i'll use genkernel-next to do the work even if i'll replace the initramfs with the dracut one.

{{RootCmd
|echo "sys-apps/systemd cryptsetup" >> /etc/portage/package.use
|echo "sys-boot/grub device-mapper" >> /etc/portage/package.use
|echo "sys-fs/cryptsetup static kernel -gcrypt" >> /etc/portage/package.use
|echo "sys-kernel/genkernel-next cryptsetup" >> /etc/portage/package.use
|echo "sys-kernel/dracut systemd device-mapper" >> /etc/portage/package.use
}}

Next unmask the packages (Please change the keyword as needed for your system).
We'll use the latest available versions.

{{RootCmd
|echo "sys-fs/btrfs-progs ~amd64" >> /etc/portage/package.keywords
|echo "sys-boot/grub:2 ~amd64" >> /etc/portage/package.keywords
|echo "sys-fs/cryptsetup ~amd64" >> /etc/portage/package.keywords
|echo "sys-kernel/genkernel-next ~amd64" >> /etc/portage/package.keywords
|echo "sys-kernel/gentoo-sources ~amd64" >> /etc/portage/package.keywords
}}

Install the required packages

{{Emerge|systemd grub:2 cryptsetup genkernel-next btrfs-progs dracut gentoo-sources}}

If this installs newer kernel sources, please change the symlink either using {{c|eselect kernel}} or do it manually, build the kernel and reboot. After that proceed from here.

== Preparing for encryption ==

As we'll use a keyfile to unlock the partitions we'll now create one (paranoid settings).

{{RootCmd
|dd if{{=}}/dev/random of{{=}}/root/secretkey bs{{=}}1 count{{=}}4096
|chmod 0400 /root/secretkey
}}

== Preparing the first disk ==

=== Dealing with the software raid ===

Remove {{Path|/dev/sda}} drive from md array

{{RootCmd
|mdadm --manage /dev/md1 --fail /dev/sda
|mdadm --manage /dev/md1 --remove /dev/sda
|mdadm --zero-superblock /dev/sda
}}

=== Partition the drive ===

We create a bios boot partition and use the remaining space for the root partition.

{{RootCmd|gdisk /dev/sda|output=<pre>
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048            8191   3.0 MiB     EF02  BIOS boot partition
   2            8192       250069679   119.2 GiB   8300  Linux filesystem
</pre>}}

=== Encrypt partition ===

First we'll format the partitions

{{RootCmd|cryptsetup luksFormat -s 512 -c aes-xts-plain64 /dev/sda2}}

Next we add the keyfile to the root partition

{{RootCmd|cryptsetup luksAddKey /dev/sda2 /root/secretkey}}

Finally we open the root partition

{{RootCmd|cryptsetup open -d /root/secretkey /dev/sda2 luks-1}}

=== Create filesystem, mountpoints and subvolumes ===

Now we format the mapped partition.

{{RootCmd|mkfs.btrfs -L BTROOT /dev/mapper/luks-1}}

Next we create the mountpoints, mount the filesystems and create subvolumes

{{RootCmd
|mkdir /mnt/btrfsmirror
|mount -t btrfs -o defaults,noatime,compress{{=}}lzo,autodefrag /dev/mapper/luks-1 /mnt/btrfsmirror
|mkdir /mnt/newroot
|btrfs subvol create /mnt/btrfsmirror/activeroot
}}

{{RootCmd
|mount -t btrfs -o defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}activeroot /dev/mapper/luks-1 /mnt/newroot
|mkdir /mnt/newroot/home
|mkdir /mnt/newroot/boot
|btrfs subvol create /mnt/btrfsmirror/home
|btrfs subvol create /mnt/btrfsmirror/boot
|mount -t btrfs -o defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}home /dev/mapper/luks-1 /mnt/newroot/home
|mount -t btrfs -o defaults,noatime,subvol{{=}}boot /dev/mapper/luks-1 /mnt/newroot/boot
}}

== Hot copy / ==

We'll now mount our running system onto {{Path|/mnt/rawroot}} and copy everything over.

{{RootCmd
|mkdir /mnt/rawroot
|mount --bind / /mnt/rawroot
|cd /mnt/rawroot
|tar cvpf - . {{!}} (cd /mnt/newroot; tar xpf -)
}}

== Chroot ==

=== Enter the chroot ===

We now need to chroot into {{Path|/mnt/newroot}} and do the usual chroot stuff.

{{RootCmd
|cp -L /etc/resolv.conf /mnt/newroot/etc/
|mount -t proc proc /mnt/newroot/proc
|mount --rbind /sys /mnt/newroot/sys
|mount --rbind /dev /mnt/newroot/dev
|mount --make-rslave /mnt/newroot/sys
|mount --make-rslave /mnt/newroot/dev
|chroot /mnt/newroot /bin/bash
|env-update && source /etc/profile
|export PS1{{=}}"(chroot) $PS1"
}}

=== mtab/fstab ===

Check that {{Path|/etc/mtab}} contains the following lines and if not, add them:

{{FileBox|filename=/etc/mtab|1=
/dev/mapper/luks-1 / btrfs rw,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}activeroot 0 0
/dev/mapper/luks-1 /home btrfs rw,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}home 0 0
/dev/mapper/luks-1 /boot btrfs rw,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}boot 0 0
}}

Next change {{Path|/etc/fstab}} to this:

{{FileBox|filename=/etc/mtab|1=
LABEL{{=}}BTROOT    /mnt/btrfsmirror    btrfs    defaults,noatime,compress{{=}}lzo,autodefrag    0 0
LABEL{{=}}BTROOT    /                   btrfs    defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}activeroot    0 0
LABEL{{=}}BTROOT    /home               btrfs    defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}home    0 0
LABEL{{=}}BTROOT    /boot               btrfs    defaults,noatime,subvol{{=}}boot    0 0
}}

=== Remove md array configuration ===

Edit {{Path|/etc/mdadm.conf}} and remove your array from it.

=== Build kernel and initramfs ===

Now we'll create the kernel with the required configuration.

{{RootCmd|genkernel --luks --btrfs --oldconfig --save-config --menuconfig --install --bootloader{{=}}grub2 --udev all}}

{{KernelBox|title=Enabling device mapper and crypt target|1=
[*] Enable loadable module support
    Device Drivers --->
        [*] Multiple devices driver support (RAID and LVM) --->
            <*> Device mapper support
            <*> Crypt target support
}}

{{KernelBox|title=Enabling cryptographic API functions for the cipher you used|1=
[*] Cryptographic API --->
    <*> SHA224 and SHA256 digest algorithm
    <*> XTS support
    <*> AES cipher algorithms
    <*> AES cipher algorithms (x86_64)
}}

{{KernelBox|title=Enabling initramfs support|1=
General setup  --->
    [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
}}

=== Dracut ===

Next step is to create a new intitramfs

{{RootCmd|dracut -f -I /root/secretkey}}

and we just replace the initramfs create by genkernel with the one from dracut.

=== Grub2 ===

==== Customize grub2 ====

We'll change {{Path|/etc/default/grub}} to fit our needs.

For that we'll add <var>rd.luks</var>, <var>rd.luks.key</var> and <var>rd.luks.uuid</var> to <var>GRUB_CMDLINE_LUNUX</var> and add <var>GRUB_ENABLE_CRYPTODISK=y</var> as new line somewhere.

The <var>rd.luks.uuid</var> is the uuid of the encrypted (!!) partition in this case {{Path|/dev/sda2}}.

Now {{Path|/etc/default/grub}} should look like this (i use systemd!):

{{FileBox|filename=/etc/default/grub|1=
...
GRUB_ENABLE_CRYPTODISK=y
GRUB_CMDLINE_LINUX_DEFAULT="real_init=/usr/lib/systemd/systemd rd.luks=1 rd.luks.key=/root/secretkey rd.luks.uuid=luks-e57c4e30-7b2e-457a-af9b-3270d085aae2"
...
}}

==== Generate grub.cfg ====

We'll use {{c|grub2-mkconfig}} to generate the {{Path|grub.cfg}}

{{RootCmd|grub2-mkconfig -o /boot/grub/grub.cfg}}

==== Install grub2 into MBR ====

{{RootCmd|grub2-install /dev/sda}}

== Finishing first disk ==

That's it for the first drive. Now we leave the chroot.

Install grub2 into MBR of {{Path|/dev/sdb}} if not already done to be able to reboot into the old system in case of problems.

Now reboot.

== Booting from encrypted disk ==

Make sure you boot from {{Path|/dev/sda}} !!

You'll be asked for the password to unlock the boot partition and after that it should boot up as normal (without further password request!)

== Preparing second disk ==

=== Dealing with the software raid - Part 2 ===

We'll now completely stop and destroy the MD array.
 
{{RootCmd
|mdadm --stop /dev/md1
|mdadm --zero-superblock /dev/sdb
}}

=== Partition the drive ===

We create a bios boot partition and use the remaining space for the root partition.

{{RootCmd|gdisk /dev/sdb|output=<pre>
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048            8191   3.0 MiB     EF02  BIOS boot partition
   2            8192       250069679   119.2 GiB   8300  Linux filesystem
</pre>}}

=== Encrypt partition ===

First we'll format the partitions

{{RootCmd|cryptsetup luksFormat -s 512 -c aes-xts-plain64  /dev/sdb2}}

Next we add the keyfile to the root partition

{{RootCmd|cryptsetup luksAddKey /dev/sdb2 /root/secretkey}}

Finally we open the root partition

{{RootCmd|cryptsetup open -d /root/secretkey /dev/sdb2 luks-2}}

== BTRFS Raid 1 ==

Now we add the second disk to the btrfs filesystem and convert it to raid1.

{{RootCmd
|btrfs device add /dev/mapper/luks-2 /mnt/btrfsmirror
|btrfs balance start -dconvert{{=}}raid1 -mconvert{{=}}raid1 /mnt/btrfsmirror
}}

== Dracut ==

Recreate the intitramfs with dracut and replace the old one.

{{RootCmd|dracut -f -I /root/secretkey}}

== Grub2 ==

=== Customize grub2 ===

Append <var>rd.luks.uuid</var> for {{Path|/dev/sdb2}} to <var>GRUB_CMDLINE_LINUX_DEFAULT</var> in {{Path|/etc/default/grub}}

{{FileBox|filename=/etc/default/grub|1=
...
GRUB_ENABLE_CRYPTODISK=y
GRUB_CMDLINE_LINUX_DEFAULT="real_init=/usr/lib/systemd/systemd rd.luks=1 rd.luks.key=/root/secretkey rd.luks.uuid=luks-e57c4e30-7b2e-457a-af9b-3270d085aae2 rd.luks.uuid=luks-26ab8aed-7c84-4993-bfe4-579c83c96b05"
...
}}

=== Generate grub.cfg ===

Recreate the {{Path|grub.cfg}}

{{RootCmd|grub2-mkconfig -o /boot/grub/grub.cfg}}

{{Important|The current {{c|grub2-mkconfig}} (time of writing) creates an invalid {{Path|grub.cfg}}. There is a bug which cannot handle multiple boot devices (see https://www.mail-archive.com/bug-grub@gnu.org/msg15384.html and https://bugzilla.redhat.com/show_bug.cgi?id{{=}}1177470).}}

{{c|grub2-mkconfig}} will generate the following broken lines in different places:

{{FileBox|filename=/boot/grub/grub.cfg|1=
cryptomount -u 26ab8aed7c844993bfe4579c83c96b05
a044adcaa23b400bad6ca256a9509c75
set root='cryptouuid/26ab8aed7c844993bfe4579c83c96b05
cryptouuid/a044adcaa23b400bad6ca256a9509c75'
}}

You've to search and fix them.

I'm not sure how they should look like, but this is how they look on my working system:

{{FileBox|filename=/boot/grub/grub.cfg|1=
cryptomount -u 26ab8aed7c844993bfe4579c83c96b05
cryptomount -u a044adcaa23b400bad6ca256a9509c75
set root='cryptouuid/26ab8aed7c844993bfe4579c83c96b05'
set root='cryptouuid/a044adcaa23b400bad6ca256a9509c75'
}}

Also check the UUIDs are correct!

=== Install grub2 into MBR ===

Reinstall on {{Path|/dev/sda}}

{{RootCmd|grub2-install /dev/sda}}

Install on {{Path|/dev/sdb}}

{{RootCmd|grub2-install /dev/sdb}}

== Finishing up ==

=== Cleanup ===

Remove obsolete mountpoints

{{RootCmd|rm -rf /mnt/newroot /mnt/rawroot}}

=== Backup LUKS headers ===

You definitely  should make a backup of your LUKS headers as you'll not be able to rescue the data if the header gets damaged for some reason.

{{RootCmd
|cryptsetup luksHeaderBackup /dev/sda2 --header-backup-file /mnt/usb/luks-header/<UUID of /dev/sda2>.img
|cryptsetup luksHeaderBackup /dev/sdb2 --header-backup-file /mnt/usb/luks-header/<UUID of /dev/sdb2>.img
}}

Or use this dirty script to find and save all LUKS headers.

{{CodeBox|lang=bash|1=
#!/bin/bash
DEST=$1

if [ -z "$1" ]; then
	echo "Usage:"
	echo $(basename $0) " <destination path>"
	exit 1
fi

for DISK in `ls /dev/sd*`; do
	TYPE=$(blkid -o value -s TYPE $DISK)

	if [ -n "$TYPE" ] && [ "crypto_LUKS" == "$TYPE" ]; then
		UUID=$(blkid -o value -s UUID $DISK)
		cryptsetup luksHeaderBackup "${DISK}" --header-backup-file "${DEST}/${UUID}.img"

	fi
done
}}

=== Reboot ===

At this point you should have a full encrypted and working system.

You should now reboot. Grub will ask you for the password twice as it needs to unlock both disks.

After that you should not be prompted for password input anymore.


That's it. Have fun with your encrypted system!

== Troubleshooting ==

=== Systemd asks for password on wall ===

If systemd asks for the password on wall while your system is already booted up, you should check {{Path|/etc/crypttab}} and make sure your root partitions are not listed there. This is because they are already unlocked by ''dracut'' and systemd simply doesn't check that and thus tries to unlock them again which fails as the mapping device already exists.

=== Mapping names are build from uuid ===

After a reboot your root partitions mapping devices will look like {{Path|/dev/mapper/<UUID>}}. If you prefer clean names (i do) like {{Path|/dev/mapper/luks-1.1}} and {{Path|/dev/mapper/luks1.2}} you can achieve this by adding the partitions to {{Path|/etc/crypttab}} and include it into the initramfs. But make sure to comment the lines in {{Path|/etc/crypttab}} after you have created the initramfs!

Example of {{Path|/etc/crypttab}}

{{FileBox|filename=/etc/crypttab|1=
luks-1.1 UUID=e57c4e30-7b2e-457a-af9b-3270d085aae2 /root/secretkey luks
luks-1.2 UUID=26ab8aed-7c84-4993-bfe4-579c83c96b05 /root/secretkey luks
}}

Now include it into the initramfs.

{{RootCmd|dracut -f -I /root/secretkey -I /etc/crypttab}}
