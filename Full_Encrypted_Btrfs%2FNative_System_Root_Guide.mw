== Introduction ==
Basically this is post is an extension to [[Btrfs/Native System Root Guide]] which adds [[Dm-crypt]] and uses [[Dracut]] to create the initramfs rather then dealing with the [[Early Userspace Mounting]] approach. As the root, which also includes /boot, partition will end up encrypted, we'll store the keyfile to unlock the btrfs raid partitions within the initramfs. This may be a bit unsafer on runtime as the keyfile ends up in memory but we gain a faster boot process without the need to input the password 4 times (2 x grub and 2 x  btrfs raid1). I also have an btrs raid6 with 6 full encrypted disks and this would lead me to enter my password 10 times to have a fully working system. so i'm happy with embedding the keyfile within the initramfs.

We'll migrate an existing MD software raid1 to an btrfs raid1 without adding extra disks. So better make backups of your data!
I assume the raid members to be <code>/dev/sda</code> and <code>/dev/sdb</code> of <code>/dev/md1</code>.

The whole procedure is straight forward but you have to double check a few things i'll mention later. Please carefully read the whole post and pay extra attention to grub2 and dracut.


== Required packages ==
First add the required use flags for the packages.
As i'm a lazy person :) i'll use genkernel-next to do the work even if i'll replace the initramfs with the dracut one.

{{RootCmd|echo "sys-apps/systemd cryptsetup" >> /etc/portage/package.use}}
{{RootCmd|echo "sys-boot/grub device-mapper" >> /etc/portage/package.use}}
{{RootCmd|echo "sys-fs/cryptsetup static kernel -gcrypt" >> /etc/portage/package.use}}
{{RootCmd|echo "sys-kernel/genkernel-next cryptsetup" >> /etc/portage/package.use}}
{{RootCmd|echo "sys-kernel/dracut systemd device-mapper" >> /etc/portage/package.use}}


Next unmask the packages (Please change the keyword as needed for your system).
We'll use the latest available versions.

{{RootCmd|echo "sys-fs/btrfs-progs ~amd64" >> /etc/portage/package.keywords}}
{{RootCmd|echo "sys-boot/grub:2 ~amd64" >> /etc/portage/package.keywords}}
{{RootCmd|echo "sys-fs/cryptsetup ~amd64" >> /etc/portage/package.keywords}}
{{RootCmd|echo "sys-kernel/genkernel-next ~amd64" >> /etc/portage/package.keywords}}
{{RootCmd|echo "sys-kernel/gentoo-sources ~amd64" >> /etc/portage/package.keywords}}

install the required packages

{{RootCmd|emerge -av systemd grub:2 cryptsetup genkernel-next btrfs-progs dracut gentoo-sources}}


If this installs newer kernel sources, please change the symlink either using <code>eselect kernel</code> or do it manually.


== Preparing for encryption ==
As we'll use a keyfile to unlock the partitions we'll now create one (paranoid settings).

{{RootCmd|dd if{{=}}/dev/random of{{=}}/root/secretkey bs{{=}}1 count{{=}}4096}}
{{RootCmd|chmod 0400 /root/secretkey}}


== Preparing the first disk ==

=== Dealing with the software raid ===

Remove <code>/dev/sda</code> drive from md array

{{RootCmd|mdadm --manage /dev/md1 --fail /dev/sda}}
{{RootCmd|mdadm --manage /dev/md1 --remove /dev/sda}}
{{RootCmd|mdadm --zero-superblock /dev/sda}}


=== Partition the drive ===

We create a bios boot partition and use the remaining space for the root partition.

{{RootCmd|gdisk /dev/sda|output=<pre>

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048            8191   3.0 MiB     EF02  BIOS boot partition
   2            8192       250069679   119.2 GiB   8300  Linux filesystem</pre>}}


=== Encrypt partitions ===

First we'll format the partitions

{{RootCmd|cryptsetup luksFormat -s 512 -c aes-xts-plain64  /dev/sda1}}
{{RootCmd|cryptsetup luksFormat -s 512 -c aes-xts-plain64  /dev/sda2}}


Next we add the keyfile to the root partition
{{RootCmd|cryptsetup luksAddKey /dev/sda2 /root/secretkey}}


Finally we open the root partition
{{RootCmd|cryptsetup open -d /root/secretkey /dev/sda2 luks-1}}

=== Create filesystem, mountpoints and subvolumes ===

Now we format the mapped partition.
{{RootCmd|mkfs.btrfs -L BTROOT /dev/mapper/luks-1}}


Next we create the mountpoints
{{RootCmd|mkdir /mnt/btrfsmirror}}
{{RootCmd|mkdir /mnt/newroot}}
{{RootCmd|mkdir /mnt/newroot/home}}
{{RootCmd|mkdir /mnt/newroot/boot}}


Now the subvolumes
{{RootCmd|btrfs subvol create /mnt/btrfsmirror/activeroot}}
{{RootCmd|btrfs subvol create /mnt/btrfsmirror/home}}
{{RootCmd|btrfs subvol create /mnt/btrfsmirror/boot}}

And finally we mount the whole stuff
{{RootCmd|mount -t btrfs -o defaults,noatime,compress{{=}}lzo,autodefrag /dev/mapper/luks-1 /mnt/btrfsmirror}}
{{RootCmd|mount -t btrfs -o defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}activeroot /dev/mapper/luks-1 /mnt/newroot}}
{{RootCmd|mount -t btrfs -o defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}home /dev/mapper/luks-1 /mnt/newroot/home}}
{{RootCmd|mount -t btrfs -o defaults,noatime,subvol{{=}}boot /dev/mapper/luks-1 /mnt/newroot/boot}}


== Hot copy ==

We'll now mount our running system onto <code>/mnt/rawroot</code> and copy everything over.
{{RootCmd|mkdir /mnt/rawroot}}
{{RootCmd|mount --bind / /mnt/rawroot}}
{{RootCmd|cd /mnt/rawroot}}
{{RootCmd|tar cvpf - . {{!}} (cd /mnt/newroot; tar xpf -)}}


== Chroot ==

=== Enter the chroot ===

We now need to chroot into <code>/mnt/newroot</code> and do the usual chroot stuff.

{{RootCmd|cp -L /etc/resolv.conf /mnt/newroot/etc/}}
{{RootCmd|mount -t proc proc /mnt/newroot/proc}}
{{RootCmd|mount --rbind /sys /mnt/newroot/sys}}
{{RootCmd|mount --rbind /dev /mnt/newroot/dev}}
{{RootCmd|mount --make-rslave /mnt/newroot/sys}}
{{RootCmd|mount --make-rslave /mnt/newroot/dev}}
{{RootCmd|chroot /mnt/newroot /bin/bash}}
{{RootCmd|env-update && source /etc/profile}}
{{RootCmd|export PS1{{=}}"(chroot) $PS1"}}

=== mtab/fstab ===

Check that <code>/etc/mtab</code> contains the following lines and if not, add it:

{{FileBox|filename=/etc/mtab|1=
/dev/mapper/luks-1 / btrfs rw,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}activeroot 0 0
/dev/mapper/luks-1 /home btrfs rw,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}home 0 0
/dev/mapper/luks-1 /boot btrfs rw,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}boot 0 0
}}


Next change <code>/etc/fstab</code> to this:

{{FileBox|filename=/etc/mtab|1=
LABEL{{=}}BTROOT    /mnt/btrfsmirror    btrfs    defaults,noatime,compress{{=}}lzo,autodefrag    0 0
LABEL{{=}}BTROOT    /                   btrfs    defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}activeroot    0 0
LABEL{{=}}BTROOT    /home               btrfs    defaults,noatime,compress{{=}}lzo,autodefrag,subvol{{=}}home    0 0
LABEL{{=}}BTROOT    /boot               btrfs    defaults,noatime,subvol{{=}}boot    0 0
}}


=== Remove md array configuration ===

Next edit <code>/etc/mdadm.conf</code> and remove your array from it.


=== Build kernel and initramfs ===

Now we'll create the kernel with the required configuration.

{{RootCmd|genkernel --luks --btrfs --menuconfig all}}


{{KernelBox|title=Enabling device mapper and crypt target|1=
[*] Enable loadable module support
    Device Drivers --->
        [*] Multiple devices driver support (RAID and LVM) --->
            <*> Device mapper support
            <*> Crypt target support
}}


{{KernelBox|title=Enabling cryptographic API functions for the chiper you used|1=
[*] Cryptographic API --->
    <*> SHA224 and SHA256 digest algorithm
    <*> XTS support
    <*> AES cipher algorithms
    <*> AES cipher algorithms (x86_64)
}}


<!--T:15-->
{{KernelBox|title=Enabling initramfs support|1=
General setup  --->
    [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
}}

=== Crypttab ===

Get the UUID of <code>/dev/sda2</code> and copy it to the clipboard.

{{RootCmd|blkid /dev/sda2}}


Now add it to <code>/etc/crypttab</code>

{{FileBox|filename=/etc/crypttab|1=
luks-1 UUID=e57c4e30-7b2e-457a-af9b-3270d085aae2 /root/secretkey luks
}}

=== Grub2 ===

==== Customize grub2 ====

We'll change <code>/etc/default/grub</code> to fit our needs.

For that we'll add ''rd.luks=1 rd.luks.key=/root/secretkey rd.luks.uuid=luks-<UUID>'' to ''GRUB_CMDLINE_LUNUX'' and add ''GRUB_ENABLE_CRYPTODISK=y'' as new line somwehere.


Now <code>/etc/default/grub</code> should now look like this (i use systemd!):

{{FileBox|filename=/etc/default/grub|1=
...
GRUB_ENABLE_CRYPTODISK=y
GRUB_CMDLINE_LINUX_DEFAULT="real_init=/usr/lib/systemd/systemd rd.luks=1 rd.luks.key=/root/secretkey rd.luks.uuid=luks-26ab8aed-7c84-4993-bfe4-579c83c96b05"
...
}}


==== Install grub2 into MBR ====

{{RootCmd|grub2-install /dev/sda}}

=== TODO ===
I'll finish this post tomorrow. Please be patient, it's late ;)

Here are the plain instructions for those who cannot wait.


Add luks device uuids (UUIDs of the "encrypted"!! partition ex. /dev/sda2) to /etc/crypttab

ex.: 
luks-sda2 UUID=e57c4e30-7b2e-457a-af9b-3270d085aae2 /root/secretkey luks

----------------

Install dracut

Generate new intitramfs

dracut -f -I /etc/crypttab -I /root/secretkey

Move generate initramfs to the genkernel one

----------------

Generate grub.cfg

grub2-mkconfig -o /boot/grub/grub.cfg

Fix newline problems

----------------

Leave chroot and unmount everything

reboot and cross fingers

----------------

After reboot

mdadm --stop /dev/md1

mdadm --zero-superblock /dev/sdb

----------------

Partition the drive

gdisk /dev/sdb

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048            8191   3.0 MiB     EF02  grub2biosboot
   2         	8192       250069679   119,2G      8300  root

----------------

Encrypt partitions

cryptsetup luksFormat -s 512 -c twofish-xts-plain64  /dev/sdb1

cryptsetup luksFormat -s 512 -c twofish-xts-plain64  /dev/sdb2

Add keyfile

cryptsetup luksAddKey /dev/sdb2 /root/secretkey

----------------

Open the partition

cryptsetup open -d /root/secretkey /dev/sdb2 luks-2

----------------

Add device and convert to raid1

btrfs device add /dev/mapper/luks-2 /mnt/btrfsmirror

btrfs balance start -dconvert=raid1 -mconvert=raid1 /mnt/btrfsmirror

----------------

Add rd.luks.uuid to /etc/default/grub

----------------

Add to crypttab

luks-2 UUID=e57c4e30-7b2e-457a-af9b-3270d085aae2 /root/secretkey luks

----------------

Recreate initramfs with dracut

dracut -f -I /etc/crypttab -I /root/secretkey

Move generate initramfs to the genkernel one

----------------

Recreate grub.cfg

grub2-mkconfig -o /boot/grub/grub.cfg

Fix newline problems

DOUBLE CHECK THE UUIDS IN grub.cfg !!!

----------------

Install grub into MBR

grub2-install /dev/sdb

----------------

rm -rf /mnt/newroot

rm -rf /mnt/rawroot

----------------

Reboot
