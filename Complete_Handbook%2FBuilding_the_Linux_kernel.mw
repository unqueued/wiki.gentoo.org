
== Kernel configuration procedure ==

=== Introduction ===

The Linux kernel is the core of the Linux Operating System. It takes care of
resource management (processes, memory, ...), hardware support, networking, file
systems, ... and is therefore one of the most vital parts of the system.

Gentoo offers various kernel sources. Each source is based on the ''vanilla''
kernel source (the one developed by the main kernel developers) and adds in
additional features, hardware support, experimental features, etc. You can pick
whatever kernel source you like for your system (as long as your profile allows
it of course).

When the source code is installed on your system, you still need to configure
and build the kernel before you can use it. The kernel configuration is the
trickiest part since a mistake can lead to an unusable kernel, but trying to
build in too much leads to irrelevant code in your kernel which you'll never
use, take space and might even cause troubles later when there is a kernel bug
in that code.

Luckily, Gentoo offers a tool called '''genkernel''' which configures, builds
and installs a kernel automatically. This might be of interest to you if you
have no idea about configuring kernels, you want a basic kernel configuration
for all your systems, or you require a kernel that can deal with a majority of
hardware.

After configuring the kernel, it is built into an image which your computer
loads in memory when you boot the system. 

=== Picking a kernel source ===

Gentoo maintains a list of [http://www.gentoo.org/doc/en/gentoo-kernel.xml Gentoo kernel packages] which contains a small introduction about the kernel tree.
You can make your choice from this guide, although you can very well pick a
fairly generic one right now and use a different kernel later on - the kernel is
completely interchangeable on a Linux environment so you don't have to decide on
the kernel right here, right now.

The most default, generic kernel source is the '''vanilla-sources'''. This
kernel tree is the one released by the Linux Kernel Developers, unmodified.
Gentoo offers a patched version itself called '''gentoo-sources'''. Using these
sources has the advantage that Gentoo can release a new kernel tree whenever it
deems it necessary.

If you have made your choice, install the kernel sources using '''emerge'''.
Just add the kernel source name as an argument to '''emerge''' and
'''emerge''' will download and extract the kernel sources on your system:

{{RootCmd|emerge <kernelsources>}}

== Building the kernel ==

=== Automated build process ===

If you don't want all the hassle surrounding the kernel installation, you can
install '''genkernel''' and then have '''genkernel''' configure, build and
install the Linux kernel for you. This process is quite simple:

{{RootCmd|emerge genkernel
| genkernel all}}

However, '''genkernel''' is a lot more powerful than this. With this tool, you
can maintain your personal kernel configuration and let the tool rebuild newer
kernel versions with your settings. You can enable specific features (like
bootsplash, lvm2, evms2, raid, ...) and tweak the compiler settings used during
the kernel build process (which ''differs'' from the settings placed in
{{Path|make.conf}}!).

For more information on '''genkernel''', please read the [http://www.gentoo.org/doc/en/genkernel.xml Genkernel guide].

=== Manual build process ===

The manual build process consists out of three steps:
* configuring the kernel, * building the kernel, and* installing the kernel
To configure the kernel, go to {{Path|/usr/src/linux}} and run
'''make menuconfig'''. You will get a dialog-based interface where you can
configure your kernel.

Configuring a kernel isn't hard if you know what hardware you have and what
features you want - but then again, if all this is new to you, finding out what
features you want or need can be time consuming.

The kernel configuration dialogs has a good ''Help'' built-in which even
includes search functionality (very useful if you want to search for the
location of that network card you have but can't seem to place in the
configuration structure). 

It is not our intention to describe the kernel configuration process for
you - there are several guides about this topic on the Internet and if you
really aren't able to succesfully configure a kernel, use '''genkernel''' for
the time being.

When you're finished with the configuration part, build the kernel by running
'''make''' (hold on, we'll do this together with the next step). '''make''' 
is a tool that reads in a script called {{Path|Makefile}}
in the directory you are in. {{Path|Makefile}}s are very powerful when used
for building software since they are able to only (re)build those parts that
need to be (re)build instead of building the entire software over and over
again.

To finish the kernel build process, you need to copy over the resulting kernel
image to the boot partition and install the kernel modules you have selected.
The location of the kernel image depends on the architecture you're using. The
following table gives an overview of possible kernel images with the commands
needed to build and install the kernel:

{| class="wikitable" style="text-align: left;"
|- 
! Architecture
! Image Location
! Build Command
|- 
| alpha
| {{Path|arch/alpha/boot/vmlinux.gz}}
| '''make && make modules_install && make boot'''
|- 
| amd64
| {{Path|arch/x86_64/boot/bzImage}}
| '''make && make modules_install'''
|- 
| hppa
| {{Path|vmlinux}}
| '''make && make modules_install'''
|- 
| mips
| {{Path|vmlinux}}
| '''make && make modules_install'''
|- 
| ppc Apple/IBM
| {{Path|vmlinux}}
| '''make && make modules_install'''
|- 
| ppc Pegasos
| {{Path|arch/ppc/boot/images/zImage.chrp}}
| '''make && make modules_install'''
|- 
| ppc64
| {{Path|vmlinux}}
| '''make && make modules_install'''
|- 
| sparc32
| {{Path|arch/sparc/boot/image}}
| '''make && make modules_install'''
|- 
| sparc64
| {{Path|arch/sparc64/boot/image}}
| '''make && make image modules_install'''
|- 
| x86
| {{Path|arch/i386/boot/bzImage}}
| '''make && make modules_install'''
|-
|}

The build command is divided in two parts - the '''make''' instruction we've
discussed before and a specific instruction to finish off with some additional
steps. The separation is made with the '''&&''' string. This is a
specific operator to the shell, telling the system to continue with the next
command ''if'' the previous one didn't fail. A similar operator is '''||'''
which tells the system to execute the next command if the previous one
''did'' fail.

Now, execute the build command to create the kernel image. When the process has
finished, copy over the file to {{Path|/boot}}. It is wise to give the
kernel image file a good name in {{Path|/boot}} so that you can distinguish
one kernel from another. A common used naming scheme is
{{Path|kernel-<version>}}. The next example copies over
an x86 kernel image to {{Path|/boot/kernel-2.6.12-gentoo-r6}}:

{{RootCmd|cp arch/i386/boot/bzImage /boot/kernel-2.6.12-gentoo-r6}}
