<languages />
<translate>

Next to the usual support for ebuilds, portage supports building and installing binary packages.
This guide explains how to create them, how to install them and how to setup a binary package server.

== Preface ==

In this guide, the following terminology is used:

; binhost or binary package server
: The system that creates and redistributes binary packages.
; client system
: The system that downloads and installs binary packages.

All tools used in this guide are part of {{Package|sys-apps/portage}}, unless otherwise stated.

The guide is structured as follows:
# The first part outlines some use cases for binary packages and binary package servers
# The second part describes how to create binary packages on a Gentoo system
# The third part describes how to redistribute the binary packages
# The fourth part covers the configuration and typical workflow for client systems
# Finally, the last part covers advanced binary package topics.

== Rationale ==

There are many reasons why some administrators like using binary package installations in Gentoo.

=== Keeping similar systems updated ===

Having to compile everything from source can become time consuming at times. Maintaining
several similar systems, possibly some of them rather slow, can be much easier if only
one system has to compile everything from source and the other systems reuse the binary packages.

=== Doing safe updates ===

For mission critical systems it is important to stay usable as much as possible. This can be done
by a staging server that performs all updates first and once the staging server is in a good state
updates can be applied to the critical system.

A variant of this approach is to do the updates in a chroot on the same system and use the binaries
created there on the real system.

=== As a backup ===

Sometimes binary package are the only way of recovering a broken system (i.e. broken compiler).
Having them around either on a binary package server or locally can be of great help.

=== Updating very old systems ===

The task of updating very old systems can be greatly eased using binary packages. It is usually easier to install binary packages as those don't require the build time dependencies to be installed / updated and the failures in the build process for them can be avoided.

== Creating binary packages ==

There are three main methods for creating binary packages:
# After a regular installation, using <code>quickpkg</code>
# Explicitly during an emerge operation by using the <code>--buildpkg (-b)</code> option
# Automatically through the use of the <code>buildpkg</code> portage feature

All three methods will create a binary package in the directory pointed to by the <code>PKGDIR</code> variable (which defaults to {{Path|/usr/portage/packages}}).

=== Using quickpkg ===

The <code>quickpkg</code> application takes one or more dependency atoms (or package sets) and creates binary packages for all ''installed'' packages that match the atom.

For instance, to create binary packages of all installed GCC versions:

{{RootCmd|quickpkg sys-devel/gcc}}

To create binary packages of all installed packages, use the <code>*</code> glob:

{{RootCmd|quickpkg "*/*"}}

There is a caveat with this method though: it relies on the installed files, which can be a problem in case of configuration files. Administrators often change configuration files after installing software. Because this could leak out important or perhaps even confidential data into the packages, <code>quickpkg</code> by default does ''not'' include configuration files that are protected through the CONFIG_PROTECT method. To include those as well, use the <code>--include-config</code> or <code>--include-unmodified-config</code> options.

=== Using the --buildpkg emerge option ===

When installing software using <code>emerge</code>, portage can be asked to create binary packages as well by using <code>--buildpkg (-b)</code>:

{{Emerge|params+=--buildpkg|sys-devel/gcc}}

It is also possible to ask portage to ''only'' create a binary package but ''not'' to install the software on the live system. For this, the <code>--buildpkgonly (-B)</code> option can be used:

{{Emerge|params+=--buildpkgonly|sys-devel/gcc}}

The latter approach however requires that all build time dependencies are already installed.

=== Automatically using buildpkg feature ===

The most common way is to automatically create binary packages whenever a package is installed by <code>emerge</code>. This is done through the ''buildpkg'' feature, which can be set in {{Path|/etc/portage/make.conf}} like so:

{{File|/etc/portage/make.conf|Enabling buildpkg feature|<pre>
FEATURES="${FEATURES} buildpkg"
</pre>}}

Every time portage installs software, it will create a binary package as well.

=== Excluding creation of some packages ===

It is possible to tell portage not to create binary packages for a select few packages or categories. This is done through the <code>--buildpkg-exclude</code> option to emerge:

{{RootCmd|emerge -uDN @world --buildpkg --buildpkg-exclude "virtual/* sys-kernel/*-sources"}}

This could be used for packages that have little to no benefit in having a binary package available. Examples would be the Linux kernel source packages or upstream binary packages (those ending with ''-bin'' like {{Package|www-client/firefox-bin}}).

== Setting up a binary package host ==

Portage supports a number of protocols for downloading binary packages: FTP, FTPS, HTTP, HTTPS and SSH. This leaves room for many possible binary package host implementations.

There is, however, no out-of-the-box method provided by portage for distributing binary packages. Depending on the requested setup, additional software will need to be installed.

=== Web based binary package host ===

A common approach for distributing binary packages is to create a web based binary package host.

Use a web server (such as {{Package|www-servers/lighttpd}}) and configure it to provide read access to the <code>PKGDIR</code> location.

Then, on the clients, configure the <code>PORTAGE_BINHOST</code> variable accordingly:

{{File|/etc/portage/make.conf|Using a web based binary package host|<pre>
PORTAGE_BINHOST="http://binhost.genfic.com/Packages"
</pre>}}

=== SSH binary package host ===

To provide a more authenticated approach for binary packages, one can consider using SSH.

When using SSH, it is possible to use the portage Linux user's SSH key (without passphraze as the installations need to happen in the background) to connect to a remote binary package host.

To accomplish this, make sure that the portage user's SSH key is allowed on the server:

{{RootCmd|cat portage.id_rsa.pub >> /home/binpkguser/.ssh/authorized_keys}}

The <code>PORTAGE_BINHOST</code> could then look like so:

{{File|/etc/portage/make.conf|Setting up PORTAGE_BINHOST for SSH access|<pre>
PORTAGE_BINHOST="ssh://binpkguser@yourbinhostserver/usr/portage/packages"
</pre>}}

=== NFS exported ===

When using binary packages on an internal network, it might be easier to just export the packages through NFS and mount it on the clients.

The {{Path|/etc/exports}} file could look like so:

{{File|/etc/exports|Exporting the packages directory|<pre>
/usr/portage/packages                            2001:db8:81:e2::/48(ro,no_subtree_check,root_squash) 192.168.100.1/24(ro,no_subtree_check,root_squash)
</pre>}}

On the clients, the location can then be mounted. An example {{Path|/etc/fstab}} entry would look like so:

{{File|/etc/fstab|Entry for mounting the packages folder|<pre>
binhost:/usr/portage/packages      /usr/portage/packages    nfs    defaults    0 0
</pre>}}

== Maintaining a binary package server ==
This chapter covers issues beyond keeping the server updated.

=== Removing outdated binary packages ===
{{Package|app-portage/gentoolkit}} provides a tool called 'eclean' that does exactly this.

The following command will remove all binary packages that have no corresponding ebuild.
{{RootCmd|eclean packages}}

For more details please read the [[Eclean]] article.

A less customizable option is 'qpkg' from {{Package|app-portage/portage-utils}}.
{{RootCmd|qpkg -c}}

=== Recreating / updating the Packages file ===
PKGDIR contains a file called Packages. This file is a cache for the metadata of all binary packages in PKGDIR. The file is updated whenever portage adds a binary package to PKGDIR. Similarly, eclean updates it when it removes binary packages.

If for some reason binary packages are simply deleted or copied into PKGDIR or the Packages get corrupted or deleted, then it needs to be updated / recreated. This is done using 'emaint.

{{RootCmd|emaint binhost --fix}}

== Installing binary packages ==

=== Other configuration variables ===

For binary packages to be usable on other systems they must fulfill some requirements.
* First, architecture and [[CHOST]] must match.
* Second, the C(XX)FLAGS have to be chosen in a way that both the binary package server and the client systems can run the binaries.
* Third, USE flags for processor specific features like MMX, SSE,... have to be chosen in a way that all systems have the enabled features, or the packages using these features have to be rebuilt on the client systems from source.


==== PKGDIR ====
The PKGDIR (set in {{Path|make.conf}}) variable decides where binary packages are stored. This directory is always required when using binary packages as the binary packages downloaded from the binary package server will be stored there too.

==== PORTAGE_BINHOST ====
The PORTAGE_BINHOST (set in {{Path|make.conf}}) is a space separated URI list. This way it is possible to use several binary package servers simultaneously. The URI must always point to the place where the Packages file resides on the binary package server.

{{File|/etc/portage/make.conf|PORTAGE_BINHOST example|<pre>
PORTAGE_BINHOST="http://some-server.xy/"
# or
PORTAGE_BINHOST="ssh://user@some-server.xy/usr/portage/packages"
</pre>}}

The support for multiple binary package servers is somewhat incomplete. If several servers serve a binary package for the same package version, then only the first one will be considered. This can be problematic when these binary packages differ in their USE configuration and the USE configuration of a later binary package would match the systems configuration.

==== FEATURES ====
The 'getbinpkg' feature tells portage to always use the configured binary package server. Enabling this feature is equivalent to the emerge option -g (see below).

The 'binpkg-logs' controls if log files for successful binary package installs should be kept. It is only relevant if PORT_LOGDIR is set. It is enabled by default.

=== emerge options ===
There are four options that tell portage to use binary packages. Some restrict portage to local binary packages already present in PKGDIR, some also allow fetching them from binary package servers. They also decide if only binary packages should be considered or both ebuilds and binary packages should be used.

For local binary packages located in $PKGDIR and ebuilds use:
--usepkg (-k)

For local binary packages located in $PKGDIR only (the emerge will not proceed if one binary package is missing):
--usepkgonly (-K)

For local binary packages located in $PKGDIR, remote binary packages at $BINHOST and ebuilds:
--getbinpkg (-g)

For local and remote binary packages only:
--getbinpkgonly (-G)

The options ignoring ebuilds require binary packages to be present for every needed package or 'emerge' will report an error. These options are useful to sync a system against a binary package server while avoiding any compilation on the client system.


==== Excluding binary packages ====
Sometimes (when using -k or -g) it is desirable to use an ebuild over a binary package. This can be accomplished with the --usepkg-exclude option. All binary packages given with this option will be ignored.

Example:
{{RootCmd|emerge -uDNg @world --usepkg-exclude "sys-kernel/gentoo-sources virtual/*"}}

==== Reinstalling changed binary packages ====
The --rebuilt-binaries option will reinstall every binary that has been rebuild since the package was installed. This is useful in case rebuilding tools like revdep-rebuild or python-updater are run on the binary package server.

A related option is --rebuilt-binaries-timestamp. It causes emerge not to consider binary packages for a re-install if those binary packages have been built before the given time stamp. This is useful to avoid re-installing all packages, if the binary package server had to be rebuild from scratch.

== Advanced topics==

=== Creating snapshots of PKGDIR ===
When deploying binary packages for a large number of client systems it might become worthwhile
to create snapshots of PKGDIR. The client systems then don't use PKGDIR directly but use binary
packages from the snapshot.

Snapshots can be created using the {{Path|/usr/lib64/portage/bin/binhost-snapshot}} tool.

It takes four arguments, a source directory (PKGDIR), a target directory that must not exist,
a URI and a binary package server directory.

What then happens is that PKGDIR gets copied to the target dir. In the binary package server directory a packages file is created which contains the provided URI.

Client systems need to use an URI that points to the binary package server directory. From there they will be redirected to the URI that was given to binhost-snapshot. This URI has to refer to the target directory.

=== The binary package format ===
Binary packages created by portage have the file name ending tbz2. These files consist of two parts an .tar.bz2 archive containing the files that will be installed on the system and an xpak archive containing the metadata, the ebuild and the environment file. See 'man xpak' for a description of the format.

==== Taking a tbz2 apart ====
In {{Package|app-portage/portage-utils}} some tools exists, to that are able to split or create tbz2 and xpak files.

The following command will split the tbz2 into a tar.bz2 and an xpak file.
{{Cmd|qtbz2 -s <package>.tbz2}}

The xpak file can be examined using qxpak.
List the contents:

{{Cmd|qxpak -l <package>.xpak}}

The next command will extract a file called USE which contains the enabled use flags for this package.

{{Cmd|qxpak -x package-manager-0.xpak USE}}

=== The PKGDIR layout ===
The currently used format version 2 has the following layout.

{{Code|PKGDIR layout version 2|<pre>
PKGDIR
  |
  |--> Packages
  |--> <category>*
        |
	|--> <pkgname-version>.tbz2*
</pre>}}

Binary package server clients are pointed to PKGDIR.

As described earlier the Packages file is a metadata cache for the contained binary packages. This greatly improves dependency resolution speed over format 1.

The old format version 1, which should no longer be used has the following layout.

{{Code|PKGDIR layout version 1|<pre>
PKGDIR
  |
  |--> All/<pkgname-version>.tbz2
  |--> <category>*
	|
	|--> symlinks to ../All/<pkgname-version>.tbz2
</pre>}}

Portage still supports this format and falls back to it if the Packages file does not exist.

=== Quickunpkg ===
Zoobab wrote a simple shell tool named [https://github.com/zoobab/quickunpkg quickunpkg] to quickly unpack tbz2 files.

</translate>

[[Category:Portage]]
