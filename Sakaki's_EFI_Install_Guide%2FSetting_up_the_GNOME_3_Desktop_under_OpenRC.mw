<!-- Page: Setting_up_the_GNOME_3_Desktop_under_OpenRC -->

<span id="setup_gnome_desktop">In this section</span>, we'll be setting up {{Highlight|GNOME 3}} on your machine.

GNOME 3 is a feature-rich desktop environment provided by the [https://www.gnome.org Gnome Project]. It is one of the most widely-used Linux desktops. Version 3 has now been stabilized on Gentoo, and the older version 2 is no longer supported (reflecting an upstream decision). Thanks to Dantrell B.'s [https://github.com/dantrell/gentoo-project-gnome-without-systemd patchset] (a variant of which is used by [http://www.funtoo.org Funtoo] in their mainline distribution), users can enjoy GNOME 3 under {{c|OpenRC}} with all features intact.

GNOME's user interface is known as the [[:Wikipedia:GNOME_Shell|"GNOME Shell"]]. It provides core user functions,<ref>[https://wiki.gnome.org/Projects/GnomeShell/CheatSheet GNOME Shell Cheat Sheet"</ref> such as:
* launching applications, 
* switching windows and desktops, 
* searching for programs and files,
* notification management, etc.
and uses accelerated, modern-looking graphics:

[[File:GNOME_Shell_3.12.png|thumb|none|400px|GNOME Shell v3.12 in Overview Mode]]

For more information about GNOME, see its [https://www.gnome.org official site] and [[:Wikipedia:GNOME|Wikipedia page]]. A list of GNOME releases may be found [[:Wikipedia:GNOME#Releases|here]].

As of the time of writing, the [[:Wikipedia:X_Window_System|X Window System ("X11")]] is still the most usual platform on which to deploy the GNOME 3 environment (although it is slowly being transitioned to use the more lightweight [[:Wikipedia:Wayland_(display_server_protocol)|Wayland]] compositor).

Accordingly, the process we'll be following in this section is:
# Adding a regular (non-root) user;
# Installing X11;
# Temporarily installing a simple X11 window manager, and a few applications, for test purposes;
# Reconfiguring the kernel if necessary (to include missing graphic drivers etc.) and recompiling using {{c|buildkernel}};
# Installing GNOME prerequisites as required by Dantrell B.'s overlays;
# Installing GNOME 3 and key applications; then
# Testing GNOME 3, and refining settings.

This section has no direct equivalent in the Gentoo Handbook (although the part about adding a user reflects the [[Handbook:AMD64/Installation/Finalizing#User_administration|"User Administration"]] section from Chapter 11, and the X11 troubleshooting section has elements of the [[Handbook:AMD64/Installation/Kernel#Default:_Manual_configuration|"Default: Manual (Kernel) Configuration"]] section from Chapter 7). 

{{Note|You may find the article [[GNOME/Guide{{!}}"GNOME Configuration HOWTO"]] (from the Gentoo wiki) useful background reading.}}

{{Note|The transition from GNOME 2 to 3 has caused some controversy in the Linux community, as it involves a significant shift away from the more 'traditional' desktop metaphor (see [[:Wikipedia:Controversy_over_GNOME_3{{!}}this Wikipedia article]] for example). And, until the advent of Dantrell B.'s patchset, forced you to use {{c|systemd}}...

If the newer look is not for you, don't despair. Although GNOME 2 is no longer supported in Gentoo, other similar desktops are; for example:
* [[:Wikipedia:LXDE{{!}}LXDE]] (via package {{Package|lxde-base/lxde-meta}}), 
* [[:Wikipedia:XFCE{{!}}XFCE]] (via package {{Package|xfce-base/xfce-meta}}) etc. 

A further alternative is to use [[KDE]] with OpenRC. Reportedly, it is possible to install this successfully (with EFI, secure boot etc.) by using this guide (together with the relevant [[KDE{{!}}Gentoo Wiki page]]) as a basis,  but making the obvious changes where needed (e.g., ''not'' installing the {{c|dantrell-gnome}} overlays, selecting {{c|default/linux/amd64/13.0/desktop/kde}} as the profile etc.)

However, installing any of the above is currently beyond the explicit scope of this guide. In what follows, I'm going to assume you want to use the GNOME 3 desktop.}}

Right, let's get started!

{{Important|This chapter is only for those users who decided [[../Building_the_Gentoo_Base_System_Minus_Kernel#choose_systemd_or_openrc{{!}}earlier]] to target {{c|OpenRC}} init, rather than {{c|systemd}}. It is part of the 'alternative track' set of chapters. If you are here by mistake, [[../Setting_up_the_GNOME_3_Desktop{{!}}click here]] to go to the default ({{c|systemd}}) version of this page.}}

== <span id="add_regular_user">Adding a User for Daily Use</span> ==

Per the [[Handbook:AMD64/Installation/Finalizing#User_administration|Gentoo Handbook]], it is strongly recommended to set up a user for day-to-day use on your machine. Let's do that now. <span id="setup_regular_user">Issue (via the {{c|ssh}} connection from the helper PC)</span>:
{{RootCmd
|useradd --create-home --groups users,wheel,portage,lp,adm,audio,cdrom,disk,usb,video --shell /bin/bash --comment "sakaki" sakaki
|passwd sakaki
|prompt=koneko <span style{{=}}"color:royalblue;">~ #</span>
|output=<pre>
New password: <enter your new password>
Retype new password: <enter your new password again>
passwd: password updated successfully
</pre>
}}
{{Note|Obviously, substitute your real name (for {{c|"sakaki"}}) and desired username (for {{c|sakaki}})  in the above commands. You can also define multiple users at this point if you like.}}
{{Important|Be sure to write this password down somewhere safe! You will require it to log in later.}}
{{Note|Feel free to add or remove groups as required in the {{c|useradd}} command - the above set is a reasonable starting point for a 'power user' under {{c|OpenRC}} in Gentoo. See the description below for further information.}}

The meaning of those {{c|useradd}} options is as follows:

{| class="wikitable"
|-
! Parameter !! Short Form !! Meaning
|-
| {{c|--create-home}} || {{c|-m}} || Create the user's home directory if it does not already exist.
|-
| {{c|--groups}} || {{c|-G}} || Specify a set of supplementary groups for the user. By default on Gentoo, when a user is created, a new group of the same name will also be created, and become that user's [https://www.linode.com/docs/tools-reference/linux-users-and-groups#working-with-groups primary group]. The additional groups specified here have the following function:<ref>[https://www.debian.org/doc/manuals/securing-debian-howto/ch12.en.html#s-faq-os-users ''Securing Debian Manual'': Chapter 12: "Operating system users and groups"]</ref><ref>Ubuntu Wiki: [https://wiki.ubuntu.com/Security/Privileges "Privileges"]</ref><ref>Debian GNU/Linux Desktop Survival Guide: [http://www.togaware.com/linux/survivor/Standard_Groups.html "Standard Groups"]</ref><ref>Gentoo Handbook: [[Handbook:AMD64/Installation/Finalizing#Adding_a_user_for_daily_use|"Installation/Finalizing": Adding a user for daily use]]</ref>
{| class="wikitable"
|-
! Group !! Description
|-
| {{c|users}} || This is the standard group for users.
|-
| {{c|wheel}} || Members of this group can use {{c|su}} to masquerade as other users (including the {{c|root}} user), provided they know the appropriate password.
|-
| {{c|portage}} || Members of this group can perform {{c|emerge --pretend}} operations, and access {{c|portage}} log files.
|-
| {{c|lp}} || Members of this group can use printers attached to the system (important for Bluetooth printers too).<ref>ArchLinux Wiki: [https://wiki.archlinux.org/index.php/bluetooth#Installation "Bluetooth: Installation"]</ref>
|-
| {{c|adm}} || Members of this group have read access to many files in the {{Path|/var/log}} directory.
|-
| {{c|audio}} || Members of this group can access audio devices.
|-
| {{c|cdrom}} || Members of this group can administer printers attached to the system.
|-
| {{c|disk}} || Members of this group have 'raw' access to disks.
|-
| {{c|usb}} || Members of this group can access USB devices.
|-
| {{c|video}} || Members of this group can access video devices.
|}
|-
| {{c|--shell}} || {{c|-s}} || Specify the user's login shell. We've used [[:Wikipedia:Bash_(Unix_shell){{!}}bash]] here, as it is the default shell in Gentoo Linux.
|-
| {{c|--comment}} || {{c|-c}} || A short description of the login; most commonly the user's full name (such as "John Doe").
|}

{{Note|There are a number of other software groups that you may wish to add your user(s) to over time, as and when you emerge the specific packages. For example, if you use [[VirtualBox{{!}}VirtualBox]], you'd need to add your user to the {{c|vboxusers}} group; if running this install as a VirtualBox ''guest'', you'd need to add your user to the {{c|vboxguest}} group. [https://wiki.archlinux.org/index.php/users_and_groups#Software_groups This wiki entry] has a useful list of this type of group (and instructions for how to add and remove users from a group).}}

== <span id="install_x11">Installing X11</span> ==

As we'll be using X11<ref name="x11_guide">Wikibooks: [https://en.wikibooks.org/wiki/Guide_to_X11 ''Guide to X11'']</ref> as the underlying graphical platform for GNOME, we'll install it next.

As [[../Building_the_Gentoo_Base_System_Minus_Kernel#second_virtual_console|before]], since some of the next steps will involve lengthy emerges, we'll use {{c|screen}}, and <span id="another_second_console">setup a second virtual console</span>, which will be let us monitor progress using {{c|showem}}. Issue:
{{RootCmd
|screen
|export PS1{{=}}"(1) $PS1"
|prompt=koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
to start {{c|screen}}. Then, press {{Key|Ctrl}}{{Key|a}} then {{Key|c}} to start a new virtual console, and in that new console enter:
{{RootCmd
|export PS1{{=}}"(2) $PS1"
|prompt=koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
Now hit {{Key|Ctrl}}{{Key|a}} then {{Key|p}} to get back to the original console.

Now, since you have already set up the necessary [[../Installing_the_Gentoo_Stage_3_Files#video_cards_variable|{{c|VIDEO_CARDS}}]] and [[../Installing_the_Gentoo_Stage_3_Files#input_devices_variable|{{c|INPUT_DEVICES}}]] variables in {{Path|/etc/portage/make.conf}} [[../Installing_the_Gentoo_Stage_3_Files#setup_make_conf|earlier]], we can now proceed to install the X-server itself. Issue:
{{RootCmd
|emerge --ask --verbose --oneshot x11-base/xorg-server
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
|output=<pre>
... additional output suppressed ...
Would you like to merge these packages? [Yes/No] <press y, then press Enter>
... additional output suppressed ...
</pre>
}}
and the X11 server will be downloaded and installed. Note that we use {{c|--oneshot}} here to avoid adding it to your [[World set (Portage){{!}}@world]] set (this is slightly cleaner, as it will become a dependency of GNOME, once it is installed later).
{{Note|Just as [[../Building_the_Gentoo_Base_System_Minus_Kernel#use_showem{{!}}before]], you can temporarily switch to the second console to watch the progress with {{c|showem}}, if you like. Use {{Key|Ctrl}}{{Key|a}} then {{Key|n}} to switch to the second console, and {{Key|Ctrl}}{{Key|a}} then {{Key|p}} to return back when done.}}
{{Note|<span id{{=}}"virtualbox_hints">If you are installing onto a [[VirtualBox]] client</span> (and this '''won't''' apply to most readers, who will instead be installing onto a 'real' target PC), please note the following:
* You cannot simply set <code>VIDEO_CARDS{{=}}"vesa"</code> when using VirtualBox with EFI emulation turned on.<ref>Red Hat Bugzilla: [https://bugzilla.redhat.com/show_bug.cgi?id{{=}}742695 "EFI install in VirtualBox results in text install "]</ref> You need to use <code>VIDEO_CARDS{{=}}"virtualbox"</code> instead.
* Under EFI boot, you may find it more reliable to use {{c|ALSA Audio Driver}} / {{c|Intel HD Audio}} on your virtual machine (selectable in the VirtualBox control panel, under "Audio").
* It is generally useful to {{c|emerge}} the {{Package|app-emulation/virtualbox-guest-additions}} in your guest (and set it to start on boot), to enable enhanced services (this does not entail installing any binary blobs). Also, if you do use this package, also remember to add your user(s) to the {{c|vboxguest}} group.
* The VirtualBox video drivers are notoriously awkward to {{c|emerge}} with parallelism and it is possible they will break your {{Package|x11-base/xorg-server}} build. '''If''' this occurs, just retry as follows (note the explicit citation of {{Package|x11-base/xorg-drivers}}, to ensure that these are correctly built):
{{RootCmd
|MAKEOPTS{{=}}"" emerge --verbose --oneshot x11-base/xorg-drivers x11-base/xorg-server
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>}}}}

== <span id="temp_install_twm">Temporarily Installing an X11 Window Manager and Applications</span> ==

To be <span id="install_x_test_apps">able to test</span> out X11, we'll need to install a [[:Wikipedia:Window_manager|window manager]], and a few X11 applications.

To keep things simple here, we'll use the (minimalist) [[:Wikipedia:Twm|Tab Window Manager (TWM)]] ({{Package|x11-wm/twm}}), and the following apps:
* {{Package|x11-apps/xsetroot}}: a background ('root') window parameter setting utility for X;
* {{Package|x11-apps/xclock}}: a simple clock display for X; and
* {{Package|x11-terms/xterm}}: the standard terminal emulator for X.

Issue:
{{RootCmd
|emerge --ask --verbose x11-wm/twm x11-terms/xterm x11-apps/xclock x11-apps/xsetroot
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
|output=<pre>
... additional output suppressed ...
Would you like to merge these packages? [Yes/No] <press y, then press Enter>
... additional output suppressed ...
</pre>
}}
These are small programs, and shouldn't take long to download, compile or install.

Next, reload your environment to avoid issues when starting the X server. Issue:
{{RootCmd
|env-update && source /etc/profile && export PS1{{=}}"(1) $PS1"
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
Press {{Key|Ctrl}}{{Key|a}} then {{Key|n}} to switch to the second virtual console, and do the same there:
{{RootCmd
|source /etc/profile && export PS1{{=}}"(2) $PS1"
|prompt=<span style{{=}}"color:gray;">(2)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
Then press {{Key|Ctrl}}{{Key|a}} then {{Key|p}} to revert to the first virtual console again.

Next, we need to tell X11 what window manager and apps to use whenever it starts up. The {{c|.xinitrc}} file is used for this purpose. Also, as it's generally not a great idea to run an X server as root, we'll invoke it as the regular user [[#add_regular_user|we've just created]]. Still via {{c|ssh}}/{{c|screen}} console, issue:
{{RootCmd
|su --login sakaki
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
{{Note|Substitute the user name of the regular user you created in the [[#add_regular_user{{!}}earlier step]] for {{c|sakaki}} in the above command.}}

{{Note|The {{c|su}} command, when invoked with {{c|--login}} (as here) provides a console environment similar to that which the specified user would have if s/he had logged in directly. When issued by the superuser ({{c|root}}), as here, no password is required.}}

Next, edit the {{c|.xinitrc}} file in the regular user's home directory. Issue:
{{Cmd
|nano -w ~/.xinitrc
|prompt=sakaki@koneko <span style{{=}}"color:royalblue;">~ $</span>
}}
{{Note|Obviously, the name that you see in the prompt will reflect that of the regular user you added (and which you just {{c|su}}-d to).}}
Put the following text in the {{c|.xinitrc}}:
{{FileBox|filename=~/.xinitrc|title=A basic setup to start TWM and some simple applications|lang=bash|1=
#!/bin/sh
twm &
xsetroot -solid CornflowerBlue &
xclock -geometry 100x100-1+1 &
xterm -geometry 80x50+494+51 &
xterm -geometry 80x20+494-0 &
exec xterm -geometry 80x66+0+0 -name login
}}
Save and exit {{c|nano}}. 

The above shell script simply instructs X to:
* start the Tab Window Manager ({{c|twm}}) as a [[:Wikipedia:Background_process|background process]];
* set the background [[:Wikipedia:X11_color_names#Color_name_charts|colour]] to "CornflowerBlue" (also backgrounded, but will exit quickly);
* show an analogue clock, of size 100x100 pixels, offset 1 pixel from the right side of the screen and 1 pixel from the top (as a background process);
* show a terminal, of size 80x50 ''characters'', offset 494 ''pixels'' from the left side of the screen and 51 pixels from the top (as a background process);
* show a second terminal, of size 80x20 characters, offset 494 pixels from the left side of the screen and 0 pixels from the bottom; and
* then execute a third terminal, of size 80x66 characters, offset 0 pixels from the left, top corner of the screen ([[:Wikipedia:Exec_(computing)|replacing]] the calling process). This terminal has name 'login' and, when terminated, the X session will close.

<span id="first_try_startx">Now we are ready to try it out!</span>

Still on the {{c|ssh}}/{{c|screen}} console, issue:

{{Cmd
|startx
|prompt=sakaki@koneko <span style{{=}}"color:royalblue;">~ $</span>
}}

If all goes well, the screen of your target PC should now be displaying something like the below:
[[File:Twm_screen.png|thumb|none|400px|Simple X11/TWM Desktop and Applications]]
(If you get an error instead, see the following section [[#if_x11_fails|"Troubleshooting a Failed X11 Startup"]]. Any problems are most likely due to a missing kernel graphics driver, which is easy to fix, so don't panic!)

Check that you can move the cursor around (using the target machine's mouse or touchpad), and try typing some simple commands (e.g. "{{c|ls /bin}}") into any of the three terminal windows. When done, move your cursor into the longest (leftmost) terminal, so that it receives the focus (its cursor will switch to a filled rectangle), and type (directly at the target machine's keyboard):
{{Cmd
|exit
|prompt=sakaki@koneko <span style{{=}}"color:royalblue;">~ $</span>
}}
On the {{c|ssh}}/{{c|screen}} console (at your helper PC), you should now see that the {{c|startx}} program has exited (and a lot of status output will have been written to the console too).
{{Note|If you have problems, the X server can always be closed from the {{c|ssh}} window, by typing {{Key|Ctrl}}{{Key|c}}.}}

If you were able to carry out this test, then congratulations, GNOME 3 should be able to work fine on your system. [[#install_gnome3_prerequisites|Jump over the troubleshooting section]] and install it.

If, however, X failed to start up properly, continue reading.

=== <span id="if_x11_fails">Troubleshooting a Failed X11 Startup</span> ===

{{Note|This troubleshooting section is necessary ''only'' if you had problems starting X11. To reiterate: if the above X11 test worked for you, then you should just skip to [[#install_gnome3_prerequisites{{!}}the next section]] now.}}

By far the most likely problem you will encounter with X is a missing graphics driver. Actually, if you've been following this tutorial, and have a reasonably modern machine, then it'll ''likely'' have happened to you. That's because the Gentoo minimal install image kernel (on which your current kernel's configuration has been [[../Configuring_and_Building_the_Kernel#kernel_opts_set_by_buildkernel|based]]) does not have many graphics device drivers configured (either built into the kernel, or as modules) - in order to keep the size of the image small.

Two drivers that are conspicuous by their absence from the minimal install kernel configuration are:
* the {{c|DRM_I915}} driver; this is needed for the integrated [[:Wikipedia:Intel_HD_and_Iris_Graphics|"HD Graphics"]] on many [[:Wikipedia:Ultrabook|Ultrabooks]] (such as the Panasonic CF-AX3);
*the {{c|DRM_NOUVEAU}} driver; this is an open-source driver that [[:Wikipedia:Nouveau_(software)|supports]] many nVidea graphics cards (which are popular on desktop machines).

The easiest way to see if you have had a problem like this is to look at the output from your attempt to run {{c|startx}} (the output in the {{c|ssh}}/{{c|screen}} virtual terminal, that is, not on your target machine's display). 

If you see output such as:
{{GenericCmd|<pre>
... additional output suppressed ...
modprobe: FATAL: Module i915 not found.
... additional output suppressed ...
</pre>
}}
then you know that you have a driver problem. In this case, it is complaining about the {{c|i915}} driver module (dynamic library).

To rectify this, we need to <span id="make_menuconfig_intro">turn on the appropriate drivers</span> and rebuild our kernel. Ensure that the USB boot key is inserted into the target machine, and issue (from the {{c|ssh}}/{{c|screen}} virtual terminal):
{{Cmd
|exit
|prompt=sakaki@koneko <span style{{=}}"color:royalblue;">~ $</span>
}}
to drop back to the {{c|root}} user.
{{Note|You may also find the content of the {{Path|/var/log/Xorg.0.log}} log file useful. Additionally, entering (as root):
{{RootCmd
|lspci {{!}} grep -i VGA
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
and
{{RootCmd
|hwinfo --gfxcard
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
can provide more information about your graphics card. Unfortunately, as of the time of writing, there is no reliable program which will query your hardware and generate an appropriate kernel configuration automatically.}}

Then:
{{RootCmd
|buildkernel --menuconfig
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
to start the kernel rebuild process going. Because you have not specified {{c|--ask}} here, but you ''have'' specified {{c|--menuconfig}}, the process will run through by itself (assuming no errors) to the point where you can modify the kernel configuration using the standard {{c|curses}}-based editor GUI.

The configuration changes you need to make will vary depending on the driver(s) you need to enable. The following is a step-by-step guide for modern laptops (and other PCs) with Intel integrated HD graphics (following [[Intel|this wiki page]]). If you require a different driver, modify these instructions accordingly.

The {{c|menuconfig}} system is a simple tool used to modify Linux kernel configurations (aka "{{c|.config}}" files) in a coherent manner. The tool will not let you make inconsistent choices, and has a useful search facility.

{{Note|For more information on {{c|menuconfig}}, refer to Chapter 4 of Greg Kroah-Hartman's ''Linux Kernel in a Nutshell''<ref name{{=}}"kernel_in_nutshell">Kroah-Hartman, Greg. [http://www.kroah.com/lkn/ ''Linux Kernel in a Nutshell'' (ebook)]. O'Reilly, 2006</ref>, the Gentoo [[Kernel/Configuration{{!}}wiki page]], and Bruce Dubbs' "Considerations when configuring the Linux kernel" from ''Linux from Scratch''<ref>Dubbs, Bruce. [http://www.linuxfromscratch.org/hints/downloads/files/kernel-configuration.txt "Considerations when configuring the Linux kernel"]. 28 May 2009, Linux from Scratch.</ref>.}}

When {{c|menuconfig}} starts up, it will present you with a display similar to the below (your version may vary depending on currently selected options and kernel version):
[[File:Menuconfig_1.png|thumb|none|400px|Initial Display of make menuconfig Application]]

You can navigate the interface as follows:
* Use the up and down arrow keys to move your selection (highlighted in blue) in the top pane;
* Use the left and right arrow keys to traverse the bottom (horizontal) menu, which defines what happens when you press {{Key|Enter}}, viz.:
** <Select> enters a sub-menu, for items (in the top pane) ending with {{c|--->}}, or brings up a text entry box for items which start with round brackets "{{c|()}}";
** <Exit> exits a sub-menu; if at the top level already, asks you whether to save changes (if you have made any) and exits the program; you can also press {{Key|Esc}} then {{Key|Esc}} to perform this action;
** <Help> shows a help screen that is relevant to the (top pane) selection; you can also press {{Key|h}} for this;
** <Save> saves the current configuration; and
** <Load> allows you to load a new configuration.

Items starting with non-round brackets represent features which can be enabled, as follows:
; {{c|[ ]}}, {{c|[*]}} : Square brackets indicate features that are deactivated (blank) or activated (asterisk). Press {{Key|Space}} to toggle status, or {{Key|y}} to activate, {{Key|n}} to deactivate. Activated items are built directly into the kernel; deactivated items are omitted from it entirely.
; {{c|< >}}, {{c|<M>}}, {{c|<*>}} : Angle bracketed items can similarly be deactivated (blank) or activated (asterisk), but can additionally be built as ''modules'' ("{{c|M}}"). In addition to {{Key|Space}}, {{Key|y}} and {{Key|n}}, you can use {{Key|m}} with such items to specify that they should be modularized.
; {{c|{M}}}, {{c|{*}}} : Curly brackets indicate items which ''cannot'' be deactivated (due to another item's dependency). However, they may be activated or modularized (using {{Key|y}}, {{Key|m}} or {{Key|Space}}, as before).
; {{c|-M-}}, {{c|-*-}} : Similarly, hyphens indicate items whose status ''cannot'' be changed (their selection having been forced as the result of another item choice).

{{Note|At times, you may find that certain choices are impossible, despite the bracket coding, because of other choices you have made. For example, you may not be able to activate an element, only modularize it, if one of its dependencies is modularized (rather than selected). In such cases, {{c|menuconfig}} will tell you that your choice is restricted, and why.}}

To search, press {{Key|/}} and then type your search term. This is a very useful facility when looking for missing drivers etc. For example, since we are here looking for the missing {{c|i915}} module, press {{Key|/}} then type in {{c|i915}}, then press {{Key|Enter}} to see the search results:
{|style="background:transparent; color:black" 
|[[File:Menuconfig_2.png|thumb|none|400px|Searching for a Missing Driver...]]
|[[File:Menuconfig_3.png|thumb|none|400px|...And Reviewing the Results]]
|}

{{Note|As mentioned, the following assumes you are adding the necessary Intel {{c|DRM_I915}} driver. If your setup requires a different driver, for example {{c|DRM_NOUVEAU}} (for nVidia cards), you will need to modify these instructions accordingly.}}

You can scroll through the results using the arrow keys. Doing so in this case, we discover that (''inter alia''):
* Four items are returned, of which the first and third ({{c|DRM_I915}}, and {{c|DRM_I915_USERPTR}}) are relevant;
* The output shows that (e.g.) the {{c|DRM_I915}} item (which will appear in the {{Path|/usr/src/linux/.config}} file as {{c|CONFIG_DRM_I915}}) is to be found under the {{c|Device Drivers}} menu, by following down into the {{c|Graphics Support}} submenu. We also see that its prompt in the upper-pane menu will (as is common with this software!) will be distinct from the {{c|DRM_I915}} name (it will actually appear as "{{c|Intel 8xx/9xx/G3x/G4x/HD Graphics}}").
* The dependencies of this driver are also shown (you can drag the {{c|ssh}} terminal window on your helper machine wider to see any that may have been clipped off). Generally, for an item to be available for selection or modularization, ''all'' its dependencies must be satisfied: either selected ({{c|{{=}}y}}, the same as an asterisk) or modularized ({{c|{{=}}m}}). In some cases, items whose dependencies are unsatisfied will not be visible other than through a search like this.

This last point bears repeating, since it confuses many first-time users: {{Highlight|an item will often not even appear in {{c|menuconfig}}'s top pane until its dependencies have been satisfied}}. It would be nice if {{c|menuconfig}} would allow us to activate/modularize "an item and all its dependencies, transitively" from the search results screen, but it currently cannot, so we must perform this depth-first recursion manually.

OK, so let's work through the {{c|DRM_I915}} case as a concrete example. From the search just performed we can see that, of the requirements for {{c|DRM_I915}}, only the {{Highlight|{{c|DRM}}}} item is currently deselected. Well then, let's investigate {{c|DRM}}: we hit {{Key|Enter}} to exit current search, then {{Key|/}} to search again, and type in {{c|DRM}} and press {{Key|Enter}}. The item we want here is the first result term. All its dependencies appear satisfied in the current configuration, and we note also that it appears under "{{c|Device Drivers -> Graphics support}}", and that its prompt is "{{c|Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)}}":

[[File:Menuconfig_40a.png|thumb|none|400px|Search Results for DRM (Dependency)]]

Now we know there are no further unsatisfied dependencies for {{c|DRM_I915}}, we can activate {{c|DRM}}, and then {{c|DRM_I915}} itself.
{{Note|There's a handy shortcut you can often use when searching in {{c|menuconfig}}: if the result you are interested in has a bracketed number shown by it near the left margin, such as (1), (2) etc., then you can simply press the corresponding number key ({{Key|1}}, {{Key|2}}, etc.) to jump *directly* to the item in question. Then, once you're done editing it, pressing {{Key|Esc}} then {{Key|Esc}} will bring you back to the search results again. In the below text, we're going to do things the longhand way, for clarity, but using the number-key shortcuts is usually a better way to go, once you are familiar with the {{c|make menuconfig}} flow.}}
Begin by pressing {{Key|Enter}} to exit the current search, then use the arrow keys to navigate to the "{{c|Device Drivers}}" item (if not visible to begin with, the top pane will scroll as you arrow down), then press {{Key|Enter}} to enter the submenu. Next, repeat the process to select the "{{c|Graphics support}}" item, and press {{Key|Enter}}:

{|style="background:transparent; color:black" 
|[[File:Menuconfig_4.png|thumb|none|400px|Select Device Drivers Menu...]]
|[[File:Menuconfig_5.png|thumb|none|400px|...Then Graphics support Submenu]]
|}

{{Note|If you are unsure of an item, you can press {{Key|?}} when it is highlighted; this will show its help information, including symbol name.m

One other point to bear in mind is that any symbol, for example {{c|DRM_I915}}, will have a {{c|CONFIG_}} prefix attached when written out to a {{c|.config}} file. You will occasionally see these {{c|CONFIG_}} prefixes appear in the help text too (in point of fact, the help for {{c|DRM_I915}} refers to it as {{c|CONFIG_DRM_I915}}). However, don't be confused: {{c|CONFIG_DRM_I915}} is ''the same as'' {{c|DRM_I915}}.

If you do press {{Key|?}} to view an item's help text, just press the {{Key|Enter}} when you are finished reading, to close it and go back.}}

Now, move to the "{{c|Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)}}" item. This is the {{c|DRM}} symbol we want (as just mentioned, you can verify using {{Key|?}} if you like). Press {{Key|y}} to enable it (this causes a number of subitems to appear, and ''also enables this entry itself as a submenu heading'' (not obvious unless you drag your window wider than the default 80 columns, so you can see the {{c|--->}} suffix that appears post-selection):

[[File:Menuconfig_300.png|thumb|none|400px|Selecting Direct Rendering Manager (XFree86 ...)...]]

{{Note|We're taking the approach of selecting required components directly (requesting they be built into the kernel itself), rather than modularizing them, but this is generally not mandatory. {{c|buildkernel}} copies all modules into the initramfs, so whether or not to modularize is ultimately up to you - it will have no effect on your ability to boot (certainly for elements like this that were disabled in the minimal install configuration to begin with).}}

So, now that we have set {{c|DRM}}, we can proceed to enable {{c|DRM_I915}} itself. Navigate down the {{c|Graphics support}} menu, through the new items that appeared when you selected {{c|DRM}}, until you reach the {{c|Intel 8xx/9xx/G3x/G4x/HD Graphics}} item (if you think this feels rather like a 70's era [[:Wikipedia:Adventure_game#Gathering_and_using_items|adventure game]], you're not alone!):

{|style="background:transparent; color:black" 
|[[File:Menuconfig_302.png|thumb|none|400px|Causes Further Menu Items to Appear...]]
|[[File:Menuconfig_303.png|thumb|none|400px|...Such as the Intel i915 Driver]]
|}

You can verify that this is indeed the {{c|DRM_I915}} item, by using using {{Key|?}} if you like; then, press {{Key|y}} to enable it:
{|style="background:transparent; color:black" 
|[[File:Menuconfig_304.png|thumb|none|400px|Finally, Select HD Graphics Driver (DRM_I915)]]
|}

And that's it, you're done. Hit {{Key|Esc}} then {{Key|Esc}} to come back out to the "{{c|Device Drivers}}" menu. Hit {{Key|Esc}} then {{Key|Esc}} again to come back out to the top-level menu. Finally, hit {{Key|Esc}} then {{Key|Esc}} again, to exit the program. When prompted, ensure {{c|<Yes>}} is selected, and press {{Key|Enter}} to save the new configuration and quit {{c|menuconfig}}:
[[File:Menuconfig_17.png|thumb|none|400px|Saving New Configuration and Exiting]]

Once you have exited {{c|menuconfig}}, {{c|buildkernel}} will automatically create a kernel with the newly created configuration, sign it, and copy it over to the boot USB key. Wait for the process to complete (you get the message "{{c|All done!}}"). Then issue:

{{RootCmd
|exit
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
which will close the first {{c|screen}} terminal, then:

{{RootCmd
|exit
|prompt=<span style{{=}}"color:gray;">(2)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
to close the second one. Then, ensure the boot USB key is still inserted in the target machine and restart it, by issuing:
{{RootCmd
|reboot
|prompt=koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
{{Note|If you have problems rebooting with this new kernel, you can follow the instructions [[../Completing_OpenRC_Configuration_and_Installing_Necessary_Tools#revert_to_previous_kernel{{!}}given earlier]] to revert back to the backup (previous) version on the boot USB key - which won't have your configuration changes - and try again.}}
{{Note|<span id{{=}}"kernel_config_shorthand_note">It's useful to</span> relate the process just described to the 'kernel configuration shorthand' you will often see on the Gentoo wiki, and many other places on the web. For example, looking at the [[Intel{{!}}"intel"]] page on the wiki, we read that you need to enable the following kernel options:
{{KernelBox|title=linux-4.4|<pre>
        Device Drivers  --->
            Graphics support  --->
                <*> /dev/agpgart (AGP Support)  --->
                    --- /dev/agpgart (AGP Support)
                    ...
                    -*-   Intel 440LX/BX/GX, I8xx and E7x05 chipset support
                    ...
                ...
                <*> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)  --->
                    --- Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
                    [*]   Enable legacy fbdev support for your modesetting driver
                ...
                <*> Intel 8xx/9xx/G3x/G4x/HD Graphics
                [ ]   Enable preliminary support for prerelease Intel hardware by default
                ...
                -*- Backlight & LCD device support  --->
                ...
</pre>}}
This is really just informing you of the menu locations (and prompts) of the options you need to choose, and how to set them (here, all have asterisks, so implying you should ideally select, rather than modularize). All of the above should be familiar from the process just described, those that we didn't cover are either selected by default on the current Gentoo minimal install kernel configuration, or are automatically selected by {{c|DRM_I915}}.

Generally speaking, when presented with a configuration list like this, you can just work through the menus in the order provided and enable the items - the author will have done the 'depth first' dependency pass for you. However, this isn't foolproof, so if an item referred to in such a list appears missing, simply search for it, and check that its dependencies are set, as we have done above.

Remember also that symbols do get dropped from (and obviously, added to) the kernel configuration set over time, so if you are working from an old set of instructions, a specified item may have been obsoleted and removed. Do an internet search if unsure.

There's some further information about the kernel configuration shorthand notation on the [[Kernel/Gentoo_Kernel_Configuration_Guide#Kernel_configuration_shorthand_notation{{!}}Gentoo wiki]].

In the later part of this tutorial, I will assume that you are able to translate these 'shorthand' kernel configuration recipes, using {{c|buildkernel --menuconfig}}, without spelling out the process step-by-step. If in doubt, please re-read this section. (And if you are reading this now because you were jumped back to this section from a later chapter, you can [[../Final_Configuration_Steps_under_OpenRC#resume_after_menuconfig_tutorial{{!}}click here]] to return - otherwise, just continue reading!)
}}

When the machine restarts, as before, you will need to enter your LUKS keyfile {{c|gpg}} passphrase (the one you created [[../Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#create_gpg_luks_keyfile|earlier]]), directly at the target machine keyboard.

Once this has been completed successfully, and the target machine is restarted, from the helper PC, log back in again via {{c|ssh}}:

{{Cmd
|ssh root@192.168.1.106
|prompt=user@pc2 $
|output=<pre>
Password: <enter root password>
... additional output suppressed ...
</pre>}}
{{Note|Substitute whatever IP address you got back from {{c|ifconfig}} [[../Completing_OpenRC_Configuration_and_Installing_Necessary_Tools#post_reboot_ip{{!}}earlier]] for 192.168.1.106 in the above command. It is possible (although unlikely, with modern DHCP) that the target's IP address will have changed during the reboot. If so, log in directly at the target machine's keyboard, use {{c|ifconfig}} to find out the new address, then issue the above {{c|ssh}} command citing that address. As before, in such a case you may need to clean out any previous record of {{c|ssh}} connections to (other machines at) that new address (since the fingerprints will not match), using:
{{Cmd
|sed -i '/^[^[:digit:]]*192.168.1.106[^[:digit:]]/d' ~/.ssh/known_hosts
|prompt=user@pc2 $}}
obviously substituting the new address for {{c|192.168.1.106}} in the above. Then, be sure to check the fingerprint when prompted (by the subsequent {{c|ssh}} command), against those you noted down [[../Completing_OpenRC_Configuration_and_Installing_Necessary_Tools#note_new_fingerprints{{!}}earlier]].
}}

Then, re-establish {{c|screen}} (enter all commands via the {{c|ssh}} console from the helper PC, unless otherwise stated). Issue:
{{RootCmd
|screen
|export PS1{{=}}"(1) $PS1"
|prompt=koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
to start {{c|screen}}. Then, press {{Key|Ctrl}}{{Key|a}} then {{Key|c}} to start a new virtual console, and in that new console enter:
{{RootCmd
|export PS1{{=}}"(2) $PS1"
|prompt=koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
Now hit {{Key|Ctrl}}{{Key|a}} then {{Key|p}} to get back to the original console.
Log back in as your regular user:
{{RootCmd
|su --login sakaki
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
{{Note|Substitute the user name of the regular user you created in the [[#add_regular_user{{!}}earlier step]] for {{c|sakaki}} in the above command.}}

And now rejoin the tutorial from the [[#first_try_startx|point where you attempted to run {{c|startx}}, above]]. Hopefully, all should be well this time. Good luck!

{{Note|If you are using the i915 driver, you may find that you cannot change the screen brightness, and that the screen appears dim. This issue is addressed [[../Final_Configuration_Steps_under_OpenRC#config_lcd_backlight{{!}}later]] in the tutorial.}}

{{Note|If you still have problems, the Gentoo wiki page on [[Xorg/Guide{{!}}X11 configuration]] may contain some useful pointers. With a modern X setup however, problems are almost always as a result of incorrect kernel configuration (or possibly incorrect [[../Installing_the_Gentoo_Stage_3_Files#video_cards_variable{{!}}{{c|VIDEO_CARDS}}]] or [[../Installing_the_Gentoo_Stage_3_Files#input_devices_variable{{!}}{{c|INPUT_DEVICES}}]] variables in {{Path|/etc/portage/make.conf}}), rather than incorrect X configuration.}}

== <span id="install_gnome3_prerequisites">Installing GNOME 3 Prerequisites</span> ==

Now we need to configure some [https://github.com/dantrell/gentoo-project-gnome-without-systemd#dependencies prerequisites] for GNOME without {{c|systemd}}. Two of these ({{Package|sys-apps/dbus}} and {{Package|sys-auth/consolekit}}) will have already been installed as part of the [[../Building_the_Gentoo_Base_System_Minus_Kernel#update_world|earlier]] {{c|@world}} update under our custom profile. A further two ({{Package|sys-power/pm-utils}} and {{Package|sys-power/acpid}}) will be pulled in automatically as part of the main {{Package|gnome-base/gnome}} emerge, to follow shortly. A fifth, {{Package|x11-base/xorg-server}}, we have just installed explicitly. [[OpenRC]], a sixth prerequisite, is obviously already installed. However, we still need to make sure the necessary services will come up on boot, and that they are started in our current session too.
Issue (from the helper PC {{c|ssh}}/{{c|screen}} terminal):
{{Cmd
|exit
|prompt=sakaki@koneko <span style{{=}}"color:royalblue;">~ $</span>
}}
to get back to the {{c|root}} user, then:
{{RootCmd
|rc-update add dbus default
|rc-update add consolekit default
|rc
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
{{Note|Users installing onto a [[VirtualBox]] client (and this '''won't''' apply to most readers, who will instead be installing onto a 'real' target PC), who set up and started {{Package|app-emulation/virtualbox-guest-additions}} prior to the {{c|X11}} test [[#virtualbox_hints|earlier]], may find that {{c|rc}} complains that {{c|consolekit}} is already running. If so, simply issue:{{RootCmd
|/etc/init.d/dbus stop
|rc
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
}}
In brief, here's what those prerequisites get us:
* '''[[ConsoleKit]]''' is a framework for tracking users, login sessions and 'seats'. It exists primarily to support multi-user setups.
* '''[[D-Bus]]''' is an software component interprocess communication (IPC) system.
* '''[[OpenRC]]''' is of course the dependency-based init system you are targeting with this install (in preference to {{c|systemd}}).
* '''[[Xorg/Guide|The Xorg Server]]''' provides an implementation of the X windowing system, relied on by GNOME.
* '''[[ACPI]]''', the '''a'''dvanced '''c'''onfiguration and '''p'''ower management '''i'''nterface, is a BIOS power-management system. The {{c|acpid}} daemon allows the system to react on special power-related events.
* '''[https://wiki.archlinux.org/index.php/Pm-utils pm-utils]''' is a suspend and powerstate setting framework.

Additionally, it is useful to set up the [[ALSA|{{c|alsasound}}]] service to run on boot (this allows the audio mixer level to be preserved across reboots, something GNOME does not yet seem able to do reliably). To do so, issue:

{{RootCmd
|emerge --ask --verbose media-sound/alsa-utils
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
|output=<pre>
... additional output suppressed ...
Would you like to merge these packages? [Yes/No] <press y, then press Enter>
... additional output suppressed ...
</pre>
}}
then:
{{RootCmd
|rc-update add alsasound boot
|rc
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}

== <span id="install_gnome3">Installing GNOME 3</span> ==

Now that we have everything in place, and the X-server provisioned, we can install GNOME! Let's begin by removing the temporary X window manager and applications (which we installed, for testing purposes only, [[#install_x_test_apps|earlier]]).

Issue:
{{RootCmd
|emerge --ask --verbose --depclean x11-wm/twm x11-terms/xterm x11-apps/xclock x11-apps/xsetroot
|output=<pre>
... additional output suppressed ...
Would you like to unmerge these packages? [Yes/No] <press y, then press Enter>
... additional output suppressed ...
</pre>
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}

{{Note|Using the {{c|--depclean}} option to {{c|emerge}} in this way is a common idiom to safely uninstall packages in Gentoo. If any of the specified [[../Installing_the_Gentoo_Stage_3_Files#atoms_etc{{!}}atoms]] happens to be a dependency of another installed package (even transitively), it will not be removed.}}

Now for GNOME itself. One important decision here is which applications (web browser etc.) to build as part of the 'baseline' set.

{| class="wikitable"
|-
! USE flag
! Recommended
! Description
|-
| <code>bijiben</code>
| {{Yes}}
| Install the {{Package|app-misc/bijiben}} note editor. If targeting GNOME 3.14, you will need to enable this to get a successful build (at the time of writing).
|-
| <code>boxes</code>
| 
| Install the {{Package|gnome-extra/gnome-boxes}} remote and virtual system manager.
|-
| <code>builder</code>
| 
| Install the {{Package|gnome-extra/gnome-builder}} IDE (only present in GNOME 3.16 or greater).
|-
| <code>california</code>
| 
| Install the {{c|gnome-extra/california}} calendar (not in the standard Gentoo packages at time of writing, although present in the Dantrell overlays).
|-
| <code>epiphany</code>
| {{Yes}}
| Install the {{Package|www-client/epiphany}} web browser.
|-
| <code>evolution</code>
| {{Yes}}
| Install the {{Package|mail-client/evolution}} mail client.
|-
| <code>games</code>
| {{Yes}}
| Install various GNOME games ({{Package|games-board/gnome-chess}}, {{Package|games-puzzle/gnome-sudoku}} and many others).
|-
| <code>geary</code>
| 
| Install the {{Package|mail-client/geary}} mail client.
|-
| <code>share</code>
| {{Yes}}
| Install the {{Package|gnome-extra/gnome-user-share}} personal file sharing tool.
|-
| <code>shotwell</code>
| {{Yes}}
| Install the {{Package|media-gfx/shotwell}} photo manager.
|-
| <code>todo</code>
| {{Yes}}
| Install the {{Package|gnome-extra/gnome-builder}} task manager (only present in GNOME 3.18 or greater).
|-
| <code>tracker</code>
| {{Yes}}
| Install the {{Package|app-misc/tracker}} indexer and the GNOME packages that require it, such as {{Package|media-gfx/gnome-photos}}.
|}

Make your own choices, and then add any USE flag changes by adding overrides to the file {{Path|/etc/portage/package.use/gnome-extra-apps}}. For example, since it is generally useful to have a web browser available, per the above recommendations you could elect to add <code>epiphany</code> to the default set.
To do so, issue:
{{RootCmd
|nano -w /etc/portage/package.use/gnome-extra-apps
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
and then place the following text in the file:
{{FileBox|filename=/etc/portage/package.use/gnome-extra-apps|title=Changes to default set of gnome-extra-apps|1=
# Ensure we have at least a simple web browser available in GNOME
>=gnome-base/gnome-extra-apps-3.14 epiphany
}}
Save, and exit {{c|nano}}.
{{Note|Substitute your own choices here, of course. Separate USE flags by spaces, and use a 'minus sign' prefix to turn off a flag that is on by default. Also, don't worry, once GNOME is installed you will still be able to {{c|emerge}} any additional packages you wish, the choice here is really to get a convenient starting set.}}
{{Note|The {{c|ephiphany}} browser is quite basic; as of the time of writing it won't do a great job with sites like YouTube etc. For this, consider installing a full-scale browser such as {{Package|www-client/firefox}} once your system is fully configured and running (but please also have a look at [[../Using_Your_New_Gentoo_System_under_OpenRC#play_mp4_in_gnome{{!}}these later notes]], if you can't see any video at all in {{c|epiphany}}).}}
{{Note|There are some additional GNOME 'quality of life' improvements in Dantrell's patchset (background resolution etc.), which are controlled by USE flags on certain packages. The defaults will probably be suitable for most users, but for more details please see [https://github.com/dantrell/gentoo-project-gnome-without-systemd#configuration-optional here].}}

Right: now we are ready to install GNOME! Issue:
{{RootCmd
|emerge --ask --verbose --keep-going gnome-base/gnome
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
|output=<pre>
... additional output suppressed ...
Would you like to merge these packages? [Yes/No] <press y, then press Enter>
... additional output suppressed ...
</pre>
}}

{{Note|
As [[../Building_the_Gentoo_Base_System_Minus_Kernel#use_showem{{!}}before]], you can switch to the second {{c|screen}} console we prepared [[#another_second_console{{!}}earlier]], to watch the progress (as the files download, build etc.). Hit {{Key|Ctrl}}{{Key|a}} then {{Key|n}} to switch to the second console (you can do this while the {{c|emerge}} is running), and issue:
{{RootCmd
|showem
|prompt=<span style{{=}}"color:gray;">(2)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}

You can now switch back and forward between the two windows as you like (using {{Key|Ctrl}}{{Key|a}} then {{Key|n}} to cycle forwards, and {{Key|Ctrl}}{{Key|a}} then {{Key|p}} to cycle backwards - identical in function here where we only have two windows active), which should give you a good overview of the emerge process as it progresses. You can exit the {{c|showem}} program at any time by issuing {{Key|Ctrl}}{{Key|c}}.
}}

The {{c|emerge}} will take quite some time to complete! Note that the {{c|--keep-going}} option instructs {{c|emerge}} to build as much as possible, even if some errors are encountered. This is useful here because, due to the size of the build, it is possible that you may come across one or two failed packages.

Most often, any failures will be caused by the high level of {{c|make}} parallelism we are using. Accordingly, if, at the conclusion of the above {{c|emerge}}, near the end of the output you see a message that:
{{GenericCmd|
... additional output suppressed ...
 <span style{{=}}"color:red;">*</span> The following <n> packages have failed to build or install:
... additional output suppressed ...
}}
then issue the following command, to re-attempt to build the failed packages, this time ''without'' {{c|make}} parallelism:
{{RootCmd
|MAKEOPTS{{=}}"-j1" EMERGE_DEFAULT_OPTS{{=}}"--jobs{{=}}1" emerge --ask --verbose gnome-base/gnome
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
|output=<pre>
... additional output suppressed ...
Would you like to merge these packages? [Yes/No] <press y, then press Enter>
... additional output suppressed ...
</pre>
}}
(Of course, if the original {{c|emerge}} completed successfully, there is no need to issue the above, but, as {{Package|gnome-base/gnome}} is a meta-package, it is still safe to do so, and ''won't'' cause all the dependencies to be rebuilt.) You may need to repeat this step multiple times to get GNOME emerged successfully (I have found three or four iterations may be necessary). As long as the 'packages to be installed' count keeps falling, keep trying ^-^
{{Note|If, after all this, you ''still'' experience build errors emerging {{Package|gnome-base/gnome}}, you find it useful to refer to [[../Building_the_Gentoo_Base_System_Minus_Kernel#troubleshooting_failed_build{{!}}these earlier notes]]. It is also possible to {{c|emerge}} the smaller package {{Package|gnome-base/gnome-light}} (instead of {{Package|gnome-base/gnome}}), and then add applications later.
}}

Once the process has completed, ensure you are back in the virtual terminal from where you issued the {{c|emerge}} command (i.e., not the {{c|showem}} terminal), and then issue the following to ensure your environment is up-to-date post-install:
{{RootCmd
|env-update && source /etc/profile && export PS1{{=}}"(1) $PS1"
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
Hit {{Key|Ctrl}}{{Key|a}} then {{Key|n}} to go to the second {{c|screen}} console, and do the same there. Issue:
{{RootCmd
|source /etc/profile && export PS1{{=}}"(2) $PS1"
|prompt=<span style{{=}}"color:gray;">(2)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
Then press {{Key|Ctrl}}{{Key|a}} then {{Key|p}} to switch back to the original console again.

You should also ensure that the {{Package|sys-power/acpid}} daemon (which allows the system to react on special power-related events) and the {{Package|app-admin/openrc-settingsd}} daemon (which mimics certain D-Bus systemd services under OpenRC) are added to the default runlevel (and are also started now, if not already running). To do so, issue:
{{RootCmd
|rc-update add acpid default
|rc-update add openrc-settingsd default
|rc
|prompt=<span style{{=}}"color:gray;">(2)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}

Make sure any regular users are members of the {{c|plugdev}} group (if it exists on your target machine; it now should). Issue:
{{RootCmd
|getent group plugdev && gpasswd -a sakaki plugdev 
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
{{Note|Substitute the user name of the regular user you created in the [[#add_regular_user{{!}}earlier step]] for {{c|sakaki}} in the above command. If you add other regular users, be sure to add them to {{c|plugdev}} in a similar manner. This is to allow full access to {{c|NetworkManager}} services, which require the {{c|plugdev}} group.<ref>Gentoo Wiki: [[NetworkManager#Configuration{{!}}"NetworkManager": Configuration]]</ref>}}
If you wish your regular user to be able to play the GNOME games (assuming you installed them [[#install_gnome_games|earlier]]), then issue (this is optional):
{{RootCmd
|getent group games && gpasswd -a sakaki games 
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
{{Note|Again, substitute the user name of the regular user you created in the [[#add_regular_user{{!}}earlier step]] for {{c|sakaki}} in the above command.}}

Next, we need to log back in as our regular user, and try out our new desktop! Issue:
{{RootCmd
|su --login sakaki
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
{{Note|Substitute the user name of the regular user you created in the [[#add_regular_user{{!}}earlier step]] for {{c|sakaki}} in the above command.}}

Next, edit the {{c|.xinitrc}} file in the regular user's home directory. Issue:
{{Cmd
|nano -w ~/.xinitrc
|prompt=sakaki@koneko <span style{{=}}"color:royalblue;">~ $</span>
}}
{{Note|Obviously, as before, the name that you see in the prompt will reflect that of the regular user you added (and which you just {{c|su}}-d to).}}

'''Delete''' the current contents of {{c|.xinitrc}} (you can use {{Key|Ctrl}}{{Key|k}} inside {{c|nano}} to delete a line at a time), and '''replace''' with the following text:
{{FileBox|filename=~/.xinitrc|title=Replace existing text with the below to start GNOME|lang=bash|1=
export XDG_MENU_PREFIX=gnome-
exec gnome-session
}}
Save and exit {{c|nano}}.
{{Note|Don't forget the hyphen at the end of {{c|gnome-}} (as shown above). Also, note that there is no need to start the file with a [[:Wikipedia:Shebang_(Unix){{!}}shebang]] this time.}}

OK, time to try it out! Issue:
{{Cmd
|startx
|prompt=sakaki@koneko <span style{{=}}"color:royalblue;">~ $</span>
}}

And hopefully you should be greeted with a (rather startlingly empty!) GNOME 3 desktop, somewhat similar to the below, on the target machine:
[[File:Gnome_first_run.jpg|thumb|none|400px|GNOME Shell Basic Desktop (via startx)]]

{{Note|The precise layout etc. that you see may of course differ, due to version changes in GNOME. Also, you may experience some issues the first time you try running GNOME in this manner (strange display glitches etc.); if so, simply try quitting (by issuing {{Key|Ctrl}}{{Key|c}} at the helper PC {{c|ssh}}/{{c|screen}} terminal) and then running {{c|startx}} again.}}

You can try playing around with it briefly if you like (some simple instructions may be found [https://wiki.gnome.org/Projects/GnomeShell/CheatSheet here] - or just get started by moving your mouse pointer up to the top left corner of the screen (and optionally, clicking on 'Activities'), or by pressing {{Key|Windows Key}}), using the target machine keyboard and mouse / touchpad directly. Note, however, that this isn't a properly logged-in instance, so certain of the standard features will not function as you expect. You should be able to start a terminal etc. however. When you're done, kill the test instance, by issuing {{Key|Ctrl}}{{Key|c}} at the helper PC {{c|ssh}}/{{c|screen}} terminal (the one where you just issued {{c|startx}}).

== <span id="testing_gnome3">Testing GNOME 3 (and Refining Settings)</span> ==

Congratulations, GNOME 3 is now basically functional; we only need a few more steps to get it fully operational on your machine! So, let's continue. Come back out to be {{c|root}} again:

{{Cmd
|exit
|prompt=sakaki@koneko <span style{{=}}"color:royalblue;">~ $</span>
}}

Next, we must enable the [[:Wikipedia:NetworkManager|{{c|NetworkManager}}]] service (which will handle all network interaction under GNOME), and disable the {{c|dhcpcd}} service, which we started [[../Final_Preparations_and_Reboot_into_EFI#setup_dhcpcd_openrc|earlier]] (and whose functionality {{c|NetworkManager}} supplants). First, issue:
{{RootCmd
|rc-update del dhcpcd default
|/etc/init.d/dhcpcd stop
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}

Next, if you are using '''WiFi''' for the install, you'll also have explicitly set up a {{c|wpa_supplicant}} configuration file [[../Final_Preparations_and_Reboot_into_EFI#start_wpa_supplicant|earlier in the tutorial]], and so you need to remove this again now (however, [[#start_nm|'''skip''' this step]] if installing over a '''wired Ethernet''' connection):
{{RootCmd
|mv -v /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa.conf
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}

<span id="start_nm">Now we can ensure {{c|NetworkManager}}</span> comes up on boot (however, do not start it yet, since you may lose network connectivity when you do). Issue:
{{RootCmd
|rc-update add NetworkManager default
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}

That having being done, we need to edit the <code>DISPLAYMANAGER</code> value in the {{Path|/etc/conf.d/xdm}} file, so that the [[:Wikipedia:GNOME_Display_Manager|GNOME Display Manager]] ({{c|gdm}}) is used. Issue:
{{RootCmd
|nano -w /etc/conf.d/xdm
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
and edit the <code>DISPLAYMANAGER</code> stanza, so that it reads:
{{FileBox|filename=/etc/conf.d/xdm|title=Specify the GNOME display manager, as follows|
<pre>
# What display manager do you use ?  [ xdm | gdm | kdm | gpe | entrance ]
# NOTE: If this is set in /etc/rc.conf, that setting will override this one.
DISPLAYMANAGER="gdm"
</pre>
}}
Leave the rest of the file as is. Save, and exit {{c|nano}}.

Now we configure {{c|xdm}} to run on boot, and also start up an instance now (the {{c|rc}} invocation will also bring up {{c|NetworkManager}}). Issue:
{{RootCmd
|rc-update add xdm default
|rc
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}

Assuming that worked, <span id="login_to_gnome">you should now</span> be able to see a GNOME login screen on the target machine, similar to the below:
[[File:Gnome_login.jpg|thumb|none|400px|GNOME 3 Login Screen]]

{{Note|If you don't see your regular user's user name appear (as for 'sakaki' in the above screenshot), click on the "{{c|Not listed?}}" text, and type in the user name when prompted (directly at the target machine's keyboard)).}}
{{Note|You may need to press {{Key|Enter}} once or twice (directly on the target machine's keyboard) to see the login prompt, if the screen has blanked.}}
{{Note|If you are installing via WiFi, you will temporarily lose connectivity (to {{c|ssh}} etc.) when bringing up {{c|NetworkManager}} in this manner, since it doesn't yet know your network settings. However, once {{c|NetworkManager}} is configured (as described [[#gnome_network_settings{{!}}next]]), you should be able to re-establish the {{c|ssh}} connection.}}

Directly at the target machine, click on the (regular) user name then, when prompted, type in the (regular user) password you set up [[#setup_regular_user|earlier]].
{{Note|If your password is rejected, it may be because you do not (yet) have the correct keyboard settings in GNOME (particularly if you have a non-US keyboard, as the Panasonic CF-AX3 does, for example). You can click on the 'man in a circle' accessibility icon in the top bar, and use the on-screen keyboard to enter your password in this case. Afterwards, it is easy to change your keyboard setup via the 'Region & Language' settings panel in GNOME, as described [[#gnome_keyboard_settings{{!}}below]].}}

You should arrive back at the GNOME desktop (only this time, with a little more functionality, since this ''is'' a normal login session). 

Before our final reboot (at which point, we will no longer require the helper PC, but will be using the target machine natively), there are two additional tasks we need to carry out:
# ensuring that network settings are correct; and
# setting up keyboard settings are correct within GNOME (if required).

=== <span id="gnome_network_settings">GNOME Network Settings</span> ===

You should now make sure that your network settings are correct under GNOME. Any wired connection should have been picked up fine, but if you have been installing using '''WiFi''', you'll need to select an access point, and enter your wireless passphrase, to regain network connectivity.

To do that, simply click on the 'downwards pointing triangle' in very top right of the screen. This will show a drop-down menu, from which you can turn on WiFi, and select an access point (you'll be prompted for the passphrase). (Alternatively, you can press the {{Key|Windows Key}}, then type "{{c|settings}}" (and press {{Key|Enter}}), then click on the item titled 'Network' in the panel that appears.) It's a fairly self-explanatory interface, but if you need assistance, simply press {{Key|F1}}.

{{Note|If you start playing around with your system now, you'll probably find that there are a few things, like Bluetooth for example, and possibly even WiFi (depending on your setup), that are not working yet. That's because we haven't yet enabled all necessary kernel drivers - but we will address this in the [[../Final_Configuration_Steps_under_OpenRC|next chapter]]!}}
{{Note|Some users have commented that GNOME (and in particular, WiFi) does not come up properly, until their machine is restarted with {{c|gdm}} enabled. Therefore, if you are experiencing any problems with GNOME at this stage (such as your WiFi passphrase being rejected), it may be worth waiting, and trying again once we have rebooted in the final configuration (which we'll do very shortly, [[#restart_to_gnome{{!}}below]]).}}  

Once you have the network set up, you should be able to browse the web etc. Try this now: directly at the target machine's keyboard, press the {{Key|Windows Key}} and type 'Web', then press {{Key|Enter}} to start the first item shown. GNOME's default [[:Wikipedia:Web_(web_browser)|web browser]] will start up, initially full-screen. You can drag it down by the top bar to make it a normal-sized window, type in a URL etc.:
{|style="background:transparent; color:black" 
|[[File:Gnome_web_app.jpg|thumb|none|400px|Searching for a Web Browser in GNOME...]]
|[[File:Gnome_with_browser.jpg|thumb|none|400px|...And Using the Default Browser]]
|}

=== <span id="gnome_keyboard_settings">GNOME Keyboard Settings</span> ===

If you have a non-US keyboard (as in the case of the Panasonic CF-AX3), you will need to set this in GNOME. Press the {{Key|Windows Key}}, then type "{{c|region}}" (and press {{Key|Enter}}) and click on the {{c|Region & Language}} item in the list. This opens a control panel. Make sure the 'Language' and 'Formats' in the top pane are correct for your locale. Then, add the appropriate 'input source' in the bottom pane. Click on the 'plus' sign icon, and an "Add an Input Source" panel will appear. Click on the tile showing three stacked dots, and drag the panel slightly larger vertically (as otherwise the output will be hidden). You should now be able to click on the 'Other' tile that appears, and then select the required source from the full list, and then click on 'Add' (in my case, I actually added three: "English (UK)" (for my plug-in keyboard), "Japanese" for the machine's built-in keyboard, and "Japanese (Anthy)" for kanji and kana input - obviously, your requirements will probably differ). When done, close out the "{{c|Region & Language}}" dialog.

Once an item <span id{{=}}"input_source_menu">has been added</span>, it can be activated via a drop down in the top bar of the screen. In the case of the CF-AX3, you'd want to select 'Japanese' from this list, so that the keyboard mapping is correct (even if you are typing everything in English!) Be sure to check this, if you have problems having your password accepted at the GNOME login screen.

{{Note|If you have a standard US-layout machine and are using it in the US, this section will probably not apply to you. Nevertheless, you should still check that that the 'Language' and 'Formats' elements are set correctly in the "{{c|Region & Language}}" panel.}}
{{Note|GNOME has quite extensive context-sensitive help, which you can access by pressing {{Key|F1}} in any panel (for example, try it with "{{c|Region & Language}}" open - you'll be able to read useful hints about switching layouts using keyboard accelerators, having a layout per window or one for all windows, and more.}}

=== <span id="restart_to_gnome">Restarting into GNOME!</span> ===

We are now ready to bid farewell to the services of the helper PC, as all further steps can now be done on the target machine directly. Close out the {{c|ssh}}/{{c|screen}} terminal. Issue:
{{RootCmd
|exit
|prompt=<span style{{=}}"color:gray;">(1)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
which will close the first {{c|screen}} terminal, then:
{{RootCmd
|exit
|prompt=<span style{{=}}"color:gray;">(2)</span> koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
to close the second one, then:
{{RootCmd
|exit
|prompt=koneko <span style{{=}}"color:royalblue;">~ #</span>
}}
which will close out the {{c|ssh}} session itself.
{{Note|If installing over WiFi, it is possible that your {{c|ssh}} session may have hung when you temporarily lost connectivity due to starting {{c|NetworkManager}} above, making it impossible to enter the above {{c|exit}} commands. If this has happened to you, simply close its surrounding terminal on the helper PC.}}

Now, ensure that the USB boot key is inserted in the target PC, and reboot it, by clicking on the 'power' icon (in the top right of the screen), clicking on the 'power' button in the dropdown menu that then appears, and then clicking on the 'Restart' button in the dialog.

The machine should then power cycle (you will be cleanly logged out of GNOME first). When the machine restarts, as before, you will need to enter your LUKS keyfile {{c|gpg}} passphrase (the one you created [[../Preparing_the_LUKS-LVM_Filesystem_and_Boot_USB_Key#create_gpg_luks_keyfile|earlier]]), directly at the target machine keyboard to unlock the LUKS partition. You should then be presented directly with a GNOME login page (as [[#login_to_gnome|above]]). Directly at the target machine, click on your (regular) user name then, when prompted, type in the (regular user) password you set up [[#setup_regular_user|earlier]] (ensure you have the correct keyboard settings, if relevant, as discussed [[#input_source_menu|above]]).

Once logged in to GNOME, bring up a web browser: directly at the target machine's keyboard, press the {{Key|Windows Key}} and type 'Web', then press {{Key|Enter}} to start the first item shown. GNOME's default [[:Wikipedia:Web_(web_browser)|web browser]] will start up, initially full-screen. You can drag it down by the top bar to make it a normal-sized window. Do so, and type in the <span id="rejoin">[https://wiki.gentoo.org/wiki/EFI_Gentoo_End_to_End_Install/Setting_up_the_GNOME_3_Desktop_under_OpenRC#rejoin URL for this tutorial]</span>, so that you can continue to follow it there.
{{Important|From this point on, all interaction with the target machine will be done directly (and not via the helper PC), unless otherwise noted.}}

Now, <span id="open_gnome_terminal">bring up a terminal window</span> in GNOME. Press the {{Key|Windows Key}} again, and type 'terminal', then press {{Key|Enter}}. A standard-issue terminal window should open. As we have some final installation work to do, become root:
{{Cmd
|su --login root
|prompt=sakaki@koneko <span style{{=}}"color:royalblue;">~ $</span>
|output=<pre>
Password: <enter root password>
</pre>
}}
The password required here is the one you set up [[../Final_Preparations_and_Reboot_into_EFI#setup_new_root_password|earlier]] in the tutorial (and have used when {{c|ssh}}-ing in).

== <span id="next_steps">Next Steps</span> ==

Congratulations - if you have followed through to this stage, you have a basically functioning system! There is some final driver configuration left still to do, so let's address that now. [[../Final_Configuration_Steps_under_OpenRC|Click here]] to go to the next chapter, "Final Configuration Steps under OpenRC".

== <span id="notes">Notes</span> ==
{{reflist}}

{| class="wikitable" style="margin: 1em auto 1em auto;"
|-
| [[../Configuring_Secure_Boot_under_OpenRC|< Previous]]
| [[../|Home]]
| [[../Final_Configuration_Steps_under_OpenRC|Next >]]
|}

[[Category:Core system]]
[[Category:GNOME]]
[[Category:Localization]]
[[Category:X.Org]]
