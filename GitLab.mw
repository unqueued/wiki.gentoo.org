{{Stub}}
{{InfoBox stack
|{{InfoBox homepage|https://about.gitlab.com/|header=true}}
|{{InfoBox wikipedia|GitLab}}
}}

== Disclaimer ==

This guide is a rough port from the [https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md official guide] and various internet references.<br />
Some of the steps have been consolidated and obviously customized to the standard Gentoo environment.<br />
If something is missing, please make a point of updating this article, with special attention to dependencies please.

This is a long installation guide, an alternative would be to use the unofficial [https://github.com/fritteli/gentoo-overlay/tree/master/www-apps/gitlabhq/ www-apps/gitlabhq] ebuild from [https://github.com/fritteli/gentoo-overlay/ Fritteliâ€™s Overlay].

== The Layman's Guide ==

The Gitlab overlay in layman, originally the CVUT overlay, is currently on par with the latest gitlab version (7.12  as of June 2015). It supports gitlab migrations in a post-configure step, for those performing upgrades. The repo and issues can be found [https://gitlab.awesome-it.de/overlays/gitlab here].
[https://github.com/fritteli/gentoo-overlay Fritteli's Gentoo overlay] provides an alternative, though the installation instructions are not documented here.

The overlay is added to layman using the command
{{Cmd
|layman -a gitlab}}
One must then add the following keywords to be accepted by portage
{{Cmd|nano /etc/portage/package.accept_keywords.|output=<pre>
=dev-libs/libgit2-M.m.i ~ARCH
=dev-vcs/gitlab-shell-M.m.i ~ARCH
=www-apps/gitlabhq-M.m.i ~ARCH
</pre>}}
where ARCH is the architecture and M.m.i are the Major, minor and intermittent/incremental version numbers.

Next emerge and configure the package using the following commands and adhering to the instructions in the emerge output.

{{Cmd
|emerge -av gitlabhq
|emerge --config gitlabhq}}

{{note
|The unicorn.rb file is not mentioned in these instructions but it too resides in /etc/gitlabhq-M.m/ and must be created and modified from it's corresponding .example file.}}

Next, create all required configuration files from example configs (if they don't exist):
{{RootCmd
|cp /etc/gitlabhq-7.14/database.yml.mysql /etc/gitlabhq-7.14/database.yml
|cp /etc/gitlabhq-7.14/gitlab.yml.example /etc/gitlabhq-7.14/gitlab.yml
|cp /etc/gitlabhq-7.14/resque.yml.example /etc/gitlabhq-7.14/resque.yml
|cp /etc/gitlabhq-7.14/unicorn.yml.example /etc/gitlabhq-7.14/unicorn.yml
|cp /var/lib/gitlab-shell/config.yml.example /var/lib/gitlab-shell/config.yml
}}

It may be desirable to create a sidekiq config:
{{FileBox|filename=/etc/gitlabhq-7.14/sidekiq.yml|lang=yaml
|1=
# Sample configuration file for Sidekiq.
# Options here can still be overridden by cmd line args.
# Place this file at config/sidekiq.yml and Sidekiq will
# pick it up automatically.
---

:verbose: false
:concurrency: 20

# Set timeout to 8 on Heroku, longer if managing systems under administrative control.
:timeout: 30

# Sidekiq will run this file through ERB when reading it so it is possible to
# put in dynamic logic, like a host-specific queue.
# http://www.mikeperham.com/2013/11/13/advanced-sidekiq-host-specific-queues/
:queues:
  - critical
  - default
  - <%= `hostname`.strip %>
  - low

# it is possible to override concurrency based on environment
production:
  :concurrency: 20
staging:
  :concurrency: 20
}}

Default owners are incorrect.
{{RootCmd
|chown -R git:git /opt/gitlabhq-7.14
|chown -R git:git /etc/gitlabhq-7.14
|chown -R git:git /var/lib/gitlab-shell
}}

Then change some values in Gitlab-shell config. By default, user git is supposed to have a homedir /home/git , but gitlab.yml expects it to have a home in /var/lib/git. It has to be fixed:
{{Cmd
|nano /var/lib/gitlab-shell/config.yml
|prompt=git ~/}}
Change all occurrences of /var/lib/git/ to /home/git.
{{FileBox|filename=/var/lib/gitlab-shell/config.yml
|1=
...
#repos_path: "/var/lib/git/repositories"
repos_path: "/home/git/repositories"
...
#auth_file: "/var/lib/git/.ssh/authorized_keys"
auth_file: "/home/git/.ssh/authorized_keys"
...
}}
Then restart service, and that's it.
{{RootCmd
|/etc/init.d/gitlabhq-7.14 restart}}


'''Otherwise for a more Gentoo-ish approach to installation read on.'''

== Prerequisites/Dependencies ==

* {{Package|dev-libs/openssl}}
* {{Package|dev-libs/icu}}
* {{Package|dev-libs/libxslt}}
* {{Package|dev-lang/python}} version 2.7.x
* {{Package|dev-lang/ruby}} version 2.0.x
* {{Package|dev-vcs/git}}
* {{Package|dev-db/redis}}
* {{Package|dev-ruby/bundler}}

{{RootCmd|echo "dev-lang/tk threads" >> /etc/portage/package.use}}
{{emerge|openssl icu ruby dev-vcs/git dev-db/redis sudo}}

Optional: To receive mailing notifications from GitLab, install a mail server.
The recommended server is Postfix.
{{emerge|postfix}}

Next, tell Gentoo to start redis automagically:

{{RootCmd
|rc-update add redis default
}}

{{RootCmd
|rc-service redis start
}}

== Prepare the Necessary Users ==

{{RootCmd|eselect ruby set ruby20}}
{{RootCmd|eselect python set python2.7}}

Gitlab uses the ''git'' user, so add it:

{{RootCmd|useradd -m -s /bin/bash -c 'Git Version Control' -d /home/git git}}

{{RootCmd|<nowiki>echo 'export PATH=$(ruby -rubygems -e "puts Gem.user_dir")/bin:/usr/local/bin:$PATH' >> /home/git/.bashrc</nowiki>}}

=== Gitlab shell ===

{{RootCmd
|cd /home/git}}

{{RootCmd
|<nowiki>sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-shell.git -b v1.9.3</nowiki> && cd gitlab-shell}}

{{RootCmd
|cp config.yml.example config.yml
|prompt=git ~/gitlab-shell}}

{{important|edit config.yml with the domain information or "localhost"}}

{{Cmd
|nano config.yml
|prompt=git ~/gitlab-shell}}

{{Cmd
|./bin/install
|prompt=git ~/gitlab-shell}}

{{important|If no commit messages are visible in gitlab or there are no error messages while pushing commits to gitlab. If using the unix socket to connect to redis service then also remember to set the redis.sock permissions.}}

{{Note|remote: GitLab: An unexpected error occurred (redis-cli returned 1).}}

{{RootCmd
|usermod -aG redis git
|prompt=git ~/gitlab-shell}}

{{RootCmd|nano /etc/redis.conf|output=<pre>
unixsocket /var/run/redis/redis.sock
unixsocketperm 770
</pre>
|prompt=git ~/gitlab-shell}}

== GitLab ==

{{RootCmd
|su git}}

{{Cmd
|cd
|prompt=git $}}

{{Cmd
|<nowiki>git clone https://github.com/gitlabhq/gitlabhq.git gitlab</nowiki>
|prompt=git ~ $}}

{{Cmd
|cd gitlab
|prompt=git ~ $}}

{{Cmd
|git checkout 6-3-stable
|prompt=git ~/gitlab $}}



=== Prepare the Database ===

==== MySQL/MariaDB ====

Merge mysql if it has not been done so already.
{{emerge|mysql}}

Setup root mysql password.
{{important|The config version will probably be different, read emerge output to get the exact command to run}}

{{RootCmd|<nowiki>emerge --config =dev-db/mysql-5.1.67</nowiki>}}
Turn on mysql.

{{RootCmd|rc-service mysql start}}

Set mysql to start upon reboot.
{{RootCmd|rc-update add mysql default}}

Create the database and user:
{{important|set required passwords for lines 2 and 3}}

{{RootCmd
|mysql -u root -p
|output=<pre>
mysql> CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;
mysql> CREATE USER 'gitlab'@'localhost' IDENTIFIED BY 'changeme aka gitlabdbpass';
mysql> GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO 'gitlab'@'localhost' IDENTIFIED BY 'gitlabdbpass';
mysql> quit
</pre>}}


Test connecting to the databases with the new user:
{{RootCmd
|mysql -u gitlab -p -D gitlabhq_production
|output=<pre>
Enter Password:
</pre>}}

{{Cmd
|cp config/database.yml.mysql config/database.yml
|nano config/database.yml
|prompt=git /home/git/gitlab $}}

{{note
|add the database password to this config file}}

{{RootCmd
|chmod o-rwx config/database.yml
|prompt=root /home/git/gitlab $}}

==== PostgreSQL ====

Merge postgresql-server, or postgresql-base if the PostgreSQL installation is on another server.
{{emerge|postgresql}}


For PostgreSQL there are different methods of authentication. For a installation on the local machine some administrators prefer using the local account when connecting through a socket. By default this is enabled.

Create a database and a new user without a password and give the user ownership of it. Remember, when connecting through the socket the shell user is used for authentication, so its name must be git.

{{RootCmd
|su postgres -c "psql -d template1"
|output=<pre>
template1=# CREATE USER git;
template1=# CREATE DATABASE gitlabhq_production OWNER git;
template1=# \q
</pre>}}


The git user will need access to the PostgreSQL socket, so it's required to add the user to the postgres group

{{RootCmd
|gpasswd -a git postgres
}}
And a little test, just to be sure everything went fine:
{{Cmd
|psql -l
|prompt=git /home/git/gitlab#}}


Copy the example database configuration file:
{{Cmd|cp config/database.yml.postgresql config/database.yml|prompt=git /home/git/gitlab#}}


*Edit the new configuration file and add the database credentials just created:
{{Cmd
|nano config/database.yml
|prompt=git /home/git/gitlab#
|output=<pre>
#
# PRODUCTION
#
production:
  adapter: postgresql
  encoding: unicode
  database: gitlabhq_production
  pool: 5
  username: gitlab
  # password:
  # host: localhost
  # port: 5432
  socket: /run/postgresql/.s.PGSQL.5432
</pre>}}

{{RootCmd
|chmod o-rwx config/database.yml
|prompt=root /home/git/gitlab $}}

=== Configure Gitlab ===

{{Cmd
|cp config/gitlab.yml.example config/gitlab.yml
|prompt=git ~/gitlab $}}

{{note
|edit this file with the domain name (or localhost) & edit the email sent from settings}}

{{Cmd
|nano config/gitlab.yml
|prompt=git ~/gitlab $}}

=== Deploy Directories ===

{{RootCmd
|<pre>
chown -R git log/
chown -R git tmp/
chmod -R u+rwX  log/
chmod -R u+rwX  tmp/
</pre>
|prompt=root /home/git/gitlab $}}

{{Cmd|<pre>
mkdir /home/git/gitlab-satellites
mkdir tmp/pids/
mkdir tmp/sockets/
mkdir public/uploads
cp config/unicorn.rb.example config/unicorn.rb
nano config/unicorn.rb
cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb
nano config/initializers/rack_attack.rb
git config --global user.name "GitLab"
git config --global user.email "gitlab@localhost"
git config --global core.autocrlf input
</pre>
|prompt=git ~/gitlab $}}

{{note
|add workers for higher loads and higher ram counts 3 for 2gb is default example}}

{{RootCmd
|chmod -R u+rwX  tmp/pids/
|chmod -R u+rwX  tmp/sockets/
|chmod -R u+rwX  public/uploads
|prompt=root /home/git/gitlab #}}

=== Install Needed Gems ===

Note that charlock_holmes has a bug on gentoo, so a [https://github.com/brianmario/charlock_holmes/issues/32#issuecomment-17033186 workaround] is required:
{{Cmd|bundle config build.charlock_holmes --with-ldflags{{=}}'-L. -Wl,-O1 -Wl,--as-needed -rdynamic -Wl,-export-dynamic'|prompt=git /home/git/gitlab $}}


Note that there might be an error message about a dropped dependency called "modernizr". This is a frontend gem who has been renamed. This has to be added to the Gemfile:
{{Cmd|nano Gemfile|prompt=git /home/git/gitlab}}
just search the modernizr (v. 2.6.2) package and rename it to "modernizr-rails", "2.7.1".
Also Note that a (maybe failing) command, being issued before, has created a Gemfile.lock. This lock file would need an edit as well (two mentions of modernizr).

Then build the package depending on the database setup, excluding the staging and dev environment (which have not been set up yet) and the not-used database:
* mysql
{{Cmd|bundle install --deployment --without development test mysql|prompt=git /home/git/gitlab $}}
* postgresql
{{Cmd|bundle install --deployment --without development test postgres|prompt=git /home/git/gitlab $}}
{{Note|If there are problems installing because of Github's SSL cert, use ''export GIT_SSL_NO_VERIFY{{=}}true''}}


=== Initialize Database and Activate Advanced Features ===

{{Cmd
|bundle exec rake gitlab:setup RAILS_ENV{{=}}production
|prompt=git /home/git/gitlab $}}

{{Note|Config files seems to be indentation sensitive, so check the files for typos.}}

=== Download and Start the Initscript ===
At the time of writing, this init script is confirmed to work with Gitlab versions 6, just edit the user and home directory:
{{RootCmd
|wget https://gist.github.com/limansky/6330226/raw/f77ae1f417b0574813cf0f6914bd4196b2665cfe/gitlab -O /etc/init.d/gitlab
|chmod +x /etc/init.d/gitlab
|/etc/init.d/gitlab start
|rc-update add gitlab default
}}

== Web Frontend ==

=== Nginx ===
Download the official template and activate it:
{{RootCmd
|wget http://raw.github.com/gitlabhq/gitlab-recipes/4-1-stable/nginx/gitlab -O /etc/nginx/sites-available/git.domain.tld
|ln -s /etc/nginx/sites-available/git.domain.tld /etc/nginx/sites-enabled/
}}


Use a favorite text editor to change the relevant portions:
{{RootCmd
|nano /etc/nginx/sites-available/git.domain.tld
|output=<pre>
...
  listen 0.0.0.0:80 default_server;
  server_name git.domain.tld;
...
</pre>}}
{{RootCmd|/etc/init.d/nginx restart}}

=== Apache/Passenger ===
go over to the [[rails]] page, and fix up passenger...

The {{Path|/etc/apache2/vhosts.d/00_default_vhost.conf}} file needs to be edited, to adapt DocumentRoot and <Directory> directives to use {{Path|/home/gitlab/gitlab/public}}. Thus, add the following virtual host to manage gitlab :

{{RootCmd|mv /etc/apache2/vhosts.d/00_default_vhost.conf /etc/apache2/vhosts.d/00_default_vhost.conf.example}}

{{FileBox|filename=/etc/apache2/vhosts.d/00_default_vhost.conf
|lang=apache|1=
<IfDefine DEFAULT_VHOST>
Listen 80
NameVirtualHost *:80
<VirtualHost *:80>
        DocumentRoot /home/git/gitlab/public
        <Directory /home/git/gitlab/public>
        </Directory> 
</VirtualHost>
</IfDefine>
}}

Now apache has to be restarted, don't forget to

{{RootCmd
|/etc/init.d/apache2 restart
|rc-update add apache2 default
}}

== Finish Installing ==

{{RootCmd
|usermod -s /sbin/nologin git}}

Use a favorite web browser to navigate to the new host that was set up<br />
If everything loads properly, the installer has made an ''admin'' account.
{{ContentBox|git.domain.tld|
admin@local.host
5iveL!fe
}}

{{ContentBox|Fresh combination|
root
5iveL!fe
}}

== Testing ==

=== Diagnostics ===
Run this command to get a full diagnostic.

{{Cmd|bundle exec rake gitlab:env:info RAILS_ENV{{=}}production
|bundle exec rake gitlab:check RAILS_ENV{{=}}production
|prompt=git /home/git/gitlab#}}

=== Push, Pull, Clone ===
Users to push, pull, clone generate ssh-rsa key.

Using the GitLab web page interface, add a user key to a user, & create new repository.

Many commands will show up, they need to be run on the users computer.

The command 'git push -u origin master' will activate the repository created and allow cloning.

clone using the url the web interface displays.  (replace localhost with IP address, or fully qualified domain name)

{{Cmd|git clone git@localhost:user/test.git test}}


== Omniauth ==

In the file {{Path|/home/gitlab/gitlab/config/gitlab.yml}} there's a section that controls login from remote sites such as Google, Twitter, and GitHub.  change enabled: false to enabled: true.  then scroll down and remove all ## marks from 

{{FileBox|filename=/home/gitlab/gitlab/config/gitlab.yml|lang=yaml|1=
#    - { name: 'google_oauth2', app_id: 'YOUR APP ID',
#        app_secret: 'YOUR APP SECRET',
}}

and ensure to leave the leading - on the first line.

[[Category:Web application]]
