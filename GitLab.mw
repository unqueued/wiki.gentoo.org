{{Stub}}

== Disclaimer ==
This guide is a rough port from the [https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md official guide] and various internet references.<br />
Some of the steps have been consolidated and obviously customized to the standard Gentoo environment.<br />
If something is missing, please make a point of updating this article, with special attention to dependencies please.


If you don’t like long installation guides likes this, you can use unofficial [https://github.com/cvut/gentoo-overlay/tree/master/www-apps/gitlabhq www-apps/gitlabhq] ebuild from [https://github.com/cvut/gentoo-overlay/ CVUT Overlay]. There’s also a [https://github.com/cvut/gentoo-overlay/wiki/Installation-guide-for-GitLab-6.x short guide for dummies] how to install it and configure your web server.

== Prerequisites/Dependencies ==
* {{Package|dev-libs/openssl}}
* {{Package|dev-libs/icu}}
* {{Package|dev-libs/libxslt}}
* {{Package|dev-lang/python}} version 2.7.x
* {{Package|dev-lang/ruby}} version 2.0.x
* {{Package|dev-vcs/git}}
* {{Package|dev-db/redis}}
* {{Package|dev-ruby/bundler}}

{{RootCmd|echo "dev-lang/tk threads" >> /etc/portage/package.use}}
{{emerge|openssl icu ruby dev-vcs/git dev-db/redis sudo}}

Optional: if you wish to receive mailing notifications from GitLab, then you should probably install a mail server.
The recommended server is Postfix.
{{emerge|postfix}}

Next, we tell gentoo to start redis automagically.
{{RootCmd
|rc-update add redis default}}

{{RootCmd
|rc-service redis start}}

== Prepare the Necessary Users ==
{{RootCmd|eselect ruby set ruby20}}
{{RootCmd|eselect python set python2.7}}

Gitlab uses the ''git'' user, so add it:

{{RootCmd|useradd -m -s /bin/bash -c 'Git Version Control' -d /home/git git}}

{{RootCmd|<nowiki>echo 'export PATH=$(ruby -rubygems -e "puts Gem.user_dir")/bin:/usr/local/bin:$PATH' >> /home/git/.bashrc</nowiki>}}

=== Gitlab Shell ===

{{RootCmd
|su git}}

{{Cmd
|cd
|prompt=git}}

{{Cmd
|<nowiki>git clone https://github.com/gitlabhq/gitlab-shell.git</nowiki>
|prompt=git ~}}

{{Cmd
|cd gitlab-shell
|prompt=git ~}}

{{Cmd
|git checkout v1.8.0
|prompt=git ~/gitlab-shell}}

{{Cmd
|cp config.yml.example config.yml
|prompt=git ~/gitlab-shell}}

{{important|edit config.yml with your own domain information or "localhost"}}

{{Cmd
|nano config.yml
|prompt=git ~/gitlab-shell}}

{{Cmd
|./bin/install
|prompt=git ~/gitlab-shell}}

== GitLab ==

{{RootCmd
|su git}}

{{Cmd
|cd
|prompt=git $}}

{{Cmd
|<nowiki>git clone https://github.com/gitlabhq/gitlabhq.git gitlab</nowiki>
|prompt=git ~ $}}

{{Cmd
|cd gitlab
|prompt=git ~ $}}

{{Cmd
|git checkout 6-3-stable
|prompt=git ~/gitlab $}}



=== Prepare the Database ===

==== MySQL/MariaDB ====

Merge mysql if you have not already.
{{emerge|mysql}}

Setup root mysql password.
{{important|your config version will probably be different, read emerge output to get your exact command to run}}

{{RootCmd|<nowiki>emerge --config =dev-db/mysql-5.1.67</nowiki>}}
Turn on mysql.

{{RootCmd|rc-service mysql start}}

Set mysql to start upon reboot.
{{RootCmd|rc-update add mysql default}}

Create the database and user:
{{important|set your own passwords for lines 2 and 3}}

{{RootCmd
|mysql -u root -p
|output=<pre>
mysql> CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;
mysql> CREATE USER 'gitlab'@'localhost' IDENTIFIED BY 'changeme aka gitlabdbpass';
mysql> GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO 'gitlab'@'localhost' IDENTIFIED BY 'gitlabdbpass';
mysql> quit
</pre>}}


Test connecting to the databases with the new user:
{{RootCmd
|mysql -u gitlab -p -D gitlabhq_production
|output=<pre>
Enter Password:
</pre>}}

{{Cmd
|cp config/database.yml.mysql config/database.yml
|nano config/database.yml
|prompt=git /home/git/gitlab $}}

{{note
|add your database password to this config file}}

{{RootCmd
|chmod o-rwx config/database.yml
|prompt=root /home/git/gitlab $}}

==== PostgreSQL ====

Merge postgresql-server, or postgresql-base if you have PostgreSQL on another server.
{{emerge|postgresql-server}}


For PostgreSQL there are different methods of authentification. For a installation on the local machine I prefer using the local account when connecting trough a socket. By default this is enabled.

Create a database and a new user without a password and give him ownership of it. Remember, when connecting trough the socket the shell user is used for authentification, so its name must be gitlab.

{{RootCmd
|su postgres -c "psql -d template1"
|output=<pre>
template1=# CREATE USER git;
template1=# CREATE DATABASE gitlabhq_production OWNER git;
template1=# \q
</pre>}}


The gitlab user will need access to the PostgreSQL socket, so it's required to add him to the postgres group

{{RootCmd
|gpasswd -a git postgres
}}
And a little test, just to be sure everything went fine:
{{Cmd
|psql -l
|prompt=git /home/git/gitlab#}}


Copy the example database configuration file:
{{Cmd|cp config/database.yml.postgresql config/database.yml|prompt=git /home/git/gitlab#}}


*Edit the new configuration file and add the database credentials just created:
{{Cmd
|nano config/database.yml
|prompt=git /home/git/gitlab#
|output=<pre>
#
# PRODUCTION
#
production:
  adapter: postgresql
  encoding: unicode
  database: gitlabhq_production
  pool: 5
  username: gitlab
  # password:
  # host: localhost
  # port: 5432
  socket: /run/postgresql/.s.PGSQL.5432
</pre>}}

{{RootCmd
|chmod o-rwx config/database.yml
|prompt=root /home/git/gitlab $}}

=== Configure Gitlab ===

{{Cmd
|cp config/gitlab.yml.example config/gitlab.yml
|prompt=git ~/gitlab $}}

{{note
|edit this file with your domain name (or localhost) & edit your email sent from settings}}

{{Cmd
|nano config/gitlab.yml
|prompt=git ~/gitlab $}}

=== Deploy Directories ===

{{RootCmd
|<pre>
chown -R git log/
chown -R git tmp/
chmod -R u+rwX  log/
chmod -R u+rwX  tmp/
</pre>
|prompt=root /home/git/gitlab $}}

{{Cmd|<pre>
mkdir /home/git/gitlab-satellites
mkdir tmp/pids/
mkdir tmp/sockets/
mkdir public/uploads
cp config/unicorn.rb.example config/unicorn.rb
nano config/unicorn.rb
cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb
nano config/initializers/rack_attack.rb
git config --global user.name "GitLab"
git config --global user.email "gitlab@localhost"
git config --global core.autocrlf input
</pre>
|prompt=git ~/gitlab $}}

{{note
|add workers for higher loads and higher ram counts 3 for 2gb is default example}}

{{RootCmd
|chmod -R u+rwX  tmp/pids/
|chmod -R u+rwX  tmp/sockets/
|chmod -R u+rwX  public/uploads
|prompt=root /home/git/gitlab #}}

=== Install Needed Gems ===

Note that charlock_holmes has a bug on gentoo, so we have to use this [https://github.com/brianmario/charlock_holmes/issues/32#issuecomment-17033186 workaround]:
{{Cmd|bundle config build.charlock_holmes --with-ldflags{{=}}'-L. -Wl,-O1 -Wl,--as-needed -rdynamic -Wl,-export-dynamic'|prompt=git /home/git/gitlab $}}
* mysql
{{Cmd|bundle install --deployment --without development test postgres|prompt=git /home/git/gitlab $}}
* postgresql
{{Cmd|bundle install --deployment --without development test mysql|prompt=git /home/git/gitlab $}}
{{Note|If you are having problems installing because of Github's SSL cert, use ''export GIT_SSL_NO_VERIFY{{=}}true''}}


=== Initialize Database and Activate Advanced Features ===
{{Cmd
|bundle exec rake gitlab:setup RAILS_ENV{{=}}production
|prompt=git /home/git/gitlab $}}

{{Note|Config files seems to be indentation sensitive, so check your files for typos.}}

=== Download and Start the Initscript ===
At the time of writing, this init script is confirmed to work with Gitlab versions 6, just edit the user and home directory:
{{RootCmd
|wget https://gist.github.com/limansky/6330226/raw/f77ae1f417b0574813cf0f6914bd4196b2665cfe/gitlab -O /etc/init.d/gitlab
|chmod +x /etc/init.d/gitlab
|/etc/init.d/gitlab start
|rc-update add gitlab default
}}

== Web Frontend ==

=== Nginx ===
Download the official template and activate it:
{{RootCmd
|wget http://raw.github.com/gitlabhq/gitlab-recipes/4-1-stable/nginx/gitlab -O /etc/nginx/sites-available/git.domain.tld
|ln -s /etc/nginx/sites-available/git.domain.tld /etc/nginx/sites-enabled/
}}


Use your favorite text editor to change the relevant portions:
{{RootCmd
|nano /etc/nginx/sites-available/git.domain.tld
|output=<pre>
...
  listen 0.0.0.0:80 default_server;
  server_name git.domain.tld;
...
</pre>}}
{{RootCmd|/etc/init.d/nginx restart}}

=== Apache/Passenger ===
go over to the [[rails]] page, and fix up passenger...

You need to deviate on the configuration of {{Path|/etc/apache2/vhosts.d/00_default_vhost.conf}} file, to adapt DocumentRoot and <Directory> directives to use {{Path|/home/gitlab/gitlab/public}}. Thus, add the following virtual host to manage gitlab :

{{RootCmd|mv /etc/apache2/vhosts.d/00_default_vhost.conf /etc/apache2/vhosts.d/00_default_vhost.conf.example}}

{{File|/etc/apache2/vhosts.d/00_default_vhost.conf
||<pre>
<IfDefine DEFAULT_VHOST>
Listen 80
NameVirtualHost *:80
<VirtualHost *:80>
        DocumentRoot /home/git/gitlab/public
        <Directory /home/git/gitlab/public>
        </Directory> 
</VirtualHost>
</IfDefine>
</pre>
}}

dont forget to

{{RootCmd|/etc/init.d/apache2 restart}}

&&

{{RootCmd|rc-update add apache2 default}}

== Finish Installing ==

{{RootCmd
|usermod -s /sbin/nologin git}}

Use your favorite web browser to navigate to the new host you set up<br />
If everything loads properly, the installer has made an ''admin'' account for you.
{{ContentBox|git.domain.tld|
admin@local.host
5iveL!fe
}}

== Testing ==

=== Diagnostics ===
Run this command to get your full diagnostic.

{{Cmd|bundle exec rake gitlab:env:info RAILS_ENV{{=}}production
|bundle exec rake gitlab:check RAILS_ENV{{=}}production
|prompt=git /home/git/gitlab#}}

=== Push, Pull, Clone ===
Users to push, pull, clone generate ssh-rsa key.

Using the GitLab web page interface, add your user key to your user, & create new repository.

Many commands will show up, they need to be run on your users computer.

The command 'git push -u origin master' will activate the repository created and allow cloning.

clone using the url the web interface gives you.  (replace localhost with IP address, or fully qualified domain name)

{{Cmd|git clone git@localhost:user/test.git test}}


== Omniauth ==

In the file {{Path|/home/gitlab/gitlab/config/gitlab.yml}} there's a section that controls login from remote sites such as Google, Twitter, and GitHub.  change enabled: false to enabled: true.  then scroll down and remove all ## marks from 

{{File|/home/gitlab/gitlab/config/gitlab.yml||<pre>
#    - { name: 'google_oauth2', app_id: 'YOUR APP ID',
#        app_secret: 'YOUR APP SECRET',
</pre>}}

and ensure to leave the leading - on the first line.

[[Category:Web application]]
