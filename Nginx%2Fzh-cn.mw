<languages />

{{Metadata|abstract=nginx is a robust, small, high performance web server and reverse proxy server. It is a good alternative to popular web servers like Apache and lighttpd.}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|https://nginx.org/en/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox odoc|https://nginx.org/en/docs/}}
}}

nginx是一个稳定、轻量、高性能的[[:Category:Web Servers|web服务器]]以及反向代理服务器。它和[[Apache]]、[[lighttpd]]都是很好的常用的web服务器。

== 安装 ==

在安装 {{Package|www-servers/nginx}} 包之前，首先请仔细查看Nginx包的USE标记。

=== 扩展USE标记 ===

Nginx使用模块来增加它的功能。为了简化其模块的维护工作，nginx ebuild使用扩展USE (<var>[[USE_EXPAND]]</var>)标记来指明应该安装哪些模块。

* HTTP相关的模块可以通过设置 <var>NGINX_MODULES_HTTP</var> 变量使其生效
* 邮件相关的模块可以通过设置 <var>NGINX_MODULES_MAIL</var> 变量使其生效
* 第三方模块需要设置 <var>NGINX_ADD_MODULES</var> 变量

这些变量需要在 {{Path|/etc/portage/make.conf}} 中进行设置。关于它们的描述可以参看 {{Path|[https://gitweb.gentoo.org/repo/gentoo.git/plain/profiles/desc/nginx_modules_http.desc /usr/portage/profiles/desc/nginx_modules_http.desc]}} 和 {{Path|[https://gitweb.gentoo.org/repo/gentoo.git/plain/profiles/desc/nginx_modules_mail.desc /usr/portage/profiles/desc/nginx_modules_mail.desc]}}。

例如，为了使 <code>fastcgi</code> 模块生效：

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
NGINX_MODULES_HTTP="fastcgi"
}}

上面的操作会覆盖默认 <var>NGINX_MODULES_HTTP</var> 的默认值，并且把他设置为<code>fastcgi</code>。要开启<code>fastcgi</code> 模块且不覆盖 <var>NGINX_MODULES_HTTP</var>的默认值，你需要使用USE标志{{Path|[[:/etc/portage/package.use]]}}:

{{FileBox|filename=/etc/portage/package.use|lang=bash|1=
www-servers/nginx NGINX_MODULES_HTTP: fastcgi
}}

=== USE flags ===

{{USEflag|package=www-servers/nginx}}

=== Emerge ===

设置完毕USE标记后，安装{{Package|www-servers/nginx}}：

{{Emerge|www-servers/nginx}}

=== 验证安装 ===

nginx默认的配置文件定义一个虚拟服务器，根目录设置为{{Path|/var/www/localhost/htdocs}}。 但是由于{{Bug|449136}}，nginx ebuild只会创建 {{Path|/var/www/localhost}} 目录，而没有index文件。 要具有可用的默认配置，请创建{{Path|/var/www/localhost/htdocs}} 目录和简单的index文件：

{{RootCmd
|mkdir /var/www/localhost/htdocs
|echo 'Hello, world!' > /var/www/localhost/htdocs/index.html
}}

nginx包安装了一个初始化服务的脚本，允许管理员开始、停止或者重新运行该服务。运行下列命令来开启nginx服务：

{{RootCmd|/etc/init.d/nginx start}}

若要验证nginx已经正确安装，需打开浏览器并输入[http://localhost http://localhost]地址，或使用命令行式的web工具，如{{c|curl}}：

{{Cmd|curl http://localhost}}

== 配置 ==

nginx使用{{Path|/etc/nginx/nginx.conf}}文件来管理配置。

=== 单站点访问 ===

下面展示了一个不使用动态特性（如[[PHP]]）来进行单站点访问的例子.

{{FileBox|filename=/etc/nginx/nginx.conf|title=Gentoo默认配置|1=
user nginx nginx;
worker_processes 1;
 
error_log /var/log/nginx/error_log info;
 
events {
	worker_connections 1024;
	use epoll;
}
 
http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
 
	log_format main
		'$remote_addr - $remote_user [$time_local] '
		'"$request" $status $bytes_sent '
		'"$http_referer" "$http_user_agent" '
		'"$gzip_ratio"';
 
	client_header_timeout 10m;
	client_body_timeout 10m;
	send_timeout 10m;
 
	connection_pool_size 256;
	client_header_buffer_size 1k;
	large_client_header_buffers 4 2k;
	request_pool_size 4k;
 
	gzip off;
 
	output_buffers 1 32k;
	postpone_output 1460;
 
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
 
	keepalive_timeout 75 20;
 
	ignore_invalid_headers on;
 
	index index.html;
 
	server {
		listen 127.0.0.1;
		server_name localhost;
 
		access_log /var/log/nginx/localhost.access_log main;
		error_log /var/log/nginx/localhost.error_log info;
 
		root /var/www/localhost/htdocs;
	}
}
}}

=== 多站点访问 ===

可以使用<code>include</code>指令将配置文件分割成多个：

{{FileBox|filename=/etc/nginx/nginx.conf|title=Multisite configuration|1=
user nginx nginx;
worker_processes 1;
 
error_log /var/log/nginx/error_log info;
 
events {
	worker_connections 1024;
	use epoll;
}
 
http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
 
	log_format main
		'$remote_addr - $remote_user [$time_local] '
		'"$request" $status $bytes_sent '
		'"$http_referer" "$http_user_agent" '
		'"$gzip_ratio"';
 
	client_header_timeout 10m;
	client_body_timeout 10m;
	send_timeout 10m;
 
	connection_pool_size 256;
	client_header_buffer_size 1k;
	large_client_header_buffers 4 2k;
	request_pool_size 4k;
 
	gzip off;
 
	output_buffers 1 32k;
	postpone_output 1460;
 
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
 
	keepalive_timeout 75 20;
 
	ignore_invalid_headers on;
 
	index index.html;
 
	include /etc/nginx/conf.d/*.conf;
}
}}

{{FileBox|filename=/etc/nginx/conf.d/local.conf|title=简易站点配置|1=
server {
        listen 127.0.0.1;
        server_name localhost;
  
        access_log /var/log/nginx/localhost.access_log main;
        error_log /var/log/nginx/localhost.error_log info;
  
        root /var/www/localhost/htdocs;
}
}}

{{FileBox|filename=/etc/nginx/conf.d/local-ssl.conf|title=简易SSL站点配置|1=
server {
    listen 443 ssl;
    server_name host.tld;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_dhparam /etc/ssl/nginx/host.tld.dh4096.pem;
    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;
}
}}

=== PHP支持 ===

在nginx配置文件中加入下列配置来启用PHP支持。在这个例子中，nginx通过UNIX套接字与PHP进程通信。

{{FileBox|filename=/etc/nginx/nginx.conf|title=启用PHP支持 | 1=
...
http {
...
    server { 
    ...
            location ~ \.php$ {
                       # Test for non-existent scripts or throw a 404 error
                       # Without this line, nginx will blindly send any request ending in .php to php-fpm
                       try_files $uri =404;
                       include /etc/nginx/fastcgi.conf;
                       fastcgi_pass unix:/run/php-fpm.socket;
           }
    }
}
}}

为了支持上述配置，PHP需要在编译时开启<code>fpm</code>USE标记，以加入FastCGI进程管理器（FastCGI Process Manager）支持（即{{Package|php-fpm}}）。

{{RootCmd|echo "dev-lang/php fpm" >> /etc/portage/package.use}}

开启<code>fpm</code>USE标记后，重新编译PHP：

{{Emerge|dev-lang/php}}
 
{{Note|使用UNIX套接字通信是默认配置，同时本文推荐这种配置}}

检查 {{Path|/etc/php/fpm-php5.5/php-fpm.conf}} 配置文件并添加下列配置：

{{FileBox|filename=/etc/php/fpm-php5.5/php-fpm.conf|title=启用UNIX套接字支持并运行PHP|lang=ini|1=
listen = /run/php-fpm.socket
listen.owner = nginx
}}

在文件 {{Path|php.ini}} 中设置php-fpm的时区。将下面例子中的 <code><PUT_TIMEZONE_HERE></code>替换为正确的时区信息：

{{FileBox|filename=/etc/php/fpm-php5.5/php.ini|title=在php.ini中设置时区|lang=ini|1=
date.timezone = <PUT_TIMEZONE_HERE>
}}

启动 {{c|php-fpm}} 守护进程：

{{RootCmd|/etc/init.d/php-fpm start}}

将 {{c|php-fpm}} 加入default runlevel：

{{RootCmd|rc-update add php-fpm default}}

重新加载 {{c|nginx}} 配置文件：

{{RootCmd|/etc/init.d/nginx reload}}

=== IP地址访问列表 ===

下面的例子说明了如何使一个特定的URL地址（本例中为“{{Path|/nginx_status}}”）只能被：

* 当前主机（比如''192.0.2.1 127.0.0.1''）
* 以及IP段（''198.51.100.0/24''）

{{FileBox|filename=/etc/nginx/nginx.conf|title=为 /nginx_status 页面开启IP访问列表|1=
http {
    server { 
            location /nginx_status {
                     stub_status on;
                     allow 127.0.0.1/32;
                     allow 192.0.2.1/32;
                     allow 198.51.100.0/24;
                     deny all;
             }
     }
}
}}

=== 基础的授权方式 ===

nginx允许通过验证用户名和密码来限制资源的访问：

{{FileBox|filename=/etc/nginx/nginx.conf|title=为 / 位置启用并配置用户验证 | 1=
http {
    server { 
            location / {
                   auth_basic           "Authentication failed";
                   auth_basic_user_file conf/htpasswd;
             }
     }
}
}}
 
The {{Path|htpasswd}} file can be generated using:

{{Cmd|openssl passwd}}

=== TLS支持 ===

十分建议仅支持TLS，并禁用一切已知的不安全密码。

{{FileBox|filename=/etc/nginx/nginx.conf|title=启用TLS和禁用不安全的密码|1=
server {
    listen 443;
    server_name host.tld;
    ssl on;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_dhparam /etc/ssl/nginx/host.tld.dh4096.pem;
}
}}

ebuild在{{Path|/etc/ssl/nginx/}} 中提供了自签名证书。

=== 正向加密 ===

diffie-hellman证书可以通过 {{c|openssl}} 来创建：

{{Cmd|openssl dhparam -out dh4096.pem 4096}}

=== 第三方模块 ===

下载第三方模块后，将其移动至 {{Path|/usr/src}}。手动编译选中的Nginx模块，并将下列配置加入 {{Path|/etc/portage/make.conf}}：

{{FileBox|filename=/etc/portage/make.conf|title=添加第三方模块|1=
NGINX_ADD_MODULES="/usr/src/nginxmodule"}}

重新编译 nginx 以添加第三方模块：

{{Emerge|www-servers/nginx}}

== 用法 ==

=== 服务控制 ===

==== OpenRC ====

启动nginx：

{{RootCmd|/etc/init.d/nginx start}}

停止nginx：

{{RootCmd|/etc/init.d/nginx stop}}

将nginx添加至default runlevel：

{{RootCmd|rc-update add nginx default}}

重启nginx服务： 

{{RootCmd|/etc/init.d/nginx restart}}

== 故障排除 ==

当遇到问题时，下列命令可以帮助你定位故障。

=== 验证配置 ===

验证正在运行的nginx配置没有故障：

{{RootCmd|/usr/sbin/nginx -t|output=<pre>
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
</pre>}}

在运行{{c|nginx}}时添加 <code>-t</code> 选项，它会自动验证配置文件的正确性，而并不会真正启动{{c|nginx}}守护进程。

=== 验证进程正在运行 ===

验证{{c|nginx}}进程正在运行：

{{Cmd|ps aux {{!}} egrep 'nginx{{!}}PID'|output=<pre>
  PID TTY      STAT   TIME COMMAND
26092 ?        Ss     0:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
26093 ?        S      0:00 nginx: worker proces
</pre>}}

=== 验证绑定的地址和端口 ===

验证nginx服务正在监听正确的TCP端口（如HTTP使用的80端口，或者HTTPS使用的443端口）：

{{RootCmd|netstat -tulpen {{!}} grep :80|output=<pre>
tcp        0      0 127.0.0.1:80            0.0.0.0:*               LISTEN      0          12336835   -26092/nginx: master
</pre>}}

== 另请参阅 ==

* [[Apache]] - 最常用的HTTP服务器。
* [[Lighttpd]] - 一个快速、轻量的web服务器。

== 外部资源 ==

* https://nginx.org/en/docs/beginners_guide.html - A {{c|nginx}} beginner's guide. Helpful for those who do not know much about {{c|nginx}}.
* https://nginx.com/resources/admin-guide/ - The {{c|ngnix}} administration guide. Helpful for web administrators who have been working in the field.
* http://wiki.nginx.org/Main - The nginx wiki.
* https://github.com/h5bp/server-configs-nginx - H5BP nginx config.

[[Category:Web Servers]]
