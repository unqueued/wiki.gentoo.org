== Installing Gentoo on an Odroid-XU4 ==

This will be a step by step guide on getting a fully functional Gentoo distribution of GNU/Linux onto your Odroid-XU4. It will begin with assuming the user has done nothing to the XU4 and assuming that the XU4 has internet access to it. The guide will walkthrough how to install gentoo from another OS onto another partition, then configuring the bootloader(U-Boot) to boot off of that partition.
This guide is based off of https://wiki.gentoo.org/wiki/Installation_alternatives#Installing_Gentoo_from_an_existing_Linux_distribution

Specific hardware needed: A sd-card to USB device.

Steps:

1) Put the sd-card into a sd-card-to-USB device and begin to partition it. If it is a fresh sd-card from hardkernel then there should be plenty of room to split the first partition in 2(my card is 16gb).<br>
My favorite way to do this is using Gparted.<br>

2) Boot into the system currently installed onto the XU4, Ubuntu/Debian/other it doesn’t really matter(Does it work?). 
On the current OS of the XU4, mount the empty partition to /mnt (mine is mmcblk0p2, yours is whatever partition you made)<br><br>
<code>mount /dev/mmcblk0p2 /mnt<br>
cd /mnt</code><br><br>
3) Get the stage3 tarball from www.gentoo.org, you will need the ARMv7a|HardFP and change the filename/date accordingly<br><br>
<code>wget http://distfiles.gentoo.org/releases/arm/autobuilds/20160523/stage3-armv7a_hardfp-20160523.tar.bz2</code><br><br>

4) Extract the tarball, we now have a root file system that we can start working with<br><br>
<code>tar -xjvf stage3-armv7a_hardfp-20160523.tar.bz2<br>
rm stage3-armv7a_hardfp-20160523.tar.bz2</code><br><br>

5) Once extracted, go to the / directory then chroot into the partition<br><br>
<code>cd /<br>
mount -t proc none /mnt/proc<br>
mount -o bind /sys /mnt/sys<br>
mount -o bind /dev /mnt/dev<br>
cp -L /etc/resolv.conf /mnt/etc<br>
chroot /mnt /bin/bash<br>
env-update (might fail without the portage snapshot)<br>
source /etc/profile
</code>
<br><br>
6) We need to get the portage snapshot, before we can do this we must set the date (emerge-webrsync didn’t work on my machine for some reason)<br><br>
<code>
date MMDDHHMMYYYY<br>
cd /usr<br>
wget http://gentoo.osuosl.org/snapshots/portage-latest.tar.bz2<br>
tar -xvjf portage-latest.tar.bz2<br>
emerge –sync<br>
rm portage-latest.tar.bz2
</code>
<br><br>
7) Before we do anything we must alter the make.config file, if we don’t compilations will take a long time on a single arm core. Be sure to add makeopts=”-j9”. Use flags are up to you, for the purpose of this guide I kept them as small as possible. Future experimentation would be switching -march=armv7-a to native, though that will cause problems for distcc, but that’s for another guide.<br><br>

<code>nano /etc/portage/make.conf</code><br><br>
Below is a sample make.config<br>

# These settings were set by the catalyst build script that automatically<br>
# built this stage.<br>
# Please consult /usr/share/portage/config/make.conf.example for a more<br>
# detailed example.<br>
CFLAGS="-O2 -pipe -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=hard"<br>
# WARNING: Changing your CHOST is not something that should be done lightly.<br>
# Please consult https://wiki.gentoo.org/wiki/Changing_the_CHOST_variable befor$<br>
CHOST="armv7a-hardfloat-linux-gnueabi"<br>
PORTDIR="/usr/portage"<br>
DISTDIR="/usr/portage/distfiles"<br>
PKGDIR="/usr/portage/packages"<br>
<br>
# This sets the language of build output to English.<br>
# Please keep this setting intact when reporting bugs.<br>
LC_MESSAGES=C<br>
<br>
USE="-bindist"<br>
MAKEOPTS="-j9"
<br><br>

8) Before we compile a kernel we must update the system, note this will take a while(several hours, gcc takes about half of the time, be sure you have makeopts=”-j9”), be sure that the date was set correctly before running emerge<br><br>
<code>
emerge --sync <br>
emerge --update --deep --newuse @world <br>
emerge --depclean <br>
emerge -a app-portage/gentoolkit (needed for revdep-rebuild)<br>
revdep-rebuild
</code>
<br><br>
9) Time to compile the kernel, unfortunately the official gentoo sources do not work for the odroid-xu4 SoC. If one tries to compile with gentoo-sources and configure the XU4 to boot, it will fail. If one tries to boot the XU4 with a non-gentoo kernel/different config, the system will boot however there will be problems(network interfaces not being detected for example). What needs to happen is one must git clone hardkernel’s official kernel and then compile it with any features one might want. There are 2 ways to do this, manual and automatically with genkernel. Below is how to do it with genkernel.<br><br>
<code>
nano /etc/fstab (ensure that partitions are correctly mapped)<br>
mount /dev/mmcblk0p2 /boot<br>
emerge -a dev-vcs/git<br>
cd /usr/src<br>
git clone https://github.com/hardkernel/linux.git -b odroidxu4-v4.2-rc1 --depth 1 <br>
mv linux linux-4.2-rc1-xu4<br>
ln -s linux-4.2-rc1-xur linux <br>
emerge -a sys-devel/bc (got this error when trying to compile kernel)<br>
genkernel --kernel-config=/usr/src/linux/arch/arm/configs/odroidxu4_defconfig kernel
</code><br><br>
10) Modify boot loader to boot new kernel and filesystem<br><br>
<code>
cd /boot<br>
nano boot.ini</code><br><br>
Below is my boot.ini, adjust the setenv zimage kernel line and setenv bootrootfs line<br>
ODROIDXU-UBOOT-CONFIG

# U-Boot Parameters (DO NOT MODIFY)
setenv version 4.2.0-rc1-41
#setenv zimage vmlinuz-${version}
setenv zimage kernel-genkernel-arm-4.2.0-rc1+
setenv uinitrd uInitrd-${version}
setenv fdtbin exynos5422-odroidxu4-${version}.dtb

setenv zimage_addr_r 0x40008000
setenv initrd_addr_r 0x42000000
setenv fdtbin_addr_r 0x44000000

setenv initrd_high "0xffffffff"
setenv fdt_high "0xffffffff"

# Default boot argument
setenv bootrootfs "root=/dev/mmcblk0p2 rootwait rw"
setenv console "console=ttySAC2,115200n8"

setenv bootargs "${bootrootfs} ${console}"

# boot commands
fatload mmc 0:1 ${zimage_addr_r} ${zimage}
fatload mmc 0:1 ${initrd_addr_r} ${uinitrd}
fatload mmc 0:1 ${fdtbin_addr_r} ${fdtbin}
bootz ${zimage_addr_r} ${initrd_addr_r} ${fdtbin_addr_r}"

11)
Set a root password<br><br>
<code>
passwd
</code><br><br>

12) Boot the new kernel and into the new Gentoo environment and that’s it! You should be able to boot without problem! Welcome to Gentoo on the Odroid-XU4 !

Extras)


Create a non-root user
https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Finalizing

Networking hasn’t been declared yet, please verify the interfaces have been detected before the below commands are executed<br><br>
<code>
cd /etc/init.d<br>
ln -s net.lo net.eth0<br>
rc-update add net.eth0 default
</code><br>
Adding SSHD as a default service<br><br>
<code>
rc-update add sshd default
</code><br><br>

If on a switch it’s necessary to declare a static ip<br><br>
<code>
cd /etc/conf.d<br>
nano net<br>
config_eth0=("10.0.0.2 netmask 255.255.255.0")<br>
routes_eth0=("default gw 10.0.0.1")
</code><br><br>
Since everything is being define manually, resolv.conf must have a nameserver in it<br><br>
<code>
cd /etc<br>
nano resolv.conf<br>
nameserver 8.8.8.8
</code>
<br><br>
Start installing all necessary software that you need!

Fan/Temperature Control
Gentoo puts all of the temperature monitors in the

<code>/sys/devices/virtual/thermal</code>

folder. In order to change the fan settings you must modify the .dtb, these are located in:
/usr/src/linux/arch/arm/boot/dts

One can modify the exynos5422-odroidxu4.dts easily, however notice that exynos5422-odroidxu3-common.dtsi is included, here is where one portion of the fan control:<br>

<code>        fan0: pwm-fan {
                compatible = "pwm-fan";
                pwms = <&pwm 0 20972 0>;
                cooling-min-state = <0>;
                cooling-max-state = <3>;
                #cooling-cells = <2>;
                cooling-levels = <255 255 255 255>;
        };</code><br>

Where 255 = 100%

To change the CPU states modify the exynos5422-cpu-thermal.dtsi file


Notes)
It might be worth experimenting with march=native rather than pre-defined as it is currently, but if the use case for the xu4 is distcc this will cause problems.

The current guide uses the stock initrd, using genkernel to generate a new initrd has not been tested
