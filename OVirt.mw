         
== Background ==
oVirt project is a complete open sourced virtualization management platform working with kvm. More can be found here: [[http://www.ovirt.org/]]<br />
Additional information (including presentations) from a Workshop held early this November is available here: [[http://www.ovirt.org/wiki/Workshop_November_2011]]<br />
The Project is made of an '''Engine core''', which is the backend server. 
Every hypervisor should have a '''VDSM agent''' installed, which is the agent the core will use to manage that host.
Additionally there's a '''client side UI''' (GWT based) and/or '''RESTful API'''.

== Description ==
This article will try to explain how to install oVirt on Gentoo system using instructions from ovirt.org on [http://www.ovirt.org/wiki/Building_Ovirt_Engine how to build oVirt from source].

== Important ==
This manual is what I did on my Gentoo server. If you have different install, which you probably do, you might not strictly do copy/paste and some additional steps might be necessary. I will specify every error I encountered and a solution to it at the end of the document. Feel free to add any problem not noted.

== Setting default locale ==
If you didn't already, specify default locale for your server ('''as root'''):
* Check /etc/locale.gen
 $> cat /etc/locale.gen
Output (may be different)
 en_US ISO-8859-1
 en_US.UTF-8 UTF-8
 sr_RS UTF-8
 sr_RS@latin UTF-8 
* Create /etc/env.d/02locale
 $> echo "LANG=\"en_US.UTF-8\"" > /etc/env.d/02locale
* Update environment for current shell (and every new shell you open) or simply reboot
 $> env-update &amp;&amp; source /etc/profile
== Step 2. Install vdsm ==
* Install dev-python/pyflakes as it is needed by vdsm
 $> emerge dev-python/pyflakes
* Obtain VDSM source RPM
 $> wget -c http://fsimonce.fedorapeople.org/vdsm/fedora-16/SRPMS/vdsm-4.9.0-0.200.g2fc4e63.fc16.src.rpm
* Convert rpm package to tgz
 $> rpm2tgz vdsm-4.9.0-0.200.g2fc4e63.fc16.src.rpm
* Unpack the archive
 $> tar zxvf vdsm-4.9.0-0.200.g2fc4e63.fc16.src.tgz
* Enter the directory and do the configure-make-make install magic (Recommended to use –prefix when compiling from source so you can have all files under one directory per package)
 $> cd vdsm-4.9.0-0.200.g2fc4e63.fc16
 $> ./configure –prefix=/path/to/install/directory && make && make install

== Step 3. Install Java runtime ==
Ovirt manual is suggesting installing openJDK. My server has sun-jdk already set so I will point you to [http://www.gentoo.org/doc/en/java.xml Gentoo Java guide] for setting java environment. '''Make sure you are seting jdk version 1.6!!!'''

== Step4. Install Java application server – JBoss ==
This step describes installing upstream server binaries.
* Download binaries archive 
 $> wget http://sourceforge.net/projects/jboss/files/JBoss/JBoss-5.1.0.GA/jboss-5.1.0.GA-jdk6.zip/download -O jboss-5.1.0.GA-jdk6.zip
* Unzip the archive
 $> unzip jboss-5.1.0.GA-jdk6.zip
* Move the directory to a suitable location. JBoss folder should be owned by the unprivileged user, so you'll be able to deploy build products into JBoss.
 $> mv jboss-5.1.0.GA /usr/local/.
 $> chown -R ''devuser'':''devusergroup'' /usr/local/jboss-5.1.0.GA
* Test that JBoss is working by	starting the server ('''-b 0.0.0.0''' option makes server bind to all IP addresses)
$> /usr/local/jboss-5.1.0.GA/bin/run.sh -b 0.0.0.0
=== Troubleshooting JBoss ===
If you're being attacked by exceptions, follow this list:
* Verify jboss folder owner and permissions.
* For external connections, make sure your firewall allows incoming traffic on 8080 port.
* If your machine has and selinux policy installed, make sure it will not block JBoss.
* Used TCP ports: 8080/8443/8083/1090/4457
** These ports may be used by other applications. Either close other application or change JBoss configuration (/usr/local/jboss-5.1.0.GA/server/default/deploy/jbossweb.sar/server.xml)
** Since JBoss binds to the hostname, your hostname should be resolvable, or you may add it to /etc/hosts for local resolution.
 127.0.0.1 localhost engine-dev

== Step 5. Installing build tools ==
 
* Install dev-vcs/git
 
$> emerge -DuNavt git

 
* Install dev-java/maven-bin
 
'''It is a must to build version 2 of maven. Version 3 is not
supported!!!'''

 
As of time of writing, stable
version in portage is 2.2.1 so it is safe to just emerge it:

 
$> emerge -DuNavt
dev-java/maven-bin

 
If unsure, emerge strict
version:

 
$> emerge -DuNavt
=dev-java/maven-bin-2.2.1

 
* Setup the needed repositories for Maven. To create default 	repository directory, run maven as non-privileged user. DO NOT use 	root user.
 
#> mvn-2.2

 
* This command will create .m2 directory in your unprivileged 	user's HOME directory
* Copy paste the content of the file below into users 	~/.m2/settings.xml file
 
<?xml version="1.0"?>

<settings xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
          http://maven.apache.org/xsd/settings-1.0.0.xsd">

<!--**************************** PROFILES ****************************-->

        <activeProfiles>
                <activeProfile>oVirtEnvSettings</activeProfile>

        </activeProfiles>

        <profiles>
                <profile>
                        <id>oVirtEnvSettings</id>
                        <properties>

                                <jbossHome>/usr/local/jboss-5.1.0.GA</jbossHome>
                                <JAVA_1_6_HOME>/usr/lib/jvm/sun-jdk-1.6</JAVA_1_6_HOME>
                        </properties>
                        <repositories>
                                 <repository>

                                    <id>jboss-public-repository-group</id>
                                    <name>JBoss Public Maven Repository Group</name>
                                    <url>https://repository.jboss.org/nexus/content/groups/public</url>
                                    <layout>default</layout>

                                    <releases>
                                       <enabled>true</enabled>
                                       <updatePolicy>never</updatePolicy>
                                    </releases>
                                    <snapshots>

                                       <enabled>true</enabled>
                                       <updatePolicy>never</updatePolicy>
                                    </snapshots>
                                </repository>
                                <repository>

                                    <id>repository.jboss.org</id>
                                    <url>http://repository.jboss.org/maven2</url>
                                    <releases>
                                    </releases>
                                    <snapshots>

                                       <enabled>false</enabled>
                                    </snapshots>
                                </repository>

                                <repository>
                                    <id>jboss-deprecated-repository-group</id>

                                    <name>JBoss Deprecated Maven Repository Group</name>
                                    <url>https://repository.jboss.org/nexus/content/repositories/deprecated/</url>
                                    <releases>
                                       <enabled>true</enabled>

                                       <updatePolicy>never</updatePolicy>
                                    </releases>
                                    <snapshots>
                                       <enabled>true</enabled>
                                       <updatePolicy>never</updatePolicy>

                                    </snapshots>
                                </repository>
                        </repositories>

                        <pluginRepositories>
                                <pluginRepository>
                                   <id>jboss-public-repository-group</id>

                                   <name>JBoss Public Maven Repository Group</name>
                                   <url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>
                                   <layout>default</layout>
                                   <releases>

                                      <enabled>true</enabled>
                                      <updatePolicy>never</updatePolicy>
                                   </releases>
                                   <snapshots>
                                      <enabled>true</enabled>

                                      <updatePolicy>never</updatePolicy>
                                   </snapshots>
                                </pluginRepository>
                        </pluginRepositories>
                </profile>

        </profiles>
</settings>

 
* Modify '''jbossHome''' 	and '''JAVA_1_6_HOME''' 	tags as needed. '''If theese parameters are incorrect, 	compiling using maven will fail!'''
 
== Step 6. Installing database ==
 
Ovirt Engine works with postgresql
8.4.x or 9.1.x

 
* Emerge Postgresql server. Make sure '''uuid''' 	useflag is enabled!
 
$> echo
"dev-db/postgresql-server uuid"

>>/etc/portage/package.use/monolithic

 
$> emerge -DuNavt
dev-db/postgresql-server:9.1 jdbc-postgresql

 
* Make sure the jdbc installed is 9.1_XXX (you may need to 	unmask it).
* Once emerged, verify the config files in /etc/postgresql-9.1 	and /etc/conf.d directory. Use [[Gentoo Postgresql Guide]] as a reference for configuration.
* Make sure pg_hba.conf file has access rules set to trust
* Add your unprivileged user to postgres group
 
$> usermod -a -G postgres <user>

 
* Run the relevant emerge --config … command.
 
== Step 7. Build oVirt-engine ==
 
==== Fetch ovirt-engine codebase ====
 
* As unprivileged user, choose a directory where you want to keep oVirt sources and 'cd' to it. This directory will be referenced as $OVIRT_HOME. 
 
 $> cd $OVIRT_HOME $> git clone git://gerrit.ovirt.org/ovirt-engine


==== Creating the database ====
 
 $> cd $OVIRT_HOME/backend/manager/dbscripts $> ./create_db_devel.sh -u postgres


==== Modify build environment ====
 
* Modify /usr/bin/mvn-2.2 – 	add this as first uncommented line (see the comments in file):
 
set MAVEN_OPTS="-Xmx2048M
-XX:MaxPermSize=2048M"

 
* Values for mx and 	MaxPermSize may be different!
* Build GWT to work with a 	specific browser. Modify
 
 $OVIRT_HOME/frontend/webadmin/modules/webadmin/src/main/java/org/ovirt/engine/ui/webadmin/WebAdmin.gwt.xml<br>
$OVIRT_HOME/frontend/webadmin/modules/userportal/src/main/java/org/ovirt/engine/ui/userportal/UserPortal.gwt.xml 


by adding the lines:

 
 <!-- Reduce the number of permutations to compile, just for tests: -->
 <set-property name="user.agent" value="gecko1_8"/>


==== Building ovirt-engine and REST api ====
 
* As unprivileged user
 
 $> cd $OVIRT_HOME
 $> mvn-2.2 -e -DskipTests=true clean install


==== Compile web-admin and user-portal ====
 
* As unprivileged user
 
 $> cd $OVIRT_HOME
 $> mvn-2.2 -e -DskipTests=true clean install -Pgwt-admin,gwt-user


<br>
<br>

 
==== Application deployment ====
 
* The first deployment of the 	application to JBoss AS container should use the setup profile:
 
 $> cd $OVIRT_HOME/ear
 $> mvn-2.2 -e -DskipTests=true clean install -Pdep,setup

 
* There is a issue with the dep and setup_postgres profiles 	getting in the way of each other. The setup_postgres profile will 	prevent the deployment of the quartz jar to the JBoss server. So 	after this step completes, run:
 
 $> cd $OVIRT_HOME/ear
 $> mvn-2.2 -e -DskipTests=true clean install -Pdep

 
* From this point on, since postgres is already set up, every 	time you deploy you can simply run:
 
 $> cd $OVIRT_HOME/ear
 $> mvn-2.2 -e -DskipTests=true clean install -Pdep


==== Testing ====
 
* Start JBoss application server
 
 $> /usr/local/jboss-5.1.0.GA/bin/run.sh -b 0.0.0.0

 
* Test JBoss by accessing from browser
 
http://localhost:8080/

 
* Use username '''admin@internal''' and password '''letmein!''' 	for testing access.
* Accessing the RESTful API:
 
 wget -O - --debug --auth-no-challenge --http-user=admin@internal --http-password='letmein!' head='Accept: application/xml' http://<server name>:<port>/api/

 
* From the browser
 
 http://<server name>:<port>/api

 
* Accessing the web-admin:
 
 http://<server name>:<port>/webadmin

 
* Accessing the user-portal
 
 http://<server name>:<port>/UserPortal



<br>
<br>

 
=== Step 8: How to contribute ===

TODO: explain oVirt Gerrit
