         
== Background ==
oVirt project is a complete open sourced virtualization management platform working with kvm. More can be found here: [[http://www.ovirt.org/]]<br />
Additional information (including presentations) from a Workshop held early this November is available here: [[http://www.ovirt.org/wiki/Workshop_November_2011]]<br />
The Project is made of an '''Engine core''', which is the backend server. 
Every hypervisor should have a '''VDSM agent''' installed, which is the agent the core will use to manage that host.
Additionally there's a '''client side UI''' (GWT based) and/or '''RESTful API'''.

== Description ==
This article will try to explain how to install oVirt on Gentoo system using instructions from ovirt.org on [[how to build oVirt from source]].

== Important ==
 
<pre>This manual is what I did on my Gentoo server. If you have different install, which you probably do, you might not strictly do copy/paste and some additional steps might be necessary. I will specify every error I encountered and a solution to it.
</pre>

== Step 1. Setting default locale ==
 
<pre>If you didn't already, specify default locale for your server ('''as root'''):
</pre>
 
* <pre>Check /etc/locale.gen </pre>
 
<pre> $&gt; cat /etc/locale.gen
 Output (may be different)
 en_US ISO-8859-1
 en_US.UTF-8 UTF-8
 sr_RS UTF-8
 sr_RS@latin UTF-8


</pre>
 
* <pre>Create /etc/env.d/02locale </pre>
 
<pre> $&gt; echo "LANG=\"en_US.UTF-8\"" &gt; /etc/env.d/02locale
</pre>
 
* <pre>Update environment for current shell (and every new shell you open) or simply reboot </pre>
 
<pre> $&gt; env-update &amp;&amp; source /etc/profile
</pre>

== Step 2. Install vdsm ==
 
* Install dev-python/pyflakes as it is needed by vdsm
 
$&gt; emerge dev-python/pyflakes

 
* Install vdsm
** Obtain source RPM
*
 
$&gt; wget -c
http://fsimonce.fedorapeople.org/vdsm/fedora-16/SRPMS/vdsm-4.9.0-0.200.g2fc4e63.fc16.src.rpm

  
$&gt; rpm2tgz vdsm-4.9.0-0.200.g2fc4e63.fc16.src.rpm

  
$&gt; tar zxvf vdsm-4.9.0-0.200.g2fc4e63.fc16.src.tgz

  
$&gt; cd vdsm-4.9.0-0.200.g2fc4e63.fc16

 
$&gt; ./configure –prefix=/path/to/install/directory &amp;&amp;
make &amp;&amp; make install

 
== Step 3. Install Java runtime ==
 
Ovirt manual is suggesting installing openJDK. My server has
sun-jdk already set so I will point you to [[Gentoo Java guide]] for setting java environment.

 
'''Make sure you are seting jdk version 1.6!!!'''

 
== Step4. Install Java application server – JBoss ==
 
This step describes installing
upstream server binaries.

 
* Download binaries archive
 
$&gt; wget
http://sourceforge.net/projects/jboss/files/JBoss/JBoss-5.1.0.GA/jboss-5.1.0.GA-jdk6.zip/download
-O jboss-5.1.0.GA-jdk6.zip

 
* unzip the archive
 
$&gt; unzip jboss-5.1.0.GA-jdk6.zip

 
* move the directory to a suitable location. JBoss folder 	should be owned by the developer user, so you'll be able to deploy 	build products into JBoss.
 
$&gt; mv jboss-5.1.0.GA /usr/local/.

 
$&gt; chown -R devuser:devusergroup /usr/local/ jboss-5.1.0.GA

 
* Test that JBoss is working by 	starting the server ('''-b 0.0.0.0''' option makes server bind to 	all IP addresses)
 
$&gt;
/usr/local/jboss-5.1.0.GA/bin/run.sh -b 0.0.0.0

 
=== Troubleshooting JBoss ===
 
If you're being attacked by exceptions,
follow this list:

 
* Verify jboss folder owner and 	permissions.
* For external connections, make 	sure your firewall allows incoming traffic on 8080 port.
* If your machine has and selinux 	policy installed, make sure it will not block JBoss.
* Used TCP ports: 	8080/8443/8083/1090/4457
** These ports may be used by other 		applications. Either close other application or change JBoss 		configuration 		(/usr/local/jboss-5.1.0.GA/server/default/deploy/jbossweb.sar/server.xml)
** Since JBoss binds to the 		hostname, your hostname should be resolvable, or you may add it to 		/etc/hosts for local resolution.
*
 
127.0.0.1 localhost engine-dev

 
== Step 5. Installing build tools ==
 
* Install dev-vcs/git
 
$&gt; emerge -DuNavt git

 
* Install dev-java/maven-bin
 
'''It is a must to build version 2 of maven. Version 3 is not
supported!!!'''

 
As of time of writing, stable
version in portage is 2.2.1 so it is safe to just emerge it:

 
$&gt; emerge -DuNavt
dev-java/maven-bin

 
If unsure, emerge strict
version:

 
$&gt; emerge -DuNavt
=dev-java/maven-bin-2.2.1

 
* Setup the needed repositories for Maven. To create default 	repository directory, run maven as non-privileged user. DO NOT use 	root user.
 
#&gt; mvn-2.2

 
* This command will create .m2 directory in your unprivileged 	user's HOME directory
* Copy paste the content of the file below into users 	~/.m2/settings.xml file
 
<pre>&lt;?xml version="1.0"?&gt;

&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
          http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;

&lt;!--**************************** PROFILES ****************************--&gt;

        &lt;activeProfiles&gt;
                &lt;activeProfile&gt;oVirtEnvSettings&lt;/activeProfile&gt;

        &lt;/activeProfiles&gt;

        &lt;profiles&gt;
                &lt;profile&gt;
                        &lt;id&gt;oVirtEnvSettings&lt;/id&gt;
                        &lt;properties&gt;

                                &lt;jbossHome&gt;/usr/local/jboss-5.1.0.GA&lt;/jbossHome&gt;
                                &lt;JAVA_1_6_HOME&gt;/usr/lib/jvm/sun-jdk-1.6&lt;/JAVA_1_6_HOME&gt;
                        &lt;/properties&gt;
                        &lt;repositories&gt;
                                 &lt;repository&gt;

                                    &lt;id&gt;jboss-public-repository-group&lt;/id&gt;
                                    &lt;name&gt;JBoss Public Maven Repository Group&lt;/name&gt;
                                    &lt;url&gt;https://repository.jboss.org/nexus/content/groups/public&lt;/url&gt;
                                    &lt;layout&gt;default&lt;/layout&gt;

                                    &lt;releases&gt;
                                       &lt;enabled&gt;true&lt;/enabled&gt;
                                       &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
                                    &lt;/releases&gt;
                                    &lt;snapshots&gt;

                                       &lt;enabled&gt;true&lt;/enabled&gt;
                                       &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
                                    &lt;/snapshots&gt;
                                &lt;/repository&gt;
                                &lt;repository&gt;

                                    &lt;id&gt;repository.jboss.org&lt;/id&gt;
                                    &lt;url&gt;http://repository.jboss.org/maven2&lt;/url&gt;
                                    &lt;releases&gt;
                                    &lt;/releases&gt;
                                    &lt;snapshots&gt;

                                       &lt;enabled&gt;false&lt;/enabled&gt;
                                    &lt;/snapshots&gt;
                                &lt;/repository&gt;

                                &lt;repository&gt;
                                    &lt;id&gt;jboss-deprecated-repository-group&lt;/id&gt;

                                    &lt;name&gt;JBoss Deprecated Maven Repository Group&lt;/name&gt;
                                    &lt;url&gt;https://repository.jboss.org/nexus/content/repositories/deprecated/&lt;/url&gt;
                                    &lt;releases&gt;
                                       &lt;enabled&gt;true&lt;/enabled&gt;

                                       &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
                                    &lt;/releases&gt;
                                    &lt;snapshots&gt;
                                       &lt;enabled&gt;true&lt;/enabled&gt;
                                       &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;

                                    &lt;/snapshots&gt;
                                &lt;/repository&gt;
                        &lt;/repositories&gt;

                        &lt;pluginRepositories&gt;
                                &lt;pluginRepository&gt;
                                   &lt;id&gt;jboss-public-repository-group&lt;/id&gt;

                                   &lt;name&gt;JBoss Public Maven Repository Group&lt;/name&gt;
                                   &lt;url&gt;https://repository.jboss.org/nexus/content/groups/public-jboss/&lt;/url&gt;
                                   &lt;layout&gt;default&lt;/layout&gt;
                                   &lt;releases&gt;

                                      &lt;enabled&gt;true&lt;/enabled&gt;
                                      &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
                                   &lt;/releases&gt;
                                   &lt;snapshots&gt;
                                      &lt;enabled&gt;true&lt;/enabled&gt;

                                      &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
                                   &lt;/snapshots&gt;
                                &lt;/pluginRepository&gt;
                        &lt;/pluginRepositories&gt;
                &lt;/profile&gt;

        &lt;/profiles&gt;
&lt;/settings&gt;
</pre>
 
* Modify '''jbossHome''' 	and '''JAVA_1_6_HOME''' 	tags as needed. '''If theese parameters are incorrect, 	compiling using maven will fail!'''
 
== Step 6. Installing database ==
 
Ovirt Engine works with postgresql
8.4.x or 9.1.x

 
* Emerge Postgresql server. Make sure '''uuid''' 	useflag is enabled!
 
$&gt; echo
"dev-db/postgresql-server uuid"

&gt;&gt;/etc/portage/package.use/monolithic

 
$&gt; emerge -DuNavt
dev-db/postgresql-server:9.1 jdbc-postgresql

 
* Make sure the jdbc installed is 9.1_XXX (you may need to 	unmask it).
* Once emerged, verify the config files in /etc/postgresql-9.1 	and /etc/conf.d directory. Use [[Gentoo Postgresql Guide]] as a reference for configuration.
* Make sure pg_hba.conf file has access rules set to trust
* Add your unprivileged user to postgres group
 
$&gt; usermod -a -G postgres &lt;user&gt;

 
* Run the relevant emerge --config … command.
 
== Step 7. Build oVirt-engine ==
 
==== Fetch ovirt-engine codebase ====
 
* <pre>As unprivileged user, choose a directory where you want to keep oVirt sources and 'cd' to it. This directory will be referenced as $OVIRT_HOME. </pre>
 
<pre> $&gt; cd $OVIRT_HOME $&gt; git clone git://gerrit.ovirt.org/ovirt-engine
</pre>

==== Creating the database ====
 
<pre> $&gt; cd $OVIRT_HOME/backend/manager/dbscripts $&gt; ./create_db_devel.sh -u postgres
</pre>

==== Modify build environment ====
 
* Modify /usr/bin/mvn-2.2 – 	add this as first uncommented line (see the comments in file):
 
set MAVEN_OPTS="-Xmx2048M
-XX:MaxPermSize=2048M"

 
* Values for mx and 	MaxPermSize may be different!
* Build GWT to work with a 	specific browser. Modify
 
<pre> $OVIRT_HOME/frontend/webadmin/modules/webadmin/src/main/java/org/ovirt/engine/ui/webadmin/WebAdmin.gwt.xml<br>
$OVIRT_HOME/frontend/webadmin/modules/userportal/src/main/java/org/ovirt/engine/ui/userportal/UserPortal.gwt.xml 
</pre>

by adding the lines:

 
<pre> &lt;!-- Reduce the number of permutations to compile, just for tests: --&gt;
 &lt;set-property name="user.agent" value="gecko1_8"/&gt;
</pre>

==== Building ovirt-engine and REST api ====
 
* As unprivileged user
 
<pre> $&gt; cd $OVIRT_HOME
 $&gt; mvn-2.2 -e -DskipTests=true clean install
</pre>

==== Compile web-admin and user-portal ====
 
* As unprivileged user
 
<pre> $&gt; cd $OVIRT_HOME
 $&gt; mvn-2.2 -e -DskipTests=true clean install -Pgwt-admin,gwt-user
</pre>

<br>
<br>

 
==== Application deployment ====
 
* The first deployment of the 	application to JBoss AS container should use the setup profile:
 
<pre> $&gt; cd $OVIRT_HOME/ear
 $&gt; mvn-2.2 -e -DskipTests=true clean install -Pdep,setup
</pre>
 
* There is a issue with the dep and setup_postgres profiles 	getting in the way of each other. The setup_postgres profile will 	prevent the deployment of the quartz jar to the JBoss server. So 	after this step completes, run:
 
<pre> $&gt; cd $OVIRT_HOME/ear
 $&gt; mvn-2.2 -e -DskipTests=true clean install -Pdep
</pre>
 
* From this point on, since postgres is already set up, every 	time you deploy you can simply run:
 
<pre> $&gt; cd $OVIRT_HOME/ear
 $&gt; mvn-2.2 -e -DskipTests=true clean install -Pdep
</pre>

==== Testing ====
 
* Start JBoss application server
 
<pre> $&gt; /usr/local/jboss-5.1.0.GA/bin/run.sh -b 0.0.0.0
</pre>
 
* Test JBoss by accessing from browser
 
http://localhost:8080/

 
* Use username '''admin@internal''' and password '''letmein!''' 	for testing access.
* Accessing the RESTful API:
 
<pre> wget -O - --debug --auth-no-challenge --http-user=admin@internal --http-password='letmein!' head='Accept: application/xml' http://&lt;server name&gt;:&lt;port&gt;/api/
</pre>
 
* From the browser
 
<pre> http://&lt;server name&gt;:&lt;port&gt;/api
</pre>
 
* Accessing the web-admin:
 
<pre> http://&lt;server name&gt;:&lt;port&gt;/webadmin
</pre>
 
* Accessing the user-portal
 
<pre> http://&lt;server name&gt;:&lt;port&gt;/UserPortal

</pre>

<br>
<br>

 
=== Step 8: How to contribute ===

TODO: explain oVirt Gerrit
