== Overview ==
=== History ===
Its been about a year since the Raspberry Pi3 with a 64bit capable CPU became available.  At the outset, it was difficult to install Gentoo on the Pi 3 in 64 bit mode.  A lot of work by a lot of people has almost brought a 64 bit Gentoo install on the Pi 3 down to a standard handbook install.

=== What Works ===
All the Pi 3 hardware is supported in 64 bit mode.  That's
 WiFi
 USB
 Ethernet (needs USB)
 Bluetooth
 Hardware Video Acceleration
 Sound over HDMI

=== Untested ===
 PAL/NTSC Video Output
 Analogue Sound Output

=== Whats Required ===
 Gentoo Install on a PC 
 microSD card reader for the PC
 Raspberry Pi 3
 microSD card > 8G
 USB Keyboard 
 USB Mouse
 HDMI Display 
The content of the microSD card will be wiped during the install.

== Installation Overview ==
* Install crossdev on the PC
* Fetch the Raspberry Pi firmware
* Fetch the Raspberry Pi kernel
* Partition the microSD card
* Fetch the Gentoo bits of the install
* Cross compile and install your kernel
* Setup
* Boot the Pi to Test
 
== Install Crossdev on the PC ==
There are no prebuilt kernel images for the Pi3 in its arm64 mode. Until you have a arm64 kernel, you can't boot it in 64 bit mode.
Its a little chicken and egg.  Once the Pi is running, it can build its own kernels.

crossdev is Gentoos' tool for building cross compiler tool chains.  Once its installed, we will use it to build the arm64 kernel on the Gentoo PC.
{{Emerge|crossdev}}will install the crossdev tool.

=== Using Crossdev to Build A Cross Compiler ===
{{RootCmd|crossdev -t aarch64-unknown-linux-gnu}}

You may need to nominate an overlay to store the cross ebuilds. crossdev will let you know. 

There are other parameters you can pass to crossdev too. 
{{Important|Do not use -S to build a stable toolchain, arm64 moves quickly}}

When crossdev completes you will have a cross toolchain

{{Cmd|$ gcc-config -l
 [1] aarch64-unknown-linux-gnu-5.3.0
 [2] aarch64-unknown-linux-gnu-5.4.0
 [3] aarch64-unknown-linux-gnu-6.2.0
 [4] aarch64-unknown-linux-gnu-6.3.0 *

 [5] x86_64-pc-linux-gnu-5.3.0
 [6] x86_64-pc-linux-gnu-5.4.0 *
}}

It will also create an arm64 target root in '''/usr/aarch64-unknown-linux-gnu/''' This is used by cross emerge. 

Pure cross compiling, other than the kernel, is out of scope of this guide.

== Fetch the Raspberry Pi Firmware ==
The Raspberry Pi Firmware is maintained in a git repository.  You will need to install git if you don't have itp
{{RootCmd|emerge git}}

Don't do anything you don't need to do as root. 

As your normal user, make some space in the home directory for raspberry pi
{{cmd|mkdir raspberrypi}} will do nicely. 

This will be for the Raspberry Pi Firmware and kernel

{{Cmd|cd raspberrypi}}
{{cmd|git clone https://github.com/raspberrypi/firmware}}

will fetch the Pi firmware into a directory called '''firmware'''

It will actually fetch all the history too.  If you are short of space or bandwidth, a shallow clone is all that's needed.
{{Important|Receiving objects: 100% (484760/484760), 6.32 GiB | 6.34 MiB/s, done}} 
A full clone is 6.3G and we only need the /boot directory out of the master branch.

== Fetch the Raspberry Pi Kernel ==
Stay in raspberrypi and 

{{Cmd|git clone https://github.com/raspberrypi/linux}}

will fetch the kernel.

With absolutely no fanfare at all, 64 bit support was added to this kernel tree late in 2016.  No more searching por odd patches.

Not everything has been accepted by the mainline kernel yet but its getting closer.  Feel free to test for yourself.

{{Cmd|git checkout rpi-4.10.y}}

== Partition the microSD card ==
{{Warning|This Step Will Destroy ALL The Data on the Card}} 
== Fetch the Gentoo bits of the install ==
== Setup ==
== Boot the Pi to Test ==
