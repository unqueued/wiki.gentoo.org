== Overview ==
{{Important|This Page Has Not Been Tested.  It Might Drink All The Beer in Your Fridge ... or Worse}} 
=== History ===
Its been about a year since the Raspberry Pi3 with a 64bit capable CPU became available.  At the outset, it was difficult to install Gentoo on the Pi 3 in 64 bit mode.  A lot of work by a lot of people has almost brought a 64 bit Gentoo install on the Pi 3 down to a standard handbook install.

The Gentoo arm64 offering is experimental at the time of writing.  That means that very little is marked stable. Expect to use ACCEPT_KEYWORDS="~arm64" and then use package.accept_keywords too.

=== What Works ===
All the Pi 3 hardware is supported in 64 bit mode.  That's
 WiFi
 USB
 Ethernet (needs USB)
 Bluetooth
 Hardware Video Acceleration
 Sound over HDMI

=== Untested ===
 PAL/NTSC Video Output
 Analogue Sound Output

=== Whats Required ===
 Gentoo Install on a PC 
 microSD card reader for the PC
 Raspberry Pi 3
 microSD card > 8G
 USB Keyboard 
 USB Mouse
 HDMI Display 
The content of the microSD card will be wiped during the install.

== Installation Overview ==
* Install crossdev on the PC
* Fetch the Raspberry Pi firmware
* Fetch the Raspberry Pi kernel
* Partition the microSD card
* Fetch the Gentoo bits of the install
* Cross compile and install your kernel
* Setup
* Boot the Pi to Test
 
== Install Crossdev on the PC ==
There are no prebuilt kernel images for the Pi3 in its arm64 mode. Until you have a arm64 kernel, you can't boot it in 64 bit mode.
Its a little chicken and egg.  Once the Pi is running, it can build its own kernels.

crossdev is Gentoos' tool for building cross compiler tool chains.  Once its installed, we will use it to build the arm64 kernel on the Gentoo PC.
{{Emerge|crossdev}}will install the crossdev tool.

=== Using Crossdev to Build A Cross Compiler ===
{{RootCmd|crossdev -t aarch64-unknown-linux-gnu}}

You may need to nominate an overlay to store the cross ebuilds. crossdev will let you know. 

There are other parameters you can pass to crossdev too. 
{{Important|Do not use -S to build a stable toolchain, arm64 moves quickly}}

When crossdev completes you will have a cross toolchain

{{Cmd|$ gcc-config -l
 [1] aarch64-unknown-linux-gnu-5.3.0
 [2] aarch64-unknown-linux-gnu-5.4.0
 [3] aarch64-unknown-linux-gnu-6.2.0
 [4] aarch64-unknown-linux-gnu-6.3.0 *

 [5] x86_64-pc-linux-gnu-5.3.0
 [6] x86_64-pc-linux-gnu-5.4.0 *
}}

It will also create an arm64 target root in '''/usr/aarch64-unknown-linux-gnu/''' This is used by cross emerge. 

Pure cross compiling, other than the kernel, is out of scope of this guide.

== Fetch the Raspberry Pi Firmware ==
The Raspberry Pi Firmware is maintained in a git repository.  You will need to install git if you don't have it.
{{RootCmd|emerge git}}

Don't do anything you don't need to do as root. 

As your normal user, make some space in the home directory for raspberry pi
{{cmd|mkdir raspberrypi}} will do nicely. 

This will be for the Raspberry Pi Firmware and kernel

{{Cmd|cd raspberrypi}}
{{cmd|git clone https://github.com/raspberrypi/firmware}}

will fetch the Pi firmware into a directory called '''firmware'''

It will actually fetch all the history too.  If you are short of space or bandwidth, a shallow clone is all that's needed.
{{Important|Receiving objects: 100% (484760/484760), 6.32 GiB | 6.34 MiB/s, done}} 
A full clone is 6.3G and we only need the /boot directory out of the master branch.

== Fetch the Raspberry Pi Kernel ==
Stay in raspberrypi and 

{{Cmd|git clone https://github.com/raspberrypi/linux}}

will fetch the kernel into a directory called '''linux'''.

With absolutely no fanfare at all, 64 bit support was added to this kernel tree late in 2016.  No more searching for odd patches.

Not everything has been accepted by the mainline kernel yet but its getting closer.  Feel free to test for yourself.

The master branch may be broken as its commit by commit as it happens.  Test if you want to.  Its better to use an identified tag. At the time of writing that is rpi-4.10.y. The 4.10 mainline kernel is still at -rc status.
{{Cmd|cd linux}}
{{Cmd|git checkout rpi-4.10.y
Checking out files: 100% (33079/33079), done.

Branch rpi-4.10.y set up to track remote branch rpi-4.10.y from origin.

Switched to a new branch 'rpi-4.10.y'
}}

That's the kernel source tree in place, ready for configuring and cross compiling.

== Partition the microSD card ==
{{Warning|This Step Will Destroy ALL The Data on the Card}}

=== Background ===
The Pi does not need a boot loader. There is no firmware for the arm CPU, like there is in a PC. Instead, the GPU manages loading software for the CPU to execute, while the CPU is held reset. Its the GPU that has the 'BIOS' that gets everything started.

This makes it impossible to brick the Pi, since at worst, the microSD card needs to be reloaded. 

This arrangement does impose some constraints on the microSD card.
 The partition table must be MSDOS
 The first partition (/boot) must be vfat.
 The bootcode.bin file has some useful defaults that make setup easier.

=== Partitioning ===

Depending on how the microSD card is connected to you PC, it my be /dev/sdX or /dev/mmcblkY
{{Warning|Check! Do Get It Right - Don't Ruin your PC Install}}

Using the partitioning tool of your choice, make three partitions on your microSD card.
 boot 128Mb
 swap 2G
 root (/) the rest.
If you know what you are doing you can add more.

Make filesystems
 vfat
 mkswap
 mke2fs -t ext4

You know the block devices.

== Fetch the Gentoo bits of the install ==
To make it easy to cross refer to the Gentoo Handbook
{{RootCmd|mkdir /mnt/gentoo}}

Mount the microSD card / at /mnt/gentoo
{{RootCmd|mount /dev/xxx3 /mnt/gentoo}}

=== Install the arm64 Stage 3 ===
Following the Gentoo handbook fetch the [http://distfiles.gentoo.org/experimental/arm64/ arm64 stage3]
and untar it to /mnt/gentoo in the normal way.

=== Install a Portage Snapshot ===

Following the Gentoo handbook fetch the and unpack a
[http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2 portage shapshot].

Careful readers can copy their /usr/portage as long as ./packages and ./distfiles is omitted.

== Populating /boot ==
=== The Raspberry Pi Foundation Provided Files ===
Mount the microSD card boot at /mnt/gentoo/boot. (The microSD card root should still be mounted at /mnt/gentoo)
{{RootCmd|mount /dev/xxx1  /mnt/gentoo/boot}}

As root copy the content of your normal users ~/firmware/boot to /mnt/gentoo/boot.
{{RootCmd|cp -a /home/<user>/raspberrypi/firmware/boot/* /mnt/gentoo/boot}}

You should end up with files in /mnt/gentoo/boot, not a directory called boot.

== Cross Compiling The Kernel ==
{{Important|ARCH{{=}}arm64 must be specified everywhere or the kernel build system will use the HOST arch. This will destroy the arm64 .config file}}

=== Configure The Kernel ===

As your user {{cmd|cd raspberrypi/linux}}

The bcmrpi3_defconfig is almost right as it stands.  It defaults to the powersave CPU governor, which runs the Pi at 600MHz.
All the governors are there. Ondemand is recommended.    
{{Cmd|ARCH{{=}}arm64 CROSS_COMPILE{{=}}aarch64-unknown-linux-gnu- make bcmrpi3_defconfig}}
Either use menuconfig to chonge the default CPU governor, add something to the kernel command line, or change it after booting.
{{Cmd|ARCH{{=}}arm64 CROSS_COMPILE{{=}}aarch64-unknown-linux-gnu- make menuconfig}}

=== Build the Kernel ===
The build is conventional, other than telling the build system to build for arm64 and use the cross compiler.
{{Cmd|ARCH{{=}}arm64 CROSS_COMPILE{{=}}aarch64-unknown-linux-gnu- make -jX}}
Change X to the number of parallel MAKE jobs you want to run.  Convention is cores+1.

=== Install the Kernel to the microSD Card ===

The kernel is in three parts
 kernel binary
 kernel modules
 the device tree 
 Firmware
==== Install The Kernel Binary ====
As root copy the kernel binary from the build location 
{{RootCmd|cp /home/<user>/raspberrypi/linux/arch/arm64/boot/Image /mnt/gentoo/boot/kernel8.img}}

{{Important|If the file /boot/kernel8.img exists the bootcode.bin sets up the Pi for 64 bit operation and loads /boot/kernel8.img as the kernel}}

It is possible to use other kernel file names by adding entries to /boot/config.txt

==== Install The Device Tree ====
The device tree binary (.dtb) describes the hardware to the kernel. This avoids having all the existing hardware configurations ard coded into the kernel.

Due to the way the Raspberry Pi 64 bit kernel support has been added, there are going to be two different device trees with the same file name. A 32 bit version and a 64 bit version. They are not interchangeable. Move the 32 bit version out of the way.
{{RootCmd|mv /mnt/gentoo/boot/bcm2710-rpi-3-b.dtb /mnt/gentoo/boot/bcm2710-rpi-3-b.dtb_32}} That's renamed the 32 bit version. 

Copy the dtb from the build location
{{RootCmd|cp /home/<user>/raspberrypi/linux/arch/arm64/boot/dts/broadcom/bcm2710-rpi-3-b.dtb /mnt/gentoo/boot/bcm2710-rpi-3-b.dtb}}

It is possible to use other device tree file names by adding entries to /boot/config.txt

==== Install The Kernel Modules ====
From the top of the kernel tree, install the kernel modules.
{{RootCmd|cd /home/<user>/raspberrypi/linux}}
{{RootCmd|ARCH{{=}}arm64 CROSS_COMPILE{{=}}aarch64-unknown-linux-gnu- make modules_install INSTALL_MOD_PATH{{=}}/mnt/gentoo}}

==== Install The Kernel Firmware ====

== Setup ==
Much of the setup prior to booting a new Gentoo install is done in a chroot.
Chrooting into an arm64 intall from some other arch is beyond the scope of this guide. Instead, only the bare minimum setup, from outside the chroot is covered.
 
=== Root Password ===
You need this to be able to log in at all.

=== /etc/fstab ===
On the Pi, the microSD card will be /dev/mmcblk0 with partitions /dev/mmcblk0p1, /dev/mmcblk0p2 and /dev/mmcblk0p3

Edit /mnt/gentoo/etc/fstab to match.
{{RootCmd|nano -w  /mnt/gentoo/etc/fstab}}

=== /boot/config.txt ===

This file will not exist until its created. Create it with the following content.
{{RootCmd|nano -w /mnt/gentoo/boot/config.txt
# have a properly sized image
disable_overscan{{=}}1

# lets have the VC4 hardware accelerated video
dtoverlay{{=}}vc4-fkms-v3d

# for sound over HDMI
hdmi_drive{{=}}2

# Enable audio (loads snd_bcm2835)
dtparam{{=}}audio{{=}}on

# gpu_mem is for closed-source driver only; since we are only using the
# open-source driver here, set low
gpu_mem{{=}}64
}}
=== /boot/cmdline.txt ===
This file will not exist until its created. Create it with the following content.
{{RootCmd|nano -w /mnt/gentoo/boot/cmdline.txt
root{{=}}/dev/mmcblk0p3 rootfstype{{=}}ext4 rootwait 
}}

== Boot the Pi to Test ==
