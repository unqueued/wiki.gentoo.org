<languages />


{{Metadata|abstract=이 안내서는 독자 여러분께 자바 언어를 소개하고 젠투 리눅스에서 자바를 활용하는 방법을 설명합니다.}}

이 안내서는 독자 여러분께 자바 언어를 소개하고 젠투 리눅스에서 자바를 활용하는 방법을 설명합니다.

== 자바란 무엇인가요? ==

=== 간단히 살펴보기 ===

자바는 썬 마이크로시스템즈의 엔지니어가 개발한 프로그래밍 언어입니다. 언어는 객체지향이며 각각의 플랫폼에서 코드를 다시 컴파일하지 않아도 여러 플랫폼에서 동작하도록 설계했습니다. 비록 자바를 네이티브 프로그램처럼 컴파일 할 수 있지만 대부분의 자바 배포 프로그램은, 가비지 콜렉션과 같은 기능을 붙여가며 이식성을 부여할 수 있습니다. 플랫폼은 독립적으로 자바 컴파일러가 운영체제가 아닌 JRE(자바 런타임 환경)에서 실행할 "자바 바이트 코드"라고 하는 중간 형태의 자바 코드로 컴파일 할 수 있습니다. 

자바 바이트 코드를 실행하려면 JRE(자바 런타임 환경)을 설치해야합니다. JRE는 핵심 라이브러리, 플랫폼과 별개로 동작하는 자바 가상 머신, 브라우저 플러그인, 등을 제공합니다. JDK(자바 개발 키트)는 바이트 코드 컴파일러 및 디버거와 같은 프로그래밍 도구를 추가합니다. 

== 가상 머신 설치 ==

=== 선택 ===

젠투는 다양한 런타임 환경(JRE)과 개발 키트(JDK)를 제공합니다. 현재 선택할 수 있는 방안은 다음과 같습니다: 

{| class="table" style="text-align: left;" 
|- 
! 제작 주체
! JDK
! JRE
|- 
| The IcedTea Open Java SE (formerly icedtea6-bin)
| {{Package|dev-java/icedtea-bin}}
| 
|- 
| Oracle's Java 7 SE
| {{Package|dev-java/oracle-jdk-bin}}
| {{Package|dev-java/oracle-jre-bin}}
|- 
| Sun's Java 6 SE (오라클이 썬을 인수한 후 가려서 비활성화)
| {{Package|dev-java/sun-jdk}}
| {{Package|dev-java/sun-jre-bin}}
|- 
| The IBM Java SE
| {{Package|dev-java/ibm-jdk-bin}}
| {{Package|dev-java/ibm-jre-bin}}
|-
|}

=== JRE/JDK 설치 ===

기본 '''JDK'''를 설치하려면 {{c|emerge virtual/jdk}}를 실행하십시오. 또는 프로파일의 기본 '''JRE'''를 설치하려면 {{c|emerge virtual/jre}}를 실행하십시오. 

어떤 썬 꾸러미를 담고 있는 JDK 와 JRE는 최종 사용자 사용 동의서 또는 EULA에 동의해야합니다. 어쩌다 (dlj-1.1 같은)라이선스가 ({{Path|/etc/portage/make.conf}}에 있는)<code>ACCEPT_LICENSE</code> 변수에 안나타나면 JDK/JRE를 설치할 수 없습니다. {{Path|make.conf}}로의 승인 라이선스 추가 방법은 포티지 핸드북의 [[Handbook:X86/Working/Portage/ko#.EB.9D.BC.EC.9D.B4.EC.84.A0.EC.8A.A4|라이선스]]편을 참고하십시오. 

제한 라이선스의 번거로움을 피하려면 OpenJDK 프로젝트의 공개 Java 구현체인 icedtea-bin 설치를 고려하십시오. 

{{Note|''JDK''에는 "JRE''가 들어있음을 인지하십시오. JDK를 이머지하면 JRE 설치는 필요 없습니다.}}

=== 가져오기 제한 가상 머신 설치 ===

일부 JDK와 JRE를 설정하려면 추가 설정 몇단계를 거쳐야합니다. 꾸러미를 이머지하는건 보통입니다. 추가 과정이 필요하다면 이빌드는 사용자에게 어디서 무얼 다운로드해야 할 지 지침을 제공합니다.

언급한 파일을 {{Path|/usr/portage/distfiles}}에 다운로드하고, 파일을 올바른 디렉터리에 넣었으면 다시 {{c|emerge}} 명령을 실행하여 JRE/JDK 설치를 시작할 수 있게 하십시오.

=== 헤드리스 JRE 설정 === 

때로는 Java의 모든 기능을 활용하는 목적으로 완전한 JRE 가 필요하지 않을 때도 있습니다. 서버에서 Java를 활용할 때는 GUI, 그래픽, 음성, 프린터 관련 기능을 사용하지 않습니다. 단순화한(때로는 헤드리스로 참조하는) JRE를 설치하려면 USE 플래그 3개의 선택을 해제하십시오. 

{{FileBox|filename=/etc/portage/package.use|title=요구 USE 플래그 변경|1=
virtual/jre -X -alsa -cups
}}

현재 젠투 프로파일에 따라 이미 해당되는 설정이 되어 있을지도 모릅니다. 보통 개별 꾸러미에 적용하는 USE 플래그 설정은 {{c|emerge}} 를 시연 모드로 실행할 때 확인할 수 있습니다:

{{Cmd|emerge -pv virtual/jre}}

== 자바 가상 머신 설정 ==

=== 간단히 살펴보기 ===

젠투는 여러 JDK와 JRE를 어떤 기능상 겹침 없이 설치할 수 있습니다. 

{{c|java-config}} 도구를 루트 권한으로 실행하면, 시스템 영역 Java 가상 머신을 설정할 수 있습니다. 사용자는 사용자별 가상머신을 개별 설정할 목적으로 {{c|java-config}}를 사용할 수 있습니다. 

{{Note|{{c|eselect}}는 시스템 가상 머신과 사용자 가상 머신 설정을 바꿀 수 있습니다. {{c|eselect java-vm help}}를 참고하십시오.}}

=== 기본 가상 머신 설정 ===

{{c|java-config --list-available-vms}} 명령을 실행하면 시스템에 설치한 JRE와 JDK 목록이 나옵니다. 다음은 출력 예제입니다. 

{{RootCmd|java-config --list-available-vms|output=<pre>
The following VMs are available for generation-2:
1&#41;      IcedTea-bin 1.10.4 [icedtea-bin]
2&#41;      Sun JDK 1.5.0.20 [sun-jdk-1.5] (Build Only)
*&#41;      Sun JDK 1.6.0.16 [sun-jdk-1.6]
</pre>
}}

{{Note|'빌드 전용'으로 표기한 가상머신은 보안 취약점을 안고 있거나 끝물에 다다른(End Of Life)상태일 수도 있습니다. 젠투에서는 이 가상머신을 시스템 ''또는'' 사용자의 가상 머신으로 설정하지 않길 권합니다. 자세한 내용은 [[#.EB.B9.8C.EB.93.9C_.EC.A0.84.EC.9A.A9_.EA.B0.80.EC.83.81.EB.A8.B8.EC.8B.A0|빌드 전용 가상머신]]편을 참고하십시오.}}

''*''은 현재 (시스템 가상머신 또는 사용자 가상머신을 선택했을 경우) 활성화한 JVM을 나타냅니다. 각괄호("[]")에 있는 이름은 각 가상머신의 처리 번호입니다. 처리 번호는 가상머신을 설정할 때 {{c|java-config --set-system-vm}} 명령에 쓸 수 있습니다. 다음 텍스트에서는 시스템 가상머신을 설정하는 예제를 보여드립니다.

(원하는대로)직접 system VM을 설정하려면:

{{RootCmd|java-config --set-system-vm sun-jdk-1.6|output=<pre>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>}}

대안책: 관리 번호로 가상 머신 선택:

{{RootCmd|java-config --set-system-vm 3|output=<pre>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>
}}

일반 사용자는 {{c|java-config --set-user-vm}} 명령을 활용하십시오. 

{{Note | 사용자 또는 시스템 가상머신을 업데이트할 때 프로파일 <tt>source</tt> 지정은 더 이상 필요하지 않습니다.}}

=== 빌드 전용 가상머신 ===

일부 가상머신은 끝물에 다다른 상태이거나 보안 취약성이 있어 빌드 전용으로 플래그 표시했습니다. 이 가상머신은 젠투 실행 관리자를 통해 프로그램 실행을 목적으로 자동으로 활용하지 않지만(run-java-tool 스크립트는 가상머신을 전환하는 도구로 설계했습니다), 젠투 빌드 환경에서 어떤 꾸러미 빌드에 필요할 때 여전히 사용할 수 있게 했습니다. 이들 가상 머신 설정은 시스템 가상머신으로든 사용자 가상머신으로든 젠투 실행 관리 스크립트에서 사용하지 않는 것처럼 {{Path|/usr/bin/{java,javac,..}}} 실행 파일을 구동할 때 실행할 가상머신으로 사용하지 말길 바랍니다. 

=== 우선 빌드 가상머신 ===

Java 꾸러미를 머지하는 동안 빌드에 사용하는 가상 머신은 현재 시스템 가상머신과 다르게 설정할 때도 있습니다. 

머지 작업을 수행할 때 가상 머신 전환이 필요한 경우는, 예를 들면 system-vm이 1.6 인데 머지할 꾸러미에서 가상머신 1.5 를 필요로 할 때입니다. 머징을 수행할 때 시스템 설정은 멀쩡하게 남겨두고 가상머신 1.5를 선택하여 활용합니다. 

어떤 가상머신을 사용할지 언제 전환할지 정의하려면 아키텍처별 ''default/supported VMs'' 목록을 만듭니다. 이 목록은 {{Path|/usr/share/java-config-2/config/jdk-defaults.conf}} 파일에서 찾을 수 있습니다. 

이 기본값은 (시스템 가상머신을 선택했어도) 머징을 수행할때 어떤 가상머신을 사용할지 완벽하게 관리할 목적으로 {{Path|/etc/java-config-2/build/jdk.conf}}에 덮어쓸 수 있습니다.

sun-jdk를 항상 활용하려면:

{{FileBox|filename=/etc/java-config-2/build/jdk.conf|title=sun-jdk 요구|1=
*=sun-jdk
}}

또는 분명하게 가상머신 1.4 또는 1.3이 분명하게 필요한 경우를 빼고, 어디서든 항상 sun-jdk-1.5를 사용하려면:

{{FileBox|filename=/etc/java-config-2/build/jdk.conf|title=1.5VM에 대해 sun-jdk-1.5 요구|1=
*=sun-jdk-1.5
}}

또는 가상머신 1.3을 요청하는 상황에서 <code>sun-jdk-1.4</code>가 필요하고 ibm-jdk-bin으로 돌아가려는, 다른 버전과 다른 제공 회사의 가상 머신을 사용한다면:

{{FileBox|filename=/etc/java-config-2/build/jdk.conf|title=다중 수식 활용|1=
1.3=sun-jdk-1.4 ibm-jdk-bin
1.5=sun-jdk
}}


{{Warning|이 파일은 편집''하면'' 안됩니다. 지원하지 않는 가상머신을 사용한다고 옵션이 바뀌면, 기능이 동작하지 않을 수 있습니다. 가상머신이 여러 종류가 있는데, 모든 가상 머신에 대해 모든 꾸러미를 빌드할 경우 자원을 시험하고 검증할 수 없습니다. 지원하지 않는 가상머신에 대해 보고한 버그는 지원하는 현재 가상머신에 대한 버그만큼 우선순위에 두신 않습니다.}}

== 컴파일러 ==

소스코드를 빌드할 때 표즌 자바 컴파일러는 JDK에 딸려오는 {{c|javac}}를 사용합니다. 빌드시 VM을 설정할 때 어던 컴파일러를 사용할지 설정할 수도 있습니다. 근본적으로 사용할 컴파일러가 무엇인지에 대한 속성 목록을 {{Path|/etc/java-config-2/build/compilers.conf}} 에 정의했습니다. 

{{FileBox|filename=/etc/java-config-2/build/compilers.conf|title=컴파일러 기본 설정|1=
COMPILERS="ecj-X.Y jikes javac"
}}

일부 컴파일러는 모든 <code>-target</code>과 <code>-source</code> 인자를 지원하지 않습니다. 따라서 목록의 각 컴파일러에서 원하는 <code>-source</code>/<code>-target</code>을 지원하는지 확인하십시오. javac는 모든 경우에 동작하므로 적당한 컴파일러가 없으면 이걸 대신 사용하면 됩니다. 

각 컴파일러에 대한 자세한 내용은 아래에 있습니다: 

{| class="table" style="text-align: left;" 
|- 
! 이름
! 제어 대상
! 꾸러미
! 설명
|- 
| javac
| javac
| N/A
| 사용할 기본 컴파일러이며 각 JDK에 들어있습니다.
|- 
| jikes
| jikes
| dev-java/jikes
| Jikes는 IBM에서 개발했습니다. 상대적으로 javac보단 보통 빠릅니다. 하지만 지나치게 깐깐하고 javac에 문제가 없는 일부 환경에서 돌아가다 망(...)합니다. 게다가 Java 1.5 문법도 지원하지 않습니다.
|- 
| Java 이클립스 컴파일러
| ecj
| dev-java/eclipse-ecj
| ECJ 는 이클립스 프로그램 개발 도구모음에서 사용하는 컴파일러입니다. 완전한 기능을 갖췄고 좀 빠릅니다. Java 1.5 문법을 지원합니다.
|-
|}

== 기본 CLASSPATH 값 설정 ==

{{Warning| 여기서 설명한 옵션은 오래된 옵션으로 간주하고 앞으로는 제거해야 할겁니다. 이 옵션의 사용 회피를 권장하는데 Java 프로젝트 또는 프로그램이 자체 클래스 경로를 이상적으로 관리할 수 있어야하기 때문입니다. 기본 CLASSPATH를 설정할 때 일부 프로그램은 예상치 못한 동작을 하기도 하는데, 원하는 클래스 경로에 클래스가 없었기 때문입니다.}}

<tt>java-config</tt>는 사용자별 기본 CLASSPATH 뿐만 아니라 시스템 기본 CLASSPATH도 설정할 수 있습니다. 

우선 <var>CLASSPATH</var> 변수에 넣을 수 있는 시스템의 Java 라이브러리를 조회하십시오. 아래는 출력 예제입니다: 

{{RootCmd|java-config --list-available-packages|output=<pre>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>
}}

다시 말씀드리지만 각괄호([])에 있는 이름은 {{c|java-config --set -system -classpath}}에 전달할 ID 입니다. 예제는 아래에 있습니다: 


{{RootCmd|java-config --set-system-classpath log4j,xerces-2}}

{{Note | 현재 디렉터리 ({{Path|.}})는 시스템 로그인 프로파일로 추가할 수 없으므로 시스템 클래스 경로의 일부가 아닙니다.}}

로그아웃하고 다시 로그인하거나 {{c|source {{Path|/etc/profile}}}}를 입력하여 환경을 업데이트하십시오. 

사용자별 설정시 {{c|java-config --set-user -classpath}} 명령으로 {{Path|~/.gentoo/java-env-classpath}}를 만들고 쉘 프로파일로 source 명령을 처리합니다. 

{{CodeBox|title=지정 클래스경로 가져오기|1=
if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
       source ${HOME}/.gentoo/java-env-classpath
fi
}}

시스템 전체 또는 사용자별 기본 클래스 경로에서 다음과 같이 쉘 프로파일에 추가하려 할 때를 가정해보겠습니다. 다음 처럼 해보십시오: 

{{RootCmd|export CLASSPATH{{=}}"${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"}}

== Java 브라우저 플러그인 ==

=== 플러그인 설치 ===

<code>nsplugin</code> USE 플래그를 설정하면 Java VM을 이머징할 때 웹 브라우저용 Java 플러그인도 설치할 수 있습니다.

{{Note|<code>nsplugin</code>을 모든 아키텍처에서 사용할 수 있는건 아닙니다. {{c|emerge -pv <java-vm>}}을 실행하여 가상머신을 설치하기 전에 어떤 아키텍처에서 어떤 플러그을 사용할 수 있는지 확인하십시오.}}

웹 브라우저당 Java 플러그인을 하나 쓸 수 있긴 하지만, 포티지는 Java 플러그인을 여러개의 버전으로 설치할 수 있습니다. 다음 명령을 실행하여 사용할 수 있는 플러그인 목록을 확인해보세요: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6
   [2]   icedtea-bin
</pre>
}}

이 예제에서 브라우저 플러그인으로 <tt>sun-jre-bin</tt>을 선택했습니다. 

{{RootCmd|eselect java-nsplugin set sun-jre-bin-1.6}}

올바른 플러그인을 선택했는지 확인하십시오: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6  current
   [2]   icedtea-bin
</pre>
}}

Java.com에서도  [http://java.com/en/download/installed.jsp 플러그인 설치 확인] 링크가 있습니다. 게다가 모질라 기반 브라우저를 사용한다면 주소 표시줄에<code>about:plugins</code>를 입력하여 자바 플러그인을 확인할 수 있습니다.

=== multilib 시스템에 플러그인 설치하기 ===

(예 AMD64에서)64비트 및 32비트 혼합 모드 multilib 시스템을 가동중이라면, 64비트 및 32비트 Java 플러그인을 둘 다 사용하십시오. 32비트 Java 프로그램을 사용해야 한다면 사용자는 64비트 웹 브라우저의 64비트 자체 플러그인을 사용하시는것이 좋습ㄴ다. 

64비트 브라우저 플러그인이 몇가지 있씁니다. 기본 JDK/JRE에 있는 <code>sun-jdk</code> 와 <code>sun-jre-bin</code>에 브라우저 플러그인이 있습니다. <code>nsplubin</code> USE 플래그를 활성화한 후 이 중 하나를 이머지하십시오. 

{{RootCmd|echo "dev-java/sun-jre-bin nsplugin" >> /etc/portage/package.use
|emerge sun-jre-bin}}

32비트 브라우저에서 32비트 플러그인을 사용하려면, <code>nsplugin</code> USE 플래그를 활성화 한 상태에서 {{Package|app-emulation/emul-linux-x86-java}} 꾸러미를 이머지해야합니다. 

{{RootCmd|echo "app-emulation/emul-linux-x86-java nsplugin" >> /etc/portage/package.use
|emerge emul-linux-x86-java}}

다음 어떤 플러그인이 있는지 확인하십시오: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6
</pre>
}}

이제 브라우저에 쓸 올바른 플러그인을 선택하십시오: 

{{RootCmd|eselect java-nsplugin set 32bit emul-linux-x86-java-1.6
|eselect java-nsplugin set 64bit sun-jre-bin-1.6}}

올바른 플러그인을 선택했는지 확인하십시오: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6  current
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6  current
</pre>
}}

== Java에서 사용할 USE 플래그 ==

=== USE 플래그 설정 ===

USe 플래그에 대한 더 많은 정보는 젠투 핸드북의 [[Handbook:X86/Working/USE/ko|USE 플래그]] 장을 참고하십시오. 

=== USE 플래그 ===

* <code>java</code> 플래그는 여러가지 프로그램에 Java 언어 지원을 추가합니다
* <code>nsplugin</code> 플래그는 모질라 유사 브라우저(파이어폭스) 지원을 추가합니다. 모질라 유사 브라우저에서 Java 애플릿을 가동할 때 필요합니다.
* <code>source</code> 플래그는 꾸러미 소스코드 zip 파일을 설치합니다. 예전에는 사용중인 라이브러리의 소스 코드를 IDE에 '붙일' 때 사용했습니다(하지만 최근에는 maven이나 gradle로 끌어다 씁니다. 역자 주.).
* <code>jce</code> 플래그는 Java 암호화 엔진 지원 기능을 추가합니다
* Java 꾸러미에서, <code>doc</code> 플래그는 javadoc을 이용하 API  문서를 빌드합니다.

== 추가 참조 ==

* [[Project:Java|Java Project Page]] 
* Java 프로젝트의 [[Project:Java/User_Guide|Java 사용자 안내서]]<sup style="color:#ff0077">en</sup>

== 외부 자료 ==

* [http://news.gmane.org/gmane.linux.gentoo.java gentoo-java], [http://news.gmane.org/gmane.linux.gentoo.user gentoo-user], [http://news.gmane.org/gmane.linux.gentoo.devel gentoo-dev] 메일링 리스트 아카이브
* {{IRC|gentoo}}, {{IRC|gentoo-java}}
* [[Wikipedia:Java_programming_language|Wikipedia의 Java 항목]]
* 젠투 포럼의 [https://forums.gentoo.org/viewtopic-t-901036.html Java 7 과 icedtea 준비]<sup style="color:#ff0077">en</sup>

더 많은 자료는 오프라인에서 찾아볼 수 있습니다:
* <kbd>man java-config</kbd>
* <kbd>java-config --help</kbd>

이 문서와 관련한 제안이나 질문이 있으면 젠투 Java 팀의 {{Mail|java@gentoo.org}} 전자메일 주소로 문의바랍니다.

[[Category:Programming_language]]

{{Migrated|originalauthors=Joshua Nichols, Karl Trygve Kalleberg, Joshua Saddler}}
