<languages />

{{Metadata|abstract=이 안내서에서는 안전하고 멀쩡한 CFLAGS와 CXXFLAGS를 사용하여 컴파일한 코드를 최적화 하는 방법을 소개합니다.  일반적으로 최적화 하기 이전의 이론적인 내용도 설명합니다.}}

이 안내서에서는 안전하고 멀쩡한 CFLAGS와 CXXFLAGS를 사용하여 컴파일한 코드를 최적화 하는 방법을 소개합니다.  일반적으로 최적화 하기 이전의 이론적인 내용도 설명합니다.

== 도입부 ==

=== CFLAGS와 CXXFLAGS란 뭔가요? ===

<var>CFLAGS</var>와 <var>CXXFLAGS</var>는 소스 코드를 컴파일할 때 어떤 종류의 스위치를 사용할지 GNU 컴파일러 모음({{c|gcc}})에 알려주는 환경 변수입니다. <var>CFLAGS</var>는 C로 작성한 코드용, <var>CXXFLAGS</var>는 C++로 작성한 코드용 변수입니다. 

이 변수는 프로그램에 대한 많은 양의 디버그 메시지를 줄여주거나 오류 경고 수준을 높이고, 물론 생산 코드의 최적화 수준을 조절하는데 사용할 수도 있습니다. [http://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html#Invoking-GCC GCC 설명서] 에서는 이들 변수에서 사용할 수 있는 옵션과 목적에 대한 완전한 목록을 제공합니다.

=== 어떻게 사용하나요? ===

<var>CFLAGS</var>와 <var>CXXFLAGS</var>는 두가지 방식으로 사용할 수 있습니다. 첫번째 방법으로는 {{c|automake}}가 만든 MakeFile에서 프로그램별로 사용할 수 있습니다. 

그러나 포티지 트리에서 설치 패키지를 찾았을때는 이걸 활용할 수는 없습니다.  대신 {{Path|/etc/portage/make.conf}}의 <var>CFLAGS</var>와 <var>CXXFLAGS</var>를 설정합니다. 이 방식으로 여러분이 지정한 옵션을 사용하여 모든 패키지를 컴파일합니다.

{{CodeBox|title=/etc/portage/make.conf의 CFLAGS 설정|lang=bash|1=
CFLAGS="-march=athlon64 -O2 -pipe"
CXXFLAGS="${CFLAGS}"
}}

{{Important/ko|USE 플래그에 여러 줄을 넣을 수 있지만, <var>CFLAGS</var>에 똑같이 하면 {{c|cmake}} 같은 프로그램에 문제가 될 수 있습니다. <var>CFLAGS</var> 선언을 한 줄로 했는지, 문제를 막기 위해 가능한 한 공백을 줄였는지 확인하십시오. 예제로 {{Bug|500034}}를 보십시오.}}

보시는 바와 같이, <var>CXXFLAGS</var>는 <var>CFLAGS</var>에 나타나는 모든 옵션을 사용하는 집합입니다. 이 방식이야 말로 거의 별다른 문제 없이 처리하길 원하는 방법입니다. <var>CXXFLAGS</var>에 추가 옵션을 지정할 필요조차도 없습니다.

=== 오해 ===

<var>CFLAGS</var>와 <var>CXXFLAGS</var>는 소스 코드를 작고 동작이 빠른 바이너리로 만드는데 매우 효율적인 수단이 될 수 있음을 의미하기도 하지만, 코드 기능을 망가뜨리거나, 바이너리 크기를 키우기도 하고, 실행 시간을 늦추며, 심지어는 컴파일 실패를 야기하기도 합니다. 

<var>CFLAGS</var>가 만병 통치약 같은건 아닙니다. 시스템을 자동적으로 좀 더 빠르게 동작하게 하거나 디스크상에서 바이너리가 적은 공간을 차지하게 하진 않습니다. 시스템을 최적화(또는 "성능을 좋게") 하려는 플래그를 추가하면 할수록 골로 가게 하는 확실한 방법이 됩니다. 그러니까 .. 성능을 감소시키는 시점이 있습니다. 

인터넷에서 찾아보겠다고 큰소리 치실지 모르겠지만, <var>CFLAGS</var>와 <var>CXXFLAGS</var>를 과감하게 이것저것 설정하는 것은 오히려 좋은 상황으로 끌고가기 보다는 프로그램을 더욱 안좋게 할 수가 있습니다. 특별한 목적으로 특별한 시점에서 플래그를 사용하도록 설계한것이 처음 장소에 플래그가 존재하는 이유임을 기억하십시오. <var>CFLAG</var> 일부는 코드 일부에 좋을 뿐이지만 이것이 결코 머신에 설치하는 모든 컴파일 요소에 맞춰진 것임을 의미하는게 아닙니다.

=== 준비됐죠? ===

이제 약간의 위험성이 있다는 사실을 인지하고, 여러분의 컴퓨터에 멀쩡하고 안전한 최적화를 수행하도록 해보겠습니다. 여러분께 도움이 될 것이고 [https://bugs.gentoo.org/ 버그질라]에 문제를 알리면 개발자들에게 촉망받을 것입니다. (개발자들은 종종 어떤 문제가 집요하게 나타나면 최소한의 <var>CFLAGS</var>로 패키지를 다시 컴파일 하라고 합니다. 과감한 플래그 설정은 오히려 코드를 제대로 동작하지 못하게 함을 기억하십시오.) 

== 최적화 ==

=== 기본 ===

<var>CFLAGS</var>와 <var>CXXFLAGS</var>를 사용하는 목적은 시스템에 코드를 잘 다듬어 놓기 위함입니다. 가능하면 잘 빠지고 빠르게 제 기능을 완벽하게 다 할 것입니다. 가끔은 상호간에 배타적이어서 두 요소가 잘 동작하게 붙들고 있을 때도 있습니다. 이상적으로는 어떤 CPU 아키텍처에든 잘 돌아갑니다. 후반에 적극적인 플래그를 언급하여 여러분이 알아보고자 하는 바를 알 수 있게끔 할 것입니다. {{c|gcc}} 설명서에 있는 모든 옵션(수백개!)에 대해 언급하지 않겠지만 대부분 기본적이고 일반적인 플래그를 다루도록 하겠습니다. 

{{Note|When unaware of what a flag does refer to the relevant chapter of the [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options GCC manual]. If still stumped after viewing the manual, try a search engine or check out the [http://gcc.gnu.org/lists.html GCC mailing lists].}}

=== -march ===

The first and most important option is <code>-march</code>. This tells the compiler what code it should produce for the system's [https://en.wikipedia.org/wiki/Microarchitecture processor architecture] (or ''arch''); it tells GCC that it should produce code for a certain kind of CPU. Different CPUs have different capabilities, support different instruction sets, and have different ways of executing code. The <code>-march</code> flag will instruct the compiler to produce specific code the system's CPU, with all its capabilities, features, instruction sets, quirks, and so on. 

{{Path|/etc/portage/make.conf}}의 <var>CHOST</var> 변수에 일반적으로 아키텍처에서 사용하는 플래그를 지정하지만, <code>-march</code> 플래그는 지정 시스템 프로세서에 맞게 프로그램을 최적화하는데 사용할 수 있습니다. (다른 CPU 중에서) x86과 x86-64 CPU는 <code>-march</code> 플래그를 사용해야 합니다. 

What kind of CPU does the system have? To find out, run the following command: 

{{Cmd|cat /proc/cpuinfo}}

<code>march</code>와 <code>mtune</code> 값에 대한 자세한 내용을 살펴보려면 다음 명령을 사용하십시오:

{{Cmd|<nowiki>gcc -c -Q -march=native --help=target</nowiki>}}

Now lets see <code>-march</code> in action. This example is for an older Pentium III chip: 

{{FileBox|filename=/etc/portage/make.conf|title=Pentium III example|lang=bash|1=
CFLAGS="-march=pentium3"
CXXFLAGS="${CFLAGS}"
}}

64-bit AMD CPU에 대한 또 다른 설정 내용입니다: 

{{FileBox|filename=/etc/portage/make.conf|title=AMD64 example|lang=bash|1=
CFLAGS="-march=athlon64"
CXXFLAGS="${CFLAGS}"
}}

If the type of CPU is undetermined, or if the user does not know what setting to choose, it is possible use the <code>-march=native</code> setting. When this flag is used, GCC will attempt to detect the processor and automatically set appropriate flags for it. '''However, this should not be used when intending to compile packages for different CPUs!''' 

{{Warning|<tt>[[Distcc/ko#-march.3Dnative|distcc]]</tt>로 컴파일 할 때는 {{Path|make.conf}}의 code>CFLAGS</code> 또는 <code>CXXFLAGS</code> 값을 <code>-march{{=}}native</code> 또는 <code>-mtune{{=}}native</code>로 사용하지 '''마십시오'''.}}

If compiling packages on one computer in order to run them on a different computer (such as when using a fast computer to build for an older, slower machine), then ''do not'' use <code>-march=native</code>. "Native" means that the code produced will run ''only'' on that type of CPU. The applications built with <code>-march=native</code> on an AMD Athlon 64 CPU will '''''not''''' be able to run on an old VIA C3 CPU. 

Also available are the <code>-mtune</code> and <code>-mcpu</code> flags. These flags are normally only used when there is no available <code>-march</code> option; certain processor architectures may require <code>-mtune</code> or even <code>-mcpu</code>. Unfortunately, GCC's behavior isn't very consistent with how each flag behaves from one architecture to the next. 

On x86 and x86-64 CPUs, <code>-march</code> will generate code specifically for that CPU using its available instruction sets and the correct ABI; it will have no backwards compatibility for older/different CPUs. Consider using <code>-mtune</code> when generating code for older CPUs such as i386 and i486. <code>-mtune</code> produces more generic code than <code>-march</code>; though it will tune code for a certain CPU, it does not take into account available instruction sets and ABI. Do not use <code>-mcpu</code> on x86 or x86-64 systems, as it is deprecated for those arches. 

Only non-x86/x86-64 CPUs (such as Sparc, Alpha, and PowerPC) may require <code>-mtune</code> or <code>-mcpu</code> instead of <code>-march</code>. On these architectures, <code>-mtune</code> / <code>-mcpu</code> will sometimes behave just like <code>-march</code> (on x86/x86-64) but with a different flag name. Again, GCC's behavior and flag naming is not consistent across architectures, so be sure to check the GCC [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options manual] to determine which one should be used. 

{{Note|For more suggested <code>-march</code> / <code>-mtune</code> / <code>-mcpu</code> settings, please read chapter 5 of the appropriate [[HandBook:Main_Page|Gentoo Installation Handbook]] for the arch. Also, read the GCC manual's list of [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options architecture-specific options], as well as more detailed explanations about the differences between <code>-march</code>, <code>-mcpu</code>, and <code>-mtune</code>.}}

=== -O ===

Next up is the <code>-O</code> variable. This variable controls the overall level of optimization. Changing this value will make the code compilation take more time and will use much more memory, especially as the level of optimization is increased. 

There are seven <code>-O</code> settings: <code>-O0</code>, <code>-O1</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>, <code>-Og</code>, and <code>-Ofast</code>. Only use one of them in {{Path|/etc/portage/make.conf}}

<code>-O0</code>는 예외로 간주하고, 각각의 <code>-O</code> 설정은 몇가지 추가 플래그를 활성화 하므로, GCC 메뉴얼의 [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options 최적화 옵션] 장을 읽어 각각의 <code>-O</code> 레벨에서 어떤 플래그를 활성화 하는지, 이들이 각각 어떤 동작을 취하는지 알아보십시오. 

Let us examine each optimization level: 

*  <code>-O0</code>: This level (that is the letter "O" followed by a zero) turns off optimization entirely and is the default if no <code>-O</code> level is specified in <code>CFLAGS</code> or <code>CXXFLAGS</code>. This reduces compilation time and can improve debugging info, but some applications will not work properly without optimization enabled. This option is not recommended except for debugging purposes.

*  <code>-O1</code>: the most basic optimization level. The compiler will try to produce faster, smaller code without taking much compilation time. It is basic, but it should get the job done all the time.

*  <code>-O2</code>: A step up from <code>-O1</code>. The ''recommended'' level of optimization unless the system has special needs. <code>-O2</code> will activate a few more flags in addition to the ones activated by <code>-O1</code>. With <code>-O2</code>, the compiler will attempt to increase code performance without compromising on size, and without taking too much compilation time.

*  <code>-O3</code>: the highest level of optimization possible. It enables optimizations that are expensive in terms of compile time and memory usage.  Compiling with <code>-O3</code> is not a guaranteed way to improve performance, and in fact, in many cases, can slow down a system due to larger binaries and increased memory usage. <code>-O3</code> is also known to break several packages. Using <code>-O3</code> is not recommended.

*  <code>-Os</code>: optimizes code for size. It activates all <code>-O2</code> options that do not increase the size of the generated code. It can be useful for machines that have extremely limited disk storage space and/or CPUs with small cache sizes.

* <code>-Og</code>: GCC4.8에 새로운 일반 최적화 레벨 <code>-Og</code>를 도입했습니다. 빠른 컴파일을 필요로 하며 실행시간 성능의 타당한 수준을 제공하면서 우수한 디버깅 경험을 할 수 있게 바로 잡았습니다. 개발에 있어 전체적인 경험은 기본 최적화 레벨 <code>-O0</code>보단 낫습니다. 참고로 <code>-Og</code>는 <code>-g</code>를 의미하지 않으며, 디버깅에 혼란을 주는 최적화 기능을 끌 뿐입니다.

* <code>-Ofast</code>: GCC 4.7에서 새로 도입했으며, <code>-O3</code>,  <code>-ffast-math</code>, <code>-fno-protect-parens</code>, and <code>-fstack-arrays</code>로 이루어져 있습니다. 이 옵션은 엄격한 표준 준수를 깨며, 사용을 권장하지 않습니다.

As previously mentioned, <code>-O2</code> is the recommended optimization level. If package compilation fails and while not using <code>-O2</code>, try rebuilding with that option. As a fallback option, try setting the <code>CFLAGS</code> and <code>CXXFLAGS</code> to a lower optimization level, such as <code>-O1</code> or even <code>-O0 -g2 -ggdb</code> (for error reporting and checking for possible problems).

=== -pipe ===

A common flag is <code>-pipe</code>. This flag has no effect on the generated code, but it makes the compilation process ''faster''. It tells the compiler to use pipes instead of temporary files during the different stages of compilation, which uses more memory. On systems with low memory, GCC might get killed. In those cases do not use this flag. 

=== -fomit-frame-pointer ===

This is a very common flag designed to reduce generated code size. It is turned on at all levels of <code>-O</code> (except <code>-O0</code>) on architectures where doing so does not interfere with debugging (such as x86-64), but it may need to activated. In that case add it to the flags. Though the GCC manual does not specify all architectures, it is turned on by using the <code>-O</code> option. It's still necessary to explicitly enable the <code>-fomit-frame-pointer</code> option, to activate it on x86-32 with GCC up to version 4.6, or when using <code>-Os</code> on x86-32 with any version of GCC. However, using <code>-fomit-frame-pointer</code> will make debugging hard or impossible. 

In particular, it makes troubleshooting applications written in Java much harder, though Java is not the only code affected by using this flag. So while the flag can help, it also makes debugging harder; backtraces in particular will be useless. When not doing software debugging and no other debugging-related CFLAGS such as <code>-ggdb</code> have been used, then try using <code>-fomit-frame-pointer</code>. 

{{Important|<code>-fomit-frame-pointer</code> 플래그를 유사한 플래그 <code>-momit-leaf-frame-pointer</code>와 함께 사용하지 ''마십시오''. <code>-fomit-frame-pointer</code> 플래그가 제대로 동작하므로 후자의 플래그 사용은 권장하지 않습니다. 게다가 <code>-momit-leaf-frame-pointer</code> 플래그는 코드 성능에 부정적 영향을 주는걸로 나타납니다.}}

=== -msse, -msse2, -msse3, -mmmx, -m3dnow ===

These flags enable the [http://en.wikipedia.org/wiki/Streaming_SIMD_Extensions Streaming SIMD Extentions] (SSE), [http://en.wikipedia.org/wiki/SSE2 SSE2], [http://en.wikipedia.org/wiki/SSSE3 SSE3], [http://en.wikipedia.org/wiki/MMX_(instruction_set) MMX], and [http://en.wikipedia.org/wiki/3dnow 3DNow!] instruction sets for x86 and x86-64 architectures. These are useful primarily in multimedia, gaming, and other floating point-intensive computing tasks, though they also contain several other mathematical enhancements. These instruction sets are found in more modern CPUs. 

{{Important|Be sure to see if the CPU supports these instruction sets by running <kbd>cat /proc/cpuinfo</kbd>. The output will include any supported additional instruction sets. Note that '''pni''' is just a different name for SSE3.}}

Normally none of these flags need to be added to {{Path|/etc/portage/make.conf}}, as long as the system is using the correct <code>-march</code> (for example, <code>-march=nocona</code> implies <code>-msse3</code>). Some notable exceptions are newer VIA and AMD64 CPUs that support instructions not implied by <code>-march</code> (such as SSE3). For CPUs like these additional flags will need to be enabled where appropriate after checking {{Path|/proc/cpuinfo}}. 

{{Note|Check the [http://gcc.gnu.org/onlinedocs/gcc/x86-Options.html list of x86 and x86-64-specific flags] to see which of these instruction sets are activated by the proper CPU type flag. If an instruction is listed, then it does not need to be separately specified; it will be turned on by using the proper <code>-march</code> setting.}}

== 최적화 자주 묻는 질문 ==

=== 근데 -funroll-loops -fomg-optimize로 성능이 더 좋아졌는데요?! ===

No, you only ''think'' you do because someone has convinced you that more flags are better. Aggressive flags will only hurt applications when used system-wide. Even the GCC [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options manual] says that using <code>-funroll-loops</code> and <code>-funroll-all-loops</code> will make code larger and run more slowly. Yet for some reason, these two flags, along with <code>-ffast-math</code>, <code>-fforce-mem</code>, <code>-fforce-addr</code>, and similar flags, continue to be very popular among ricers who want the biggest bragging rights. 

사실은 이런 플래그 추가 사용이 굉장히 무모한 행위라는 점입니다. 어떤 플래그가 무슨 역할을 하는지에 대해서는 바람직한 [https://forums.gentoo.org/ 젠투 포럼]<sup style="color:#ff0077">en</sup> 과 [https://bugs.gentoo.org/ 버그질라]<sup style="color:#ff0077">en</sup> 에서 확인해보십시오. 좋을게 하나도 없습니다! 

You do not need to use those flags globally in <code>CFLAGS</code> or <code>CXXFLAGS</code>. They will only hurt performance. They may make you sound like you have a high-performance system running on the bleeding edge, but they don't do anything but bloat the code and get your bugs marked INVALID or WONTFIX. 

이런 위험한 플래그는 필요하지 않습니다. '''사용하지 마십시오'''. 기본 플래그 <code>-march</code>, <code>-O</code>, <code>-pipe</code>에 집착하십시오.

=== 3 보다 높은 -O 레벨은 어떤가요? ===

어떤 사용자는 <code>-O4</code>, <code>-O9</code> 등의 플래그를 사용하여 더 나은 성능으로 끌어올렸다고 자랑하기까지 합니다만, 실제로는 3보다 큰 <code>-O</code> 레벨은 효과가 없습니다. <code>-O4</code>와 같은 CFLAGS를 컴파일러가 받아들이겠지만, 실제로는 이들 플래그가 하는 일은 없습니다. <code>-O3</code> 이상의 플래그는 그 이상의 최적화를 수행하지 않습니다. 

증명이 좀 더 필요한가요? [http://gcc.gnu.org/viewcvs/trunk/gcc/opts.c?revision=124622&view=markup 소스 코드]를 시험해보십시오: 

{{CodeBox|title=-O 소스 코드|lang=bash|1=
if (optimize >= 3)
    {
      flag_inline_functions = 1;
      flag_unswitch_loops = 1;
      flag_gcse_after_reload = 1;
      /* Allow even more virtual operators.  */
      set_param_value ("max-aliased-vops", 1000);
      set_param_value ("avg-aliased-vops", 3);
    }
}}

보시는 바와 같이 3보다 큰 값은 <code>-O3</code> 처럼 취급합니다.

=== 대상 머신이 아닌곳에서 컴파일은 어떤가요? ===

Some readers might wonder if compiling outside the target machine with a strictly inferior CPU or GCC sub-architecture will result in inferior optimization results (compared to a native compilation). The answer is simple: '''No'''.  Regardless of the actual hardware on which the compilation takes place and the CHOST for which GCC was built, as long as the same arguments are used <small>(except for <code>-march=native</code>)</small> and the same version of GCC is used <small>(although minor version might be different)</small>, the resulting optimizations are strictly the same.

To exemplify, if Gentoo is installed on a machine whose GCC's CHOST is ''i686-pc-linux-gnu'', and a [[Distcc]] server is setup on another computer whose GCC's CHOST is ''i486-linux-gnu'', then there is no need to be afraid that the results would be less optimal because of the strictly inferior sub-architecture of the remote compiler and/or hardware. The result would be as optimized as a native build, as long as the same options are passed to both compilers (and the <code>-march</code> parameter doesn't get a <code>native</code> argument).  In this particular case the target architecture needs to be specified explicitly as explained in [[Distcc#-march.3Dnative|Distcc and -march=native]].

The only difference in behavior between two GCC versions built targeting different sub-architectures is the implicit default argument for the <code>-march</code> parameter, which is derived from the GCC's CHOST when not explicitly provided in the command line.

=== 중복 플래그는 무엇인가요? ===

종종 다양한 <code>-O</code> 레벨로 맞춰놓은 CFLAGS 와 CXXFLAGS 값은 {{Path|/etc/portage/make.conf}}에 중복 지정되어 있습니다. 가끔은 무시하는걸로 끝나지만, 플래그를 걸러내거나 플래그를 바꾸는 일을 막아주기도 합니다. 

포티지 트리에서 대부분의 이빌드가 플래그를 걸러내거나 바꿉니다. 어떤 <code>-O</code> 레벨에 대해서는 꾸러미에서 컴파일 오류가 나거나 추가 플래그를 사용했을 경우 소스코드가 민감하게 동작하기 때문에 이렇게 처리합니다. 이빌드는 CFLAGS와 CXXFLAGS 둘 중 하나 또는 전부를 걸러내거나, <code>-O</code> 레벨을 다른 레벨로 바꿉니다. 

The [http://devmanual.gentoo.org/ebuild-writing/functions/src_compile/build-environment/index.html Gentoo Developer Manual] outlines where and how flag filtering/replacing works. 

It's possible to circumvent <code>-O</code> filtering by redundantly listing the flags for a certain level, such as <code>-O3</code>, by doing things like: 

{{CodeBox|title=중복 CFLAGS 지정|lang=bash|1=
CFLAGS="-O3 -finline-functions -funswitch-loops"
}}

그러나 '''이건 현명한 방법이 아닙니다'''. CFLAGS를 어떤 이유로 무시할 수 있습니다. 플래그를 가려 인식하면, 해당 플래그로 구러미를 빌드하는것이 안전하지 않음을 의미합니다. 분명하게 말해서 어떤 꾸러미에 대해 <code>-O3</code> 레벨로 플래그를 활성화하면 문제가 생길 경우, 이 레벨로 전체 시스템을 컴파일 하는게 안전''하지 않다''는 의미가 됩니다. 따라서 꾸러미를 관리하는 개발자보다 "앞서 나가려" 하지 마십시오. "개발자를 믿으십시오". 플래그를 선별하고 대체하는건 이미 여러분들을 위해 끝냈습니다! 이빌드에 다른 플래그를 정의했다면 다른곳에 넣으려 하지 마십시오. 

허용할 수 없는 플래그로 꾸러미를 빌드하면, 문제로 거의 직면하게 됩니다. 버그질라에 이 문제를 보고할 때, {{Path|/etc/portage/make.conf}} 에 사용하는 플래그가 분명히 나타나며, 누군가가 해당 플래그를 빼고 다시 컴파일하라고 알려줄겁니다. 처음에 언급한대로 중복 플래그를 빼서 다시 컴파일하는일이 없도록 하십시오! 개발자들보다 여러분이 더 잘 알거라고 멋대로 판단하지 마십시오.

=== LDFLAGS란 무엇인가요? ===

The Gentoo developers have already set basic, safe LDFLAGS in the base profiles, so they do not need to be changed.

=== 패키지별로 플래그를 사용해도 되나요? ===

{{Warning/ko|패키지별로 플래그를 사용하면 디버그와 지원이 복잡해질 수 있습니다. 버그 보고서 작성시 이러한 기능을 사용했는지 어떻게 무얼 바꾸었는지에 대한 언급 여부를 확인하십시오.}}

패키지별 환경 변수 사용법(CFLAGS 포함)은 [[Handbook:AMD64/Portage/Advanced/ko#.EA.BE.B8.EB.9F.AC.EB.AF.B8.EB.B3.84_.ED.99.98.EA.B2.BD_.EB.B3.80.EC.88.98|젠투 핸드북, "꾸러미별 환경 변수"]]편에 설명했습니다.

== 자료 ==

다음 자료는 최적화에 대해 더 이해하는데 도움이 될 것입니다: 

* [http://gcc.gnu.org/onlinedocs/ GCC 온라인 문서] 

* [[Handbook:Main_Page|젠투 설치 핸드북]] 5장

* <kbd>man make.conf</kbd>

* [https://en.wikipedia.org/ 위키피디아]

* [https://forums.gentoo.org/ 젠투 포럼]

{{Migrated|originalauthors=nightmorph}}
