<languages />

{{InfoBox stack
|{{InfoBox wikipedia|Puppet (software)|header=true}}
|{{InfoBox ohloh}}
}}

'''Puppet''' est un système de gestion de configuration écrit en [[Ruby]]. Il peut être utilisé pour automatiser le déploiement de machines.

== Installation ==
Puppet est fourni par le paquet {{Package|app-admin/puppet}}.
Actuellement, il n'y a pas de distinction entre client et serveur, et l'installation de base est la même pour les deux.

Commencez par installer Puppet avec la commande  <tt>emerge</tt>:
{{Emerge|puppet}}

== Configuration et mise en place ==
Puppet est configuré principalement via  {{Path|/etc/puppet/puppet.conf}} dans un format de style  INI.  Les commentaires sont indiqués avec un signe  (<tt>#</tt>).
Le fichier de configuration est divisé en plusieurs sections, ou blocs :

* <tt>[main]</tt> contient les réglages qui agissent comme valeurs par défaut dans toutes les parties de Puppet, sauf si vous les redéfinissez dans l'une des sections suivantes :
** <tt>[master]</tt> est utilisée pous les réglages qui s'appliquent à Puppetmaster (<tt>puppet master</tt>), ou l'outil CA(<tt>puppet cert</tt>)
** <tt>[agent]</tt> est utilisé pour des réglages qui s'appliquent à l'agent Puppet (<tt>puppet agent</tt>)

Une explication plus approfondie, et une liste des blocs suivants utilisés est disponible dans la [http://docs.puppetlabs.com/guides/configuring.html documentation officielle de Puppet].

=== Server (Puppetmaster) Setup ===
The default configuration put by the Ebuild into {{Path|puppet.conf}} can be used as-is. For Puppet 2.7.3, the server-related parts look like this:
{{File|/etc/puppet/puppet.conf|Server-related default configuration|<pre>
[main]
    # The Puppet log directory.
    # The default value is '$vardir/log'.
    logdir = /var/log/puppet

    # Where Puppet PID files are kept.
    # The default value is '$vardir/run'.
    rundir = /var/run/puppet

    -

==== Configuration du serveur de fichiers ====
Pour pouvoir envoyer des fichiers aux clients, il faut configurer le serveur de fichiers. Ceci est fait dans   {{Path|/etc/puppet/fileserver.conf}}. Par défaut, il n'y a pas de fichiers à servir.

{{File|/etc/puppet/fileserver.conf|Setting the <tt>files</tt> share|<pre>
[files]
    path /var/lib/puppet/files
    allow 192.168.0.0/24
</pre>}}

L'extrait de code précédent configure un partage appelé <tt>files</tt> (souvenez-vous de cet identifiant, car on devra y faire référence plus tard), cherchant des fichiers dans {{Path|/var/lib/puppet/files}}  et seulement disponible pour des hôtes avec une adresse IP du réseau 192.168.0.0/24. Vous pouvez utiliser des adresses IP, la notation CIDR et des noms d'hôtes (y compris des passe-partout comme <tt>*.domain.invalid</tt>) ici.  La 
commande <tt>deny</tt> peut être utilisée pour dénier explicitement  l'accès à certaines plages d'adresses IP ou à certains hôtes.

==== Starting the Puppetmaster daemon ====
{{Note|It is recommended that the Puppetmaster is reachable from the clients using the host name <tt>puppet</tt>. However, the name can be overridden, which of course causes configuration effort.}}

{{Important|At this point, the host name as seen from the clients should be the same as the output of <tt>hostname -f</tt>. You might have to adjust {{Path|/etc/hosts}} to achieve this, or manually create a new certificate as [[#Manually generating certificates|explained below]].}}

With the basic configuration as well as an initial file server configuration, we can start the Puppetmaster daemon using its init script:
{{RootCmd|/etc/init.d/puppetmaster start}}

During the first start, Puppet generates an SSL certificate for the Puppetmaster host and places it into the <tt>ssldir</tt>, as configured above.

It listens on Port 8140/TCP, make sure that there are no firewall rules obstructing access from the clients.

==== A simple manifest ====
Manifests, in Puppet's terminology, are the files in which the client configuration is specified.
The documentation contains a [http://docs.puppetlabs.com/guides/language_guide.html comprehensive guide] about the manifest markup language.

As a simple example, let's create a ''message of the day'' (motd) file on the client. On the puppetmaster, create a file inside the <tt>files</tt> share created earlier:

{{File|/var/lib/puppet/files/motd|MOTD file on the server|<pre>
Welcome to this Puppet-managed machine!
</pre>}}

Then, we have to create the main manifest file in the <tt>manifests</tt> directory. It is called <tt>site.pp</tt>:

{{File|/etc/puppet/manifests/site.pp|Main manifest on the server|<pre>
node default {
  file { '/etc/motd':
    source => 'puppet://puppet/files/motd'
  }
}
</pre>}}

The <tt>default</tt> ''node'' (the name for a client) definition is used in case there is no specific <tt>node</tt> statement for the host.
We use a <tt>file</tt> resource and want the {{Path|/etc/motd}} file on our clients to contain the same thing as the <tt>motd</tt> file in the <tt>files</tt> share on the host <tt>puppet</tt>. If your puppetmaster is reachable only using another host name, you have to adapt the <tt>source</tt> URI accordingly.

=== Client Configuration ===
{{Important|The client '''must''' have the '''same major and minor version''' as the Puppetmaster. Using a 2.7.1 Puppetmaster with 2.7.2 clients is fine, but using 2.6 for the server and 2.7 for clients can cause unexpected issues at any time.}}

{{Note|If your puppetmaster is not reachable via <tt>puppet</tt>, set <tt>server{{=}}&lt;your hostname&gt;</tt> to the actual host name in {{Path|/etc/puppet/puppet.conf}} in the <tt>[main]</tt> section.}}

During the first execution of the Puppet agent, you have to wait for your certificate to be signed by the puppetmaster. To request a certificate, and run your first configuration run, execute:

{{RootCmd|puppet agent --test --waitforcert 60|prompt=root@client #
|output=<pre>
info: Creating a new certificate request for client
info: Creating a new SSL key at /var/lib/puppet/ssl/private_keys/client.pem
notice: Did not receive certificate
</pre>}}

Before the client can connect, you have to authorize the certificate request on the server. Our client should appear in the list of nodes requesting a certificate:
{{RootCmd|puppet cert --list
|prompt=root@server #
|output=client}}

Now, we grant the request:
{{RootCmd|puppet cert --sign client
|prompt=root@server #}}

The client will check every 60 seconds whether its certificate has already been issued. After that, it continues with the first configuration run:
{{GenericCmd|<pre>
info: Caching catalog for client
info: Applying configuration version '1317317379'
notice: /Stage[main]//Node[default]/File[/etc/motd]/ensure: defined content as '{md5}30ed97991ad6f591b9995ad749b20b00'
notice: Finished catalog run in 0.05 seconds
</pre>}}

When you're seeing this message, all went well. You can now check the contents of your {{Path|/etc/motd}} file on the client:
{{Cmd|cat /etc/motd
|prompt=user@client $
|output=Welcome to this Puppet-managed machine!}}

You can now start the puppet agent as a deamon and have it launch on boot:
{{RootCmd|/etc/init.d/puppet start
|rc-update add puppet default
|prompt=root@client #}}

== Other Topics ==

=== Manually generating certificates ===
To manually generate a certificate, you can use the <tt>puppet cert</tt> utility.
It will place all generated certificates into the <tt>ssldir</tt> as set in the puppet configuration and will sign them with the key of your local Puppet Certificate Authority (CA).

An easy case is the generation of a certificate with '''only one Common Name:'''
{{RootCmd|puppet cert --generate host1}}

If you need to have '''multiple host names''' the certificate is valid for, use the <tt>--certdnsnames</tt> parameter and separate the additional host names with a colon:
{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

This example will generate a certificate valid for the three listed host names.

=== Managing slots with puppet ===
While the default portage provider in puppet does not support slots, a [https://github.com/whatbox/PortageGT 3rd party plugin] is available to enable this functionality in puppet.

== External resources ==
* [http://puppetlabs.com/ Upstream website]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]


[[Category:Server]]
[[Category:Security]]
