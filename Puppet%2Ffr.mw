<languages />

{{InfoBox stack
|{{InfoBox wikipedia|Puppet (software)|header=true}}
|{{InfoBox ohloh}}
}}

'''Puppet''' est un système de gestion de configuration écrit en [[Ruby]]. Il peut être utilisé pour automatiser le déploiement de machines.

== Installation ==
Puppet est fourni par le paquet {{Package|app-admin/puppet}}.
Actuellement, il n'y a pas de distinction entre client et serveur, et l'installation de base est la même pour les deux.

Commencez par installer Puppet avec la commande  <tt>emerge</tt>:
{{Emerge|puppet}}

== Configuration et mise en place ==
Puppet est configuré principalement via  {{Path|/etc/puppet/puppet.conf}} dans un format de style  INI.  Les commentaires sont indiqués avec un signe  (<tt>#</tt>).
Le fichier de configuration est divisé en plusieurs sections, ou blocs :

* <tt>[main]</tt> contient les réglages qui agissent comme valeurs par défaut dans toutes les parties de Puppet, sauf si vous les redéfinissez dans l'une des sections suivantes :
** <tt>[master]</tt> est utilisée pous les réglages qui s'appliquent à Puppetmaster (<tt>puppet master</tt>), ou l'outil CA(<tt>puppet cert</tt>)
** <tt>[agent]</tt> est utilisé pour des réglages qui s'appliquent à l'agent Puppet (<tt>puppet agent</tt>)

Une explication plus approfondie, et une liste des blocs suivants utilisés est disponible dans la [http://docs.puppetlabs.com/guides/configuring.html documentation officielle de Puppet].

=== Configuration du serveur (Puppetmaster)  ===
La configuration par défaut placée par l'Ebuild dans {{Path|puppet.conf}} peut être utilisée en l'état. Pous Puppet 2.7.3, les parties relatives au serveur ressemblent à ceci :
{{File|/etc/puppet/puppet.conf|Server-related default configuration|<pre>
[main]
    # The Puppet log directory.
    # The default value is '$vardir/log'.
    logdir = /var/log/puppet
# Où les fichiers Puppet PID sont conservés.
    # La valeur par défaut est '$vardir/run'.
    rundir = /var/run/puppet

# Où les certificats SSL sont conservés.
    # La valeur par défaut est  '$confdir/ssl'.
    ssldir = $vardir/ssl
</pre>}}

    -

    -

==== Configuration du serveur de fichiers ====
Pour pouvoir envoyer des fichiers aux clients, il faut configurer le serveur de fichiers. Ceci est fait dans   {{Path|/etc/puppet/fileserver.conf}}. Par défaut, il n'y a pas de fichiers à servir.

{{File|/etc/puppet/fileserver.conf|Setting the <tt>files</tt> share|<pre>
[files]
    path /var/lib/puppet/files
    allow 192.168.0.0/24
</pre>}}

L'extrait de code ci-dessus définit un partage appelé <tt>files</tt> (souvenez-vous de cet identifiant, car il y sera fait référence par la suite), cherchant des fichiers dans {{Path|/var/lib/puppet/files}} et seulement disponible pour des hôtes dont l'adresse IP appartient au réseau 192.168.0.0/24. Vous pouvez utiliser des adresses IP, la notation CIDR et des noms d'hôtes (y compris le caractères passe-partout comme <tt>*.domain.invalid</tt>) ici.
La commande <tt>deny</tt> peut être utilisée pour refuser explicitement l'accès à certains hôtes ou à certaines plages d'adresses IP.

==== Démarrer le démon Puppetmaster====
{{Note|Il est recommandé que Puppetmaster soit accessible par les clients en utilisant le nom d'hôte  <tt>puppet</tt>. Cependant, le nom peut être redéfini, ce qui bien-sûr oblige à des efforts de configuration.}}

{{Important| À ce stade, le nom d'hôte vu des clients devrait être identique à celui de la sortie de la commande  <tt>hostname -f</tt>. Il est possible que vous deviez ajuster  {{Path|/etc/hosts}} pour parvenir à cela, ou créez un nouveau certificat à la main comme [[#Manually generating certificates|expliqué ci-dessous]].}}

Avec la configuration de base, aussi bien qu'avec une configuration initiale du serveur de fichiers, vous pouvez lancer le démon Puppetmaster à l'aide de sont script d'initialisation :
{{RootCmd|/etc/init.d/puppetmaster start}}

Lors du premier démarrage, Puppet génère un certificat SSL pour l'hôte Puppetmaster et le place dans le répertoire <tt>ssldir</tt> configuré plus haut.

Il écoute sur le port 8140/TCP. Assurez-vous qu'il n'y a pas de règles du pare-feu qui bloquent l'accès des clients.

==== Un  manifeste simple====
Les manifestes, dans la terminologie Puppet, sont des fichiers dans lesquels la configuration du client est spécifiée. 
La documentation contient un 
 [http://docs.puppetlabs.com/guides/language_guide.html guide exhaustif ] sur le langage à balises des manifestes.

Comme exemple simple, créez un fichier ''message du jour''(motd) sur le client. Sur Puppetmaster créez un fichier dans le partage <tt>files</tt>  créé précédemment :

{{File|/var/lib/puppet/files/motd|MOTD file on the server|<pre>
Welcome to this Puppet-managed machine!
</pre>}}

Then, we have to create the main manifest file in the <tt>manifests</tt> directory. It is called <tt>site.pp</tt>:

{{File|/etc/puppet/manifests/site.pp|Main manifest on the server|<pre>
node default {
  file { '/etc/motd':
    source => 'puppet://puppet/files/motd'
  }
}
</pre>}}

La définition du  ''node'' par <tt>default</tt> (le nom pour un client) est utilisée au cas où il n'y aurait pas d'instruction <tt>node</tt> spécifique pour l'hôte. 
Nous utilisons une ressource <tt>file</tt> et voulons que le fichier {{Path|/etc/motd}} sur nos  clients contienne la même chose que le fichier <tt>motd</tt> dans le partage <tt>files</tt> sur l'hôte <tt>puppet</tt>. Si votre  puppetmaster n'est accessible qu'en utilisant un autre nom d'hôte, vous devez adapter l'URI <tt>source</tt> en conséquence.

=== Client Configuration ===
{{Important|The client '''must''' have the '''same major and minor version''' as the Puppetmaster. Using a 2.7.1 Puppetmaster with 2.7.2 clients is fine, but using 2.6 for the server and 2.7 for clients can cause unexpected issues at any time.}}

{{Note|If your puppetmaster is not reachable via <tt>puppet</tt>, set <tt>server{{=}}&lt;your hostname&gt;</tt> to the actual host name in {{Path|/etc/puppet/puppet.conf}} in the <tt>[main]</tt> section.}}

Lors de la première exécution de l'agent Puppet, vous devez attendre la signature de votre certificat par le puppetmaster. Pour demander un certificat, et lancer votre première configuration, exécutez :

{{RootCmd|puppet agent --test --waitforcert 60|prompt=root@client #
|output=<pre>
info: Creating a new certificate request for client
info: Creating a new SSL key at /var/lib/puppet/ssl/private_keys/client.pem
notice: Did not receive certificate
</pre>}}

Avant que le client ne puisse se connecter, vous devez autoriser la requête de certificat sur le serveur. Votre client devrait apparaître dans la liste des nœuds requérant un certificat : 
{{RootCmd|puppet cert --list
|prompt=root@server #
|output=client}}

Now, we grant the request:
{{RootCmd|puppet cert --sign client
|prompt=root@server #}}

The client will check every 60 seconds whether its certificate has already been issued. After that, it continues with the first configuration run:
{{GenericCmd|<pre>
info: Caching catalog for client
info: Applying configuration version '1317317379'
notice: /Stage[main]//Node[default]/File[/etc/motd]/ensure: defined content as '{md5}30ed97991ad6f591b9995ad749b20b00'
notice: Finished catalog run in 0.05 seconds
</pre>}}

When you're seeing this message, all went well. You can now check the contents of your {{Path|/etc/motd}} file on the client:
{{Cmd|cat /etc/motd
|prompt=user@client $
|output=Welcome to this Puppet-managed machine!}}

You can now start the puppet agent as a deamon and have it launch on boot:
{{RootCmd|/etc/init.d/puppet start
|rc-update add puppet default
|prompt=root@client #}}

== Other Topics ==

=== Manually generating certificates ===
To manually generate a certificate, you can use the <tt>puppet cert</tt> utility.
It will place all generated certificates into the <tt>ssldir</tt> as set in the puppet configuration and will sign them with the key of your local Puppet Certificate Authority (CA).

An easy case is the generation of a certificate with '''only one Common Name:'''
{{RootCmd|puppet cert --generate host1}}

If you need to have '''multiple host names''' the certificate is valid for, use the <tt>--certdnsnames</tt> parameter and separate the additional host names with a colon:
{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

This example will generate a certificate valid for the three listed host names.

=== Managing slots with puppet ===
While the default portage provider in puppet does not support slots, a [https://github.com/whatbox/PortageGT 3rd party plugin] is available to enable this functionality in puppet.

== External resources ==
* [http://puppetlabs.com/ Upstream website]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]


[[Category:Server]]
[[Category:Security]]
