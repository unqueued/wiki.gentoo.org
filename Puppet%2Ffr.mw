<languages />

{{Metadata|abstract=Puppet est un système de gestion de  configuration écrit en  Ruby. Il peut être utilisé pour automatiser le déploiement de machines.}}

{{InfoBox stack
|{{InfoBox wikipedia|Puppet (software)|header=true}}
|{{InfoBox ohloh}}
}}

'''Puppet''' est un système de gestion de configuration écrit en [[Ruby]]. Il peut être utilisé pour automatiser le déploiement de machines.

== Installation ==
Puppet est fourni par le paquet {{Package|app-admin/puppet}}.
Actuellement, il n'y a pas de distinction entre client et serveur, et l'installation de base est la même pour les deux.

Puppet is provided by the {{Package|app-admin/puppet}} package.

Currently, there is no distinction between server and client, so the basic installation procedure is the same for both.

=== Emerge ===

Commencez par installer Puppet avec la commande  <tt>emerge</tt>:
{{Emerge|puppet}}

{{Emerge|app-admin/puppet}}

== Configuration et mise en place ==
Puppet est configuré principalement via  {{Path|/etc/puppet/puppet.conf}} dans un format de style  INI.  Les commentaires sont indiqués avec un signe  (<tt>#</tt>).
Le fichier de configuration est divisé en plusieurs sections, ou blocs :

Puppet is mainly configured through {{Path|/etc/puppet/puppet.conf}} in an INI-style format. Comments are marked with a hash sign (<tt>#</tt>).

The configuration file is separated into several sections, or blocks:

* <tt>[main]</tt> contient les réglages qui agissent comme valeurs par défaut dans toutes les parties de Puppet, sauf si vous les redéfinissez dans l'une des sections suivantes :
** <tt>[master]</tt> est utilisée pour les réglages qui s'appliquent à Puppetmaster (<tt>puppet master</tt>), ou l'outil CA (<tt>puppet cert</tt>)
** <tt>[agent]</tt> est utilisé pour des réglages qui s'appliquent à l'agent Puppet (<tt>puppet agent</tt>)

Une explication plus approfondie, et une liste des blocs suivants utilisés est disponible dans la [http://docs.puppetlabs.com/guides/configuring.html documentation officielle de Puppet].

=== Configuration du serveur (Puppetmaster)  ===

La configuration par défaut placée par l'Ebuild dans {{Path|puppet.conf}} peut être utilisée en l'état. Pour Puppet 2.7.3, la partie relative au serveur ressemble à ceci :

{{FileBox|filename=/etc/puppet/puppet.conf|title=Server-related default configuration|lang=ini|1=
[main]
    # The Puppet log directory.
    # The default value is '$vardir/log'.
    logdir = /var/log/puppet
  
    # Where Puppet PID files are kept.
    # The default value is '$vardir/run'.
    rundir = /var/run/puppet
  
    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
    ssldir = $vardir/ssl
}}

==== Configuration du serveur de fichiers ====
Pour pouvoir envoyer des fichiers aux clients, il faut configurer le serveur de fichiers. Ceci est fait dans   {{Path|/etc/puppet/fileserver.conf}}. Par défaut, il n'y a pas de fichier à servir.

To be able to send files to the clients, the file server has to be configured. This is done in {{Path|/etc/puppet/fileserver.conf}}. By default, there are no files being served.

{{FileBox|filename=/etc/puppet/fileserver.conf|title=Setting the <tt>files</tt> share|lang=ini|1=
[files]
    path /var/lib/puppet/files
    allow 192.168.0.0/24
}}

L'extrait de code ci-dessus définit un partage appelé <tt>files</tt> (souvenez-vous de cet identifiant, car il y sera fait référence par la suite), cherchant des fichiers dans {{Path|/var/lib/puppet/files}} et seulement disponible pour des hôtes dont l'adresse IP appartient au réseau 192.168.0.0/24. Vous pouvez utiliser des adresses IP, la notation CIDR et des noms d'hôtes (y compris le caractères passe-partout comme <tt>*.domain.invalid</tt>) ici.
La commande <tt>deny</tt> peut être utilisée pour refuser explicitement l'accès à certains hôtes ou à certaines plages d'adresses IP.

==== Démarrer le démon Puppetmaster====
{{Note|Il est recommandé que Puppetmaster soit accessible par les clients en utilisant le nom d'hôte  <tt>puppet</tt>. Cependant, le nom peut être redéfini, ce qui bien-sûr oblige à des efforts de configuration.}}

{{Note|It is recommended that the Puppetmaster is reachable from the clients using the host name <tt>puppet</tt>. However, the name can be overridden, which of course causes configuration effort.}}

{{Important| À ce stade, le nom d'hôte vu des clients devrait être identique à celui de la sortie de la commande  <tt>hostname -f</tt>. Il est possible que vous deviez ajuster  {{Path|/etc/hosts}} pour parvenir à cela, ou créez un nouveau certificat à la main comme [[#Manually generating certificates|expliqué ci-dessous]].}}

Avec la configuration de base, aussi bien qu'avec une configuration initiale du serveur de fichiers, vous pouvez lancer le démon Puppetmaster à l'aide de sont script d'initialisation :
{{RootCmd|/etc/init.d/puppetmaster start}}

{{RootCmd|/etc/init.d/puppetmaster start}}

Lors du premier démarrage, Puppet génère un certificat SSL pour l'hôte Puppetmaster et le place dans le répertoire <tt>ssldir</tt> configuré plus haut.

Il écoute sur le port 8140/TCP. Assurez-vous qu'il n'y a pas de règles du pare-feu qui bloquent l'accès des clients.

==== Un  manifeste simple====
Les manifestes, dans la terminologie Puppet, sont des fichiers dans lesquels la configuration du client est spécifiée. 
La documentation contient un 
 [http://docs.puppetlabs.com/guides/language_guide.html guide exhaustif ] sur le langage à balises des manifestes.

Manifests, in Puppet's terminology, are the files in which the client configuration is specified.
The documentation contains a [http://docs.puppetlabs.com/guides/language_guide.html comprehensive guide] about the manifest markup language.

Comme exemple simple, créez un fichier ''message du jour''(motd) sur le client. Sur Puppetmaster créez un fichier dans le partage <tt>files</tt>  créé précédemment :

{{FileBox|filename=/var/lib/puppet/files/motd|title=MOTD file on the server|1=
Welcome to this Puppet-managed machine!
</pre>}}

Vous devez alors créer le fichier manifeste principal dans le répertoire <tt>manifests</tt>. Il est appelé <tt>site.pp</tt> :

{{FileBox|filename=/etc/puppet/manifests/site.pp|title=Main manifest on the server|lang=ruby|1=
node default {
  file { '/etc/motd':
    source => 'puppet://puppet/files/motd'
  }
}
}}

La définition du  ''node'' par <tt>default</tt> (le nom pour un client) est utilisée au cas où il n'y aurait pas d'instruction <tt>node</tt> spécifique pour l'hôte. 
Nous utilisons une ressource <tt>file</tt> et voulons que le fichier {{Path|/etc/motd}} sur nos  clients contienne la même chose que le fichier <tt>motd</tt> dans le partage <tt>files</tt> sur l'hôte <tt>puppet</tt>. Si votre  puppetmaster n'est accessible qu'en utilisant un autre nom d'hôte, vous devez adapter l'URI <tt>source</tt> en conséquence.

===Configuration du client ===
{{Important|Le client '''doit''' avoir les  '''mêmes versions majeure et mineure''' que le Puppetmaster. Utiliser   Puppetmaster 2.7.1 avec des clients 2.7.2  est correct,mais utiliser 2.6 pour le serveur et 2.7 pour les clients peut créer des problèmes inattendus à tout moment.}}

{{Important|The client '''must''' have the '''same major and minor version''' as the Puppetmaster. Using a 2.7.1 Puppetmaster with 2.7.2 clients is fine, but using 2.6 for the server and 2.7 for clients can cause unexpected issues at any time.}}

{{Note|Si votre puppetmaster n'est pas accessible via  <tt>puppet</tt>, définissez <tt>server{{=}}&lt;votre nom d'hôte&gt;</tt> avec le nom de l'hôte réel, dans la section  <tt>[main]</tt> du fichier  {{Path|/etc/puppet/puppet.conf.}}}}

Lors de la première exécution de l'agent Puppet, vous devez attendre la signature de votre certificat par le puppetmaster. Pour demander un certificat, et lancer votre première configuration, exécutez :

{{RootCmd|puppet agent --test --waitforcert 60|prompt=root@client #
|output=<pre>
info: Creating a new certificate request for client
info: Creating a new SSL key at /var/lib/puppet/ssl/private_keys/client.pem
notice: Did not receive certificate
</pre>}}

Avant que le client ne puisse se connecter, vous devez autoriser la requête de certificat sur le serveur. Votre client devrait apparaître dans la liste des nœuds requérant un certificat : 
{{RootCmd|puppet cert --list
|prompt=root@server #
|output=client}}

{{RootCmd|puppet cert --list
|prompt=root@server #
|output=client}}

Maintenant vous effectuez la requête :
{{RootCmd|puppet cert --sign client
|prompt=root@server #}}

{{RootCmd|puppet cert --sign client
|prompt=root@server #}}

Le client va vérifier toutes les 60 secondes si un certificat a déjà été émis. Après cela, il continue avec la première partie de la configuration :

{{GenericCmd|<pre>
info: Caching catalog for client
info: Applying configuration version '1317317379'
notice: /Stage[main]//Node[default]/File[/etc/motd]/ensure: defined content as '{md5}30ed97991ad6f591b9995ad749b20b00'
notice: Finished catalog run in 0.05 seconds
</pre>}}

{{GenericCmd|<pre>
info: Caching catalog for client
info: Applying configuration version '1317317379'
notice: /Stage[main]//Node[default]/File[/etc/motd]/ensure: defined content as '{md5}30ed97991ad6f591b9995ad749b20b00'
notice: Finished catalog run in 0.05 seconds
</pre>}}

Si vous apercevez ce message, tout s'est bien passé. Vous pouvez désormais vérifier le contenu de votre fichier  {{Path|/etc/motd}} sur le client :
{{Cmd|cat /etc/motd
|prompt=user@client $
|output=Welcome to this Puppet-managed machine!}}

{{Cmd|cat /etc/motd
|prompt=user@client $
|output=Welcome to this Puppet-managed machine!}}

==== OpenRC ====

Vous pouvez maintenant démarrer l'agent puppet en tant que démon et faire en sorte qu'il soit lancé au démarrage :
{{RootCmd|/etc/init.d/puppet start
|rc-update add puppet default
|prompt=root@client #}}

{{RootCmd|/etc/init.d/puppet start
|rc-update add puppet default
|prompt=root@client #}}

==== Systemd ====

Conversely, when running systemd:

{{RootCmd|systemctl start puppet
|systemctl enable puppet
|prompt=root@client #}}

== Autres rubriques ==

=== Génération manuelle de certificats ===
Pour générer un certificat à la main, vous pouvez utiliser l'utilitaire  <tt>puppet cert</tt>.
Il placera tous les certificats générés dans le répertoire  <tt>ssldir</tt> que vous avez défini dans la configuration de  puppet  et les signera avec la clé de votre autorité locale de certification Puppet (CA).

To manually generate a certificate, use the <tt>puppet cert</tt> utility.
It will place all generated certificates into the <tt>ssldir</tt> as set in the puppet configuration and will sign them with the key of the local Puppet Certificate Authority (CA).

Un cas facile est celui de la génération d'un certificat avec '''seulement un nom commun'''.
{{RootCmd|puppet cert --generate host1}}

{{RootCmd|puppet cert --generate host1}}

Si vous avez besoin d'avoir de '''multiples noms d'hôte''' pour lesquels le certificat est valide, utilisez le paramètre  <tt>--certdnsnames</tt> et  séparez les noms d'hôte additionnels par un caractère ''deux-points (:)''
{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

Cet exemple générera un certificat valide pour les trois noms d'hôte listés.

=== Refreshing agent certificates ===

This is the process used to manually refresh agent certificates.

# (on master) {{RootCmd|puppet cert clean ${AGENT_HOSTNAME} }}
# (on agent) {{RootCmd|rm /etc/puppet/ssl/{certs,certificate_requests}/${AGENT_HOSTNAME}.pem}}
#* This will cause the Puppet agent to regenerate the CSR with the existing SSL key.
#* The old certificate is no longer valid, as it was nuked on the master.
#* When one of the above steps is forgotten, an error will pop up about the certificate mis-matching between agent and master.
#* To replace the SSL keys (optional): {{RootCmd|rm /etc/puppet/ssl/{public,private}_keys/${AGENT_HOSTNAME}.pem}}
# (on agent) {{RootCmd|puppet agent --onetime --no-daemonize --verbose --test --waitforcert 30}}
#* When using auto-signing, no further steps are needed.
# (on master) {{RootCmd|puppet cert list ${AGENT_HOSTNAME} }}
# Verify that the fingerprint listed in the previous two outputs matches
# (on master) {{RootCmd|puppet cert sign ${AGENT_HOSTNAME} }}
# (on agent) {{RootCmd|puppet agent --onetime --no-daemonize --verbose --test}}

=== Gestion des slots avec puppet ===
Bien que le fournisseur de portage par défaut dans puppet ne prend pas en charge les slots, il y a des modules puppet qui tentent d'ajouter cette fonctionnalité.
* [https://github.com/gentoo/puppet-portage puppet-portage]
* [https://github.com/whatbox/PortageGT PortageGT]

While the default portage provider in puppet does not support slots there are puppet modules available which seek to add in this functionality.

* [https://github.com/gentoo/puppet-portage puppet-portage]
* [https://github.com/whatbox/PortageGT PortageGT]

== Ressources externes ==
* [http://puppetlabs.com/ Upstream website]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]

* [http://puppetlabs.com/ Upstream website]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]


[[Category:Server]]
[[Category:Security]]
