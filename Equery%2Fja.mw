<languages />
{{Lowercase title}}
{{InfoBox stack
|{{InfoBox wikipedia|Gentoolkit|header=true}}
|{{InfoBox gdoc|Portage-Tools}}
|{{InfoBox gitweb|gentoolkit.git}}
}}

<tt>equery</tt> は、Portage におけるいくつかの一般的な操作をより簡単にするためのツールです。パッケージの依存関係、メタデータ、インストールされたファイルなどを表示可能です。

== インストール ==

=== emerge ===

単純に、以下のようにします。

{{Emerge|app-portage/gentoolkit}}

equery は、 {{Package|app-portage/gentoolkit}} パッケージでインストールされるツールセットの一部です。 equery や他のツールのインストールについて、詳しくは [[Gentoolkit]] の記事を読んでください。

== 使い方 ==

=== はじめに ===

<tt>equery</tt>はシステムにインストールされたパッケージについて役に立つ情報を出力するためのツールです。<tt>equery</tt>はモジュール群に基づいています。個々のモジュールは略称であらわされます。例えば、<tt>equery l gcc</tt>は<tt>equery list gcc</tt>と同じです。<code>--help</code>オプションを付けて起動(<tt>equery --help</tt>)すると、グローバルなオプション、すべての使用可能なモジュール、そしてそれらの略称が表示されます。モジュール名を続ける(<tt>equery --help module</tt>)と、特定モジュールのヘルプが表示されます。最後に、<tt>man equery</tt>はすべての使用可能なモジュールとオプションをいくつかの例とともに表示します。 

下に示すのは、多くのモジュールで使うことのできる機能の一覧です。 

{{Cmd|equery --quiet list gcc|output=<pre>
sys-devel/gcc-4.3.2-r3
</pre>}}

{{Cmd|equery --quiet list sys-devel/gcc|output=<pre>
sys-devel/gcc-4.3.2-r3
</pre>}}

{{Cmd|equery --quiet list '>{{=}}sys-devel/gcc-4'|output=<pre>
sys-devel/gcc-4.3.2-r3
</pre>}}

<tt>emerge</tt>と同様、<tt>equery</tt>は部分的なパッケージ名を理解しません:

{{Cmd|equery check zilla|output=<pre>
!!! No package found matching zilla
</pre>}}

<tt>emerge</tt>とは違い、<tt>equery</tt>はカテゴリ名およびパッケージ名に関してシェルライクなワイルドカードを受け付けます:

{{Cmd|equery check '*zilla*'|output=<pre>
 * Checking www-client/mozilla-firefox-3.0.14 ...
    90 out of 90 files passed
</pre>}}

{{Cmd|equery check www-c*/*|output=<pre>
 * Checking www-client/links-2.2 ...
   30 out of 30 files passed
 * Checking www-client/mozilla-firefox-3.0.14 ...
   90 out of 90 files passed
</pre>}}

ほとんどのequeryモジュールは複数の入力を受け付けます:

{{Cmd|equery hasuse sse sse2|output=<pre>
 * Searching for USE flag sse ...
[IP-] [  ] media-libs/flac-1.2.1-r3 (0)
[IP-] [  ] media-libs/speex-1.2_beta3_p2 (0)
  
 * Searching for USE flag sse2 ...
[IP-] [  ] dev-libs/openssl-0.9.8k (0)
[IP-] [  ] x11-libs/pixman-0.16.0 (0)
</pre>}}

いくつかのモジュールは完全な正規表現も扱うことができます:

{{Cmd|equery -q list --portage-tree --full-regex '[kr]?flickr.*'|output=<pre>
dev-dotnet/flickrnet-bin-2.2
dev-ruby/flickr-1.0.2-r1
dev-ruby/flickr-1.0.2-r2
dev-ruby/rflickr-20060201
media-gfx/kflickr-0.6
[...]
</pre>}}

{{Note/ja|アスタリスク展開は<tt>equery</tt>の古いオプションのいくつかを置き換えました。例えば、すべてのパッケージを対象にするためには<code>'*'</code> (アスタリスク)を使用します。あるカテゴリーのすべてのパッケージを対象とする場合は、<code>'category-name/*'</code>を使用します。}}

{{Warning/ja|アスタリスクや大なり/小なり記号などの'''シェルの特別なメタ文字を使う際には、必ず入力をクォートしてください'''。}}

これ以降のいくつかのセクションでは、<tt>equery</tt>の各モジュールを簡単に紹介します。

=== 機能 ===

equeryのすべての機能を見たい場合、単純に引数無しでequeryを実行します。 

{{Cmd|equery|output=<pre>
Gentoo package query tool
Usage: equery [global-options] module-name [module-options]
 
modules (short name)
 (b)elongs               list what package FILES belong to
 (c)hanges               list changelog entries for ATOM
 chec(k)                 verify checksums and timestamps for PKG
 (d)epends               list all packages directly depending on ATOM
 dep(g)raph              display a tree of all dependencies for PKG
 (f)iles                 list all files installed by PKG
 h(a)s                   list all packages for matching ENVIRONMENT data stored in /var/db/pkg
 (h)asuse                list all packages that have USE flag
 ke(y)words              display keywords for specified PKG
 (l)ist                  list package matching PKG
 (m)eta                  display metadata about PKG
 (s)ize                  display total size of all files owned by PKG
 (u)ses                  display USE flags for PKG
 (w)hich                 print full path to ebuild for PKG
</pre>}}

=== エイリアス ===

<tt>equery</tt>を使うときの一般的なアプローチは、エイリアスを使うことです。bashを使っている場合、以下を{{Path|~/.bashrc}}ファイルに書いておくとよいでしょう。

{{FileBox|filename=~/.bashrc|lang=bash|1=
alias eqf='equery f'
alias equ='equery u'
alias eqh='equery h'
alias eqa='equery a'
alias eqb='equery b'
alias eql='equery l'
alias eqd='equery d'
alias eqg='equery g'
alias eqc='equery c'
alias eqk='equery k'
alias eqm='equery m'
alias eqy='equery y'
alias eqs='equery s'
alias eqw='equery w'
}}

=== belongs (b): ファイルを提供したパッケージを検索 ===

{{Cmd|equery belongs -e /usr/bin/glxgears|output=<pre>
 * Searching for /usr/bin/glxgears ...
 x11-apps/mesa-progs-7.5.1 (/usr/bin/glxgears)
</pre>}}

<code>belongs</code>は<code>-f</code>オプションで指定される正規表現にマッチしたファイルを検索できます。<code>-e</code>オプションはマッチするファイルを見つけた時点で検索を停止します。２つのパッケージに所属するファイルは無いため、このオプションは安全です。 

<code>belongs</code>の短縮形が使用できます。例えば、<tt>equery</tt>が属するパッケージをリストアップする場合は以下を実行します。

{{Cmd|equery b equery|output=<pre>
 * Searching for equery ... 
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib/python-exec/python2.7/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python3.3/site-packages/gentoolkit/test/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/bin/equery -> ../lib/python-exec/python-exec2)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python2.7/site-packages/gentoolkit/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib/python-exec/python3.3/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python2.7/site-packages/gentoolkit/test/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python3.3/site-packages/gentoolkit/equery)
</pre>}}

=== changes (c): パッケージの ChangeLog を表示 ===

<code>changes</code>は、指定されたパッケージのあるバージョンもしくは複数バージョンのChangeLogを表示します。<tt>emerge --sync</tt>を実行した直後は、Portageはアップグレードが進行中であることを表示します。変更点を知るためには、以下のコマンドを使用します。

{{Cmd|equery changes portage|output=<pre>
*portage-2.1.6.13 (03 May 2009)
  
  03 May 2009; Zac Medico <zmedico@gentoo.org> +portage-2.1.6.13.ebuild:
  2.1.6.13 bump. This fixes bug #268398 (document econf automatic die)
  and bug #267104 (handle insufficient space interaction with userfetch).
  Bug #268228 tracks all bugs fixed since 2.1.6.11.
</pre>
}}

=== check (k): パッケージの状態が完全か検査 ===

<tt>equery</tt> は、パッケージのインストール状態が完全か調べたいときに便利です。MD5 チェックサムやタイムスタンプを照合し、壊れていたり書き換えられていたり削除されていたりしている可能性がないか検出することが可能です。 

{{Cmd|equery check gentoolkit|output=<pre>
 * Checking app-portage/gentoolkit-0.3.0_rc7 ...
   71 out of 71 files passed
</pre>
}}

=== depends (d): パッケージに依存するすべてのパッケージをリスト表示 ===

あるパッケージがなぜインストールされたのか知りたくなることはありませんか？<tt>equery</tt>は<code>depends</code>オプションを付けることで、そのパッケージに依存するパッケージリストを表示できます。

{{Cmd|equery depends pygtk|output=<pre>
 * Searching for pygtk ...
app-admin/pessulus-2.24.0 (>=dev-python/pygtk-2.6.0)
app-editors/gedit-2.24.3 (python ? >=dev-python/pygtk-2.12)
dev-libs/libgweather-2.24.3 (python ? >=dev-python/pygtk-2)
dev-python/gnome-python-base-2.22.3 (>=dev-python/pygtk-2.10.3)
dev-python/gnome-python-desktop-base-2.24.1 (>=dev-python/pygtk-2.10.3)
[...]
</pre>
}}

次の例では、udevに直接依存するすべてのパッケージをリストアップします。

{{Cmd|equery d udev|output=<pre>
sys-auth/consolekit-0.4.5_p20120320 (acl ? >=sys-fs/udev-146-r1)
sys-fs/cryptsetup-1.4.1 (>=sys-fs/udev-124)
                        (>=sys-fs/udev-182[static-libs])
                        (<=sys-fs/udev-171-r6)
sys-fs/lvm2-2.02.88 (>=sys-fs/udev-151-r4)
virtual/dev-manager-0 (sys-fs/udev)
x11-libs/cairo-1.10.2-r2 (drm ? >=sys-fs/udev-136)
</pre>}}

=== depgraph (g): パッケージが必要とするすべてのパッケージを表示 ===

<code>depgraph</code>は、<code>depends</code>の逆です。指定したパッケージ'''が'''必要とする全てのパッケージを表示します（「指定したパッケージ'''を'''必要とするパッケージ」ではありません）。間接的に必要なパッケージも表示します。何階層にわたり再帰検索を行うかについては、 <code>--depth</code> オプションで指定します。 

{{Cmd|equery depgraph mozilla-firefox|output=<pre>
 * Searching for mozilla-firefox ...
 * dependency graph for www-client/mozilla-firefox-2.0.0.19:
`-- www-client/mozilla-firefox-2.0.0.19
 `-- virtual/jre-1.6.0 (virtual/jre) [java]
  `-- virtual/jdk-1.6.0 (virtual/jdk-1.6.0*)
  `-- dev-java/icedtea6-bin (unable to resolve: package masked or removed)
   `-- dev-java/sun-jdk-1.6.0.15
    `-- dev-java/java-sdk-docs-1.6.0.10 [doc]
     `-- app-arch/unzip-6.0-r1
      `-- app-arch/bzip2-1.0.5-r1 [bzip2]
    `-- sys-libs/glibc-2.9_p20081201-r2
     `-- sys-devel/gettext-0.17 [nls]
      `-- virtual/libiconv-0 (virtual/libiconv)
[...]
</pre>
}}

上記例では、<code>java</code> USEフラグが有効なときには<code>jre</code> が'''直接的に'''必要で、 <code>jdk</code> が'''間接的に'''必要になることがわかります。

=== files (f): パッケージが含むファイルのリストを表示 ===

<tt>equery</tt>は、<code>files</code>モジュールでebuildがインストールするすべてのファイルのリストを表示します。ディレクトリ構造を見やすく表示するには<code>--tree</code>を使用してください。<code>--filter</code>は特定のファイルタイプのみ見つける場合に使用します。例えば、<code>--filter=cmd</code>は実行形式のファイルがどこにインストールされているのか見つけられます。また、<code>--filter=conf</code>で設定ファイルの場所を素早く見つけることが可能です。 

{{Cmd|equery files --tree gentoolkit|output=<pre>
 * Searching for gentoolkit ...
 * Contents of app-portage/gentoolkit-0.3.0_rc7:
 /etc
   > /eclean
      + distfiles.exclude
      + packages.exclude
   > /env.d
      + 99gentoolkit-env
   > /revdep-rebuild
      + 99revdep-rebuild
 /usr
   > /bin
      + eclean
      + eclean-dist -> eclean
      + eclean-pkg -> eclean
      + epkginfo
      + equery
      + eread
      + euse
      + glsa-check
      + revdep-rebuild
   > /lib
      > /python2.6
         > /site-packages
            > /gentoolkit
            + gentoolkit-0.3.0_rc7-py2.6.egg-info
               + __init__.py
               > /equery
                  + __init__.py
                  + belongs.py
                  + changes.py
                  + check.py
                  + depends.py
                  + depgraph.py
                  + files.py
[...]
</pre>
}}

別の例として、以下はncmpcppによってインストールされるすべてのファイルをリスト表示します。

{{Cmd|equery f ncmpcpp|output=<pre>
 * Searching for ncmpcpp ...
 * Contents of media-sound/ncmpcpp-0.5.10:
/usr
/usr/bin
/usr/bin/ncmpcpp
/usr/share
/usr/share/bash-completion
/usr/share/bash-completion/ncmpcpp
/usr/share/doc
/usr/share/doc/ncmpcpp-0.5.10
/usr/share/doc/ncmpcpp-0.5.10/AUTHORS.bz2
/usr/share/doc/ncmpcpp-0.5.10/NEWS.bz2
/usr/share/doc/ncmpcpp-0.5.10/config.bz2
/usr/share/doc/ncmpcpp-0.5.10/keys.bz2
/usr/share/man
/usr/share/man/man1
/usr/share/man/man1/ncmpcpp.1.bz2
</pre>}}

他のモジュールの説明、他のコマンドラインオプションについてはequeryの[[man page]] (<kbd>man equery</kbd>)を参照してください。

=== hasuse (h): 特定の USE フラグをもつパッケージを検索 ===

<code>hasuse</code> can be used to find packages with a given USE flag. <code>hasuse</code> will not indicate if the flag is enabled, only if the ebuild lists it as an option. See the EXAMPLES section of <code>hasuse</code> in the <tt>equery</tt> man page for more tip on getting this kind of information.

{{Cmd|equery hasuse qt3 qt4|output=<pre>
 * Searching for USE flag qt3 ...
[IP-] [  ] app-crypt/pinentry-0.7.5 (0)
[IP-] [  ] net-dns/avahi-0.6.24-r2 (0)
[IP-] [  ] net-wireless/wpa_supplicant-0.6.9 (0)
  
 * Searching for USE flag qt4 ...
[IP-] [  ] net-dns/avahi-0.6.24-r2 (0)
[IP-] [  ] net-wireless/wpa_supplicant-0.6.9 (0)
</pre>
}}

=== list (l): パッケージをリスト表示 ===

<code>list</code> is a simple, yet powerful module to list packages that are installed, in the Portage tree or in an overlay.

{{Cmd|equery list '*'|output=<pre>
 * Searching for * ...
[IP-] [  ] app-admin/eselect-1.2.3 (0)
[IP-] [  ] app-admin/eselect-ctags-1.10 (0)
[IP-] [  ] app-admin/eselect-esd-20060719 (0)
[IP-] [  ] app-admin/eselect-fontconfig-1.0 (0)
[IP-] [  ] app-admin/eselect-opengl-1.0.8-r1 (0)
[IP-] [  ] app-admin/eselect-python-20090824 (0)
[IP-] [  ] app-admin/eselect-ruby-20081227 (0)
[IP-] [  ] app-admin/eselect-vi-1.1.5 (0)
[IP-] [  ] app-admin/perl-cleaner-1.05 (0)
[IP-] [  ] app-admin/pessulus-2.24.0 (0)
[IP-] [  ] app-admin/python-updater-0.7 (0)
[IP-] [  ] app-admin/sudo-1.7.2_p1 (0)
[...]
</pre>
}}

The standard query will search installed packages for the given package name. Passing in <code>'*'</code> displays all packages in the set. In the leftmost field it is possible to see all the above packages are <code>I</code>(nstalled) and from the <code>P</code>(ortage) tree. They are not masked (the second field is blank), and they are all installed in the default slot (0).

Use local options to look for packages in the Portage tree and overlays. 

{{Cmd|equery list -po vim|output=<pre>
 * Searching for vim ...
[-P-] [  ] app-editors/vim-7.0.235 (0)
[-P-] [ ~] app-editors/vim-7.0.243 (0)
[-P-] [  ] app-editors/vim-7.1.123 (0)
[-P-] [ ~] app-editors/vim-7.1.330 (0)
[-P-] [  ] app-editors/vim-7.2 (0)
[-P-] [ ~] app-editors/vim-7.2.108 (0)
[IP-] [  ] app-editors/vim-7.2.182 (0)
[-P-] [ ~] app-editors/vim-7.2.238 (0)
[-P-] [ ~] app-editors/vim-7.2.264 (0)
</pre>
}}

In this is it possible to see version 7.2.182 is installed and there are no versions available from an overlay. Users can see which versions are keyword masked by the <code>~</code> in the second field. 

=== meta (m): パッケージのメタデータを表示 ===

Each package in the Portage tree provides at least some [http://devmanual.gentoo.org/ebuild-writing/misc-files/metadata/index.html metadata] about its maintainer, herd, etc. The amount of useful information depends on how much package maintainers decide to provide. With no options, <code>meta</code> returns some basic useful information.

{{Cmd|equery meta gnucash|output=<pre>
 * app-office/gnucash [gentoo]
 Herd:        gnome-office (gnome-office@gentoo.org)
 Maintainer:  tove@gentoo.org (Torsten Veller)
 Upstream:    None specified
 Location:    /usr/portage/app-office/gnucash
 Keywords:    2.2.9-r1:0: alpha amd64 ppc sparc x86
 Keywords:    2.2.9-r2:0:
 Keywords:    2.3.8:0:
 Keywords:    2.3.10:0: ~alpha ~amd64 ~ppc ~sparc ~x86
</pre>
}}

Some maintainers provide extra information about the package which be very useful: 

{{Cmd|equery meta --description emacs|output=<pre>
 * app-editors/emacs
  GNU Emacs is an extensible, customizable text editor - and more. At its core
  is an interpreter for Emacs Lisp, a dialect of the Lisp programming language
  with extensions to support text editing. The features of GNU Emacs include:
   * Content-sensitive editing modes, including syntax coloring, for a wide
     variety of file types including plain text, source code, and HTML.
   * Complete built-in documentation, including a tutorial for new users.
   * Support for many languages and their scripts, including all the European
     "Latin" scripts, Russian, Greek, Japanese, Chinese, Korean, Thai,
     Vietnamese, Lao, Ethiopian, and some Indian scripts.
   * Highly customizable, using Emacs Lisp code or a graphical customization
     interface.
   * A large number of extensions that add other functionality, including a
     project planner, mail and news reader, debugger interface, calendar, and
     more. Many of these extensions are distributed with GNU Emacs; others are
     available separately.
</pre>
}}

=== Finding package sizes with size (s) ===

Ever been curious to find out how much space a specific package is occupying? Since a package could have its files over a number of directories, the usual <tt>du -hc</tt> command might not give the correct figure. Not to worry, <tt>equery</tt> to the rescue!

{{Cmd|equery size openoffice-bin|output=<pre>
 * app-office/openoffice-bin-3.1.1
         Total files : 4624
         Total size  : 361.38 MiB
</pre>
}}

Using <code>size</code> prints the total space used in human-readable units and lists the total number of files the package has. To get the total size in bytes use <code>--bytes</code>. 

=== Listing per-package USE flags with uses (u) ===

<tt>equery</tt>'s <code>uses</code> module can provide information about what USE flags are available for a specific package and which of those flags is currently enabled. 

{{Cmd|equery uses gst-plugins-meta|output=<pre>
 * Searching for gst-plugins-meta ...
[ Legend : U - flag is set in make.conf       ]
[        : I - package is installed with flag ]
[ Colors : set, unset                         ]
 * Found these USE flags for media-plugins/gst-plugins-meta-0.10-r2:
 U I
 + + X      : Adds support for X11
 - - a52    : Enables support for decoding ATSC A/52 streams used in DVD
 + + alsa   : Adds support for media-libs/alsa-lib (Advanced Linux Sound
              Architecture)
 - - dvb    : Adds support for DVB (Digital Video Broadcasting)
 + + dvd    : Adds support for DVDs
 + + esd    : Adds support for media-sound/esound (Enlightened Sound Daemon)
 + + ffmpeg : Enable ffmpeg-based audio/video codec support
 + + flac   : Adds support for FLAC: Free Lossless Audio Codec
 - - mad    : Adds support for mad (high-quality mp3 decoder library and cli
              frontend)
 + + mpeg   : Adds libmpeg3 support to various packages
 - - mythtv : Support for retrieval from media-tv/mythtv backend
 + + ogg    : Adds support for the Ogg container format (commonly used by
              Vorbis, Theora and flac)
 - - oss    : Adds support for OSS (Open Sound System)
 + + theora : Adds support for the Theora Video Compression Codec
 + + vorbis : Adds support for the OggVorbis audio codec
 - - xv     : Adds in optional support for the Xvideo extension (an X API for
              video playback)
</pre>
}}

Here a number of USE flags are enabled in gstreamer's plugin meta-package, but it can be seen that there are other USE flags available. For more information on USE flags, please refer to the [[Handbook:X86/Working/USE|USE Flags]] chapter of the [[Handbook:Main Page|Gentoo Handbook]]. 

=== Finding the ebuild path with which (w) ===

<code>which</code> is a simple script to help users quickly find the file path to an ebuild. If an unversioned package name is passed using <code>which</code> it will return the path to the newest installable ebuild version. In other words, it would return the ebuild Portage would use if <tt>emerge example/package</tt> was typed. <code>which</code> also accepts a ''versioned'' package to get the path to that ebuild. 

{{Cmd|equery which gnome|output=<pre>
/usr/portage/gnome-base/gnome/gnome-2.26.3.ebuild
</pre>
}}

Lastly, if none of the above features of <tt>equery</tt> have provided an answer, try using <code>which</code> to manually search an ebuild with programs like <tt>cat</tt>, <tt>less</tt> or <tt>grep</tt>: 

{{Cmd|grep HOMEPAGE $(equery which gentoolkit)|output=<pre>
HOMEPAGE="http://www.gentoo.org/proj/en/portage/tools/index.xml"
</pre>
}}

{{Warning|Be aware that <tt>equery</tt> currently changes the format of the output if it is sent through a pipe. The piped format is intended to be easier to parse by tools, but it can be turned off by adding the <code>--no-pipe</code> option. When writing scripts that employ <tt>equery</tt> be aware of this behavior.}}

== See also ==

* [[Q_applets]]
* [[eix]]
* [[Gentoolkit]]

[[Category:Portage tools]]
