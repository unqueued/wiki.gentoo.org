<languages />


{{Metadata|abstract=이 문서는 어떻게 젠투 머신이 홈 네트워크와 인터넷을 연결하는 라우터로 변모하는지 자세한 내용을 다룹니다.}}

이 문서는 어떻게 젠투 머신이 홈 네트워크와 인터넷을 연결하는 라우터로 변모하는지 자세한 내용을 다룹니다.

== 도입부 ==

오래된 부품으로 라우터를 구축하는 작업은 Linksys에서 깡통처럼 만들어둔 걸 사는 것보다 여러 면에서 장점을 지니고 있습니다. 특장점이라면 연결을 전반적으로 취급할 수 있다는 점입니다. 다른 장점은 여러분의 상상에 맏깁니다. 어떤 것이든 필요한 요소로 이루어진 시나리오를 통해 가능합니다. 

이 안내서에선 네트워크 주소 변환(NAT) 기능을 라우터(커널 및 iptables)에서 설정하는 방법, 일반적인 서비스(dnsmasq를 통한 도메인 이름 체계(DNS)설정, dhcpcd를 통한 dhcp 사용, ppp를 통한 ADSL연결)를 추가하고 설정하는 방법을 안내하며, 해낼 수 있는 보다 정교한 재미거리(포트 포워딩, 트래픽 셰이핑, 프록시/캐싱, 등...)로 마무리 하겠습니다. 

시작하기 전에, 몇가지 알아야 할 기본 요구사항이 있습니다. 먼저 여러분의 카드에 적어도 두 개 이상의 네트워크 인터페이스 카드(NICs)가 있어야 합니다. 그 다음 인터넷 연결을 설정해야 합니다(아마 IP/DNS/게이트웨이/사용자 이름/암호가 포함될지도 모릅니다). 추가적으로 마스터 모드를 지원하는 무선 네트워크 카드도 필요합니다. 상업용 드라이버가 필요하여 기능을 못쓰고 버리는 일을 피하는것을 추천합니다. 드라이버를 다루지 못한다면 카드는 영원히 바이패스 모드로 남고 쓰지 못하게 될지도 모릅니다. 마지막으로 이 안내서를 성공적으로 따르고 가정용 라우터가 제대로 동작하도록 하려면 약간의 여유로운 시간과 젠투에 대한 애정이 필요합니다.

이 안내서에서 따를 관례는 다음과 같습니다: 

* eth0 - 지역 네트워크(LAN)또는 여러대의 NIC로 구성한 네트워크 브릿지에 연결한 NIC
* eth1 - 광역 네트워크(WAN)에 연결한 NIC
* LAN은 192.168.0.xxx 네트워크로 동작함
* 라우터는 표준 192.168.0.1 IP로 고정함
* 라우터는 Linux 2.4또는 2.6커널에서 동작합니다. 2.0/2.2 커널을 사용중이라고 (가정) 합니다

{{Important/ko|보안상 미리 경고하건대, 방화벽을 제대로 굴리기 전까진 라우터에서 필요없는 서비스를 내리는 것이 좋습니다. 현재 실행중인 서비스를 보려면 <code>rc-status</code>만 실행하십시오.}}

== 커널 설정(너 자신을 알라) ==

커널에는 보유한 각각의 NIC를 동작케 하는 드라이버가 필요합니다. 카드를 이미 설정했다면 <code>ifconfig</code>를 실행하기만 하면 됩니다. 다음의 과정과는 나온 내용이 약간 다르겠지만, 괜찮습니다. 다루어야 할 문제는 모든 인터페이스가 화면에 나타나야 한다는 것입니다. 

{{RootCmd|ifconfig -a|output=<pre>
eth0      Link encap:Ethernet  HWaddr 00:60:F5:07:07:B8
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:11 Base address:0x9800
  
eth1      Link encap:Ethernet  HWaddr 00:60:F5:07:07:B9
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:10 Base address:0x9400
</pre>
}}

두 네트워크 카드가 나타나지 않고, 어떤 카드를 붙였는지 알 수 없다면, <code>lspci | grep Ethernet</code> 을 실행해보십시오. <code>emerge pciutils</code>로 프로그램을 가져올 수 있습니다. 이 정보를 끌어오고 나서는 커널 설정으로 가서 올바른 드라이버 지원을 추가하십시오. 

그 다음 필요한 것은 iptables와 NAT(그리고 원할 경우 패킷 셰이핑) 지원입니다. 다음 목록은 항상 필요한 것(*), PPPoE를 통한 ADSL연결시(a), 모든 경우에 대해 추천(x), 셰이퍼(s) 기능용으로 나뉩니다. 기능을 커널에 포함을 하든 모듈로 빌드하든 상관 없기에 기능이 필요할 때면 올바른 모듈을 불러옵니다(모듈 불러오기는 어쨌거나 독자의 흥미 거리로 남겨둡니다). 

{{Kernel|네트워크 옵션|<pre>
Networking options  --->
   [*] TCP/IP networking
      [*] IP: advanced router
   [*] Network packet filtering (replaces ipchains)
If you use 2.4.x, you have to enable the following for DHCP:
   [*] Socket Filtering
  
   IP: Netfilter Configuration  --->
      [*] Connection tracking (required for masq/NAT)
         [x] FTP protocol support
         [x] IRC protocol support
      [*] IP tables support (required for filtering/masq/NAT)
         [*] IP range match support
         [x] MAC address match support
         [*] Multiple port match support
         [*] Packet filtering
            [*] REJECT target support
            [x] REDIRECT target support
         [*] Full NAT
            [*] MASQUERADE target support
         [s] Packet mangling
            [s] MARK target support
         [x] LOG target support
  
   QoS and/or fair queueing  --->
      [s] QoS and/or fair queueing
         [s] HTB packet scheduler
         [s] Ingress Qdisc
  
   [a] PPP (point-to-point protocol) support
      [a] PPP filtering
      [a] PPP support for async serial ports
      [a] PPP support for sync tty ports
      [a] PPP Deflate compression
      [a] PPP BSD-Compress compression
      [a] PPP over Ethernet
</pre>
}}

{{Note/ko|2.4커널과 2.6커널의 어떤 부분에 있어서는 약간 다를지도 모르겠지만, 알아볼 수 있어야 합니다 :D. 심지어 2.6 커널에서는 이 옵션이 이리저리 옮겨가는 경향이 있습니다. 잘 해보세요!}}

== WAN (인터넷-Internet 이라 알려짐) 내 것으로 만들기 ==

=== 도입부 ===

인터넷에 연결하는 방법은 여러가지가 있습니다. 따라서 가장 익숙한 방법을 다루겠습니다. ADSL(PPPoE)과 케이블 모뎀(동적/정적)도 있습니다. 다른 방법이 있다면 약간의 설명을 적어 전자메일로 언제든 보내주세요. 해당 사항이 없으면 이 장을 어찌 됐든 건너뛰셔도 됩니다. 이 장은 eth1을 통해 인터넷으로 연결한 라우터를 만드는 방법을 다룹니다. 

=== ADSL과 PPPoE ===

rp-pppoe([http://www.roaringpenguin.com/ Roaring Penguin])에서 보통 제공하는 매력적인 모든 PPPoE 프로그램은 [http://samba.org/ppp/ 표준 PPP 패키지]에 통합했습니다. 간단하게 <code>emerge ppp</code>를 실행하면 여러분의 뜻대로 됩니다. 여러분이 사용자 이름/암호 정보가 필요하다는 사실을 어떻게 말했는지 기억하시죠? 글쎄요, 전 뻥을 안쳤으니까 여러분이 그걸 지금 자각하고 있길 바랍니다. 여러분이 주로 쓰는 편집기에서 {{Path|/etc/conf.d/net}}을 불러오고 설정해보세요. 

다음 예제에서 'vla9h924'를 사용자 이름으로, 'boogie'를 암호로 바꾸세요.

{{File|/etc/conf.d/net|ppp0로 eth1을 통해 ADSL 연결 사용하기|<pre>
config_ppp0="ppp"
link_ppp0="eth1"
plugins_ppp0="pppoe"
pppd_ppp0="
  defaultroute
  usepeerdns
"
username_ppp0="vla9h924"
password_ppp0="boogie"
</pre>}}

{{RootCmd|ln -s net.lo /etc/init.d/net.ppp0
|rc-update add net.ppp0 default
|/etc/init.d/net.ppp0 start}}

{{Warning/ko|DSL 인터페이스가 딸려온다면 ppp0 인터페이스를 만들 것입니다. NIC 카드가 eth1이라 해도 IP는 실제로 ppp0에 물립니다. 지금부터는 예제에서 'eth1' 을 동작하게 하는 부분이 보이거든, 'ppp0'으로 대신하세요.}}

{{Warning/ko|사용자 이름/암호를 {{Path|/etc/conf.d/net}}파일에 넣었으니, 권한을 바꾸었는지 확인하셔서 root만 읽고 쓰게 하십시오.}}

{{Warning/ko|<code>rp-pppoe</code> 패키지에서 옮겨가는 분들이나, 연결 재설정에 자주 부딪히는 분들은 문제 해결 장에서 MTU 절을 참고하세요.}}

=== 케이블 또는 동적/정적 IP ===

고정 IP를 받았다면 동적 IP를 보유하고 있을 때보다 꼼꼼하게 더 해야 할 일이 있습니다. 정적 IP 사용자는 IP, 게이트웨이, DNS 서버 주소가 필요합니다. 

동적 IP 사용자:

{{Emerge|dhcpcd}}

{{File|/etc/conf.d/net|동적 IP 주소|<pre>
config_eth1="dhcp"
</pre>}}

정적 IP 사용자:

{{File|/etc/conf.d/net|정적 IP 주소 설정|<pre>
config_eth1="66.92.78.102/24 brd 66.92.78.255"
routes_eth1="default via 66.92.78.1"
</pre>}}

{{File|/etc/resolv.conf|DNS 정보 추가|<pre>
nameserver 123.123.123.123
</pre>}}

동적 및 정적 설정:

{{RootCmd|ln -s net.lo /etc/init.d/net.eth1
|rc-update add net.eth1 default
|/etc/init.d/net.eth1 start}}

모든 설정이 여기까지 해서 제대로 동작해야 합니다. 

== (일부 친구를 데려오는)LAN을 내 것으로 만들기 ==

이 과정은 앞의 과정보다는 좀 더 수월합니다. 그러나 두개 이상의 장치(LAN용, WAN용)를 사용한다면, LAN을 사용하려는 모든 NIC에 [[Network bridge]]를 설정해야 합니다. 이렇게 하면 여러대의 NIC에 동일한 IP 주소를 할당할 수 있습니다. 

이렇게 하기로 결정했다면 [[Network bridge]] 설정 과정을 따르십시오. 브릿지 이름(기본은 br0)은 이 위키의 과정을 통해 LAN 장비에 할당할 목적으로 eth0으로 대체합니다. 라우터에 여러대의 네트워크 장치를 보유하고 있다면, 관리를 쉽게 하기 위해 udev에서 이름을 바꿔보는 것이 좋습니다. 브릿지를 설정하고 장치의 이름을 바꾸는것은 완전히 별개의 선택 문제지만 좀 더 큰 가정용 네트워크를 구축한다면 추천합니다. 

무선 네트워크 액세스 포인트를 만들려고 한다면, 무선 네트워크 카드에서 마스터 모드를 지원하는지 확인하고 [[Hostapd]]를 설치해야 합니다.

{{File|/etc/conf.d/net||<pre>
config_eth0="192.168.0.1/24 brd 192.168.0.255"
</pre>}}

{{RootCmd|rc-update add net.eth0 default
|/etc/init.d/net.eth0 start}}

== LAN 서비스(우린 친절하니까) ==

=== DHCP 서버 ===

다른 사람들이 여러분의 집에 찾아와서 네트워크에 컴퓨터를 연결하고 바로 동작한다면 상당히 근사할거라 봅니다. 구체적인걸 생각하느라 멍때릴 필요도 없고 혼란스러운 설정 화면을 쳐다보게 할 필요도 없습니다! 인생은 뽀대가 나야 하니까요 (읭?) 동적 호스트 설정 프로토콜(DHCP)과 왜 이걸 다루어야 하는지 설명하도록 하겠습니다. 

DHCP는 정확하게 말하자면 이 이름이 함축하는 그대로입니다. 모든 호스트를 동적으로 자동으로 설정하게끔 하는 프로토콜입니다. DHCP 서버를 라우터에서 실행하면 네트워크의 모든 정보(유효 IP, DNS 서버, 게이트웨이, 등...)를 제공하고, 다른호스트가 시작하면 DHCP 클라이언트를 자체적으로 자동으로 설정하게끔합니다. 난리날 일도 없고, 혼란스러워질 일도 없습니다! DHCP에 대한 더 많은 이야기를 알아보시려 한다면 언제든 [[Wikipedia:DHCP|Wikipedia]]를 찾아보실 수 있습니다. 

DHCP와 DNS 서비스를 제공하는 dnsmasq 패키지를 활용하겠습니다. 이제 DHCP의 양상에 집중하겠습니다. 다른 DHCP 서버를 실행하시려 한다면 재미 거리 장에서 다른 예제를 찾아보시면 됩니다. 또한 DHCP 서버 설정에 손을 대보려 한다면 {{Path|/etc/dnsmasq.conf}}의 주석만을 읽어보세요. 모든 기본 설정은 있는 그대로 동작해야합니다. 

{{Emerge|dnsmasq}}

{{File|/etc/dnsmasq.conf||<pre>
dhcp-range=192.168.0.100,192.168.0.250,72h
interface=eth0
</pre>}}

{{RootCmd|rc-update add dnsmasq default
|/etc/init.d/dnsmasq start}}

인터페이스 설정은 매우 중요합니다. 기본 dnsmasq 설정을 사용하면 DNS 증폭 공격에 대해 라우터가 무방비 상태로 노출되며, ISP로부터 소름 돋는 이메일을 받을지도 모릅니다. [http://openresolver.com]에서 DNS 증폭 공격을 허용하지 않는지 확인해볼 수 있습니다.

이제 조그만 라우터는 제대로 동작하는 DHCP 서버가 되었습니다! 저기 있는 컴퓨터를 붙여서 동작하는걸 확인해보세요! 윈도우 시스템에서는 TCP/IP 속성에서 'IP 주소 자동으로 가져오기'와 'DNS 서버 주소 자동으로 가져오기'를 선택하시면 됩니다. 때로는 바뀐 내용이 바로 적용 안될 수 있기에, 명령 프롬프트를 열어서 <code>ipconfig /release</code>와 <code>ipconfig /renew</code>명령을 실행해야 합니다. 암튼, 윈도우에 대해서는 이쯤이면 충분하니, 관심있는 펭귄에게로 돌아가도록 하겠습니다.

=== DNS 서버 ===

사람들이 인터넷에서 방문할 때, 이름을 기억하지, 괴상한 숫자들로 이루어진 문자열을 기억하진 않습니다. 어쨌거나, ebay.com과 66.135.192.87중에 무엇이 기억하기 쉬운가요? DNS가 개입할 시점이 여깁니다. DNS 서버는 인터넷 어디든 실행하며, 누군가가 'ebay.com'을 방문하려 한다면, 이 서버는 (우리가 이해하는)'ebay.com'을 (컴퓨터가 이해하는)'66.135.192.87'로 바꿉니다. DNS에 대한 더 많은 내용을 알아보시려 한다면 언제든 [[Wikipedia:DNS|Wikipedia]]를 방문하여 살펴보실 수 있습니다. 

DHCP 서버에 DNS 서버 기능이 들어간 dnsmasq를 사용한다고 했으니까, 여기서 더 해야 할 일은 없습니다! 조그마한 라우터에서는 이미 DHCP 클라이언트에 DNS를 제공하고 있습니다. 이 모든 과정이 쉽길 바랬겠지요 ;D. 

다른 DNS서버에 익숙하다면 그걸 써도 됩니다만, dnsmasq는 우리가 원하는 것 이외에는 하지 않도록 요구사항에 따라 정확하게 설계됐기 때문에 이 자체로 완벽합니다. 지역 네트워크용 DNS 캐싱/전달 소형 서버가 되었습니다. 자체 도메인을 DNS에서 제공하려 하진 않지만, 지역 네트워크에서 다른 모든 이들에게 간단한 DNS 서비스를 제공할 뿐입니다. 

=== (IP 매스커레이딩으로 알려진) NAT ===

여기서, 여러분의 네트워크에 연결된 사람들은 서로 이야기를 할 수 있으며 DNS를 통해 호스트 이름을 찾을 수 있는데, 실제로는 아직도 인터넷에 연결되어 있지 않습니다. 여러분들이 이걸로도 대단하다(더 많은 대역폭이 주어집니다!)고 생각하고 있을지도 모르겠지만, 아직까지는 그 사람들이 만족하지 않고 있을거라 봅니다. 

이 단계가 네트워크 주소 변환(NAT) 단계입니다. NAT는 사용할 수 있는 공용 IP 주소가 얼마 없을 때, 자체 지역 네트워크의 여러 컴퓨터를 인터넷에 연결하는 방법입니다. 보통 ISP에서는 IP를 한개만 줍니다만, 전체 집안을 인터넷에 연결하려 할 것입니다. NAT는 이러한 동작을 가능케 하는 마술입니다. NAT에 대한 더 많은 이야기를 알아보시려 한다면, 언제든 [[Wikipedia:NAT|Wikipedia]]를 방문하실 수 있습니다. 

{{Note/ko|시작하기 전에, 시스템에 iptables가 있는지 확인하세요. 대부분의 시스템엔 자동으로 설치되어 있지만, 아마 없을겁니다. 시스템에 없다면  <code>emerge iptables</code>만 실행하세요.}}

먼저 현재 규칙을 모두 비우겠습니다

{{RootCmd|iptables -F
|iptables -t nat -F}}

조건에 일치하지 않는 트래픽을 처리파도록 기본정책을 설정하겠습니다

{{RootCmd|iptables -P INPUT ACCEPT
|iptables -P OUTPUT ACCEPT
|iptables -P FORWARD DROP}}

이 예제를 복사해서 붙여넣으세요...

{{RootCmd|export LAN{{=}}eth0
|export WAN{{=}}eth1}}

그 다음 서비스를 잠궈서 LAN에서만 동작하도록 하겠습니다:

{{RootCmd|iptables -I INPUT 1 -i ${LAN} -j ACCEPT
|iptables -I INPUT 1 -i lo -j ACCEPT
|iptables -A INPUT -p UDP --dport bootps ! -i ${LAN} -j REJECT
|iptables -A INPUT -p UDP --dport domain ! -i ${LAN} -j REJECT}}

(추가 요소)WAN에서 ssh 서버로 접근할 수 있도록 하겠습니다:

{{RootCmd|iptables -A INPUT -p TCP --dport ssh -i ${WAN} -j ACCEPT}}

허가받은 포트에 TCP/ UDP 패킷을 떨굽니다:

{{RootCmd|iptables -A INPUT -p TCP ! -i ${LAN} -d 0/0 --dport 0:1023 -j DROP
|iptables -A INPUT -p UDP ! -i ${LAN} -d 0/0 --dport 0:1023 -j DROP}}

마지막으로 NAT 규칙을 추가하겠습니다:

{{RootCmd|iptables -I FORWARD -i ${LAN} -d 192.168.0.0/255.255.0.0 -j DROP
|iptables -A FORWARD -i ${LAN} -s 192.168.0.0/255.255.0.0 -j ACCEPT
|iptables -A FORWARD -i ${WAN} -d 192.168.0.0/255.255.0.0 -j ACCEPT
|iptables -t nat -A POSTROUTING -o ${WAN} -j MASQUERADE}}

커널에 IP 포워딩을 허용한다고 알립니다:

{{RootCmd|echo 1 > /proc/sys/net/ipv4/ip_forward}}

{{RootCmd|for f in /proc/sys/net/ipv4/conf/*/rp_filter ; do echo 1 > $f ; done}}

부팅을 수행할 때면 이 규칙을 손으로 일일히 실행할 필요가 없기 때문에 이렇게 합니다.

{{RootCmd|/etc/init.d/iptables save
|rc-update add iptables default}}

{{File|/etc/sysctl.conf||<pre>
net.ipv4.ip_forward = 1
net.ipv4.conf.default.rp_filter = 1
</pre>}}

동적 인터넷 주소를 보유했다면 다음을 활성화하려 할 것입니다:

{{File|/etc/sysctl.conf||<pre>
net.ipv4.ip_dynaddr = 1
</pre>
}}

이 모든 내용을 다 입력하고 나면, 네트워크의 나머지 머신들이 인터넷에 직접 연결된 것과 같이 이제부터 인터넷을 사용할 수 있어야합니다. 

ip_dynaddr 옵션은 다이얼 요청 시스템 또는 ISP에서 동적 주소를 제공할 때 유용합니다. 이 옵션은 인터넷 인터페이스를 완전히 설정하기 전에 연결을 시도할 경우 문제를 일으키며 동작합니다. 라우터 뒤에 있는 사용자들에겐 보다 유연한 네트워크 경험을 제공할 뿐입니다. 

== (비오는 날의) 재미 거리 ==

=== 도입부 ===

믿거나 말거나, 끝내셨습니다 :D. 이제 여기서부터는 여러분이 관심을 가질만한 일반적인 주제를 다루겠습니다. 이 장에 있는 모든 내용은 완전히 선택적입니다. 

=== 포트 포워딩 ===

때로는 라우터 뒤에 있는 컴퓨터에서 호스팅 서비스를 가능하게 하거나 원격으로 연결하는 식으로 삶을 윤택하게 하고 싶을지도 모릅니다. FTP, HTTP, SSH, VNC 서버를 라우터 뒤에 있는 하나 이상의 머신에서 실행하고 연결할 수 있게 하길 원할지도 모릅니다. 유일하게 경고할 점이라면 포트 하나당 서버/머신 조합은 한 개밖에 없습니다. 예를 들어 라우터 뒤의 FTP 서버가 세대를 설정하는 현실적인 방법은 없으며 모두 21번 포트를 통해 연결하려고 합니다. 한대에만 21번을 할당할 수 있고 나머지는 123 또는 567번 포트로 불러야 합니다. 

모든 포트 포워딩 규칙의 양식은 <code>iptables -t nat -A PREROUTING [-p protocol] --dport [external port on router] -i ${WAN} -j DNAT --to [ip/port to forward to]</code>입니다. 불행하게도, iptables는 포트포워딩을 수행할 때 호스트 이름을 받아들이지 못합니다. 외부 포트로부터 내부 머신의 동일한 포트로 포워딩한다면, 대상 포트는 생략할 수 있습니다. 더 많은 내용은 iptables(8) 맨 페이지를 살펴보세요. 

{{RootCmd|export LAN{{=}}eth0
|export WAN{{=}}eth1}}

내부 호스트의 ssh로 포트 2개 포워딩

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 2 -i ${WAN} -j DNAT --to 192.168.0.2:22}}

내부 호스트용 FTP 포워딩:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 21 -i ${WAN} -j DNAT --to 192.168.0.56}}

내부 호스트용 HTTP 포워딩:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 80 -i ${WAN} -j DNAT --to 192.168.0.56}}

내부 호스트용 VNC 포워딩:

{{RootCmd|iptables -t nat -I PREROUTING -p tcp --dport 5900 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p tcp --dport 5901 -i ${WAN} -j DNAT --to 192.168.0.3:5900}}

VNC를 192.168.0.3에서 사용하려면 라우터 호스트 이름에 ':1'을 추가하기만 하세요.

내부 포스트용 SAMBA 포워딩(윈도우를 감당하기에는 포트 수를 초과함):

{{RootCmd|iptables -t nat -I PREROUTING -p tcp --dport 135 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p tcp --dport 139 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p tcp --dport 445 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p udp --dport 137:138 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p udp --dport 445 -i ${WAN} -j DNAT --to 192.168.0.2}}

비트토렌트 포워딩:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 6881:6889 -i ${WAN} -j DNAT --to 192.168.0.2}}

eDonkey/eMule 포워딩:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 4662 -i ${WAN} -j DNAT --to 192.168.0.55}}

게임 큐브 워프 파이프 지원:

{{RootCmd|iptables -t nat -A PREROUTING -p udp --dport 4000 -i ${WAN} -j DNAT --to 192.168.0.56}}

플레이스테이션 2 온라인 지원:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 10070:10080 -i ${WAN} -j DNAT --to 192.168.0.11
|iptables -t nat -A PREROUTING -p udp --dport 10070:10080 -i ${WAN} -j DNAT --to 192.168.0.11}}

Xbox 라이브:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 3074 -i ${WAN} -j DNAT --to 192.168.0.69
|iptables -t nat -A PREROUTING -p udp --dport 3074 -i ${WAN} -j DNAT --to 192.168.0.69
|iptables -t nat -A PREROUTING -p udp --dport 88 -i ${WAN} -j DNAT --to 192.168.0.69
}}

=== Identd(IRC용) ===

인터넷 전달 대화는 ident 서비스를 약간 무겁게 돌아가도록 합니다. IRC 클라이언트는 라우터 뒤에 있다고 가정하고, 라우터와 클라이언트에 대해 ident 서비스를 제공하는 방법이 필요합니다. 이 중 <code>midentd</code>라고 하는 서버가 있습니다. 

{{RootCmd|emerge midentd
|rc-update add midentd default
|/etc/init.d/midentd start
}}

포티지에 다른 몇가지 ident 서버가 있습니다. 필요에 따라 <code>oidentd</code>와 <code>fakeidentd</code>도 확인해볼 것을 추천합니다.. 

=== 시간 서버 ===

시스템 시간을 올바른 상태로 유지하는 것은 제대로 된 시스템으로 관리하는데 중요합니다. 시간을 올바르게 유지하는 대부분의 일반적인 방법 내지는 수단 중 하나는 네트워크 시간 프로토콜(NTP)로 처리하는 것이며 ntp 패키지가 답이 되겠습니다(서버 클라이언트 구현체가 같이 들어있습니다). 

대부분 사람은 ntp 클라이언트를 컴퓨터에서 실행합니다. 분명히, 전 세계의 더 많은 클라이언트가 있으니, 더 많은 부하가 걸리는 ntp 서버에는 듬직한 어께를 필요로 할 것입니다. 홈 네트워크 같은 환경의 경우, 모든 자체 컴퓨터에 정확한 시간을 제공하면서 공용 서버의 부하를 줄이도록 도울 수 있습니다. 게다가 덤으로, 클라이언트에 대한 자체 업데이트도 빠릅니다! 해야 할 모든 일은 ntp 서버를 라우터에서 실행하고 공용 인터넷 서버와 동기화를 수행하며, 네트워크의 컴퓨터에는 시간 정보를 제공합니다. 시작하려면, 라우터에서 <code>emerge ntp</code>를 실행하고, 원하는대로 {{Path|/etc/conf.d/ntp-client}} 를 편집하세요.

{{RootCmd|rc-update add ntp-client default}}

{{File|/etc/ntp.conf||<pre>
restrict default ignore
restrict 192.168.0.0 mask 255.255.255.0 notrust nomodify notrap
</pre>}}

이러한 설정을 통해 192.168.0.xxx IP 주소 범위에 있는 ntp 클라이언트에게만 ntp 서버를 사용할 수 있게 합니다.

{{RootCmd|rc-update add ntpd default
|/etc/init.d/ntp-client start
|/etc/init.d/ntpd start}}

{{Note/ko|서버를 설정할 때 ntp 포트(123/udp) 의 들어오고 나가는 연결을 허용했는지 확인해야 합니다. 클라이언트는 udp를 통한 123 포트 접근의 나가는 연결만 필요합니다.}}

이제 클라이언트에서도 <code>emerge ntp</code>를 입력하세요. 어쨌거나, ntp 클라이언트를 실행하기만 하면 되니 설정은 훨씬 간단해졌습니다. 

{{Path|/etc/conf.d/ntp-client}}에서 NTPCLIENT_OPTS 변수의 'pool.ntp.org' 서버 '192.168.0.1'로 바꾸십시오.

{{RootCmd|rc-update add ntp-client default
|/etc/init.d/ntp-client start}}

=== rsync 서버 ===

다중 젠투 머신을 동일한 지역 네트워크에서 사용하는 분들이라면, 원격 서버로 <code>emerge sync</code>를 수행하여 모든 머신의 동기화를 유지하려 할 것입니다. 지역 rsync를 설정하면, 여러분의 외부 대역폭 자원과 젠투 rsync 서버의 대역폭 자원을 절약할 수 있습니다. 이렇게 하기에는 꽤 간단합니다. 

{{Note/ko|rsync 안내서의 더 자세한 내용을 원하신다면 공식 [[Project:Infrastructure/Rsync|rsync 안내서]]를 살펴보세요.}}

모든 젠투 머신에서는 rsync가 필요하기 때문에 이머지 할 필요는 없습니다. {{Path|/etc/rsyncd.conf}} 기본 설정 파일을 편집하고 <code>[gentoo-portage]</code> 섹션을 주석 해제한 다음에, <code>address</code> 옵션을 추가했는지 확인하세요. 다른 모든 내용은 기본 상태로 두는 것이 좋습니다. 

{{File|/etc/rsyncd.conf||<pre>
pid file = /var/run/rsyncd.pid
use chroot = yes
read only = yes
address = 192.168.0.1
  
[gentoo-portage]
  path = /mnt/space/portage
  comment = Gentoo Linux Portage tree
  exclude = /distfiles /packages
</pre>
}}

그 다음 서비스를 시작해야 합니다(다시 말하지만, 기본 상태로 두어도 됩니다). 

{{RootCmd|/etc/init.d/rsyncd start
|rc-update add rsyncd default}}

여기서 남은 일은 클라이언트를 라우터랑 동기화 하도록 설정하는 일입니다. 

{{File|/etc/portage/make.conf|SYNC 변수에 새 rsync 서버 설정|<pre>
SYNC="rsync://192.168.0.1/gentoo-portage"
</pre>
}}

=== 메일 서버 ===

때로는 자체적으로 단순 메일 전송 프로토콜(SMTP)을 라우터 상에서 실행하는 것이 좋을 수도 있습니다. 이렇게 하려는데는 나름대로의 이유가 있겠지만, 저 같은 경우는 이걸 실행해서 메일을 즉시 보낸 것처럼 사용자들이 볼 수 있게 하고, 재전송/경로제어 부분은 메일 서버에서 처리하도록 합니다. 어떤 ISP(버라이즌 같은 경우)는 네트워크 내에서 각 계정의 메일을 전달하지 못하게 하기도 합니다. 또한, 여러분은 메일 전송을 쉽게 제한하여 거대한 첨부 파일로 인해 대부분의 시간동안 연결을 심각하게 방해하지 못하도록 할 수 있습니다. 

{{Emerge|netqmail}}

`hostname`이 올바르게 나타나는지 확인하세요

{{RootCmd|emerge --config netqmail}}

{{RootCmd|iptables -I INPUT -p tcp --dport smtp ! -i ${LAN} -j REJECT
|ln -s /var/qmail/supervise/qmail-send /service/qmail-send
|ln -s /var/qmail/supervise/qmail-smtpd /service/qmail-smtpd
|cd /etc/tcprules.d}}

{{Path|tcp.qmail-smtp}}를 편집하고 allow 섹션에 다음처럼 항목을 추가하세요:

{{File|tcp.qmail-smtp||<pre>
192.168.0.:allow,RELAYCLIENT=""
</pre>}}

{{RootCmd|make
|rc-update add svscan default
|/etc/init.d/svscan start}}

전 qmail의 광팬이지만, 여러분은 다른 mta를 쓰셔도 됩니다 :D. 네트워크의 호스트에 전자메일을 설저한다면 SMTP 서버를 192.168.0.1라고 알려주면 되며, 모든 동작이 근사하게 돌아가야 합니다. 더 많은 문서를 보시려면 [http://netqmail.org/ netqmail 홈페이지]를 방문하시는 것이 좋습니다.

=== 완전한 DHCP 서버 ===

우리가 앞서 사용한 dnsmasq는 DHCP 서비스를 모든 클라이언트에 제공하기 위함이었습니다. 대부분의 사람들은 간단한 소규모 지역망을 사용하는데, 이 자체로서 완벽합니다. 다만 더 많은 기능을 필요로 할 수도 있습니다. 그렇기에, [http://www.isc.org/products/DHCP ISC] 양반들이 제공한 완전한 기능을 갖춘 DHCP 서버로 전환하겠습니다. 

{{Emerge|dhcp}}

{{File|/etc/dhcp/dhcpd.conf|간단한 설정 파일|<pre>
authoritative;
ddns-update-style interim;
subnet 192.168.0.0 netmask 255.255.255.0 {
    range 192.168.0.100 192.168.0.250;
    default-lease-time 259200;
    max-lease-time 518400;
    option subnet-mask 255.255.255.0;
    option broadcast-address 192.168.0.255;
    option routers 192.168.0.1;
    option domain-name-servers 192.168.0.1;
}
</pre>}}

{{Path|/etc/conf.d/dhcpd}}에 <code>IFACE</code>값을 "eth0"으로 설정하십시오.

{{RootCmd|rc-update add dhcpd default
|/etc/init.d/dhcpd start}}

이 설정은 앞서 사용한 dnsmasq의 DHCP 기능을 대체하는 최소한의 요건입니다. 제가 말했던 것 중에, 여러분은 dnsmasq에서 DHCP 기능을 비활성화하는걸 기억해야 한다고 말했는데, 여러분은 그렇게 하지 않았죠? 그렇게 하지 않았다면 지금 처라하세요({{Path|/etc/dnsmasq.conf}}에서 <code>dhcp-range</code> 설정을 주석처리하고 서비스를 재시작하면 됩니다).

=== 다른 지역 네트워크 연결하기(둘 또는 셋 또는 ...) ===

때로는 다른 지역 네트워크에 라우터를 연결해야 할 때도 있습니다. 아마도 여러분은 임시적으로 친구 여럿을 연결해주거나, 그냥 확 깔끔하게 컴퓨터의 그룹을 달리 구분하고 싶다든지, 단지 그냥 이 모든게 지겨울지도 모릅니다. 어떤 이유에서든 다른 지역 네트워크로 라우터를 확장하는 건 꽤 간단해야 합니다. 다음 예제에서, 새 네트워크를 <code>eth2</code>라고 하는 세번째 이더넷 카드에 연결했다고 가정하겠습니다. 

먼저 인터페이스를 설정해야 합니다. [[#.28.EC.9D.BC.EB.B6.80_.EC.B9.9C.EA.B5.AC.EB.A5.BC_.EB.8D.B0.EB.A0.A4.EC.98.A4.EB.8A.94.29LAN.EC.9D.84_.EB.82.B4_.EA.B2.83.EC.9C.BC.EB.A1.9C_.EB.A7.8C.EB.93.A4.EA.B8.B0|이 장]]의 지시사항을 따르고 <code>eth0</code>은 <code>eth2</code>로, <code>192.168.0</code>은 <code>192.168.1</code>로 바꾸십시오.

그 다음 새 인터페이스에 대해 dnsmasq를 서비스 하도록 약간 고쳐야 합니다. {{Path|/etc/conf.d/dnsmasq}} 파일을 다시 편집하고 DNSMASQ_OPTS에 <code>-i eth2</code>를 붙이기만 합니다. -i를 여러번 써도 됩니다. 그 다음 {{Path|/etc/dnsmasq.conf}}를 편집해서 dhcp-range줄 같은 부분의 다른 줄을 [[#LAN_.EC.84.9C.EB.B9.84.EC.8A.A4.28.EC.9A.B0.EB.A6.B0_.EC.B9.9C.EC.A0.88.ED.95.98.EB.8B.88.EA.B9.8C.29|이 절]]에서처럼 추가하시고 <code>192.168.0</code>를 <code>192.168.1</code>로 고치세요. dhcp-range 줄도 역시 여러번 나와도 됩니다. 

마지막으로 [[#LAN_.EC.84.9C.EB.B9.84.EC.8A.A4.28.EC.9A.B0.EB.A6.B0_.EC.B9.9C.EC.A0.88.ED.95.98.EB.8B.88.EA.B9.8C.29|이 절]]의 규칙을 살펴보시고 각 규칙에 <code>-i ${LAN}</code>가 들어가도록 규칙을 복사하십시오. 설정을 쉽게 하기 위해 <code>LAN2</code>라는 다른 변수를 만드셔도 됩니다.

== 문제 해결 ==

=== 유용한 도구 ===

컴퓨터의 통신 문제가 있다면, 다음 도구를 사용해보세요(<code>net-analyzer</code> 포티지 분류에서 찾아볼 수 있습니다): 

{| class="wikitable" style="text-align: left;" 
|- 
! 유틸리티
! 설명
|- 
| wireshark
| 걸러내기 규칙에 따라 원시 네트워크 데이터를 모두 살펴보는 GUI 도구
|- 
| tcpdump
| 걸러내기 규칙에 따라 원시 네트워크 데이터를 떠보는 콘솔 도구
|- 
| iptraf
| ncurses 기반 IP LAN 감시 프로그램
|- 
| ettercap
| ncurses 기반 네트워크 감시/제어
|-
|}

=== DHCP 시동 실패 ===

dhcp  init.d 스크립트를 처음 실행할 때, 불러오기엔 실패하겠지만, 쓸모있는 정보가 내팽개쳐져있을겁니다. 

{{RootCmd|/etc/init.d/dhcp start|output=<pre>
 * Setting ownership on dhcp.leases ...          [ ok ]
 * Starting dhcpd ...                            [ !! ]
</pre>
}}

dhcpd가 출력을 내보낼 때를 알아보는 것이 요령입니다. 간단하게 {{Path|/var/log}}를 탐색하여 로그 파일을 뒤져보세요. 정확한 로그파일은 syslog를 사용하는 패키지에 따라 달려있으므로 <code>grep -Rl dhcpd /var/log</code> 명령을 실행하여 가능성을 줄여나가세요. 해결의 실마리는 설정 파일의 입력 내용에 있습니다. <code>dhcpd -d -f</code>(디버그/포그라운드 실행 함축)를 실행하여 출력 내용을 바탕으로 오류를 수정할 수도 있습니다. 

=== 잘못된 MTU 값 ===

드문 오류(다른 페이지는 잘 불러오는데 어떤 페이지에는 접근할 수 없는 경우)에 직면할 때면, 경로 MTU 발견 문제에 직면했을 수도 있습니다. 확인하는 빠른 방법은 iptables 명령을 실행하는 것입니다: 

{{RootCmd|iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu}}

이 명령으로 새 연결이 있는지 확인할것이며, 테스트 하려는 문제를 지닌 웹사이트를 그냥 새로고침하면ㄷ 뵈니다. 이게 도움이 되는 경우, 100Mbit 이더넷 연결에서의 표준 MTU 값은 <code>1500</code>입니다. 이 값은 PPPoA에도 적용됩니다. PPPoE 연결에는 <code>1492</code>입니다. 더 많은 내용을 알아보려면 [http://lartc.org/howto/ 리눅스 고급 라우팅 및 트래픽 컨트롤 설명서]의 15장을 읽어보셔야 합니다. 

이 명령으로 동작하지 않으면, mangle 테이블에 규칙을 추가하는 것이 좋습니다. 명령에 그냥 <code>-t mangle</code>를 추가하면 됩니다. 

=== 두 머신을 직접 연결할 수 없음 ===

(어떤 이유에서든) 허브 또는 스위치 없이 두 머신을 직접 연결하겠다는건데, 자동 MDI/MDI-X(자동 감지)기능 네트워크 어뎁터를 보유하지 않은 이상, 일반적인 이더넷 케이블은 동작하지 않을 것입니다. 크로스오버 케이블이라고 좀 다른 케이블이 필요합니다. 이 [[Wikipedia:Ethernet_crossover_cable|Wikipedia]] 페이지에서는 로우 레벨 측면에서 자세히 설명합니다.

== 마지막 참고 ==

이 안내서로 문제가 되는 경험이 있지 않은 이상 마지막 참고를 적지 않았습니다. 문제가 있다면 {{Mail|vapier}}에게 연락하든지 [https://bugs.gentoo.org/ 젠투 버그 웹사이트]에 버그 보고서를 올려주세요. 이 안내서를 개선하는데 약간의 관심이 있다면, 여기 넣으려 의도하는 바를 제 방식대로 적어서 보내세요.

== 감사문 ==

이 안내서에 제공한 노고에 대해 다음 작성자와 편집자분들께 감사의 말을 전하고자 합니다:


* {{Mail|vapier}}

[[Category:Server and Security]]
