<languages />

{{Metadata|abstract=이 문서는 어떻게 젠투 머신이 홈 네트워크와 인터넷을 연결하는 라우터로 변모하는지 자세한 내용을 다룹니다.}}

이 문서는 어떻게 젠투 머신이 홈 네트워크와 인터넷을 연결하는 라우터로 변모하는지 자세한 내용을 다룹니다.

== 도입부 ==

오래된 부품으로 개인 라우터를 구축하는 작업은 대기업(Linksys, D-Link, Netgear 등)에서 만들어둔 걸 사는 것보다 여러 면에서 장점을 지니고 있습니다. 특장점이라면 연결을 전반적으로 취급할 수 있다는 점입니다. 다른 장점은 여러분의 상상에 맏길 수 있습니다. 어떤 구성이든 필요한 요소로 이루어진 시나리오를 통해 가능합니다. 

이 안내서에선 네트워크 주소 변환(NAT) 기능을 자작 라우터(커널 및 iptables)에서 설정하는 방법, 일반적인 서비스({{Package|net-dns/dnsmasq}}를 통한 도메인 이름 체계(DNS)설정, {{Package|net-misc/dhcpcd}}를 통한 dhcp 사용, {{Package|net-dialup/ppp}}를 통한 ADSL연결)를 추가하고 설정하는 방법 절차를 제공하며, 자작 라우터에서 갖출 수 있는 모든 기능을 가진 정교한 재미거리(포트 포워딩, 트래픽 셰이핑, 프록시/캐싱, 등...)로 마무리 하겠습니다. 

시작하기 전에, 몇가지 검토해 볼 기본 요구사항이 있습니다. 
# 컴퓨터에 적어도 두 개 이상의 네트워크 인터페이스 카드(NICs)를 이미 설치했어야 합니다. 
# 인터넷 연결을 설정해야 합니다(아마 IP/DNS/게이트웨이/사용자 이름/암호가 포함될지도 모릅니다).
# (추가적으로) 마스터 모드를 지원하는 무선 네트워크 카드도 필요합니다. 상업용 드라이버가 필요하여 기능을 못쓰고 버리는 일을 피하려면 마스터 모드 설정을 추천합니다. 드라이버를 다루지 못한다면 카드를 영원히 방치하고 쓰지 못할 지도 모릅니다. 
# 이 안내서를 성공적으로 따르고 가정용 라우터가 제대로 동작하도록 하는 약간의 여유 시간과 젠투에 대한 애정이 필요합니다.

이 안내서에서 따를 관례는 다음과 같습니다: 

* eth0 - 지역 네트워크(LAN)또는 여러대의 NIC로 구성한 네트워크 브릿지에 연결한 NIC
* eth1 - 광역 네트워크(WAN)에 연결한 NIC
* LAN은 192.168.0.xxx 네트워크로 동작함
* 라우터는 표준 192.168.0.1 IP 주소로 고정함
* 라우터는 Linux 2.4또는 2.6커널에서 동작합니다. 이 안내서에서 다른 버전은 지원하지 않습니다.

{{Important|Due to security precautions, it is highly suggested to shut down any unneeded services on the router until the firewall is up. To view the currently running services run <tt>rc-status</tt>.}}

== 커널 설정(너 자신을 알라) ==

The kernel needs to have the drivers installed for both NICs present on the system. To see if the cards are already setup use the <tt>ifconfig</tt> command. The output may differ slightly from the following example. What matters is that the interface shows up. 

{{RootCmd|ifconfig -a|output=<pre>
eth0      Link encap:Ethernet  HWaddr 00:60:F5:07:07:B8
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:11 Base address:0x9800
  
eth1      Link encap:Ethernet  HWaddr 00:60:F5:07:07:B9
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:10 Base address:0x9400
</pre>
}}

If only one (or none) of the two cards show up try running <tt>lspci | grep Ethernet</tt>.
{{Note|The <tt>lspci</tt> utility is part of the {{Package|sys-apps/pciutils}} package and can be installed by running <tt>emerge sys-apps/pciutils</tt>.}}

Once the make(s)/model(s) of the NIC(s) has been obtained, configure the kernel with support for the correct drivers. For more information on kernel configuration see the [[Kernel/Gentoo_Kernel_Configuration_Guide|Kernel Configuration Guide]].

The next thing needed is support for iptables and NAT (and packet shaping if desired). The following list is split up into always required (*), required only for ADSL via PPPoE (a), suggested for everyone (x), and only for shaper (s) features. It does not matter whether the features are built into the kernel or as modules as long as when the feature is needed, the correct module(s) are loaded. For more information on loading modules see the 

{{KernelBox|title=Network Options|<pre>
Networking options  --->
   [*] TCP/IP networking
      [*] IP: advanced router
   [*] Network packet filtering (replaces ipchains)
</pre>}}

When using a 2.4.x kernel, the following must be enabled for DHCP:

{{KernelBox|title=Network Options|<pre>
   [*] Socket Filtering
  
   IP: Netfilter Configuration  --->
      [*] Connection tracking (required for masq/NAT)
         [x] FTP protocol support
         [x] IRC protocol support
      [*] IP tables support (required for filtering/masq/NAT)
         [*] IP range match support
         [x] MAC address match support
         [*] Multiple port match support
         [*] Packet filtering
            [*] REJECT target support
            [x] REDIRECT target support
         [*] Full NAT
            [*] MASQUERADE target support
         [s] Packet mangling
            [s] MARK target support
         [x] LOG target support
  
   QoS and/or fair queueing  --->
      [s] QoS and/or fair queueing
         [s] HTB packet scheduler
         [s] Ingress Qdisc
  
   [a] PPP (point-to-point protocol) support
      [a] PPP filtering
      [a] PPP support for async serial ports
      [a] PPP support for sync tty ports
      [a] PPP Deflate compression
      [a] PPP BSD-Compress compression
      [a] PPP over Ethernet
</pre>}}

{{Note|Some things may be slightly different in a 2.4.x vs. a 2.6.x kernel, however things should not be too difficult to figure out. Even among 2.6 kernels, these options have a tendency to move around. Good luck!}}

== WAN (인터넷-Internet 이라 알려짐) 내 것으로 만들기 ==

=== 도입부 ===

There are ''many'' ways to connect to the Internet, however there are generally only a couple of ways that are used by most of the public. ADSL (PPPoE) and cable modems (static/dynamic) are the two most common methods ISP (Internet Service Providers) provide. If there are other methods available, feel free to add them to this wiki article. Skip any of the following sections in this chapter that are not applicable to the needed use case. This chapter addresses getting the router connected to the Internet via eth1. 

=== ADSL과 PPPoE ===

All the fancy PPPoE software that used to be provided by rp-pppoe ([http://www.roaringpenguin.com/ Roaring Penguin]) has been integrated into the [http://samba.org/ppp/ standard PPP package]. Simply <tt>emerge ppp</tt> to install PPPoE. Remember how username and password information was a requirement listed above? Load up {{Path|/etc/conf.d/net}} in a favorite text editor and configure it accordingly. 

Replace <code><username></code> and <code><user_password></code> in the following example with the required username with the password:

{{FileBox|filename=/etc/conf.d/net|title=Use ADSL over eth1 for ppp0|lang=bash|1=
config_ppp0="ppp"
link_ppp0="eth1"
plugins_ppp0="pppoe"
pppd_ppp0="
  defaultroute
  usepeerdns
"
username_ppp0="<username>"
password_ppp0="<user_password>"
}}

{{RootCmd|ln -s net.lo /etc/init.d/net.ppp0
|rc-update add net.ppp0 default
|/etc/init.d/net.ppp0 start}}

{{Warning|When the DSL interface comes up, it will create a "ppp0" entry to the output of <tt>ifconfig</tt> command. Although the NIC is called eth1, the IP address is actually bound to ppp0. From now on substitute <code>eth1</code> with <code>ppp0</code>}}

{{Warning|Be sure to change the permissions of the {{Path|/etc/conf.d/net}} file so that only users with ''root'' privileges can read/write to it. This important because the a username and password have been entered to the file in plain text format.}}

{{Warning|For users transitioning from the {{Package|net-dialup/rp-pppoe}} package, or for users who experience weird connection resets, see the MTU section in the Troubleshooting chapter below.}}

=== 케이블 또는 동적/정적 IP ===

If a static IP is necessary then additional configuration details will be required. Static users IP users will need to add the IP address, gateway address, and DNS server addresses. 

동적 IP 사용자:

{{Emerge|net-misc/dhcpcd}}

{{FileBox|filename=/etc/conf.d/net|title=동적 IP 주소|lang=bash|1=
config_eth1="dhcp"
}}

정적 IP 사용자:

{{FileBox|filename=/etc/conf.d/net|title=정적 IP 주소 설정|lang=bash|1=
config_eth1="66.92.78.102/24 brd 66.92.78.255"
routes_eth1="default via 66.92.78.1"
}}

{{FileBox|filename=/etc/resolv.conf|title=DNS 정보 추가|1=
nameserver 123.123.123.123
}}

동적 및 정적 설정:

{{RootCmd|ln -s net.lo /etc/init.d/net.eth1
|rc-update add net.eth1 default
|/etc/init.d/net.eth1 start}}

After working through the changes above the system should be ready to continue. 

== (일부 친구를 데려오는)LAN을 내 것으로 만들기 ==

This step is a breeze compared to the previous one. To use ''more'' than two devices (more than the one for LAN and the one for WAN), a [[Network bridge]] will need to be setup between all NICs using the LAN. This will allow multiple NICs to be reached by the same IP address. 

If a network bridge will be necessary, follow [[Network bridge|the instructions to set up a Network bridge]]. The name of the bridge (default br0) will then replace eth0 for the LAN device in the steps in this wiki. If a large number of network devices in the home router, consider renaming them via udev to make administration easier. Setting up a bridge and renaming devices is completely optional but recommended for larger home networks. 

When creating a Wi-Fi access point make sure the Wi-Fi card supports master mode and set up [[Hostapd]].

{{FileBox|filename=/etc/conf.d/net|lang=bash|1=
config_eth0="192.168.0.1/24 brd 192.168.0.255"
}}

{{RootCmd|rc-update add net.eth0 default
|/etc/init.d/net.eth0 start}}

== LAN 서비스(우린 친절하니까) ==

=== DHCP server ===

It would be nice if everyone in the house could plug their computers into the network and things would just work. No need to remember mind-numbing details or make them stare at confusing configuration screens! Life would be grand, eh? Introducing the Dynamic Host Configuration Protocol (DHCP) and why everyone should care.

DHCP is exactly what its name implies: a protocol that allows dynamic configuration of hosts automatically. Run a DHCP server on the router, give it all the information about the network (valid IPs, DNS servers, gateways, etc...), then when the other hosts start up, they can run a DHCP ''client'' to automatically configure themselves. No fuss, no muss! For more information about DHCP, visit [[Wikipedia:DHCP|Wikipedia's DHCP article]]. 

This section will use the {{Package|net-dns/dnsmasq}} package which will provide both DHCP and DNS services. For now lets focus on the DHCP aspect. Note: to run a different DHCP server, another example can be found in the Fun Things section below. Also, to tinker with the DHCP server settings read the comments in the {{Path|/etc/dnsmasq.conf}} file. 

{{Emerge|net-dns/dnsmasq}}

{{FileBox|filename=/etc/dnsmasq.conf|1=
dhcp-range=192.168.0.100,192.168.0.250,72h
interface=eth0
}}

{{RootCmd|rc-update add dnsmasq default
|/etc/init.d/dnsmasq start}}

Setting the interface is very important. Using default dnsmasq settings will open the router to DNS amplification attacks which could create some scary email from the ISP providing the connection. Check to make sure the router is not allowing for DNS amplification attacks by using [http://openresolver.com].

Now the little router is a bona-fide DHCP server. Plug in those computers and watch them work! With Windows systems navigate to the {{Path|TCP/IP Properties}} and select the {{Path|Obtain an IP address automatically}} and {{Path|Obtain DNS server address automatically}} options. Sometimes the changes are not instantaneous, so opening a command prompt and running <tt>ipconfig /release</tt> and <tt>ipconfig /renew</tt> might be necessary. Enough about Windows, time to get back to everyone's favorite penguin!

=== DNS server ===

When people want to visit a place on the Internet, they remember names, not a string of funky numbers. After all, what is easier to remember, eBay.com or 66.135.192.87? This is where the DNS steps in. DNS servers run all over the Internet, and whenever someone wants to visit eBay.com, these servers turn the text "eBay.com" (what we understand) into IP address "66.135.192.87" (what computers understand). For more information about DNS visit [[Wikipedia:DNS|Wikipedia]]. 

Since dnsmasq is being used for the DHCP server, and it includes a DNS server, there is nothing left to do here! The little router is already providing DNS to its DHCP clients. Shouldn't everything be this easy? ;) 

It is possible to choose other DNS servers if they are more comfortable to setup. dnsmasq is used in this article because it was designed to do exactly what this guide required. It is a little DNS caching/forwarding server for local networks. The scope of this howto is not to provide DNS for a domain; but it does offer simple DNS services to every user of a home-based LAN. 

=== (IP 매스커레이딩으로 알려진) NAT ===

At this point, people on the network can talk to each other and look up hostnames via DNS, but they still ca not actually connect to the Internet. While the network administrator (the person reading this) may think it is great (more bandwidth for the Admin!), the other users are probably not very happy without an Internet connection. 

This is where Network Address Translation (NAT) steps in. NAT is a way of connecting multiple computers in a private LAN to the Internet when a small number of public IP addresses are available. Typically a home Internet user is provided with 1 public IP address by an ISP for the whole house to connect to the Internet. NAT is the magic that makes this possible. For more information about NAT, please visit [[Wikipedia:NAT|Wikipedia]]. 

{{Note|Before getting started, make sure IPtables has been installed on the system. If it is not installed, install it: <tt>emerge iptables</tt>}}

After IPtables is installed, flush the current rules:

{{RootCmd|iptables -F
|iptables -t nat -F}}

Setup default policies to handle unmatched traffic:

{{RootCmd|iptables -P INPUT ACCEPT
|iptables -P OUTPUT ACCEPT
|iptables -P FORWARD DROP}}

Copy and paste the following:

{{RootCmd|export LAN{{=}}eth0
|export WAN{{=}}eth1}}

The next step locks the services so they only work from the LAN:

{{RootCmd|iptables -I INPUT 1 -i ${LAN} -j ACCEPT
|iptables -I INPUT 1 -i lo -j ACCEPT
|iptables -A INPUT -p UDP --dport bootps ! -i ${LAN} -j REJECT
|iptables -A INPUT -p UDP --dport domain ! -i ${LAN} -j REJECT}}

(Optional) Allow access to the ssh server from the WAN:

{{RootCmd|iptables -A INPUT -p TCP --dport ssh -i ${WAN} -j ACCEPT}}

허가받은 포트에 TCP/ UDP 패킷을 떨굽니다:

{{RootCmd|iptables -A INPUT -p TCP ! -i ${LAN} -d 0/0 --dport 0:1023 -j DROP
|iptables -A INPUT -p UDP ! -i ${LAN} -d 0/0 --dport 0:1023 -j DROP}}

Finally add the rules for NAT:

{{RootCmd|iptables -I FORWARD -i ${LAN} -d 192.168.0.0/255.255.0.0 -j DROP
|iptables -A FORWARD -i ${LAN} -s 192.168.0.0/255.255.0.0 -j ACCEPT
|iptables -A FORWARD -i ${WAN} -d 192.168.0.0/255.255.0.0 -j ACCEPT
|iptables -t nat -A POSTROUTING -o ${WAN} -j MASQUERADE}}

Inform the kernel that IP forwarding is OK:

{{RootCmd|echo 1 > /proc/sys/net/ipv4/ip_forward}}

{{RootCmd|for f in /proc/sys/net/ipv4/conf/*/rp_filter ; do echo 1 > $f ; done}}

Instruct the IPtables daemon to save the changes to the rules, then add IPtables to the default runlevel:

{{RootCmd|/etc/init.d/iptables save
|rc-update add iptables default}}

{{FileBox|filename=/etc/sysctl.conf|lang=ini|1=
net.ipv4.ip_forward = 1
net.ipv4.conf.default.rp_filter = 1
}}

For dynamic Internet the following setting should be enabled:

{{FileBox|filename=/etc/sysctl.conf|lang=ini|1=
net.ipv4.ip_dynaddr = 1
}}

Once the above text has been entered the rest of the network users should now be able to use the Internet as if they were directly connected themselves. 

The <code>ip_dynaddr</code> option is useful for dial on demand systems or when the ISP gives out dynamic addresses. This works around the problem where a connection is attempted before the Internet interface is fully setup. This provides a smoother network experience for users behind the router. 

== Fun things (for a rainy day) ==

=== 도입부 ===

Believe it or not, it is done! From here on out, some other common topics that may interest will be covered. Everything in the following sections are completely optional.

=== Port forwarding ===

Sometimes users need to be able to host services on a computer behind the router, or need to be able to connect remotely to a computer behind the router. Perhaps a FTP, HTTP, SSH, or VNC server is needed on one or more machines behind the router and outsiders need to connect to them all. The only caveat to Port Forwarding is only one service/machine combo can be established per port. For example, there is no practical way to setup three FTP servers behind the router and connect to them all through port 21; only one system can be on port 21 while the others would need to be on other ports (port 123 and port 567 would be fine options). 

All the port forwarding rules are of the form <code>iptables -t nat -A PREROUTING [-p protocol] --dport [external port on router] -i ${WAN} -j DNAT --to [ip/port to forward to]</code>. Unfortunately, iptables does not accept hostnames when port forwarding. When forwarding an external port to the same port on the internal machine, omit the destination port. See the iptables(8) man page for more information. 

{{RootCmd|export LAN{{=}}eth0
|export WAN{{=}}eth1}}

내부 호스트의 ssh로 포트 2개 포워딩

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 2 -i ${WAN} -j DNAT --to 192.168.0.2:22}}

내부 호스트용 FTP 포워딩:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 21 -i ${WAN} -j DNAT --to 192.168.0.56}}

내부 호스트용 HTTP 포워딩:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 80 -i ${WAN} -j DNAT --to 192.168.0.56}}

내부 호스트용 VNC 포워딩:

{{RootCmd|iptables -t nat -I PREROUTING -p tcp --dport 5900 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p tcp --dport 5901 -i ${WAN} -j DNAT --to 192.168.0.3:5900}}

To VNC in to 192.168.0.3, then add <code>:1</code> to the router's hostname.

내부 포스트용 SAMBA 포워딩(윈도우를 감당하기에는 포트 수를 초과함):

{{RootCmd|iptables -t nat -I PREROUTING -p tcp --dport 135 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p tcp --dport 139 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p tcp --dport 445 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p udp --dport 137:138 -i ${WAN} -j DNAT --to 192.168.0.2
|iptables -t nat -I PREROUTING -p udp --dport 445 -i ${WAN} -j DNAT --to 192.168.0.2}}

비트토렌트 포워딩:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 6881:6889 -i ${WAN} -j DNAT --to 192.168.0.2}}

eDonkey/eMule 포워딩:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 4662 -i ${WAN} -j DNAT --to 192.168.0.55}}

게임 큐브 워프 파이프 지원:

{{RootCmd|iptables -t nat -A PREROUTING -p udp --dport 4000 -i ${WAN} -j DNAT --to 192.168.0.56}}

플레이스테이션 2 온라인 지원:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 10070:10080 -i ${WAN} -j DNAT --to 192.168.0.11
|iptables -t nat -A PREROUTING -p udp --dport 10070:10080 -i ${WAN} -j DNAT --to 192.168.0.11}}

Xbox 라이브:

{{RootCmd|iptables -t nat -A PREROUTING -p tcp --dport 3074 -i ${WAN} -j DNAT --to 192.168.0.69
|iptables -t nat -A PREROUTING -p udp --dport 3074 -i ${WAN} -j DNAT --to 192.168.0.69
|iptables -t nat -A PREROUTING -p udp --dport 88 -i ${WAN} -j DNAT --to 192.168.0.69
}}

=== Identd(IRC용) ===

Internet Relay Chat utilizes the ident service pretty heavily. Now that the IRC clients are behind the router, a way to host ident for both the router and the clients is needed. A server has been created for this purpose. It is called {{Package|net-misc/midentd}}. 

{{Emerge|net-misc/midentd}}

{{RootCmd
|rc-update add midentd default
|/etc/init.d/midentd start
}}

There are a few other ident servers in the Portage tree. Other viable options are {{Package|net-misc/oidentd}} and {{Package|net-misc/fakeidentd}}.

=== Time server ===

Keeping the system time correct is essential to maintaining a healthy system. One of the most common ways of accomplishing this is with the Network Time Protocol (NTP) and the {{Package|net-misc/ntp}} package (which provides implementations for both server and client). 

Many users run ntp clients on their computers. Obviously, the more clients in the world, the larger the load ntp servers need to shoulder. In environments like home networks an NTP server can be setup locally to help keep the load down on public servers while still providing the proper time to local systems. As an added bonus, private updates will be a lot faster for the local clients! The setup is simple: run a NTP server on the router that synchronizes itself with the public Internet servers while, at the same time, providing the time to the rest of the computers in the network. To get started, simply <tt>emerge ntp</tt> on the router and edit {{Path|/etc/conf.d/ntp-client}} as desired.

{{RootCmd|rc-update add ntp-client default}}

{{FileBox|filename=/etc/ntp.conf|1=
restrict default ignore
restrict 192.168.0.0 mask 255.255.255.0 notrust nomodify notrap
}}

These will allow only NTP clients with an IP address in the 192.168.0.xxx range to use the NTP server.

{{RootCmd|rc-update add ntpd default
|/etc/init.d/ntp-client start
|/etc/init.d/ntpd start}}

{{Note|Make sure to allow inbound and outbound communication on the NTP port (123/udp) when setting up the server. The client just needs outbound access on port 123 over UDP.}}

Now, on the clients, run <tt>emerge ntp</tt>. By running the NTP client setup is a lot simpler. 

In {{Path|/etc/conf.d/ntp-client}}, change the <code>pool.ntp.org</code> server in the <code>NTPCLIENT_OPTS</code> variable to <code>192.168.0.1</code>

{{RootCmd|rc-update add ntp-client default
|/etc/init.d/ntp-client start}}

=== Rsync server ===

For those who run multiple Gentoo boxes on the same LAN, it is wise to prevent every machine running <tt>emerge --sync</tt> with remote servers. By setting up a ''local'' rsync, both personal bandwidth and the Gentoo rsync servers' bandwidth is saved. The process is relatively simple.

{{Note/ko|rsync 안내서의 더 자세한 내용을 원하신다면 공식 [[Project:Infrastructure/Rsync|rsync 안내서]]를 살펴보세요.}}

Since every Gentoo machine requires rsync, there is no need to emerge it. Edit the default {{Path|/etc/rsyncd.conf}} config file, uncomment the <code>[gentoo-portage]</code> section, and make sure to add an <code>address</code> option. All other defaults should be already set correctly.

{{FileBox|filename=/etc/rsyncd.conf|1=
pid file = /var/run/rsyncd.pid
use chroot = yes
read only = yes
address = 192.168.0.1
  
[gentoo-portage]
  path = /mnt/space/portage
  comment = Gentoo Linux Portage tree
  exclude = /distfiles /packages
}}

The service then needs to be started (again, the defaults are OK). 

{{RootCmd|/etc/init.d/rsyncd start
|rc-update add rsyncd default}}

Only thing left is to set tell the clients to sync against the router. 

{{FileBox|filename=/etc/portage/make.conf|title=SYNC 변수에 새 rsync 서버 설정|lang=bash|1=
SYNC="rsync://192.168.0.1/gentoo-portage"
}}

=== Mail server ===

Sometimes it is nice to run a Simple Mail Transfer Protocol (SMTP) server on the router. Each user may have their own reason for wanting to do so, however one advantage to running SMTP on the router is the users see mail as being sent instantly and the work of retrying/routing is left up to the mail server. Some ISPs do not allow for mail relaying for accounts that are not part of their network (like Verizon). Also, throttling the delivery of mail may be needed so that large attachments will not seriously lag the Internet connection. 

{{Emerge|mail-mta/netqmail}}

Make sure the output of the <tt>hostname</tt> command is correct:

{{RootCmd|emerge --config netqmail}}

{{RootCmd|iptables -I INPUT -p tcp --dport smtp ! -i ${LAN} -j REJECT
|ln -s /var/qmail/supervise/qmail-send /service/qmail-send
|ln -s /var/qmail/supervise/qmail-smtpd /service/qmail-smtpd
|cd /etc/tcprules.d}}

{{Path|tcp.qmail-smtp}}를 편집하고 allow 섹션에 다음처럼 항목을 추가하세요:

{{FileBox|filename=niltcp.qmail-smtp|1=
192.168.0.:allow,RELAYCLIENT=""
}}

{{RootCmd|make
|rc-update add svscan default
|/etc/init.d/svscan start}}

When e-mail is setup on the hosts in the network, tell them the SMTP server is 192.168.0.1. Visit the [http://netqmail.org/ netqmail homepage] for more documentation on netqmail usage.

=== 완전한 DHCP 서버 ===

Earlier dnsmasq was used to provide DHCP service to all DHCP clients. For most people with a simple small LAN, this is perfect, however there may needs something with more features. Thus a full-featured DHCP server is provided by the [http://www.isc.org/products/DHCP ISC] folks for users who crave the maximum.

{{Emerge|net-misc/dhcp}}

{{FileBox|filename=/etc/dhcp/dhcpd.conf|title=간단한 설정 파일|1=
authoritative;
ddns-update-style interim;
subnet 192.168.0.0 netmask 255.255.255.0 {
    range 192.168.0.100 192.168.0.250;
    default-lease-time 259200;
    max-lease-time 518400;
    option subnet-mask 255.255.255.0;
    option broadcast-address 192.168.0.255;
    option routers 192.168.0.1;
    option domain-name-servers 192.168.0.1;
}
}}

{{Path|/etc/conf.d/dhcpd}}에 <code>IFACE</code>값을 "eth0"으로 설정하십시오.

{{RootCmd|rc-update add dhcpd default
|/etc/init.d/dhcpd start}}

This is the minimal setup required to replace the dnsmasq DHCP functionality used earlier. The DHCP features in dnsmasq should be disabled? If not, comment out the <code>dhcp-range</code> setting in {{Path|/etc/dnsmasq.conf}} and restart the service.

=== Connect another LAN (or two or three)===

Sometimes the router must be connected to another LAN. This can be done to hook up a group of friends temporarily or to section off different groups of computers. Whatever the reason, extending the router to other LAN networks should is straightforward. In the following examples, This article presumes that the ''new'' network is connected via a third ethernet card, namely <code>eth2</code>. 

First configure the interface. Take the instructions in [[Hug_the_LAN_.28bring_along_some_friends.29|this section]] and replace <code>eth0</code> with <code>eth2</code> and <code>192.168.0</code> with <code>192.168.1</code>.

Tweak dnsmasq to service the new interface. Edit the {{Path|/etc/conf.d/dnsmasq}} file again and append <code>-i eth2</code> to <code>DNSMASQ_OPTS</code>; using -i multiple times is OK. Then edit {{Path|/etc/dnsmasq.conf}} and add another line like the dhcp-range line in [[#LAN_Services_.28because_we.27re_nice_people.29|this section]], replacing <code>192.168.0</code> with <code>192.168.1</code>. Having multiple dhcp-range lines is OK too. 

Finally, see the rules in [[#LAN_Services_.28because_we.27re_nice_people.29|this section]] and duplicate the rules that have <code>-i ${LAN}</code> in them. Another variable may need to be created, say <code>LAN2</code>, to make things easier.

== 문제 해결 ==

=== 유용한 도구 ===

When having trouble getting computers to communicate try out the following tools (they can all be found in the net-analyzer Portage category): 

{| class="wikitable" style="text-align: left;" 
|- 
! 유틸리티
! 설명
|- 
| wireshark
| 걸러내기 규칙에 따라 원시 네트워크 데이터를 모두 살펴보는 GUI 도구
|- 
| tcpdump
| 걸러내기 규칙에 따라 원시 네트워크 데이터를 떠보는 콘솔 도구
|- 
| iptraf
| ncurses 기반 IP LAN 감시 프로그램
|- 
| ettercap
| ncurses 기반 네트워크 감시/제어
|-
|}

=== DHCP 시동 실패 ===

When starting the dhcp init.d script for the first time, it may fail to load but neglect to provide any useful information. 

{{RootCmd|/etc/init.d/dhcp start|output=<pre>
 * Setting ownership on dhcp.leases ...          [ ok ]
 * Starting dhcpd ...                            [ !! ]
</pre>
}}

The trick is used to know where dhcpd is sending its output. Browse to {{Path|/var/log}} and read the log files. Since the exact log file depends on the package using a syslog, try running <tt>grep -Rl dhcpd /var/log</tt> to narrow down the possibilities. Chances are a typo was made in the configuration file. Another command to try running: <tt>dhcpd -d -f</tt> (short for debug / foreground). This aids in debugging the errors based upon the output. 

=== 잘못된 MTU 값 ===

드문 오류(다른 페이지는 잘 불러오는데 어떤 페이지에는 접근할 수 없는 경우)를 경험하는 경우, 경로 MTU 발견 문제에 직면했을 수도 있습니다. 신속하게 확인하려면 다음 iptables 명령을 실행하십시오: 

{{RootCmd|iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu}}

이 명령은 새 연결에 영향을 줍니다. 테스트 하려는 문제 있는 웹 사이트를 새로 고치면 됩니다. 이게 도움이 된다면, 100Mbit 이더넷 연결에서의 표준 MTU 값은 <code>1500</code>입니다. 이 값은 PPPoA에도 적용됩니다. PPPoE 연결에는 <code>1492</code>입니다. 더 많은 내용을 알아보려면 [http://lartc.org/howto/ 리눅스 고급 라우팅 및 트래픽 컨트롤 설명서]의 15장을 읽어보십시오. 

If the above command does not work, consider putting the rule into the mangle table. Simply add <tt>-t mangle</tt> to the command. 

=== 두 머신을 직접 연결할 수 없음 ===

If (for whatever reason) connecting two machines directly together without a hub or switch is required, a regular ethernet cable will likely not work, unless an Auto MDI/MDI-X (also known as "autosensing") capable network adapter is available. A different cable called a crossover cable will be needed for direct NIC to NIC connections. This [[Wikipedia:Ethernet_crossover_cable|Wikipedia]] page explains the low level details.

== 마지막 참고 ==

There are no other final notes. If any troubles with this guide are experienced either update this article with the correct information or leave a brief message on this article's talk page with a summary of what is broken. Eventually someone should be able to correct any issue(s). It is also possible to file a bug on [https://bugs.gentoo.org/ Gentoo's Bugtracking Website]. If there are any other interesting bits that would enhance this guide, by all means include them! The worst that could happen is they could be removed.

[[Category:Server and Security]] {{Migrated|originalauthors={{Mail|vapier}}}}
