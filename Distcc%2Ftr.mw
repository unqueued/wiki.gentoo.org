<languages />

{{Metadata|abstract=Distcc derleme görevlerini ağdaki istemcilere yayarak gerçekleştiren bir yazılımdır. Sunucu servisi <code>distccd</code>, istemci servisi <code>distcc</code>'dir. Ufak bir yapılandırma ile [http://ccache.samba.org ccache], Portage ve Automake ile uyumlu şekilde çalışabilir.}}

{{InfoBox stack
|{{InfoBox homepage|https://code.google.com/p/distcc/|header=true}}
|{{InfoBox wikipedia}}
}}

[http://distcc.samba.org Distcc], derleme görevlerini ağdaki istemcilere yayarak gerçekleştiren bir yazılımdır. Sunucu servisi <code>distccd</code>, istemci servisi <code>distcc</code>'dir. Ufak bir yapılandırma ile [http://ccache.samba.org ccache], [[Portage]] ve Automake ile uyumlu şekilde çalışabilir. 

Eğer <tt>distcc</tt>'yi yeni bir Gentoo kurulumunda (bootstrap) kullanmak istiyorsanız makalenin ilgili bölümünü okuduğunuza emin olun. 

== Kurulum ==

<tt>distcc</tt>'yi yapılandırmadan önce, tüm makinelere {{Package|sys-devel/distcc}} paketini kuralım.

=== Tüm makinelerdeki gereksinimler ===

<tt>distcc</tt>'yi kullanabilmek için ağınızdaki tüm bilgisayarların birbirine yakın GCC sürümlerini kullanması gerekmektedir. Örneğin, 3.3.x (x değişebilir) sürümlerini birlikte kullanmanız problem oluşturmaz ancak 3.3.x ile 3.2.x sürümleri karıştığında derleme veya derlenmiş programların çalışması sırasında problem oluşabilir. 

=== Distcc kurulumu ===

Distcc giden görevlerin gösterilmesi için bir arayüze sahip. Bu özelliği kullanmak istiyorsanız <code>USE</code> bayraklarınıza <code>gtk</code> eklediğinize emin olun.

<code>USE</code> yapılandırmasının ardından {{Package|sys-devel/distcc}} kurulabilir:

{{Emerge|distcc}}

{{Important/tr|Dahil edeceğiniz tüm bilgisayarlarda {{Package|sys-devel/distcc}}'yi kurmanız gerekmektedir.}}

=== distcc servisinin otomatik başlatılması ===

<tt>distccd</tt> servisinin otomatik olarak başlaması için yapmanız gerekenler, kullandığınız init sistemine bağlı olarak, aşağıdaki gibidir.

==== OpenRC kullanıyorsanız ====

{{Path|/etc/conf.d/distccd}} dosyasını ihtiyacınıza göre düzenleyin ve <code>--allow</code> izinlerini yalnızca güvendiğiniz istemcilere verin. Ek güvenlik önlemi olarak hangi istemcilerin dinleneceğini <code>--listen</code> ile belirleyebilirsiniz. Güvenlik kaygıları için lütfen [http://distcc.samba.org/security.html Distcc güvenlik belgesini] inceleyin.

Aşağıdaki örnek <tt>192.168.0.4</tt> ve <tt>192.168.0.5</tt> adreslerinde çalışan istemcilerin çalıştırdığımız <tt>distccd</tt> servisine erişebilmesine izin verir:

{{FileBox|filename=/etc/conf.d/distccd|title=distccd'ye bağlanabilmesi için istemcilerin seçimi|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important/tr|<tt>--allow</tt> ve <tt>--listen</tt>'ın kullanımı önemlidir. Lütfen <tt>distccd</tt> yardım sayfalarını incelediğinize emin olun.}}

Şimdi dahil olan tüm bilgisayarlarda <tt>distccd</tt> servisini başlatalım: 

{{RootCmd|rc-update add distccd default
|rc-service distccd start}}

==== systemd kullanıyorsanız ====

{{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} dosyasını düzenleyin ve izin veirlen istemcileri CIDR formatina göre ekleyin. Örnek olarak:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=ALLOWED_SERVERS yapılandırması|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

Değişikliğin ardından unit dosyalarını yeniden yüklemelisiniz:

{{RootCmd|systemctl daemon-reload}}

Açılışta <tt>distcc</tt> servisinin çalışmasını açıp, ardından servisi başlatın:

{{RootCmd|systemctl enable distccd
|systemctl start distccd}}

== Yapılandırma ==

Şimdi de <tt>distcc</tt>'nin yapılandırmasına bakalım.

=== Dahil olacak istemcileri belirleme ===

Katılacak istemcileri ayarlamak için <tt>distcc-config</tt> komutunu kullanabilirsiniz. 

Aşağıdaki örnek istemci listesini inceleyin. Çoğu durumda 1. ve 2. satırların türevleri yeterli olmaktadır. 3. ve 4. satırlardaki kullanımın detayını [http://distcc.googlecode.com/svn/trunk/doc/web/man/distcc_1.html distcc yardım sayfaları]nda bulabilirsiniz.

{{CodeBox|title=İstemci tanımlarına örnekler|1=
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
}}

Daha farklı yöntemler kullanabilirsiniz. <tt>distcc</tt> yardım sayfalarına (<kbd>man distcc</kbd>) bakmanızı öneririz.

Bulunduğunuz bilgisayarı da derlemeye dahil etmek istiyorsanız listeye <code>localhost</code> da eklemeniz gerek. Yavaş bir bilgisayar ise, işlemin genelini yavaşlatacağı için bulundurmamayı seçebilirsiniz.

<tt>distcc</tt>'yi örneğin ilk satırında belirtilen bilgisayarları kullanacak şekilde yapılandıralım:

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

=== Portage'ı distcc ile kullanmak ===

[[Portage]] ile <tt>distcc</tt> kullanımı kolaydır. Yapmanız gereken <tt>distcc</tt> özelliğini açıp, aynı anda yapılacak işlem sayısını artırmaktan ibaret (çünkü <tt>distcc</tt> bize bu imkanı sağlıyor).

Ardından <code>MAKEOPTS</code> ve <code>FEATURES</code> değişkenlerini aşağıdaki gibi düzenlemeniz gerek.

Genel strateji şöyledir
* <code>N</code> değerini ''toplam'' (sunucu+istemciler) CPU sayısının ''iki katına'', ve
* <code>M</code> değerini ''sunucu''daki işlemcilerin sayısına ayarlayın

<code>MAKEOPTS</code> için yapılandırmanıza uygun bir değer kullanmalısınız. Distcc hostları erişilemez durumda veya paket yerel olarak derlenmeliyse (gcc gibi) <code>-lM</code> bayrağı eklemeniz çok fazla işlem üretilmesini engeller.

{{FileBox|filename=/etc/portage/make.conf|title=MAKEOPTS ve FEATURES yapılandırması|lang=bash|1=
# N ve M değerlerini önceden belirtilen hesaba göre düzenleyin
MAKEOPTS="-jN -lM"
FEATURES="distcc distcc-pump"
}}

Örneğin <tt>distccd</tt> çalışan iki tane 4 çekirdekli işlemciye sahip bilgisayara sahipseniz ve sunucu çift çekirdekli ise, gerekli <code>MAKEOPTS</code> değişkeni şöyle olabilir:

{{FileBox|filename=/etc/portage/make.conf|title=Çift çekirdekli sunucu ve 2 tane 4 çekirdekli istemci için MAKEOPTS örneği|lang=bash|1=
# 4 çekirdekli 2 istemci = 8 çekirdek uzak
# 2 çekirdekli 1 sunucu = 2 çekirdek yerel
# Toplam sayı 10, yani N = 2*10+1 and M=2
MAKEOPTS="-j21 -l2"
}}

{{Path|make.conf}} dosyasını düzenlerken, <code>CFLAGS</code> veya <code>CXXFLAGS</code> içerisinde <tt>-march=native</tt> bulunmadığına dikkat edin. Eğer <code>march</code> değerinde <code>native</code> bulunuyorsa <tt>distccd</tt> kodu diğer sunuculara göndermeyecektir. Hedef için uygun <tt>-march=</tt> değeri şu komut ile bulunabilir:

{{Cmd|gcc -v -E -x c -march{{=}}native -mtune{{=}}native - < /dev/null 2>&1 {{!}} grep cc1 {{!}} perl -pe 's/ -mno-\S+//g; s/^.* - //g;'}}

Daha fazla bilgi için [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <tt>-march=native</tt> for distcc] sayfasına bakabilirsiniz.

=== Distcc'yi automake ile kullanmak ===

Bu işlem genelde Portage yapılandırmasından daha kolaydır. Yapmanız gereken şey <code>PATH</code> ortam değişkenine <code>gcc</code>'yi barındıran dizinden ( {{Path|/usr/bin}} ) önce {{Path|/usr/lib/distcc/bin}} eklemek. Ancak ccache kullanıyorsanız ccache bölümünün ardına yerleştirmeniz gerek: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Bu komutu kullanıcı bazlı {{Path|~/.bashrc}} veya global {{Path|/etc/env.d/}} gibi otomatik yüklenen bir dosyaya ekleyip her sisteme girdiğinizde çalışmasını sağlayabilirsiniz.

Instead of calling <tt>make</tt> alone, add in <code>-jN</code> (where <code>N</code> is an integer). The value of <code>N</code> depends on the network and the types of computers that are used to compile. A heuristic approach to the right value is given earlier in this article.

== Using distcc to bootstrap ==

Using <tt>distcc</tt> to bootstrap (i.e. build a working toolchain before installing the remainder of the system) requires some additional steps to take.

=== Step 1: configure Portage ===

Boot the new box with a Gentoo Linux LiveCD and follow the [[Handbook:AMD64|installation instructions]], while keeping track of the instructions in the [[FAQ|Gentoo FAQ]] for information about bootstrapping. Then configure Portage to use <tt>distcc</tt>: 

{{FileBox|filename=/etc/portage/make.conf|title=Configure Portage to use distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Update the <code>PATH</code> variable in the installation session as well:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Step 2: getting distcc ===

Install {{Package|sys-devel/distcc}}: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Step 3: setting up distcc ===

Run <tt>distcc-config --install</tt> to setup distcc; substitute the <code>host#</code> in the example with the IP addresses or hostnames of the participating nodes.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc is now set up to bootstrap! Continue with the proper installation instructions and do ''not'' forget to run <tt>emerge distcc</tt> after running <tt>emerge @system</tt>. This is to make sure that all of the necessary dependencies are installed. 

{{Note|During bootstrap and <tt>emerge @system</tt> <tt>distcc</tt> may not appear to be used. This is expected as some ebuilds do not work well with distcc, so they intentionally disable it.}}

== Distcc extras ==

The <tt>distcc</tt> application has additional features and applications to support working in a <tt>distcc</tt> environment.

=== Distcc monitors === 

Distcc ships with two monitoring utilities. The text-based monitoring utility is always built and is called <tt>distccmon-text</tt>. Running it for the first time can be a bit confusing, but it is really quite easy to use. If the program is run with no parameter it will run just once. However, if it is passed a number it will update every <code>N</code> seconds, where <code>N</code> is the argument that was passed.

{{Cmd|distccmon-text 10}}

The other monitoring utility is only enabled when the <code>gtk</code> <code>USE</code> flag is set.  This one is GTK+ based, runs in an X environment, and it is quite lovely.  For Gentoo, the GUI monitor has been renamed to <tt>distccmon-gui</tt> to make it less confusing (it is originally called <tt>distccmon-gnome</tt>).

{{Cmd|distccmon-gui}}

To monitor Portage's <tt>distcc</tt> usage:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|If the distcc directory is elsewhere, change the <code>DISTCC_DIR</code> variable accordingly.}}

A trick is to set <code>DISTCC_DIR</code> in environment variables:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

Now update the environment:

{{RootCmd|env-update
|source /etc/profile}}

Finally, start the GUI application:

{{RootCmd|distccmon-gui}}

=== Using SSH for distcc communication ===

Setting up distcc via SSH includes some pitfalls. First, generate an SSH key pair without password setup. Be aware that portage compiles programs as the Portage user (or as root if <code>FEATURES="userpriv"</code> is not set). The home folder of the Portage user is {{Path|/var/tmp/portage/}}, which means the keys need to be stored in {{Path|/var/tmp/portage/.ssh/}}

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Second, create a section for each host in the SSH configuration file:

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Add per-host sections|1=
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName
 
Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
}}

Send the public key to each compilation node:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub UserName@CompilationNode}}

Also make sure that each host is available in the {{Path|known_hosts}} file:

{{RootCmd|ssh-keyscan -t rsa <compilation-node-1> <compilation-node-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Fix the file permissions as follows:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

To set up the hosts <tt>test1</tt> and <tt>test2</tt>, run:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Please note the <tt>@</tt> (@ sign), which specifies ssh hosts for distcc.

Finally, tell <tt>distcc</tt> which SSH binary to use:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
DISTCC_SSH="ssh"
}}

It is not necessary to run the {{Path|distccd}} initscript on the hosts when <tt>distcc</tt> communicates via SSH.

== Troubleshooting ==

<!-- Consider moving this section to a separate subpage if it becomes too large -->

If a problem occurs while using <tt>distcc</tt>, then this section might help in resolving the problem.

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- To be removed when the bug is resolved and the fixed package is stable -->

As of January 22nd, 2015 emerging fails to create the proper {{Path|distccd.log}} file in {{Path|/var/log/}}. This apparently only effects version 3.1-r8 of distcc. This bug is in the process of being corrected (see {{Bug|477630}}). It is possible to work around this by manually creating the log file, giving it proper ownership, and restarting the distccd daemon:

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

Next update the {{Path|/var/log}} path of the <tt>distccd</tt> configuration file in {{Path|/etc/conf.d/distccd}} to the {{Path|distcc}} directory created in the step before:

{{FileBox|filename=/etc/conf.d/distccd|title=Updating log path|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

Finally, restart the distccd service:

{{RootCmd|/etc/init.d/distccd restart}}

=== Some packages do not use distcc ===

As various packages are installed, users will notice that some of them aren't being distributed (and aren't being built in parallel). This may happen because the package' {{Path|Makefile}} doesn't support parallel operations, or the maintainer of the ebuild has explicitly disabled parallel operations due to a known problem. 

Sometimes <tt>distcc</tt> might cause a package to fail to compile. If this happens, please [https://bugs.gentoo.org/ report] it.

=== Mixed GCC versions ===

If the environment hosts different GCC versions, there will likely be very weird problems. The solution is to make certain all hosts have the same GCC version. 

Recent Portage updates have made Portage use <code>${CHOST}-gcc</code> (minus gcc) instead of <code>gcc</code>. This means that if i686 machines are mixed with other types (i386, i586) then the builds will run into troubles. A workaround for this may be to run:

{{RootCmd|export CC{{=}}'gcc' CXX{{=}}'c++'}}

It is also possible to set the <code>CC</code> and <code>CXX</code> variables in {{Path|/etc/portage/make.conf}} to the values list in the command above.

{{Important|Doing this explicitly redefines some behavior of Portage and may have some weird results in the future. Only do this if mixing CHOSTs is unavoidable.}}

=== -march=native ===

Starting with GCC 4.3.0, the compiler supports the <tt>-march=native</tt> option which turns on CPU auto-detection and optimizations that are worth being enabled on the processor on which GCC is running. This creates a problem when using <tt>distcc</tt> because it allows the mixing of code optimized for different processors. For example, running <tt>distcc</tt> with <tt>-march=native</tt> on a system that has an AMD Athlon processor and doing the same on ''another'' system that has an Intel Pentium processor will mix code compiled on both processors together.

Heed the following warning:

{{Warning|Do '''not''' use <tt>-march{{=}}native</tt> or <tt>-mtune{{=}}native</tt> in the <code>CFLAGS</code> or <code>CXXFLAGS</code> variables of {{Path|make.conf}} when compiling with <tt>distcc</tt>.}}

To know the flags that GCC would enable when called with <tt>-march=native</tt>, execute the following:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

== See also ==

* The [[Distcc/Cross-Compiling|DistCC Cross-compiling guide]] explains how using one architecture to build programs for another architecture is done through <tt>distcc</tt>. This can be as simple as using an Athlon (i686) to build a program for a K6-2 (i586), or using a SPARC to build a program for a PowerPC.

== External resources ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <tt>-march=native</tt> for distcc]
* [https://code.google.com/p/distcc/ Distcc homepage]


{{Migrated|originalauthors=Lisa Seelye, Mike Frysinger, Erwin, Sven Vermeulen, Lars Weiler, Tiemo Kieft and nightmorph}}
