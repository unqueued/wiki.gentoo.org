<languages />

{{Metadata|abstract=Distcc derleme görevlerini ağdaki istemcilere yayarak gerçekleştiren bir yazılımdır. Sunucu servisi <code>distccd</code>, istemci servisi <code>distcc</code>'dir. Ufak bir yapılandırma ile [http://ccache.samba.org ccache], Portage ve Automake ile uyumlu şekilde çalışabilir.}}

[http://distcc.samba.org Distcc], derleme görevlerini ağdaki istemcilere yayarak gerçekleştiren bir yazılımdır. Sunucu servisi <code>distccd</code>, istemci servisi <code>distcc</code>'dir. Ufak bir yapılandırma ile [http://ccache.samba.org ccache], Portage ve Automake ile uyumlu şekilde çalışabilir. 

Eğer distcc'yi yeni bir Gentoo kurulumunda (bootstrap) kullanmak istiyorsanız makalenin ilgili bölümünü okuduğunuza emin olun. 

== Yapılandırma ==

=== Bağımlılıklar ===

Distcc kullanabilmek için ağınızdaki tüm bilgisayarların yakın GCC sürümlerini kullanması gerekmektedir. Örneğin, 3.3.x (x değişebilir) sürümlerini birlikte kullanmanız problem oluşturmaz ancak 3.3.x ile 3.2.x sürümleri derleme veya derlenmiş programların çalışması sırasında problem '''oluşturabilir'''. 

=== Distcc Kurulumu ===

Distcc kurulumu yapmadan önce dikkat etmeniz gereken bazı noktalar var. 

Distcc ships with a graphical monitor to monitor tasks that a computer is sending away for compilation, enabled with the <code>gtk</code> <code>USE</code> flag.

{{Emerge|distcc}}

{{Important/tr|Dahil edeceğiniz tüm bilgisayarlar distcc'yi kurmanız gerekmektedir.}}

=== Portage'ı Distcc Kullanmak için Ayarlama ===

Portage ile distcc kullanımı kolaydır. Aşağıdaki adımları uygulayarak paket kurulumlarında diğer bilgisayarlardan yardım alabilirsiniz: 

{{Emerge|distcc}}

Ardından <code>MAKEOPTS</code> ve <code>FEATURES</code> değişkenlerini düzenlemeniz gerek. <code>MAKEOPTS</code> için yapılandırmanıza uygun bir değer kullanmalısınız. Genelde bu değer işlem yapacak olan işlemci sayısı +1 olarak kullanılmaktadır. Distcc hostları erişilemez durumda veya paket yerel olarak derlenmeliyse (gcc gibi) <code>-lM</code> bayrağı eklemeniz çok fazla işlem üretilmesini engeller.

{{File|/etc/portage/make.conf|Setting MAKEOPTS and FEATURES|<pre>
MAKEOPTS="-jN -lM"
FEATURES="distcc"
</pre>
}}

For instance, if you're connected to two quad core host PCs running <code>distcc</code> and your local PC has a dual core, then the <code>MAKEOPTS</code> variable could look like this:

{{File|/etc/portage/make.conf|MAKEOPTS example for 2 quad-core (hosts) and one dual core (local) PCs|<pre>
# 2 remote hosts with 4 cores each = 8 cores remote
# 1 local host with 2 cores = 2 cores local
# total number of cores is 10, so N = 2*10+1 and M=2
MAKEOPTS="-j21 -l2"
</pre>
}}

While editing your {{Path|make.conf}}, make sure that you do not have <code>-march=native</code> in your <code>CFLAGS</code> or <code>CXXFLAGS</code>. <code>distcc</code> will not distribute work to other machines if <code>march</code> is set to <code>native</code>. You may find the appropriate value with <code>gcc -Q -march=native --help=target</code>. See also [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining -march=native for distcc] blog post.

=== Çalışacak İstemcileri Belirleme ===

Katılacak istemcileri ayarlamak için <code>distcc-config</code> komutunu kullanabilirsiniz. İşte örnek bir yapılandırma: 

{{Code|İstemci tanımlarına örnekler|<pre>
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
</pre>
}}

Daha farklı yöntemler kullanabilirsiniz. Distcc yardım (man) sayfalarına bakmanızı öneririz.

Bulunduğunuz bilgisayarı da derlemeye dahil etmek istiyorsanız listeye "localhost" da eklemeniz gerek. Yavaş bir bilgisayar ise, işlemin genelini yavaşlatacağı için bulundurmamayı seçebilirsiniz.

Karışık gibi görünebilir ancak çoğu durumda 1. veya 2. satırın düzenlenmiş hali işinizi görecektir. 

Çoğu kişi 3. veya 4. satırı kullanmayacağı için, detaylı bilgi için [http://distcc.samba.org/man/distcc_1.html distcc dökümanlarına] bakmanızı tavsiye ederiz, SSH üzerinden bağlantı sağlamayı da ilgili belgede bulabilirsiniz. 

Örneğin önceki listede verdiğimiz ilk satırı uygulamak için: 

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

{{Path|/etc/conf.d/distccd}} dosyasını ihtiyacınıza göre düzenleyin ve <code>--allow</code> izinlerini yalnızca güvendiğiniz istemcilere verin. Ek güvenlik önlemi olarak hangi istemcilerin dinleneceğini <code>--listen</code> ile belirleyebilirsiniz. Güvenlik kaygıları için lütfen [http://distcc.samba.org/security.html Distcc güvenlik belgesini] inceleyin. 

{{Important/tr|--allow ve --listen'ın kullanım şekli önemlidir. Lütfen yardım sayfalarını incelediğinize emin olun.}}

Şimdi işlem yapacak tüm bilgisayarlarda distcc servisini başlatalım: 

{{RootCmd|rc-update add distccd default
|/etc/init.d/distccd start}}

=== Distcc'yi Automake ile Çalışması için Ayarlama ===

Bu işlem bazen Portage yapılandırmasından daha kolay. Yapmanız gereken şey <code>PATH</code> ortam değişkenine <code>gcc</code>'yi barındıran dizinden ( {{Path|/usr/bin}} ) önce {{Path|/usr/lib/distcc/bin}} eklemek. Ancak ccache kullanıyorsanız ccache bölümünün ardına yerleştirmeniz gerek: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Bu komutu {{Path|~/.bashrc}} veya benzeri şekilde otomatik yüklenen bir dosyaya ekleyip her sisteme girdiğinizde çalışmasını sağlayabilirsiniz.

Ardından normalde <code>make</code> komutu ile iş yaparken, <code>make -jN</code> tarzında (buradaki N bir sayıdır) kullanabilirsiniz. N değeri ağınızın hızına ve işlemci sayınıza göre değişecektir. Size en uyumlu değeri bulmak için deneme yapmanızı tavsiye ederiz. 

=== Setting up Distcc to Work With ssh ===

Setting up distcc via ssh includes some pitfalls. First, generate a ssh key pair without password setup. Be aware that portage compiles programs as user portage. The home folder of the user portage is {{Path|/var/tmp/portage}}, which means the keys need to be stored in {{Path|/var/tmp/portage/.ssh}}

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Second, create a section for each host in the ssh config file:

{{File|/var/tmp/portage/.ssh/config|Add per-host sections|<pre>
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName
 
Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
</pre>
}}

Also make sure that each host is available in the {{Path|known_hosts}} file and append your public key to the {{Path|authorized_keys}} file of the hosts. To set up the hosts test1 and test2 run

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Please note the '@'-sign, which specifies ssh hosts for <code>distcc</code>.

== Cross-Compiling ==

Cross-compiling is using one architecture to build programs for another architecture. This can be as simple as using an Athlon (i686) to build a program for a K6-2 (i586), or using a Sparc to build a program for a ppc. This is documented in our [[Distcc/Cross-Compiling|DistCC Cross-compiling Guide]].

== Using Distcc to Bootstrap ==

=== Step 1: Configure Portage ===

Boot your new box with a Gentoo Linux LiveCD and follow the [http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1 installation instructions] up until the bootstrapping part. (See the [[FAQ|Gentoo FAQ]] for more information about bootstrapping.) Then configure Portage to use distcc: 

{{File|/etc/portage/make.conf|Configure Portage to use distcc|<pre>
FEATURES="distcc"
MAKEOPTS="-jN"
</pre>
}}

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Step 2: Getting Distcc ===

Install distcc: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Step 3: Setting Up Distcc ===

Run <code>distcc-config --install</code> to setup distcc; substitute <code>host*</code> with the IP addresses or hostnames of the participating DistCC nodes.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc is now set up to bootstrap! Continue with the official installation instructions and ''do not forget'' to re-emerge distcc after <code>emerge system</code>. This is to make sure that all of the dependencies you want are installed as well. 

{{Note|During bootstrap and <code>emerge system</code> distcc may not appear to be used. This is expected as some ebuilds do not work well with distcc, so they intentionally disable it.}}

== Troubleshooting ==

=== Some Packages Don't Use Distcc ===

As you emerge various packages, you'll notice that some of them aren't being distributed (and aren't being built in parallel). This may happen because the package's Makefile doesn't support parallel operations or the maintainer of the ebuild has explicitly disabled parallel operations due to a known problem. 

Sometimes distcc might cause a package to fail to compile. If this happens for you, please [https://bugs.gentoo.org/ report] it to us.

=== Mixed GCC Versions ===

If you have different GCC versions on your hosts, there will likely be very weird problems. The solution is to make certain all hosts have the same GCC version. 

Recent Portage updates have made Portage use <code>${CHOST}-gcc</code> instead of <code>gcc</code> . This means that if you're mixing i686 machines with other types (i386, i586) you will run into problems. A workaround for this may be to <code>export CC='gcc' CXX='c++'</code> or to put it in {{Path|/etc/portage/make.conf}} 

{{Important|Doing this explicitly redefines some behavior of Portage and may have some weird results in the future. Only do this if you're mixing CHOSTs.}}

=== -march=native ===

Starting with GCC 4.3.0, the compiler supports the <code>-march=native</code> switch which turns on CPU autodetection and optimizations that are worth being enabled on the processor the GCC is running at. This is a problem with <code>distcc</code> as it allows mixing of code optimized for different processors (like AMD Athlon and Intel Pentium). ''Don't'' use <code>-march=native</code> or <code>-mtune=native</code> in your <code>CFLAGS</code> or <code>CXXFLAGS</code> when compiling with <code>distcc</code>.

To know the flags that GCC would enable when called with <code>-march=native</code>, execute the following:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

== Distcc Extras ==

=== Distcc Monitors === 

Distcc ships with two monitors. The text-based one is always built and is called <code>distccmon-text</code>. Running it for the first time can be a bit confusing, but it is really quite easy to use. If you run the program with no parameter it will run once. However, if you pass it a number it will update every N seconds, where N is the argument you passed. 

The other monitor is only enabled through the <code>gtk</code> <code>USE</code> flag.  This one is GTK+ based, runs in an X environment and it is quite lovely.  For Gentoo, the GUI monitor has been called <code>distccmon-gui</code> for less confusion.  Elsewhere it may be referred to as <code>distccmon-gnome</code>.

{{RootCmd|distccmon-text N}}

or run <code>distccmon-gui</code>:

{{RootCmd|distccmon-gui}}

To monitor Portage's distcc usage you can use:
{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text N
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|If your distcc directory is elsewhere, change the DISTCC_DIR variable accordingly.}}

== Links ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining -march=native for distcc].

== Bilgiler ==

Bu makalede emeği geçen kişilere teşekkürler:

* Lisa Seelye
* Mike Frysinger
* Erwin
* Sven Vermeulen
* Lars Weiler
* Tiemo Kieft
* nightmorph
