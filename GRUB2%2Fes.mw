<languages />
{{InfoBox stack
|{{InfoBox homepage|https://code.google.com/p/distcc/|header=true}}
|{{InfoBox wikipedia}}
}}

'''GRUB2''' es un gestor de arranque con soporte para los modernos sistemas informáticos de hoy en día. Está destinado a sustituir al antiguo gestor de arranque [[GRUB]] (ahora denominado «GRUB Legacy»). GRUB2 tiene una base de código totalmente independiente con respecto a GRUB Legacy y cuenta con características tales como una nueva sintaxis de shell que permite capacidades avanzadas en el lenguaje de programación de scripts. Se anima a los actuales usuarios de Legacy GRUB a migrar sus sistemas a GRUB2.

Para una primera aproximación, vea [[GRUB2 Quick Start]].

== Instalación ==

El paquete {{Package|sys-boot/grub}} viene integrado con ambas versiones. Tanto grub-0.97 ([[GRUB|GRUB Legacy]]) como grub-2.00 pueden ser instalados conjuntamente en el sistema, sin embargo, solo una de las versiones de GRUB puede ser instalada en un [http://es.wikipedia.org/wiki/Registro_de_arranque_principal MBR] a la vez. En este artículo, nos centraremosmos en [[GRUB2]].

De forma predeterminada, GRUB2 intentará determinar la plataforma de destino al tiempo de la compilación. Este valor puede alterarse definiendo la variable <code>GRUB_PLATFORMS</code> en {{Path|make.conf}}.

{{FileBox|filename=/etc/portage/make.conf|title=Ejemplo de configuración de variable GRUB_PLATFORMS para soporte EMU, EFI y PC|lang=bash|1=
GRUB_PLATFORMS="emu efi-32 efi-64 pc"
}}

Las siguientes plataformas son compatibles dependiendo de la CPU de destino:

{| class="table"
!
! colspan="7" | Target
|-
! Platform
! i386
! ia64
! mips
! mipsel
! powerpc
! spac64
! x86_64
|-
! arc
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! coreboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! efi
| {{Yes}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
|-
! emu
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! ieee1275
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{Yes}}
| style="background: PaleTurquoise;  text-align: center" | 32-bit
|-
! loongson
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! multiboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu-mips
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
|-
! pc
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
|}

Para instalar GRUB2 utilice la sintaxis normal de emerge:

{{Emerge|sys-boot/grub:2|params+=--newuse}}

Opcionalmente, puede instalar la utilidad <tt>os-prober</tt> (proporcionada por el paquete {{Package|sys-boot/os-prober}}) para que GRUB2 explore la presencia de otros sistemas operativos al ejecutar la orden <tt>grub2-mkconfig</tt>. En la mayoría de los casos, esto permitirá a GRUB2 detectar automáticamente otros sistemas operativos (Windows 7, Windows 8.1, etc.).

{{Emerge|sys-boot/os-prober|params+=--newuse}}

Las instalaciones de GRUB2 (y opcionalmente {{Package|sys-boot/os-prober}}) no activan automáticamente el gestor de arranque. Esta acción solo instala el software en el sistema operativo, pero para instalar el gestor de arranque para el propio sistema (para usarlo para arrancar el sistema), deben realizarse algunos pasos adicionales, que se tratan en la sección [[#Configuración|Configuración]].

== Configuración ==

Hay dos aspectos importantes ha tener en cuenta en la configuración de GRUB2:
# La instalación del software GRUB2 como gestor de arranque del sistema.
# La configuración del propio gestor de arranque GRUB2.

La instalación del software GRUB2 es específico según el tipo de sistema, y se trata en [[#Instalar el gestor de arranque|instalar el gestor de arranque]]. Primero trataremos la configuración del propio gestor de arranque.

=== Fichero principal de configuración ===

GRUB2 no requiere, a priori, intervención manual para configurar las opciones de arranque (como es el caso de gestores de arranque tales como [[GRUB|GRUB Legacy]] y [[LILO]]). En su lugar, puede generar su fichero de configuración ({{Path|/boot/grub/grub.cfg}}) utilizando la orden <tt>grub2-mkconfig</tt>. Esta utilidad usa los scripts que residen en el directorio {{Path|/etc/grub.d/}} y los ajustes realizados en el fichero {{Path|/etc/default/grub}}.

{{Warning|The <tt>grub2-mkconfig</tt> utility does not work properly when using software RAID. Manual configuration of the scripts in {{Path|/etc/grub.d/}} is necessary, as otherwise after installation the system will be left in a non-bootable state.
}}

Después de realizar uno o varios ajustes en la configuración, debe ejecutar la utilidad <kbd>grub2-mkconfig</kbd> con la opción <kbd>-o</kbd> para que apunte al fichero de salida situado en {{Path|/boot/grub/grub.cfg}} (esta es la ubicación de salida por defecto de GRUB2):

{{RootCmd|grub2-mkconfig -o /boot/grub/grub.cfg|output=<pre>
Generating grub.cfg ...
Found linux image: /boot/vmlinuz-3.3.0-gentoo
done
</pre>}}

Cada vez que la utilidad <tt>grub2-mkconfig</tt> es invocada, se  genera una nueva configuración del fichero. 

{{Warning/es|Si <tt>grub2-mkconfig</tt> no informa haber encontrado alguna entrada, entonces no habrá entradas en el menú. En este caso, GRUB2 ofrecerá selecciones sin arranque cuando reinicie el sistema, que puede abocar a una situación difícil de resolver. Por tanto, asegúrese de que la salida es satisfactoria antes de reiniciar el sistema.}}

=== Definir los parámetros de la configuración ===

GRUB2 utiliza {{Path|/boot/grub/grub.cfg}} como su fichero de configuración. Sin embargo, se aconseja generar automáticamente este fichero basado en las entradas de configuración definidas en {{Path|/etc/default/grub}}. El fichero utiliza emparejamientos de clave/valor que son utilizados por los scripts localizados en {{Path|/etc/grub.d}} para generar un fichero de configuración funcional.

Las siguientes variables son algunas de las más comunes de definir para controlar cómo funcionará GRUB2:

{| class="table"
! Variable
! Explicación
! Valor por defecto
|-
| <code>GRUB_DEFAULT</code>
| Define la entrada del menú seleccionada por defecto en el arranque. Puede ser un índice numérico, un título de menú, o «rescatar». 
| Predeterminado para detectar la primera entrada.
|-
| <code>GRUB_TIMEOUT</code> 
| Indica la demora (en segundos) antes de arrancar la entrada predeterminada del menú. Establezca <code>0</code> para esperar indefinidamente. 
| El valor por defecto es 5 segundos.
|-
| <code>GRUB_CMDLINE_LINUX</code>
| Parámetros que se pasan a la línea de órdenes del núcleo para todas las entradas del menú de Linux. Por ejemplo, para dar soporte a la hibernación, los usuarios tendrán que añadir <code>GRUB_CMDLINE_LINUX="resume=/dev/sdXY"</code> donde {{Path|/dev/sdXY}} será la partición swap.
| 
|-
| <code>GRUB_CMDLINE_LINUX_DEFAULT</code>
| Parámetros que se pasan a la línea de órdenes del núcleo para las entradas del menú de Linux no recuperables.
| 
|-
| <code>GRUB_DEVICE</code> 
| Es el dispositivo root de inicio (es decir, el parámetro <code>root=</code> del núcleo). Ajuste esta opción para anular la detección automática del dispositivo root realizada por la orden <tt>grub2-mkconfig</tt>. Por ejemplo, <code>GRUB_DEVICE=/dev/ram0</code> obligará a que <code>root=/dev/ram0</code> sea utilizado en la línea de órdenes del núcleo.
| 
|}

Para obtener una lista más completa, consulte la subpágina de las [[GRUB2/Config_Variables|variables de configuración de GRUB2]].

Después de modificar los parámetros, genere el fichero de configuración de GRUB2 con <kbd>grub2-mkconfig</kbd>.

=== Activar o desactivar los scripts de configuración ===

El directorio {{Path|/etc/grub.d/}} contiene los scripts que <tt>grub2-mkconfig</tt>  utiliza para generar un fichero {{Path|grub.cfg}}. Por defecto, el contenido de este directorio debe ser similar al siguiente:

{{Cmd|ls /etc/grub.d/|output=<pre>
00_header  10_linux  20_linux_xen  30_os-prober  40_custom  41_custom README
</pre>}}

GRUB2 utilizará todos los scripts instalados que estén marcados como ejecutables (que, por defecto, lo están todos). Para desactivar cualquiera de los scripts, simplemente quite el bit de ejecución de los permisos del fichero del script, utilizando la orden <kbd>chmod</kbd>. En el siguiente ejemplo, cada script, salvo {{Path|00_header}} y {{Path|10_linux}}, serán desactivados:

{{RootCmd|chmod -x /etc/grub.d/<nowiki>{</nowiki>20_linux_xen,30_os-prober,40_custom,41_custom<nowiki>}</nowiki>}}

Después de modificar los scripts (o quitar el bit de ejecución), genere el fichero de configuración GRUB2 utilizando <kbd>grub2-mkconfig</kbd>.

=== Manipular los scripts de configuración ===

Algunas de las características o funcionalidades de grub2 solo es posible desarrollarlas mediante la modificación de los scripts de configuración. Por ejemplo, para permitir el arranque dual con FreeBSD, es necesario realizar las siguientes modificaciones.

Cambiar el script {{Path|/etc/grub.d/40_custom}} como sigue:  

{{FileBox|filename=/etc/grub.d/40_custom|title=Añadiendo arranque dual|<pre>
menuentry "FreeBSD" --class freebsd --class bsd --class os {
 insmod ufs2
 insmod bsd
 set root=(hd0,1)
 kfreebsd /boot/kernel/kernel
 kfreebsd_loadenv /boot/device.hints
 set kFreeBSD.vfs.root.mountfrom=ufs:/dev/ada0s1a
 set kFreeBSD.vfs.root.mountfrom.options=rw
 set kFreeBSD.hw.psm.synaptics_support=1
}
</pre>}}

{{Path|/dev/sda1}} o <code>(hd0,1)</code> es la partición en la que reside FreeBSD. Si se utilizó la instalación normal de UFS para la partición de FreeBSD, entonces {{Path|/dev/sda1}} será un contenedor (algo así como una partición lógica). Este comprende la partición de intercambio y la raíz. Verifique con <kbd>ls -la /etc/grub.d/40_custom</kbd> que el script {{Path|40_custom}} es ejecutable. Si el bit de ejecución no está establecido, entonces, configúrelo con la orden <kbd>chmod u+x 40_custom</kbd>.  

A continuación, instale GRUB2 con la orden <kbd>grub2-install</kbd> y actualice el fichero de configuración de GRUB2:

{{RootCmd|grub2-install /dev/sda
|grub2-mkconfig -o /boot/grub/grub.cfg}}  
  

== Instalar el gestor de arranque ==

La instalación de GRUB2 como gestor de arranque del sistema dependerá de cómo se pretende arrancar el sistema (a través de BIOS o UEFI) y de cómo está particionado el disco en el que se va a instalar el gestor (con un esquema de particionado MBR o GPT).

Este artículo trata las siguientes situaciones:

* [[#BIOS con MBR|BIOS con MBR]]
* [[#BIOS con GPT|BIOS con GPT]]
* [[#UEFI con GPT|UEFI con GPT]]

Seleccione las instrucciones de instalación adecuadas para su sistema.

=== BIOS with MBR ===

{{Note|When the system is meant to dual-boot with Microsoft Windows, make sure that the system itself does ''not'' have an EFI firmware. Even when such systems are booted in 'legacy BIOS' mode, Microsoft Windows will refuse to boot.}}

Make sure that the {{Path|/boot}} location is available - if this uses a separate partition, make sure that it is mounted:

{{RootCmd|mount /boot}}

Run the <kbd>grub2-install</kbd> command to copy the relevant files to {{Path|/boot/grub}}. On the PC platform, this also installs a boot image to the Master Boot Record (MBR) or a partition's boot sector. If all goes well, after running the <kbd>grub2-install</kbd> command an output such as the one below is to be expected:

{{RootCmd|grub2-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

<tt>grub2-install</tt> accepts a <tt>--target</tt> option to set the CPU architecture and system platform. If unspecified, <tt>grub2-install</tt> will attempt to guess the proper values; on an AMD64/x86 system it will use <tt>i386-pc</tt> by default. <tt>grub2-install</tt> also accepts a <tt>--boot-directory</tt> option to tell the GRUB2 installer which directory to look for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

==== Partitioning for BIOS with MBR ====

Be sure to leave enough free space before the first partition. Starting the first partition at sector 2048 leaves at least 1 MiB of disk space for the master boot record. It is recommended (but not mandatory) to create an additional partition for GRUB called the ''BIOS boot partition''. This partition just needs to be defined, but not formatted.

If the [[Handbook:Main_Page|Gentoo installation instructions]] were followed, this BIOS boot partition will already be avaialble.

=== BIOS with GPT ===

{{Note|When the system is meant to dual-boot with Microsoft Windows, make sure that the system itself does ''not'' have an EFI firmware. Even when such systems are booted in 'legacy BIOS' mode, Microsoft Windows will refuse to boot. Also, older Microsoft Windows systems might not support GPT. It is possible to use a hybrid MBR-GPT approach, see [[Hybrid partition table]].}}

If a {{Path|/boot}} partition is needed, start by mounting the {{Path|/boot}} partition:

{{RootCmd|mount /boot}}

If all goes well, after running the <kbd>grub2-install</kbd> command an output such as the one below is to be expected:

{{RootCmd|grub2-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

<tt>grub2-install</tt> accepts a <tt>--target</tt> option to set the CPU architecture and system platform. If unspecified, <tt>grub2-install</tt> will attempt to guess the correct at the correct values; on an AMD64/x86 system it will use <tt>i386-pc</tt> by default. <tt>grub2-install</tt> also accepts a <tt>--boot-directory</tt> option to tell the GRUB2 installer which directly to look for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

==== Partitioning for BIOS with GPT ====

When a GPT partition table is present on the system, a small ''BIOS boot partition'' (with type <code>EF02</code>, which is different from the ''EFI System Partition (ESP)'' which has type <code>EF00</code>) will need to be available. 1 MiB will be enough to work but 2-4 MiB is a more safe option. This BIOS boot partition will hold the stage 2 of the bootloader. BIOS boot partitions do not need formatted with a filesystem; the <tt>grub2-install</tt> command will overwrite any pre-existing filesystem with one of it's own.

To set a partition as a BIOS partition use the command line tool <kbd>parted</kbd> ({{Package|sys-block/parted}}) by typing (change <code>1</code> to the number of the partition to mark as a BIOS Boot partition!):

{{RootCmd|set 1 bios_grub on|prompt=(parted) |color=white}}

With {{Package|sys-apps/gptfdisk}}'s <tt>cgdisk</tt> utility, this is accomplished by setting the partition type to <code>0xEF02</code> and give it a label of <code>gptbios</code>.

An EFI System Partition is not required, but it would be sensible to make sure that the BIOS boot partition is large enough to be converted to one, should the system motherboard later be upgraded to an EFI board.

The following is the output of pressing the {{Key|p}} key using the <kbd>gdisk</kbd> utility on a GPT partitioned disk with both a BIOS boot [0xEF02] partition and an EFI [0xEF00] partition:

{{RootCmd|gdisk /dev/sdc|output=<pre>
GPT fdisk (gdisk) version 0.8.1
 
Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present
 
Found valid GPT with protective MBR; using GPT.
 
Command (? for help): p
Disk /dev/sdc: 976773168 sectors, 465.8 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): AA369F4D-37A4-4C0D-A357-DC24B99A6337
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 976773134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)
 
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       828377087   395.0 GiB   8E00  Linux LVM
   2       828377088       891291647   30.0 GiB    0700  Microsoft basic data
   3       891291648       975177727   40.0 GiB    0700  Microsoft basic data
   4       975177728       976754687   770.0 MiB   8300  Linux filesystem
   5       976754688       976756735   1024.0 KiB  EF02  BIOS boot partition
   6       976756736       976773134   8.0 MiB     EF00  EFI System
 
Command (? for help): 
</pre>}}

{{Note|The <code>0x</code> hexadecimal prefix does not need to be entered for GPT when using <tt>fdisk</tt>.}}

Using the same setup, the <kbd>parted</kbd> utility gives an output with slightly different syntax:

{{RootCmd|parted /dev/sdc|output=<pre>
GNU Parted 3.0
Using /dev/sdc
(parted) print
...
Sector size (logical/physical): 512B/512B
Partition Table: gpt
  
Number  Start   End    Size    File system  Name                  Flags
 1      1049kB  424GB  424GB                Linux LVM             lvm
 2      424GB   456GB  32.2GB               Microsoft basic data
 3      456GB   499GB  42.9GB               Microsoft basic data
 4      499GB   500GB  807MB   ext2         Linux filesystem
 5      500GB   500GB  1049kB               BIOS boot partition   bios_grub
 6      500GB   500GB  8396kB               EFI System            boot
  
(parted)
</pre>}}

Creating partitions in <tt>gdisk</tt> is straight forward for users already familiar with the <tt>fdisk</tt> partitioning utility. After starting <kbd>gdisk</kbd>, type {{Key|n}} (for new) in the main menu, provide beginning and end sectors (if needed), then set the partition type <code>EF00</code> for an EFI system partition.

Users who have followed the [[Handbook:Main_Page|Gentoo installation instructions]] will already have the proper partitioning layout set up.

=== UEFI with GPT ===

Make sure that the {{Path|/boot}} location is available - if this uses a separate partition, make sure that it is mounted:

{{RootCmd|mount /boot}}

Run the <kbd>grub2-install</kbd> command to copy the relevant files to {{Path|/boot/grub}}. This should install Grub2 in {{Path|/boot/grub}}, copy the core image to {{Path|/boot/efi/EFI/gentoo/grubx64.efi}}, and call [[Efibootmgr|efibootmgr]] to add a boot entry.

{{RootCmd|grub2-install --target{{=}}x86_64 /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

<tt>grub2-install</tt> accepts a <tt>--target</tt> option to set the CPU architecture and system platform. If unspecified, <tt>grub2-install</tt> will attempt to guess the proper values; on an AMD64/x86 system it will use <tt>i386-pc</tt> by default. <tt>grub2-install</tt> also accepts a <tt>--boot-directory</tt> option to tell the GRUB2 installer which directory to look for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

==== Partitioning for UEFI with GPT ====

For UEFI GPT boot using GRUB2, the system ''must'' have a dedicated EFI partition containing a FAT filesystem.

The EFI partition can ''replace'' having a {{Path|/boot}} partition on {{Path|/dev/sda1}} by having a {{Path|/boot/efi}} partition on {{Path|/dev/sda1}}. This is to say a successful EFI boot scenario using GRUB2 ''can'' operate with two partitions total (three total if a swap partition is needed): a root partition and an EFI partition. Using this configuration, the {{Path|/boot}} ''folder'' will be located in the root {{Path|/}} ''partition'' (at {{Path|/boot}}) and the EFI ''partition'' will mount ''in'' the boot ''folder'' (at {{Path|/boot/efi}}). For further clarification, see the example {{Path|/etc/fstab}} file below.

{{FileBox|filename=/etc/fstab|title=Example of an UEFI capable {{Path|/etc/fstab}} file with a swap partition:|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
/dev/sda2		none		swap		sw		0 0
/dev/sda3		/		ext4		noatime		0 1
</pre>}}

Generating a 100MB partition for {{Path|/boot/efi}} should provide plenty of space for holding multiple {{Path|*.efi}} files (multiple entries will most likely not be needed; most systems will only use one).

Create the partition using the partitioning [[Partition#GUID_Partition_Table|tool of choice]]. The <tt>gdisk</tt> ({{Package|sys-apps/gptfdisk}}) and <tt>parted</tt> ({{Package|sys-block/parted}}) tools fit nicely for this purpose. When using the <tt>gdisk</tt> utility, be sure to use type <code>EF00</code>.

Proceed to create a FAT filesystem on the EFI system partition using <kbd>mkdosfs</kbd> and add it to {{Path|/etc/fstab}} by following the example below:

{{RootCmd|mkdosfs -F 32 -n efi-boot /dev/sda1
|mkdir /boot/efi}}

{{FileBox|filename=/etc/fstab|title=Adding the /boot/efi mount entry|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
</pre>}}

{{RootCmd|mount /boot/efi}}

{{Note|It is helpful to set the <code>GRUB_PLATFORMS</code> variable in {{Path|/etc/portage/make.conf}}. This will assist GRUB2 in determining what options to use when detecting the proper EFI target. For 32-bit EFI systems use <code>efi-32</code>. For 64-bit use <code>efi-64</code>.}}

{{Important|In order for GRUB2 to install properly, the EFI directory ''must'' be mounted ''and'' the <tt>efivars</tt> kernel module must be loaded before the <tt>grub2-install</tt> command will complete successfully.}}

==== Alternative: using the default UEFI firmware location ====

If the system's UEFI firmware fails to find GRUB2's EFI bootloader file, using the default boot loader location should provide a working solution. This circumvents the boot menu managed by [[Efibootmgr|efibootmgr]] and thus offers reduced functionality, but is less error prone. Do do this, verify the EFI partition is mounted at {{Path|/boot/efi}} then copy the file {{Path|grubx64.efi}} located at {{Path|/boot/efi/EFI/gentoo/grubx64.efi}} to {{Path|/boot/efi/EFI/BOOT/BOOTX64.EFI}}. This example assumes a 64-bit EFI system, adjust accordingly for 32-bit EFI systems.

== Extended features ==

GRUB2 has many features that make it a very powerful boot loader. It supports:
* booting from UEFI platforms.
* booting from GPT partitioned drives without needing a hybrid MBR (hybrid MBR can enabled as needed for compatibility or portability).
* booting from a [[btrfs]] formatted {{Path|/boot}} partition.
* booting directly from a [[btrfs]] raid set without needing an [[initramfs]] for early mount setup.
* booting directly from logical volume management (such as [[LVM|LVM2]]).
* booting with support for DM-RAID (RAID 0, 1, 4, 5, 6, 9 and 10).
* booting from encrypted devices (LUKS).

Some specific features are explained in more detail next.

=== Chainloading ===

GRUB2 was built with a truly improved chainload mode when compared to GRUB Legacy. To chainload another boot loader, use the <code>chainloader</code> option.

{{FileBox|filename=/boot/grub/grub.cfg|title=Chainloading another bootloader|<pre>
menuentry "Custom Super Bootloader Example" {
     insmod part_msdos
     insmod chain
     chainloader (hd1,1)+1
}
</pre>}}

For more information on chainloading, please see the [[GRUB2/Chainloading|Chainloading]] sub-page.

=== Using framebuffer display ===

To have GRUB2 use a [[framebuffer]] graphical display, re-emerge GRUB with the <code>truetype</code> USE flag enabled. This will install a default True Type font as well as a font conversion utility.

{{Emerge|--newuse sys-boot/grub:2}}

Proceed to configure the default GRUB2 configuration file located at {{Path|/etc/default/grub}}. For example:

{{FileBox|filename=/etc/default/grub|title=Framebuffer related settings|lang=bash|1=
# Set resolution and color depth
GRUB_GFXMODE=1366x768x32
 
# Keep resolution when loading the kernel
GRUB_GFXPAYLOAD_LINUX=keep
 
# Set a background image
GRUB_BACKGROUND="/boot/grub/bg.png"
 
# Use a custom font, converted using grub2-mkfont utility
GRUB_FONT="/boot/grub/fonts/roboto.pf2"
}}

In order to find out what display modes the system's graphics card supports, use the following commands on the GRUB2 shell:

{{Cmd|prompt=(grub)|color=white|insmod all_video|videoinfo}}

== Troubleshooting ==

Most of the issues can be resolved by ensuring that the partition layout is correct. Make sure enough space is available before the first partition of the disk, or optionally make sure that a ''BIOS boot partition'' is available. Also verify that {{Path|/boot/grub/grub.cfg}} was correctly generated with <kbd>grub2-mkconfig</kbd>, or generate one with a custom menu entry.

For more GRUB2 troubleshooting, please refer to the [[GRUB2/Troubleshooting|Troubleshooting]] sub-page.

== See also ==

There are a few specific GRUB2 resources available:

* In [[GRUB2/Chainloading|Chainloading]] the use of GRUB2 to boot other boot loaders is described. This is important to read when dual-booting systems, or when GRUB2 needs to be configured to boot ISO files.
* In [[GRUB2/AdvancedStorage|Advanced storage]] the necessary steps are documented on how to install and use GRUB2 on more advanced storage situations, such as software RAID, logical volumes or encrypted file systems.
* In [[GRUB2/Config_Variables|Configuration variables]] an exhaustive list of GRUB2 configuration variables, as used by {{Path|/etc/default/grub}}, is documented.
* In [[GRUB2/Troubleshooting|Troubleshooting]] a list of common GRUB2 errors (with their solutions) is presented.
* In [[Hybrid_partition_table|Hybrid partition table]] the use of a mixed MBR/GPT setup is documented, as well as how to use such hybrid partition layout with GRUB2.

== External resources ==

For more information, please see:

* [https://www.gnu.org/software/grub/manual/grub.html GNU GRUB 2 manual page]
** [https://www.gnu.org/software/grub/manual/grub.html#Network Network (PXE) section of GRUB2]
* [http://www.rodsbooks.com/gdisk/bios.html Legacy BIOS issues with GPT article]
* [http://www.rodsbooks.com/gdisk/hybrid.html GPT and Hybrid MBR article]
* [http://www.rodsbooks.com/gdisk/ GPT fdisk utility page]
* [https://wiki.archlinux.org/index.php/GRUB2 Arch Linux GRUB2 wiki article]
* [https://fedoraproject.org/wiki/GRUB_2?rd=Grub2#Encountering_the_dreaded_GRUB_2_boot_prompt Fedora GRUB2 wiki article : Encountering the dreaded GRUB2 boot prompt]
* [https://help.ubuntu.com/community/UEFIBooting ubuntu UEFI booting help]
* [http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr]


[[Category:Bootloaders]]
