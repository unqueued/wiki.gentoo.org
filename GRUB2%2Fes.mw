<languages />
{{InfoBox stack
|{{InfoBox homepage|https://code.google.com/p/distcc/|header=true}}
|{{InfoBox wikipedia}}
}}

'''GRUB2''' es un gestor de arranque con soporte para los modernos sistemas informáticos de hoy en día. Está destinado a sustituir al antiguo gestor de arranque [[GRUB]] (ahora denominado «GRUB Legacy»). GRUB2 tiene una base de código totalmente independiente con respecto a GRUB Legacy y cuenta con características tales como una nueva sintaxis de shell que permite capacidades avanzadas en el lenguaje de programación de scripts. Se anima a los actuales usuarios de Legacy GRUB a migrar sus sistemas a GRUB2.

For a shotgun approach, see [[GRUB2 Quick Start]].

== Installation ==

The {{Package|sys-boot/grub}} package is slotted. Both grub-0.97 ([[GRUB|GRUB Legacy]]) and grub-2.00 may be installed at the same time, however only one version of GRUB may be installed in a MBR at a time. In this article, we focus on [[GRUB2]].

By default, GRUB2 will guess a default platform target at build time. This may be overridden by setting the <code>GRUB_PLATFORMS</code> variable in {{Path|make.conf}}.

{{FileBox|filename=/etc/portage/make.conf|title=Example of setting GRUB_PLATFORMS variable for EMU, EFI, and PC support|lang=bash|1=
GRUB_PLATFORMS="emu efi-32 efi-64 pc"
}}

The following platforms are supported depending on the target CPU:

{| class="table"
!
! colspan="7" | Target
|-
! Platform
! i386
! ia64
! mips
! mipsel
! powerpc
! spac64
! x86_64
|-
! arc
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! coreboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! efi
| {{Yes}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
|-
! emu
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! ieee1275
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{Yes}}
| style="background: PaleTurquoise;  text-align: center" | 32-bit
|-
! loongson
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! multiboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu-mips
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
|-
! pc
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
|}

To install GRUB2 use the normal emerge syntax:

{{Emerge|sys-boot/grub:2|params+=--newuse}}

Optionally, install the <tt>os-prober</tt> utility (provided through the {{Package|sys-boot/os-prober}} package) to have GRUB2 probe for other operating systems when running the <tt>grub2-mkconfig</tt> command. In most instances, this will enable GRUB2 to automatically detect other operating systems (Windows 7, Windows 8.1, etc.).

{{Emerge|sys-boot/os-prober|params+=--newuse}}

The GRUB2 (and optionally {{Package|sys-boot/os-prober}}) installations do not automatically enable the boot loader. These only install the software on the operating system, but to install the boot loader to the system itself (so that it is used when booting the system), additional steps need to be taken, which are covered in the [[#Configuration|Configuration]] section.

== Configuration ==

Hay dos aspectos importantes ha tener en cuenta en la configuración de GRUB2:
# La instalación del software GRUB2 como gestor de arranque del sistema.
# La configuración del propio gestor de arranque GRUB2.

The installation of GRUB2 software is specific to the type of system, and is covered in [[#Installing the boot loader|Installing the boot loader]]. First we cover the configuration of the boot loader itself.

=== Main configuration file ===

GRUB2 does not require the administrator to manually maintain a boot option configuration (as is the case with boot loaders such as [[GRUB|GRUB Legacy]] and [[LILO]]). Instead it can generate its configuration file ({{Path|/boot/grub/grub.cfg}}) using the <tt>grub2-mkconfig</tt> command. This utility will use the scripts in {{Path|/etc/grub.d/}} and the settings in {{Path|/etc/default/grub}}.

{{Warning|The <tt>grub2-mkconfig</tt> utility does not work properly when using software RAID. Manual configuration of the scripts in {{Path|/etc/grub.d/}} is necessary, as otherwise after installation the system will be left in a non-bootable state.
}}

After modifying one or more settings, run the <kbd>grub2-mkconfig</kbd> utility with the <kbd>-o</kbd> option pointing to the output file located at {{Path|/boot/grub/grub.cfg}} (this is GRUB2's default output location):

{{RootCmd|grub2-mkconfig -o /boot/grub/grub.cfg|output=<pre>
Generating grub.cfg ...
Found linux image: /boot/vmlinuz-3.3.0-gentoo
done
</pre>}}

Each time the <tt>grub2-mkconfig</tt> utility is called a new configuration will be generated. 

{{Warning|If <tt>grub2-mkconfig</tt> does not report any found entries then no entries were found. In this case GRUB2 will offer no boot selections when upon system restart which may be a tricky, time consuming situation to resolve. Make sure the output is satisfactory before restarting the system.}}

=== Setting configuration parameters ===

GRUB2 uses {{Path|/boot/grub/grub.cfg}} as its configuration file. However, it is advised to automatically generate this file based on the configuration entries in {{Path|/etc/default/grub}}. The file uses key/value pairs which are used by the scripts in {{Path|/etc/grub.d}} to generate a working configuration file.

The following variables are the most common ones to set to control how GRUB2 will function:

{| class="table"
! Variable
! Explanation
! Default value
|-
| <code>GRUB_DEFAULT</code>
| Defines the default menu entry selected on boot. May be a numeric index, a menu title, or "saved". 
| Defaults to first detected entry.
|-
| <code>GRUB_TIMEOUT</code> 
| Delay (in seconds) before booting default menu entry. Set to <code>0</code> to wait indefinitely. 
| The default is 5 seconds.
|-
| <code>GRUB_CMDLINE_LINUX</code>
| Parameters to be passed on the kernel command line for all Linux menu entries. For instance, to support hybernation, users will need to add <code>GRUB_CMDLINE_LINUX="resume=/dev/sdXY"</code> with {{Path|/dev/sdXY}} being the swap partition.
| 
|-
| <code>GRUB_CMDLINE_LINUX_DEFAULT</code>
| Parameters to be passed on the kernel command line for non-recovery Linux menu entries.
| 
|-
| <code>GRUB_DEVICE</code> 
| The initial root device (i.e. the kernel's <code>root=</code> parameter). Set this to override the <tt>grub2-mkconfig</tt> command's root device auto-detection. For example, <code>GRUB_DEVICE=/dev/ram0</code> will force <code>root=/dev/ram0</code> to be used in the kernel command line.
| 
|}

For a more complete list, please refer to the [[GRUB2/Config_Variables|GRUB2 configuration variables]] sub-page.

After modifying the parameters, regenerate the GRUB2 configuration file with <kbd>grub2-mkconfig</kbd>.

=== Enabling or disabling configuration scripts ===

The directory {{Path|/etc/grub.d/}} contains the scripts that <tt>grub2-mkconfig</tt> uses to generate a {{Path|grub.cfg}} file. By default the contents of this directory should be similar to the following:

{{Cmd|ls /etc/grub.d/|output=<pre>
00_header  10_linux  20_linux_xen  30_os-prober  40_custom  41_custom README
</pre>}}

GRUB2 will use all installed scripts that are marked as executable (which by default, they all are). To disable any of the scripts simply remove the executable bit from the script's file permissions using the <kbd>chmod</kbd> command. In the following example every script but {{Path|00_header}} and {{Path|10_linux}} are disabled:

{{RootCmd|chmod -x /etc/grub.d/<nowiki>{</nowiki>20_linux_xen,30_os-prober,40_custom,41_custom<nowiki>}</nowiki>}}

After modifying the scripts (or removing the executable bit), regenerate the GRUB2 configuration file using <kbd>grub2-mkconfig</kbd>.

=== Manipulating configuration scripts ===

Some features or GRUB2 functionalities are only possible to be exploited by modifying the configuration scripts. For instance, to support dual-booting with FreeBSD, the following manipulation needs to be done.

Change the {{Path|/etc/grub.d/40_custom}} script to:  

{{FileBox|filename=/etc/grub.d/40_custom|title=Adding DualBoot|<pre>
menuentry "FreeBSD" --class freebsd --class bsd --class os {
 insmod ufs2
 insmod bsd
 set root=(hd0,1)
 kfreebsd /boot/kernel/kernel
 kfreebsd_loadenv /boot/device.hints
 set kFreeBSD.vfs.root.mountfrom=ufs:/dev/ada0s1a
 set kFreeBSD.vfs.root.mountfrom.options=rw
 set kFreeBSD.hw.psm.synaptics_support=1
}
</pre>}}

{{Path|/dev/sda1}} or <code>(hd0,1)</code> is the partition in which FreeBSD resides. If the normal UFS install was used for the FreeBSD partition then {{Path|/dev/sda1}} is a container (something like a logical partition). It consists of the swap and root partition. Verify the {{Path|40_custom}} script is executable by running <kbd>ls -la /etc/grub.d/40_custom</kbd>. If the executable bit is not set then set it using the <kbd>chmod u+x 40_custom</kbd> command.  

Next install GRUB2 using the <kbd>grub2-install</kbd> command and update GRUB2's configuration file:

{{RootCmd|grub2-install /dev/sda
|grub2-mkconfig -o /boot/grub/grub.cfg}}  
  

== Installing the boot loader ==

Installing GRUB2 as the system's boot loader depends on how the system is meant to boot (through BIOS or UEFI) and how the disk on which the boot loader should be installed is partitioned (using MBR or GPT partition layout).

This article covers the following situations:

* [[#BIOS with MBR|BIOS with MBR]]
* [[#BIOS with GPT|BIOS with GPT]]
* [[#UEFI with GPT|UEFI with GPT]]

Select the installation instructions appropriate for the system.

=== BIOS with MBR ===

{{Note|When the system is meant to dual-boot with Microsoft Windows, make sure that the system itself does ''not'' have an EFI firmware. Even when such systems are booted in 'legacy BIOS' mode, Microsoft Windows will refuse to boot.}}

Make sure that the {{Path|/boot}} location is available - if this uses a separate partition, make sure that it is mounted:

{{RootCmd|mount /boot}}

Run the <kbd>grub2-install</kbd> command to copy the relevant files to {{Path|/boot/grub}}. On the PC platform, this also installs a boot image to the Master Boot Record (MBR) or a partition's boot sector. If all goes well, after running the <kbd>grub2-install</kbd> command an output such as the one below is to be expected:

{{RootCmd|grub2-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

<tt>grub2-install</tt> accepts a <tt>--target</tt> option to set the CPU architecture and system platform. If unspecified, <tt>grub2-install</tt> will attempt to guess the proper values; on an AMD64/x86 system it will use <tt>i386-pc</tt> by default. <tt>grub2-install</tt> also accepts a <tt>--boot-directory</tt> option to tell the GRUB2 installer which directory to look for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

==== Partitioning for BIOS with MBR ====

Be sure to leave enough free space before the first partition. Starting the first partition at sector 2048 leaves at least 1 MiB of disk space for the master boot record. It is recommended (but not mandatory) to create an additional partition for GRUB called the ''BIOS boot partition''. This partition just needs to be defined, but not formatted.

If the [[Handbook:Main_Page|Gentoo installation instructions]] were followed, this BIOS boot partition will already be avaialble.

=== BIOS with GPT ===

{{Note|When the system is meant to dual-boot with Microsoft Windows, make sure that the system itself does ''not'' have an EFI firmware. Even when such systems are booted in 'legacy BIOS' mode, Microsoft Windows will refuse to boot. Also, older Microsoft Windows systems might not support GPT. It is possible to use a hybrid MBR-GPT approach, see [[Hybrid partition table]].}}

If a {{Path|/boot}} partition is needed, start by mounting the {{Path|/boot}} partition:

{{RootCmd|mount /boot}}

If all goes well, after running the <kbd>grub2-install</kbd> command an output such as the one below is to be expected:

{{RootCmd|grub2-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

<tt>grub2-install</tt> accepts a <tt>--target</tt> option to set the CPU architecture and system platform. If unspecified, <tt>grub2-install</tt> will attempt to guess the correct at the correct values; on an AMD64/x86 system it will use <tt>i386-pc</tt> by default. <tt>grub2-install</tt> also accepts a <tt>--boot-directory</tt> option to tell the GRUB2 installer which directly to look for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

==== Partitioning for BIOS with GPT ====

When a GPT partition table is present on the system, a small ''BIOS boot partition'' (with type <code>EF02</code>, which is different from the ''EFI System Partition (ESP)'' which has type <code>EF00</code>) will need to be available. 1 MiB will be enough to work but 2-4 MiB is a more safe option. This BIOS boot partition will hold the stage 2 of the bootloader. BIOS boot partitions do not need formatted with a filesystem; the <tt>grub2-install</tt> command will overwrite any pre-existing filesystem with one of it's own.

To set a partition as a BIOS partition use the command line tool <kbd>parted</kbd> ({{Package|sys-block/parted}}) by typing (change <code>1</code> to the number of the partition to mark as a BIOS Boot partition!):

{{RootCmd|set 1 bios_grub on|prompt=(parted) |color=white}}

With {{Package|sys-apps/gptfdisk}}'s <tt>cgdisk</tt> utility, this is accomplished by setting the partition type to <code>0xEF02</code> and give it a label of <code>gptbios</code>.

An EFI System Partition is not required, but it would be sensible to make sure that the BIOS boot partition is large enough to be converted to one, should the system motherboard later be upgraded to an EFI board.

The following is the output of pressing the {{Key|p}} key using the <kbd>gdisk</kbd> utility on a GPT partitioned disk with both a BIOS boot [0xEF02] partition and an EFI [0xEF00] partition:

{{RootCmd|gdisk /dev/sdc|output=<pre>
GPT fdisk (gdisk) version 0.8.1
 
Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present
 
Found valid GPT with protective MBR; using GPT.
 
Command (? for help): p
Disk /dev/sdc: 976773168 sectors, 465.8 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): AA369F4D-37A4-4C0D-A357-DC24B99A6337
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 976773134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)
 
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       828377087   395.0 GiB   8E00  Linux LVM
   2       828377088       891291647   30.0 GiB    0700  Microsoft basic data
   3       891291648       975177727   40.0 GiB    0700  Microsoft basic data
   4       975177728       976754687   770.0 MiB   8300  Linux filesystem
   5       976754688       976756735   1024.0 KiB  EF02  BIOS boot partition
   6       976756736       976773134   8.0 MiB     EF00  EFI System
 
Command (? for help): 
</pre>}}

{{Note|The <code>0x</code> hexadecimal prefix does not need to be entered for GPT when using <tt>fdisk</tt>.}}

Using the same setup, the <kbd>parted</kbd> utility gives an output with slightly different syntax:

{{RootCmd|parted /dev/sdc|output=<pre>
GNU Parted 3.0
Using /dev/sdc
(parted) print
...
Sector size (logical/physical): 512B/512B
Partition Table: gpt
  
Number  Start   End    Size    File system  Name                  Flags
 1      1049kB  424GB  424GB                Linux LVM             lvm
 2      424GB   456GB  32.2GB               Microsoft basic data
 3      456GB   499GB  42.9GB               Microsoft basic data
 4      499GB   500GB  807MB   ext2         Linux filesystem
 5      500GB   500GB  1049kB               BIOS boot partition   bios_grub
 6      500GB   500GB  8396kB               EFI System            boot
  
(parted)
</pre>}}

Creating partitions in <tt>gdisk</tt> is straight forward for users already familiar with the <tt>fdisk</tt> partitioning utility. After starting <kbd>gdisk</kbd>, type {{Key|n}} (for new) in the main menu, provide beginning and end sectors (if needed), then set the partition type <code>EF00</code> for an EFI system partition.

Users who have followed the [[Handbook:Main_Page|Gentoo installation instructions]] will already have the proper partitioning layout set up.

=== UEFI with GPT ===

Make sure that the {{Path|/boot}} location is available - if this uses a separate partition, make sure that it is mounted:

{{RootCmd|mount /boot}}

Run the <kbd>grub2-install</kbd> command to copy the relevant files to {{Path|/boot/grub}}. This should install Grub2 in {{Path|/boot/grub}}, copy the core image to {{Path|/boot/efi/EFI/gentoo/grubx64.efi}}, and call [[Efibootmgr|efibootmgr]] to add a boot entry.

{{RootCmd|grub2-install --target{{=}}x86_64 /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

<tt>grub2-install</tt> accepts a <tt>--target</tt> option to set the CPU architecture and system platform. If unspecified, <tt>grub2-install</tt> will attempt to guess the proper values; on an AMD64/x86 system it will use <tt>i386-pc</tt> by default. <tt>grub2-install</tt> also accepts a <tt>--boot-directory</tt> option to tell the GRUB2 installer which directory to look for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

==== Partitioning for UEFI with GPT ====

For UEFI GPT boot using GRUB2, the system ''must'' have a dedicated EFI partition containing a FAT filesystem.

The EFI partition can ''replace'' having a {{Path|/boot}} partition on {{Path|/dev/sda1}} by having a {{Path|/boot/efi}} partition on {{Path|/dev/sda1}}. This is to say a successful EFI boot scenario using GRUB2 ''can'' operate with two partitions total (three total if a swap partition is needed): a root partition and an EFI partition. Using this configuration, the {{Path|/boot}} ''folder'' will be located in the root {{Path|/}} ''partition'' (at {{Path|/boot}}) and the EFI ''partition'' will mount ''in'' the boot ''folder'' (at {{Path|/boot/efi}}). For further clarification, see the example {{Path|/etc/fstab}} file below.

{{FileBox|filename=/etc/fstab|title=Example of an UEFI capable {{Path|/etc/fstab}} file with a swap partition:|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
/dev/sda2		none		swap		sw		0 0
/dev/sda3		/		ext4		noatime		0 1
</pre>}}

Generating a 100MB partition for {{Path|/boot/efi}} should provide plenty of space for holding multiple {{Path|*.efi}} files (multiple entries will most likely not be needed; most systems will only use one).

Create the partition using the partitioning [[Partition#GUID_Partition_Table|tool of choice]]. The <tt>gdisk</tt> ({{Package|sys-apps/gptfdisk}}) and <tt>parted</tt> ({{Package|sys-block/parted}}) tools fit nicely for this purpose. When using the <tt>gdisk</tt> utility, be sure to use type <code>EF00</code>.

Proceed to create a FAT filesystem on the EFI system partition using <kbd>mkdosfs</kbd> and add it to {{Path|/etc/fstab}} by following the example below:

{{RootCmd|mkdosfs -F 32 -n efi-boot /dev/sda1
|mkdir /boot/efi}}

{{FileBox|filename=/etc/fstab|title=Adding the /boot/efi mount entry|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
</pre>}}

{{RootCmd|mount /boot/efi}}

{{Note|It is helpful to set the <code>GRUB_PLATFORMS</code> variable in {{Path|/etc/portage/make.conf}}. This will assist GRUB2 in determining what options to use when detecting the proper EFI target. For 32-bit EFI systems use <code>efi-32</code>. For 64-bit use <code>efi-64</code>.}}

{{Important|In order for GRUB2 to install properly, the EFI directory ''must'' be mounted ''and'' the <tt>efivars</tt> kernel module must be loaded before the <tt>grub2-install</tt> command will complete successfully.}}

==== Alternative: using the default UEFI firmware location ====

If the system's UEFI firmware fails to find GRUB2's EFI bootloader file, using the default boot loader location should provide a working solution. This circumvents the boot menu managed by [[Efibootmgr|efibootmgr]] and thus offers reduced functionality, but is less error prone. Do do this, verify the EFI partition is mounted at {{Path|/boot/efi}} then copy the file {{Path|grubx64.efi}} located at {{Path|/boot/efi/EFI/gentoo/grubx64.efi}} to {{Path|/boot/efi/EFI/BOOT/BOOTX64.EFI}}. This example assumes a 64-bit EFI system, adjust accordingly for 32-bit EFI systems.

== Extended features ==

GRUB2 has many features that make it a very powerful boot loader. It supports:
* booting from UEFI platforms.
* booting from GPT partitioned drives without needing a hybrid MBR (hybrid MBR can enabled as needed for compatibility or portability).
* booting from a [[btrfs]] formatted {{Path|/boot}} partition.
* booting directly from a [[btrfs]] raid set without needing an [[initramfs]] for early mount setup.
* booting directly from logical volume management (such as [[LVM|LVM2]]).
* booting with support for DM-RAID (RAID 0, 1, 4, 5, 6, 9 and 10).
* booting from encrypted devices (LUKS).

Some specific features are explained in more detail next.

=== Chainloading ===

GRUB2 was built with a truly improved chainload mode when compared to GRUB Legacy. To chainload another boot loader, use the <code>chainloader</code> option.

{{FileBox|filename=/boot/grub/grub.cfg|title=Chainloading another bootloader|<pre>
menuentry "Custom Super Bootloader Example" {
     insmod part_msdos
     insmod chain
     chainloader (hd1,1)+1
}
</pre>}}

For more information on chainloading, please see the [[GRUB2/Chainloading|Chainloading]] sub-page.

=== Using framebuffer display ===

To have GRUB2 use a [[framebuffer]] graphical display, re-emerge GRUB with the <code>truetype</code> USE flag enabled. This will install a default True Type font as well as a font conversion utility.

{{Emerge|--newuse sys-boot/grub:2}}

Proceed to configure the default GRUB2 configuration file located at {{Path|/etc/default/grub}}. For example:

{{FileBox|filename=/etc/default/grub|title=Framebuffer related settings|lang=bash|1=
# Set resolution and color depth
GRUB_GFXMODE=1366x768x32
 
# Keep resolution when loading the kernel
GRUB_GFXPAYLOAD_LINUX=keep
 
# Set a background image
GRUB_BACKGROUND="/boot/grub/bg.png"
 
# Use a custom font, converted using grub2-mkfont utility
GRUB_FONT="/boot/grub/fonts/roboto.pf2"
}}

In order to find out what display modes the system's graphics card supports, use the following commands on the GRUB2 shell:

{{Cmd|prompt=(grub)|color=white|insmod all_video|videoinfo}}

== Troubleshooting ==

Most of the issues can be resolved by ensuring that the partition layout is correct. Make sure enough space is available before the first partition of the disk, or optionally make sure that a ''BIOS boot partition'' is available. Also verify that {{Path|/boot/grub/grub.cfg}} was correctly generated with <kbd>grub2-mkconfig</kbd>, or generate one with a custom menu entry.

For more GRUB2 troubleshooting, please refer to the [[GRUB2/Troubleshooting|Troubleshooting]] sub-page.

== See also ==

There are a few specific GRUB2 resources available:

* In [[GRUB2/Chainloading|Chainloading]] the use of GRUB2 to boot other boot loaders is described. This is important to read when dual-booting systems, or when GRUB2 needs to be configured to boot ISO files.
* In [[GRUB2/AdvancedStorage|Advanced storage]] the necessary steps are documented on how to install and use GRUB2 on more advanced storage situations, such as software RAID, logical volumes or encrypted file systems.
* In [[GRUB2/Config_Variables|Configuration variables]] an exhaustive list of GRUB2 configuration variables, as used by {{Path|/etc/default/grub}}, is documented.
* In [[GRUB2/Troubleshooting|Troubleshooting]] a list of common GRUB2 errors (with their solutions) is presented.
* In [[Hybrid_partition_table|Hybrid partition table]] the use of a mixed MBR/GPT setup is documented, as well as how to use such hybrid partition layout with GRUB2.

== External resources ==

For more information, please see:

* [https://www.gnu.org/software/grub/manual/grub.html GNU GRUB 2 manual page]
** [https://www.gnu.org/software/grub/manual/grub.html#Network Network (PXE) section of GRUB2]
* [http://www.rodsbooks.com/gdisk/bios.html Legacy BIOS issues with GPT article]
* [http://www.rodsbooks.com/gdisk/hybrid.html GPT and Hybrid MBR article]
* [http://www.rodsbooks.com/gdisk/ GPT fdisk utility page]
* [https://wiki.archlinux.org/index.php/GRUB2 Arch Linux GRUB2 wiki article]
* [https://fedoraproject.org/wiki/GRUB_2?rd=Grub2#Encountering_the_dreaded_GRUB_2_boot_prompt Fedora GRUB2 wiki article : Encountering the dreaded GRUB2 boot prompt]
* [https://help.ubuntu.com/community/UEFIBooting ubuntu UEFI booting help]
* [http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr]


[[Category:Bootloaders]]
