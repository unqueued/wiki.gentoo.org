Using the "VC4" driver on the raspberry pi to enable hardware acceleration (in X, Wayland, opengl applications) presents many challenges. There's plenty of instructions floating around for Raspbian, but for Gentoo, not so much. This page contains a couple of nuggets of wisdom that may help you get there.

== Kernel ==

To have proper GPU acceleration with VideoCore, you need its kernel module loaded. That module has been integrated in v4.5, but it's also present in rpi's kernel v4.4.

I could never manage to compile a kernel that had a functional VC4 module myself, so I piggy-backed on Raspbian pre-compiled v4.4 kernel. To do so, I simply installed Raspbian on an SD card and changed the rootfs kernel argument to point to my gentoo system. Then, I copied <code>/lib/modules/*</code> from the Raspbian system into my gentoo system.

=== Enabling the VC4 kernel module ===

To enable the kernel module, you have to enable the optional overlay in your <code>config.txt</code> with <code>dtoverlay=vc4-kms-v3d</code>. It's also recommended to bump your <code>gpu_mem</code> to 128 (it's what <code>raspi-config</code> does when you enable the driver through it).

Make sure that you've copied kernel modules from the Raspbian system, or you'll have a blank screen!

Also, you should know that because that driver is a kernel module, you won't have any HDMI output until it's loaded, which is somewhere in the middle of your init procedure.

=== Is my module loaded? ===

Once you're booted up, you can verify that your module is properly loaded with <code>lsmod</code>. You're supposed to have a <code>vc4</code> module in there. Also, it's important to verify that <code>/dev/dri/card0</code> exists. If you don't have that device, nothing's going to work.

== Mesa and friends ==

If your kernel module is properly loaded, you're halfway there. Now, you need Mesa to use that driver and you need X to enable GPU acceleration.

First, you should edit your <code>/etc/portage/make.conf</code> to have <code>VIDEO_CARDS="vc4"</code>. You might be tempted to keep <code>fbdev</code> in there, but I would recommend against it. If <code>fbdev</code> isn't there, then xorg is not going to try to load it over <code>modesetting</code>.

Note that media-libs/mesa-12.0.1 is broken for VC4, while media-libs/mesa-12.0.6 appears to work.

Then, it's a matter of having the proper use flags. For me, this was the part that I spent the most time on because I didn't think about enabling <code>glamor</code> in <code>xorg-server</code>. Once I got my setup working, I stopped fiddling, so I'm not sure about exactly what use flags you need. Those are mine:

{{GenericCmd|output=<pre>
media-libs/mesa -classic xa xvmc
x11-libs/cairo opengl xlib-xcb
x11-base/xorg-server glamor
</pre>}}

I also have <code>egl gles1 gles2</code> as global use flags.

=== Is it working? ===

To test your setup, you need to install <code>x11-apps/mesa-progs</code>. This provides <code>glxgears</code>, which you can run with <code>glxgears -info</code>. If you have something like <code>GL_RENDERER   = Gallium 0.4 on VC4</code> in the output, then it's a success! If it's using <code>llvmpipe</code>, you're almost there. If it's using the software rasterizer, you're not there.
