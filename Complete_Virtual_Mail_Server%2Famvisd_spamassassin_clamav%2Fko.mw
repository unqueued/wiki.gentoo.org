<languages/>

== 도입부 ==

스팸은 인터넷에서 더욱 문제가 될것이며 견고하고 탄탄한 해결책이 필요합니다. 스팸을 차단하는 유료 서비스가 있지만 필수는 아니며 이 글에서 언급하지 않겠습니다.

== Postfix ==

방어의 최전선은 postfix 그 자체입니다. postfix는 스팸 또는 스패머를 차단하는 몇가지 기본 수단을 제공합니다. <code>smtpd_client_restrictions</code>를 활용하면 공개 DNS 블랙리스트를 활용할 수 있습니다. 다른 곳에 포함할 수 있는 DNS 블랙리스트는 세가지가 있습니다. 이 중 두가지는 [http://www.intra2net.com/en/support/antispam/ 상당히 정확한]<sup style="color:#ff0077">en</sup> 리스트입니다. 가장 중요한 한가지는 [http://zen.spamhaus.org zen.spamhaus.org]에 있으며  [http://bl.spamcop.net bl.spamcop.net] 에 있는 목록을 백업으로 사용할 수 있습니다. 이들 목록을 postfix와 사용하는 방법은 매우 단순합니다. 이 도메인을 {{Path|main.cf}} 파일에서 <code>reject_rbl_client</code> 설정에 추가하면됩니다:

{{FileBox|filename=/etc/postfix/main.cf|title=DNS 블랙리스트 활용|1=
# Block spam using DNS blacklists
smtpd_client_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_rbl_client zen.spamhaus.org, reject_rbl_client bl.spamcop.net
}}

{{Note|<code>permit_mynetworks</code> and <code>permit_sasl_authenticated</code> are added for good measure. If other restrictions are required or already in use, keep them in place.}}

== Amavis ==

=== 도입부 ===

Spam-assassin and ClamAV are the tools to block spam and viruses, however amavis is required to tie this all together. Amavis will actually behave as a mail server in itself, accept mail, filter it, and send it onwards again. For this to work, postfix will need to actually listen for mail twice. The default port 25 is where mail initially is received on. From there on it is sent to amavis, which will be listening on port 10024. When amavis is done with the message, it will be sent to postfix on a different port, 10025. The reason for this should be obvious. If mail would be offered again on port 25, it would be passed to amavis again and thus in an endless loop. Obviously, postfix on port 10025 would only be listening to known hosts, like ''localhost'' and not check for spam anymore.

{{Note|Because of this setup, it is quite easily possible, to have these 3 mail 'handlers' on 3 different hosts. It could be possible to have the primary mailserver, that listens on port 25 on the firewall, have it forward to a safe isolated server running only amavis and have amavis sent mail to an internal postfix server where it delivers mail to the mail storage.}}

=== 설치 ===

Amavis should have been installed already, if not, emerge it. This should pull in spam-assassin and clamav as its dependencies.

{{Emerge|mail-filter/amavisd-new}}

=== 기본 설정 ===

Amavisd offers an enormous amount of options and going over all them will take some time. The configuration file {{Path|/etc/amavisd.conf}} however is well documented and divided into clear sections. Each section will be examined as needed. Only options that will be changed will be mentioned to cut down the text for readability.

{{Note|The configuration file is actually perl code and proper precautions should be taken when editing this file.}}

For this example amavisd will be running on host foo but this could be any other host as well, amavisd does not require to run on the same host as postfix. Also the domain used is only used to identify the server itself with, not the domains amavisd will be scanning.

{{Note|With amavis being quite complex, troubleshooting can be difficult enough as it is.}}

The first step, is to disable all actual checks and to enable logging. Also some default values should be setup.

{{FileBox|filename=/etc/amavisd.conf|title=spam 방지 기능 비활성, 기록 활성|1=
@bypass_virus_checks_maps = (1);  # controls running of anti-virus code
@bypass_spam_checks_maps  = (1);  # controls running of anti-spam code
# $bypass_decode_parts = 1;         # controls running of decoders&dearchivers
 
$mydomain = 'example.com';
$myhostname = 'foo.example.com';
 
$log_level = 5;              # verbosity 0..5, -d
}}

{{Note|''virusalert@example.com'' and ''spam.police@example'' can be renamed to ''undef'' if not wanting to receive any information on breaches. If not, these e-mail addresses should exist.}}

Normally restarting postfix should restart amavisd as well. For now, only amavisd should be started to see if there are any initial problems.

{{RootCmd|/etc/init.d/amavisd start}}

=== amavisd를 Postfix에 연동 ===

amavisd가 근본 동작 모드로 동작하면 이론적으로 메일을 그대로 통과시킵니다 postfix -> amavisd -> postfix 바인딩 시험은 완벽하게 이루어집니다.

우선, amavis가 메일을 넣을 2차 postfix 전송 단을 추가합니다. 대부분 옵션은 이미 확인을 했거나 아니면 혼동할 수 있으니, 빈 값이 기본값입니다.

{{FileBox|filename=/etc/postfix/master.cf|title=amavisd를 통한 메일 차단|1=
localhost:10025 inet n  -       n       -       2       smtpd
  -o disable_dns_lookup=yes
  -o content_filter=
  -o myhostname=foo.example.com
  -o local_recipient_maps=
  -o relay_recipient_maps=
  -o smtpd_restriction_classes=
  -o smtpd_client_restrictions=
  -o smtpd_helo_restrictions=
  -o smtpd_sender_restrictions=
  -o smtpd_recipient_restrictions=permit_mynetworks,reject
  -o mynetworks=127.0.0.0/8
  -o strict_rfc821_envelopes=yes
  -o smtpd_error_sleep_time=0
  -o smtpd_soft_error_limit=1001
  -o smtpd_hard_error_limit=1000
  -o smtpd_client_connection_count_limit=0
  -o smtpd_client_connection_rate_limit=0
  -o receive_override_options=no_unknown_recipient_checks,no_header_body_checks
  -o smtpd_authorized_xforward_hosts=127.0.0.0/8
}}

With this transport in place, it should only listen on localhost and only accept mail from localhost. This should be extended if amavis is run elsewhere, but keep in mind anything is accepted.

{{Note|''maxproc' is set to '''2''' above. This can be increased if more listening daemons are required. However this number needs to match amavis's <code>$max_servers</code>.}}

Next another transport is added for, which could be considers 'being' amavis in a sense.

{{FileBox|filename=/etc/postfix/master.cf|title=amavis 전송 처리|1=
amavis    unix  -       -       n       -       2       lmtp
  -o disable_dns_lookups=yes
  -o lmtp_send_xforward_command=yes
  -o lmtp_data_done_timeout=1200
}}

After the transport for amavis has been added, smtp should be told to route all mail through amavis. For this two option need to be added to smtpd and change the maxproc to match amavis's.

{{FileBox|filename=/etc/postfix/master.cf|title=amavis로 전달|1=
smtp       inet  n       -       n       -       2       smtpd
  -o content_filter=amavis:[127.0.0.1]:10024
  -o receive_override_options=no_address_mappings
smtps     inet  n       -       n       -       2       smtpd
  -o smtpd_tls_wrappermode=yes
  -o content_filter=amavis:[127.0.0.1]:10024
  -o receive_override_options=no_address_mappings
}}

Restarting both amavisd and postfix then should pass all mail through amavisd.

{{RootCmd|/etc/init.d/amavisd restart|/etc/init.d/postfix restart}}

=== 시험 ===

Sending a message to ''testuser@example.com'' remotely and locally should work fine. After the message has arrived, the headers should be checked.

{{Note|When doing this test, either use webmail or a remote client using a different mailserver or mail through port 25 or 465. Do not test using mail submission on port 587 as that bypasses amavisd.}}

Looking at the mail headers, it should be noticed that it was sent through amavisd and re-delivered to postfix.

{{CodeBox|title=메일 헤더|1=
Received: from localhost (localhost [127.0.0.1])
    by foo.example.com (Postfix) with ESMTP id 03ABA22E4C
    for <testuser@example.com>; Wed, 28 Dec 2011 11:41:05 +0100 (CET)
Received: from foo.example.com ([127.0.0.1])
    by localhost (foo.example.com [127.0.0.1]) (amavisd-new, port 10024)
    with LMTP id 6N9l4nIQa620 for <testuser@example.com>; Wed, 28 Dec 2011 11:41:04 +0100 (CET)
Received: from ext.example.net (ext.example.net [1.2.3.4])
    (using TLSv1 with cipher ADH-AES256-SHA (256/256 bits))
    (No client certificate requested)
    by foo.example.com (Postfix) with ESMTPS id C136021F97
    for <testuser@example.com>; Wed, 28 Dec 2011 11:41:04 +0100 (CET)
}}

Examining the above it is clearly visible that the mail was received by postfix via SMTPS even. It was then forwarded to amavisd on port 10024 via LMTP and finally redelivered to postfix using SMTP again.

== ClamAV ==

=== 도입부 ===

ClamAV is the de facto open source virus scanner for linux. Amavis can be linked to many different free and commercial virus scanners, but here clamav will be used. ClamAV is specifically designed for scanning e-mail. It consists of two parts, clamav itself, and freshclam, the clamav updating service. By default it updates every two hours, which should be enough for anyone.

=== 설치 ===

ClamAV는 이미 설치했어야하지만, 설치하지 않았다면 이머지해야합니다.

{{Emerge|app-antivirus/clamav}}

{{Note|The <code>clamdtop</code> flag lets clamav build the <tt>clamdtop</tt> utility, a nice monitoring tool for the viruscanner.}}

=== 설정 ===

ClamAV will be configured to run in daemonized mode, e.g. it will be listening for connections (from amavisd). The other option (and the default fallback in amavisd) is to have amavisd use the commandline scanner, which is much slower and much much more resource intensive.

ClamAV does not have to be run on the same host, however it is recommended for performance reasons to keep it on the same host, depending on resource usage.

To be able to communicate, clamav needs to be part of amavisd's group.

{{RootCmd|gpasswd -a clamav amavis}}

It always helps to allow clamd to output some debug information.

{{FileBox|filename=/etc/clamd.conf|title=디버깅 옵션 활성화|1=
# Enable debug messages in libclamav.
# Default: no
Debug yes
}}

Also clamd needs some settings setup in its configuration file so that amavis can talk to it.

{{FileBox|filename=/etc/clamd.conf|title=amavis가 clamd로 연결하도록 허용|1=
# Path to a local socket file the daemon will listen on.
# Default: disabled (must be specified by a user)
LocalSocket /var/run/clamav/clamd.sock
 
# Initialize supplementary group access (clamd must be started by root).
# Default: no
AllowSupplementaryGroups yes
}}

{{Note|이 옵션은 최근 기본 값으로 보입니다.}}

When running clamav on a hardened kernel, there will be warnings about certain operations not being permitted:

{{CodeBox|title=LibClamAV 오류 예제|1=
[LibClamAV] Bytecode: disabling JIT because SELinux is preventing 'execmem' access.
}}

This is expected and okay. ClamAV can run fine without JIT.

Before starting clamav for the first time, the virus database needs to be downloaded. Freshclam is responsible for downloading and keeping the virus database up to date. Freshclam gets automatically started by the clamd startup script, but clamd will fail to start due to a missing database.

{{RootCmd|/etc/init.d/clamd start}}

Now monitor the clamav log file to see freshclam download the initial virus database.

{{FileBox|filename=/var/log/clamav/freshclam.log|title=Freshclam 시작 기록|1=
freshclam daemon 0.98.6 (OS: linux-gnu, ARCH: x86_64, CPU: x86_64)
ClamAV update process started at Sat Mar 21 16:30:16 2015
Downloading main.cvd [100%]
main.cvd updated (version: 55, sigs: 2424225, f-level: 60, builder: neo)
Downloading daily.cvd [100%]
daily.cvd updated (version: 20219, sigs: 1354642, f-level: 63, builder: neo)
Downloading bytecode.cvd [100%]
[LibClamAV] Bytecode: disabling JIT because SELinux is preventing 'execmem' access.
Run  'setsebool -P clamd_use_jit on'.
ERROR: During database load : LibClamAV Warning: RWX mapping denied: Can't allocate RWX Memory: Operation not permitted
WARNING: Database successfully loaded, but there is stderr output
bytecode.cvd updated (version: 247, sigs: 41, f-level: 63, builder: dgoddard)
Database updated (3778908 signatures) from database.clamav.net (IP: 200.236.31.1)
WARNING: Clamd was NOT notified: Can't connect to clamd through /var/run/clamav/clamd.sock: No such file or directory
}}

Now that the database has been updated, restart clamd:

{{RootCmd|/etc/init.d/clamd restart}}

{{FileBox|filename=/var/log/clamav/clamd.log|title=ClamAV 시작 기록|1=
Sat Mar 21 16:35:18 2015 -> clamd daemon 0.98.6 (OS: linux-gnu, ARCH: x86_64, CPU: x86_64)
Sat Mar 21 16:35:18 2015 -> Running as user clamav (UID 105, GID 206)
Sat Mar 21 16:35:18 2015 -> Log file size limited to 1048576 bytes.
Sat Mar 21 16:35:18 2015 -> Reading databases from /var/lib/clamav
Sat Mar 21 16:35:18 2015 -> Not loading PUA signatures.
Sat Mar 21 16:35:18 2015 -> Bytecode: Security mode set to "TrustSigned".
Sat Mar 21 16:35:29 2015 -> Loaded 3773304 signatures.
Sat Mar 21 16:35:30 2015 -> LOCAL: Unix socket file /var/run/clamav/clamd.sock
Sat Mar 21 16:35:30 2015 -> LOCAL: Setting connection queue length to 200
Sat Mar 21 16:35:30 2015 -> Limits: Global size limit set to 104857600 bytes.
Sat Mar 21 16:35:30 2015 -> Limits: File size limit set to 26214400 bytes.
Sat Mar 21 16:35:30 2015 -> Limits: Recursion level limit set to 16.
Sat Mar 21 16:35:30 2015 -> Limits: Files limit set to 10000.
Sat Mar 21 16:35:30 2015 -> Limits: MaxEmbeddedPE limit set to 10485760 bytes.
Sat Mar 21 16:35:30 2015 -> Limits: MaxHTMLNormalize limit set to 10485760 bytes.
Sat Mar 21 16:35:30 2015 -> Limits: MaxHTMLNoTags limit set to 2097152 bytes.
Sat Mar 21 16:35:30 2015 -> Limits: MaxScriptNormalize limit set to 5242880 bytes.
Sat Mar 21 16:35:30 2015 -> Limits: MaxZipTypeRcg limit set to 1048576 bytes.
Sat Mar 21 16:35:30 2015 -> Limits: MaxPartitions limit set to 50.
Sat Mar 21 16:35:30 2015 -> Limits: MaxIconsPE limit set to 100.
Sat Mar 21 16:35:30 2015 -> Archive support enabled.
Sat Mar 21 16:35:30 2015 -> Algorithmic detection enabled.
Sat Mar 21 16:35:30 2015 -> Portable Executable support enabled.
Sat Mar 21 16:35:30 2015 -> ELF support enabled.
Sat Mar 21 16:35:30 2015 -> Mail files support enabled.
Sat Mar 21 16:35:30 2015 -> OLE2 support enabled.
Sat Mar 21 16:35:30 2015 -> PDF support enabled.
Sat Mar 21 16:35:30 2015 -> SWF support enabled.
Sat Mar 21 16:35:30 2015 -> HTML support enabled.
Sat Mar 21 16:35:30 2015 -> Self checking every 600 seconds.
}}

=== amavisd를 clamav에 연동 ===

Amavisd should connect to the socket of clamd and thus clamav needs to be enabled as one of the main antivirus scanners. The fallback of invoking clamav from the commandline should not be changed. Also the virus check bypass needs to be disabled to be effective.

{{FileBox|filename=/etc/amavisd.conf|title=clamav 활성화|1=
# @bypass_virus_checks_maps = (1);  # controls running of anti-virus code
 
['ClamAV-clamd',
  \&ask_daemon, ["CONTSCAN {}\n", "/var/run/clamav/clamd.sock"],
  qr/\bOK$/m, qr/\bFOUND$/m,
  qr/^.*?: (?!Infected Archive)(.*) FOUND$/m ],
}}

After restarting amavisd viruses should be able to detected and blocked:

{{RootCmd|/etc/init.d/amavisd restart}}

=== 시험 ===

바이러스 필터가 동작하는지 시험할 때,  [http://www.eicar.org/86-0-Intended-use.html 멀웨어 방지 시험 파일]이 있는데, 전자메일을 보낼 때 이 문자열을 이용하고 바이러스 검색기를 실행해야합니다.

{{CodeBox|title=EICAR-STANDARD-ANTIVIRUS-TEST-FILE|<nowiki>
X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*
</nowiki>}}

{{Note|Again, it should be ensured that this is message is passed through the sending mailserver, and only be blocked by the receiving server (foo.example.com). Using a client that connects to port 25 and is allowed to relay should suffice.}}

{{Path|mail.log}} 파일을 살펴보면, 다음 내용이 나타납니다:

{{FileBox|filename=/var/log/mail.log|title=바이러스 감염 시험|1=
Dec 28 14:05:33 7of9 amavis[7554]: (07554-01) Blocked INFECTED (Eicar-Test-Signature) {DiscardedInternal,Quarantined}, MYNETS LOCAL [10.0.0.2]:41144 [10.0.0.2] <root@test.example.net> -> <testuser@example.com>, quarantine: virus-WYHuLpwdzPVr, Queue-ID: 7FC7B22DF6, mail_id: WYHuLpwdzPVr, Hits: -, size: 407, 166 ms
Dec 28 14:05:33 7of9 postfix/lmtp[15452]: 7FC7B22DF6: to=<testuser@example.com>, relay=127.0.0.1[127.0.0.1]:10024, delay=0.41, delays=0.21/0.02/0.01/0.16, dsn=2.7.0, status=sent (250 2.7.0 Ok, discarded, id=07554-01 - INFECTED: Eicar-Test-Signature)
}}

이론적으로, 바이러스 검색기는 완전한 기능을 수행해야합니다.

== 스팸 어쌔신 ==

=== 도입부 ===

스팸 어쌔신은 멋진 스팸 필터입니다. 해를 거듭해가면서 복잡해졌으며 올바르게 설정하는 노력이 필요합니다.

=== 설치 ===

정말로 스팸 어쌔신을 따로 설치할 필요가 없습니다. <code>spamassassin</code> USE 플래그를 설정하면 amavisd-new의 의존성 항목으로 끌어옵니다.

{{Emerge|mail-filter/spamassassin}}

=== 설정 ===

기본 설정은 표준 용도를 만족합니다.

{{Note|사용자가 전송 포트로 전자메일을 보내지 않는다면, <code>trusted_networks</code> 변수를 설정하여 알려진 사용자가 보낸 메일은 스팸 식별 과정을 통과하도록 올바르게 설정해야합니다.}}

=== 업데이트 ===

스팸 어쌔씬의 핵심 기능은 자체 업데이트입니다. 업데이트는 ''[http://updates.spamassasin.org 업데이트 채널]''에서 관리합니다.

스팸 어쌔신은 {{c|sa-update}} 도구를 보유하고 있어 업데이트를 완전히 자동화할 수 있습니다. 스팸 어쌔신은 <code>--nogpg</code> 플래그를 사용하여 GPG 키를 무시할 수 있지만, 최종 안착지에 도달한 것처럼 끝내야합니다. 스팸 어쌔신 GPG 키를 추가하는 과정은 간단한 두 단계를 거칩니다.

{{RootCmd|wget "http://spamassassin.apache.org/updates/GPG.KEY"|sa-update --import GPG.KEY|rm GPG.KEY}}

{{Warning| {{Bug|396307}} 버그 가능성 때문에 키 모음용 디렉터리를 먼저 만들어야 하고 그 다음 키를 가져오기 전에 적절한 권한을 설정해야합니다.
{{RootCmd|mkdir -p /etc/mail/spamassassin/sa-update-keys; chmod 700 /etc/mail/spamassassin/sa-update-keys}}
}}

스팸 어쌔신 업데이트 채널을 추가하고 나면 업데이트해야합니다. 이 명령을 실행하고 나서 오류를 확인하십시오.

{{RootCmd|sa-update -D}}

업데이트를 끝내고 나서 스팸 어쌔신을 활용하려면 컴파일해야합니다. 또한 여기서 오류도 잡아야합니다.

{{RootCmd|sa-compile}}

clamav와는 달리 'freshassasin'이 없으며 업데이트를 처리할 크론 작업이 필요합니다. 스팸 어쌔신을 최신으로 유지하려면, 크론 작업을 만들어야합니다.

{{FileBox|filename=/etc/cron.daily/sa-updates|title=스팸 어쌔신 필터 규칙 업데이트|1=
#!/bin/sh
sa-update --allowplugins --gpgkey D1C035168C1EBC08464946DA258CDB3ABDE9DC10  --channel saupdates.openprotect.com --channel updates.spamassassin.org
sa-compile
}}

크론 작업이 제대로 동작하도록 실행 가능하게 하십시오:

{{RootCmd|chmod +x /etc/cron.daily/sa-updates}}

{{Warning|여기서 활용한 GPG 키는 물론 바꾸고, 업데이트 하며, 수정을 위해 가져와야 할 수도 있습니다. sa-updates gpgkey 명령을 알아보려면,  [http://saupdates.openprotect.com/ OpenProtect]를 참고하십시오.}}

=== amavisd를 스팸 어쌔신에 연동 ===

실제로, 스팸 어쌔신은 amavisd로 연동할 필요가 없으며, amavisd의 통합 부분입니다. amavisd에서 스팸 차단을 활성화하면 스팸 차단 역할을 수행합니다.

{{FileBox|filename=/etc/amavisd.conf|title=스팸 어쌔신 활성화|1=
# @bypass_spam_checks_maps  = (1);  # controls running of anti-spam code
}}

이 값을 바꿨으면 amavisd를 다시 시작해야합니다:

{{RootCmd|/etc/init.d/amavisd restart}}

=== 시험 ===

스팸 필터를 붙이지 않은 25번 포트에 클라이언트를 연결하면 시험을 다시금 진행합니다. [http://spamassassin.apache.org/gtube/ GTUBE]를 시험 데이터로 사용할 수 있습니다. 해당 사이트에는 RFC-822 형식의 적당한 메일 메시지가 있습니다.

{{CodeBox|title=스팸 본문 예제|1=
XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X
}}

시험 사용자의 받은 편지함 또는 스팸 메일함 같은 곳을 확인하시면 메시지와 시험 과정을 거친 헤더를 찾을 수 있습니다:

{{CodeBox|title=스팸 헤더|1=
Received: from localhost (localhost [127.0.0.1])
    by foo.example.com (Postfix) with ESMTP id B7EDA22F62
    for <testuser@example.com>; Wed, 28 Dec 2011 16:02:46 +0100 (CET)
X-Quarantine-ID: <BukBLFBE3OWo>
X-Virus-Scanned: amavisd-new at example.com
X-Spam-Flag: YES
X-Spam-Score: 1000.907
X-Spam-Level: ****************************************************************
X-Spam-Status: Yes, score=1000.907 required=6.2 tests=[ALL_TRUSTED=-1,
    FH_FROMEML_NOTLD=0.18, GTUBE=1000, MISSING_HEADERS=1.207,
    MISSING_MID=0.14, NO_DNS_FOR_FROM=0.379, TVD_SPACE_RATIO=0.001]
    autolearn=no
}}

== Amavisd 최적화 ==

Amavis는 세밀하게 설정할 수 있는 몇가지 더 많은 설정 항목이 있습니다.

=== 수신자 구분 문자 ===

postfix를 <code>recipient_delimiter</code>와 활용할 때, amavisd는 이 기능을 사용하도록 알릴 수 있습니다.

{{FileBox|filename=/etc/amavisd.conf|title=amavis의 recipient_delimiters|1=
# Delimiter must match the equivalent (final) MTA delimiter setting.
$recipient_delimiter = '+';		# (default is undef, i.e. disabled)
}}

{{Path|/etc/postfix/main.cf}}에 다음 내용을 추가하는게 좋아보일텐데, 이렇게 설정하지 않으면 user+foo@domain 도메인에 전달하지 않습니다:

{{FileBox|filename=/etc/postfix/main.cf|title=postfix의 recipient_delimiters|1=
# ADDRESS EXTENSIONS (e.g., user+foo)
#
# The recipient_delimiter parameter specifies the separator between
# user names and address extensions (user+foo). See canonical(5),
# local(8), relocated(5) and virtual(5) for the effects this has on
# aliases, canonical, virtual, relocated and .forward file lookups.
# Basically, the software tries user+foo and .forward+foo before
# trying user and .forward.
#
recipient_delimiter = +
}}

=== 분산 격리 ===

여러 하위 디렉터리에 분산 격리할 수 있습니다. 진행하려면 디렉터리를 먼저 만들어야합니다:

{{RootCmd|<pre>mkdir /var/amavis/quarantine/virus;
mkdir /var/amavis/quarantine/spam;
mkdir /var/amavis/quarantine/banned;
mkdir /var/amavis/quarantine/badh;
mkdir /var/amavis/quarantine/clean;
chown -R amavis:amavis /var/amavis/quarantine/*;
chmod -R gu+rwX /var/amavis/quarantine/*;
chmod -R o-rwx /var/amavis/quarantine/*
</pre>}}

{{FileBox|filename=/etc/amavisd.conf|title=분산 격리|1=
#$clean_quarantine_method          = 'local:clean/%m';
$virus_quarantine_method          = 'local:virus/%m';
$spam_quarantine_method           = 'local:spam/%m.gz';
$banned_files_quarantine_method   = 'local:banned/%m';
$bad_header_quarantine_method     = 'local:badh/%m';
}}

또한, 스팸 처리 기준 레벨 설정은 저장하는 스팸 메일 양 감소에 도움이 됩니다. 기준 레벨은 스팸 가중치를 상회하는 스팸 메일을 저장하지 않게 합니다.

{{FileBox|filename=/etc/amavisd.conf|title=스팸 차단 수준 설정|1=
$sa_quarantine_cutoff_level = 25; # spam level beyond which quarantine is off
}}

{{Note|'''25''' 가 기본값입니다. 이 값은 기타 수준에서와 마찬가지로 조직에서 필요한대로 설정할 수 있어야합니다.}}

=== 스팸 배달 ===

<code>$final_spam_destiny</code>의 기본 값은 <code>D_PASS</code>이며, 가중치가 높은 대상을 스팸으로 간주하고, 그래도 사용자 메일함에 배달함을 의미합니다. 최근 스팸 어쌔신을 신뢰하는 메일 클라이언트는 자동으로 스팸 폴더로 이동합니다.

=== Bayes 데이터베이스 경로 ===

스팸 어쌔신 설정 파일의 <code>bayes_path</code> 옵션을 설정하여 <tt>sa-learn</tt>같은 도구가 올바른 데이터베이스 위치에 기록할 수 있도록 하십시오.

{{FileBox|filename=/etc/spamassassin/local.cf|title=Amavisd 홈 디렉터리에서 bayes_path 설정|1=
bayes_path /var/amavis/.spamassassin/bayes
}}

=== 가상 호스트 ===

서버에서 하나 이상의 도메인을 다룬다면, amavis에 알려 여기서 도움을 받을 수 있습니다.

{{FileBox|filename=/etc/amavisd.conf|title=amavis에 부가 별칭 추가|1=
@local_domains_maps = ( [".$mydomain", "mail.example.net", "mail.example.org", "mail2.example.com"] );
}}

== 정리 ==

기대한 바대로 스팸 어쌔신과 ClamAV가 동작한다면, 디버깅 정보 표시를 보통 최소화하여 줄일 수 있습니다.

{{FileBox|filename=/etc/amavisd.conf|title=amavsd의 디버깅 비활성화|1=
# Section III - Logging
# true (e.g. 1) => syslog;  false (e.g. 0) => logging to file
$do_syslog = 1;                   # (defaults to 0)
 
#NOTE: levels are not strictly observed and are somewhat arbitrary
$log_level = 0;		   # (defaults to 0), -d
 
# Turn on SpamAssassin debugging (output to STDERR, use with 'amavisd debug')
#$sa_debug = '1,all';  # defaults to false
}}

{{FileBox|filename=/etc/clamd.conf|title=clamav 디버깅 비활성화|1=
# Enable debug messages in libclamav.
# Default: no
#Debug yes
}}

[[Category:Mail Servers]]
