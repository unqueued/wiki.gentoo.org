<languages/>

{{InfoBox stack
|{{InfoBox homepage|http://www.linux-pam.org/|header=true}}
|{{InfoBox wikipedia|Linux_PAM}}
|{{InfoBox project|PAM}}
}}

PAM, or '''P'''luggable '''Au'''thentication '''M'''odules, is a modular approach to authentication. It allows (third party) services to provide an authentication module for their service which can then be used on PAM enabled systems. Services that use PAM for authentication can immediately use these modules without the need for a rebuild.

== Введение ==

На сервере Linux PAM (Pluggable Authentication Modules) могут использоваться для управления аутентификацией (как часть управления предоставления доступа). При использовании PAM службам нет необходимости поддерживать собственную систему аутентификации. Вместо этого они полагаются на модули PAM, доступные в системе. Каждая служба при необходимости может использовать собственную конфигурацию PAM, хотя в большинстве случаев аутентификация выполняется одинаково для множества служб. Вызывая модули PAM, сервисы могут поддерживать двухфакторную аутентификацию «из коробки», сразу же использовать централизованные хранилища аутентификационных средств и многое другое.

PAM предоставляют гибкую модульную архитектуру для следующих служб:

* Authentication management - verify if a user trying to authenticate a user account is actually the user.
* Account management - check if that users' password has expired or if the user is allowed to access this particular service.
* Session management - execute certain tasks on logon or logoff of a user (auditing, mounting of file systems, ...).
* Password management - offer an interface for password resets and the like.

{{Note|PAM ''не предоставляет'' никаких служб для авторизации. Обычно авторизация выполняется внутри приложения. Некоторые приложения поддерживают авторизацию на основе принадлежности группе (члену группы разрешается авторизация). Распространённым подходом (но не для PAM) для этого является поддержка NSS (Name Service Switch). NSS по своей архитектуре очень похож на PAM. Фактически, на серверах Linux авторизация управляется с помощью библиотек NSS.}}

=== Принципы работы PAM ===

При работе с PAM администраторы очень быстро понимают принципы, по которым функционирует PAM.

Во-первых, это «независимость от бэк-энда». Приложениям, поддерживающим PAM, нет необходимости учитывать низкоуровневую логику, чтобы работать с бэк-эндами, например, базами данных, службой LDAP, файлами паролей, веб-службами с поддержкой WS-Security или другими ещё неизобретёнными бэк-эндами. Используя PAM, приложения отделяют логику работы бэк-энда от своей. Всё, что им нужно сделать — это вызвать функцию PAM.

Другим принципом является «независимость от конфигурации». Администраторам не нужно знать, как настраивать десятки различных приложений, чтобы заставить их поддерживать аутентификацию через LDAP-сервер. Вместо этого им достаточно воспользоваться одной конфигурационной структурой, предоставляемой PAM.

Последним принципом, являющимся также частью названия PAM, является «подключаемая архитектура». Когда необходимо интегрировать новый бэк-энд, всё, что нужно сделать администратору — это установить библиотеку для этого бэк-энда (большинство модулей используют один файл настроек). Начиная с этого момента модуль становится доступен для использования приложениями. Администраторы могут настроить аутентификацию для использования этого бэк-энда и просто перезапустить приложение.

=== Как работает PAM ===

Приложения, для которых необходимо использование PAM, линкуются с библиотекой PAM (libpam) и могут вызывать нужные функции работы с указанными выше службами. Кроме этого, в приложении не нужно ничего реализовывать специфичного для работы с этими службами, так как эту задачу на себя берёт PAM. И когда пользователь захочет аутентифицироваться, скажем, в веб-приложении, то это приложение вызывает PAM (передавая ему идентификатор и, возможно, пароль или запрос) и проверяет возвращаемые данные, чтобы принять решение, аутентифицировался ли пользователь и имеет ли он доступ к приложению. Внутренней задачей PAM является определение, где необходимо аутентифицировать пользователя (например, в центральной базе данных или на LDAP-сервере).

Сильной стороной PAM является то, что создавать модули PAM для интеграции со службами или приложениями может любой желающий. Если какая-нибудь компания выпускает новую службу для аутентификации, всё, что нужно будет сделать, — это предоставить для взаимодействия с этой службой модуль PAM, после чего любое использующее PAM приложение сможет незамедлительно работать с этой службой: нет необходимости что-то пересобирать или улучшать.

== Настройка ==

Другой важной особенностью PAM является то, что они поддерживают объединение в цепочки нескольких модулей. Вот конфигурационный файл PAM для некоей службы:

{{FileBox|filename=/etc/pam.d/someservice|title=Пример конфигурационного файла PAM для службы с названием "someservice"|1=
# Аутентификация
auth         required        pam_env.so
auth         required        pam_ldap.so
# Управление учётными записями
account      required        pam_ldap.so
# Управление паролями
password     required        pam_ldap.so
# Управление сеансами
session      optional        pam_loginuid.so
session      required        pam_selinux.so close
session      required        pam_env.so
session      required        pam_log.so level=audit
session      required        pam_selinux.so open multiple
session      optional        pam_mail.so
}}

Видно, что конфигурационный файл разделён на четыре области служб, которые поддерживают PAM: аутентификация, управление учётными записями, управление паролями и управление сеансами.

Каждый из этих разделов в файле вызывает один или несколько модулей PAM. Например, {{Path|pam_env.so}} устанавливает переменные среды, которые могут быть использованы последующими модулями. Код, возвращаемый модулем PAM, вместе с управляющими директивами (в данном примере — required или optional) позволяет PAM решать, что делать дальше.

=== Управляющие директивы ===

PAM поддерживают следующие управляющие директивы:

{| class="table table-striped table-condensed"
! Директива
! Описание
|-
| <code>required</code>
| Указанный модуль PAM должен вернуть код успеха для того, чтобы вся служба (например, аутентификация) вернула код успеха. Если модуль PAM вернёт код неудачи, остальные модули будут всё равно вызваны (хотя уже точно известно, что служба ответит отказом).
|-
| <code>requisite</code>
| Указанный модуль PAM должен вернуть код успеха для того, чтобы вся служба вернула код успеха. В отличие от ''required'', если модуль PAM вернёт код неудачи, директива сразу же завершится, и служба ответит отказом.
|-
| <code>sufficient</code>
| Если указанный модуль PAM вернёт код успеха, вся служба ответит разрешением. Оставшиеся модули PAM не будут проверяться. Однако, если модуль PAM вернёт код неудачи, оставшиеся модули пройдут проверку, а неудача данного модуля не будет приниматься во внимание.
|-
| <code>optional</code>
| Код успеха или неудачи указанного модуля PAM будет иметь значение, если это единственный модуль в стеке.
|}

Цепочки модулей позволяют выполнить множественную аутентификацию, выполнить несколько задач в процессе создания сеанса и тому подобное.

=== Управление файлами конфигурации PAM ===

Так как конфигурационные файлы PAM управляют процессом аутентификации в приложении, очень важно правильно с ними взаимодействовать. Файлы обычно располагаются в каталоге {{Path|/etc/pam.d/}}.

В больших организациях или в требовательных к безопасности  системах любая модификация конфигурационных файлов PAM должна подвергаться соответствующему аудиту.

Это же относится к тому месту, где располагаются модули PAM ({{Path|/lib/security}} или {{Path|/lib64/security}}).

== PAM и Gentoo ==

Applications that can support PAM conditionally will use the <code>pam</code> USE flag. Although it is possible to run Gentoo systems without PAM (by setting <code>USE="-pam"</code>), but the default is to run with PAM support enabled.

== Смотрите также ==

* [[Security Handbook/PAM|PAM (Security Handbook)]]
* [[Pam_ssh_agent_auth|PAM ssh agent module]] article explaining how to install and configure a custom PAM module that authenticates through the SSH public key infrastructure
* The [[Google_Authenticator|Google authenticator]] article explains how to install and use the google authenticator application for authenticating through PAM

== Ссылки ==

* [https://devmanual.gentoo.org/tasks-reference/pam/index.html Working with PAM], раздел руководства разработчика Gentoo


[[Category:Core_system]]
