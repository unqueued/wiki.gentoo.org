<languages/>

{{InfoBox stack
|{{InfoBox homepage|http://www.linux-pam.org/|header=true}}
|{{InfoBox wikipedia|Linux_PAM}}
|{{InfoBox gdoc|PAM}}
}}

PAM или Pluggable Authentication Modules (подключаемые модули аутентификации) — это модульный подход к системе аутентификации. Они позволяют сторонним службам предоставлять модуль аутентификации для обеспечения доступа к службе для систем с поддержкой PAM. Службы, использующие PAM для аутентификации, могут использовать их сразу же, без необходимости дополнительной пересборки.

== Введение ==

На сервере Linux PAM (Pluggable Authentication Modules) могут использоваться для управления аутентификацией (как часть управления предоставления доступа). При использовании PAM службам нет необходимости поддерживать собственную систему аутентификации. Вместо этого они полагаются на модули PAM, доступные в системе. Каждая служба при необходимости может использовать собственную конфигурацию PAM, хотя в большинстве случаев аутентификация выполняется одинаково для множества служб. Вызывая модули PAM, сервисы могут поддерживать двухфакторную аутентификацию «из коробки», сразу же использовать централизованные хранилища аутентификационных средств и многое другое.

PAM предоставляют гибкую модульную архитектуру для следующих служб:

* Управление аутентификацией, проверяющее, является ли пользователь тем, за кого себя выдает.
* Управление учётными записями, проверяющее, что пароль пользователя не истёк или имеет ли пользователь право обращаться к определённому сервису.
* Управление сеансами, выполняющее определённые задачи во время входа или выхода пользователя из системы (аудит, мониторинг файловой системы и так далее).
* Управление паролями, предлагающее интерфейс для сброса пароля и тому подобное.

{{Note|PAM ''не предоставляет'' никаких служб для авторизации. Обычно авторизация выполняется внутри приложения. Некоторые приложения поддерживают авторизацию на основе принадлежности группе (члену группы разрешается авторизация). Распространённым подходом (но не для PAM) для этого является поддержка NSS (Name Service Switch). NSS по своей архитектуре очень похож на PAM. Фактически, на серверах Linux авторизация управляется с помощью библиотек NSS.}}

=== Принципы работы PAM ===

При работе с PAM администраторы понимают принципы, по которым функционирует PAM.

Во-первых, это «независимость от бэк-энда». Приложениям, поддерживающим PAM, нет необходимости учитывать низкоуровневую логику, чтобы работать с бэк-эндами, например, базами данных, службой LDAP, файлами паролей, веб-службами с поддержкой WS-Security или другими ещё неизобретёнными бэк-эндами. Используя PAM, приложения отделяют логику работы бэк-энда от своей. Всё, что им нужно сделать — это вызвать функцию PAM.

Другим принципом является «независимость от конфигурации». Администраторам не нужно знать, как настраивать десятки различных приложений, чтобы заставить их поддерживать аутентификацию через LDAP-сервер. Вместо этого им достаточно воспользоваться одной конфигурационной структурой, предоставляемой PAM.

Последним принципом, являющимся также частью названия PAM, является «подключаемая архитектура». Когда необходимо интегрировать новый бэк-энд, всё, что нужно сделать администратору — это установить библиотеку для этого бэк-энда (большинство модулей используют один файл настроек). Начиная с этого момента модуль становится доступен для использования приложениями. Администраторы могут настроить аутентификацию для использования этого бэк-энда и просто перезапустить приложение.

=== Как работает PAM ===

Приложения, для которых необходимо использование PAM, линкуются с библиотекой PAM (libpam) и могут вызывать нужные функции работы с указанными выше службами. Кроме этого в приложении не нужно ничего специфичного для работы с этими службами реализовывать, так как эту задачу на себя берёт PAM. И когда пользователь захочет аутентифицироваться, скажем, в веб-приложении, то это приложение вызывает PAM (передавая ему идентификатор и, возможно, пароль или запрос) и проверяет возвращаемые данные, чтобы принять решение, аутентифицировался ли пользователь и имеет ли он доступ к приложению. Внутренней задачей PAM является определение, где необходимо аутентифицировать пользователя (например, в центральной базе данных или на LDAP-сервере).

Сильной стороной PAM является то, что для создавать модули PAM для интеграции со службами или приложениями может любой желающий. Если компания выпускает новую службу для аутентификации, всё, что нужно будет сделать, — это предоставить модуль PAM, который будет взаимодействовать с этой службой, после чего любое использующее PAM приложение сможет незамедлительно работать этой службой: нет необходимости что-то пересобирать или улучшать.

== Настройка ==

Another important aspect of PAM is that it supports chaining of multiple modules. Let's look at a PAM configuration file for an unnamed service:

{{FileBox|filename=/etc/pam.d/someservice|title=Example PAM configuration file for a service called "someservice"|1=
# Authentication
auth         required        pam_env.so
auth         required        pam_ldap.so
# Account management
account      required        pam_ldap.so
# Password management
password     required        pam_ldap.so
# Session management
session      optional        pam_loginuid.so
session      required        pam_selinux.so close
session      required        pam_env.so
session      required        pam_log.so level=audit
session      required        pam_selinux.so open multiple
session      optional        pam_mail.so
}}

We see that the configuration file is structured in the four service domains that PAM supports: authentication, account management, password management and session management.

Each of the sections in the configuration file calls one or more PAM modules. For instance, {{Path|pam_env.so}} sets the environment variable which can be used by subsequent modules. The return code provided by the PAM module, together with the control directive (required or optional in the above example), allow PAM to decide how to proceed.

=== Control directives ===

PAM supports the following control directives.

{| class="table"
! Control
! Description
|-
| <code>required</code>
| The provided PAM module must succeed in order for the entire service (such as authentication) to succeed. If a PAM module fails, other PAM modules are still called upon (even though it is already certain that the service itself will be denied).
|-
| <code>requisite</code>
| The provided PAM module must succeed in order for the entire service to succeed. Unlike ''required'', if the PAM module fails, control is immediately handed back and the service itself is denied.
|-
| <code>sufficient</code>
| If the provided PAM module succeeds, then the entire service is granted. The remainder of the PAM modules is not checked. If however the PAM module fails, then the remainder of the PAM modules is handled and the failure of this particular PAM module is ignored.
|-
| <code>optional</code>
| The success or failure of this particular PAM module is only important if it is the only module in the stack.
|}

Chaining of modules allows for multiple authentications to be done, multiple tasks to be performed upon creating a session and more.

=== Managing PAM configuration files ===

As the PAM configuration files control the authentication steps in an application, it is very important to safely manage the configuration files. These are generally stored in {{Path|/etc/pam.d/}}.

In larger enterprises, or security-sensitive systems, any modification of PAM configuration files should be properly audited.

The same goes for the location where the PAM modules themselves are stored ({{Path|/lib/security}} or {{Path|/lib64/security}}).

== PAM и Gentoo ==

Applications that can support PAM conditionally will use the 'pam' USE flag. Although it is possible to run Gentoo systems without PAM (<code>USE="-pam"</code>) the default is to run with PAM support enabled.

== Смотрите также ==

* [[Security Handbook/PAM|PAM (Security Handbook)]]
* The [[Project:PAM]] Gentoo project
* [[Pam_ssh_agent_auth|PAM ssh agent module]] article explaining how to install and configure a custom PAM module that authenticates through the SSH public key infrastructure
* The [[Google_Authenticator|Google authenticator]] article explains how to install and use the google authenticator application for authenticating through PAM

== Ссылки ==

* [https://devmanual.gentoo.org/tasks-reference/pam/index.html Working with PAM], a section inside the Gentoo developer manual


[[Category:Core_system]]
