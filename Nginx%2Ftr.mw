<languages />

{{Metadata|abstract=nginx ufak, güçlü ve yüksek performanslı bir web/ters proxy (reverse proxy) sunucu yazılımıdır. Apache ve lighttpd gibi popüler web sunucu yazılımları için iyi bir alternatiftir.}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://nginx.org/en/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox odoc|http://nginx.org/en/docs/}}
}}

'''nginx''' ufak, güçlü ve yüksek performanslı bir web/ters proxy (reverse proxy) sunucu yazılımıdır. [[Apache]] ve [[lighttpd]] gibi popüler web sunucu yazılımları için iyi bir alternatiftir.

== Kurulum ==

{{Package|www-servers/nginx}} paketini kurmadan önce, kullanabildiği USE bayraklarına göz atalım.

=== Genişletilmiş USE bayrakları ===

Nginx yeteneklerini artırmak için modülleri kullanır. Bu yaklaşımın faydalarını kullanmak için kurulumu sırasında hangi modüllerin kullanılacağını bazı USE setleri ile ayarlayabilirsiniz.

* HTTP ile ilgili modüller <code>NGINX_MODULES_HTTP</code> değişkeniyle,
* E-posta özellikleri ile ilgili modüller <code>NGINX_MODULES_MAIL</code> değişkeniyle,
* Diğer üçüncü parti modüller de <code>NGINX_ADD_MODULES</code> değişkeni ile aktifleştirilebilir.

Bu değişkenler {{Path|/etc/portage/make.conf}} dosyasında tanımlanmalıdır. Detaylı açıklamaları {{Path|[http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/profiles/desc/nginx_modules_http.desc /usr/portage/profiles/desc/nginx_modules_http.desc]}} ve {{Path|[http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/profiles/desc/nginx_modules_mail.desc /usr/portage/profiles/desc/nginx_modules_mail.desc]}} adreslerinde bulunabilir.

Örneğin <code>fastcgi</code> modülünü etkinleştirmek için:

{{FileBox|filename=/etc/portage/make.conf|title=Nginx USE etkinleştirme örneği|lang=bash|1=
NGINX_ADD_HTTP="fastcgi"
}}

=== USE bayrakları ===

{{USEflag|package=www-servers/nginx|desc={{Package|www-servers/nginx}} için seçime bağlı USE bayrakları:
|aio+++AIO desteğini aç
|debug+++Hata ayıklamayı aktifleştir
|http+yes++HTTP desteğini aç
|http-cache+yes++HTTP önbellekleme desteğini aç
|ipv6+yes++IPv6 desteğini ekle
|libatomic+++içindeki atomic işlemleri için libatomic kullan
|luajit+++lua http modülünü kullanmak için {{Package|dev-lang/lua}} yerine {{Package|dev-lang/luajit}} kullan
|pcre+yes++Perl Compatible Regular Expressions desteğini aç
|pcre-jit+++PCRE için JIT desteği
|rtmp+++Nginx tabanlı streaming (yayın) desteği
|ssl+yes++HTTP için HTTPS desteğini, POP3/IMAP/SMTP için SSL/TLS desteğini aç
|vim-syntax+++İlgili vim syntax dosyalarını da ekle 
}}

=== Emerge ===

USE bayraklarıı ayarladıysanız, {{Package|www-servers/nginx}} paketini kurun:

{{Emerge|www-servers/nginx}}

=== Kurulumun onaylanması ===

nginx paketi, servisi durdurmak, başlatmak ve yeniden başlatmak için yardımcı olan bir servis betiği ile gelir. nginx servisini başlatmak için:

{{RootCmd|/etc/init.d/nginx start}}

nginx'in doğru şekilde çalıştığına emin olmak için, web tarayıcınızdan [http://localhost http://localhost] adresine gidebilir veya <tt>curl</tt> gibi bir komut satırı aracını kullanabilirsiniz:

{{Cmd|curl http://localhost}}

==Yapılandırma==

nginx yapılandırması {{Path|/etc/nginx/nginx.conf}} dosyası üzerinde düzenlenir.

=== Tek site erişimi ===

Aşağıdaki örnek, ([[PHP]] gibi) dinamik özellikleri olmayan tek site yapılandırması içindir.

{{FileBox|filename=/etc/nginx/nginx.conf|title=Öntanımlı Gentoo yapılandırması|1=
user nginx nginx;
worker_processes 1;
  
error_log /var/log/nginx/error_log info;
  
events {
        worker_connections 1024;
        use epoll;
}
  
http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
  
        log_format main
                '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $bytes_sent '
                '"$http_referer" "$http_user_agent" '
                '"$gzip_ratio"';
  
        client_header_timeout 10m;
        client_body_timeout 10m;
        send_timeout 10m;
  
        connection_pool_size 256;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 2k;
        request_pool_size 4k;
  
        gzip on;
        gzip_min_length 1100;
        gzip_buffers 4 8k;
        gzip_types text/plain;
  
        output_buffers 1 32k;
        postpone_output 1460;
  
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
  
        keepalive_timeout 75 20;
  
        ignore_invalid_headers on;
  
        index index.html;
  
        server {
                listen 127.0.0.1;
                server_name localhost;
  
                access_log /var/log/nginx/localhost.access_log main;
                error_log /var/log/nginx/localhost.error_log info;
  
                root /var/www/localhost/htdocs;
        }
}
}}

=== Birden çok site erişimi ===

Birden fazla yapılandırma dosyasında daha kolay yönetim sağlamak için <code>include</code> yönergesi kullanılabilir:

{{FileBox|filename=/etc/nginx/nginx.conf|title=Birden fazla site sunumu|1=
user nginx nginx;
worker_processes 1;
   
error_log /var/log/nginx/error_log info;
  
events {
        worker_connections 1024;
        use epoll;
}
http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
  
        log_format main
                '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $bytes_sent '
                '"$http_referer" "$http_user_agent" '
                '"$gzip_ratio"';
  
        client_header_timeout 10m;
        client_body_timeout 10m;
        send_timeout 10m;
  
        connection_pool_size 256;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 2k;
        request_pool_size 4k;
  
        gzip on;
        gzip_min_length 1100;
        gzip_buffers 4 8k;
        gzip_types text/plain;
  
        output_buffers 1 32k;
        postpone_output 1460;
  
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
  
        keepalive_timeout 75 20;
  
        ignore_invalid_headers on;
  
        index index.html;
 
        include /etc/nginx/conf.d/*.conf;
}
}}

{{FileBox|filename=/etc/nginx/conf.d/local.conf|title=Örnek bir site|1=
server {
        listen 127.0.0.1;
        server_name localhost;
  
        access_log /var/log/nginx/localhost.access_log main;
        error_log /var/log/nginx/localhost.error_log info;
  
        root /var/www/localhost/htdocs;
}
}}

{{FileBox|filename=/etc/nginx/conf.d/local-ssl.conf|title=Örnek bir SSL destekli site|1=
server {
    listen 443 ssl;
    server_name host.tld;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_dhparam /etc/ssl/nginx/host.tld.dh4096.pem;
    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;
}
}}

=== PHP desteği  ===

PHP desteğini açmak için aşağıdaki satırları nginx yapılandırma dosyasına ekleyebilirsiniz. Bu örnekte nginx PHP ile iletişimini UNIX soketi üzerinden yapmakta.

{{FileBox|filename=/etc/nginx/nginx.conf|title=PHP desteği örneği|1=
...
http {
...
    server { 
    ...
            location ~ \.php$ {
                       # Olmayan dosyalari test edip 404 hatasi ver
                       # Bu satir olmazsa nginx gelen her .php ile biten istegi incelemeden php-fpm e gonderir
                       try_files $uri =404;
                       include /etc/nginx/fastcgi.conf;
                       fastcgi_pass unix:/run/php-fpm.socket;
           }
    }
}
}}

Bu şekilde çalışabilmek için PHP FastCGI desteği ile (php-fpm) derlenmiş olmalıdır, bu da <code>fpm</code> bayrağı ile sağlanır:

{{RootCmd|echo "dev-lang/php fpm" >> /etc/portage/package.use}}

Ardından PHP'yi <code>fpm</code> USE bayrağıyla tekrar derleyelim:

{{Emerge|dev-lang/php}}
 
{{Note/tr|UNIX soket iletişimi önerilen yöntemdir}}

{{Path|/etc/php/fpm-php5.5/php-fpm.conf}} dosyasını inceleyip aşağıdaki satırı ekleyin:

{{FileBox|filename=/etc/php/fpm-php5.5/php-fpm.conf|title=PHP'yi UNIX soket desteğiyle çalıştırmak|lang=ini|1=
listen = /run/php-fpm.socket
listen.owner = nginx
}}

php-fpm'e ait {{Path|php.ini}} dosyasında zaman dilimini ayarlayın. Bunun için ilgili zaman dilimini aşağıda <code><ZAMAN_DİLİMİ></code> ile belirtilen yere ekleyin:

{{FileBox|filename=/etc/php/fpm-php5.5/php.ini|title=Setup timezone in php.ini|lang=ini|1=
date.timezone = <PUT_TIMEZONE_HERE>
}}

Start the <tt>php-fpm</tt> daemon:

{{RootCmd|/etc/init.d/php-fpm start}}

Add <tt>php-fpm</tt> to the default runlevel:

{{RootCmd|rc-update add php-fpm default}}

Reload <tt>nginx</tt> with changed configuration:

{{RootCmd|/etc/init.d/nginx reload}}

=== IP address access list ===

The next example shows how to allow access to a particular URL (in this case ''/nginx_status'') only to 
* certain hosts (e.g. ''192.0.2.1 127.0.0.1'')
* and IP networks (e.g. ''198.51.100.0/24'')

{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling and configuring an IP access lists for /nginx_status page|1=
http {
    server { 
            location /nginx_status {
                     stub_status on;
                     allow 127.0.0.1/32;
                     allow 192.0.2.1/32;
                     allow 198.51.100.0/24;
                     deny all;
             }
     }
}
}}

=== Basic authentication ===

nginx allows limiting access to resources by validating the user name and password:

{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling and configuring user authentication for the / location|1=
http {
    server { 
            location / {
                   auth_basic           "Authentication failed";
                   auth_basic_user_file conf/htpasswd;
             }
     }
}
}}
 
The {{Path|htpasswd}} file can be generated using:

{{Cmd|openssl passwd}}

=== TLS support ===

It is warmly suggested to support ''only'' TLS and disable known insecure ciphers.

{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling SSL|1=
server {
    listen 443;
    server_name host.tld;
    ssl on;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_dhparam /etc/ssl/nginx/host.tld.dh4096.pem;
}
}}

The ebuild provides stock self signed certificates in {{Path|/etc/ssl/nginx/}}

==== Forward secrecy ====

The diffie-hellman certificate can be created using <tt>openssl</tt>:

{{Cmd|openssl dhparam -out dh4096.pem 4096}}

=== Third party modules  ===

Download third party module source and move it to {{Path|/usr/src}}. Manually compile the selected Nginx module, then add the following line to {{Path|/etc/portage/make.conf}}:

{{FileBox|filename=/etc/portage/make.conf|title=Adding third party module|1=
NGINX_ADD_MODULES="/usr/src/nginxmodule"}}

Rebuild nginx with the third party module enabled:

{{Emerge|nginx}}

== Usage ==

=== Service control ===

==== OpenRC ====

Start nginx:

{{RootCmd|/etc/init.d/nginx start}}

Stop nginx:

{{RootCmd|/etc/init.d/nginx stop}}

Add nginx to the default runlevel:

{{RootCmd|rc-update add nginx default}}

Restart the nginx service: 

{{RootCmd|/etc/init.d/nginx restart}}

== Troubleshooting ==

In case of problems, the following commands can help troubleshoot the situation.

=== Validate configuration ===

Verify that the running nginx configuration has no errors:

{{RootCmd|/usr/sbin/nginx -t|output=<pre>
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
</pre>}}

By running <tt>nginx</tt> with the <code>-t</code> option, it will validate the configuration file without actually starting the <tt>nginx</tt> daemon.

=== Verify processes are running ===

Check if <tt>nginx</tt> processes are running:

{{Cmd|ps aux {{!}} egrep 'nginx{{!}}PID'|output=<pre>
  PID TTY      STAT   TIME COMMAND
26092 ?        Ss     0:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
26093 ?        S      0:00 nginx: worker proces
</pre>}}

=== Verify bound addresses and ports ===

Verify nginx daemon is listening on the right TCP port (such as 80 for HTTP or 443 for HTTPS):

{{RootCmd|netstat -tulpen {{!}} grep :80|output=<pre>
tcp        0      0 127.0.0.1:80            0.0.0.0:*               LISTEN      0          12336835   -26092/nginx: master
</pre>}}

== See also ==

* [[Apache]] - The most popular HTTP server used the Internet.
* [[Lighttpd]] - A fast, lightweight web server.

== External resources ==

* http://nginx.org/en/docs/beginners_guide.html - A <tt>nginx</tt> beginner's guide. Helpful for those who do not know much about <tt>nginx</tt>.
* http://nginx.com/resources/admin-guide/ - The ngnix Admin guide. Helpful for web administrators who have been working in the field.
* http://wiki.nginx.org/Main - nginx Wiki.
* https://github.com/h5bp/server-configs-nginx - H5BP nginx config.

[[Category:Web Servers]]
