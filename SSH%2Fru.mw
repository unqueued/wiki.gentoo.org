<languages />

{{Metadata|abstract=SSH (Secure Shell) — это программа терминала, использующая шифрование, которая заменяет классическую программу telnet в Unix-подобных операционных системах.}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
|{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell, безопасная оболочка) — это программа терминала, использующая шифрование, которая заменяет классическую программу [[Wikipedia:ru:telnet|telnet]] в Unix-подобных операционных системах.

В дополнение к удаленному терминальному доступу, предоставляемому основной программой <tt>ssh</tt>, в SSH был разработан набор программ, включающий в себя <tt>scp</tt> ('''S'''ecure '''C'''opy '''P'''rogram, безопасное копирование) и <tt>sftp</tt> ('''S'''ecure '''F'''ile '''T'''ransfer '''P'''rotocol, безопасный протокол передачи файлов).

Изначально SSH была не свободной программой. Однако сегодня самой популярной и де-факто стандартной версией SSH является реализация OpenSSH из операционной системы [http://www.openbsd.org/ OpenBSD]. Именно данная версия предустановлена на Gentoo.

== Установка ==

=== Проверка установки ===

В большинстве развертываний Gentoo Linux пакет OpenSSH уже установлен в системе. Это можно проверить с помощью запуска команды <tt>ssh</tt>. Если пакет установлен, то будет отображена справка по использованию:

{{Cmd|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

Если справка не будет отображена, то ssh либо испорчен, либо не установлен. Также возможно, что пользователь просто захочет пересобрать OpenSSH с новым набором USE-флагов. В любом случае, продолжим с обзора доступных USE.

=== USE-флаги ===

{{USEflag|package=net-misc/openssh|desc=Пакету {{Package|net-misc/openssh}} доступны следующие USE-флаги:
|bindist
|hpn
|pam
|tcpd
|kerberos
|ldap
|libedit
|selinux
|skey
|static
|X
|X509
}}

=== Установка OpenSSH ===

После включения нужных USE-флагов не забудьте установить (или пересобрать) OpenSSH:

{{emerge|net-misc/openssh|params+=--changed-use}}

== Запуск OpenSSH ==

=== Сервер ===

Добавьте openssh в уровень запуска default, если это ещё не было сделано:

{{RootCmd|rc-update add sshd default}}

Запустим службу sshd с помощью команды:

{{RootCmd|/etc/init.d/sshd start}}

Сервером OpenSSH можно управлять, как и любой другой службой [[OpenRC]]:

{{RootCmd|/etc/init.d/sshd start
|/etc/init.d/sshd stop
|/etc/init.d/sshd restart}}

{{Note/ru|Активные SSH-подключения к серверу не обрываются при вводе команды <code>/etc/init.d/sshd restart</code>.}}

== Настройка ==

=== Create keys ===

Работа безопасной оболочки в SSH основана на использовании криптографических ключей, применяемых для шифрования, дешифрования и хэширования.

Системные ключи генерируются при первом запуске службы SSH. Ключи можно сгенерировать заново с помощью команды <tt>ssh-keygen</tt>.

{{Important|Замените <code>SecretPassphrase</code> в примерах ниже собственной парольной фразой.}}

Чтобы сгенерировать ключ, который будет использоваться для протокола SSH версии 1 (обычно он больше не используется; он является устаревшим и заменен протоколом версии 2):

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "<SecretPassphrase>"}}

Чтобы сгенерировать ключ, который будет использоваться для протокола SSH версии 2 (алгоритмы DSA И RSA):

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N "<SecretPassphrase>"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "<SecretPassphrase>"}}

=== Настройка сервера ===

Настройки сервера SSH обычно хранятся в файле {{Path|/etc/ssh/sshd_config}}, хотя возможно провести дополнительную настройку в файле OpenRC {{Path|/etc/conf.d/sshd}}, включая изменение местоположения конфигурационного файла. Для более детальной информации о том, как настроить сервер, смотрите [[man page|man-страницу]] ''sshd_config''.

Вы также можете изучить [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Руководство OpenSSH Свена] для настройки, ориентированной на безопасность.

=== Настройка клиента ===

Клиент <tt>ssh</tt> и относящиеся к нему программы (<tt>scp</tt>, <tt>sftp</tt> и другие) настраиваются в следующих файлах
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

 Для более детальной информации прочтите документацию для {{Path|ssh_config}}.

{{Cmd|man ssh_config}}

=== Беспарольная аутентификация ===

Полезна для работы с [[git]]-сервером.

==== Клиент ====

На стороне клиента запустите следующую команду:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.) .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== Сервер ====

Проверьте, что аккаунт пользователя существует на сервере, затем поместите содержимое клиентского файла {{Path|id_rsa.pub}} в файл {{Path|~/.ssh/authorized_keys}}, расположенный в домашнем каталоге пользователя.

==== Проверка на одной машине ====

Вышеописанную процедуру можно протестировать локально:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

== Устранение проблем ==

Существует 3 различных уровня отладки. Параметр <code>-v</code> заставляет ssh выводить отладочные сообщения о своей работе. Это полезно при отладке соединения, проблемах аутентификации и настройки. Несколько параметров <code>-v</code> увеличивают подробность сообщений. Максимальный уровень подробности равен трём.

{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== Death of long-lived connections ===

Многие устройства доступа к Интернету выполняют преобразование сетевых адресов ([[NAT]]). Это процесс, который позволяет устройствам из частной сети, которая обычно находится дома или на работе, получить доступ к другим сетям (например, к Интернету) не смотря на то, что для этой сети выделен только один IP-адрес. К сожалению, не все NAT-устройства одинаково устроены, и некоторые из них могут обрывать долгоживущие TCP-соединения, в том числе, используемые в SSH. Обычно это обнаруживается при внезапной потере возможности взаимодействия с удаленным сервером, хотя сама программа <tt>ssh</tt> свою работу не прекращала.

Чтобы решить данную проблему, можно настроить клиенты и сервера OpenSSH таким образом, чтобы они посылали незаметные сообщения «keep alive», нацеленные на поддержку и подтверждение использования соединения.
* Чтобы разрешить keep alive ''всем клиентам вашего сервера'' установите в файле {{Path|/etc/ssh/sshd_config}} параметр <code>ClientAliveInterval 30</code> (или другое значение в секундах).
* Чтобы разрешить keep alive ''всем серверам, к которым подключается ваш клиент'', установите в файле {{Path|/etc/ssh/ssh_config}} параметр <code>ServerAliveInterval 30</code> (или другое значение в секундах).

=== Проброс X11, но нет никакого проброса или туннелирования ===

'''Проблема''': После того, как вы сделали необходимые изменения в файлах конфигурации, чтобы разрешить проброс X11, вы обнаруживаете, что приложения X запускаются на сервере, а не передаются клиенту.

'''Решение''': Что скорее всего, в процессе входа через SSH на удаленный сервер или узел переменная <code>$DISPLAY</code> либо сбрасывается, либо устанавливается ''после того'', как её установит сеанс SSH.

Чтобы проверить этот вариант, послу удаленного входа выполните следующее:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

Должно вывестись что-то типа <code>localhost:10.0</code> или <code>localhost2.local:10.0</code> (если на стороне сервера включён параметр <code>X11UseLocalhost no</code>). Если обычное «:0.0» не выводится, проверьте, что переменная <code>$DISPLAY</code> не сбрасывается или не переинициализируется в файле {{Path|$HOME/.bash_profile}}. Если это так, то удалите или закомментируйте инициализацию <code>$DISPLAY</code>, чтобы не дать командам в {{Path|~/.bash_profile}} выполниться в процессе входа SSH:

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

{{Note|Be sure to substitute "larry" in the command above with the proper username.}}

A trick that works to complete this task would be to define an alias within the users' {{Path|~/.bashrc}} file.

== Intrusion prevention ==

SSH is a commonly attacked service. Tools such as [[sshguard]] and [[fail2ban]] monitor logs and black list remote users who have repeatedly attempted, yet failed to login. Utilize them as needed to secure a frequently attacked system.

== See also ==

* [[Keychain|Gentoo Linux Keychain Guide]]
* [[autossh]] - Detects when SSH connections drop and auto-reconnects.
* [[SCP]] - A secure copy program that comes with the SSH suite.
* [[SFTP]] - Secure File Transfer Protocol client that comes with the SSH suite.
* [[SSHFS]] - A FUSE based SSH powered mount client.

== External resources ==

* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo documentation, have a look at all 3 parts.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
