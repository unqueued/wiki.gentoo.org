<languages />

{{Metadata|abstract=SSH (Secure Shell) — это программа терминала, использующая шифрование, которая заменяет классическую программу telnet в Unix-подобных операционных системах.}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
|{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell, безопасная оболочка) — это программа терминала, использующая шифрование, которая заменяет классическую программу [[Wikipedia:ru:telnet|telnet]] в Unix-подобных операционных системах.

В дополнение к удаленному терминальному доступу, предоставляемому основной программой <tt>ssh</tt>, в SSH был разработан набор программ, включающий в себя <tt>scp</tt> ('''S'''ecure '''C'''opy '''P'''rogram, безопасное копирование) и <tt>sftp</tt> ('''S'''ecure '''F'''ile '''T'''ransfer '''P'''rotocol, безопасный протокол передачи файлов).

Изначально SSH была не свободной программой. Однако сегодня самой популярной и де-факто стандартной версией SSH является реализация OpenSSH из операционной системы [http://www.openbsd.org/ OpenBSD]. Именно данная версия предустановлена на Gentoo.

== Установка ==

=== Проверка установки ===

В большинстве развертываний Gentoo Linux пакет OpenSSH уже установлен в системе. Это можно проверить с помощью запуска команды <tt>ssh</tt>. Если пакет установлен, то будет отображена справка по использованию:

{{Cmd|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

Если справка не будет отображена, то ssh либо испорчен, либо не установлен. Также возможно, что пользователь просто захочет пересобрать OpenSSH с новым набором USE-флагов. В любом случае, продолжим с обзора доступных USE.

=== USE-флаги ===

{{USEflag|package=net-misc/openssh|desc=Пакету {{Package|net-misc/openssh}} доступны следующие USE-флаги:
|bindist
|hpn
|pam
|tcpd
|kerberos
|ldap
|libedit
|selinux
|skey
|static
|X
|X509
}}

=== Emerge OpenSSH ===

After changing the necessary USE flags, do not forget to install (or rebuild) OpenSSH:

{{emerge|net-misc/openssh|params+=--changed-use}}

== Запускаем OpenSSH ==

=== Сервер ===

Add openssh to the default runlevel if this has not been done already:

{{RootCmd|rc-update add sshd default}}

Start the sshd daemon with:

{{RootCmd|/etc/init.d/sshd start}}

Сервер OpenSSH можно контролировать, как и любой другой сервис, контролируемый [[OpenRC]]:

{{RootCmd|/etc/init.d/sshd start
|/etc/init.d/sshd stop
|/etc/init.d/sshd restart}}

{{Note|Active SSH connections to the server remain unaffected when issuing <tt>/etc/init.d/sshd restart</tt>.}}

== Конфигурация ==

=== Create keys ===

In order to provide a secure shell, cryptographic keys are used to manage the encryption, decryption, and hashing functionalities offered by SSH.

On the first start of the SSH service, system keys will be generated. Keys can be (re)generated using the <tt>ssh-keygen</tt> command.

{{Important|Be sure to substitute <code><SecretPassphrase></code> in the following examples with a personal passphrase.}}

To generate the key used for SSH protocol version 1 (which usually is not enabled anymore; it has been deprecated in favor of protocol version 2) use:

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "<SecretPassphrase>"}}

Для генерации ключей протокола SSH версии 2 (алгоритмы DSA и RSA):

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N "<SecretPassphrase>"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "<SecretPassphrase>"}}

=== Конфигурация сервера ===

Сервер SSH обычно конфигурируется в файле {{Path|/etc/ssh/sshd_config}}, хотя возможно провести дополнительную конфигурацию в файле OpenRC {{Path|/etc/conf.d/sshd}}, включая изменение местоположения файла конфигурации. Для более детальной информации о том, как сконфигурировать сервер, смотри [[man page|man-страницу]] ''sshd_config''.

Users should study [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Sven's OpenSSH guide] for a security focused configuration.

=== Конфигурация клиента ===

The <tt>ssh</tt> client and related programs (<tt>scp</tt>, <tt>sftp</tt>, etc.) can be configured using the following files:
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

For more information read the {{Path|ssh_config}} manual:

{{Cmd|man ssh_config}}

=== Беспарольная аутентификация ===

Полезна для работы с [[git]] сервером.

==== Клиент ====

На вашем клиенте запустите

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.) .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== Сервер ====

Make sure an account for the user exists on the server, and then place the clients' {{Path|id_rsa.pub}} file into the server's {{Path|~/.ssh/authorized_keys}} file in the user's home directory.

==== Single machine testing ====

Вышеописанную процедуру можно протестировать локально:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

== Если что-то пошло не так ==

There are 3 different levels of debug modes that can help troubleshooting issues. With the <code>-v</code> option SSH prints debugging messages about its progress. This is helpful in debugging connection, authentication, and configuration problems. Multiple <code>-v</code> options increase the verbosity. Maximum verbosity is three levels deep.

{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== Death of long-lived connections ===

Many internet access devices perform Network Address Translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network. Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, even though the <tt>ssh</tt> client program has not exited.

In order to resolve the issue, OpenSSH clients and servers can be configured to send a 'keep alive', or invisible message aimed at maintaining and confirming the live status of the link.
* To enable keep alive ''for all clients connecting to your local server'', set <code>ClientAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/sshd_config}} file.
* To enable keep alive ''for all servers connected to by your local client'', set <code>ServerAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/ssh_config}} file.

=== X11 forwarding, not forwarding, or tunneling ===

'''Problem''': After having made the necessary changes to the configuration files for permitting X11 forwarding, it is discovered X applications are executing on the server and are not being forwarded to the client.

'''Solution''': What is likely occurring during SSH login into the remote server or host, the <code>$DISPLAY</code> variable is either being unset or is being set ''after'' the SSH session sets it.

Test for this scenario perform the following after logging in remotely:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

The output should be something similar to <code>localhost:10.0</code> or <code>localhost2.local:10.0</code> using server side <code>X11UseLocalhost no</code> setting. If the usual <code>:0.0</code> is not displayed, check to make sure the <code>$DISPLAY</code> variable within {{Path|~/.bash_profile}} is not being unset or re-initializing. If it is, remove or comment out any custom initialization of <code>$DISPLAY</code> to prevent the code in {{Path|~/.bash_profile}} from executing during a SSH login:

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

{{Note|Be sure to substitute "larry" in the command above with the proper username.}}

A trick that works to complete this task would be to define an alias within the users' {{Path|~/.bashrc}} file.

== Intrusion prevention ==

SSH is a commonly attacked service. Tools such as [[sshguard]] and [[fail2ban]] monitor logs and black list remote users who have repeatedly attempted, yet failed to login. Utilize them as needed to secure a frequently attacked system.

== See also ==

* [[Keychain|Gentoo Linux Keychain Guide]]
* [[autossh]] - Detects when SSH connections drop and auto-reconnects.
* [[SCP]] - A secure copy program that comes with the SSH suite.
* [[SFTP]] - Secure File Transfer Protocol client that comes with the SSH suite.
* [[SSHFS]] - A FUSE based SSH powered mount client.

== External resources ==

* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo documentation, have a look at all 3 parts.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
