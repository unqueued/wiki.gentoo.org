<languages />

{{Metadata|abstract=SSH (Secure Shell) — это программа терминала, использующая шифрование, которая заменяет классическую программу telnet в Unix-подобных операционных системах.}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
|{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell, безопасная оболочка) — это программа терминала, использующая шифрование, которая заменяет классическую программу [[Wikipedia:ru:telnet|telnet]] в Unix-подобных операционных системах.

In addition to remote terminal access provided by the main {{c|ssh}} binary, the SSH suite of programs has grown to include other tools such as {{c|scp}} ('''S'''ecure '''C'''opy '''P'''rogram) and {{c|sftp}} ('''S'''ecure '''F'''ile '''T'''ransfer '''P'''rotocol).

Изначально SSH была не свободной программой. Однако сегодня самой популярной и де-факто стандартной версией SSH является реализация OpenSSH из операционной системы [http://www.openbsd.org/ OpenBSD]. Именно данная версия предустановлена на Gentoo.

== Установка ==

=== Проверка установки ===

Most deployments of Gentoo Linux will already have OpenSSH installed on the system. This can be checked by running the {{c|ssh}} command. If it is installed a usage statement should be printed:

{{Cmd|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

If no usage statement is printed {{c|ssh}} is either corrupted or not installed. It is also possible that a user is simply rebuilding OpenSSH to include a new USE configuration. Whatever the case, proceed on to view possible USE settings.

=== USE флаги ===

{{USEflag|package=net-misc/openssh}}

=== Emerge ===

После включения нужных USE-флагов не забудьте установить (или пересобрать) OpenSSH:

{{emerge|net-misc/openssh|params+=--changed-use}}

== Конфигурация ==

=== Создание ключей ===

Работа безопасной оболочки в SSH основана на использовании криптографических ключей, применяемых для шифрования, дешифрования и хэширования.

Системные ключи генерируются при первом запуске службы SSH. Ключи можно сгенерировать заново с помощью команды {{c|ssh-keygen}}.

Чтобы сгенерировать ключ, который будет использоваться для протокола SSH версии 1 (обычно он больше не используется; он является устаревшим и заменен протоколом версии 2):

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N ""}}

Чтобы сгенерировать ключ, который будет использоваться для протокола SSH версии 2 (алгоритмы DSA И RSA):

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N ""
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""}}

=== Настройка сервера ===

Настройки сервера SSH обычно хранятся в файле {{Path|/etc/ssh/sshd_config}}, хотя возможно провести дополнительную настройку в файле OpenRC {{Path|/etc/conf.d/sshd}}, включая изменение местоположения конфигурационного файла. Для более детальной информации о том, как настроить сервер, смотрите [[man page|man-страницу]] ''sshd_config''.

Вы также можете изучить [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Руководство OpenSSH Свена] для настройки, ориентированной на безопасность.

=== Настройка клиента ===

Клиент {{c|ssh}} и относящиеся к нему программы ({{c|scp}}, {{c|sftp}} и другие) настраиваются в следующих файлах:

* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

Для более детальной информации прочтите документацию для {{Path|ssh_config}}.

{{Cmd|man ssh_config}}

=== Беспарольная аутентификация ===

Полезна для работы с [[git]]-сервером.

==== Клиент ====

На стороне клиента запустите следующую команду:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.) .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== Сервер ====

Проверьте, что аккаунт пользователя существует на сервере, затем поместите содержимое клиентского файла {{Path|id_rsa.pub}} в файл {{Path|~/.ssh/authorized_keys}}, расположенный в домашнем каталоге пользователя.

==== Проверка на одной машине ====

Вышеописанную процедуру можно протестировать локально:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

=== Предотвращение вторжений ===

SSH — это служба, которая часто подвергается атаке. Некоторые инструменты (например, [[sshguard/ru|sshguard]] и [[fail2ban]]) отслеживают логи и заносят в чёрный список удаленных пользователей после нескольких неудачных попыток войти в систему. Использование подобных программ необходимо для укрепления защиты систем, подвергающихся частым атакам.

== Использование ==

=== Сервисы ===

==== OpenRC ====

Добавьте OpenSSH демон в уровень запуска по умолчанию:

{{RootCmd|rc-update add sshd default}}

Запустим службу sshd с помощью команды:

{{RootCmd|rc-service sshd start}}

Сервером OpenSSH можно управлять, как и любой другой [[OpenRC]]-управляемой службой:

{{RootCmd
|rc-service sshd start
|rc-service sshd stop
|rc-service sshd restart
}}

{{Note|Активные SSH подключения к серверу не обрываются при вводе команды {{c|rc-service sshd restart}}.}}

==== Systemd ====

Для того чтобы демон OpenSSH загружался при запуске системы:

{{RootCmd|systemctl enable sshd.service|output=<pre>
Created symlink from /etc/systemd/system/multi-user.target.wants/sshd.service to /usr/lib64/systemd/system/sshd.service.
</pre>}}

Для запуска OpenSSH демона:

{{RootCmd|systemctl start sshd.service}}

To check if the service has started:

{{RootCmd|systemctl status sshd.service}}

== Устранение проблем ==

Существует 3 различных уровня отладки. Параметр <code>-v</code> заставляет ssh выводить отладочные сообщения о своей работе. Это полезно при отладке соединения, проблемах аутентификации и настройки. Несколько параметров <code>-v</code> увеличивают подробность сообщений. Максимальный уровень подробности равен трём.

{{Cmd
|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv
}}

=== Обрыв долгоживущих соединений ===

Многие устройства доступа к Интернету выполняют преобразование сетевых адресов ([[NAT]]). Это процесс, который позволяет устройствам из частной сети, которая обычно находится дома или на работе, получить доступ к другим сетям (например, к Интернету) не смотря на то, что для этой сети выделен только один IP-адрес. К сожалению, не все NAT-устройства одинаково устроены, и некоторые из них могут обрывать долгоживущие TCP-соединения, в том числе, используемые в SSH. Обычно это обнаруживается при внезапной потере возможности взаимодействия с удаленным сервером, хотя сама программа {{c|ssh}} свою работу не прекращала.

Чтобы решить данную проблему, можно настроить клиенты и сервера OpenSSH таким образом, чтобы они посылали незаметные сообщения «keep alive», нацеленные на поддержку и подтверждение использования соединения:

* Чтобы включить поддержку keep alive ''для всех клиентов подключающихся к вашему локальному серверу'' установите в файле {{Path|/etc/ssh/sshd_config}} параметр <code>ClientAliveInterval 30</code> (или другое значение в секундах).
* Чтобы включить поддержку keep alive ''для всех серверов подключенных к вашему локальному клиенту'', установите в файле {{Path|/etc/ssh/ssh_config}} параметр <code>ServerAliveInterval 30</code> (или другое значение в секундах).

=== Проброс X11, но нет никакого проброса или туннелирования ===

'''Проблема''': После того, как вы сделали необходимые изменения в файлах конфигурации, чтобы разрешить проброс X11, вы обнаруживаете, что приложения X запускаются на сервере, а не передаются клиенту.

'''Solution''': What is likely occurring during SSH login into the remote server or host, the <var>DISPLAY</var> variable is either being unset or is being set ''after'' the SSH session sets it.

Чтобы проверить этот вариант, послу удаленного входа выполните следующее:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

Должно вывестись что-то типа <code>localhost:10.0</code> или <code>localhost2.local:10.0</code> (если на стороне сервера включён параметр <code>X11UseLocalhost no</code>). Если обычное «:0.0» не выводится, проверьте, что переменная <var>DISPLAY</var> не сбрасывается или не переинициализируется в файле {{Path|$HOME/.bash_profile}}. Если это так, то удалите или закомментируйте инициализацию переменной <var>DISPLAY</var>, чтобы не дать командам в {{Path|~/.bash_profile}} выполниться в процессе входа SSH:

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

Не забудьте заменить <code>larry</code> в команде на подходящее имя пользователя.

Ещё одно решение — создать алиас в файле {{Path|~/.bashrc}}.

== Смотрите также ==

* [[Keychain/ru|Руководство Gentoo Linux Keychain]]
* [[autossh]] — обнаруживает обрыв SSH-соединения и автоматически переподключается.
* [[SCP]] — программа для безопасного копирования, поставляемая вместе с набором программ SSH.
* [[SFTP]] — клиент протокола безопасной передачи файлов, поставляемый вместе с набором программ SSH.
* [[SSHFS]] — клиент для монтирования FUSE-разделов по SSH.

== Ссылки ==

* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] — документация разработчика Gentoo.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] — документация Gentoo, прочитайте все три части.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
