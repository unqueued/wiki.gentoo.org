<languages />

{{Metadata|abstract=SSH (Secure Shell) это программа терминала, использующая шифрование, которая заменяет классическую программу telnet на Unix и подобных ей операционных системах.}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) это программа терминала, использующая шифрование, которая заменяет классическую программу [[Wikipedia:telnet|telnet]] на Unix и подобных ей операционных системах.

Кроме удаленного терминального доступа (который предоставляет главная программа '''ssh'''), пакет программ SSH вырос, и включает, например, '''scp''' (от слов Secure CoPy - безопасное копирование), и '''sftp''' (от слов Secure File Transfer Protocol - безопасный протокол передачи файлов).

Изначально SSH была не свободной программой. Однако сегодня самой популярной и де-факто стандартной версией SSH является реализация OpenSSH из операционной системы [http://www.openbsd.org/ OpenBSD]. Именно данная версия предустановлена на Gentoo.

== Установка ==

Большинство развернутых систем уже имеют установленный OpenSSH (из-за пакета {{Package|net-misc/openssh}}). Данный пакет использует следующие USE флаги

{{USEflag|package=net-misc/openssh
|bindist
|hpn
|pam
|tcpd
|kerberos
|ldap
|libedit
|selinux
|skey
|static
|X
|X509
}}

После изменения USE флагов не забудьте пересобрать OpenSSH:

{{emerge|net-misc/openssh}}

== Запускаем OpenSSH ==

=== Сервер ===

Добавьте openssh к уровню запуска по умолчанию, если вы этого еще не сделали.

{{RootCmd|rc-update add sshd default}}

Запусти демон sshd с помощью команды:

{{RootCmd|/etc/init.d/sshd start}}

Сервер OpenSSH можно контролировать, как и любой другой сервис, контролируемый [[OpenRC]]:

{{RootCmd|/etc/init.d/sshd start
|/etc/init.d/sshd stop
|/etc/init.d/sshd restart}}

{{Note/ru|Активные SSH подключения не обрываются при вводе команды <code>/etc/init.d/sshd restart</code>.}}

== Конфигурация ==

=== Создание ключей ===

Чтобы использовать безопасную оболочку, для шифрования, дешифрования и хэширования, программой SSH используются криптографические ключи. 

При первом запуске сервиса SSH будут сгенерированы системные ключи. Ключи можно сгенерировать заново (перегенерировать), используя команду <code>ssh-keygen</code>.

{{Note/ru|Замените <code>SecretPassphrase</code> в примерах ниже вашей собственной парольной фразой.}}

Для генерации ключа, который будет использоваться для протокола SSH версии 1 (который обычно выключен, так как он не рекомендуется к использования в пользу протокола версии 2):

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "SecretPassphrase"}}

Для генерации ключей протокола SSH версии 2 (алгоритмы DSA и RSA):

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N "SecretPassphrase"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "SecretPassphrase"}}

=== Конфигурация сервера ===

Сервер SSH обычно конфигурируется в файле {{Path|/etc/ssh/sshd_config}}, хотя возможно провести дополнительную конфигурацию в файле OpenRC {{Path|/etc/conf.d/sshd}}, включая изменение местоположения файла конфигурации. Для более детальной информации о том, как сконфигурировать сервер, смотри [[man page|man-страницу]] ''sshd_config''.

Вы также можете изучить этот [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html гайд] для конфигурации, ориентированной на безопасность.

=== Конфигурация клиента ===

Клиент '''ssh''' и относящиеся к нему программы ('''scp''', '''sftp''' и другие) конфигурируются в следующих файлах
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

 Для более детальной информации смотри документацию по <code>ssh_config</code>.

{{Cmd|man ssh_config}}

=== Беспарольная аутентификация ===

Полезна для работы с [[git]] сервером.

==== Клиент ====

На вашем клиенте запустите

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.) .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== Сервер ====

Проверьте, что аккаунт пользователя существует на сервере, а затем разместите клиентский файл {{Path|id_rsa.pub}} в файл {{Path|~/.ssh/authorized_keys}}.

==== Проверка на одной машине ====

Вышеописанную процедуру можно протестировать локально:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

== Если что-то пошло не так ==

Существует 3 различных уровня отладки. ''-v'' заставляет ssh печатать отладочные сообщения о своей работе. Это полезно при отладке соединения, проблемах с аутентификацией и конфигурацией. Несколько опций -v увеличивают количество сообщений. Максимально можно ввести 3 буквы v.

{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== Обрыв долгоживущих соединений ===

Многие устройства доступа к Интернету выполняют преобразование сетевых адресов ([[NAT]]). Это процесс, который позволяет устройствам в частной сети, такой, какая обычно находится дома или на работе, получить доступ к другим сетям, например, к Интернету, несмотря на то, что у всей сети есть только один IP адрес. Однако не все NAT-устройства одинаковы, и некоторые из них могут обрывать долгоживущие TCP-соединения, например, такие, которые используются SSH. Обычно это приводит к внезапной потере возможности взаимодействия с удаленным сервером, хотя программа '''ssh''' не прекращала свою работу.

Чтобы решить данную проблему, клиенты и сервера OpenSSH могут быть сконфигурированы посылать специальные невидимые сообщения 'keep alive', нацеленные на поддержку и подтверждение использования соединения.
* Для разрешения keep alive '''для всех клиентов, подсоединенных к вашему локальному серверу''', установите ''ClientAliveInterval 30'' (или некоторое другое значение, в секундах) в файле {{Path|/etc/ssh/sshd_config}}.
* Для разрешения keep alive '''для всех серверов, подсоединенных к вашему локальному клиенту''', установите ''ServerAliveInterval 30'' (или некоторое другое значение, в секундах) в файле {{Path|/etc/ssh/ssh_config}}.

=== X11 Forwarding, а не Forwarding или Tunneling! ===

<b>Проблема</b>: После того, как вы сделали необходимые изменения в файлах конфигурации, чтобы разрешить X11 Forwarding, вы увидите, что ваши X-приложения исполняются на сервере, а не передаются клиенту.

<b>Решение</b>: Что скорее всего происходит в процессе логина SSH на удаленный сервер или хост - переменная <code>$DISPLAY</code> либо не установлена, либо устанавливается после того, как ее установит сессия SSH.

Проверьте данный сценарий, после удаленного логина:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

Вы должны получить что-то похожее на "localhost:10.0", либо "localhost2.local:10.0", используя настройку сервера <code>X11UseLocalhost no</code>.  Если вы получаете обычное ":0.0", проверьте, что вы не разыменовываете и не инициализируете переменную <code>$DISPLAY</code> в {{Path|$HOME/.bash_profile}}. Если да, то удалите, либо закомментируйте свою инициализацию <code>$DISPLAY</code>, либо не дайте файлу {{Path|bash_profile}} выполниться в процессе логина SSH:

{{Cmd|ssh -t me@localhost2 bash --noprofile}}

Решением будет создать алиас в {{Path|bashrc}}

== Смотри также ==
* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Документация Gentoo-разработчика
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Документация Gentoo, просмотрите все 3 части.
* [KeyChain|Гайд по авторизации по ключам Gentoo Linux]
* [[autossh]] - Определяет, когда соединение SSH обрывается, и заново подсоединяется.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
