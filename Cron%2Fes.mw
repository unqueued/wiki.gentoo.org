<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

En este artículo se describe como configurar y utilizar los demonios cron en Gentoo Linux.

== Aspectos básicos de cron ==

=== ¿Qué hace cron? ===

Cron es un demonio que ejecuta tareas de manera programada basado en la configuración de la orden <tt>crontab</tt>. Cumple esta tarea despertando cada minuto y revisando la existencia de trabajos de cron en las crontabs de los usuarios. 

{{Note|Observe que <tt>crontab</tt> es a la vez el nombre de la lista de trabajos de cron y el nombre de la orden usada para modificar esta lista.}}

=== El cron de facto ===

Existen varias implementaciones de cron que se pueden elegir en Portage. Todas ofrecen un interfaz similar, el uso de la orden <tt>crontab</tt> o una orden parecida. Existe una herramienta relacionada llamada Anacron, que trabaja junto a cron en sistemas que no están encendidos de forma continua. 

Vale la pena mencionar que los paquetes disponibles de cron dependen de {{Package|sys-process/cronbase}}. Este paquete técnicamente no aparece en las dependencias de los paquetes cron, pero ofrece la funcionalidad de tipo cron de la que la mayoría de los usuarios disfrutan. 

Antes de empezar a trabjar con cron, se debe seleccionar una implementación adecuada. En este artículo se ofrece información para cada implementación de cron disponible en Gentoo Linux.

== ¿Qué cron es adecuado para el trabajo? ==

=== vixie-cron ===

Vixie cron es un cron con muchas características, basado en el cron SysV. Cada usuario tiene su propio crontab y le está permitido especificar variables de entorno dentro de su crontab. A diferencia de
las demás variantes de cron, también ofrece soporte para SELinux y PAM. Soporta menos plataformas que Dcron, pero más que Fcron. 

Características de {{Package|sys-process/vixie-cron}}: 

* Soporte para SELinux
* Soporte para PAM ({{Path|/etc/security/limits.conf}})
* Definir variables de entorno en las crontabs (PATH, SHELL, HOME, etc.)
* Cada usuario tiene una crontab personal, el acceso se controla mediante {{Path|cron.allow}} y {{Path|cron.deny}} 

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) es un proyecto derivado de vixie-cron realizado por [https://fedorahosted.org/cronie/wiki Fedora]. Debido a que es una derivación de vixie-cron, ofrece las mismas características que éste. Además cronie incluye una implementación de anacron que se puede habilitar mediante el ajuste USE <code>anacron</code>.

=== dcron (El cron de Dillon) ===

Dcron pretende ser una implementación sencilla, elegante y segura de cron. No permite especificar variables de entorno en las crontabs y todos los trabajos cron se ejecutan desde {{Path|/bin/sh}}. Al igual que vixie cron, cada usuario tiene su propia crontab. 

Características de {{Package|sys-process/dcron}}: 

* Rápido, sencillo y sin características innecesarias
* El acceso a <tt>crontab</tt> se limita al grupo cron, en otras palabras, no requiere capacidades externas

=== fcron ===

Fcron pretende sustituir a vixie cron y anacron. Su diseño toma en cuenta los sistemas que no están encendidos continuamente y está repleto de características adicionales. Tiene restricciones para
iniciar los trabajos, control del orden de ejecución, la posibilidad de asignar valores "nice" (prioridades) a los trabajos y de ejecutar trabajos al arrancar el sistema. Eche un vistazo a la [http://fcron.free.fr/ página oficial de fcron] para obtener más información. 

Características de {{Package|sys-process/fcron}}: 

* Diseñado para funcionar en sistemas que no están constantemente encendidos, esto es, puede ejecutar una tarea después de reiniciar la máquina si no se ejecutó en el momento en el que estaba programada
* Configuración de variables de entorno y muchas otras opciones en las crontabs
* Sintaxis mejorada para crontabs con soporte de muchas características nuevas
* Cada usuario puede tener una crontab personal, el acceso se controla con los ficheros {{Path|cron.allow}} y {{Path|cron.deny}}
* Sintaxis mejorada de crontab con soporte para muchas características nuevas


=== bcron ===

Bcron es un sistema cron nuevo, diseñado para operar de manera segura. Para esto el sistema se divide en varios programas separados, cada uno responsable de una tarea distinta con comunicaciones estrictamente controladas entre ellas. El interfaz de
usuario es un reemplazo exacto para programas similares (como vixie-cron), aunque la parte interna es muy diferente. Para más información vea la página de bcron en [http://untroubled.org/bcron http://untroubled.org/bcron]. 

Características de {{Package|sys-process/bcron}}: 

* Reemplazo exacto de vixie-cron
* Diseño multiproceso
* Soporte nativo de horario de verano

=== anacron ===

Anacron no es un demonio cron, es una aplicación que funciona conjuntamente con uno. Ejecuta tareas a intervalos especificados en días y no asume que el sistema está encendido de manera continua. Ejecuta las tareas que no
pudieron ejecutarse si el sistema estaba apagado. Anacron normalmente
requiere un demonio cron para ejecutarlo diariamente.

== Utilizar cron ==

== Instalación ==

Elija la implementación de cron adecuada al trabajo y haga emerge de ella.

{{Emerge|dcron}}

Asegúrese de que el demonio cron elegido se ha añadido al proceso init del sistema. Si no se realiza este paso, el demonio cron no podrá realizar su trabajo.
{{RootCmd|/etc/init.d/dcron start |rc-update add dcron default}}

Opcionalmente, si  '''no''' se ha instalado Fcron, la instalación de Anacron como auxiliar del demonio cron puede ser una sabia elección. 

{{Emerge|anacron}}

De nuevo, no olvide añadir anacron al proceso init del sistema.
{{RootCmd|/etc/init.d/anacron start |rc-update add anacron default}}

=== Crontab del sistema ===

Los mensajes que se indican después de la instalación de algunos de estos paquetes cron indican al usuario que debe lanzar la orden <tt>crontab /etc/crontab</t>. El fichero {{Path|/etc/crontab}} es la "crontab del sistema". Una instalación de cron lo usa junto a {{Package|sys-process/cronbase}} para ejecutar los guiones que se encuentran en {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}. Observe que solo vixie-cron y cronie programan las tareas en {{Path|/etc/crontab}} de forma automática. Los usuarios de dcron y fcron deberán ejecutar <tt>crontab /etc/crontab</tt> cada vez que hagan cambios al fichero {{Path|/etc/crontab}}.

Por favor, observe que los trabajos programados en la crontab del sistema puede que no aparezcan en la lista de trabajos cron mostrados cuando se lanza <tt>crontab -l</tt> . 

Por supuesto, los usuarios pueden elegir no usar ninguna crontab del sistema. Si se ha elegido dcron o fcron, '''no''' lance <tt>crontab /etc/crontab</tt>. Si se ha elegido vixie-cron, cronie o bcron, se deben comentar todas las líneas de {{Path|/etc/crontab}}. 

Una forma fácil y rápida de comentar todas las líneas en un fichero es mediante la orden sed. Lance la siguiente orden para comentar todas las líneas en {{Path|etc/crontab}}
{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Dar acceso a cron a usuarios en los que se confía ===

Para que aquéllos usuarios que no sean root tengan acceso al demonio cron, se debe leer esta sección, de lo contrario se puede proceder con la siguiente,   [[#Planificar_trabajos_de_cron|Planificar trabajos de cron]]. 

{{Note/es|Dar acceso a un usuario al crontab no hace que los trabajos se ejecuten como el usuario root. Para que un usuario pueda modificar el crontab del usuario root, debe conocer el uso de <tt>sudo</tt> ({{Package|app-admin/sudo}}). Por favor, lea la [[Sudo/es| Guía de Sudo(ers) en Gentoo]] para más detalles.}}

Sin importar qué paquete de cron se utilice, si se quiere permitir que un usuario use crontab, primero se tendrá que pertenecer al grupo cron. Por ejemplo, si se quiere agregar el usuario ''wepy'' al grupo cron se debe lanzar: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/es|Cuando agregue un usuario al grupo cron, asegúrese de que éste salga e ingrese de nuevo en el sistema para que el cambio de grupo tenga efecto.}}

Cuando se utiliza '''dcron''' el paso de arriba es el único necesario para que un usuario tenga acceso al crontab. Los usuarios de dcron pueden pasar a la siguiente sección [[#Planificar_trabajos_de_cron|Planificar trabajos de cron]], el resto de usuarios  tendrán que continuar leyendo. 

Si se utiliza '''fcron''', se deben editar los ficheros {{Path|/etc/fcron/fcron.deny}} y {{Path|/etc/fcron/fcron.allow}}. La forma más segura para el sistema es, en primer lugar, denegar a todos los usuarios el acceso en {{Path|/etc/fcron/fcron.deny}} y luego permitir el acceso explícitamente en {{Path|/etc/fcron/fcron.allow}}. 

{{Important|Si no existen los ficheros {{Path|/etc/fcron/fcron.allow}} ni {{Path|/etc/fcron/fcron.deny}}, entonces todos los usuarios en el grupo cron podrán utilizar crontab. El demonio fcron incluye un fichero {{Path|fcron.allow}} que, por defecto, '''permite a todos los usuarios''' en el grupo cron el acceso a fcrontab.}}

{{CodeBox|title=Permisos en fcron.deny|1=
all
}}

Si un usuario (de nuevo ''wepy'' para este ejemplo) quiere poder planificar sus propios trabajos de cron, entonces se le debe añadir a {{Path|/etc/fcron/fcron.allow}} de la siguiente forma: 

{{CodeBox|title=Permisos en fcron.allow|1=
wepy
}}

Si se ha eligido '''vixie-cron''' o '''cronie''', entonces simplemente se debe editar el fichero {{Path|/etc/cron.allow}}. 

{{Important/es|Es importante observar que si solo existe {{Path|/etc/cron.allow}}, entonces solo los usuarios del grupo cron listados en él tendrán acceso. Por otro lado, si solamente existe un fichero vacío {{Path|/etc/cron.deny}}, entonces ''todos'' los usuarios del grupo cronn tendrán acceso. No deje vacío {{Path|/etc/cron.deny}} si no existe un fichero {{Path|/etc/cron.allow}}.}}

Por ejemplo, para permitir acceso al usuario ''wepy'', se añade a {{Path|/etc/cron.allow}} de la siguiente forma: 

{{CodeBox|title=Permisos en /etc/cron.allow|1=
wepy
}}

=== Planificar trabajos de cron ===

El proceso de editar los archivos crontab es distinto para cada paquete, pero todos soportan el mismo conjunto básico de órdenes: agregar y reemplazar crontabs, modificar crontabs, borrar
crontabs y listar los trabajos en los crontabs. La siguiente lista muestra cómo lanzar varias órdenes de cada paquete. 

{| class="wikitable" style="text-align: left;"
|-
! Versión
! Editar crontab
! Eliminar crontab
! Nueva crontab
! Listar trabajos de cron
|-
| dcron
| <tt>crontab -e</tt>
| <tt>crontab -d ''[usuario]'' </tt>
| <tt>crontab ''fichero'' </tt>
| <tt>crontab -l</tt>
|-
| fcron
| <tt>fcrontab -e</tt>
| <tt>fcrontab -r ''[usuario]'' </tt>
| <tt>fcrontab ''fichero'' </tt>
| <tt>fcrontab -l</tt>
|-
| vixie-cron, cronie y bcron
| <tt>crontab -e</tt>
| <tt>crontab -r ''-u [usurio]'' </tt>
| <tt>crontab ''fichero'' </tt>
| <tt>crontab -l</tt>
|-
|}

{{Note|Cuando se utilizar la orden para eliminar, si no se indica ningún argumento, ser borra la crontab del usuario actual.}}

{{Note|Fcron también tiene un enlace simbólico desde crontab a fcrontab.}}

Antes de poder usar cualquiera de estas órdenes, se necesita comprender la propia crontab. Cada línea en una crontab especifica cinco campos de tiempo en el siguiente orden: los minutos (0-59), las horas (0-23), los días del mes (1-31), los meses (1-12) y los días de la semana (0-7, el lunes es el día 1, el domingo es día 0 y el día 7). Los día de semana y mes se pueden especificar mediante abreviaturas de tres letras (en inglés), como mon, tue, jan, feb, etc. Cada campo también puede especificar un rango de valores (por ejemplo, 1-5 o mon-fri), una lista separada por comas de valores (por ejemplo, 1,2,3 o
mon,tue,wed) o un rango de valores con un ''paso'' (por ejemplo, 1-6/2 para 1,3,5). 

Tal vez suene algo confuso, pero con algunos ejemplos es fácil comprobar que no es tan complicado como parece.

{{CodeBox|title=Ejemplos|1=
# Lanzar /bin/false cada minuto durante todo el año
* * * * * /bin/false

# Lanzar /bin/false a las 1:35 horas los lunes, martes y miércoles el cuarto día de cada mes
35 1 4 * mon-wed /bin/false

# Lanzar /bin/true a las 22:25 horas el 2 de marzo
25 22 2 3 * /bin/true

# Lanzar /bin/false a las 2:00 horas cada lunes, miércoles y viernes
0 2 * * 1-5/2 /bin/false
}}

{{Note|Observe que se tienen que nombrar días específicos de la semana y días del mes para poder combinarlos. Si se utiliza un * para solo uno de ellos, el otro toma precedencia, mientras que un * en ambos campos indica que se debe lanzar diariamente.}}

Para poner a prueba lo que se ha expuesto, registraremos paso a paso algunos trabajos cron. En primer lugar crearemos un archivo llamado {{Path|crons.cron}} que tenga el siguiente aspecto: 

{{FileBox|filename=crons.cron|title=Crear un fichero crons.cron|1=
#Mins Horas Días Meses Día de la semana
10     3     1    1       *      /bin/echo "Realmente no me gusta cron"
30     16    *    1,2     *      /bin/echo "Cron me gusta un poco"
*      *     *    1-12/2  *      /bin/echo "Realmente me gusta cron"
}}

Ahora se puede añadir esta crontab al sistema con la "nueva orden" de la tabla de arriba 

{{RootCmd|crontab crons.cron}}

{{Note|No se verá la salida de las órdenes echo a menos que se utilice redirección.}}

Para verificar los trabajos de cron planificados se utiliza la ''orden Listar trabajos de cron" apropiada de la tabla de arriba. 

{{RootCmd|crontab -l}}

Ahora se debería mostrar una lista que refleja el contenido de {{Path|crons.cron}}. Si no es así puede que se haya utilizado una orden incorrecta para actualizar la crontab. 

Este crontab debería mostrar "Realmente me gusta cron" cada minuto de cada hora de cada día en meses alternos. Obviamente un usuario solo haría esto si realmente le gustara cron. Este crontab también presentará el texto "Cron me gusta un poco" a las 16:30 horas todos los días en enero y febrero. También presentará "Realmente no me gusta cron" a las 03:10 horas el 1 de enero. 

Si se utiliza anacron, se debe continuar leyendo esta sección, sino se puede proceder con la siguiente sección, sobre cómo [[#Editar_crontabs|editar crontabs]]. 

Los usuarios de anacron querrán modificar {{Path|/etc/anacrontab}}. Este fichero contiene cuatro
campos: el número de días entre cada ejecución, el retraso en minutos después de cada ejecución, el nombre del trabajo y la orden a lanzar. 

Por ejemplo, para que se lance <tt>echo "Me gusta anacron"</tt> cada cinco días, diez minutos antes de que se arranque anacron, introduzca lo siguiente: 

{{FileBox|filename=/etc/anacrontab|1=
5 10 perder-tiempo /bin/echo "Me gusta anacron"
}}

Anacron termina su ejecución después de que hayan finalizado todos los trabajos en anacrontab. Para comprobar si estos trabajos se deberían realizar todos los días, se necesitaría un demonio cron. Las instrucciones al final de la siguiente sección explican cómo se debería hacer esto.

=== Editar crontabs ===

Siendo realistas, a ningún usuario le interesa que su sistema le diga cuanto le gusta cron cada minuto. Así que el siguiente paso es eliminar el ejemplo de crontab anterior usando la ''orden Eliminar crontab'' de la tabla anterior. Utilice la lista de órdenes correspondiente para ver los trabajos de cron despúes y de esta forma asegurarse de que funcionó. 

{{RootCmd|crontab -d
|crontab -l}}

No se debería mostrar ningún trabajo cron en la salida de la orden <tt>crontab -l</tt>. Si se observa alguno, entonces la orden para eliminar de crontab falló. Verfique la ''orden Eliminar crontab'' correcta para el paquete cron del sistema. 

Ahora que tenemos una situación limpia, pongamos algo útil en la crontab de '''root'''. La mayoría de los usuarios querrán lanzar <tt>updatedb</tt> cada semana para asegurarse de que mlocate funciona correctamente. Para añadir esto a la crontab del sistema, en primer lugar se edita de nuevo {{Path|crons.cron}} para que tenga un aspecto similar al siguiente: 

{{CodeBox|title=Una crontab real|1=
22 2 * * 1 /usr/bin/updatedb
}}

Esto hará que cron lance updatedb a las 2:22 horas todos los lunes. Ahora se introduce la crontab con la ''orden Nueva crontab'' adecuada de la tabla anterior y se revisa la lista otra vez. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Digamos que también se quiere lanzar diariamente <tt>emerge --sync</tt> para mantener el árbol Portage al día. Esto se puede hacer modificando en primer lugar {{Path|crons.cron}} y luego usando <tt>crontab crons.cron</tt> tal como se hizo anteriormente ''o'' utilizando la ''orden Editar crontab'' apropiada de la tabla anterior. Esto ofrece una forma de editar la crontab del usuario in situ sin depender de ficheros externos como {{Path|crons.cron}}. 

{{RootCmd|crontab -e}}

La orden de arriba debería abrir la crontab del usuario con un editor. Por ejemplo, si se quiere lanzar <tt>emerge --sync</tt> diariamente a las 6:30 horas, la crontab debería tener un aspecto similar al siguiente: 

{{CodeBox|title=Una crontab real|1=
22 2 * * 1 /usr/bin/updatedb
30 6 * * * /usr/bin/emerge --sync
## (Si se está utilizando anacron, se debe añadir esta línea)
30 7 * * * /usr/sbin/anacron -s
}}

Una vez más, se debe revisar la lista de trabajos cron, como se hizo en los ejemplos anteriores para asegurarnos que los trabajos estén realmente programados. Si todos están allí, entonces el sistema está listo para el rock and roll.

== Usar cronbase ==

Como se mencionó antes, los paquetes cron disponibles dependen de {{Package|sys-process/cronbase}}. El paquete cronbase crea {{Path|/etc/cron.{hourly,daily,weekly,monthly}}} y un guión llamado  {{Path|run-crons}}. Se puede observar que el archivo {{Path|/etc/crontab}} contiene algo como esto: 

{{CodeBox|title=Crontab por defecto del sistema|1=
*/15 * * * * test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0 * * * * rm -f /var/spool/cron/lastrun/cron.hourly
0 3 * * * rm -f /var/spool/cron/lastrun/cron.daily
15 4 * * 6 rm -f /var/spool/cron/lastrun/cron.weekly
30 5 1 * * rm -f /var/spool/cron/lastrun cron.monthly
}}

Para evitar entrar en detalles, se puede asumir que estas órdenes efectivamente ejecutan los guiones cada hora, día, semana o mes. Este método de planificación de tareas tiene algunas ventajas importantes: 

* Las tareas se ejecutarán incluso si la computadora se apagó cuando estaban programadas para ejecutarse.
* Es fácil para los mantenedores de paquetes ubicar los guiones en estos lugares.
* El administrador conoce exactamente donde se guardan las tareas cron y el crontab, facilitándole el proceso de respaldo y recuperación de estas partes de sus sistemas.

{{Note|De nuevo, es útil indicarle que vixie-cron, cronie y bcron leen automaticamente {{Path|/etc/crontab}}, mientras que dcron y fcron no lo hacen. Por favor, lea la sección [[#Crontab_del_sistema|Crontab del sistema]] para aprender más acerca de esto.}}

== Usar anacron ==

Tal y como se mencionó anteriormente, anacron se utiliza en sistemas que no están pensados para estar arrancados continuamente (como es el caso de la mayoría de instalaciones de escritorio). El fichero de configuración por defecto, {{Path|/etc/anacrontab}}, contiene algo parecido a esto:

{{FileBox|filename=/etc/anacrontab|1=
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# formato: periodo retraso identificador-de-trabajo orden
1    5    cron.daily       run-parts /etc/cron.daily
7   10    cron.weekly      run-parts /etc/cron.weekly
30  15    cron.monthly     run-parts /etc/cron.monthly
}}

La principal diferencia entre esta crontab y las crontabs comunes es que con anacron no se define una hora o fecha fija para la planificación sino el periodo entre cada ejecución. Cuando se arranca anacron, comprueba el contenido del conjuto de ficheros en {{Path|/var/spool/anacron}} y calculará si la entrada correspondiente en el fichero de configuración ha expirado desde la última vez que se ejecutó. Si ha expirado, la orden se lanza de nuevo.

Como nota final, es importante comentar cualquier entrada que se solape con otro cron instalado en el sistema, como en el siguiente ejemplo con la crontab de vixie-cron:

{{FileBox|filename=/etc/crontab||1=
# Para vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $

# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/

# Comprobar los guiones en cron.hourly, cron.daily, cron.weekly y cron.monthly
59 * * * * root rm -f /var/spool/cron/lastrun/cron.hourly
#9 3 * * * root rm -f /var/spool/cron/lastrun/cron.daily
#19 4 * * 6 root rm -f /var/spool/cron/lastrun/cron.weekly
#29 5 1 * * root rm -f /var/spool/cron/lastrun/cron.monthly
#*/10 * * * * root test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
}}

Si no se hace esto, las partes diarias, semanales y mensuales se lanzarán en momentos distintos tanto por el demonio cron como por anacron, conduciendo a posibles ejecuciones dobles de la tareas.

== Notas finales ==

Recuerde que cada paquete cron es distinto y que la gama de características varía bastante. Consulte las páginas del manual de crontab, fcrontab o anacrontab, dependiendo del demonio cron que se haya utilizado. 

¡Buena suerte! 

=== Resolución de problemas ===

Cuando se tienen problemas para conseguir que cron funcione correctamente, esta lista podría ser útil. 

==== ¿Está corriendo cron? ====

Para verificar que cron está corriendo, compruebe si aparece en la lista de procesos:

{{RootCmd|<nowiki>ps ax | grep cron</nowiki>}}

==== ¿Está funcionado cron? ====

Intente lo siguiente:

{{CodeBox|title=Crontab para comprobar si cron está corriendo|1=
* * * * * /bin/echo "foobar" >> /su_propio_fichero
}}

A continuación compruebe si {{Path|/su_propio_fichero}} se modifica periodicamente.

==== ¿Está funcionando la orden? ====

Al igual que en el caso anterior pero redirija también la salida de errores:

{{CodeBox|title=Crontab para verificar que se lanzan las órdenes|1=
* * * * * /bin/echo "foobar" >> /su_propio_fichero 2>&1
}}

==== ¿Puede cron lanzar la tarea? ====

Revise los registros de cron en busca de errores, normalmente se encuentran en {{Path|/var/log/cron.log}} o en {{Path|/var/log/messages}}.

==== ¿Hay algún fichero {{Path|dead.letter}}s? ====

Normalmente cron envía un fichero si hay un problema. Compruebe su correo electrónico y también comprueba la creación de un fichero {{Path|~/dead.letter}}.

== Alternativas a Cron ==

Algunas empresas de alojamiento de servidores no permiten el acceso a cron, sin embargo se pueden encontrar un montón de alternativas a cron libres o disponibles comercialmente:

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
