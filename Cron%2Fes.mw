<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

En este artículo se describe como configurar y utilizar los demonios cron en Gentoo Linux.

== Aspectos básicos de cron ==

=== ¿Qué hace cron? ===

Cron es un demonio que ejecuta tareas de manera programada basado en la configuración de la orden <tt>crontab</tt>. Cumple esta tarea despertando cada minuto y revisando la existencia de trabajos de cron en las crontabs de los usuarios. 

{{Note/es|Observe que <tt>crontab</tt> es a la vez el nombre de la lista de trabajos de cron y el nombre de la orden usada para modificar esta lista.}}

=== El cron de facto ===

Existen varias implementaciones del gestor cron para escoger en Portage. Todas ofrecen un interfaz similar, el uso de la orden <tt>crontab</tt> o una orden parecida. Existe una herramienta relacionada llamada Anacron, que trabaja junto a cron en sistemas que no están encendidos de forma continua. 

Vale la pena mencionar que los paquetes disponibles de cron dependen de {{Package|sys-process/cronbase}}. Este paquete técnicamente no aparece en las dependencias de los paquetes cron, pero ofrece la funcionalidad de tipo cron de la que la mayoría de los usuarios disfrutan. 

Antes de comenzar a trabajar con cron, tendrá que elegir que implementación quiere utilizar. Para facilitar la toma de esta decisión, abajo se resume información acerca de cada una.

== ¿Qué cron le conviene? ==

=== vixie-cron ===

Vixie cron es un cron con muchas características, basado en el cron SysV. Cada usuario tiene su propio crontab y le está permitido especificar variables de entorno dentro de su crontab. A diferencia de
las demás variantes de cron, también ofrece soporte para SELinux y PAM. Soporta menos plataformas que Dcron, pero más que Fcron. 

Características de {{Package|sys-process/vixie-cron}}: 

* Soporte para SELinux
* Soporte para PAM ({{Path|/etc/security/limits.conf}})
* Definir variables de entorno en las crontabs (PATH, SHELL, HOME, etc.)
* Cada usuario tiene una crontab personal, el acceso se controla mediante {{Path|cron.allow}} y {{Path|cron.deny}} 

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) es un proyecto derivado de vixie-cron realizado por [https://fedorahosted.org/cronie/wiki Fedora]. Debido a que es una derivación de vixie-cron, ofrece las mismas características que éste. Además cronie incluye una implementación de anacron que se puede habilitar mediante el ajuste USE <code>anacron</code>.

=== dcron (El cron de Dillon) ===

Dcron pretende ser una implementación sencilla, elegante y segura de cron. No permite especificar variables de entorno en las crontabs y todos los trabajos cron se ejecutan desde {{Path|/bin/sh}}. Al igual que vixie cron, cada usuario tiene su propia crontab. 

Características de {{Package|sys-process/dcron}}: 

* Rápido, sencillo y sin características innecesarias
* El acceso a <tt>crontab</tt> se limita al grupo cron, en otras palabras, no requiere capacidades externas

=== fcron ===

Fcron pretende sustituir a vixie cron y anacron. Su diseño toma en cuenta los sistemas que no están encendidos continuamente y está repleto de características adicionales. Tiene restricciones para
iniciar los trabajos, control del orden de ejecución, la posibilidad de asignar valores "nice" (prioridades) a los trabajos y de ejecutar trabajos al arrancar el sistema. Eche un vistazo a la [http://fcron.free.fr/ página oficial de fcron] para obtener más información. 

Características de {{Package|sys-process/fcron}}: 

* Diseñado para funcionar en sistemas que no están constantemente encendidos, esto es, puede ejecutar una tarea después de reiniciar la máquina si no se ejecutó en el momento en el que estaba programada
* Configuración de variables de entorno y muchas otras opciones en las crontabs
* Sintaxis mejorada para crontabs con soporte de muchas características nuevas
* Cada usuario puede tener una crontab personal, el acceso se controla con los ficheros {{Path|cron.allow}} y {{Path|cron.deny}}
* Sintaxis mejorada de crontab con soporte para muchas características nuevas


=== bcron ===

Bcron es un sistema cron nuevo, diseñado para operar de manera segura. Para esto el sistema se divide en varios programas separados, cada uno responsable de una tarea distinta con comunicaciones estrictamente controladas entre ellas. El interfaz de
usuario es un reemplazo exacto para programas similares (como vixie-cron), aunque la parte interna es muy diferente. Para más información vea la página de bcron en [http://untroubled.org/bcron http://untroubled.org/bcron]. 

Características de {{Package|sys-process/bcron}}: 

* Reemplazo exacto de vixie-cron
* Diseño multiproceso
* Soporte nativo de horario de verano

=== anacron ===

Anacron no es un demonio cron, es una aplicación que funciona conjuntamente con uno. Ejecuta tareas a intervalos especificados en días y no asume que el sistema está encendido de manera continua. Ejecuta las tareas que no
pudieron ejecutarse si el sistema estaba apagado. Anacron normalmente
requiere un demonio cron para ejecutarlo diariamente.

== Utilizar cron ==

== Instalación ==

Elija la implementación de cron que prefiera e instálela. 

{{Emerge|dcron}}

Asegúrese de que el demonio cron elegido se ha añadido al proceso init del sistema. Si no se realiza este paso, el demonio cron no podrá realizar su trabajo.
{{RootCmd|/etc/init.d/dcron start |rc-update add dcron default}}

Opcionalmente, si  '''no''' se ha instalado Fcron, la instalación de Anacron como auxiliar del demonio cron puede ser una sabia elección. 

{{Emerge|anacron}}

De nuevo, no olvide añadir acacron al proceso init del sistema.
{{RootCmd|/etc/init.d/anacron start |rc-update add anacron default}}

=== Crontab del sistema ===

Los mensajes que se indican después de la instalación de algunos de estos paquetes cron indican al usuario que debe lanzar la orden <kbd>crontab /etc/crontab</kbd>. El fichero {{Path|/etc/crontab}} es la "crontab del sistema". Una instalación de cron lo usa junto a {{Package|sys-process/cronbase}} para ejecutar los guiones que se encuentran en {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}. Observe que solo vixie-cron y cronie programan las tareas en {{Path|/etc/crontab}} de forma automática. Los usuarios de dcron y fcron deberán ejecutar <kbd>crontab /etc/crontab</kbd> cada vez que hagan cambios al fichero {{Path|/etc/crontab}}.

Por favor, observe que los trabajos programados en la crontab del sistema puede que no aparezcan en la lista de trabajos cron mostrados cuando se lanza <kbd>crontab -l</kbd> . 

Por supuesto, los usuarios pueden elegir no usar ninguna crontab del sistema. Si se ha elegido dcron o fcron, '''no''' lance <kbd>crontab /etc/crontab</kbd>. Si
se ha elegido vixie-cron, cronie o bcron, se deben comentar todas las líneas de {{Path|/etc/crontab}}. 

Una forma fácil y rápida de comentar todos los archivos en un fichero es mediante la orden sed. Lance la siguiente orden para comentar todas las líneas en {{Path|etc/crontab}}
{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Dar acceso a cron a usuarios en los que se confía ===

Para que aquéllos usuarios que no sean root tengan acceso al demonio cron, se debe leer esta sección, de lo contrario se puede proceder con la siguiente,   [[#Planificar_trabajos_de_cron|Planificar trabajos de cron]]. 

{{Note/es|Dar acceso a un usuario al crontab no hace que los trabajos se ejecuten como el usuario root. Para que un usuario pueda modificar el crontab del usuario root, debe conocer el uso de <tt>sudo</tt> ({{Package|app-admin/sudo}}). Por favor, lea la [[Sudo/es| Guía de Sudo(ers) en Gentoo]] para más detalles.}}

Sin importar qué paquete de cron se utilice, si se quiere permitir que un usuario use crontab, primero se tendrá que pertenecer al grupo cron. Por ejemplo, si se quiere agregar el usuario ''wepy'' al grupo cron se debe lanzar: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/es|Cuando agregue un usuario al grupo cron, asegúrese de que éste salga e ingrese de nuevo en el sistema para que el cambio de grupo tenga efecto.}}

Cuando se utiliza '''dcron''' el paso de arriba es el único necesario para que un usuario tenga acceso al crontab. Los usuarios de dcron pueden pasar a la siguiente sección [[#Planificar_trabajos_de_cron|Planificar trabajos de cron]], el resto de usuarios  tendrán que continuar leyendo. 

Si se utiliza '''fcron''', se deben editar los ficheros {{Path|/etc/fcron/fcron.deny}} y {{Path|/etc/fcron/fcron.allow}}. La forma más segura para el sistema es, en primer lugar, denegar a todos los usuarios el acceso en {{Path|/etc/fcron/fcron.deny}} y luego permitir el acceso explícitamente en {{Path|/etc/fcron/fcron.allow}}. 

{{Important/es|Si no existen los ficheros {{Path|/etc/fcron/fcron.allow}} ni {{Path|/etc/fcron/fcron.deny}}, entonces todos los usuarios en el grupo cron podrán utilizar crontab. El demonio fcron incluye un fichero {{Path|fcron.allow}} que, por defecto, '''permite a todos los usuarios''' en el grupo cron el acceso a fcrontab.}}

{{CodeBox|title=Permisos en fcron.deny|1=
all
}}

Si un usuario (de nuevo ''wepy'' para este ejemplo) quiere poder planificar sus propios trabajos de cron, entonces se le debe añadir a {{Path|/etc/fcron/fcron.allow}} de la siguiente forma: 

{{CodeBox|title=Permisos en fcron.allow|1=
wepy
}}

Si se ha eligido '''vixie-cron''' o '''cronie''', entonces simplemente se debe editar el fichero {{Path|/etc/cron.allow}}. 

{{Important|It is important to note that if only {{Path|/etc/cron.allow}} exists, then only the cron group users listed there will have access. Otherwise, if only an empty {{Path|/etc/cron.deny}} exists, then ''all'' cron group users will be allowed. Do not leave an empty {{Path|/etc/cron.deny}} if no {{Path|/etc/cron.allow}} file exists!}}

For example, to allow access to the user ''wepy'', add him to {{Path|/etc/cron.allow}} as follows: 

{{CodeBox|title=Permisos en /etc/cron.allow|1=
wepy
}}

=== Planificar trabajos de cron ===

El proceso de editar los archivos crontab es distinto para cada paquete, pero todos soportan el mismo conjunto básico de órdenes: agregar y reemplazar crontabs, modificar crontabs, borrar
crontabs y listar los trabajos en los crontabs. La siguiente lista muestra cómo ejecutar estas órdenes para cada paquete. 

{| class="wikitable" style="text-align: left;"
|-
! Versión
! Editar crontab
! Eliminar crontab
! Nueva crontab
! Listar trabajos de cron
|-
| dcron
| <kbd>crontab -e</kbd>
| <kbd>crontab -d ''[usuario]'' </kbd>
| <kbd>crontab ''fichero'' </kbd>
| <kbd>crontab -l</kbd>
|-
| fcron
| <kbd>fcrontab -e</kbd>
| <kbd>fcrontab -r ''[usuario]'' </kbd>
| <kbd>fcrontab ''fichero'' </kbd>
| <kbd>fcrontab -l</kbd>
|-
| vixie-cron, cronie y bcron
| <kbd>crontab -e</kbd>
| <kbd>crontab -r ''-u [usurio]'' </kbd>
| <kbd>crontab ''fichero'' </kbd>
| <kbd>crontab -l</kbd>
|-
|}

{{Note/es|Cuando se utilizar la orden para eliminar, si no se indica ningún argumento, ser borra la crontab del usuario actual.}}

{{Note|Fcron also has a symlink from crontab to fcrontab.}}

Before any of these commands can be used, first understanding of the crontab itself is needed. Each line in a crontab specifies five time fields in the following order: the minutes (0-59), hours (0-23), days of the month (1-31), months (1-12), and days of the week (0-7, Monday is day 1, Sunday is day 0 and day 7). The days of the week and months can be specified by three-letter abbreviations like mon, tue, jan, feb, etc. Each field can also specify a range of values (e.g. 1-5 or mon-fri), a comma separated list of values (e.g. 1,2,3 or mon,tue,wed) or a range of values with a ''step'' (e.g. 1-6/2 as 1,3,5). 

That sounds a little confusing, but with a few examples it is easy to see it is not as complicated as it sounds.

{{CodeBox|title=Ejemplos|1=
# Lanzar /bin/false cada minuto durante todo el año
* * * * * /bin/false

# Lanzar /bin/false a las 1:35 horas los lunes, martes y miércoles el cuarto día de cada mes
35 1 4 * mon-wed /bin/false

# Lanzar /bin/true a las 22:25 horas el 2 de marzo
25 22 2 3 * /bin/true

# Lanzar /bin/false a las 2:00 horas cada lunes, miércoles y viernes
0 2 * * 1-5/2 /bin/false
}}

{{Note|Notice how to specify specific days of the week and days of the month before they are combined. If * is used for only one of them, the other takes precedence, while * for both just means every day.}}

To test what was just covered go through the steps of actually inputting a few cron-jobs. First, create a file called {{Path|crons.cron}} and make it look like the this: 

{{FileBox|filename=crons.cron|title=Crear un fichero crons.cron|1=
#Mins Horas Días Meses Día de la semana
10     3     1    1       *      /bin/echo "Realmente no me gusta cron"
30     16    *    1,2     *      /bin/echo "Cron me gusta un poco"
*      *     *    1-12/2  *      /bin/echo "Realmente me gusta cron"
}}

Now add that crontab to the system with the "new command" from the table above. 

{{RootCmd|crontab crons.cron}}

{{Note|The output from the echo commands will not be seen unless redirection is used.}}

To verify the scheduled cron-jobs, use the proper ''list command'' from the table above. 

{{RootCmd|crontab -l}}

A list resembling {{Path|crons.cron}} should be displayed; if not maybe the wrong command was issued to input the crontab. 

This crontab should echo "I really like cron" every minute of every hour of every day every other month. Obviously a user would only do that if they really liked cron. The crontab will also echo "I like cron a little" at 16:30 every day in January and February. It will also echo "I don't really like cron" at 3:10 on the January 1st. 

If using anacron keep reading this section. Otherwise, proceed to the next section on [[#Editing_crontabs|Editing crontabs]]. 

Los usuarios de anacron querrán modificar {{Path|/etc/anacrontab}}. Este fichero contiene cuatro
campos: el número de días entre cada ejecución, el retraso en minutos después de cada ejecución, el nombre del trabajo y la orden a lanzar. 

For example, to have it run <tt>echo "I like anacron"</tt> every 5 days, 10 minutes after anacron is started, enter the following: 

{{FileBox|filename=/etc/anacrontab|1=
5 10 perder-tiempo /bin/echo "Me gusta anacron"
}}

Anacron exits after all of the jobs in anacrontab have finished. To check to see if these jobs should be performed every day, a cron daemon will be used. The instructions at the end of the next section explain how this should be handled.

=== Editar crontabs ===

Being realistic, no user would want their system telling them how much they like cron every minute. As a step forward, remove the previous example crontab using the corresponding ''remove command'' from the table above. Use the corresponding list command to view the cron-jobs afterward to make sure it worked. 

{{RootCmd|crontab -d
|crontab -l}}

No cron-jobs should be displayed in the output from <kbd>crontab -l</kbd>. If cron jobs are listed, then the remove command failed to remove the crontab; verify the correct ''remove command'' for the system's cron package. 

Now that we have a clean state, let's put something useful into the '''root''' crontab. Most people will want to run <tt>updatedb</tt> on a weekly basis to make sure that mlocate works properly. To add that to the system's crontab, first edit {{Path|crons.cron}} again so that it looks like the following: 

{{CodeBox|title=Una crontab real|1=
22 2 * * 1 /usr/bin/updatedb
}}

That would make cron run updatedb at 2:22 A.M. on Monday morning every week. Now input the crontab with the proper ''new command'' from the table above, and check the list again. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Now let's say <tt>emerge --sync</tt> should be ran on a daily schedule in order to keep the Portage tree up to date. This could be done by first editing {{Path|crons.cron}} and then using <tt>crontab crons.cron</tt> as was done in the example above, ''or'' by using the proper ''edit command'' from the table above. This gives you a way to edit your user's crontab in situ, without depending on external files like {{Path|crons.cron}}. 

{{RootCmd|crontab -e}}

That should open your user's crontab with an editor. We want to have <tt>emerge --sync</tt> run every day at 6:30 A.M., so make it look something like this: 

{{CodeBox|title=A real crontab|1=
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if you're using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
}}

Again, check the cron-jobs list as done in the previous examples to make sure the jobs are scheduled. If they are all there, then the system is ready to rock and roll.

== Usar cronbase ==

As mentioned earlier, all of the available cron packages depend on {{Package|sys-process/cronbase}}. The cronbase package creates {{Path|/etc/cron.{hourly,daily,weekly,monthly}}}, and a script called {{Path|run-crons}}. Notice the default {{Path|/etc/crontab}} file contains something like this: 

{{CodeBox|title=Crontab por defecto del sistema|1=
*/15 * * * * test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0 * * * * rm -f /var/spool/cron/lastrun/cron.hourly
0 3 * * * rm -f /var/spool/cron/lastrun/cron.daily
15 4 * * 6 rm -f /var/spool/cron/lastrun/cron.weekly
30 5 1 * * rm -f /var/spool/cron/lastrun cron.monthly
}}

To avoid going into much detail, assume these commands will effectively run hourly, daily, weekly and monthly scripts. This method of scheduling cron-jobs has some important advantages: 

* Las tareas se ejecutarán incluso si la computadora se apagó cuando estaban programadas para ejecutarse.
* Es fácil para los mantenedores de paquetes ubicar los guiones en estos lugares.
* El administrador conoce exactamente donde se guardan las tareas cron y el crontab, facilitándole el proceso de respaldo y recuperación de estas partes de sus sistemas.

{{Note/es|De nuevo, es útil indicarle que vixie-cron, cronie y bcron leen automaticamente {{Path|/etc/crontab}}, mientras que dcron y fcron no lo hacen. Por favor, lea la sección [[#Crontab_del_sistema|Crontab del sistema]] para aprender más acerca de esto.}}

== Usar anacron ==

As mentioned earlier, anacron is used on systems not meant to be run continuously (like most of the desktop installations). Its default configuration file, {{Path|/etc/anacrontab}}, is usually similar to the following:

{{FileBox|filename=/etc/anacrontab|1=
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# formato: periodo retraso identificador-de-trabajo orden
1    5    cron.daily       run-parts /etc/cron.daily
7   10    cron.weekly      run-parts /etc/cron.weekly
30  15    cron.monthly     run-parts /etc/cron.monthly
}}

The main difference between this and other common crontabs is that with anacron there is no fixed date/hour for the job scheduling, but only the period between every run. When anacron is started, it will check the contents of a set of files in {{Path|/var/spool/anacron}} and calculate if the corresponding entry in the configuration file has expired since the last run. If it has, then the command is invoked again.

Como nota final, es importante comentar cualquier entrada que se solape con otro cron instalado en el sistema, como en el siguiente ejemplo con la crontab de vixie-cron:

{{FileBox|filename=/etc/crontab||1=
# Para vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $

# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/

# Comprobar los guiones en cron.hourly, cron.daily, cron.weekly y cron.monthly
59 * * * * root rm -f /var/spool/cron/lastrun/cron.hourly
#9 3 * * * root rm -f /var/spool/cron/lastrun/cron.daily
#19 4 * * 6 root rm -f /var/spool/cron/lastrun/cron.weekly
#29 5 1 * * root rm -f /var/spool/cron/lastrun/cron.monthly
#*/10 * * * * root test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
}}

Si no se hace esto, las partes diarias, semanales y mensuales se lanzarán en momentos distintos tanto por el demonio cron como por anacron, conduciendo a posibles ejecuciones dobles de la tareas.

== Notas finales ==

Remember, each cron package is different and the range of features varies greatly. Be sure to consult the man pages for crontab, fcrontab or anacrontab, depending on which cron daemon has been used. 

¡Buena suerte! 

=== Resolución de problemas ===

Cuando se tienen problemas para conseguir que cron funcione correctamente, esta lista podría ser útil. 

==== ¿Está corriendo cron? ====

Lance <kbd>ps ax | grep cron</kbd> y ¡Asegúrese de que  cron se muestra en la lista de procesos!

==== ¿Está funcionado cron? ====

Intente lo siguiente:

{{CodeBox|title=Crontab para comprobar si cron está corriendo|1=
* * * * * /bin/echo "foobar" >> /su_propio_fichero
}}

A continuación compruebe si {{Path|/su_propio_fichero}} se modifica periodicamente.

==== ¿Están lanzándose sus órdenes? ====

Al igual que en el caso anterior pero redirija también la salida de errores:

{{CodeBox|title=Crontab para verificar que se lanzan las órdenes|1=
* * * * * /bin/echo "foobar" >> /su_propio_fichero 2>&1
}}

==== ¿Puede cron lanzar su tarea? ====

Revise los registros de cron en busca de errores, normalmente se encuentran en {{Path|/var/log/cron.log}} o en {{Path|/var/log/messages}}.

==== ¿Hay algún fichero {{Path|dead.letter}}s? ====

Normalmente cron envía un fichero si hay un problema. Compruebe su correo electrónico y también comprueba la creación de un fichero {{Path|~/dead.letter}}.

== Alternativas a Cron ==

Algunas empresas de alojamiento de servidores no permiten el acceso a cron, sin embargo puede encontrar un montón de alternativas a cron gratis o de pago:

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
