<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Esta guía describe como poner en marcha y utilizar cron.

== Aspectos básicos de cron ==

=== ¿Qué hace cron? ===

Cron es un demonio que ejecuta tareas de manera programada basado en la configuración de la orden <code>crontab</code>. Cumple esta tarea despertando cada minuto y revisando la existencia de trabajos de cron en las crontabs de los usuarios. 

{{Note|Observe que ''crontab'' es a la vez el nombre de la lista de trabajos de cron y el nombre de la orden usada para modificar esta lista.}}

=== El cron de facto ===

Existen varias implementaciones del gestor cron para escoger en Portage. Todas ofrecen un interfaz similar, el uso de la orden <code>crontab</code> o una orden parecida. Existe una herramienta relacionada llamada Anacron, que trabaja junto a cron en sistemas que no están encendidos de forma continua. 

Vale la pena mencionar que los paquetes disponibles de cron dependen de <code>sys-process/cronbase</code>. Este paquete técnicamente no aparece en las dependencias de los paquetes cron, pero ofrece la funcionalidad de tipo cron de la que la mayoría de los usuarios disfrutan. 

Antes de comenzar a trabajar con cron, tendrá que elegir que implementación quiere utilizar. Para facilitar la toma de esta decisión, abajo se resume información acerca de cada una.

== ¿Qué cron le conviene? ==

=== vixie-cron ===

Vixie cron es un cron con muchas características, basado en el cron SysV. Cada usuario tiene su propio crontab y le está permitido especificar variables de entorno dentro de su crontab. A diferencia de
las demás variantes de cron, también ofrece soporte para SELinux y PAM. Soporta menos plataformas que Dcron, pero más que Fcron. 

Características de <code>sys-process/vixie-cron</code>: 

* Soporte para SELinux
* Soporte para PAM {{Path|/etc/security/limits.conf}}
* Definir variables de entorno en las crontabs (PATH, SHELL, HOME, etc.)
* Cada usuario tiene su propia crontab, el acceso se controla mediante {{Path|cron.allow}} y {{Path|cron.deny}} 

=== cronie ===
Cronie (sys-process/cronie) es un proyecto derivado de vixie-cron realizado por [https://fedorahosted.org/cronie/wiki fedora]. Debido a que es una derivación de vixie-cron, ofrece las mismas características que éste. Además cronie incluye una implementación de anacron que se puede habilitar mediante el ajuste USE ''anacron''.

=== dcron (El cron de Dillon) ===

Dcron pretende ser una implementación sencilla, elegante y segura de cron. No permite especificar variables de entorno en las crontabs y todos los trabajos cron se ejecutan desde {{Path|/bin/sh}}. Al igual que vixie cron, cada usuario tiene su propia crontab. 

Características de <code>sys-process/dcron</code>: 

* Rápido, sencillo y sin características innecesarias
* El acceso a <code>crontab</code> se limita al grupo cron, en otras palabras, no requiere capacidades externas

=== fcron ===

Fcron pretende sustituir a vixie cron y anacron. Su diseño toma en cuenta los sistemas que no están encendidos continuamente y está repleto de características adicionales. Tiene restricciones para
iniciar los trabajos, control del orden de ejecución, la posibilidad de asignar valores "nice" (prioridades) a los trabajos y de ejecutar trabajos al arrancar el sistema. Eche un vistazo a la [http://fcron.free.fr/ página oficial de fcron] para obtener más información. 

Características de <code>sys-process/fcron</code>: 

* Diseñado para funcionar en sistemas que no están constantemente encendidos, esto es, puede ejecutar una tarea después de reiniciar la máquina si no se ejecutó en el momento en el que estaba programada
* Configuración de variables de entorno y muchas otras opciones en las crontabs
* Cada usuario puede tener su propia crontab, el acceso se controla con los ficheros cron.allow y cron.deny
* Sintaxis mejorada de crontab con soporte para muchas características nuevas

=== bcron ===

Bcron es un sistema cron nuevo, diseñado para operar de manera segura. Para esto el sistema se divide en varios programas separados, cada uno responsable de una tarea distinta con comunicaciones estrictamente controladas entre ellas. El interfaz de
usuario es un reemplazo exacto para programas similares (como vixie-cron), aunque la parte interna es muy diferente. Para más información vea la página de bcron en [http://untroubled.org/bcron http://untroubled.org/bcron]. 

Características de <code>sys-process/bcron</code>: 

* Reemplazo exacto de vixie-cron
* Diseño multiproceso
* Soporte nativo de horario de verano

=== anacron ===

Anacron no es un demonio cron, es una aplicación que funciona conjuntamente con uno. Ejecuta tareas a intervalos especificados en días y no asume que el sistema está encendido de manera continua. Ejecuta las tareas que no
pudieron ejecutarse si el sistema estaba apagado. Anacron normalmente
requiere un demonio cron para ejecutarlo diariamente. 

== Utilizar cron ==

== Instalación ==

Elija la implementación de cron que prefiera e instálela. 

{{Emerge|dcron}}

{{RootCmd|/etc/init.d/dcron start |rc-update add dcron default}}

Opcionalmente, si no ha instalado Fcron puede también instalar Anacron. 

{{Emerge|anacron}}

{{RootCmd|/etc/init.d/anacron start |rc-update add anacron default}}

=== La crontab del sistema ===

Los mensajes que se indican después de la instalación de algunos de estos paquetes cron le informan de que debe ejecutar la orden <code>crontab /etc/crontab</code>. El fichero {{Path|/etc/crontab}} es la "crontab del sistema". Una instalación de cron lo usa junto a <code>sys-process/cronbase</code> para ejecutar los guiones que se encuentran en {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}. Observe que solo vixie-cron y cronie programan las tareas en {{Path|/etc/crontab}} de forma automática. Los usuarios de dcron y fcron deberán ejecutar <code>crontab /etc/crontab</code> cada vez que hagan cambios a {{Path|/etc/crontab}}. 

Por favor, observe que los trabajos programados en la crontab del sistema
puede que no aparezcan en la lista de trabajos cron mostrados por <code>crontab -l</code> . 

Por supuesto, puede escoger no usar una crontab de sistema. Si escogió dcron o fcron, "no" ejecute <code>crontab /etc/crontab</code>. Si
escogió vixie-cron, cronie o bcron, debe comentar todas las líneas de {{Path|/etc/crontab}}. 

{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Dar acceso a cron a usuarios en los que se confía ===

Si desea que otros usuarios que no sean root tengan acceso al demonio cron, deberá leer esta sección, de lo contrario puede proceder con la siguiente,   [[#Scheduling_cron-jobs|Planificar trabajos de cron]]. 

{{Note|Dar acceso a un usuario al crontab no hace que los trabajos se ejecuten como el usuario root. Si desea que un usuario pueda modificar el crontab del usuario root, debe conocer el uso de <code>sudo</code>. Por favor, lea nuestra [http://www.gentoo.org//doc/es/sudo-guide.xml Guía de Sudo(ers) en Gentoo] para más detalles.}}

Sin importar qué paquete de cron use, si quiere permitir que un usuario use crontab, primero tendrá que pertenecer al grupo cron. Por ejemplo, si quiere agregar el usuario "wepy" al grupo cron lance: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note|Cuando agregue un usuario al grupo cron, asegúrese que éste salga e ingrese nuevamente en el sistema para que el cambio de grupo tenga efecto.}}

Si utiliza '''dcron''' esto es lo único que debe hacer para que el usuario tenga acceso al crontab. Los usuarios de dcron pueden pasar a la siguiente sección [[#Scheduling_cron-jobs|Planificar trabajos de cron]], el resto de usuarios deben continuar leyendo. 

Si utiliza '''fcron''', querrá editar {{Path|/etc/fcron/fcron.deny}} y {{Path|/etc/fcron/fcron.allow}}. La forma más segura de hacer esto es denegar a todos los usuarios el acceso en {{Path|/etc/fcron/fcron.deny}} y luego permitir el acceso explícitamente en {{Path|/etc/fcron/fcron.allow}}. 

{{Important|Si no existen los ficheros {{Path|/etc/fcron/fcron.allow}} ni {{Path|/etc/fcron/fcron.deny}}, todos los usuarios en el grupo cron podrán utilizar crontab. El demonio fcron incluye un fichero {{Path|fcron.allow}} que, por defecto, '''permite a todos los usuarios''' en el grupo cron el acceso a fcrontab.}}

{{Code|Permisos en fcron.deny|<pre>
all
</pre>
}}

Ahora, supongamos que tenemos un usuario ''wepy'' que debería poder planificar sus propios trabajos de cron. Deberemos añadirlo a {{Path|/etc/fcron/fcron.allow}} de la siguiente forma: 

{{Code|Permisos en fcron.allow|<pre>
wepy
</pre>
}}

Si eligió '''vixie-cron''' o '''cronie''', simplemente deberá editar {{Path|/etc/cron.allow}}. 

{{Important|Es importante observar que si solo existe {{Path|/etc/cron.allow}}, entonces solo los usuarios del grupo cron listados en él tendrán acceso. Por otro lado, si solamente existe un fichero vacío {{Path|/etc/cron.deny}}, entonces ¡Todos los usuarios del grupo cronn tendrán acceso!. No deje vacío {{Path|/etc/cron.deny}} si no tiene un fichero {{Path|/etc/cron.allow}}.}}

Por ejemplo, si quiere permitir acceso al usuario ''wepy'', debería añadirlo a {{Path|/etc/cron.allow}} de la siguiente forma: 

{{Code|Permisos en /etc/cron.allow|<pre>
wepy
</pre>
}}

=== Planificar trabajos de cron ===

El proceso de editar los archivos crontab es distinto para cada paquete, pero todos soportan el mismo conjunto básico de órdenes: agregar y reemplazar crontabs, modificar crontabs, borrar
crontabs y listar los trabajos en los crontabs. La siguiente lista muestra cómo ejecutar estas órdenes para cada paquete. 

{| class="wikitable" style="text-align: left;"
|-
! Versión
! Editar crontab
! Eliminar crontab
! Nueva crontab
! Listar trabajos de cron
|-
| dcron
| <code>crontab -e</code>
| <code>crontab -d ''[usuario]'' </code>
| <code>crontab ''fichero'' </code>
| <code>crontab -l</code>
|-
| fcron
| <code>fcrontab -e</code>
| <code>fcrontab -r ''[usuario]'' </code>
| <code>fcrontab ''fichero'' </code>
| <code>fcrontab -l</code>
|-
| vixie-cron, cronie y bcron
| <code>crontab -e</code>
| <code>crontab -r ''-u [usurio]'' </code>
| <code>crontab ''fichero'' </code>
| <code>crontab -l</code>
|-
|}

{{Note|Cuando se utilizar la orden para eliminar, si no se indica ningún argumento, ser borra la crontab del usuario actual.}}

{{Note|Fcron también tiene un enlace simbólico desde <code>crontab</code> hacia <code>fcrontab</code>.}}

Antes de poder usar cualquiera de estas órdenes, hace falta comprender la crontab. Cada línea en una crontab debe especificar cinco campos de tiempo en el siguiente orden: los minutos (0-59), las horas (0-23), los días del mes (1-31), los meses (1-12) y los días de la semana (0-7, el lunes es 1, el domingo es 0 y 7). Los días de las semanas y meses se pueden especificar mediante abreviaturas de tres
letras (en inglés), como mon, tue, jan, feb, etc. Cada campo también puede especificar un rango de valores (por ejemplo, 1-5 o mon-fri), una lista separada por comas de valores (por ejemplo, 1,2,3 o
mon,tue,wed) o un rango de valores con un ''paso'' (por ejemplo, 1-6/2 para 1,3,5). 

Tal vez suene algo confuso, pero con algunos ejemplos se comprueba que no es tan complicado como parece. 

{{Code|Ejemplos|<pre>
## # Lanzar /bin/false cada minuto durante todo el año
* * * * * /bin/false

## # Lanzar /bin/false a las 1:35 horas los lunes, martes y miércoles el cuarto día de cada mes
35 1 4 * mon-wed /bin/false

## # Lanzar /bin/true a las 22:25 horas el 2 de marzo
25 22 2 3 * /bin/true

## # Lanzar /bin/false a las 2:00 horas cada lunes, miércoles y viernes
0 2 * * 1-5/2 /bin/false
</pre>
}}

{{Note|Observe que tiene que nombrar días específicos de la semana y días del mes para poder combinarlos. Si indica un * para uno de ellos, el otro toma precedencia, mientras que un * en ambos campos indica que se debe lanzar diariamente.}}

Para poner a prueba lo que hemos aprendido, registraremos paso a paso algunos trabajos cron. En primer lugar crearemos un archivo llamado {{Path|crons.cron}} que tenga el siguiente aspecto: 

{{RootCmd|nano crons.cron|output=<pre>
## #Mins Horas Días Meses Día de la semana
10     3     1    1       *      /bin/echo "Realmente no me gusta cron"
30     16    *    1,2     *      /bin/echo "Cron me gusta un poco"
*      *     *    1-12/2  *      /bin/echo "Realmente me gusta cron"
</pre>
}}

Ahora podemos añadir esta crontab al sistema con la "nueva orden" de la tabla de arriba 

{{RootCmd|crontab crons.cron}}


{{Note|No verá la salida de estas órdenes a menos que utilice redirección.}}

Para verificar los trabajos de cron que ha planificado utilizaremos la ''orden Listar trabajos de cron" apropiada de la tabla de arriba. 

{{RootCmd|crontab -l}}

Ahora debería ver una lista que refleje el contenido de {{Path|crons.cron}}. Si no es así puede que haya utilizado una orden incorrecta para actualizar su nueva crontab. 

Este crontab debería mostrar el texto "Realmente me gusta cron" cada minuto de cada hora de cada día en meses alternos. Obviamente esto sólo lo haría si realmente le gustara cron. Este crontab también
presentará el texto "Cron me gusta un poco" a las 16:30 horas todos los días en enero y febrero. También presentará "Realmente no me gusta cron" a las 03:10 horas el 1 de enero. 

Si utiliza anacron, siga leyendo esta sección, sino proceda a la sección siguiente, sobre cómo [[#Editing_crontabs|editar crontabs]]. 

Los usuarios de anacron querrán modificar {{Path|/etc/anacrontab}}. Este fichero contiene cuatro
campos: el número de días entre cada ejecución, el retraso en minutos después de cada ejecución, el nombre del trabajo y la orden a lanzar. 

Por ejemplo, para que se lance <code>echo "Me gusta anacron"</code> cada cinco días, diez minutos antes de que se arranque anacron, tendríamos: 

{{Code|/etc/anacrontab|<pre>
5 10 perder-tiempo /bin/echo "Me gusta anacron"
</pre>
}}

Anacron termina su ejecución después que haya ejecutado todos los trabajos en anacrontab, así que si queremos que realice estos trabajos todos los días, tendremos que usar cron. Las instrucciones al final de la siguiente sección le explican cómo hacer esto.

=== Editar crontabs ===

Seamos realistas, realmente no nos interesa que nuestro sistema nos diga cuanto nos gusta cron cada minuto. Así que el siguiente paso es eliminar ese crontab usando la ''orden Eliminar crontab'' correspondiente de la tabla anterior. Después listaremos los trabajos de cron, para asegurarnos que lo que eliminamos funcionó. 

{{RootCmd|crontab -d
|crontab -l}}

No debería haber trabajos cron en la salida de la orden <code>crontab -l</code>. Si ve alguno, es porque no eliminamos correctamente la crontab, por lo
que debe asegurarse de usar la ''orden Eliminar crontab'' correspondiente a su paquete cron. 

Ahora que tenemos una situación limpia, pongamos algo útil en la crontab de '''root'''. La mayoría de los usuarios querrán lanzar <code>updatedb</code> cada semana para asegurarse de que <code>mlocate</code> funciona correctamente. Para añadir esto a la crontab, en primer lugar editaremos de nuevo {{Path|crons.cron}} para que tenga un aspecto similar al siguiente: 

{{Code|Una crontab real|<pre>
22 2 * * 1 /usr/bin/updatedb
</pre>
}}

Esto hará que cron lance updatedb a las 2:22 horas todos los lunes. A continuación deberá actualizar la crontab con la ''orden Nueva crontab'' adecuada de la tabla anterior y revisar la lista otra vez. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Digamos que también quiere agregar <code>emerge --sync</code> a sus trabajos programados diariamente. Esto lo puede hacer modificando en primer lugar {{Path|crons.cron}} y luego usando <code>crontab crons.cron</code> tal como hicimos anteriormente o el sencillamente con la ''orden Editar crontab'' apropiada de la tabla anterior. Esto le permite modificar la crontab del usuario in situ sin depender de ficheros externos como {{Path|crons.cron}}. 

{{RootCmd|crontab -e}}

Esto deberá abrir la crontab del usuario con un editor de texto. Queremos que se lance <code>emerge --sync</code> diariamente a las 6:30 horas, por lo que deberíamos tener algo como: 

{{Code|Una crontab real|<pre>
22 2 * * 1 /usr/bin/updatedb
30 6 * * * /usr/bin/emerge --sync
## (Si está utilizando anacron, añada esta línea)
30 7 * * * /usr/sbin/anacron -s
</pre>
}}

Una vez más, revise la lista de trabajos cron, como hicimos en los ejemplos anteriores para asegurarnos que los trabajos estén realmente programados. Si todos están allí, está listo. 

== Usar cronbase ==

Como se mencionó antes, los paquetes cron disponibles dependen de <code>sys-process/cronbase</code>. El paquete cronbase crea
{{Path|/etc/cron.{hourly,daily,weekly,monthly}}} y un guión llamado <code>run-crons</code>. Podrá observar que el archivo {{Path|/etc/crontab}} contiene algo como esto: 

{{Code|Crontab por defecto del sistema|<pre>
*/15 * * * * test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0 * * * * rm -f /var/spool/cron/lastrun/cron.hourly
0 3 * * * rm -f /var/spool/cron/lastrun/cron.daily
15 4 * * 6 rm -f /var/spool/cron/lastrun/cron.weekly
30 5 1 * * rm -f /var/spool/cron/lastrun cron.monthly
</pre>
}}

Para evitar entrar en detalles, podemos asumir que estas órdenes efectivamente ejecutan sus guiones cada hora, día, semana o mes. Este método de planificación de tareas tiene algunas ventajas
importantes: 

* Las tareas se ejecutarán incluso si su computadora se apagadó cuando estaban programadas para ejecutarse.
* Es fácil para los mantenedores de paquetes ubicar los guiones en estos lugares.
* Conoce exactamente donde se guardan sus tareas y su crontab, facilitándole el proceso de respaldo y recuperación de esta parte de su sistema.

{{Note|De nuevo, es útil indicarle que vixie-cron, cronie y bcron leen automaticamente {{Path|/etc/crontab}}, mientras que dcron y fcron no lo hacen. Por favor, lea la sección [[#System_crontab|Crontab del sistema]] para aprender más acerca de esto.}}

== Usar anacron ==

As mentioned earlier, anacron is used on systems not meant to be run continuously (like most of the desktop installations). Its default configuration file, {{Path|/etc/anacrontab}}, is usually like the following:

{{File|/etc/anacrontab||<pre>
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
</pre>}}

As you see the main difference between this and other common crontabs is that with anacron there is no fixed date/hour for the job scheduling, but only the period between every run. When anacron is started, it will check the contents of a set of files in {{Path|/var/spool/anacron}} and calculate if the corresponding entry in the configuration file has expired since the last run. If it has, then the command is invoked again.

As a final note, it is important to comment out any overlapping entry in any other cron installed in the system, such as in the following vixie-cron crontab example:

{{File|/etc/crontab||<pre>
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
</pre>}}

Without doing this, the daily, weekly and monthly parts will be executed - at different times - by both the cron daemon and anacron, leading to possible double job executions.

== Final Notes ==

Remember, each cron package is different and the range of features varies greatly. Be sure to consult the man pages for crontab, fcrontab or anacrontab, depending on what you use. 

Good luck! 

=== Troubleshooting ===

If you're having problems getting cron to work properly, you might want to go through this quick checklist. 

==== Is cron running? ====

Run <code>ps ax | grep cron</code> and make sure it shows up!

==== Is cron working? ====

Try the following:

{{Code|crontab to see if cron is running|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own
</pre>}}

Then check if {{Path|/file_you_own}} is modified periodically.

==== Is your command working? ====

Same as before, but perhaps redirect the standard error output as well:

{{Code|crontab to verify application runs|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own 2>&amp;1
</pre>}}

==== Can cron run your job? ====

Check the cron log, usually {{Path|/var/log/cron.log}} or {{Path|/var/log/messages}} for errors

==== Are there any {{Path|dead.letter}}s? ====

cron usually sends mail when there's a problem; check your mail and also look for {{Path|~/dead.letter}} .

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Eric Brown
* Xavier Neys
* nightmorph


[[Category:Core system]]
[[Category:Daemons]]
