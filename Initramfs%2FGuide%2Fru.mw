<languages />


Все больше и больше систем требуют initramfs для правильной загрузки. В этом руководстве мы займемся рассмотрением основных понятий initramfs, в том числе и того, как должным образом создать и управлять initramfs на отдельных примерах.

== Основные понятия initramfs ==

=== Введение ===

Для большинства пользователей initramfs не является чем то необходимым. Их система использует простую схему разбиения жесткого диска без эзотических драйверов или установок (таких как зашифрованные файловые системы), поэтому ядро Linux вполне способно передать управление двоичному файлу <code>init</code> на их системе. Но для большинства систем, использование initramfs обязательно. 

Основной ключ к пониманию того, чем является initramfs (или для чего она необходима) - это понимание того, как работает процесс загрузки Linux, даже в достаточно высокоуровневом подходе. 

=== Процесс загрузки Linux ===

Как только ядро Linux получает контроль над системой (который был передан ему после загрузки загрузчиком), оно подготавливает свои области памяти и драйвера настолько, насколько способно. Затем оно передает управление приложению (обычно файлу <code>init</code>), чьей задачей является дальнейшая подготовка системы и проверка того, что в конце процесса загрузки, все необходимые сервисы запущены и пользователь способен войти в систему. Приложение <code>init</code> делает это с помощью запуска, в числе прочих сервисов, демона <code>udev</code>, который далее загружает и подготавливает систему, основываясь на обнаруженных устройствах. Когда <code>udev</code> запущен, все оставшиеся файловые системы, которые не были примонтированы, монтируются, и запускаются остальные сервисы. 

Для систем, где все необходимые файлы и инструменты располагаются на той же самой файловой системе, приложение <code>init</code> может в совершенстве управлять дальнейшим процессом загрузки. Но когда определяются множественные файловые системы (или в случае более экзотических установок), этот процесс может стать немного более усложненным: 

* В случае, когда раздел {{Path|/usr}} размещается на отдельной файловой системе, инструменты и драйвера, чьи файлы хранятся на {{Path|/usr}} не могут использоваться, пока раздел {{Path|/usr}} не станет доступным. Если эти инструменты требуются для предоставления доступа к разделу {{Path|/usr}}, то мы не сможем загрузить систему.

* Если корневой каталог root зашифрован, то ядро Linux не сможет найти приложение <code>init</code>, что приведет к незагружаемой системе.

С давних пор решением для этой проблемы является использование "initrd" (initial root device). 

=== Корневой диск для начальной инициализации (initial root disk) ===

''initrd'' - это дисковая структура в оперативной памяти (ramdisk), которая содержит необходимые инструменты и сценарии для монтирования требуемых файловых систем перед тем как управление передается приложению <code>init</code> на корневой файловой системе. Ядро Linux запускает сценарий настройки (обычно называемый <code>linuxrc</code>, но это не обязательно так) на этом корневом диске, который подготавливает систему, переключается к действительной корневой файловой системе и затем вызывает <code>init</code>. 

Хотя способ, включающий в себя initrd - все, что требуется, он имеет несколько недостатков: 

* Это полноценное блочное устройство, требующее дополнительные расходы на целую файловую систему, располагающуюся на нем, и оно имеет фиксированный размер. Выберите initrd достаточно маленьким, и Вы не сможете уместить все требуемые сценарии. Сделайте его слишком большим, и Вы растратите память впустую.

* По той причине, что это действительной устройство, оно также требует кэш-память ядра Linux и подлежит используемым методам управления памятью и файлами (таким как подкачка страниц), что делает расходы памяти еще более худшими.

Для решения этих (для кого-то едва-ли) проблем, была создана initramfs. 

=== Файловая система в памяти для начальной инициализации (initramfs) ===

''initramfs'' - это начальная файловая система в оперативной памяти, основанная на ''tmpfs'' (легковесной файловой системой в памяти с изменяемым размером), которая также не использовала отдельное блочное устройство (чтобы отсутствовало кэширование и все накладные расходы, упомянутые ранее, исчезли). Так же как и initrd, она содержит инструменты и сценарии, требуемые для монтирования файловых систем перед вызовом двоичного файла <code>init</code>, располагающегося на действительной корневой файловой системе. Эти инструменты могут быть уровнями абстракции расшифровывающих процедур (для зашифрованных файловых систем), менеджерами логических томов, программными (software) raid массивами, загрузчиками файловых систем, основанными на драйверах bluetooth, и т.д. 

Содержимое initramfs делается путем создания <code>cpio</code>-архива. <code>cpio</code> - это старое (но проверенное) решение для архивирования файлов (архивы, получаемые в результате его работы называются ''cpio-архивы''). Вы определенно можете сравнить его с <code>tar</code>. Здесь <code>cpio</code> был выбран потому, что проще создать (с программной точки зрения) и поддерживать (на то время) файлы устройств (тогда как <code>tar</code> этого не мог). 

Все файлы, инструменты, библиотеки, настройки конфигурации (если они применимы), и т.д. помещаются в cpio-архив. Этот архив затем сжимается с использованием утилиты <code>gzip</code> и сохраняется в том же месте, что и ядро Linux. Далее, загрузчик передаст его ядру Linux во время загрузки, чтобы ядро знало о том, что требуется initramfs. 

При его обнаружении, ядро Linux создаст файловую систему tmpfs, извлечет на нее содержимое архива и затем запустит сценарий <code>init</code>, расположенный в корневом каталоге файловой системы tmpfs. Этот сценарий затем примонтирует действительную корневую файловую систему (после того, как убедится, что он может ее примонтировать, например, с помощью загрузки дополнительных модулей, подготовки уровней абстракции шифрования, и т.д.), также как и другие существенно важные файловые системы (такие как {{Path|/usr}} и {{Path|/var}}). 

Как только корневая файловая система и другие существенные файловые системы примонтированы, сценарий <code>init</code> из initramfs затем переключает root на действительную корневую файловую систему и, в завершение, вызывает <code>/sbin/init</code> на этой системе, для продолжения процесса загрузки. 

== Создание initramfs ==

=== Введение и настройка загрузчика ===

Для создания initramfs, важно чтобы Вы знали какие дополнительные драйверы, сценарии и инструменты Вам необходимы для загрузки Вашей системы. Например, если Вы используете LVM, то Вам потребуется поддержка инструментов LVM на initramfs. Таким же образом, если Вы используете программный RAID, Вам нужен <code>mdadm</code>, и т.д. 

Существуют несколько инструментов, которые помогут Вам создать initramfs (сжатые cpio-архивы) для Вашей системы. Но для тех, кому требуется полный контроль, также потребуется создать свою собственную initramfs. 

После создания initramfs, Вам необходимо настроить конфигурацию загрузчика для сообщения загрузчику, что будет использоваться initramfs. Например, если файл initramfs сохранен как {{Path|/boot/initramfs-3.2.2-gentoo-r5}}, то конфигурация в {{Path|/boot/grub/grub.conf}} будет выглядеть следующим образом: 

{{File/ru|grub.conf|Пример записи в grub.conf для загрузки с initramfs|<pre>
title Gentoo Linux 3.2.2-r5
root (hd0,0)
kernel /boot/kernel-3.2.2-gentoo-r5
initrd /boot/initramfs-3.2.2-gentoo-r5
</pre>
}}

=== Использование genkernel ===

Утилита для сборки ядра Gentoo, <code>genkernel</code>, может использоваться для генерирования initramfs, даже если Вы не использовали <code>genkernel</code> для конфигурации и сборки ядра. 

Чтобы использовать <code>genkernel</code> для генерации initramfs, рекомендуется чтобы Вы включили все необходимые драйверы и код, который требуется для монтирования Ваших {{Path|/}} и {{Path|/usr}} файловых систем, в ядро (а не как модули). Затем, вызовите <code>genkernel</code> следующим образом: 

{{RootCmd|genkernel --install --no-ramdisk-modules initramfs}}

В зависимости от Вашей системы, Вы можете пожелать добавить одну или более из следующих опций: 

{| class="wikitable" style="text-align: left;" 
|- 
! Опция
! Описание
|- 
| --disklabel
| Включить поддержку <code>LABEL=</code> настроек в файл {{Path|/etc/fstab}} 
|- 
| --dmraid
| Включить поддержку fake hardware RAID
|- 
| --firmware
| Включить firmware code, найденный на системе
|- 
| --gpg
| Включить поддержку GnuPG
|- 
| --iscsi
| Включить поддержку iSCSI
|- 
| --luks
| Включить поддержку зашифрованных контейнеров luks
|- 
| --lvm
| Включить поддержку LVM
|- 
| --mdadm
| Включить поддержку программного (software) RAID
|- 
| --multipath
| Включить поддержку множественного I/O-доступа к SAN
|- 
| --zfs
| Включить поддержку ZFS
|-
|}

По завершении, файл initramfs, полученный в результате, будет сохранен в {{Path|/boot}} . 

=== Использование dracut ===

{{Warning/ru|На время написания, dracut не отмечен в качестве стабильного пакета, поэтому вам может потребоваться его размаскировка, перед тем как продолжить.}}

The <code>dracut</code> utility is created for the sole purpose of managing initramfs files. It uses a highly modular approach on which support you want to include and which not. 

When you install <code>dracut</code>, you will need to take care to include support for the correct <code>DRACUT_MODULES</code> . This is a variable you can set in {{Path|/etc/portage/make.conf}} to include support for specific setups: 

{{File|make.conf|Preparing to install dracut|<pre>
DRACUT_MODULES="dmraid lvm syslog -biosdevname -btrfs -caps -crypt -crypt-gpg
-dmsquash-live -gensplash -iscsi -livenet -mdraid -multipath -nbd -nfs -plymouth
-ssh-client"
</pre>
}}

It is advisable to set (or unset) those modules you need (and don't need). Afterwards, <code>emerge dracut</code> to install the utility on your system. 

The next step is to configure <code>dracut</code> by editing {{Path|/etc/dracut.conf}}. In the configuration file, which is well commented, you can add in support for specific modules where needed. 

Once configured, create an initramfs by calling <code>dracut</code> as follows: 

{{RootCmd|dracut}}

The resulting image supports generic system boots based on the configuration in {{Path|/etc/dracut.conf}}. You can also opt to generate an initramfs specifically tailored to your system (in which <code>dracut</code> tries to detect the needed tools, drivers, etc. from your existing system). If you know that the needed support (code and drivers) is built in in your kernel (and not as module), then you can even add in <code>--no-kernel</code>: 

{{RootCmd|dracut --host-only --no-kernel}}

For more information, check out the <code>dracut</code> and <code>dracut.cmdline</code> manual pages. 

== Additional resources ==

=== Gentoo-specific ===

* [http://en.gentoo-wiki.com/wiki/Initramfs Initramfs] on Gentoo-wiki.com
* [[Initramfs]] on the official Gentoo Wiki
* [[Dracut]] on the official Gentoo Wiki

=== General resources ===

* [https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt ramfs-rootfs-initramfs.txt] within the Linux kernel documentation

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Sven Vermeulen
