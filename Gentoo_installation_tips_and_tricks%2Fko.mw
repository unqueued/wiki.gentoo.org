<languages />


{{Metadata|abstract=젠투 설치는 다양한 설치 방법을 통한 상당히 유용한 접근법을 지향합니다. 설치 절차에서의 단일 요령에 대한 모든 내용을 넣는것은 거의  불가능하지만 이 문서에서는 참고 목적으로 제출한 요령을 다루려 할 것입니다.}}

The Gentoo installation allows for very flexible approaches to the various installation methods. As it is almost impossible to insert every single tip or trick in the installation instructions this document tries to deal with all submitted tips and tricks for reference purposes.


== 도입부 ==

=== 준비 ===

이 문서에는 젠투/x86 설치에 대한 여러가지 요령이 들어있습니다. 대부분 심도있게 다루었습니다 - 설치 절차에 대한 부록과 같은 의미이며, 내용을 대체하지는 않습니다. 

== 고급 설치 ==

=== 소프트웨어 RAID ===

{{Note/ko|소프트웨어 RAID에 익숙하지 않다면 [https://raid.wiki.kernel.org/index.php/Linux_Raid Software-RAID-HOWTO]를 읽으십시오.}}

{{Note/ko|더 자세한 과정은 [http://www.gentoo.org//doc/en/gentoo-x86+raid+lvm2-quickinstall.xml 소프트웨어 RAID와 LVM2 x86 빠른 설치 안내서]에서 찾아보실 수 있습니다.}}

설치 CD로 부팅하고나면 알맞은 RAID 모듈을 불러오십시오. RAID-1을 사용하려 한다면: 

{{RoodCmd|modprobe raid1}}

디스크의 파티션을 나눌 때, 파티션에서 <code>83</code>(리눅스 네이티브 파티션) 대신<code>fd</code>(리눅스 RAID 자동 감지)를 사용하는지 확인하십시오. <code>fdisk</code>에서 <code>t</code> 명령으로 파티션 형식을 바꿀 수 있습니다. 

이제 RAID 어레이를 만들기 전에 메타장치 노드를 만들어야 합니다: 

{{RootCmd|mknod /dev/md1 b 9 1
|mknod /dev/md2 b 9 2
|mknod /dev/md3 b 9 3}}

파티션을 나누고 나면, [http://www.linuxdevcenter.com/pub/a/linux/2002/12/05/RAID.html RAID 관리]용 고급 도구인 <code>mdadm</code>을 사용하여 {{Path|/etc/mdadm.conf}} 파일을 만드십시오. 예를 들어, {{Path|/dev/sda}}와 {{Path|/dev/sdb}}에 해당하는 부트, 스왑, 루트 파티션을 미러링(RAID-1) 하려면, 다음처럼 적을 수 있습니다: 

{{RootCmd|mdadm --create --verbose /dev/md1 --level{{=}}1 --raid-devices{{=}}2 --metadata{{=}}0.90 /dev/sda1 /dev/sdb1
|mdadm --create --verbose /dev/md2 --level{{=}}1 --raid-devices{{=}}2 --metadata{{=}}0.90 /dev/sda2 /dev/sdb2
|mdadm --create --verbose /dev/md3 --level{{=}}1 --raid-devices{{=}}2 --metadata{{=}}0.90 /dev/sda3 /dev/sdb3}}

{{Important/ko|부팅하려는 파티션에 RAID-0이나 RAID-5 같은 형식을 사용하면 안됩니다. 또한, <code>--metadata{{=}}0.90</code>은 중요한 파일 시스템에만  필요합니다. 다른 파일 시스템에서는 좀 더 최신의 메타데이터 포맷을 사용합니다.}}

리눅스 소프트웨어 RAID 드라이버는 메타 장치 생성을 시작합니다. {{Path|/proc/mdstat}}에서 과정을 볼 수 있습니다. 진행 전에 메타 장치 생성이 끝날 때까지 기다리십시오. 

{{RootCmd|mdadm --detail --scan > /etc/mdadm.conf}}

이제부터 앞으로, {{Path|/dev/md1}}를 부트 파티션, {{Path|/dev/md2}}를 스왑 파티션, {{Path|/dev/md3}}를 루트 파티션으로 사용합니다. 

chroot를 수행하기 전에, {{Path|/etc/mdadm.conf}}를 {{Path|/mnt/gentoo/etc/}}에 복사하는 것을 잊지 마십시오. 

커널을 설정할 때, 적당한 RAID 지원을 커널에 모듈로서가 아니라 ''포함''했는지 확인하십시오. 

추가 도구를 설치할 때 <code>mdadm</code>도 같이 emerge 하십시오. 참고로 모든 설치 CD에서는 사용할 수 없기 때문에, 무 네트워크 설치 방식을 사용할 경우 젠투에 소프트웨어 RAID를 설치할 수 없습니다. 

부트로더를 설정할 때 미러링을 사용할 경우 ''두'' 디스크의 주 부트 레코드에 부트로더를 설치했는지 확인하십시오 

=== 2.4 커널을 사용한 ATA RAID ===

Make sure you boot your Installation CD using the <code>doataraid</code> option. Once booted, check the contents of {{Path|/dev/ataraid}} . It should contain various {{Path|disc*}} directories for each harddisk available in the ATA RAID. An entire disk is displayed as {{Path|disc}} while partitions are {{Path|part*}} . 

Write down the various {{Path|/dev/ataraid/disc*/*}} device files that you use to install Gentoo on. You will need to substitute the {{Path|/dev/sda}} examples in the installation with this path. 

Before chrooting, bind-mount the {{Path|/dev}} structure in the new environment: 

{{RootCmd|mount --rbind /dev /mnt/gentoo/dev}}

When configuring your kernel, make sure you enable support for your ATA RAID chipset and options. For instance, a popular ATA RAID system is a ''Promise FastTrack built-in RAID'' in which case you definitely need <code>Promise FastTrack Options</code> built in into your kernel. 

When configuring GRUB, you first have to create a GRUB bootdisk. This is not as hard as you think. First install GRUB as you would, but when you come to the part where GRUB is getting installed in the MBR, follow the following instructions: 

{{RootCmd|cd /boot/grub
|dd if{{=}}stage1 of{{=}}/dev/fd0 bs{{=}}512 count{{=}}1
|dd if{{=}}stage2 of{{=}}/dev/fd0 bs{{=}}512 seek{{=}}1}}

You still need to write your {{Path|grub.conf}} file. This is no different from the installation instructions, just make sure that your <code>root=</code> points to the ATA RAID device. 

After finishing the installation, boot with your GRUB bootdisk. You will be greeted by a GRUB prompt. Now configure GRUB to boot from the ATA RAID device: 

{{Cmd|root (hd0,x)|prompt=grub> 
|setup (hd0)
|quit}}

Now reboot (with the GRUB bootfloppy removed). 

LILO users can safely use the instructions mentioned in the installation instructions. 

=== 설치 CD 커널 사용하기 ===

If you don't want to compile a kernel yourself you can use the kernel from the Installation CD and copy it to your system. When you come to the point that you're asked to compile a kernel, go to another terminal (press Alt-F2) and log in with the root password you've supplied at the beginning of the installation. 

젠투 시스템에 커널과 모듈을 복사하십시오: 

{{Note/ko|${KN} 은 'gentoo'  또는 'smp' 같은 커널 이름입니다.}}

{{RootCmd|cp /mnt/cdrom/isolinux/${KN} /mnt/cdrom/isolinux/${KN}.igz /mnt/gentoo/boot
|mkdir -p /mnt/gentoo/lib/modules
|cp -Rp /lib/modules/`uname -r` /mnt/gentoo/lib/modules}}

젠투 시스템을 부팅한 동안 불러와서 (설치 CD에서) 현재 실행중인 모든 모듈을 획득하려면 chroot한 환경에서 다음 명령을 실행하십시오: 

{{RootCmd|printf "modules\"" >> /etc/conf.d/modules
|cat /proc/modules | cut -d ' ' -f 1 >> /etc/conf.d/modules
|printf "\"\n" >> /etc/conf.d/modules}}

{{Path|/etc/conf.d/modules}}의 내용을 확인하고 그에 맞춰 업데이트하십시오. 

== 설치 단순화 ==

=== 터미널에서 나가기 ===

대부분 컴파일중일때 시스템에서 좀 떨어져 있기를 원합니다. 이 경우 모두를 신뢰할 수 없는 공공 환경에서 설치를 마무리 하는것만큼 어렵습니다. 이런 경우, 백그라운드에서 컴파일을 수행할 수 있으며 모든 터미널에서 로그아웃할 수 있습니다. 

몇가지 가능한 방안이 있습니다. 먼저 <code>screen</code>를 사용하는 방법이 있습니다. 설치 CD로 부팅하고 나서 루트 암호를 설정한 다음 screen 세션을 시작하십시오: 

{{Note/ko|모든 설치 CD에서 screen을 지원하지는 않습니다. 이 경우 이 섹션에서 설명한 다른 방법 중 하나를 사용해야 합니다.}}

{{RootCmd|screen -S gentoo}}

screen 세션에서 전체 설치 과정을 수행할 수 있습니다. 터미널을 떠나 있으려면, 스크린 세션을 ''분리''하기 위해 <code>Ctrl-a, d</code>키를 누르십시오(이 키는 컨트롤 키와 A 키를 동시에 누른 다음 이 상태에서 D키를 누르는 것입니다). 이제 시스템에서 안전하게 로그아웃할 수 있습니다. 

터미널에 다시 접근하려면 root로 다시 로그인 한 다음에 실행중인 screen 세션에 ''접촉'' 하십시오: 

{{RootCmd|screen -x gentoo}}

screen을 사용할 수 없다면, 터미널을 벗어날 또 다른 방법이 있습니다. 설치 과정을 따르지만 긴 시간의 컴파일을 시작할 지점에 도달할 경우(예를 들어 <code>./scripts/bootstrap.sh</code> 단계일 경우), 로그아웃할 때도 프로세스를 계속 실행할 수 있게 하는 <code>nohup</code>를 사용하시면 됩니다. 뒤에 "&"를 붙이는걸 잊지 마십시오. 그렇지 않으면 프로세스가 백그라운드에 위치하지 않습니다! 어디에 있었는지 다음 과정에서 알아야 하므로 어디에 있었는지(<code>pwd</code>명령으로 볼 수 있습니다) 기억하십시오. 

{{RootCmd|pwd|output=<pre>
/usr/portage
</pre>}}

{{RootCmd|nohup ./scripts/bootstrap.sh &}}

Now exit the chrooted environment ( <code>exit</code> ) and the Installation CD session. Your compilation will continue in the background. 

When you want to check the compilation, log in as root (on the Installation CD) and chroot back into your environment and go to the directory where you left off: 

{{RootCmd|chroot /mnt/gentoo /bin/bash
|env-update && source /etc/profile
|cd /usr/portage}}

Now use the <code>less</code> command on the {{Path|nohup.out}} file that is situated inside that directory. The compilation will append its output to that file, so if you want to follow the compilation progress, run <code>less nohup.out</code> and press <code>F</code> to follow the changes. When the compilation is finished, you can continue with the next step of the installation instructions. 

If you ever get tired of following the changes, press <code>Ctrl-C</code> followed by a <code>q</code> . This won't stop the compilation process, only the <code>less</code> process. 

== Fixing Errors/Issues ==

=== Extensive Testing of your Disks ===

If you think your disk needs to be thoroughly checked for consistency (bad sectors and such), you can use the <code>-c</code> option while placing the ext2 or ext3 filesystem on it (using <code>mke2fs</code> ). This will format, perform a read-test and mark all bad blocks as such. If you are really paranoid, use <code>-c -c</code> to format your disk and perform an extensive read/write test. 

{{RootCmd|mke2fs -j -c /dev/sda3}}

=== Recovering from a malfunctioning installation ===

If for some reason your Gentoo installation fails, you don't have to redo the installation all over again. Instead, you can safely "go" to the point where you think you made a mistake (or where you think the instructions are flawed) and try a different approach. 

First of all you need to chroot back into your Gentoo Linux environment. Follow the instructions again, but ignore the partitioning steps as your partitions are already created and even populated. You can therefore immediately mount those partitions at {{Path|/mnt/gentoo}} . You should also ignore the steps about stage extraction and modifying {{Path|make.conf}} - you don't want to overwrite your files do you? 

Once chrooted inside your Gentoo Linux environment, immediately go to the step where you think you should try a different approach. Don't redo all the steps like bootstrapping and such unless that is the place where you think things went wrong. 

For instance, if you believe that you have a wrongly configured {{Path|grub.conf}} , you can immediately fire up your editor to update {{Path|/boot/grub/grub.conf}} . 

Once you have tried a different approach for your situation, you should consider how much of the subsequent steps you need to perform again. If the subsequent steps are depending on your change, you will need to redo those. 

For instance, 

* if you have changed a variable inside {{Path|make.conf}} you will need to do all subsequent compiling since those depend on the settings inside {{Path|make.conf}} 
* if you have altered {{Path|/boot/grub/grub.conf}} you can immediately exit the chrooted environment and reboot as no subsequent steps are depending on {{Path|grub.conf}} 
* if you have recompiled your kernel you only need to make sure that your bootloader configuration points to the correct kernel image (double-check that you mounted your {{Path|/boot}} !), then you can exit the chrooted environment and reboot
* if you have altered {{Path|/etc/fstab}} you can exit the chrooted environment and reboot

As you can see, for most recovery operations you can immediately reboot. Only in certain cases will you need to redo the subsequent installation steps. 

== 감사문 ==

We would like to thank the following authors and editors for their contributions to this guide:


* Sven Vermeulen
* Xavier Neys
* nightmorph

[[Category:Server and Security]]
