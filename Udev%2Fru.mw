<languages />


{{Metadata|abstract=udev это менеджер устройств для ядра Linux. Он обрабатывает файлы устройств в каталоге /dev и обрабатывает все действия пользователя при добавлении/удалении устройств.}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

'''udev''' это менеджер устройств для ядра Linux. Он обрабатывает файлы устройств в каталоге /dev и обрабатывает все действия пользователя при добавлении/удалении устройств. Также посмотрите на  [http://www.gentoo.org/proj/en/eudev eudev], это страница программы, выполняющей ту же функцию, что и udev.

== Что такое udev? ==

=== Каталог /dev ===

Когда пользователи Linux разговаривают о начинке своих систем среди людей, полагающих, что Linux — это какой-то вид вируса или марка кофе, пользуясь оборотами вроде «слэш дев слэш что—нибудь» (/dev/foo), на них наверняка смотрят косо. Но для счастливчиков (естественно, включая вас), {{Path|/dev/sda1}} — просто быстрый способ упоминания первого раздела ведущего диска SATA на первичном канале. Разве нет? 

Все мы знаем, что такое файл устройства. Некоторые даже знают, почему рядом с ними видны специальные числа, если посмотреть на результат <code>ls -l</code>, запущенной в каталоге {{Path|/dev}}. Но мы принимаем за данность, что первичный ведущий диск IDE называется {{Path|/dev/sda}}. У вас может быть и не так, но это всего лишь пример. 

Представим себе устройства «горячей замены» вроде USB, IEEE1394, заменямой PCI и т.д. Какое из них является первым по счету? Надолго ли? Как изменятся названия других устройств, если первое отключить? Как это повлияет на текущие операции? Было бы забавно, если бы задание печати вдруг переключалось с вашего супернавороченного лазерного принтера на старый полудохлый матричный из-за того, что ваша мама решила выдернуть разъем лазерного принтера, а тот оказался первым в списке, не так ли? 

Перейдем к ''udev''. Цели проекта udev как занимательны, так и актуальны:

* работа в режиме пользователя
* динамическое создание и удаление файлов устройств
* согласованное назначение имен устройств
* предоставление интерфейса программирования (API) для режима пользователя

Каждая раз, когда в структуре устройств появляется изменение, ядро генерирует ''uevent'', который ловится udev. Затем udev следует правилам, определенным в каталогах {{Path|/etc/udev/rules.d}}, {{Path|/run/udev/rules.d}} и {{Path|/lib/udev/rules.d}} directories. На основании информации в uevent, он находит правило или правила, которые он должен выполнить, и выполняет необходимые действия. Эти действия могут заключаться в создании или удалении файлов устройств, но могут и загружать нужные файлы прошивки в память ядра.

== Установка ==

{{Note/ru|Если вы обновляетесь, проверьте[[/upgrade|часть для обновлений]].}}

=== Ядро ===

Вам нужно включить следующие параметры ядра:

<!-- Смотри http://git.kernel.org/?p=linux/hotplug/udev.git;a=blob_plain;f=README -->
{{Kernel||<pre>
General setup  --->
    [*] Configure standard kernel features (expert users)  --->
        [ ] Enable deprecated sysfs features to support old userspace tools
        [*] Enable signalfd() system call
Enable the block layer  --->
    [*] Block layer SG support v4
Networking support  --->
    Networking options  --->
        <*> Unix domain sockets
Device Drivers  --->
    Generic Driver Options  --->
        ()  path to uevent helper
        [*] Maintain a devtmpfs filesystem to mount at /dev
    < > ATA/ATAPI/MFM/RLL support (DEPRECATED)  --->
File systems  --->
    [*] Inotify support for userspace
    Pseudo filesystems --->
        [*] /proc file system support
        [*] sysfs file system support
</pre>}}

=== Программное обеспечение ===

Portage знает о глобальном USE флаге ''udev'' для включения поддержки udev в остальных пакетах. Включение этого USE флага (он включен по умолчанию по всех [[profile|профилях]] ''linux'') приведет к тому, что {{Package|sys-fs/udev}} автоматически установится:

{{File|/etc/portage/make.conf||<pre>
USE="... udev ..."
</pre>}}

USE флаги программы udev следующие:

{{USEflag|package=sys-fs/udev
|acl+yes
|doc
|firmware-loader+yes
|gudev+yes
|introspection+yes
|kmod+yes
|openrc+yes
|selinux++no
|static-libs++no
}}

После установки этого флага потребуется обновить систему, чтобы изменения вступили в силу:

{{Emerge|params+=--changed-use --deep|@world}}

== Конфигурация ==

=== Service ===

To start udev at boot time, add it your sysinit runlevel:
{{RootCmd|rc-update add udev sysinit}}

== Advanced Configuration ==

=== Rules ===

udev provides a set of rules that match against exported values of uevents (events sent by the kernel) and properties of the discovered device. A matching rule will possibly name and create a device node and run configured programs to set-up and configure the device.

The rule definitions are stored in {{Path|/lib/udev/rules.d}} (installed by packages) and {{Path|/etc/udev/rules.d}} (for end-user specified rules). In these directories, multiple rule files (with suffix {{Path|.rules}}) are traversed in alphanumerical order. Inside the rules files, udev will find expressions that might match a uevent together with the state to match (is the uevent because a device is added or removed) and the command to execute.

The event matching is based on information such as:
* the ''SUBSYSTEM'' of the uevent (for which type of device is the uevent fired)
* the ''ACTION'' that is taken (add, change or remove)
* one or more attributes (through ''ATTR'' or ''ATTRS''), such as the device class, vendor or other device information
* the kernel-provided name (through ''KERNEL''), such as sd* (for SCSI/SATA disks) or input* (for input devices such as mice and keyboards)
* one or more environment settings (through ''ENV''), used to send information between multiple rules

Based on this information, the rule can then state if 
* some information needs to be shared with later events (through environment variables)
* links need to be created in {{Path|/dev}}
* commands need to be executed

Udev does this for every rule that matches (so it does not stop after the first match) to allow a flexible device management approach.

=== Persistent device names ===

The kernel detects devices asynchronous, udev mirrors the kernel's [[sysfs]] filesystem and so the device are named and numbered in order of detection. So by default udev provides no persistent device names. However there are mechanismen for some device classes to provide these:

* udev creates for storage devices additional symlinks based on the device's id, label, uuid and path. See the {{Path|/dev/disk/by-*}} directory. So instead of using e.g. the device file {{Path|/dev/sda}} use the file {{Path|/dev/disk/by-label/SOME_LABEL}}.

* The same for input devices in the {{Path|/dev/input}} directory.

* Using custom rules you can create your own device files.

== Usage ==

Some useful commands are:

* Show all messages about a given device file:
: {{RootCmd|udevadm info --query{{=}}all --name{{=}}/dev/DEVICE_FILE}}

* Monitor udev activities:
: {{RootCmd|udevadm monitor}}

See the ''udevadm'' [[man page]] for more information.

== Troubleshooting ==

* {{Bug|udev|search=package}}

=== Log monitor messages ===

Log all message you see, when you run '''udevadm monitor''':

{{File|/etc/conf.d/udev||<pre>
udev_monitor="YES"
</pre>}}

It will create the new log file {{Path|/run/udev/udevmonitor.log}}.

=== Debug mode ===

Enable debug mode to get more log messages:

{{File|/etc/conf.d/udev||<pre>
udev_debug="YES"
</pre>}}

It will create the new log file {{Path|/run/udev/udevdebug.log}}.

=== Missing device files {{Path|/dev/null}} and {{Path|/dev/console}} ===

Some udev versions need these files and can't create them on their own. So you have to create them:

{{RootCmd
|mkdir test
|mount --bind / test
|cd test/dev
|mknod -m 660 console c 5 1
|mknod -m 660 null c 1 3
|cd ../..
|umount test
|rmdir test
}}

=== NIC assigned eth0, but is moved to eth1 ===

Those having dual network cards on their motherboards may run into a situation where ifconfig may show no eth0 or eth1.  Dmesg may show their NIC detected as eth0, and later moved to eth1. Performing a "ifconfig -a" will also show the NIC as eth1. This is caused by using the kernel assigned names in the first place. You should write your own rules like {{Path|/etc/udev/rules.d/70-my-network.rules}} to
use free names like lan0 or wireless0 or use the predictable interface names which are enabled by the default since version 197.

Remember to also remove old files from old versions of udev:

{{RootCmd|rm /etc/udev/rules.d/70-persistent-net.rules}}


[[Category:Core system]]
[[Category:Daemons]]
