<languages />

<translate>

<!--T:131-->
{{Metadata|abstract=This is a quick start guide to PostgreSQL. It covers emerging PostgreSQL and configuring it. This is complementary to the official documentation, but does not supplant it.}}

<!--T:1-->
This is a quick start guide to PostgreSQL. It covers emerging PostgreSQL and configuring it. This is complementary to the official documentation, but does not supplant it.

== Introduction == <!--T:2-->

=== A Little Bit About PostgreSQL === <!--T:3-->

<!--T:4-->
[http://www.postgresql.org PostgreSQL] is a free and open source relational database management system (RDBMS). It supports such things as transactions, schemata and foreign keys, and is often touted to adhere to the SQL standards more strictly and be more secure, by default, than any other database, commercial or otherwise. 

<!--T:5-->
Visit the [http://www.postgresql.org/about/ About] page on postgresql.org for more information.

=== What This Article Will Cover === <!--T:6-->

<!--T:7-->
This article will guide you through the Gentoo specific steps to install the PostgreSQL RDBMS. 

<!--T:8-->
The Ebuilds covered by this article are [http://packages.gentoo.org/package/dev-db/postgresql-docs dev-db/postgresql-docs] , [http://packages.gentoo.org/package/dev-db/postgresql-base dev-db/postgresql-base] and [http://packages.gentoo.org/package/dev-db/postgresql-server dev-db/postgresql-server] . 

<!--T:9-->
This article assumes that you will be installing the latest, stable version of PostgreSQL; at the time of this writing, the version was 9.3.5. Adjust the commands in this article as necessary for your specific version. 

=== About the Ebuilds === <!--T:11-->

<!--T:12-->
The PostgreSQL ebuilds in Portage feature slotting based on the major version. This allows you to have two major versions of PostgreSQL operating simultaneously; 9.0-9.4 libraries and servers can be installed and serve at the same time. This is useful in such circumstances where you need to move data from an older database to a new database, or need to have a production and a testing database on the same machine. Also, this prevents a database, corresponding libraries or executables from being overwritten by an incompatible update. That would require migration which is described in this guide. 

<!--T:13-->
Additionally, bug and security fixes, which are delivered via minor version updates, can be applied without fear of corrupting the database or the PostgreSQL installation itself; 9.3.4 can be updated to 9.3.5 as they are guaranteed to be compatible and require no more interaction from you than to emerge it and restart the server process neither migration, reconfiguration nor initialization are necessary. 

<!--T:14-->
Read the [http://www.postgresql.org/support/versioning PostgreSQL Versioning Policy] for more information. 

=== What this Article Will Not Cover === <!--T:15-->

<!--T:16-->
There is quite a bit that will not be covered. The [http://www.postgresql.org/docs/ official documentation] is somewhere in the neighborhood of 2,000 pages. So, a lot of details will be left out in this quick start guide. Only Gentoo specific issues will be covered and some basic configuration guidelines. 

== Installation == <!--T:17-->

=== The Obsolete Ebuilds === <!--T:18-->

<!--T:19-->
If you have any of the following ebuilds installed, then you have an older, obsolete Gentoo installation of PostgreSQL and should migrate now: dev-db/postgresql-libs, dev-db/postgresql-client, dev-db/libpq and/or dev-db/postgresql. 

<!--T:20-->
This article does cover migrating from the old ebuilds to the new ones. 

=== USE Flags === <!--T:21-->

<!--T:22-->
{| class="wikitable" style="text-align: left;" 
|- 
! USE Flag
! Meaning
|- 
| doc
| Include the [http://www.postgresql.org/docs/ online documentation] to be stored on your system
|- 
| kerberos
| Support for utilizing Kerberos for authentication.
|- 
| ldap
| Support for utilizing LDAP authentication and connection parameter lookup.
|- 
| nls
| Enable the ability to display messages in a language other than English. Used in conjunction with the Portage variable LINGUAS.
|- 
| pam
| Support for utilizing Pluggable Authentication Modules for authentication.
|- 
| perl
| Enable support for using Perl to write functions and trigger procedures.
|- 
| pg-intdatetime (Deprecated)
| Use the newer, high resolution, 64-bit integer method for formatting timestamps instead of the older, floating point method. Unless you had a previous installation that utilized the deprecated method, leave this enabled. (See note.)
|- 
| pg_legacytimestamp
| Use the older, floating-point method for formatting timestamps instead of the higher resolution 64-bit integer method. Unless you had a previous installation that utilized this deprecated method, leave this USE flag disabled. (See note.)
|- 
| python
| Enable support for using Python to write functions and trigger procedures.
|- 
| readline
| You really want this enabled. Disabling removes command line editing and history in psql.
|- 
| selinux
| Install respective SELinux policy. This can only be enabled by using the SELinux profile.
|- 
| ssl
| Enable support for SSL connections.
|- 
| tcl
| Enable support for using Tcl to write functions and trigger procedures.
|- 
| threads
| Make the client libraries thread-safe. The rest of your system must be thread-safe as well.
|- 
| uuid
| Include support to generate a 128 bit random unique identifier. This is useful for merging databases together so the chances of collisions become extremely low.
|- 
| xml
| Enable SQL/XML support.
|- 
| zlib
| Support for compressed archives in pg_dump and pg_restore.
|-
|}

<!--T:23-->
{{Note|Flipping the 'pg-intdatetime' or the 'pg_legacytimestamp' will require you to do a dump and restore if any of your databases utilize timestamps. The two methods are incompatible with each other.}}

=== Start Emerging === <!--T:24-->

<!--T:25-->
{{Emerge|dev-db/postgresql-server|output=<pre>
[ebuild N ] dev-db/postgresql-docs-9.3.5 0 kB
[ebuild N ]dev-db/postgresql-base-9.3.5 USE="doc nls pam readline ssl zlib
  -kerberos -ldap -pg_legacytimestamp -threads" LINGUAS="-af -cs -de -es -fa -fr
  -hr -hu -it -ko -nb -pl -pt_BR -ro -ru -sk -sl -sv -tr -zh_CN -zh_TW" 0 kB
[ebuild N ] dev-db/postgresql-server-9.3.5 USE="doc nls perl python
  -pg_legacytimestamp (-selinux) -tcl -uuid -xml" LINGUAS="-af -cs -de -es -fa
  -fr -hr -hu -it -ko -nb -pl -pt_BR -ro -ru -sk -sl -sv -tr -zh_CN -zh_TW" 0 kB
</pre>
}}

<!--T:26-->
You may receive a notice regarding that any of the above packages are blocked by any or all of the following packages: dev-db/postgresql-libs, dev-db/postgresql-client, dev-db/libpq or dev-db/postgresql. These packages are '''not maintained''' and obsoleted. Refer to the section on migration from the previous ebuilds to the new ones to know how to handle this situation. 

=== Preparing to Initialize the Database Cluster === <!--T:27-->

<!--T:28-->
Once the packages have finished emerging, you may want to edit {{Path|/etc/conf.d/postgresql-9.3}} . There are three lines that effect the defaults of the server and '''cannot''' be changed later without deleting the directory that contains the database cluster and reinitializing. 

<!--T:29-->
''PGDATA'' defines where to place the configuration files. ''DATA_DIR'' defines where to create the database cluster and related files. ''PG_INITDB_OPTS'' may contain any[http://www.postgresql.org/docs/current/static/app-initdb.html extra options] you would care to set. The extra options are'''not''' required as the reasonable defaults are, ahem, reasonable. 

<!--T:30-->
In the following example, ''PGDATA'' states that the configuration files are to be located in {{Path|/etc/postgresql-9.3/}} . ''DATA_DIR'' states that the database cluster should be installed to {{Path|/var/lib/postgresql/9.3/data/}} , which is the default. If you decide to stray from the default, bear in mind that it is a '''very good idea''' to keep the major version in the path. ''PG_INITDB_OPTS'' states that the default locale should be ''en_US.UTF-8'' . That is, U.S. English ordering and formatting, and UTF-8 character encoding. 

<!--T:31-->
{{File|/etc/conf.d/postgresql-9.3|Example content|<pre>
# Location of configuration files
PGDATA="/etc/postgresql-9.3/"
  
# Where the data directory is located/to be created
DATA_DIR="/var/lib/postgresql/9.3/data"
  
# Additional options to pass to initdb.
# See 'man initdb' for available options.
PG_INITDB_OPTS="--locale=en_US.UTF-8"
</pre>
}}


<!--T:32-->
{{Note|This only determines the default locale and character encoding. You can specify different locales and/or character encodings at database creation time ( <code>CREATE DATABASE</code> ) in the same database cluster.}}

<!--T:33-->
There are six locale options that can be set to override ''--locale='' . The following table lists the six options that, if used, are to be formatted as: <code>--option=lo_LO.ENCODING</code>. 

<!--T:34-->
{| class="wikitable" style="text-align: left;" 
|- 
! Option
! Effects
|- 
| lc-collate
| String sort order
|- 
| lc-ctype
| Character classification (What is a letter? Its upper-case equivalent?)
|- 
| lc-messages
| Language of messages
|- 
| lc-monetary
| Formatting of currency amounts
|- 
| lc-numeric
| Formatting of numbers
|- 
| lc-time
| Formatting of dates and times
|-
|}

<!--T:35-->
So, if you would like the default to be English, but you want messages in, say, Swedish, then your ''PG_INITDB_OPTS'' would look like so:

<!--T:36-->
{{Code|Setting PG_INITDB_OPTS|<pre>
PG_INITDB_OPTS="--locale=en_US.UTF-8 --lc-messages=sv_SE.UTF-8"
</pre>
}}

<!--T:37-->
A complete list of language and character encodings supported by the server can be found in the documentation, but your system must also support the respective languages and character encodings. Compare the output of <code>locale -a</code> to the [http://www.postgresql.org/docs/current/static/multibyte.html encodings] in the documentation. 

<!--T:38-->
You can change your locale and encoding selections at database [http://www.postgresql.org/docs/current/static/sql-createdatabase.html creation time.] In order to change the locale for a database after you have created it, you must drop the database and start over again. 

<!--T:39-->
{{RootCmd|emerge --config dev-db/postgresql-server:9.3}}

<!--T:40-->
This will create the database cluster and store all the related server files into ''PGDATA'' and ''DATA_DIR'' . 

== Configuration == <!--T:41-->

=== Where the Configuration Files are Located === <!--T:42-->

<!--T:43-->
This time the focus is upon the files in the ''PGDATA'' directory, {{Path|/etc/postgresql-9.3}} , instead with primary focus on the {{Path|postgresql.conf}} and {{Path|pg_hba.conf}} files. 

=== postgresql.conf === <!--T:44-->

<!--T:45-->
This is the main configuration file. The line that you may find of immediate interest is ''listen_addresses'' . This variable defines to which addresses PostgreSQL will bind. By default, only localhost and the Unix socket are bound. Changing ''listen_addresses'' is not enough to enable remote connections. That will be covered in the next section. The [http://www.postgresql.org/docs/current/static/runtime-config.html official documentation] is fairly easy to understand and is exhaustive on all the settings available. It would behoove you to read that in addition to what is covered here as some things may change. 

<!--T:46-->
Of secondary interest is the logging destination. By default, everything is logged to {{Path|postmaster.log}} in the ''DATA_DIR'' directory. There is an entire subsection of {{Path|postgresql.conf}} that covers a slew of options for how, what and where to log. The subsection is marked: ERROR REPORTING AND LOGGING. 

<!--T:47-->
Other than ''listen_addresses'' and the logging options, the rest of the defaults in {{Path|postgresql.conf}} are reasonable enough to get you going. 

=== pg_hba.conf === <!--T:48-->

<!--T:49-->
The {{Path|pg_hba.conf}} file states who is allowed to connect to the database server and which authentication method must be used to establish the connection. Again, the documentation is quite exhaustive on the settings and what they all mean, but a few things are covered here for clarification. 

<!--T:50-->
{{File|pg_hba.conf|Default settings|<pre>
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
  
# "local" is for Unix domain socket connections only
local   all         all                               trust
# IPv4 local connections:
host    all         all         127.0.0.1/32          trust
# IPv6 local connections:
host    all         all         ::1/128               trust
</pre>
}}

<!--T:51-->
As has been mentioned before, by default the server is secure. Kind of. There is only one database role that is available for log in by default: ''postgres'' . And, the only way to initiate a connection to the database is through the {{Path|/var/run/postgresql/.s.PGSQL.5432}} Unix socket, which is owned by the ''postgres'' system user and system group, or via localhost. Now for the "kind of" bit: Any user on the system can make a connection to the database through the localhost. Even as the ''postgres'' database superuser. 

<!--T:52-->
To make a connection through the Unix socket, however, the users including the users for other services such as ''apache'' must be in the ''postgres'' system group. Use <code>gpasswd -a ''user'' postgres</code> to add ''user'' to the ''postgres'' group. Users not in the ''postgres'' group will be rejected with "Permission denied". 

<!--T:53-->
{{Warning|Never disable the Unix socket entirely. The initscripts require access to it in order to operate properly. The method can be changed freely.}}

<!--T:54-->
The ''trust'' method is what allows any user to log on as any user without a password. It specifies just what it implies: Trust all connections for the given type to the given database from the given database user (but not the system user) from the given location without a password. This is what allows any user on the system to log on as any user through the localhost connection from the get go. This is not as dangerous as it seems, but does pose a serious security risk in most circumstances. 

<!--T:55-->
The two methods you will most likely use are: ''password'' and ''md5'' . The password method only specifies that a password is required to start the connection and the password is sent "in-the-clear". This method is fine when such information will never leave the machine, such as connecting via the Unix socket or localhost. The md5 method is like password, but protects the password by using an md5 hash. This is what you want to use whenever the password is going to traverse a network. 

<!--T:56-->
At this point, this author would like to bring your attention to the last two lines, four lines including comments, of the {{Path|pg_hba.conf}} file. PostgreSQL has native support for IPv6 regardless of your desires for such support. Additionally, IPv4 addresses are automatically mapped to IPv6 addresses, ''i.e.'' , 127.0.0.1 will be mapped to ::FFFF:127.0.0.1 and as "pure" IPv6 ::FFFF:7F00:0001. 

<!--T:57-->
There seems to be some misunderstanding, though, as to how host names are mapped to IP addresses. Let us take a look at the {{Path|/etc/hosts}} file. 

<!--T:58-->
{{File|/etc/hosts||<pre>
# IPv4 and IPv6 localhost aliases
127.0.0.1       localhost
::1             localhost
</pre>
}}

<!--T:59-->
From the example above you can see that both an IPv4 and an IPv6 IP address are mapped to localhost. When <code>psql</code> refers to this file, it will grab the first match and use that as the address; in this case 127.0.0.1. When PostgreSQL parses this, it will match the IPv6 formatted address as well, e.g. ::ffff:127.0.0.1. If, however, the IPv6 address appears first, then <code>psql</code> will map to ::1 alone; ::1 is not the same as ::ffff:127.0.0.1. As such, if you do not have ::1 as a permitted means of access, <code>psql</code> will not be able to establish a connection. Furthermore, your kernel needs to support the IPv6 protocol. 

<!--T:60-->
So, it is better to specify IP addresses alone to <code>psql</code> and in {{Path|pg_hba.conf}} rather than to rely on {{Path|/etc/hosts}} to be ordered properly, and it removes any doubt as to which IP addresses are allowed or to which server you will connect. 

== Starting the Server == <!--T:61-->

=== Give It a Go! === <!--T:62-->

<!--T:63-->
Now start PostgreSQL and set the password for the database superuser ''postgres'' . The commands are to be performed as 'root' in the following code listing: 

<!--T:64-->
Change 'trust' to 'password' for the localhost connections.

<!--T:65-->
{{RootCmd|nano -w /etc/postgresql-9.3/pg_hba.conf}}

<!--T:66-->
Now start the database:

<!--T:67-->
{{RootCmd|/etc/init.d/postgresql-9.3 start|output=<pre>
postgresql-9.3  | * Starting PostgreSQL ...                             [ ok ]
</pre>}}

<!--T:68-->
Open a connection to the server and set the password:

<!--T:69-->
{{RootCmd|psql -U postgres|output=<pre>
psql (9.3.5)
Type "help" for help.
</pre>}}

<!--T:70-->
{{Cmd|\password|prompt=postgres{{=}}# |output=<pre>
Enter new password:
Enter it again:
</pre>}}

<!--T:71-->
{{Cmd|\q|prompt=postgres{{=}}# }}

<!--T:72-->
Change 'trust' to 'password' for the local connection:

<!--T:73-->
{{RootCmd|nano -w /etc/postgresql-9.3/pg_hba.conf}}

<!--T:74-->
Now have the database reload the configuration:

<!--T:75-->
{{RootCmd|/etc/init.d/postgresql-9.3 reload|output=<pre>
postgresql-9.3 | * Reloading PostgreSQL configuration ...               [ ok ]
</pre>
}}

<!--T:133-->
Finally, once everything works as it should, have PostgreSQL start at boot:
{{RootCmd|# rc-update add postgresql-9.3 default|output=<pre>
 * service postgresql-9.3 added to runlevel default
</pre>
}}

<!--T:76-->
At this point you are ready to continue on with the official [http://www.postgresql.org/docs/current/static/tutorial.html PostgreSQL Tutorial]. The tutorial will guide you through creating roles, databases, schemata and all that fun and useful stuff.

== Migrating PostgreSQL == <!--T:77-->

=== When You Need to Migrate === <!--T:78-->

<!--T:79-->
There are only two reasons you would need to perform a migration: When moving from one major version to another, ''e.g.'' , from PostgreSQL 8.4.7 to 9.0.3, but not from 9.0.2 to 9.0.3; or when switching from the deprecated floating-point timestamp format to the new 64-bit integer timestamp format. 

<!--T:80-->
{{Note|You will need to migrate your database when you move from the obsolete ebuilds dev-db/libpq, dev-db/postgresql, dev-db/postgresql-libs, and dev-db/postgresql-client to the new ebuilds dev-db/postgresql-docs, dev-db/postgresql-base and dev-db/postgresql-server.}}


=== Post-9.0 Migration === <!--T:81-->

<!--T:82-->
''pg_upgrade'' , a new utility that comes along with 9.0 and later, simplifies the migration process rather drastically. 

<!--T:83-->
However, there are two caveats with using pg_upgrade. Firstly, it does not support configuration files being in a different directory than where the data is stored. This can be resolved by using symbolic links. Lastly, you can only use it to migrate from a database from 8.3 or newer. If you have an older database you will need to follow the instructions to migrate from pre-9.0 deployments.

<!--T:84-->
Don't forget to initialize the new database:
{{RootCmd|emerge --config {{=}}dev-db/postgresql-server-9.3}}

<!--T:132-->
Stop the servers you're going to migrate from and to:

<!--T:85-->
{{RootCmd|/etc/init.d/postgresql-8.4 stop
|/etc/init.d/postgresql-9.3 stop
|ln -s /etc/postgresql-8.4/*.conf /var/lib/postgresql/8.4/data/
|ln -s /etc/postgresql-9.3/*.conf /var/lib/postgresql/9.3/data/}}

<!--T:86-->
Check available versions, then select yours:

<!--T:87-->
{{RootCmd|eselect postgresql list
|eselect postgresql set 9.3}}

<!--T:88-->
Change the method of database user 'postgres' to trust on local connections on all databases:

<!--T:89-->
{{RootCmd|nano -w /etc/postgresql-8.4/pg_hba.conf
|nano -w /etc/postgresql-9.3/pg_hba.conf}}

<!--T:90-->
You may need to change the permissions of '/var/lib/postgresql/' before you perform the next step.

<!--T:91-->
{{RootCmd|su - postgres}}

<!--T:92-->
{{Cmd|pg_upgrade -U postgres \
-d /var/lib/postgresql/8.4/data -D /var/lib/postgresql/9.3/data \
-b /usr/lib/postgresql-8.4/bin -B /usr/lib/postgresql-9.3/bin}}

<!--T:134-->
{{Note|PostgreSQL prior to version 9.4 used the <code>-u</code> option instead of <code>-U</code>.}}

<!--T:93-->
Perform the tasks pg_upgrade tells you to do , if any.

<!--T:94-->
{{Cmd|logout}}

<!--T:95-->
Remove the symbolic links  we created earlier:

<!--T:96-->
{{RootCmd|rm /var/lib/postgresql/8.4/data/*.conf
|rm /var/lib/postgresql/9.3/data/*.conf
|/etc/init.d/postgresql-9.3 start}}

=== Pre-9.0 Migration: With the New Ebuilds === <!--T:97-->

<!--T:98-->
Because the new ebuilds feature a more advanced slotting method than the previous ones, the downtime is quite minimal, most likely minutes rather than hours. 

<!--T:99-->
In the following examples, it is assumed that you are using the default locations and port settings, and that you are migrating from 8.3 to 8.4. Adjust accordingly if you have deviated from the default. 

<!--T:100-->
If you have not already done so, follow the installation instructions before starting the migration. Such a compile may hamper performance on the database server but it can keep going. 

<!--T:101-->
A couple of files need to be tweaked before beginning the migration. Edit ''PGPORT'' in the {{Path|/etc/conf.d/postgresql-8.4}} configuration file to 6543. (Any port number other than what your old installation is bound to will do.) 

<!--T:102-->
Next, edit {{Path|/etc/postgresql-8.3/pg_hba.conf}} so that only the database superuser ''postgres'' can access the database cluster via the Unix socket. 

<!--T:103-->
{{RootCmd|cp -p /etc/postgresql-8.3/pg_hba.conf /etc/postgresql-8.4/}}

<!--T:104-->
The following should be safe. Read the documentation to be sure.

<!--T:105-->
{{RootCmd|cp -p /etc/postgresql-8.3/postgresql.conf /etc/postgresql-8.4/}}

<!--T:106-->
Don't forget to copy over any other configuration files that you may need.

<!--T:107-->
{{RootCmd|/etc/init.d/postgresql-8.3 reload
|/etc/init.d/postgresql-8.4 start}}

<!--T:108-->
Begin piping the data from the old cluster to the new cluster.

<!--T:109-->
{{RootCmd|pg_dumpall -U postgres -p 5432 {{!}} psql -U postgres -d postgres -p 6543
|/etc/init.d/postgresql-8.3 stop
|/etc/init.d/postgresql-8.4 stop}}

<!--T:110-->
Edit PGPORT back to 5432.

<!--T:111-->
{{RootCmd|nano -w /etc/conf.d/postgresql-8.4}}

<!--T:112-->
Allow users access once more.

<!--T:113-->
{{RootCmd|nano -w /etc/postgresql-8.4/pg_hba.conf
|/etc/init.d/postgresql-8.4 start
|rc-update del postgresql-8.3 && rc-update add postgresql-8.4 default}}

<!--T:114-->
Hopefully everything went according to plan and you have a successfully updated server that contains precisely the same data, bit for bit, as the old server. 

=== Pre-9.0 Migration: From the Obsolete Ebuilds === <!--T:115-->

<!--T:116-->
You will need to schedule some downtime for your server. The old ebuilds '''cannot''' be installed at the same time as the new ebuilds. As such, assume that the server will have to be down for a few hours. Maybe for the weekend, even. 

<!--T:117-->
Before starting, you will need to deny access to the server, so that no changes are made. You may also want to backup your {{Path|postgresql.conf}} and {{Path|pg_hba.conf}} and any other configuration file that you deem important. 

<!--T:118-->
{{RootCmd|pg_dumpall -U postgres > backup_file
|/etc/init.d/postgresql stop
|emerge -C dev-db/postgresql dev-db/libpq dev-db/postgresql-client dev-db/postgresql-libs}}

<!--T:119-->
Follow the steps detailed in this article for installing and configuring the server.

<!--T:120-->
{{RootCmd|/etc/init.d/postgresql-8.4 start
|psql -f backup_file postgres}}

<!--T:121-->
You may break some packages that were built against those packages, but once you have installed dev-db/postgresql-base and/or dev-db/postgresql-server you can run <code>revdep-rebuild</code> to reemerge any packages that may have been broken.

== Utilities == <!--T:122-->

=== pgAdmin III === <!--T:123-->

<!--T:124-->
[http://www.pgadmin.org/ pgAdmin III] is a graphical utility for managing PostgreSQL. 

== Troubleshooting == <!--T:125-->

=== Server Lacks Instrumentation Functions === <!--T:126-->

<!--T:127-->
This problem is easy to solve, with the solution depending on the version you are using. What is difficult about it is finding the answer. What is required is an import from a file that already exists on the storage drive: {{Path|adminpack.sql}} . To resolve this issue, run one of the following commands appropriate to the version you have.

<!--T:128-->
For PostgreSQL 9.0 and earlier:
{{cmd|psql -U postgres --file /usr/share/postgresql-9.0/contrib/adminpack.sql}}

For PostgreSQL 9.1 and later:
{{Cmd|psql -U postgres -c "CREATE EXTENSION adminpack;"}}

=== Missing config files in {{Path|/etc/postgresql-9.x}} and {{Path|/var/lib/postgresql/9.x/data}} === <!--T:137-->

<!--T:138-->
You can try to move the config files into the directory, where x is your postgresql version number, as follows:

<!--T:139-->
{{RootCmd|cp /var/lib/postgresql/9.x/data/*.conf /etc/postgresql-9.x/}}

<!--T:140-->
If those files are missing you will need to initialize them.

<!--T:141-->
First su into the postgres user:

<!--T:142-->
{{RootCmd|su postgres}}

<!--T:143-->
Then, as the postgres user, run <code>initdb</code> and specify the data directory:

<!--T:144-->
{{Cmd|initdb -D /var/lib/postgresql/9.x/data/}}

<!--T:145-->
This will generate your configuration files and allow you to copy them over to {{Path|/etc/postgresql-9.x/}} as shown in the first command in this section.

=== "ERROR: timezone directory stack overflow" or "FATAL: too many private dirs demanded"===

This is caused by a symlink loop. To fix it, type the following:

{{RootCmd|rm /usr/share/zoneinfo/posix}}

Keep in mind that any update to zoneinfo will recreate this symlink, thus requiring you to remove it again.

=== Systemd ===

Force service to start on bootup.

{{RootCmd| systemctl enable postresql-9.4}}

To start service immediately type:

{{RootCmd| systemctl start postresql-9.4}}

If an error occurs check if dir <code>/run/postgresql/</code> is there. If no then type:

{{RootCmd| systemd-tmpfiles --create}}

Check config files permissions.

{{RootCmd| ls -l /etc/postgresql-9.*/*}}
{{RootCmd| chown postgres:postgres /etc/postgresql-9.*/*}}
{{RootCmd| chmod 600 /etc/postgresql-9.*/*}}

== Acknowledgements == <!--T:129-->

<!--T:130-->
We would like to thank the following authors and editors for their contributions to this guide:
</translate>

* Aaron W. Swenson
* Mikkel A. Clausen

<translate>

== References == <!--T:135-->

<!--T:136-->
<references/>
</translate>

[[Category:Database]]
