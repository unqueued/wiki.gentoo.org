<languages />
{{Metadata|abstract=Portage поддерживает сборку и установку бинарных пакетов. Это руководство объясняет, как создать их, установить и как настроить сервер бинарных пакетов.}}

На ряду с обычной поддержкой ebuild, Portage поддерживает сборку и установку бинарных пакетов. Это руководство объясняет, как создать их, установить и как настроить сервер бинарных пакетов.

== Введение ==

Есть много причин, почему некоторым системным администраторам нравится устанавливать пакеты Gentoo в виде бинарных пакетов.

# First of all, it allows administrators to ''keep similar systems updated''. Having to compile everything from source can become time consuming. Maintaining several similar systems, possibly some of them with older hardware, can be much easier if only one system has to compile everything from source and the other systems reuse the binary packages.
# A second reason is to ''do safe updates''. For mission critical systems it is important to stay ''usable'' as much as possible. This can be done by a staging server that performs all updates first to itself. Once the staging server is in a good state the updates can then be applied to the critical systems. A variant of this approach is to do the updates in a chroot on the same system and use the binaries created there on the real system.
# A third reason is ''as a backup''. Often binary packages are the only way of recovering a broken system (i.e. broken compiler). Having pre-compiled binaries around either on a binary package server or locally can be of great help in case of a broken toolchain.
# Finally, it also supports ''updating very old systems''. The task of updating very old systems can be greatly eased using binary packages. It is usually helpful to install binary packages on old systems because they do not require build time dependencies to be installed/updated. Binaries packages also avoid failures in build processes since they are pre-compiled.

В этом руководстве основное внимание будет уделено следующим темам: 

* как создать бинарные пакеты;
* как предоставить бинарные пакеты клиенту;
* как использовать бинарные пакеты;
* как обслуживать бинарные пакеты.

Ближе к концу будет рассмотрено несколько более сложных тем о работе с бинарными пакетами.

{{Note|Все утилиты, которые используются в этом руководстве, являются частью пакета {{Package|sys-apps/portage}}, если не указано иное.}}

== Создание бинарных пакетов ==

Существует три основных способа создания бинарных пакетов:

# после обычной установки использовать приложение {{c|quickpkg}};
# явно, во время каждого запуска {{c|emerge}}, использовать параметр <code>--buildpkg (-b)</code>;
# автоматически, с помощью возможности (feature) Portage <code>buildpkg</code>.

Все три метода создадут бинарные пакеты в каталоге, который указан в переменной <var>PKGDIR</var> (по умолчанию это {{Path|/usr/portage/packages}}).

=== Использование quickpkg ===

The {{c|quickpkg}} application takes one or more dependency atoms (or package sets) and creates binary packages for all ''installed'' packages that match that atom.

Например, для создания бинарных пакетов для всех ''установленных'' версий GCC:

{{RootCmd|quickpkg sys-devel/gcc}}

Используйте <code>*</code>, для того чтобы создать бинарные пакеты для всех установленных пакетов в системе:

{{RootCmd|quickpkg "*/*"}}

There is a caveat with this method: it relies on the installed files, which can be a problem in case of configuration files. Administrators often change configuration files after installing software. Because this could leak out important (perhaps even confidential) data into the packages, {{c|quickpkg}} by default does ''not'' include configuration files that are protected through the <var>CONFIG_PROTECT</var> method. To force inclusion of configuration files, use the <code>--include-config</code> or <code>--include-unmodified-config</code> options.

=== Использование --buildpkg как параметра emerge ===

При установке программ с помощью {{c|emerge}} можно попросить Portage создавать бинарные пакеты, если использовать параметр <code>--buildpkg (-b)</code>:

{{Emerge|params+=--buildpkg|sys-devel/gcc}}

Так же можно попросить Portage ''только'' создать бинарный пакет ''без'' установки пакета в систему. Для этого необходимо использовать параметр <code>--buildpkgonly (-B)</code>:

{{Emerge|params+=--buildpkgonly|sys-devel/gcc}}

The latter approach however requires all build time dependencies to be previously installed.

=== Реализация работы buildpkg с помощью возможности Portage ===

Наиболее распространенный способ создания бинарного пакета, каждый раз когда пакет устанавливается Portage, — это использовать возможность (feature) <code>buildpkg</code>, которою можно включить в файле {{Path|/etc/portage/make.conf}} так:

{{FileBox|filename=/etc/portage/make.conf|title=Включение возможности Portage buildpkg|lang=bash|1=
FEATURES="buildpkg"
}}

Каждый раз, когда Portage будет устанавливать программное обеспечение и эта возможность включена, он будет создавать также бинарный пакет.

=== Исключение для некоторых пакетов ===

Можно попросить Portage не создавать бинарные пакеты для некоторых выбранных пакетов или категорий. Это можно сделать передав команде emerge параметр <code>--buildpkg-exclude</code>:

{{RootCmd|emerge -uDN @world --buildpkg --buildpkg-exclude "virtual/* sys-kernel/*-sources"}}

This could be used for packages that have little to no benefit in having a binary package available. Examples would be the Linux kernel source packages or upstream binary packages (those ending with ''-bin'' like {{Package|www-client/firefox-bin}}).

== Настройка хоста бинарных пакетов ==

Portage поддерживает несколько протоколов для загрузки бинарных пакетов: FTP, FTPS, HTTP, HTTPS и SSH. Такое количество оставляет большое пространство для различных реализаций хоста бинарных пакетов.

Тем не менее, не существует «готового» метода, предоставляемого Portage для распространения бинарных пакетов. В зависимости от желаемой настройки необходимо установить дополнительное программное обеспечение.

=== Хост бинарных пакетов на основе веб ===

Основной подход для распространения бинарных пакетов это создать хост бинарных пакетов на основе веб.

Воспользуйтесь веб-сервером, таким как [[lighttpd]] ({{Package|www-servers/lighttpd}}) и настройте его, чтобы он предоставлял доступ на чтение к каталогу указанному в переменной <var>PKGDIR</var> в файле {{Path|/etc/portage/make.conf}}.

{{FileBox|filename=/etc/lighttpd/lighttpd.conf|title=Пример конфигурации lighttpd|lang=bash|1=
# добавьте это в конец стандартной конфигурации
server.modules += ( "mod_alias" )
alias.url = ( "/packages" => "/usr/portage/packages/" )
}}

Затем, на клиентских системах настройте переменную <var>PORTAGE_BINHOST</var>:

{{FileBox|filename=/etc/portage/make.conf|title=Использование хоста бинарных пакетов на основе веб|lang=bash|1=
PORTAGE_BINHOST="http://binhost.genfic.com/packages"
}}

=== Хост бинарных пакетов на основе SSH ===

To provide a more authenticated approach for binary packages, one can consider using SSH.

When using SSH, it is possible to use the Portage Linux user's SSH key (without passphrase as the installations need to happen in the background) to connect to a remote binary package host.

To accomplish this, make sure that the Portage user's SSH key is allowed on the server. This will need to happen for each machine that will connect to the SSH capable binary host:

{{RootCmd|cat portage.id_rsa.pub >> /home/binpkguser/.ssh/authorized_keys}}

Тогда переменная <var>PORTAGE_BINHOST</var> может выглядеть так:

{{FileBox|filename=/etc/portage/make.conf|title=Настройка PORTAGE_BINHOST для SSH-доступа|lang=bash|1=
PORTAGE_BINHOST="ssh://binpkguser@binhostserver/usr/portage/packages"
}}

{{Note|1=Не используйте конфигурационный файл ssh {{Path|~/.ssh/config}} для настройки портов или имени пользователя, так как они буду проигнорированы когда Portage будет синхронизировать пакеты на стороне клиента. Вместо этого настройте все параметры в переменной <var>PORTAGE_BINHOST</var>.}}

=== Экспорт из NFS ===

В случае использования хоста бинарных пакетов во внутренней сети, может быть проще экспортировать пакеты с помощью NFS, а затем смонтировать их на клиенте.

Файл {{Path|/etc/exports}} может выглядеть так:

{{FileBox|filename=/etc/exports|title=Экспорт каталога пакетов|1=
/usr/portage/packages                            2001:db8:81:e2::/48(ro,no_subtree_check,root_squash) 192.168.100.1/24(ro,no_subtree_check,root_squash)
}}

Затем на клиентах можно смонтировать каталог. Пример записи в файле {{Path|/etc/fstab}}:

{{FileBox|filename=/etc/fstab|title=Запись для монтирования папки с пакетами|1=
binhost:/usr/portage/packages      /usr/portage/packages    nfs    defaults    0 0
}}

== Использование бинарных пакетов ==

Для того, чтобы бинарные пакеты можно было использовать на других системах, они должны соответствовать некоторым требованиям:

* Архитектура на клиенте и сервере, а также переменная <var>[[CHOST]]</var> должны совпадать.
* Переменные оптимизации в <var>CFLAGS</var <var>CXXFLAGS</var>, используемые для создания бинарных пакетов, должны поддерживаться всеми клиентами.
* USE-флаги возможностей процессора (такие как MMX, SSE, ...) следует выбирать осторожно; все клиенты должны поддерживать их.

{{Important|Portage не может проверить соблюдаются ли эти требования. За соблюдение этих требований отвечает системный администратор.}}

Next to these, Portage will check if the binary package is built using the same USE flags as expected on the client. If a package is built with a different USE flag combination, Portage will either ignore the binary package (and use source-based build) or fail, depending on the options passed to the {{c|emerge}} command upon invocation (see [[#Installing binary packages|Installing binary packages]]).

На клиентах требуется сделать некоторые настройки, чтобы использовались бинарные пакеты.

=== Установка бинарных пакетов ===

Можно добавить несколько параметров к команде {{c|emerge}}, чтобы сообщить Portage о том как нужно работать с бинарными пакетами:

{| class="table table-condensed table-striped"
|-
! Option !! Description
|-
| <code>--usepkg</code> <br /> <code>(-k)</code> || Tries to use the binary package(s) in the locally available {{Path|packages}} directory. Useful when using [[NFS]] or [[SSHFS]] mounted binary package hosts. If the binary packages are not found, a regular (source-based) installation will be performed.
|-
| <code>--usepkgonly</code> <br /> <code>(-K)</code> || Similar to <code>--usepkg (-k)</code> but fail if the binary package cannot be found. This option is useful if only ''pre-built'' binary packages are to be used.
|-
| <code>--getbinpkg</code> <br /> <code>(-g)</code> || Download the binary package(s) from a remote binary package host. If the binary packages are not found, a regular (source-based) installation will be performed.
|-
| <code>--getbinpkgonly</code> <br /> <code>(-G)</code> || Similar to <code>--getbinpkg (-g)</code> but will fail if the binary package(s) cannot be downloaded. This option is useful if only ''pre-built'' binary packages are to be used.
|}

Чтобы автоматически установку бинарных пакетов, соответствующую параметр можно добавить в переменную <var>EMERGE_DEFAULT_OPTS</var>:

{{FileBox|filename=/etc/portage/make.conf|title=Автоматическая загрузка бинарных пакетов или завершать с ошибкой, если они не не доступны|lang=bash|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --getbinpkgonly"
}}

There is a Portage feature that automatically implements the equivalent of <code>--getbinpkg (-g)</code> without the need for updating the <var>EMERGE_DEFAULT_OPTS</var> variable: <code>getbinpkg</code>

{{FileBox|filename=/etc/portage/make.conf|title=Включение функции Portage getbinpkg|lang=bash|1=
FEATURES="getbinpkg"
}}

=== Получение пакетов с хоста бинарных пакетов ===

When using a binary package host, clients need to have the <var>PORTAGE_BINHOST</var> variable set. Otherwise the client will not know where the binary packages are stored which results in Portage being unable to retrieve them.

{{FileBox|filename=/etc/portage/make.conf|title=Настройка PORTAGE_BINHOST|lang=bash|1=
PORTAGE_BINHOST="http://binhost.genfic.com/packages"
}}

The <var>PORTAGE_BINHOST</var> variable uses a space-separated list of URIs. This allows administrators to use several binary package servers simultaneously. The URI must always point to the directory in which the {{Path|Packages}} file resides.

{{Note|The support for multiple binary package servers is somewhat incomplete. If several servers serve a binary package for the same package version, then only the first one will be considered. This can be problematic when these binary packages differ in their USE variable configuration and the USE variable configuration of a later binary package would match the systems configuration.}}

=== Переустановка модифицированных бинарных пакетов ===

Passing the <code>--rebuilt-binaries</code> option to {{c|emerge}} will reinstall every binary that has been rebuilt since the package was installed. This is useful in case rebuilding tools like {{c|revdep-rebuild}} or {{c|python-updater}} are run on the binary package server.

A related option is <code>--rebuilt-binaries-timestamp</code>. It causes emerge not to consider binary packages for a re-install if those binary packages have been built before the given time stamp. This is useful to avoid re-installing all packages, if the binary package server had to be rebuild from scratch but <code>--rebuilt-binaries</code> is used otherwise.

=== Дополнительные настройки клиента ===

Next to the <code>getbinpkg</code> feature, Portage also listens to the <code>binpkg-logs</code> feature. This one controls if log files for successful binary package installations should be kept. It is only relevant if the <var>PORT_LOGDIR</var> variable has been set and is enabled by default.

Similar to excluding binary packages for a certain set of packages or categories, clients can be configured to exclude binary package installations for a certain set of packages or categories.

Чтобы выполнить это, воспользуйтесь параметром <code>--usepkg-exclude</code>:

{{RootCmd|emerge -uDNg @world --usepkg-exclude "sys-kernel/gentoo-sources virtual/*"}}

=== Обслуживание бинарных пакетов ===

Exporting and distributing the binary packages will lead to useless storage consumption if the binary package list is not actively maintained.

=== Удаление устаревших бинарных пакетов ===

In the {{Package|app-portage/gentoolkit}} package an application called {{c|eclean}} is provided. It allows for maintaining Portage-related variable files, such as downloaded source code files, but also binary packages.

Следующая команда удалит все бинарные пакеты у которых нет ebuild:

{{RootCmd|eclean packages}}

Для дополнительной, пожалуйста, прочтите статью [[Eclean/ru|Eclean]].

Есть другая утилита, которой можно воспользоваться. Это утилита {{c|qpkg}} из пакета {{Package|app-portage/portage-utils}}. Однако эта утилита чуть менее настраиваемая.

Чтобы отчистить ''неиспользуемые'' бинарные пакеты (в смысле неиспользуемые сервером, на котором хранятся бинарные пакеты):

{{RootCmd|qpkg -c}}

=== Maintaining the Packages file ===

Inside the packages directory, a file called {{Path|Packages}} exists. This file acts as a cache for the metadata of all binary packages in the packages directory. The file is updated whenever Portage adds a binary package to the directory. Similarly, {{c|eclean}} updates it when it removes binary packages.

If for some reason binary packages are simply deleted or copied into the packages directory, or the {{Path|Packages}} file gets corrupted or deleted, then it must be recreated. This is done using {{c|emaint}} command:

{{RootCmd|emaint binhost --fix}}

== Дополнительные темы ==

=== Создание снимка каталога пакетов ===

When deploying binary packages for a large number of client systems it might become worthwhile to create snapshots of the packages directory. The client systems then do not use the packages directory directly but use binary packages from the snapshot.

Snapshots can be created using the {{Path|/usr/lib64/portage/python2.7/binhost-snapshot}} or {{Path|/usr/lib64/portage/python3.3/binhost-snapshot}} tool. It takes four arguments:

# A source directory (the path to the packages directory).
# A target directory (that must not exist).
# A URI.
# A binary package server directory.

The files from the package directory are copied to the target directory. A {{Path|Packages}} file is then created inside the binary package server directory (fourth argument) with the provided URI.

Client systems need to use an URI that points to the binary package server directory. From there they will be redirected to the URI that was given to {{c|binhost-snapshot}}. This URI has to refer to the target directory.

=== Understanding the binary package format ===

Binary packages created by Portage have the file name ending with {{Path|.tbz2}}. These files consist of two parts:

# A {{Path|.tar.bz2}} archive containing the files that will be installed on the system.
# A {{Path|xpak}} archive containing package metadata, the ebuild, and the environment file.

Для описания формата смотрите {{c|man xpak}}.

In {{Package|app-portage/portage-utils}} some tools exists that are able to split or create {{Path|tbz2}} and {{Path|xpak}} files.

The following command will split the {{Path|tbz2}} into a {{Path|.tar.bz2}} and an {{Path|.xpak}} file:

{{Cmd|qtbz2 -s <package>.tbz2}}

The {{Path|.xpak}} file can be examined using the {{c|qxpak}} utility.

Чтобы показать содержимое:

{{Cmd|qxpak -l <package>.xpak}}

The next command will extract a file called {{Path|USE}} which contains the enabled USE flags for this package:

{{Cmd|qxpak -x package-manager-0.xpak USE}}

=== The PKGDIR layout ===

The currently used format version 2 has the following layout:

{{CodeBox|title=Схема каталога с пакетами (версия 2)|1=
PKGDIR
`+- Packages
 +- app-accessibility/
 {{!}}  +- pkg1-version.tbz2
 {{!}}  `- pkgN-version.tbz2
 +- app-admin/
 {{!}}  `- ...
 `- ...
}}

The {{Path|Packages}} file is the major improvement (and also the trigger for Portage to know that the binary package directory uses version 2) over the first binary package directory layout (version 1). In version 1, all binary packages were also hosted inside a single directory (called {{Path|All/}}) and the category directories only had symbolic links to the binary packages inside the {{Path|All/}} directory.

=== Распаковка с помощью quickunpkg ===

Zoobab wrote a simple shell tool named [https://github.com/zoobab/quickunpkg quickunpkg] to quickly unpack {{Path|tbz2}} files.


[[Category:Portage]]
