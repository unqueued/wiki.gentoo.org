<languages />
{{Metadata|abstract=Portage поддерживает сборку и установку бинарных пакетов. Это руководство объясняет, как создать их, установить и как настроить сервер бинарных пакетов.}}

На ряду с обычной поддержкой ebuild, Portage поддерживает сборку и установку бинарных пакетов. Это руководство объясняет, как создать их, установить и как настроить сервер бинарных пакетов.

== Введение ==

Есть много причин, почему некоторым системным администраторам нравится использовать бинарные пакеты для установки программ в Gentoo.

# Это позволяет администраторам ''экономить время при поддерживании похожих систем обновлёнными''. Компиляция всего из исходников может потребовать много времени. Обслуживание нескольких похожих систем (некоторые из них, возможно, имеют старое оборудование) может стать намного проще, если только одна система будет компилировать всё из исходников, а остальные будут использовать бинарные пакеты.
# ''Осуществлять безопасные обновления''. Для критически важных в производстве систем важно как можно дольше оставаться ''пригодными для использования''. Это может быть осуществлено с помощью установочного сервера, который сначала будет применять все обновления к себе. Когда установочный сервер окажется в хорошем состоянии, обновления смогут быть применены к критическим системам. Другой подход – осуществлять обновления в chroot-среде на той же системе и использовать созданные там бинарные пакеты в реальной системе.
# ''В качестве резервной копии''. Часто бинарные пакеты являются единственным способом восстановления повреждённой системы (т.е. повреждённого компилятора). Наличие предварительно скомпилированных бинарных пакетов либо на отдельном сервере, либо на локальной системе может стать большим подспорьем в случае повреждения базовой системы.
# Это содействует ''обновлению очень старых систем''. Задача обновления очень старых систем может быть существенно облегчена с помощью бинарных пакетов. Обычно установка бинарных пакетов на старых системах бывает полезна но причине того, что они не требуют установки/обновления зависимостей времени сборки. Также бинарные пакеты позволяют избежать ошибок во время построения, поскольку они скомпилированы заранее.

В этом руководстве основное внимание будет уделено следующим темам: 

* создание бинарных пакетов;
* предоставление бинарных пакетов клиенту;
* внедрение бинарных пакетов;
* обслуживание бинарных пакетов.

Ближе к концу будет рассмотрено несколько более сложных тем о работе с бинарными пакетами.

{{Note|Все утилиты, которые используются в этом руководстве, являются частью пакета {{Package|sys-apps/portage}}, если не указано иное.}}

== Создание бинарных пакетов ==

Существует три основных способа создания бинарных пакетов:

# после обычной установки использовать приложение {{c|quickpkg}};
# явно, во время каждого запуска {{c|emerge}}, использовать параметр <code>--buildpkg</code> (<code>-b</code>);
# автоматически, с помощью установки значения <code>buildpkg</code> в переменной Portage <var>FEATURES</var>.

<div class="mw-translate-fuzzy">
Все три метода создадут бинарные пакеты в каталоге, который указан в переменной <var>PKGDIR</var> (по умолчанию это {{Path|/usr/portage/packages}}).
</div>

=== Использование quickpkg ===

Приложение {{c|quickpkg}} создаёт бинарные пакеты для всех ''установленных'' пакетов, которые соответствуют заданным атомам (или множествам пакетов).

Например, для создания бинарных пакетов для всех ''установленных'' версий GCC:

{{RootCmd|quickpkg sys-devel/gcc}}

Используйте <code>*</code>, для того чтобы создать бинарные пакеты для всех установленных пакетов в системе:

{{RootCmd|quickpkg "*/*"}}

Для данного метода существует оговорка: он полагается на установленные файлы, что может вызвать проблему с конфигурационными файлами. Администраторы после установки программного обеспечения часто изменяют конфигурационные файлы. Поскольку это может привести к утечке важной (возможно, даже конфиденциальной) информации, {{c|quickpkg}} по умолчанию ''не'' включает в пакеты конфигурационные файлы, защищённые с помощью <var>CONFIG_PROTECT</var>. Чтобы принудительно включить конфигурационные файлы, используйте опцию <code>--include-config</code> или <code>--include-unmodified-config</code>.

=== Использование --buildpkg как параметра emerge ===

При установке программ с помощью {{c|emerge}} можно попросить Portage создавать бинарные пакеты, если использовать параметр <code>--buildpkg</code> (<code>-b</code>):

{{Emerge|params+=--buildpkg|sys-devel/gcc}}

Так же можно попросить Portage ''только'' создать бинарный пакет ''без'' установки пакета в систему. Для этого необходимо использовать параметр <code>--buildpkgonly</code> (<code>-B</code>):

{{Emerge|params+=--buildpkgonly|sys-devel/gcc}}

Последний метод, однако, требует предварительной установки всех зависимостей времени сборки.

=== Реализация работы buildpkg с помощью возможности Portage ===

Наиболее распространенный способ создания бинарного пакета, каждый раз когда пакет устанавливается Portage, — это использовать возможность (feature) <code>buildpkg</code>, которою можно включить в файле {{Path|/etc/portage/make.conf}} так:

{{FileBox|filename=/etc/portage/make.conf|title=Включение возможности Portage buildpkg|lang=bash|1=
FEATURES="buildpkg"
}}

Каждый раз, когда Portage будет устанавливать программное обеспечение и эта возможность включена, он будет создавать также бинарный пакет.

=== Исключение для некоторых пакетов ===

Можно попросить Portage не создавать бинарные пакеты для некоторых выбранных пакетов или категорий. Это можно сделать передав команде emerge параметр <code>--buildpkg-exclude</code>:

{{RootCmd|emerge -uDN @world --buildpkg --buildpkg-exclude "virtual/* sys-kernel/*-sources"}}

Это можно использовать для пакетов, для которые создание бинарных пакетов приносит мало пользы. Например пакеты исходного кода ядра или бинарные пакеты (те, которые заканчиваются на ''-bin'' как {{Package|www-client/firefox-bin}}).

== Настройка хоста бинарных пакетов ==

Portage поддерживает несколько протоколов для загрузки бинарных пакетов: FTP, FTPS, HTTP, HTTPS и SSH/SFTP. Такое количество оставляет большое пространство для различных реализаций хоста бинарных пакетов.

Тем не менее, не существует «готового» метода, предоставляемого Portage для распространения бинарных пакетов. В зависимости от желаемой настройки необходимо установить дополнительное программное обеспечение.

=== Хост бинарных пакетов на основе веб ===

Основной подход для распространения бинарных пакетов это создать хост бинарных пакетов на основе веб.

Воспользуйтесь веб-сервером, таким как [[lighttpd]] ({{Package|www-servers/lighttpd}}) и настройте его, чтобы он предоставлял доступ на чтение к каталогу указанному в переменной <var>PKGDIR</var> в файле {{Path|/etc/portage/make.conf}}.

<div class="mw-translate-fuzzy">
{{FileBox|filename=/etc/lighttpd/lighttpd.conf|title=Пример конфигурации lighttpd|lang=bash|1=
# добавьте это в конец стандартной конфигурации
server.modules += ( "mod_alias" )
alias.url = ( "/packages" => "/usr/portage/packages/" )
}}
</div>

Затем, на клиентских системах настройте переменную <var>PORTAGE_BINHOST</var>:

{{FileBox|filename=/etc/portage/make.conf|title=Использование хоста бинарных пакетов на основе веб|lang=bash|1=
PORTAGE_BINHOST="http://binhost.example.com/packages"
}}

=== Хост бинарных пакетов на основе SSH ===

Для установки подлинности бинарных пакетов пользователь может использовать SSH.

При использовании SSH, можно использовать SSH ключ суперпользователя (без пароля, т.к. установка должна происходить в фоне) для подключения к удалённому серверу бинарных пакетов.

Для осуществления этого убедитесь, что SSH ключ суперпользователя разрешён на сервере. Это потребуется повторить для всех устройств, которые будут подключаются к SSH серверу бинарных пакетов.

{{RootCmd|cat root.id_rsa.pub >> /home/binpkguser/.ssh/authorized_keys}}

Тогда переменная <var>PORTAGE_BINHOST</var> может выглядеть так:

<div class="mw-translate-fuzzy">
{{FileBox|filename=/etc/portage/make.conf|title=Настройка PORTAGE_BINHOST для SSH-доступа|lang=bash|1=
PORTAGE_BINHOST="ssh://binpkguser@binhostserver/usr/portage/packages"
}}
</div>

{{Note|Не используйте конфигурационный файл SSH {{Path|~/.ssh/config}} для настройки портов или имени пользователя. Этот каталог игнорируется, когда Portage синхронизирует пакеты на стороне клиента. Вместо этого настройте все параметры в переменной <var>PORTAGE_BINHOST</var>.}}

=== Экспорт из NFS ===

В случае использования хоста бинарных пакетов во внутренней сети, может быть проще экспортировать пакеты с помощью NFS, а затем смонтировать их на клиенте.

Файл {{Path|/etc/exports}} может выглядеть так:

<div class="mw-translate-fuzzy">
{{FileBox|filename=/etc/exports|title=Экспорт каталога пакетов|1=
/usr/portage/packages   2001:db8:81:e2::/48(ro,no_subtree_check,root_squash) 192.168.100.1/24(ro,no_subtree_check,root_squash)
}}
</div>

Затем на клиентах можно смонтировать каталог. Пример записи в файле {{Path|/etc/fstab}}:

<div class="mw-translate-fuzzy">
{{FileBox|filename=/etc/fstab|title=Запись для монтирования папки с пакетами|1=
binhost:/usr/portage/packages      /usr/portage/packages    nfs    defaults    0 0
}}
</div>

== Использование бинарных пакетов ==

Для того, чтобы бинарные пакеты можно было использовать на других системах, они должны соответствовать некоторым требованиям:

* Архитектура на клиенте и сервере, а также переменная <var>[[CHOST]]</var> должны совпадать.
* Переменные оптимизации в <var>CFLAGS</var <var>CXXFLAGS</var>, используемые для создания бинарных пакетов, должны поддерживаться всеми клиентами.
* USE-флаги возможностей процессора (такие как MMX, SSE и так далее) следует выбирать осторожно; все клиенты должны поддерживать их.

{{Important|Portage не может проверить соблюдаются ли эти требования. За соблюдение этих требований отвечает системный администратор.}}

Также Portage проверят, создан ли бинарный пакет с использованием тех же USE-флагов, которые требуются клиенту. Если пакет собран с другой комбинацией USE-флагов, в зависимости от параметров, переданных {{c|emerge}}, Portage либо проигнорирует бинарный пакет (и станет собирать из исходного кода), либо завершиться. Более подробней смотрите в разделе [[#Установка бинарных пакетов|установка бинарных пакетов]].

На клиентах требуется сделать некоторые настройки, чтобы использовались бинарные пакеты.

=== Установка бинарных пакетов ===

Можно добавить несколько параметров к команде {{c|emerge}}, чтобы сообщить Portage о том как нужно работать с бинарными пакетами:

{| class="table table-condensed table-striped"
|-
! scope="col" width="20%" | Параметр 
! Описание
|-
| <code>--usepkg</code> (<code>-k</code>) || Пытается использовать бинарные пакет(ы) из локального каталога {{Path|packages}}. Полезно в случае использования [[NFS]] или [[SSHFS]] монтирование из хоста бинарных пакетов. Если бинарные пакеты не найдены, Portage вернется к обычной установке (из исходного кода).
|-
| <code>--usepkgonly</code> (<code>-K</code>) || Похоже на <code>--usepkg</code> (<code>-k</code>), но останавливается, если бинарный пакет не найден. Этот параметр полезен в случае использования только ''ранее собранных'' бинарных пакетов.
|-
| <code>--getbinpkg</code> (<code>-g</code>) || Загружает бинарные пакеты с удаленного хоста бинарных пакетов. Если бинарные пакеты не найдены, Portage вернется к обычной установке (из исходного кода).
|-
| <code>--getbinpkgonly</code> (<code>-G</code>) || Похоже на <code>--getbinpkg</code> (<code>-g</code>), но останавливается, но останавливается, если бинарный пакет не найден. Этот параметр полезен в случае использования только ''ранее собранных'' бинарных пакетов.
|}

Чтобы автоматически установку бинарных пакетов, соответствующую параметр можно добавить в переменную <var>EMERGE_DEFAULT_OPTS</var>:

{{FileBox|filename=/etc/portage/make.conf|title=Автоматическая загрузка бинарных пакетов или завершать с ошибкой, если пакет не доступен|lang=bash|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --getbinpkgonly"
}}

В Portage есть возможность, которая автоматически реализует эквивалент <code>--getbinpkg</code> (<code>-g</code>) без необходимости писать в переменную <var>EMERGE_DEFAULT_OPTS</var> значение <code>--getbinpkg</code>:

{{FileBox|filename=/etc/portage/make.conf|title=Включение getbinpkg в переменную <var>FEATURES</var>|lang=bash|1=
FEATURES="getbinpkg"
}}

=== Получение пакетов с хоста бинарных пакетов ===

В случае использования хоста бинарных пакетов, на клиентах необходимо настроить переменную <var>PORTAGE_BINHOST</var>. Иначе клиент не будет знать где хранятся бинарные пакеты, в результате чего, Portage не сможет установить их.

{{FileBox|filename=/etc/portage/make.conf|title=Настройка PORTAGE_BINHOST|lang=bash|1=
PORTAGE_BINHOST="http://binhost.example.com/packages"
}}

В переменной <var>PORTAGE_BINHOST</var> хранится разделенный пробелами список URI. Это позволяет администраторам использовать множество серверов бинарных пакетов одновременно. URI всегда должны указывать на каталог в котором находится файл {{Path|Packages}}.

{{Note|Поддержка множества серверов бинарных пакетов немного не завершена. Если несколько серверов предоставляют бинарный пакет для одной и той же версии пакета, то будет учитен только первый. Это может вызывать проблемы, когда в этих пакетах различаются переменные USE и USE-переменные второго пакета совпадают с системными конфигурациями.}}

=== Переустановка модифицированных бинарных пакетов ===

Passing the <code>--rebuilt-binaries</code> option to {{c|emerge}} will reinstall every binary that has been rebuilt since the package was installed. This is useful in case rebuilding tools like {{c|revdep-rebuild}} are run on the binary package server.

A related option is <code>--rebuilt-binaries-timestamp</code>. It causes emerge not to consider binary packages for a re-install if those binary packages have been built before the given time stamp. This is useful to avoid re-installing all packages, if the binary package server had to be rebuild from scratch but <code>--rebuilt-binaries</code> is used otherwise.

=== Дополнительные настройки клиента ===

Next to the <code>getbinpkg</code> feature, Portage also listens to the <code>binpkg-logs</code> feature. This one controls if log files for successful binary package installations should be kept. It is only relevant if the <var>PORT_LOGDIR</var> variable has been set and is enabled by default.

Similar to excluding binary packages for a certain set of packages or categories, clients can be configured to exclude binary package installations for a certain set of packages or categories.

Чтобы выполнить это, воспользуйтесь параметром <code>--usepkg-exclude</code>:

{{RootCmd|emerge -uDNg @world --usepkg-exclude "sys-kernel/gentoo-sources virtual/*"}}

Чтобы включить такие дополнительные настройки для каждой команды emerge, добавьте необходимые пакеты в переменную <var>EMERGE_DEFAULT_OPTS</var> в файле {{Path|make.conf}}:

{{FileBox|title=Включение настроек для emerge при каждом вызове|filename=/etc/portage/make.conf|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --usepkg-exclude 'sys-kernel/gentoo-sources virtual/*'"
}}

=== Обслуживание бинарных пакетов ===

Exporting and distributing the binary packages will lead to useless storage consumption if the binary package list is not actively maintained.

=== Удаление устаревших бинарных пакетов ===

В пакете {{Package|app-portage/gentoolkit}} предоставляется программа под названием {{c|eclean}}. Она позволяет обслуживать связанные с Portage временные файлы, такие как файлы загруженного исходного кода, а также файлы бинарных пакетов.

Следующая команда удалит все бинарные пакеты у которых нет ebuild в установленных репозиториях ebuild-файлов:

{{RootCmd|eclean packages}}

Для дополнительной, пожалуйста, прочтите статью [[Eclean/ru|Eclean]].

Есть другая утилита, которой можно воспользоваться. Это утилита {{c|qpkg}} из пакета {{Package|app-portage/portage-utils}}. Однако эта утилита чуть менее настраиваемая.

Чтобы отчистить ''неиспользуемые'' бинарные пакеты (в смысле неиспользуемые сервером, на котором хранятся бинарные пакеты):

{{RootCmd|qpkg -c}}

=== Поддержка файла Packages ===

Внутри каталога пакетов имеется файл [[wikipedia:Manifest_file|manifest]] с именем {{Path|Packages}}. Этот файл используется как кэш для метаданных всех бинарных пакетов в этом каталоге пакетов. Файл обновляется каждый раз когда Portage добавляет бинарный пакет в каталог. Таким же образом, {{c|eclean}} обновляет его когда удаляет бинарные пакеты.

Если по каким то причинам бинарные пакеты были просто удалены или скопированы в каталог пакетов, или файл {{Path|Packages}} был испорчен или удален, то его необходимо пересоздать. Это можно сделать с помощью команды {{c|emaint}}:

{{RootCmd|emaint binhost --fix}}

== Дополнительные темы ==

=== Создание снимка каталога пакетов ===

When deploying binary packages for a large number of client systems it might become worthwhile to create snapshots of the packages directory. The client systems then do not use the packages directory directly but use binary packages from the snapshot.

Снимок можно создать с помощью утилиты {{Path|/usr/lib64/portage/python2.7/binhost-snapshot}} или {{Path|/usr/lib64/portage/python3.3/binhost-snapshot}}. Ей требуются четыре аргумента:

# A source directory (the path to the packages directory).
# A target directory (that must not exist).
# A URI.
# A binary package server directory.

The files from the package directory are copied to the target directory. A {{Path|Packages}} file is then created inside the binary package server directory (fourth argument) with the provided URI.

Client systems need to use an URI that points to the binary package server directory. From there they will be redirected to the URI that was given to {{c|binhost-snapshot}}. This URI has to refer to the target directory.

=== Как устроен формат файлов бинарных пакетов ===

Бинарные пакеты созданные Portage имеют расширение {{Path|.tbz2}}. Такие файлы содержат две части:

# Архив {{Path|.tar.bz2}} содержит файлы, которые можно установить в систему.
# Архив {{Path|xpak}} содержит метаданные пакета, файл ebuild и файл переменного окружения.

Для описания формата смотрите {{c|man xpak}}.

В пакете {{Package|app-portage/portage-utils}} некоторые утилиты способны разделить или создать файлы {{Path|tbz2}} и {{Path|xpak}}.

Следующая команда разделит {{Path|tbz2}} на файлы {{Path|.tar.bz2}} и {{Path|.xpak}}:

{{Cmd|qtbz2 -s <package>.tbz2}}

Файл {{Path|.xpak}} можно проверить с помощью утилиты {{c|qxpak}}.

Чтобы показать содержимое:

{{Cmd|qxpak -l <package>.xpak}}

Следующая команда извлечет файл {{Path|USE}}, который содержит включенные USE-флаги для этого пакета:

{{Cmd|qxpak -x package-manager-0.xpak USE}}

=== Схема PKGDIR ===

На данный момент используется формат версии 2 со следующей схемой:

{{CodeBox|title=Схема каталога с пакетами (версия 2)|1=
PKGDIR
`+- Packages
 +- app-accessibility/
 {{!}}  +- pkg1-version.tbz2
 {{!}}  `- pkgN-version.tbz2
 +- app-admin/
 {{!}}  `- ...
 `- ...
}}

The {{Path|Packages}} file is the major improvement (and also the trigger for Portage to know that the binary package directory uses version 2) over the first binary package directory layout (version 1). In version 1, all binary packages were also hosted inside a single directory (called {{Path|All/}}) and the category directories only had symbolic links to the binary packages inside the {{Path|All/}} directory.

=== Распаковка с помощью quickunpkg ===

Zoobab написал простую утилиту для оболочки командной строки [https://github.com/zoobab/quickunpkg quickunpkg], чтобы быстро распаковывать файлы {{Path|tbz2}}.


[[Category:Portage]]
