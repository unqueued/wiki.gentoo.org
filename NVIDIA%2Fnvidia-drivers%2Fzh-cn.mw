<languages />

{{Metadata|abstract=nvidia-drivers是nVidia显卡的专有驱动。一个开源的替代是 nouveau.}}

{{Package|x11-drivers/nvidia-drivers}}是nVidia显卡的专有驱动。一个开源的替代是[[nouveau]].

{{Package|x11-drivers/nvidia-drivers}} 在树中被发布的 nVidia 是针对 Linux 内核构建的。它们包含二进制数据， 和驱动的重任。驱动程序包括两个部分，一个内核模块和 X11 的驱动程序。两个部分都包含在一个包中。由于NVidia有他们自己的驱动包 ，就必须在安装的驱动程序做出一些选择。

{{Package|x11-drivers/nvidia-drivers}}包，包含NVIDIA的最新驱动程序与''所有''显卡的支持，附带几个现有的版本，这依赖于显卡的新旧情况。它使用的eclass检测系统正在运行什么样的显卡，使其安装正确的版本。

== 硬件兼容性 ==

The {{Package|x11-drivers/nvidia-drivers}} package supports a range of available nVidia cards. Multiple versions are available for installation, depending on the card(s) that the system has. See the official nVidia documentation, [http://www.nvidia.com/object/IO_32667.html What's a legacy driver?], to find out what version of {{Package|x11-drivers/nvidia-drivers}} should be used. A pretty decent way to find this out through [http://www.nvidia.com/Download/Find.aspx  an interactive form]. Enter the graphics card that is used by the system (mind the Legacy option in the 'Product Type' field) and the form should end up with the best supported version.

If the card has been identified as a legacy card then mask the more recent releases of {{Package|nvidia-drivers}}, i.e

{{FileBox|filename=/etc/portage/package.mask|title=Masking drivers with version higher than 174|1=
>x11-drivers/nvidia-drivers-174
}}

Note that Gentoo does not provide the 71.86.xx versions. If the system has a card that needs these drivers then it is recommended to use the [[nouveau]] driver.

== Installation ==

=== Kernel ===

如上所述，NVIDIA内核驱动程序安装并运行对当前内核。它作为模块建立，所以内核必须支持的内核模块的加载（见下文）。

The kernel module ({{Path|nvidia.ko}}) consists of a proprietary part (commonly known as the "binary blob") which drives the graphics chip(s), and an open source part (the "glue") which at runtime acts as intermediary between the proprietary part and the kernel. These all need to work nicely together as otherwise the user might be faced with data loss (through kernel panics, X servers crashing with unsaved data in X applications) and even hardware failure (overheating and other power management related issues should spring to mind).

==== Kernel compatibility ====

不时地，一个新的内核版本改变了内部ABI的驱动程序，这意味着所有使用这些ABI的驱动程序必须相应地改变。对于开源驱动，尤其是那些随内核，这些变化几乎是可以微不足道的修复，因为驱动程序与内核的其他部分之间的调用整个链条可以很容易地修正。对于专有的驱动程序nvidia.ko，这是行不通的。当内部的ABI改变，那么就不可能仅仅修复“glue”，因为没有人知道如何glue所使用的专有的那一部分是很忙。即使设法修补东西似乎很好地工作,用户仍然存在运行nvidia的风险。在新的，不支持的内核nvidia.ko运行会导致数据丢失，硬件故障。

当一个新的，不兼容的内核版本发布时，它可能是最好坚持使用最新支持的内核了一段时间。 Nvidia公司通常需要几个星期的时间准备新的专有版本，他们认为适合用于一般用途。 耐心一点。如果绝对必要，那么就可以使用epatch_user命令和NVIDIA驱动的ebuild：这允许用户打补丁的NVIDIA驱动程序以某种方式适应了最新的，不支持的内核版本。请注意，即使是NVIDIA驱动维护者，也不NVIDIA将支持这一情况。硬件保修将最有可能是无效的，Gentoo的维护者不能解决问题，因为它是一个专有的驱动程序，只有NVIDIA官方能够正确调试，内核维护者（包括Gentoo和上游）肯定不会支持专有的驱动程序，或任何“污点“系统，当碰巧遇到麻烦时。

If {{c|genkernel all}} was used to configure the kernel, then everything is all set. If not, double check the kernel configuration so that this support is enabled:

{{KernelBox|title=开启可加载模块支持|1=
[*] Enable loadable module support --->
}}

在内核中也开启“Memory Type Range Register（内存类型范围寄存器）”:

{{KernelBox|title=开启 MTRR 支持|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

If the system has an AGP graphics card, then optionally enable agpgart support to the kernel, either compiled in or as a module. If the in-kernel agpgart module is not used, then the drivers will use its own agpgart implementation, called NvAGP.  On certain systems, this performs better than the in-kernel agpgart, and on others, it performs worse. Evaluate either choice on the system to get the best performance. When uncertain what to do, use the in-kernel agpgart:

{{KernelBox|title=Enable agpgart support|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note/zh-cn|在amd64平台上，IOMMU 控制agpgart的设置。}}

{{Important|For x86 and AMD64 processors, the in-kernel [[framebuffer]] driver conflicts with the binary driver provided by nVidia. When compiling the kernel for these CPUs, completely remove support for the in-kernel driver as shown:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Now make sure the nouveau driver is disabled:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        < > Nouveau (nVidia) cards
}}
}}

A framebuffer alternative is [[uvesafb]], which can be installed parallel to {{Package|x11-drivers/nvidia-drivers}}. 

{{Important|For x86 and AMD64 processors, the [[uvesafb]] driver conflicts with the binary driver provided by nVidia above 361.28 versions.}}


For (U)EFI systems, uvesafb will not work. Be warned that enabling ''efifb'' support in kernel (<code>CONFIG_FB_EFI=y</code>) causes intermittent problems with the initialization of the nvidia drivers. There is no known alternative framebuffer for (U)EFI systems.

The '''nvidia-drivers''' ebuild automatically discovers the kernel version based on the {{Path|/usr/src/linux}} symlink. Please ensure that this symlink is pointing to the correct sources and that the kernel is correctly configured. Please refer to the "Configuring the Kernel" section of the [[Handbook:Main_Page|Gentoo Handbook]] for details on configuring the kernel.

First, choose the right kernel source using {{c|eselect}}. When using {{Package|sys-kernel/gentoo-sources}} version 3.7.10 for instance, the kernel listing might look something like this:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the symlinked kernel.

If the symlink is not pointing to the correct sources, update the link by selecting the number of the desired kernel sources, as in the example above.

{{RootCmd|eselect kernel set 1}}

== Configuration ==

=== Drivers === 

Now it's time to install the drivers. First follow the [[Xorg/Guide|X Server Configuration Guide]] and set <code>VIDEO_CARDS="nvidia"</code> in {{Path|/etc/portage/make.conf}}. During the installation of the X server, it will then install the right version of {{Package|x11-drivers/nvidia-drivers}}.

{{Note|The drivers can be installed with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}}. This will install {{Package|media-video/nvidia-settings}}, a handy graphical tool for monitoring and configuring several aspects of the nVidia card.}}

{{Important|Every time a [[Kernel/Upgrade|kernel is built]], it is necessary to reinstall the nVidia kernel modules. An easy way to rebuild the modules installed by ebuilds (such as {{Package|x11-drivers/nvidia-drivers}}) is to run {{c|emerge @module-rebuild}}.}}

Once the installation has finished, run {{c|modprobe nvidia}} to load the kernel module into memory. If this is an upgrade, remove the previous module first.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

To prevent from having to manually load the module on every bootup, have this done automatically each time the system is booted, so edit {{Path|/etc/conf.d/modules}} and add <code>nvidia</code> to it.

{{Important|If <code>agpgart</code> is compiled as a module, then add it to {{Path|/etc/conf.d/modules}} as well.}}

=== Kernel module signing (optional) ===

{{Note|The information in this section in unnecessary for systems that do not implement signed kernel modules. Feel free to skip it.}}

If you are using secure boot kernel signing then you will need to sign the Nvidia kernel modules before they can be loaded.

You do this by using the kernel provided {{c|perl}} script as follows.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

As of driver version 358.09 a new module has been made to handle monitor mode setting and for this driver version this module must also be signed.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Once you have signed these modules then the driver will load as expected on boot up. This module signing method can be used to sign other modules not only your nvidia-drivers. You would have to modify the path and corresponding module accordingly.

=== The X server ===

Once the appropriate drivers are installed, configure the X server to use the <code>nvidia</code> driver instead of the default <code>nv</code> driver.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Run {{c|eselect}} so that the X server uses the nVidia GLX libraries:

{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Enabling global nvidia support ===

Some tools, such as {{Package|media-video/mplayer}} and {{Package|media-libs/xine-lib}}, use a local USE flag called <code>xvmc</code> which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in <code>xvmc</code> in the USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to {{Package|media-video/mplayer}} and/or {{Package|media-libs/xine-lib}} in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the <code>nvidia</code> USE flag, so it might be a good idea to add it to {{Path|/etc/portage/make.conf}}.

Then, run {{c|emerge -uD --newuse @world}} to rebuild the applications that benefit from the USE flag change.

=== Using the nVidia settings tool ===

nVidia also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as {{Package|media-video/nvidia-settings}}. As mentioned earlier, it will be pulled in automatically when installing the drivers with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

===开启 OpenGL/OpenCL ===

To enable OpenGL and OpenCL though the device, run:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Make sure that the Xorg server is not running during these changes.

== Usage ==

=== Testing the card ===

To test the nVidia card, fire up X and run {{c|glxinfo}}, which is part of the {{Package|x11-apps/mesa-progs}} package. It should say that direct rendering is activated:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

To monitor the FPS, run {{c|glxgears}}.

== 故障解决 ==

* {{Bug|nvidia-drivers|search=package}}

=== 当启用MSI中断，驱动程序初始化失败 ===

Linux的NVIDIA驱动程序使用消息信号中断（MSI）在默认情况下。这提供了兼容性和可扩展性优势，主要是由于避免IRQ共享。有些系统存在微星的支持问题，工作时virtual wire经常中断。这些问题表现为NVIDIA驱动程序无法启动X，或CUDA初始化失败。

MSI interrupts can be disabled via the NVIDIA kernel module parameter <code>NVreg_EnableMSI=0</code>. This can be set on the command line when loading the module, or more appropriately via the distribution's kernel module configuration files (such as those under {{Path|/etc/modprobe.d/}}).

例如：

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== 在4GB内存或更大内存的机器上获得2D加速支持===

When nVidia 2D acceleration is giving problems, then it is likely that the system is unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Every line should contain <code>write-back</code> or <code>write-combining</code>. When a line shows up with <code>uncachable</code> in it then it is necessary to change a BIOS setting to fix this.

Reboot and enter the BIOS, then find the MTRR settings (probably under "CPU Settings"). Change the setting from <code>continuous</code> to <code>discrete</code> and boot back into Linux. There is now no <code>uncachable</code> entry anymore and 2D acceleration now works without any glitches.

===当试图加载内核模块出现"no such device"===

这通常是由于以下问题之一引起的:

# The system does not have a nVidia card at all.  Check {{c|lspci}} output to confirm that the system has a nVidia graphics card installed and detected.
# The currently installed version of {{Package|x11-drivers/nvidia-drivers}} does not support the installed graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Another kernel driver has control of the hardware. Check {{c|lspci -k}} to see if another driver like "nouveau" is bound to the graphics card. If so, disable or blacklist this driver.

=== Xorg 说它找不到任何显示器 ===

When after booting the system, it ends up with a black screen or a console prompt instead of the GUI; then press {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} to bring up a virtual console. Next, run:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

看看Xorg的输出。如果第一个错误是Xorg不能找到任何显示屏幕,那么按照下面的步骤来解决问题。

这应该足够在重新启动前，运行下面的命令：

{{Cmd| /opt/bin/nvidia-xconfig}}

But if that doesn't work, run {{c|lspci}} and notice that the video card starts off like this:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

Take the first bit, <code>01.00.0</code> and put it in the {{Path|/etc/X11/xorg.conf}} file with the <code>BusID</code> option:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== 直接渲染未启用 ===

If direct rendering does not work, it may be because the kernel has Direct Rendering Manager enabled, which conflicts with the driver. See the direct rendering status by following instructions in the section [[#Testing the card|Testing the card]].

First, disable Direct Rendering Manager (<code>CONFIG_DRM</code>) in the kernel :

{{KernelBox|title=Disabling Direct Rendering Manager|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Next, rebuild {{Package|x11-drivers/nvidia-drivers}} since the driver may have built against the kernel DRM symbols. It should fix the problem.

=== 视频播放不流畅或缓慢 ===

最近似乎有一些重大的在播放某些类型的NVIDIA二进制驱动的视频，引起慢速视频播放或显著卡顿。这个问题似乎在英特尔 CPU 空闲更换为某些 CPU 而不是常见的 ACPI CPU 减速规造成的。

Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVidia Powermizer feature, or setting Powermizer to maximum performance within {{c|nvidia-settings}} has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <code>mplayer-nodeint</code> with something similar to <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> as a work around.)

=== No vertical synchronization (no VSync, tearing) in OpenGL applications ===

Adding the following option to the screen section prevents tearing on GTX 660, 660 Ti, and probably some other GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== 专家配置 ==

===文档 ===

The {{Package|x11-drivers/nvidia-drivers}} package also comes with comprehensive documentation. This is installed into {{Path|/usr/share/doc}} and can be viewed with the following command:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== 内核模块参数===

The <code>nvidia</code> kernel module accepts a number of parameters (options) which can be used to tweak the behaviour of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run {{c|update-modules}} after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

编辑 {{Path|/etc/modprobe.d/nvidia.conf}}:

{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

更新模块信息:

{{RootCmd|update-modules}}

Unload the <code>nvidia</code> module...

{{RootCmd|modprobe -r nvidia}}

…然后加载它再一次:

{{RootCmd|modprobe nvidia}}

=== 高级 X 配置 ===

The GLX layer also has a plethora of options which can be configured. These control the configuration of TV out, dual displays, monitor frequency detection, etc. Again, all of the available options are detailed in the documentation.

To use any of these options, list them in the relevant Device section of the X config file (usually {{Path|/etc/X11/xorg.conf}}). For example, to disable the splash logo:

{{FileBox|filename=/etc/X11/xorg.conf|title=Disable the splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== 参考 ==

* [[nouveau & nvidia-drivers switching]] - Hybrid graphics mode using open-source drivers.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configure a system to use closed-source drivers for hybrid graphics (modesetting).

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
