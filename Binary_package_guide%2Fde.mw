<languages />
{{Metadata|abstract=Portage unterstützt den Bau und die Installation von Binärpaketen. Dieser Leitfaden erklärt wie man Binärpaket-Hosts anlegt und Binärpakete benutzt.}}

Neben der gewöhnlichen Unterstützung von ebuilds bietet Portage den Bau und die Installation von Binärpaketen.
Dieser Leitfaden erklärt wie man diese erstellt, installiert und wie man einen Binärpaket-Server aufsetzt.

== Einleitung ==

Es gibt viele Gründe weshalb einige Systemadministratoren die Verwendung von Binärpaket-Installationen in Gentoo mögen.

# Zuallererst erlaubt es Administratoren ''ähnliche Systeme aktuell zu halten''. Alles aus den Quellen kompilieren zu müssen, kann zeitaufwändig werden. Die Wartung einiger ähnlicher Systeme, möglicherweise einige von ihnen mit älterer Hardware, kann sehr viel einfacher sein, wenn nur ein System alles aus den Quellen kompilieren muss und die anderen Systeme die Binärpakete wiederverwenden.
# Ein zweiter Grund ist ''sichere Updates durchzuführen''. Für missionskritische Systeme ist es wichtig soweit wie möglich ''benutzbar'' zu bleiben. Dies kann durch Staging-Server erreicht werden, die alle Updates zuerst bei sich selbst durchführen. Sobald der Staging-Server (wieder) in einem guten Zustand ist, können die Updates auf das kritische System angewandt werden. Eine Variante dieses Ansatzes ist die Updates in einer chroot-Umgebung auf dem selben System durchzuführen und die hierbei erzeugten Binärdateien dann im richtigen System zu benutzen.
# Ein dritter Grund ist ''als ein Backup''. Oft sind Binärpakete der einzige Weg ein kaputtes System wiederherzustellen (z.B. kaputter Kompiler). Vorkompilierte Binärpakete bei der Hand zu haben, entweder auf einem Binärpaket-Server oder lokal, kann im Falle einer defekten Toolchain eine große Hilfe sein.
# Und schließlich erlaubt es ebenfalls ''sehr alte Systeme upzudaten''. Die Aufgabe sehr alte Systeme upzudaten kann durch die Verwendung von Binärpaketen stark vereinfacht werden. Es ist für gewöhnlich hilfreich Binärpakete auf alten Systemen zu installieren weil sie keine Build-Time Abhängigkeiten erfordern, die installiert/ upgedated werden müssten. Binär-Pakete vermeiden ebenfalls Fehler in Build-Prozessen, weil sie vorkompiliert sind.

Dieser Leitfaden konzentriert sich auf die folgenden Themen:
* Die Erstellung von Binärpaketen.
* Die Verteilung der Pakete an die Nutzer.
* Die Nutzung der Binärpakete.
* Die Pflege der Binärpakete.

Nahe am Ende werden ein paar fortgeschrittenere Themen zum Umgang mit Binärpaketen behandelt.

{{Note|Alle in diesem Leitfaden verwendeten Tools sind Teil von {{Package|sys-apps/portage}}, soweit nicht anders angegeben.}}

== Binärpakete erzeugen ==

Es gibt drei Hauptmethoden um Binärpakete zu erzeugen:
# Nach einer regulären Installation durch Nutzung der <tt>quickpkg</tt> Anwendung;
# Explizit währen einer emerge-Operation durch den Gebrauch der <code>--buildpkg (-b)</code> Option;
# Automatisch durch die Verwendung von <code>buildpkg</code> als eine Portage Eigenschaft.

Alle drei Methoden erzeugen ein Binärpaket im Verzeichnis auf das durch die <code>PKGDIR</code>-Variable gezeigt wird (deren Voreinstellung {{Path|/usr/portage/packages}} ist).

=== Benutzung von quickpkg ===

Die Applikation <tt>quickpkg</tt> nimmt eine oder mehrere Abhängigkeits-atome (oder Paket-Sätze) und erstellt für alle ''installierten'' Pakete die mit diesem atom übereinstimmen Binärpakete.

Um beispielsweise von allen ''installierten'' GCC-Versionen Binärpakete zu erstellen:

{{RootCmd|quickpkg sys-devel/gcc}}

Um Binärpakete von allen auf dem System installierten Paketen zu schaffen, verwenden Sie <code>*</code> glob:

{{RootCmd|quickpkg "*/*"}}

Bei dieser Methode gibt es einen Vorbehalt: Sie ist auf die installierten Dateien angewiesen, was im Fall von Konfigurationsdateien ein Problem sein kann. Administratoren ändern Konfigurationsdateien nach der Softwareinstallation oft. Aus diesem Grund können (vielleicht sogar vertrauliche) Daten in die Pakete entweichen. <tt>quickpkg</tt> schließt standardmäßig Konfigurationsdateien ''nicht'' ein, die mit der <code>CONFIG_PROTECT</code> Methode geschützt sind. Um die Erfassung von Konfigurationsdateien zu erzwingen nutzen Sie die <code>--include-config</code> oder <code>--include-unmodified-config</code> Option.

=== --buildpkg als emerge Option nutzen ===

Bei der Installation von Software mit <tt>emerge</tt> kann Portage mit der Option <code>--buildpkg (-b)</code> verwendet werden, um Binärpakete zu erstellen:

{{Emerge|params+=--buildpkg|sys-devel/gcc}}

Es ist ebenfalls möglich Portage dazu zu bringen ''nur'' Binärpakete zu erzeugen aber die Software ''nicht'' auf dem Live-System zu installieren. Dazu kann die Option <code>--buildpkgonly (-B)</code> verwendet werden:

{{Emerge|params+=--buildpkgonly|sys-devel/gcc}}

Die letztere Herangehensweise macht es erforderlich alle Build-Time Abhängigkeiten zuvor zu installieren.

=== buildpkg as a Portage Eigenschaft nutzen ===

Die gewöhnlichste Art um automatisch Binärpakete zu erzeugen wann immer ein Paket von Portage installiert wird, ist die Nutzung der <code>buildpkg</code> Eigenschaft. Sie kann auf die folgende Weise in {{Path|/etc/portage/make.conf}} gesetzt werden:

{{FileBox|filename=/etc/portage/make.conf|title=Aktivierung der buildpkg Eigenschft von Portage|lang=bash|1=
FEATURES="${FEATURES} buildpkg"
}}

With this feature enabled, every time Portage installs software it will create a binary package as well.

=== Excluding creation of some packages ===

It is possible to tell Portage not to create binary packages for a select few packages or categories. This is done by passing the <code>--buildpkg-exclude</code> option to emerge:

{{RootCmd|emerge -uDN @world --buildpkg --buildpkg-exclude "virtual/* sys-kernel/*-sources"}}

This could be used for packages that have little to no benefit in having a binary package available. Examples would be the Linux kernel source packages or upstream binary packages (those ending with ''-bin'' like {{Package|www-client/firefox-bin}}).

== Setting up a binary package host ==

Portage supports a number of protocols for downloading binary packages: FTP, FTPS, HTTP, HTTPS and SSH. This leaves room for many possible binary package host implementations.

There is, however, no "out-of-the-box" method provided by Portage for distributing binary packages. Depending on the desired setup additional software will need to be installed.

=== Web based binary package host ===

A common approach for distributing binary packages is to create a web-based binary package host.

Use a web server such as [[lighttpd]] ({{Package|www-servers/lighttpd}}) and configure it to provide read access to {{Path|/etc/portage/make.conf}}'s <code>PKGDIR</code> location.

{{FileBox|filename=/etc/lighttpd/lighttpd.conf|title=lighttpd configuration example|lang=bash|1=
# add this to the end of the standard configuration
server.modules += ( "mod_alias" )
alias.url = ( "/packages" => "/usr/portage/packages/" )
}}

Then, on the client systems, configure the <code>PORTAGE_BINHOST</code> variable accordingly:

{{FileBox|filename=/etc/portage/make.conf|title=Using a web-based binary package host|lang=bash|1=
PORTAGE_BINHOST="http://binhost.genfic.com/Packages"
}}

=== SSH binary package host ===

To provide a more authenticated approach for binary packages, one can consider using SSH.

When using SSH, it is possible to use the Portage Linux user's SSH key (without passphraze as the installations need to happen in the background) to connect to a remote binary package host.

To accomplish this, make sure that the Portage user's SSH key is allowed on the server:

{{RootCmd|cat portage.id_rsa.pub >> /home/binpkguser/.ssh/authorized_keys}}

The <code>PORTAGE_BINHOST</code> could then look like so:

{{FileBox|filename=/etc/portage/make.conf|title=Setting up PORTAGE_BINHOST for SSH access|lang=bash|1=
PORTAGE_BINHOST="ssh://binpkguser@binhostserver/usr/portage/packages"
}}

{{Note|1=Don't use ssh's config in {{Path|~/.ssh/config}} for setting ports or username as it'll be ignored when portage tries to rsync the packages back onto the client. Instead set all the options correctly in the <code>PORTAGE_BINHOST=</code> variable.}}

=== NFS exported ===

When using binary packages on an internal network, it might be easier to export the packages through NFS and mount it on the clients.

The {{Path|/etc/exports}} file could look like so:

{{FileBox|filename=/etc/exports|title=Exporting the packages directory|1=
/usr/portage/packages                            2001:db8:81:e2::/48(ro,no_subtree_check,root_squash) 192.168.100.1/24(ro,no_subtree_check,root_squash)
}}

On the clients, the location can then be mounted. An example {{Path|/etc/fstab}} entry would look like so:

{{FileBox|filename=/etc/fstab|title=Entry for mounting the packages folder|1=
binhost:/usr/portage/packages      /usr/portage/packages    nfs    defaults    0 0
}}


== Using binary packages ==

For binary packages to be usable on other systems they must fulfill some requirements.
* The client and server architecture and [[CHOST]] must match.
* The <code>CFLAGS</code> and <code>CXXFLAGS</code> that were used to build the binary packages must be compatible with all clients.
* USE flags for processor specific features (like MMX, SSE,...) have to be carefully selected; all clients need to support them.

{{Important|Portage can not validate if these requirements match. It is the responsibility of the system administrator to guard these settings.}}

Next to these, Portage will check if the binary package is built using the same USE flags as expected on the client. If a package is built with a different USE flag combination, Portage will either ignore the binary package (and use source-based build) or fail, depending on the options passed to the emerge command upon invocation (see [[#Installing binary packages|Installing binary packages]]).

On clients, a few configuration changes are needed in order for the binary packages to be used.

=== Installing binary packages ===

There are a few options that can be passed on to the <tt>emerge</tt> command that inform Portage about using binary packages:

{| class="wikitable"
|-
! Option !! Description
|-
| <code>---usepkg (-k)</code> || Tries to use the binary package(s) in the locally available {{Path|packages}} directory. Useful when using [[NFS]] or [[SSHFS]] mounted binary package hosts. If the binary packages are not found, a regular (source-based) installation will be performed.
|-
| <code>--usepkgonly (-K)</code> || Similar to <code>--usepkg (-k)</code> but fail if the binary package cannot be found. This option is useful if only ''pre-built'' binary packages are to be used.
|-
| <code>--getbinpkg (-g)</code> || Download the binary package(s) from a remote binary package host. If the binary packages are not found, a regular (source-based) installation will be performed.
|-
| <code>--getbinpkgonly (-G)</code> || Similar to <code>--getbinpkg (-g)</code> but will fail if the binary package(s) cannot be downloaded. This option is useful if only ''pre-built'' binary packages are to be used.
|}

In order to automatically use binary package installations, the appropriate option can be added to the <code>EMERGE_DEFAULT_OPTS</code> variable:

{{FileBox|filename=/etc/portage/make.conf|title=Automatically fetching binary packages and fail if not available|lang=bash|1=
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --getbinpkgonly"
}}

There is a Portage feature that automatically implements the equivalent of <code>--getbinpkg (-g)</code> without the need for updating the <code>EMERGE_DEFAULT_OPTS</code> variable: ''getbinpkg''.

{{FileBox|filename=/etc/portage/make.conf|title=Enabling getbinpkg as Portage feature|lang=bash|1=
FEATURES="${FEATURES} getbinpkg"
}}

=== Pulling packages from a binary package host ===

When using a binary package host, clients need to have the <code>PORTAGE_BINHOST</code> variable set. Otherwise the client will not know where the binary packages are stored which results in Portage being unable to retrieve them.

{{FileBox|filename=/etc/portage/make.conf|title=Setting PORTAGE_BINHOST|lang=bash|1=
PORTAGE_BINHOST="http://binhost.genfic.com/packages"
}}

The <code>PORTAGE_BINHOST</code> variable uses a space-separated list of URIs. This allows administrators to use several binary package servers simultaneously. The URI must always point to the directory in which the {{Path|Packages}} file resides.

{{Note|The support for multiple binary package servers is somewhat incomplete. If several servers serve a binary package for the same package version, then only the first one will be considered. This can be problematic when these binary packages differ in their <code>USE</code> configuration and the <code>USE</code> configuration of a later binary package would match the systems configuration.}}

=== Reinstalling modified binary packages ===

Passing the <code>--rebuilt-binaries</code> option to emerge will reinstall every binary that has been rebuilt since the package was installed. This is useful in case rebuilding tools like <tt>revdep-rebuild</tt> or <tt>python-updater</tt> are run on the binary package server.

A related option is <code>--rebuilt-binaries-timestamp</code>. It causes emerge not to consider binary packages for a re-install if those binary packages have been built before the given time stamp. This is useful to avoid re-installing all packages, if the binary package server had to be rebuild from scratch but <code>--rebuilt-binaries</code> is used otherwise.

=== Additional client settings ===

Next to the ''getbinpkg'' feature, Portage also listens to the ''binpkg-logs'' feature. This one controls if log files for successful binary package installations should be kept. It is only relevant if <code>PORT_LOGDIR</code> is set and is enabled by default.

Similar to excluding binary packages for a certain set of packages or categories, clients can be configured to exclude binary package installations for a certain set of packages or categories.

To accomplish this, use the <code>--usepkg-exclude</code> option:

{{RootCmd|emerge -uDNg @world --usepkg-exclude "sys-kernel/gentoo-sources virtual/*"}}


== Maintaining binary packages ==

Exporting and distributing the binary packages will lead to useless storage consumption if the binary package list is not actively maintained.

=== Removing outdated binary packages ===

In the {{Package|app-portage/gentoolkit}} package an application called <tt>eclean</tt> is provided. It allows for maintaining Portage-related variable files, such as downloaded source code files, but also binary packages.

The following command will remove all binary packages that have no corresponding ebuild:

{{RootCmd|eclean packages}}

For more details please read the [[Eclean]] article.

Another tool that can be used is the <tt>qpkg</tt> tool from the {{Package|app-portage/portage-utils}} package. However, this tool is a bit less configurable.

To clean up ''unused'' binary packages (in the sense of used by the server on which the binary packages are stored):

{{RootCmd|qpkg -c}}

=== Maintaining the Packages file ===

Inside the packages directory, a file called {{Path|Packages}} exists. This file acts as a cache for the metadata of all binary packages in the packages directory. The file is updated whenever Portage adds a binary package to the directory. Similarly, <tt>eclean</tt> updates it when it removes binary packages.

If for some reason binary packages are simply deleted or copied into the packages directory, or the {{Path|Packages}} file gets corrupted or deleted, then it must be recreated. This is done using <tt>emaint</tt> command:

{{RootCmd|emaint binhost --fix}}

== Advanced topics ==

=== Creating snapshots of the packages directory ===

When deploying binary packages for a large number of client systems it might become worthwhile to create snapshots of the packages directory. The client systems then do not use the packages directory directly but use binary packages from the snapshot.

Snapshots can be created using the {{Path|/usr/lib64/portage/python2.7/binhost-snapshot}} or {{Path|/usr/lib64/portage/python3.3/binhost-snapshot}} tool. It takes four arguments, 
# A source directory (the path to the packages directory); 
# A target directory (that must not exist);
# A URI;
# A binary package server directory.

The files from the package directory are copied to the target directory. A {{Path|Packages}} file is then created inside the binary package server directory (fourth argument) with the provided URI.

Client systems need to use an URI that points to the binary package server directory. From there they will be redirected to the URI that was given to <tt>binhost-snapshot</tt>. This URI has to refer to the target directory.

=== Understanding the binary package format ===

Binary packages created by Portage have the file name ending with "tbz2". These files consist of two parts:
# A .tar.bz2 archive containing the files that will be installed on the system;
# A xpak archive containing package metadata, the ebuild and the environment file.

See <kbd>man xpak</kbd> for a description of the format.

In {{Package|app-portage/portage-utils}} some tools exists that are able to split or create tbz2 and xpak files.

The following command will split the tbz2 into a {{Path|.tar.bz2}} and an {{Path|.xpak}} file:

{{Cmd|qtbz2 -s <package>.tbz2}}

The xpak file can be examined using the <tt>qxpak</tt> utility.

To list the contents:

{{Cmd|qxpak -l <package>.xpak}}

The next command will extract a file called {{Path|USE}} which contains the enabled USE flags for this package:

{{Cmd|qxpak -x package-manager-0.xpak USE}}

=== The PKGDIR layout ===

The currently used format version 2 has the following layout:

{{CodeBox|title=Packages directory layout (version 2)|1=
PKGDIR
`+- Packages
 +- app-accessibility/
 {{!}}  +- pkg1-version.tbz2
 {{!}}  `- pkgN-version.tbz2
 +- app-admin/
 {{!}}  `- ...
 `- ...
}}

The {{Path|Packages}} file is the major improvement (and also the trigger for Portage to know that the binary package directory uses version 2) over the first binary package directory layout (version 1). In version 1, all binary packages were also hosted inside a single directory (called {{Path|All/}}) and the category directories only had symbolic links to the binary packages inside the {{Path|All/}} directory.

=== Unpacking with quickunpkg ===

Zoobab wrote a simple shell tool named [https://github.com/zoobab/quickunpkg quickunpkg] to quickly unpack tbz2 files.


[[Category:Portage]]
