This document describes how to install Gentoo without the hand holding automation features that users have come to take for granted over the last 10 years.
== Overview ==


=== Synopsis ===

Its possible to start with the offical stage3 files. This has only been tested on an amd64/no-multilib install.


{{Warning|Still reading ... don't say you were never warned. The usual caveat applies, if it breaks, you can keep the pieces. You might even try a post in Unsupported Software on the Gentoo Forums.}}
As this document is aimed at users with at least one Gentoo install to their credit, it is not a keystroke by keystroke guide, unlike the Handbook. The handbook steps are not repeated here, there is just some general references to it f$



=== Overview ===

The steps are:-
* partition the target drive following the handbook
* install the stage3 tarball
* install the portage snapshot
* set up package.mask to keep out unwanted junk
* set up global USE flags to be consistant with package.mask
* replace udev with sys-fs/static-dev
* follow the handbook to install cron, a logger and a bootloader of your choice
* Install a kernel
* configure grub
* review and edit configuaition settings
* reboot to test


=== Introduction ===

This document describes how to install Gentoo with a static /dev using the packages from a stage3 tarball


'''What You Get'''

A modern gentoo base system but without all the bells and whistles added in recent years. Olde Fashioned Gentooee is more about what you don't get. You dont get

* udev - you get a static dev
* systemd - why would you want it anyway
* pulseaudio - I've not known this to actually add anything
* hotplug support
* auto mounting of any sort - use mount by label
* auto module loading
* device detection in Xorg

Separate /usr should just work as there is no udev to require that /usr is mounted before udev starts. If udev starts on your box you have done someting wrong. Separate /usr is not tested as I'm using lvm on top of raid5, so while my /$

Access to the
[http://www.gentoo.org//doc/en/handbook/handbook-x86.xml Gentoo Handbook]
is required as this guide makes frequent references to it, there is no point in repeating the handbook here.
== Getting Started ==


=== Partitioning and Making Filesystems ===

'''Making Your Filesystem Tree'''

Follow the
[http://www.gentoo.org//doc/en/handbook/handbook-x86.xml Gentoo Handbook]
up to and including making your filesystems and mounting all the bits at /mnt/gentoo.

I will be using Logical Volumes on top of raid5 because its easier to recyle the volumes than it is with real partitions and if the logical volumes are the wrong size, they can be resized. I happen to have lvm on raid5 space free. This means that I will also describe the initramfs to get the raid assembled and Logical Volumes active. Users installing to real partitions should not need the initramfs.

== Chrooting ==


=== Making the chroot ===

Mount /proc and but not /dev inside the chroot. We will be using a static /dev, so we have to emerge dev-static With /dev bind mounted in the normal way, our static dev would go into the parents devtmpfs which is in RAM.

The stage3 tarball is provided with a static /dev that includes sda ... sdd inclusive. If you need more that that, use mknod to make the extra /dev entries. Likewise, there ale no md entries for raid or dm enteries for LVM.



{{CodeBox|title=Mounting Special Filesystems|<pre>
mount -t proc proc /mnt/gentoo/proc
</pre>
}}

=== Entering the chroot ===



{{CodeBox|title=Entering the chroot|<pre>
chroot /mnt/gentoo /bin/bash
</pre>
}}



{{CodeBox|title=Setting the chroot environment|<pre>
env-update
source /etc/profile
export PS1="(chroot) $PS1"
</pre>
}}



=== Setting up package.mask ===

This is important. Enter the package atoms that you do not want to be installed ever.

{{CodeBox|title=Content of package.mask|<pre>
# go back to a static /dev
sys-fs/eudev
sys-fs/udev
sys-auth/polkit
sys-auth/consolekit
media-sound/pulseaudio
sys-apps/systemd
</pre>
}}

Add in anything else you can think of they you really don't want. Always use -av with emerge and add more things as they come to mind. mdev might need to be there too.



=== Setting up package.use ===

This section is only required if you use raid, or lvm. You will need some packages built with the static USE flag.



{{CodeBox|title=Content of package.use|<pre>
# static bits and pieces for an initrd
sys-fs/lvm2 static
sys-fs/mdadm static
sys-apps/busybox static

</pre>
}}

Removing udev and Friends
There is a bug in the static-dev ebuild (Bug 469620) that prevents it installing if /proc/mounts reports that a dynamic /dev manager is in use.
Either patch static-dev in the overlay or unmount /proc from /mnt/gentoo/proc while static-dev is emerged.



{{CodeBox|title=Replacind udev with static-dev|<pre>
emerge -C sys-fs/udev
emerge sys-fs/static-dev ...see Bug 469620
emerge -p --depclean
</pre>
}}

emerge sys-fs/static-dev will report some file colisions. That is expected as some elements of a static /dev are provided by the stage3.

The last command should offer to remove

* sys-apps/hwids
* sys-fs/udev-init-scripts
* sys-libs/libcap
* dev-util/gperf
* virtual/udev

Let it run, they all depend on udev, which is no longer installed.

=== Setting USE= in make.conf ===

Some of my USE flags are AMD specific. The flags that are set off here are for avoidance of optional support for packages we have already masked.
Optional support being on would attempt to pull those packages in and emerge would complain about masked packages.

{{CodeBox|title=Use Flags|<pre>
USE="3dnow 3dnowext X alsa device-mapper apng mmx mmxext mp3 python sse sse2
     jpeg lock session startup-notification thunar
     curl ffmpeg odf pdf raw gtk cairo
     -consolekit -dso -firmware-loader -gbm -kmod  -ldap -networkmanager -nss -oss -qt 4-systemd -tools
     -udev -zeroconf"
</pre>
}}

-zeroconfig is a special case. Zeroconfig wasn't around 10 years ago so really should be excluded here.



=== Adding to /dev ===

static-dev is a good start but its not moved on in a very long time. Add some of the newer entries required. See /usr/src/linux/Documentation/devices.txt for a list

* mknod all of the /dev/sd* entries you need
* mknod any /dev/md* kernel multipe device entries required
* mknod any /dev/dm-X device mapper entries required
* mknod any /dev/srX devices for your optical drive(s)
* mknod any other /dev nodes you might want. They can be added at any time

Don't forget nodes for removable storage devices.

DRI users, that's almost everone except those who use nvidia-drivers for Xorg will need to make /dev/dri/*. What is needed here is driver dependent.



=== Populating /etc/conf.d/modules ===

Only you know what you need here. When you reboot, its a good idea to have keyboard support and udev isn't going to load it for you any more.


{{Important|Review your lsmod to decide what you need}}


=== Setting Up Your Own Static Overlay ===

A number of packages that are required for a modern Gentoo system require udev. In some the dependency can be avoided by careful use of USE flags. Others like lvm2 and Xorg have udev included in IUSE. Make a local overlay called static_dev, copy these ebuilds there and remove all references to udev.

{{Warning|This may break these packages in ways I'm totally unaware of - yet}}

== Getting ready to reboot ==


=== Making the Kernel ===

Follow the instructions at http://www.kernel-seeds.org which is mirrored at http://kernel-seeds.grytpype-thynne.org with the following changes


{{Warning|kernel-seeds.org is under new management. The mirror is no longer maintaned and will go away soon.}}


{{CodeBox|title=Key Kernel Options|<pre>
()  path to uevent helper
[ ] Maintain a devtmpfs filesystem to mount at /dev
[*]   Unix98 PTY support
[ ]   Legacy (BSD) PTY support
    (256)   Maximum number of legacy PTY in use
[ ]   Dynamic device file minor numbers
</pre>
}}

We can leave off the hair shirts. Unix98PTY support does work but the permissions on /dev/ptmx need to be set correctly and /dev/ptmx needs to be mounted crw-rw---- 1 root tty 5, 2 Mar 18 21:47 /dev/ptmx

Genkernel users are on their own here.

Provided your kernel can boot unaided, no initrd is required

== Making the Initrd ==


=== Preparing for usr/gen_init_cpio ===

To make everything robust and independent of what filesystem gets attached to which/ dev node, we will use the filesystem UUIDs everywhere.


{{Warning|The kernel cannot mount root by UUID unless you use the userspace mount command, which requires and initramfs}}
There are several ways to make an initramfs, we will use the kernel provided usr/gen_init_cpio script.

The script needs two things, a list of files to include in the initramfs and an init sctipt to execute. The use of usr/gen_init_cpio is well documented in the kernel.

Make a directory to hold the two files. I like /root/initrd. The two files that follow go there.

{{CodeBox|title=/root/initrd/initramfs_list|<pre>
# directory structure
dir /proc       755 0 0
dir /usr        755 0 0
dir /bin        755 0 0
dir /sys        755 0 0
dir /var        755 0 0
#dir /lib        755 0 0
dir /lib64      755 0 0
dir /sbin       755 0 0
dir /mnt        755 0 0
dir /mnt/root   755 0 0
dir /etc        755 0 0
dir /root       700 0 0
dir /dev        755 0 0
dir /dev/mapper 755 0 0

# we have a static /dev so we need all dev entries too
# e.g. /dev/console below
nod /dev/console        0600 0 0 c 5 1
nod /dev/null           0666 0 0 c 1 5

# dev/sda and partitions
nod /dev/sda            0660 0 0 b 8 0
nod /dev/sda1           0660 0 0 b 8 1
nod /dev/sda2           0660 0 0 b 8 2
nod /dev/sda4           0660 0 0 b 8 4
nod /dev/sda5           0660 0 0 b 8 5
nod /dev/sda6           0660 0 0 b 8 6

# dev/sdb and partitions
nod /dev/sdb            0660 0 0 b 8 16
# ...
# dev/sdc and partitions
nod /dev/sdc            0660 0 0 b 8 32
# ...

# three raid nodes
nod /dev/md125           0660 0 0 b 9 125
nod /dev/md126           0660 0 0 b 9 126
nod /dev/md127           0660 0 0 b 9 127

# all the lvm nodes I need
nod /dev/dm-0            0660 0 0 b 253 0
nod /dev/dm-1            0660 0 0 b 253 1
nod /dev/dm-2            0660 0 0 b 254 2
# ...

slink /dev/stderr                       /proc/self/fd/2                 777 0 0
slink /dev/stdin                        /proc/self/fd/0                 777 0 0
slink /dev/std/out                      /proc/self/fd/1                 777 0 0

# busybox
file /bin/busybox /bin/busybox  755 0 0

# for raid on lvm
file /sbin/mdadm                /sbin/mdadm              755 0 0
file /sbin/mdadm                /sbin/mdadm              755 0 0
file /sbin/lvm.static           /sbin/lvm.static         755 0 0

# libraries required by /sbin/fsck.ext4 and /sbin/fsck

slink   /lib                            /lib64                          777 0 0
file    /lib64/ld-linux-x86-64.so.2     /lib64/ld-linux-x86-64.so.2     755 0 0
file    /lib64/libext2fs.so.2           /lib64/libext2fs.so.2           755 0 0
file    /lib64/libcom_err.so.2          /lib64/libcom_err.so.2          755 0 0
file    /lib64/libpthread.so.0          /lib64/libpthread.so.0          755 0 0
file    /lib64/libblkid.so.1            /lib64/libblkid.so.1            755 0 0
file    /lib64/libuuid.so.1             /lib64/libuuid.so.1             755 0 0
file    /lib64/libe2p.so.2              /lib64/libe2p.so.2              755 0 0
file    /lib64/libc.so.6                /lib64/libc.so.6                755 0 0
file    /lib64/libmount.so.1            /lib64/libmount.so.1            755 0 0

file    /sbin/fsck              /sbin/fsck                      755 0 0
file    /sbin/fsck.ext4         /sbin/fsck.ext4                 755 0 0

# our init script
file    /init                   /root/initrd/init               755 0 0
</pre>
}}

I'm sure there is a sh one liner to feed to busybox mknod as a part of the init script, so I don't need the huge list of nod statements but I don't know it.

If you use files systems other than extX on /usr and / or /var, which the initrd checks and mounts, you need your filesystem tools listed here. Feel free to add other things you find useful when booting fails too.
