{{Stub}}

This section is based on converting a non-UEFI, MBR partition based system to boot from a GPT RAID enabled disk. It is currently incomplete, and partially edited from the previous version.

{{Note|In BIOS - MBR disks, leave a space at the start of the disk for GRUB2 to be installed. The conventional 32 kilobytes (63 sectors of 512 bytes) is not enough for GRUB2 when RAID is enabled, the space should be at least 1MB (the first primary partition should start on or after sector 2048). Most disk partition utilities automatically perform this operation.
<br/>
On BIOS - GPT disks, explicit allocation of space for the GRUB2 BIOS boot partition must be provided. Create a disk at least 1 MB in size, type <code>EF02</code> (BIOS boot partition). (This will not be used in a UEFI system, so you could use the same space for the EFI partition (type <code>EF00</code>) when swapping the disk between systems)
<br/>
For the following three code blocks, first observe the output of GRUB2 installing on the first few sectors (only 63 sectors of 512 bytes) of a disk. Installing with limited sectors will cripple GRUB2's operation making it incapable of supporting complex disk setups such as RAID and ultimately unable to boot the system. GRUB2's output on the second block (a disk with 2048 sectors free before the first primary partition) displays adequate output. The output from GRUB2 in the third block shows the <code>EF02</code> partition (without which GRUB2 will refuse to install).
}}

{{CodeBox|title=Code block 1|<pre>
Disk /dev/sda: 160.0 GB, 160000000000 bytes, 312500000 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x000cfe45
 
   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *          63    48821534    24410736   8e  Linux LVM
</pre>}}

{{CodeBox|title=Code block 2|<pre>
Disk /dev/sda: 320.1 GB, 320072933376 bytes, 625142448 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0009d633
 
   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048      499711      248832   8e  Linux LVM
</pre>}}

{{CodeBox|title=Code block 3|<pre>
GPT fdisk (gdisk) version 0.8.8
 
Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present
 
Found valid GPT with protective MBR; using GPT.
Disk /dev/sdb: 5860533168 sectors, 2.7 TiB
Logical sector size: 512 bytes
Disk identifier (GUID): 47915407-BA7E-4869-8D3E-3CB44F5FDA12
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 5860533134
Partitions will be aligned on 2048-sector boundaries
Total free space is 1050590 sectors (513.0 MiB)
 
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048         1050623   512.0 MiB   EF02  BIOS boot partition
   2         1312768        68421631   32.0 GiB    8200  Linux swap
   3        68683776       270010367   96.0 GiB    8300  root
   4       270272512       471599103   96.0 GiB    8300  var
   5       471861248      5860533134   2.5 TiB     8300  home
</pre>}}

==== Booting from LVM logical volumes ====

GRUB2 supports booting from an [[LVM]] partition however the <code>device-mapper</code> USE flag must be set in order to activate this feature.

{{FileBox|filename=/etc/portage/package.use|title=Enabling the device-mapper USE flag for GRUB2|<pre>
sys-boot/grub:2 device-mapper
</pre>}}

If GRUB2 is currently installed, re-emerge it using the <kbd>--newuse</kbd> option:

{{Emerge|sys-block/grub:2|params+=--newuse}}

Next tell GRUB2 to pre-load the <code>lvm</code> module:

{{FileBox|filename=/etc/default/grub|title=Preloading LVM module|lang=bash|1=
GRUB_PRELOAD_MODULES=lvm
}}

Finally (re)generate a GRUB2 {{Path|grub.cfg}} file using the <kbd>grub2-mkconfig</kbd> command.

==== Booting from RAID array ====

In this section, we assume a system has three hard drives. {{Path|/dev/sda}} is the original MBR Windows Vista disk, untouched apart from installing GRUB2 onto it. {{Path|/dev/sdb}} and {{Path|/dev/sdc}} are configured identically.

{{CodeBox|<pre>
GPT fdisk (gdisk) version 0.8.10
 
Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present
 
Found valid GPT with protective MBR; using GPT.
Disk /dev/sdc: 1953525168 sectors, 931.5 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): CB232664-F98D-45C0-8111-2AC526D5EA61
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 1953525134
Partitions will be aligned on 2048-sector boundaries
Total free space is 509918 sectors (249.0 MiB)
 
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048        67110911   32.0 GiB    8200  Linux swap
   2        67110912        67127295   8.0 MiB     EF02  BIOS boot partition
   3        67373056       402917375   160.0 GiB   8300  Linux filesystem
   4       403179520      1953525134   739.3 GiB   8300  Linux filesystem
</pre>}}

{{Path|/dev/sdb3}} and {{Path|/dev/sdc3}} are raided together to make the {{Path|/}} partition.

{{Path|/dev/sdb4}} and {{Path|/dev/sdc4}} are raided together to make the {{Path|/home}} partition.

{{FileBox|filename=/boot/grub/grub.cfg|<pre>
menuentry 'Gentoo GNU/Linux, with Linux x86_64-3.14.14-gentoo' --class gentoo --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-x86_64-3.14.14-gentoo-advanced-8bb0e52c-d524-4af8-ac08-f3c9238c6040' {
	load_video
	set gfxpayload=keep
	insmod gzio
	insmod part_msdos
	insmod part_gpt
	insmod diskfilter
	insmod mdraid1x
	insmod ext2
	set root='mduuid/660afb13150e817a0cdd36476d5b2c51'
	if [ x$feature_platform_search_hint = xy ]; then
	  search --no-floppy --fs-uuid --set=root --hint='mduuid/660afb13150e817a0cdd36476d5b2c51'  8bb0e52c-d524-4af8-ac08-f3c9238c6040
	else
	  search --no-floppy --fs-uuid --set=root 8bb0e52c-d524-4af8-ac08-f3c9238c6040
	fi
	echo	'Loading Linux x86_64-3.14.14-gentoo ...'
	linux	/boot/kernel-3.14.14-gentoo domdadm root=UUID=8bb0e52c-d524-4af8-ac08-f3c9238c6040 ro  
	echo	'Loading initial ramdisk ...'
	initrd	/boot/initramfs-genkernel-x86_64-3.14.14-gentoo
}
 
menuentry 'Gentoo GNU/Linux mirror 2' --class gentoo --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-simple-8bb0e52c-d524-4af8-ac08-f3c9238c6040' {
        load_video
        insmod gzio
        insmod part_msdos
        insmod part_gpt
	insmod mdraid1x
        insmod ext2
        set root=(mduuid/660afb13:150e817a:0cdd3647:6d5b2c51)
        if [ x$feature_platform_search_hint = xy ]; then
	          search --no-floppy --fs-uuid --set=root --hint-bios=hd1,msdos2 --hint-efi=hd1,msdos2 --hint-baremetal=ahci1,msdos2 --hint='hd1,msdos2'  8bb0e52c-d524-4af8-ac08-f3c9238c6040
          else
		  search --no-floppy --fs-uuid --set=root 660afb13:150e817a:0cdd3647:6d5b2c51
        fi
	echo    'Loading Linux 3.14.14-gentoo ...'
	linux   /boot/kernel-3.14.14-gentoo domdadm root=/dev/disk/by-id/md-uuid-660afb13:150e817a:0cdd3647:6d5b2c51 ro
	echo    'Loading initial ramdisk ...'
	initrd  /boot/initramfs-genkernel-x86_64-3.14.14-gentoo
}
</pre>}}

<code>insmod part_gpt</code> (or <code>insmod part_msdos</code>) is needed otherwise GRUB2 will not be able to read the partition table.

<code>insmod mdraid1x</code> is required for RAID v1.1 or higher. If using RAID v0.9 or v1.0 the RAID module might not be needed (<code>mdraid09</code> for v0.9) because the RAID information is stored at the end of the partition. Any references to <code>insmod raid</code> are obsolete.

<code>insmod ext2</code> is required for ext partitions. For a other file systems substitute the appropriate module.

<code>set root='mduuid/660afb13150e817a0cdd36476d5b2c51'</code> tells GRUB2 what root device Linux will be using.

At this point, GRUB2 is ready to hand over control to Linux. Any errors up to this point (missing modules, missing boot partition, etc.) are problems with GRUB2 not the Linux kernel. Onward from this point, it is safe to narrow errors down to Linux.

Linux is unable to assemble RAID assemblies in the kernel. It must call out to user-space tools; if the root partition is a RAID set, an initramfs '''must''' be used.

{{Warning|Do ''not'' use <kbd>genkernel</kbd> utility to generate a kernel when using a RAID set for the root partition.}}

Make sure the kernel is configured correctly. Especially make sure that <code>CONFIG_FHANDLE</code> variable is set (this is why genkernel must not be used - genkernel will reset the value of <code>CONFIG_FHANDLE</code> and reap havoc upon the RAID set).

Compile the kernel manually by running the following commands as root:

{{RootCmd|cd /usr/src/linux
|make
|make modules_install
|make install
}}

At this point it is probably a good idea to <kbd>emerge udev</kbd> - and make sure all warnings are fixed! 

Use the <kbd>genkernel</kbd> utility to generate an initramfs:

{{RootCmd|genkernel --mdadm --disklabel all --install initramfs}}

{{Note|The <code>--mdadm</code> option is needed to make the initramfs RAID-aware, and the <code>--disklabel</code> option is needed to view disk UUIDs.}}

The <code>linux</code> and <code>initrd</code> lines in {{Path|/boot/grub/grub.cfg}} should now load the Linux kernel. Add the <code>domdadm</code> parameter to the Linux kernel command line in GRUB2. Without it the RAID set will not assemble and the Linux kernel will not find the root device.

{{Note|The second boot option contains a deliberate error. Linux will be unable to find root device by itself and will drop into the GRUB2 shell. ''This is needed.''

Discussion on the linux raid mailing list implies that the root partition is not being passed correctly from the initramfs to the running system.

Note also that it is confusing whether to use UUIDs or mduuids. I think you need to pass mduuids to grub, and UUIDs to linux. Suck it and see.}}

The first boot option correctly assembles the root RAID set at boot time, and boots successfully. Any attempt to access the root device from user space will fail as if the RAID set does not exist. This breaks GRUB2, and making the mistake of trying to run <tt>grub2-install</tt> on top of these errors will break GRUB boot altogether. Make sure Rescue CD and a copy of the Gentoo handbook are easily available before attempting to use a RAID set on the root disk.

The second option drops into a GRUB2 shell. Running <kbd>ls /dev/md*</kbd> will show that initrd has found the RAID set devices, and giving it the device, eg {{Path|/dev/md127}}, will boot into a fully working system with userspace access to the boot device.

Put these into a {{Path|/etc/grub.d}} script at the first available opportunity.

Further documentation on this subject, along with booting from encrypted physical volumes, is close to null. 

Any further documentation from a user that has successfully booted a system from a RAID array welcome to complete add a RAID boot section to this article.

{{Note|Booting from RAID is only relevant for BIOS [boot]. EFI users shall roll out their custom initramfs or use an initramfs package available out there. Depending on your setup, you may use either a BIOS - MBR or a BIOS - GPT combination. Here is an example to a BIOS - GPT setup with {{Path|/boot}} and <code>root</code> {{Path|/}} in a RAID-1 configuration [http://sinodun.com/2010/07/installing-grub2-on-gnulinux-software-raid/] and Xen on RAID-5.}}

{{Note|The <tt>grub2-mkdevicemap</tt> command and UUID re-setting have been removed and are no longer distributed with GRUB2. The UUID problem GRUB2 once had no longer appears to be an issue. Installing to two devices in a RAID-1 configuration seemed to work with no problems; This is the command that was successful <kbd>grub2-install /dev/sda && grub2-install /dev/sdb</kbd> (after creating the expected <code>EF02</code> BIOS boot partition).}}

{{Important|If this is a new installation of Gentoo, be sure to <kbd>emerge mdadm</kbd> in the chrooted environment before attempting to install GRUB2 as described in the note above, otherwise it will fail with '''"Path {{Path|/boot/grub}} is not readable by GRUB on boot. Installation is impossible. Aborting."'''  After installing the <kbd>mdadm</kbd> tool, GRUB2 can correctly read the RAID devices. The <kbd>grub2-install /dev/sda</kbd> and <kbd>grub2-install /dev/sdb</kbd> should work as expected on a RAID-1 array comprised of {{Path|/dev/sda2}} and {{Path|/dev/sdb2}} for boot.}}

Booting from a RAID array is very similar to booting from a LVM Logical Volume aside from RAID specific terminology and syntax of RAID partitioned volume.

{{CodeBox|<pre>...
     insmod raid
#    and load the related `mdraid' module `mdraid09' for RAID arrays with version 0.9 metadata, and `mdraid1x' for arrays with version 1.x metadata.
     insmod mdraid09
     set root=(md0p1)
#    or the following for an unpartitioned RAID array
     set root=(md0)
...</pre>}}

{{Note|A bleeding edge RAID user might emerge the live ebuild to get the latest bit of fixes and updates.}}

{{Note|A NVidia (dm_nv) specific module for RAID 3/5, so something like `insmod dm_nv' is necessary for NVidia related hardware.}}

This should work with a simple software RAID setup. However, the author has no idea or what command, if any exit at the moment of writing, to use to assemble an array such as <kbd>mdadm --assemble --scan /dev/md0</kbd> that an initramfs could take care of.

==== Booting from LUKS ====

Tell GRUB2 to look for cryptodisks:

{{RootCmd|echo "GRUB_CRYPTODISK_ENABLE{{=}}y" >> /etc/default/grub}}

(Re)generate the {{Path|grub.cfg}} with the <code>grub2-mkconfig</code> utility.

{{Important|In grub 2.02 and greater, this parameter was renamed to <code>GRUB_ENABLE_CRYPTODISK</code>}}
