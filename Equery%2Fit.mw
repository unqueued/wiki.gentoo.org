<languages />
{{InfoBox stack
|{{InfoBox wikipedia|Gentoolkit|header=true}}
|{{InfoBox gitweb|gentoolkit.git}}
|{{InfoBox project|Portage-Tools}}
}}

{{c|equery}} è uno strumento per effettuare molte semplici operazioni comuni di Portage. Tra le altre operazioni, esso può mostrare le dipendenze dei pacchetti, i metadata e i files installati.

== Installazione ==

=== Emerge ===

Equery è una parte di strumenti installati con il pacchetto {{Package|app-portage/gentoolkit}}:

{{Emerge|app-portage/gentoolkit}}

per informazioni sull'installazione di {{c|equery}} o di altri strumenti vedere l'articolo [[Gentoolkit|Gentoolkit]].

== Utilizzo ==

=== Introduzione ===

{{c|equery}} è uno strumento che mostra informazioni utili sui pacchetti installati nel sistema. {{c|equery}} si basa su un sistema di moduli. Ogni modulo ha un'abbreviazione. Per esempio, digitare {{c|equery l gcc}} è la stessa cosa che digitare {{c|equery list gcc}}. Invocando l'opzione <code>--help</code> ({{c|equery --help}}) verranno mostrate tutte le opzioni globali ed elencati tutti i moduli disponibili con la loro relativa abbreviazione. Aggiungere un modulo alla fine del comando ({{c|equery --help module}}) verrà mostrata la schermata di aiuto per questo specifico modulo. Come ultima cosa, eseguire {{c|man equery}} mostrerà una spiegazione dettagliata di tutti i moduli disponibili e le opzioni disponibili con alcuni esempi utili. 

Sotto c'è una lista di caratteristiche che funzionano con la maggior parte di moduli. 

{{Cmd|equery --quiet list gcc|output=<pre>
sys-devel/gcc-4.3.2-r3
</pre>}}

{{Cmd|equery --quiet list sys-devel/gcc|output=<pre>
sys-devel/gcc-4.3.2-r3
</pre>}}

{{Cmd|equery --quiet list '>{{=}}sys-devel/gcc-4'|output=<pre>
sys-devel/gcc-4.3.2-r3
</pre>}}

Come {{c|emerge}}, {{c|equery}} non comprende i nomi parziali di pacchetti:

{{Cmd|equery check zilla|output=<pre>
!!! No package found matching zilla
</pre>}}

Diversamente da {{c|emerge}}, {{c|equery}} può accettare il globbing della shell nel nome della categoria e/o nel nome del pacchetto:

{{Cmd|equery check '*zilla*'|output=<pre>
 * Checking www-client/mozilla-firefox-3.0.14 ...
    90 out of 90 files passed
</pre>}}

{{Cmd|equery check www-c*/*|output=<pre>
 * Checking www-client/links-2.2 ...
   30 out of 30 files passed
 * Checking www-client/mozilla-firefox-3.0.14 ...
   90 out of 90 files passed
</pre>}}

La maggior parte dei moduli di equery prendono input multipli:

{{Cmd|equery hasuse sse sse2|output=<pre>
 * Searching for USE flag sse ...
[IP-] [  ] media-libs/flac-1.2.1-r3 (0)
[IP-] [  ] media-libs/speex-1.2_beta3_p2 (0)
  
 * Searching for USE flag sse2 ...
[IP-] [  ] dev-libs/openssl-0.9.8k (0)
[IP-] [  ] x11-libs/pixman-0.16.0 (0)
</pre>}}

Qualche modulo permette anche espressioni regolari:

{{Cmd|equery -q list --portage-tree --full-regex '[kr]?flickr.*'|output=<pre>
dev-dotnet/flickrnet-bin-2.2
dev-ruby/flickr-1.0.2-r1
dev-ruby/flickr-1.0.2-r2
dev-ruby/rflickr-20060201
media-gfx/kflickr-0.6
[...]
</pre>}}

{{Note|Il supporto globbing sostituisce una serie di vecchie opzioni su {{c|equery}}. Per esempio, per agire su tutti i pacchetti di un certo insieme si utilizza <code>'*'</code> (asterisco). Per agire in tutti i pacchetti di una categoria si utilizza <code>'category-name/*'</code>.}}

{{Warning|Non dimenticarsi di '''citare l'input quando si utilizzano i caratteri speciali della shell''' come asterischi o greater, meno che quando si utilizzano le firme.}}

Le prossime poche sezioni di questo documento fanno una breve introduzione ai differenti moduli {{c|equery}}.

=== Funzionalità ===

Per vedere una lista di tutte le funzionalità di equery, eseguirlo semplicemente senza argomenti: 

{{Cmd|equery|output=<pre>
Gentoo package query tool
Usage: equery [global-options] module-name [module-options]
 
modules (short name)
 (b)elongs               list what package FILES belong to
 (c)hanges               list changelog entries for ATOM
 chec(k)                 verify checksums and timestamps for PKG
 (d)epends               list all packages directly depending on ATOM
 dep(g)raph              display a tree of all dependencies for PKG
 (f)iles                 list all files installed by PKG
 h(a)s                   list all packages for matching ENVIRONMENT data stored in /var/db/pkg
 (h)asuse                list all packages that have USE flag
 ke(y)words              display keywords for specified PKG
 (l)ist                  list package matching PKG
 (m)eta                  display metadata about PKG
 (s)ize                  display total size of all files owned by PKG
 (u)ses                  display USE flags for PKG
 (w)hich                 print full path to ebuild for PKG
</pre>}}

=== Aliases ===

Un approccio comune di lavorare con {{c|equery}} è di creare aliases. Quando si utilizza la bash questi possono generalmente essere messi nel file {{Path|~/.bashrc}}:

{{FileBox|filename=~/.bashrc|lang=bash|1=
alias eqf='equery f'
alias equ='equery u'
alias eqh='equery h'
alias eqa='equery a'
alias eqb='equery b'
alias eql='equery l'
alias eqd='equery d'
alias eqg='equery g'
alias eqc='equery c'
alias eqk='equery k'
alias eqm='equery m'
alias eqy='equery y'
alias eqs='equery s'
alias eqw='equery w'
}}

=== Cercare il pacchetto da cui proviene il file con l'opzione belongs (b) ===

{{Cmd|equery belongs -e /usr/bin/glxgears|output=<pre>
 * Searching for /usr/bin/glxgears ...
 x11-apps/mesa-progs-7.5.1 (/usr/bin/glxgears)
</pre>}}

<code>belongs</code> può cercare i file corrispondenti a una espressione regolare tramite l'opzione <code>-f</code>. L'opzione <code>-e</code> ferma la ricerca una volta che la corrispondenza viene trovata. Dal momento che nessun file sul vostro sistema dovrebbe essere di proprietà di due pacchetti, questa è una sicura ottimizzazione. 

Può essere utilizzata anche una versione breve di <code>belongs</code> (<code>b</code>). Per esempio, per vedere a quale pacchetto appartiene {{c|equery}}:

{{Cmd|equery b equery|output=<pre>
 * Searching for equery ... 
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib/python-exec/python2.7/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python3.3/site-packages/gentoolkit/test/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/bin/equery -> ../lib/python-exec/python-exec2)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python2.7/site-packages/gentoolkit/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib/python-exec/python3.3/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python2.7/site-packages/gentoolkit/test/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python3.3/site-packages/gentoolkit/equery)
</pre>}}

=== Visualizzazione delle voci ChangeLog con changes (c) ===

<code>changes</code> fa vedere all'utente le voci ChangeLog per una versione di pacchetto entro un range di versioni. Immaginare che dopo l'esecuzione del comando {{c|emerge --sync}} Portage mostra un messaggio che dice che sta per essere aggiornato. Per vedere quali sono i cambiamenti può essere utilizzato questo comando:

{{Cmd|equery changes portage|output=<pre>
*portage-2.1.6.13 (03 May 2009)
  
  03 May 2009; Zac Medico <zmedico@gentoo.org> +portage-2.1.6.13.ebuild:
  2.1.6.13 bump. This fixes bug #268398 (document econf automatic die)
  and bug #267104 (handle insufficient space interaction with userfetch).
  Bug #268228 tracks all bugs fixed since 2.1.6.11.
</pre>
}}

=== Verificare l'integrità del pacchetto con check (k) ===

Qualche volta è utile verificare l'integrità di un pacchetto. {{c|equery}} può verificare le MD5 sums così come il timestamps per indicare quando un pacchetto potrebbe essere stato corrotto, sostituito o rimosso. 

{{Cmd|equery check gentoolkit|output=<pre>
 * Checking app-portage/gentoolkit-0.3.0_rc7 ...
   71 out of 71 files passed
</pre>
}}

=== Elencare tutti i pacchetti dipendenti da un pacchetto con dependes (d) ===

Vi siete mai chiesti il motivo per cui un certo pacchetto è stato installato sul sistema? {{c|equery}} può dire quali sono i pacchetti che lo elencano come dipendenza tramite l'opzione <code>depends</code>. Si possono anche includere le dipendenze indirette con l'opzione <code>-D</code>.

{{Cmd|equery depends pygtk|output=<pre>
 * Searching for pygtk ...
app-admin/pessulus-2.24.0 (>=dev-python/pygtk-2.6.0)
app-editors/gedit-2.24.3 (python ? >=dev-python/pygtk-2.12)
dev-libs/libgweather-2.24.3 (python ? >=dev-python/pygtk-2)
dev-python/gnome-python-base-2.22.3 (>=dev-python/pygtk-2.10.3)
dev-python/gnome-python-desktop-base-2.24.1 (>=dev-python/pygtk-2.10.3)
[...]
</pre>
}}

Un secondo esempio elenca tutti i pacchetti direttamente dipendenti da udev:

{{Cmd|equery d udev|output=<pre>
sys-auth/consolekit-0.4.5_p20120320 (acl ? >=sys-fs/udev-146-r1)
sys-fs/cryptsetup-1.4.1 (>=sys-fs/udev-124)
                        (>=sys-fs/udev-182[static-libs])
                        (<=sys-fs/udev-171-r6)
sys-fs/lvm2-2.02.88 (>=sys-fs/udev-151-r4)
virtual/dev-manager-0 (sys-fs/udev)
x11-libs/cairo-1.10.2-r2 (drm ? >=sys-fs/udev-136)
</pre>}}

{{Note|1=Questa schermata includerà le dipendenze opzionali gestite dalle USE flags, per esempio <code>acl</code> USE su <code>(acl ? >=sys-fs/udev-146-r1)</code> sopra, anche se questa USE flag non è attiva. Un pacchetto è una dipendenza se la USE flag è attiva.}}

=== Vedere dipendenze circolari con degraph (g) ===

<code>depgraph</code> è l'opposto di <code>depends</code>. Essa cercherà tutti gli ebuilds da cui un dato pacchetto dipende (non gli ebuilds che dipendono dal pacchetto). Quando trova una dipendenza, essa cercherà ricorsivamente tutte le "altre" sotto-dipendenze di quel pacchetto. Controllare quanto è profondo il controllo sull'albero del Portage con l'opzione <code>--depth</code>. 

{{Cmd|equery depgraph mozilla-firefox|output=<pre>
 * Searching for mozilla-firefox ...
 * dependency graph for www-client/mozilla-firefox-2.0.0.19:
`-- www-client/mozilla-firefox-2.0.0.19
 `-- virtual/jre-1.6.0 (virtual/jre) [java]
  `-- virtual/jdk-1.6.0 (virtual/jdk-1.6.0*)
  `-- dev-java/icedtea6-bin (unable to resolve: package masked or removed)
   `-- dev-java/sun-jdk-1.6.0.15
    `-- dev-java/java-sdk-docs-1.6.0.10 [doc]
     `-- app-arch/unzip-6.0-r1
      `-- app-arch/bzip2-1.0.5-r1 [bzip2]
    `-- sys-libs/glibc-2.9_p20081201-r2
     `-- sys-devel/gettext-0.17 [nls]
      `-- virtual/libiconv-0 (virtual/libiconv)
[...]
</pre>
}}

Notare come <code>jre</code> è una dipendenza "diretta" e <code>jdk</code> è una dipendenza "indiretta" se la USE <code>java</code> è impostata.

=== Elencare i files installati da un pacchetto con files (f) ===

{{c|equery}} può elencare tutti i fles installati da un ebuild con il modulo <code>files</code>. Provare <code>--tree</code> per leggere facilmente l'impaginazione della directory. Utilizzare <code>--filter</code> per trovare solo un certo tipo di file. Per esempio, per trovare dove sono installati gli eseguibili, utilizzare <code>--filter=cmd</code>, o per trovare rapidamente la posizione del file di configurazione provare con <code>--filter=conf</code>. 

{{Cmd|equery files --tree gentoolkit|output=<pre>
 * Searching for gentoolkit ...
 * Contents of app-portage/gentoolkit-0.3.0_rc7:
 /etc
   > /eclean
      + distfiles.exclude
      + packages.exclude
   > /env.d
      + 99gentoolkit-env
   > /revdep-rebuild
      + 99revdep-rebuild
 /usr
   > /bin
      + eclean
      + eclean-dist -> eclean
      + eclean-pkg -> eclean
      + epkginfo
      + equery
      + eread
      + euse
      + glsa-check
      + revdep-rebuild
   > /lib
      > /python2.6
         > /site-packages
            > /gentoolkit
            + gentoolkit-0.3.0_rc7-py2.6.egg-info
               + __init__.py
               > /equery
                  + __init__.py
                  + belongs.py
                  + changes.py
                  + check.py
                  + depends.py
                  + depgraph.py
                  + files.py
[...]
</pre>
}}

Un altro esempio, per elencare tutti i files installati da {{Package|media-sound/ncmpcpp}}:

{{Cmd|equery f ncmpcpp|output=<pre>
 * Searching for ncmpcpp ...
 * Contents of media-sound/ncmpcpp-0.5.10:
/usr
/usr/bin
/usr/bin/ncmpcpp
/usr/share
/usr/share/bash-completion
/usr/share/bash-completion/ncmpcpp
/usr/share/doc
/usr/share/doc/ncmpcpp-0.5.10
/usr/share/doc/ncmpcpp-0.5.10/AUTHORS.bz2
/usr/share/doc/ncmpcpp-0.5.10/NEWS.bz2
/usr/share/doc/ncmpcpp-0.5.10/config.bz2
/usr/share/doc/ncmpcpp-0.5.10/keys.bz2
/usr/share/man
/usr/share/man/man1
/usr/share/man/man1/ncmpcpp.1.bz2
</pre>}}

Le descrizioni di altri moduli e ulteriori flags da riga di comando possono essere trovati nel [[man page]] ({{c|man equery}}).

=== Vedere i pacchetti che hanno una specifica USE flag con hasuse (h) ===

<code>hasuse</code> può essere utilizzata per cercare i pacchetti con una certa USE flag. <code>hasuse</code> non indicherà se la flag è stata abilitata o meno; essa mostrerà semplicemente una lista di ebuilds che hanno la flag in questione come opzione. Vedere la sezione degli ESEMPI di <code>hasuse</code> nella pagina  del manuale {{c|equery}} per avere maggiori informazioni.

{{Cmd|equery hasuse qt3 qt4|output=<pre>
 * Searching for USE flag qt3 ...
[IP-] [  ] app-crypt/pinentry-0.7.5 (0)
[IP-] [  ] net-dns/avahi-0.6.24-r2 (0)
[IP-] [  ] net-wireless/wpa_supplicant-0.6.9 (0)
  
 * Searching for USE flag qt4 ...
[IP-] [  ] net-dns/avahi-0.6.24-r2 (0)
[IP-] [  ] net-wireless/wpa_supplicant-0.6.9 (0)
</pre>
}}

=== Elencare i pacchetti con list (l) ===

<code>list</code> è un semplice e ancora potente modulo per elencare i pacchetti che sono installati nell'albero del Portage o come overlay.

{{Cmd|equery list '*'|output=<pre>
 * Searching for * ...
[IP-] [  ] app-admin/eselect-1.2.3 (0)
[IP-] [  ] app-admin/eselect-ctags-1.10 (0)
[IP-] [  ] app-admin/eselect-esd-20060719 (0)
[IP-] [  ] app-admin/eselect-fontconfig-1.0 (0)
[IP-] [  ] app-admin/eselect-opengl-1.0.8-r1 (0)
[IP-] [  ] app-admin/eselect-python-20090824 (0)
[IP-] [  ] app-admin/eselect-ruby-20081227 (0)
[IP-] [  ] app-admin/eselect-vi-1.1.5 (0)
[IP-] [  ] app-admin/perl-cleaner-1.05 (0)
[IP-] [  ] app-admin/pessulus-2.24.0 (0)
[IP-] [  ] app-admin/python-updater-0.7 (0)
[IP-] [  ] app-admin/sudo-1.7.2_p1 (0)
[...]
</pre>
}}

L'interrogazione standard cercherà i pacchetti installati per il nome del pacchetto dato. Passando <code>'*'</code> mostra tutti i pacchetti nel gruppo. Nel campo più a sinistra è possibile vedere tutti i pacchetti sopra che sono <code>I</code>(nstallati) e dell'albero del <code>P</code>(ortage). Essi non sono mascherati (il secondo campo è vuoto), ed essi sono tutti installati nella slot di default (0).

Utilizzare l'opzione locale per vedere i pacchetti nell'albero del portage e overlays. 

{{Cmd|equery list -po vim|output=<pre>
 * Searching for vim ...
[-P-] [  ] app-editors/vim-7.0.235 (0)
[-P-] [ ~] app-editors/vim-7.0.243 (0)
[-P-] [  ] app-editors/vim-7.1.123 (0)
[-P-] [ ~] app-editors/vim-7.1.330 (0)
[-P-] [  ] app-editors/vim-7.2 (0)
[-P-] [ ~] app-editors/vim-7.2.108 (0)
[IP-] [  ] app-editors/vim-7.2.182 (0)
[-P-] [ ~] app-editors/vim-7.2.238 (0)
[-P-] [ ~] app-editors/vim-7.2.264 (0)
</pre>
}}

Qui è possibile vedere che è installata la versione 7.2.182 e non ci sono versioni disponibili dall'overlay. Gli utenti possono vedere quali versioni sono mascherate (tramite keyword) grazie a  <code>~</code> nel secondo campo. 

=== Visualizzazione di pacchetto metadata con meta (m) ===

Ogni pacchetto nell'albero del Portage fornisce almeno qualche [https://devmanual.gentoo.org/ebuild-writing/misc-files/metadata/index.html metadata] riguardo ai suoi manutentori, ecc... Le quantità di informazioni utili dipendono da quante ne vogliono fornire i manutentori di quel pacchetto. Senza opzioni, <code>meta</code> rilascia qualche basilare informazione utile.

{{Cmd|equery meta gnucash|output=<pre>
 * app-office/gnucash [gentoo]
 Maintainer:  tove@gentoo.org (Torsten Veller)
 Upstream:    None specified
 Location:    /usr/portage/app-office/gnucash
 Keywords:    2.2.9-r1:0: alpha amd64 ppc sparc x86
 Keywords:    2.2.9-r2:0:
 Keywords:    2.3.8:0:
 Keywords:    2.3.10:0: ~alpha ~amd64 ~ppc ~sparc ~x86
</pre>
}}

Qualche manutentore fornisce informazioni extra riguardo il pacchetto che sono molto utili: 

{{Cmd|equery meta --description emacs|output=<pre>
 * app-editors/emacs
  GNU Emacs is an extensible, customizable text editor - and more. At its core
  is an interpreter for Emacs Lisp, a dialect of the Lisp programming language
  with extensions to support text editing. The features of GNU Emacs include:
   * Content-sensitive editing modes, including syntax coloring, for a wide
     variety of file types including plain text, source code, and HTML.
   * Complete built-in documentation, including a tutorial for new users.
   * Support for many languages and their scripts, including all the European
     "Latin" scripts, Russian, Greek, Japanese, Chinese, Korean, Thai,
     Vietnamese, Lao, Ethiopian, and some Indian scripts.
   * Highly customizable, using Emacs Lisp code or a graphical customization
     interface.
   * A large number of extensions that add other functionality, including a
     project planner, mail and news reader, debugger interface, calendar, and
     more. Many of these extensions are distributed with GNU Emacs; others are
     available separately.
</pre>
}}

=== Vedere la dimensione del pacchetto con size (s) ===

Mai stato curioso si scoprire quanto spazio occupa uno specifico pacchetto? Dal momento che un pacchetto potrebbe avere i suoi files su più directories, il tipico comando {{c|du -hc}} potrebbe non dare il risultato esatto. Non bisogna preoccuparsi, {{c|equery}} aiuta in questo!

{{Cmd|equery size openoffice-bin|output=<pre>
 * app-office/openoffice-bin-3.1.1
         Total files : 4624
         Total size  : 361.38 MiB
</pre>
}}

Using <code>size</code> prints the total space used in human-readable units and lists the total number of files the package has. To get the total size in bytes use <code>--bytes</code>. 

=== Listing per-package USE flags with uses (u) ===

{{c|equery}}'s <code>uses</code> module can provide information about what USE flags are available for a specific package and which of those flags is currently enabled. 

{{Cmd|equery uses gst-plugins-meta|output=<pre>
 * Searching for gst-plugins-meta ...
[ Legend : U - flag is set in make.conf       ]
[        : I - package is installed with flag ]
[ Colors : set, unset                         ]
 * Found these USE flags for media-plugins/gst-plugins-meta-0.10-r2:
 U I
 + + X      : Adds support for X11
 - - a52    : Enables support for decoding ATSC A/52 streams used in DVD
 + + alsa   : Adds support for media-libs/alsa-lib (Advanced Linux Sound
              Architecture)
 - - dvb    : Adds support for DVB (Digital Video Broadcasting)
 + + dvd    : Adds support for DVDs
 + + esd    : Adds support for media-sound/esound (Enlightened Sound Daemon)
 + + ffmpeg : Enable ffmpeg-based audio/video codec support
 + + flac   : Adds support for FLAC: Free Lossless Audio Codec
 - - mad    : Adds support for mad (high-quality mp3 decoder library and cli
              frontend)
 + + mpeg   : Adds libmpeg3 support to various packages
 - - mythtv : Support for retrieval from media-tv/mythtv backend
 + + ogg    : Adds support for the Ogg container format (commonly used by
              Vorbis, Theora and flac)
 - - oss    : Adds support for OSS (Open Sound System)
 + + theora : Adds support for the Theora Video Compression Codec
 + + vorbis : Adds support for the OggVorbis audio codec
 - - xv     : Adds in optional support for the Xvideo extension (an X API for
              video playback)
</pre>
}}

Here a number of USE flags are enabled in gstreamer's plugin meta-package, but it can be seen that there are other USE flags available. For more information on USE flags, please refer to the [[Handbook:X86/Working/USE|USE Flags]] chapter of the [[Handbook:Main Page|Gentoo Handbook]]. 

=== Finding the ebuild path with which (w) ===

<code>which</code> is a simple script to help users quickly find the file path to an ebuild. If an unversioned package name is passed using <code>which</code> it will return the path to the newest installable ebuild version. In other words, it would return the ebuild Portage would use if {{c|emerge example/package}} was typed. <code>which</code> also accepts a ''versioned'' package to get the path to that ebuild. 

{{Cmd|equery which gnome|output=<pre>
/usr/portage/gnome-base/gnome/gnome-2.26.3.ebuild
</pre>
}}

Lastly, if none of the above features of {{c|equery}} have provided an answer, try using <code>which</code> to manually search an ebuild with programs like {{c|cat}}, {{c|less}} or {{c|grep}}: 

{{Cmd|grep HOMEPAGE $(equery which gentoolkit)|output=<pre>
HOMEPAGE="http://www.gentoo.org/proj/en/portage/tools/index.xml"
</pre>
}}

{{Warning|Be aware that {{c|equery}} currently changes the format of the output if it is sent through a pipe. The piped format is intended to be easier to parse by tools, but it can be turned off by adding the <code>--no-pipe</code> option. When writing scripts that employ {{c|equery}} be aware of this behavior.}}

== See also ==

* [[Q applets]] - A collection of small and fast Portage helper tools written in C.
* [[eix]] - A set of utilities for searching and diffing the local Portage tree and overlays using a binary cache.
* [[Gentoolkit]] - A suite of tools to ease the administration of a Gentoo system.

[[Category:Portage tools]]
