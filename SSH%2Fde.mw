<languages />

{{Metadata|abstract=SSH (Secure Shell) ist ein verschlüsseltes Terminal-Programm, das das klassische telnet-Tool auf unixoiden Betriebssystemen ersetzt.}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) ist ein verschlüsseltes Terminal-Programm, das das klassische [[Wikipedia:de:telnet|telnet]]-Tool auf unixoiden Betriebssystemen ersetzt.

Zusätzlich zu Terminal-Fernzugriff, welcher durch das Hauptprogramm '''ssh''' bereitgestellt wird, enthält die SSH-Programmsammlung inzwischen auch andere Werkzeuge wie '''scp''' ('''s'''ecure '''c'''o'''p'''y) oder '''sftp''' ('''s'''ecure '''f'''ile '''t'''ransfer '''p'''rotocol).

SSH war nicht immer frei. Heute ist allerdings die Implementation von [http://www.openbsd.org/ OpenBSD], OpenSSH, die am meisten genutzte und in Gentoo vorinstallierte Version.

== Installation ==

Meistens ist OpenSSH schon installiert (mit dem Paket {{Package|net-misc/openssh}}). Dieses Paket hat die folgenden USE flags:

{{USEflag|package=net-misc/openssh
|bindist
|hpn
|pam
|tcpd
|kerberos
|ldap
|libedit
|selinux
|skey
|static
|X
|X509
}}

Nach einer Änderung der USE-Flags, muss OpenSSH neu kompiliert werden:

{{emerge|net-misc/openssh}}

== OpenSSH verwenden ==

=== Server ===

Füge openssh zum Runlevel default hinzu, wenn dies nicht bereits geschehen ist.

{{RootCmd|rc-update add sshd default}}

Starte den sshd-Daemon mit:

{{RootCmd|/etc/init.d/sshd start}}

Der OpenSSH-Server kann wie jeder andere [[OpenRC]]-Service gesteuert werden:

{{RootCmd|/etc/init.d/sshd start
|/etc/init.d/sshd stop
|/etc/init.d/sshd restart}}

{{Note/de|Aktive SSH-Verbindungen zum Server bleiben beim Ausführen von <code>/etc/init.d/sshd restart</code> bestehen.}}

== Konfiguration ==

=== Schlüssel erstellen ===

Um eine sichere Shell bereitzustellen, werden kryptographische Schlüssel für die Ent- und Verschlüsselung sowie Hashing Funktionen von SSH benutzt. 

Bei dem ersten Start des SSH Services werden die System-Schlüssel erzeugt. Diese Schlüssel können (neu-)erstellt werden mittels des <code>ssh-keygen</code> Befehls.

{{Note/de|Ersetze in den Beipsielen <code>SecretPassphrase</code> mit deiner eigenen Passphrase}}

Schlüssel für das SSH Protokoll Version 1 (welche normalerweise nicht mehr aktiviert ist und durch Protokoll Version 2 abgelöst wurde) erzeugt man mit:

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "SecretPassphrase"}}

Für Schlüssel mit SSH Protokoll Version 2 (DSA und RSA Algorithmen):

{{RootCmd|/usr/bin/ssh-keygen -d -f /etc/ssh/ssh_host_dsa_key -N "SecretPassphrase"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "SecretPassphrase"}}

=== Server-Konfiguration ===

Der SSH Server wird normalerweise in {{Path|/etc/ssh/sshd_config}} konfiguriert. Weitere Einstellungen, einschliesslich des Ortes, an dem sich die obige Konfiguration befindet, können in {{Path|/etc/conf.d/sshd}} getätigt werden. Für Details über die Konfiguration sollte die [[man page]] "sshd_config" konsultiert werden.

Für eine Konfiguration, die sich besonders auf Sicherheit konzentriert, sollte [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html guide] (Englisch) gelesen werden.

=== Klient-Konfiguration ===

Der '''ssh'''-Klient und zugehörige Programme ('''scp''', '''sftp''', etc.) können in den folgenden Dateien konfiguriert:
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

Für weiter Informationen siehe die <code>ssh_config</code>-Manpage:

{{Cmd|man ssh_config}}

=== Authentifizierung ohne Passwort ===

Sehr praktisch für das Verwalten von [[git]]-Servern.

==== Klient ====

Führe auf dem Klienten folgenden Befehl aus:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== Server ====

Stelle sicher, dass ein Account für den betreffenden Benutzer besteht und kopiere dann die Datei {{Path|id_rsa.pub}} des Klienten in die Datei {{Path|~/.ssh/authorized_keys}}.

==== Testen auf einem Einzelplatzcomputer ====

Das oben beschriebene Vorgehen kann lokal getestet werden:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

== Fehlersuche ==

Es gibt drei verschiedene Level von Debug-Modi, die bei der Problemlösung helfen können. Mit "-v" gibt ssh Debugging-Nachrichten über seinen Prozess aus. Dies ist hilfreich bei dem Debugging von Verbindungs-, Authentifikations- und Konfigurationsproblemen. Mehrfache "-v" erhöhen den Grad der Ausgabe. Das Maximum ist drei.

{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== Abbruch von langlebigen Verbindungen ===

Many internet access devices perform network address translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network.  Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, though the '''ssh''' client program has not exited.

In order to resolve the issue, OpenSSH clients and servers can be configured to send a 'keep alive', or invisible message aimed at maintaining and confirming the live status of the link.
* To enable keep alive '''for all clients connecting to your local server''', set ''ClientAliveInterval 30'' (or some other value, in seconds) within the {{Path|/etc/ssh/sshd_config}} file.
* To enable keep alive '''for all servers connected to by your local client''', set ''ServerAliveInterval 30'' (or some other value, in seconds) within the {{Path|/etc/ssh/ssh_config}} file.

=== X11 Forwarding Not Forwarding or Tunneling! ===

<b>Problem</b>: After you have made the necessary changes to the configuration files for permitting X11 Forwarding, you find X applications are executing on the server and are not being forwarded to the client.

<b>Solution</b>: What is likely occurring during SSH login into the remote server or host, the <code>$DISPLAY</code> variable is either being unset or is being set after the SSH session sets it.

Test for this scenario as follows after logging in remotely:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

You should get something similar to "localhost:10.0" or "localhost2.local:10.0" using server side <code>X11UseLocalhost no</code> setting.  If you're getting the usual ":0.0", check to make sure you are not unsetting or initializing the <code>$DISPLAY</code> variable within {{Path|$HOME/.bash_profile}}. If so, remove or comment your custom initialization of <code>$DISPLAY</code> or prevent {{Path|bash_profile}} from executing during SSH login:

{{Cmd|ssh -t me@localhost2 bash --noprofile}}

A trick would be to alias this within {{Path|bashrc}}.

== Siehe auch ==
* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo documentation, have a look at all 3 parts.
* [[Special:MyLanguage/Keychain|Gentoo Linux Keychain Guide]]
* [[Special:MyLanguage/autossh|autossh]] - Detects when SSH connections drop and auto-reconnects.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
