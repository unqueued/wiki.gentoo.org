<languages />

{{Metadata|abstract=SSH (Secure Shell) ist ein verschlüsseltes Terminal-Programm, das das klassische telnet-Tool auf unixoiden Betriebssystemen ersetzt.}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) ist ein verschlüsseltes Terminal-Programm, dass das klassische [[Wikipedia:de:telnet|telnet]]-Tool auf unixoiden Betriebssystemen ersetzt.

Zusätzlich zum Terminal-Fernzugriff, welcher durch das Hauptprogramm {{c|ssh}} bereitgestellt wird, enthält die SSH-Programmsammlung inzwischen auch andere Werkzeuge wie {{c|scp}} ('''s'''ecure '''c'''o'''p'''y) oder {{c|sftp}} ('''s'''ecure '''f'''ile '''t'''ransfer '''p'''rotocol).

Ursprünglich war SSH nicht frei. Heute ist die populärste und de-facto Standard-Implementation [https://www.openbsd.org/ OpenBSD]'s OpenSSH, welche bei Gentoo vorinstalliert ist.

== Installation ==

=== Installation überprüfen ===

Die meisten Bereitstellungen von Gentoo Linux haben OpenSSH bereits auf dem System installiert. Dies kann durch Ausführen des {{c|ssh}}-Befehls überprüft werden. Sofern es installiert ist sollte eine Gebrauchsanweisung ausgegeben werden:

{{Cmd|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

Wenn keine Gebrauchsanweisung ausgegeben wird ist {{c|ssh}} entweder beschädigt oder nicht installiert. Es ist auch möglich dass ein Nutzer OpenSSH neu baut um eine neue USE-Konfiguration zu inkludieren. Wie auch immer, zum Betrachten von möglichen USE-Konfigurationen weitermachen.

=== USE-Flags ===

{{USEflag|package=net-misc/openssh}}

=== Emerge ===

Nach dem Ändern der notwendigen USE-Flags das Installieren oder Neubauen von OpenSSH nicht vergessen:

{{emerge|net-misc/openssh|params+=--changed-use}}

== Konfiguration ==

=== Schlüssel erstellen ===

Um eine sichere Shell bereitzustellen, werden kryptographische Schlüssel für die Ver- und Entschlüsselung sowie Hashing-Funktionen von SSH benutzt.

Beim ersten Start des SSH-Services werden die System-Schlüssel erzeugt. Diese können mittels des {{c|ssh-keygen}}-Befehls (neu-)erstellt werden .

Um die Schlüssel für das SSH-Protokoll Version 2 zu erzeugen (DSA und RSA Algorithmen):

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N ""
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""}}

The article [https://stribika.github.io/2015/01/04/secure-secure-shell.html Secure Secure Shell] suggests using '''Ed25519''' and '''RSA''' public key algorithms with:

{{RootCmd
|/usr/bin/ssh-keygen -t ed25519 -a 100 -f /etc/ssh/ssh_host_dsa_key -N ""
|/usr/bin/ssh-keygen -t rsa -b 4096 -o -a 100 -f /etc/ssh/ssh_host_rsa_key -N ""
}}

=== Server-Konfiguration ===

Der SSH Server wird normalerweise in der Datei {{Path|/etc/ssh/sshd_config}} konfiguriert, weitere Einstellungen, einschließlich des Ortes, an dem sich die obige Konfiguration befindet, können in {{Path|/etc/conf.d/sshd}} getätigt werden, inklusive das Ändern des Ortes der Konfigurationsdatei. Für Details über die Konfiguration sollte die [[man page]] "sshd_config" konsultiert werden.

Benutzer sollten für eine sicherheitsfokussierte Konfiguration [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Sven's OpenSSH guide] studieren.

=== Klient-Konfiguration ===

Der {{c|ssh}}-Klient und zugehörige Programme ({{c|scp}}, {{c|sftp}}, etc.) können in den folgenden Dateien konfiguriert werden:

* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

Für weitere Information das {{Path|ssh_config}}-Handbuch lesen:

{{Cmd|man ssh_config}}

=== Passwortlose Authentifizierung ===

Praktisch für das Verwalten von [[git]]-Servern.

==== Klient ====

Auf dem Klienten folgenden Befehl ausführen:

{{Cmd|ssh-keygen -t rsa|collapse-output=true|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== Server ====

Sicherstellen dass ein Konto für den Nutzer auf dem Server existiert und dann die Klienten-{{Path|id_rsa.pub}}-Datei in der {{Path|~/.ssh/authorized_keys}}-Datei des Servers im Heimverzeichnis des Nutzers platzieren.

{{Cmd|ssh-copy-id <server>|collapse-output=true|output=<pre>/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/larry/.ssh/id_rsa.pub"
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
larry@<server>'s password: 

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh '<server>'"
and check to make sure that only the key(s) you wanted were added.
</pre>}}

Afterwards a passwordless login should be possible doing

{{cmd|ssh <server>|output=<pre>larry@<server></pre>}}

Then on the server, the file {{path|/etc/ssh/sshd_config}} should be set to <code>PasswordAuthentication no</code>.

==== Einzel-Maschinen-Test ====

Die oben beschriebene Prozedur kann lokal getestet werden:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

=== Eindringensvermeidung ===

SSH ist ein oft angegriffener Dienst. Werkzeuge wie [[sshguard]] und [[fail2ban]] überwachen Logs und blacklisten entfernte Nutzer die wiederholt versuchten und scheiterten, sich anzumelden. Wie benötigt verwenden um ein häufig attackiertes System abzusichern.

== Bedienung ==

=== Dienste ===

==== OpenRC ====

Den OpenSSH-Daemon zum Default-Runlevel hinzufügen:

{{RootCmd|rc-update add sshd default}}

Den sshd-Daemon starten mit:

{{RootCmd|rc-service sshd start}}

Der OpenSSH-Server kann wie jeder andere OpenRC-Dienst gesteuert werden:

{{RootCmd
|rc-service sshd start
|rc-service sshd stop
|rc-service sshd restart
}}

{{Note|Aktive Verbindungen zum Server bleiben beim Ausführen von {{c|rc-service sshd restart}} intakt.}}

==== Systemd ====

Um den OpenSSH-Daemon mit dem System zu starten:

{{RootCmd|systemctl enable sshd.service|output=<pre>
Created symlink from /etc/systemd/system/multi-user.target.wants/sshd.service to /usr/lib64/systemd/system/sshd.service.
</pre>}}

Um den OpenSSH-Daemon jetzt zu starten:

{{RootCmd|systemctl start sshd.service}}

Um zu überprüfen ob der Dienst gestartet wurde:

{{RootCmd|systemctl status sshd.service}}

=== Escape sequences ===

During an active SSH session, pressing the tilde ({{Key|~}}) key starts an escape sequence. Enter the following for a list of options:

{{GenericCmd|prompt=ssh>|color=white|~?}}

== Fehlersuche ==

Es gibt drei verschiedene Level von Debug-Modi, die bei der Problemlösung helfen können. Mit der <code>-v</code>-Option gibt SSH Debugging-Nachrichten über seinen Fortschritt aus. Dies ist hilfreich bei dem Debugging von Verbindungs-, Authentifikations- und Konfigurationsproblemen. Mehrfache <code>-v</code>-Optionen erhöhen die Verbosität. Das Maximum ist drei.

{{Cmd
|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv
}}

=== Abbruch langlebiger Verbindungen ===

Viele Geräte, die Zugriff zum Internet anbieten, benutzen dafür Network Address Translation ([[NAT]]), ein Prozess der Geräten in einem privaten Netzwerk (typischerweise in Heim- oder Berufsumgebungen) Zugriff auf fremde Netzwerke wie dem Internet ermöglicht, obwohl sie nur eine einzige IP-Adresse in diesem fremden Netzwerk besitzt. Leider funktionieren diese NAT-Geräte nicht alle gleich und manche von ihnen schließen langlebige, nur gelegentlich genutzte TCP Verbindungen wie die von SSH. Man erkennt das daran, dass man auf einmal nicht mehr mit dem entfernten Computer interagieren kann, obwohl das {{c|ssh}}-Klienten-Programm nicht beendet wurde.

Um dieses Problem zu lösen, können OpenSSH-Klienten und -Server so konfiguriert werden, dass sie eine unsichtbare "keep alive" Nachricht senden, deren Ziel das Aufrechterhalten der Verbindung ist:

* Um Keep-Alive für alle Klienten, die sich mit dem lokalen Server verbinden, zu aktivieren, <code>ClientAliveInterval 30</code> (oder einen anderen Wert, in Sekunden) in der {{Path|/etc/ssh/sshd_config}}-Datei setzen.
* Um Keep-Alive für alle Server, mit denen sich der lokale Klient verbindet, zu aktivieren, <code>ClientAliveInterval 30</code> (oder einen anderen Wert, in Sekunden) in der {{Path|/etc/ssh/ssh_config}}-Datei setzen.

=== X11-Weiterleitung, keine Portweiterleitung oder Tunnelung ===

'''Problem''': Nachdem die nötigen Veränderungen an den Konfigurationsdateien gemacht sind, wird bemerkt dass X-Applikationen auf dem Server ausgeführt und nicht an den Klienten weitergeleitet werden.

'''Lösung''': Was vermutlich während der SSH-Anmeldung auf dem Server passiert, die <var>DISPLAY</var>-Variable ist entweder nicht gesetzt oder wird gesetzt ''nachdem'' die SSH-Sitzung sie setzt.

Wenn das Szenario zutrifft, kann es wie folgend nach dem Anmelden auf dem Server getestet werden:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

Die Ausgabe sollte in etwa ähnlich zu <code>localhost:10.0</code> oder <code>localhost2.local:10.0</code> mit der serverseitigen Einstellung <code>X11UseLocalhost no</code> sein. Wenn das übliche <code>:0.0</code> nicht ausgegeben wird, sicherstellen dass die <var>DISPLAY</var>-Variable in {{Path|~/.bash_profile}} nicht ungesetzt oder reinitialisiert ist. Wenn sie es ist, jegliche Initialisierung der <var>DISPLAY</var>-Variable entfernen oder auskommentieren um die Ausführung des Codes in {{Path|~/.bash_profile}} bei einer SSH-Anmeldung zu verhindern:

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

<code>larry</code> im Kommando oberhalb mit dem passenden Benutzernamen ersetzen.

Ein Trick der funktioniert wäre ein alias innerhalb der {{Path|~/.bashrc}}-Datei zu definieren.

== Siehe auch ==

* [[Security_Handbook/Securing_services#ssh|Den SSH-Dienst absichern]] im Gentoo Sicherheits-Handbuch
* [[Keychain|Gentoo Linux Keychain Guide]]
* [[autossh]] - Detektiert wenn SSH-Verbindungen abbrechen und verbindet erneut.
* [[SCP]] - Ein Secure-Copy-Programm das in der SSH-Suite enthalten ist.
* [[SFTP]] - Secure-File-Transfer-Protocol-Klient der in der SSH-Suite enthalten ist.
* [[SSHFS]] - Ein FUSE- und SSH-basierter Mount-Klient.

== Externe Ressourcen ==

* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo-Entwickler-Dokumentation.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
[[Category:Authentication]]
