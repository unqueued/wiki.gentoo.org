{{Warning|This page is a work in progress. It's accurate for OpenRC right now, but systemd still needs to be brought up to speed.}}

== Sharing a local socket with your MTA ==

=== Background ===

Using a local socket to communicate ''securely'' with an MTA requires some subtle configuration. We have four security goals,

# Allow OpenDKIM to read your DKIM signing keys.
# Allow your MTA to read and write to a shared socket file.
# Do '''not''' allow the MTA to read your DKIM signing keys.
# Don't allow anyone other than {{c|root}} to modify the signing keys.

In recent versions of {{Package|mail-filter/opendkim}}, the opendkim daemon runs as the {{c|opendkim}} user and group. Your signing keys should be,

# Located under {{Path|/var/lib/opendkim}}
# Owned by {{c|root}}, with group {{c|opendkim}}
# Have mode 750

Taken together, these imply that the {{c|opendkim}} group (including the daemon) can read your DKIM signing keys, but not write to them. The problem of the socket is now, essentially: how do you share the socket file between the {{c|opendkim}} user and the MTA, without allowing the MTA to read the {{c|opendkim}} group's files? The usual approach here would be to add the MTA to the {{c|opendkim}} group, and then allow that group to write to the socket file. However, doing so would allow the MTA to read your DKIM signing keys in this case, and that violates one of our security goals.

=== Solution ===

The solution to this problem is to create a new, dedicated group that us used only to control access to the socket. For example, you might

# Create a new {{c|dkimsocket}} group.
# Add the {{c|opendkim}} user to the {{c|dkimsocket}} group.
# Add your MTA to the {{c|dkimsocket}} group.
# Change the umask in {{Path|/etc/opendkim/opendkim.conf}} to allow group-write.

This '''almost''' does what we want, except for one critical pitfall: the socket gets created by the {{c|opendkim}} user, and as a result, it gets created with that user's primary group, {{c|opendkim}}. Since the socket's group isn't {{c|dkimsocket}}, our trick has failed! However, all is not lost: we can '''change the primary group of the {{c|opendkim}} user to {{c|dkimsocket}}''', after which the socket will be created with the correct group. With this one crucial modification, everything works as desired.

=== Example ===

Here we give a step-by-step example of sharing a local socket with Postfix, running as the {{c|postfix}} user.

First, edit your configuration file to specify the name of a local socket. On Gentoo, the local socket should be located under {{Path|/run/opendkim}}, because the permissions on that directory are set correctly for you at boot time. With OpenRC, you should edit {{Path|/etc/conf.d/opendkim}} and comment-out the inet socket line in favor of the local socket line,

{{FileBox|filename=/etc/conf.d/opendkim|lang=sh|1=
OPENDKIM_SOCKET="local:/run/opendkim/opendkim.sock"
#OPENDKIM_SOCKET="inet:8891@localhost"
}}

With systemd, you would make the changes in {{Path|/etc/systemd/system/opendkim.service.d/00gentoo.conf}} instead,

{{FileBox|filename=/etc/systemd/system/opendkim.service.d/00gentoo.conf|lang=ini|1=
[Service]
Environment="OPENDKIM_SOCKET=local:/run/opendkim/opendkim.sock"
#Environment="OPENDKIM_SOCKET=inet:8891@localhost"
}}

Next, create the dedicated group that will control access to the socket, and add the {{c|postfix}} user to it:

{{RootCmd
|groupadd dkimsocket
|usermod --append --groups dkimsocket postfix
}}

Next we will '''switch''' the primary group of the {{c|opendkim}} user to {{c|dkimsocket}}, and then ''append'' the {{c|opendkim}} group back:

{{RootCmd
|usermod --gid dkimsocket opendkim
|usermod --append --groups opendkim opendkim
}}

Finally, we must update the OpenDKIM configuration so that the socket gets created with group-writable permissions:

{{FileBox|filename=/etc/opendkim/opendkim.conf|1=
UMask 0113
}}

With that, we are ready to start OpenDKIM.
