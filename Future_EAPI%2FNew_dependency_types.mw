This page provides a summary of new dependency types requested for various features.

== The types ==

<!-- please keep the list sorted lexically -->

BADEPEND
:''Build-against dependencies''; {{Bug|392239}}. It would be used to inject additional ''DEPEND'' into a package being built against the package in question.
:'''Use case''': xorg packages, where e.g. building against ''libX11'' requires header files in ''xproto''. However, ''libX11'' can still be used without ''xproto'' installed, so ''RDEPEND'' is not really correct. An alternative is to specify ''xproto'' in every single ebuild linking against ''libX11'' directly or indirectly.

FDEPEND
:''Fetch dependencies''; {{Bug|182028}}. If implemented, it will be used to specify the dependencies necessary for the ''pkg_fetch()'' phase (e.g. a particular VCS). Thus, the package manager will be required to delay the execution of that phase until all fetch dependencies have been satisfied.
:'''Alternative solution:''' put fetch dependencies in ''DEPEND'', and request ''src_fetch()'' implementation to check whether the tool requirements are satisfied already. Allow the package manager to execute ''src_fetch()'' without satisfying the dependencies and if it fails, re-try when the dependencies are satisfied.

HDEPEND
:''Host dependencies''; {{Bug|317337}}. These will be required to be installed on the host machine when cross-compiling.

IDEPEND
:''Install-time dependencies''. Tools required for ''pkg_*'' phases; useful when binary a package is being installed and thus ''DEPEND'' does not fit.

SDEPEND
:''Suggested dependencies''; {{Bug|327701}}. A way of providing suggestions to install additional packages which can provide additional features to the package in question.

== Alternative: exheres-0 DEPENDENCIES block ==

An alternative to introducing the new ''*DEPEND'' variables is to replace all the ''*DEPEND'' variables with an exheres-0 ''DEPENDENCIES'' block. A copy-paste from [http://www.exherbo.org/docs/exheres-for-smarties.html#dependencies Exheres for smarties]:

    DEPENDENCIES="
        build+run:
            foo/bar
        run:
            foo/baz
        post:
            foo/monkey
    "

And:

    DEPENDENCIES="
        blah? ( cat/build-and-run )
        foo? (
            cat/build-and-run
            build:
                cat/build-only
            run:
                cat/run-only
                bar? (
                    cat/run-only
                    post:
                        cat/post-only
                )
                cat/run-only-again
        )
        cat/build-and-run"

Shortly saying:
* ''foo:'' starts a block of dependencies of type ''foo'',
* ''foo+bar+baz:'' means that the listed package belong to ''foo'', ''bar'' and ''baz''-type dependencies at the same time,
* the default block is ''build+run'',
* blocks are scoped to the enclosing braces.

Advantages:
* easier way of specifying common dependencies in really weird cases,
* ability to replace one-letter-DEPEND variables with a long, human-readable labels.

Disadvantages:
* necessity of rewriting whole ''*DEPEND'' when migrating to the new EAPI,
* necessity of handling two different dependency syntaxes in eclasses,
* added complexity to the dependency syntax parser (and it is spooky already),
* reinventing the wheel -- introducing a new syntax to avoid proper use of bash variables.
