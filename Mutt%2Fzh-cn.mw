<languages />
<div class="mw-translate-fuzzy">
{{Metadata|abstract=本指南介绍如何开始使用强大的命令行电子邮件客户端mutt。}}
</div>

<div class="mw-translate-fuzzy">
本指南介绍如何开始使用强大的命令行电子邮件客户端mutt。
</div>

If you're not a fan of e-mail clients with fancy graphical user interfaces, or you just like to be able to quickly read some mail over an SSH connection, the class of console-based mail clients might be for you. 

== 介绍 ==

<div class="mw-translate-fuzzy">
尽管Mutt最初设计用于从本地mbox邮件缓冲区读取邮件(例如{{Path|/var/spool/mail/}})，但它现在完全支持Maildir存储的文件夹，从POP3服务器远程获取邮件并管理IMAP帐户。有关Mutt的完整描述，请阅读Mutt手册和Mutt网站http://www.mutt.org/。
</div> 

== 安装 ==

Starting your Mutt adventure simply requires you to emerge it. Unfortunately, Mutt has a lots of options, which enable or disable certain functionalities of Mutt. We now briefly discuss the most important USE flags that you may want to enable based on your intended usage of Mutt. Please note that enabling most of them won't harm your Mutt, but may make it do more than an experienced Mutt user would like. 

=== Emerge ===

{{Emerge|params+=--verbose|mail-client/mutt}}

=== USE flags ===

{{USEflag|package=mail-client/mutt}}

First off, for newcomers, the <code>imap</code> USE flag is most probably the most important one. Enabling it won't hurt anything, so if you're unsure what account you're going to use Mutt with, just enable it. Most email providers, even free ones such as GMail, use IMAP these days, for it is the most convenient way to store email that is accessed from multiple clients at the same time and/or different locations. Because IMAP keeps all mail at the server, Mutt just downloads the messages that you want to view. 

Next to reading messages, it often happens that you will list a mailbox, to see what is in there.  For this information, Mutt has to download the message headers.  When you switch folders frequently, or your folders contain a large amount of emails, downloading the message headers over and over again will take some time. Since this simply is a waste, Mutt uses a so-called header cache (USE flag <code>hcache</code>) to keep the most important bits of messages that it needs to greatly speedup opening folders. This header cache is backed by a db-library, of which five flavours exist: <code>berkdb</code>, <code>gdbm</code>, <code>ldbm</code>, <code>qdbm</code>, and <code>tokyocabinet</code>. If you don't have any preference yourself, pick <code>lmdb</code> as it is the fastest when used with Mutt. You can only enable at most one db-library USE flag for <code>hcache</code> backend.  If you re-emerge Mutt with a different db-library later, Mutt will rebuild its caches automatically when it opens a folder.

While IMAP is important for reading mail, sending mail requires a mail server. Mutt can deliver mail using local (send)mail submissionm, but often that's not a good solution for e.g. laptop users that travel around. Mutt comes with SMTP support which gets enabled by the <code>smtp</code> USE flag. Again, enabling it if you're not sure doesn't harm. Mutt's SMTP support allows you just to send mail over a mail server of your choice optionally authenticating yourself, this is usually an smtp server given to you by your email provider. 

Both IMAP and SMTP mostly go over encrypted channels these days, hence if you enabled any of both, it is wise to also enable either of the <code>ssl</code> or <code>gnutls</code> USE flags. Both just add the secure variants (imaps and smtps) to Mutt's list of supported protocols using either OpenSSL's or GNUTLS' implementation. If you don't have a strong preference for either, just go for <code>ssl</code>. Most likely this is in your global USE already anyway. If you intend to authenticate yourself when sending e-mail, be sure to also include <code>sasl</code> in your USE flags, since that's a prerequisite for that. 

Nowadays, it gets more and more common to sign or even encrypt messages.  Mutt supports traditional OpenPGP, S/MIME and both of these through the gpgme wrapper.  The easiest way to setup support for signed and encrypted messages is using <code>gpgme</code> USE flag.  Documentation and experiences in this area are confusing to say the least, and while gpgme code-path is easiest to setup, it is documented scarcely.  When you enable <code>gpgme</code> ensure you also enable this backend in your configuration, see below.  

== 配置 ==

After you emerged Mutt with some choice USE flags, the only necessary step is to create a {{Path|.muttrc}} file. muttrc's are to be found in many places on the web and in Mutt's documentation. In {{Path|/usr/share/doc/mutt-<version>/samples}} some muttrc samples from the official distribution can be found. A very minimal {{Path|.muttrc}} for an IMAP based account with SMTP mail delivery is shown below.  It also enables signing emails via gpg using the gpgme backend.

=== Files ===

==== .muttrc ====

<div class="mw-translate-fuzzy">
{{FileBox|filename=~/.muttrc|title=A .muttrc example file|1=
# character set on messages that we send
set send_charset="utf-8"
# if there is no character set given on incoming messages, it is probably windows
set assumed_charset="iso-8859-1"
  
# make sure Vim knows Mutt is a mail client and that we compose an UTF-8 encoded message
set editor="vim -c 'set syntax=mail ft=mail enc=utf-8'"
  
# just scroll one line instead of full page
set menu_scroll=yes
  
# we want to see some MIME types inline, see below this code listing for explanation
auto_view application/msword
auto_view application/pdf
  
# make default search pattern to search in To, Cc and Subject
set simple_search="~f %s {{!}} ~C %s {{!}} ~s %s"
  
# threading preferences, sort by threads
set sort=threads
set strict_threads=yes
  
# show spam score (from SpamAssassin only) when reading a message
spam "X-Spam-Score: ([0-9\\.]+).*" "SA: %1"
set pager_format = " %C - %[%H:%M] %.20v, %s%* %?H? [%H] ?"
  
# do not show all headers, just a few
ignore          *
unignore        From To Cc Bcc Date Subject
# and in this order
unhdr_order     *
hdr_order       From: To: Cc: Bcc: Date: Subject:
  
# brighten up stuff with colours, for more colouring examples see:
# http://aperiodic.net/phil/configs/mutt/colors
color normal      white          black
color hdrdefault  green          default
color quoted      green          default
color quoted1     yellow         default
color quoted2     red            default
color signature   cyan           default
color indicator   brightyellow   red
color error       brightred      default
color status      brightwhite    blue
color tree        brightmagenta  black
color tilde       blue           default
color attachment  brightyellow   default
color markers     brightred      default
color message     white          black
color search      brightwhite    magenta
color bold        brightyellow   default
# if you don't like the black progress bar at the bottom of the screen,
# comment out the following line
color progress    white          black
  
# personality settings
set realname = "Andrew Dalziel"
set from = "andy@mail.server"
alternates "andrew@mail.server{{!}}andrew.dalziel@mail.server"
# this file must exist, and contains your signature, comment it out if
# you don't want a signature to be used
set signature = ~/.signature
  
# aliases (sort of address book)
source ~/.aliases
  
# IMAP connection settings
set mail_check=60
set imap_keepalive=300
  
# IMAP account settings
set folder=imaps://andy@imap.mail.server/
set spoolfile=imaps://andy@imap.mail.server/
set record=imaps://andy@imap.mail.server/Sent
set postponed=imaps://andy@imap.mail.server/Drafts
  
# use headercache for IMAP (make sure this is a directory for performance!)
set header_cache=/var/tmp/.mutt
  
# mailboxes we want to monitor for new mail
mailboxes "="
mailboxes "=Lists"
  
# mailing lists we are on (these are regexps!)
subscribe "gentoo-.*@gentoo\\.org"
  
# SMTP mailing configuration (for sending mail)
set smtp_url=smtp://mail.server/
}}
</div>

{{Note|It is good practice to review all settings from the examples configuration file above. There are many more configuration options, and some preferences may actually not match yours. Keep that in mind when you feel that Mutt at first doesn't really work the way you like.}}

The example {{Path|.muttrc}} above sets up an IMAP account, uses an SMTP server to send mail, stores its cache in {{Path|/var/tmp/.mutt}}, reads the known address aliases (think of it as an address book) from {{Path|~/.aliases}} and appends the signature from {{Path|~/.signature}} when composing new mail. For some IMAP servers it may be necessary to change the spool, record and postponed directories, as the folders {{Path|Sent}} and {{Path|Drafts}} may be under a folder called {{Path|INBOX}}. Simply trying this out with Mutt is the simplest way to figure this out. 

Once the {{Path|.muttrc}} is setup, you are ready to launch Mutt by just running {{c|mutt}}. If you entered a valid IMAP server URL, Mutt will prompt for a password and afterwards load all messages. Note that the first time entering your mailbox may take a while if you have quite some messages, since Mutt's header cache is still empty. If this succeeds you're in your IMAP mailbox ready to go. 

Navigation is intuitive, as is reading messages by just pressing the {{Key|Enter}} key or {{Key|Space}} bar. Mutt is quite Vim alike in that it uses key strokes to perform most of its actions. You best read Mutt's manual to become familiar with all existing functions (or press {{Key|?}} in Mutt) and what key they are bound to, or better, what key you like it to be bound to. Some essential keys are {{Key|m}} (for message) to start composing a new message, {{Key|q}} for quit, {{Key|r}} for reply, {{Key|s}} for save and {{Key|p}} for print. 

==== .mailcap ====

One of the features that Mutt has that is still not in today's most savvy email clients is the ability to display attachments inline through some viewer. The <code>auto_view</code> directive in the {{Path|.muttrc}} file tells Mutt which attachments (based on their MIME-type) it should view inline. To figure out how to do that, Mutt uses mailcap files to lookup how to display a certain MIME-type. Usually the system wide mailcap file isn't sufficient here, so you better start a {{Path|~/.mailcap}} file to put items in there for <code>copiousoutput</code> that Mutt can display inline. 

In the example {{Path|.muttrc}} above <code>auto_view</code> is enabled for <code>application/msword</code> and <code>application/pdf</code> files. These two show the extreme usefulness of this capability, because it means meeting notes sent as doc file now are perfectly fine readable without having to save the attachment and open it in LibreOffice. Instead the text just shows up in the message reader, that is, if you have a matching entry in your {{Path|~/.mailcap}} file.

{{FileBox|filename=~/.mailcap|title=Example .mailcap file|1=
application/msword; antiword '%s'; copiousoutput; description=Word Document;
nametemplate=%s.doc
application/pdf; pdftotext '%s' -; copiousoutput; description=PDF Document;
nametemplate=%s.pdf
}}

The above {{Path|.mailcap}} example tells Mutt what to do to "view" <code>msword</code> and <code>pdf</code> files. For the former it should run a program called {{c|antiword}} (emerge <code>app-text/antiword</code>), for the latter the program {{c|pdftotext}} ({{c|emerge app-text/poppler}}). You can go wild with these to for example display rendered HTML (give {{Package|app-text/vilistextum}} a try), render vcards, or show ASCII representation of attached images. All you need to do is define how to call the program in your {{Path|.mailcap}}, and tell Mutt to try to view it inline using the <code>auto_view</code> directive.

== 总结 ==

Mutt is a very versatile console email client. If you like the concept, Mutt can be altered to behave in nearly any way through its configuration. Search the web to find others explaining how they did "it", or find one of the many patches that exist to make Mutt do even more. Gentoo applies a couple of very popular patches to Mutt, so make sure to check {{c|mutt -v}} if you want something more to make sure it is not yet already at your disposal. While learning Mutt is not necessarily easy, once it is in your fingers, it can make your mail experience much faster and efficient than with other clients. Searching for example is quite powerful if you know how to hit the right flags and know which regular expression narrows your search down. Enjoy Mutting! 


[[Category:Software]]
[[Category:Server and Security]] {{Migrated|originalauthors={{Dev|grobian}}}}
