{{InfoBox stack
|{{InfoBox homepage|http://projects.gnome.org/NetworkManager/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox gitweb|http://cgit.freedesktop.org/NetworkManager/NetworkManager/|raw=true}}
|{{InfoBox bugs|https://bugzilla.gnome.org/page.cgi?id{{=}}browse.html&product{{=}}NetworkManager}}
}}
'''NetworkManager''' is [[Article description::a [[network management|network management software]] for Ethernet, Wifi, DSL, dialup, VPN, [[WiMAX]], and mobile broadband network connections]].

{{Important|NetworkManager and other network management services typically do ''not'' work together. That includes a standalone instances of {{c|dhcpcd}} and Gentoo's default [[netifrc]] scripts. Be sure only ''one'' network management service is running at a time. Adding more than one network management service '''will lead to unpredictable results'''!}}

== Installation ==

NetworkManager requires an implementation of [[udev]] and [[D-Bus]]. On laptops and desktops, it is typically built with [[polkit]] to enable local users to configure it. It also optionally integrates with [[systemd]], [[upower]], [[ConsoleKit]] and others.

It is a good idea to use {{c|dhclient}} from {{Package|net-misc/dhcp}} instead of {{Package|net-misc/dhcpcd}} as 1.0.0 version is already doing. While dhcpcd in standalone mode provides some interesting features over dhclient, those will not be used by NetworkManager. Most NetworkManager developers do use dhclient and it is therefore much better tested with NetworkManager and is generally a better DHCP client to be used with NetworkManager. NetworkManager does not use the IPv6 support of dhcpcd and instead relies on dhclient for this.

Portage knows the global <code>networkmanager</code> USE flag for enabling support for NetworkManager in other packages. Enabling this USE flag will make those packages pull in {{Package|net-misc/networkmanager}} automatically:

{{RootCmd|euse -E networkmanager}}

=== Kernel ===

For Wifi devices enable also the following options:

{{KernelBox|1=
[*] Networking support  --->
      Networking options  --->
        <*> Packet socket
  [*] Wireless  --->
        <*>   cfg80211 - wireless configuration API
        [*]     cfg80211 wireless extensions compatibility
}}

Look at the [[udev]] page for kernel configuration needed for this NetworkManager dependency.

=== USE flags ===

{{USEflag|package=net-misc/networkmanager}}

=== Emerge ===

After changing use flags run the following command to update the system so the changes take effect:

{{Emerge|params+=--changed-use --deep|@world}}

To manually install NetworkManager, if not already pulled in automatically from above command:

{{Emerge|net-misc/networkmanager}}

=== Additonal software ===

==== Live ebuild (future 1.2 release) ====

NetworkManager is changing substantially and its feature set is slowly moving from a laptop oriented tool to a universal network management service configured using all sorts of tools from {{c|nmcli}} through {{c|nmtui}} to GUI tools like {{c|nm-applet}}, {{c|nm-connection-editor}}, Gnome Shell's network indicator, Gnome 3 control center, KDE's {{c|plasma-nm}}, and more.

The most convenient way is to add the [http://gpo.zugaina.org/Overlays/ixit ixit] overlay using [[Layman]].

{{RootCmd|layman -a ixit}}

Then you can install the desired NetworkManager release.

{{Emerge|--autounmask-write {{=}}net-misc/networkmanager-9999}}

If anything goes wrong, contact [[User:Pavlix]]. Those are live ebuilds and therefore they can occasionally need updating. I'm also considering starting a separate overlay just for networking related tools, let me know if that would help you.

==== VPN plugins ====

The following packages can be used to add VPN support to the base NetworkManager agent:

* {{Package|net-misc/networkmanager-openconnect}} - VPN connection using [[OpenConnect]]
* {{Package|net-misc/networkmanager-openswan}} - VPN connection using {{Package|net-misc/openswan}} or {{Package|net-misc/libreswan}}
* {{Package|net-misc/networkmanager-openvpn}} - VPN connection using OpenVPN server
* {{Package|net-misc/networkmanager-pptp}} - VPN connection to a PPTP server
* {{Package|net-misc/networkmanager-sstp}} - VPN connection to a SSTP server
* {{Package|net-misc/networkmanager-vpnc}} - VPN connection using {{Package|net-misc/vpnc}}

After emerging a plugin, it will be available when adding new connections to NetworkManager.

{{Note|Many, if not all, of these packages depend on both the {{Package|gnome-base/gnome-keyring}} and explicit enabling of the <code>gtk</code> USE flag. Additionally, they are usually not compatible with the terminal interface, {{c|nmtui}}, and must be launched via {{c|nm-applet}}.}}

==== Split DNS and DNSSEC support using unbound and dnssec-trigger ====

This doesn't yet work well with upstream releases nor in portage. But you can use [[Layman]] to
add the [http://gpo.zugaina.org/Overlays/ixit ixit] overlay and install {{Package|net-misc/networkmanager}}, {{Package|net-dns/dnssec-trigger}}, and {{Package|net-dns/unbound}} live ebuilds from there.

{{RootCmd|layman -a ixit}}

Now you can install the live ebuilds.

{{Emerge|--autounmask-write {{=}}net-misc/networkmanager-9999 {{=}}net-dns/dnssec-trigger-9999 {{=}}net-dns/unbound-9999}}

The main difference from simple DNSSEC support like in the dnsmasq plugin is that dnssec-trigger does its best to ensure that you get a working DNSSEC configuration even on your laptop roaming among third party networks with different capabilities as well as to allow you to still access local resources and that you can choose to work without DNSSEC when it cannot provide a working setup.

==== GTK GUIs ====

The systray applet is in {{Package|gnome-extra/nm-applet}} and works in classic Xembed based systrays. If a systray is not included as part of the desktop environment in use, a standalone systray like [[stalonetray]] can be installed. The connection editor GUI in the same package as the applet. Note that this package serves all sorts of [[desktop environment|desktop environments]] and panels with systrays but it is no longer used by [[Gnome]] which has its own implementations in [[Gnome Shell]] and [[Gnome Control Center]].

{{Emerge|gnome-extra/nm-applet}}

Also note that the current upstream version [https://bugzilla.gnome.org/show_bug.cgi?id=740574 doesn't support the appindicator API] and thus does not work in some systray implementations like those in current versions of [[KDE]] and [[Unity]] or the development versions of [[Enlightenment]].

==== KDE GUIs ====

* {{Package|kde-plasma/plasma-nm}} - KDE Plasma frontend.

== Configuration ==

On Gentoo, NetworkManager uses the plugdev group to specify which users can manage plugable devices. Be sure to substitute <code><user_name></code> in the command below for each user who should be permitted to manage network connections:

{{RootCmd|gpasswd -a <user_name> plugdev}}

=== Service ===

==== OpenRC ====

Remove any existing network management services (if activated).

For example, to remove any netifrc scripts from controlling network interfaces (assuming they are all in the default runlevel), issue the following command:

{{RootCmd|find /etc/runlevels/default -type l -name 'net.*' -exec sh -c 'for x; do rc-update del "${x##*/}" default; done' _ {} +}}

To remove {{c|dhcpcd}}:

{{RootCmd|rc-update del dhcpcd default}}

Start NetworkManager:

{{RootCmd|rc-service NetworkManager start}}

To start NetworkManager at boot time add it the default runlevel:

{{RootCmd|rc-update add NetworkManager default}}

==== systemd ====

To start NetworkManager now:

{{RootCmd|systemctl start NetworkManager}}

Enable NetworkManager to be started at boot time.

{{RootCmd|systemctl enable NetworkManager}}

With NetworkManager older than 0.9.10 or when you have services that order themselves after {{Path|network.service}} instead of {{Path|network-online.service}}, you may want to enable the {{Path|NetworkManager-wait-online.service}} for <code>multi-user.target</code>. Note that it extends the boot time even if you don't have any services that need to wait for network connections.

{{RootCmd|systemctl enable NetworkManager-wait-online.service}}

When writing your own systemd services, you can easily make them wait for NetworkManager to configure the boot time connections. With NetworkManager 0.9.10 and later it works even without explicitly enabling the network-online.service.

{{FileBox|filename=/etc/systemd/system/*.service|lang=ini|1=
[Unit]
After=network-online.service
Wants=network-online.service
}}

=== Setting a hostname ===

If NetworkManager was built with the <code>dhclient</code> USE flag enabled a hostname can be set using the following command:

{{FileBox|filename=/etc/dhcp/dhclient.conf|lang=bash|1=
send host-name "yourhostname";
}}

=== Checking connectivity ===

NetworkManager can try to reach a page on Internet when connecting to a network. For those behind a captive portal, the desktop manager can automatically open a window asking for credentials. It's automatically done since NetworkManager 1.8, but it has to be configured manually for earlier versions. To enable this feature, edit (or create) the {{Path|/etc/NetworkManager/NetworkManager.conf}} file to look something like this:

{{FileBox|filename=/etc/NetworkManager/NetworkManager.conf|lang=ini|1=
[connectivity]
uri=http://nmcheck.gnome.org/check_network_status.txt
}}

=== nm-applet and X session startup ===

To be able to get {{c|nm-applet}} started when starting a light X session or light desktop environment, just put the following line in the relevant user's {{Path|~/.xinitrc}} file:

{{FileBox|filename=~/.xinitrc|lang=bash|1=
nm-applet &
}}

For {{Package|gnome-base/gnome-keyring}} support, add the following lines '''before''' the previous line. This will ease password management for GnuPG, ssh and Wifi:

{{FileBox|filename=~/.xinitrc|lang=bash|1=
# Ensure dbus is either already running, or safely start it
if [[ -z "${DBUS_SESSION_BUS_ADDRESS}" ]];
then
    eval $(dbus-launch --sh-syntax --exit-with-session)
fi

# Make the keyring daemon ready to communicate with nm-applet
export $(gnome-keyring-daemon --start --components=pkcs11,secrets,ssh,gpg)
}}

=== Dnsmasq ===

==== NetworkManager way ====

NetworkManager can be set up to use [[Dnsmasq]] as a local DNS server that passes the DNS queries on to your provider's DNS server. {{Path|/etc/resolv.conf}} will be set to point to 127.0.0.1, where dnsmasq runs and processes the queries. This can be useful for example if an application chroots for security reasons and before doing so copies {{Path|/etc/resolv.conf}}. Then it would never be informed about changes to the DNS servers as your laptop moves from Wifi to Wifi.

Setup of dnsmasq is simple:

{{FileBox|filename=/etc/NetworkManager/NetworkManager.conf|lang=bash|1=
[main]
plugins=keyfile
dns=dnsmasq
}}

[[Dnsmasq]] can be configured with files in {{Path|/etc/NetworkManager/dnsmasq.d}}, for more information see the wiki page or the man pages of [[Dnsmasq]].

Then restart NetworkManager.

===== DNSSEC =====

Dnsmasq can optionally validate DNSSEC data while passing through queries (must be compiled with the <code>dnssec</code> USE flag). This can be accomplished by adding these lines to the NetworkManager dnsmasq config file:

{{FileBox|filename=/etc/NetworkManager/dnsmasq.d/dnssec|lang=bash|1=
# DNSSEC setup
dnssec
trust-anchor=.,19036,8,2,49AAC11D7B6F6446702E54A1607371607A1A41855200FD2CE1CDDE32F24E8FB5
dnssec-check-unsigned
}}

The trusted anchor can be found [https://data.iana.org/root-anchors/root-anchors.xml here]. After this change dnsmasq will return SERVFAIL and no DNS data if the validation fails. If the validation succeeds it sets the Authenticated Data (AD) flag. In case the domain does not support DNSSEC dnsmasq behaves as before.

If your ISP's DNS server does not forward DNSSEC data then this will fail. In that case you can uncomment the last line, but it will defy the purpose of DNSSEC. Google's server 8.8.8.8 provides DNSSEC data.


==== Service way ====

Sometimes you don't want to have [[Dnsmasq]] controlled by NetworkManager for different reasons, here is another way you can use both together:
{{FileBox|filename=/etc/NetworkManager/NetworkManager.conf|lang=bash|1=
[main]
plugins=keyfile
dns=none
}}

And add localhost to your {{Path|/etc/resolv.conf}}:
{{FileBox|filename=/etc/resolv.conf|lang=bash|1=
# This should be the first nameserver entry in resolv.conf!
nameserver=127.0.0.1
}}

Set your [[Dnsmasq]] up, see man pages and the wiki page about [[Dnsmasq]] for details.

Don't forget to start [[Dnsmasq]]:
{{RootCmd|systemctl enable dnsmasq && systemctl start dnsmasq}}
or
{{RootCmd|rc-update add dnsmasq default && /etc/init.d/dnsmasq start}}

== Troubleshooting ==

=== Fixing nm-applet insufficient privileges ===

If {{c|nm-applet}} fails to create new networks with the error "Insufficient Privileges," then it could be a policy kit issue. 
Create the following file:

{{FileBox|filename=/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules|lang=javascript|1=
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("plugdev")) {
        return polkit.Result.YES;
    }
});
}}

This lets all users in the plugdev group control network manager.

=== Hostname problems ===

The standard "keyfile" plugin does not forward the hostname in default configuration - to avoid having it changed upon network connection, add the following section to your NetworkManager.conf and enter your hostname accordingly:

{{FileBox|filename=/etc/NetworkManager/NetworkManager.conf|lang=bash|1=
[keyfile]
hostname=your_hostname
}}

=== Connection sharing ===

Connection sharing is not working on an Ethernet connection when set to shared via {{c|nmtui}}.

Verify the <code>connection-sharing</code> USE flag has been enabled for {{Package|net-misc/networkmanager}}. This can quickly be performed using {{c|[[eix]]}}:

{{Cmd|eix net-misc/networkmanager}}

[[USE flag|Enable the USE flag]] if it is disabled (<code>-connection-sharing</code>), then reemerge the package:

{{Emerge|params+=--newuse --deep|net-misc/networkmanager}}

=== DHCPv6 Unique IDentifier (DUID) ===
The [https://en.wikipedia.org/wiki/DHCPv6#DHCP_Unique_Identifier DUID] will be generated by NetworkManager and stored as the first line in the following file:
{{FileBox|filename=/var/lib/NetworkManager/dhclient6-*.lease|lang=bash|1=
default-duid "\000\001\000\001\031\012D\036<\331+m3\004";
lease6 {
...
}}
{{Note|ISC dhclient6 stores the DUID_ value in a binary representation as shown}}

To generate a DUID NetworkManager relies on the following file, which is created by systemd. This should be unique to any system.
{{FileBox|filename=/etc/machine-id|lang=bash|1=
c69de11d6bb240558b98fb1d5e4292b3
}}

For non-systemd users, you can use the following command from lubko on #nm irc channel @freenode.net.
{{RootCmd|uuidgen &#124; sed 's/-//g' > /etc/machine-id}}

== External Links ==

* {{Bug|net-misc/networkmanager|search=package}}
* [https://bugzilla.gnome.org/buglist.cgi?query_format=advanced;order=Importance;bug_status=UNCONFIRMED;bug_status=NEW;bug_status=ASSIGNED;bug_status=REOPENED;bug_status=NEEDINFO;classification=Platform;product=NetworkManager GNOME bugtracker: known bugs]
* [https://live.gnome.org/NetworkManager/Debugging GNOME Wiki]
* [https://blogs.gnome.org/thaller/2016/08/26/mac-address-spoofing-in-networkmanager-1-4-0/ New features about mac address spoofing]
* [http://www.nurdletech.com/linux-notes/agents/keyring.html Additional keyring configuration detail by nurdletech]

[[Category:Network management]]
