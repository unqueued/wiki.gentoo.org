{{InfoBox stack
|{{InfoBox homepage|http://projects.gnome.org/NetworkManager/|header=true}}
|{{InfoBox wikipedia}}
}}
'''NetworkManager''' is a [[network management|network management software]] for Ethernet, Wifi, DSL, dialup, VPN, [[WiMAX]] and mobile broadband network connections.

{{Note|NetworkManager doesn't work together with other network management software. So disable all other managers.}}

== Installation ==

=== Prerequisites ===
NetworkManager uses [[udev]], [[D-Bus]] and [[polkit]], so set them up first.

NetworkManager uses the plugdev group, so add your user to plugdev.

{{RootCmd|gpasswd -a $USER plugdev}}

=== Kernel ===
You need to disable the following kernel options:
{{Kernel||<pre>
General setup  --->
    [ ] Enable deprecated sysfs features to support old userspace tools
</pre>}}

For Wifi devices enable also the following options:
{{Kernel||<pre>
[*] Networking support  --->
        Networking options  --->
        <*> Packet socket
    [*] Wireless  --->
        <*>   cfg80211 - wireless configuration API
        [*]     cfg80211 wireless extensions compatibility
</pre>}}

=== Software ===
Portage knows the global USE flag ''networkmanager'' for enabling support for NetworkManager in other packages. Enabling this USE flag will pull in {{Package|net-misc/networkmanager}} automatically:
{{File|/etc/portage/make.conf||<pre>
USE="... networkmanager ..."
</pre>}}
The USE flags of networkmanager are:
{{USEflag|package=net-misc/networkmanager
|avahi
|bluetooth+yes
|connection-sharing
|consolekit+yes
|dhclient
|dhcpcd+yes
|doc
|gnutls
|introspection+yes
|modemmanager
|nss+yes
|ppp+yes
|resolvconf
|vala
|wext+yes
|wimax
}}

After setting this you want to update your system so the changes take effect:
{{Emerge|params+=--changed-use --deep|@world}}

Also install a frontend:
* {{Package|gnome-extra/nm-applet}} - [[GNOME]] frontend
* {{Package|kde-misc/plasma-nm}} - [[KDE]] frontend
* {{Package|kde-misc/networkmanagement}} - [[KDE]] frontend
* '''nmcli''' (part of networkmanager) - command line frontend 

There are also some extensions:
* {{Package|net-misc/networkmanager-openconnect}} - VPN connection to a OpenConnect server
* {{Package|net-misc/networkmanager-openswan}} - VPN connection to a OpenSwan server
* {{Package|net-misc/networkmanager-openvpn}} - VPN connection to a OpenVPN server
* {{Package|net-misc/networkmanager-pptp}} - VPN connection to a PPTP server
* {{Package|net-misc/networkmanager-sstp}} - VPN connection to a SSTP server
* {{Package|net-misc/networkmanager-vpnc}} - VPN connection to a Cisco VPN concentrator

== Configuration ==

=== Boot service ===
==== OpenRC ====
You can now start NetworkManager:
{{RootCmd|/etc/init.d/NetworkManager start}}
To start NetworkManager at boot time, add it your default runlevel:
{{RootCmd|rc-update add NetworkManager default}}

Reload [[D-Bus]] so that the NetworkManager changes take effect:
{{RootCmd|/etc/init.d/dbus reload}}

Note that NetworkManager will not connect if other services are also managing connections.  So you need to remove them, if you have them installed.
{{RootCmd|for service in $(rc-update show default {{!}} grep 'net\.' {{!}} awk '{ print $1 }'); do rc-update del $service default; done}}
{{RootCmd|rc-update del dhcpcd default}}

==== Systemd ====
On a systemd-based install, you can start NetworkManager like soː
{{RootCmd|systemctl start NetworkManager}}

To start it at boot timeː
{{RootCmd|systemctl enable NetworkManager}}

=== Setting a hostname ===

If you built NetworkManager with USE=dhclient, you can set a hostname like this:

{{file|/etc/dhcp/dhclient.conf||<pre>
send host-name "yourhostname";
</pre>}}

=== nm-applet and X session startup ===
To be able to get nm-applet started when starting your light X session or light [[desktop environment]], just put the following line in your {{Path|~/.xinitrc}} file:
{{File|~/.xinitrc||<pre>
dbus-launch nm-applet &
</pre>}}

For {{Package|gnome-base/gnome-keyring}} support, add the following lines before the previous line. This will ease password management for GnuPG, ssh and Wifi:
{{File|~/.xinitrc||<pre>
eval $(gnome-keyring-daemon --components=pkcs11,secrets,ssh,gpg)
export GNOME_KEYRING_PID
export GNOME_KEYRING_SOCKET
export SSH_AUTH_SOCK
export GPG_AGENT_INFO
</pre>}}

=== Dnsmasq ===
NetworkManager can be set up to use [[Dnsmasq]] as a local DNS server that passes the DNS queries on to your provider's DNS server. /etc/resolv.conf will be set to point to 127.0.0.1, where dnsmasq runs and processes the queries. This can be useful for example if an application chroots for security reasons and before doing so copies /etc/resolv.conf. Then it would never be informed about changes to the DNS servers as your laptop moves from Wifi to Wifi.

Setup of dnsmasq is simple:
{{File|/etc/NetworkManager/NetworkManager.conf||<pre>
[main]
plugins=keyfile
dns=dnsmasq
</pre>}}

Then restart NetworkManager.

'''DNSSEC'''

Dnsmasq can optionally validate DNSSEC data while passing through queries. This can be accomplished by adding these lines to the NetworkManager dnsmasq config file:

{{File|/etc/NetworkManager/dnsmasq.d/dnssec||<pre>
# DNSSEC setup
dnssec
trust-anchor=.,19036,8,2,49AAC11D7B6F6446702E54A1607371607A1A41855200FD2CE1CDDE32F24E8FB5
dnssec-check-unsigned
</pre>}}

The trusted anchor can be found [https://data.iana.org/root-anchors/root-anchors.xml here]. After this change dnsmasq will return SERVFAIL and no DNS data if the validation fails. If the validation succeeds it sets the ad flag. In case the domain does not support DNSSEC dnsmasq behaves as before.

== Troubleshotting ==
* {{Bug|net-misc/networkmanager|search=package}}
* [https://bugzilla.gnome.org/buglist.cgi?query_format=advanced;order=Importance;bug_status=UNCONFIRMED;bug_status=NEW;bug_status=ASSIGNED;bug_status=REOPENED;bug_status=NEEDINFO;classification=Platform;product=NetworkManager GNOME bugtracker: known bugs]
* [https://live.gnome.org/NetworkManager/Debugging GNOME Wiki]

[[Category:Network management]]
