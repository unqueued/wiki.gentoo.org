<languages />

{{Metadata|abstract=Данный документ объясняет, как изменить переменную CHOST на существующей системе.}}

Данный документ объясняет, как изменить переменную  <var>[[CHOST]]</var> на существующей системе.

== Введение ==

Изменение <var>CHOST</var> может доставить много «головной боли» и серьезно испортить систему. Зачем тогда нужно данное руководство, если это может привести к хаосу? 

There are certain situations where changing the <var>CHOST</var> variable is inevitable, e.g. when upgrading to glibc 2.4 which only supports [[wikipedia:Native_POSIX_Thread_Library|NTPL]] and the user finds out that the current <var>CHOST</var> is i386, which makes it impossible to use NTPL. In this case, there are not a lot of options, and changing <var>CHOST</var> is one of them. 

Проблемы могут возникнуть, даже после выполнения этих инструкций, так что, пожалуйста, внимательно читайте и очень тщательно выполняйте их. В данном примере переменная <var>CHOST</var> изменится с i386 на i686. Пожалуйста, скорректируйте команды в соответствии с конкретной ситуацией.

== Изменение переменной CHOST ==

=== Updating make.conf ===

To start out with the <var>CHOST</var> variable change, edit the {{Path|/etc/portage/make.conf}} file and add/change the <var>CHOST</var> value to suit the requirements.

{{FileBox|filename=/etc/portage/make.conf|1=
CHOST="i686-pc-linux-gnu"
}}

Please note that if you are planning to use another value of CHOST than the profile default, you may need to update the ''CHOST_${ABI}'' variable as well. You can query the current value of these variable via ''portageq'' tool:

{{Cmd|1=portageq envvar ABI|output=x86}}
{{Cmd|1=portageq envvar CHOST_x86|output=i686-pc-linux-gnu}}

If this value is equal to your CHOST, you're good. Otherwise, you should override it as well, e.g.:

{{FileBox|filename=/etc/portage/make.conf|1=
CHOST_x86="i686-pc-linux-gnu"
}}

=== Собираем пакеты ===

{{Important|It is generally a good idea to rebuild the packages '''to the same versions''' as before the CHOST switch, i.e. avoiding combining upgrades with it. If you have multiple slots installed, either uninstall extraneous slots or rebuild all of them. If you can't do that, please upgrade the packages first (with old CHOST). While it may not be impossible to do so, it is hard to predict which potential problems may arise and almost impossible to document them in this guide.}}

{{Tip|On a system with <var>CHOST</var> set to an i386 value, mask glibc 2.4 (or newer) during the gcc upgrade as it cannot be used with i386. Unmask it once the change has been performed completely.}}

Rebuild the following packages in this order:

{{Emerge|sys-devel/binutils|params+=--oneshot}}

{{Note|Перед компиляцией gcc может понадобиться запустить {{c|binutils-config}}.}}

{{Emerge|sys-devel/gcc|params+=--oneshot}}
{{Emerge|sys-libs/glibc|params+=--oneshot}}

=== Проверяем, что всё работает ===

Пришло время проверить, что настройки {{c|gcc-config}} и {{c|binutils-config}} в порядке, и что нет никакого «мусора» в {{Path|/etc/env.d/}}. 

Вывод {{c|gcc-config}} и {{c|binutils-config}} должен выглядеть следующим образом:

{{Note|Вывод скорее всего будет отличаться в зависимости от версии gcc и настроек <var>CHOST</var>. В примере ниже используется gcc 4.1.1 на i686.}} 

{{RootCmd|gcc-config -l|output=<pre>
 [1] i686-pc-linux-gnu-4.1.1 *</pre>}}

{{RootCmd|gcc-config -c|output=<pre>
i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|binutils-config -l|output=<pre>
 [1] i686-pc-linux-gnu-2.16.1 *
# binutils-config -c
i686-pc-linux-gnu-2.16.1
</pre>
}}

Теперь проверим, остались ли ссылки на старую переменную <var>CHOST</var> в {{Path|/etc/env.d/}}: 

{{RootCmd|cd /etc/env.d/
|grep 386 *|output=<pre>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>
}}

{{Note|Обычно этого может не произойти, но в рассматриваемом примере файл {{Path|05gcc-i386-pc-linux-gnu}} содержит ссылку на старое значение <var>CHOST</var>. Ситуация может выглядеть иначе на других системах, в зависимости от того, с какого и на какое значение меняется <var>CHOST</var>. В некоторых случаях не остается никаких упоминаний. Имя файла также может быть {{Path|05gcc-''new_CHOST''-pc-linux-gnu}}.}}

Перед удалением файла проверьте файлы с новым <var>CHOST</var>: 

{{RootCmd|grep 686 *|output=<pre>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>
}}

Всё выглядит хорошо, так как для <code>gcc</code> всегда должен быть только один файл в {{Path|/etc/env.d/}} (в этом примере {{Path|05gcc}}), так что удалим файл с ошибочной ссылкой: 

{{RootCmd|rm 05gcc-i386-pc-linux-gnu}}

Аналогично поступим с файлами {{Path|binutils}}: если существует больше одного файла, смотрите, какой является устаревшим и удалите его. Далее, проверьте содержимое {{Path|/etc/env.d/binutils/}}.

{{RootCmd|cd /etc/env.d/binutils/
|ls -la|output=<pre>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1
</pre>}}

{{RootCmd|cat config-i686-pc-linux-gnu|output=<pre>
CURRENT=2.16.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-2.16.1|output=<pre>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>
}}

Всё хорошо, эти два файла и должны быть тут. Пришло время заглянуть в каталог {{Path|gcc/}}. 

{{RootCmd|cd /etc/env.d/gcc|output=<pre>
# ls -la
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1
</pre>}}

{{RootCmd|cat config|output=<pre>
CURRENT=i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat config-i386-pc-linux-gnu|output=<pre>
CURRENT=i386-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-4.1.1|output=<pre>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>
}}

Файлы {{Path|config}} и {{Path|i686-pc-linux-gnu-4.1.1}} в порядке, а {{Path|config-i386-pc-linux-gnu}} — «мусор», который нужно удалить. 

{{Note|Опять же файл, содержащий ссылку на старую версию gcc, может иметь другое имя (например, {{Path|config-i686-pc-linux-gnu}}) даже в случае, когда система меняется (в данном случае) на <var>CHOST</var> i686. Важно различать файлы по содержимому, а не только по имени.}}

{{RootCmd|rm config-i386-pc-linux-gnu}}

Теперь запустите следующую команду для обновления переменных среды: 

{{RootCmd|env-update && source /etc/profile}}

Далее проверим, что всё в порядке: 

{{RootCmd|grep -r 386 /etc/env.d/}}

Если все еще находятся файлы, попробуйте отследить их, прежде чем продолжить.

=== Завершение изменений ===

Теперь нужно пересобрать {{Package|sys-devel/libtool}} и запустить {{c|fix_libtool_files.sh}}, который можно найти в {{Path|/usr/share/gcc-data/''$CHOST''/''<gcc-version>''/}}. Убедитесь, что указали правильную версию gcc (текущую выбранную, здесь 4.1.1) и передали старую архитектуру (здесь i386) в качестве аргумента. Замените <code>$CHOST</code> новым значением переменной <var>CHOST</var>, а <code><gcc-version></code> версией gcc. Следующий пример подразумевает <var>CHOST</var> значение i686. 

{{Emerge|libtool|params+=--oneshot}}

{{RootCmd|/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu}}

Теперь можно пересобрать все пакеты: 

{{Emerge|params+=--emptytree|@world}}

In theory, it should not be necessary to do so, but it cannot be 100% guaranteed that this is actually the case. Alternatively, you can manually rebuild all the known problematic packages:
* multilib packages using CHOST prefixing or header wrapping,
* Perl, Python and other tools that store configured compiler path.

{{Emerge|params+=--oneshot|/usr/bin/i386-pc-linux-gnu-* /usr/include/i386-pc-linux-gnu /usr/lib/llvm/*/bin/i386-pc-linux-gnu-* dev-lang/perl dev-lang/python}}

Note that you may need to remove paths that do not apply to your system from the above invocation.

Если обнаружили пакет, который также требует пересборки, то, пожалуйста, сообщите нам на [[Talk:Changing_the_CHOST_variable|странице обсуждения]] этого руководства.

=== Известные проблемы ===

При обновлении с gcc 3.3 до 4.1 одновременно с изменением переменной <var>CHOST</var> (и всё же, пожалуйста, не делайте этого), пара пользователей сообщала о «битых» пакетах, которые нуждаются в пересборке, таких как  {{Package|sys-apps/groff}} и {{Package|mail-mta/courier}}: 

{{CodeBox|title=Сообщение об ошибке|1=
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
}}

Это происходит, поскольку процессе обновления <var>CHOST</var> не соответствует <var>CTARGET</var>, из-за чего компилятор считает что в системе используется кросс-компиляция. Как следствие, <var>LDPATH</var> не вносится в {{Path|ld.so.conf}}, что приводит к ошибке. 

Пожалуйста, обратитесь к [[Upgrading_GCC/ru|руководству по обновлению GCC]], чтобы узнать какие пакеты нуждаются в пересборке после обновления GCC. 

В некоторый редких случаях, могут также «сломаться» старые версии python. Это можно исправить, добавив {{Path|/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6}} (измените в соответствии со старым <var>CHOST</var> и версией gcc) в {{Path|/etc/ld.so.conf}}, запустите {{c|ldconfig}} и, затем, {{c|emerge libstdc++-v3}}. Однако, как можно увидеть, этих проблем определённо стоит избегать — не изменяйте <var>CHOST</var> и версию gcc одновременно.

=== Обратная связь ===

На этом, должно быть, всё. Отзывы (как в случае, если это сработало, так и в случае неудачи или неожиданных проблем) приветствуются: пожалуйста, используйте [[Talk:Changing_the_CHOST_variable|страницу обсуждения]] или сообщите [https://forums.gentoo.org/viewtopic-t-494147.html в этом треде форума]. Многое в этом руководстве сделано участником vapier, спасибо за помощь!

{{Migrated|originalauthors=Wernfried Haas, {{Dev|vapier}}, Chris White}}
