<languages />

{{Metadata|abstract=Данный документ объясняет, как изменить переменную CHOST на существующей системе.}}

Данный документ объясняет, как изменить переменную  [[CHOST]] на существующей системе.

== Введение ==

Изменение CHOST может доставить много «головной боли» и серьезно испортить вашу систему. Зачем тогда нужно данное руководство? 

Существуют ситуации, когда изменение CHOST необходимо. К примеру, вы хотите обновить библиотеку glibc до версии 2.4, которая поддерживает nptl, но в CHOST — i386, что делает использование nptl невозможным. В данном случае у вас не так уж и много возможностей, и изменение CHOST — это одна из них. 

Проблемы могут возникнуть, даже если следовать этим инструкциям, так что, пожалуйста, внимательно читайте и очень тщательно выполняйте их. В данном примере мы изменим CHOST с i386 на i686. Если вы делаете другое изменение, то, пожалуйста, скорректируйте команды соответствующим образом. 

== Изменение переменной CHOST ==

=== Собираем пакеты ===

Сначала отредактируйте файл {{Path|/etc/portage/make.conf}}, изменив значение '''CHOST''' на то, которое вам необходимо. Затем пересоберите пакеты в данном порядке: 

{{Emerge|binutils gcc glibc}}

{{Important/ru|Пожалуйста, имейте в виду, что мажорное обновление gcc во время изменения CHOST (например, с gcc 3.3, CHOST i386 на gcc 4.1, CHOST i686) может привести к серьёзным побочным эффектам. Тяжело, хотя, наверное, и возможно, предсказать проблемы, которые могут возникнуть, и описть их в данном руководстве. Так что, пожалуйста, делайте одну вещь за раз. К примеру, сначала обновите gcc в соответствии с нашим [http://www.gentoo.org//doc/en/gcc-upgrading.xml руководством по обновлению gcc], а уже после этого меняйте CHOST. Если на вашей системе CHOST{{=}}i386, то вам нужно замаскировать версии 2.4 и новее библиотеки glibc до завершения обновления gcc (так как они не могут использоваться с i386) и размаскировать после.}}

=== Проверяем, что всё работает ===

Пришло время проверить, что настройки <code>gcc-config</code> и <code>binutils-config</code> в порядке, и никакого «мусора» в {{Path|/etc/env.d/}} не осталось. 

Вывод <code>gcc-config</code> и <code>binutils-config</code> должен выглядеть следующим образом (может отличаться в зависимости от вашей версии gcc и значения CHOST, здесь gcc 4.1.1 и i686): 

{{RootCmd|gcc-config -l|output=<pre>
 [1] i686-pc-linux-gnu-4.1.1 *</pre>}}

{{RootCmd|gcc-config -c|output=<pre>
i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|binutils-config -l|output=<pre>
 [1] i686-pc-linux-gnu-2.16.1 *
# binutils-config -c
i686-pc-linux-gnu-2.16.1
</pre>
}}

Теперь проверим, остались ли указания на старый CHOST в {{Path|/etc/env.d/}}: 

{{RootCmd|cd /etc/env.d/
|grep 386 *|output=<pre>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>
}}

{{Note/ru|В вашем случае этого может не произойти, но в рассматриваемом примере файл 05gcc-i386-pc-linux-gnu содержит указания на старый CHOST. Ситуация может выглядеть иначе на других системах (это зависимосит от того, с какого и на какое значение меняется CHOST) или даже быть идеальной. Имя файла также может быть 05gcc-ваш_новый_CHOST-pc-linux-gnu.}}

Перед удалением файла проверьте файлы с новым CHOST: 

{{RootCmd|grep 686 *|output=<pre>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>
}}

Всё выглядит хорошо, так как для <code>gcc</code> всегда должен быть только один файл в {{Path|/etc/env.d/}} (например, 05gcc), так что удалим файл с ошибочными указаниями: 

{{RootCmd|rm 05gcc-i386-pc-linux-gnu}}

Аналогично поступим с файлами <code>binutils</code>: если существует больше одного файла, смотрим, который является устаревшим и удаляем его. Далее, проверьте {{Path|/etc/env.d/binutils/}}.  

{{RootCmd|cd /etc/env.d/binutils/
|ls -la|output=<pre>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1
</pre>}}

{{RootCmd|cat config-i686-pc-linux-gnu|output=<pre>
CURRENT=2.16.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-2.16.1|output=<pre>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>
}}

Выглядит отлично, эти два файла и должны быть тут. Пришло время заглянуть в каталог gcc. 

{{RootCmd|cd /etc/env.d/gcc|output=<pre>
# ls -la
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1
</pre>}}

{{RootCmd|cat config|output=<pre>
CURRENT=i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat config-i386-pc-linux-gnu|output=<pre>
CURRENT=i386-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-4.1.1|output=<pre>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>
}}

Файлы {{Path|config}} и {{Path|i686-pc-linux-gnu-4.1.1}} в порядке, а {{Path|config-i386-pc-linux-gnu}} — «мусор», который нужно удалить. 

{{Note/ru|Повторим: файл, содержащий указания на старую версию gcc может иметь другое имя (например, config-i686-pc-linux-gnu) даже в случае, когда вы меняете CHOST на i686. Важно различать файлы по содержимому, а не только по имени.}}

{{RootCmd|rm config-i386-pc-linux-gnu}}

Теперь запустите следующую команду для обновления переменных среды: 

{{RootCmd|env-update && source /etc/profile}}

Проверим, что всё в порядке: 

{{RootCmd|grep -r 386 /etc/env.d/}}

Если что-то нашлось, значит вы пропустили какие-то файлы. Разберитесь с ними перед тем как продолжить. 

=== Завершение изменений ===

Теперь нужно пересобрать <code>libtool</code> и запустить {{Path|/usr/share/gcc-data/$CHOST/<gcc-version>/fix_libtool_files.sh}}. Убедитесь, что указали правильную версию gcc (текущую выбранную, здесь 4.1.1) и вашу старую архитектуру (здесь i386). Замените $CHOST новым значением переменной CHOST, а <gcc-version> вашей версией gcc. Следующий пример подразумевает CHOST{{=}}i686. 

{{Emerge|libtool}}

{{RootCmd|/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu}}

Если хотите, можете пересобрать все пакеты в системе: 

{{RootCmd|emerge -e world}}

Теперь всё сделано, теоретически. Но нет 100% гарантии, что так и будет. Если вы не пересобирали цель world, то вам нужно перекомпилировать как минимум следующий набор пакетов: 

{{Emerge|python}}

Все пакеты, использующие perl устанавливаются в каталог, связанный с CHOST, а значит, требуют пересборки. Если в системе не установлен <code>qfile</code>, установите сначала {{Package|app-portage/portage-utils}}. 

{{Emerge|portage-utils}}

{{RootCmd|emerge -av1 `qfile /usr/lib/perl* -Cq {{!}} sort -u`}}

Если вы обнаружили пакет, который также требует пересборки, то, пожалуйста, дайте знать автору этого документа.

=== Известные проблемы ===

При обновлении с gcc 3.3 до 4.1 одновременно с изменением CHOST (и всё же, пожалуйста, не делайте этого), пара пользователей сообщала о «битых» пакетах, которые нуждаются в пересборке, таких как groff и courier: 

{{Code|Error messsage|<pre>
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
</pre>
}}

Это происходит, поскольку процессе обновления CHOST не соответствует CTARGET, из-за чего компилятор выполняет кросс-компиляцию. Как следствие, LDPATH не вносится в {{Path|ld.so.conf}}, что приводит к ошибке. 

Please see our [[Upgrading GCC|GCC upgrade guide]] for what needs to be rebuilt after a GCC upgrade. 

In some rare cases, this can break old versions of python, too. This may be fixed by adding {{Path|/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6}} (change accordingly to your old chost and gcc version) to {{Path|/etc/ld.so.conf}} , running <code>ldconfig</code> and then <code>emerge libstdc++-v3</code> . However, as you can see, you really should avoid running into this problem - don't change CHOST and your gcc version at the same time.

=== Feedback ===

That should be all, feedback (both if it worked, failed or other problems were encountered) is welcome, please send an email to {{Mail|amne@gentoo.org}} or post to [https://forums.gentoo.org/viewtopic-t-494147.html this forums thread]. Much in this howto comes from vapier, thanks for your help!

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Wernfried Haas
* Mike Frysinger
* Chris White
