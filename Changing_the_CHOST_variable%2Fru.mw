<languages />

{{Metadata|abstract=Данный документ объясняет, как изменить переменную CHOST на существующей системе.}}

Данный документ объясняет, как изменить переменную  <var>[[CHOST]]</var> на существующей системе.

== Введение ==

Изменение <var>CHOST</var> может доставить много «головной боли» и серьезно испортить систему. Зачем тогда нужно данное руководство, если это может привести к хаосу? 

Существуют ситуации, когда изменение переменной <var>CHOST</var> необходимо, например, при обновлении библиотеки glibc до версии 2.4, которая поддерживает nptl, пользователь узнается, что текущий <var>CHOST</var> — это i386, что делает использование nptl невозможным. В данном случае не так уж и много возможностей, и изменение <var>CHOST</var> одна из них. 

Проблемы могут возникнуть, даже после выполнения этих инструкций, так что, пожалуйста, внимательно читайте и очень тщательно выполняйте их. В данном примере переменная <var>CHOST</var> изменится с i386 на i686. Пожалуйста, скорректируйте команды в соответствии с персональной ситуацией. 

== Изменение переменной CHOST ==

=== Собираем пакеты ===

Сначала изменим переменную <var>CHOST</var>. Отредактируйте файл {{Path|/etc/portage/make.conf}}, изменив значение <var>CHOST</var> на то, что необходимо. Затем пересоберите пакеты в следующем порядке: 

{{Emerge|binutils gcc glibc}}

{{Important|Please be aware that major gcc upgrades executed at the same time as changing the <var>CHOST</var> variable (e.g. starting with gcc 3.3, CHOST i386 and switching to gcc 4.1, CHOST i686) can lead to severe side effects. While it may not be impossible to do so, it is hard to predict which potential problems may arise and almost impossible to document them in this guide. As a consequence, please do one thing at a time, e.g. upgrade gcc first according to the [[Upgrading_GCC|gcc upgrade guide]] and change the <var>CHOST</var> afterwards. On a system with <var>CHOST</var> set to an i386 value, mask glibc 2.4 (or newer) during the gcc upgrade as it cannot be used with i386. Unmask it once the change has been performed completely.}}

{{Note|Перед компиляцией gcc может понадобиться запустить {{c|binutils-config}}.}}

=== Проверяем, что всё работает ===

Пришло время проверить, что настройки {{c|gcc-config}} и {{c|binutils-config}} в порядке, и что нет никакого «мусора» в {{Path|/etc/env.d/}}. 

Вывод {{c|gcc-config}} и {{c|binutils-config}} должен выглядеть следующим образом:

{{Note|Вывод скорее всего будет отличаться в зависимости от версии gcc и настроек <var>CHOST</var>. В примере ниже используется gcc 4.1.1 на i686.}} 

{{RootCmd|gcc-config -l|output=<pre>
 [1] i686-pc-linux-gnu-4.1.1 *</pre>}}

{{RootCmd|gcc-config -c|output=<pre>
i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|binutils-config -l|output=<pre>
 [1] i686-pc-linux-gnu-2.16.1 *
# binutils-config -c
i686-pc-linux-gnu-2.16.1
</pre>
}}

Теперь проверим, остались ли ссылки на старую переменную <var>CHOST</var> в {{Path|/etc/env.d/}}: 

{{RootCmd|cd /etc/env.d/
|grep 386 *|output=<pre>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>
}}

{{Note|This may not happen in every case, but in this case {{Path|05gcc-i386-pc-linux-gnu}} contains references to the old <var>CHOST</var> value. Things may look differently on each system depending on which <var>CHOST</var> value the system is changing to/from. In some cases, no references are left at all. The name may also be {{Path|05gcc-''new_CHOST''-pc-linux-gnu}}.}}

Перед удалением файла проверьте файлы с новым <var>CHOST</var>: 

{{RootCmd|grep 686 *|output=<pre>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>
}}

Всё выглядит хорошо, так как для <code>gcc</code> всегда должен быть только один файл в {{Path|/etc/env.d/}} (в этом примере {{Path|05gcc}}), так что удалим файл с ошибочной ссылкой: 

{{RootCmd|rm 05gcc-i386-pc-linux-gnu}}

Аналогично поступим с файлами {{Path|binutils}}: если существует больше одного файла, смотрите, какой является устаревшим и удалите его. Далее, проверьте содержимое {{Path|/etc/env.d/binutils/}}.

{{RootCmd|cd /etc/env.d/binutils/
|ls -la|output=<pre>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1
</pre>}}

{{RootCmd|cat config-i686-pc-linux-gnu|output=<pre>
CURRENT=2.16.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-2.16.1|output=<pre>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>
}}

That one looks good, those two files should be there. Time to move on to the {{Path|gcc/}} directory. 

{{RootCmd|cd /etc/env.d/gcc|output=<pre>
# ls -la
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1
</pre>}}

{{RootCmd|cat config|output=<pre>
CURRENT=i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat config-i386-pc-linux-gnu|output=<pre>
CURRENT=i386-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-4.1.1|output=<pre>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>
}}

Файлы {{Path|config}} и {{Path|i686-pc-linux-gnu-4.1.1}} в порядке, а {{Path|config-i386-pc-linux-gnu}} — «мусор», который нужно удалить. 

{{Note|Again, the name of the file containing references to an outdated gcc version may have a different name, e.g. {{Path|config-i686-pc-linux-gnu}} even though the system is being changed to (in this case) i686. It is important to identify the file on its content, not only the name.}}

{{RootCmd|rm config-i386-pc-linux-gnu}}

Now run the following commands to update the environment: 

{{RootCmd|env-update && source /etc/profile}}

Next, verify everything is fixed: 

{{RootCmd|grep -r 386 /etc/env.d/}}

If there are still files found, try to track it down before going on.

=== Завершение изменений ===

Now it is necessary to re-emerge {{Package|sys-devel/libtool}} and run {{c|fix_libtool_files.sh}} which can be found in {{Path|/usr/share/gcc-data/''$CHOST''/''<gcc-version>''/}}. Make sure to use the correct gcc version (the current one, 4.1.1 here) and pass the old architecture (i386 here) as argument. Replace <code>$CHOST</code> with the new <var>CHOST</var> value, and <code><gcc-version></code> with the gcc version. This example assumes a <var>CHOST</var> value applicable to i686. 

{{Emerge|libtool}}

{{RootCmd|/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu}}

It is now possible to rebuild all the packages: 

{{RootCmd|emerge -e world}}

In theory, it should not be necessary to do so, but it cannot be 100% guaranteed that this is actually the case.

Следующие пакеты должны быть пересобраны: 

{{Emerge|python}}

All packages using perl install to the <var>CHOST</var> directory and hence need rebuilding. In case {{c|qfile}} is not available on the system yet, install {{Package|app-portage/portage-utils}} first.

{{Emerge|portage-utils}}

Теперь пересоберите все пакеты, которые имеют файлы установленные в директориях {{Path|/usr/lib/perl*}}

{{RootCmd|emerge -av1 `qfile /usr/lib/perl* -Cq {{!}} sort -u`}}

When encountering other packages that need recompiling, please let us know through the [[{{TALKPAGENAME}}|discussion page]] of this guide.

=== Известные проблемы ===

When upgrading from gcc 3.3 to 4.1 at the same time as changing the <var>CHOST</var> variable (please don't do that anyway), a couple of users reported broken packages that need recompiling, such as {{Package|sys-apps/groff}} and {{Package|mail-mta/courier}}: 

{{CodeBox|title=Error messsage|1=
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
}}

This happens because during the upgrade, the <var>CHOST</var> variable doesn't exactly match the <var>CTARGET</var> variable value, making the compiler assume that the system is using cross-compiling. As a consequence, <var>LDPATH</var> isn't inserted into {{Path|ld.so.conf}}, resulting in this error. 

Please see the [[Upgrading GCC|GCC upgrade guide]] for what needs to be rebuilt after a GCC upgrade. 

In some rare cases, this can break old versions of python, too. This may be fixed by adding {{Path|/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6}} (change accordingly to the old <var>CHOST</var> and gcc version) to {{Path|/etc/ld.so.conf}}, running {{c|ldconfig}} and then {{c|emerge libstdc++-v3}}. However, as can be seen, this situation needs to be avoided - don't change <var>CHOST</var> and gcc at the same time.

=== Обратная связь ===

That should be all, feedback (both if it worked, failed or other problems were encountered) is welcome, please use the [[{{TALKPAGENAME}}|discussion page]] or post to [https://forums.gentoo.org/viewtopic-t-494147.html this forum thread]. Much in this guide comes from vapier, thanks for your help!


{{Migrated|originalauthors=Wernfried Haas, Mike Frysinger, Chris White}}
