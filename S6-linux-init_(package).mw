{{lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|https://www.skarnet.org/software/s6-linux-init|header=true}}
|{{InfoBox gitweb|raw=yes|text=Git repository browser|https://git.skarnet.org/cgi-bin/cgit.cgi/s6-linux-init}}
|{{InfoBox github|text=GitHub mirror|skarnet/s6-linux-init}}
|{{InfoBox package|sys-apps/s6-linux-init}}
}}

s6-linux-init is [[Article description::a package that provides a set of minimalistic tools to help create a [[s6 and s6-rc-based init system|s6-based init system]], with optional [[s6-rc]] support, on top of the Linux kernel]]. The package's documentation is provided in HTML format, and can be read on a text user interface using for example {{Package|www-client/links}}.

__TOC__

== Installation ==

=== USE flags ===

{{USEflag|package=sys-apps/s6-linux-init}}

=== Emerge ===

{{Emerge|sys-apps/s6-linux-init}}

{{Important|s6-linux-init is currently on the testing branch. Users with systems on the stable branch will need to add the package to {{Path|/etc/portage/package.accept_keywords}} (if using Portage) to be able to install it, and also add {{Package|dev-libs/skalibs}}, as well as its runtime dependencies: {{Package|dev-lang/execline}}, {{Package|sys-apps/s6}}, {{Package|sys-apps/s6-linux-utils}} and {{Package|sys-apps/s6-portable-utils}}. While it is generally not advised to mix packages of stable and testing branches, the skarnet.org software stack only depends on the libc, so in this case it should be safe.}}

== Configuration ==

=== Environment variables ===

* <var>UID</var> - The catch-all logger's user ID set by {{C|s6-linux-init-maker}} when invoked with the <code>-U</code> option.
* <var>GID</var> - The catch-all logger's group ID set by {{C|s6-linux-init-maker}} when invoked with the <code>-U</code> option.

=== Files ===

* {{Path|/etc/s6-linux-init/run-image}} - Default directory containing the generated stage1 script's scan directory and catch-all logger's logging directory images.
* {{Path|/etc/s6-linux-init/env}} - Default environment directory used by the generated stage1 script to set up the init system's supervision tree environment.
* {{Path|/etc/rc.init}} - Default pathname of the stage2 init expected by the generated stage1 script.
* {{Path|/etc/rc.shutdown}} - Default pathname of the shutdown file expected by the generated {{C|s6-svscan}} diverted signal handlers.
* {{Path|/run/service}} - Default scan directory set up by the generated stage1 script for {{C|s6-svscan}}.
* {{Path|/run/service/s6-svscan-log}} - Default pathname of the s6 service directory for the generated catch-all logger.
* {{Path|/run/service/s6-linux-init-early-getty}} - Default pathname of the s6 service directory for the generated early {{C|getty}} service.
* {{Path|/run/uncaught-logs}} - Default catch-all logger's logging directory.

== Usage ==

The package provides the {{C|s6-linux-init-maker}} program, which helps create several components of an s6-based init system, and the {{C|s6-halt}}, {{C|s6-poweroff}} and {{C|s6-reboot}} programs, which can shut the machine down if these init system components are used unmodified.

=== s6-linux-init-maker ===

The {{C|s6-linux-init-maker}} program must be run as root, so that it can create files and directories with appropriate owner, group and permissions, and must be invoked with a directory pathname. It creates a directory at with specified pathname, which must not exist beforehand, containing several init system components:

* An execline script named {{Path|init}}, that is a [[s6 and s6-rc-based init system#stage1|stage1 init]].
* A subdirectory named {{Path|run-image}}, which contains:
** An [[s6]] scan directory image.
** An empty directory named {{Path|uncaught-logs}}.
* A directory named {{Path|env}}, that might be empty.

To use these components to make an init system, they must be copied to the target machine —which might be the same as the host machine, i.e. the machine that {{C|s6-linux-init-maker}} was run on— in appropriate locations. The {{Path|init}} file must be copied to the place where the kernel is configured to find the program it'll run as process 1. For example, if the [[bootloader]] is configured to pass an <code>init=/sbin/s6-imkr-init</code> argument to the kernel, then the {{Path|init}} file generated by {{C|s6-linux-init-maker}} must be copied to {{Path|/sbin}} and renamed as {{Path|s6-imkr-init}}. The {{Path|run-image}} and {{Path|env}} directories must be copied to the location the {{Path|init}} script expects them to be. Care must be taken to ensure that owner, group and permissions of files and subdirectories are preserved, e.g. by using GNU or BusyBox {{C|cp}} with the <code>-a</code> option, or the {{C|s6-hiercopy}} program from s6-portable-utils ({{Package|sys-apps/s6-portable-utils}}).

{{C|s6-linux-init-maker}} accepts a set of options that customize all these components. Many of them use programs from packages s6-linux-utils ({{Package|sys-apps/s6-linux-utils}} and s6-portable-utils internally, so they are pulled in as runtime depencencies (<var>RDEPEND</var>). The only build-time dependency that {{C|s6-linux-init-maker}} needs itself is {{Package|dev-libs/skalibs}}.

Because execline scripts require the absolute path of the {{C|execlineb}} program in the shebang line (i.e. the first line of the file, that starts with '#!'), {{C|s6-linux-init-maker}} accepts a <code>-b</code> option to specify the path prefix for this program, and defaults it to {{Path|/bin}}. 

{{Note|The default {{C|execlineb}} pathname generated by {{C|s6-linux-init-maker}} matches that from Gentoo's {{Package|dev-lang/execline}} package.}}

The generated stage1 init and the {{C|s6-svscan}} [[#signals|diverted signal handlers]] need two files that must be supplied by the user to complete the init system: a [[s6 and s6-rc-based init system#stage2|stage2 init]], and a shutdown file that is shared by all signal handlers. This means that {{C|s6-linux-init-maker}} '''will not''' generate them, as they are higly system-dependent and subject to distribution policy, but generated components will expect them to be present. The package provides examples of both, they are the {{Path|/etc/rc.init}} and {{Path|/etc/rc.shutdown}} files, respectively, in the {{Path|example}} directory of the package's {{Path|/usr/share/doc}} subdirectory.

For the full description of {{C|s6-linux-init-maker}}, please consult the HTML documentation in the package's {{Path|/usr/share/doc}} subdirectory. A summary of each init system component and some of the options that customize it follows.
{{anchor|stage1}}
==== The stage1 script ====

This is an execline script that runs as process 1 during the machine's boot sequence and performs these actions:
* Sets the working directory to /.
* Sets the <var>PATH</var> environment variable to a specified or default value.
* Mounts a read-write tmpfs with options <code>mode=0755</code> using program {{C|s6-mount}} from s6-linux-utils.
* Copies the {{Path|run-image}} directory created by {{C|s6-linux-init-maker}} to the tmpfs, preserving owner, group and permissions of files and subdirectories, using program {{C|s6-hiercopy}} from s6-portable-utils.
* Optionally mounts a devtmpfs on {{Path|/dev}}, again using {{C|s6-mount}}.
* Optionally dumps the enviroment set up by the kernel to a specified enviroment store, using program {{C|s6-dumpenv}} from s6-portable-utils. The environment store is a directory that, for every environment variable <var>VAR</var>, contains a text file named {{Path|VAR}}. Each file has a single line containing the variable's value.
* Unsets all enviroment variables except <var>PATH</var>.
* Adjusts the enviroment according to the {{Path|env}} directory created by {{C|s6-linux-init-maker}}, using {{C|s6-envdir}} from s6.
* Spawns the [[#stage2|stage2 init]] as a session leader using {{C|s6-setsid}} from s6, with its standard input redirected to {{Path|/dev/null}}.
* Replaces itself with {{C|s6-svscan}}.

The stage1 script makes {{C|s6-svscan}} execute as process 1 [[s6#s6signaldivert|with signal diversion turned on]], periodic scanning turned off (<code>-t 0</code>), its standard input redirected to {{Path|/dev/null}}, and its standard output and error redirected to the catch-all logger.

Aspects of the stage1 script that can be customized via {{C|s6-linux-init-maker}} options are:

* The location of the {{Path|run-image}} and {{Path|env}} directories: <code>-c</code>. Default: {{Path|/etc/s6-linux-init}}.
* The pathname of the user-provided stage2 init: <code>-2</code>. Default: {{Path|/etc/rc.init}}.
* The mountpoint for the read-write tmpfs: <code>-l</code>. Default: {{Path|/run}}.
* The value the <var>PATH</var> environment variable is set to: <code>-p</code>. This value affects all programs invoked by the script, the stage2 init and {{C|s6-svscan}}, and will be the initial value of <var>PATH</var> for all the init system's supervision tree processes. Default: {{Path|/usr/bin:/bin}}.
* The value of the initial file umask for all the starting processes: <code>-m</code>. Default: '''022'''.
* Whether a devtmps filesystem is mounted on {{Path|/dev}} or not: <code>-d</code>. Default: {{Path|/dev}} is left untouched.
* The pathname of a read-write directory for storing the kernel's environment variables: <code>-s</code>. If no <code>-s</code> options is given, the environment set up by the kernel is discarded before the stage1 script replaces itself with {{C|s6-svscan}}.
* The initial environment of {{C|s6-svscan}}, and therefore, of all the init system's supervision tree processes: <code>-e</code>. {{C|s6-linux-init-maker}} constructs directory {{Path|env}} as an [[daemontools-encore#changingstate|environment directory]] with all the variable settings specified by repeated use of this option. The stage1 script expects this directory to be in the same directory as {{Path|run-image}}; therefore, its absolute pathname will be {{Path|/etc/s6-linux-init/env}} with {{C|s6-linux-init-maker}}'s defaults. If no <code>-e</code> options are given, {{C|s6-svscan}}'s environment only has the <var>PATH</var> variable, and {{Path|env}} will be empty.
{{anchor|stage2}}
==== The stage2 init ====

The stage2 init must be provided by the user, runs as a child process of the stage1 script, and blocks until {{C|s6-svscan}} starts running as process 1. If {{C|s6-linux-init-maker}} is passed an <code>-r</code> option ('redirect'), the stage1 script redirects the stage2 init's standard output and error to the catch-all logger, i.e. all messages will be logged in its logging directory. Otherwise, the stage2 init's standard output and error are redirected to {{Path|/dev/console}}.

==== The init system's scan directory ====

The scan directory image contains:

* An s6 service directory for the init system's [[#logger|catch-all logger]], named {{Path|s6-svscan-log}}.
* An optional s6 service directory for an ''early getty service'', named {{Path|s6-linux-init-early-getty}}.
* The {{Path|.s6-svscan}} subdirectory with {{Path|finish}} and {{Path|crash}} files, as well as {{C|s6-svscan}} [[#signals|diverted signal handlers]]. All of these files are execline scripts, and {{Path|.s6-svscan/finish}} is the init system's [[s6 and s6-rc-based init system#stage3|stage3 init]].

This scan directory image is copied to the tmpfs by [[#stage1|the stage1 script]], and becomes {{C|s6-svscan}}'s scan directory when it starts running as process 1.

{{C|s6-linux-init-maker}} accepts a <code>-G</code> option followed by a suitable invocation (program name and arguments) of some {{C|getty}} implementation, for example, <code>-G '/sbin/agetty 38400 tty1 linux'</code> for Gentoo. If this option is supplied, the early getty service directory contains a {{Path|run}} execline script with the specified {{C|getty}} invocation, which means that a (single) {{C|getty}} process will be spawned by {{C|s6-svscan}} as soon as it starts running as process 1. This allows logging in to the machine from its console as early as possible. If no <code>-G</code> option is given, there will be no early getty service, and any {{C|getty}} setup must be done by the user-provided stage2 init.
{{anchor|logger}}
==== The catch-all logger ====

The [[s6 and s6-rc-based init system#logger|catch-all logger]] is an {{C|s6-log}} process that logs to a logging directory named {{Path|uncaught-logs}}, and placed in the read-write tmpfs mounted by [[#stage1|the stage1 script]]. Therefore, its absolute pathname will be {{Path|/run/uncaught-logs}} with {{C|s6-linux-init-maker}}'s defaults. The standard output of the {{C|s6-log}} process are redirected to {{Path|/dev/null}}, and its standard error, to {{Path|/dev/console}}, i.e. the machine's console.

The {{Path|run}} file opens [[s6 and s6-rc-based init system#fifo|the logger's FIFO]] for reading, which is created by {{C|s6-linux-init-maker}} in the service directory with the name {{Path|fifo}}, uses {{C|s6-applyuidgid}} from s6 to set the effective user and group, and then invokes {{C|s6-log}} with the <code>-p</code> option, so that it cannot be killed by the <code>SIGTERM</code> signal.

{{C|s6-linux-init-maker}} creates the {{Path|run-image/uncaught-logs}} directory with an owner and group that match {{C|s6-log}}'s effective user and group, and the stage1 script copies it to the tmpfs.

Aspects of the catch-all logger that can be customized via {{C|s6-linux-init-maker}} options are:

* The {{C|s6-log}} process' effective user and group: <code>-u</code>, <code>-g</code> and <code>-U</code>. They can be specified as a numeric user ID (UID) and group ID (GID) valid for the target machine with the <code>-u</code>, <code>-g</code> options, respectively, or read from environment variables <var>UID</var> and <var>GID</var>, respectively, if the <code>-U</code> option is used. This allows, for example the invocation of {{C|s6-linux-init-maker}} as <kbd>s6-envuidgid larry s6-linux-init-maker -U dir</kbd> to make {{C|s6-log}} run with effective user set to 'larry', as defined in the host machine's account database, assuming this is also appropriate for the target machine. If any of these options is specifed, {{C|s6-linux-init-maker}} creates the {{Path|run-image/uncaught-logs}} directory with permissions '''2700''' (i.e. it has set-group-ID on execution enabled and the <kbd>ls -l</kbd> command would show <code>drwx--S---</code>). Otherwise, {{C|s6-log}}'s effective user and group are those that correspond to UID 0 and GID 0, and {{C|s6-linux-init-maker}} creates the {{Path|run-image/uncaught-logs}} directory with permissions '''0700''' (i.e. the <kbd>ls -l</kbd> command would show <code>drwx------</code>). Therefore, on Gentoo, if no <code>-u</code>, <code>-g</code> and <code>-U</code> options are given, {{C|s6-log}} would run with effective user set to '''root'''.
* How logged lines of text are timestamped:  <code>-t</code>. Default: timestamps in [https://cr.yp.to/libtai/tai64.html external TAI64N format] are used, as generated by {{C|s6-log}}'s '''t''' directive.
{{anchor|signals}}
==== The diverted signal handlers ====

All {{C|s6-svscan}} [[s6 and s6-rc-based init system#signals|diverted signal handlers]] are execline scripts that invoke a common ''shutdown file'', wait for it to finish its execution, and then invoke the {{C|s6-svscanctl}} program to make {{C|s6-svscan}} perform its finish procedure, which tears down the init system's supervision tree and initiates execution of the [[#stage3|stage3 script]]. The shutdown file must be provided by the user, and runs with its standard input redirected to {{Path|/dev/null}}, and its standard output and error redirected to the catch-all logger.

The behaviour of the different signals sent to process 1 when these handlers are used is:
* <code>SIGHUP</code>: Makes {{C|s6-svscan}} send a <code>SIGHUP</code> signal to all its {{C|s6-supervise}} children before performing its finish procedure, using an <kbd>s6-svscanctl -h</kbd> command.
* <code>SIGQUIT</code>: Makes {{C|s6-svscan}} send a <code>SIGTERM</code> signal to all its {{C|s6-supervise}} children before performing its finish procedure, using an <kbd>s6-svscanctl -q</kbd> command.
* <code>SIGINT</code>: reboots the machine using an <kbd>s6-svscanctl -6</kbd> command. The operating system is usually configured to send a <code>SIGINT</code> to process 1 when key combination {{Key|Ctrl}}+{{Key|Alt}}+{{Key|Del}} is pressed, resulting in a machine reboot too.
* <code>SIGTERM</code>: currently equivalent to <code>SIGINT</code>.
* <code>SIGUSR1</code>: powers the machine off using an <kbd>s6-svscanctl -7</kbd> command.
* <code>SIGUSR2</code>: halts the machine using an <kbd>s6-svscanctl -0</kbd> command.

Aspects of the signal handlers that can be customized via {{C|s6-linux-init-maker}} options are:

* The pathname of the shutdown file: <code>-Z</code>. Default: {{Path|/etc/rc.shutdown}}.
{{anchor|stage3}}
==== The stage3 script ====

This is an execline script that runs as process 1 during the machine's shutdown sequence, and performs these actions:
* Sets the working directory to /.
* Redirects its standard output and error to {{Path|/dev/console}}, i.e. the machine's console.
* Uses an <kbd>s6-svc -X</kbd> command to [[s6 and s6-rc-based init system#stoplogger|make the catch-all logger exit]].
* Syncs all disks, flushing all the dirty system buffers, using program {{C|s6-sync}} from s6-portable-utils.
* Sends a <code>SIGTERM</code> signal and <code>SIGHUP</code> signal to all remaining processes, to allow them to exit on their own, using program {{C|s6-nuke}} from s6-portable-utils.
* After a grace period, sends a <code>SIGKILL</code> signal to all remaining processes to kill them, again using {{C|s6-nuke}}.
* Unmounts all filesystems according to {{Path|/proc/mounts}} using program {{C|s6-umount}} from s6-linux-utils.
* Remounts the root filesystem read-only using program {{C|s6-mount}} from s6-linux-utils.
* Invokes the {{C|s6-halt}}, {{C|s6-poweroff}} or {{C|s6-reboot}} program with the <code>-f</code> option to shut the machine down.

Aspects of the stage3 script that can be customized via {{C|s6-linux-init-maker}} options are:

* Grace period given to remaining processes after tearing down the supervision tree: <code>-q</code>. Default: 2 seconds.

==== s6-rc support ====

All the necessary setup needed to make s6-rc [[s6-rc#initsystem|part of the init system]] is done in the [[#stage2|stage2 init]] and in [[#signals|the shutdown file]]. Because both files are provided by the user, the s6-linux-init does not have, or need, any specific support for s6-rc. Nevertheless, the {{Path|/etc/rc.init}} and {{Path|/etc/rc.shutdown}} execline scripts provided by the package as examples illustrate an s6-rc setup.

=== s6-halt, s6-poweroff and s6-reboot ===

These programs can be used in combination with the init system components generated by {{C|s6-linux-init-maker}} to shut the machine down: {{C|s6-halt}} to halt it, {{C|s6-poweroff}} to power it off, and {{C|s6-reboot}} to reboot it.

These programs support an <code>-f</code> ('force') option, just like their sysvinit counterparts ({{Package|sys-apps/sysvinit}}), to perform their respective action without going through the init system (using the Linux <code>reboot()</code> system call). Otherwise, they just send a signal to process 1 that corresponds to the diverted signal handler generated by {{C|s6-linux-init-maker}} for the requested shutdown operation.

For further information about these programs, please consult the HTML documentation in the package's {{Path|/usr/share/doc}} subdirectory.

== Removal ==

=== Unmerge ===

{{Unmerge|sys-apps/s6-linux-init
}}

If the init system relies on {{C|s6-halt}}, {{C|s6-poweroff}} and {{C|s6-reboot}}, this can render it non-functional unless the machine has replacements with equivalent functionality.

== See also ==

* {{See also|S6 and s6-rc-based init system}}

[[Category:Init systems]]
