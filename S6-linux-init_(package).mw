{{lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|https://www.skarnet.org/software/s6-linux-init|header=true}}
|{{InfoBox gitweb|raw=yes|text=Git repository browser|https://git.skarnet.org/cgi-bin/cgit.cgi/s6-linux-init}}
|{{InfoBox github|text=GitHub mirror|skarnet/s6-linux-init}}
|{{InfoBox package|sys-apps/s6-linux-init}}
}}

s6-linux-init is [[Article description::a package that provides a set of tools to help create an [[s6 and s6-rc-based init system|s6-based init system]], with optional [[s6-rc]] support, on top of the Linux kernel]]. The package's documentation is provided in HTML format, and can be read on a text user interface using for example {{Package|www-client/links}}.

== Installation ==

=== USE flags ===

{{USEflag|package=sys-apps/s6-linux-init}}

{{Important|The <code>sysv-utils</code> USE flag is set by default for this package, causing a blocker with [[sysvinit]]. Because s6-based init systems are not officially supported by Gentoo yet, it is recommended to unset this flag in [[:/etc/portage/package.use]].}}

=== Emerge ===

{{Emerge|sys-apps/s6-linux-init}}

{{Important|s6-linux-init is currently on the testing branch. Users with systems on the stable branch will need to add the package to {{Path|/etc/portage/package.accept_keywords}} (if using Portage) to be able to install it, and also add {{Package|dev-libs/skalibs}}, as well as its runtime dependencies: {{Package|dev-lang/execline}}, {{Package|sys-apps/s6}} and, for the 0.4.x.x series of s6-linux-init, {{Package|sys-apps/s6-linux-utils}} and {{Package|sys-apps/s6-portable-utils}}. While it is generally not advised to mix packages of stable and testing branches, the skarnet.org software stack only depends on the libc, so in this case it should be safe.}}

== Configuration ==

=== Environment variables ===

* <var>UID</var> — For the 0.4.x.x series of s6-linux-init, the numeric user ID of the catch-all logger's effective user set by {{C|s6-linux-init-maker}} when invoked with the <code>-U</code> option.
* <var>GID</var> — For the 0.4.x.x series of s6-linux-init, the numeric group ID of the catch-all logger's effective group set by {{C|s6-linux-init-maker}} when invoked with the <code>-U</code> option.

=== Files ===

* {{Path|/etc/s6-linux-init/current/scripts/rc.init}} — For s6-linux-init-1.0.0.0 and later, default stage2 init expected by {{C|s6-linux-init}}.
* {{Path|/etc/s6-linux-init/current/scripts/rc.shutdown}} — For s6-linux-init-1.0.0.0 and later, default shutdown file expected by {{C|s6-linux-init-shutdownd}}.
* {{Path|/etc/s6-linux-init/current/scripts/runlevel}} — For s6-linux-init-1.0.0.0 and later, default runlevel changer script expected by {{C|s6-linux-init-telinit}}.
* {{Path|/etc/s6-linux-init/current/env}} — For s6-linux-init-1.0.0.0 and later, default environment directory used by {{C|s6-linux-init}} to set up the init system's supervision tree environment.
* {{Path|/etc/s6-linux-init/current/run-image}} — For s6-linux-init-1.0.0.0 and later, default run image containing the init system's initial scan directory and catch-all logger's logging directory images.
* {{Path|/etc/s6-linux-init/env}} — For the 0.4.x.x series of s6-linux-init, default environment directory used by the generated stage1 script to set up the init system's supervision tree environment.
* {{Path|/etc/s6-linux-init/run-image}} — For the 0.4.x.x series of s6-linux-init, default run image containing the init system's initial scan directory and catch-all logger's logging directory images.
* {{Path|/etc/rc.init}} — For the 0.4.x.x series of s6-linux-init, default stage2 init expected by the generated stage1 script.
* {{Path|/etc/rc.shutdown}} — For the 0.4.x.x series of s6-linux-init, default shutdown file expected by the generated {{C|s6-svscan}} diverted signal handlers.
* {{Path|/etc/shutdown.allow}} — For s6-linux-init-1.0.0.0 and later, list of account names used by {{C|s6-linux-init-shutdown}} when invoked with an <code>-a</code> option, to decide whether the machine shutdown request should be allowed to proceed or not.
* {{Path|/run/service}} — The init system's default scan directory.
* {{Path|/run/uncaught-logs}} — The init system's catch-all logger's default logging directory.

== Usage ==

The package provides the {{C|s6-linux-init-maker}} program, which helps create several components of an s6-based init system, programs for shutting the machine down when the generated init system components are used, and support programs. Version 1.0.0.0 and later also provides tools for implementing runlevel-like functionality similar to that of [[sysvinit#runlevels|sysvinit]].

=== s6-linux-init-maker ===

The {{C|s6-linux-init-maker}} program must be run as root, so that it can create files and directories with appropriate owner, group and permissions, and must be invoked with a pathname as its argument. It creates a directory at the specified pathname, which must not exist beforehand, containing several init system components:

* For the 0.4.x.x series of s6-linux-init, an execline script named {{Path|init}}, that is a [[s6 and s6-rc-based init system#stage1|stage1 init]]. For s6-linux-init-1.0.0.0 and later, the directory does not contain the {{Path|init}} script; instead, the package provides a program, also named {{C|s6-linux-init}}, that is used as the stage1 init.
* A subdirectory named {{Path|run-image}}, which contains:
** An [[s6]] scan directory image.
** An empty directory named {{Path|uncaught-logs}}.
* A subdirectory named {{Path|env}}, that might be empty.
* For s6-linux-init-1.0.0.0 and later, a subdirectory named {{Path|scripts}}, containing shell scripts named {{Path|rc.init}}, {{Path|rc.shutdown}} and {{Path|runlevel}}.
* For s6-linux-init-1.0.0.0 and later, a subdirectory named {{Path|bin}}, containing sysvinit compatibility execline scripts.

To use these components to make an init system, they must be copied to appropriate filesystem locations. The {{Path|init}} script, which, for s6-linux-init-1.0.0.0 and later, is contained in the {{Path|bin}} subdirectory of the generated directory, must be copied to the place where the kernel is configured to find the program it'll run as process 1. For example, if the [[bootloader]] is configured to pass an <code>init=/sbin/s6-imkr-init</code> parameter to the kernel, then the {{Path|init}} file generated by {{C|s6-linux-init-maker}} must be copied to {{Path|/sbin}} and renamed as {{Path|s6-imkr-init}}. The {{Path|run-image}} and {{Path|env}} directories, and, for s6-linux-init-1.0.0.0 and later, the {{Path|scripts}} directory, must be copied to [[#stage1|the location the stage1 init expects them to be]]. For the sysvinit compatibility scripts, see [[#sysvinit|here]]. Care must be taken to ensure that owner, group and permissions of files and subdirectories are preserved when copied to their destination place, e.g. by using GNU or BusyBox {{C|cp}} with the <code>-a</code> option, or the {{C|s6-hiercopy}} program from s6-portable-utils ({{Package|sys-apps/s6-portable-utils}}).

{{C|s6-linux-init-maker}} accepts a set of options that customize all these components. For the 0.4.x.x series of s6-linux-init, many of them use programs from packages s6-linux-utils ({{Package|sys-apps/s6-linux-utils}}) and s6-portable-utils internally, so they are pulled in as runtime depencencies (<var>RDEPEND</var>). The only build-time dependency that {{C|s6-linux-init-maker}} needs itself is {{Package|dev-libs/skalibs}}. sys-apps/s6-linux-init-1.0.0.0 and later only depend on {{Package|sys-apps/s6}} and its dependencies.

The generated init system needs two files that must be supplied by the user to complete it: a ''stage2 init'' and a ''shutdown file'', that must be executable. For the 0.4.x.x series of s6-linux-init, the shutdown file is used by the generated [[#signals|{{C|s6-svscan}} diverted signal handlers]], and for s6-linux-init-1.0.0.0 and later, it is used by [[#shutdownd|the shutdown daemon]]. For s6-linux-init-1.0.0.0 and later, the generated init system also needs a third file that must also be supplied by the user, a ''runlevel changer script'' that is used by [[#runlevels|the {{C|s6-linux-init-telinit}} program]].

For the full description of {{C|s6-linux-init-maker}}, please consult the HTML documentation in the package's {{Path|/usr/share/doc}} subdirectory. A summary of each init system component and some of {{C|s6-linux-init-maker}}'s options that customize it follows.

{{anchor|stage1}}
==== The stage1 init ====

The init system's stage1 init runs as process 1 during the machine's boot sequence. The 0.4.x.x series of s6-linux-init creates it as an execline script named {{Path|init}}. For s6-linux-init-1.0.0.0 and later, it is a program supplied by the package, also named {{C|s6-linux-init}}, and {{C|s6-linux-init-maker}} creates a [[#sysvinit|compatibility script]] that just calls this program with suitable arguments.

In both cases, the stage1 init expects to access the contents of a certain ''base directory'', and performs these actions:
* It sets the <var>PATH</var> environment variable to a specified or default value.
* It sets the working directory to /.
* It sets the file mode creation mask to a specified or default value using a POSIX <code>umask()</code> call, via execline's {{C|umask}} program in the execline script case.
* It makes itself the leader of a new process group using a POSIX <code>setpgid(0, 0)</code> call, via an {{C|s6-setsid -b}} command in the execline script case.
* It mounts a read-write tmpfs with options <code>mode=0755</code>, using {{C|s6-mount}} from {{Package|sys-apps/s6-linux-utils}} in the execline script case. {{C|s6-linux-init}} also adds options <code>nodev</code> and <code>nosuid</code>, and unmounts any other filesystem that might be mounted on the tmpfs mountpoint. Additionally:
** If an <code>-n</code> option is passed to {{C|s6-linux-init}}, it assumes a tmpfs is already mounted, and remounts it with options <code>mode=0755</code>, <code>nodev</code>, <code>nosuid</code> and <code>remount</code>. This is useful when an initramfs is used that mounts the tmpfs itself and writes data to it that must be preserved.
** If an <code>-N</code> option is passed to {{C|s6-linux-init}}, it assumes a tmpfs is already mounted, and does nothing. This is useful when an initramfs is used and it remains as the (read-write) rootfs of the machine.
* Optionally, it mounts a devtmpfs on {{Path|/dev}}, again using {{C|s6-mount}} in the execline script case. {{C|s6-linux-init}} adds options <code>noexec</code> and <code>nosuid</code>.
* Optionally, it dumps the enviroment set up by the kernel to a specified ''enviroment store'', using {{C|s6-dumpenv}} from {{Package|sys-apps/s6-portable-utils}} in the execline script case. The environment store is [[daemontools-encore#changingstate|an environment directory]] suitable for {{C|s6-envdir}}.
* It copies the {{Path|run-image}} subdirectory of the base directory to the tmpfs, preserving owner, group and permissions of files and subdirectories, using program {{C|s6-hiercopy}} from s6-portable-utils in the execline script case.
* It unsets all enviroment variables except <var>PATH</var>, using execline's {{C|emptyenv}} program in the execline script case.
* It adjusts the enviroment according to the {{Path|env}} subdirectory of the base directory, using {{C|s6-envdir}} in the execline script case.
* It spawns the [[#stage2|stage2 init]] as a session leader using a POSIX <code>setsid()</code> call, via {{C|s6-setsid}} in the execline script case, with its standard input redirected to {{Path|/dev/null}}.
* It redirects its standard output and error to the catch-all logger's FIFO, and replaces itself with {{C|s6-svscan}}, passing it the <code>-s</code> (divert signals) and <code>-t 0</code> (do not periodically scan the scan directory) options.

Aspects of the stage1 init that can be customized via {{C|s6-linux-init-maker}} options are:

* The (absolute) pathname of the base directory: <code>-c</code>. Default: {{Path|/etc/s6-linux-init}} for the 0.4.x.x series of s6-linux-init, and {{Path|/etc/s6-linux-init/current}} for s6-linux-init-1.0.0.0 and later.
* The value the <var>PATH</var> environment variable is initially set to: <code>-p</code>. This value affects all programs invoked by the execline script version of the stage1 init, the stage2 init, and {{C|s6-svscan}}, and will be the initial value of <var>PATH</var> for all the init system's supervision tree processes. Default: <code>/usr/bin:/usr/sbin:/bin:/sbin</code> for the 0.4.x.x series of s6-linux-init, and <code>/usr/bin:/bin</code> for s6-linux-init-1.0.0.0 and later.
* The initial value of the file mode creation mask for all the starting processes: <code>-m</code>. Default: '''0022'''.
* (0.4.x.x series of s6-linux-init only) The (absolute) pathname of the mountpoint for the read-write tmpfs: <code>-l</code>. Default: {{Path|/run}}.
* Whether a devtmps filesystem is mounted on {{Path|/dev}} or not: <code>-d</code>. Default: {{Path|/dev}} is left unmodified. Note that in order to make the stage1 init mount a devtmps, the syntax for the option is <code>-d 1</code> (the number one) for the 0.4.x.x series of s6-linux-init, and <code>-d /dev</code> for s6-linux-init-1.0.0.0 and later.
* The (absolute) pathname of a read-write directory for storing the kernel's environment variables (i.e. the environment store): <code>-s</code>. If no <code>-s</code> option is given, the environment set up by the kernel is discarded before the stage1 init replaces itself with {{C|s6-svscan}}.
* The initial environment of {{C|s6-svscan}}, and therefore, of all the init system's supervision tree processes: <code>-e</code>. {{C|s6-linux-init-maker}} constructs subdirectory {{Path|env}} of its created directory as an environment directory with all the variable settings specified by repeated use of this option. This directory must be copied to the base directory, where the stage1 init expects it to be. If no <code>-e</code> options are given, {{C|s6-svscan}}'s environment will only have the <var>PATH</var> variable, and {{Path|env}} will be empty.
* (0.4.x.x series of s6-linux-init only) The (absolute) pathname of the user-provided stage2 init: <code>-2</code>. Default: {{Path|/etc/rc.init}}.

For s6-linux-init-1.0.0.and later, the {{C|s6-linux-init}} program expects the stage2 init to be named {{Path|rc.init}} and located in the {{Path|scripts}} subdirectory of the base directory, and, on Gentoo, mounts the read-write tmpfs on {{Path|/run}}. {{C|s6-linux-init-maker}} forwards the <code>-c</code>, <code>-p</code>, <code>-m</code>, <code>-d</code> and <code>-s</code> options, if specified, to {{C|s6-linux-init}} (via the sysvinit compatibility script), and accepts options <code>-n</code> and <code>-N</code>, which it also forwards to {{C|s6-linux-init}}.

{{anchor|stage2}}
==== The stage2 init ====

The [[s6 and s6-rc-based init system#stage2|stage2 init]] must be provided by the user, runs as a child process of the [[#stage1|stage1 init]], and blocks until {{C|s6-svscan}} starts running as process 1. For the 0.4.x.x series of s6-linux-init, if {{C|s6-linux-init-maker}} is passed an <code>-r</code> option ("redirect"), the stage1 script redirects the stage2 init's standard output and error to [[#logger|the catch-all logger]]'s FIFO, i.e. all messages will be logged in its logging directory. Otherwise, the stage2 init's standard output and error are redirected to {{Path|/dev/console}}, i.e. the machine's console. The stage2 init is invoked with no arguments. An example stage2 init is provided, it is the {{Path|rc.init}} execline script in the {{Path|examples}} directory of the package's {{Path|/usr/share/doc}} subdirectory. 

For s6-linux-init-1.0.0.0 and later, the stage2 init's standard output and error are redirected to the catch-all logger's FIFO, and it is invoked with at least one argument: an ''initial runlevel''. The initial runlevel is specified by passing a <code>-D</code> option to {{C|s6-linux-init-maker}}, which it forwards to the {{C|s6-linux-init}} program. Every argument of {{C|s6-linux-init}} is also forwarded to the stage2 init after the default runlevel. Arguments can be passed to {{C|s6-linux-init}} by specifying them in the kernel's command line (e.g. using the [[bootloader]]'s available mechanisms): every argument in the command line after a "--" (double hyphen) marker is passed to process 1, as is every argument before the marker, if present, that does not contain an equals sign ('=') or dot ('.'), and that is not recognized as a kernel parameter. For the meaning of runlevels in s6-linux-init, see [[#runlevels|here]].

If no <code>-D</code> option is specified, {{C|s6-linux-init}} scans its arguments and, if one of them is <code>default</code>, <code>2</code>, <code>3</code>, <code>4</code> or <code>5</code> then it is interpreted as the default runlevel, and passed to the stage2 init as its first argument (note that this means that this argument will be passed twice: as the first argument, and later again in the position is has in the kernel's command line), otherwise, the default runlevel passed to the stage2 init as its first argument is <code>default</code>.

For s6-linux-init-1.0.0.0 and later, the {{C|s6-linux-init-maker}} program copies the stage2 init, {{Path|rc.init}}, from a directory that can be specified with the <code>-f</code> option, to the {{Path|scripts}} subdirectory of its generated directory. If no <code>-f</code> option is specified, directory {{Path|/etc/s6-linux-init/skel}} is used on Gentoo. The package installs an example stage2 init in {{Path|/etc/s6-linux-init/skel}}, that is a shell script containing only comments.

==== The init system's scan directory ====

The scan directory image is the {{Path|run-image/service}} subdirectory of the [[#stage1|stage1 init's base directory]], and contains:

* An s6 service directory for the init system's [[#logger|catch-all logger]], named {{Path|s6-svscan-log}}.
* For s6-linux-init-1.0.0.0 and later, an s6 service directory for [[#runleveld|the runlevel changer service]], named {{Path|s6-linux-init-runleveld}}.
* For s6-linux-init-1.0.0.0 and later, an s6 service directory for [[#shutdownd|the shutdown service]], named {{Path|s6-linux-init-shutdownd}}.
* An optional s6 service directory for an ''early getty service'', named {{Path|s6-linux-init-early-getty}}.
* The {{Path|.s6-svscan}} subdirectory with {{Path|finish}} and {{Path|crash}} files, as well as {{C|s6-svscan}} [[#signals|diverted signal handlers]]. All of these files are execline scripts.

This scan directory image is copied to the tmpfs by the stage1 init, and becomes {{C|s6-svscan}}'s scan directory when it starts running as process 1. Therefore, the init system's scan directory's pathname, relative to the tmpfs' mountpoint, is {{Path|service}}, and, in most cases, its absolute pathname will be {{Path|/run/service}}.

The generated {{Path|.s6-svscan/crash}} and {{Path|.s6-svscan/finish}} files are execline scripts used by [[s6#s6svscanfinish|{{C|s6-svscan}}'s finish procedure]] and, for the 0.4.x.x series of s6-linux-init, the latter will be the init system's [[#stage3|stage3 init]]. For s6-linux-init-1.0.0.0 and later, the {{Path|.s6-svscan/finish}} file simply prints an "''s6-svscan exited. Rebooting.''" message, and reboots the machine with an {{C|s6-linux-init-hpr -r -f}} command.

{{C|s6-linux-init-maker}} accepts a <code>-G</code> option followed by a suitable invocation (program name and arguments) of some {{C|getty}} implementation, for example, <code>-G '/sbin/agetty 38400 tty1 linux'</code> for Gentoo. If it is invoked with this option, the early getty service directory contains a {{Path|run}} execline script with the specified {{C|getty}} invocation, which means that a (single) {{C|getty}} process will be spawned by {{C|s6-svscan}} as soon as it starts running as process 1. This allows logging in to the machine from its console as early as possible. If no <code>-G</code> option is specified, there will be no early getty service, and any {{C|getty}} setup must be done by the user-provided [[#stage2|stage2 init]].

{{anchor|logger}}
==== The catch-all logger ====

The [[s6 and s6-rc-based init system#logger|catch-all logger]] generated by {{C|s6-linux-init-maker}} is an {{C|s6-log}} process that logs to a logging directory named {{Path|uncaught-logs}}, and placed in the read-write tmpfs mounted by [[#stage1|the stage1 init]]. Therefore, in most cases, the logging directory's absolute pathname will be {{Path|/run/uncaught-logs}}. The standard output of the {{C|s6-log}} process is redirected to {{Path|/dev/null}}, and its standard error, to {{Path|/dev/console}}, i.e. the machine's console.

The {{Path|run}} file of its s6 service directory opens [[s6 and s6-rc-based init system#fifo|the logger's FIFO]] for reading, and then invokes {{C|s6-log}} with the <code>-p</code> option, so that it cannot be killed by the <code>SIGTERM</code> signal, and with the <code>-b</code> (blocking) option, which makes {{C|s6-log}} stop reading from the FIFO while it has unflushed buffers. This avoids unbound memory use if there is a lot of output to write. For s6-linux-init-1.0.0.0 and later, the {{Path|run}} file alsso passes a <code>-d 3</code> option to {{C|s6-log}}, which makes it [[s6#s6readiness|signal readiness]] to its {{C|s6-supervise}} parent process, using file descriptor 3 for the notification channel. The catch-all logger's FIFO is created by {{C|s6-linux-init-maker}} in its service directory with the name {{Path|fifo}}.

Aspects of the catch-all logger that can be customized via {{C|s6-linux-init-maker}} options are:

* The {{C|s6-log}} process' effective user and group. Default: {{C|s6-log}} runs as root.
** For the 0.4.x.x series of s6-linux-init: <code>-u</code>, <code>-g</code> and <code>-U</code>. A numeric user ID and group ID can be specified with the <code>-u</code> and <code>-g</code> options, respectively, or be read from environment variables <var>UID</var> and <var>GID</var>, respectively, if the <code>-U</code> option is used. This allows, for example the invocation of {{C|s6-linux-init-maker}} as <kbd>s6-envuidgid larry s6-linux-init-maker -U dir</kbd> to make {{C|s6-log}} run with effective user set to 'larry'.
** For s6-linux-init-1.0.0.0 and later: <code>-u</code>. This option must be followed by an account database username.
* How logged lines of text are timestamped:  <code>-t</code>. Default: timestamps in [https://cr.yp.to/libtai/tai64.html external TAI64N format] are used, as generated by {{C|s6-log}}'s '''t''' directive.
* (s6-linux-init-1.0.0.0 and later only) Whether the catch-all logger also prints logged lines to the machine's console: <code>-1</code> (the number one). This is generally useful to debug a system at a glance, but if a failing program keeps sending error messages, it may interfere with comfortable usage of kernel virtual terminals. This can be avoided by not using {{Path|/dev/tty1}} for any {{C|getty}} process.

{{C|s6-linux-init-maker}} creates the {{Path|run-image/uncaught-logs}} subdirectory of its generated directory with an owner and group that are suitable for {{C|s6-log}}'s effective user and group, and the stage1 init copies it to the tmpfs.

{{anchor|runleveld}}
==== The runlevel changer service ====

The runlevel changer service generated by {{C|s6-linux-init-maker}} is [[s6#s6sudo|an {{C|s6-sudod}} process]] that executes a [[#runlevels|user-provided runlevel changer script]]. The {{C|s6-sudoc}} - {{C|s6-sudod}} mechanism allows executing the script in a controlled, reproducible environment, i.e. the one set up for the init system's supervision tree processes. This is similar to the {{Path|s6rc-oneshot-runner}} service that [[s6-rc#oneshots|s6-rc uses for oneshots]]. The runlevel changer script runs with its standard input and output redirected to {{Path|/dev/null}}, and its standard error logged by [[#logger|the catch-all logger]].

This service is used by the {{C|s6-linux-init-telinit}} program.

{{anchor|shutdownd}}
==== The shutdown service and daemon ====

The shutdown service generated by {{C|s6-linux-init-maker}} is a supervised {{C|s6-linux-init-shutdownd}} process. It is used by [[#shutdown|the {{C|s6-linux-init-shutdown}} program]].

s6-linux-init-1.0.0.0 and later provide the {{C|s6-linux-init-sutdownd}} program, which is a ''shutdown daemon'' that takes care of [[s6 and s6-rc-based init system#shutdownd|performing the shutdown sequence]]. It runs as a long-lived process, and performs the following actions:

# It reads from a FIFO, which is created by {{C|s6-linux-init-maker}} in its s6 service directory with the name {{Path|fifo}}, waiting for either ''machine shutdown requests'', or ''shutdown cancellation requests''. A shutdown request consists of an ''action'', that can be ''halt'', ''poweroff'', ''reboot'', or the special action ''S'', a time value that specifies a delay until actual shutdown, and an optional ''grace period''.
# If a shutdown request was received, it waits until the specified shutdown delay expires, and keeps reading from the FIFO in the meantime.
# If a shutdown cancellation request was received, it cancels any pending machine shutdown that has been previously requested.
# If the shutdown delay expires and the shutdown request has not been canceled, it starts the shutdown sequence by executing a ''shutdown file'' as a child process, and waiting for it to finish execution. The shutdown file must be provided by the user and, because {{C|s6-linux-init-sutdownd}} is part of the init system's supervision tree, it runs with the same environment that was set up for {{C|s6-linux-init-sutdownd}}, its standard input redirected to {{Path|/dev/null}}, and its standard output and error logged by [[#logger|the catch-all logger]].
# If the action specified in the shutdown request was '''S''', it does nothing and starts reading again from the FIFO. This allows the implementation of a behaviour that is similar to [[sysvinit#singleuser|sysvinit's single user mode]]. Otherwise:
# It redirects its standard output and error to {{Path|/dev/console}}, i.e. the machine's console.
# It creates an execline script named {{Path|stage 4}} in its s6 service directory.
# It stops all processes from the supervision tree except the catch-all logger, by renaming their service directories with a name that starts with a dot ('.'), and performing the equivalent of an {{C|s6-svc -dx}} command. The renaming of the servicedirs prevents {{C|s6-svscan}} from restarting their corresponding {{C|s6-supervise}} process when it exits.
# It syncs all disks, flushing all the dirty system buffers, using a POSIX <code>sync()</code> call.
# It kills all remaining processes by sending them a <code>SIGTERM</code> signal followed by a <code>SIGCONT</code> signal, using POSIX <code>kill(-1, SIGTERM)</code> and <code>kill(-1, SIGCONT)</code> calls, and waits for the expiry of either the grace period specified in the shutdown request, or the default grace period.
# It kills all remaining processes by sending them a <code>SIGKILL</code> signal using a <code>kill(-1, SIGKILL)</code> call. If {{C|s6-linux-init-sutdownd}} did not get killed by the signal, it exits.
# The shutdown service's corresponding {{C|s6-supervise}} process restarts {{C|s6-linux-init-sutdownd}}.
# {{C|s6-linux-init-sutdownd}} notes that there is a file named {{Path|stage 4}} in its service directory, and replaces itself with it using a POSIX <code>execve()</code> call.
# The execline script unmounts all mounted filesystem according to {{Path|/proc/mounts}} using auxiliary program {{C|s6-linux-init-umountall}}.
# The execline script invokes the {{C|s6-linux-init-hpr}} program with an <code>-f</code> option to shut the machine down, passing an <code>-h</code>, <code>-p</code> or <code>-r</code> option to it according to the action specified in the shutdown request (i.e. ''halt'', ''poweroff'' or ''reboot'').

{{C|s6-linux-init-sutdownd}} expects the shutdown file to be named {{Path|rc.shutdown}} and located in the {{Path|scripts}} subdirectory of the [[#stage1|stage1 init's base directory]]. It accepts a <code>-c</code> option that specifies the absolute pathname of this directory, and a <code>-g</code> option followed by a time value in milliseconds, specifying the duration of the default grace period. If no <code>-c</code> option is specified, it assumes the base directory is {{Path|/etc/s6-linux-init/current}}, and if no <code>-g</code> option is specified, the default grace period is 3 seconds. The grace period is capped to 5 minutes if the time value specified with a <code>-g</code> option or in shutdown requests received via {{C|s6-linux-init-sutdownd}}'s FIFO is greater than that.

For further information about {{C|s6-linux-init-shutdownd}}, please consult the HTML documentation in the package's {{Path|/usr/share/doc}} subdirectory. {{C|s6-linux-init-maker}} copies the shutdown file from a directory that can be specified with the <code>-f</code> option, to the {{Path|scripts}} subdirectory of its generated directory. If no <code>-f</code> option is specified, directory {{Path|/etc/s6-linux-init/skel}} is used on Gentoo. The s6-linux-init package installs a shutdown file in {{Path|/etc/s6-linux-init/skel}}, that is a shell script containing only comments.

Aspects of the shutdown service that can be customized via {{C|s6-linux-init-maker}} options are:

* The default grace period: <code>-q</code>. Default: 3 seconds.

{{C|s6-linux-init-maker}} forwards the <code>-c</code> option, if specified, to {{C|s6-linux-shutdownd}} (via the generated shutdown service's {{Path|run}} file), and passes a <code>-g</code> option to it using the value specified with the <code>-q</code> option.

{{anchor|signals}}
==== The diverted signal handlers ====

For the 0.4.x.x series of s6-linux-init, all {{C|s6-svscan}} [[s6 and s6-rc-based init system#signals|diverted signal handlers]] are execline scripts that invoke a common ''shutdown file'', wait for it to finish execution, and then invoke the {{C|s6-svscanctl}} program to make {{C|s6-svscan}} [[s6#s6svscanfinish|perform its finish procedure]], which tears down the init system's supervision tree and initiates execution of the [[#stage3|stage3 init]]. The shutdown file must be provided by the user and, because diverted signal handlers execute as child processes of {{C|s6-svscan}}, it runs with the same environment that was set up by the [[#stage1|stage1 init]] for {{C|s6-svscan}}, its standard input redirected to {{Path|/dev/null}}, and its standard output and error logged by [[#logger|the catch-all logger]]. An example shutdown file is provided, it is the {{Path|rc.shutdown}} execline script in the {{Path|examples}} directory of the package's {{Path|/usr/share/doc}} subdirectory. 

The behaviour of the different signals sent to process 1 when these handlers are used is:
* <code>SIGHUP</code>: makes {{C|s6-svscan}} send a <code>SIGHUP</code> signal to all its {{C|s6-supervise}} children before performing its finish procedure, using an {{C|s6-svscanctl -h}} command.
* <code>SIGQUIT</code>: makes {{C|s6-svscan}} send a <code>SIGTERM</code> signal to all its {{C|s6-supervise}} children before performing its finish procedure, using an {{C|s6-svscanctl -q}} command.
* <code>SIGINT</code>: reboots the machine using an {{C|s6-svscanctl -6}} command. The operating system is usually configured to send a <code>SIGINT</code> to process 1 when key combination {{Key|Ctrl}}+{{Key|Alt}}+{{Key|Del}} is pressed.
* <code>SIGTERM</code>: equivalent to <code>SIGINT</code>.
* <code>SIGUSR1</code>: powers the machine off using an {{C|s6-svscanctl -7}} command.
* <code>SIGUSR2</code>: halts the machine using an {{C|s6-svscanctl -0}} command.

For s6-linux-init-1.0.0.0 and later, the generated diverted signal handlers are also execline scripts, and the behaviour of the different signals sent to process 1 when these handlers are used is:
* <code>SIGHUP</code>: does nothing.
* <code>SIGQUIT</code>: does nothing.
* <code>SIGINT</code>: reboots the machine using an {{C|s6-linux-init-shutdown -a -r -- now}} command.
* <code>SIGTERM</code>: does nothing.
* <code>SIGUSR1</code>: powers the machine off using an {{C|s6-linux-init-shutdown -a -p -- now}} command. 
* <code>SIGUSR2</code>: halts the machine using an {{C|s6-linux-init-shutdown -a -h -- now}} command. 

Aspects of the signal handlers that can be customized via {{C|s6-linux-init-maker}} options are:

* (0.4.x.x series of s6-linux-init only) The (absolute) pathname of the user-provided shutdown file: <code>-Z</code>. Default: {{Path|/etc/rc.shutdown}}.

{{anchor|stage3}}
==== The stage3 init ====

For the 0.4.x.x series of s6-linux-init, the {{Path|finish}} file in the {{Path|.s6-svscan}} subdirectory of the init system's scan directory is a [[s6 and s6-rc-based init system#stage3|stage3 init]]. It is an execline script that runs as process 1 during the machine's shutdown sequence, and performs these actions:
# It sets the working directory to /.
# It redirects its standard output and error to {{Path|/dev/console}}, i.e. the machine's console.
# It uses an {{C|s6-svc -X}} command to [[s6 and s6-rc-based init system#stoplogger|make the catch-all logger exit]].
# It syncs all disks, flushing all the dirty system buffers, using program {{C|s6-sync}} from {{Package|sys-apps/s6-portable-utils}}.
# It kills all remaining processes by sending them a <code>SIGTERM</code> signal followed by a <code>SIGCONT</code> signal followed by a <code>SIGHUP</code> signal, using program {{C|s6-nuke}} from s6-portable-utils, and waits for the expiry of a specified or default ''grace period''.
# It kills all remaining processes by sending them a <code>SIGKILL</code> signal, again using {{C|s6-nuke}}.
# It unmounts all mounted filesystem according to {{Path|/proc/mounts}} using program {{C|s6-umount}} from {{Package|sys-apps/s6-linux-utils}}.
# Remounts the root filesystem read-only using program {{C|s6-mount}} from s6-linux-utils.
# Invokes the {{C|s6-halt}}, {{C|s6-poweroff}} or {{C|s6-reboot}} program with the <code>-f</code> option to shut the machine down.

Aspects of the stage3 init that can be customized via {{C|s6-linux-init-maker}} options are:

* (0.4.x.x series of s6-linux-init only) The duration of the grace period: <code>-q</code>. Default: 2 seconds.

{{anchor|runlevels}}
=== Runlevels ===

s6-linux-init-1.0.0.0 and later allows the implementation of runlevel-like functionality similar to that of [[sysvinit#runlevels|sysvinit]]. An s6-linux-init runlevel normally represents a service set, and ''entering a runlevel'' normally means to start all services in the corresponding set, and stopping all services not in it. Each runlevel has an alphanumerical identifier. The package uses two components to implement a service: the {{C|s6-linux-init-telinit}} program, and [[#runleveld|the generated runlevel changer service]], {{Path|s6-linux-init-runleveld}}.

What happens when a runlevel is entered is defined by a ''runlevel changer script'' that must be provided by the user. {{Path|s6-linux-init-runleveld}} expects the script to be named {{Path|runlevel}} and located in the {{Path|scripts}} subdirectory of the [[#stage1|stage1 init's base directory]]. It is normally an execline or shell script that relies on some service manager to actually perform the necessary service transitions.

The {{C|s6-linux-init-telinit}} program accepts a runlevel identifier as its argument, and uses an <kbd>s6-sudo -e -T 3600000</kbd> command to connect to {{Path|s6-linux-init-runleveld}}'s socket (i.e. the {{C|s6-sudod}} process' listening socket), and pass it the runlevel identifier. The <code>-e</code> option avoids passing variables from {{C|s6-linux-init-telinit}}'s enviromnent to the the {{Path|runlevel}} script, and the <code>-T</code> option prevents it from running for more than an hour. {{Path|s6-linux-init-runleveld}} then executes {{Path|runlevel}} with the runlevel identifier as its argument.

Integration with [[OpenRC]] can be achieved by having the runlevel changer script execute the {{C|openrc}} program when invoked. In this case, s6-linux-init runlevels are OpenRC runlevels.

For compatibility with sysvinit, if {{C|s6-linux-init-telinit}} is invoked with '''0''' or '''6''' as its argument, after passing it to {{Path|s6-linux-init-runleveld}} as the runlevel identifier and waiting for the {{C|s6-sudo}} process to terminate, it uses an <kbd>s6-linux-init-shutdown -h 0</kbd> or <kbd>s6-linux-init-shutdown -p 0</kbd> command to initiate machine shutdown.

For further information about {{C|s6-linux-init-telinit}}, please consult the HTML documentation in the package's {{Path|/usr/share/doc}} subdirectory. {{C|s6-linux-init-maker}} copies the runlevel changer script from a directory that can be specified with the <code>-f</code> option, to the {{Path|scripts}} subdirectory of its generated directory. If no <code>-f</code> option is specified, directory {{Path|/etc/s6-linux-init/skel}} is used on Gentoo. The s6-linux-init package installs a runlevel changer shell script in {{Path|/etc/s6-linux-init/skel}}, containing only comments that illustrate integration with both OpenRC and [[s6-rc]].

{{anchor|s6rc}}
=== s6-rc support ===

All the necessary setup needed to make s6-rc [[s6-rc#initsystem|part of the init system]] is done in the [[#stage2|stage2 init]] and in the shutdown file invoked by either the {{C|s6-svscan}} [[#signals|diverted signal handlers]] or the [[#shutdownd|shutdown daemon]]. Because both files are provided by the user, the s6-linux-init package does not have, or need, any specific support for s6-rc. Nevertheless, the stage2 init and shutdown file provided by the package illustrate an s6-rc setup.

Integration of [[#runlevels|{{C|s6-linux-init-telinit}}]] with s6-rc can be achieved by having the runlevel changer script use its argument in a {{C|s6-rc -pa change}} command. In this case, s6-linux-init runlevels are s6-rc [[s6-rc#bundles|service bundle names]].

{{anchor|shutdown}}
=== Shutdown and reboot ===

The 0.4.x.x series of s6-linux-init provides the {{C|s6-halt}}, {{C|s6-poweroff}} and {{C|s6-reboot}} programs, that can be used in combination with the init system components generated by {{C|s6-linux-init-maker}} to shut the machine down. These programs halt it, power it off, and reboot it, respectively. They accept an <code>-f</code> ("force") option, just like [[sysvinit#halt|their sysvinit counterparts]], to perform their respective action without going through the init system (using the Linux <code>reboot()</code> system call). Otherwise, they just send a signal to process 1 that corresponds to the [[#signals|diverted signal handler]] generated by {{C|s6-linux-init-maker}} for the requested shutdown operation. For further information about these programs, please consult the HTML documentation in the package's {{Path|/usr/share/doc}} subdirectory.

s6-linux-init-1.0.0.0 and later provides the {{C|s6-linux-init-shutdown}} and {{C|s6-linux-init-hpr}} programs for the same purpose. The former conforms to the LSB shutdown interface<ref>Linux Standard Base Core Specification 5.0.0, Generic Part, Chapter 17, "Commands and Utilities", [https://refspecs.linuxfoundation.org/LSB_5.0.0/LSB-Core-generic/LSB-Core-generic/shutdown.html 17.2, "Command Behavior", shutdown]. Retrieved on September 9th, 2019.</ref>, modeled after sysvinit's {{C|shutdown}}, and the latter replaces {{C|s6-halt}}, {{C|s6-poweroff}} and {{C|s6-reboot}}. Therefore, {{C|s6-linux-init-shutdown}} accepts a time specification, an optional message to be shown to logged in users, and the <code>-h</code> (halt after shutdown), <code>-r</code> (reboot after shutdown), <code>-c</code> (cancel shutdown), <code>-k</code> (do not really shutdown; only warn), <code>-t</code> (grace period between <code>SIGTERM</code> and <code>SIGKILL</code>) and <code>-a</code> (access control) options, with the same meaning [[sysvinit#shutdown|as for sysvinit's {{C|shutdown}}]]. For compatibility with the LSB, it accepts <code>-f</code> (ask the [[rc#|rc subsystem]] to skip checking filesystems with {{C|fsck}} after next boot) and <code>-F</code> (ask the rc subsystem to make {{C|fsck}} check filesystems after next boot, even if they are marked clean) options, that it ignores. It also accepts <code>-H</code> (halt), <code>-p</code> and <code>-P</code> (poeweroff) options, that combine with <code>-h</code> according to the following table:

{| style="border:solid medium"
! style="border:solid thin;text-align:center" | {{C|s6-linux-init-shutdown}} option
! style="border:solid thin;text-align:center" | Results in
! style="border:solid thin;text-align:center" | Comments
|-
| <code>-h</code> || style="border-left:solid thin" | Halting
| style="border-left:solid thin" | Note that Gentoo's patched {{C|shutdown}} powers off in this case.
|-
| <code>-H</code> || style="border-left:solid thin" | Halting
| style="border-left:solid thin" | Same as Gentoo's patched {{C|shutdown}}
|-
| <code>-P</code> || style="border-left:solid thin" | Powering off
| style="border-left:solid thin" | Same as Gentoo's patched {{C|shutdown}}
|-
| <code>-h -H</code> || style="border-left:solid thin" | Halting
| style="border-left:solid thin" | Compatible with upstream sysvinit
|-
| <code>-h -P</code> || style="border-left:solid thin" | Powering off
| style="border-left:solid thin" | Compatible with upstream sysvinit
|}


Unless it was invoked with the <code>-k</code> option, {{C|s6-linux-init-shutdown}} connects to [[#shutdownd|the shutdown service]]'s FIFO and sends a shutdown request, or shutdown cancellation request if the <code>-c</code> option has been specified, to the shutdown daemon, {{C|s6-linux-init-shutdownd}}. If no <code>-h</code>, <code>-p</code>, <code>-H</code> or <code>-H</code> option was specified, it sends a special 'S' shutdown request to {{C|s6-linux-init-shutdownd}}, that only makes it execute the shutdown script, but not actually shut the machine down. This allows the implementation of a behaviour that is similar to [[sysvinit#singleuser|sysvinit's single user mode]].

If it was invoked with the <code>-a</code> option, {{C|s6-linux-init-shutdown}} performs access control using file {{Path|/etc/shutdown.allow}} just like sysvinit's {{C|shutdown}}. POSIX <code>setutxent()</code>, <code>getutxent()</code> and <code>endutxent()</code> calls are used to read user accounting database ({{Path|/var/run/utmp}} for GNU libc)  user process records (i.e. <code>struct utmpx</code> objects with <code>ut_type == USER_PROCESS</code>), and their <code>ut_user</code> user field is matched against account usernames in {{Path|/etc/shutdown.allow}}. If the duration of the grace time specified with the <code>-t</code> option is greater that 5 seconds, it is capped to that value.

For further information about {{C|s6-linux-init-shutdown}}, please consult the HTML documentation in the package's {{Path|/usr/share/doc}} subdirectory.

The {{C|s6-linux-init-hpr}} program must be invoked either with an <code>-h</code> option, a <code>-p</code> option, or an <code>-r</code> option, to halt, poweroff, or reboot the machine, respectively. In either case, it first writes a ''shutdown record'' to the user accounting log file ({{Path|/var/log/wtmp}} for GNU libc), using the libc's <code>updwtmpx()</code> function. The shutdown record is a runlevel record (i.e. a <code>struct utmpx</code> object with <code>ut_type == RUN_LVL</code>) that has <code>ut_user</code> set to "shutdown" (or "reboot" if {{C|s6-linux-init-hpr}} was invoked with the <code>-r</code> option), <code>ut_id</code> set to the empty string, <code>ut_line</code> set to "~~", <code>ut_pid</code> set to {{C|s6-linux-init-hpr}}'s process ID, <code>ut_session</code> set to {{C|s6-linux-init-hpr}}'s session ID (as returned by a POSIX <code>getsid(0)</code> call), <code>ut_tv</code> set to the current time, and <code>ut_host</code> set to the name returned by the POSIX <code>gethostname()</code> call (or the null string if the call fails). Then, unless it was invoked with a <code>-W</code> (capital 'w') option, it prints a warning about the system going down immediatly to logged in users, and finally sends a shutdown request to {{C|s6-linux-init-shutdownd}}, specifying that machine shutdown should be initiated immediately. That is, <kbd>s6-linux-init-hpr -h</kbd> is equivalent to <kbd>s6-linux-init-shutdown -h now</kbd>, <kbd>s6-linux-init-hpr -p</kbd>, to <kbd>s6-linux-init-shutdown -p now</kbd>, and <kbd>s6-linux-init-hpr -r</kbd>, to <kbd>s6-linux-init-shutdown -r now</kbd>.

Just like sysvinit's {{C|halt}}, {{C|poweroff}} and {{C|reboot}}, if {{C|s6-linux-init-hpr}} is invoked with a <code>-w</code> (small 'w') option, it only writes the shutdown record to the user accounting log file, without actually shutting the machine down, and if it is invoked with a <code>-d</code> option, no shutdown record is written to the user accounting log file.

If {{C|s6-linux-init-hpr}} is invoked with an <code>-f</code> ("force") option, it syncs all disks, flushing all the dirty system buffers, using the POSIX <code>sync()</code> call, and directly performs the shutdown action requested by the <code>-h</code>, <code>-p</code> or <code>-r</code> option, using the Linux <code>reboot()</code> system call. No shutdown record is written to the user accounting log file, no warning is printed a to logged in users, and options <code>-W</code>, <code>-w</code> and <code>-d</code> are ignored.

For further information about {{C|s6-linux-init-hpr}}, please consult the HTML documentation in the package's {{Path|/usr/share/doc}} subdirectory.

{{anchor|sysvinit}}
=== sysvinit compatibility scripts ===

For s6-linux-init-1.0.0.0 and later, {{C|s6-linux-init-maker}} creates the following execline scripts in the {{Path|bin}} subdirectory of its generated directory:
* {{C|init}}, which calls the {{C|s6-linux-init}} program with the <code>-c</code> (base directory) and <code>-m</code> (file mode creation mask) options, and, if they were specified to {{C|s6-linux-init-maker}}, the <code>-p</code> (value of <var>PATH</var>), <code>-d</code> (mount a devtmpfs), <code>-s</code> (environment store), <code>-D</code> (initial runlevel), <code>-n</code> (remount the tmpfs) and <code>-N</code> (do not mount a tmpfs) options.
* {{C|halt}}, which calls the {{C|s6-linux-init-hpr}} program with the <code>-h</code> option (halt) and all the supplied arguments.
* {{C|poweroff}}, which calls the {{C|s6-linux-init-hpr}} program with the <code>-p</code> option (poweroff) and all the supplied arguments.
* {{C|reboot}}, which calls the {{C|s6-linux-init-hpr}} program with the <code>-r</code> option (reboot) and all the supplied arguments.
* {{C|telinit}}, which calls the {{C|s6-linux-init-telinit}} program with all the supplied arguments.
* {{C|shutdown}}, which calls the {{C|s6-linux-init-shutdown}} program with all the supplied arguments.

These compatibility scripts are provided as replacements of the sysvinit programs of the same name in pure s6-based setups, and are installed by the Gentoo ebuild in {{Path|/sbin}} if the <code>sysv-utils</code> [[USE flag]] is set. This, however, does not allow having {{Package|sys-apps/sysvinit}} and sys-apps/s6-linux-init simultaneously installed, and therefore, switching between init systems with a reboot. In fact, installing sys-apps/s6-linux-init with this USE flag set on a machine with sys-apps/sysvinit already installed results in a blocker. So, to be able to have both packages, sys-apps/s6-linux-init must be installed with the <code>sysv-utils</code> USE flag unset, and the compatibility scripts, if wanted, must be (manually) installed with different names. For example:

* {{C|halt}}, {{C|poweroff}} and {{C|reboot}} could be installed in {{Path|/sbin}} with the names {{C|s6-halt}}, {{C|s6-poweroff}} and {{C|s6-reboot}} since, for s6-linux-init-1.0.0.0 and later, those programs are replaced by {{C|s6-linux-init-hpr}} and no longer provided. Or alternatively, the administrator could use {{C|s6-linux-init-hpr}} directly, and not install the compatilibity scripts.
* {{C|init}} might be installed in {{Path|/sbin}} as, for example, {{Path|s6-imkr-init}}, and an <code>init=/sbin/s6-imkr-init</code> parameter could be passed to the kernel. Or alternatively, the {{C|s6-linux-init}} program could be specified in the <code>init=</code> parameter, its agruments could be specified in the kernel command line after an '--' marker, and the compatilibity script could be left uninstalled.
* The administrator could use {{C|s6-linux-init-telinit}} and {{C|s6-linux-init-shutdown}} directly, and not install the {{C|telinit}} and {{C|shutdown}} compatilibity scripts.

=== Support programs ===

s6-linux-init-1.0.0.0 and later provides two support programs for init system components created by {{C|s6-linux-init-maker}}.

The {{C|s6-linux-init-echo}} program is used by the {{Path|.s6-svscan/finish}} and {{Path|.s6-svscan/crash}} files, and is an exact duplicate of {{C|s6-echo}} from {{Package|sys-apps/s6-portable-utils}}. Its inclusion in s6-linux-init avoids creating a runtime dependency on that package.

The {{C|s6-linux-init-umountall}} program is used by the {{Path|stage 4}} execline script created by the [[#shutdownd|shutdown daemon]], {{C|s6-linux-init-shutdownd}}, and it unmounts all filesystems, processing {{Path|/proc/mounts}} in reverse order, starting with the most recently mounted partition and ending with the rootfs. It behaves in a similar way to that of the {{C|s6-umount}} program from {{Package|sys-apps/s6-linux-utils}} when the <code>-a</code> option is specified. Its inclusion in s6-linux-init again avoids creating a runtime dependency on that package.

== Removal ==

=== Unmerge ===

{{Unmerge|sys-apps/s6-linux-init}}

If s6-linux-init's programs and components generated by {{C|s6-linux-init-maker}} are being used as the init system, an alternative one must be installed in parallel, and the machine rebooted to use it (possibly by reconfiguring the bootloader), before the package is removed, or otherwise the machine will become unbootable. 

== See also ==

* {{See also|S6 and s6-rc-based init system}}

== External resources ==

* [https://www.adelielinux.org Adélie Linux], a distribution of Linux and musl that supports using s6-linux-init-1.0.0.0 and later + [[OpenRC]] as its init system, as an alternative to [[sysvinit]] + OpenRC (currently in beta stage).

== References ==

{{reflist}}

[[Category:S6]]
