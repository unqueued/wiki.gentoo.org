<languages />

{{Metadata|abstract=Apache HTTPサーバは、有能で拡張可能なウェブサーバで、インターネット上で最も人気のあるウェブサーバのひとつです。}}

{{InfoBox stack
|{{InfoBox homepage|https://httpd.apache.org|header=true}}
|{{InfoBox wikipedia|Apache_HTTP_Server}}
|{{InfoBox github|apache/httpd}}
|{{InfoBox project|Apache}}
}}

'''Apache HTTPサーバ'''は、[[Article description::効率的で拡張可能な[[:Category:Web Servers|ウェブサーバー]]で、インターネット上で最も人気のあるもののひとつです。]]

== インストール ==

{{Note/ja|Apacheのバージョンアップをする時は、 [[Project:Apache/Upgrading|アップグレードガイド]]を参照してください。}}

=== USE フラグ ===

{{USEflag|package=www-servers/apache}}

=== Emerge ===

Apache event MPM を使いたい場合、以下を make.conf に追加します:
{{FileBox|filename=/etc/portage/make.conf|title=Apache event MPM|lang=bash|1=
APACHE2_MPMS="event"
}}

Apache worker MPM を使いたい場合、以下を make.conf に追加します:
{{FileBox|filename=/etc/portage/make.conf|title=Apache worker MPM|lang=bash|1=
APACHE2_MPMS="worker"
}}

また、Apache の threads USE フラグも有効化してください:
{{FileBox|filename=/etc/portage/package.use|title=Apache threads サポート|lang=bash|1=
www-servers/apache threads
}}

Apache を ''emerge'' します:
{{Emerge|{{Package|www-servers/apache}}}}

=== グローバルなサポート ===

<code>apache2</code> グローバル USE フラグを有効化することで、他のパッケージの Apache サポートの提供を受けられます。これにより、Apache に依存するパッケージが emerge された場合に {{Package|www-servers/apache}} が自動的にインストールされます。

{{FileBox|filename=/etc/portage/make.conf|title=システム USE フラグに Apache を追加する|lang=bash|1=
USE="apache2"
}}

USEフラグを設定した後には、システム全体をアップデートして変更を適用させたいかもしれません:

{{Emerge|params+=--changed-use --deep|@world}}

=== 設定 ===

=== ファイル ===

システム上のApache2の動作を設定する、2つの主要なファイルがあります: 

* Gentoo の Apache2 用 init スクリプトの設定ファイル {{Path|/etc/conf.d/apache2}}

* Apache2 サーバーで一般的に用いられている設定ファイル {{Path|/etc/apache2/httpd.conf}}

==== {{Path|/etc/conf.d/apache2}} ====

{{Path|/etc/conf.d}} に配置されている {{Path|apache2}} ファイルは Gentoo の init スクリプトの設定ファイルです。このファイルで唯一有効な行は <var>APACHE2_OPTS</var> 変数の行です:

{{FileBox|filename=/etc/conf.d/apache2|lang=bash|1=
APACHE2_OPTS="-D DEFAULT_VHOST -D INFO -D SSL -D SSL_DEFAULT_VHOST -D LANGUAGE"
}}

この行のオプションは、全体の設定において特定の部分を有効にしたり無効にしたりするために様々な設定ファイルが利用する記述 <code><IfDefine option-name></code> を解釈するための定義です。これについては後ほど触れます。

==== {{Path|/etc/apache2/httpd.conf}} ====

{{Path|httpd.conf}} ファイルは Apache サーバーの伝統的な設定ファイルです。実際には、このファイルは設定の'''入り口'''に過ぎません。設定全体は {{Path|/etc/apache2/}} にある多くのファイルに分割されており、それらは <code>Include</code> ディレクティブを使って統合されます。たとえば、{{Path|httpd.conf}} 内の <code>Include /etc/apache2/modules.d/*.conf</code> という文は、{{Path|/etc/apache2/modules.d/}} にあるファイルのうち名前が {{Path|.conf}} で終わるものをすべて取り込みます。 

上記で見たように、またモジュールの設定ファイル({{Path|/etc/apache2/modules.d}}内のファイル)のほとんどが<code><IfDefine module-name></code>から開始することから、対応する<code>-D module-name</code>というフラグが{{Path|/etc/conf.d/apache2}}の<var>APACHE2_OPTS</var>変数に設定されていなければ、{{Path|/ect/apache2/modules.d}}内のファイルの内容は有効にはなりません。{{Path|00_default_settings.conf}}という設定ファイルは例外で<code>IfDefine</code>から開始しておらず、そのため常に有効になります。

=== デフォルト ===

Apache サーバの新規インストール後には、以下のような、異なる設定ファイル類を集約した設定ができあがっています。その入口である {{Path|/etc/apache2/httpd.conf}} から始めましょう。

{{Warning/ja| これはクイックリファレンスであり、概観を記載したもの''でしか''ありません。設定における追加や削除を理解するには、様々なファイル群を含めコメント類を熟読することが強く期待されます。また、Apacheの設定のより深い理解のために Apache マニュアルも参照してください。}}

{{FileBox|filename=/etc/apache2/httpd.conf|lang=apache|1=
ServerRoot "/usr/lib64/apache2"
  
#Module loaded unconditionally, assuming the USE flag is no unset in
# /etc/portage/make.conf or in /etc/portage/package.use
LoadModule actions_modulemodules/mod_actions.so
...
#other modules loaded that way : alias_module, auth_basic_module, authn_alias_module,
# authn_anon_module, authn_dbm_module, authn_default_module, authn_file_module, 
# authz_dbm_module, authz_default_module, authz_groupfile_module, authz_host_module, 
# authz_owner_module, authz_user_module, autoindex_module,  cgi_module,  cgid_module, 
# deflate_module, dir_module, env_module, expires_module, ext_filter_module, filter_module,
#  headers_module, include_module,  log_config_module, logio_module, mime_module,  
# mime_magic_module, negotiation_module, rewrite_module, setenvif_module, 
# speling_module,ssl_module, status_module, unique_id_module, usertrack_module, host_alias_module
  
  
#Modules loaded conditionally, assuming matching USE flag is not unset in
# /etc/portage/make.conf or in /etc/portage/package.use (flag to be set in )
<IfDefine AUTHNZ_LDAP>
LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
</IfDefine>
#other modules loaded that way : cache_module, dav_module, dav_fs_module,
# dav_lock_module,disk_cache_module,  file_cache_module, info_module, ldap_module,
# mem_cache_module, userdir_module
  
  
User apache
Group apache
  
# Supplemental configuration
#**************************************************************************************vvv
#this part is included via Include /etc/apache2/modules.d/*.conf 
  
#included from /etc/apache2/modules.d/00_default_settings.conf-------------v
#this is always included as there is not option to deactivate it.
Timeout 300
KeepAlive On
MaxKeepAliveRequests 100
KeepAliveTimeout 15
UseCanonicalName Off
AccessFileName .htaccess
ServerTokens Prod
TraceEnable off
ServerSignature On 
HostnameLookups Off
EnableMMAP On
EnableSendfile On
FileEtag INode MTime Size
ContentDigest Off
ErrorLog /var/log/apache2/error_log
LogLevel warn
  
<Directory />
	Options FollowSymLinks
	AllowOverride None
	Require all denied
</Directory>
  
<IfModule dir_module>
	DirectoryIndex index.html index.html.var
</IfModule>
<FilesMatch "^\.ht">
	Require all denied
</FilesMatch>
#--------------------------------------------------------------------------^
  
#included from 00_mod_info.conf--------------------------------------------v
<IfDefine INFO>
<Location /server-info>
	SetHandler server-info
	Require host 127.0.0.1
</Location>
</IfDefine>
#--------------------------------------------------------------------------^
  
#--------------------------------------------------------------------------v
#included from 00_languages.conf
# Settings for hosting different languages.
<IfDefine LANGUAGE>
  
	AddLanguage ca .ca
	...
	AddLanguage zh-TW .zh-tw
  
	LanguagePriority en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv zh-CN zh-TW
  
	ForceLanguagePriority Prefer Fallback
  
	AddCharset us-ascii.ascii	.us-ascii
	AddCharset <nowiki>ISO-8859-1		.iso8859-1 .latin1</nowiki>
	...
	AddCharset shift_jis		.shift_jis .sjis
</IfDefine>
#---------------------------------------------------------------------------^
#**************************************************************************************^^^
  
  
#***************************************************************************************vvv
#this part is included via Include /etc/apache2/vhosts.d/*.conf 
#from 00_default_ssl_vhost.conf-----------------------------------------------------vv
<IfDefine SSL>
	<IfDefine SSL_DEFAULT_VHOST>
		<IfModule ssl_module>
			Listen 443
  
			<VirtualHost _default_:443>
				ServerName localhost
                                #------------------------------------------v
				# this part is included via Include /etc/apache2/vhosts.d/default_vhost.include
				ServerAdmin root@localhost
				DocumentRoot "/var/www/localhost/htdocs"
  
  	
				<Directory "/var/www/localhost/htdocs">
	   				Options Indexes FollowSymLinks
	   				AllowOverride All
	   				Require all granted
				</Directory>
  
				<IfModule alias_module>
	   				ScriptAlias /cgi-bin/ "/var/www/localhost/cgi-bin/"
				</IfModule>
  
				<Directory "/var/www/localhost/cgi-bin">
	   				AllowOverride None
	   				Options None
	   				Require all granted
				</Directory>
        			#end of Include ---------------------------^
  	
				ErrorLog /var/log/apache2/ssl_error_log
  
				<IfModule log_config_module>
					TransferLog /var/log/apache2/ssl_access_log
				</IfModule>
				SSLEngine on
				SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
				SSLCertificateFile /etc/ssl/apache2/server.crt
				SSLCertificateKeyFile /etc/ssl/apache2/server.key
  
				<FilesMatch "\.(cgi{{!}}shtml{{!}}phtml{{!}}php)$">
					SSLOptions +StdEnvVars
				</FilesMatch>
  
				<Directory "/var/www/localhost/cgi-bin">
					SSLOptions +StdEnvVars
				</Directory>
  
				<IfModule setenvif_module>
					BrowserMatch ".*MSIE.*" \
					nokeepalive ssl-unclean-shutdown \
					downgrade-1.0 force-response-1.0
				</IfModule>
  
  
				<IfModule log_config_module>
					CustomLog /var/log/apache2/ssl_request_log \
					"%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
					</IfModule>
			</VirtualHost>
		</IfModule>
	</IfDefine>
</IfDefine>
#---------------------------------------------------------------------------------^^
#from 00_default_vhost.conf-------------------------------------------------------vv
<IfDefine DEFAULT_VHOST>
	Listen 80
	NameVirtualHost *:80
  
	<VirtualHost *:80>
		ServerName localhost
  
		#---------------------------------------------------------------v
		# this part is included via Include /etc/apache2/vhosts.d/default_vhost.include
		ServerAdmin root@localhost
		DocumentRoot "/var/www/localhost/htdocs"
  
  	
		<Directory "/var/www/localhost/htdocs">
	   		Options Indexes FollowSymLinks
	   		AllowOverride All
	   		Require all granted
		</Directory>
  
		<IfModule alias_module>
	   		ScriptAlias /cgi-bin/ "/var/www/localhost/cgi-bin/"
		</IfModule>
  
		<Directory "/var/www/localhost/cgi-bin">
	   		AllowOverride None
	   		Options None
	   		Require all granted
		</Directory>
        	#end of Include -----------------------------------------------^
  
		<IfModule mpm_peruser_module>
			ServerEnvironment apache apache
		</IfModule>
	</VirtualHost>
</IfDefine>
#-----------------------------------------------------------------------------------^^
# end of include ****************************************************************************************^^^
}}

=== 稼働の第一歩 ===

上記初期設定にあるように、インストール済みのバーチャルホストの <code>DocumentRoot</code> ディレクトリが {{Path|/var/www/localhost/htdocs}} にあり、サーバ名は「localhost」です。 <code>DocumentRoot</code> にはさらに、index.html ファイルがひとつ生成されていますので、正常にインストールができたかどうかを確認するためには [http://localhost/ http://localhost/] にブラウザでアクセスしましょう。

そのウェブページには「It works!」のメッセージが表示されているはずです。

{{Warning/ja| [[Firefox]]には、ブラウザのURLバーでミスタイプした場合に役に立つ機能があります。もし入力したURLが解決できなかった場合、FirfoxはURLのホスト名の部分に<code>.com</code>を追加したり、<code>www.</code>を先頭に追加したりして、自動的にユーザが意図していたであろうURLを解決しようとします。

この機能はFirefoxの初期からありますが、開発者にとっては面倒なものでした。つまり、localhostで動いているサーバが応答しなかった場合、Firefoxは<code>localhost.com</code>や<code>www.localhost.com</code>に接続を試みたあげく、結局"not found"のページを見るということになってしまうのです。

この「機能」を無効にするために:
 
# <code>about:config</code>とブラウザのURLバーに入力
# 「細心の注意を払って使用する」のボタンをクリックして特別な設定ページに入ります
# 検索ボックスに<code>browser.fixup.alternate.enabled</code>と入力
# 下にフィルタされたリストが出てくるので、<code>browser.fixup.alternate.enabled</code>を右クリックし、toggleを選んで値をfalseにする
}}

=== mod_securityを有効にする ===

{{Package|www-apache/mod_security}}のインストール:

{{Emerge|www-apache/mod_security}}

{{Path|apache2}}ファイルの<var>APACHE2_OPTS</var>変数で<code>SECURITY</code>モジュールを有効にする:

{{FileBox|filename=/etc/conf.d/apache2|title=セキュリティーモジュールの有効化|lang=bash|1=
APACHE2_OPTS="... -D SECURITY"
}}

このモジュールを制御するには、{{Path|/etc/apache2/modules.d/79_modsecurity.conf}} と {{Path|/etc/apache2/modules.d/80_modsecurity-crs.conf}} ファイルを編集します。{{Path|/usr/share/doc/mod_security-2.9.1-r1/modsecurity.conf-recommended.bz2}} ファイルにおすすめの設定が含まれています( https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#A_Recommended_Base_Configuration )。ベースとなる設定を {{Path|/etc/apache2/modules.d/79_modsecurity.conf}} にコピーし、必要に応じて設定を微調整します。{{Path|/usr/share/doc/modsecurity-crs-3.0.2/crs-setup.conf.example.bz2}} ファイルを適当な場所、たとえば {{Path|/etc/conf.d/crs-setup.conf}} に解凍して微調整し、解凍したファイルを {{Path|/etc/apache2/modules.d/80_modsecurity-crs.conf}} で読み込みます。最後に Apache を再起動します。サイトの Apache ログファイルでエラーをチェックし、状況に応じて対処してください。

=== PHP サポートを有効にする ===

<code>apache2</code> の USE フラグを付けて [[PHP]] をインストールし、モジュールを有効にします:

{{Important|1=>=[https://packages.gentoo.org/packages/app-eselect/eselect-php app-eselect/eselect-php-0.8.1] では、<var>APACHE2_OPTS</var> 変数が <code>-D PHP5</code> から <code>-D PHP</code> に変更されました。これにより将来のメジャーバージョンへの移行がスムーズになります。2年間の移行期間をおいた後、eselect-php-0.9.4-r5 で互換 shim (訳註: 互換性確保のための仕組み) は削除されました。}}

{{FileBox|filename=/etc/conf.d/apache2|title=PHPモジュールを有効にする|lang=bash|1=
APACHE2_OPTS="... -D PHP"
}}

PHP モジュールが動作しているかテストする前に、{{Path|/etc/apache2/modules.d/70_mod_php.conf}} ファイルが存在し、以下の定義が記載されているか、確認しましょう。

{{FileBox|filename=/etc/apache2/modules.d/70_mod_php.conf|title=PHPモジュールがロードされたことを確認する|lang=apache|1=
<IfDefine PHP>
	# The mod_php.so symlink is controlled by
	# eselect-php. However, the module name changed from
	# php5_module to php7_module so we can't blindly load whatever
	# is there. Instead we let eselect-php manage a small
	# configuration file that loads the appropriate module.
	#
	# This is relative to ServerRoot (see httpd.conf).
	Include ../../../var/lib/eselect-php/mod_php.conf
 
	# Tell apache that mod_php should handle PHP files.
	#
	# NOTE: Avoiding AddHandler/AddType for security (bug
	# #538822). Please read the related news item!
	<FilesMatch "\.(php{{!}}php[57]{{!}}phtml)$">
		SetHandler application/x-httpd-php
	</FilesMatch>
 
	# PHP source files which are meant to be displayed as
	# syntax-highlighted source code.
	<FilesMatch "\.phps$">
		SetHandler application/x-httpd-php-source
	</FilesMatch>
 
	DirectoryIndex index.php index.phtml
</IfDefine>
}}

もしこのファイルがないようなら、作りましょう。

PHPモジュールが動作しているか確認するために、テストページを作成:

{{FileBox|filename=/var/www/localhost/htdocs/index.php|title=PHPテストページ|lang=php|1=
<html>
 <body>
  <?php phpinfo(); ?>
 </body>
</html>
}}

そして、{{Path|/var/www/localhost/htdocs/index.html}}を削除するかリネームして、テストページを開きましょう: <code>http://localhost/</code>

PHPの設定が記述された表が見られるでしょう。

==== PHPのバージョンを変更する ==== 

Apache によって処理される PHP のバージョンを変えるには、まず <code>apache2</code> Server Application Programming Interface (SAPI) で利用可能なバージョンをリストアップします:

{{RootCmd|eselect php list apache2|output=<pre>
 [1]   php5.3
 [2]   php5.4 *
 [3]   php5.5
</pre>}}

選択したバージョンに変更するには:

{{RootCmd|eselect php set apache2 N}}

上の例の <code>N</code> は、先ほど表示したような {{c|eselect php list apache2}} の出力の中から選択した番号で置き換えてください。

=== バーチャルホスト ===

それぞれのバーチャルホストごとに、 <code>DocumentRoot</code> ディレクトリを用意し Apacheデーモンが見つけられアクセス可能なようにしましょう。{{Path|/etc/apache2/vhosts.d}} ディレクトリ内にバーチャルホスト設定ファイル({{Path|VirtualHost.conf}})を追加し、その中には この <code>DocumentRoot</code> とホストサーバ名を指定します。また、このホストサーバ名の項目を {{Path|/etc/hosts}} に追記することも忘れないでください。

apache ユーザ/グループ の所有者権限を、バーチャルホストのファイル群に割り当てます。以下の例のように {{c|chown}} コマンドで:

{{RootCmd|chown apache:apache /var/www/sitename}}

以下に、2つのバーチャルホスト定義例があります。1つは domainname1.com で、もう1つは domainname2.com です。本来のホスト自体（<code>*:80</code>）は同じでも、<code>DocumentRoot</code> と <code>ServerName</code>のディレクティブがそれぞれ異なります。

{{CodeBox|title=バーチャルホストの定義の例|lang=apache|1=
<VirtualHost *:80>
    ServerAdmin email@site.com
    DocumentRoot /var/www/website1
    ServerName domainname1.com
</VirtualHost>
  
<VirtualHost *:80>
    ServerAdmin email@site.com
    DocumentRoot /var/www/website2
    ServerName domainname2.com
</VirtualHost>
}}

IPアドレスベースのバーチャルホスト定義を行うこともまた推奨されています。管理者はユーザに対して、IPアドレスを通じてサイトへアクセスさせメッセージを掲げられます。

{{CodeBox|title=IPアドレスベースのバーチャルホスト|lang=apache|1=
<VirtualHost *:80>
    ServerAdmin email@site.com
    DocumentRoot /var/www/html
    ServerName xxx.xxx.xxx.xxx
</VirtualHost>
>}}

バーチャルホストを挿入したあとには、新たなウェブサイトを有効にするために、ウェブサーバを（完全に）再起動する必要があります。

=== fcgid 経由の PHP を有効にする ===

{{Package|www-apache/mod_fcgid}} と {{Package|dev-lang/php}} をインストール。PHP パッケージには、<code>cgi</code> USE フラグの設定が必要:

{{Emerge|www-apache/mod_fcgid dev-lang/php}}

{{Path|mod_fcgid.conf}} ファイルを編集:

{{FileBox|filename=/etc/apache2/modules.d/20_mod_fcgid.conf|lang=apache|1=
<IfDefine FCGID>
LoadModule fcgid_module modules/mod_fcgid.so
SocketPath /var/run/fcgidsock
SharememPath /var/run/fcgid_shm
  
AddHandler php-fcgid .php
AddType application/x-httpd-php .php
Action php-fcgid /fcgid-bin/php-fcgid-wrapper
# max request 128mb
FcgidMaxRequestLen 134217728
<Location /fcgid-bin/>
        SetHandler fcgid-script
        Options +ExecCGI
</Location>
</IfDefine>
}}

必要なディレクトリの作成: 

{{RootCmd|mkdir /var/www/localhost/htdocs/fcgid-bin}}

PHP ラッパーへのシンボリックリンクを張る:

{{RootCmd|ln -s /usr/bin/php-cgi /var/www/localhost/htdocs/fcgid-bin/php-fcgid-wrapper}}

<code>FCGID</code> モジュールの有効化:

{{FileBox|filename=/etc/conf.d/apache2|title=fcgidモジュールを有効にする|lang=bash|1=
APACHE2_OPTS="... -D FCGID"
}}

最後に、Apache を再起動して、すでに作成された<code>phpinfo()</code>サイトを確認します。<code>Server API</code> の値は ''CGI/FastCGI'' になるはずです。

=== Apache 2.4でmod_proxy_fcgiを使ってPHP-FPMを使う ===

PHP-FPM をmod_proxy_fcgi を通じて有効にするには以下の要件を満たす必要があります:
* >= PHP 5.3
* >= Apache 2.4

さらに、Apache 2.4 での機能の利用にはいくつかの制限があります:
* [https://wiki.apache.org/httpd/PHP-FPM#Performance_and_Pitfalls UNIX ソケット経由で PHP-FPM と通信する] には >= Apache 2.4.9 が必要です。
* [https://wiki.apache.org/httpd/PHP-FPM#Example ProxyPassMatch] ではなく [https://github.com/php/php-src/pull/694 SetHandler] を使用するには >= Apache 2.4.10 が必要です。

以下の設定は Apache 2.4.10 以降でのみ動作します。この手法は、<code>FilesMatch</code> ディレクティブに基づいており、メインのサーバー設定か <code>VirtualHost</code> の設定の中に記載します。UNIX ソケットの場所は、{{Path|php-fpm.conf}} という設定ファイル内の <code>listen</code> ディレクティブによって決まり、サイトや機能ごとに別々に定めることが可能です。

以下の例では、<code>FilesMatch</code> を Apache の PHP モジュールの設定ファイルに記述しています:

{{FileBox|filename=/etc/apache2/modules.d/70_mod_php.conf|title=PHP-FPM を使う(Apache 2.4.10 以降で推奨)|lang=apache|1=
 <IfDefine PHP>
        <FilesMatch "\.php$">
                SetHandler "proxy:unix:/var/run/php-fpm/www.sock{{!}}fcgi://localhost"
        </FilesMatch>
  
	# Set it to handle the files
	<IfModule mod_mime.c>
		AddHandler application/x-httpd-php .php .php5 .phtml
		AddHandler application/x-httpd-php-source .phps
	</IfModule>
  
	DirectoryIndex index.php index.phtml
 </IfDefine>
}}

また、ProxPassMatch を使用することもできます -- Apache のバージョンが 2.4.0 から 2.4.8 (これらを含む) の場合はこれが唯一の選択肢です。

{{FileBox|filename=/etc/apache2/modules.d/70_mod_php.conf|title=PHP-FPM を使う(2.4.8 以前で推奨)|lang=apache|1=
 <IfDefine PHP>
        # Send all requested PHP files to PHP-FPM via fcgi://PHP_FPM_LISTEN_ADDRESS:PHP_FPM_LISTEN_PORT/DOCUMENT_ROOT/$1
        ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/var/www/localhost/htdocs/$1
  
	# Set it to handle the files
	<IfModule mod_mime.c>
		AddHandler application/x-httpd-php .php .php5 .phtml
		AddHandler application/x-httpd-php-source .phps
	</IfModule>
  
	DirectoryIndex index.php index.phtml
 </IfDefine>
}}

デフォルトでは <code>listen</code> ディレクティブはソケットに設定されていません。まずソケットファイル用のディレクトリーを作成します:

{{RootCmd|mkdir /var/run/php-fpm}}

次に {{Path|php-fpm.conf}} ファイルを以下のように変更します:

{{FileBox|filename=php-fpm.conf|title=listen ディレクティブを使う|lang=apache|1=
; Set permissions for unix socket, if one is used. In Linux, read/write
; permissions must be set in order to allow connections from a web server. Many
; BSD-derived systems allow connections regardless of permissions.
; Default Values: user and group are set as the running user
;                 mode is set to 0666
listen.owner = nobody
listen.group = nobody
;listen.mode = 0666
 
 ; The address on which to accept FastCGI requests.
 ; Valid syntaxes are:
 ;   'ip.add.re.ss:port'    - to listen on a TCP socket to a specific address on
 ;                            a specific port;
 ;   'port'                 - to listen on a TCP socket to all addresses on a
 ;                            specific port;
 ;   '/path/to/unix/socket' - to listen on a unix socket.
 ; Note: This value is mandatory.
 ;listen = 127.0.0.1:9000
listen = /var/run/php-fpm/www.sock
}}

そして、<code>PHP</code> および <code>PROXY</code> のモジュールを有効にします:

{{FileBox|filename=/etc/conf.d/apache2|title=PHP およびプロキシーのモジュールを有効にする|lang=bash|1=
APACHE2_OPTS="... -D PHP -D PROXY"
}}

== 使い方 ==

=== サービス ===

==== OpenRC ====

Apache サーバを起動:

{{RootCmd|/etc/init.d/apache2 start}}

Apache を default ランレベルに追加:

{{RootCmd|rc-update add apache2 default}}

Apache サービスを再起動:

{{RootCmd|/etc/init.d/apache2 restart}}

Apache の設定ファイルの再読込:

{{RootCmd|/etc/init.d/apache2 reload}}

==== systemd ====

Apache サーバを起動:

{{RootCmd|systemctl start apache2}}

Apache を default ランレベルに追加: 

{{RootCmd|systemctl enable apache2}}

Apache サービスを再起動: 

{{RootCmd|systemctl restart apache2}}

== トラブルシューティング ==

=== 資料 ===

Apache サーバーを適切に設定するのは難しいこともあります。以下の資料は問題が起こったときに役に立つかもしれません:

* [[Project:Apache/Troubleshooting|トラブルシューティングガイド]]
* {{Bug|www-servers/apache|search=package}}

=== テスト ===

Apache2 が動作し listen している IP インターフェースとポートの確認:

{{RootCmd|netstat -tulpen {{!}} grep apache|output=<pre>
tcp     0     0 0.0.0.0:80      0.0.0.0:*     LISTEN     0     10932720     4544/apache2        
tcp     0     0 0.0.0.0:443     0.0.0.0:*     LISTEN     0     10932716     4544/apache2        
</pre>}}

localhost で Apache サーバに接続できるかテスト:

{{Cmd|telnet localhost 80|output=<pre>
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
</pre>}}

接続テストを中断するには {{Key|Ctrl}}+{{Key|c}} と {{Key|Enter}} を入力します。

=== apr_sockaddr_info_get() failed for <System_Hostname> ===

'''エラー:'''

<pre>apache2: apr_sockaddr_info_get() failed for System_Hostname</pre>

'''Resolution:'''

When this occurs, add the host name to the {{Path|/etc/hosts}} file:

{{FileBox|filename=/etc/hosts|title=Adding a Hostname for Apache|1=
127.0.0.1 localhost System_Hostname
}}

== 参考 ==

* {{See also|Lighttpd}}
* {{See also|Nginx}}

== 外部の情報 ==

* [http://articles.slicehost.com/2010/12/2/installing-apache-on-gentoo Slicehost article: Installing Apache on Gentoo]
* [http://articles.slicehost.com/2010/12/3/apache-configuration-files-on-gentoo Slicehost article: Apache configuration files on Gentoo]
* [http://articles.slicehost.com/2010/12/3/configuring-the-apache-mpm-on-gentoo Slicehost article: Configuring the Apache MPM on Gentoo]
* [http://articles.slicehost.com/2010/12/3/apache-configuration-on-gentoo-part-1 Slicehost article: Apache configuration on Gentoo]
* [http://articles.slicehost.com/2010/12/3/apache-virtual-hosts-on-gentoo-part-1 Slicehost article: Apache Virtual Hosts on Gentoo]
* [http://articles.slicehost.com/2010/12/3/enabling-and-using-apache-s-mod_status-on-gentoo Slicehost article: Enabling and using apache's mod_status on Gentoo]
* [https://httpd.apache.org/docs/ apache.org documentation]
* [http://gentoo-en.vfose.ru/wiki/Apache2_mod_pagespeed Apache2 mod_pagespeed]


[[Category:Web Servers]]
