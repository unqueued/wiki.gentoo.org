<languages />
<translate>

<!--T:90-->
{{Metadata|abstract=Xorg is the X Window server which allows users to have a graphical environment at their fingertips. This HOWTO explains what Xorg is, how to install it and what the various configuration options are.}}

<!--T:1-->
Xorg is the X Window server which allows users to have a graphical environment at their fingertips. This HOWTO explains what Xorg is, how to install it and what the various configuration options are.

== What is the X Window Server? == <!--T:2-->

=== Graphical vs Command-Line === <!--T:3-->

<!--T:4-->
The average user may be frightened at the thought of having to type in commands. Why wouldn't he be able to point and click his way through the freedom provided by Gentoo (and Linux in general)? Well, of course you are able to do this! Linux offers a wide variety of flashy user interfaces and environments which you can install on top of your existing installation. 

<!--T:5-->
This is one of the biggest surprises new users come across: a graphical user interface is nothing more than an application which runs on your system. It is ''not'' part of the Linux kernel or any other internals of the system. It is a powerful tool that fully enables the graphical abilities of your workstation. 

<!--T:6-->
As standards are important, a standard for drawing and moving windows on a screen, interacting with the user through mouse, keyboard and other basic, yet important aspects has been created and named the ''X Window System'', commonly abbreviated as ''X11'' or just ''X''. It is used on Unix, Linux and Unix-like operating systems throughout the world. 

<!--T:7-->
The application that provides Linux users with the ability to run graphical user interfaces and that uses the X11 standard is Xorg-X11, a fork of the XFree86 project. XFree86 has decided to use a license that might not be compatible with the GPL license; the use of Xorg is therefore recommended. The official Portage tree does not provide an XFree86 package anymore.

=== The X.org Project === <!--T:8-->

<!--T:9-->
The [http://www.x.org X.org] project created and maintains a freely redistributable, open-source implementation of the X11 system. It is an open source X11-based desktop infrastructure. 

<!--T:10-->
Xorg provides an interface between your hardware and the graphical software you want to run. Besides that, Xorg is also fully network-aware, meaning you are able to run an application on one system while viewing it on a different one. 

== Installing Xorg == <!--T:11-->

<!--T:12-->
Before you can install Xorg, you need to prepare your system for it. First, we'll set up the kernel to support input devices and video cards. Then we'll prepare {{Path|/etc/portage/make.conf}} so that the right drivers and Xorg packages are built and installed. 

=== Input driver support === <!--T:13-->

<!--T:14-->
By default, Xorg uses <code>evdev</code><ref name=evdev>[[evdev]]</ref>, a generic input driver. You'll need to activate support for <code>evdev</code> by making a change to your kernel configuration. Read the [[Kernel/Gentoo_Kernel_Configuration_Guide|Kernel Configuration Guide]] if you don't know how to setup your kernel. 

<!--T:15-->
{{KernelBox|title=Enabling evdev in the kernel|<pre>
Device Drivers --->
  Input device support --->
  <*>  Event interface
</pre>
}}

=== Kernel modesetting === <!--T:16-->

<!--T:17-->
Modern open-source video drivers rely on kernel modesetting (KMS). KMS provides an improved graphical boot with less flickering, faster user switching, a built-in framebuffer console, seamless switching from the console to Xorg, and other features. KMS conflicts with legacy framebuffer drivers, which must remain '''disabled''' in your kernel configuration. 

<!--T:18-->
First, prepare your kernel for KMS. You need to do this step regardless of which Xorg video driver you're using. 

<!--T:19-->
{{KernelBox|title=Configuring framebuffers|<pre>
Device Drivers --->
  Graphics support --->
    Support for frame buffer devices --->
    ## (Disable all drivers, including VGA, Intel, nVidia, and ATI)
 
    ## (Further down, enable basic console support. KMS uses this.)
    Console display driver support --->
      <*>  Framebuffer Console Support
</pre>
}}

<!--T:20-->
Next, configure your kernel to use the proper KMS driver for your video card. Intel, nVidia, and AMD/ATI are the most common cards, so follow code listing for your card below. 

<!--T:21-->
For Intel cards<ref>https://wiki.gentoo.org/wiki/Intel#Kernel</ref>: 

<!--T:22-->
{{KernelBox|title=Intel settings|<pre>
Device Drivers --->
  Graphics support --->
    /dev/agpgart (AGP Support) --->
    <*>  Intel 440LX/BX/GX, I8xx and E7x05 chipset support
    Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
    <*>  Intel 8xx/9xx/G3x/G4x/HD Graphics
    [*]    Enable modesetting on intel by default
</pre>
}}

<!--T:23-->
For nVidia cards: 

<!--T:24-->
{{KernelBox|title=nVidia settings|<pre>
Device Drivers --->
  Graphics support --->
    Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
    <*>    Nouveau (nVidia) cards
</pre>
}}

<!--T:25-->
For newer AMD/ATI cards ([[ATI_FAQ|RadeonHD 2000 and up]]), you will need to emerge {{Package|x11-drivers/radeon-ucode}} or {{Package|sys-kernel/linux-firmware}}. Once you have installed one of these packages, configure your kernel as detailed in the [[Radeon#Firmware|firmware section]] of [[Radeon|Radeon page]]: 

<!--T:26-->
{{KernelBox|title=AMD/ATI settings|<pre>
## (Setup the kernel to use the radeon-ucode firmware)
Device Drivers --->
  Generic Driver Options --->
  [*]  Include in-kernel firmware blobs in kernel binary
  ## # ATI card specific, (see Radeon page for details of firmware to include)
   (radeon/<YOUR-MODEL>.bin ...)
  ## # all:
   (/lib/firmware/) Firmware blobs root directory
 
## (Enable Radeon KMS support)
Device Drivers --->
  Graphics support --->
  <*>  Direct Rendering Manager --->
  <*>    ATI Radeon
  [*]      Enable modesetting on radeon by default
  [ ]      Enable userspace modesetting on radeon (DEPRECATED)
</pre>
}}

<!--T:27-->
{{Note|Old Radeon cards (X1900 series and older) don't need the {{Package|x11-drivers/radeon-ucode}} package or any firmware configuration. Just enable the Direct Rendering Manager and ATI Radeon modesetting.}}

<!--T:89-->
{{Note|Linux kernel >{{=}} 3.9 does not have the ''Enable modesetting on radeon by default'' anymore as it is already implied by default.}}

<!--T:28-->
Now that you're done setting up KMS, continue with preparing {{Path|/etc/portage/make.conf}} in the next section.

=== make.conf configuration === <!--T:29-->

<!--T:30-->
Now that your kernel is prepared, you have to configure two important variables in the {{Path|/etc/portage/make.conf}} file before you can install Xorg. 

<!--T:31-->
The first variable is <code>VIDEO_CARDS</code>. This is used to set the video drivers that you intend to use and is usually based on the kind of video card you have. The most common settings are <code>nouveau</code> for nVidia cards or <code>radeon</code> for ATI cards. Both have actively developed, well-supported open-source drivers. 

<!--T:32-->
{{Note|You may also try the proprietary drivers from nVidia and AMD/ATI, <code>nvidia</code> and <code>fglrx</code> respectively. However, setting up the proprietary drivers is beyond the scope of this guide. Please read the [[NVidia/nvidia-drivers|Gentoo Linux nVidia Guide]] and [[ATI_FAQ|Gentoo Linux ATI FAQ]]. If you don't know which drivers you should choose, refer to these guides for more information.}}

<!--T:33-->
The <code>intel</code> driver may be used for desktops or laptops with common Intel integrated graphics chipsets. 

<!--T:34-->
{{Note|<code>VIDEO_CARDS</code> may contain more than one driver, each separated with a space.}}

<!--T:35-->
The second variable is <code>INPUT_DEVICES</code> and is used to determine which drivers are to be built for input devices. In most cases setting it to <code>evdev</code><ref name=evdev /> should work just fine. If you use alternative input devices, such as a Synaptics touchpad for a laptop, be sure to add it to <code>INPUT_DEVICES</code>. 

<!--T:36-->
Decide which drivers will be used and add necessary settings to the {{Path|/etc/portage/make.conf}} file: 

<!--T:37-->
{{CodeBox|title=Sample make.conf entries|lang=bash|1=
## (For mouse, keyboard, and Synaptics touchpad support)
INPUT_DEVICES="evdev synaptics"
## (For nVidia cards)
VIDEO_CARDS="nouveau"
## (For AMD/ATI cards)
VIDEO_CARDS="radeon"
}}

<!--T:38-->
If the suggested settings does not work emerge the {{Package|x11-base/xorg-drivers}} package(see the step below). Check all the options available and choose those which apply to the system. This example is for a system with a keyboard, mouse, Synaptics touchpad, and a Radeon video card. 

<!--T:39-->
{{Emerge|x11-base/xorg-drivers||params+=--verbose --pretend|output=<pre>
 
These are the packages that would be merged, in order:
 
Calculating dependencies... done!
[ebuild   R   ]  x11-base/xorg-drivers-1.9  INPUT_DEVICES="evdev synaptics
-acecad -aiptek -elographics% -fpit% -joystick -keyboard -mouse -penmount -tslib
-virtualbox -vmmouse -void -wacom"
VIDEO_CARDS="radeon -apm -ark -ast -chips -cirrus -dummy -epson -fbdev -fglrx
(-geode) -glint -i128 (-i740) (-impact) -intel -mach64 -mga -neomagic (-newport)
-nouveau -nv -nvidia -r128 -rendition -s3 -s3virge -savage -siliconmotion -sis
-sisusb (-sunbw2) (-suncg14) (-suncg3) (-suncg6) (-sunffb) (-sunleo) (-suntcx)
-tdfx -tga -trident -tseng -v4l -vesa -via -virtualbox -vmware (-voodoo) (-xgi)"
0 kB
</pre>
}}

<!--T:41-->
First of all, make sure <code>udev</code> is added as a USE:

<!--T:42-->
{{RootCmd|echo "x11-base/xorg-server udev" >> /etc/portage/package.use}}

After setting all the necessary variables Xorg can be installed:

<!--T:44-->
{{Emerge|x11-base/xorg-server}}

<!--T:45-->
{{Note|The {{Package|x11-base/xorg-x11}} meta-package could be installed instead of the more lightweight {{Package|x11-base/xorg-server}}. Functionally {{Package|x11-base/xorg-x11}} and {{Package|x11-base/xorg-server}} are the same, however {{Package|x11-base/xorg-x11}} brings in many more packages that most systems will probably not require. Additional packages include a large assortment of fonts in many languages. They are not necessary for a working X11 framwork.}}

<!--T:46-->
When the installation is finished, some environment variables will need to re-initialized before continuing. Source the profile with this command:

<!--T:47-->
{{RootCmd|env-update
|source /etc/profile}}

=== NVidia users === <!--T:92-->

<!--T:93-->
For NVidia users it might be beneficial to run <tt>nvidia-xconfig</tt> in order to generate a working {{Path|xorg.conf}} file for the selected graphics card. Without this step the {{Path|xorg.conf}} file will need to be created manually as described below. Missing the {{Path|xorg.conf}} will sometimes generate a "No screens found" error to the terminal when attempting to <tt>startx</tt>.

Also the NVidia driver will only work after a reboot, so be sure to restart the system after running <tt>nvidia-xconfig</tt>.

<!--T:95-->
{{RootCmd|nvidia-xconfig}}

<!--T:96-->
It is both possible and recommended to set the OpenGL renderer to the hardware renderer instead of a software renderer:

<!--T:97-->
{{RootCmd|eselect opengl set nvidia}}

== Configuring Xorg == <!--T:48-->

<!--T:49-->
The X server is designed to work out-of-the-box, with no need to manually edit Xorg's configuration files. It ''should'' detect and configure devices such as displays, keyboards, and mice.

<!--T:50-->
Try [[#Using_startx|using startx]] without editing any configuration files. If Xorg will not start, or there is some other problem, then manual configuration of Xorg will be needed. This is explained in the following section. 

<!--T:91-->
{{Note|If changes have been made to the kernel, do not forget to '''restart the system''' ''before'' using startx in order to be using the newly built kernel. If the kernel was updated to a newer version in the process this will most likely require the bootloader's configuration files to be updated as well.}}

=== The {{Path|xorg.conf.d}} directory === <!--T:51-->

<!--T:52-->
{{Important|Configuring files in {{Path|xorg.conf.d}} should be seen as a last resort option. If possible it is desirable to run Xorg without any special configuration.}}

<!--T:53-->
Most of the configuration files for Xorg are stored in {{Path|/etc/X11/xorg.conf.d/}}. Each file is given a unique name and ends in {{Path|.conf}}. The file names in Xorg's configuration directory will read in alpha numeric order. For example, {{Path|10-evdev.conf}} will be read before {{Path|20-synaptics.conf}}; {{Path|a-evdev.conf}} will be read before {{Path|b-synaptics.conf}}, and so on. The files in this directory are not required to be numbered, but doing so will help keep them organize. Organization is helpful in when debugging faulty configuration files.

<!--T:54-->
{{Note|Xorg provides example configurations in {{Path|/usr/share/doc/xorg-server-${version}/xorg.conf.example.bz2}}. These can be used to create custom configuration files in {{Path|/etc/X11/xorg.conf.d/}}. The examples are heavily commented, but if more documentation regarding the syntax is needed <kbd>man xorg.conf</kbd> is always available. Other examples can be found in the [[#Resources|Resources]] chapter at the end of this guide.}}

=== Using startx === <!--T:55-->

<!--T:56-->
Try <tt>startx</tt> to start up the X server. <tt>startx</tt> is a script that executes an ''X session''; that is, it starts the X server and some graphical applications on top of it. It decides which applications to run using the following logic: 

<!--T:57-->
* If a file named {{Path|.xinitrc}} exists in the home directory, it will execute the commands listed there.

<!--T:58-->
* Otherwise, it will read the value of the <code>XSESSION</code> variable and will execute one of the sessions available in {{Path|/etc/X11/Sessions/}} accordingly. The value of <code>XSESSION</code> can be set in the {{Path|/etc/env.d/90xsession}} file to make a default session for all users on the system. For example, as root, run <kbd>echo XSESSION="Xfce4" > /etc/env.d/90xsession</kbd>. This will create the {{Path|90xsession}} file and set the default X session to [[Xfce/HOWTO|Xfce]]. Remember to run <kbd>env-update</kbd> after making changes to {{Path|90xsession}}.

<!--T:59-->
{{Cmd|startx}}

<!--T:60-->
If no window manager has been installed a solid black screen will appear. Since this can also be a sign that something is wrong, the {{Package|x11-wm/twm}} and {{Package|x11-terms/xterm}} packages can be installed only to test X. 

<!--T:61-->
Once the programs are installed, run <tt>startx</tt> again. A few <tt>xterm</tt> windows should appear, making it easy to verify the X server is working correctly. Once satisfied with the results, unmerge {{Package|x11-wm/twm}} and {{Package|x11-terms/xterm}} if installed in the step above to remove the testing packages. They will not be needed to setup a proper desktop environment.

== Tweaking X settings == <!--T:62-->

=== Setting the screen resolution === <!--T:63-->

<!--T:64-->
If the screen resolution looks to be wrong, you will need to check two sections in your {{Path|xorg.conf.d}} configuration. First of all, you have the ''Screen'' section which lists the resolutions that your X server will run at. This section might not list any resolutions at all. If this is the case, Xorg will estimate the resolutions based on the information in the second section, ''Monitor''. 

<!--T:65-->
Now let us change the resolution. In the next example from {{Path|/etc/X11/xorg.conf.d/40-monitor.conf}} we add the <code>PreferredMode</code> line so that our X server starts at 1440x900 by default. The <code>Option</code> in the <code>Device</code> section must match the name of your monitor (<code>DVI-0</code>), which can be obtained by running <tt>xrandr</tt>. Install <tt>xrandr</tt> (<kbd>emerge xrandr</kbd>) just long enough to get this information. The argument after the monitor name (in the <code>Device</code> section) must match the <code>Identifier</code> in the <code>Monitor</code> section. 

<!--T:66-->
{{RootCmd|nano -w /etc/X11/xorg.conf.d/40-monitor.conf|output=<pre>
Section "Device"
  Identifier  "RadeonHD 4550"
  Option      "Monitor-DVI-0" "DVI screen"
EndSection
Section "Monitor"
  Identifier  "DVI screen"
  Option      "PreferredMode" "1440x900"
EndSection
</pre>
}}

<!--T:67-->
Run X (<tt>startx</tt>) to discover it uses the desired resolution.

=== Multiple monitors === <!--T:68-->

<!--T:69-->
More than one monitor in can be established in {{Path|/etc/X11/xorg.conf.d/}}. Give each monitor a unique identifier, then list its physical position, such as "RightOf" or "Above" another monitor. The following example shows how to configure a DVI and a VGA monitor, with the VGA monitor as the right-hand screen: 

<!--T:70-->
{{RootCmd|nano -w /etc/X11/xorg.conf.d/40-monitor.conf|output=<pre>
Section "Device"
  Identifier "RadeonHD 4550"
  Option     "Monitor-DVI-0" "DVI screen"
  Option     "Monitor-VGA-0" "VGA screen"
EndSection
Section "Monitor"
  Identifier "DVI screen"
EndSection
Section "Monitor"
  Identifier "VGA screen"
  Option     "RightOf" "DVI screen"
EndSection
</pre>
}}

=== Configuring the keyboard === <!--T:71-->

<!--T:72-->
To setup X to use an international keyboard create the appropriate config file in {{Path|/etc/X11/xorg.conf.d/}}. This example features a Czech keyboard layout: 

<!--T:73-->
{{RootCmd|nano -w /etc/X11/xorg.conf.d/30-keyboard.conf|output=<pre>
Section "InputClass"
        Identifier "keyboard-all"
        Driver "evdev"
        Option "XkbLayout" "us,cz"
        Option "XkbModel" "logitech_g15"
        Option "XkbRules" "xorg"
        Option "XkbOptions" "grp:alt_shift_toggle,grp:switch,grp_led:scroll,compose:rwin,terminate:ctrl_alt_bksp"
        Option "XkbVariant" ",qwerty"
        MatchIsKeyboard "on"
EndSection
</pre>
}}

<!--T:74-->
The "terminate" command (<code>terminate:ctrl_alt_bksp</code>) lets users kill the X session by using the {{Key|Ctrl}}+{{Key|Alt}}+{{Key|Backspace}} key combination. This will, however, make X exit disgracefully -- something that users might want to avoid. It can be useful when programs have frozen the display entirely, or when configuring and tweaking the Xorg environment. Be careful when killing the desktop with this key combination - most programs really do not like it when they are ended this way. Some, if not all, of the information that has not been written to the disk (information stored in "open documents") will be lost.

=== Finishing up === <!--T:75-->

<!--T:76-->
Run <tt>startx</tt> and be happy about the result. Congratulations, you now (hopefully) have a working Xorg! The next step is to install a useful window manager or desktop environment such as [[KDE]], [[GNOME]], or [[Xfce]]. Information on installing these desktop environments can be found here on the wiki.

== See also ==

[[Wayland]]

== External resources == <!--T:77-->

=== Creating and editing config files === <!--T:78-->

<!--T:79-->
First of all, <kbd>man xorg.conf</kbd> and <kbd>man evdev</kbd><ref name=evdev /> provide quick yet complete references about the syntax used by these configuration files. Be sure to have them open on a terminal when editing Xorg configuration files! 

<!--T:80-->
There are also many online resources on editing config files in {{Path|/etc/X11/}}. Only a few are listed here; use a choice favorite search engine to find more.

=== Other resources === <!--T:81-->

<!--T:82-->
More information about installing and configuring various graphical desktop environments and applications can be found in the [http://www.gentoo.org/doc/en/?catid=desktop Gentoo Desktop Documentation Resources] section of our documentation. 

<!--T:83-->
When upgrading to xorg-server 1.9 from an earlier version, be sure to read the [http://www.gentoo.org/proj/en/desktop/x/x11/xorg-server-1.9-upgrade-guide.xml migration guide]. 

<!--T:84-->
X.org provides many [http://www.x.org/wiki/FAQ FAQs] on their website, in addition to their other documentation.
</translate>
== References ==
{{reflist}}

{{Migrated|originalauthors=swift, nightmorph}}
[[Category:X.Org]]
