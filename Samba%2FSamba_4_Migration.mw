This guide introduces the migration of Samba3 to Samba4 with LDAP on Gentoo boxes.

== Pre-requisite ==
* A working samba 3 NT PDC (Must be PDC as it will be '''Promote''' to AD)
* Samba AD DNS Planing
* LDAP Auth Backend Database (Optional)
* Python 2.7 as ABI 


{{Warning|
Do not test migration in your production environment, Once a Windows client finds and connects to the new server, it is not possible to go back! the windows client will never talk to your samba 3 server even if you remove/downgrade the samba 4 Server.
So make sure you thoroughly test your migration on a virtual environment and how your clients react before you activate your new server in your production environment! 
}}


=== Samba DNS Planing ===
* Moving from samba3 to samba AD is not easy due to the fact that the idea wasn't the same.
* Samba AD required you to have a resolvable DNS.
* MS suggest to use a FQDN as an AD Server as it is easily scalable in future.
* There are some suggestion to use suffixes of .local, .lan .corp but these are bad idea, very bad idea indeed. As we have no understanding what suffixes ICANN will use  in future. And having a DNS with that suffix will conflict with the external DNS.

Thus we would hope that you use the following suggestion.

==== FQDN subdomain DNS setup ====
Example you own "company.com" and it is hosting by your web hosting company.

{| class="wikitable"
|-
! FQDN !! Description
|-
| company.com. || main internet address point to your web server.
|-
| www.company.com. || points to webserver ( Public IP Address, by your web hosting company)
|-
| mail01.company.com.|| points to mail server 1 ( Public IP Address, by your web hosting company )
|-
| mail02.company.com. ||  points to mail Server 2 ( Public IP Address, by your web hosting company )
|-
| smtp1.company.com.|| points to smtp server 1 ( Public IP Address, by your web hosting company )
|-
| smtp2.company.com. || points to smtp server 2 ( Public IP Address, by your web hosting company )
|-
| smtp3.company.com. || points to smtp server 3 ( Public IP Address, by your web hosting company )
|}

Samba AD and internal subdomain DNS setup  

{| class="wikitable"
|-
! FQDN !! Description
|-
| headoffice.location1.company.com. || head office subdomain
|-
| samba4-1.headoffice.location1.company.com. || Samba AD FQDN
|}
in the above example:<br />
NETBIOS NAME: HEADOFFICE

'''''So the most important setup.'''''

hostname = samba4-1.headoffice.company.com<br />
AD = headoffice.company.com<br />
REALM = HEADOFFICE.COMPANY.COM<br />
DOMAINNAME ( NT Style )  COMPANY<br />

'''Benefit'''
# A clear cut on internal and external DNS.
# There will not be any conflict between internal and also external DNS.
# In case if there are Branch Site, the Branch AD FQDN can be another subdomain: ''samba4-2.branch_CA.company.com.''
# We can also make the subdomain public if need and that make this design future proof.

=== Python 2.7 ABI ===
Run the following command to check if python2.7 is ABI

{{RootCmd|eselect python list|output=<pre>
Available Python interpreters:
  [1]   python2.7 *
  [2]   python3.2
</pre>}}

If the result are not the same run the following command

{{RootCmd|eselect python set 1}}

=== Checking SambaSID for duplication ===

We will now check for SambaSID duplication
You can use the following code which is from the samba ClassUpgrade/HOWTO <ref name="classicupgrade">[https://wiki.samba.org/index.php/Samba4/samba-tool/domain/classicupgrade/HOWTO]https://wiki.samba.org/index.php/Samba4/samba-tool/domain/classicupgrade/HOWTO</ref>
{{Code||<pre>
#!/usr/bin/python
# A quick and dirty python script that checks for duplicat SID's using slapcat.
import os
 
data = os.popen("slapcat | grep sambaSID", 'r')
line = []
 
def anydup(thelist):
        dups = list(set([x for x in thelist if thelist.count(x) > 1]))
        for i in dups:
                print "Duplicate id: ", i
 
for each_line in data:
        line.append(each_line.strip())
 
anydup(line)
</pre>}}

=== Checking Samba username and groupname for duplication ===
Unfortunately, there are no program for this.
You will have to do it manually.

if you are using smbldap-tools, you can use the following command and manually compare their different.
{{RootCmd|
1. smbldap-grouplist
2. smbldap-userlist
}}

{{Note|Please help write a python program for this}}

== Getting Started with Samba4 ==

=== Getting Samba4 ===

==== Options 1, internal heimdal (Need to create new ebuild) ====
Samba4 is already in portage, however it is still mask and there are some bugs related to it. <br />
A few of them are affecting us. Make the patch in and run your ebuild.
# {{Bug|490872}} Mit-krb5 conflict with hemidal issue, resolve using internal hemidal library.

The 1st bugs are very important if you cannot remove the dependency of having mit-Krb5 (in most case)<br />
Please apply the patch and make your own ebuild.<br />

For more on samba4 bugs please have a look on the bugs tracker below.<br />
{{Bug|489762}} Samba4 unmask bugs tracker.

{{USEflag|package=net-fs/samba
|acl++Yes
|addns++Yes
|ads++Yes
|aio
|avahi
|caps
|cluster
|client
|cups++Yes
|debug
|dmapi
|doc
|examples
|fam
|ldap++Yes
|ldb
|netapi
|pam++Yes
|quota++Yes
|readline
|server
|smbclient
|smbsharemodes
|selinux
|swat
|syslog
|winbind
}}

{{Emerge|{{=}}net-fs/samba-4.1.2}}





 <references />


==== Options 2, Remove system wide mit-krb5 and replace with heimdal ====
This might not be as challenge as compare to option 1 but there are some other challenge.
{{Note|If you face the following:<br />
kernel: traps: getent[3691] general protection ip:7fd9b7a229f8 sp:a7e5ddc470aa4ca0 error:0 in ld-2.16.so[7fd9b7a0c000+21000] <br />
It Can only temporary fix it by removing all ldap in /etc/nsswitch.conf<br />
This issue is fixed with the latest nss_ldap-265-r2
Please unmask it and emerge it manually 
}}
===== Remove mit-krb5 dependency =====
You will need to to check which package are dependent on mit-krb5
{{RootCmd|equery d mit-krb5||output=<pre>
 * These packages depend on mit-krb5:
dev-libs/openssl-1.0.1e-r1 (kerberos ? app-crypt/mit-krb5)
net-libs/c-client-2007f-r4 (kerberos ? app-crypt/mit-krb5)
virtual/krb5-0 (app-crypt/mit-krb5)
</pre>}}

remove the '''kerberos''' useflag and recompile these package<br />
but leave '''virtual/krb5-0''' untouch, we need that later.

{{File|/etc/portage/package.use|Example adding openssl and c-client|<pre>
dev-libs/openssl -kerberos
net-libs/c-client -kerberos
</pre>}}

Emerge your new package with mit-krb5 dependency removed.

{{emerge|openssl c-client|params=--ask --newuse --verbose}}

Check if the kerberos useflag had be removed.

===== Unmerge mit-krb5 =====
We will now remove mit-krb.

{{Warning|if you skip the above steps, some system will not be responding}}

{{emerge|mit-krb5|params=--ask --unmerge }}

===== Emerge heimdal =====
We can now emerge app-crypt/heimdal kerberos. 
{{emerge|app-crypt/heimdal}}

Now rebuild all package which need kerberos library.<br />
'''virtual/krb5-0''' was the build so that if a package can compile with either of the kerberos library, we can choose either one. 

{{RootCmd|revdep-rebuild}}

When done we can continue emerge samba.
