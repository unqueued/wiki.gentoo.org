<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

{{Metadata|abstract=UTF-8 — это кодировка символов переменной длины, что, в данном случае, означает длину от 1 до 4 байт на символ. Первый байт UTF-8 используется для кодирования ASCII, что означает, что данный набор символов полностью обратно совместим с ASCII. UTF-8 означает, что символы ASCII и Latin полностью взаимозаменяемы с небольшим увеличением размера данных, так как используется только первый байт. Пользователи восточных алфавитов, например, японского, которым назначили диапазон с большим числом байт несчастливы, так как это приводит к 50%-избыточности в их данных.}}

UTF-8 — это кодировка символов переменной длины, что, в данном случае, означает длину от 1 до 4 байт на символ. Первый байт UTF-8 используется для кодирования ASCII, что означает, что данный набор символов полностью обратно совместим с ASCII. UTF-8 означает, что символы ASCII и Latin полностью взаимозаменяемы с небольшим увеличением размера данных, так как используется только первый байт. Пользователи восточных алфавитов, например, японского, которым назначили диапазон с большим числом байт несчастливы, так как это приводит к 50%-й избыточности в их данных. 

== Кодировки символов ==

=== Что такое кодировка символов? ===

Компьютеры неспособны воспринимать текст как человек. Вместо этого они каждый символ представляют как число. Традиционно каждый набор чисел, используемый для представления алфавитов и символов (известный как кодировка или набор символов), ограничен по размеру в силу ограничений оборудования. 

=== История кодировок символов ===

Самой распространенной (или, по крайней мере, наиболее принятой повсеместно) кодировкой является '''ASCII''' (Американский стандартный код для обмена информацией, American Standard Code for Information Interchange). Часто считается, что ASCII &mdash; наиболее успешный программный стандарт из когда-либо созданных. Современный ASCII стандартизован в 1986 году (ANSI X3.4, RFC 20, ISO/IEC 646:1991, ECMA-6) Американским национальным институтом по стандартизации (American National Standards Institute, ANSI). 

ASCII является строго семибитной кодировкой, из чего следует, что она использует семь двоичных цифр, то есть интервал от 0 до 127. ASCII начинается с 32 невидимых управляющих символов (с кодами от 0 до 31) и заканчивается управляющим символом DEL (или delete) с кодом 127. Символы в диапазоне от 32 до 126 видимы &mdash; это пробел, знаки препинания, латинские буквы и цифры. 

Восьмой бит в ASCII изначально использовался как бит контроля четности для проверки ошибок при передаче информации. Если проверка на ошибки не важна, то он остается равным 0. Это означает, что в ASCII каждый символ занимал один байт. 

Хотя ASCII было достаточно для передачи информации на английском, для других европейских языков, содержащих символы с ударениями, это было не так просто. Для них был разработаны стандарты семейства ISO 8859. Они были обратно совместимы с ASCII, но использовали восьмой бит для дополнения таблицы дополнительными 127 символами для каждой кодировки. Скоро стали видны и ограничения ISO 8859. На данный момент существует 15 вариантов стандарта ISO 8859 (от 8859-1 до 8859-15). Однако для каждого символа вне ASCII-совместимого диапазона между этими стандартами возникал конфликт. Чтобы еще больше усилить конфликт между различными кодировками, для восточноевропейских языков корпорацией Microsoft был введен набор Windows-1252, использованный в ранних версиях Windows. Этот набор является надстройкой ISO 8859-1, обладающий собственными изменениями. Однако все же эти наборы были совместимы с ASCII. 

Необходимость разработки совершенно отличных от ASCII однобайтовых кодировок для нелатинских алфавитов, как например EUC (Extended Unix Coding), используемый в японском и корейском (и в меньшей степени китайском) алфавитах, породила еще большую неразбериху с кодировками. Ряд операционных систем все еще использует различные наборы символов для одного и того же языка, например японские Shift-JIS и ISO-2022-JP. А пользователи, желающие видеть кириллицу, вынуждены были выбирать между KOI8-R (для русского и болгарского языков) и KOI8-U (для украинского языка), неудачной ISO 8859-5 и популярной Windows-1251. Все три семейства кодировок не полностью совместимы с ASCII. Хотя надо отметить, в KOI8 фонетически созвучные кириллические символы расположены так же, как и латинские, благодаря чему даже при отбрасывании восьмого бита текст оставался читабельным в ASCII-терминалах в виде транслита. 

Все это привело к путанице и почти полной невозможности многоязычного общения; в особенности с использованием различных алфавитов. Переходим к Юникоду. 

=== Что такое Юникод? ===

Юникод отбрасывает лимит традиционных однобайтовых кодировок. Он использует 17 "плоскостей", содержащих по 65,536 кодов символов. Таким образом, максимальное возможное число символов равно 1,114,112. Поскольку в первой плоскости ("Basic Multilingual Plane" или BMP) содержится почти всё, что может понадобиться, многие ошибочно посчитали, что Юникод это 16-битный набор символов. 

Юникод реализован несколькими способами, но распространены только два '''UTF''' (Unicode Transformation Format) и '''UCS''' (Universal Character Set). Число после UTF обозначает число бит на каждый символ, когда как число после UCS обозначает число байт. UTF-8 стала наиболее распространенной при обмене текста Юникод из-за своей явной ориентированности на размер в 8 бит; поэтому является основной темой данного документа.

=== Что UTF-8 может сделать ===

UTF-8 позволяет пользователям работать в совместимой со всеобщими стандартами и принятой по всему миру многоязычной среде, правда с небольшим увеличением размера данных. Это наилучший способ для передачи не-ASCII символов через интернет, будь то электронная почта, IRC-сети или что-нибудь еще. Несмотря на это, множество людей расценивают использование UTF-8 при передаче данных неприличным и неуважительным. Всегда следует выяснять, поддерживает ли определенный канал, группа Usenet или список рассылки UTF-8 перед тем, как использовать символы из ''не-ASCII'' диапазона UTF-8. 

== Включение UTF-8 в Gentoo Linux ==

=== Поиск или создание локалей UTF-8 ===

Теперь, когда принципы лежащие в основе Unicode были изложены, начнем использовать UTF-8 на локальной системе!

Пользователям, которым нужна более детальная информация, могут найти ее в статье [[Localization/Guide/ru|Руководство по локализации Gentoo]]. 

Далее, нужно определить, доступна ли локаль UTF-8 для нашего языка или придётся создать её.

{{Cmd|locale -a {{!}} grep 'ru_RU'|output=<pre>
ru_RU
ru_RU.iso88595
ru_RU.koi8r
ru_RU.utf8
</pre>
}}

На выходе этой команды мы должны получить хотя бы одну строку, содержащую суффикс <code>.utf8</code>. Если таковых нет, то нам придётся создать локаль, совместимую с UTF-8. 

{{Note|Запускайте следующую команду, если в система не имеет UTF-8 локали для выбранного языка.}}

Замените "ru_RU", если нужна какая-то другая локаль:
{{RootCmd|localedef -i ru_RU -f UTF-8 ru_RU.utf8}}

Другим способом включить локаль UTF-8 является добавление её в файл {{Path|/etc/locale.gen}} и генерация нужных локалей, используя команду <tt>locale-gen</tt>. Локали будут записаны в архив локалей {{Path|/usr/lib/locale/locale-archive}}.

{{CodeBox|title=Строка в /etc/locale.gen|1=
ru_RU.UTF-8 UTF-8
}}

{{RootCmd|locale-gen|output=<pre>
 * Generating 1 locales (this might take a while) with 1 jobs
 *  (1/1) Generating ru_RU.UTF-8 ...                            [ ok ]
 * Generation complete
</pre>}}

=== Настройка локали ===

There is one environment variable that needs to be set in order to use the new UTF-8 locales: <code>LC_CTYPE</code> (optionally modify the <code>LANG</code> variable to change the system language as well). There are also many different ways to set it; some system administrators prefer to only have a UTF-8 environment for a specific user, in which case they set them in their {{Path|~/.profile}} (<tt>/bin/sh</tt> for Bourne shell users), {{Path|~/.bash_profile}} or {{Path|~/.bashrc}} (<tt>/bin/bash</tt> for Bourne again shell users). More details and best practices can be found in the [[Localization/Guide|Localization Guide]]. 

Другие же предпочитают установить локаль глобально. Есть по крайней один весомый аргумент в пользу этого подхода - при использовании {{Path|/etc/init.d/xdm}}, так как сценарии инициализации запускают диспетчер окон до того, как будут загружены конфигурационные файлы командной оболочки. Другими словами, это выполняется до того момента, как какие-либо переменные попадут в окружение пользователя. 

Настройка локали глобально делается с помощью файла {{Path|/etc/env.d/02locale}}. Он должен выглядеть следующим образом: 

{{CodeBox|title=Демонстрация /etc/env.d/02locale|lang=bash|1=
## (Как обычно, замените "ru_RU.UTF-8" на нужную локаль)
LANG="ru_RU.UTF-8"
}}

{{Note|Можно также указывать <code>LC_CTYPE</code> вместо <code>LANG</code>. За дополнительными сведениями о категориях, на которые влияет использование <code>LC_CTYPE</code>, обращайтесь к 
[http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html#Locale-Categories странице локалей GNU].}}

Далее следует обновить среду переменных. 

{{RootCmd|env-update|output=<pre>
>>> Regenerating /etc/ld.so.cache...
 * Caching service dependencies ...
</pre>}}
{{RootCmd|source /etc/profile}}

Теперь запустите <tt>locale</tt> без аргументов, чтобы увидеть, что верные переменные были загружены в окружающую среду переменных: 

{{RootCmd|locale|output=<pre>
LANG=ru_RU.UTF-8
LC_CTYPE="ru_RU.UTF-8"
LC_NUMERIC="ru_RU.UTF-8"
LC_TIME="ru_RU.UTF-8"
LC_COLLATE="ru_RU.UTF-8"
LC_MONETARY="ru_RU.UTF-8"
LC_MESSAGES="ru_RU.UTF-8"
LC_PAPER="ru_RU.UTF-8"
LC_NAME="ru_RU.UTF-8"
LC_ADDRESS="ru_RU.UTF-8"
LC_TELEPHONE="ru_RU.UTF-8"
LC_MEASUREMENT="ru_RU.UTF-8"
LC_IDENTIFICATION="ru_RU.UTF-8"
LC_ALL=
</pre>
}}

===Альтернативный метод: использование eselect для настройки локали===
То, что было написано выше, достаточно, чтобы хорошо настроить систему, так же можно проверить правильность настройки локали с помощью утилиты <tt>eselect</tt>.

Используйте команду <tt>eselect</tt>, чтобы получить список доступных локалей в системе:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX *
  [3] ru_RU.utf8
  [ ] (free form)
</pre>
}}

Утилита <tt>eselect</tt> выводит список локалей. После того, как нужная локаль была определена, активируйте ее:

{{RootCmd|eselect locale set 3 |output=<pre>
Setting LANG to ru_RU.utf8 ...
</pre>
}}

Проверим результат:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] ru_RU.utf8 *
  [ ] (free form)
</pre>
}}

In case it is preferred to have {{Path|/etc/env.d/02locale}} with <code>.UTF-8</code> instead of <code>.utf8</code>, run the appropriate <tt>eselect</tt> command:

{{RootCmd|eselect locale set ru_RU.UTF-8 |output=<pre>
Setting LANG to ru_RU.UTF-8 ...
</pre>
}}

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8
  [4] en_GB.UTF-8 *
  [ ] (free form)
</pre>
}}

Запуск следующей команды обновит переменное окружение для shell:

{{RootCmd|env-update && source /etc/profile |output=<pre>
>>> Regenerating /etc/ld.so.cache...
</pre>
}}

Вот и всё. Теперь система использует локаль UTF-8. Следующим этапом будет настройка повседневно используемых приложений.

== Поддержка приложениями ==

Когда Юникод делал первые шаги в мире программного обеспечения, многобайтовые кодировки были плохо совместимы с таким языком программирования как C, на котором написаны многие из часто используемых программ. Даже сейчас некоторые программы не способны работать с UTF-8 как надо. К счастью, большинство распространенных программ поддерживают Юникод. 

=== Имена файлов, NTFS и FAT ===

В конфигурационном меню ядра Linux есть множество параметров NLS, но главное не паниковать. В большинстве случаев всё, что нужно это включить поддержку UTF-8 NLS в ядре и изменить переменную NLS со значения по умолчанию на utf8. 

{{KernelBox|title=Шаги настройки UTF-8 NLS для ядра|<pre>
File Systems -->
  Native Language Support -->
    (utf8) Default NLS Option
    <*> NLS UTF8
    ## (Также пометьте <*> другие наборы символов, которые вы используете
    в файловой системе FAT или Joilet для CD-ROM.)
</pre>
}}

Если требуется подключить разделы NTFS, то пользователю при подключении понадобиться указать специальный параметр <code>nls=</code>. Если требуется подключить разделы FAT, нужно указать при монтировании параметр <code>codepage=</code>. Также можно установить для FAT кодовую страницу по умолчанию при конфигурации ядра.

{{Note|Помните, что параметр <code>codepage</code>, указанный вместе с командой <code>mount</code>, будет иметь приоритет над настройками ядра.}}

{{KernelBox|title=Настройки FAT в конфигурации ядра|<pre>
File Systems -->
  DOS/FAT/NT Filesystems  -->
    (437) Default codepage for fat
</pre>
}}

Не устанавливайте <code>Default iocharset for fat</code> в UTF-8, так как это не рекомендуется. Вместо этого укажите параметр <code>utf8=true</code> при монтировании раздела FAT. Для более детальной информации, смотрите <tt>man mount</tt> или смотрите соответствующую документацию ядра расположенную в {{Path|/usr/src/linux/Documentation/filesystems/vfat.txt}}.

Чтобы сменить кодировку имен файлов, используйте {{Package|app-text/convmv}}. 

{{Emerge|app-text/convmv}}

Команда <tt>convmv</tt> имеет следующий формат:

{{RootCmd|convmv -f <текущая кодировка> -t utf-8 <имя файла>}}

Substitute iso-8859-1 with the charset being converted from:

{{RootCmd|convmv -f koi8-r -t utf-8 имя_файла}}

Для изменения ''содержимого'' файлов, используйте утилиту <tt>iconv</tt>, поставляемую вместе с {{Package|sys-libs/glibc}} и уже должна быть установлена в системе Gentoo. Замените koi8-r кодировкой, с которой хотите конвертировать. После запуска команды убедитесь в нормальном выходе:

{{RootCmd|iconv -f koi8-r -t utf-8 имя_файла}}

Чтобы конвертировать файл, нужно создать другой файл:

{{RootCmd|iconv -f koi8-r -t utf-8 имя_файла > новый_файл}}

Также для перекодировки может быть использован пакет ({{Package|app-text/recode}}).

=== Системная консоль ===

{{Important|Необходим пакет {{Package|sys-apps/baselayout}}-1.11.9 (или выше) для поддержки Юникода в консоли.}}

Для поддержки консолью локали UTF-8 нужно отредактировать {{Path|/etc/rc.conf}}. Установите переменную <code>UNICODE="yes"</code> и прочтите комментарии в этом файле -- важно, чтобы в системе были шрифты с нужным диапазоном символов, если хотите выжать из Юникода всё. Чтобы это сработало, удостоверьтесь, что локаль Unicode была правильно создана. 

В файле {{Path|/etc/conf.d/keymaps}} переменной <code>KEYMAP</code> должна соответствовать раскладке Unicode. 

{{CodeBox|title=Выдержка из /etc/conf.d/keymaps|lang=bash|1=
## (Замените ru4 на любимую раскладку)
keymap="ru4"
}}

=== Ncurses и Slang ===

{{Note|Игнорируйте любые упоминания о Slang в этом разделе, если он не установлен или не нужен.}}

It is wise to add <code>unicode</code> to the global USE flags in {{Path|/etc/portage/make.conf}}, and then to re-emerge {{Package|sys-libs/ncurses}} and {{Package|sys-libs/slang}}. Portage will do this automatically if the <code>--changed-use</code> or <code>--newuse</code> options are used. Run the following command to pull in the packages: 

{{RootCmd|emerge --update --deep --newuse world}}

Также понадобится пересобрать пакеты, зависящие от них, раз изменения USE	вступили в силу. Используемая утилита (<code>revdep-rebuild</code>) входит в пакет {{Package|gentoolkit}}. 

{{RootCmd|revdep-rebuild --soname libncurses.so.5
|revdep-rebuild --soname libslang.so.1}}

=== KDE, GNOME и Xfce ===

Все основные графические оболочки полностью совместимы с Юникодом и не требуют дополнительной настройки, кроме той, что описана в этом документе. Все это	благодаря тому, графические библиотеки (Qt и GTK+2) совместимы с UTF-8. Следовательно, все приложения, работающие на основе этих библиотек, также должны поддерживать UTF-8 без дополнительных настроек. 

On GTK+ based applications, the key sequence for hexadecimal Unicode input is <kbd>Ctrl-Shift-u<hex digit></kbd>.

Исключением в этом правиле является Xlib и GTK+1. GTK+1 требует iso-10646-1 FontSpec в ~/.gtkrc, например <code>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</code>. Также приложения, использующие Xlib или Xaw, нуждаются в подобной FontSpec, иначе они не буду работать. 

{{Note|If an old gnome1 control center version is available, use that instead. Pick any iso10646-1 font from there.}}

{{CodeBox|title=Пример ~/.gtkrc (для GTK+1), определяющий Юникод-совместимый шрифт|1=
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
}}

Если приложение одинаково поддерживает Qt и GTK+2, то обычно GTK+2 GUI выдает лучшие результаты при работе с Юникодом.

=== X11 и шрифты ===

TrueType fonts have support for Unicode, and most of the fonts that ship with Xorg have extensive character support, although, obviously, not every single glyph available in Unicode has been created for that font. 

Also, many font packages in Portage are Unicode aware. See the [[Fontconfig]] page for more information on recommended fonts and configuration.

=== Диспетчеры окон и эмуляторы терминалов ===

Window managers not built on GTK+ or Qt generally have very good Unicode support, as they often use the Xft library for handling fonts. If the window manager does not use Xft for fonts, then it is still possible to use the FontSpec mentioned in the previous section as a Unicode font. 

Эмуляторы терминала, использующие Xft и поддерживающие Юникод найти сложнее. Кроме Konsole и gnome-terminal, лучшим выбором в Portage будет {{Package|x11-terms/rxvt-unicode}}, {{Package|x11-terms/xfce4-terminal}}, {{Package|gnustep-apps/terminal}}, {{Package|x11-terms/mlterm}} или просто {{Package|x11-terms/xterm}}, собранный с USE-флагом <code>unicode</code> и запускаемый как <code>uxterm</code>. {{Package|app-misc/screen}} тоже поддерживает UTF-8, если запускается с параметром <code>screen -U</code>, или в файле {{Path|~/.screenrc}} есть следующая строчка: 

{{CodeBox|title=~/.screenrc для UTF-8|1=
defutf8 on
}}

=== Vim, emacs, xemacs и nano ===

[[Vim#Change_file_encoding|Vim]] provides full UTF-8 support, and also has builtin detection of UTF-8 files. For further information in [[Vim#Change_file_encoding|Vim]], use <code>:help mbyte.txt</code> . 

[[GNU Emacs]] с версии 23 и [[XEmacs]] версии 21.5 имеют полную поддержку UTF-8. GNU Emacs 24 также поддерживает редактирование текста в обоих направлениях. 

Nano полностью поддерживает UTF-8 начиная с версии 1.3.6.

=== Командные оболочки ===

На данный момент <code>bash</code> полностью поддерживает Юникод через библиотеку GNU readline. Z Shell (<tt>zsh</tt>) поддерживает Unicode при использовании USE-флага <code>unicode</code>. 

Оболочки C, <tt>tcsh</tt> и <tt>ksh</tt> не поддерживают UTF-8.

=== Irssi ===

Irssi полностью поддерживает UTF-8, хотя для этого требуется дополнительная настройка пользователем. 

{{Cmd|set term_charset UTF-8|prompt=[irssi] }}

Для каналов, где не-ASCII символы чаще всего передаются в не-UTF-8 кодировках, может пригодиться команда <code>/recode</code> для перекодировки символов. Наберите <code>/help recode</code> для большего количества информации. 

=== Mutt ===

The Mutt mail user agent has very good Unicode support. To use UTF-8 with Mutt, nothing needs to be put in the configuration files. Mutt will work under Unicode environment without modification if all the configuration files (signature included) are UTF-8 encoded. 

{{Note|It is still possible to see '?' in mails read with Mutt. This is a result of people using a mail client which does not indicate the used charset. There is little one can do about this than to ask them to configure their client correctly.}}

Для более детальной информации смотри [http://wiki.mutt.org/index.cgi?MuttFaq/Charset Mutt Wiki]. 

=== Man ===

Man pages are an integral part of any Linux machine. To ensure that any unicode in the man pages render correctly, edit {{Path|/etc/man.conf}} and replace a line as shown below. 

{{CodeBox|title=Изменения man.conf для поддержки Юникода|1=
## (Это старая строка)
NROFF           /usr/bin/nroff -Tascii -c -mandoc
## (Замените ее этой)
NROFF           /usr/bin/nroff -mandoc -c
}}

=== links и elinks ===

Это самые популярные текстовые браузеры, и вы узнаете, как установить поддержку UTF-8 для них. В <tt>elinks</tt> и <tt>links</tt> есть два способа сделать это — через меню Setup (Установки) браузера или отредактировав конфигурационный файл. Чтобы настроить параметры в самом браузере, откройте какой-нибудь сайт с помощью <tt>elinks</tt> или <tt>links</tt> и нажмите {{Key|Alt}}+{{Key|S}}. Вы попадете в меню настроек (Setup Menu), после чего выберите параметры терминала (Terminal options), или нажмите {{Key|T}}. Пролистайте вниз и выберите последний параметр <code>UTF-8 I/O</code>, нажав на {{Key|Enter}}. Затем сохраните и выйдите из меню. В <tt>links</tt> можно сделать тоже самое, нажав {{Key|Alt}}+{{Key|S}}, а затем {{Key|S}} для сохранения. Пример конфигурационного файла показан ниже. 

{{CodeBox|title=Enabling UTF-8 for elinks/links|1=
## (For elinks, edit /etc/elinks/elinks.conf or ~/.elinks/elinks.conf and
add the following line)
set terminal.linux.utf_8_io = 1

## (For links, edit ~/.links/links.cfg and add the following
line)
terminal "xterm" 0 1 0 us-ascii utf-8
}}

=== Samba ===

Samba это набор программ, реализующих протокол SMB (Server Message Block) для UNIX-систем (Mac, Linux и FreeBSD). Этот протокол также иногда упоминается как Common Internet File System (CIFS). Samba содержит также систему NetBIOS, используемую для предоставления доступа к файлам в Windows-сетях. 

Добавьте следующее в раздел [global]:
{{RootCmd|nano -w /etc/samba/smb.conf|output=<pre>
dos charset = 1255
unix charset = UTF-8
display charset = UTF-8
</pre>
}}

=== Проверка работоспособности ===

Есть множество сайтов, использующих UTF-8. {{Package|net-www/w3m}}, {{Package|net-www/links}}, {{Package|net-www/elinks}}, {{Package|net-www/lynx}} и все браузеры, основанные на движке Mozilla (включая Firefox), поддерживают UTF-8. Konqueror и Opera тоже полностью поддерживают UTF-8. 

When using one of the text-only web browsers, make absolutely sure a Unicode-aware terminal is used.

If certain characters are displayed as boxes with letters or numbers inside, then the current font does not have a character for the symbol or glyph that the UTF-8 wants. Instead, it displays a box with the hex code of the UTF-8 symbol. 

* [http://unicode-table.com/en/blocks/dingbats/ unicode-table.com]
* [http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html A W3C UTF-8 Test Page] 
* [http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm A UTF-8 test page provided by the University of Frankfurt]

=== Input methods ===

''Dead keys'' may be used to input characters in X that are not included on the keyboard. These work by pressing the right {{Key|Alt}} key (or in some countries, {{Key|AltGr}}) and an optional key from the non-alphabetical section of the keyboard to the left of the return key at once, releasing them, and then pressing a letter. The dead key should modify it. Input can be further modified by using the {{Key|Shift}} key at the same time as pressing the {{Key|AltGr}} and modifier. 

To enable dead keys in X, a layout needs to be selected that supports it. Most European layouts already have dead keys with the default variant. However, this is not true of North American layouts. Although there is a degree of inconsistency between layouts, the easiest solution seems to be to use a layout in the form "en_US" rather than "us", for example. The layout is set in {{Path|/etc/X11/xorg.conf}} like so: 

{{CodeBox|title=/etc/X11/xorg.conf snippet|lang=xorg_conf|1=
Section "InputDevice"
    Identifier "Keyboard0"
    Driver     "kbd"
    Option     "XkbLayout" "en_US" ## # Rather than just "us"
    ## (Other Xkb options here)
EndSection
}}

{{Note|The preceding change only needs to be applied when using a North American layout, or another layout where dead keys do not seem to be working. European users should have working dead keys as is.}}

This change will come into effect when the X server is restarted. To apply the change now, use the <tt>setxkbmap</tt> tool, for example, <tt>setxkbmap en_US</tt> . 

It is probably easiest to describe dead keys with examples. Although the results are locale dependent, the concepts should remain the same regardless of locale. The examples contain UTF-8, so to view them tell the browser to view the page as UTF-8, or have a UTF-8 locale already configured. 

Если одновременно нажать {{Key|AltGr}} и {{Key|[}}, отпустить, а затем нажать {{Key|a}}, получим символ 'ä'. Если одновременно нажать {{Key|AltGr}} и {{Key|[}}, а затем {{Key|e}}, получим 'ë'. Если одновременно нажать {{Key|AltGr}} и {{Key|;}}, затем {{Key|a}}, получим 'á'. Если одновременно нажать {{Key|AltGr}} и {{Key|;}}, затем {{Key|e}}, получим 'é'. <!-- for translating tool checker: ]] --> 

Если одновременно нажать {{Key|AltGr}}, {{Key|Shift}} и {{Key|[}}, отпустить их и нажать {{Key|a}}, получим скандинавскую 'å'. Аналогично, при одновременном нажатии {{Key|AltGr}}, {{Key|Shift}} и {{Key|[}}, отпускании ''только'' {{Key|[}} и повторном ее нажатии, мы получим '°'. Хотя этот символ (U+02DA) и похож на символ градуса (U+00B0), на самом деле он им не является. <!-- for translating tool checker: ]]] -->

Клавиша {{Key|AltGr}} может быть использована вместе с одной из алфавитных клавиш. Например, комбинация {{Key|AltGr}} и {{Key|m}} выводит греческую строчную букву мю. {{Key|AltGr}} и {{Key|s}} выводит немецкий символ эсцет и т. д. Множество европейцев захотят установить сочетание {{Key|AltGr}} и {{Key|4}} (или {{Key|E}} в зависимости от наклеек или гравировок на клавишах), выводящее символ Евро, '€' (так как на их клавиатурах он нанесен).

=== Ссылки ===

* [https://en.wikipedia.org/wiki/Unicode The Wikipedia entry for Unicode] 
* [https://en.wikipedia.org/wiki/UTF-8 The Wikipedia entry for UTF-8] 
* [http://www.unicode.org Unicode.org] 
* [http://www.utf-8.com UTF-8.com] 
* [http://www.ietf.org/rfc/rfc3629.txt RFC 3629] 
* [http://www.ietf.org/rfc/rfc2277.txt RFC 2277] 
* [http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF Characters vs. Bytes]
* [http://www.gnu.org/software/libc/manual/html_node/Locales.html Locales and Internationalization]

== Известные проблемы ==

=== Системные конфигурационные файлы (в /etc) ===

Большинство системных конфигурационных файлов (например, {{Path|/etc/fstab}}) не поддерживают UTF-8. Рекомендуется придерживаться набора символов ASCII при работе с этими файлами.

[[Category:Localization]] {{Migrated|originalauthors=Thomas Martin, Alexander Simonov, Shyam Mani, nightmorph}}
