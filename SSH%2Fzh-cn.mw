<languages />

{{Metadata|abstract=SSH (Secure Shell) 是一个加密的终端程序，用于替代类Unix操作系统上传统的telnet工具。}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
|{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) 是一个加密的终端程序，用于替代类Unix操作系统上传统的 [[Wikipedia:telnet|telnet]] 工具。

SSH已经发展成为一组软件系列，除了提供用于远程终端访问的 <tt>ssh</tt> 这个主要的程序，还包括其他的工具如 <tt>scp</tt>('''s'''ecure '''c'''o'''p'''y) 和 <tt>sftp</tt> ('''s'''ecure '''f'''ile '''t'''ransfer '''p'''rotocol)。

最初，SSH并不是免费的。然而，当今最流行并成为实际标准的SSH实现是 [http://www.openbsd.org/ OpenBSD] 的OpenSSH，它在Gentoo中已预安装。

== 安装 ==

=== 检查安装 ===

绝大多数的 Gentoo Linux 系统都已经预装了 OpenSSH。可以通过运行 <tt>ssh</tt> 命令进行检查。如果已经安装，会输出使用说明：

{{Cmd|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

如果没有输出使用说明，那么 ssh 要么损坏了要么没有安装。也有可能是用户添加了新的 USE 配置之后正在重新编译 OpenSSH。无论何种情况，请继续查看可能的 USE 设定。

=== USE flags ===

{{USEflag|package=net-misc/openssh|desc=The {{Package|net-misc/openssh}} package is capable of the following USE flags:
|bindist
|hpn
|pam
|tcpd
|kerberos
|ldap
|libedit
|selinux
|skey
|static
|X
|X509
}}

=== 安装 OpenSSH ===

在修改了必要的 USE 标志之后，不要忘记安装（或重装） OpenSSH：

{{emerge|net-misc/openssh|params+=--changed-use}}

== 运行 OpenSSH ==

=== 服务器端 ===
OpenSSH 服务器可以通过 '''/etc/init.d/ssh start'''，'''/etc/init.d/ssh stop''' 和 '''/etc/init.d/ssh restart''' 来控制，就像其它 [[OpenRC]] 管理的服务一样。

将 openssh 添加到默认的运行级别，如果之前没有做的话：

{{RootCmd|rc-update add sshd default}}

用下面的命令启动 sshd 守护进程：

{{RootCmd|/etc/init.d/sshd start}}

OpenSSH服务器可以像其他的由[[OpenRC]]管理的服务那样控制：

{{RootCmd|/etc/init.d/sshd start
|/etc/init.d/sshd stop
|/etc/init.d/sshd restart}}

{{Note/zh-cn|<tt>/etc/init.d/sshd restart</tt> 并不会影响到正在运行的到服务器端的SSH连接。}}

== 配置 ==

=== 创建密钥 ===

为了提供一个安全的 shell，加密的密钥用于管理 SSH 提供的加密、解密和哈希功能。

在第一次启动 SSH 服务的时候，会生成系统密钥。密钥可以使用 <tt>ssh-keygen</tt>（重新）生成。

{{Important/zh-cn|记得把下面例子中的 <code>SecretPassphrase</code> 替换成你自己的密码。}}

To generate the key used for SSH protocol version 1 (which usually is not enabled anymore; it has been deprecated in favor of protocol version 2) use:

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "<SecretPassphrase>"}}

生成SSH协议2的密钥（DSA和RSA算法）：

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N "<SecretPassphrase>"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "<SecretPassphrase>"}}

=== 服务器端配置 ===

SSH服务器配置文件通常是 {{Path|/etc/ssh/sshd_config}}，虽然也有可能通过OpenRC的{{Path|/etc/conf.d/sshd}}文件进行进一步的配置，包括修改配置文件的位置。关于如何配置服务器的详细信息请参考''sshd_config'' [[man page]]。

Users should study [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Sven's OpenSSH guide] for a security focused configuration.

=== 客户端配置 ===

The <tt>ssh</tt> client and related programs (<tt>scp</tt>, <tt>sftp</tt>, etc.) can be configured using the following files:
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

For more information read the {{Path|ssh_config}} manual:

{{Cmd|man ssh_config}}

=== 无密码验证 ===

对于管理 [[git]] 服务器非常便利。

==== 客户端 ====

在客户端执行下面的命令：

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . : . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== 服务器 ====

确保服务器上存在用户的帐号，然后把客户端的{{Path|id_rsa.pub}}文件拷贝到服务器端的{{Path|~/.ssh/authorized_keys}}文件。

==== Single machine testing ====

上面的步骤可以在本地测试：

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

== 故障排除 ==

There are 3 different levels of debug modes that can help troubleshooting issues. With the <code>-v</code> option SSH prints debugging messages about its progress. This is helpful in debugging connection, authentication, and configuration problems. Multiple <code>-v</code> options increase the verbosity. Maximum verbosity is three levels deep.

{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== Death of long-lived connections ===

Many internet access devices perform Network Address Translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network. Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, even though the <tt>ssh</tt> client program has not exited.

In order to resolve the issue, OpenSSH clients and servers can be configured to send a 'keep alive', or invisible message aimed at maintaining and confirming the live status of the link.
* To enable keep alive ''for all clients connecting to your local server'', set <code>ClientAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/sshd_config}} file.
* To enable keep alive ''for all servers connected to by your local client'', set <code>ServerAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/ssh_config}} file.

=== X11 forwarding, not forwarding, or tunneling ===

'''Problem''': After having made the necessary changes to the configuration files for permitting X11 forwarding, it is discovered X applications are executing on the server and are not being forwarded to the client.

'''Solution''': What is likely occurring during SSH login into the remote server or host, the <code>$DISPLAY</code> variable is either being unset or is being set ''after'' the SSH session sets it.

Test for this scenario perform the following after logging in remotely:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

The output should be something similar to <code>localhost:10.0</code> or <code>localhost2.local:10.0</code> using server side <code>X11UseLocalhost no</code> setting. If the usual <code>:0.0</code> is not displayed, check to make sure the <code>$DISPLAY</code> variable within {{Path|~/.bash_profile}} is not being unset or re-initializing. If it is, remove or comment out any custom initialization of <code>$DISPLAY</code> to prevent the code in {{Path|~/.bash_profile}} from executing during a SSH login:

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

{{Note|Be sure to substitute "larry" in the command above with the proper username.}}

A trick that works to complete this task would be to define an alias within the users' {{Path|~/.bashrc}} file.

== Intrusion prevention ==
SSH is a commonly attacked service. Tools such as [[sshguard]] and [[fail2ban]] monitor logs and black list remote users who have repeatedly attempted, yet failed to login. Utilized them as needed to secure a frequently attacked system.

== See also ==
* [[Keychain|Gentoo Linux Keychain Guide]]
* [[autossh]] - Detects when SSH connections drop and auto-reconnects.

== External resources ==
* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo documentation, have a look at all 3 parts.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
