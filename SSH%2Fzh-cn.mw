<languages />

{{Metadata|abstract=SSH (Secure Shell) 是一个加密的终端程序，用于替代类Unix操作系统上传统的telnet工具。}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) 是一个加密的终端程序，用于替代类Unix操作系统上传统的 [[Wikipedia:telnet|telnet]] 工具。

除了用于远程终端访问的'''ssh'''这个主要的二进制文件，SSH已经逐渐扩展成为一套包括像 '''scp''' ('''s'''ecure '''c'''o'''p'''y) 和 '''sftp''' ('''s'''ecure '''f'''ile '''t'''ransfer '''p'''rotocol)等工具的套件。

最初，SSH 并不是免费的。然而，现今最流行并成为实际标准的 SSH 实现是 [http://www.openbsd.org/ OpenBSD] 的 OpenSSH，它在 Gentoo 中已预安装。

== 安装 ==

多数的部署已经安装了OpenSSH(通过{{Package|net-misc/openssh}}软件包)。这个软件包使用的USE标记如下：

{{USEflag|package=net-misc/openssh
|bindist
|hpn
|pam
|tcpd
|kerberos
|ldap
|libedit
|selinux
|skey
|static
|X
|X509
}}

修改USE标记之后，不要忘记重新编译OpenSSH:

{{emerge|net-misc/openssh}}

== 运行 OpenSSH ==

=== 服务器端 ===
OpenSSH 服务器可以通过 '''/etc/init.d/ssh start'''，'''/etc/init.d/ssh stop''' 和 '''/etc/init.d/ssh restart''' 来控制，就像其它 [[OpenRC]] 管理的服务一样。

将openssh添加到默认的运行级别，如果之前没有做的话。

{{RootCmd|rc-update add sshd default}}

用下面的命令启动sshd守护进程：

{{RootCmd|/etc/init.d/sshd start}}

OpenSSH服务器可以像其他的由[[OpenRC]]管理的服务那样控制：

{{RootCmd|/etc/init.d/sshd start
|/etc/init.d/sshd stop
|/etc/init.d/sshd restart}}

{{Note/zh-cn|<code>/etc/init.d/sshd restart</code>并不会影响到正在运行的到服务器端的SSH连接。}}

== 配置 ==

=== 创建密钥 ===

为了提供一个安全的shell，加密的密钥用于管理SSH提供的加密，解密和哈希功能。 

在第一次启动SSH服务的时候，会生成系统密钥。密钥可以使用<code>ssh-keygen</code>（重新）生成。

{{Note/zh-cn|将例子中的<code>SecretPassphrase</code>替换成你自己的密码。}}

生成用于SSH协议版本1的密钥（通常并不启用，因为已经被废弃，取而代之的是协议版本2）：

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "SecretPassphrase"}}

生成SSH协议2的密钥（DSA和RSA算法）：

{{RootCmd|/usr/bin/ssh-keygen -d -f /etc/ssh/ssh_host_dsa_key -N "SecretPassphrase"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "SecretPassphrase"}}

=== 服务器端配置 ===

SSH服务器配置文件通常是 {{Path|/etc/ssh/sshd_config}}，虽然也有可能通过OpenRC的{{Path|/etc/conf.d/sshd}}文件进行进一步的配置，包括修改配置文件的位置。关于如何配置服务器的详细信息请参考''sshd_config'' [[man page]]。

您应当也看一看这份偏重于安全的[https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html 指南]。

=== 客户端配置 ===

'''ssh''' 客户端与相关的程序（'''scp'''，'''sftp''' 等等）可以通过下面的文件进行配置：
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

For more information read the <code>ssh_config</code> manual:

{{Cmd|man ssh_config}}

=== 无密码验证 ===

对于管理 [[git]] 服务器非常便利。

==== Client ====

On the client run the following command:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== 服务器 ====
添加一个用户

Make sure an account for the user exists on the server, and then place the clients' {{Path|id_rsa.pub}} file into the {{Path|~/.ssh/authorized_keys}} file.

==== 单机测试 ====
{{Cmd|ssh-keygen -t rsa}}
敲击 5 次回车

The above procedure can be tested out locally:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}
{{Cmd|ssh localhost}}

{{Cmd|ssh localhost}}

== Troubleshooting ==

There are 3 different levels of debug modes that can help troubleshooting issues. With ''-v'' ssh prints debugging messages about its progress.  This is helpful in debugging connection, authentication, and configuration problems.  Multiple -v options increase the verbosity.  The maximum is 3.

{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== Death of Long-lived Connections ===

Many internet access devices perform network address translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network.  Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, though the '''ssh''' client program has not exited.

In order to resolve the issue, OpenSSH clients and servers can be configured to send a 'keep alive', or invisible message aimed at maintaining and confirming the live status of the link.
* To enable keep alive '''for all clients connecting to your local server''', set ''ClientAliveInterval 30'' (or some other value, in seconds) within the {{Path|/etc/ssh/sshd_config}} file.
* To enable keep alive '''for all servers connected to by your local client''', set ''ServerAliveInterval 30'' (or some other value, in seconds) within the {{Path|/etc/ssh/ssh_config}} file.

=== X11 Forwarding Not Forwarding or Tunneling! ===

<b>Problem</b>: After you have made the necessary changes to the configuration files for permitting X11 Forwarding, you find X applications are executing on the server and are not being forwarded to the client.

<b>Solution</b>: What is likely occurring during SSH login into the remote server or host, the <code>$DISPLAY</code> variable is either being unset or is being set after the SSH session sets it.

Test for this scenario as follows after logging in remotely:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

You should get something similar to "localhost:10.0" or "localhost2.local:10.0" using server side <code>X11UseLocalhost no</code> setting.  If you're getting the usual ":0.0", check to make sure you are not unsetting or initializing the <code>$DISPLAY</code> variable within {{Path|$HOME/.bash_profile}}. If so, remove or comment your custom initialization of <code>$DISPLAY</code> or prevent {{Path|bash_profile}} from executing during SSH login:

{{Cmd|ssh -t me@localhost2 bash --noprofile}}

A trick would be to alias this within {{Path|bashrc}}.

== 参考 ==
* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo开发者文档
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo文档, 请将全部的3部分都看一下
* [http://www.gentoo.org/doc/en/keychain-guide.xml Gentoo Linux Keychain Guide]
* [[autossh]] - 侦测何时SSH连接被断开并自动重新连接


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
