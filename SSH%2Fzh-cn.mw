<languages />

{{Metadata|abstract=SSH (Secure Shell) 是一个加密的终端程序，用于替代类Unix操作系统上传统的telnet工具。}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
|{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) 是一个加密的终端程序，用于替代类Unix操作系统上传统的 [[Wikipedia:telnet|telnet]] 工具。

SSH已经发展成为一组软件系列，除了提供用于远程终端访问的 {{c|ssh}} 这个主要的程序，还包括其他的工具如 {{c|scp}}('''S'''ecure '''C'''opy '''P'''rogram) 和 {{c|sftp}} ('''S'''ecure '''F'''ile '''T'''ransfer '''P'''rotocol)。

最初，SSH并不是免费的。然而，当今最流行并成为实际标准的SSH实现是 [http://www.openbsd.org/ OpenBSD] 的OpenSSH，它在Gentoo中已预安装。

== 安装 ==

=== 检查安装 ===

Most deployments of Gentoo Linux will already have OpenSSH installed on the system. This can be checked by running the {{c|ssh}} command. If it is installed a usage statement should be printed:

{{Cmd|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

If no usage statement is printed {{c|ssh}} is either corrupted or not installed. It is also possible that a user is simply rebuilding OpenSSH to include a new USE configuration. Whatever the case, proceed on to view possible USE settings.

=== USE flags ===

{{USEflag|package=net-misc/openssh}}

=== Emerge ===

在修改了必要的 USE 标志之后，不要忘记安装（或重装） OpenSSH：

{{emerge|net-misc/openssh|params+=--changed-use}}

== 配置 ==

=== 创建密钥 ===

为了提供一个安全的 shell，加密的密钥用于管理 SSH 提供的加密、解密和哈希功能。

在第一次启动 SSH 服务的时候，会生成系统密钥。密钥可以使用 {{c|ssh-keygen}}（重新）生成。

生成用于 SSH 协议版本1的密钥（通常并不再使用，取而代之的是协议版本2）：

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N ""}}

生成SSH协议2的密钥（DSA和RSA算法）：

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N ""
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""}}

=== 服务器端配置 ===

SSH服务器配置文件通常是 {{Path|/etc/ssh/sshd_config}}，虽然也有可能通过OpenRC的{{Path|/etc/conf.d/sshd}}文件进行进一步的配置，包括修改配置文件的位置。关于如何配置服务器的详细信息请参考''sshd_config'' [[man page]]。

您也应该学习这篇偏重于安全配置的[https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Sven 的 OpenSSH 指南]。

=== 客户端配置 ===

The {{c|ssh}} client and related programs ({{c|scp}}, {{c|sftp}}, etc.) can be configured using the following files:

* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

更多的信息请阅读 {{Path|ssh_config}} 手册：

{{Cmd|man ssh_config}}

=== 无密码验证 ===

对于管理 [[git]] 服务器非常便利。

==== 客户端 ====

在客户端执行下面的命令：

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . : . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== 服务器 ====

确保服务器上存在用户的帐号，然后把客户端的 {{Path|id_rsa.pub}} 文件拷贝到服务器端用户 home 目录的 {{Path|~/.ssh/authorized_keys}} 文件。

==== 单机测试 ====

上面的步骤可以在本地测试：

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

=== Intrusion prevention ===

SSH is a commonly attacked service. Tools such as [[sshguard]] and [[fail2ban]] monitor logs and black list remote users who have repeatedly attempted, yet failed to login. Utilize them as needed to secure a frequently attacked system.

== Usage ==

=== Services ===

==== OpenRC ====

Add the OpenSSH daemon to the default runlevel:

{{RootCmd|rc-update add sshd default}}

Start the sshd daemon with:

{{RootCmd|rc-service sshd start}}

The OpenSSH server can be controlled like any other [[OpenRC]]-managed service:

{{RootCmd
|rc-service sshd start
|rc-service sshd stop
|rc-service sshd restart
}}

{{Note|Active SSH connections to the server remain unaffected when issuing {{c|rc-service sshd restart}}.}}

==== Systemd ====

To have the OpenSSH daemon start when the system starts:

{{RootCmd|systemctl enable sshd.service|output=<pre>
Created symlink from /etc/systemd/system/multi-user.target.wants/sshd.service to /usr/lib64/systemd/system/sshd.service.
</pre>}}

To start the OpenSSH daemon now:

{{RootCmd|systemctl start sshd.service}}

To check if the service has started:

{{RootCmd|systemctl status sshd.service}}

== Troubleshooting ==

有三种不同级别的调试模式可以帮助排除故障。配合 <code>-v</code> 参数 SSH 会输出关于其进度的调试信息。这有助于调试连接、验证和配置的问题。多个 <code>-v</code> 参数会增加调试信息的详细程度。最大的详细程度是三级。

{{Cmd
|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv
}}

=== 长连接被关闭 ===

Many internet access devices perform Network Address Translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network. Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, even though the {{c|ssh}} client program has not exited.

In order to resolve the issue, OpenSSH clients and servers can be configured to send a 'keep alive', or invisible message aimed at maintaining and confirming the live status of the link:

* To enable keep alive ''for all clients connecting to your local server'', set <code>ClientAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/sshd_config}} file.
* To enable keep alive ''for all servers connected to by your local client'', set <code>ServerAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/ssh_config}} file.

=== X11转发/隧道不工作 ===

'''问题''': 在对配置文件做了必要的修改以允许 X11 转发, 却发现 X 应用程序在服务器端执行却没有转发到客户端。

'''Solution''': What is likely occurring during SSH login into the remote server or host, the <var>DISPLAY</var> variable is either being unset or is being set ''after'' the SSH session sets it.

远程登录后按如下步骤测试这一现象：

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

The output should be something similar to <code>localhost:10.0</code> or <code>localhost2.local:10.0</code> using server side <code>X11UseLocalhost no</code> setting. If the usual <code>:0.0</code> is not displayed, check to make sure the <var>DISPLAY</var> variable within {{Path|~/.bash_profile}} is not being unset or re-initializing. If it is, remove or comment out any custom initialization of the <var>DISPLAY</var>variable to prevent the code in {{Path|~/.bash_profile}} from executing during a SSH login:

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

Be sure to substitute <code>larry</code> in the command above with the proper username.

一个小技巧是在用户的 {{Path|~/.bashrc}} 中将此命令定义为一个 alias。

== 参考 ==

*[[Security_Handbook/Securing_services#ssh|Securing the SSH service]] 在“Gentoo安全手册”中
* [Keychainl| Gentoo Linux Keychain Guide]
* [[autossh]] - 侦测何时SSH连接被断开并自动重新连接。
* [[SCP]] - SSH 自带的安全拷贝程序。
* [[SFTP]] - SSH 自带的安全文件传输协议客户端。
* [[SSHFS]] - 基于 FUSE 和 SSH 的挂载客户端。

== 外部资源 ==

* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
