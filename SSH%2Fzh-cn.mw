<languages />

{{Metadata|abstract=SSH (Secure Shell) 是一个加密的终端程序，用于替代类Unix操作系统上传统的telnet工具。}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
|{{InfoBox ohloh|openssh}}
}}
'''SSH''' ('''S'''ecure '''SH'''ell) 是一个加密的终端程序，用于替代类Unix操作系统上传统的 [[Wikipedia:telnet|telnet]] 工具。

SSH已经发展成为一组软件系列，除了提供用于远程终端访问的 <tt>ssh</tt> 这个主要的程序，还包括其他的工具如 <tt>scp</tt>('''S'''ecure '''C'''opy '''P'''rogram) 和 <tt>sftp</tt> ('''S'''ecure '''F'''ile '''T'''ransfer '''P'''rotocol)。

最初，SSH并不是免费的。然而，当今最流行并成为实际标准的SSH实现是 [http://www.openbsd.org/ OpenBSD] 的OpenSSH，它在Gentoo中已预安装。

== 安装 ==

=== 检查安装 ===

绝大多数的 Gentoo Linux 系统都已经预装了 OpenSSH。可以通过运行 <tt>ssh</tt> 命令进行检查。如果已经安装，会输出使用说明：

{{Cmd|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

如果没有输出使用说明，那么 ssh 要么损坏了要么没有安装。也有可能是用户添加了新的 USE 配置之后正在重新编译 OpenSSH。无论何种情况，请继续查看可能的 USE 设定。

=== USE flags ===

{{USEflag|package=net-misc/openssh|desc=The {{Package|net-misc/openssh}} package is capable of the following USE flags:
|bindist
|hpn+yes
|kerberos
|ldap
|ldns
|libedit
|pam+yes
|pie+yes
|selinux
|sctp+++Support for Stream Control Transmission Protocol
|skey
|static
|tcpd
|X
|X509
}}

=== 安装 OpenSSH ===

在修改了必要的 USE 标志之后，不要忘记安装（或重装） OpenSSH：

{{emerge|net-misc/openssh|params+=--changed-use}}

== 运行 OpenSSH ==

=== 服务器端 ===
OpenSSH 服务器可以通过 '''/etc/init.d/ssh start'''，'''/etc/init.d/ssh stop''' 和 '''/etc/init.d/ssh restart''' 来控制，就像其它 [[OpenRC]] 管理的服务一样。

将 openssh 添加到默认的运行级别，如果之前没有做的话：

{{RootCmd|rc-update add sshd default}}

用下面的命令启动 sshd 守护进程：

{{RootCmd|rc-service sshd start}}

OpenSSH服务器可以像其他的由[[OpenRC]]管理的服务那样控制：

{{RootCmd|rc-service sshd start
|rc-service sshd stop
|rc-service sshd restart}}

{{Note|Active SSH connections to the server remain unaffected when issuing <tt>rc-service sshd restart</tt>.}}

== 配置 ==

=== 创建密钥 ===

为了提供一个安全的 shell，加密的密钥用于管理 SSH 提供的加密、解密和哈希功能。

在第一次启动 SSH 服务的时候，会生成系统密钥。密钥可以使用 <tt>ssh-keygen</tt>（重新）生成。

生成用于 SSH 协议版本1的密钥（通常并不再使用，取而代之的是协议版本2）：

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "<SecretPassphrase>"}}

生成SSH协议2的密钥（DSA和RSA算法）：

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N "<SecretPassphrase>"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "<SecretPassphrase>"}}

=== 服务器端配置 ===

SSH服务器配置文件通常是 {{Path|/etc/ssh/sshd_config}}，虽然也有可能通过OpenRC的{{Path|/etc/conf.d/sshd}}文件进行进一步的配置，包括修改配置文件的位置。关于如何配置服务器的详细信息请参考''sshd_config'' [[man page]]。

您也应该学习这篇偏重于安全配置的[https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Sven 的 OpenSSH 指南]。

=== 客户端配置 ===

<tt>ssh</tt> 客户端与相关的程序（<tt>scp</tt>，<tt>sftp</tt> 等）可以通过下面的文件进行配置：
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

更多的信息请阅读 {{Path|ssh_config}} 手册：

{{Cmd|man ssh_config}}

=== 无密码验证 ===

对于管理 [[git]] 服务器非常便利。

==== 客户端 ====

在客户端执行下面的命令：

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . : . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== 服务器 ====

确保服务器上存在用户的帐号，然后把客户端的 {{Path|id_rsa.pub}} 文件拷贝到服务器端用户 home 目录的 {{Path|~/.ssh/authorized_keys}} 文件。

==== 单机测试 ====

上面的步骤可以在本地测试：

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

== 故障排除 ==

有三种不同级别的调试模式可以帮助排除故障。配合 <code>-v</code> 参数 SSH 会输出关于其进度的调试信息。这有助于调试连接、验证和配置的问题。多个 <code>-v</code> 参数会增加调试信息的详细程度。最大的详细程度是三级。

{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== 长连接被关闭 ===

许多互联网接入设备进行网络地址转换 ([[NAT]])，使在专用网络（典型的例子像家里或者某个营业场所）内的设备可以访问外部网络如互联网，尽管该设备只拥有专用网络上的一个IP地址。不幸的是，不是所有的NAT设备都是一样的，其中一些会错误的关闭那些长时间连接，不经常使用的TCP连接，比如SSH使用的连接。这一问题通常的表现是突然无法和远程的服务器交互，尽管 <tt>ssh</tt> 客户端程序并未退出。

OpenSSH的客户端和服务器可以被配置为发送一个'keep alive'，或不可见的消息，旨在保持并确认连接的实时状态。
* 要保证'''所有的客户端链接到你的本地服务器的连接'''都保持活跃，在{{Path|/etc/ssh/sshd_config}}文件中设置 <code>ClientAliveInterval 30</code> (或者其他的值，单位为秒)。
* 要保证'''你本地客户端到所有服务器的连接'''都保持活跃，在{{Path|/etc/ssh/ssh_config}}文件中设置 <code>ServerAliveInterval 30</code> (或者其他的值，单位为秒)。

=== X11转发/隧道不工作 ===

'''问题''': 在对配置文件做了必要的修改以允许 X11 转发, 却发现 X 应用程序在服务器端执行却没有转发到客户端。

'''解决办法''': 可能是在SSH登录到远程服务器或者主机的过程中，<code>$DISPLAY</code> 变量被取消了或者在 SSH session 设置这一变量''之后''又被重设了。

远程登录后按如下步骤测试这一现象：

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

如果服务器端设置了 <code>X11UseLocalhost no</code>，通常应该得到类似于 <code>localhost:10.0</code> 或者 <code>localhost2.local:10.0</code> 这样的结果。如果显示的不是 <code>:0.0</code>，请检查并确定没有在 {{Path|$HOME/.bash_profile}} 中取消了或者初始化了 <code>$DISPLAY</code> 变量。如果是的话，删除或者注释掉自定义初始化 <code>$DISPLAY</code> 的语句，以阻止 SSH 登录的时候执行 {{Path|bash_profile}} 中的代码：

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

{{Note/zh-cn|确保在上面的命令中替换 ''larry'' 为恰当的用户名。}}

一个小技巧是在用户的 {{Path|~/.bashrc}} 中将此命令定义为一个 alias。

== 入侵防御 ==

SSH 是一个经常被攻击的服务。像 [[sshguard]] 和 [[fail2ban]] 这样的工具会监控日志并将多次登录失败的远程用户加入黑名单。按照需要使用这些工具来确保一个经常被攻击的系统的安全。

== 参考 ==

* [Keychainl| Gentoo Linux Keychain Guide]
* [[autossh]] - 侦测何时SSH连接被断开并自动重新连接。
* [[SCP]] - SSH 自带的安全拷贝程序。
* [[SFTP]] - SSH 自带的安全文件传输协议客户端。
* [[SSHFS]] - 基于 FUSE 和 SSH 的挂载客户端。

== 外部资源 ==

* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo 开发者文档。
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo 文档，请3部分都看一下。


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
