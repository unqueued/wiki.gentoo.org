<languages />


Ce guide vous introduit à Java et vous explique comment l'utiliser avec Gentoo Linux.

== Qu'est-ce que Java ? ==

=== Vue d'ensemble ===

Java est un langage de programmation qui a été développé par les ingénieurs de Sun Microsystems. C'est un langage orienté objet et conçu pour être exécuté sur des plateformes multiples sans avoir à recompiler le code pour chacune des plateformes. Bien que Java puisse être compilé comme un programme natif, la popularité de Java est essentiellement attribuable à sa portabilité,  et à d'autres fonctionnalités comme la fonction ''éboueur''. Pour rendre possible l'indépendance de la plateforme, le compilateur Java compile le code en une représentation intermédiaire appelée ''Java bytecode'' qui tourne sur un environnement d'exécution Java ou JRE et pas directement sur le système d'exploitation. 

Afin d'exécuter le Java ''bytecode'', il faut avoir un environnement d'exécution Java (''Java Run Time Environment'' ou JRE) installé. Le JRE procure, parmi d'autres, les librairies du cœur, une machine virtuelle Java dépendante de la plateforme et des greffons pour les navigateurs. Un kit de développement Java (Java Development Kit ou JDK) ajoute des outils de programmation comme un compilateur de ''bytecote'' et un débogueur. 

== Installer une machine virtuelle  ==

=== Les choix possibles ===

Gentoo procure de nombreux environnement d'exécution (JREs) et kits de développement (JDKs). Dans les choix courants, nous trouvons : 

{| class="wikitable" style="text-align: left;" 
|- 
! Vendeur
! JDK
! JRE
|- 
| Le  IcedTea Open Java SE (anciennement icedtea6-bin)
| dev-java/icedtea-bin
| 
|- 
| Le  Java 7 SE d'Oracle
| dev-java/oracle-jdk-bin
| dev-java/oracle-jre-bin
|- 
| Le Java 6 SE de Sun
| dev-java/sun-jdk
| dev-java/sun-jre-bin
|- 
| Le Java SE d'IBM
| dev-java/ibm-jdk-bin
| dev-java/ibm-jre-bin
|-
|}

=== Installer un JRE/JDK ===

Pour installer le JDK par défaut de votre profil, exécutez  <code>emerge virtual/jdk</code>. Ou pour installer le  JRE par défaut de votre profil , exécutez <code>emerge virtual/jre</code>. 

Quelques JDKs et JREs, y compris les paquets de Sun, nécessitent que l'utilisateur accepte un contrat de licence utilisateur final CLUF (en anglais End User License Agreement ou EULA). Si cette licence (telle que dlj-1.1) n'est pas listée dans la variable ACCEPT_LICENSE dans  {{Path|/etc/portage/make.conf}}, vous ne serez pas en mesure d'installer le JDK/JRE. Pour savoir comment ajouter des licences acceptables à {{Path|make.conf}}, reportez-vous au [http://www.gentoo.org//doc/en/handbook/handbook-x86.xml?part=2&chap=1#doc_chap4 manuel de Portage] . 

Pour éviter le désagrément d'une licence trop restrictive, installez plutôt <code>icedtea-bin</code>, qui est une mise en œuvre libre de Java du projet OpenJDK. 

{{Note|Un JDK  comprend aussi un  JRE, c'est pourquoi, installer un JDK vous évite d'installer aussi un JRE.}}

=== Installer une machine virtuelle à recherche restreinte  ===

Quelques JDKs et JREs vous obligent à faire quelques explorations avant l'installation. Installez (avec emerge) les paquets comme vous le feriez normalement. Les ebuilds vous indiqueront où aller et quoi télécharger. 

Vous devriez télécharger les fichiers indiqués dans {{Path|/usr/portage/distfiles}} . Une fois ces fichiers en place, vous pouvez relancer la commande emerge  qui commencera alors à installer le JRE/JDK. 

== Configurer votre machine virtuelle  ==

=== Vue d'ensemble ===

Gentoo a la capacité à avoir plusieurs JDKs et JREs installés sans que cela ne crée de conflit. 

En utilisant l'outil <code>java-config</code>, vous pouvez définir la version par défaut applicable à tout le système  (à condition que vous ayez un accès super-utilisateur). Les utilisateurs peuvent également utiliser <code>java-config</code> pour définir leur propre version par défaut. 

{{Note|Vous pouvez aussi utiliser ''eselect'' pour changer la machine virtuelle au niveau du système ou de l'utilisateur. Reportez-vous  à  <code>eselect java-vm help</code>.}}

=== Définir une machine virtuelle par défaut ===

En exécutant la commande <code>java-config --list-available-vms</code> vous obtiendrez une liste de tous les JREs et JDKs installés sur votre système. Voici un exemple de sortie de cette commande : 

{{RootCmd|java-config --list-available-vms|output=<pre>
The following VMs are available for generation-2:
1-      IcedTea-bin 1.10.4 [icedtea-bin]
2-      Sun JDK 1.5.0.20 [sun-jdk-1.5] (Build Only)
*-      Sun JDK 1.6.0.16 [sun-jdk-1.6]
</pre>
}}


{{Note|Les machines virtuelles marquées ''Build Only'' peuvent contenir des vulnérabilités et/ou être en fin de vie. Gentoo vous recommande de ne pas choisir ces machines virtuelles comme machine virtuelle système ou utilisateur. Reportez-vous à  [http://www.gentoo.org/java.xml#build-only Build Only VM] pour plus d'information.}}

Le signe ''*'' indique la machine virtuelle courante (machine virtuelle système ou utilisateur lorsque définie). Le nom entre les crochets carrés (''[]'') est la poignée ou l'identifiant de cette machine virtuelle particulière. Vous pouvez utiliser la poignée ou le numéro pour la définir avec <code>java-config --set-system-vm</code>. Voici un exemple de comment définir la machine virtuelle système. 

Définir la machine virtuelle système à l'aide de la poignée (solution préférée):

{{RootCmd|java-config --set-system-vm sun-jdk-1.6|output=<pre>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>}}

Vous pouvez également la définir à l'aide des numéros.

{{RootCmd|java-config --set-system-vm 3|output=<pre>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>
}}

En tant qu'utilisateur ordinaire, vous pouvez utiliser <code>java-config --set-user-vm</code>. 

{{Note|Il n'est plus nécessaire d'exécuter  <code>source</code> du profil pour que la mise à jour de la machine virtuelle utilisateur/système prenne effet .}}

=== Machines virtuelles Build Only===

Quelques machines virtuelles sont marquées comme ''build-only'' (compilation seulement) parce qu'elles contiennent des vulnérabilités ou sont en fin de vie. Ces machines virtuelles ne seront pas utilisées automatiquement par Gentoo pour exécuter des applications à l'aide des lanceurs Gentoo, mais resteront disponibles pour l'environnement de compilation de Gentoo car certains paquets pourront encore en avoir besoin pour leur compilation. Définir ces machines virtuelles en tant que machine virtuelle par défaut (système ou utilisateur) est très fortement déconseillé car ces machines virtuelles seraient alors utilisées lors de l'exécution des exécutables  {{Path|/usr/bin/{java,javac,..}}} et seraient aussi utilisées par tout paquet n'utilisant pas les scripts de lancement de Gentoo. 

=== Machine virtuelle préférée pour la compilation ===

Lors de l'installation de paquets Java, la machine virtuelle utilisée pour la compilation peut parfois être différente de celle définie en tant que machine virtuelle  par défaut du système. 

Cette commutation de machine virtuelle lors de la compilation est nécessaire quand, par exemple, votre machine virtuelle système est définie à  1.6  et que le paquet que vous êtes en train d'installer nécessite une machine virtuelle 1.5. Lors de la compilation la machine 1.5  sera utilisée, sans toucher à votre choix de machine virtuelle par défaut du système. 

Pour définir quelle machine virtuelle sera choisie lorsqu'une commutation est nécessaire, nous avons créé une liste des machines virtuelles par défaut prises en charge par architecture. Vous les trouverez dans {{Path|/usr/share/java-config-2/config/jdk-defaults.conf}}. 

Vous pouvez supplanter ces machines par défaut (et même votre machine virtuelle système choisie) dans {{Path|/etc/java-config-2/build/jdk.conf}} et contrôler complètement quelle machine virtuelle sera utilisée pour l'installation.

Par exemple, pour utiliser <code>sun-jdk</code> dans tous les cas :

{{File|/etc/java-config-2/build/jdk.conf|Requérir sun-jdk|<pre>
*=sun-jdk
</pre>
}}

Ou utiliser  <code>sun-jdk-1.5</code> à chaque fois que possible, sauf lorsqu'une machine virtuelle  1.4 ou 1.3 est explicitement requise :

{{File|/etc/java-config-2/build/jdk.conf|Requérir sun-jdk-1.5 pour les machines virtuelles 1.5 |<pre>
*=sun-jdk-1.5
</pre>
}}

Ou utiliser différents fournisseurs pour différentes versions, comme requérir <code>sun-jdk-1.4</code>  si une machine 1.3 (j'ai bien dit, 1.3) est demandée,et se rabattre sur  <code>ibm-jdk-bin</code> dans les autres cas :

{{File|/etc/java-config-2/build/jdk.conf|Utiliser des expressions multiples |<pre>
1.3=sun-jdk-1.4 ibm-jdk-bin
1.5=sun-jdk
</pre>
}}


{{Warning/fr|Vous ''n'avez pas'' à éditer ce fichier. Si vous changez ces options pour utiliser une machine virtuelle non prise en charge, ça pourrait se passer mal. Comme il existe une grande variété de machines virtuelles disponibles, nous n'avons pas les ressources de vérifier que chacun des paquets fonctionne  sur chacune d'elles. Les bogues rapportés avec une machine virtuelle non prise en charge ne seront pas traités tant des bogues rapportés sur les machines virtuelles prises en charge existeront.}}

== Compilateurs ==

Le compilateur Java standard est utilisé pour la compilation est <code>javac</code>. Il est fourni avec chacun de JDK. En plus de configurer la machine virtuelle utilisée à la compilation, il est aussi possible de configurer quel compilateur sera utilisé. Pour aller à l'essentiel, vous définissez une liste de vos préférences de compilateur à utiliser dans {{Path|/etc/java-config-2/build/compilers.conf}}. 

{{File|/etc/java-config-2/build/compilers.conf|Définir les compilateurs préférés|<pre>
COMPILERS="ecj-X.Y jikes javac"
</pre>
}}

Quelques compilateurs ne prennent pas en charge tous les arguments -''target'' (cible)  et -source. De plus, chacun des compilateurs dans la liste est vérifié pour savoir s'il prend en charge les -source/-''target'' désirés. Le compilateur ''javac'' fonctionnera dans tous les cas, c'est pourquoi, si aucun autre compilateur convenable n'est trouvé, il sera utilisé. 

Plus de détails sur les différents compilateurs sont fournis ci-après : 

{| class="wikitable" style="text-align: left;" 
|- 
! Nom
! Poignée
! Paquet
! Description
|- 
| javac
| javac
| N/A
| C'est le compilateur utilisé par défaut qui arrive avec chaque JDK.
|- 
| jikes
| jikes
| dev-java/jikes
| Jikes a été développé à l'origine par  IBM. Paradoxalement, il est généralement plus pédant et qu'il plante dans quelques rares circonstances dans lesquelles javac ne rencontre pas de problème. Il ne prend pas encore en charge la syntaxe  Java 1.5.
|- 
| Compilateur pour Java d'Eclipse
| ecj
| dev-java/eclipse-ecj
| ECJ est le compilateur utilisé par le kit de développement Eclipse. Il est très riche de fonctionnalités et très rapide. Il ne prend pas en charge la syntaxe Java 1.5.
|-
|}

== Configurer un  CLASSPATH par défaut ==

{{Warning/fr|Les  options présentées dans cette section doivent être considérées comme en voie d'obsolescence et seront probablement retirées dans le futur. Nous recommandons fortement de ne pas les utiliser, parce que vos projets Java ou vos applications devraient, dans l'idéal, gérer leur propre 'classpath''.  Si vous choisissez de spécifier un CLASSPATH par défaut, quelques applications pourraient se comporter de manière inattendue, parce que des classes qu'elles n'attendaient pas, pourraient se trouver dans le ''classpath''.}}

<code>java-config</code> peut aussi être utilisé pour définir un CLASSPATH par défaut applicable à tout le système, aussi bien qu'un  CLASSPATH spécifique à un utilisateur. 

Tout d'abord, il vous faut lister les bibliothèques Java disponibles installées sur votre système qui pourraient être placées dans votre CLASSPATH. Voici un exemple de sortie : 

{{RootCmd|java-config --list-available-packages|output=<pre>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>
}}

De nouveau, le nom entre crochets carrés  (''[]'') est l'identifiant que vous devez passer à <code>java-config --set-system-classpath</code>. En voici un exemple : 


{{RootCmd|java-config --set-system-classpath log4j,xerces-2}}

{{Note|Le répertoire courant ({{Path|.}}) ne fera pas partie du  classpath système, car cela doit être ajouté à votre profil de connexion de votre système.}}

Vous devrez mettre votre environnement à jour en vous déconnectant et en vous reconnectant, ou en sourçant {{Path|/etc/profile}}. 

Pour les utilisateurs, <code>java-config --set-user-classpath</code> créera {{Path|~/.gentoo/java-env-classpath}}, que vous devrez sourcer depuis votre profil de votre ''shell''. 

{{Code|Sourcer un  classpath spécifique à l'utilisateur|<pre>
if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
       source ${HOME}/.gentoo/java-env-classpath
fi
</pre>
}}

Si vous avez réellement besoin d'un ''classpath'' par défaut applicable à tout le système ou à un utilisateur, vous pouvez ajouter quelque chose comme ce qui suit au profil de votre ''shell''. Mais nous devrions vous en dissuader. 

{{RootCmd|export CLASSPATH{{=}}"${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"}}

== Modules d'extension Java pour les navigateurs  ==

=== Installer un module d'extension ===

Vous pouvez installer un module d'extension Java pour votre navigateur Internet en installant une machine virtuelle Java avec l'option  <code>nsplugin</code> de la variable USE activée.

{{Note|<code>nsplugin</code> n'est pas disponible pour toutes les architectures. Vérifiez les modules d'extension disponibles sur votre architecture avant d'essayer d'installer une machine virtuelle avec la commande <code>emerge -pv <java-vm></code>.}}

Portage vous autorise à installer plusieurs versions des modules d'extension Java, bien qu'un seul d'entre eux sera utilisé par votre navigateur. Vous pouvez vérifier la liste des modules d'extension disponibles en exécutant : 

{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6
   [2]   icedtea-bin
</pre>
}}

In this example, <code>sun-jre-bin</code> is selected for the browser plugin. 

{{RootCmd|eselect java-nsplugin set sun-jre-bin-1.6}}

Verify that the correct plugin was selected: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6  current
   [2]   icedtea-bin
</pre>
}}

Java.com also provides a link to [http://java.com/en/download/installed.jsp verify your installed plugin]. Additionally, if you are using a Mozilla-based browser, you can verify your Java plugin by typing <code>about:plugins</code> into the address bar. 

=== Plugins on multilib systems ===

If you are running a mixed 64-bit and 32-bit multilib system (for example, on AMD64), you can use 64-bit and 32-bit Java plugins. Unless you have a pressing need to run 32-bit Java applications, we recommend using native 64-bit plugins on 64-bit web browsers. 

There are several native 64-bit browser plugins available. The default JDK/JRE pair, <code>sun-jdk</code> and <code>sun-jre-bin</code>, both include browser plugins. Just emerge one of them with the <code>nsplugin</code> USE flag enabled. 

{{RootCmd|echo "dev-java/sun-jre-bin nsplugin" >> /etc/portage/package.use
|emerge sun-jre-bin}}

To use a 32-bit plugin on a 32-bit browser, you will need to emerge <code>emul-linux-x86-java</code> with the <code>nsplugin</code> USE flag enabled. 

{{RootCmd|echo "app-emulation/emul-linux-x86-java nsplugin" >> /etc/portage/package.use
|emerge emul-linux-x86-java}}

Next, check which plugins are available: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6
</pre>
}}

Now select the right plugin for your browsers: 

{{RootCmd|eselect java-nsplugin set 32bit emul-linux-x86-java-1.6
|eselect java-nsplugin set 64bit sun-jre-bin-1.6}}

Verify the correct plugin was selected: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6  current
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6  current
</pre>
}}

== USE flags for use with Java ==

=== Setting USE flags ===

For more information regarding USE flags, refer to the [http://www.gentoo.org//doc/en/handbook/handbook-x86.xml?part=2&chap=2 USE flags] chapter from the Gentoo Handbook. 

=== The flags ===

* The '''java''' flag adds support for Java in a variety of programs
* The '''nsplugin''' flag adds support for Mozilla-like browsers (including Firefox). You will need this for viewing Java applets in your Mozilla-like browser.
* The '''source''' flag installs a zip of the source code of a package. This is traditionally used for IDEs to 'attach' source to the libraries you are using.
* The '''jce''' flag adds support for the Java Cryptography Engine
* For Java packages, the '''doc''' flag will build API documentation using javadoc.

== Additional resources ==

=== Off-line resources ===

* java-config man page
* <code>java-config --help</code>

=== Online resources ===

* The [http://www.gentoo.org/proj/en/java/ Java Project Page] 
* The [http://news.gmane.org/gmane.linux.gentoo.java gentoo-java], [http://news.gmane.org/gmane.linux.gentoo.user gentoo-user], and [http://news.gmane.org/gmane.linux.gentoo.devel gentoo-dev] mailing list archives
* [http://www.gentoo.org/irc://irc.gentoo.org/gentoo #gentoo] and [http://www.gentoo.org/irc://irc.gentoo.org/gentoo-java #gentoo-java] on IRC
* [http://en.wikipedia.org/wiki/Java_programming_language Wikipedia's entry for Java] 
* If you have suggestions or questions regarding this document, please email the Gentoo Java team: {{Mail|java@gentoo.org}}

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Joshua Nichols
* Karl Trygve Kalleberg
* Joshua Saddler
