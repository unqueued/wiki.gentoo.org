<languages />

{{Metadata|abstract=Distcc es un programa diseñado para distribuir tareas de compilación entre nodos participantes en una red. Está compuesto por un servidor: distccd y un programa cliente: distcc. Distcc puede trabajar de forma transparente con ccache, Portage, y Automake realizando una simple configuración.}}

{{InfoBox stack
|{{InfoBox homepage|https://code.google.com/p/distcc/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox github|distcc/distcc}}
}}

[https://code.google.com/p/distcc/ Distcc] es un programa diseñado para distribuir tareas de compilación a través de la red hacia máquinas participantes. Consiste en un servidor, {{c|distccd}} y un programa cliente, {{c|distcc}}. Distcc puede trabajar de forma transparente con [http://ccache.samba.org ccache], [[Portage]] y Automake realizando una sencilla configuración. 

Cuando planee utilizar {{c|distcc}} para ayudarle a realizar el bootstrap en una instalación Gentoo, asegúrese de leer [[#Utilizar_distcc_para_realizar_el_bootstrap|Utilizar distcc para realizar el bootstrap]]. 

== Instalación ==

Antes de configurar {{c|distcc}}, echémos un vistazo a la instalación del paquete  {{Package|sys-devel/distcc}} en todos los equipos.

=== Requisitos para todos los equipos ===

Para utilizar {{c|distcc}}, todas las máquinas en la red deben tener la misma versión de GCC. Mezclar 3.3.x (variando la x) es correcto, pero mezclar 3.3.x y 3.2.x "puede" resultar en errores en tiempo de compilación o ejecución. 

=== Instalar el software ===

Distcc incluye un monitor gráfico para monitorizar las tareas que un computador está enviando para compilación. Este monitor se habilita cuando el ajuste USE <code>gtk</code> está activado.

Después de configurar el ajuste USE, instale el paquete {{Package|sys-devel/distcc}}:

{{Emerge|sys-devel/distcc}}

{{Important|Recuerde instalar {{Package|sys-devel/distcc}} en todas las máquinas que vayan a participar en la construcción.}}

=== Auto iniciar el demonio distcc ===

Para que {{c|distccd}} arranque de forma automática se debe seguir las instrucciones siguientes dependiendo del sistema de inicio utilizado.

==== Usar OpenRC ====

Modifique {{Path|/etc/conf.d/distccd}} y asegúrarse de usar la directiva <code>--allow</code> para permitir únicamente máquinas cliente de confianza. Para mayor seguridad debería utilizar también la directiva <code>--listen</code> para indicarle al demonio {{c|distcc}} en qué dirección IP debe escuchar (en sistemas con más de una dirección IP). Se puede encontrar más información acerca de seguridad en {{c|distcc}} en las [http://distcc.googlecode.com/svn/trunk/doc/web/security.html notas sobre seguridad de distcc].

En el siguiente ejemplo se permite a los clientes distcc correr en <code>192.168.0.4</code> y <code>192.168.0.5</code> para conectarse al servidor {{c|distccd}} que corre en la máquina local:

{{FileBox|filename=/etc/conf.d/distccd|title=Permitir a clientes específicos conectarse a distccd|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important|Es importante utilizar <code>--allow</code> y <code>--listen</code>. Por favor, lea la página del manual de {{c|distccd}} o el documento sobre seguridad indicado arriba para obtener más información.}}

Ahora inicie el demonio {{c|distcc}} en todas las máquinas participantes: 

{{RootCmd|rc-update add distccd default |rc-service distccd start}}

==== Usar systemd ====

Editar {{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} y añadir los clientes permitidos en formato CIDR. A continuación se muestra un ejemplo:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=Definir ALLOWED_SERVERS|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

{{Note| El nombre "ALLOWED_SERVERS" puede llevar a confusiones ya que se refiere a los clientes a los que se le permite conectar al servidor distccd local. Independientemente de esto, el valor de esta variable se utiliza en el servicio distccd para asignarle un valor a la opción --allow. Mire en {{Path|/usr/lib/systemd/system/distccd.service.}}}}

Recargar los fichero de unidad después de realizar estos cambios:

{{RootCmd|systemctl daemon-reload}}

Habilitar el auto arranque de {{c|distcc}} y a continuación arrancar el servicio:

{{RootCmd|systemctl enable distccd
|systemctl start distccd}}

== Configuración ==

Echemos un vistazo a la configuración de {{c|distcc}}.

=== Especificar las máquinas participantes ===

Utilice la orden {{c|distcc-config}} para indicar la lista de máquinas. 

A continuación se muestra una lista ejemplo de definiciones de equipos. En la mayoría de los casos, serán suficientes variaciones de las líneas 1 y 2. La última utiliza la sintaxis <code>/limit</code> para informar a {{c|distcc}} sobre el máximo número de trabajos que se deben lanzar en este nodo. Se puede encontrar más información sobre la sintaxis de las líneas 3 y 4 en la [http://distcc.googlecode.com/svn/trunk/doc/web/man/distcc_1.html página del manual de distcc].

{{CodeBox|title=Ejemplos de definiciones de máquinas|1=
192.168.0.1 192.168.0.2 192.168.0.3
192.168.0.1/2 192.168.0.2 192.168.0.3/10
192.168.0.1:4000/2 192.168.0.2/1 192.168.0.3:3632/4
@192.168.0.1 @192.168.0.2:/usr/bin/distccd 192.168.0.3
}}

Hay otras formas de configurar máquinas. Eche un vistazo a la página del manual de {{c|distcc}} ({{c|man distcc}}) para obtener más información.

Si se van a realizar compilaciones en la máquina local debería escribir <code>localhost</code> en la lista de máquinas. Contrariamente, si no se va a utilizar la máquina local para compilar, omítala de la lista de máquinas. En una máquina lenta usar localhost puede de hecho hacer las cosas más lentas. Asegúrese de comprobar los ajustes para mejorar el rendimiento.

Configuraremos {{c|distcc}} para que usar los equipos mencionados en la primera línea del ejemplo:

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

Distcc también ofrece soporte a un modo ''bombeo'' (''pump'') cuando se invoca la orden {{c|pump}}. Esto puede reducir de forma significativa el tiempo de construcción cuando se compilan muchos ficheros en paralelo. Se cachean las cabeceras preprocesadas en el lado servidor y, como resultado, desaparece la continua carga y preprocesado de estos ficheros cabecera.

Para configurar un equipo en modo bombeo, se debe añadir el sufijo <code>,cpp,lzo</code> a las definiciones de los equipos. El modo bombero requiere de los ajustes <code>cpp</code> ''y'' <code>lzo</code> (independientemente de si los archivos son C o C++).

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1,cpp,lzo 192.168.0.2,cpp,lzo 192.168.0.3,cpp,lzo"}}

=== Usar distcc con Portage ===

Configurar [[Portage]] para usar {{c|distcc}} es fácil. Es cuestión de habilitar la característica {{c|distcc}} y definir un valor correcto para el número de trabajos simultáneos (ya que así {{c|distcc}} incrementará la cantidad de recursos disponibles para la construcción)

Ajuste la variable <var>MAKEOPTS</var> y la variable <var>FEATURES</var> tal y como se describe abajo.

Una estrategia común es
* Definir el valor de <code>N</code> al ''doble'' del número ''total'' (local + remotas) de núcleos de CPU + 1, y
* Definir el valor de <code>M</code> al número de núcleos de CPU ''locales''

El uso de <code>-lM</code> en la varialble <var>MAKEOPTS</var> evitará lanzar demasiadas tareas cuando alguno de los equipos del cluster de {{c|distcc}} no estén disponibles (incrementando la cantidad de trabajos simultáneos en el resto de los sistemas) o cuando se configure un ebuild para no permitir construcciones en remoto (como con gcc). Esto se logra rechazando el inicio de trabajos adicionales cuando la carga del sistema están en el valor de <code>M</code> o por encima de éste.

{{FileBox|filename=/etc/portage/make.conf|title=Ajustar MAKEOPTS y FEATURES|lang=bash|1=
# Reemplace N y M por los valores correctos calculados previamente
MAKEOPTS="-jN -lM"
FEATURES="distcc distcc-pump"
}}

{{Note|El modo bombeo de Distcc puede reducir significativamente los tiempos de construcción para los paquetes grandes. Considerar la sección sobre cómo [[#Especificar_las_m.C3.A1quinas_participantes|especificar las máquinas participantes]] para obtener más detalles.}}

Por ejemplo, cuando hay dos equipos PC anfitriones con cuatro núcleos que corren {{c|distcc}} y el equipo PC local tiene una CPU con doble núcleo entonces la variable <var>MAKEOPTS</var> podría ser:

{{FileBox|filename=/etc/portage/make.conf|title=Ejemplo jde MAKEOPTS para dos equipos PC con cuádruple núcleo (remotos) y un equipo PC con dos núcleos (local)|lang=bash|1=
# Dos equipos remotos con cuatro núcleos cada uno = 8 núcleos remotos
# Un equipo local con dos núcleos = 2 núcleos en local
# El número total de núcleos es 10, de modo que:N = 2*10+1 and M=2
MAKEOPTS="-j21 -l2"
}}

Cuando edite el fichero {{Path|make.conf}}, asegúrese de que no se ha definido <code>-march=native</code> en las variables <var>CFLAGS</var> o <var>CXXFLAGS</var>. {{c|distcc}} no distribuirá trabajos a otras máquinas si <code>march</code> está definido a <code>native</code>. El valor adecuado para <code>-march=</code> se puede obtener lanzando la siguiente orden:

{{Cmd|gcc -v -E -x c -march{{=}}native -mtune{{=}}native - < /dev/null 2>&1 {{!}} grep cc1 {{!}} perl -pe 's/ -mno-\S+//g; s/^.* - //g;'}}

Lea [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ <code>-march=native</code> en línea para distcc] para ampliar la información.

=== Usar distcc con automake ===

Esto es más fácil de configurar en algunos casos que con Portage. Todo lo que se necesita hacer es actualizar la  variable de entorno <var>PATH</var> para incluir {{Path|/usr/lib/distcc/bin}} delante del directorio que contiene {{c|gcc}} ({{Path|/usr/bin/}}). No obstante, hay un problema. Si se utiliza {{c|ccache}}, entonces deberá poner la localización de {{c|distcc}} después de la de {{c|ccache}}: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Coloque esto en el archivo {{Path|~/.bashrc}} del usuario  o fichero equivalente para tener configurada la variable <var>PATH</var> cada vez que que el usuario entre en el sistema o defínala globlamente en un fichero en {{Path|/etc/env.d/}}

En lugar de llamar únicamente a {{c|make}}, agregue <code>-jN</code> (donde <code>N</code> es un número entero). El valor de <code>N</code> depende de la red y de la tipología de los computadores que se utilizan para compilar. Una aproximación heurística a los valores correctos se ha dado anteriormente en este artículo.

== Utilizar distcc para realizar el bootstrap ==

El uso de {{c|distcc}} para el inicio (esto es, construir una cadena de herramientas antes de instalar el resto del sistema) requiere realizar algunas acciones adicionales.

=== Paso 1: Configurar Portage ===

Inicie la nueva máquina con un LiveCD de Gentoo Linux y siga las [[Handbook:AMD64/es|instrucciones de instalación]] mientras se siguen las instrucciones en las [[FAQ/es|FAQ de Gentoo]] para obtener más información sobre el bootstrap. A continuación configure Portage para que utilice {{c|distcc}}: 

{{FileBox|filename=/etc/portage/make.conf|title=Configure Portage para usar distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Actualice también la variable <code>PATH</code> en la sesión de instalación:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Paso 2: Obtener distcc ===

Instale {{Package|sys-devel/distcc}}: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Paso 3: Configurar distcc ===

Lance {{c|distcc-config --install}} para configurar distcc. Sustituya la cadena <code>máquina#</code> del ejemplo por las direcciones IP o nombres de los nodos participantes.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost máquina1 máquina2 máquina3 ..."}}

¡Distcc ya está configurado para hacer bootstrap! Continúe con las instrucciones de instalación adecuadas y ''no'' olvide lanzar {{c|emerge distcc}} después de lanzar {{c|emerge @system}}. Esto asegurará que las dependencias necesarias también se instalarán. 

{{Note|Durante el arranque y {{c|emerge system}} puede que parezca que {{c|distcc}} no se está utilizando. Esto es normal ya que algunos ebuilds no funcionan bien con distcc por lo que se deshabilita intencionadamente.}}

== Extras de distcc ==

La aplicación {{c|distcc}} tiene características adicionales y aplicaciones para dar soporte al trabajo en un entorno {{c|distcc}}.

=== Monitores de distcc === 

Distcc se distribuye con dos herramientas de monitorización. La basada en texto se construye siempre y se llama {{c|distccmon-text}}. Al lanzarlo la primera puede resultar confuso, pero es muy fácil de utilizar. Si el programa se lanza sin parámetros, correrá solo una vez. Sin embargo si se le pasa un número, actualizará la información cada <code>N</code> segundos, donde <code>N</code> es el argumento indicado.

{{Cmd|distccmon-text 10}}

La otra utilidad de monitorización solo se habilita cuando se habilita el ajuste USE <code>gtk</code>. Esta herramienta está basada en GTK+, corre en un entorno X y es bastante encantador. En Gentoo, se ha cambiado el nombre a {{c|distccmon-gui}} para evitar confusiones (originalmente se llamaba {{c|distccmon-gnome}}).

{{Cmd|distccmon-gui}}

Para monitorizar el uso de {{c|distcc}} por parte de Portage:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10 |DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|Si el directorio distcc está en otro lugar, cambie la variable <var>DISTCC_DIR</var> adecuadamente.}}

Un truco consisten en definir <var>DISTCC_DIR</var> en variables de entorno:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

Ahora actualice el entorno:

{{RootCmd|env-update
|source /etc/profile}}

Para terminar, arranque la aplicación GUI:

{{RootCmd|distccmon-gui}}

=== Usar SSH para la comunicación de distcc ===

La configuración de distcc a través de SSH incluye algunos detalles. En primer lugar, genere un par de claves SSH sin contraseña. Observe que portage compila los programas con el usuario Portage (o como root si no se ha definido <code>FEATURES="userpriv"</code>). La carpeta de inicio del usuario Portage es {{Path|/var/tmp/portage/}} lo que implica que las claves se deben almacenar en {{Path|/var/tmp/portage/.ssh/}}.

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

A continuación cree una sección para cada máquina en el fichero de configuración de SSH:

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Añadir las secciones para cada equipo|1=
Host test1
  HostName 123.456.789.1
  Port 1234
  User UserName
Host test2
  HostName 123.456.789.2
  Port 1234
  User UserName
}}

Envíe la clave pública a cada nodo de compilación:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub NombreDeUsuario@NodoDeCompilación}}

También asegúrese de que todas las máquinas están listadas en el fichero {{Path|known_hosts}}:

{{RootCmd|ssh-keyscan -t rsa <nodo-de-compilación-1> <nodo-de-compilación-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Corrija el propietario del fichero como se muestra a continuación:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

Para configurar los equipos <code>test1</code> y <code>test2</code>, lance:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Por favor, observe que el símbolo <code>'@'</code>, especifica las máquinas ssh para distcc.

Para terminar, indíquele a {{c|distcc}} qué binario SSH debe utilizar:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
DISTCC_SSH="ssh"
}}

No es necesario lanzar el guión de inicio  {{Path|distccd}} en los equipos cuando  {{c|distcc}} se comunica a través de SSH.

== Pruebas ==

Para probar {{c|distcc}}, escribir un simple programa ''Hola distcc'' y lanzar {{c|distcc}} en modo hablador para comprobar si se está comunicando correctamente.

{{FileBox|filename=main.c|lang=c|1=
#include <stdio.h>
 
int main() {
    printf("¡Hola distcc!\n");
    return 0;
}
}}

Next, turn on verbose mode, compile the program using {{c|distcc}} and link the generated object file into an executable:

{{Cmd
|export DISTCC_VERBOSE{{=}}1
|distcc gcc -c main.c -o main.o # or 'pump distcc <...>'
|gcc main.o -o main
}}

{{Note|Replace {{c|distcc}} command with {{c|pump distcc}} for use pump mode.}}

There should be a bunch of output about {{c|distcc}} finding its configuration, selecting the host to connect to, starting to connect to it, and ultimately compile {{Path|main.c}}. If the output does not list the desired {{c|distcc}} hosts, check the configuration.

Finally, ensure the compiled program works properly. To test each host, enumerate each compile host in the hosts file.

{{Cmd|./main|output=<pre>Hello distcc!</pre>}}

== Solución a problemas ==

<!-- Consider moving this section to a separate subpage if it becomes too large -->

Si se produce cualquier problema mientras se utiliza {{c|distcc}}, entonces esta sección puede ser de ayuda.

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- To be removed when the bug is resolved and the fixed package is stable -->

A partir del 22 de enero de 2015 la instalación no crea el fichero {{Path|distccd.log}} apropiado en {{Path|/var/log/}}. Esto afecta aparentemente solo a la versión 3.1-r8 de distcc. Esta incidencia está en proceso de solución (ver {{Bug|477630}}). Es posible evitar este problema creando manualmente el fichero de registro, asignarle el propietario adecuado y reiniciando el demonio distccd:

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

A continuación actualice la ruta {{Path|/var/log}} del fichero de configuración de {{c|distccd}} en {{Path|/etc/conf.d/distccd}} para definirla al directorio de {{Path|distcc}} creado en el paso anterior:

{{FileBox|filename=/etc/conf.d/distccd|title=Actualizar la ruta al registro|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

Para terminar, reinicie el servicio distccd:

{{RootCmd|/etc/init.d/distccd restart}}

=== Algunos paquetes no utilizan distcc ===

A medida que se instalan algunos paquetes, los usuarios observarán que la construcción de algunos de ellos no se está realizando (y por tanto no se están construyendo en paralelo). Esto puede ocurrir porque el fichero {{Path|Makefile}} del paquete no soporta operaciones en paralelo o el mantenedor del ebuild ha deshabilitado explícitamente dichas operaciones en paralelo debido un problema conocido. 

En algunas ocasiones, {{c|distcc}} puede causar que un paquete falle en su compilación. Si sucede esto, por favor [https://bugs.gentoo.org/ informe] de ello.

=== Versiones mezcladas de GCC ===

Si el entorno aloja versiones diferentes de GCC, probablemente tenga problemas extraños. La solución es asegurarse de que todas las máquinas tengan la misma versión. 

Las actualizaciones de Portage más recientes utilizan <code>${CHOST}-gcc</code> (menos gcc) en lugar de <code>gcc</code>. Esto significa que si se mezclan máquinas i686 con otros tipos de máquina (i386, i586) entonces las construcciones darán problemas. Una solución temporal a esto es lanzar:

{{RootCmd|export CC{{=}}'gcc' CXX{{=}}'c++'}}

También es posible definir las variables <var>CC</var> y <var>CXX</var> en {{Path|/etc/portage/make.conf}} a los valores listados en la orden de arriba.

{{Important|Hacer esto explícitamente redefine algún comportamiento de Portage y puede que tenga resultados un tanto extraños en el futuro. Haga esto solo si no puede evitar el mezclar CHOSTs.}}

{{Note|Having the right version of gcc as a slot on a server isn’t enough. Portage uses {{c|distcc}} as a replacement for the compiler referenced by the <var>CHOST</var> variable (i.e. <code>x86_64-pc-linux-gnu</code>) and {{c|distccd}} invokes it by exactly same name. The right version of gcc should be a default system’s compiler on all involved compilation hosts.}}

=== -march=native ===

A partir de la versión 4.3.0 de GCC, el compilador ofrece soporta para la opción <code>-march=native</code> que habilita la detección automática de la CPU y de las optimizaciones que merece la pena activar en el procesador sobre el que está corriendo GCC. Esto es un problema cuando se utiliza {{c|distcc}}, ya que permite mezclar código optimizado para diferentes procesadores. Por ejemplo, al correr {{c|distcc}} con <code>-march=native</code> en un sistema que tiene un procesador AMD Athlon y haciendo lo mismo en ''otro'' sistema que tiene un procesador Intel Pentium processor se mezclará el código compilado en ambos procesadores.

Preste atención a la siguiente advertencia:

{{Warning|'''No''' utilice <code>-march{{=}}native</code> o <code>-mtune{{=}}native</code> en las varibales <var>CFLAGS</var> o <var>CXXFLAGS</var> de {{Path|make.conf}} cuando compile con {{c|distcc}}.}}

Para conocer los ajustes que GCC habilitaría cuando se llama con <code>-march=native</code>, lance lo siguiente:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
 -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
 -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
 -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
--param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

=== Get more output from emerge logs ===

It is possible to obtain more logging by enabling verbose mode. This is accomplished by adding <var>DISTCC_VERBOSE</var> to {{Path|/etc/portage/bashrc}}:

{{FileBox|title=Enabling verbose logging|filename=/etc/portage/bashrc|lang=bash|1=
export DISTCC_VERBOSE=1
}}

The verbose logging can then be found in {{Path|/var/tmp/portage/$CATEGORY/$PF/temp/build.log}}.

Keep in mind that the first {{c|distcc}} invocation visible in {{Path|build.log}} isn’t necessary the first {{c|distcc}} call during a build process. For example a build server can get a one-minute backoff period during the configuration stage when some checks are performed using a compiler ({{c|distcc}} sets a backoff period when compilation on a remote server failed, it doesn’t matter whether it failed on local machine or not).

Dig into the {{Path|/var/tmp/portage/$CATEGORY/$PF/work/}} directory to investigate such situations. Find other logs, or call {{c|make}} explicitly from within the working directory.

Another interesting variable to use is <var>DISTCC_SAVE_TEMPS</var>. When set, it saves the standard output/error from a remote compiler which, for Portage builds, results in files in the {{Path|/var/tmp/portage/$CATEGORY/$PF/temp/}} directory.

{{FileBox|title=Saving temporary output|filename=/etc/portage/bashrc|lang=bash|1=
export DISTCC_SAVE_TEMPS=1
}}

== Ver también ==

* La [[Distcc/Cross-Compiling/es|guía de compilación cruzada de DistCC]] explica cómo se utiliza una arquitectura para construir programas para otra arquitectura mediante {{c|distcc}}. Esto puede ser tan simple como utilizar una máquina Athlon (i686) para construir un programa para una K6-2 (i586) o utilizar una máquinaSPARC para construir un programa para una basada en PowerPC.

== Recursos externos ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Uso de <code>-march=native</code> en línea para distcc]
* [https://github.com/distcc/distcc/ Página oficial de Distcc]

{{Migrated|originalauthors=Lisa Seelye, Mike Frysinger, Erwin, Sven Vermeulen, Lars Weiler, Tiemo Kieft and nightmorph}}
