<languages />

{{Metadata|abstract=Distcc es un programa diseñado para distribuir tareas de compilación entre nodos participantes en una red. Está compuesto por un servidor: distccd y un programa cliente: distcc. Distcc puede trabajar de forma transparente con ccache, Portage, y Automake realizando una simple configuración.}}

{{InfoBox stack
|{{InfoBox homepage|https://code.google.com/p/distcc/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox github|distcc/distcc}}
}}

[https://code.google.com/p/distcc/ Distcc] es un programa diseñado para distribuir tareas de compilación a través de la red hacia máquinas participantes. Consiste en un servidor, {{c|distccd}} y un programa cliente, {{c|distcc}}. Distcc puede trabajar de forma transparente con [http://ccache.samba.org ccache], [[Portage]] y Automake realizando una sencilla configuración. 

Cuando planee utilizar {{c|distcc}} para ayudarle a realizar el bootstrap en una instalación Gentoo, asegúrese de leer [[#Utilizar_distcc_para_realizar_el_bootstrap|Utilizar distcc para realizar el bootstrap]]. 

== Instalación ==

Antes de configurar {{c|distcc}}, echémos un vistazo a la instalación del paquete  {{Package|sys-devel/distcc}} en todos los equipos.

=== Requisitos para todos los equipos ===

Para utilizar {{c|distcc}}, todas las máquinas en la red deben tener la misma versión de GCC. Mezclar 3.3.x (variando la x) es correcto, pero mezclar 3.3.x y 3.2.x "puede" resultar en errores en tiempo de compilación o ejecución. 

=== Instalar el software ===

Distcc incluye un monitor gráfico para monitorizar las tareas que un computador está enviando para compilación. Este monitor se habilita cuando el ajuste USE <code>gtk</code> está activado.

Después de configurar el ajuste USE, instale el paquete {{Package|sys-devel/distcc}}:

{{Emerge|sys-devel/distcc}}

{{Important|Recuerde instalar {{Package|sys-devel/distcc}} en todas las máquinas que vayan a participar en la construcción.}}

=== Auto iniciar el demonio distcc ===

Para que {{c|distccd}} arranque de forma automática se debe seguir las instrucciones siguientes dependiendo del sistema de inicio utilizado.

==== Usar OpenRC ====

Edit {{Path|/etc/conf.d/distccd}} and make sure to set the <code>--allow</code> directive to allow only trusted clients. For added security, use the <code>--listen</code> directive to tell the {{c|distccd}} daemon what IP to listen on (for multi-homed systems). More information on {{c|distcc}} security can be found at [http://distcc.googlecode.com/svn/trunk/doc/web/security.html Distcc security notes].

The following example allows the distcc clients running at <code>192.168.0.4</code> and <code>192.168.0.5</code> to connect to the {{c|distccd}} server running locally:

{{FileBox|filename=/etc/conf.d/distccd|title=Permitir a clientes específicos conectarse a distccd|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important|It is important to use <code>--allow</code> and <code>--listen</code>. Please read the {{c|distccd}} man page or the above security document for more information.}}

Now start the {{c|distccd}} daemon on all the participating computers: 

{{RootCmd|rc-update add distccd default |rc-service distccd start}}

==== Usar systemd ====

Editar {{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} y añadir los clientes permitidos en formato CIDR. A continuación se muestra un ejemplo:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=Definir ALLOWED_SERVERS|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

{{Note| The name "ALLOWED_SERVERS" here is rather confusing as it refers to the clients that are allowed to connect to the local distccd server. Nevertheless, it is this variable which is used in the distccd service as value for the --allow option – see {{Path|/usr/lib/systemd/system/distccd.service.}}}}

Recargar los fichero de unidad después de realizar estos cambios:

{{RootCmd|systemctl daemon-reload}}

Enable auto-starting {{c|distccd}} and then start the service:

{{RootCmd|systemctl enable distccd
|systemctl start distccd}}

== Configuración ==

Let's now look into the configuration of {{c|distcc}}.

=== Especificar las máquinas participantes ===

Use the {{c|distcc-config}} command to set the list of hosts. 

The following is an example list of host definitions. In most cases, variants of lines 1 and 2 suffice. The latter uses the <code>/limit</code> syntax to inform {{c|distcc}} about the maximum amount of jobs to be launched on this node. More information about the syntax used in lines 3 and 4 can be found in the [http://distcc.googlecode.com/svn/trunk/doc/web/man/distcc_1.html distcc manual page].

{{CodeBox|title=Ejemplos de definiciones de máquinas|1=
192.168.0.1 192.168.0.2 192.168.0.3
192.168.0.1/2 192.168.0.2 192.168.0.3/10
192.168.0.1:4000/2 192.168.0.2/1 192.168.0.3:3632/4
@192.168.0.1 @192.168.0.2:/usr/bin/distccd 192.168.0.3
}}

There are also several other methods of setting up hosts.  See the {{c|distcc}} man page (<kbd>man distcc</kbd>) for more details.

Si se van a realizar compilaciones en la máquina local debería escribir <code>localhost</code> en la lista de máquinas. Contrariamente, si no se va a utilizar la máquina local para compilar, omítala de la lista de máquinas. En una máquina lenta usar localhost puede de hecho hacer las cosas más lentas. Asegúrese de comprobar los ajustes para mejorar el rendimiento.

Let's configure {{c|distcc}} to use the hosts mentioned on the first line in the example:

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

=== Usar distcc con Portage ===

Setting up [[Portage]] to use {{c|distcc}} is easy. It is a matter of enabling the {{c|distcc}} feature, and setting a decent value for the number of simultaneous build jobs (as {{c|distcc}} increases the amount of build resources).

Ajuste la variable <code>MAKEOPTS</code> y la variable <code>FEATURES</code> tal y como se describe abajo.

Una estrategia común es
* Definir el valor de <code>N</code> al ''doble'' del número ''total'' (local + remotas) de núcleos de CPU + 1, y
* Definir el valor de <code>M</code> al número de núcleos de CPU ''locales''

The use of <code>-lM</code> in the <code>MAKEOPTS</code> variable will prevent spawning too many tasks when some of the {{c|distcc}} cluster hosts are unavailable (increasing the amount of simultaneous jobs on the other systems) or when an ebuild is configured to disallow remote builds (such as with gcc). This is accomplished by refusing to start additional jobs when the system load is at or above the value of <code>M</code>.

{{FileBox|filename=/etc/portage/make.conf|title=Ajustar MAKEOPTS y FEATURES|lang=bash|1=
# Reemplace N y M por los valores correctos calculados previamente
MAKEOPTS="-jN -lM"
FEATURES="distcc distcc-pump"
}}

For instance, when there are two quad-core host PCs running {{c|distccd}} and the local PC has a dual core CPU, then the <code>MAKEOPTS</code> variable could look like this:

{{FileBox|filename=/etc/portage/make.conf|title=Ejemplo jde MAKEOPTS para dos equipos PC con cuádruple núcleo (remotos) y un equipo PC con dos núcleos (local)|lang=bash|1=
# Dos equipos remotos con cuatro núcleos cada uno = 8 núcleos remotos
# Un equipo local con dos núcleos = 2 núcleos en local
# El número total de núcleos es 10, de modo que:N = 2*10+1 and M=2
MAKEOPTS="-j21 -l2"
}}

While editing the {{Path|make.conf}} file, make sure that it does not have <code>-march=native</code> in the <code>CFLAGS</code> or <code>CXXFLAGS</code> variables. {{c|distccd}} will not distribute work to other machines if <code>march</code> is set to <code>native</code>. The appropriate <code>-march=</code> value can be obtained by running the following command:

{{Cmd|gcc -v -E -x c -march{{=}}native -mtune{{=}}native - < /dev/null 2>&1 {{!}} grep cc1 {{!}} perl -pe 's/ -mno-\S+//g; s/^.* - //g;'}}

See [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc] for more information.

=== Usar distcc con automake ===

This is, in some cases, easier than the Portage setup. All that is needed is to update the <code>PATH</code> variable to include {{Path|/usr/lib/distcc/bin/}} in front of the directory that contains {{c|gcc}} ({{Path|/usr/bin/}}). However, there is a caveat. If {{c|ccache}} is used, then put the {{c|distcc}} location after the {{c|ccache}} one: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Coloque esto en el archivo {{Path|~/.bashrc}} del usuario  o fichero equivalente para tener configurada la variable <code>PATH</code> cada vez que que el usuario entre en el sistema o defínala globlamente en un fichero en {{Path|/etc/env.d/}}

Instead of calling {{c|make}} alone, add in <code>-jN</code> (where <code>N</code> is an integer). The value of <code>N</code> depends on the network and the types of computers that are used to compile. A heuristic approach to the right value is given earlier in this article.

== Utilizar distcc para realizar el bootstrap ==

Using {{c|distcc}} to bootstrap (i.e. build a working toolchain before installing the remainder of the system) requires some additional steps to take.

=== Paso 1: Configurar Portage ===

Boot the new box with a Gentoo Linux LiveCD and follow the [[Handbook:AMD64|installation instructions]], while keeping track of the instructions in the [[FAQ|Gentoo FAQ]] for information about bootstrapping. Then configure Portage to use {{c|distcc}}: 

{{FileBox|filename=/etc/portage/make.conf|title=Configure Portage para usar distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Actualice también la variable <code>PATH</code> en la sesión de instalación:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Paso 2: Obtener distcc ===

Instale {{Package|sys-devel/distcc}}: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Paso 3: Configurar distcc ===

Run {{c|distcc-config --install}} to setup distcc; substitute the <code>host#</code> in the example with the IP addresses or hostnames of the participating nodes.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost máquina1 máquina2 máquina3 ..."}}

Distcc is now set up to bootstrap! Continue with the proper installation instructions and do ''not'' forget to run {{c|emerge distcc}} after running {{c|emerge @system}}. This is to make sure that all of the necessary dependencies are installed. 

{{Note|During bootstrap and {{c|emerge @system}} {{c|distcc}} may not appear to be used. This is expected as some ebuilds do not work well with distcc, so they intentionally disable it.}}

== Extras de distcc ==

The {{c|distcc}} application has additional features and applications to support working in a {{c|distcc}} environment.

=== Monitores de distcc === 

Distcc ships with two monitoring utilities. The text-based monitoring utility is always built and is called {{c|distccmon-text}}. Running it for the first time can be a bit confusing, but it is really quite easy to use. If the program is run with no parameter it will run just once. However, if it is passed a number it will update every <code>N</code> seconds, where <code>N</code> is the argument that was passed.

{{Cmd|distccmon-text 10}}

The other monitoring utility is only enabled when the <code>gtk</code> USE flag is set. This one is GTK+ based, runs in an X environment, and it is quite lovely. For Gentoo, the GUI monitor has been renamed to {{c|distccmon-gui}} to make it less confusing (it is originally called {{c|distccmon-gnome}}).

{{Cmd|distccmon-gui}}

To monitor Portage's {{c|distcc}} usage:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10 |DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|Si el directorio distcc está en otro lugar, cambie la variable <code>DISTCC_DIR</code> adecuadamente.}}

Un truco consisten en definir <code>DISTCC_DIR</code> en variables de entorno:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

Ahora actualice el entorno:

{{RootCmd|env-update
|source /etc/profile}}

Para terminar, arranque la aplicación GUI:

{{RootCmd|distccmon-gui}}

=== Usar SSH para la comunicación de distcc ===

La configuración de distcc a través de SSH incluye algunos detalles. En primer lugar, genere un par de claves SSH sin contraseña. Observe que portage compila los programas con el usuario Portage (o como root si no se ha definido <code>FEATURES="userpriv"</code>). La carpeta de inicio del usuario Portage es {{Path|/var/tmp/portage/}} lo que implica que las claves se deben almacenar en {{Path|/var/tmp/portage/.ssh/}}.

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

A continuación cree una sección para cada máquina en el fichero de configuración de SSH:

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Añadir las secciones para cada equipo|1=
Host test1
  HostName 123.456.789.1
  Port 1234
  User UserName
Host test2
  HostName 123.456.789.2
  Port 1234
  User UserName
}}

Envíe la clave pública a cada nodo de compilación:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub NombreDeUsuario@NodoDeCompilación}}

También asegúrese de que todas las máquinas están listadas en el fichero {{Path|known_hosts}}:

{{RootCmd|ssh-keyscan -t rsa <nodo-de-compilación-1> <nodo-de-compilación-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Corrija los permisos del fichero como se muestra a continuación:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

To set up the hosts <code>test1</code> and <code>test2</code>, run:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Please note the <code>@</code> (@ sign), which specifies ssh hosts for distcc.

Finally, tell {{c|distcc}} which SSH binary to use:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
DISTCC_SSH="ssh"
}}

It is not necessary to run the {{Path|distccd}} initscript on the hosts when {{c|distcc}} communicates via SSH.

== Solución a problemas ==

<!-- Se debe considerar mover esta sección a una subpágina diferente si se extiende demasiado -->

If a problem occurs while using {{c|distcc}}, then this section might help in resolving the problem.

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- Se eliminará cuando la incidencia se resuelva y el paquete corregido sea estable -->

A partir del 22 de enero de 2015 la instalación no crea el fichero {{Path|distccd.log}} apropiado en {{Path|/var/log/}}. Esto afecta aparentemente solo a la versión 3.1-r8 de distcc. Esta incidencia está en proceso de solución (ver {{Bug|477630}}). Es posible evitar este problema creando manualmente el fichero de registro, asignarle el propietario adecuado y reiniciando el demonio distccd:

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

Next update the {{Path|/var/log}} path of the {{c|distccd}} configuration file in {{Path|/etc/conf.d/distccd}} to the {{Path|distcc}} directory created in the step before:

{{FileBox|filename=/etc/conf.d/distccd|title=Actualizar la ruta al registro|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

Para terminar, reinicie el servicio distccd:

{{RootCmd|/etc/init.d/distccd restart}}

=== Algunos paquetes no utilizan distcc ===

A medida que se instalan algunos paquetes, los usuarios observarán que la construcción de algunos de ellos no se está realizando (y por tanto no se están construyendo en paralelo). Esto puede ocurrir porque el fichero {{Path|Makefile}} del paquete no soporta operaciones en paralelo o el mantenedor del ebuild ha deshabilitado explícitamente dichas operaciones en paralelo debido un problema conocido. 

Sometimes {{c|distcc}} might cause a package to fail to compile. If this happens, please [https://bugs.gentoo.org/ report] it.

=== Versiones mezcladas de GCC ===

Si el entorno aloja versiones diferentes de GCC, probablemente tenga problemas extraños. La solución es asegurarse de que todas las máquinas tengan la misma versión. 

Las actualizaciones de Portage más recientes utilizan <code>${CHOST}-gcc</code> (menos gcc) en lugar de <code>gcc</code>. Esto significa que si se mezclan máquinas i686 con otros tipos de máquina (i386, i586) entonces las construcciones darán problemas. Una solución temporal a esto es lanzar:

{{RootCmd|export CC{{=}}'gcc' CXX{{=}}'c++'}}

También es posible definir las variables <code>CC</code> y <code>CXX</code> en {{Path|/etc/portage/make.conf}} a los valores listados en la orden de arriba.

{{Important|Hacer esto explícitamente redefine algún comportamiento de Portage y puede que tenga resultados un tanto extraños en el futuro. Haga esto solo si no puede evitar el mezclar CHOSTs.}}

=== -march=native ===

Starting with GCC 4.3.0, the compiler supports the <code>-march=native</code> option which turns on CPU auto-detection and optimizations that are worth being enabled on the processor on which GCC is running. This creates a problem when using {{c|distcc}} because it allows the mixing of code optimized for different processors. For example, running {{c|distcc}} with <code>-march=native</code> on a system that has an AMD Athlon processor and doing the same on ''another'' system that has an Intel Pentium processor will mix code compiled on both processors together.

Preste atención a la siguiente advertencia:

{{Warning|Do '''not''' use <code>-march{{=}}native</code> or <code>-mtune{{=}}native</code> in the <code>CFLAGS</code> or <code>CXXFLAGS</code> variables of {{Path|make.conf}} when compiling with {{c|distcc}}.}}

To know the flags that GCC would enable when called with <code>-march=native</code>, execute the following:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
 -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
 -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
 -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
--param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

== Ver también ==

* The [[Distcc/Cross-Compiling|DistCC Cross-compiling guide]] explains how using one architecture to build programs for another architecture is done through {{c|distcc}}. This can be as simple as using an Athlon (i686) to build a program for a K6-2 (i586), or using a SPARC to build a program for a PowerPC.

== Recursos externos ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc]
* [https://code.google.com/p/distcc/ Distcc homepage]

{{Migrated|originalauthors=Lisa Seelye, Mike Frysinger, Erwin, Sven Vermeulen, Lars Weiler, Tiemo Kieft and nightmorph}}
