<languages />
<translate>

<!--T:70-->
{{Metadata|abstract=nvidia-drivers contains the proprietary graphics driver for NVIDIA graphic cards. An open source alternative is nouveau.}}

<!--T:1-->
[[Article description::The {{Package|x11-drivers/nvidia-drivers}} package contains the ''proprietary'' graphics driver for NVIDIA graphic cards.]] An open source alternative is [[nouveau]].

<!--T:2-->
This proprietary driver contains some wrapper functions that will compile against the Linux kernel and a binary blob that does the heavy lifting for talking to the card. The driver consists of two parts: a kernel module and an X11 driver. Both parts are included in a single package. Due to the way the drivers are packaged, it is necessary to make some choices ''before'' installing the drivers.

<!--T:3-->
The package contains the latest drivers from NVIDIA with support for most NVIDIA graphic cards, with several versions available depending on the age of the card. It uses an eclass to detect what kind of card the system is running so that it installs the proper version.

== Hardware compatibility == <!--T:4-->

<!--T:95-->
The {{Package|x11-drivers/nvidia-drivers}} package supports a range of available NVIDIA cards. Multiple versions are available for installation, depending on the card(s) that the system has. See the official NVIDIA documentation, [http://www.nvidia.com/object/IO_32667.html What's a legacy driver?], to find out what version of {{Package|x11-drivers/nvidia-drivers}} should be used. A pretty decent way to find this out through [http://www.nvidia.com/Download/Find.aspx an interactive form]. Enter the graphics card that is used by the system (mind the Legacy option in the 'Product Type' field) and the form should end up with the best supported version.

<!--T:5-->
If the card has been identified as a legacy card then mask the more recent releases of {{Package|nvidia-drivers}}, i.e

<!--T:-->
{{FileBox|filename=/etc/portage/package.mask|title=Masking drivers with version higher than 174|1=
>x11-drivers/nvidia-drivers-174
}}

<!--T:6-->
Note that Gentoo does not provide the 71.86.xx versions. If the system has a card that needs these drivers then it is recommended to use the [[nouveau]] driver.

== Installation == <!--T:118-->

=== Kernel === <!--T:7-->

<!--T:96-->
As mentioned above, the NVIDIA kernel driver installs and runs against the current kernel. It builds as a module, so the kernel must support the loading of kernel modules (see below).

<!--T:61-->
The kernel module ({{Path|nvidia.ko}}) consists of a proprietary part (commonly known as the "binary blob") which drives the graphics chip(s), and an open source part (the "glue") which at runtime acts as intermediary between the proprietary part and the kernel. These all need to work nicely together as otherwise the user might be faced with data loss (through kernel panics, X servers crashing with unsaved data in X applications) and even hardware failure (overheating and other power management related issues should spring to mind).

==== Kernel compatibility ==== <!--T:62-->

<!--T:97-->
From time to time, a new kernel release changes the internal ABI for drivers, which means all drivers that use those ABIs must be changed accordingly. For open source drivers, especially those distributed with the kernel, these changes are nearly trivial to fix since the entire chain of calls between drivers and other parts of the kernel can be reviewed quite easily. For proprietary drivers like nvidia.ko, it doesn't work quite the same. When the internal ABIs change, then it is not possible to merely fix the "glue", because nobody knows how the glue is used by the proprietary part. Even after managing to patch things up to have things seem to work nicely, the user still risks that running nvidia.ko in the new, unsupported kernel will lead to data loss and hardware failure.

<!--T:63-->
When a new, incompatible kernel version is released, it is probably best to stick with the newest supported kernel for a while. NVIDIA usually takes a few weeks to prepare a new proprietary release they think is fit for general use. Just be patient. If absolutely necessary, then it is possible to use the epatch_user command with the nvidia-drivers ebuilds: this allows the user to patch nvidia-drivers to somehow fit in with the latest, unsupported kernel release. Do note that neither the nvidia-drivers maintainers nor NVIDIA will support this situation. The hardware warranty will most likely be void, Gentoo's maintainers cannot begin to fix the issues since it's a proprietary driver that only NVIDIA can properly debug, and the kernel maintainers (both Gentoo's and upstream) will certainly not support proprietary drivers, or indeed any "tainted" system that happens to run into trouble.

<!--T:98-->
If {{c|genkernel all}} was used to configure the kernel, then everything is all set. If not, double check the kernel configuration so that this support is enabled:

<!--T:99-->
{{KernelBox|title=Enable loadable module support|1=
[*] Enable loadable module support --->
}}

<!--T:8-->
Also enable ''Memory Type Range Register'' in the kernel:

<!--T:100-->
{{KernelBox|title=Enable MTRR support|1=
Processor type and features --->
   [*] MTRR (Memory Type Range Register) support
}}

With at least some if not all driver versions it may also be required to enable VGA Arbitration:

{{KernelBox|title=Enable VGA Arbitration|1=
Device Drivers --->
   Graphics support --->
      [*] VGA Arbitration
}}

<!--T:9-->
If the system has an AGP graphics card, then optionally enable agpgart support to the kernel, either compiled in or as a module. If the in-kernel agpgart module is not used, then the drivers will use its own agpgart implementation, called NvAGP.  On certain systems, this performs better than the in-kernel agpgart, and on others, it performs worse. Evaluate either choice on the system to get the best performance. When uncertain what to do, use the in-kernel agpgart:

<!--T:119-->
{{KernelBox|title=Enable agpgart support|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

<!--T:10-->
{{Note|On amd64, the IOMMU controls the agpgart setting.}}

<!--T:120-->
{{Important|For x86 and AMD64 processors, the in-kernel [[framebuffer]] driver conflicts with the binary driver provided by NVIDIA. When compiling the kernel for these CPUs, completely remove support for the in-kernel driver as shown:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Now make sure the nouveau driver is disabled:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        < > Nouveau (nVidia) cards
}}
}}

<!--T:121-->
A framebuffer alternative is [[uvesafb]], which can be installed parallel to {{Package|x11-drivers/nvidia-drivers}}. 

<!--T:160-->
{{Important|For x86 and AMD64 processors, the [[uvesafb]] driver conflicts with the binary driver provided by NVIDIA above 361.28 versions.}}

<!--T:122-->
For (U)EFI systems, uvesafb will not work. Be warned that enabling ''efifb'' support in kernel (<code>CONFIG_FB_EFI=y</code>) causes intermittent problems with the initialization of the NVIDIA drivers. There is no known alternative framebuffer for (U)EFI systems.

<!--T:123-->
The '''nvidia-drivers''' ebuild automatically discovers the kernel version based on the {{Path|/usr/src/linux}} symlink. Please ensure that this symlink is pointing to the correct sources and that the kernel is correctly configured. Please refer to the "Configuring the Kernel" section of the [[Handbook:Main_Page|Gentoo Handbook]] for details on configuring the kernel.

<!--T:124-->
First, choose the right kernel source using {{c|eselect}}. When using {{Package|sys-kernel/gentoo-sources}} version 3.7.10 for instance, the kernel listing might look something like this:

<!--T:125-->
{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

<!--T:126-->
In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the kernel that the symbolic link points to.

<!--T:127-->
If the symlink is not pointing to the correct sources, update the link by selecting the number of the desired kernel sources, as in the example above.

<!--T:128-->
{{RootCmd|eselect kernel set 1}}

== Configuration == <!--T:129-->

=== Drivers === <!--T:71--> 

<!--T:72-->
Now it's time to install the drivers. First follow the [[Xorg/Guide|X Server Configuration Guide]] and set <code>VIDEO_CARDS="nvidia"</code> in {{Path|/etc/portage/make.conf}}. During the installation of the X server, it will then install the right version of {{Package|x11-drivers/nvidia-drivers}}.

<!--T:18-->
{{Note|The drivers can be installed with the <code>tools</code> USE flag. This will install {{c|nvidia-settings}}, a handy graphical tool for monitoring and configuring several aspects of the NVIDIA card.}}

<!--T:19-->
{{Important|Every time a [[Kernel/Upgrade|kernel is built]], it is necessary to reinstall the NVIDIA kernel modules. An easy way to rebuild the modules installed by ebuilds (such as {{Package|x11-drivers/nvidia-drivers}}) is to run {{c|emerge @module-rebuild}}.}}

<!--T:20-->
Once the installation has finished, run {{c|modprobe nvidia}} to load the kernel module into memory. If this is an upgrade, remove the previous module first.

<!--T:17-->
{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

<!--T:21-->
To prevent from having to manually load the module on every bootup, have this done automatically each time the system is booted, so edit {{Path|/etc/conf.d/modules}} and add <code>nvidia</code> to it.

<!--T:22-->
{{Important|If <code>agpgart</code> is compiled as a module, then add it to {{Path|/etc/conf.d/modules}} as well.}}

=== Kernel module signing (optional) === <!--T:130-->

<!--T:131-->
{{Note|The information in this section in unnecessary for systems that do not implement signed kernel modules. Feel free to skip it.}}

<!--T:132-->
If secure boot kernel signing is used, then the NVIDIA kernel modules need to be signed before they can be loaded.

<!--T:133-->
This can be accomplished by using the kernel-provided {{c|perl}} script as follows.

<!--T:134-->
{{RootCmd|/usr/src/linux/scripts/sign-file sha512 /usr/src/linux/certs/signing_key.priv /usr/src/linux/certs/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

<!--T:135-->
{{RootCmd|/usr/src/linux/scripts/sign-file sha512 /usr/src/linux/certs/signing_key.priv /usr/src/linux/certs/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

<!--T:136-->
As of driver version 358.09 a new module has been made to handle monitor mode setting and for this driver version this module must also be signed.

<!--T:137-->
{{RootCmd|/usr/src/linux/scripts/sign-file sha512 /usr/src/linux/certs/signing_key.priv /usr/src/linux/certs/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

<!--T:138-->
Once the modules are signed, the driver will load as expected on boot up. This module signing method can be used to sign other modules too - not only the nvidia-drivers. Just modify the path and corresponding module accordingly.

=== The X server === <!--T:139-->

<!--T:140-->
Once the appropriate drivers are installed, configure the X server to use the <code>nvidia</code> driver instead of the default <code>nv</code> driver.

<!--T:141-->
{{VIDEO_CARDS/xorg.conf|nvidia}}

<!--T:142-->
Run {{c|eselect}} so that the X server uses the NVIDIA GLX libraries:

<!--T:143-->
{{RootCmd|eselect opengl set nvidia}}

=== Permissions === <!--T:144-->

<!--T:145-->
{{VIDEO_CARDS/Permissions|nvidia}}

=== Enabling global nvidia support === <!--T:146-->

<!--T:147-->
Some tools, such as {{Package|media-video/mplayer}} and {{Package|media-libs/xine-lib}}, use a local USE flag called <code>xvmc</code> which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in <code>xvmc</code> in the USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to {{Package|media-video/mplayer}} and/or {{Package|media-libs/xine-lib}} in {{Path|/etc/portage/package.use}}.

<!--T:148-->
GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

<!--T:149-->
There are also some applications that use the <code>nvidia</code> USE flag, so it might be a good idea to add it to {{Path|/etc/portage/make.conf}}.

<!--T:150-->
Then, run {{c|emerge -uD --newuse @world}} to rebuild the applications that benefit from the USE flag change.

=== Using the nVidia settings tool === <!--T:151-->

<!--T:152-->
NVIDIA also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as part of {{Package|x11-drivers/nvidia-drivers}} with the <code>tools</code> USE flag set.

=== Enable OpenGL/OpenCL === <!--T:33-->

<!--T:153-->
To enable OpenGL and OpenCL though the device, run:

<!--T:154-->
{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

<!--T:155-->
Make sure that the Xorg server is not running during these changes.

== Usage == <!--T:156-->

=== Testing the card === <!--T:26-->

<!--T:102-->
To test the NVIDIA card, fire up X and run {{c|glxinfo}}, which is part of the {{Package|x11-apps/mesa-progs}} package. It should say that direct rendering is activated:

<!--T:107-->
{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

<!--T:27-->
To monitor the FPS, run {{c|glxgears}}.

== Troubleshooting == <!--T:37-->

<!--T:113-->
For an overview of the currently open bugs reported against the {{Package|x11-drivers/nvidia-drivers}} package, take a look at the {{Bug|nvidia-drivers|search=package}}.

=== FATAL: modpost: GPL-incompatible module *.ko uses GPL-only symbol === <!--T:163-->

<!--T:164-->
When the ebuild is complaining about the 'mutex_destroy' GPL-only symbol:

<!--T:165-->
{{RootCmd|emerge nvidia-drivers|output=<pre>
FATAL: modpost: GPL-incompatible module nvidia.ko uses GPL-only symbol 'mutex_destroy' 
</pre>}}

<!--T:166-->
Be sure to disable <var>CONFIG_DEBUG_MUTEXES</var> in the kernel's {{Path|.config}} file, as suggested by [https://forums.gentoo.org/viewtopic-p-7964326.html this forum thread].

=== Driver fails to initialize when MSI interrupts are enabled === <!--T:73-->

<!--T:74-->
The Linux NVIDIA driver uses Message Signaled Interrupts (MSI) by default. This provides compatibility and scalability benefits, mainly due to the avoidance of IRQ sharing. Some systems have been seen to have problems supporting MSI, while working fine with virtual wire interrupts. These problems manifest as an inability to start X with the NVIDIA driver, or CUDA initialization failures.

<!--T:75-->
MSI interrupts can be disabled via the NVIDIA kernel module parameter <code>NVreg_EnableMSI=0</code>. This can be set on the command line when loading the module, or more appropriately via the distribution's kernel module configuration files (such as those under {{Path|/etc/modprobe.d/}}).

<!--T:76-->
For instance:

<!--T:77-->
{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=0660 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Getting 2D acceleration to work on machines with 4GB memory or more === <!--T:38-->

<!--T:78-->
When NVIDIA 2D acceleration is giving problems, then it is likely that the system is unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:

<!--T:110-->
{{RootCmd|cat /proc/mtrr}}

<!--T:39-->
Every line should contain <code>write-back</code> or <code>write-combining</code>. When a line shows up with <code>uncachable</code> in it then it is necessary to change a BIOS setting to fix this.

<!--T:40-->
Reboot and enter the BIOS, then find the MTRR settings (probably under "CPU Settings"). Change the setting from <code>continuous</code> to <code>discrete</code> and boot back into Linux. There is now no <code>uncachable</code> entry anymore and 2D acceleration now works without any glitches.

=== "no such device" appears when trying to load the kernel module === <!--T:41-->

<!--T:79-->
This is usually caused by one of the following issues:

<!--T:42-->
# The system does not have a NVIDIA card at all.  Check {{c|lspci}} output to confirm that the system has a NVIDIA graphics card installed and detected.
# The currently installed version of {{Package|x11-drivers/nvidia-drivers}} does not support the installed graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Another kernel driver has control of the hardware. Check {{c|lspci -k}} to see if another driver like "nouveau" or "efifb" is bound to the graphics card. If so, disable or blacklist this driver.

=== Xorg says it can't find any screens === <!--T:45-->

<!--T:46-->
When after booting the system, it ends up with a black screen or a console prompt instead of the GUI; then press {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}} to bring up a virtual console. Next, run:

<!--T:47-->
{{RootCmd| /etc/init.d/xdm stop}}

<!--T:80-->
{{Cmd| startx}}

<!--T:81-->
to see the output of Xorg. If one of the first errors is that Xorg can't find any screens, then follow the following steps to resolve the issue.

<!--T:82-->
It should be enough to run the following command before rebooting:

<!--T:83-->
{{RootCmd|/opt/bin/nvidia-xconfig}}

<!--T:84-->
But if that doesn't work, run {{c|lspci}} and notice that the video card starts off like this:

<!--T:85-->
{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

<!--T:86-->
Take the first bit, <code>01.00.0</code> and put it in the {{Path|/etc/X11/xorg.conf}} file with the <code>BusID</code> option:

<!--T:60-->
{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering is not enabled === <!--T:65-->

<!--T:66-->
If direct rendering does not work, it may be because the kernel has Direct Rendering Manager enabled, which conflicts with the driver. See the direct rendering status by following instructions in the section [[#Testing the card|Testing the card]].

<!--T:67-->
First, disable Direct Rendering Manager (<code>CONFIG_DRM</code>) in the kernel :

<!--T:68-->
{{KernelBox|title=Disabling Direct Rendering Manager|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

<!--T:69-->
Next, rebuild {{Package|x11-drivers/nvidia-drivers}} since the driver may have built against the kernel DRM symbols. It should fix the problem.

=== Video playback stuttering or slow === <!--T:114-->

<!--T:115-->
Lately there seems to be some breaking with playback of some types of video with the NVIDIA binary drivers, causing slow video playback or significant stuttering. This problem seems to be occurring within the Intel CPU Idle replacement instead of the common ACPI CPU idling method for certain CPU's.

<!--T:116-->
Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVIDIA Powermizer feature, or setting Powermizer to maximum performance within {{c|nvidia-settings}} has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <code>mplayer-nodeint</code> with something similar to <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> as a work around.)

If you're using GRUB2 as your bootloader, you can add this kernel parameter to <code>/etc/default/grub</code> like so:
{{FileBox|filename=/etc/default/grub|title=Adding intel_idle.max_cstate kernel parameter in GRUB2|1=
GRUB_CMDLINE_LINUX_DEFAULT="intel_idle.max_cstate=0"
}}
Don't forget to run <code>grub-mkconfig -o /boot/grub/grub.cfg</code> after making the change, so that the new configuration is generated (see [https://wiki.gentoo.org/wiki/GRUB2#Main_configuration_file the GRUB2 page] for further details).

After you have rebooted, you can verify that the change is active:
{{Cmd|cat /sys/module/intel_idle/parameters/max_cstate <pre>
0</pre>}}

=== No vertical synchronization (no VSync, tearing) in OpenGL applications === <!--T:157-->

<!--T:158-->
Adding the following option to the screen section prevents tearing on GTX 660, 660 Ti, and probably some other GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

<!--T:159-->
{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Screen"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== Expert configuration == <!--T:48-->

=== Documentation === <!--T:49-->

<!--T:87-->
The {{Package|x11-drivers/nvidia-drivers}} package also comes with comprehensive documentation. This is installed into {{Path|/usr/share/doc}} and can be viewed with the following command:

<!--T:88-->
{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Kernel module parameters === <!--T:50-->

<!--T:89-->
The <code>nvidia</code> kernel module accepts a number of parameters (options) which can be used to tweak the behavior of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run {{c|update-modules}} after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

<!--T:161-->
{{Warning|Pay close attention to this section as these kernel options can enable features that the hardware may or may not support. These options are not forgiving, so be careful with the parameters. Do not made any changes without validating and double-checking that the change is needed.}}

<!--T:162-->
{| class="table table-condensed table-striped"
|-
! Attribute !! Default !! Description
|-
| <code>NVreg_DeviceFileUID</code> || <code>0</code> || Modify the user ID for the device file. The default value sets it to the {{c|root}} user. Setting this to another user ID will make the driver module create the device file with access available to that user ID.
|-
| <code>NVreg_DeviceFileGID</code> || <code>27</code> || Modify the Group ID for the device file. The default value sets it to the {{c|video}} group.
|-
| <code>NVreg_DeviceFileMode</code> || Undefined || Set the permissions for the device file. A value of 0660 grants the owner and group-owner read-write access while other users cannot access the device file.
|-
| <code>NVreg_ModifyDeviceFiles</code> || <code>1</code> || Instruct the driver to enable or disable dynamic device file management.
|-
| <code>NVreg_EnablePCIeGen3</code> || <code>0</code> || Enable PCIe Gen 3.x support. If the system supports this 8GT high speed bus then enable it with this module option flag. When this is enabled but the system does not support Gen 3.0, the behavior of the system can become irratic and unstable. Some have even reported damage to hardware enabling this when it is not properly supported. By default the Nvidia driver is set to use PCIe Gen 2.x for compatibility reasons.
|-
| <code>NVreg_UsePageAttributeTable</code> || <code>0</code> || This is one of the latest and newest additions to the Nvidia driver modules option. It allows the driver to take full advantage of the PAT technology - a newer way of allocating memory, replacing the older Memory Type Range Register (MTRR) method. The PAT method creates a partition type table at a specific address mapped inside the register and utilizes the memory architecture and instruction set more efficiently and faster. If the computer supports PAT and the feature is enabled in the kernel then this flag can be enabled. Without PAT support, users may experience unstable performance and even crashes if this is enabled. So be careful with these options.
|-
| <code>NVreg_EnableVia4x</code> || <code>0</code> || Enable AGP 4x mode in the the NVIDIA driver on Via-chipset-powered systems. Some of these hardware configurations would not work properly in AGP 4x mode when others would. The default leaves it at AGP 2x mode.
|-
| <code>NVreg_EnableALiAGP</code> || <code>0</code> || On ALi1541 and ALi1647 chipsets, AGP support is by default disabled by the NVIDIA drivers. The value specifies the speed factor to use, so the values 1, 2, 4 and 8 represent AGP 1x, 2x, 4x and 8x respectively. NVIDIA does not recommend changing the value as it may lead to unstable systems.
|-
| <code>NVreg_ReqAGPRate</code> || Unspecified || Forces the AGP mode on the driver. For instance, a value of 1 means AGP 1x, while a value of 4 means AGP 4x.
|-
| <code>NVreg_NvAGP</code> || || Changes the AGP Gart mode setting. Possible values are: <code>0</code> (Disable), <code>1</code> (Enable using NVIDIAs internal AGP-Gart), <code>2</code> (Enable using the Linux kernel AGP-Gart) and <code>3</code> (Enable and use any available, but try th NVIDIA internal one first).
|-
| <code>NVreg_EnableAGPSBA</code> || <code>0</code> || Disables (<code>0</code>) or enables (<code>1</code>) AGP Side Banding. For stability reasons, the setting is by default disabled, but the setting can be enabled for testing and debugging purposes. This is not supported by NVIDIA though.
|-
| <code>NVreg_EnableAGPFW</code> || <code>0</code> || Enables AGP Fast-Writes when set to <code>1</code>. Depending on the system's chipset this may cause stability issues if enabled.
|-
| <code>NVreg_Mobile</code> || <code>0</code> || Through this setting, users can force the EDID information for particular systems. This workaround is provided for mobile GPU's where EDID information is either non-functional or disabled. Potential values are <code>0</code> (Auto detection of the correct setting), <code>1</code> (Dell notebooks), <code>2</code> (non-Compa1 Toshiba laptops), <code>3</code> (All other notebooks/laptops), <code>4</code> (Compa1 Toshiba laptops) or <code>5</code> (Gateway machines).
|-
| <code>NVreg_RemapLimit</code> || <code>60</code> || Maximum amount of system memory remapping. It specifies the amount of memory that the driver will be allowed to remap through the IOMMU/SWIOTLB on a 64-bit system. Only use it if the IOMMU or SMIOTLB is larger than 64mb. NVIDIA recommends to subtract 4mb from the total amount of memory to use. For instance, the default value is <code>60</code> which is in fact 64mb. To set it to 128mb, set the value to <code>124</code>.
|-
|<code>NVreg_UpdateMemoryTypes</code> || <code>0</code> || Tweak the use of page table attributes. Possible values are: <code>0</code> (Nvidias logic mechanism), <code>1</code> (Enable the use of changed page table attributes) and <code>2</code> (Disable the use of page table attributes).
|-
|<code>NVreg_InitializeSystemMemoryAllocations</code> || <code>1</code> || Tell the NVIDIA driver to clear system memory allocations prior to using it for the GPUs. Disabling can give a slight performance boost but at the cost of increased security risks. By default the driver will wipe the allocated by zeroing out its content.
|-
| <code>NVreg_UseVBios</code> || <code>1</code> || Enable or disable the use of the video BIOS int10 code. Set to <code>0</code> to disable.
|-
| <code>NVreg_RMEdgeIntrCheck</code> || Unspecified || Enable or disable checking for edge-triggered interrupts.
|-
| <code>NVreg_EnableMSI</code> || <code>0</code> || Enable or disable PCIe-MSI capabilities. Enable this to use MSI interrupts instead of wired interrupts.
|-
| <code>NVreg_MapRegistersEarly</code> || <code>0</code> || If set to <code>1</code>, allow the driver to map the memory locations early when the system is probing the hardware instead of the default option of doing this when loaded by {{c|modprobe}} or during {{c|startx}}. This is a debugging feature.
|-
| <code>NVreg_RegisterForACPIEvents</code> || <code>1</code> || Enable the driver to register with the ACPI of the system to receive ACPI events. This can be disabled (<code>0</code>) when issues occur with ACPI or while debugging an issue. 
|}

<!--T:51-->
Edit the {{Path|/etc/modprobe.d/nvidia.conf}} file, and afterwards update the module information:

<!--T:91-->
{{RootCmd|update-modules}}

<!--T:53-->
Unload the <code>nvidia</code> module...

<!--T:92-->
{{RootCmd|modprobe -r nvidia}}

<!--T:54-->
...and load it once again:

<!--T:93-->
{{RootCmd|modprobe nvidia}}

=== Advanced X configuration === <!--T:55-->

<!--T:94-->
The GLX layer also has a plethora of options which can be configured. These control the configuration of TV out, dual displays, monitor frequency detection, etc. Again, all of the available options are detailed in the documentation.

<!--T:56-->
To use any of these options, list them in the relevant Device section of the X config file (usually {{Path|/etc/X11/xorg.conf}}). For example, to disable the splash logo:

<!--T:57-->
{{FileBox|filename=/etc/X11/xorg.conf|title=Disable the splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== See also == <!--T:59-->

<!--T:58-->
* [[nouveau & nvidia-drivers switching]] - Hybrid graphics mode using open-source drivers.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configure a system to use closed-source drivers for hybrid graphics (modesetting).
</translate>

{{Migrated|originalauthors={{Dev|SwifT}}, {{Dev|nightmorph}}, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
