<languages />
{{InfoBox stack
|{{InfoBox homepage|http://www.php.net|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox ohloh}}
}}

'''PHP''' — это язык сценариев общего назначения, предназначенный для создания сценариев на стороне сервера с целью динамического создания веб-страниц.

== Установка ==

=== USE-флаги ===

Существует глобальный USE-флаг <code>php</code> для включения поддержки PHP в других пакетах. Включение этого USE-флага автоматически установит пакет {{Package|dev-lang/php}} после обновления глубоких зависимостей в наборе @world. Сначала установите глобальный USE-флаг в {{Path|/etc/portage/make.conf}}:

{{FileBox|filename=/etc/portage/make.conf|title=Объявление php в качестве глобального USE-флага|lang=bash|1=
USE="php"
}}

Наиболее важные USE-флаги пакета PHP, USE-флаги SAPI (Server API), это {{c|apache2}}, {{c|cgi}} и {{c|fpm}}. Помимо этих USE-флагов, существует множество других USE-флагов, предназначенных для включения различных возможностей в интерпретатор PHP:

{{USEflag|package=dev-lang/php}}

По умолчанию ebuild устанавливает нестабильную версию {{Path|php.ini}}. Для того, чтобы установить стабильную версию, у которой более строгие настройки безопасности, но с помощью которой может быть сложнее отлаживать приложения, добавьте следующее в файл {{Path|make.conf}}:

{{FileBox|filename=/etc/portage/make.conf|title=Установка стабильной версии файла php.ini|lang=bash|1=
PHP_INI_VERSION="production"
}}

Обе версии {{Path|php.ini}} можно найти в {{Path|/usr/share/doc/php-*}}.

После изменения предпочтительной версии {{Path|php.ini}} следует переустановить PHP с помощью команды, приведенной ниже, в [[#Emerge|разделе Emerge]].

=== Расширения ===

Чтобы установить расширения, прежде всего определите, для каких версий PHP их следует скомпилировать. Это реализуется посредством установки переменной <var>PHP_TARGETS</var>:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
PHP_TARGETS="php5-6"
}}

Можно указать более одной версии; просто добавьте дополнительные версии, разделенные пробелами. Обратите внимание, что слот php называется "5.6", а соответствующее значение <var>PHP_TARGETS</var> — <code>php5-6</code>. Причина этого — в текущих ограничениях имен USE.

=== Emerge ===

После настройки USE-флагов, как показано выше, необходимо обновить систему, чтобы изменения вступили в силу:

{{Emerge|params+=--update --changed-use --deep|@world}}

== Запуск нескольких версий PHP ==

Одно из больших преимуществ использования Gentoo для разработки PHP — слотирование версий. Переключаться между несколькими версиями PHP очень просто, также как одновременно запускать несколько версий. Все это осуществляется с помощью команды {{c|eselect}}, предоставляемой пакетом {{Package|app-eselect/eselect-php}}, который должен автоматически устанавливаться при установке PHP. Например, выбор нескольких версий PHP позволяет системе использовать PHP 7.0 для cli и PHP 5.6 для веб-сервера. Это также позволяет быстро протестировать приложение на разных версиях PHP.

Чтобы вывести доступные версии для '''cli''' SAPI, используйте команду:

{{RootCmd|eselect php list cli|output=<pre>
 [1]   php5.5 
 [2]   php5.6 *   
 [3]   php7.0
</pre>}}

Версия, отмеченная символом <code>*</code>, является текущей активной версией. Чтобы посмотреть другие SAPI, замените <code>cli</code> на <code>fpm</code>, <code>cgi</code> или <code>apache2</code>.

Чтобы переключить версию:

{{RootCmd|eselect php set cli 3}}

Номер <code>3</code> в этом примере соответствует номеру из вывода суб-команды <code>list</code>, приведенной выше. PHP версии 7.0 теперь используется для командной строки:

{{RootCmd|php -v|output=<pre>
PHP 7.0.10-pl0-gentoo (cli) (built: Aug 23 2016 12:38:44) ( NTS )
</pre>}}

== Конфигурация ==

Конфигурация PHP находится в каталоге {{Path|/etc/php}}, который содержит один подкаталог для каждого SAPI и для каждой версии PHP. Например, конфигурационные файлы для PHP-5.6 apache2 SAPI устанавливаются в {{Path|/etc/php/apache2-php5.6}}.

=== Веб-серверы ===

Чтобы использовать PHP на стороне сервера, веб-сервер должен быть установлен и настроен для использования PHP. Далее кратко рассматривается несколько популярных веб-серверов.

==== Nginx ====

Просто скомпилируйте [[Nginx/ru|nginx]], чтобы установить его:

{{Emerge|www-servers/nginx}}

{{Important|If custom <var>NGINX_MODULES_HTTP</var> values are set in {{Path|make.conf}}, make sure that the <code>fastcgi</code> module is enabled.}}

Once Nginx has been installed, modify the server section of {{Path|/etc/nginx/nginx.conf}} to look something like this: 

{{FileBox|filename=/etc/nginx/nginx.conf|title=Часть конфигурации nginx, в которой настраивается работа PHP через FastCGI|1=
        server {
                listen 127.0.0.1;
                server_name localhost;
 
                access_log /var/log/nginx/localhost.access_log main;
                error_log /var/log/nginx/localhost.error_log info;
 
                root /var/www/localhost/htdocs;
 
                location ~ .php$ {
                        fastcgi_pass 127.0.0.1:9000;
                        include fastcgi.conf;
                }
        }
}}

Now start the related services to have a working site. The {{Path|php-fpm}} init script starts the PHP FastCGI Process Manager. FastCGI allows web servers to offload the PHP calculations to this process manager.

{{RootCmd
|service nginx start
|service php-fpm start
}}

==== lighttpd ====

{{Warning|Do not enable the <code>php</code> USE flag for {{Package|www-servers/lighttpd}}. It could actually break the build.}}

Make sure that lighttpd is built with support for <code>fastcgi</code> and that the <code>php</code> USE flag is disabled:

{{FileBox|filename=/etc/portage/package.use|1=
www-servers/lighttpd fastcgi -php
}}

Lighttpd ships with a default FastCGI config file, but unfortunately, it is written to work with the old PHP FCGI SAPI only, instead of a general FCGI setup. Since the <code>php</code> USE flag has been disabled, it will not be included, and rightly so. However it does provide a good foundation for a configuration file that can be used with FPM. 

Edit {{Path|/etc/lighttpd/mod_fastcgi.conf}} to look something like this: 

{{FileBox|filename=/etc/lighttpd/mod_fastcgi.conf|title=Включение FastCGI в lighttpd|lang=lua|1=
server.modules += ("mod_fastcgi")
fastcgi.server = ( ".php" =>
  ( "localhost" =>
    (
      "host" => "127.0.0.1",
      "port" => "9000"
    )
  )
)
}}

Note the <code>host</code> and <code>port</code> parts. 

Since Gentoo ships with a working {{Path|php-fpm.ini}} file, located in {{Path|/etc/php/fpm-php5/php-fpm.ini}}, and init script, starting the services is all that is needed: 

{{RootCmd
|/etc/init.d/php-fpm start
|/etc/init.d/lighttpd start
}}

==== Apache (mod_php) ====

To configure Apache to load the PHP5 module (mod_php), add <code>-D PHP</code> to <var>APACHE2_OPTS</var> variable in {{Path|/etc/conf.d/apache2}}. Users might remember that previously, the PHP version had to be added as well (like <code>-D PHP5</code>). However, since {{Package|app-eselect/eselect-php}} version 0.8.1, the variable is changed to just <code>-D PHP</code> to allow future major versions to be easily integrated.

{{FileBox|filename=/etc/conf.d/apache2|title=Настройка Apache для загрузки mod_php|lang=bash|1=
## (settings for PHP5 and above)
APACHE2_OPTS="-D PHP"
}}

Make sure that PHP is built with the <code>apache2</code> USE flag.

If for some reason the system is missing the PHP module integration file {{Path|/etc/apache2/modules.d/70_mod_php.conf}}, currently provided by {{Package|app-eselect/eselect-php}} when installed with <code>apache2</code> USE flag set, manually insert it. Its current content is displayed below.

{{FileBox|filename=/etc/apache2/modules.d/70_mod_php.conf|lang=apache|1=
<IfDefine PHP>
	# The mod_php.so symlink is controlled by
	# eselect-php. However, the module name changed from
	# php5_module to php7_module so we can't blindly load whatever
	# is there. Instead we let eselect-php manage a small
	# configuration file that loads the appropriate module.
	#
	# This is relative to ServerRoot (see httpd.conf).
	Include ../../../var/lib/eselect-php/mod_php.conf
 
	# Tell apache that mod_php should handle PHP files.
	#
	# NOTE: Avoiding AddHandler/AddType for security (bug
	# #538822). Please read the related news item!
	<FilesMatch "\.(php{{!}}php[57]{{!}}phtml)$">
		SetHandler application/x-httpd-php
	</FilesMatch>
 
	# PHP source files which are meant to be displayed as
	# syntax-highlighted source code.
	<FilesMatch "\.phps$">
		SetHandler application/x-httpd-php-source
	</FilesMatch>
 
	DirectoryIndex index.php index.phtml
</IfDefine>}}

Although multiple PHP versions can be installed on a system, Apache can only use a single PHP version. The {{c|eselect php}} command is used to switch between active PHP versions.

== Смотрите также ==

* [[PHP/Upgrading_to_PHP_5.6|Upgrading to PHP 5.6]], guide to upgrade older installations to 5.6
* [[Apache#Enabling_PHP_support|Enabling PHP support]] in the Apache article

[[Category:Programming language]]
