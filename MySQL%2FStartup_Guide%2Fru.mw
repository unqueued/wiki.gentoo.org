<languages />

Этот документ поможет пользователю в настройке и использовании MySQL.

== Начало Работы с MySQL ==

=== Основы ===

MySQL - это популярный сервер баз данных, который используется в разных приложениях. SQL означает язык структурированных запросов - (S)tructured (Q)uery (L)anguage, который MySQL использует для коммуникации с другими программами. Сверх того, MySQL имеет свои собственные расширенные функции SQL для того чтобы обеспечить пользователям дополнительный функционал. В этом документе мы рассмотрим как провести первоначальную установку MySQL, настроить базы данных и таблицы, и создать новых пользователей. Давайте начнем с установки. 

=== Установка MySQL ===

Сначала убедитесь что MySQL установлена на вашу систему. В случае если Вам требуется определенная функциональность MySQL, убедитесь, что необходимые USE-флаги включены, так как они помогут в тонкой настройке Вашей установки. 

{{Emerge|mysql}}

По завершении установки, Вы увидите следующее уведомление: 

{{Code|MySQL einfo message|<pre>
You might want to run:
"emerge --config =dev-db/mysql-[version]"
if this is a new install.
</pre>
}}

Так как это новая установка, мы запустим эту команду. Вам надо нажать <code>ENTER</code>, когда это будет запрошено во время конфигурации базы данных MySQL. Эта конфигурация настраивает основную базу данных MySQL, которая содержит административную информацию, такую как базы данных, таблицы, пользователи, разрешения и т.д. Конфигурация рекомендует чтобы Вы изменили свой пароль root настолько быстро, насколько это возможно. Мы определенно это сделаем, иначе кто-нибудь сможет случайно войти и взломать установку сервера MySQL по умолчанию. 

{{RootCmd|emerge --config {{=}}dev-db/mysql-[version]|output=<pre>
 * MySQL DATADIR is /var/lib/mysql
 * Press ENTER to create the mysql database and set proper
 * permissions on it, or Control-C to abort now...
 
   Preparing db table
   Preparing host table
   Preparing user table
   Preparing func table
   Preparing tables_priv table
   Preparing columns_priv table
   Installing all prepared tables
 
   To start mysqld at boot time you have to copy support-files/mysql.server
   to the right place for your system
 
   PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
   To do so, issue the following commands to start the server
   and change the applicable passwords:
 
   /etc/init.d/mysql start
   /usr/bin/mysqladmin -u root -h pegasos password 'new-password'
   /usr/bin/mysqladmin -u root password 'new-password'
   Depending on your configuration, a -p option may be needed
   in the last command. See the manual for more details.
</pre>}}

Некоторая нехарактерная для ebuild-файлов информация MySQL удалена отсюда, чтобы содержать этот документ настолько последовательным, насколько возможно.

{{Important/ru|В mysql-4.0.24-r2, пароли вводятся в течение этапа конфигурации, делая пароль root более безопасным.}}

Сценарий конфигурации уже вывел команды, которые нам нужно запустить, чтобы настроить наш пароль, поэтому нам сейчас надо их выполнить. 

{{RootCmd|/etc/init.d/mysql start|output=<pre>
 * Re-caching dependency info (mtimes differ)...
 * Starting mysqld (/etc/mysql/my.cnf) ...        [ ok ]
</pre>}}

{{RootCmd|/usr/bin/mysqladmin -u root -h localhost password 'new-password'}}

Теперь Вы можете проверить, что пароль root был успешно настроен, попытавшись войти на MySQL-сервер: 

{{Cmd|mysql -u root -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 4 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Параметр <code>-u</code> устанавливает пользователя, который будет выполнять вход. Параметр <code>-h</code> устанавливает хост. Обычно это будет <code>localhost</code>, если только Вы не настраиваете удаленный сервер. И, наконец, <code>-p</code> сообщает клиенту mysql что Вы будете вводить пароль для доступа к базе данных. Заметьте командную строку <code>mysql</code>. Это то место, где Вы будете вводить все Ваши команды. Теперь, когда мы в командной строке mysql в качестве пользователя root, мы можем начать настраивать нашу базу данных. 

== Настройка Базы Данных ==

=== Создание Базы Данных ===

Мы вошли и командная строка mysql отображена. Сначала, давайте рассмотрим базы данных, который у нас имеются в настоящий момент. Чтобы это сделать, мы используем команду <code>SHOW DATABASES</code>. 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| mysql    |
| test     |
+----------+
2 rows in set (0.09 sec)
</pre>
}}

{{Important/ru|Пожалуйста, запомните что команды MySQL должны оканчиваться точкой с запятой -- <code>;</code>}}

Вопреки тому факту, что тестовая база данных уже создана, мы собираемя создать нашу собственную. Базы данных создаются с использованием команды <code>CREATE DATABASE</code>. Мы создадим одну из них с названием ''gentoo''. 

{{Cmd|CREATE DATABASE gentoo;|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.08 sec)
</pre>
}}

Ответ позволяет нам узнать, что команда была выполнена без ошибок. В этом случае, одна строка была изменена. Это является ссылкой на основную базу данных mysql, которая содержит список всех баз данных. Вам не нужно сильно беспокоиться о деталях заднего плана. Последнее число является характеристикой того, насколько быстро был выполнен запрос. Мы можем проверить, что база данных была создана запуском команды <code>SHOW DATABASES</code> снова. 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| gentoo   |
| mysql    |
| test     |
+----------+
3 rows in set (0.00 sec)
</pre>
}}

В самом деле, наша база данных была создана. Для того чтобы работать с созданием таблиц для нашей новой базы данных gentoo, нам надо выбрать ее в качестве текущей базы данных. Чтобы это сделать, мы используем команду <code>USE</code>. Команда <code>USE</code> принимает имя базы данных, которую Вы хотите использовать в качестве текущей. Другой возможностью является ее установка в командной строке после параметра <code>-D</code>. Давайте продолжим и переключимся к базе данных gentoo. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Database changed
</pre>
}}

Сейчас, текущей базой данных является наша созданная ранее база данных gentoo. Теперь, когда мы ее используем, мы можем начать создавать таблицы и заполнять их информацией.

== Работа с Таблицами в MySQL ==

=== Создание Таблицы ===

В структуре MySQL, присутствуют базы данных, таблицы, записи, и поля. Базы данных объединяют таблицы, таблицы объединяют записи, записи объединяют поля, которые содержат действительную информацию. Эта структура позволяет пользователям выбирать как они хотят получить доступ к их информации. На данный момент, мы разобрались с базами данных, теперь давайте поработаем с таблицами. Во-первых, таблицы могут быть перечислены, подобно базам данных, с использованием команды <code>SHOW TABLES</code>. Сейчас, в базе данных gentoo не имеется таблиц, как и показывает нам следующая команда: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
Empty set (0.00 sec)
</pre>
}}

Это означает нам надо создать какие-либо таблицы. Чтобы это сделать, мы используем команду <code>CREATE TABLE</code>. Однако, эта команда достаточно отличается от простой команды <code>CREATE DATABASE</code>. Эта команда принимает список аргументов. Форма команды следует ниже: 

{{Code|CREATE TABLE Syntax|<pre>
CREATE TABLE [table_name] ([field_name] [field_data_type]([size]));
</pre>
}}

'''table_name''' - это имя таблицы, которую мы хотим создать. В данном случае, давайте создадим таблицу с именем <code>developers</code> . Эта таблица будет хранить имя разработчика, email адрес и работу. '''field_name''' будет хранить имя поля. В этом случае мы имеем три требуемых имени: имя разработчика, email адрес, и работу. '''field_data_type''' - это то, какой тип информации будет сохранен. Различные доступные форматы могут быть найдены по адресу [http://dev.mysql.com/doc/mysql/en/column-types.html MySQL Column Types Page] . Для наших целей, мы будем использовать тип данных <code>VARCHAR</code> для всех наших полей. <code>VARCHAR</code> - это один из простейших типов данных, когда дело касается работы со строками. '''size''' - это то, как много данных будет хранить одно поле. В нашем случае, мы будем использовать 128. Это означает, что поле будет иметь данные <code>VARCHAR</code>, которые занимают 128 байт. Вы можете спокойно думать об этом как о 128 символах в настоящий момент, хотя существует более техническое объяснение, которое Вам предоставит сайт, указанный выше. Теперь, когда мы знаем как мы создадим таблицу, давайте это сделаем. 

{{Cmd|CREATE TABLE developers ( name VARCHAR(128), email VARCHAR(128), job VARCHAR(128));|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.11 sec)
</pre>
}}

Похоже, наша таблица была успешно создана. Давайте проверим это командой <code>SHOW TABLES</code>: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+------------------+
| Tables_in_gentoo |
+------------------+
| developers       |
+------------------+
1 row in set (0.00 sec)
</pre>
}}

Да, наша таблица существует. Однако, она, по-видимому, не имеет какой-либо информации о типах полей, которые мы настроили. Для этого, мы используем команду <code>DESCRIBE</code> (или, кратко, <code>DESC</code>), которая принимает имя таблицы в качестве своих аргументов. Давайте посмотрим что она нам дает для нашей таблицы developers. 

{{Cmd|DESCRIBE developers;|prompt=mysql&gt; |output=<pre>
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| name  | varchar(128) | YES  |     | NULL    |       |
| email | varchar(128) | YES  |     | NULL    |       |
| job   | varchar(128) | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
</pre>
}}

Это показывает разные поля и их типы. Это также показывает несколько дополнительных атрибутов, которые находятся за рамками данного руководства. Пожалуйста, обратитесь за подробностями к [http://dev.mysql.com/doc/mysql/en Справочному Руководству MySQL] . Теперь у нас есть таблица, чтобы с ней работать. А сейчас, давайте продолжим и заполним ее. 

=== Заполнение Базы Данных MySQL ===

Мы заполним таблицу (или добавим данные), используя команду <code>INSERT</code>. Подобно команде <code>CREATE TABLE</code>, она также имеет особый формат: 

{{Code|INSERT Syntax|<pre>
INSERT INTO table (col1, col2, ...) VALUES('value1', 'value2', ...);
</pre>
}}

Эта команда используется для вставки записи в таблицу. Таблица содержит таблицу MySQL, в которую мы хотим ввести информацию. Имя таблицы может сопровождаться списком столбцов для вставки данных, <code>VALUES()</code> хранит значения, которые Вы хотите вставить в таблицу. Вы можете опустить список столбцов, если Вы вставляете значение в каждый из них и если Вы пишете значения в том же порядке, в котором определены столбцы. В данном случае, мы хотим вставить данные в таблицу developers. Давайте вставим примеры записей: 

{{Cmd|INSERT INTO developers VALUES('Joe Smith', 'joesmith@gentoo.org', 'toolchain');|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.06 sec)
## (Если Вы не знаете порядок столбцов в таблице или хотите вставить неполную запись)
mysql> INSERT INTO developers (job, name) VALUES('outsourced', 'Jane Doe');
Query OK, 1 row affected (0.01 sec)
</pre>
}}

В соответствии с возвращаемым результатом, кажется, запись была вставлена правильно. Что если мы хотим ввести больше, чем просто одну запись? Это то, когда команда <code>LOAD DATA</code> вступает в действие. Она загружает записи из файла, разделенного символами табуляции. Давайте это попробуем, отредактировав файл в домашней директории пользователя и добавив в него записи. Мы назовем этот файл {{Path|records.txt}} . Здесь приведен пример: 

{{Code|~/records.txt|<pre>
John Doe	johndoe@gentoo.org	portage
Chris White	chriswhite@gentoo.org	documentation
Sam Smith	samsmith@gentoo.org	amd64
</pre>
}}

{{Important/ru|Убедитесь, что Вы знаете, с какими данными Вы будете работать. Очень небезопасно использовать <code>LOAD DATA</code>, когда Вы не уверены насчет содержимого файла!}}

Now the <code>LOAD DATA</code> command has a somewhat elongated definition, but we'll use the simplest form here. 

{{Code|LOAD DATA Syntax|<pre>
LOAD DATA LOCAL INFILE '/path/to/filename' INTO TABLE table;
</pre>
}}

{{Path|/path/to/filename}} is the directory and filename that will be used. table is the name of our table. In this case, our file is {{Path|~/records.txt}} and the table is developers. 

{{Cmd|LOAD DATA LOCAL INFILE '~/records.txt' INTO TABLE developers;|prompt=mysql&gt; |output=<pre>
Query OK, 3 rows affected (0.00 sec)
Records: 3  Deleted: 0  Skipped: 0  Warnings: 0
</pre>
}}

{{Important|If you come up with any strange behavior, make sure your fields are separated by tabs. If you paste information into your infile from another source, it may convert your tabs to spaces.}}

That worked well. However, this simply inserts records, and does not give you any sort of control over MySQL. Many web applications use sql scripts in order to setup MySQL quickly and easily. If you want to use an sql script, you'll need to run mysql in batch mode, or source the file. Here's an example of running mysql in batch mode: 

{{Cmd|mysql -u root -h localhost -p < sqlfile}}

Like <code>LOAD DATA</code> , be sure you can tell what {{Path|sqlfile}} does. ''Failure to do so may cause your database to be compromised!'' Another way you can accomplish this is to use the <code>source</code> command. This command will run mysql commands from an sql file while in the mysql interactive mode. Here is how to source an sql file: 

{{Cmd|source sqlfile;|prompt=mysql&gt; }}

If you see a web application wanting you to run an sql file, the two above commands can be used to accomplish that task. We have our table setup, so how do we check our fields? We do this by searching our table with queries. 

=== Browsing MySQL Tables With Queries ===

Queries are one of the main features of any SQL database. They help us turn data in our tables into something useful. Most queries are done with the <code>SELECT</code> command. The <code>SELECT</code> command is fairly complex, and we're only going to look at three main forms of the command in this document. 

{{Code|SELECT forms|<pre>
## (Select all entries in a table)
SELECT * FROM table;
## (Select specific entries in a table)
SELECT * FROM table WHERE field=value;
## (Select specific fields)
SELECT field1,field2,field3 FROM table [WHERE field=value];
</pre>
}}

Let's take a quick look at the first form. It's relatively simple and gives you an overall look of your table. We'll go ahead and run it to see what data we have so far. 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

We see both the data we inserted through <code>INSERT</code> and those inserted by <code>LOAD DATA</code> present. Now, let's say that we just want to see the record for Chris White. We can do so with the second form of select as shown below. 

{{Cmd|SELECT * FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+---------------+
| name        | email                 | job           |
+-------------+-----------------------+---------------+
| Chris White | chriswhite@gentoo.org | documentation |
+-------------+-----------------------+---------------+
1 row in set (0.08 sec)
</pre>
}}

As expected, the specific entry that we were looking for has been selected. Now, let's say we only wanted to know the person's job and email address, not their name. We can do so with the third form of <code>SELECT</code> as shown here. 

{{Cmd|SELECT email,job FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-----------------------+---------------+
| email                 | job           |
+-----------------------+---------------+
| chriswhite@gentoo.org | documentation |
+-----------------------+---------------+
1 row in set (0.04 sec)
</pre>
}}

This method of selection is a lot easier to manage, expecially with larger amounts of information, as we'll see later on. Right now, being the root mysql user, we have unlimited permissions to do what we wish with the MySQL database. In a server environment, a user with such privileges can be quite problematic. In order to control who does what with the databases, we setup privileges. 

== MySQL Privileges ==

=== Granting Privileges with GRANT ===

Privileges are what kind of access users have to databases, tables, pretty much anything. Right now in the gentoo database, the MySQL root account is the only account that can access it, given its permissions. Now, let's create two somewhat generic users, guest and admin, who will access the gentoo database and work with the information in it. The guest account will be a restricted one. All it will be able to do is get information from the database, and that's it. admin will have the same control as root, but only for the gentoo database (not the main mysql databases). Before we start on that, let's have a closer look at this somewhat simplified format of the <code>GRANT</code> command. 

{{Code|GRANT Syntax|<pre>
GRANT [privileges] ON database.* TO '[user]'@'[host]' IDENTIFIED BY '[password]';
</pre>
}}

{{Note|<code>GRANT</code> is considered to be the way to create a user. Later versions of MySQL, however, do contain a<code>CREATE_USER</code> function, though<code>GRANT</code> is still preferred.}}

First we have the privileges we wish to assign. With what we've learned so far, here are some of the privileges you can set: 

* <code>ALL</code> - Gives the all privilege control for the database
* <code>CREATE</code> - Allows users to create tables
* <code>SELECT</code> - Allows users to query tables
* <code>INSERT</code> - Allows users to insert data into a table
* <code>SHOW DATABASES</code> - Allows users to see a list of databases
* <code>USAGE</code> - User has no privileges
* <code>GRANT OPTION</code> - Allows users to grant privileges

{{Note|If you're running MySQL to communicate data to a web application, <code>CREATE</code> , <code>SELECT</code> , <code>INSERT</code> (discussed here), <code>DELETE</code> and <code>UPDATE</code> (for further infomation look up the [http://dev.mysql.com/doc/mysql/en/grant.html MySQL Reference Manual - GRANT and REVOKE Syntax] section) are the only permissions you will most likely need. A lot of people make the mistake of granting all permissions when it's not really necessary. Check with the application developers to see if such permissions will cause issues with general operation.}}

For our admin user, ALL will do. For the guest user, <code>SELECT</code> will be sufficient for read only access. database is the database we wish the user to have these permissions on. In this example, gentoo is the database. The .* means all tables. If you wanted to, you could apply per table access. user is the name of the user and host is the hostname the user will be accessing from. In most cases, this will be localhost. Finally, password is the user's password. Given the information, let's go ahead and create our users. 

{{Cmd|GRANT ALL ON gentoo.* TO 'admin'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

{{Cmd|GRANT SELECT ON gentoo.* TO 'guest'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

Now that we have the users setup, let's test them out. First we quit mysql by typing <code>quit</code> at the command prompt: 

{{Cmd|quit|prompt=mysql&gt; }}

We're now back at the console. Now that we have our users setup, let's go ahead and see what they can do. 

=== Testing User Permissions ===

We shall now attempt to login as the guest user. Currently, the guest user has <code>SELECT</code> only privileges. This basically comes down to being able to search and nothing more. Go ahead and login with the guest account. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 6 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Now we should test the user restriction(s). Let's switch to the gentoo database: 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
</pre>
}}

Now let's try to do something we are not supposed to. We'll attempt to create a table. 

{{Cmd|CREATE TABLE test (test VARCHAR(20), foobar VARCHAR(2));|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

As you can see, this function fails, as our user does not have the appropriate access. However, one access we did grant is the <code>SELECT</code> statement. Let's go ahead and try that: 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

The command succeeds, and we're given a glimpse of what user permissions can do. We did, however, create an admin account as well. This was created to show that even all permissions granted users can still have limitations. Go ahead and quit MySQL and login as the admin. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u admin -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 7 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

To begin, we'll try creating a new database with our admin user. This admin user will have access similiar to the root MySQL account, and will be able to do any kind of modification to the gentoo database it chooses. This will test the user's access to the main MySQL database. Remember ealier that we only set permissions to a specific database. 

{{Cmd|CREATE DATABASE gentoo2;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'admin@localhost' to database 'gentoo2'
</pre>
}}

Indeed, the admin user cannot create databases on the main MySQL database, despite all his permissions on the gentoo database. However, we're still able to use the admin account to modify the gentoo database, as shown here by this example data insertion. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql> INSERT INTO developers VALUES('Bob Simmons', 'bobsimmons@gentoo.org', 'python');
Query OK, 1 row affected (0.08 sec)
</pre>
}}

The admin user can access the database as they please. Now sometimes, we need to get rid of user permissions. This could be anything from a problematic user to a retired employee. Let's take a look at how to disable user permissions with the <code>REVOKE</code> command. 

=== Removing User Access With The REVOKE Command ===

The <code>REVOKE</code> command lets us deny access to a user. We can either deny full access, or specific access. In fact, the format is very similiar to <code>GRANT</code> . 

{{Code|REVOKE Syntax|<pre>
REVOKE [privileges] ON database.* FROM '[user]'@'[host]';
</pre>
}}

Options here are explained in the <code>GRANT</code> command section. In this section however, we're going to deny full access to a user. Let's say we find out the guest account is causing some problems security wise. We decide to revoke all privileges. We login as root and do the needful. 

{{Cmd|REVOKE ALL ON gentoo.* FROM 'guest'@'localhost';|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

{{Note|In this case, user access is simple, so per database revoking is not a problem. However, in larger cases, you would most likely be using *.* instead of gentoo.* to remove user access to all other databases.}}

Now let's quit and attempt to login as a guest user. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 9 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Although we're able to login, our access to gentoo is now gone. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

And our problematic user is no longer able to access the gentoo database. Please note that the user was still able to login. That is because they remain in the main MySQL database. Let's take a look at how to completely remove an account with <code>DELETE</code> and the MySQL user table. 

=== Removing Accounts Using DELETE ===

The MySQL user table is a listing of all users and information about them. Make sure you're logged in as root. Then go ahead and use the main MySQL database. 

{{Cmd|USE mysql;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql>
</pre>
}}

Now let's see what tables the mysql database has: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+-----------------+
| Tables_in_mysql |
+-----------------+
| columns_priv    |
| db              |
| func            |
| host            |
| tables_priv     |
| user            |
+-----------------+
6 rows in set (0.00 sec)
</pre>
}}

The user table is the table we're after. However, the user table contains 30 different fields, making it very hard to read. In order to make things easier to read, we'll go ahead and use the third version of the <code>SELECT</code> statement. The fields we're after are Host and User. 

{{Cmd|SELECT Host,User FROM user WHERE User {{=}} 'guest';|prompt=mysql&gt; |output=<pre>
+-----------+-------+
| Host      | User  |
+-----------+-------+
| localhost | guest |
+-----------+-------+
1 row in set (0.00 sec)
</pre>
}}

Now that we have our information, we can get rid of the guest user. This is done with the <code>DELETE</code> command and the syntax is shown below. 

{{Code|DELETE Syntax|<pre>
DELETE FROM table WHERE field='value';
</pre>
}}

You may notice that <code>DELETE</code> is somewhat similiar to the <code>SELECT</code> statement in its format. In this case, the field will be User, and the value guest. This will delete the record in the user table where the user is guest, successfully deleting our guest user account. Let's go ahead and do that: 

{{Cmd|DELETE FROM user WHERE User{{=}}'guest';|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.07 sec)
</pre>}}

{{Cmd|FLUSH PRIVILEGES;|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

It seems to have worked ok. Let's test by logging out and attempting to login as our guest user. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
ERROR 1045: Access denied for user: 'guest@localhost' (Using password: YES)
</pre>
}}

Our user is now successfully deleted! 

=== Conclusion ===

While this guide focuses mainly on setting up MySQL on the command line, a few alternatives are available in GUI form: 

* [http://www.phpmyadmin.net/home_page/ phpMyAdmin] - Popular php based MySQL administration tool.
* [http://sourceforge.net/projects/mysqlnavigator/ mysqlnavigator] - QT frontend to MySQL.
* [http://gmyclient.sourceforge.net/ gmyclient] - A GNOME based MySQL client.
* [http://www.knoda.org/ knoda] - A KDE MySQL client.

This ends the MySQL introductory tutorial. I hope this gives you a better understanding of the basics behind MySQL and getting a database set up.

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:

* Chris White
* Shyam Mani
* Xavier Neys
