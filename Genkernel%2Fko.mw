<languages />

{{Metadata|abstract=genkernel은 커널과 initramfs 빌드를 자동화할 때 사용하려고 젠투에서 만든 도구입니다.}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
|{{InfoBox gitweb|genkernel.git}}
|{{InfoBox github|gentoo/genkernel}}
}}

{{c|genkernel}} 는 [[kernel]]과 [[initramfs]] 빌드를 자동화할 때 사용하려고 젠투에서 만든 도구입니다. 일부 기본 동작은 다음과 같습니다:

* 커널 소스를 설정합니다.
* {{Path|bzImage}} 압축 커널을 만들고 {{Path|/boot}} 에 복사합니다.
* initramfs를 만들고 {{Path|/boot}}에 복사합니다.
* {{Path|/boot}}에 심볼릭 링크를 만듭니다.
* initramfs에 암호화 관련 파일, 부팅 시작 이미지, 추가 모듈, 등의 개별 내용물을 넣습니다.
* initramfs를 압축합니다.
* [[bootloader]]를 설정하여 새로 만든 커널과 initramfs로 부팅합니다.

== 설치 ==

=== USE 플래그 ===

{{USEflag|package=sys-kernel/genkernel}}

=== Emerge ===

genkernel 설치를 시작하십시오:

{{Emerge|sys-kernel/genkernel}}

== 사용법 == 

genkernel 실행 일반 명령 형태는 다음과 같습니다:

{{RootCmd|genkernel [options ...] action}}

=== 옵션 === 

실제 genkernel의 동작은 상당히 다양한 옵션에 따라 달라지며, 주된 설정은 {{Path|/etc/genkernel.conf}} 파일의 설정 변수를 설정/해제하거나 {{c|genkernel}}을 실행할 때마다 옵션을 전달하는 식으로 처리할 수 있습니다. 명령행으로 전달한 옵션은 {{Path|/etc/genkerne.conf}}에 정의한 옵션보다 우선합니다. 설정 파일에는 설명이 잘 되어 있지만 대부분 옵션은 이 문서에서 찾아볼 수 있습니다. 이 문서의 작성 목적은 독자 여러분께서 일반적인 genkernel 실행에 익숙해지도록 하기 위함입니다. 더 완벽한 설명은 {{Path|/etc/genkernel.conf}} 자체에서 찾아보시거나 {{c | man genkernel}} 출력 결과에서 살펴보십시오.

{{Note|일부 옵션은 반대 동작을 실행하는 변종 옵션이 있습니다. <code>--[no-]option_name</code> 같은 식으로 나타나며, 반대 효과는 다음 예제의 각 괄호로 나타냈습니다.
{{CodeBox|title=각 옵션의 활성/비활성화|1=
--[no-]menuconfig : Activates [deactivates] ...
}}
이 옵션에서 반대 효과를 나타내는데 <code>no-</code>로 시작하는 부분, 그리고 결과가 선택의 여지가 아닌 경우 각괄호를 제외하고 표현합니다.
}}

==== 사용자와 상호작용시 동작하는 옵션 ====

하단에 나타난 설정 옵션은 사용자 여러분께서 설정 단계를 어떻게 처리할 지 결정하는데 도움을 줍니다. 여러분은 설정 과정에서 저장할 파일을 저장할 지 말지를 결정할 수 있습니다. 다음 목록은 초기 설정 옵션으로 고려할 내용입니다:

{| class="table table-condensed"
|-
! scope="col" width="25%" | 옵션 !! 설명
|-
|-
| <code>--config=/path/to/genkernel.conf</code> || 사용할 Genkernel 설정 파일입니다(기본 값은 {{Path|/etc/genkernel.conf}}).
|-
| <code>--[no-]menuconfig</code> || 커널을 빌드하기 전에 {{c|make menuconfig}} 명령(대화실 설정 메뉴 화면)을 활성 [또는 비활성] 합니다.
|-
| <code>--gconfig</code> || GTK+ 라이브러리 기반 커널 설정 화면을 제공합니다. 이 옵션은 X 윈도우 시스템을 기반으로 활용하므로 대부분의 사용자가 이 도구를 활용하여 커널을 쉽고 분명하게 설정할 수 있는 이점이 있습니다. 다만, 이 옵션을 활용하려면 X 윈도 시스템이 있어야 하기 때문에 명령행에서는 동작하지 않는 단점이 있습니다.
|-
| <code>--xconfig</code> || Qt 라이브러리 기반 커널 설정 화면을 제공합니다. 이 옵션은 X 윈도우 시스템을 기반으로 활용하므로 대부분의 사용자가 이 도구를 활용하여 커널을 쉽고 분명하게 설정할 수 있는 이점이 있습니다. 다만, 이 옵현을 활용하려면 X 윈도 시스템이 있어야 하기 때문에 명령행에서는 동작하지 않는 단점이 있습니다.
|-
| <code>--[no-]save-config</code> || 추후 활용을 위해 {{Path|/etc/kernels}} 경로에 커널 설정을 저장 할지[말지] 를 결정합니다.
|-
| <code>--kernname=NickName</code> || {{Path|/boot}} 디렉터리의 커널 및 초기화 램 디스크 이미지 수정을 서용하여 만든 이미지의 이름을 {{Path|kernel-NickName-version}} 및 {{Path|initramfs-NickName-version}} 이름을 가지게 합니다.
|}

==== 결과 시스템에서 동작하는 옵션 ====

하단에 언급한 설정 옵션은 커널 및 초기화 램 디스크 결과물 도출상 어떤 특징(기능)을 활성화할 지 말 지  여부를 정의합니다.

{| class="table table-condensed"
|-
! scope="col" width="25%" | 옵션 !! 설명
|-
| <code>--[no-]splash</code> || genkernel에서 initrd 이미지에 만든 [[Fbsplash]] 프레임버퍼 시작 화면을 활성화 [또는 비활성화] 합니다. fbsplash에서 사용하는 기본 테미를 사용하지 않으려면 <code>--splash=PreferredTheme</code> 옵션을 사용하십시오(<code>PreferredTheme</code> 자리에 {{Path|/etc/splash}} 디렉터리에 있는 디렉터리 이름 중 제목 하나를 지정하면 됩니다).
|-
| <code>--splash-res=PreferredResolution</code> || 이 옵션은 시스템을 시작할 때 initrd에서 지원하는 시작 화면의 해상도를 선택할 수 있게 합니다. 두가지 이유로 쓸만합니다. 첫째는 시스템과 관련있는 시작 화면 해상도를 선택할 수 있습니다. 두번째 이유로는, (initrd에서 시스템 설정과 관계없는 해상도를 지원하여) initrd에서 불필요한 디스크 공간이 늘어나는 일을 막습니다만, 설치 CD용으로 커널을 컴파일 한다면 없애버리는게 낫습니다. 이 옵션은 가능한 모든 해상도를 지원할 수 있습니다.
|-
| <code>--do-keymap-auto</code> || 부팅 과정에서 키 배치 설정을 선택할 수 있게 강제합니다.
|-
| <code>--lvm</code> || [http://sources.redhat.com/lvm2/ 논리 볼륨 관리자]<sup style="color: #ff0077">en</sup> (LVM2) 저장 장치가 시스템에 있는 경우 지원할 수 있도록 정적 바이너리를 포함합니다. 관련(정적) LVM2 바이너리가 없는 경우 컴파일합니다. 이 옵션을 활성화하기 전 시스템에 {{Package|sys-fs/lvm2}} 꾸러미를 설치하고({{c|emerge sys-fs/lvm2}}), 젠투 위키의 [[LVM/ko|LVM 게시글]]을 살펴보십시오.
|-
| <code>--dmraid</code> ||  커널 장치 매퍼 하위 시스템을 활용하여 RAID 매핑을 만드는 DMRAID 지원을 포함합니다. [http://people.redhat.com/~heinzm/sw/dmraid/readme DMRAID]<sup style="color:#ff0077">en</sup>은 소프트웨어 RAID 셋(예: ATARAID)과 DOS 파티션을 발견하고, 활성/비활성하며 속성 값을 표시합니다.
|-
| <code>--luks</code> || 리눅스 통합 키 설정(또는 [http://clemens.endorphin.org/cryptography LUKS]) 기능 지원을 포함합니다. LUKS로 루트 파일 시스템을 포함한 장치 암호화를 할 수 있습니다. 부트로더의 <code>crypt_root</code> 값에 암호화 한 장치를 설정하십시오(그리고  <code>root</code>는 LUKS가 만든 비 암호화 장치여야합니다).
|-
| <code>--disklabel</code> || initrd에 디스크 레이블과 UUID 기능 지원을 추가합니다.
| <code>--iscsi</code> || initrd에 iSCSI 기능 지원을 추가합니다.
|-
| <code>--multipath</code> || initrd에 [[Multipath]]<sup style="color:#ff0077">en</sup> 기능 지원을 추가합니다.
|-
| <code>--linuxrc=/path/to/the/linuxrc_file</code> || 사용자가 만든 linuxrc를 지정합니다. linuxrc는 커널 시작 단계에 실제 부팅 과정 수행 전 초기화 목적으로 사용하는 스크립트입니다. 기본 linuxrc 스크립트는 {{Path|/usr/share/genkernel/}} 디렉터리에 있습니다. 이 스크립트는 모듈화된 작은 커널로 부팅할 수 있게 합니다. 시스템에서 필요한 몇가지 드라이버(모듈)을 최소한으로 불러옵니다.
|-
| <code>--cachedir=/path/to/alt/dir</code> || Overrides the default cache location used while compiling the kernel.
|-
| <code>--tempdir=/path/to/new/tempdir</code> || 커널을 컴파일하는 동안 genkernel에서 사용할 임시 디렉터리 위치를 지정합니다.
|-
| <code>--unionfs</code> || initrd 이미지에 [http://www.fsl.cs.sunysb.edu/project-unionfs.html 통합 파일 시스템]<sup style="color:#ff0077">en</sup> 기능 지원을 포함합니다.
|-
| <code>--mountboot</code> || Detects whether or not the {{Path|/boot}} 디렉터리에서 제각기 다른 분할 공간을 마운트할 지 말지를 감지합니다. {{Path|/etc/fstab}} 스크립트를 검사하여 (필요한 경우) 부팅 분할 공간을 어떻게 마운트 할 지를 결정합니다.
|}

==== 빌드할 도구를 선택할 때 동작하는 옵션 ====

다음 옵션은 genkernel에서 지원하며, 커널을 구성하는 동안 관련 프로그램에 전달합니다. 이 옵션은 상당히 저수준에서이긴 하지만, 커널 컴파일 과정에서 컴파일 도구에 영향을 줍니다.

{| class="table table-condensed"
|-
! scope="col" width="25%" | 옵션 !! 설명
|-
| <code>--kernel-cc=someCompiler</code> || 커널 컴파일 과정에 관여하는 컴파일러를 지정합니다.
|-
| <code>--kernel-ld=someLinker</code> || 커널 컴파일 과정에 관여하는 링커를 지정합니다.
|-
| <code>--kernel-as=someAssembler</code> || 커널 컴파일 과정에 관여하는 어셈블러를 지정합니다.
|-
| <code>--kernel-make=someMake</code> || 커널 컴파일 과정에 관여하는 GNU make 유틸리티의 대안 수단을 지정합니다.
|-
| <code>--utils-cc=someCompiler</code> || 지원 유틸리티 컴파일 과정에 관여하는 컴파일러를 지정합니다.
|-
| <code>--utils-ld=someLinker</code> || 지원 유틸리티 컴파일 과정에 관여하는 링커를 지정합니다.
|-
| <code>--utils-as=someAssembler</code> || 지원 유틸리티 컴파일 과정에 관여하는 어셈블러를 지정합니다.
|-
| <code>--utils-make=someMake</code> || 지원 유틸리티 컴파일 과정에 관여하는GNU make 유틸리티의 대안 수단을 지정합니다.
|-
| <code>--makeopts=-jX</code> || 커널(및 유틸리티)를 컴파일 하는 동안 make 유틸리티에서 처리할 수 있는 동시 스레드 수를 지정합니다. <code>X</code> 변수는 자유롭게 지정할 수 있지만 보통 시스템에서 사용하는 코어의 수에 1을 더하거나 시스템의 코어 수를 그냥 사용합니다. 따라서 하나의 코어를 사용하는 시스템이라면 보통 사용하는 값은 <code>-j2</code> 또는 <code>-j1</code>입니다. 반면에 두 개의 코어를 사용하는 시스템이라면 <code>-j3</code> 또는 <code>-j2</code> 옵션이 되겠습니다. (Hyper-Threading™ (HT) 기술을 적용하여, 커널에서 Symmetric Multi-Processing (SMP) 기능 지원을 활성화하고 사용할 수 있는 프로세서의 경우 두개의 코어를 지녔다고 간주할 수 있습니다.)
|}

==== 컴파일 과정에서 동작하는 옵션 ====

다음 옵션은 보통 실제 컴파일을 수행하는 동안 영향을 줍니다:

{| class="table table-condensed"
|-
! scope="col" width="25%" | 옵션 !! 설명
|-
| <code>--kerneldir=/path/to/sources/</code> || {{Path|/usr/src/linux/}}  위치 대신 사용할 대체 커널 소스코드 위치를 지정합니다.
|-
| <code>--kernel-config=/path/to/config-file</code> || {{Path|/path/to/sources/.config}} 기본 설정 파일 대신 사용할 커널 설정 파일을 지정합니다.
|-
| <code>--module-prefix=/path/to/prefix-directory/</code> || 대신 사용할 커널 모듈 설치 위치 디렉터리의 앞부분(기본 경로는 {{Path|/lib/modules}} 디렉터리)을 지정합니다.
|-
| <code>--[no-]clean</code> || 커널을 컴파일 하기 전 {{c|make clean}} 명령 실행을 [비]활성화합니다. {{c|make clean}} 명령은 커널 소스 트리상 모든 객체 파일과 의존성을 제거합니다.
|-
| <code>--[no-]mrproper</code> || 커널을 컴파일 하기 전 {{c|make mrproper}} 명령 실행을 [비]활성화합니다. 위에 {{c|make clean}} 명령을 언급한 바와 마찬가지로{{c|make mrproper}} 명령도 커널 소스 트리 상 모든 객체 파일과 의존성을 제거합니다. 다만 이전 설정 파일({{Path|/path/to/sources/.config}} 또는 {{Path|/path/to/sources/.config.old}}) 도 커널 소스 트리에서 제거합니다.
|-
| <code>--oldconfig</code> || {{Path|/usr/share/genkernel}}의 일반 스크립트에서 시스템 아키텍처 설정 정보를 수집하는 {{c|make oldconfig}} 명령을 실행합니다. 대화식 과정이 아니며 어떤 사용자 입력도 받지 않습니다. 게다가 <code>--oldconfig</code>를 <code>--clean</code> 옵션과 결합하여 사용하면 후자 옵션이 반전되어 실제로는 <code>--no-clean</code> 옵션을 사용하는 상황과 비슷해집니다.
|-
| <code>--callback="echo hello"</code> || 커널과 관련 모듈을 빌드한 후 지정 인자(이 경우 {{c|echo hello}} 명령)를 호출하지만, initrd 이미지를 빌드하기 전 과정에서 호출합니다. 콜백 처리에 실패하여 관련 항목을 이머지한 후 initrd 이미지에 외부 모듈을 설치할 때 쓸만하며, genkernel 모듈 그룹을 재정의합니다.
|-
| <code>--[no-]install</code> || 새 커널 이미지, 설정 파일, initrc 이미지, 시스템 맵 파일을 부팅 분할 영역에 설치하는 {{c|make install}} 명령을 [비]활성화합니다. 컴파일한 어떤 모듈이든 마찬가지로 설치합니다. 기본적으로 install 명령을 실행하기 전 enkernel은 {{Path|/boot}} 디렉터리가 다른 분할 영역에 존재하는 경우 마운트를 시도합니다.
|-
| <code>--no-ramdisk-modules</code> || genkernel에서 만든 initrd 이미지로의 모듈 복사를 중단합니다. 이 옵션은  <code>no-</code> 접두부가 붙은 규칙의 예외사항입니다. 이 접두부가 빠진 genkernel 옵션은 없습니다.
|-
| <code>--all-ramdisk-modules</code> || genkernel 에서 만든 initrd 이미지에 사용할 수 있는 모든 모듈을 복사합니다.
|-
| <code>--genzimage</code> || 커널 이미지를 만들기 전, initrd 이미지를 만듭니다(이 꼼수는 현재 PPC Pegasos 시스템에만 적용합니다).
|}

==== 디버그 옵션 ====

커널 컴파일 과정에서 사용하는 다음 디버깅 사용 옵션 값에 따라 나타나는 데이터와 보고하는 수많은 정보의 출력 내용을 관리합니다.

{| class="table table-condensed"
|-
! scope="col" width="25%" | 옵션 !! 설명
|-
| <code>--loglevel=<nowiki><0|1|2|3|4|5></nowiki></code> || genkernel에서 제공하는 정보의 상세 수준을 다룹니다. <code>&lt;verblevel&gt;</code> 변수는 0 부터 5까지의 정수입니다. '0'은 최소한의 수준, 반면에 '5'는 가능한 한 genkernel이 커널을 컴파일하는 동안 출력할 수 있는 최대한의 많은 내용을 출력합니다.
|-
| <code>--logfile=/path/to/output_file</code> || Ignores the value set by the (위에서 보여드린)<code>--loglevel</code> 옵션 값을 무시하고 genkernel에서 출력하는 모든 디버깅 데이터를 지정 출력 파일로 내보냅니다. {{Path|/var/log/genkernel.log }} 파일이 기본 출력 대상입니다.
|-
| <code>--[no-]color</code> || 이스케이프 시퀀스를 활용하여(genkernel에서 보여주는) 디버깅 출력 정보의 색상 출력을 (비)활성화합니다.
|-
| <code>--[no-]debug-cleanup</code> || 디버깅 목적으로 출력한 디버깅 출력 내용의 실행 후 제거를 (비)활성화합니다.
|}

=== 동작 ===

 {{c|genkernel [options …] ''action''}} 명령행으로 전달한 동작은 어떤 동작을 수행해야 하는지 genkernel에 알려줍니다. 다음 동작을 지원합니다:

{| class="table table-condensed"
|-
! scope="col" width="25%" | 동작 !! 설명
|-
| {{c|all}} || initrd, 커널 이미지, 모듈을 포함한 모든 스테이지를 빌드합니다.
|-
| {{c|bzImage}} || 커널 이미지만 빌드합니다.
|-
| {{c|kernel}} || 커널 이미지와 모듈만 빌드합니다.
|-
| {{c|initramfs}} || initramfs이미지만 빌드합니다.
|-
| {{c|ramdisk}} || ramdisk 이미지만 빌드합니다.
|}

== 설정 ==

=== 시작하기 ===

genkernel을 실행하는 방법에는 여러가지가 있지만, 대부분 사용자에게 덜 거슬리는 방법은 {{c|genkernel all}} 명령입니다. 여기서 대부분의 시스템에서 동작하는 일반 설정을 사용합니다. 앞서 언급했듯이 이 방식은 문제가 없는것이 아닙니다. 대부분의 사용자에게 불필요한 모듈을 만들어내며 컴파일 시간이 길어집니다. 아래에 제시한 방법은 루트 계정으로 genkernel에 각각의 옵션을 전달하여 효율적인 방법을 달성할 수 있음을 나타냅니다.

{{RootCmd|genkernel --splash --no-install --no-clean --menuconfig all}}

The above operation causes genkernel to create a framebuffer splash-enabled kernel (<code>--splash</code>) that will have to be manually installed (<code>--no-install</code>). While preparing the kernel source tree, genkernel will refrain from cleaning out any preexisting object files present in the source tree (<code>--no-clean</code>). A menu-driven kernel configuration utility will be displayed that allows the user to select which modules will be built for the system (<code>--menuconfig</code>).

Replacing <code>--no-install</code> with the <code>--install</code> option allows genkernel to automatically install the new kernel in the {{Path|/boot}} directory, and will create symlinks if <code>--symlink</code> is specified. Using the <code>--mountboot</code> option allows genkernel to mount the {{Path|/boot}} partition automatically, if necessary.

{{Note|Don't forget that the {{Path|/etc/genkernel.conf}} file is sourced by the '''genkernel''' command at startup, and that any option defined there, will be applied, except where a command line option takes precedence over it.}}

=== 커널 바꾸기 ===

The first thing that should be done is to allow the triggering of {{c|make menuconfig}} in the {{Path|/etc/genkernel.conf}} file:

{{FileBox|filename=/etc/genkernel.conf|title=/etc/genkernel.conf에서 설정 메뉴 사용 강제|lang=bash|1=
# Run 'make menuconfig' before compiling this kernel?
MENUCONFIG="yes"
}}

==== 파일 관리 ====

genkernel을 사용할 때 사용자는 커널 설정과 관련된 내용, 커널 이미지 파일 관리, 커널 소스를 시스템이 다루는 방법 등을 인지해야합니다.

===== 소스 파일 =====

After an {{c|emerge -u gentoo-sources}}, whenever new sources are available, a new kernel source directory is created under {{Path|/usr/src/}} to host them. Normally, the active kernel sources directory is pointed to by the {{Path|/usr/src/linux}} symlink.

{{Path|/usr/src}} 디렉터리는 다음과 같을지도 모릅니다:

{{Cmd|ls -l /usr/src|output=<pre>
total 16
lrwxrwxrwx  1 root root   19 21 Mar   2013 linux -> linux-3.7.10-gentoo
drwxr-xr-x 24 root root 4096 25 Aug  10:39 linux-3.10.7-gentoo
drwxr-xr-x 20 root root 4096 21 Apr  19:42 linux-3.7.10-gentoo
drwxr-xr-x 21 root root 4096 14 Mar   2013 linux-3.7.9-gentoo
</pre>}}

{{Path|/usr/src/linux}} 심볼릭 링크는 다양한 방법으로 바꿀 수 있습니다. 

* {{Path|/etc/portage/make.conf}}에 <code>symlink</code> USE 플래그를 설정하면, 이머지한 새로운 소스로 {{Path|/usr/src/linux}} 심볼릭 링크를 자동으로 업데이트합니다. 

* If the <code>symlink</code> USE is ''not'' set, the user can change the destination of the symlink using the {{c|eselect kernel list}} followed by the {{c|eselect kernel set}} command.

genkernel 은 ''항상''(배타적으로) {{Path|/usr/src/linux}} 심볼릭 링크가 가리키는 소스 코드를 사용합니다.

===== genkernel에서 사용하는 커널 설정 파일 =====

커널 컴파일 과정을 이미 활성화된 커널 소스 코드를 대상으로 진행했을 경우, {{Path|/etc/kernels}} 디렉터리에 최근 커널의 bzimage을 만드는 동안 적용한 커널 설정이 들어갑니다. 이 파일은 {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}} 과 같은 이름을 달고 있는데 <code>x86_64</code>는 시스템 아키텍처, <code>3.7.9</code> 는 커널 버전, <code>r1</code>은 소스 코드의 개정 버전을 나타냅니다.

여기서 언급하는 파일이 {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}} 파일이며 {{c|genkernel --menuconfig all}} 명령을 실행하여 설정을 시작할 때 사용합니다.

genkernel을 새 커널 소스로 처음 실행하거나 이전의 설정 결과를 저장하지 않았다면 이 파일을 {{Path|usr/share/genkernel/arch/x86_64/kernel-config}}의 기본 설정 파일로 두며, 여기서 x86_64는 실제 아키텍처 부분입니다.

{{Note/ko|이 기본 설정 파일로의 경로는 {{Path|/etc/genkernel.conf}}  파일의 <var>DEFAULT_KERNEL_CONFIG</var> 변수를 설정하여 바꾸어야 합니다.}}

===== 컴파일한 설정 저장 =====

<code>--save-config</code> genkernel 옵션을 활성화하면, 명령줄 또는 {{Path|/etc/genkernel.conf}} 파일에서 컴파일한 커널의 설정을 {{Path|/etc/kernels}}  디렉터리에 (위에서 말한 이름대로) 저장합니다. 동시에 설정은 {{Path|/usr/src/linux}} 디렉터리에 {{Path|.config}} 파일로 저장하지만 {{c|genkernel all}} 을 실행할 때 다시 사용하지 않습니다.

{{Warning/ko|알아두셔야 할 사항은 <code>--save-config</code> 옵션으로 genkernel을 매번 실행할 때마다  {{Path|/etc/kernels}} 디렉터리의 설정 파일을 덮어씁니다. 따라서, 이 설정 파일을 보존하려면 genkernel을 실행하기 ''전'' 에 새 파일로 복사하시는것이 좋겠습니다}}

===== {{Path|/boot}} 디렉터리에 커널과 initramfs 설치 =====

genkernel을 실행할 때 <code>--install</code> 옵션을 지정하면 genkernel에 커널 이미지와 initramfs를 {{Path|/boot}} 디렉터리에 설치하라고 요청합니다. <code>--install</code> 옵션을 편한 방식대로 실행하려면  {{Path|/etc/genkernel.conf}} 파일에서 다음과 같은 부분을 설정하십시오:

{{FileBox|filename=/etc/genkernel.conf|title=커널과 initramfs 자동 저장 설정|lang=bash|1=
# Mount BOOTDIR automatically if it is not mounted?
MOUNTBOOT="yes"
  
# Save the new configuration in /etc/kernels upon
# successful compilation
SAVE_CONFIG="yes"
  
# Make symlinks in BOOTDIR automatically?
SYMLINK="yes"
  
# Add new kernel to grub?
#BOOTLOADER="grub"
}}

* 첫번째 매개변수는 그 자체를 의미합니다.

* 두번째 매개변수는 genkernel에 {{Path|/etc/kernels}}에 커널 설정 내용을  저장하라고 일러줍니다

* 마지막 옵션 두개는 genkernel에 자동으로 grub 설정을 업데이트하라고 알려줍니다. 실제로 다음 두가지 일이 일어납니다:
** 동일한 이름을 가진 이전 커널 이미지가 있으면, {{Path|.old}} 파일 이름이 기존의 파일 이름 뒤에 붙습니다. {{Path|kernel.old}} 심볼릭 링크를 자동으로 만들어 해당 파일을 가리킵니다.
** 어떤 동일한 이름의 커널이든 새 커널은 {{Path|/boot}}에 들어갑니다. 커널을 처음 컴파일하면, 새 커널을 가리키는 커널 심볼릭 링크를 자동으로 만듭니다.

{{c|genkernel --menuconfig all}}를 실행한 후의 {{Path|/boot}}  디렉터리 모습은 다음과 같습니다:

{{Cmd|ls -al /boot|output=<pre>
total 41336
drwxr-xr-x  3 root root    4096 20 avril 17:23 .
drwxr-xr-x 24 root root    4096 15 sept. 12:31 ..
lrwxrwxrwx  1 root root       1 24 févr.  2013 boot -> .
drwxr-xr-x  2 root root    4096 24 févr.  2013 grub
lrwxrwxrwx  1 root root      40 20 avril 17:23 initramfs -> initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1314412 20 avril 17:23 initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1313548 21 mars   2013 initramfs-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 1295344 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3310324 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      44 20 avril 17:23 initramfs.old -> initramfs-genkernel-x86_64-3.7.10-gentoo.old
lrwxrwxrwx  1 root root      37 20 avril 17:23 kernel -> kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866656 20 avril 17:23 kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866560 21 mars   2013 kernel-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 4552288 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3400736 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      41 20 avril 17:23 kernel.old -> kernel-genkernel-x86_64-3.7.10-gentoo.old
</pre>}}

==== 부트로더 설정 ====

위의 부트로더 설정에서 나타난 심볼릭 링크를 사용할 수 있는 상태로 나타나므로, 새 커널로 부팅할 수 없어도 사용자는 이전 커널로 항상 부팅할 수 있습니다. 

genkernel에서 제공하는 커널과 initrd를 제대로 동작하게 하려면 부트로더 설정 파일에 최소한의 정보를 제공하십시오:

* 커널 이미지로 전달할 커널 매개 변수에 <code>root=/dev/sdaN</code>를 추가하십시오. 여기서 {{Path|/dev/sdaN}}은 루트 공간을 나타냅니다(<code>N</code>는 공간이 존재할 경우 해당 공간의 번호입니다).
* 시작 화면을 사용한다면 <code>vga=0x317</code>와 같은 적당한 디스플레이 모드를 커널에 전달할 매개변수에 추가하시고 부팅 과정에서 메시지를 최대한 자세하게 표시할 지 여부에 따라 <code>splash=verbose</code> 또는 <code>splash=silent</code>도 추가하십시오.
* 부트로더에서 필요한 initrd 정보를 추가하십시오. initrd를 부트로더가 인식할 수 있게 하는 방법이 무엇인지 알아보려면 젠투 핸드북의 [[Handbook:X86/Installation/Bootloader/ko|부트 로더 설정]]을 참고하십시오.

{{Path|grub.conf}} 파일 내용은 다음과 같습니다.

{{FileBox|filename=/boot/grub/grub.conf|title=grub.conf 파일 예제|lang=bash|1=
# This is a sample grub.conf for use with Genkernel, per the Gentoo handbook 
# http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1&chap=10#doc_chap2 
# If you are not using Genkernel and you need help creating this file, you 
# should consult the handbook. Alternatively, consult the grub.conf.sample that 
# is included with the Grub documentation. 
  
default 0 
timeout 5
splashimage=(hd1,0)/boot/grub/splash.xpm.gz 
   
title Gentoo Linux 
root (hd0,6) 
kernel /boot/kernel initrd=/dev/ram0 root=/dev/sda7 rootfstype=ext4  
initrd /boot/initramfs
  
title Gentoo Linux old kernel 
root (hd0,6) 
kernel /boot/kernel.old initrd=/dev/ram0 root=/dev/sda7 rootfstype=ext4 
initrd /boot/initramfs.old
}}

==== 작업 파일 보존 ====

genkernel 프로그램은 바뀐 설정을 자동으로 파일에 저장합니다. 앞서 저장한 내용을 유지하려면 다음 조치가 필요합니다.

* 커널을 다시 컴파일 하기 전 설정 원본이 바뀌지 않았을 경우, {{Path|/etc/kernels/}}에 있는 커널 설정 파일 중 설정을 유지하려는 파일에 앞서 사용한 파일 이름을 그대로 사용합니다. 따라서 새 설정을 시작할 시점으로 유지할 때 이 파일을 다른 이름으로 복사하시면 이전 설정을 유지할 수 있습니다.

* The second important thing is to preserve the already bootable kernel and initramfs images. The way to accomplish this depends on the context:
:# If the last kernel compiled is bootable, running {{c|genkernel}} will rename this kernel (and similarly initramfs) image to {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} and create a new {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}. This mean that even if the new kernel is not bootable, users will always be able to boot the old one.
:# If the last kernel compiled is not bootable and sources haven't changed since the user compiled a bootable one, prior to running {{c|genkernel}}, first delete the new kernel image and remove the {{Path|.old}} suffix from the last bootable one. Without this, if the newly compiled kernel is not bootable for the second time, the bootable {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} will be kicked out by the renaming of the non bootable {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}, giving the user an unbootable system. Use the same reasoning for initramfs.

==== 소스를 바꿀 떄 이전 커널 설정 사용 ====

이전 설정은 다음과 같이 {{Path|/etc/genkernel.conf}} 의 <var>MENUCONFIG</var> 변수에서 사용할 수 있습니다:

{{FileBox|filename=/etc/genkernel.conf|title=make menuconfig 설정|lang=bash|1=
# Run 'make menuconfig' before compiling this kernel?
MENUCONFIG="yes"
}}

{{Note/ko|설정 원본을 {{Path|kernel-genkernel-ARCH-version-gentoo-rx}}에서 {{Path|kernel-genkernel-ARCH-version-gentoo-r(x+1)}}로 바뀌거나 {{Path|kernel-genkernel-ARCH-version-gentoo}}에서 {{Path|kernel-genkernel-ARCH-(version+1)-gentoo}}로 바뀌어도 {{c|genkernel}}을 사용할 때 {{c|make oldconfig}} 를 사용할 필요가 없습니다. 왜냐면 {{c|make menuconfig}}에서 메뉴로 이전 설정을 가능한대로 불러오기 때문입니다. 그래도, 주의를 기울여 각 옵션과 새 섹션을 ''검토'' 해보시는 게 좋습니다.}}

=== 네트워크 부팅하기 ===

==== 설치 CD로 네트워크 부팅하기 ====

{{c|genkernel}} 유틸리티에서는 네트워크 부팅을 지원하는 커널 및 initrd 이미지를 만들 수 있습니다. 행운을 위해, 사용자는 설치 CD에서 제공한 환경에서 어떤 최근에 가동을 진행한 컴퓨터로든 네트워크 부팅을 할 수 있어야합니다.

마법은 genkernel의 linuxrc 스크립트에 있습니다: NFS를 사용한 설치 CD의 넷 마운트를 시도합니다. 이렇게 하여, 설치 CD가 로컬에 존재하여 설치 CD의 init 스크립트가 동작하는 것처럼 동작합니다.

==== 넷부팅을 지원하는 커널과 Initrd 이미지 빌드 ====

넷부팅 지원을 활성화하려면, 커널을 설정할 때 다음 옵션을 포함하십시오:

{{Warning/ko|genkernel의 넷부팅 기능은 시험 단계이며 버그가 있습니다.}}

우선 커널 이미지에 시스템에 장착한 네트워크 인터페이스 카드(NIC) 드라이버가 들어가야합니다. 보통 각 장치의 드라이버는 모듈로 컴파일합니다. 그러나 (넷부팅시) 이런 드라이버는 모듈 방식이 아니라 커널 이미지에 바로 포함시키는 것이 중요합니다.

{{KernelBox|title=다양한 NIC 드라이버를 지원하는 3.x.x 버전대 커널 설정|<pre>
Device Drivers --->
   Networking Support --->
      Ethernet (10 or 100Mbit)  --->
         [*] Ethernet (10 or 100Mbit)
         <*>   The driver(s) for your network card</pre>
}}

{{Note/ko|<code>&lt;M&gt;</code>이 아닌 <code>&lt;*&gt;</code> 로 선택했는지 확인하십시오.}}

다음 ''IP: DHCP support options''와 ''IP: kernel level autoconfiguration''을 활성화 하는것이 좋겠습니다. IP 주소와 설치 CD의 NFS 경로를 DHCP서버에서 설정할 수 있기 때문에, 계층 복잡화를 막습니다. 물론 커널 명령줄이 어떤 머신에서든 있는 그대로 남아있음을 의미합니다. 이더부팅 기능에 있어 이점이 상당히 중요합니다.

{{KernelBox|title=DHCP를 지원하는 3.x.x 버전대 커널 설정|<pre>
Device Drivers --->
   Networking Support --->
      Networking options
         [*] TCP/IP networking--->
         [*]   IP: kernel level autoconfiguration
         [*]     IP: DHCP support
</pre>}}

이 옵션은 부팅 과정에서 커널에게 DHCP 요청을 보내라고 알려줍니다.

또한, 최근의 젠투 설치 CD에서 필요하므로 [[SquashFS]]를 활성화하십시오. SquashFS 지원은 일반 커널 소스트리에 없습니다. SquashFS를 활성화하려면 일반 커널 소스를 패치하거나 gentoo-sources를 설치하십시오.

{{KernelBox|title=SquashFS를 지원하는 커널 설정|<pre>
File systems--->
   Miscellaneous filesystems --->
      [*] SquashFS 2.X - Squashed file system support
</pre>}}

컴파일 과정이 끝나면, 커널 모듈이 들어간 압축 타르볼을 만드십시오. 이 과정은 커널 버전이 설치 CD의 커널 이미지 버전과 일치하지 않을때만 필요합니다.

모든 모듈이 들어간 아카이브를 만들려면:

{{RootCmd|cd /
|tar -cf /tmp/modules-X.Y.Z.tar.gz /lib/modules/X.Y.Z/}}

네트워크 부팅 매커니즘에 따라 하나 이상의 단계를 따라야합니다:

이더부트 이미지를 만들려면:

{{Emerge|net-misc/mknbi}}

{{RootCmd
|cd /boot
|mkelf-linux -params{{=}}"root{{=}}/dev/ram0 init{{=}}/linuxrc ip{{=}}dhcp" kernel... initrd... > etherboot.img}}

OpenBoot/SPARC64 TFTP 이미지를 만들려면:

{{Emerge|sys-apps/sparc-utils}}

{{RootCmd
|cd /boot
|elftoaout kernel... -o kernel.aout
|piggyback64 kernel.aout System.map-... initrd-...
|mv kernel.aout openboot.img}}

{{Path|openboot.img}} 파일은 부트 이미지입니다.

Finally, copy this kernel to the TFTP server. The details are architecture-dependent and are beyond the scope of this guide. Please refer to the documentation for the specific platform of interest.

==== NFS 설정 ====

설치 CD를 띄운 NFS 공유를 설정하려면, 루프 장치를 활용하여 ISO 이미지를 마운트하고 NFS 공유를 통해 CD의 내용을 복사합니다. 괜찮은 추가 선택지가 있다면 genkernel의 initrd 스크립트에서 {{Path|/nfs/livecd/add/}} 디렉터리 경로의 모든 tar.gz 파일을 압축해제합니다. 여기서 {{Path|/nfs/livecd/add/}} 디렉터리에 {{Path|modules-X.Y.Z.tar.gz}} 아카이브를 복사하기만 하면 됩니다.

다음 예제에서는 {{Path|/nfs/livecd}}를 내보내는 NFS 공유로 가정합니다:

{{RootCmd|mount /tmp/gentoo-livecd.iso /mnt/cdrom -o loop
|cp -p /mnt/cdrom /nfs/livecd
|umount /mnt/cdrom}}

이제 {{Path|modules.tar.gz}} 파일을 {{Path|/add}}에 복사하십시오:

{{RootCmd|mkdir /nfs/livecd/add
|cp /tmp/modules-X.Y.Z.tar.gz /nfs/livecd/add}}

==== DHCP 설정 ====

netbook 이미지에서는 <code>root-path</code> 매개변수와 같이 IP를 받기 위한 네트워크의 DHCP 서버를 요청합니다. 머신을 식별한 MAC 주소를 사용하여 호스트별로 지정할 수 있습니다:

{{FileBox|filename=/etc/dhcpd.conf|title=예제 dhcpd.conf 클라이언트 설정|1=
# Here, 192.168.1.2 is the NFS server while 192.168.1.10 will be the IP address of the netbooted machine
host netbootableMachine {
         hardware ethernet 11:22:33:44:55:66;
         fixed-address 192.168.1.10;
         option root-path "192.168.1.2:/nfs/livecd";
}
}}

==== 넷부팅 절차 ====

넷부팅은 플랫폼 별로 다릅니다. 여기서 중요한 부분은 커널 명령줄의 <code>ip=dhcp</code> 와 <code>init=/linuxrc</code> 매개 변수이며, 이 매개변수를 통해 네트워크 인터페이스 동작을 활성화하고 initrd 스크립트로 하여금 NFS를 통해 설치 CD에 마운트하라고 지시합니다. 플랫폼별 요령을 안내해드리겠습니다.

etherboot 방식을 진행하려면 etherboot 디스크를 드라이브에 넣고 다시 부팅하십시오. 이미지를 만들었다면 커널 명령행을 이미 지정했습니다.

Spart64에서는 부팅 프롬프트에서 {{Key|Stop}}+{{Key|A}} 키를 누르고 {{Key|Enter}} 키를 누르십시오:

{{RootCmd|boot net ip{{=}}dhcp init{{=}}/linuxrc|prompt=ok }}
  
For PXE, setup pxelinux (part of syslinux), then create a {{Path|pxelinux.cfg/default}} along the lines of:

{{FileBox|filename=pxelinux.cfg/default|title=기본 항목|1=
DEFAULT gentoo
TIMEOUT 40
PROMPT 1
  
LABEL gentoo
    KERNEL kernel-X.Y.Z
    APPEND initrd=initrd-X.Y.Z root=/dev/ram0 init=/linuxrc ip=dhcp
}}

==== genkernel initramfs 부팅 ====

===== 도입부 =====

initramfs를 genkernel로 설치하면, 부트로더에서 설정할 수 있는(해야 할) 다양한 부팅 옵션을 살펴보십시오. 대부분은 이 안내서에 추가했습니다.

===== LVM 또는 소프트웨어-RAID 불러오기 =====

LVM 또는 software-RAID를 사용중이라면 <code>--lvm</code> 과 <code>--mdadm</code> 옵션을 활용하여 initramfs에 기능을 추가하여 빌드해야 합니다. 마찬가지로 부팅하는 동안의 기능 활성화를 잊지마십시오. dolvm, domdadm 옵션으로 설정할 수 있습니다.

{{FileBox|filename=/boot/grub/grub.conf|title=LVM 또는 MDADM 지원 활성화|1=
# Example for GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 dolvm domdadm
initrd /initramfs-genkernel-x86_64-3.4.3
}}

===== 단일 사용자 모드 부팅 =====

어떤 이유로 인해 부팅에 실패했다면 단일 사용자 모드로 부팅하여 시스템을 복구할 수 있습니다. 이 방법은 서비스를 불러올때만 필요하며 과정이 끝나면 복구(루트) 쉘에서 사용자를 쫒아냅니다.

{{FileBox|filename=/boot/grub/grub.conf|title=단일 사용자 모드로 부팅|1=
# Example for GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 init_opts=S
initrd /initramfs-genkernel-x86_64-3.4.3
}}

== 문제 해결 ==

=== compile failed: Kernel not found ===

원래 아키텍처가 아닌 다른 아키텍처를 대상으로 {{Path|.config}} 커널 설정 파일을 활용하여 컴파일을 시도하면 실패할 수 있습니다. {{Keyword|amd64}} 커널을 동작하는 머신에서 {{Keyword|x86}} 아키텍처 대상으로 컴파일 하는 것처럼 단순합니다.

64비트 시스템에서 동작하는 x86_64 라이브 CD를 32비트로 동작하는 대상에서 부팅할 경우 겪을 수 있는 문제입니다. 컴파일 과정을 시작하면 {{c|genkernel}}에서 현재 실행중인 커널을 기반으로 대상 아키텍처를 자동으로 발견합니다. 현재 실행 중인 커널이 64비트라면 어떤 다른 문제가 나타나기 전까지는 64비트 커널을 찾고 있었다고 간주합니다.

커널의 {{Path|.config}} 파일에서 x64 아키텍처를 비활성화 했을 경우를 가정한다면 {{c|make}} 명령을 실행하여 관련 {{Path|x86}} 디렉터리에 커널 바이너리를 복사합니다. {{c|genkernel}} 에서 커널을 설치(이동 및 이름 바꿈)하면 64비트 커널을 찾고 있었기 때문에 다른 아키텍처를 대상으로 이미 컴파일한 커널을 찾을 수 없습니다.

{{c|genkernel}}의 <code>--arch-override</code> 옵션 설정에 실패했을 경우 {{Keyword|x86}} 아키텍처를 선택하십시오. 최종적으로 나타날 명령은 다음과 같습니다:

{{RootCmd|genkernel --kernel-config{{=}}/usr/src/linux/.config --btrfs --install --arch-override{{=}}x86 all}}

아키텍처 선택을 우선적으로 대신 적용하려면, {{Path|/etc/genkernel.conf}} 파일에서 <var>ARCH_OVERRIDE</var> 변수를 수정하십시오.

== 추가 참조 ==

* [[Kernel/Configuration/ko|직접 커널 설정]] - 가끔은 직접 설정해야 하기도 합니다.
* [[Dracut]] - 젠투에서 활용할 수 있는 또 다른 initramfs 빌더입니다.


[[Category:Kernel]]
[[Category:Initramfs]] {{Migrated|originalauthors=Tim Yamin, Jimi Ayodele, Thomas Seiler, Joshua Saddler, Sebastian Pipping, José Fournier}}
