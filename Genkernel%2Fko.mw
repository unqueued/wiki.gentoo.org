<languages />

{{Metadata|abstract=genkernel is a tool created by Gentoo used to automate the build process of the kernel and initramfs.}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
|{{InfoBox gitweb|genkernel.git}}
|{{InfoBox github|gentoo/genkernel}}
}}

{{c|genkernel}} 는 [[kernel]]과 [[initramfs]] 빌드를 자동화할 때 사용하려고 젠투에서 만든 도구입니다. 일부 기본 동작은 다음과 같습니다:

* 커널 소스를 설정합니다.
* {{Path|bzImage}} 압축 커널을 만들고 {{Path|/boot}} 에 복사합니다.
* initramfs를 만들고 {{Path|/boot}}에 복사합니다.
* {{Path|/boot}}에 심볼릭 링크를 만듭니다.
* initramfs에 암호화 관련 파일, 부팅 시작 이미지, 추가 모듈, 등의 개별 내용물을 넣습니다.
* initramfs를 압축합니다.
* [[bootloader]]를 설정합니다.

== 설치 ==

=== USE 플래그 ===

{{USEflag|package=sys-kernel/genkernel|desc={{Package|sys-kernel/genkernel}} 설치 전 고려할 USE 플래그 설정:
|crypt++no
|cryptsetup++no
|ibm++no
|selinux++no
}}

=== Emerge ===

genkernel 설치를 시작하십시오:

{{Emerge|sys-kernel/genkernel}}

== 사용법 == 

genkernel 실행 일반 명령 형태는 다음과 같습니다:

{{RootCmd|genkernel [options ...] action}}

=== 옵션 === 

The actual behavior of genkernel depends on a large variety of options, the majority of which can be set/unset in the {{Path|/etc/genkernel.conf}} file or passed via the {{c|genkernel}} command on each invocation. Options passed over the command line take precedence over options defined in {{Path|/etc/genkernel.conf}}. The configuration file is very well documented, however some of the most commonly used options will be explored in this article. The goal is for the reader to be familiar with common genkernel invocations. For a more complete set of explanations refer to the comments in {{Path|/etc/genkernel.conf}} itself or to the output of {{c|man genkernel}}.

{{Note|Some of the options have a variant that triggers a converse behavior. They are figured as <code>--[no-]option_name</code>, and the converse effect is shown in square brackets as in the following example:
{{CodeBox|title=Enable or disable a certain option|1=
--[no-]menuconfig : Activates [deactivates] ...
}}
Where options have only a negative effect, the <code>no-</code>, and its effect, which are not optional in this case, are figured without square brackets.
}}

==== 사용자와 상호작용시 동작하는 옵션 ====

The configuration options listed below help the user decide how to interact with the configuration process. Users can even choose whether or not the configuration file created in the process should be saved. The following are considered primary configuration options:

{| class="table table-condensed"
|-
! scope="col" width="25%" | Option !! Description
|-
|-
| <code>--config=/path/to/genkernel.conf</code> || Points to the Genkernel configuration file to use (defaults to {{Path|/etc/genkernel.conf}}).
|-
| <code>--[no-]menuconfig</code> || Activates [ or deactivates] the {{c|make menuconfig}} command (which invokes an interactive configuration menu) before building the kernel.
|-
| <code>--gconfig</code> || Provides a kernel configuration utility which depends on the GTK+ libraries. The advantage of this option is that most users find it easier and clearer to configure the kernel using this tool, since it relies on the X-windowing system. The disadvantage of this option is that the X-windowing system is required to use it, so it will not work on the command line.
|-
| <code>--xconfig</code> || Provides a kernel configuration utility which depends on the QT libraries. The advantage of this option is that most users find it easier and clearer to configure the kernel using this tool, since it relies on the X-windowing system. The disadvantage of this option is that the X-windowing system is needed to use it, so it will not work on the command line.
|-
| <code>--[no-]save-config</code> || Saves [or does not save] the kernel configuration to a file in the {{Path|/etc/kernels}} directory for later use.
|-
| <code>--kernname=NickName</code> || Allows the modification of the name of the kernel and initrd images in the {{Path|/boot}} directory, so that the images produced are {{Path|kernel-NickName-version}} and {{Path|initramfs-NickName-version}}.
|}

==== 결과 시스템에서 동작하는 옵션 ====

The configuration options listed here defines which features will or will not be enabled in the resulting kernel and initrd.

{| class="table table-condensed"
|-
! scope="col" width="25%" | Option !! Description
|-
| <code>--[no-]splash</code> ||  Activates [or deactivates] support for [[Fbsplash]] framebuffer splash in the genkernel-built initrd image. To override the default theme used by fbsplash, use <code>--splash=PreferredTheme</code> (where <code>PreferredTheme</code> is the title of one of the directories inside the {{Path|/etc/splash}} directory).
|-
| <code>--splash-res=PreferredResolution</code> || This option allows to select which splash screen resolutions will be supported in the initrd during the start-up of the system. This is useful for two reasons. First, to be able to select only the splash screen resolution(s) relevant to the system. Second, to avoid the unnecessary increase in the disk space required by initrd (since the initrd does not have to support resolutions that are irrelevant for the system's configuration.) However, the option is best omitted if the kernel is being compiled for an Installation CD; this allows splash support for all possible resolutions.
|-
| <code>--do-keymap-auto</code> || Force keymap selection during the boot sequence.
|-
| <code>--lvm</code> || Includes support for storage using via [http://sources.redhat.com/lvm2/ Logical Volume Management] (LVM2) from static binaries, if available to the system. Relevant (static) LVM2 binaries are compiled if they are unavailable. Be sure to install the {{Package|sys-fs/lvm2}} package on the system ({{c|emerge sys-fs/lvm2}}) before enabling this option, then review the [[LVM|LVM article]] on the Gentoo wiki.
|-
| <code>--dmraid</code> || Includes support for DMRAID; the utility which creates RAID mappings using the kernel device-mapper subsystem. [http://people.redhat.com/~heinzm/sw/dmraid/readme DMRAID] discovers, activates, deactivates and displays properties of software RAID sets (ATARAID, for example) and contained DOS partitions.
|-
| <code>--luks</code> || Includes support for Linux Unified Key Setup or [http://clemens.endorphin.org/cryptography LUKS]. This will allow to use a device encrypted by LUKS which contains the root filesystem. On the bootloader, set that encrypted device as the value of <code>crypt_root</code> (and <code>root</code> shall be the unencrypted device LUKS creates).
|-
| <code>--disklabel</code> || Adds support for disk label and UUID support to the initrd.
|-
| <code>--iscsi</code> || Adds support for iSCSI to the initrd.
|-
| <code>--multipath</code> || Adds support for [[Multipath]] to the initrd.
|-
| <code>--linuxrc=/path/to/the/linuxrc_file</code> || Specifies a user-created linuxrc — a script that is initialized during the start-up stage of the kernel, prior to the actual boot process. A default linuxrc script can be found in the {{Path|/usr/share/genkernel/}} directory. This script allows booting into a small, modularized kernel; it tries to load the minimum amount of drivers that are needed (as modules) by the system.
|-
| <code>--cachedir=/path/to/alt/dir</code> || Overrides the default cache location used while compiling the kernel.
|-
| <code>--tempdir=/path/to/new/tempdir</code> || Specifies the location of the temporary directory used by genkernel while compiling the kernel.
|-
| <code>--unionfs</code> || Includes support for the [http://www.fsl.cs.sunysb.edu/project-unionfs.html Unification File System] in the initrd image.
|-
| <code>--mountboot</code> || Detects whether or not the {{Path|/boot}} directory needs to be mounted on a separate partition. It will check {{Path|/etc/fstab}} script for instructions on how to mount the boot partition on a file system (if needed).
|}

==== 빌드할 도구를 선택할 때 동작하는 옵션 ====

The following options are supported by genkernel, and are passed to the relevant applications while the kernel is being assembled. These options affect the compiling tools used for the kernel compilation process, albeit at a much lower level.

{| class="table table-condensed"
|-
! scope="col" width="25%" | Options !! Description
|-
| <code>--kernel-cc=someCompiler</code> || Specifies the compiler employed during the kernel compilation process.
|-
| <code>--kernel-ld=someLinker</code> || Specifies the linker employed during the kernel compilation process.
|-
| <code>--kernel-as=someAssembler</code> || Specifies the assembler employed during the kernel compilation process.
|-
| <code>--kernel-make=someMake</code> || Specifies an alternative to the GNU make utility employed during the kernel compilation process.
|-
| <code>--utils-cc=someCompiler</code> || Specifies the compiler employed during the compilation of support utilities.
|-
| <code>--utils-ld=someLinker</code> || Specifies the linker employed during the compilation of support utilities.
|-
| <code>--utils-as=someAssembler</code> || Specifies the assembler employed during the compilation of support utilities.
|-
| <code>--utils-make=someMake</code> || Specifies an alternative to the GNU make utility employed during the compilation of support utilities.
|-
| <code>--makeopts=-jX</code> || Specifies the number of concurrent threads that the make utility can implement while the kernel (and utilities) are being compiled. The variable <code>X</code> is a number to be freely chosen, although the most common values are obtained by adding one (1) to the number of cores used by the system, or just use the number of cores on the system. So, for a system with one core, most common option values are <code>-j2</code> or <code>-j1</code>; a system with two cores most likely uses the <code>-j3</code> or <code>-j2</code> options, and so on. (A system with one processor that supports Hyper-Threading™ (HT) Technology can be assumed to have 2 cores, provided Symmetric Multi-Processing (SMP) support is enabled in the kernel.)
|}

==== 컴파일 과정에서 동작하는 옵션 ====

The following options usually take effect during the actual compilation:

{| class="table table-condensed"
|-
! scope="col" width="25%" | Option !! Description
|-
| <code>--kerneldir=/path/to/sources/</code> || Specifies an alternative kernel source location, rather than the default {{Path|/usr/src/linux/}} location.
|-
| <code>--kernel-config=/path/to/config-file</code> || Specifies what alternative kernel configuration will be used, rather than the default {{Path|/path/to/sources/.config}} file.
|-
| <code>--module-prefix=/path/to/prefix-directory/</code> || Specifies a prefix to the directory where kernel modules will be installed (default path is the {{Path|/lib/modules}} directory.)
|-
| <code>--[no-]clean</code> || Activates [or deactivates] the {{c|make clean}} command before compiling the kernel. The make clean command removes all object files and dependencies from the kernel's source tree.
|-
| <code>--[no-]mrproper</code> || Activates [or deactivates] the {{c|make mrproper}} command before kernel compilation. Like the make clean command listed above, make mrproper removes all object files and dependencies from the kernel's source tree. However, any previous configuration files (in {{Path|/path/to/sources/.config}} or {{Path|/path/to/sources/.config.old}}) will also be purged from the kernel's source tree.
|-
| <code>--oldconfig</code> || Issues the {{c|make oldconfig}} command, which attempts to collect configuration information for the system's architecture from a generic script in {{Path|/usr/share/genkernel}}. This is a non-interactive process; no user input is entertained. Also, if <code>--oldconfig</code> is used in conjunction with <code>--clean</code>, the latter option is negated, resulting in the activation of the <code>--no-clean</code> option.
|-
| <code>--callback="echo hello"</code> || Calls the specified arguments ({{c|echo hello}}, in this case) after the kernel and the relevant modules have been built, but before building the initrd image. This may be useful when installing external modules in the initrd image by emerging the relevant item(s) with the callback feature, and then redefining a genkernel module group.
|-
| <code>--[no-]install</code> || Activates [or deactivates] the make install command, which installs the new kernel image, configuration file, initrd image and system map onto the boot partition. Any compiled modules will be installed as well. By default genkernel will attempt mount {{Path|/boot}} if it is on a separate partition before running the install command.
|-
| <code>--no-ramdisk-modules</code> || Refrains from copying any modules to the genkernel-created initrd image. This option is an exception to the rule about the <code>no-</code> prefix; omission of this prefix creates an invalid genkernel option.
|-
| <code>--all-ramdisk-modules</code> || Copies all available modules to the genkernel-created initrd image.
|-
| <code>--genzimage</code> || Creates the initrd image, prior to the kernel image (this hack currently applies only to PPC Pegasos systems).
|}

==== Debugging options ====

The use of debugging options during the kernel compilation process controls the amount of information reported, as well as the presentation of said data.

{| class="table table-condensed"
|-
! scope="col" width="25%" | Option !! Description
|-
| <code>--loglevel=<nowiki><0|1|2|3|4|5></nowiki></code> || Controls the level of verbosity for information provided by genkernel. The variable <code>&lt;verblevel&gt;</code> is an integer between 0 and 5. The level '0' represents minimal output, while '5' provides as much information as possible about genkernel's activities during the kernel compilation process.
|-
| <code>--logfile=/path/to/output_file</code> || Ignores the value set by the <code>--loglevel</code> option (above) and sends all debugging data produced by genkernel to the specified output file. Outputs to {{Path|/var/log/genkernel.log }} by default.
|-
| <code>--[no-]color</code> || Activates (or deactivates) colored output of debugging information (reported by genkernel) using escape sequences.
|-
| <code>--[no-]debug-cleanup</code> || Activates (or deactivates) the full post-run cleanup for debug purposes.
|}

=== 동작 ===

The action passed on the command line with the {{c|genkernel [options …] ''action''}} tells genkernel what action to perform. The following actions are supported:

{| class="table table-condensed"
|-
! scope="col" width="25%" | Action !! Description
|-
| {{c|all}} || Builds all stages — the initrd, kernel image and modules.
|-
| {{c|bzImage}} || Only builds the kernel image.
|-
| {{c|kernel}} || Only builds the kernel image and modules.
|-
| {{c|initramfs}} || Only builds the initramfs/ramdisk image.
|-
| {{c|ramdisk}} || Only builds the initramfs/ramdisk image.
|}

== Configuration ==

=== Starting off ===

Although there are several ways to run genkernel, the least-intrusive approach recommended for most users is provided by {{c|genkernel all}}. Here, a generic configuration which works well for most systems is used. As was mentioned earlier, this approach is not without drawbacks; most of the modules created are useless to the average user and may increase compile time. Below is an illustration of a more efficient approach, achieved by passing certain options to genkernel as root:

{{RootCmd|genkernel --splash --no-install --no-clean --menuconfig all}}

The above operation causes genkernel to create a framebuffer splash-enabled kernel (<code>--splash</code>) that will have to be manually installed (<code>--no-install</code>). While preparing the kernel source tree, genkernel will refrain from cleaning out any preexisting object files present in the source tree (<code>--no-clean</code>). A menu-driven kernel configuration utility will be displayed that allows the user to select which modules will be built for the system (<code>--menuconfig</code>).

Replacing <code>--no-install</code> with the <code>--install</code> option allows genkernel to automatically install the new kernel in the {{Path|/boot}} directory, and will create symlinks if <code>--symlink</code> is specified. Using the <code>--mountboot</code> option allows genkernel to mount the {{Path|/boot}} partition automatically, if necessary.

{{Note|Don't forget that the {{Path|/etc/genkernel.conf}} file is sourced by the '''genkernel''' command at startup, and that any option defined there, will be applied, except where a command line option takes precedence over it.}}

=== Changing the kernel  ===

The first thing that should be done is to allow the triggering of {{c|make menuconfig}} in the {{Path|/etc/genkernel.conf}} file:

{{FileBox|filename=/etc/genkernel.conf|title=/etc/genkernel.conf에서 설정 메뉴 사용 강제|lang=bash|1=
# Run 'make menuconfig' before compiling this kernel?
MENUCONFIG="yes"
}}

==== File management ====

While using genkernel, the user has to be aware of some aspects relating to kernel configuration and kernel image files management and the way the kernel sources are handled by the system.

===== Source files =====

After an {{c|emerge -u gentoo-sources}}, whenever new sources are available, a new kernel source directory is created under {{Path|/usr/src/}} to host them. Normally, the active kernel sources directory is pointed to by the {{Path|/usr/src/linux}} symlink.

{{Path|/usr/src}} 디렉터리는 다음과 같을지도 모릅니다:

{{Cmd|ls -l /usr/src|output=<pre>
total 16
lrwxrwxrwx  1 root root   19 21 Mar   2013 linux -> linux-3.7.10-gentoo
drwxr-xr-x 24 root root 4096 25 Aug  10:39 linux-3.10.7-gentoo
drwxr-xr-x 20 root root 4096 21 Apr  19:42 linux-3.7.10-gentoo
drwxr-xr-x 21 root root 4096 14 Mar   2013 linux-3.7.9-gentoo
</pre>}}

The {{Path|/usr/src/linux}} symlink can be changed in different ways. 

* If the <code>symlink</code> USE is set the {{Path|/usr/src/linux}} symlink is automatically updated to point to the newly emerged sources. 

* If the <code>symlink</code> USE is ''not'' set, the user can change the destination of the symlink using the {{c|eselect kernel list}} followed by the {{c|eselect kernel set}} command.

genkernel will ''always'' (exclusively) use the sources pointed by the {{Path|/usr/src/linux}} symlink.

===== Kernel configuration file =====

If a kernel compilation has already been run with the active kernel sources, there might be a file inside the {{Path|/etc/kernels}} directory that contains the kernel configuration that has been applied while creating the last bzimage of the kernel. This file is named, for example {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}} where <code>x86_64</code> might be substituted with the system's architecture, <code>3.7.9</code> might be substituted with the version of the sources used, and <code>r1</code> with the release of the sources.

It is this {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}} file that is used as a starting configuration when running  {{c|genkernel --menuconfig all}}.

If it is the first time that genkernel is run with the new kernel sources, or if the previous result has not been saved, this file is substituted with a default configuration file that resides at {{Path|usr/share/genkernel/arch/x86_64/kernel-config}} where x86_64 is substituted with the actual architecture.

{{Note|The path to this default configuration file, may be altered by setting the DEFAULT_KERNEL_CONFIG variable in {{Path|/etc/genkernel.conf}} file.}}

===== 컴파일한 설정 저장 =====

If the <code>--save-config</code> genkernel option is activated, either from the command line or inside {{Path|/etc/genkernel.conf}}, the compiled kernel configuration is saved (with the name given above) into the {{Path|/etc/kernels}} directory. At the same time, the configuration is saved in the {{Path|.config}} file in {{Path|/usr/src/linux}} directory but this file is not reused on the next {{c|genkernel all}} run.

{{Warning|One has to be aware, that each time genkernel is run, with the <code>--save-config</code> genkernel option set, the configuration file in {{Path|/etc/kernels}} is overridden. Thus, it is highly recommended to copy this file under a new name ''before'' running genkernel in order to preserve it. }}

===== Installing the kernel and initramfs into the {{Path|/boot}} directory =====

Specifying the <code>--install</code> option when invoking genkernel, will ask genkernel to install the kernel image and the initramfs into the {{Path|/boot}} directory. In order to run <code>--install</code> a convenient manner, set the following in the {{Path|/etc/genkernel.conf}} file:

{{FileBox|filename=/etc/genkernel.conf|title=커널과 initramfs 자동 저장 설정|lang=bash|1=
# Mount BOOTDIR automatically if it is not mounted?
MOUNTBOOT="yes"
  
# Save the new configuration in /etc/kernels upon
# successful compilation
SAVE_CONFIG="yes"
  
# Make symlinks in BOOTDIR automatically?
SYMLINK="yes"
  
# Add new kernel to grub?
#BOOTLOADER="grub"
}}

* The first parameter speaks for itself.

* The second parameter tells genkernel to save the compiled kernel configuration into {{Path|/etc/kernels}}

* The last two options tell genkernel to automatically update the grub configuration. In practice, the following happens:
** If a previous kernel image with the same name already exist, it is renamed by appending {{Path|.old}} to its name. A symlink {{Path|kernel.old}} is automatically created that points to it.
** The new kernel takes the place of any kernel with the same name into {{Path|/boot}}. If it is the first time a kernel is compiled, a symlink kernel is automatically created that points to the new kernel.

After running {{c|genkernel --menuconfig all}}, the {{Path|/boot}} directory might look like this:

{{Cmd|ls -al /boot|output=<pre>
total 41336
drwxr-xr-x  3 root root    4096 20 avril 17:23 .
drwxr-xr-x 24 root root    4096 15 sept. 12:31 ..
lrwxrwxrwx  1 root root       1 24 févr.  2013 boot -> .
drwxr-xr-x  2 root root    4096 24 févr.  2013 grub
lrwxrwxrwx  1 root root      40 20 avril 17:23 initramfs -> initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1314412 20 avril 17:23 initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1313548 21 mars   2013 initramfs-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 1295344 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3310324 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      44 20 avril 17:23 initramfs.old -> initramfs-genkernel-x86_64-3.7.10-gentoo.old
lrwxrwxrwx  1 root root      37 20 avril 17:23 kernel -> kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866656 20 avril 17:23 kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866560 21 mars   2013 kernel-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 4552288 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3400736 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      41 20 avril 17:23 kernel.old -> kernel-genkernel-x86_64-3.7.10-gentoo.old
</pre>}}

==== 부트로더 설정 ====

The symlinks presented above in the bootloader's configuration can be used so that, even if the new kernel is not bootable, the user can always boot on the old one. 

To allow the kernel and intird provided by genkernel to run correctly, provide a minimum information in bootloader's configuration file:

* Add <code>root=/dev/sdaN</code> to the kernel parameters passed to the kernel image, where {{Path|/dev/sdaN}} points to the root partition (<code>N</code> is the number of the partition if a partition exists).
* If splash is used, add a suitable mode line such as <code>vga=0x317</code> to the parameters passed to the kernel and also add <code>splash=verbose</code> or <code>splash=silent</code> depending on the verboseness required through the boot process.
* Add the initrd information as required by the bootloader. Consult the [https://wiki.gentoo.org/wiki/Handbook:X86/Installation/Bootloader Bootloader Configuration Chapter] of the Gentoo Handbook for details on how to make the bootloader initrd-aware.

Here is how the {{Path|grub.conf}} file might look.

{{FileBox|filename=/boot/grub/grub.conf|title=An example of grub.conf file|lang=bash|1=
# This is a sample grub.conf for use with Genkernel, per the Gentoo handbook 
# http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1&chap=10#doc_chap2 
# If you are not using Genkernel and you need help creating this file, you 
# should consult the handbook. Alternatively, consult the grub.conf.sample that 
# is included with the Grub documentation. 
  
default 0 
timeout 5
splashimage=(hd1,0)/boot/grub/splash.xpm.gz 
   
title Gentoo Linux 
root (hd0,6) 
kernel /boot/kernel initrd=/dev/ram0 root=/dev/sda7 rootfstype=ext4  
initrd /boot/initramfs
  
title Gentoo Linux old kernel 
root (hd0,6) 
kernel /boot/kernel.old initrd=/dev/ram0 root=/dev/sda7 rootfstype=ext4 
initrd /boot/initramfs.old
}}

==== Preserving the working files ====

The genkernel application automatically saves new changes to the files. If previous changes are to be preserved, then the following actions need to be taken.

* The first file to preserve is the kernel configuration file in {{Path|/etc/kernels/}} If the source has not changed prior to the recompilation of the kernel, the previously used name for this file will be used. So copying the previous configuration file under a different name helps in preserving the information while keeping the file available as a starting point for a new configuration.

* The second important thing is to preserve the already bootable kernel and initramfs images. The way to accomplish this depends on the context:
:# If the last kernel compiled is bootable, running {{c|genkernel}} will rename this kernel (and similarly initramfs) image to {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} and create a new {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}. This mean that even if the new kernel is not bootable, users will always be able to boot the old one.
:# If the last kernel compiled is not bootable and sources haven't changed since the user compiled a bootable one, prior to running {{c|genkernel}}, first delete the new kernel image and remove the {{Path|.old}} suffix from the last bootable one. Without this, if the newly compiled kernel is not bootable for the second time, the bootable {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} will be kicked out by the renaming of the non bootable {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}, giving the user an unbootable system. Use the same reasoning for initramfs.

==== Using previous kernel configuration while changing the sources ====

The previous configuration can be used through the <var>MENUCONFIG</var> variable in {{Path|/etc/genkernel.conf}} as follows:

{{FileBox|filename=/etc/genkernel.conf|title=make menuconfig 설정|lang=bash|1=
# Run 'make menuconfig' before compiling this kernel?
MENUCONFIG="yes"
}}

{{Note|There is no need to run {{c|make oldconfig}} when using {{c|genkernel}}, even if the sources are changed from {{Path|kernel-genkernel-ARCH-version-gentoo-rx}} to {{Path|kernel-genkernel-ARCH-version-gentoo-r(x+1)}} or from {{Path|kernel-genkernel-ARCH-version-gentoo}} to {{Path|kernel-genkernel-ARCH-(version+1)-gentoo}}. This is because {{c|make menuconfig}} will try to load the previous configuration into the menu as much as possible. Nevertheless, ''reviewing'' each option and new sections carefully is recommended.}}

=== Network booting ===

==== From an installation CD ====

The {{c|genkernel}} utility can build kernel and initrd images that provide support for network booting, or netbooting. With any luck, users should be able to netboot any recent computer into the environment provided by the Installation CD.

The magic lies in genkernel's linuxrc script: it will try to netmount the Installation CD using NFS. From there, the init scripts of the Installation CD can take over, as if the CD was present locally.

==== Building the kernel and initramfs with netboot support ====

넷부팅 지원을 활성화하려면, 커널을 설정할 때 다음 옵션을 포함하십시오:

{{Warning/ko|genkernel의 넷부팅 기능은 시험 단계이며 버그가 있습니다.}}

First, the kernel image must include the drivers for the system's Network Interface Cards (NIC). Normally, drivers for such devices will be compiled as modules. However, it is essential (for netbooting) that such drivers are compiled directly into the kernel image and not as modules.

{{KernelBox|title=Configuring a 3.x.x series kernel to support various NIC drivers|<pre>
Device Drivers --->
   Networking Support --->
      Ethernet (10 or 100Mbit)  --->
         [*] Ethernet (10 or 100Mbit)
         <*>   The driver(s) for each network card</pre>
}}

{{Note|Be sure to select {{c|&lt;*&gt;}} and not {{c|&lt;M&gt;}}.}}

다음 ''IP: DHCP support options''와 ''IP: kernel level autoconfiguration''을 활성화 하는것이 좋겠습니다. IP 주소와 설치 CD의 NFS 경로를 DHCP서버에서 설정할 수 있기 때문에, 계층 복잡화를 막습니다. 물론 커널 명령줄이 어떤 머신에서든 있는 그대로 남아있음을 의미합니다. 이더부팅 기능에 있어 이점이 상당히 중요합니다.

{{KernelBox|title=DHCP를 지원하는 3.x.x 버전대 커널 설정|<pre>
Device Drivers --->
   Networking Support --->
      Networking options
         [*] TCP/IP networking--->
         [*]   IP: kernel level autoconfiguration
         [*]     IP: DHCP support
</pre>}}

이 옵션은 부팅 과정에서 커널에게 DHCP 요청을 보내라고 알려줍니다.

Additionally, enable [[SquashFS]] because most modern Gentoo Installation CDs require it. Support for SquashFS is not included with the generic kernel source tree. To enable SquashFS, apply the necessary patches to the generic kernel source or install gentoo-sources.

{{KernelBox|title=SquashFS를 지원하는 커널 설정|<pre>
File systems--->
   Miscellaneous filesystems --->
      [*] SquashFS 2.X - Squashed file system support
</pre>}}

컴파일 과정이 끝나면, 커널 모듈이 들어간 압축 타르볼을 만드십시오. 이 과정은 커널 버전이 설치 CD의 커널 이미지 버전과 일치하지 않을때만 필요합니다.

모든 모듈이 들어간 아카이브를 만들려면:

{{RootCmd|cd /
|tar -cf /tmp/modules-X.Y.Z.tar.gz /lib/modules/X.Y.Z/}}

네트워크 부팅 매커니즘에 따라 하나 이상의 단계를 따라야합니다:

이더부트 이미지를 만들려면:

{{RootCmd|emerge mknbi
|cd /boot
|mkelf-linux -params{{=}}"root{{=}}/dev/ram0 init{{=}}/linuxrc ip{{=}}dhcp" kernel... initrd... > etherboot.img}}

OpenBoot / SPARC64 TFTP 이미지를 만들려면:

{{RootCmd|emerge sparc-utils
|cd /boot
|elftoaout kernel... -o kernel.aout
|piggyback64 kernel.aout System.map-... initrd-...
|mv kernel.aout openboot.img}}

{{Path|openboot.img}} 파일은 부트 이미지입니다.

Finally, copy this kernel to the TFTP server. The details are architecture-dependent and are beyond the scope of this guide. Please refer to the documentation for the specific platform of interest.

==== NFS setup ====

To setup a NFS share that contains the Installation CD, use the loop device to mount the ISO image and then copy the contents of the CD into the NFS share. As a nice extra, genkernel's initrd scripts will extract all tar.gz files located in the {{Path|/nfs/livecd/add/}} directory. All that needs to be done here is copy the {{Path|modules-X.Y.Z.tar.gz}} archive to the {{Path|/nfs/livecd/add/}} directory.

다음 예제에서는 {{Path|/nfs/livecd}}를 내보내는 NFS 공유로 가정합니다:

{{RootCmd|mount /tmp/gentoo-livecd.iso /mnt/cdrom -o loop
|cp -p /mnt/cdrom /nfs/livecd
|umount /mnt/cdrom}}

이제 {{Path|modules.tar.gz}} 파일을 {{Path|/add}}에 복사하십시오:

{{RootCmd|mkdir /nfs/livecd/add
|cp /tmp/modules-X.Y.Z.tar.gz /nfs/livecd/add}}

==== DHCP setup ====

The netboot images will ask the DHCP server on the network for an IP as well as a <code>root-path</code> option. Both can be specified per host using a MAC address to identify machines:

{{FileBox|filename=/etc/dhcpd.conf|title=예제 dhcpd.conf 클라이언트 설정|1=
# Here, 192.168.1.2 is the NFS server while 192.168.1.10 will be the IP address of the netbooted machine
host netbootableMachine {
         hardware ethernet 11:22:33:44:55:66;
         fixed-address 192.168.1.10;
         option root-path "192.168.1.2:/nfs/livecd";
}
}}

==== Netbooting instructions ====

Netbooting itself is again very platform-specific. The important part is to specify the <code>ip=dhcp</code> and <code>init=/linuxrc</code> parameters on the kernel command line, as this will bring up the network interface and tell the initrd scripts to mount the Installation CD via NFS. Here are some platform-specific tips.

For etherboot, insert the etherboot disk into the drive and reboot. The kernel command line was specified when the image was constructed. 
  
With Sparc64, press {{Key|Stop}}+{{Key|A}} at the boot prompt and then enter:

{{RootCmd|boot net ip{{=}}dhcp init{{=}}/linuxrc|prompt=ok }}
  
For PXE, setup pxelinux (part of syslinux), then create a {{Path|pxelinux.cfg/default}} along the lines of:

{{FileBox|filename=pxelinux.cfg/default|title=기본 항목|1=
DEFAULT gentoo
TIMEOUT 40
PROMPT 1
  
LABEL gentoo
    KERNEL kernel-X.Y.Z
    APPEND initrd=initrd-X.Y.Z root=/dev/ram0 init=/linuxrc ip=dhcp
}}

==== Booting a genkernel initramfs ====

===== Introduction =====

If an initramfs is installed with genkernel, then take a look at the various boot options that can (or should) be defined in the bootloader configuration. The most common ones are added to this guide.

===== Loading LVM or software-RAID =====

If the system uses LVM or software-RAID, the initramfs has to be built using the <code>--lvm</code> and <code>--mdadm</code> options. Do not forget to enable support during boot as well. This can be done using the dolvm and domdadm options.

{{FileBox|filename=/boot/grub/grub.conf|title=LVM 또는 MDADM 지원 활성화|1=
# Example for GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 dolvm domdadm
initrd /initramfs-genkernel-x86_64-3.4.3
}}

===== Booting in single-user mode =====

어떤 이유로 인해 부팅에 실패했다면 단일 사용자 모드로 부팅하여 시스템을 복구할 수 있습니다. 이 방법은 서비스를 불러올때만 필요하며 과정이 끝나면 복구(루트) 쉘에서 사용자를 쫒아냅니다.

{{FileBox|filename=/boot/grub/grub.conf|title=단일 사용자 모드로 부팅|1=
# Example for GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 init_opts=S
initrd /initramfs-genkernel-x86_64-3.4.3
}}

== Troubleshooting ==

=== compile failed: Kernel not found ===

This failure can be experienced when attempting to compile a kernel for one architecture with a kernel {{Path|.config}} file that has a target of a different architecture than the target. This could be as simple as a machine running an {{Keyword|amd64}} kernel attempting to compile for a {{Keyword|x86}} target.

This can be experienced when booting from a x86_64 LiveCD on a system that is capable of operating in 64-bits, however the target to be installed or repaired is 32-bits. After the compilation process begins, {{c|genkernel}} will attempt to automatically detect the architecture for the target based on the currently running kernel. If the currently running kernel is 64-bit, then, unless it is told otherwise, {{c|genkernel}} will presume it should be looking for a 64-bit kernel.

Suppose then that the kernel's {{Path|.config}} file has x64 disabled. The {{c|make}} command will execute and the resulting kernel binary will be placed in the associated {{Path|x86}} directory. When {{c|genkernel}} goes to install (move and rename) the kernel it cannot find the kernel because it expected a 64-bit kernel.

The solution to this failure is to set {{c|genkernel}}'s <code>--arch-override</code> option to, in this case, the {{Keyword|x86}} architecture. The final command could look like this:

{{RootCmd|genkernel --kernel-config{{=}}/usr/src/linux/.config --btrfs --install --arch-override{{=}}x86 all}}

To override the architecture choice permanently, modify the <var>ARCH_OVERRIDE</var> variable in the {{Path|/etc/genkernel.conf}} file.

== See also ==

* [[Kernel/Configuration|Manual kernel configuration]] - For the times it is necessary to to do things manually.
* [[Dracut]] - Another initramfs builder available in Gentoo.


[[Category:Kernel]]
[[Category:Initramfs]] {{Migrated|originalauthors=Tim Yamin, Jimi Ayodele, Thomas Seiler, Joshua Saddler, Sebastian Pipping, José Fournier}}
