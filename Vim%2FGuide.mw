This guide will teach you how to use vi. This guide caters to beginners.

== Getting Started ==

=== Introduction ===

This tutorial will show you how to use vi, a powerful visual editor. This tutorial is designed to make you a proficient vi user without requiring a huge time commitment. In this vi tutorial, you'll learn how to move around, edit text, use insert mode, copy and paste text, and use important vim extensions like visual mode and multi-window editing. 

If you either don't know or aren't comfortable using vi, then you owe it to yourself to take this tutorial and get up to speed with one of the most popular and powerful Linux/UNIX visual editing programs. 

=== Introducing vim ===

There are many versions of vi, and I'm going to be showing you how to use a version of vi called <code>vim</code> . vim is very popular and has a number of extensions that make vi a lot nicer (whenever I demonstrate a vim-specific command, I'll make a note of it.) If you need to install vim, you can get it from [http://www.vim.org/ www.vim.org] . In addition to an enhanced command-line vi, vim also comes with <code>gvim</code> , a nice graphical editor which can be configured to use the excellent GTK+ gui library. 

If you're a vi newbie, try to get gvim running on your system. Using vi from a gui can make things a bit easier for beginners. 

== First Steps ==

=== Pick a file ===

Before using vi to edit files, you need to know how to use vi to move around in a file. vi has a lot of movement commands, and we're going to take a look at many of them. For this part of the tutorial, find an unimportant text file and load it into vi by typing: 

{{Cmd|vi myfile.txt}}

If you have vim installed, type <code>vim myfile.txt</code> . If you'd prefer to use gvim, type <code>gvim myfile.txt</code> . {{Path|myfile.txt}} should be the name of a text file on your system. 

=== Inside vi ===

After vi loads, you should see a part of the text file you loaded on your screen. Congratulations -- you're in vi! Unlike many editors, when vi starts up, it is in a special mode called ''command mode'' . This means that if you press <code>l</code> on the keyboard, instead of inserting an <code>l</code> into the file at the current cursor position, the cursor will move one character to the right instead. In command mode, the characters on your keyboard are used to send commands to vi rather than insert literal characters into the text. One of the most essential types of commands are movement commands; let's take a look at some. 

== Moving around ==

=== Moving in vi, part 1 ===

When in command mode, you can use the <code>h</code>, <code>j</code>, <code>k</code> and <code>l</code> keys to move the cursor left, down, up and right respectively. If you're using a modern version of vi, you can also use the arrow keys for this purpose. The <code>h</code>, <code>j</code>, <code>k</code> and <code>l</code> keys are handy because once you're comfortable with them, you'll be able to move around in the file without moving your fingers from the home keyboard row. Try using <code>h</code>, <code>j</code>, <code>k</code> and <code>l</code> (and the arrow keys) to move around in the text file. Try using <code>h</code> until you get to the beginning of a line. Notice that vi doesn't allow you to "wrap around" to the previous line by hitting <code>h</code> while you're on the first character. Likewise, you can't "wrap around" to the next line by hitting <code>l</code> at the end of a line. 

=== Moving in vi, part 2 ===

vi offers special shortcuts for jumping to the beginning or end of the current line. You can press <code>0</code> (zero) to jump to the first character of a line, and <code>$</code> to jump to the last character of the line. Try 'em and see. Since vi has so many handy movement commands, it makes a great "pager" (like the more or less commands.) Using vi as a pager will also help you to learn all the movement commands very quickly. 

You can also use <code><CTR>F</code> and <code><CTR>B</code> to move forwards and backwards a page at a time. Modern versions of vi (like vim) will also allow you to use the <code>PGUP</code> and <code>PGDOWN</code> keys for this purpose. 

=== Word moves, part 1 ===

vi also allows you to move to the left or right by word increments. To move to the ''first'' character of the next word, press <code>w</code> . To move to the ''last'' character of the next word, press <code>e</code> . To move to the first character of the ''previous'' word, press <code>b</code> . Test 'em out. 

=== Word moves, part 2 ===

After playing around with the word movement commands, you may have noticed that vi considers words like <code>foo-bar-oni</code> as five separate words! This is because by default, vi delimits words by spaces ''or'' punctuation. <code>foo-bar-oni</code> is therefore considered five words: <code>foo</code> , <code>-</code> , <code>bar</code> , <code>-</code> and <code>oni</code> . 

Sometimes, this is what you want, and sometimes it isn't. Fortunately, vi also understands the concept of a "bigword". vi delimits bigwords by ''spaces or newlines only'' . This means that while <code>foo-bar-oni</code> is considered five vi words, it's considered only one vi bigword. 

=== Word moves, part 3 ===

To jump around to the next and previous bigword, you can use a ''capitalized'' word move command. Use <code>W</code> to jump to the first character of the next bigword, <code>E</code> to jump to the last character of the next bigword, and <code>B</code> to jump to the first character of the previous bigword. Test 'em out, and compare the matching word and bigword movement commands until you understand their differences. 

=== Bigger moves ===

We just have a few more commands to cover before it's time to start puting together our cheat sheet. You can use the <code>(</code> and <code>)</code> characters to move to the beginning of the previous and next sentence. In addition, you can hit <code>{</code> or <code>}</code> to jump to the beginning of the current paragraph, and the beginning of the next. Test 'em out. 

== Quitting ==

We've covered the basic movement commands, but there are another couple of commands that you need to know. Typing <code>:q</code> will quit vi. If this doesn't work, then you probably accidentally modified the file in some way. To tell vi to quit, throwing away any changes, type <code>:q!</code> . You should now be at the command prompt. 

In vi, any command that begins with a <code>:</code> is said to be an ''ex-mode'' command. This is because vi has a built-in non-visual editor called ''ex'' . It can be used similarly to sed to perform line-based editing operations. In addition, it can also be used to quit, as we've just seen. If you ever hit the <code>Q</code> key while in command mode, you'll be transported to ex mode. If this ever happens to you, you'll be confronted with a : prompt, and hitting enter will scroll the entire screen upwards. To get back to good 'ol vi mode, simply type vi and hit enter. 

=== Miscellaneous vi ===

Let's continue our rapid command-covering pace. In command-mode, you can jump to a particular line by typing <code>G</code> . To jump to the first line of a file, type <code>1G</code> . Note that <code>G</code> is capitalized. 

If you want to jump to the next occurence of a particular text pattern, type <code>/<regexp></code> and hit <code>enter</code> . Replace <regexp> with the regular expression you're looking for. If you don't know how to use regular expressions, don't fret -- typing <code>/foo</code> will move to the next occurence of ''foo'' . The only thing you'll need to watch out for is when you want to refer to the literal <code>^</code> , <code>.</code> , <code>$</code> or <code>\</code> characters. Prefix these characters with a backslash ( <code>\</code> ), and you'll be set. For example, <code>/foo\.gif</code> will search for the next occurence of "foo.gif". 

To repeat the search forwards, hit <code>n</code> . To repeat the search backwards, type <code>N</code> . As always, test these commands out in your very own vi editor. You can also type <code>//</code> to repeat the last search. 

== Saving and Editing ==


=== Save and save as... ===

We've covered how you can use the ''ex'' command <code>:q</code> to quit from vi. If you want to save your changes, type <code>:w</code> . If you want to save your changes to another file, type <code>:w filename.txt</code> to save as ''filename.txt'' . If you want to save and quit, type <code>:x</code> or <code>:wq</code> . 

In vim (and other advanced vi editors, like elvis), you can have multiple buffers open at once. To open a file into a new window, type <code>:sp filename.txt</code> . {{Path|filename.txt}} will appear open for editing in a new split window. To switch between windows, type <code><CTR>w<CTR>w</code> (control-w twice). Any <code>:q</code> , <code>:q!</code> , <code>:w</code> and <code>:x</code> commands that you enter will only be applied to the currently-active window. 

=== Simple edits ===

Now, it's time to start learning some of the simple editing commands. The commands that we'll cover here are considered ''simple'' because the commands keep you in command mode. The more complex editing commands automatically put you into insert mode -- a mode that allows you to enter literal data from the keyboard. We'll cover those in a bit. 

For now, try moving over some characters and hitting <code>x</code> repeatedly. You'll see that <code>x</code> will delete the current character under the cursor. Now, move to the middle of the paragraph somewhere in your text file, and hit <code>J</code> (capitalized). You'll see that the <code>J</code> command tells vi to join the next line to the end of the current line. Now, move over a character and hit <code>r</code> , and then type in a new character; you'll see that the original character has been replaced. Finally, move to any line in the file and type <code>dd</code> . You'll see that <code>dd</code> deletes the current line of text. 

=== Repeating and deleting ===

You can repeat any editing command by hitting the <code>.</code> key. If you experiment, you'll see that typing <code>dd...</code> will delete 4 lines, and <code>J..</code> will join four lines. As usual, vi provides with another handy shortcut. 

To delete text, you can also use the <code>d</code> command combined with any movement command. For example, <code>dw</code> will delete from the current position to the beginning of the next word; <code>d)</code> will delete up until the end of the next sentence, and <code>d}</code> will delete the remainder of the paragraph. Experiment with the <code>d</code> command and the other editing commands until you're comfortable with them. 

=== Undo! ===

Now that we're experimenting with deletion, it would be a good time to learn how to undo any changes. By pressing <code>u</code> , the original version of vi allowed you to undo the last edit only. However, modern versions of vi like vim will allow you to repeatedly press <code>u</code> to continue to undo changes to your file. Try combining some <code>d</code> and <code>u</code> commands together. 

== Insert mode ==

So far, we've covered how to move around in vi, perform file i/o, and perform basic editing operations. However, I still haven't shown you how to actually type in free-form text! This was intentional, because vi's insert mode is a bit complicated at first. However, after you become comfortable with insert mode, its complexity (and flexibility) will become an asset. 

In vi ''insert mode'' , you'll be able to enter text directly to the screen just like you can in many other visual editors. Once you've entered your modifications, you can hit escape to return to ''command mode'' . You can enter insert mode by pressing <code>i</code> or <code>a</code> . If you press <code>i</code> , your text will be ''inserted'' before the current character, and if you hit <code>a</code> , your text will be ''appended'' after the current character. Remember, after you enter your text, hit <code><ESC></code> to return to command mode. 

=== Benefits of insert mode ===

Go ahead and try using the <code>a</code> and <code>i</code> commands. Hit either <code>a</code> or <code>i</code> , type some text, and then hit escape to get back to command mode. After hitting <code>a</code> or <code>i</code> , try hitting <code><ENTER></code> , and see what happens. Try using the arrow keys and the <code>DEL</code> key to get a feel for how insert mode works. By using the arrow keys and <code>DEL</code> key, you can perform significant editing steps without repeatedly entering and leaving insert mode. 

=== Insert options ===

Here are some other handy ways to enter insert mode. Press <code>A</code> (capital) to begin appending to the ''end'' of the current line, regardless of your current position on the line. Likewise, press <code>I</code> (capital) to begin inserting text at the ''beginning'' of the current line. Press <code>o</code> to create a new blank line below the current line into which you can insert text, and press <code>O</code> (capital) to create a new line above the current line. To replace the entire current line with a new line, press <code>cc</code> . To replace everything from the current position to the end of the line, type <code>c$</code> . To replace everything from the current position to the beginning of the line, type <code>c0</code> . 

In addition to performing a special operation, every one of these commands will put you into insert mode. After typing in your text, hit <code><ESC></code> to return to command mode. 

=== Changing text ===

We've used the <code>c</code> (change) command a little bit so far when we typed <code>cc</code> , <code>c0</code> and <code>c$</code> . <code>cc</code> is a special form of the change command, similar to <code>dd</code> . the <code>c0</code> and <code>c$</code> commands are examples of using the change command in combination with a movement command. In this form, <code>c</code> works similarly to <code>d</code> , except that it leaves you in insert mode so that you can enter replacement text for the deleted region. Try combining some movement commands with <code>c</code> and test them out on your file (hint: <code>cW</code> , <code>ce</code> , <code>c(</code> .) 

== Compound Commands ==

vi ''really'' becomes powerful when you start using compound ("combo") commands, like <code>d{</code> and <code>cw</code> . In addition to these commands, you can also combine a number with any movement command, such as <code>3w</code> , which will tell vi to jump three words to the right. Here are some more movement "combo" command examples: <code>12b</code> , <code>4j</code> . 

vi, in addition to allowing (number)(movement command) combinations, also allows <code>d</code> or <code>c</code> to be combined with a number or movement command. So, <code>d3w</code> will delete the next three words, <code>d2j</code> will delete the current and next two lines, etc. Test out some <code>c</code> and <code>d</code> combo moves to get a feel for how powerful and concise vi editing can be. Once these commands are second-nature, you'll be able to edit files at blazing speed. 

=== Productivity features ===

So far, we've covered how to move, save and quit, perform simple edits and deletions, and use insert mode. With everything listed on the cheat sheet so far, you should be able to use vi to perform almost any task. 

However, vi also has many more powerful commands. In this section, you'll learn how to ''cut'' , ''copy'' and ''paste'' , ''search'' and ''replace'' , and use ''autoindent'' features. These commands will help make vi more fun and productive. 

=== Visual mode ===

The best way to cut and paste is to use ''visual mode'' , a special mode that has been added to modern versions of vi, like vim and elvis. You can think of visual mode as a "highlight text" mode. Once the text is highlighted, it can be copied or deleted, and then pasted. If you are using gvim, you can highlight by simply dragging the left mouse button over a particular region: 

In addition, you can also enter visual mode by hitting <code>v</code> (this may be your only option if you are using vi from the console.) Then, by moving the cursor using movement commands (typically the arrow keys), you'll be able to highlight a region of text. Once highlighted, we are ready to cut or copy the text. 

If you're copying the text, hit <code>y</code> (which stands for "yank"). If you're cutting the text, hit <code>d</code> . You'll be placed back in command mode. Now, move to the position where you'd like to insert the cut or copied text, and hit <code>P</code> to insert before the cursor, or <code>p</code> to insert after the cursor. Voila, the cut/copy and paste is complete! Test out several copy/cut and paste operations before advancing to the next section. 

=== Replacing text ===

To replace patterns of text, we use ''ex'' mode. If you'd like to replace the first pattern that appears on the current line, type <code>:s/<regexp>/<replacement>/</code> and hit <code><ENTER></code> , where <regexp> is the pattern you'd like to match and <replacement> is the replacement string. To replace all matches on the current line, type <code>:s/<regexp>/<replacement>/g</code> and hit enter. To replace every occurence of this pattern in your file (normally what you want), type <code>:%s/<regexp>/<replacement>/g</code> . If you'd like to do a global replace, but have vi prompt you for each change, type <code>:%s/<regexp>/<replacement>/gc</code> (stands for "confirm") and hit <code><ENTER></code> . 

=== Indentation ===

vi supports autoindentation, for when you are editing source code. Most modern versions of vi (like vim) will auto-enable autoindent mode when you are editing a source file (like a .c file, for example). When autoindent is enabled, you can use <code><CTR>d</code> (control-d) to move one indent level to the left, and <code><CTR>t</code> (control-t) to move one indent level to the right. If autoindent wasn't enabled automatically, you can manually enable it by typing in the ''ex'' command <code>:set autoindent</code> . You can also tell vi to set the tab size to your favorite setting by using the <code>:set tabstop</code> command; <code>:set tabstop=4</code> is quite popular. 

=== Finishing off ===

If you want to use vi as your default editor, use <code>eselect</code> : 

{{RootCmd|eselect editor list|output=<pre>
Available targets for the EDITOR variable:
  [1]   /bin/nano
  [2]   /bin/ed
  [3]   /usr/bin/ex
  [4]   /usr/bin/vi
  [ ]   (free form)
</pre>}}

{{RootCmd|eselect editor set 4|output=<pre>
Setting EDITOR to /usr/bin/vi ...
>>> Regenerating /etc/ld.so.cache...
Run ". /etc/profile" to update the variable in your shell.
</pre>
}}

If you want to set this for your user only instead of system wide, set the <code>EDITOR</code> variable in your {{Path|~/.bashrc}} : 

{{Cmd|vi ~/.bashrc}}

{{FileBox|filename=~/.bashrc|lang=bash|1=
(...)
export EDITOR="/usr/bin/vi"
}}

=== Resources ===

Here are some resources you may find helpful as you continue to learn more about vi: 

*  [http://www.thomer.com/thomer/vi/vi.html The vi Lovers Home Page] , an excellent resource for all things vi
*  [http://www.vim.org/ The vim homepage] is the place to go for all your vim needs
* If you're looking for a good, old-fashioned book, [http://shop.oreilly.com/product/9780596529833.do Learning the vi and Vim Editors, 7th Edition] would be an excellent choice. Contains good coverage of vi and vi clones.

{{Migrated|originalauthors=Daniel Robbins, Eric Stockbridge, Benny Chuang}}
