<languages />

<div class="mw-translate-fuzzy">
{{Metadata|abstract=Este guia fornece uma introdução à otimização de códigos compilados usando CFLAGS e CXXFLAGS seguras e sensatas.  Também descreve a teoria por trás da otimização em geral.}}
</div>

<div class="mw-translate-fuzzy">
Este guia fornece uma introdução à otimização de códigos usando <var>CFLAGS</var> e <var>CXXFLAGS</var> seguras e sensatas. Também descreve a teoria por trás da otimização em geral.
</div>

== Introdução ==

=== O que são CFLAGS e CXXFLAGS? ===

<var>CFLAGS</var> e <var>CXXFLAGS</var> estão entre as variáveis de ambiente convencionalmente usadas para especificar opções do compilador para um sistema de compilação ao compilar códigos C e C++. Enquanto estas variáveis não são padronizadas, o seu uso é essencialmente onipresente e qualquer construção escrita corretamente deve compreender estas para passar opções extras ou opções personalizadas quando se invoca o compilador. Veja a página de informação do [https://www.gnu.org/software/make/manual/make.html#Implicit-Variables GNU make] para uma lista de algumas das variáveis comumente usadas nesta categoria.

Como uma grande proporção dos pacotes que compõem o sistema do Gentoo são escritos em C e C++, estas são duas variáveis que certamente os administradores irão querer definir corretamente como elas vão influenciar significativamente a forma como grande parte do sistema é construída.

<div class="mw-translate-fuzzy">
Elas podem ser usadas para diminuir a quantidade de mensagens de debug para um programa, aumentar os níveis de alertas de erro e, é claro, otimizar o código produzido. O [http://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html#Invoking-GCC Manual do GCC] mantém uma lista completa das opções disponíveis e seus propósitos.
</div>

=== Como elas são usadas? ===

Normalmente, <var>CFLAGS</var> e <var>CXXFLAGS</var> seria definida no ambiente ao chamar um script de configuração ou com makefiles gerados pelo programa {{c|automake}}. Em sistemas baseados no Gentoo, defina as variáveis <var>CFLAGS</var> e <var>CXXFLAGS</var> no {{Path|/etc/portage/make.conf}}. As variáveis definidas neste arquivo serão exportadas para o ambiente de programas chamados pelo Portage de tal forma que todos os pacotes serão compilados usando estas opções como base.

{{CodeBox|title=Definindo CFLAGS no /etc/portage/make.conf|lang=bash|1=
CFLAGS="-march=athlon64 -O2 -pipe"
CXXFLAGS="${CFLAGS}"
}}

{{Important|Ainda que seja possível ter múltiplas linhas nas flags '''USE''', tendo várias linhas na <var>CFLAGS</var> pode e "irá" resultar em problemas com programas como {{c|cmake}}. Certifique-se que as declarações da <var>CFLAGS</var> estejam em uma única linha, com o mínimo de espaço possível entre elas para evitar problemas. Veja {{Bug|500034}} como um exemplo.}}

Como vimos no exemplo anterior, a variável <var>CXXFLAGS</var> é definida para usar todas as opções presentes na <var>CFLAGS</var>. A maioria dos sistemas devem ser configurados desta maneira. Opções adicionais para as <var>CXXFLAGS</var> são menos comuns e usualmente não são aplicáveis de forma geral o suficiente para merecer colocá-los globalmente.

{{Tip|[[Safe_CFLAGS|Safe CFLAGS]] article might help beginners start optimizing their systems.}}

=== Equívocos ===

<div class="mw-translate-fuzzy">
Enquanto <var>CFLAGS</var> e <var>CXXFLAGS</var> podem ser muito eficazes de obter o código fonte e produzer binários menores e/ou rápidos, elas podem também prejudicar o funcionamento do código, inchar seu tamanho, desacelerar o tempo de execução. Definindo-as incorretamente pode até mesmo causar falhas na compilação!
</div>

Remember, the global <var>CFLAGS</var> configured in {{Path|/etc/portage/make.conf}} will be applied to every package on the system so administrators typically only set general, widely-applicable options. Individual packages further modify these options either in the ebuild or the build system itself to generate the final set of flags used when invoking the compiler.

=== Pronto? ===

Estando ciente dos riscos envolvidos, dê uma olhada em algumas otimizações seguras e sensatas. Estas serão mantidas em um bom lugar e serão agradáveis para os desenvolvedores da próxima vez que um problema for relatado no [https://bugs.gentoo.org/ Bugzilla]. (Os desenvolvedores irão, normalmente, solicitar aos usuários para recompilar um pacote com o mínimo de <var>CFLAGS</var> para ver se o problema persiste. Lembre-se: flags agressivas podem arruinar o código!) 

== Otimizando ==

=== O básico ===

<div class="mw-translate-fuzzy">
O objetivo por trás da <var>CFLAGS</var> e <var>CXXFLAGS</var> é a criação de código feito sob medida para o seu sistema; deve funcionar perfeitamente ao ser enxuto e rápido, se possível. Às vezes estas condições são mutuamente exclusivas, assim este guia irá manter combinações conhecidas por funcionarem bem. Idealmente, elas são as melhores disponíveis para qualquer arquitetura de CPU. Para fins informativos, flags agressivas serão cobertas posteriormente. Nem toda opção listada no manual do GCC (há centenas) serão discutidas, mas basicamente, a maioria das flags serão revistas.
</div> 

<div class="mw-translate-fuzzy">
{{Note|Quando desconhecer o que uma flag faz refira-se ao capítulo do [http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options manual do GCC] se ainda desconhecer após ver o manual, tente um mecanismo de busca ou verifique a [http://gcc.gnu.org/lists.html lista de discussão do GCC].}}
</div>

=== -march ===

<div class="mw-translate-fuzzy">
A primeira e mais importante opção é <code>-march</code>. Isto informa ao compilador que código deve produzir para a [https://en.wikipedia.org/wiki/Microarchitecture arquitetura do processador] (ou "arch"); ele informa ao GCC que deverá produzir código para um determinado tipo de CPU. Diferentes CPUs tem diferentes capacidades, suporta diferentes conjuntos de instruções e tem maneiras diferentes de execução de código. A flag <code>-march</code> irá instruir o compilador para produzir um código específico para a CPU do sistema, com todas as suas capacidades, recursos, conjunto de instruções, particularidades e assim por diante.
</div>

<code>-march=</code> is an ISA selection option; it tells the compiler that it may use the instructions from the [[Wikipedia:Instruction_set_architecture|ISA]]. On an Intel/AMD64 platform with <code>-march=native -O2</code> or lower OPT level, the code will likely end up with AVX instructions used but using shorter SSE XMM registers. To take full advantage of AVX YMM registers, the <code>-ftree-vectorize</code>, <code>-O3</code> or <code>-Ofast</code> options should be used as well<ref>GNU GCC Bugzilla, [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57952#c8 AVX/AVX2 no ymm registers used in a trivial reduction]. Retrieved on 2017/07/18.</ref>.

<code>-ftree-vectorize</code> is an optimization option (default at <code>-O3</code> and <code>-Ofast</code>), which attempts to vectorize loops using the selected ISA if possible.  The reason it isn't enabled at <code>-O2</code> is that it doesn't always improve code, it can make code slower as well, and usually makes the code larger; it really depends on the loop etc. 

<div class="mw-translate-fuzzy">
Mesmo que a variável <code>CHOST</code> no {{Path|/etc/portage/make.conf}} especifique a arquitetura geral usada, <code>-march</code> ainda deve ser usado de modo que os programas possam ser otimizados para o processador específico do sistema. CPUs x86 e x86-64 (entre outras) devem utilizar a flag <code>-march</code>.
</div> 

Que tipo de CPU o sistema tem? Para encontrar, execute o seguinte comando: 

{{Cmd|cat /proc/cpuinfo}}

or even install {{Package|app-portage/cpuid2cpuflags}} and add the available CPU-specific options to the {{Path|/etc/portage/package.use/00cpuflags}} file, which the tool does through e.g. the [[CPU FLAGS X86|CPU_FLAGS_X86]] variable:

{{Cmd|cpuid2cpuflags|output=<pre>
CPU_FLAGS_X86: aes avx avx2 f16c fma3 mmx mmxext popcnt sse sse2 sse3 sse4_1 sse4_2 ssse3</pre>}}

{{RootCmd|echo "*/* $(cpuid2cpuflags)" >> /etc/portage/package.use/00cpuflags}}

Para obter maiores detalhes, incluindo os valores <code>march</code> e <code>mtune</code>, dois comandos podem ser usados.

*O primeiro comando informa ao compilador não fazer nenhuma ligação (<code>-c</code>) e, ao invés de interpretar a opção <code>--help</code> para esclarecer as opções da linha de comando,  ele agora irá mostrar se certas opções estão habilitadas ou desabilitadas (<code>-Q</code>). Neste caso, as opções mostradas são aquelas habilitadas para o alvo selecionado:
: {{Cmd|gcc -c -Q -march{{=}}native --help{{=}}target}}

*O segundo comando irá mostrar as diretivas do compilador para construir o arquivo cabeçalho, mas sem realmente executar os passos e ao invés disto mostrá-los na tela (<code>-###</code>). A saída final é o comando que contém todas as opções de otimização e seleção de arquitetura:
:{{Cmd|gcc -### -march{{=}}native /usr/include/stdlib.h}}

Agora vamos ver <code>-march</code> em ação. Este exemplo é para um antigo chip Pentium III: 

{{FileBox|filename=/etc/portage/make.conf|title=Pentium III exemplo|lang=bash|1=
CFLAGS="-march=pentium3"
CXXFLAGS="${CFLAGS}"
}}

Aqui está outro para uma CPU AMD 64-bit: 

{{FileBox|filename=/etc/portage/make.conf|title=AMD64 exemplo|lang=bash|1=
CFLAGS="-march=athlon64"
CXXFLAGS="${CFLAGS}"
}}

Se o tipo da CPU é indeterminado, ou se o usuário não sabe qual configuração escolher, é possível usar a configuração <code>-march=native</code>. Quando esta flag é usada, o GCC tentará detectar o processador e automaticamente definir as flags apropriadas para ele. '''Entretanto, isto não deve ser usado quando se pretende compilar pacotes para diferentes CPUs!''' 

{{Warning|'''Não''' use <code>-march{{=}}native</code> ou <code>-mtune{{=}}native</code> nas variáveis <var>CFLAGS</var> ou <var>CXXFLAGS</var> do {{Path|make.conf}} quando compilar com {{c|[[Distcc#-march.3Dnative|distcc]]}}.}}

<div class="mw-translate-fuzzy">
Se compilar pacotes em um computador a fim de executá-los em um computador diferente (tal como quando se utiliza um computador rápido para construir para uma máquina antiga, lenta), então "não" use <code>-march=native</code>. "Native" significa que o código produzido executará "apenas" naquele tipo de CPU. As aplicações construídas com <code>-march=native</code> em um AMD Athlon 64 CPU '''''não''''' serão capazes de executar em uma antiga CPU VIA C3.
</div> 

Também estão disponíveis as flags <code>-mtune</code> e <code>-mcpu</code>. Estas flags são normalmente usadas apenas quando não há a opção <code>-march</code> disponível; certas arquiteturas de processadores podem exigir <code>-mtune</code> ou até mesmo <code>-mcpu</code>. Infelizmente o comportamento do GCC não é muito consistente com a forma como cada flag se comporta de uma arquitetura para outra. 

Em CPUs x86 e x86-64, <code>-march</code> irá gerar um código especificamente para esta CPU usando seu conjunto de instruções disponíveis e a correta ABI; ele não terá compatibilidade com versões anteriores para antigas/diferentes CPUs. Considere usar <code>-mtune</code> quando gerar códigos para antigas CPUs tais como i386 e i486. <code>-mtune</code> produz um código mais genérico do que <code>-march</code>; mas isto vai ajustar o código para uma determinada CPU, ele não leva em conta os conjuntos de instruções disponíveis e ABI. Não use <code>-mcpu</code> em sistemas x86 e x86-64, de forma que ele é obsoleto para estas arquiteturas. 

<div class="mw-translate-fuzzy">
Apenas em CPUs não x86/x86-64 (como Sparc, Alpha e PowerPC) pode exigir <code>-mtune</code> ou <code>-mcpu</code> ao invés de <code>-march</code>. Nestas arquiteturas, <code>-mtune</code> / <code>-mcpu</code> às vezes se comportam como <code>-march</code> (em x86/x86-64), com um nome de flag diferente. Mais uma vez, o comportamento do GCC e nomeação de flag não é consistente em todas as arquiteturas, por isso não deixe de verificar o manual do  [http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options GCC] para determinar qual deve ser usado.
</div> 

{{Note|For more suggested <code>-march</code> / <code>-mtune</code> / <code>-mcpu</code> settings, please read chapter 5 of the appropriate [[HandBook:Main_Page|Gentoo Installation Handbook]] for the arch. Also, read the GCC manual's list of [https://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options architecture-specific options], as well as more detailed explanations about the differences between <code>-march</code>, <code>-mcpu</code>, and <code>-mtune</code>.}}

=== -O ===

{{Warning|Using <code>-O3</code> or <code>-Ofast</code> may cause some packages to break during the compilation.}}

{{Note|To print all packages that were built with specified <var>CFLAGS</var>/<var>CXXFLAGS</var> it's possible to use the following command: <code>grep Ofast /var/db/pkg/*/*/CFLAGS</code>}}

Next up is the <code>-O</code> variable. This variable controls the overall level of optimization. Changing this value will make the code compilation take more time and will use much more memory, especially as the level of optimization is increased. 

There are seven <code>-O</code> settings: <code>-O0</code>, <code>-O1</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>, <code>-Og</code>, and <code>-Ofast</code>. Only use one of them in {{Path|/etc/portage/make.conf}}.

With the exception of <code>-O0</code>, the <code>-O</code> settings each activate several additional flags, so be sure to read the GCC manual's chapter on [https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options optimization options] to learn which flags are activated at each <code>-O</code> level, as well as some explanations as to what they do. 

Let us examine each optimization level: 

*  <code>-O0</code>: This level (that is the letter "O" followed by a zero) turns off optimization entirely and is the default if no <code>-O</code> level is specified in <var>CFLAGS</var> or <var>CXXFLAGS</var>. This reduces compilation time and can improve debugging info, but some applications will not work properly without optimization enabled. This option is not recommended except for debugging purposes.

*  <code>-O1</code>: the most basic optimization level. The compiler will try to produce faster, smaller code without taking much compilation time. It is basic, but it should get the job done all the time.

*  <code>-O2</code>: A step up from <code>-O1</code>. The ''recommended'' level of optimization unless the system has special needs. <code>-O2</code> will activate a few more flags in addition to the ones activated by <code>-O1</code>. With <code>-O2</code>, the compiler will attempt to increase code performance without compromising on size, and without taking too much compilation time. SSE or AVX may be be utilized at this level but no YMM registers will be used unless <code>-ftree-vectorize</code> is also enabled.

*  <code>-O3</code>: the highest level of optimization possible. It enables optimizations that are expensive in terms of compile time and memory usage.  Compiling with <code>-O3</code> is not a guaranteed way to improve performance, and in fact, in many cases, can slow down a system due to larger binaries and increased memory usage. <code>-O3</code> is also known to break several packages. Using <code>-O3</code> is not recommended. However, it also enables <code>-ftree-vectorize</code> so that loops in the code get vectorized and will use AVX YMM registers.

*  <code>-Os</code>: optimizes code for size. It activates all <code>-O2</code> options that do not increase the size of the generated code. It can be useful for machines that have extremely limited disk storage space and/or CPUs with small cache sizes.

*  <code>-Og</code>: In GCC 4.8, a new general optimization level, <code>-Og</code>, has been introduced. It addresses the need for fast compilation and a superior debugging experience while providing a reasonable level of runtime performance. Overall experience for development should be better than the default optimization level <code>-O0</code>.  Note that <code>-Og</code> does not imply <code>-g</code>, it simply disables optimizations that may interfere with debugging.

*  <code>-Ofast</code>: New in GCC 4.7, consists of <code>-O3</code> plus <code>-ffast-math</code>, <code>-fno-protect-parens</code>, and <code>-fstack-arrays</code>. This option breaks strict standards compliance, and is not recommended for use.

As previously mentioned, <code>-O2</code> is the recommended optimization level. If package compilation fails and while not using <code>-O2</code>, try rebuilding with that option. As a fallback option, try setting the <var>CFLAGS</var> and <var>CXXFLAGS</var> to a lower optimization level, such as <code>-O1</code> or even <code>-O0 -g2 -ggdb</code> (for error reporting and checking for possible problems).

=== -pipe ===

A common flag is <code>-pipe</code>. This flag has no effect on the generated code, but it makes the compilation process ''faster''. It tells the compiler to use pipes instead of temporary files during the different stages of compilation, which uses more memory. On systems with low memory, GCC might get killed. In those cases do not use this flag. 

=== -fomit-frame-pointer ===

This is a very common flag designed to reduce generated code size. It is turned on at all levels of <code>-O</code> (except <code>-O0</code>) on architectures where doing so does not interfere with debugging (such as x86-64), but it may need to be activated. In that case add it to the flags. Though the GCC manual does not specify all architectures, it is turned on by using the <code>-O</code> option. It's still necessary to explicitly enable the <code>-fomit-frame-pointer</code> option, to activate it on x86-32 with GCC up to version 4.6, or when using <code>-Os</code> on x86-32 with any version of GCC. However, using <code>-fomit-frame-pointer</code> will make debugging hard or impossible. 

In particular, it makes troubleshooting applications written in Java and compiled by gcj much harder, though Java is not the only code affected by using this flag. So while the flag can help, it also makes debugging harder; backtraces in particular will be useless. When not doing software debugging and no other debugging-related <var>CFLAGS</var> such as <code>-ggdb</code> have been used, then try using <code>-fomit-frame-pointer</code>. 

{{Important|Do ''not'' combine <code>-fomit-frame-pointer</code> with the similar flag <code>-momit-leaf-frame-pointer</code>. Using the latter flag is discouraged, as <code>-fomit-frame-pointer</code> already does the job properly. Furthermore, <code>-momit-leaf-frame-pointer</code> has been shown to negatively impact code performance.}}

=== -msse, -msse2, -msse3, -mmmx, -m3dnow ===

These flags enable the [[Wikipedia:Streaming_SIMD_Extensions|Streaming SIMD Extensions]] (SSE), [[Wikipedia:SSE2|SSE2]], [[Wikipedia:SSSE3|SSE3]], [[Wikipedia:MMX_(instruction_set)|MMX]], and [[Wikipedia:3DNow!|3DNow!]] instruction sets for x86 and x86-64 architectures. These are useful primarily in multimedia, gaming, and other floating point-intensive computing tasks, though they also contain several other mathematical enhancements. These instruction sets are found in more modern CPUs. 

{{Important|Be sure to see if the CPU supports these instruction sets by running {{c|cat /proc/cpuinfo}}. The output will include any supported additional instruction sets. Note that '''pni''' is just a different name for SSE3.}}

Normally none of these flags need to be added to {{Path|/etc/portage/make.conf}}, as long as the system is using the correct <code>-march</code> (for example, <code>-march=nocona</code> implies <code>-msse3</code>). Some notable exceptions are newer VIA and AMD64 CPUs that support instructions not implied by <code>-march</code> (such as SSE3). For CPUs like these additional flags will need to be enabled where appropriate after checking {{Path|/proc/cpuinfo}}. 

{{Note|Check the [https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html list of x86 and x86-64-specific flags] to see which of these instruction sets are activated by the proper CPU type flag. If an instruction is listed, then it does not need to be separately specified; it will be turned on by using the proper <code>-march</code> setting.}}

== Optimization FAQs ==

=== But I get better performance with -funroll-loops -fomg-optimize! ===

No, people only ''think'' they do because someone has convinced them that more flags are better. Aggressive flags will only hurt applications when used system-wide. Even the GCC [https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options manual] says that using <code>-funroll-loops</code> and <code>-funroll-all-loops</code> will make code larger and run more slowly. Yet for some reason, these two flags, along with <code>-ffast-math</code>, <code>-fforce-mem</code>, <code>-fforce-addr</code>, and similar flags, continue to be very popular among ricers who want the biggest bragging rights. 

The truth of the matter is that they are dangerously aggressive flags. Take a good look around the [https://forums.gentoo.org/ Gentoo Forums] and [https://bugs.gentoo.org/ Bugzilla] to see what those flags do: nothing good! 

These flags are not needed globally in <var>CFLAGS</var> or <var>CXXFLAGS</var>. They will only hurt performance. They might bring on the idea of having a high-performance system running on the bleeding edge, but they don't do anything but bloat the code and get bugs marked INVALID or WONTFIX. 

Dangerous flags like these are not needed. '''Don't use them'''. Stick to the basics: <code>-march</code>, <code>-O</code>, and <code>-pipe</code>.

=== What about -O levels higher than 3? ===

Some users boast about even better performance obtained by using <code>-O4</code>, <code>-O9</code>, and so on, but the reality is that <code>-O</code> levels higher than 3 have no effect. The compiler may accept <var>CFLAGS</var> like <code>-O4</code>, but it actually doesn't do anything with them. It only performs the optimizations for <code>-O3</code>, nothing more. 

Need more proof? Examine the [https://gcc.gnu.org/viewcvs/gcc/trunk/gcc/opts.c?view=markup#l381 source code]: 

{{CodeBox|title=-O source code|lang=c|1=
   case OPT_LEVELS_3_PLUS:
      enabled = (level >= 3);
      break;
 
 case OPT_LEVELS_3_PLUS_AND_SIZE:
      enabled = (level >= 3 {{!}}{{!}} size);
      break;
}}

As can be seen, any value higher than 3 is treated as just <code>-O3</code>.

=== What about compiling outside the target machine? ===

Some readers might wonder if compiling outside the target machine with a strictly inferior CPU or GCC sub-architecture will result in inferior optimization results (compared to a native compilation). The answer is simple: '''No'''.  Regardless of the actual hardware on which the compilation takes place and the CHOST for which GCC was built, as long as the same arguments are used <small>(except for <code>-march=native</code>)</small> and the same version of GCC is used <small>(although minor version might be different)</small>, the resulting optimizations are strictly the same.

To exemplify, if Gentoo is installed on a machine whose GCC's CHOST is ''i686-pc-linux-gnu'', and a [[Distcc]] server is setup on another computer whose GCC's CHOST is ''i486-linux-gnu'', then there is no need to be afraid that the results would be less optimal because of the strictly inferior sub-architecture of the remote compiler and/or hardware. The result would be as optimized as a native build, as long as the same options are passed to both compilers (and the <code>-march</code> parameter doesn't get a <code>native</code> argument).  In this particular case the target architecture needs to be specified explicitly as explained in [[Distcc#-march.3Dnative|Distcc and -march=native]].

The only difference in behavior between two GCC versions built targeting different sub-architectures is the implicit default argument for the <code>-march</code> parameter, which is derived from the GCC's CHOST when not explicitly provided in the command line.

=== What about redundant flags? ===

Oftentimes <var>CFLAGS</var> and <var>CXXFLAGS</var> that are turned on at various <code>-O</code> levels are specified redundantly in {{Path|/etc/portage/make.conf}}. Sometimes this is done out of ignorance, but it is also done to avoid flag filtering or flag replacing. 

Flag filtering/replacing is done in many of the ebuilds in the Portage tree. It is usually done because packages fail to compile at certain <code>-O</code> levels, or when the source code is too sensitive for any additional flags to be used. The ebuild will either filter out some or all <var>CFLAGS</var> and <var>CXXFLAGS</var>, or it may replace <code>-O</code> with a different level. 

The [https://devmanual.gentoo.org/ebuild-writing/functions/src_compile/build-environment/index.html Gentoo Developer Manual] outlines where and how flag filtering/replacing works. 

It's possible to circumvent <code>-O</code> filtering by redundantly listing the flags for a certain level, such as <code>-O3</code>, by doing things like: 

{{CodeBox|title=Specifying redundant CFLAGS|lang=bash|1=
CFLAGS="-O3 -finline-functions -funswitch-loops"
}}

However, '''this is not a smart thing to do'''. <var>CFLAGS</var> are filtered for a reason! When flags are filtered, it means that it is unsafe to build a package with those flags. Clearly, it is ''not'' safe to compile the whole system with <code>-O3</code> if some of the flags turned on by that level will cause problems with certain packages. Therefore, don't try to "outsmart" the developers who maintain those packages. ''Trust the developers''. Flag filtering and replacing is done to ensure stability of the system and application! If an ebuild specifies alternative flags, then don't try to get around it. 

Building packages with unacceptable flags will most likely lead to problems. When reporting problems on Bugzilla, the flags that are used in {{Path|/etc/portage/make.conf}} will be readily visible and developers will ask to recompile without those flags. Save the trouble of recompiling by not using redundant flags in the first place! Don't just automatically assume to be more knowledgeable than the developers.

=== What about LDFLAGS? ===

The Gentoo developers have already set basic, safe <var>LDFLAGS</var> in the base profiles, so they do not need to be changed.

=== Can I use per-package flags? ===

{{Warning|Using per-package flags complicates debugging and support. Make sure to mention the use of this feature in the bug reports together with the changes made.}}

Information on how to use per-package environment variables (including <var>CFLAGS</var>) is described in the [[Handbook:AMD64/Portage/Advanced#Per-package_environment_variables|Gentoo Handbook, "Per-Package Environment Variables"]].

== See also ==

* [[Handbook:AMD64/Installation/Stage#Configuring_compile_options|Configuring compile options]] (AMD64 Handbook)

== External resources ==

The following resources are of some help in further understanding optimization: 

* The [https://gcc.gnu.org/onlinedocs/ GCC online documentation] 

* {{c|man make.conf}}

* [https://en.wikipedia.org/ Wikipedia]

* The [https://forums.gentoo.org/ Gentoo Forums]

== References ==

{{reflist}}

{{Migrated|originalauthors={{Dev|nightmorph}}}}


[[Category:Compilation]]
