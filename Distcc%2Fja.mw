<languages />

{{Metadata|abstract=Distcc は、ネットワーク越しの複数のホストにコンパイル作業を分散させられるようにするためのプログラムです。一つのサーバ（distccd）と一つのクライアントプログラム（distcc）からなっています。また、Distccはちょっとした設定をすれば意識することなく ccache, Portage, Automake などとともにうまくやっていくことができます。}}

{{InfoBox stack
|{{InfoBox homepage|https://code.google.com/p/distcc/|header=true}}
|{{InfoBox wikipedia}}
}}

[https://code.google.com/p/distcc/ Distcc]はネットワーク上のホストで分散コンパイルを行うためのプログラムで、サーバー側である<tt>distccd</tt>とクライアント側である<tt>distcc</tt>で構成されています。また[http://ccache.samba.org ccache]、[[Portage]]、Automakeとの連携機能も備えています。 

Gentooのインストールに<tt>distcc</tt>を使いたい場合は、[[#Using_distcc_to_bootstrap|Using distcc to bootstrap]]を参照してください。 

== インストール ==

<tt>distcc</tt>を構築するには、まずは使用するすべてのホストに{{Package|sys-devel/distcc}} パッケージのが導入されているかどうか見てみましょう。

=== 全てのホストで必要なこと ===

<tt>distcc</tt>に使う全てのホストに同じバージョンのGCCを用意するようにしてください。例として、3.3.x (xは任意の数字) を混在させるのは問題ありませんが、3.3.xと3.2.xを混在させた場合コンパイルエラーや実行時エラーが起きるかもしれません。 

=== ソフトウェアのインストール ===

Distccには分散コンパイルしているタスクを監視するグラフィカルモニタが付属しています。これを使うには<code>gtk</code> '''USE'''フラグをセットします。

'''USE'''フラグの設定が終わったら{{Package|sys-devel/distcc}}パッケージをインストールします。

{{Emerge|distcc}}

{{Important|{{Package|sys-devel/distcc}}は分散コンパイルに使う全てのホストにインストールしてください。}}

=== distcc デーモンの自動起動 ===

<tt>distccd</tt>を自動的に起動するためには、次の方法に従ってください。ただし、ご使用のinitシステムによってやり方が違います。

==== OpenRC をご使用中の場合 ====

{{Path|/etc/conf.d/distccd}} を編集して <tt>--allow</tt> ディレクティブに信頼できるクライアントがセットされいるかどうかを確認してください。マルチホームドシステテムの場合、さらにセキュリティを高めるには <tt>--listen</tt> ディレクティブで <tt>distcc</tt> デーモンにどのIPを受け付けるのかを知らせください。<tt>distcc</tt> のセキュリティについてもっと詳しく知りたいならば、[http://distcc.googlecode.com/svn/trunk/doc/web/security.html Distcc security notes] を参照してください。

次の例では、ローカルの<tt>distccd</tt> サーバは、<tt>192.168.0.4</tt>と<tt>192.168.0.5</tt>で実行されているdistccクライアントからの接続を許可します:

{{FileBox|filename=/etc/conf.d/distccd|title=ある特定のクライアントがdistccに接続できるようにする|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important|重要なことは、 <tt>--allow</tt> と <tt>--listen</tt> を使用することです。<tt>distccd</tt>　man ページをお読みになるか、もっと詳しくは上記のセキュリティ・ドキュメントをご覧ください。}}

それでは、分散コンパイルに参加する全てのコンピュータで <tt>distccd</tt> デーモンを起動しましょう: 

{{RootCmd|rc-update add distccd default
|rc-service distccd start}}

==== systemd をご使用中の場合 ====

{{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} を編集して、CIDRフォーマットにて許可するクライアントを追加してください。例をあげますと:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=ALLOWED_SERVERS の設定|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

このような変更した後は、ユニット・ファイルをリロードしましょう。

{{RootCmd|systemctl daemon-reload}}

<tt>distccd</tt>の自動起動を有効にして、サービスを開始します:

{{RootCmd|systemctl enable distccd
|systemctl start distccd}}

== 設定 ==

それでは、<tt>distcc</tt>の設定をしていきましょう。

=== 参加するホストを記述する ===

<tt>distcc-config</tt>コマンドを使用すれば、ホストのリストを設定することができます。 

ホストのリストの書き方の一例を下に記します。ほとんどのケースでは、一行目と2行目の書き方で十分でしょう。[http://distcc.googlecode.com/svn/trunk/doc/web/man/distcc_1.html distcc マニュアルページ] では、3行目や4行目のような書き方の詳しい説明が載っています。

{{CodeBox|title=ホスト定義の例|1=
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
}}

ホストをセッティングする方法にはここで挙げたほかにもいくつかやり方ありますので、詳細については、<tt>distcc</tt> man ページをご覧ください。

ローカルマシンでもコンパイル作業をさせたいのなら、ホストのリストに <code>localhost</code> と記入しましょう。逆に、ローカルマシンにコンパイル作業をさせたくない場合には、リストから外しましょう。遅いマシンでlocalhostを設定してると、実際すべてのことが遅くなってしまうでしょう。また、作業効率についてのセッティングをテストするのを忘れないでください。

例の中の最初の一行目で書かれたホストを使用して、 <tt>distcc</tt> の環境を設定してみましょう。

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

=== Portageでdistccを使用する ===

[[Portage]] が <tt>distcc</tt> を利用できるように設定するのは簡単です。 <tt>distcc</tt> feature を有効にして、同時ビルドジョブ数の変数をそれ相当に設定するだけです(というのも <tt>distcc</tt> はビルドリソースの量を増やすからです)。

下に示したように、<code>MAKEOPTS</code>変数と<code>FEATURES</code>変数を設定してください。

一般的な戦略としては、
* <code>N</code>の値を「トータルの」(ローカルとリモートの)CPUコアの個数の2倍 + 1に設定し、
* <code>M</code>の値を「ローカルの」CPUコアの個数に設定します。

<code>MAKEOPTS</code>変数での<code>-lM</code>の使用は、
一部の<tt>distcc</tt>クラスタホストが使用できない時(他のシステムでの並列ジョブが増加され)、あるいは、(gccなど)ebuildがリモートビルドを許可しない設定になっている時に、あまりにも多くのタスクを開始してしまうことを防ぎます。
これは、システムの負荷が<tt>M</tt>の値以上である時に追加のジョブを開始しないことによって成立します。

{{FileBox|filename=/etc/portage/make.conf|title=MAKEOPTSとFEATURESの設定|lang=bash|1=
# NとMを計算した正しい値に置き換えてください
MAKEOPTS="-jN -lM"
FEATURES="distcc distcc-pump"
}}

For instance, when there are two quad-core host PCs running <tt>distccd</tt> and the local PC has a dual core CPU, then the <code>MAKEOPTS</code> variable could look like this:

{{FileBox|filename=/etc/portage/make.conf|title=MAKEOPTS example for 2 quad-core (remote) and one dual core (local) PC|lang=bash|1=
# 2 remote hosts with 4 cores each = 8 cores remote
# 1 local host with 2 cores = 2 cores local
# total number of cores is 10, so N = 2*10+1 and M=2
MAKEOPTS="-j21 -l2"
}}

While editing the {{Path|make.conf}} file, make sure that it does not have <tt>-march=native</tt> in the <code>CFLAGS</code> or <code>CXXFLAGS</code> variables. <tt>distccd</tt> will not distribute work to other machines if <code>march</code> is set to <code>native</code>. The appropriate <tt>-march=</tt> value can be obtained by running the following command:

{{Cmd|gcc -v -E -x c -march{{=}}native -mtune{{=}}native - < /dev/null 2>&1 {{!}} grep cc1 {{!}} perl -pe 's/ -mno-\S+//g; s/^.* - //g;'}}

See [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <tt>-march=native</tt> for distcc] for more information.

=== automake で distcc を使用する ===

This is, in some cases, easier than the Portage setup. All that is needed is to update the <code>PATH</code> variable to include {{Path|/usr/lib/distcc/bin/}} in front of the directory that contains <tt>gcc</tt> ({{Path|/usr/bin/}}). However, there is a caveat. If <tt>ccache</tt> is used, then put the distcc location after the ccache one: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Put this in the user's {{Path|~/.bashrc}} or equivalent file to have the <code>PATH</code> set every time the user logs in, or set it globally through an {{Path|/etc/env.d/}} file.

Instead of calling <tt>make</tt> alone, add in <code>-jN</code> (where <code>N</code> is an integer). The value of <code>N</code> depends on the network and the types of computers that are used to compile. A heuristic approach to the right value is given earlier in this article.

== ブートストラップにdistccを使う ==

Using <tt>distcc</tt> to bootstrap (i.e. build a working toolchain before installing the remainder of the system) requires some additional steps to take.

=== Step 1: Portage の設定 ===

Boot the new box with a Gentoo Linux LiveCD and follow the [[Handbook:AMD64|installation instructions]], while keeping track of the instructions in the [[FAQ|Gentoo FAQ]] for information about bootstrapping. Then configure Portage to use <tt>distcc</tt>: 

{{FileBox|filename=/etc/portage/make.conf|title=Configure Portage to use distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Update the <code>PATH</code> variable in the installation session as well:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Step 2: distcc をゲット ===

Install {{Package|sys-devel/distcc}}: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Step 3: distcc のセッティング ===

Run <tt>distcc-config --install</tt> to setup distcc; substitute the <code>host#</code> in the example with the IP addresses or hostnames of the participating nodes.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc is now set up to bootstrap! Continue with the proper installation instructions and do ''not'' forget to run <tt>emerge distcc</tt> after running <tt>emerge @system</tt>. This is to make sure that all of the necessary dependencies are installed. 

{{Note|During bootstrap and <tt>emerge @system</tt> <tt>distcc</tt> may not appear to be used. This is expected as some ebuilds do not work well with distcc, so they intentionally disable it.}}

== Distcc に付属するツール群 ==

The <tt>distcc</tt> application has additional features and applications to support working in a <tt>distcc</tt> environment.

=== Distcc の監視 === 

Distccには2つの監視ユーティリティが付属しています。テキストベースの監視ユーティリティは必ずビルドされ、<tt>distccmon-text</tt>という名前です。最初に実行するときは少々混乱するかもしれませんが、実際とても簡単に使うことができます。パラメータなしで実行したときは、プログラムは1回だけ実行されますが、引数に数字を与えると、与えた引数が<tt>N</tt>ならば、<tt>N</tt>秒ごとに更新が行われます。

{{Cmd|distccmon-text 10}}

もうひとつの監視ユーティリティは<code>gtk</code><code>USE</code>フラグがセットされた時のみ有効になります。これはGTK+ベースで、X環境で動作し、ナイスな外見をしています。
Gentooでは、このGUIモニタは混乱を避けるため<tt>distccmon-gui</tt>にリネームされています(もともとの名前は<tt>distccmon-gnome</tt>です)。

{{Cmd|distccmon-gui}}

Portageでの<tt>distcc</tt>の使用をモニタするには:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|もしdistccディレクトリが別の場所にあるなら、それに合わせて<code>DISTCC_DIR</code>変数を変えてください。}}

A trick is to set <code>DISTCC_DIR</code> in environment variables:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

ここで、環境を更新します:

{{RootCmd|env-update
|source /etc/profile}}

ようやく、GUIアプリケーションを開始することができます:

{{RootCmd|distccmon-gui}}

=== distccの通信に SSH を使いたい時 ===

Setting up distcc via SSH includes some pitfalls. First, generate an SSH key pair without password setup. Be aware that portage compiles programs as the Portage user (or as root if <code>FEATURES="userpriv"</code> is not set). The home folder of the Portage user is {{Path|/var/tmp/portage/}}, which means the keys need to be stored in {{Path|/var/tmp/portage/.ssh/}}

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Second, create a section for each host in the SSH configuration file:

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Add per-host sections|1=
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName
 
Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
}}

Send the public key to each compilation node:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub UserName@CompilationNode}}

Also make sure that each host is available in the {{Path|known_hosts}} file:

{{RootCmd|ssh-keyscan -t rsa <compilation-node-1> <compilation-node-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Fix the file permissions as follows:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

To set up the hosts <tt>test1</tt> and <tt>test2</tt>, run:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Please note the <tt>@</tt> (@ sign), which specifies ssh hosts for distcc.

Finally, tell <tt>distcc</tt> which SSH binary to use:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
DISTCC_SSH="ssh"
}}

It is not necessary to run the {{Path|distccd}} initscript on the hosts when <tt>distcc</tt> communicates via SSH.

== トラブルシューティング ==

<!-- Consider moving this section to a separate subpage if it becomes too large -->

<tt>distcc</tt> をご使用中に問題が発生したときには、このセクションをお読みになれば問題解決の糸口となるかもしれません。

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- To be removed when the bug is resolved and the fixed package is stable -->

2015年1月22日以降、emergeすると {{Path|/var/log/}} に適切な {{Path|distccd.log}} ファイルを作るのに失敗します。これは、 distcc ver.3.1-r8 のみに起こることが明らかにされています。このバグは現在修正中ですが(参照:{{Bug|477630}})、手作業でそのログファイルを作成し、適切な所有者を設定し、distccデーモンを再起動することで何とかうまく動くようにできます。

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

次に、{{Path|/etc/conf.d/distccd}} 内の <tt>distccd</tt> コンフィグレーション・ファイルの {{Path|/var/log}} パスを 先ほど作成した{{Path|distcc}} ディレクトリに更新してください:

{{FileBox|filename=/etc/conf.d/distccd|title=Updating log path|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

最後に distccd サービスを再起動します。

{{RootCmd|/etc/init.d/distccd restart}}

=== distccをつかえないパッケージもあります ===

As various packages are installed, users will notice that some of them aren't being distributed (and aren't being built in parallel). This may happen because the package' {{Path|Makefile}} doesn't support parallel operations, or the maintainer of the ebuild has explicitly disabled parallel operations due to a known problem. 

Sometimes <tt>distcc</tt> might cause a package to fail to compile. If this happens, please [https://bugs.gentoo.org/ report] it.

=== GCC のバージョンが混在する場合 ===

If the environment hosts different GCC versions, there will likely be very weird problems. The solution is to make certain all hosts have the same GCC version. 

Recent Portage updates have made Portage use <code>${CHOST}-gcc</code> (minus gcc) instead of <code>gcc</code>. This means that if i686 machines are mixed with other types (i386, i586) then the builds will run into troubles. A workaround for this may be to run:

{{RootCmd|export CC{{=}}'gcc' CXX{{=}}'c++'}}

It is also possible to set the <code>CC</code> and <code>CXX</code> variables in {{Path|/etc/portage/make.conf}} to the values list in the command above.

{{Important|Doing this explicitly redefines some behavior of Portage and may have some weird results in the future. Only do this if mixing CHOSTs is unavoidable.}}

=== -march=native ===

Starting with GCC 4.3.0, the compiler supports the <tt>-march=native</tt> option which turns on CPU auto-detection and optimizations that are worth being enabled on the processor on which GCC is running. This creates a problem when using <tt>distcc</tt> because it allows the mixing of code optimized for different processors. For example, running <tt>distcc</tt> with <tt>-march=native</tt> on a system that has an AMD Athlon processor and doing the same on ''another'' system that has an Intel Pentium processor will mix code compiled on both processors together.

Heed the following warning:

{{Warning|<tt>distcc</tt> でコンパイルするときには、{{Path|make.conf}} の <code>CFLAGS</code> 変数または <code>CXXFLAGS</code> 変数で <tt>-march{{=}}native</tt> や <tt>-mtune{{=}}native</tt>を '''使用しないでください'''。}}

<tt>-march=native</tt> を指定したとき、GCCがどのようなフラグを有効にしているのかを知りたいときには、次のコマンドを実行してください:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

== 参考 ==

* The [[Distcc/Cross-Compiling|DistCC Cross-compiling guide]] explains how using one architecture to build programs for another architecture is done through <tt>distcc</tt>. This can be as simple as using an Athlon (i686) to build a program for a K6-2 (i586), or using a SPARC to build a program for a PowerPC.

== 外部の情報 ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <tt>-march=native</tt> for distcc]
* [https://code.google.com/p/distcc/ Distcc homepage]


{{Migrated|originalauthors=Lisa Seelye, Mike Frysinger, Erwin, Sven Vermeulen, Lars Weiler, Tiemo Kieft and nightmorph}}
