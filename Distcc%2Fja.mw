<languages />

{{Metadata|abstract=Distcc は、ネットワーク越しの複数のホストにコンパイル作業を分散させられるようにするためのプログラムです。一つのサーバ（distccd）と一つのクライアントプログラム（distcc）からなっています。また、Distccはちょっとした設定をすれば意識することなく ccache, Portage, Automake などとともにうまくやっていくことができます。}}

{{InfoBox stack
|{{InfoBox homepage|https://code.google.com/p/distcc/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox github|distcc/distcc}}
}}

[https://code.google.com/p/distcc/ Distcc]はネットワーク上のホストで分散コンパイルを行うためのプログラムで、サーバー側である{{c|distccd}}とクライアント側である{{c|distcc}}で構成されています。また[http://ccache.samba.org ccache]、[[Portage]]、Automakeとの連携もちょっとしたセットアップで可能となります。 

Gentooのインストールに{{c|distcc}}を使いたい場合は、[[#Using_distcc_to_bootstrap|Using distcc to bootstrap]]を参照してください。 

== インストール ==

{{c|distcc}}を構築する前に、まずは使用するすべてのホストに{{Package|sys-devel/distcc}} パッケージが導入されているかどうか確認しましょう。

=== 全てのホストで必要なこと ===

{{c|distcc}}を使用するには、ネットワークのすべてのコンピュータのGCCが同じバージョンでなければいけません。例を挙げますと、3.3.x(xは任意の数字)を混在させるのは問題ありませんが、3.3.xと3.2.xを混在させた場合はコンパイルエラーや実行時エラーが起きるかもしれません。 

=== ソフトウェアのインストール ===

Distccには分散コンパイルしているタスクを監視するグラフィカルモニタが付属しています。<code>gtk</code> USEフラグをセットすると、このユーティリティーを使えるようにできます。

USEフラグの設定が終わったら{{Package|sys-devel/distcc}}パッケージをインストールします。

{{Emerge|sys-devel/distcc}}

{{Important|{{Package|sys-devel/distcc}}は分散コンパイルに使う全てのホストにインストールしてください。}}

=== distcc デーモンの自動起動 ===

In order to have {{c|distccd}} started automatically, follow the next set of instructions, depending on the init system used.

==== OpenRC をご使用中の場合 ====

Edit {{Path|/etc/conf.d/distccd}} and make sure to set the <code>--allow</code> directive to allow only trusted clients. For added security, use the <code>--listen</code> directive to tell the {{c|distccd}} daemon what IP to listen on (for multi-homed systems). More information on {{c|distcc}} security can be found at [http://distcc.googlecode.com/svn/trunk/doc/web/security.html Distcc security notes].

The following example allows the distcc clients running at <code>192.168.0.4</code> and <code>192.168.0.5</code> to connect to the {{c|distccd}} server running locally:

{{FileBox|filename=/etc/conf.d/distccd|title=ある特定のクライアントがdistccに接続できるようにする|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distccd.log -N 15 --allow 192.168.0.4 --allow 192.168.0.5"
}}

{{Important|It is important to use <code>--allow</code> and <code>--listen</code>. Please read the {{c|distccd}} man page or the above security document for more information.}}

Now start the {{c|distccd}} daemon on all the participating computers: 

{{RootCmd|rc-update add distccd default
|rc-service distccd start}}

==== systemd をご使用中の場合 ====

{{Path|/etc/systemd/system/distccd.service.d/00gentoo.conf}} を編集して、CIDRフォーマットにて許可するクライアントを追加してください。例をあげますと:

{{FileBox|filename=/etc/systemd/system/distccd.service.d/00gentoo.conf|title=ALLOWED_SERVERS の設定|lang=bash|1=
Environment="ALLOWED_SERVERS=192.168.1.0/24"
}}

{{Note| The name "ALLOWED_SERVERS" here is rather confusing as it refers to the clients that are allowed to connect to the local distccd server. Nevertheless, it is this variable which is used in the distccd service as value for the --allow option – see {{Path|/usr/lib/systemd/system/distccd.service.}}}}

このような変更した後は、ユニット・ファイルをリロードしましょう。

{{RootCmd|systemctl daemon-reload}}

Enable auto-starting {{c|distccd}} and then start the service:

{{RootCmd|systemctl enable distccd
|systemctl start distccd}}

== 設定 ==

Let's now look into the configuration of {{c|distcc}}.

=== 参加するホストを記述する ===

Use the {{c|distcc-config}} command to set the list of hosts. 

The following is an example list of host definitions. In most cases, variants of lines 1 and 2 suffice. The latter uses the <code>/limit</code> syntax to inform {{c|distcc}} about the maximum amount of jobs to be launched on this node. More information about the syntax used in lines 3 and 4 can be found in the [http://distcc.googlecode.com/svn/trunk/doc/web/man/distcc_1.html distcc manual page].

{{CodeBox|title=ホスト定義の例|1=
192.168.0.1          192.168.0.2                       192.168.0.3
192.168.0.1/2        192.168.0.2                       192.168.0.3/10
192.168.0.1:4000/2   192.168.0.2/1                     192.168.0.3:3632/4
@192.168.0.1         @192.168.0.2:/usr/bin/distccd     192.168.0.3
}}

There are also several other methods of setting up hosts.  See the {{c|distcc}} man page ({{c|man distcc}}) for more details.

ローカルマシンでもコンパイル作業をさせたいのなら、ホストのリストに <code>localhost</code> と記入しましょう。逆に、ローカルマシンにコンパイル作業をさせたくない場合には、リストから外しましょう。遅いマシンでlocalhostを設定してると、実際すべてのことが遅くなってしまうでしょう。また、設定したものをテストするのも忘れないでください。

Let's configure {{c|distcc}} to use the hosts mentioned on the first line in the example:

{{RootCmd|/usr/bin/distcc-config --set-hosts "192.168.0.1 192.168.0.2 192.168.0.3"}}

=== Portageでdistccを使用する ===

Setting up [[Portage]] to use {{c|distcc}} is easy. It is a matter of enabling the {{c|distcc}} feature, and setting a decent value for the number of simultaneous build jobs (as {{c|distcc}} increases the amount of build resources).

Set the <var>MAKEOPTS</var> variable and <var>FEATURES</var> variable as shown below.

一般的な戦略としては、
* <code>N</code>の値を「トータルの」(ローカルとリモートの)CPUコアの個数の2倍 + 1に設定し、
* <code>M</code>の値を「ローカルの」CPUコアの個数に設定します。

The use of <code>-lM</code> in the <var>MAKEOPTS</var> variable will prevent spawning too many tasks when some of the {{c|distcc}} cluster hosts are unavailable (increasing the amount of simultaneous jobs on the other systems) or when an ebuild is configured to disallow remote builds (such as with gcc). This is accomplished by refusing to start additional jobs when the system load is at or above the value of <code>M</code>.

{{FileBox|filename=/etc/portage/make.conf|title=MAKEOPTSとFEATURESの設定|lang=bash|1=
# NとMを計算した正しい値に置き換えてください
MAKEOPTS="-jN -lM"
FEATURES="distcc distcc-pump"
}}

For instance, when there are two quad-core host PCs running {{c|distccd}} and the local PC has a dual core CPU, then the <var>MAKEOPTS</var> variable could look like this:

{{FileBox|filename=/etc/portage/make.conf|title=MAKEOPTS example for 2 quad-core (remote) and one dual core (local) PC|lang=bash|1=
# 2 remote hosts with 4 cores each = 8 cores remote
# 1 local host with 2 cores = 2 cores local
# total number of cores is 10, so N = 2*10+1 and M=2
MAKEOPTS="-j21 -l2"
}}

While editing the {{Path|make.conf}} file, make sure that it does not have <code>-march=native</code> in the <var>CFLAGS</var> or <var>CXXFLAGS</var> variables. {{c|distccd}} will not distribute work to other machines if <code>march</code> is set to <code>native</code>. The appropriate <code>-march=</code> value can be obtained by running the following command:

{{Cmd|gcc -v -E -x c -march{{=}}native -mtune{{=}}native - < /dev/null 2>&1 {{!}} grep cc1 {{!}} perl -pe 's/ -mno-\S+//g; s/^.* - //g;'}}

See [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc] for more information.

=== automake で distcc を使用する ===

This is, in some cases, easier than the Portage setup. All that is needed is to update the <var>PATH</var> variable to include {{Path|/usr/lib/distcc/bin/}} in front of the directory that contains {{c|gcc}} ({{Path|/usr/bin/}}). However, there is a caveat. If {{c|ccache}} is used, then put the {{c|distcc}} location after the {{c|ccache}} one: 

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

Put this in the user's {{Path|~/.bashrc}} or equivalent file to have the <var>PATH</var> set every time the user logs in, or set it globally through an {{Path|/etc/env.d/}} file.

Instead of calling {{c|make}} alone, add in <code>-jN</code> (where <code>N</code> is an integer). The value of <code>N</code> depends on the network and the types of computers that are used to compile. A heuristic approach to the right value is given earlier in this article.

== ブートストラップにdistccを使う ==

Using {{c|distcc}} to bootstrap (i.e. build a working toolchain before installing the remainder of the system) requires some additional steps to take.

=== Step 1: Portage の設定 ===

Boot the new box with a Gentoo Linux LiveCD and follow the [[Handbook:AMD64|installation instructions]], while keeping track of the instructions in the [[FAQ|Gentoo FAQ]] for information about bootstrapping. Then configure Portage to use {{c|distcc}}: 

{{FileBox|filename=/etc/portage/make.conf|title=Configure Portage to use distcc|lang=bash|1=
FEATURES="distcc"
MAKEOPTS="-jN"
}}

Update the <code>PATH</code> variable in the installation session as well:

{{RootCmd|export PATH{{=}}"/usr/lib/ccache/bin:/usr/lib/distcc/bin:${PATH}"}}

=== Step 2: distcc をゲット ===

Install {{Package|sys-devel/distcc}}: 

{{RootCmd|USE{{=}}'-*' emerge --nodeps sys-devel/distcc}}

=== Step 3: distcc のセッティング ===

Run {{c|distcc-config --install}} to setup distcc; substitute the <code>host#</code> in the example with the IP addresses or hostnames of the participating nodes.

{{RootCmd|/usr/bin/distcc-config --set-hosts "localhost host1 host2 host3 ..."}}

Distcc is now set up to bootstrap! Continue with the proper installation instructions and do ''not'' forget to run {{c|emerge distcc}} after running {{c|emerge @system}}. This is to make sure that all of the necessary dependencies are installed. 

{{Note|During bootstrap and {{c|emerge @system}} {{c|distcc}} may not appear to be used. This is expected as some ebuilds do not work well with distcc, so they intentionally disable it.}}

== Distcc に付属するツール群 ==

The {{c|distcc}} application has additional features and applications to support working in a {{c|distcc}} environment.

=== Distcc の監視 === 

Distcc ships with two monitoring utilities. The text-based monitoring utility is always built and is called {{c|distccmon-text}}. Running it for the first time can be a bit confusing, but it is really quite easy to use. If the program is run with no parameter it will run just once. However, if it is passed a number it will update every <code>N</code> seconds, where <code>N</code> is the argument that was passed.

{{Cmd|distccmon-text 10}}

The other monitoring utility is only enabled when the <code>gtk</code> USE flag is set. This one is GTK+ based, runs in an X environment, and it is quite lovely. For Gentoo, the GUI monitor has been renamed to {{c|distccmon-gui}} to make it less confusing (it is originally called {{c|distccmon-gnome}}).

{{Cmd|distccmon-gui}}

To monitor Portage's {{c|distcc}} usage:

{{RootCmd|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-text 10
|DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/" distccmon-gui}}

{{Important|If the distcc directory is elsewhere, change the <var>DISTCC_DIR</var> variable accordingly.}}

A trick is to set <var>DISTCC_DIR</var> in environment variables:

{{RootCmd|echo 'DISTCC_DIR{{=}}"/var/tmp/portage/.distcc/"' >> /etc/env.d/02distcc}}

ここで、環境を更新します:

{{RootCmd|env-update
|source /etc/profile}}

ようやく、GUIアプリケーションを開始することができます:

{{RootCmd|distccmon-gui}}

=== distccの通信に SSH を使いたい時 ===

Setting up distcc via SSH includes some pitfalls. First, generate an SSH key pair without password setup. Be aware that portage compiles programs as the Portage user (or as root if <code>FEATURES="userpriv"</code> is not set). The home folder of the Portage user is {{Path|/var/tmp/portage/}}, which means the keys need to be stored in {{Path|/var/tmp/portage/.ssh/}}

{{RootCmd|ssh-keygen -b 2048 -t rsa -f /var/tmp/portage/.ssh/id_rsa}}

Second, create a section for each host in the SSH configuration file:

{{FileBox|filename=/var/tmp/portage/.ssh/config|title=Add per-host sections|1=
Host test1
    HostName 123.456.789.1
    Port 1234
    User UserName
 
Host test2
    HostName 123.456.789.2
    Port 1234
    User UserName
}}

Send the public key to each compilation node:

{{RootCmd|ssh-copy-id -i /var/tmp/portage/.ssh/id_rsa.pub UserName@CompilationNode}}

Also make sure that each host is available in the {{Path|known_hosts}} file:

{{RootCmd|ssh-keyscan -t rsa <compilation-node-1> <compilation-node-2> [...] > /var/tmp/portage/.ssh/known_hosts}}

Fix the file ownership as follows:

{{RootCmd|chown -R portage:portage /var/tmp/portage/.ssh/}}

To set up the hosts <code>test1</code> and <code>test2</code>, run:

{{RootCmd|/usr/bin/distcc-config --set-hosts "@test1 @test2"}}

Please note the <code>@</code> (@ sign), which specifies ssh hosts for distcc.

Finally, tell {{c|distcc}} which SSH binary to use:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
DISTCC_SSH="ssh"
}}

It is not necessary to run the {{Path|distccd}} initscript on the hosts when {{c|distcc}} communicates via SSH.

== トラブルシューティング ==

<!-- Consider moving this section to a separate subpage if it becomes too large -->

If a problem occurs while using {{c|distcc}}, then this section might help in resolving the problem.

=== ERROR: failed to open {{Path|/var/log/distccd.log}} ===

<!-- To be removed when the bug is resolved and the fixed package is stable -->

2015年1月22日以降、emergeすると {{Path|/var/log/}} に適切な {{Path|distccd.log}} ファイルを作るのに失敗します。これは、 distcc ver.3.1-r8 のみに起こることが明らかにされています。このバグは現在修正中ですが(参照:{{Bug|477630}})、手作業でそのログファイルを作成し、適切な所有者を設定し、distccデーモンを再起動することで何とかうまく動くようにできます。

{{RootCmd
|mkdir -p /var/log/distcc
|touch /var/log/distcc/distccd.log
|chown distcc:daemon /var/log/distcc/distccd.log
}}

Next update the {{Path|/var/log}} path of the {{c|distccd}} configuration file in {{Path|/etc/conf.d/distccd}} to the {{Path|distcc}} directory created in the step before:

{{FileBox|filename=/etc/conf.d/distccd|title=Updating log path|lang=bash|1=
DISTCCD_OPTS="--port 3632 --log-level notice --log-file /var/log/distcc/distccd.log -N 15 
}}

最後に distccd サービスを再起動します。

{{RootCmd|/etc/init.d/distccd restart}}

=== distccをつかえないパッケージもあります ===

As various packages are installed, users will notice that some of them aren't being distributed (and aren't being built in parallel). This may happen because the package' {{Path|Makefile}} doesn't support parallel operations, or the maintainer of the ebuild has explicitly disabled parallel operations due to a known problem. 

Sometimes {{c|distcc}} might cause a package to fail to compile. If this happens, please [https://bugs.gentoo.org/ report] it.

=== GCC のバージョンが混在する場合 ===

If the environment hosts different GCC versions, there will likely be very weird problems. The solution is to make certain all hosts have the same GCC version. 

Recent Portage updates have made Portage use <code>${CHOST}-gcc</code> (minus gcc) instead of <code>gcc</code>. This means that if i686 machines are mixed with other types (i386, i586) then the builds will run into troubles. A workaround for this may be to run:

{{RootCmd|export CC{{=}}'gcc' CXX{{=}}'c++'}}

It is also possible to set the <var>CC</var> and <var>CXX</var> variables in {{Path|/etc/portage/make.conf}} to the values list in the command above.

{{Important|Doing this explicitly redefines some behavior of Portage and may have some weird results in the future. Only do this if mixing CHOSTs is unavoidable.}}

=== -march=native ===

Starting with GCC 4.3.0, the compiler supports the <code>-march=native</code> option which turns on CPU auto-detection and optimizations that are worth being enabled on the processor on which GCC is running. This creates a problem when using {{c|distcc}} because it allows the mixing of code optimized for different processors. For example, running {{c|distcc}} with <code>-march=native</code> on a system that has an AMD Athlon processor and doing the same on ''another'' system that has an Intel Pentium processor will mix code compiled on both processors together.

Heed the following warning:

{{Warning|Do '''not''' use <code>-march{{=}}native</code> or <code>-mtune{{=}}native</code> in the <var>CFLAGS</var> or <var>CXXFLAGS</var> variables of {{Path|make.conf}} when compiling with {{c|distcc}}.}}

To know the flags that GCC would enable when called with <code>-march=native</code>, execute the following:

{{Cmd|gcc -march{{=}}native -E -v - &lt;/dev/null 2&gt;&amp;1 {{!}} grep cc1|output=<pre>
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.7.3/cc1 -E -quiet -v - -march=corei7-avx \
  -mcx16 -msahf -mno-movbe -mno-aes -mpclmul -mpopcnt -mno-abm -mno-lwp -mno-fma \
  -mno-fma4 -mno-xop -mno-bmi -mno-bmi2 -mno-tbm -mavx -mno-avx2 -msse4.2 -msse4.1 \
  -mno-lzcnt -mno-rdrnd -mno-f16c -mno-fsgsbase --param l1-cache-size=32 \
  --param l1-cache-line-size=64 --param l2-cache-size=6144 -mtune=corei7-avx
</pre>}}

== 参考 ==

* The [[Distcc/Cross-Compiling|DistCC Cross-compiling guide]] explains how using one architecture to build programs for another architecture is done through {{c|distcc}}. This can be as simple as using an Athlon (i686) to build a program for a K6-2 (i586), or using a SPARC to build a program for a PowerPC.

== 外部の情報 ==

* [http://blogs.gentoo.org/mgorny/2014/06/23/inlining-marchnative-for-distcc/ Inlining <code>-march=native</code> for distcc]
* [https://github.com/distcc/distcc Distcc homepage]

{{Migrated|originalauthors=Lisa Seelye, Mike Frysinger, Erwin, Sven Vermeulen, Lars Weiler, Tiemo Kieft and nightmorph}}
