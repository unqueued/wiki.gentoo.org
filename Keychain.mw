<languages />
<translate>

<!--T:60-->
{{Metadata|abstract=This document describes how to use SSH shared keys along with the keychain program. It assumes basic knowledge of public key cryptography.}}

<!--T:1-->
This document describes how to use SSH shared keys along with the keychain program. It assumes basic knowledge of public key cryptography.

== Background == <!--T:2-->

=== The problem at hand === <!--T:3-->

<!--T:4-->
So you have all of these lovely Gentoo machines running <code>sshd</code>, but it's a little inconvenient for you to keep typing in all of those login passwords, right? Or maybe you have a script or cron-job that needs a convenient way to use an ssh connection. Either way, there is a solution to this problem, and it begins with public key authentication. 

=== How does public key authentication work? === <!--T:5-->

<!--T:6-->
Assume we have a client that wants to connect to sshd on a server. The client first generates a key pair and gives the public key to the server. Afterwards, whenever the client attempts to connect, the server sends a challenge that is encrypted with that public key. Only the holder of the corresponding private key (the client) is able to decrypt it, so as you might have guessed, the correct response leads to successful authentication. 

== How to use public key authentication == <!--T:7-->

=== Generating your key pair === <!--T:8-->

<!--T:9-->
The first step is to create your key pair. To do this, we will use the <code>ssh-keygen</code> command as follows: 

<!--T:10-->
{{Cmd|ssh-keygen}}

<!--T:11-->
Just accept the default values, and make sure to enter a strong passphrase.

<!--T:12-->
{{Warning|Be sure to choose a strong passphrase, especially if this key is used for root logons!}}

<!--T:13-->
You should now have a private key in {{Path|~/.ssh/id_rsa}} and a public key in {{Path|~/.ssh/id_rsa.pub}} . We are ready to copy the public key over to the remote host.

=== Preparing the server === <!--T:14-->

<!--T:15-->
We will be copying the {{Path|~/.ssh/id_rsa.pub}} file over to the server that runs sshd. We will also be adding it to the {{Path|~/.ssh/authorized_keys}} file that belongs the connecting user on that server. Here's an example of how to do that if you already have ssh access to the server. 

<!--T:16-->
{{Cmd|scp ~/.ssh/id_rsa.pub server_user@server:~/myhost.pub
|ssh server_user@server "cat ~/myhost.pub &gt;&gt; ~/.ssh/authorized_keys"
|ssh server_user@server "cat ~/.ssh/authorized_keys"}}

<!--T:17-->
The output from that last line should show you the contents of the {{Path|~/.ssh/authorized_keys}} file. Make sure it looks correct. 

=== Testing the setup === <!--T:18-->

<!--T:19-->
Theoretically, if all went well, and the ssh daemon on the server allows it, we should be able to get ssh access without a password on the server now. We will still need to decrypt the private key on the client with the passphrase we used before, but this should not be confused with the passphrase of the user account on the server. 

<!--T:20-->
{{Cmd|ssh server_user@server}}

<!--T:21-->
Hopefully, it asked you for your passphrase for id_rsa, and you were able to gain ssh access as server_user on the server. If not, login as server_user, and verify the contents of {{Path|~/.ssh/authorized_keys}} to make sure each entry is on a single line. You might also want to check the sshd configuration to make sure that it prefers to use public key authorization when available. 

<!--T:22-->
At this point, you're probably thinking, "What's the point, I just replaced one password with another?!" Relax, the next section will show you exactly how we can use this to save your precious time. 

== Making public key authentication convenient == <!--T:23-->

=== Typical key management with ssh-agent === <!--T:24-->

<!--T:25-->
If you've been following along, you're probably thinking that it would be great if we could somehow decrypt our private key(s) once, and gain the ability to ssh freely, without any passwords. You are in luck, that is exactly what the program <code>ssh-agent</code> is for. 

<!--T:26-->
The program <code>ssh-agent</code> is usually started at the beginning of your X session, or from a shell startup script like {{Path|~/.bash_profile}} . It works by creating a unix-socket, and registering the appropriate environment variables so that all subsequent applications can take advantage of it's services by connecting to that socket. Clearly, it only makes sense to start it in the parent process of your X session if you want to use the set of decrypted private keys in all subsequent X applications. 

<!--T:27-->
{{Cmd|eval `ssh-agent`}}

<!--T:28-->
{{Note|This ssh-agent will keep keys decrypted until you kill ssh-agent. If you want to set a lifetime for the keys, use the -t argument as described in <code>man ssh-agent</code> .}}

<!--T:29-->
When you run ssh-agent, it should tell you the PID of the running ssh-agent, and also set a few environment variables, namely <code>SSH_AUTH_SOCK</code> and <code>SSH_AGENT_PID</code> . It should also automatically add {{Path|~/.ssh/id_rsa}} to it's collection and ask you for the corresponding passphrase. If you have other private keys you want to add to the running ssh-agent, you can use the <code>ssh-add</code> command as follows: 

<!--T:30-->
{{Cmd|ssh-add somekeyfile}}

<!--T:31-->
Now for the magic. Since you should now have your decrypted private key ready, you should be able to ssh into the server without entering any passwords. 

<!--T:32-->
{{Cmd|ssh server}}

<!--T:33-->
It would be nice to know how to shut down ssh-agent in case you need to, right? 

<!--T:34-->
{{Cmd|ssh-agent -k}}

<!--T:35-->
{{Note|If you had problems getting ssh-agent to work, it might still be running. You can kill it like any other process by running <code>killall ssh-agent</code> .}}

<!--T:36-->
If you want even more convenience from ssh-agent, proceed to the next section on using keychain. Be sure to kill the running ssh-agent as in the example above if you decide to do so.

=== Squeezing the last drop of convenience out of ssh-agent === <!--T:37-->

<!--T:38-->
Keychain will allow you to reuse an ssh-agent between logins, and optionally prompt for passphrases each time the user logs in. Before we get ahead of ourselves though, let's emerge it first. 

<!--T:39-->
{{Emerge|keychain}}

<!--T:40-->
Assuming that was successful, we can now use keychain freely. Add the following to your {{Path|~/.bash_profile}} to enable it: 

<!--T:41-->
{{CodeBox|title=Enabling keychain in .bash_profile|<pre>
keychain ~/.ssh/id_rsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>
}}

<!--T:42-->
{{Note|You can add more private keys to the command line as you desire. Also, if you want it to ask for passphrases each time you spawn a shell, add the --clear option.}}

<!--T:43-->
{{Note|If you are not using bash, check the '''EXAMPLES''' section of <code>man keychain</code> for examples of use in other shells. The idea is to get those commands to run each time you use a shell.}}

<!--T:44-->
Let's test it. First make sure we killed the ssh-agent from the previous section, then start up a new shell, usually by just logging in, or spawning a new terminal. It should prompt you for the password for each key you specified on the command line. All shells opened after that point should reuse the ssh-agent, allowing you to make passwordless ssh connections over and over. 

=== Using keychain with KDE === <!--T:45-->

<!--T:46-->
If you are a KDE user, instead of using {{Path|~/.bash_profile}} , you can let KDE manage ssh-agent for you. In order to do so, you will have to edit {{Path|/etc/kde/startup/agent-startup.sh}} , which is read during KDE's startup, and {{Path|/etc/kde/shutdown/agent-shutdown.sh}} , which is executed during KDE's shutdown. Here is how you could edit those files: 

<!--T:47-->
{{CodeBox|title=Editing /etc/kde/startup/agent-startup.sh|1=
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
}}

<!--T:48-->
{{CodeBox|title=Editing /etc/kde/shutdown/agent-shutdown.sh|1=
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi}}

<!--T:49-->
Now, all you have to do is launch a term of your choice, like Konsole, and load the keys you would like to use. For example: 

<!--T:50-->
{{Cmd|keychain ~/.ssh/id_rsa}}

<!--T:51-->
Your keys will be remembered until you end your KDE session or kill the ssh-agent manually.

== Concluding remarks == <!--T:52-->

=== Security considerations === <!--T:53-->

<!--T:54-->
Of course, the use of ssh-agent may add a bit of insecurity to your system. If another user were to use your shell while you were in the bathroom, he could login to all of your servers without passwords. As a result, it is a risk to the servers you are connecting to, and you should be sure to consult the local security policy. If you do use it, be sure to take the appropriate measures to ensure the security of your sessions. 

=== Troubleshooting === <!--T:55-->

<!--T:56-->
Most of this should work pretty well, but if you encounter problems, you'll certainly want to know a few useful things. 

<!--T:57-->
* If you are unable to connect without ssh-agent, consider using ssh with the arguments -vvv to find out what's happening. Sometimes the server is not configured to use public key authentication, sometimes it is configured to ask for local passwords anyway! If that is the case, you may want to also use the -o option with ssh, or change the server sshd_config.
* If you are having problems with ssh-agent or keychain, it may be that you are not using a shell that understands the commands they use. Consult the man pages for ssh-agent and keychain for details on working with other shells.
* You may also want to visit the [http://www.funtoo.org/Keychain homepage] for more usage tips.
</translate>

[[Category:Server and Security]] {{Migrated|originalauthors=Eric Brown, Marcelo Goes, nightmorph}}
