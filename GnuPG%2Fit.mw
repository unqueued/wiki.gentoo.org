<languages />

{{Dated|date=March 3rd, 2015}}
{{InfoBox stack
|{{InfoBox homepage|https://gnupg.org/|header=true}}
|{{InfoBox wikipedia|GNU_Privacy_Guard|text=Wikipedia}}
|{{InfoBox odoc|https://www.gnupg.org/documentation/index.html}}
|{{InfoBox gitweb|https://git.gnupg.org/cgi-bin/gitweb.cgi|raw=true}}
}}

<div class="mw-translate-fuzzy">
{{Metadata|abstract=Questa breve guide vi insegnerà l'utilizzo base di GnuPG, un tool per mettere in sicurezza le comunicazioni.}}
</div>

<div class="mw-translate-fuzzy">
Questa breve guide vi insegnerà l'utilizzo base di GnuPG, un tool per mettere in sicurezza le comunicazioni.
</div>

== Introduzione ==

<div class="mw-translate-fuzzy">
=== Cosa troverete in questa guida ===
</div>

<div class="mw-translate-fuzzy">
Questa guida assume che siate familiari con la crittografia a chiave pubblica, la crittazione e la firma digitale. Se così non fosse consultate il [http://www.gnupg.org/documentation/guides.html GnuPG handbook], capitolo 2, poi tornate.
</div> 

<div class="mw-translate-fuzzy">
Questa guida vi insegnerà come installare GnuPG, come creare la vostra coppia di chiavi, come aggiungere chiavi al vostro portachiavi (keyring), come inviare la vostra chiave pubblica ad un key server e come firmare, cifrare, verificare o decodificare messaggi che mandate o ricevete. Imparerete anche come cifrare files sul vostro computer locale per prevenirne la lettura del contenuto.
</div>

== Installazione ==

=== USE flags ===

{{USEflag|package=app-crypt/gnupg}}

=== Emerge ===

{{Emerge|app-crypt/gnupg}}

== Altre applicazioni ==

<div class="mw-translate-fuzzy">
Ad un livello molto "base" dovrete lanciare <code>emerge gnupg</code>. Molte applicazioni oggi hanno il supporto per gpg, quindi avere "crypt" nella vostra variabile USE è probabilmente una buona idea. Se volete un client mail capace di utilizzare gnupg potete utilizzare pine ( <code>emerge pinepgp</code> ), mutt ( <code>emerge mutt</code> ), Mozilla Thunderbird ( <code>emerge thunderbird</code> ), evolution (evolution è una sorta di Microsoft Outlook di GNOME) ed KMail di KDE.
</div>

== Utilizzo ==

<div class="mw-translate-fuzzy">
== Generare la vostra chiave ed aggiungerla al keyring pubblico ==
</div>

<div class="mw-translate-fuzzy">
=== Creare la vostra chiave ===
</div>

<div class="mw-translate-fuzzy">
Per creare la vostra, basta lanciare <code>gpg --gen-key</code> . La prima volta che viene lanciato, creerà alcune directory; lanciarlo ancora creerà le chiavi:
</div> 

<div class="mw-translate-fuzzy">
{{Cmd|gpg --gen-key|output=<pre>
gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Per favore scegli che tipo di chiave vuoi:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (firma solo)
   (4) RSA (firma solo)
Cosa scegli?
</pre>
}}
</div>

<div class="mw-translate-fuzzy">
Qui potete scegliere il tipo di chiave che volete utilizzare. La maggioranza degli utenti opta per il default RSA and RSA. Scegliete poi la lunghezza della chiave - ricordate che più grande è meglio è, ma non utilizzate una dimensione maggiore di 2048 con chiavi DSA/ElGamal. Generalmente 2048 è più che sufficiente per normali email.
</div>

Gli sviluppatori di Gentoo (specialmente quelli che lavorano sulle ebuilds) sono incoraggiati a usare chavi di 4096 bits.

<div class="mw-translate-fuzzy">
Dopo la dimensione è necessaria la data di scadenza. Qui più piccola è meglio, ma molti utenti possono utilizzare una chiave senza scadenza o con limite a 2 o 3 anni.
</div>

<div class="mw-translate-fuzzy">
{{Code|Choosing key size|<pre>
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 
La dimensione richiesta della chiave è 2048 bit
Per favore specifica per quanto tempo la chiave sarà valida.
         0 = la chiave non scadrà
      <n>  = la chiave scadrà dopo n giorni
      <n>w = la chiave scadrà dopo n settimane
      <n>m = la chiave scadrà dopo n mesi
      <n>y = la chiave scadrà dopo n anni
Chiave valida per? (0) 
Key does not expire at all
Is this correct? (y/N) y
</pre>
}}
</div>

<div class="mw-translate-fuzzy">
Ora vi verranno richieste alcune informazioni personali. Se volete mandare la chiave pubblica ad altre persone dovrete usare il vostro indirizzo email reale.
</div> 

<div class="mw-translate-fuzzy">
{{Code|Entering user information|<pre>
Is this correct (y/n)? y

GnuPG needs to construct a user ID to identify your key.

Nome e Cognome: GnuPG needs to construct a user ID to identify your key.

Nome e Cognome: John Doe
Indirizzo di Email: john@nowhere.someplace.flick
Commento: The Real John Doe    
Hai selezionato questo User Id:
    "John Doe (The Real John Doe) <john@nowhere.someplace.flick>"

Modifica (N)ome, (C)ommento, (E)mail oppure (O)kay/(Q)uit? O
Ti serve una passphrase per proteggere la tua chiave segreta.

</pre>
}}
</div>

<div class="mw-translate-fuzzy">
Ora inserite 2 volte la passphrase per la vostra chiave. E'una buona idea utilizzare una password complessa. Se qualcuno ottenesse la vostra chiave privata e ne craccasse la password, potrebbe mandare messaggi firmati da "voi", facendo credere a chiunque che le mail siano veramente mandate voi.
</div>

<div class="mw-translate-fuzzy">
Ora, GnuPG genererà la vostra chiave. Muovere il mouse o avere un mp3 in riproduzione in background velocizzerà il processo, aiutando la generazione di numeri casuali.
</div>

<div class="mw-translate-fuzzy">
=== Generare un certificato di revoca ===
</div>

<div class="mw-translate-fuzzy">
{{Important/it|Questa parte è molto importante e dovete farla ''ORA'' .}}
</div>

<div class="mw-translate-fuzzy">
Dopo aver creato le chiavi, dovreste creare un certificato di revoca. In questo modo potrete revocare la vostra chiave in caso le accada qualcosa (qualcuno ottenga la chiave/passphrase)
</div> 

<div class="mw-translate-fuzzy">
{{Cmd|gpg --list-keys|output=<pre>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 John Doe (The Real John Doe) <john@nowhere.someplace.flick>
sub  2048g/96D6CDAD 2002-12-08
</pre>}}
</div>

<div class="mw-translate-fuzzy">
{{Cmd|gpg --output revoke.asc --gen-revoke 75447B14|output=<pre>
sec  1024D/75447B14 2002-12-08   John Doe (The Real John Doe) <john@nowhere.someplace.flick>
  
Create a revocation certificate for this key? (y/N) y
Per favore scegli il motivo della revoca:
  0 = Nessuna ragione specificata
  1 = Questa chiave è stata compromessa
  2 = Questa chiave è stata sostituita
  3 = La chiave non è più usata
  Q = Cancella
(Probabilmente volevi scegliere 1)
Cosa hai deciso? 1
Inserisci una descrizione opzionale; terminala con una riga vuota:
> Qualcuno mi ha craccato ed ha la mia password
Motivo della revoca: Questa chiave è stata compromessa
Qualcuno mi ha craccato ed ha la mia password
Is this okay? (y/N) y

You need a passphrase to unlock the secret key for
user: "John Doe (The Real John Doe) <john@nowhere.someplace.flick>"
1024-bit DSA key, ID 75447B14, created 2002-12-08
  
Creato un certificato di revoca.

Per favore spostalo su un media che puoi nascondere; se l'uomo nel mezzo
riuscirà ad accedere a questo certificato potrà usarlo per rendere
inutilizzabile la tua chiave. È una buona idea stamparlo ed archiviarlo,
nel caso il media diventasse illeggibile. Ma fai attenzione: il sistema di
stampa della tua macchina potrebbe immagazzinare i dati e renderli disponibili
ad altri!

</pre>
}}
</div>

{{c|gpg --list-keys}} lists the keys in the public keyring. It may be used to see the ID of the key so that a revocation certificate can be created. It is a good idea to copy the entire {{Path|.gnupg}} directory and the revocation certificate (ASCII armored - {{Path|revoke.asc}}) to a secure medium (a CD-R or a USB drive stored in a safe location). Remember that the {{Path|revoke.asc}} file can be used to revoke the keys and make them unusable in the future. 

{{Note|If a user has several email addresses they would like to use with the key, the user can run {{c|gpg --edit-key <nowiki><USER_ID></nowiki>}} then use the {{c|adduid}} command. It will ask the user for the name, email, and comment of the second ID to be used.}}

==== Exporting keys ====

To export a key, run {{c|gpg --armor --output larry.asc --export larry@gentoo.org}}. You can almost always use the key ID or something that identifies the key (in this example an email address was used). Larry now has a {{Path|larry.asc}} that he can send his friends, or place on his web page so that others can safely communicate with him. 

==== Importing keys ====

To add keys to a public keyring the following steps should be taken:
# Import the key;
# Check the key fingerprint;
# After verifying the key fingerprint, validate it.

{{Note|Be careful when verifying keys. This is one of the weak points of public key cryptography.}}

Now we will be adding Luis Pinto's (a friend of mine) public key to our public keyring. After giving him a call and asking him for his key fingerprint, I compare the fingerprint with the output of the {{c|fpr}} command. As the key is authentic, I add it to the public keyring. In this particular case, Luis's key will expire in 2003-12-01 so I am asked if I want my signature on his key to expire at the same time. 

{{Cmd|gpg --import luis.asc|output=<pre>
gpg: key 462405BB: public key imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>}}

{{Cmd|gpg --list-keys|output=<pre>
/home/humpback/.gnupg/pubring.gpg
---------------------------------
pub  1024D/75447B14 2002-12-08 Larry the cow (Gentoo's own) <larry@gentoo.org>
sub  2048g/96D6CDAD 2002-12-08
  
pub  1024D/462405BB 2002-12-01 Luis Pinto <lmpinto@student.dei.uc.pt>
uid                            Luis Pinto <lmpinto@dei.uc.pt>
sub  4096g/922175B3 2002-12-01 [expires: 2003-12-01]
</pre>}}

{{Cmd|gpg --edit-key lmpinto@dei.uc.pt|output=<pre>
gpg (GnuPG) 1.0.7; Copyright (C) 2002 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.
  
gpg: checking the trustdb
gpg: checking at depth 0 signed=0 ot(-/q/n/m/f/u)=0/0/0/0/0/1
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
sub  4096g/922175B3  created: 2002-12-01 expires: 2003-12-01
(1)  Luis Pinto <lmpinto@dei.uc.pt>
(2). Luis Pinto <lmpinto@student.dei.uc.pt>
</pre>}}

{{Cmd|fpr|prompt=Command> |output=<pre>
pub  1024D/462405BB 2002-12-01 Luis Pinto <lmpinto@dei.uc.pt>
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
</pre>}}

{{Cmd|sign|prompt=Command> |output=<pre>
Really sign all user IDs? y
                           
pub  1024D/462405BB  created: 2002-12-01 expires: 2003-12-01 trust: -/-
             Fingerprint: F056 3697 ADE3 CF98 B80B  8494 0AD3 E57B 4624 05BB
  
     Luis Pinto <lmpinto@dei.uc.pt>
     Luis Pinto <lmpinto@student.dei.uc.pt>
  
This key is due to expire on 2003-12-01.
Do you want your signature to expire at the same time? (Y/n) Y
How carefully have you verified the key you are about to sign actually belongs
to the person named above?  If you don't know what to answer, enter "0".
  
   (0) I will not answer. (default)
   (1) I have not checked at all.
   (2) I have done casual checking.
   (3) I have done very careful checking.
  
   Your selection? 3
Are you really sure that you want to sign this key
with your key: "Larry the cow (Gentoo's own) <larry@gentoo.org>"
  
I have checked this key very carefully.
  
Really sign? y
              
You need a passphrase to unlock the secret key for
user: "Larry the cow (Gentoo's own) <larry@gentoo.org>"
1024-bit DSA key, ID 75447B14, created 2002-12-08
</pre>}}

{{Cmd|check|prompt=Command> |output=<pre>
uid  Luis Pinto <lmpinto@dei.uc.pt>
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   Larry the cow (Gentoo's own) <larry@gentoo.org>
uid  Luis Pinto <lmpinto@student.dei.uc.pt>
sig!3       462405BB 2002-12-01   [self-signature]
sig!3       75447B14 2002-12-08   Larry the cow (Gentoo's own) <larry@gentoo.org>
</pre>
}}

=== Exchanging keys with key servers ===

==== Sending keys to key servers ====

Now that a key has been generated, it is probably a good idea to send it to a world key server. There are a lot of key servers in the world and most of them exchange keys. In this next example Larry the cow's key will be sent to the keys.gnupg.net server. Sending keys uses HTTP, so if a proxy is used for HTTP traffic do not forget to set it accordingly ({{c|export http_proxy{{=}}<nowiki>http://proxy_host:port/</nowiki>}}). The command for sending the key is:

{{Cmd|gpg --keyserver keys.gnupg.net --keyserver-options honor-http-proxy --send-key 75447B14}}

Where ''75447B14'' is the ID of the key you would like to send. If a HTTP proxy is not needed then the <code>--keyserver-options honor-http-proxy</code> option can be removed. 

Sending other people's keys that Larry has signed signed to the key server is also a good idea. We could send Luis Pinto's key to the key server. This way someone who trusts Larry's key can use the signature that he has placed there to trust Luis's key.

==== Getting keys from key servers ====

Now we are going to search for Gustavo Felisberto's (the author of this guide :)) key and add it to the keyring of Larry the cow.

{{Cmd|gpg --keyserver keys.gnupg.net --keyserver-options honor-http-proxy --search-keys humpback@felisberto.net|output=<pre>
gpg: searching for "humpback@felisberto.net" from hkp server keys.gnupg.net
(1)	Gustavo Felisberto <humpback@gmail.com>
	Gustavo Felisberto <humpback@gentoo.org>
	Gustavo Felisberto <humpback@gentoopt.org>
	Gustavo Felisberto <gustavo@felisberto.net>
	Gustavo Felisberto <humpback@gentoo-pt.org>
	Gustavo Felisberto <humpback@felisberto.net>
	Gustavo Felisberto <gustavo@student.dei.uc.pt>
	Gustavo Felisberto <humpback@student.dec.uc.pt>
	Gustavo Felisberto (apt-get install anarchy) <humpback@felisberto.net>
	  1024 bit DSA key B9F2D52A, created: 2002-12-06
(2)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key 26471D8F, created: 2001-09-05
(3)	Gustavo Felisberto <humpback@altavista.net>
	  1024 bit DSA key E97E0B46, created: 1999-08-04, expires: 2000-08-04 (expired)
(4)	Gustavo A.S.R. Felisberto <humpback@altavista.net>
	  1024 bit DSA key B59AB043, created: 1998-12-10
(5)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key 39EB133D, created: 1998-08-27
(6)	Gustavo Adolfo Silva Ribeiro Felisberto <humpback@altavista.net>
	  1024 bit DSA key AE02AF87, created: 1998-06-15
Enter number(s), N)ext, or Q)uit > 1
gpg: requesting key B9F2D52A from hkp server keys.gnupg.net
gpg: key B9F2D52A: public key "Gustavo Felisberto <humpback@felisberto.net>" imported
gpg: 3 marginal(s) needed, 1 complete(s) needed, classic trust model
gpg: depth: 0  valid:   4  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 4u
gpg: next trustdb check due at 2015-06-28
gpg: Total number processed: 1
gpg:               imported: 1
</pre>
}}

From the server response it is possible to see few keys have been submitted to the key server, however only <code>B9F2D52A</code> is used. Now Larry the cow can get the key and sign it if he trusts it.

=== Using a GPG agent ===

==== What is a GPG agent? ====

Sometimes working with certain applications requires the frequent use of a GPG key, which means that a passphrase must be frequently entered. In the past many applications supported a passphrase caching mechanism. This would make life easier for users because passphrases were automatically entered. However, this disallowed sharing this cache across programs (how secure would that be?) and forced applications to reinvent the wheel over and over again.

A GPG agent is a separate application that GPG uses to cache the passphrase in a standard and secure way. It allows applications to use GPG concurrently: if the passphrase is entered while working in one application, the other application can work with GPG without needing to unlock the key again — if the GPG Agent is configured to allow this, of course. 

Gentoo provides a few GPG agent applications. The {{Package|app-crypt/gnupg}} package contains what could be considered the reference one, and will be the primary choice used in this article.

==== Configuring gpg-agent and pinentry ====

GnuPG includes {{c|gpg-agent}}. Pinentry ({{Package|app-crypt/pinentry}}) is a helper application that {{c|gpg-agent}} uses to request the passphrase in a graphical window. It comes in many flavors including gtk2 and 3, qt5, tty and curses. It is recommended to always build the ncurses version. Set USE flags accordingly. 

If {{Package|app-crypt/pinentry}} was installed with more than one popup window type, it is possible to choose between the windows with the {{c|eselect pinentry}} command: 

{{RootCmd|eselect pinentry list|output=
<pre>
Available pinentry binary implementations:
  [1]   pinentry-gnome3 *
  [2]   pinentry-gtk-2
  [3]   pinentry-curses
  [4]   pinentry-tty
</pre>
}}

{{RootCmd|eselect pinentry set pinentry-curses}}

Eselect will change the symlink of {{Path|/usr/bin/pinentry}} to the appropriate pinentry helper. Now create a file called {{Path|~/.gnupg/gpg-agent.conf}} and add the following lines to define the default timeout of the passphrase (e.g. 30 minutes) and the application to be called when the passphrase needs to be retrieved (e.g. the GTK+ version of Pinentry). 

{{FileBox|filename=~/.gnupg/gpg-agent.conf|
pinentry-program /usr/bin/pinentry
no-grab
default-cache-ttl 1800
}}

Now configure GnuPG to use an agent when appropriate. Edit {{Path|~/.gnupg/gpg.conf}} and add the following line: 

{{FileBox|filename=~/.gnupg/gpg.conf|title=Configuring GnuPG to use a GPG agent|
use-agent
}}

Now the system is almost ready to use the GPG agent.

==== Changing pinentry for SSH logins ====

If you use the gpg-agent over SSH, a graphical pinentry password prompt will not come up in the login shell. This causes all operations that require a password to fail. If you add the following snipped in your {{Path|~/.bash_profile}}, the gpg-agent uses a curses password prompt in your current SSH shell instead. The snipped does not affect the pinentry settings when using local shells. 

{{FileBox|filename=~/.bash_profile|title=Use curses pinentry for SSH logins|lang=bash|1=
export GPG_TTY=$(tty)
if [[ -n "$SSH_CONNECTION" ]] ;then
    export PINENTRY_USER_DATA="USE_CURSES=1"
fi
}}

==== Automatically starting the GPG agent ====

If KDE is used as the desktop environment, edit {{Path|/etc/plasma/startup/10-agent-startup.sh}} (system-wide, for KDE4 {{Path|/etc/kde/startup/agent-startup.sh}}) or {{Path|~/.config/plasma-workspace/env/gpg-agent.sh}} (local user, {{Path|~/.kde4/env/gpg-agent.sh}} in KDE4). Add the following command to the appropriate file to have KDE automatically start the GPG Agent: 

{{FileBox|filename=/etc/plasma/startup/10-agent-startup.sh|title=Make Plasma automatically start the GPG agent|lang=bash|1=
if [ -x /usr/bin/gpg-agent ]; then
 eval "$(/usr/bin/gpg-agent --daemon)"
fi 
}}

Additionally, uncomment the following lines in {{Path|/etc/plasma/shutdown/10-agent-shutdown.sh}} (system-wide, {{Path|/etc/kde/shutdown/agent-shutdown.sh}} in KDE4) or add it to {{Path|~/.config/plasma-workspace/shutdown/gpg-agent.sh}} (local user, {{Path|~/.kde4/shutdown/gpg-agent.sh}} in KDE4): 

{{FileBox|filename=/etc/plasma/shutdown/10-agent-shutdown.sh|title=Have Plasma shut down the GPG agent|lang=bash|1=
if [ -n "${GPG_AGENT_INFO}" ]; then
  kill $(echo ${GPG_AGENT_INFO} {{!}} cut -d':' -f 2) >/dev/null 2>&1
fi
}}

When using a desktop environment other than KDE, put the above lines in {{Path|~/.xinitrc}} if {{c|startx}} is used to start X.org or {{Path|~/.xsession}} if XDM, GDM, KDM, etc. are used.

=== Working with documents ===

==== Encrypting and signing ====

Let's say that Larry has a file he wishes to send Luis. Larry can encrypt it, sign it, or encrypt and sign it. Encrypting means that only Luis will be able to open it. The signature tells Luis that it was really Larry who created the file. 

To encrypt:
{{Cmd|gpg --output doc.gpg --encrypt --recipient lmpinto@dei.uc.pt doc_to_encrypt}}

To sign:
{{Cmd|gpg --output doc.gpg --sign --recipient lmpinto@dei.uc.pt doc_to_sign}}

To encrypt and sign:
{{Cmd|gpg --output doc.gpg --encrypt --sign --recipient lmpinto@dei.uc.pt doc_to_encrypt_and_sign}}

This will create binary files. To create ASCII files, just add the <code>--clearsign</code> option to the beginning of the command. 

==== Decrypting and verifying signatures ====

Suppose that Larry has received an encrypted file. The command used to decrypt it is {{c|gpg --output document --decrypt encrypted_doc.gpg}}. This will decrypt the document and verify the signature (if there is one). 

==== Encrypting and decrypting without keys ====

It is possible to encrypt files using passwords instead of keys. The password itself will function ''as'' the key — it will be used as a ''symmetric cipher''. The file can be encrypted using {{c|gpg --symmetric}}; decrypting uses the same command mentioned above.

{{Cmd|gpg --output document.gpg --symmetric document}}

GnuPG will ask for a passphrase and a passphrase verification.

==== Advanced features ====

There are some nice advanced features in GnuPG. To find them, open the {{Path|~/.gnupg/gpg.conf}} file. 

{{FileBox|filename=~/.gnupg/gpg.conf|
#keyserver x-hkp://keys.gnupg.net
#keyserver-options auto-key-retrieve include-disabled include-revoked
}}

Uncomment the two lines above. With this modification, any time GnuPG needs to check a signature and does not find the public key on the local keyring it will contact the key server at [http://keys.gnupg.net:11371/ keys.gnupg.net] in an attempt to fetch the public key from the server. 

Another nice command is {{c|gpg --refresh-keys}}. This will contact the key server defined in the configuration file and refresh the public keys in the local keyring from there. It is capable of searching for revoked keys, new IDs, and new signatures on keys. It is a wise idea to run this command once or twice a month; if a user revokes their key this can provide a notification the key can no longer be trusted.

=== GnuPG interfaces ===

==== About email signatures ====

95% of the time GnuPG is used with email by signing/encrypting outgoing messages or reading signed/encrypted messages.

There are two ways two sign/encrypt a email with GnuPG, the old way and the new way. In the old way messages would appear in plain text, with no possible formatting and attached files would be unsigned/unencrypted. Here is an example of a message signed the old way: 

{{CodeBox|title=A plain text signature|<nowiki>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1
  
Test message
  
-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.8 for non-commercial use
  
iQA/AwUBP8461jMX0745gR7AEQIEOwCg011GbufXO3ED3FkLWXmfzg7xm1cAoJD0
0EU3Kd2EKNCqataEqM5qjpPs
=LchZ
-----END PGP SIGNATURE-----
</nowiki>
}}

Messages this way are not good in today's world, where there are nice GUIs and email readers that understand HTML. 

To solve this an addition to the MIME (Multipurpose Internet Mail Extensions) was created. This adds a field to the email that tells the mail reader that the full content of the message is signed and/or encrypted. The problem with this is that not all mail readers support such features. Some even mess up the content (Microsoft's Outlook is famous for not working with this). 

==== Kgpg ====

Kgpg ({{Package|kde-base/kmail}}) is a wonderful GUI for GnuPG. The main screen provides an area to paste text to sign or encrypt. The reverse is also true: ASCII armored text to be decrypted can also be entered. 

==== Seahorse ====

Seahorse ({{Package|app-crypt/seahorse}}) aims to be a GnuPG GUI interface for the GNOME desktop. The software has been evolving fast, but it still lacks many important features that can be found in Kgpg or the command line version.

==== KMail ====

If the <code>crypt</code> USE flag is set, KMail will be compiled with gpg support, and will be able to encrypt and decrypt inline PGP mails automatically as well as encrypting OpenPGP/MIME mails. To decrypt OpenPGP/MIME mails (which most users want) a GPG agent must be running.

To verify if KMail is properly configured navigate to {{Path|Settings → Configure KMail → Security → Crypto Backends}}. A GpgME-based backend should be listed and the OpenPGP checkbox should be checked. If it is listed but grayed out, click on {{Path|Rescan}}. If the GpgME-based backend remains grayed out, KMail is not working properly. 

When unable to get KMail to behave, see the [https://userbase.kde.org/KMail/PGP_MIME official KMail PGP page] for more information. 

==== Claws-Mail ====

[[Claws Mail|This mail client]] is ''very'' fast with big mailboxes, has all the nice features one wants in mail readers and works well with GPG. The only problem is that it does not work with the old PGP signatures, so when receiving those kind of mails the signatures must be hand-checked. 

To use a GPG key with [[Claws Mail|Claws-Mail]] navigate to {{Path|account configuration → privacy tab}}. Once there choose which key to use, most users should go with the default key.

==== Thunderbird ====

[[Thunderbird]] users can use the [https://packages.gentoo.org/useflags/crypt crypt] [[USE flag]] to enable Enable [https://gitweb.gentoo.org/proj/mozilla.git/commit/mail-client/thunderbird?id=5e9264914fdbafdb3ef58359b0d29778f485e3af encryption support with enigmail].

== Final thoughts and credits == 

=== Credits ===

John Michael Ashley's [https://www.gnupg.org/gph/en/manual.html GnuPG Handbook] is a very good book for beginners. 

Swift (Sven Vermeulen) for pushing me to re-write this.

Everyone in the {{IRC|gentoo-doc}} team; you guys rock.

Tiago Serra for getting me back on the privacy track.

== External resources ==

* https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/ - An article explaining the creation of subkeys.


[[Category:Server and Security]] {{Migrated|originalauthors=Gustavo Felisberto, John P. Davis, {{Dev|nightmorph}}}}
