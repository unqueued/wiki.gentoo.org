<languages />


{{Metadata|abstract=Diese Anleitung ist als Quelle für alternative Gentoo-Installationsmethoden gedacht, für jene mit speziellen Anforderungen, z.B. wenn keine CD-ROM verfügbar ist oder der Computer nicht von CDs booten kann.}}

Diese Anleitung ist als Quelle für alternative Gentoo-Installationsmethoden gedacht, für jene mit speziellen Anforderungen, z.B. wenn keine CD-ROM verfügbar ist oder der Computer nicht von CDs booten kann.

== Über diese Anleitung ==

Wenn die Standard-Installationsmethode Boote-von-der-CD nicht funktioniert (oder unmöglich zu benutzen ist, oder einfach nicht erwünscht ist), kann hier Hilfe gefunden werden. Diese Anleitung stellt eine Sammlung von alternativen Gentoo Linux-Installationsmethoden bereit für diejenigen welche sie benötigen. Oder diese dient, wenn bevorzugt, als Platz für schrullige Installationswege. Wenn es einen Installationsweg gibt, der als nützlich befunden wurde, oder der Leser einen amüsierenden Weg entwickelt hat Gentoo Linux zu installieren, bitte nicht zögern hier etwas zu schreiben, in diesem Artikel.

== Die Installations-CD mit dem Smart BootManager booten ==

Den Smart BootManager, verfügbar unter [http://btmgr.sourceforge.net/download.html http://btmgr.sourceforge.net/download.html], herunterladen. Linux-Quellcode, Binärformat- und Windows {{Path|.exe}}-Versionen sind verfügbar sowie viele Sprachpakete. Momentan wäre die präferierte Methode die Binaries zu benutzen, da sich der Quellcode nicht mit neueren Versionen von NASM kompilieren lässt. 

Entweder das Paket kompilieren oder die Binär-Datei herunterladen. Es gibt verschiedene Optionen die während dem Erstellen einer Boot-Floppy benutzt werden können, siehe unten. 

{{Invocation|sbminst --help|output=<pre>
sbminst [-t theme] [-d drv] [-b backup_file] [-u backup_file]
  
   -t theme       select the theme to be used, in which the theme could be:
                    us = English theme       de = German theme
                    hu = Hungarian theme     zh = Chinese theme
                    ru = Russian theme       cz = Czech theme
                    es = Spanish theme       fr = French theme
                    pt = Portuguese theme
  
   -d drv         set the drive that you want to install Smart BootManager on;
                  for Linux:
                    /dev/fd0 is the first floppy driver,
                    /dev/hda is the first IDE harddisk driver.
                    /dev/sda is the first SCSI harddisk driver.
                  for DOS:
                    0   is the first floppy drive
                    128 is the first hard drive;
  
   -c             disable CD-ROM booting feature;
  
   -b backup_file backup the data that will be overwritten for
                  future uninstallation;
  
   -u backup_file uninstall Smart BootManager, should be used alone;
  
   -y             do not ask any question or warning.
</pre>}}

{{c|sbminst}} benutzen um die Boot-Floppy zu erstellen :

{{RootCmd|sbminst -t us -d /dev/fd0}}

{{Note|{{Path|fd0}} mit dem richtigen Disketten-Gerätenamen ersetzen.}}

Nun einfach die Diskette im Diskettenlaufwerk des Computers einlegen, genauso die CD in das CD-Laufwerk, und den Computer booten. 

Der Smart BootManager-Dialog erscheint. Die CD-ROM auswählen und die {{Key|Enter}} (Return) Taste drücken um die Installations-CD zu booten. Danach mit den Standard-Installationsinstruktionen fortfahren. 

Weitere Informationen über den Smart BootManager können unter [http://btmgr.sourceforge.net/ http://btmgr.sourceforge.net/] gefunden werden.

== Installation von Non-Gentoo LiveCDs aus ==

=== Einleitung ===

{{Important|Die Gentoo-Entwickler können keinen Support anbieten wenn etwas mit einer non-Gentoo LiveCD fehl schlägt, da es nicht möglich ist, jede Eigenart jeder LiveCD „da draußen“ zu dokumentieren oder ihre Probleme zu beheben. Nur die Gentoo LiveCDs sind offiziell unterstützt. Bitte die [https://forums.gentoo.org/ Gentoo Forums] für Community-Hilfe bei Problemen mit alternativen Installationsmedien aufsuchen.}}

Benutzer können andere LiveCDs neben den von Gentoo bereitgestellten LiveCDs booten. Unabhängig davon stellen diese LiveCDs eine funktionierende Umgebung zum Benutzen während dem Kompilieren und Installieren von Gentoo. Die hier bereitgestellten Instruktionen sollten im Prinzip mit jeder anderen LiveCD funktionieren. 

Es gibt zu viele LiveCDs um alle [https://distrowatch.com/search.php aufzulisten], aber eine Option ist [http://www.knoppix.org/ Knoppix] auszuprobieren. Es bietet einen kompletten graphischen Desktop, mit Büro-Applikationen, Web-Browsern und Spielen zur Beschäftigung. Knoppix ist nur für {{Keyword|x86}}-Benutzer verfügbar, demnach wird den Anforderungen des Nutzers gemäß eine andere LiveCD oder Methode benötigt sein. 

{{Warning|Es sei gewarnt dass alles was während dem Warten auf die Installation des Gentoo-Systems im {{path|/home}}-Verzeichnis gespeichert wurde  nicht mehr beim Neustarten in Gentoo verfügbar sein wird. Wichtige Dateien sind am besten auf der Festplatte oder einem anderen Computer zu sichern!}}

=== Installationsanweisungen ===

Von der LiveCD booten, dann ein Terminal öffnen und den Befehl {{c|su -}} ausführen damit das Passwort geändert werden kann. Dies erlaubt das Root-Passwort für die CD zu setzen. Der sshd-Daemon kann nun konfiguriert werden, sollte eine Remote-Anmeldung benötigt sein. Als nächstes muss der {{Path|/mnt/gentoo}}-Mountpunkt erstellt werden. 

{{RootCmd|mkdir /mnt/gentoo}}

Ab diesem Punkt kann die Standard-Installations-Dokumentation befolgt werden, unter [[Handbook:AMD64/Installation/Disks/de|Vorbereiten der Festplatte(n)]]. Wenn nach dem Mounten des {{Path|/proc}}-Dateisystems gefragt wird, stattdessen folgenden Befehl benutzen : 

{{RootCmd|mount -o bind /proc /mnt/gentoo/proc}}

Beim Entpacken des [[stage tarball]] in [[Handbook:AMD64/Installation/Stage/de#Stage-Tarball_entpacken|Stage Tarball entpacken]] die folgenden {{c|tar}}-Optionen benutzen um sicher zu stellen dass beim entpackten Stage die richtigen Group IDs gesetzt werden : 

{{RootCmd|tar --numeric-owner --xattrs -xvjpf stage3-*.tar.bz2 -C /mnt/gentoo }}

Wenn Ubuntu genutzt wird, ist zu beachten dass {{Path|/dev/shm}} ein symbolischer Link zu {{Path|/run/shm}} ist. Es muss bind-gemountet sein oder ein tmpfs-Mountpunkt muss an dieser Stelle (innerhalb des chroot-Pfades) gesetzt werden. Um diese Stelle zu bind-mounten, folgenden Befehl (vor dem Chrooten) benutzen :

{{RootCmd|mount --rbind /run/shm /mnt/gentoo/run/shm}}

Dies ist dafür um {{Bug|496328}} zu vermeiden, wo Python <code>sem_open()</code> als defekt (aufgrund des mangelnden {{Path|/dev/shm}}) und Portage dies als Fehler ansieht (eigentlich würde die Python-Konfiguration weiterlaufen und gebaut werden, annehmend dass die <var>POSIX_SEMAPHORES_NOT_ENABLED</var> Variable aktiviert wurde, dies würde aber zu einer äußerst unerwünschten Python-Konfiguration führen).

Sobald es möglich ist in die entpackte Stage zu chrooten, siehe [[Handbook:AMD64/Installation/Base/de|Installation des Gentoo Basissystems]], muss eine andere chroot-Kommandosequenz benutzt werden. Dies ist dafür um sicherzustellen dass die Umgebungsvariablen richtig gesetzt sind. 

{{Note|Manche LiveCDs benutzen ein seltsames Environment-Setup, deshalb die {{c|env -i}} Option um es auf einen vernünftigen Zustand zu setzen.}}

{{RootCmd
|chroot /mnt/gentoo /bin/env -i TERM{{=}}$TERM /bin/bash
|env-update
|source /etc/profile
|export PS1{{=}}"(chroot) $PS1"
}}

Zuletzt ist es wichtig zu wissen dass manche Portage <var>FEATURES</var> nicht mit der LiveCD funktionieren. Hingewiesen sei vor allem auf die <code>userpriv</code> und <code>usersandbox</code> Werte. Sollten Fehler auftauchen, kann die Deaktivierung mancher oder aller optionalen <var>FEATURES</var> die Lösung sein.

== Festplattenlose Installation mittels PXE und dem Kernel/initrd/squashfs von der LiveCD ==

Diese Methode ist einfacher zu konfigurieren als PXE-Boot basierend auf iSCSI oder NFS. Mehrere Maschinen können von demselben Image-Set verteilt via TFTP booten und leicht darauf erweitert werden, über HTTP oder andere Protokolle zu funktionieren.

Having a nice router or one capable of running open source firmware such as [https://lede-project.org/ LEDE], the successor to [https://openwrt.org/ OpenWRT], is one way to centralize TFTP and DHCP. Getting the firmware online could be an uphill battle, depending on your experience.

Manche anderen Distributionen, Fedora inklusive, vertreiben Images zum Erstellen von Live oder Installations-CDs. Bei Gentoo ist dies nicht der Fall. Stattdessen müssen Nutzer

# Den Kernel, die initrd und das [[SquashFS|squashfs]] von der LiveCD extrahieren.
# Den initrd-Inhalt patchen.
# Das SquashFS in die initrd einfügen.

Nur dann kann ein PXE-basierter Bootloader konfiguriert werden, welcher die Images lädt und in ein Live-System bootet.

There are different flavors of PXE, but all of them are going to need the kernel and initrd file, so let's create those files now. Download the [https://www.gentoo.org/downloads/ minimal installation CD]. Then, execute the following script as root. The new files '''initrd''' and '''kernel''' will be created in your specified output directory.


{{CodeBox|title=pxe-craft-initrd-kernel|lang=bash|<nowiki>
#!/bin/bash -xe
# Create kernel and initrd files from a Gentoo LiveCD (DVD?) for PXE boot.

print-usage() {
  echo "Usage: $0 <output-dir> <gentoo-iso>" >&2
}

# Example Invocation
# sudo ./gen-pxe-initrd-kernel pxe-boot-files ~/Downloads/install-amd64-minimal-20171228T214501Z.iso

outdir="$1"
image="$2"
tmp="$outdir/tmp"

if [ $(id -u) -ne "0" ]; then
  echo "You must run as root or with sudo. This is necessary for the loop mount" && 
  print-usage &&
  exit 2
fi

test -z "$outdir" -o -z "$image" && print-usage && exit 1
test -e "$tmp" && echo "Temporary path '$tmp' already exists." >&2 && exit 1

iso="$tmp/iso"
initrd="$tmp/initrd.dir"

# prepare directories
mkdir -p "$outdir" "$tmp" "$iso" "$initrd/mnt/cdrom"

# extract files from ISO image
mount -o ro,loop "$image" "$iso"
cp "$iso"/{image.squashfs,isolinux/gentoo,isolinux/gentoo.igz} "$tmp"
umount "$iso"

# rename kernel
mv "$tmp/gentoo" "$tmp/kernel"

# patch initramfs and add squashfs to it
xz -dc "$tmp/gentoo.igz" | ( cd "$initrd" && cpio -idv )
patch -d "$initrd" -p0 <<'EOF'
--- init.orig	2016-01-02 00:00:00.000000000 +0100
+++ init	2016-01-02 00:00:00.000000000 +0100
@@ -455,9 +455,9 @@
 		CHROOT=${NEW_ROOT}
 	fi
 
-	if [ /dev/nfs != "$REAL_ROOT" ] && [ sgimips != "$LOOPTYPE" ] && [ 1 != "$aufs" ]; then
-		bootstrapCD
-	fi
+#	if [ /dev/nfs != "$REAL_ROOT" ] && [ sgimips != "$LOOPTYPE" ] && [ 1 != "$aufs" ]; then
+#		bootstrapCD
+#	fi
 
 	if [ "${REAL_ROOT}" = '' ]
 	then
@@ -591,7 +591,7 @@
 		else
 			bad_msg "Block device ${REAL_ROOT} is not a valid root device..."
 			REAL_ROOT=""
-			got_good_root=0
+			got_good_root=1
 		fi
 	done
 
@@ -670,7 +670,7 @@
 	[ -z "${LOOP}" ] && find_loop
 	[ -z "${LOOPTYPE}" ] && find_looptype
 
-	cache_cd_contents
+	#cache_cd_contents
 
 	# If encrypted, find key and mount, otherwise mount as usual
 	if [ -n "${CRYPT_ROOT}" ]
EOF
cp "$tmp/image.squashfs" "$initrd/mnt/cdrom"
( cd "$initrd" && find . -print | cpio -o -H newc | gzip -9 -c - ) > "$tmp/initrd"

mv "$tmp"/{kernel,initrd} "$outdir"
rm -rf "$tmp"
</nowiki>}}


If you know what you're doing, you can be on your way! Enjoy Gentoo on PXE. Otherwise, see below for more directions depending on the PXE flavor you're using.

=== TFTP ===

This will be needed in tandem with a DHCP server for most PCs equipped with PXE boot. However, realize that you could use iPXE to boot without a TFTP or DHCP server! See [http://ipxe.org/ ipxe.org] for info on embedding scripts, chainloading, and manual booting. There are still merits to TFTP booting such as wide-range device support, so let's get to serving TFTP!

<div class="mw-translate-fuzzy">
Die [https://www.gentoo.org/downloads/ Minimal Installations-CD] herunterladen, {{Package|net-ftp/tftp-hpa}} installieren, sicherstellen dass es den Pfad {{Path|/tftproot}} bereitstellt und es starten.
</div>

<div class="mw-translate-fuzzy">
Der TFTP-Bootdienst ist bereit, nun ist der nächste Schritt einen DHCP-Dienst zu konfigurieren. Einen DHCP-Server auf derselben Maschine aufzusetzen ist möglich - es ist nur sicherzustellen dass die zu bootenden Maschinen mit ihr verbunden sind. Oder einfach die Konfiguration eines existierenden Routers anpassen.
</div> 

=== DHCP ===

Setting up a DHCP server on the same machine is possible - just make sure that the booted machines are connected to it. Or just tweak the configuration of an existing router.

Eine Beispielkonfiguration für einen OpenWRT DHCP-Dienst folgt :

{{FileBox|filename=/etc/config/dhcp|1=
config boot linux                   
        option filename boot/grub/i386-pc/core.0
        option servername boot
        option serveraddress 84.246.161.86
}}

From here, directions will change depending on what flavor your PXE is (i.e. GRUB, iPXE). 


=== GRUB ===

After executing the '''pxe-craft-initrd-kernel''' script, run the following '''pxe-install-grub''' to output proper files into your tftp root directory.

{{CodeBox|title=pxe-install-grub|lang=bash|<nowiki>
#!/bin/bash -xe
# prepare boot data
 
print-usage() {
  echo "Usage: $0 -i [initrd-file] -k [kernel-file] <tftproot>" >&2
}
 
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
 
case $key in
    -i|--initrd)
    initrd="$2"
    shift # past argument
    shift # past value
    ;;
    -k|--kernel)
    kernel="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters
 
tftproot="$1"
 
test ! -e "$initrd" && echo "initrd Not found" && print-usage && exit 1
test ! -e "$kernel" && echo "kernel Not found" && print-usage && exit 1
test -z "$tftproot" && echo "tftproot not specified" && print-usage && exit 1
                                                                          
echo "initrd:$initrd"
echo "kernel:$kernel"
echo "tftproot:$tftproot"
 
grub-mknetdir -v --net-directory="$tftproot"
cat > "$tftproot/boot/grub/grub.cfg" <<'EOF'
menuentry "Gentoo Live" {
    linux /boot/kernel root=/dev/ram0 init=/linuxrc loop=/image.squashfs looptype=squashfs cdroot=1 real_root=/
    initrd /boot/initrd
}
EOF
 
cp "$kernel" "$initrd" "$tftproot/boot"
</nowiki>}}


=== iPXE ===

Here are relevant stanzas for iPXE.

{{CodeBox|title=gentoo-pxe-boot|<nowiki>
#!ipxe                                                                    
menu THRONG OF BAZ                                                       
item --gap LAN
item gentoo Gentoo x86_64 minimal
 
:gentoo                                                                   
set g http://baz.com/ipxe/gentoo                                        
kernel ${g}/kernel root=/dev/ram0 init=/linuxrc loop=/image.squashfs looptype=squashfs cdroot=1 real_root=/
initrd ${g}/initrd                                                        
boot
</nowiki>}}

== Disklose Installation mittels PXE Boot und NFS ==

=== Anforderungen ===

PXE (Preboot eXecution Environment) ist eine Methode um Computer über ein PXE-fähiges Netzwerkinterface zu booten (mit einem PXE-unterstützenden BIOS). Sollte das System ein Starten vom Netzwerkinterface oder BIOS nicht unterstützen, kann PXE auch als Bootmethode von Blockgeräten (wie CDs oder USB-Sticks) genutzt werden. In diesen Fällen kann eine minimale Boot-Umgebung eine PXE-unterstützende Netzwerkkarte nachahmen (siehe [http://etherboot.org Etherboot/gPXE]). 

=== Server Grundsetup ===

Verzeichnisse erstellen : Das erste was zu tun ist, ist die Verzeichnisse zu erstellen wo das disklose System gespeichert wird. Das Verzeichnis {{Path|/diskless}} erstellen welches ein Verzeichnis für jeden disklosen Klienten beheimatet. Für den Rest dieses Howto's wird der Klient an welchem gearbeitet wird, 'eta' genannt. 

{{RootCmd|mkdir -p /diskless/eta}}

DHCP und TFTP-Setup : Der Klient erhält Boot-Informationen via DHCP und lädt alle benötigten Dateien mit TFTP runter. 

Für dhcpd, einfach {{c|emerge dhcp}} (oder einen anderen DHCP-Server) ausführen. Es ist sicherzustellen dass das richtige Interface in {{Path|/etc/conf.d/dhcpd}} ausgewählt und es richtig konfiguriert ist. Dann folgendes zu {{Path|/etc/conf.d/dhcpd}} hinzufügen : 

{{Note| Dies stellt hier, {{Path|pxegrub}}, eine statische IP-Adresse für den Klienten und den Pfad eines PXE-Boot-Images bereit. Die MAC-Adresse der Ethernet-Karte im Beispiel sollte durch die richtige MAC-Adresse ersetzt werden, ebenso das Verzeichnis wo die Klienten-Dateien gespeichert werden.}}

{{FileBox|filename=dhcpd.conf|1=
option option-150 code 150 = text ;
ddns-update-style none ;
host eta {
hardware ethernet 00:00:00:00:00:00;
fixed-address ip.add.re.ss;
option option-150 "/eta/boot/grub.lst";
filename "/eta/boot/pxegrub";
}
}}

Als nächstes das Interface in {{Path|/etc/conf.d/net}} konfigurieren damit es nicht beim Booten geleert wird. Siehe {{Path|/usr/share/doc/openrc-*/net.example.bz2}} für mehr Informationen. 

{{FileBox|filename=/etc/conf.d/net|title=Sicherstellen dass das Interface (hier eth0 als Beispiel) nicht beim Booten rekonfiguriert wird|lang=bash|1=
config_eth0="noop"
}}

Für TFTP, {{Package|net-ftp/tftp-hpa}} emergen. In {{Path|/etc/conf.d/in.tftpd}} das folgende einfügen : 

{{FileBox|filename=in.tftpd|title=|lang=bash|1=
INTFTPD_PATH="/diskless"
INTFTPD_USER="nobody"
INTFTPD_OPTS="-u ${INTFTPD_USER} -l -vvvvvv -p -c -s ${INTFTPD_PATH}"
}}

Emerge GRUB :

{{Emerge|sys-boot/grub}}

Sobald GRUB kompiliert ist, das Boot-Verzeichnis des disklosen Klienten erstellen :

{{RootCmd|grub2-mknetdir --net-directory{{=}}/diskless/eta}}

Der usrprüngliche Weg war das PXE-Image zum disklosen Klienten zu kopieren, aber dieser Pfad existiert nicht mehr.

{{RootCmd
|mkdir /diskless/eta/boot
|cp /usr/lib/grub/pxegrub /diskless/eta/boot/pxegrub
}}

Dann seine {{Path|grub.lst}}-Konfigurationsdatei editieren.

{{RootCmd|nano -w /diskless/eta/boot/grub.lst}}

{{FileBox|filename=grub.lst|lang=bash|1=
default 0
timeout 30
  
title=Diskless Gentoo
root (nd)
kernel /eta/bzImage ip=dhcp root=/dev/nfs nfsroot=ip.add.re.ss:/diskless/eta
  
# Für die nfsroot-Option ist die IP-Adresse diejenige des Servers und das Verzeichnis jenes wo die Dateien für den disklosen Klienten (auf dem Server) gespeichert sind.
}}

NFS ist recht leicht zu konfigurieren. Das einzige was zu tun ist, ist eine Zeile zur {{Path|/etc/exports}}-Konfigurationsdatei hinzuzufügen : 

{{FileBox|filename=/etc/exports|title=|lang=bash|1=
/diskless/eta eta(rw,sync,no_root_squash)
}}

Eine wichtige Sache die nun zu tun ist, ist die {{Path|/etc/hosts}}-Datei zu modifizieren um sich den Anforderungen anzupassen. 

{{FileBox|filename=/etc/hosts|lang=bash|1=
127.0.0.1 localhost
192.168.1.10 eta.example.com eta
192.168.1.20 sigma.example.com sigma
}}

=== Das System auf dem Server erstellen ===

Ein nächster Schritt ist den Server mit einer Gentoo Installations-CD zu rebooten (obwohl erfahrene Administratoren auch ohne sie fortfahren können sofern sie  sich ausreichend gut in Gentoo Installationen auskennen). Danach ist der Standard-Installationsprozedur im [[Handbook:Main_Page/de|Gentoo Handbuch]] zu folgen ABER mit dem folgenden Unterschied : wenn die Dateisysteme gemountet werden, den nächsten Schritt ausführen (wobei {{Path|sdaX}} die Partition ist wo das {{Path|/diskless}}-Verzeichnis erstellt wurde).

{{RootCmd|mount /dev/sdaX /mnt/gentoo}}

Andere Partitionen zu mounten wird nicht benötigt da alle Dateien im {{Path|/diskless/eta}}-Verzeichnis liegen. 

Dieses Beispiel nutzt einen stage3-Tarball. {{Path|/proc}} in das Verzeichnis des disklosen Klienten mounten und in dieses chrooten um mit der Installation fortzufahren. Dann dem Installations-Handbuch bis zur Kernel-Konfiguration folgen. 

{{Warning|Vorsicht mit dem Extrahieren des Stage-Tarballs zu seinem Ziel, um nicht über eine existierende Installation zu extrahieren.}}

{{RootCmd
|cd /mnt/gentoo/diskless/eta/
|tar -xvjpf  /mnt/cdrom/gentoo/stage3-*.tar.bz2
|mount -t proc /proc /mnt/gentoo/diskless/eta/proc
|cp /etc/resolv.conf /mnt/gentoo/diskless/eta/etc/resolv.conf
|chroot /mnt/gentoo/diskless/eta/ /bin/bash
|env-update
|source /etc/profile
}}

Beim {{c|make menuconfig}} der Kernelkonfiguration die folgenden Optionen mit den anderen im Installationshandbuch empfohlenen nicht vergessen. 

<div class="mw-translate-fuzzy">
{{KernelBox|title=Benötigte Optionen für disklose Installationen|<pre>
- Der Netzwerkkartentreiber
(Im Kernel, *nicht* als Modul!)
  
-*- Networking support --->  
  Networking options --->
    [*] TCP/IP networking
    [*] IP: kernel level autoconfiguration
    [*] IP: DHCP support
    [*] IP: BOOTP support
  
File systems --->
  [*] Network File Systems --->
    <*> NFS file system support
    [*] Provide NFSv3 client support
    [*] Root file system on NFS
</pre>}}
</div>

Den Kernel im gechrooteten {{Path|/}} (nicht in {{Path|/boot}}) den vorhergehend definierten pxegrub Einstellungen folgend, speichern. Als nächstes {{Path|/etc/fstab}} des disklosen Klienten konfigurieren. 

{{FileBox|filename=/etc/fstab|<pre>
/dev/cdroms/cdrom0 /mnt/cdrom iso9660 noauto,ro 0 0
</pre>
}}

Um nun den Klienten daran zu hindern einen Dateisystemcheck auszuführen : 

{{RootCmd
|touch /fastboot
|echo "touch /fastboot" >> /etc/conf.d/local.start
}}

{{Package|net-fs/nfs-utils}} installieren da der Klient sehr stark davon abhängen wird : 

{{Emerge|net-fs/nfs-utils}}

Keinen anderen Bootloader installieren da bereits einer vorhanden ist - pxegrub. Ohne weiteres die Installation abschließen und den Server neustarten. Die Services, welche zum Booten des neuen Klienten benötigt werden, starten : DHCP, TFTPD, und NFS. 

{{RootCmd
|service dhcp start
|service in.tftpd start
|service nfs start
}}

=== Den neuen Klienten booten ===

Damit der neue Klient korrekt booten kann, muss das BIOS und die Netzwerkkarte als erste Bootmethode konfiguriert sein - vor der CD-ROM oder Diskette. Bei Fragen dazu die Hardware-Handbücher oder die Herstellerwebseite konsultieren. Die Netzwerkkarte sollte eine IP mittels DHCP erhalten und das GRUB PXE Abbild mittels TFTP herunterladen. Dann sollte ein nettes schwarz-weißes GRUB-Bootmenü erscheinen in welchem Benutzer den zu bootenden Kernel auswählen und die {{Key|Return}}-Taste (Enter) drücken können. Wenn alles in Ordnung ist sollte der Kernel booten, das Wurzelverzeichnis mittels NFS einhängen und eine Login-Zeile anzeigen.

== Gentoo von einer bestehenden Linux-Distribution installieren ==

=== Anforderungen ===

Um Gentoo von einer existierenden Linux-Distribution zu installieren braucht sie das chroot-Kommando, und eine Kopie der Gentoo-Installation oder des ISOs, welche/s installiert werden soll. Eine Netzwerkverbindung ist höchst empfehlenswert da die Installation sonst nur mit den Dateien im Installationsmedium arbeiten kann. Übrigens, ein Tarball ist nur eine Datei die auf {{Path|.tbz}} oder {{Path|.tar.gz}} endet. Los geht's !

=== Übersicht ===

Zuerst Gentoo eine Partition durch Ändern der Größe einer bestehenden Linux-Partition zuweisen, die Partition einhängen, den Tarball auf die jene Partition entpacken, in das Pseudo-System chrooten und mit dem Bauen anfangen. Sobald der Bootstrap-Prozess fertig ist, einige Konfigurationen am System vornehmen damit es bootet, dann neustarten und Gentoo benutzen. 

=== Wie für Gentoo Platz schaffen ? ===

Die Wurzelpartition ist das unter {{Path|/}} eingehängte Dateisystem. Das erste Beispiel zeigt die Ausgabe von {{c|mount}} auf einem System. Das zweite Beispiel nutzt {{c|df}} (disk free) um zu sehen wie viel Platz vorhanden ist und wie die Größe davon geändert wird. Die Größe der Wurzelpartition zu ändern ist nicht erforderlich ! Alles andere das vom Partitionerer unterstützt wird, kann geändert werden, mehr dazu aber später. 

{{RootCmd|mount|output=<pre>
/dev/sdb2 on / type ext3 (rw)
none on /proc type proc (rw)
none on /dev/pts type devpts (rw,gid=5,mode=620)
none on /dev/shm type tmpfs (rw,nodev,nosuid,noexec)
</pre>}}

{{RootCmd|df -h|output=<pre>
Dateisystem          Größe Benutzt Verf. Verw% Eingehängt auf
/dev/sdb2            4.0G     1.9G  2.4G   82% /
none                  38M        0   38M    0% /dev/shm
</pre>
}}

Wie zu sehen ist, sind auf der Partition, die als {{Path|/}} mit Namen {{Path|/dev/sdb2}} eingehängt ist, 2.4 GB frei. In diesem Fall wurde entschieden, die Größe zu ändern um 400 MB Platz frei zu lassen, um somit 2 GB für Gentoo zu allozieren. Nicht schlecht, es könnte einiges installiert haben. 1 GB wird dennoch als genug für die meisten Benutzer angenommen. Partitionieren wir dies nun !

=== parted bauen um die Partitionsgröße zu ändern ===

{{Warning| Diese Sektion ist veraltet und wird entfernt wenn die älteren parted-Versionen den Portage-Baum verlassen haben. Die Fähigkeit, Partitionsgrößen zu ändern, wurde bei parted entfernt, wie unter [https://www.gnu.org/software/parted/manual/html_node/Command-explanations.html hier] erklärt wird.}}

{{Package|sys-block/parted}} ist sehr nützlich um Partitionsgrößen zu ändern. Es ist auf der Minimal-Installations-CD inkludiert.

{{Note|Es gibt andere Tools für das Ändern von Partitionsgrößen, aber eine ausführliche Beschreibung dieser liegt außerhalb des Rahmens dieser Anleitung.}}

Auf dieser Seite den zu ändernden Dateisystemtyp suchen und prüfen ob {{c|parted}} ihn unterstützt. Wenn nicht: Pech, manche Partitionen müssen zerstört werden, um Platz für Gentoo zu schaffen. Die Software herunterladen und installieren. Im nächsten Schritt tritt ein Problem auf. Die Linux-Wurzelpartitionsgröße muss verändert werden, dafür muss eine Diskette mit einem minimalen Linux-System und einem vorkompilierten, auf die Diskette kopierten parted gebootet werden um die Größe von {{Path|/}} zu ändern. Wenn die Partition ausgehängt werden kann während man sich noch in Linux befindet, sind die folgenden Schritte nicht nötig. Einfach parted kompilieren und es auf einer ausgewählten nicht eingehängten Partition ausführen. Hier die Anleitung wie es auf diesem System getan wurde. 

{{Important|Sicher gehen dass die für das Partitionieren erforderlichen Operationen von parted unterstützt werden !}}

Die mininux Boot/Root-Diskette (eine 2.4-Linux Mini-Distribution - kostenlos) von [http://mininux.free.fr/uk/ http://mininux.free.fr/uk/] herunterladen, eine Diskette erstellen, wie in der Dokumentation, welche das Softwarepaket enthält, empfohlen, und für den nächsten Schritt eine neue Diskette ins Laufwerk legen. 

{{Note|Angemerkt sei, dass Linux ein Synonym für „Es gibt mehr als einen Weg es zu tun“ ist. Das Ziel ist es, parted auf einer nicht eingehängten Partition zu nutzen damit es seine Arbeit tun kann. Ein anderer Boot/Root-Disksatz als mininux kann genutzt werden. Dieser Schritt könnte an sich nicht als zu tun erforderlich sein: Es könnte nur nötig sein, das Dateisystem auszuhängen um es in der Linux-Sitzung zu repartitionieren und parted darauf laufen zu lassen.}}

{{RootCmd|mkfs.minix /dev/fd0|output=<pre>
480 inodes
1440 blocks
Firstdatazone=19 (19)
Zonesize=1024
Maxsize=268966912
</pre>
}}

Mit dem Bauen von parted fortfahren. Das Dienstprogramm herunterladen und entpacken, und in das dazugehörige Verzeichnis {{c|cd}}-en. Nun den folgenden Satz an Kommandos ausführen um das Dienstprogramm zu bauen und es auf die Diskette zu kopieren. 

{{RootCmd
|mkdir /floppy
|mount -t minix /dev/fd0 /floppy
|export CFLAGS{{=}}"-O3 -pipe -fomit-frame-pointer -static"
|./configure
|make
|cp parted/parted /floppy
|umount /floppy
}}

Zeit um neuzustarten und die Partitionsgröße zu ändern. Dies nur nach einem kurzen Blick auf die parted-Dokumentation tun. Die Größenänderung sollte bei den größten Festplatten unter 30 Minuten brauchen, Geduld. Das System mit der mininux-Diskette neustarten, und nach dem Einloggen die Diskette im Laufwerk mit der Dienstprogrammdiskette, die oberhalb erstellt wurde, austauschen und {{c|mount /dev/fd0 /floppy}} eintippen um parted unter {{Path|/floppy}} zu haben. parted ausführen um die Partitionsgröße ändern zu können. Sobald dieser lange Prozess fertig ist, mit der Installation von Gentoo fortfahren. Für den Moment in das alte Linux-System neu starten. Das Laufwerk, auf welchem operiert wird, ist dasjenige auf welchem die zu ändernde Partition liegt. Wenn zum Beispiel die zu ändernde Partition {{Path|/dev/sda3}} ist, ist das Laufwerk {{Path|/dev/sda}}. 

{{RootCmd|mount /dev/fd0 /floppy 
|cd /floppy
|./parted <drive>}}

{{Cmd|print|prompt=(parted) |output=<pre>
Disk geometry for /dev/sdb: 0.000-9787.148 megabytes
Disk label type: msdos
Minor    Start       End     Type      Filesystem  Flags
1          0.031   2953.125  primary   ntfs
3       2953.125   3133.265  primary   linux-swap
2       3133.266   5633.085  primary   ext3
4       5633.086   9787.148  extended
5       5633.117   6633.210  logical
6       6633.242   9787.148  logical   ext3</pre>}}

{{Cmd|help resize|prompt=(parted) |output=<pre>
(parted)  help resize 
  resize MINOR START END        resize filesystem on partition MINOR
  
        MINOR is the partition number used by Linux.  On msdos disk labels, the
        primary partitions number from 1-4, and logical partitions are 5
        onwards.
        START and END are in megabytes
</pre>}}

{{Cmd|resize 2 3133.266 4000.000|prompt=(parted) }}

{{Important|Geduld! Der Computer arbeitet ! Zum Prüfen der Festplattenaktivität auf die Festplatten-LED auf dem Gehäuse schauen. Dies sollte zwischen 2 und 30 Minuten dauern.}}

Sobald die Größenänderung fertig ist, wie beschrieben zurück in das alte Linux booten. Dann zu [[Handbook:AMD64/Installation/Disks/de| Gentoo Handbuch: Vorbereiten der Festplatte(n)]] gehen und den Anweisungen folgen. Beim chrooten folgendes Kommando nutzen um die Umgebungsvariablen zurückzusetzen : 

{{RootCmd
|env -i HOME{{=}}$HOME TERM{{=}}$TERM chroot /mnt/gentoo /bin/bash
|/usr/sbin/env-update
|source /etc/profile
}}

Viel Spaß !

[[Category:Core system]] {{Migrated|originalauthors=Gerald Normandin Jr., Travis Tilley, Oleg Raisky, Alex Garbutt, Alexandre Georges, Magnus Backanda, Faust A. Tanasescu, Daniel Ahlberg, Ken Nowack, Tiemo Kieft, Benny Chuang, Jonathan Smith, nightmorph}}
