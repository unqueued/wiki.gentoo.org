<languages />

<div class="mw-translate-fuzzy">
{{Metadata|abstract=Ce guide devrait aider les utilisateurs à localiser/traduire leur distribution Gentoo Linux dans n'importe quelle locale européenne. L'Allemand est simplement pris comme  exemple et vous devez adapter les instructions à votre locale. Il inclut l'utilisation de l'Euro.}}
</div>

== Fuseau horaire ==

<div class="mw-translate-fuzzy">
Afin de tenir votre système à l'heure correctement, vous devez sélectionner votre fuseau horaire pour que votre système sache où il se trouve.
</div>

== Fonctionnement des locales ==

=== Que sont les locales ? ===

<div class="mw-translate-fuzzy">
Une locale est un jeu d'informations que la plupart des programmes utilisent pour déterminer les réglages spécifiques à un couple  langue-pays.Les locales et leurs données font partie de la bibliothèque système et se trouvent dans  la plupart des systèmes. Un nom de locale se présente généralement sous la forme <code>ab_CD</code> où <code>ab</code> est le code de langue à deux (ou trois) lettres (comme spécifié dans ISO-3166). Des variantes sont souvent ajoutées au nom de locales, par exemple, <code>en_GB.UTF-8</code> ou <code>de_DE@euro</code>. Reportez-vous à [http://en.wikipedia.org/wiki/Locale Wikipedia] pour en savoir plus sur les locales et pour lire les articles en relation.
</div>

=== Variables d'environnement pour les locales ===

Les variables qui contrôlent les différents aspects du réglage des locales sont présentées ci-dessous. Toutes prennent un nom de locale de la forme <code>ab_CD</code> indiquée ci-dessus. 

<div class="mw-translate-fuzzy">
{| class="wikitable" style="text-align: left;" 
|- 
! Nom de la variable
! Explication
|- 
| LANG
| Définit tous les paramètres d'une locale d'un seul coup, tout en  autorisant des personnalisation individuelles ultérieures via le paramètre LC_* présenté ci-dessous. 
|- 
| LC_COLLATE
| Définit l'orde alphabétique des chaînes de caractères. Ceci affecte par exemple la sortie des listings de répertoires. 
|- 
| LC_CTYPE
| Définit  les propriétés de gestion des caractères par le système ; en particulier quels caractères sont considérés comme faisant partie de l'alphabet, des chiffres etc. Cela détermine aussi le jeu de caractères utilisé,  quand cela s'applique.
|- 
| LC_MESSAGES
| Les traductions des programmes qui utilisent un schéma de localisation basé sur des messages (la majorité des programmes GNU, voir les chapitres suivants pour une information plus détaillée sur ceux qui l'utilisent, et comment faire en sorte que ceux qui ne l'utilisent pas fonctionnent). 
|- 
| LC_MONETARY
| Définit l'unité monétaire et le format des valeurs numériques exprimées dans cette unité. 
|-
| LC_NUMERIC
| Définit le format des valeurs numériques non monétaires. Ceci affecte des choses telles que le séparateur de milliers et le séparateur des décimales. 
|- 
| LC_TIME
| Définit le format des dates et de l'heure. 
|- 
| LC_PAPER
| Définit la taille par défaut du papier.
|- 
| LC_ALL
| Une variable spéciale pour écraser tous les autres paramètres.
|-
|}
</div>

<div class="mw-translate-fuzzy">
{{Note|Certains programmes sont écrits d'une manière telle qu'ils s'attendent à un ordre alphabétique basé sur l'anglais, alors que certaines locales comme l'Estonien, utilisent un ordre différent. En conséquence, il est recommandé de  définir  LC_COLLATE à C pour des paramètres intéressant le système entier.}}
</div>

<div class="mw-translate-fuzzy">
{{Warning/fr|L'utilisation de  LC_ALL est fortement déconseillée  car cela ne peut plus être écrasé ultérieurement. N'utilisez cela que pour des tests et ''jamais'' dans un fichier de démarrage. }}
</div>

<div class="mw-translate-fuzzy">
La plupart du temps, les utilisateurs ne définissent la variable LANG qu'à une échelle globale.
</div>

<div class="mw-translate-fuzzy">
=== Générer des locales spécifiques ===
</div>

<div class="mw-translate-fuzzy">
Vous n'utiliserez probablement qu'une, ou peut-être deux, locales sur votre système. Vous pouvez spécifier les locales dont vous aurez besoin dans {{Path|/etc/locale.gen}}.
</div> 

{{Code|Ajouter des locales à /etc/locale.gen|<pre>
en_GB ISO-8859-1
en_GB.UTF-8 UTF-8
de_DE ISO-8859-1
de_DE@euro ISO-8859-15
</pre>
}}

{{Note|Use an <code>@euro</code> value from {{Path|/usr/share/i18n/SUPPORTED/}} as the locale when using the Euro currency symbol (€) on non UTF-8 based locales.}}

<div class="mw-translate-fuzzy">
L'étape suivante consiste à exécuter la commande <code>locale-gen</code>. Elle génère toutes les  locales que vous avez spécifiées dans le fichier {{Path|/etc/locale.gen}}.
</div> 

{{RootCmd|locale-gen|output=<pre>
 * Generating 4 locales (this might take a while) with 1 jobs
 *  (1/4) Generating en_GB.ISO-8859-1 ...                       [ ok ]
 *  (2/4) Generating en_GB.UTF-8 ...                            [ ok ]
 *  (3/4) Generating de_DE.ISO-8859-1 ...                       [ ok ]
 *  (4/4) Generating de_DE.ISO-8859-15@euro ...                 [ ok ]
 * Generation complete
</pre>}}

<div class="mw-translate-fuzzy">
Vous pouvez vérifier que les locales que vous avez sélectionnées sons disponibles en exécutant <code>locale -a</code>.
</div>

{{Cmd|locale -a|output=<pre>
C
POSIX
de_DE
de_DE.iso88591
de_DE.iso885915@euro
de_DE@euro
deutsch
en_GB
en_GB.iso88591
en_GB.utf8
german
</pre>}}

The {{Path|/usr/lib/locale/locale-archive}} file can be shown by {{c|localedef}}.

{{Cmd|localedef --list-archive}}

Its raw content can be displayed using the {{c|strings}} command.

{{Cmd|strings /usr/lib/locale/locale-archive {{!}} less}}

=== Configurer une  locale ===

==== OpenRC ==== 

<div class="mw-translate-fuzzy">
Lorsque vous utilisez OpenRC, les configurations des locales sont stockées dans des variables d'environnement.  Elles sont généralement définies dans le fichier {{Path|/etc/env.d/02locale}} (pour des configurations s'appliquant au système entier), et peuvent être gérées via la commande <code>eselect locale</code>. Par exemple, pour définir la variable  <code>LANG</code> à la valeur <code>C</code> :
</div>

{{RootCmd|eselect locale list|output=<pre>
Available targets for the LANG variable:
  [1]   C 
  [2]   POSIX
  [3]   en_US
  [4]   en_US.iso885915
  [5]   en_US.utf8
  [ ]   (free form)
</pre>}}

{{RootCmd|eselect locale set 1}}

<div class="mw-translate-fuzzy">
Bien-sûr, vous pouvez éditer le fichier à la main et diversifier les variables de la locale.
</div>

<div class="mw-translate-fuzzy">
{{Code|Configurer la locale par défaut du système dans  /etc/env.d/02locale|<pre>
LANG="de_DE.UTF-8"
LC_COLLATE="C"
</pre>
}}
</div>

In some cases users may notice glitchy non-English representation in some applications like Krusader (https://bugs.kde.org/show_bug.cgi?id=371582). Removing or commenting the <code>LC_ALL=""</code> line from {{Path|/etc/env.d/02locale}} should fix the problem.

<div class="mw-translate-fuzzy">
Il est également possible, et très courant en particulier dans un environnement UNIX traditionnel, de laisser la configuration globale inchangée, c.à.d. dans la locale  "<code>C</code>". Les utilisateurs peuvent toujours spécifier leur locale préférée dans leur propre fichier rc de shell :
</div> 

<div class="mw-translate-fuzzy">
{{Code|Configurer la  locale dans ~/.bashrc|<pre>
export LANG="de_DE.UTF-8"
export LC_COLLATE="C"
</pre>
}}
</div>

<div class="mw-translate-fuzzy">
Une autre manière de configurer le système, c'est de le laisser dans la locale par défaut C, mais d'activer la représentation UTF-8 des caractères en même temps. Cette option se met en place en utilisant les réglages suivants dans {{Path|/etc/env.d/02locale}} :
</div> 

{{Code|Utiliser la locale traditionnelle C tout en spécifiant UTF-8|<pre>
LC_CTYPE=de_DE.UTF-8
</pre>
}}

<div class="mw-translate-fuzzy">
En utilisant l'extrait de code ci-dessus, les utilisateurs seront en mesure de voir les noms de fichiers correctement localisés, sans être forcés d'adopter votre langue préférée.
</div> 

<div class="mw-translate-fuzzy">
Une fois que vous avez définie la locale correcte, assurez-vous de mettre à jour vos variables d'environnement pour que votre système les prenne en compte.
</div>

Pour une locale au niveau du système entier :

{{RootCmd|env-update && source /etc/profile}}

Pour une locale spécifique à l'utilisateur :

{{Cmd|source ~/.bashrc}}

<div class="mw-translate-fuzzy">
Après cela, vous devez tuer votre serveur X en pressant  {{Key|Ctrl}} + {{Key|Alt}} + {{Key|Backspace}}, vous déconnecter, puis vous reconnecter en tant qu'utilisateur.
</div> 

Vérifiez maintenant si les changements sont effectifs : 

{{Cmd|locale}}

==== systemd ====

<div class="mw-translate-fuzzy">
Si vous utilisez systemd, vous devriez définir votre locale avec la commande <code>localectl</code>. Consultez la liste des locales disponibles avec :
</div>

{{RootCmd|localectl list-locales}}

<div class="mw-translate-fuzzy">
Puis, définissez la locale dont vous avez besoin :
</div>

{{RootCmd|<nowiki>localectl set-locale LANG=de_DE.utf8</nowiki>}}

Pour terminer, vérifiez si le résultat est correct :

{{RootCmd|<nowiki>localectl | grep "System Locale"</nowiki>|output=<pre>
   System Locale: LANG=de_DE.utf8
</pre>}}

== Agencement de clavier pour la console ==

=== OpenRC ===

<div class="mw-translate-fuzzy">
L'agencement de clavier utilisé par la console est défini dans le fichier {{Path|/etc/conf.d/keymaps}} par la variable  <code>keymap</code>. Les valeurs acceptables peuvent être trouvées dans {{Path|/usr/share/keymaps/YOUR_ARCH/}}. {{Path|i386}} possède des subdivisions supplémentaire pour les agencements({{Path|qwerty/}}, {{Path|azerty/}}, etc.). Quelques langues possèdent des options multiples, et vous devrez peut-être faire des essais pour déterminer laquelle vous convient le mieux.
</div> 

<div class="mw-translate-fuzzy">
{{Code|Définir l'agencement de clavier pour la console|<pre>
keymap="de"
#keymap="de-latin1"
#keymap="de-latin1-nodeadkeys"
</pre>
}}
</div>

=== systemd ===

<div class="mw-translate-fuzzy">
Avec systemd, l'agencement de clavier utilisé par la console peut être défini en utilisant la commande <code>localectl</code>. Commencez par vérifier les agencements disponibles :
</div>

{{RootCmd|localectl list-keymaps}}

<div class="mw-translate-fuzzy">
Puis, définissez quel agencement vous voulez pour la console :
</div>

{{RootCmd|localectl set-keymap it}}

Pour terminer, vérifiez si l'agencement a été correctement pris en compte :

{{RootCmd|<nowiki>localectl | grep "VC Keymap"</nowiki>|output=<pre>
       VC Keymap: it
</pre>}}

== Agencement de clavier pour le serveur  X  ==

=== OpenRC ===

<div class="mw-translate-fuzzy">
L'agencement de clavier qui sera utilisé par le serveur X est défini dans le fichier {{Path|/etc/X11/xorg.conf}}  par l'option <code>XkbLayout</code>.
</div>

=== systemd ===

<div class="mw-translate-fuzzy">
Avec systemd, l'agencement de clavier pour le serveur X11 peut être défini en utilisant la commande <code>localectl</code>. Commencez par consulter les agencements disponibles pour X11 :
</div>

{{RootCmd|localectl list-x11-keymap-layouts}}

<div class="mw-translate-fuzzy">
Puis définissez l'agencement que vous voulez pour X11 :
</div>

{{RootCmd|localectl set-x11-keymap it}}

Pour terminer, vérifiez si l'agencement de clavier pour le serveur X11 a été correctement pris en compte :

{{RootCmd|<nowiki>localectl | grep "X11 Layout"</nowiki>|output=<pre>
      X11 Layout: it
</pre>}}

<div class="mw-translate-fuzzy">
== NLS ==
</div>

<div class="mw-translate-fuzzy">
Pour que la localisation basée sur les messages fonctionne dans les programmes qui en assurent la prise en charge, vous devez probablement compiler ces programmes avec l'option <code>nls</code> (Native language support) de la variable USE activée. La plupart des programmes utilisant nls ont aussi besoin de la bibliothèque gettext pour extraire et utiliser les messages localisés. Bien sur, Portage l'installera automatiquement si besoin est.
</div>

<div class="mw-translate-fuzzy">
Après avoir activé l'option  <code>nls</code> de la variable USE, il peut être nécessaire de réinstaller certains paquets :
</div>

<div class="mw-translate-fuzzy">
{{Emerge|params+=--newuse --deep --with-bdeps=y|@world}}
</div>

== LINGUAS ==

{{Warning|LINGUAS causes packages to implicitly skip locales. When using it, the package manager cannot determine which locales were omitted. Do not use LINGUAS if you intend to redistribute binary packages.}}

There is also an additional <var>LINGUAS</var> variable that is used by some gettext-based build systems to control which localization files are built and installed. The variable takes in ''space''-separated list of language codes, and a suggested place to set it is {{Path|[[:/etc/portage/make.conf|/etc/portage/make.conf]]}}: 

{{RootCmd|nano -w /etc/portage/make.conf|output=<pre>
## (Ajout de la variable  LINGUAS. Par exemple pour l'allemand, le finnois et l'anglais:)
LINGUAS="de fi en"
</pre>}}

Note that there is a large difference between <var>LINGUAS</var> being unset and being set to an empty value: with <code>LINGUAS=""</code>, most ebuilds would install only the packages' default language but none of the <code>LC_MESSAGES</code> files.

== L10N ==

A <var>USE_EXPAND</var> variable called <var>L10N</var> decides which extra localization support will be installed. This is commonly used for downloads of additional language packs by packages. Similar to <var>LINGUAS</var>, the variable takes a space separated list of language tags, and it can be set in {{Path|/etc/portage/make.conf}}:

{{RootCmd|nano -w /etc/portage/make.conf|output=<pre>
## (Add in the L10N variable. For instance, for German and Brazilian Portuguese:)
L10N="de pt-BR"
</pre>}}

To set it per-package, edit {{Path|[[:/etc/portage/package.use]]}} and prefix the requested language packs with "l10n_", as shown in the next example:

{{FileBox|filename=/etc/portage/package.use|lang=bash|1=
app-text/aspell l10n_de l10n_pt-BR
}}

Note that while the common two letter language codes (like <code>de</code> or <code>fr</code>) are identical in <var>LINGUAS</var> and <var>L10N</var>, more complex entries have a different syntax because <var>L10N</var> uses [https://www.w3.org/International/articles/language-tags/ IETF language tags] (aka BCP 47). For example, <code>pt_BR</code> and <code>sr@latin</code> in <var>LINGUAS</var> become <code>pt-BR</code> and <code>sr-Latn</code> in <var>L10N</var>, respectively.

A list of <var>L10N</var> values that can be used is provided as {{Path|/var/db/repos/gentoo/profiles/desc/l10n.desc}}:

{{Cmd|grep -i portuguese /var/db/repos/gentoo/profiles/desc/l10n.desc|output=<pre>
pt - Portuguese
pt-BR - Portuguese (Brazil)
pt-PT - Portuguese (Portugal)
</pre>}}

After setting the <var>L10N</var> <var>USE_EXPAND</var> variable it may be necessary to re-emerge some packages:

{{Emerge|params+=--changed-use --deep --with-bdeps=y|@world}}

== See also ==


* [[Handbook:AMD64/Installation/Base#Configure_locales|Configuring locales]] (Gentoo Handbook)
* [[Evdev#Keyboard_layout|Keyboard layout]] inside the Evdev article
* [[X resources]]
* {{See also|Localization/Guide/The Euro symbol}}

== External resources == 

* [https://www.gnu.org/software/libc/manual/html_node/Locales.html Locales and Internationalization] (gnu.org)
* [https://gentoo.org/support/news-items/2016-06-23-l10n-use_expand.html L10N USE_EXPAND variable replacing LINGUAS]
* [https://blogs.gentoo.org/mgorny/2016/05/16/how-linguas-are-thrice-wrong/ Michał Górny: How LINGUAS are thrice wrong!]
* [https://archives.gentoo.org/gentoo-dev/message/a08ea09c2c8e534fd9bc1146703c66ff <nowiki>[gentoo-dev] [RFC] How to deal with LINGUAS mess?</nowiki>]
* [https://archives.gentoo.org/gentoo-dev/message/41e09d1ddc8b30abb9f9d21d205b7b82 <nowiki>[gentoo-dev] [RFC] Masterplan for solving LINGUAS problems</nowiki>]

== References ==

{{reflist}}


[[Category:Localization]] {{Migrated|originalauthors=Alexander Holler, Steven Lucy, Benny Chuang, Lars Weiler, Tobias Scherbaum, Flammie Pirinen, {{Dev|nightmorph}}, {{Dev|klondike}}}}
