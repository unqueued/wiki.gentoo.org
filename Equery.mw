<languages />
{{InfoBox stack
|{{InfoBox wikipedia|Gentoolkit|header=true}}
|{{InfoBox gitweb|gentoolkit.git}}
|{{InfoBox project|Portage-Tools}}
}}
<translate>

<!--T:71-->
{{c|equery}} is [[Article description::a tool to make several common Portage operations simpler]]. Among other operations, it can display package dependencies, metadata, and installed files.

== Installation == <!--T:72-->

=== Emerge === <!--T:156-->

<!--T:75-->
Equery is part of a toolset installed with the {{Package|app-portage/gentoolkit}} package:

<!--T:74-->
{{Emerge|app-portage/gentoolkit}}

<!--T:157-->
For more information on installing {{c|equery}} or other tools visit the [[Gentoolkit|Gentoolkit]] article.

== Usage == <!--T:76-->

=== Introduction === <!--T:77-->

<!--T:78-->
{{c|equery}} is a tool that displays useful information about the installed packages on the system. {{c|equery}} is based on a system of modules. Every module has a shorthand name. For example, running {{c|equery l gcc}} is the same as running {{c|equery list gcc}}. Invoking the <code>--help</code> option ({{c|equery --help}}) will output global options and list all available modules and their shorthand names. Adding a module name to the end ({{c|equery --help module}}) will display the help screen for that specific module. Lastly, executing {{c|man equery}} will also provide a detailed explanation of all available modules and options along with some useful examples. 

<!--T:79-->
Below is a list of features that work over the majority of modules. 

<!--T:80-->
{{Cmd|equery --quiet list gcc|output=<pre>
sys-devel/gcc-4.3.2-r3
</pre>}}

<!--T:81-->
{{Cmd|equery --quiet list sys-devel/gcc|output=<pre>
sys-devel/gcc-4.3.2-r3
</pre>}}

<!--T:82-->
{{Cmd|equery --quiet list '>{{=}}sys-devel/gcc-4'|output=<pre>
sys-devel/gcc-4.3.2-r3
</pre>}}

<!--T:83-->
Like {{c|emerge}}, {{c|equery}} does not understand partial package names:

<!--T:84-->
{{Cmd|equery check zilla|output=<pre>
!!! No package found matching zilla
</pre>}}

<!--T:85-->
Unlike {{c|emerge}}, {{c|equery}} can accept shell-like globbing in the category and/or package name:

<!--T:86-->
{{Cmd|equery check '*zilla*'|output=<pre>
 * Checking www-client/mozilla-firefox-3.0.14 ...
    90 out of 90 files passed
</pre>}}

<!--T:87-->
{{Cmd|equery check 'www-c*/*'|output=<pre>
 * Checking www-client/links-2.2 ...
   30 out of 30 files passed
 * Checking www-client/mozilla-firefox-3.0.14 ...
   90 out of 90 files passed
</pre>}}

<!--T:88-->
Most equery modules take multiple input:

<!--T:89-->
{{Cmd|equery hasuse sse sse2|output=<pre>
 * Searching for USE flag sse ...
[IP-] [  ] media-libs/flac-1.2.1-r3 (0)
[IP-] [  ] media-libs/speex-1.2_beta3_p2 (0)
  
 * Searching for USE flag sse2 ...
[IP-] [  ] dev-libs/openssl-0.9.8k (0)
[IP-] [  ] x11-libs/pixman-0.16.0 (0)
</pre>}}

<!--T:90-->
A few modules also allow full regular expressions:

<!--T:91-->
{{Cmd|equery -q list --portage-tree --full-regex '[kr]?flickr.*'|output=<pre>
dev-dotnet/flickrnet-bin-2.2
dev-ruby/flickr-1.0.2-r1
dev-ruby/flickr-1.0.2-r2
dev-ruby/rflickr-20060201
media-gfx/kflickr-0.6
[...]
</pre>}}

<!--T:92-->
{{Note|Globbing support replaced a number of older options in {{c|equery}}. For example, to act on all packages in a certain set, use a <code>'*'</code> (asterisk). To act on all packages in a category, use <code>'category-name/*'</code>.}}

<!--T:93-->
{{Warning|Do not forget to '''quote input when using special shell characters''' like asterisks or greater than/less than signs.}}

<!--T:94-->
The next few sections in this document give a quick introduction to the different {{c|equery}} modules.

=== Capabilities === <!--T:95-->

<!--T:96-->
To see a list of all equery's capabilities, simply run it without arguments: 

<!--T:97-->
{{Cmd|equery|output=<pre>
Gentoo package query tool
Usage: equery [global-options] module-name [module-options]
 
modules (short name)
 (b)elongs               list what package FILES belong to
 (c)hanges               list changelog entries for ATOM
 chec(k)                 verify checksums and timestamps for PKG
 (d)epends               list all packages directly depending on ATOM
 dep(g)raph              display a tree of all dependencies for PKG
 (f)iles                 list all files installed by PKG
 h(a)s                   list all packages for matching ENVIRONMENT data stored in /var/db/pkg
 (h)asuse                list all packages that have USE flag
 ke(y)words              display keywords for specified PKG
 (l)ist                  list package matching PKG
 (m)eta                  display metadata about PKG
 (s)ize                  display total size of all files owned by PKG
 (u)ses                  display USE flags for PKG
 (w)hich                 print full path to ebuild for PKG
</pre>}}

=== Aliases === <!--T:98-->

<!--T:99-->
A common approach to working with {{c|equery}} is to create aliases. When using bash these can usually be placed in the {{Path|~/.bashrc}} file:

<!--T:100-->
{{FileBox|filename=~/.bashrc|lang=bash|1=
alias eqf='equery f'
alias equ='equery u'
alias eqh='equery h'
alias eqa='equery a'
alias eqb='equery b'
alias eql='equery l'
alias eqd='equery d'
alias eqg='equery g'
alias eqc='equery c'
alias eqk='equery k'
alias eqm='equery m'
alias eqy='equery y'
alias eqs='equery s'
alias eqw='equery w'
}}

=== Finding the package that a file came from with belongs (b) === <!--T:101-->

<!--T:102-->
{{Cmd|equery belongs -e /usr/bin/glxgears|output=<pre>
 * Searching for /usr/bin/glxgears ...
 x11-apps/mesa-progs-7.5.1 (/usr/bin/glxgears)
</pre>}}

<!--T:103-->
<code>belongs</code> can search for files matching a regular expression with the <code>-f</code> option. The <code>-e</code> option stops searching after it finds a match. Since no file on your system should be owned by two packages, this is a safe optimization. 

<!--T:104-->
A short version of <code>belongs</code> (<code>b</code>) can also be used. For example, to list what package {{c|equery}} belongs to:

<!--T:105-->
{{Cmd|equery b equery|output=<pre>
 * Searching for equery ... 
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib/python-exec/python2.7/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python3.3/site-packages/gentoolkit/test/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/bin/equery -> ../lib/python-exec/python-exec2)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python2.7/site-packages/gentoolkit/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib/python-exec/python3.3/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python2.7/site-packages/gentoolkit/test/equery)
app-portage/gentoolkit-0.3.0.8-r2 (/usr/lib64/python3.3/site-packages/gentoolkit/equery)
</pre>}}

=== Viewing ChangeLog entries with changes (c) === <!--T:106-->

<!--T:107-->
<code>changes</code> lets the user view ChangeLog entries for a package version or range of versions. Imagine after running an {{c|emerge --sync}} Portage prints out a message saying it is going to be upgraded. To see what has changed this command can be used:

<!--T:108-->
{{Cmd|equery changes portage|output=<pre>
*portage-2.1.6.13 (03 May 2009)
  
  03 May 2009; Zac Medico <zmedico@gentoo.org> +portage-2.1.6.13.ebuild:
  2.1.6.13 bump. This fixes bug #268398 (document econf automatic die)
  and bug #267104 (handle insufficient space interaction with userfetch).
  Bug #268228 tracks all bugs fixed since 2.1.6.11.
</pre>
}}

=== Verifying package integrity with check (k) === <!--T:109-->

<!--T:110-->
Sometimes it is useful to check a package's integrity. {{c|equery}} can verify MD5 sums as well as timestamps to indicate when a package might have been corrupted, replaced, or removed. 

<!--T:111-->
{{Cmd|equery check gentoolkit|output=<pre>
 * Checking app-portage/gentoolkit-0.3.0_rc7 ...
   71 out of 71 files passed
</pre>
}}

=== Listing all packages depending on a package with depends (d) === <!--T:112-->

<!--T:113-->
Ever wonder why a certain package has been installed on the system? {{c|equery}} can tell which packages list it as a dependency with <code>depends</code>. Include indirect dependencies with the <code>-D</code> option.

<!--T:114-->
{{Cmd|equery depends pygtk|output=<pre>
 * Searching for pygtk ...
app-admin/pessulus-2.24.0 (>=dev-python/pygtk-2.6.0)
app-editors/gedit-2.24.3 (python ? >=dev-python/pygtk-2.12)
dev-libs/libgweather-2.24.3 (python ? >=dev-python/pygtk-2)
dev-python/gnome-python-base-2.22.3 (>=dev-python/pygtk-2.10.3)
dev-python/gnome-python-desktop-base-2.24.1 (>=dev-python/pygtk-2.10.3)
[...]
</pre>
}}

<!--T:115-->
A second example lists all packages directly depending on udev:

<!--T:116-->
{{Cmd|equery d udev|output=<pre>
sys-auth/consolekit-0.4.5_p20120320 (acl ? >=sys-fs/udev-146-r1)
sys-fs/cryptsetup-1.4.1 (>=sys-fs/udev-124)
                        (>=sys-fs/udev-182[static-libs])
                        (<=sys-fs/udev-171-r6)
sys-fs/lvm2-2.02.88 (>=sys-fs/udev-151-r4)
virtual/dev-manager-0 (sys-fs/udev)
x11-libs/cairo-1.10.2-r2 (drm ? >=sys-fs/udev-136)
</pre>}}

<!--T:158-->
{{Note|1=This output will include optional dependencies governed by USE flags, i.e. <code>acl</code> USE in <code>(acl ? >=sys-fs/udev-146-r1)</code> above, even if that USE flag is not active.  A package would only be a dependency if that USE flag is active.}}

=== Getting dependency graphs with depgraph (g) === <!--T:117-->

<!--T:118-->
<code>depgraph</code> is the opposite of <code>depends</code>. It will find all ebuilds that a given package depends on (not the ebuilds that depend on that package). When it finds a dependency, it will recursively search ''that'' package's dependencies. Control how deep the tree gets with the <code>--depth</code> option. 

<!--T:119-->
{{Cmd|equery depgraph mozilla-firefox|output=<pre>
 * Searching for mozilla-firefox ...
 * dependency graph for www-client/mozilla-firefox-2.0.0.19:
`-- www-client/mozilla-firefox-2.0.0.19
 `-- virtual/jre-1.6.0 (virtual/jre) [java]
  `-- virtual/jdk-1.6.0 (virtual/jdk-1.6.0*)
  `-- dev-java/icedtea6-bin (unable to resolve: package masked or removed)
   `-- dev-java/sun-jdk-1.6.0.15
    `-- dev-java/java-sdk-docs-1.6.0.10 [doc]
     `-- app-arch/unzip-6.0-r1
      `-- app-arch/bzip2-1.0.5-r1 [bzip2]
    `-- sys-libs/glibc-2.9_p20081201-r2
     `-- sys-devel/gettext-0.17 [nls]
      `-- virtual/libiconv-0 (virtual/libiconv)
[...]
</pre>
}}

<!--T:120-->
Notice how <code>jre</code> is a ''direct'' dependency and <code>jdk</code> is an ''indirect'' dependency if the <code>java</code> USE is set?

=== Listing files installed by a package with files (f) === <!--T:121-->

<!--T:122-->
{{c|equery}} can list all the files installed by an ebuild with the <code>files</code> module. Try <code>--tree</code> to get an easy to read directory layout. Use <code>--filter</code> to only find a certain type of file. For example, to find where executables were installed use <code>--filter=cmd</code>, or to quickly find the configuration file location try <code>--filter=conf</code>. 

<!--T:123-->
{{Cmd|equery files --tree gentoolkit|output=<pre>
 * Searching for gentoolkit ...
 * Contents of app-portage/gentoolkit-0.3.0_rc7:
 /etc
   > /eclean
      + distfiles.exclude
      + packages.exclude
   > /env.d
      + 99gentoolkit-env
   > /revdep-rebuild
      + 99revdep-rebuild
 /usr
   > /bin
      + eclean
      + eclean-dist -> eclean
      + eclean-pkg -> eclean
      + epkginfo
      + equery
      + eread
      + euse
      + glsa-check
      + revdep-rebuild
   > /lib
      > /python2.6
         > /site-packages
            > /gentoolkit
            + gentoolkit-0.3.0_rc7-py2.6.egg-info
               + __init__.py
               > /equery
                  + __init__.py
                  + belongs.py
                  + changes.py
                  + check.py
                  + depends.py
                  + depgraph.py
                  + files.py
[...]
</pre>
}}

<!--T:124-->
Another example, to list all files installed by {{Package|media-sound/ncmpcpp}}:

<!--T:125-->
{{Cmd|equery f ncmpcpp|output=<pre>
 * Searching for ncmpcpp ...
 * Contents of media-sound/ncmpcpp-0.5.10:
/usr
/usr/bin
/usr/bin/ncmpcpp
/usr/share
/usr/share/bash-completion
/usr/share/bash-completion/ncmpcpp
/usr/share/doc
/usr/share/doc/ncmpcpp-0.5.10
/usr/share/doc/ncmpcpp-0.5.10/AUTHORS.bz2
/usr/share/doc/ncmpcpp-0.5.10/NEWS.bz2
/usr/share/doc/ncmpcpp-0.5.10/config.bz2
/usr/share/doc/ncmpcpp-0.5.10/keys.bz2
/usr/share/man
/usr/share/man/man1
/usr/share/man/man1/ncmpcpp.1.bz2
</pre>}}

<!--T:126-->
Descriptions of other modules and additional command line flags can be found in the equery [[man page]] ({{c|man equery}}).

=== Looking for packages that have a specific USE flag with hasuse (h) === <!--T:127-->

<!--T:128-->
<code>hasuse</code> can be used to find packages with a given USE flag. <code>hasuse</code> will not indicate if the flag has been enabled or not; it simply outputs a list of ebuilds that have the queried flag as an option. See the EXAMPLES section of <code>hasuse</code> in the {{c|equery}} man page for more tip on getting this kind of information.

<!--T:129-->
{{Cmd|equery hasuse qt3 qt4|output=<pre>
 * Searching for USE flag qt3 ...
[IP-] [  ] app-crypt/pinentry-0.7.5 (0)
[IP-] [  ] net-dns/avahi-0.6.24-r2 (0)
[IP-] [  ] net-wireless/wpa_supplicant-0.6.9 (0)
  
 * Searching for USE flag qt4 ...
[IP-] [  ] net-dns/avahi-0.6.24-r2 (0)
[IP-] [  ] net-wireless/wpa_supplicant-0.6.9 (0)
</pre>
}}

=== Listing packages with list (l) === <!--T:130-->

<!--T:131-->
<code>list</code> is a simple, yet powerful module to list packages that are installed, in the Portage tree or in an overlay.

<!--T:132-->
{{Cmd|equery list '*'|output=<pre>
 * Searching for * ...
[IP-] [  ] app-admin/eselect-1.2.3 (0)
[IP-] [  ] app-admin/eselect-ctags-1.10 (0)
[IP-] [  ] app-admin/eselect-esd-20060719 (0)
[IP-] [  ] app-admin/eselect-fontconfig-1.0 (0)
[IP-] [  ] app-admin/eselect-opengl-1.0.8-r1 (0)
[IP-] [  ] app-admin/eselect-python-20090824 (0)
[IP-] [  ] app-admin/eselect-ruby-20081227 (0)
[IP-] [  ] app-admin/eselect-vi-1.1.5 (0)
[IP-] [  ] app-admin/perl-cleaner-1.05 (0)
[IP-] [  ] app-admin/pessulus-2.24.0 (0)
[IP-] [  ] app-admin/python-updater-0.7 (0)
[IP-] [  ] app-admin/sudo-1.7.2_p1 (0)
[...]
</pre>
}}

<!--T:133-->
The standard query will search installed packages for the given package name. Passing in <code>'*'</code> displays all packages in the set. In the leftmost field it is possible to see all the above packages are <code>I</code>(nstalled) and from the <code>P</code>(ortage) tree. They are not masked (the second field is blank), and they are all installed in the default slot (0).

<!--T:134-->
Use local options to look for packages in the Portage tree and overlays. 

<!--T:135-->
{{Cmd|equery list -po vim|output=<pre>
 * Searching for vim ...
[-P-] [  ] app-editors/vim-7.0.235 (0)
[-P-] [ ~] app-editors/vim-7.0.243 (0)
[-P-] [  ] app-editors/vim-7.1.123 (0)
[-P-] [ ~] app-editors/vim-7.1.330 (0)
[-P-] [  ] app-editors/vim-7.2 (0)
[-P-] [ ~] app-editors/vim-7.2.108 (0)
[IP-] [  ] app-editors/vim-7.2.182 (0)
[-P-] [ ~] app-editors/vim-7.2.238 (0)
[-P-] [ ~] app-editors/vim-7.2.264 (0)
</pre>
}}

<!--T:136-->
It is possible to see that version 7.2.182 is installed and that there are no versions available from an overlay. Users can see which versions are keyword masked by the <code>~</code> in the second field.

=== Viewing package metadata with meta (m) === <!--T:137-->

<!--T:138-->
Each package in the Portage tree provides at least some [https://devmanual.gentoo.org/ebuild-writing/misc-files/metadata/index.html metadata] about its maintainer, etc. The amount of useful information depends on how much package maintainers decide to provide. With no options, <code>meta</code> returns some basic useful information.

<!--T:139-->
{{Cmd|equery meta gnucash|output=<pre>
 * app-office/gnucash [gentoo]
 Maintainer:  tove@gentoo.org (Torsten Veller)
 Upstream:    None specified
 Location:    /usr/portage/app-office/gnucash
 Keywords:    2.2.9-r1:0: alpha amd64 ppc sparc x86
 Keywords:    2.2.9-r2:0:
 Keywords:    2.3.8:0:
 Keywords:    2.3.10:0: ~alpha ~amd64 ~ppc ~sparc ~x86
</pre>
}}

<!--T:140-->
Some maintainers provide extra information about a package, which can be very useful: 

<!--T:141-->
{{Cmd|equery meta --description emacs|output=<pre>
 * app-editors/emacs
  GNU Emacs is an extensible, customizable text editor - and more. At its core
  is an interpreter for Emacs Lisp, a dialect of the Lisp programming language
  with extensions to support text editing. The features of GNU Emacs include:
   * Content-sensitive editing modes, including syntax coloring, for a wide
     variety of file types including plain text, source code, and HTML.
   * Complete built-in documentation, including a tutorial for new users.
   * Support for many languages and their scripts, including all the European
     "Latin" scripts, Russian, Greek, Japanese, Chinese, Korean, Thai,
     Vietnamese, Lao, Ethiopian, and some Indian scripts.
   * Highly customizable, using Emacs Lisp code or a graphical customization
     interface.
   * A large number of extensions that add other functionality, including a
     project planner, mail and news reader, debugger interface, calendar, and
     more. Many of these extensions are distributed with GNU Emacs; others are
     available separately.
</pre>
}}

=== Finding package sizes with size (s) === <!--T:142-->

<!--T:143-->
Ever been curious to find out how much space a specific package is occupying? Since a package could have its files over a number of directories, the usual {{c|du -hc}} command might not give the correct figure. Don't worry, {{c|equery}} to the rescue!

<!--T:144-->
{{Cmd|equery size openoffice-bin|output=<pre>
 * app-office/openoffice-bin-3.1.1
         Total files : 4624
         Total size  : 361.38 MiB
</pre>
}}

<!--T:145-->
Using <code>size</code> prints the total space used in human-readable units and lists the total number of files the package has. To get the total size in bytes use <code>--bytes</code>.

=== Listing per-package USE flags with uses (u) === <!--T:70-->

<!--T:146-->
{{c|equery}}'s <code>uses</code> module can provide information about what USE flags are available for a specific package and which of those flags is currently enabled. 

<!--T:147-->
{{Cmd|equery uses gst-plugins-meta|output=<pre>
 * Searching for gst-plugins-meta ...
[ Legend : U - flag is set in make.conf       ]
[        : I - package is installed with flag ]
[ Colors : set, unset                         ]
 * Found these USE flags for media-plugins/gst-plugins-meta-0.10-r2:
 U I
 + + X      : Adds support for X11
 - - a52    : Enables support for decoding ATSC A/52 streams used in DVD
 + + alsa   : Adds support for media-libs/alsa-lib (Advanced Linux Sound
              Architecture)
 - - dvb    : Adds support for DVB (Digital Video Broadcasting)
 + + dvd    : Adds support for DVDs
 + + esd    : Adds support for media-sound/esound (Enlightened Sound Daemon)
 + + ffmpeg : Enable ffmpeg-based audio/video codec support
 + + flac   : Adds support for FLAC: Free Lossless Audio Codec
 - - mad    : Adds support for mad (high-quality mp3 decoder library and cli
              frontend)
 + + mpeg   : Adds libmpeg3 support to various packages
 - - mythtv : Support for retrieval from media-tv/mythtv backend
 + + ogg    : Adds support for the Ogg container format (commonly used by
              Vorbis, Theora and flac)
 - - oss    : Adds support for OSS (Open Sound System)
 + + theora : Adds support for the Theora Video Compression Codec
 + + vorbis : Adds support for the OggVorbis audio codec
 - - xv     : Adds in optional support for the Xvideo extension (an X API for
              video playback)
</pre>
}}

<!--T:148-->
Here a number of USE flags are enabled in gstreamer's plugin meta-package, but it can be seen that there are other USE flags available. For more information on USE flags, please refer to the [[Handbook:X86/Working/USE|USE Flags]] chapter of the [[Handbook:Main Page|Gentoo Handbook]]. 

=== Finding the ebuild path with which (w) === <!--T:149-->

<!--T:150-->
<code>which</code> is a simple script to help users quickly find the file path to an ebuild. If an unversioned package name is passed using <code>which</code> it will return the path to the newest installable ebuild version. In other words, it would return the ebuild Portage would use if {{c|emerge example/package}} was typed. <code>which</code> also accepts a ''versioned'' package to get the path to that ebuild. 

<!--T:151-->
{{Cmd|equery which gnome|output=<pre>
/usr/portage/gnome-base/gnome/gnome-2.26.3.ebuild
</pre>
}}

<!--T:152-->
Lastly, if none of the above features of {{c|equery}} have provided an answer, try using <code>which</code> to manually search an ebuild with programs like {{c|cat}}, {{c|less}} or {{c|grep}}: 

<!--T:153-->
{{Cmd|grep HOMEPAGE $(equery which gentoolkit)|output=<pre>
HOMEPAGE="http://www.gentoo.org/proj/en/portage/tools/index.xml"
</pre>
}}

<!--T:154-->
{{Warning|Be aware that {{c|equery}} currently changes the format of the output if it is sent through a pipe. The piped format is intended to be easier to parse by tools, but it can be turned off by adding the <code>--no-pipe</code> option. When writing scripts that employ {{c|equery}} be aware of this behavior.}}

== See also == <!--T:155-->

<!--T:23-->
* {{See also|Q applets}}
* {{See also|Eix}}
* {{See also|Gentoolkit}}
* {{See also|Useful_Portage_tools}}
</translate>
[[Category:Portage tools]]
