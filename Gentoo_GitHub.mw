<big>'''Hello fellow contributor!'''</big>

Thank you for helping the Gentoo project and considering sending a Pull Request via GitHub! Contributions are always welcome and highly appreciated.

Before hitting the "Create pull request" button on GitHub, we would like to remind you a few rules to facilitate the process as much as possible, make our lives (and yours!) easier and have your contribution quickly accepted.

We won't accept PRs which do not follow these guidelines and will remind you about them in the PR.

=== Pull request? What kind of sorcery is this? ===

Making a Pull Request is explained at length in the various how-tos put together by the GitHub folks. If you're not familiar with git and pull requests, here are two must-read how-tos:

<ul class="fa-ul">
  <li><i class="fa-li fa fa-arrow-circle-right" style="color: blue"></i>[https://help.github.com/articles/fork-a-repo/ Fork the Gentoo repository]</li>
  <li><i class="fa-li fa fa-arrow-circle-right" style="color: blue"></i>[https://help.github.com/articles/using-pull-requests/ Using pull requests]</li>
</ul>

=== Use of repoman ===

We strongly encourage the use of the {{c|[[Repoman|repoman]]}} utility (installed with {{Package|sys-apps/portage}} itself) which performs various QA checks against ebuilds, as well as updates the manifest and pre-formats a commit message for you. One of the first checks done on an ebuild is to verify it with the command {{c|repoman -dx full}}, so you should at least run this before committing. You can also use repoman to make commits using {{c|repoman -dx commit}}. When using repoman, run it from the lowest point in the repository possible (as in, within the ebuild directory) otherwise it may try checking all ebuilds below the current directory!

=== Commit format ===

Commits must respect a special format. If you've already taken a look at the repository log, most commits begin with "CATEGORY/PN: some message". We expect you to format your commits the same way. As you will be using repoman to make your commit, it should already preformat the commit message for you. However, if you are making a commit to a file which is not an ebuild, please take a look at this link: [https://devmanual.gentoo.org/ebuild-maintenance/index.html#git-commit-message-format Commit message format].

=== Manifest files ===

If your PR bumps a package, commit the updated Manifest file along with all your changes. If you don't, Larry the Cow our QA bot will flag up errors across the various checks performed.

=== Separate (or "atomic") commits ===

Avoid big, fat, massive commits. If your PR involves a version bump as well as cleaning up an old version and modifying the metadata.xml file, do commit these three changes separately. We need to go back in time in case something goes wrong and therefore, having separate commits for each and every change happening in the repository is the only way to achieve that.

=== External links ===

Feel free to add as much information as possible: upstream forums, mailing lists, discussions, links to changelogs, etc. Your commit will appear in the ebuild ChangeLog file.

=== Bug report ===

If your PR solves a bug, mention it using the header <code>Gentoo-Bug: https://bugs.gentoo.org/12345</code>.

=== Ping maintainers ===

Once your PR is filed, if the maintainer has a GitHub account, ping him/her using <code>@</code> followed by his/her user account. We've created Github groups which can be pinged at once: for instance <code>@gentoo/gnome</code> will ping the gnome team, <code>@gentoo/java</code> the Java team and so forth. Unfortunately, not all Gentoo projects have been mapped as GitHub groups yet.
In any case, maintainers must know the existence of your PR. You can see a package's maintainers by either looking at {{Path|${PORTDIR}/${category}/${package-name}/metadata.xml}} or using {{c|equery meta $category/$package}} from {{Package|app-portage/gentoolkit}}.

Happy GitHubing!

== <i class="fa fa-question fa-2"></i> Q & A <i class="fa fa-question fa-2"></i> ==

=== gentoo-repo-qa-bot is engaging in a conversation with me in the PR. I don't understand. ===

We have set up an automated CI system which performs various QA checks when a PR is filed. These checks may result in two possible outcomes displayed next to your PR:

<ul class="fa-ul">
  <li><i class="fa-li fa fa-check" style="color: green"></i>a green check-mark meaning everything's fine and your PR isn't offending the tree.</li>
  <li><i class="fa-li fa fa-times" style="color: red"></i>a red cross meaning something is up and your PR needs fixing.</li>
</ul>

Our QA bot is chatty when a red cross shows up. At this point, it might point out two types of error:

<blockquote>
<i class="fa fa-hand-o-right fa-3"></i>
Issues persisted from underlying repository state:
</blockquote>

This error means that unfortunately, you forked the tree whilst it was in a very unstable state (meaning broken). Indeed, every now and then developers break the tree and, tough luck, it turns out you forked the tree into your Github dev space or synced it up at this very moment. But no big deal as there's nothing for you to do.

<blockquote>
<i class="fa fa-hand-o-right fa-3"></i>
New issues:
</blockquote>

This error is a bit more serious and means your PR isn't complying with our QA standards. Usually, one or more link(s) are displayed right below for you to visualise in a browser what it's all about. Go ahead, take a look and fix those errors. Push again and wait for the bot to go over your PR again (every half hour) until a green check-mark appears.

== See also ==

* [[Gentoo git workflow]]

[[Category:Project and Community]]
