<languages />

{{Metadata|abstract=nginx は強固で小さく高性能なウェブサーバ / リバースプロキシサーバです。Apache や lighttpd と同様に支持されているウェブサーバとして良い選択肢です。}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|https://nginx.org/ja/|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox odoc|https://nginx.org/en/docs/}}
}}

'''nginx''' は[[Article description::強固で小さく高性能な[[:Category:Web Servers|ウェブサーバ]] / リバースプロキシサーバです。]][[Apache]] や [[lighttpd]] と同様に支持されているウェブサーバとして良い選択肢です。

== インストール ==

{{Package|www-servers/nginx}} パッケージのインストールを始める前に、まずはNginx向けの適切なUSEフラグを設定します。

=== Expanded USE flags ===

Nginxはモジュールによって機能が拡張されます。このモジュールによるアプローチの管理をより簡潔にするために、nginxのebuildではexpanded USE (<var>[[USE_EXPAND]]</var>) flagsを用い、どのモジュールをインストールするか指定されます。

* HTTP に関連するモジュールは <var>NGINX_MODULES_HTTP</var> 変数を介して有効化できます。
* メールに関連するモジュールは <var>NGINX_MODULES_MAIL</var> 変数を介して有効化できます。
* サードパーティモジュールは <var>NGINX_ADD_MODULES</var> 変数を介して有効化できます。

これらの変数は{{Path|/etc/portage/make.conf}}に設定する必要があります。詳しい解説は {{Path|[https://gitweb.gentoo.org/repo/gentoo.git/plain/profiles/desc/nginx_modules_http.desc /var/db/repos/gentoo/profiles/desc/nginx_modules_http.desc]}} と {{Path|[https://gitweb.gentoo.org/repo/gentoo.git/plain/profiles/desc/nginx_modules_mail.desc /var/db/repos/gentoo/profiles/desc/nginx_modules_mail.desc]}} にあります。

例えば、<code>fastcgi</code>モジュールを有効にするには:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
NGINX_MODULES_HTTP="fastcgi"
}}

上記の設定は <var>NGINX_MODULES_HTTP</var> のデフォルト値を上書きして <code>fastcgi</code> に設定します。デフォルトの <var>NGINX_MODULES_HTTP</var> 値を上書きせずに <code>fastcgi</code> モジュールを有効化するには、次の USE フラグ記述を {{Path|[[:/etc/portage/package.use]]}} に指定することで行えます:

{{FileBox|filename=/etc/portage/package.use|lang=bash|1=
www-servers/nginx NGINX_MODULES_HTTP: fastcgi
}}

=== USE フラグ ===

{{USEflag|package=www-servers/nginx}}

=== Emerge ===

USE フラグを設定したら、{{Package|www-servers/nginx}} をインストールします:

{{Emerge|www-servers/nginx}}

=== Installation verification ===

The default nginx configuration defines a virtual server with the root directory set to {{Path|/var/www/localhost/htdocs}}. However due to {{Bug|449136}}, the nginx ebuild will only create the {{Path|/var/www/localhost}} directory and without an index file. To have a working default configuration, create the {{Path|/var/www/localhost/htdocs}} directory and simple index file:

{{RootCmd
|mkdir /var/www/localhost/htdocs
|echo 'Hello, world!' > /var/www/localhost/htdocs/index.html
}}

nginxパッケージはinitサービススクリプトをインストールし、それを使ってシステム管理者はnginxを停止、起動、及び再起動することができます。nginxサービスを起動するには次のコマンドを実行します:

{{RootCmd|/etc/init.d/nginx start}}

nginx が正常に動作しているか確認するには、ブラウザで [[http://localhost http://localhost]] にアクセスするか、コマンドライン上で動く {{c|curl}} などを使います:

{{Cmd|curl <nowiki>http://localhost</nowiki>}}

== 設定 ==

nginxの設定は{{Path|/etc/nginx/nginx.conf}}ファイルを通して行います。

=== 単一サイト利用 ===

以下は、([[PHP]]のような)ダイナミック生成を用いない単一サイト利用の例です。

{{FileBox|filename=/etc/nginx/nginx.conf|title=Gentooのデフォルト設定|1=
user nginx nginx;
worker_processes 1;
 
error_log /var/log/nginx/error_log info;
 
events {
	worker_connections 1024;
	use epoll;
}
 
http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
 
	log_format main
		'$remote_addr - $remote_user [$time_local] '
		'"$request" $status $bytes_sent '
		'"$http_referer" "$http_user_agent" '
		'"$gzip_ratio"';
 
	client_header_timeout 10m;
	client_body_timeout 10m;
	send_timeout 10m;
 
	connection_pool_size 256;
	client_header_buffer_size 1k;
	large_client_header_buffers 4 2k;
	request_pool_size 4k;
 
	gzip off;
 
	output_buffers 1 32k;
	postpone_output 1460;
 
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
 
	keepalive_timeout 75 20;
 
	ignore_invalid_headers on;
 
	index index.html;
 
	server {
		listen 127.0.0.1;
		server_name localhost;
 
		access_log /var/log/nginx/localhost.access_log main;
		error_log /var/log/nginx/localhost.error_log info;
 
		root /var/www/localhost/htdocs;
	}
}
}}

=== 複数サイト利用 ===

複数のファイルに設定を分割する為、<code>include</code>ディレクティブを利用することが可能です:

{{FileBox|filename=/etc/nginx/nginx.conf|title=複数サイト設定|1=
user nginx nginx;
worker_processes 1;
 
error_log /var/log/nginx/error_log info;
 
events {
	worker_connections 1024;
	use epoll;
}
 
http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
 
	log_format main
		'$remote_addr - $remote_user [$time_local] '
		'"$request" $status $bytes_sent '
		'"$http_referer" "$http_user_agent" '
		'"$gzip_ratio"';
 
	client_header_timeout 10m;
	client_body_timeout 10m;
	send_timeout 10m;
 
	connection_pool_size 256;
	client_header_buffer_size 1k;
	large_client_header_buffers 4 2k;
	request_pool_size 4k;
 
	gzip off;
 
	output_buffers 1 32k;
	postpone_output 1460;
 
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
 
	keepalive_timeout 75 20;
 
	ignore_invalid_headers on;
 
	index index.html;
 
	include /etc/nginx/conf.d/*.conf;
}
}}

{{FileBox|filename=/etc/nginx/conf.d/local.conf|title=単一ホスト|1=
server {
        listen 127.0.0.1;
        server_name localhost;
  
        access_log /var/log/nginx/localhost.access_log main;
        error_log /var/log/nginx/localhost.error_log info;
  
        root /var/www/localhost/htdocs;
}
}}

{{FileBox|filename=/etc/nginx/conf.d/local-ssl.conf|title=単一SSLホスト|1=
server {
    listen 443 ssl;
    server_name host.tld;
    ssl_certificate /etc/ssl/nginx/host.tld.pem;
    ssl_certificate_key /etc/ssl/nginx/host.tld.key;
}
}}

=== PHP サポート ===

PHPサポートを有効化する為には、次の行をnginxの設定ファイルに追加してください。この例ではnginxとPHPプロセスはUNIXソケットを介して情報を交換します。

{{FileBox|filename=/etc/nginx/nginx.conf|title=PHPサポートの有効化|1=
...
http {
...
    server { 
    ...
            location ~ \.php$ {
                       # Test for non-existent scripts or throw a 404 error
                       # Without this line, nginx will blindly send any request ending in .php to php-fpm
                       try_files $uri =404;
                       include /etc/nginx/fastcgi.conf;
                       fastcgi_pass unix:/run/php-fpm.socket;
           }
    }
}
}}

<div class="mw-translate-fuzzy">
このセットアップでは、<code>fpm</code>USE
フラグによって管理されるFastCGI Process Managerサポートと共にビルドされたPHPが必要です:
</div>

{{RootCmd|echo "dev-lang/php fpm" >> /etc/portage/package.use}}

<code>fpm</code> USEフラグを有効にして PHP を再ビルドします:

{{Emerge|dev-lang/php}}
 
{{Note|ここではUNIXソケット通信を使うことを選びます。これは推奨される設定でもあります}}

Review the {{Path|/etc/php/fpm-php5.5/php-fpm.conf}} configuration and add following line:

{{FileBox|filename=/etc/php/fpm-php5.5/php-fpm.conf|title=UNIXソケットサポートを用いて PHP を稼働させる|lang=ini|1=
listen = /run/php-fpm.socket
listen.owner = nginx
}}

For PHP 7.0 and newer configuration file is slightly different:

{{FileBox|filename=/etc/php/fpm-php7.1/fpm.d/www.conf|title=Running PHP with UNIX socket support|lang=ini|1=
listen = /run/php-fpm.socket
listen.owner = nginx
}}

Set the timezone in the php-fpm {{Path|php.ini}} file. Substitute the <code><PUT_TIMEZONE_HERE></code> text in the FileBox below with the appropriate timezone information:

{{FileBox|filename=/etc/php/fpm-php5.5/php.ini|title=Setup timezone in php.ini|lang=ini|1=
date.timezone = <PUT_TIMEZONE_HERE>
}}

Start the {{c|php-fpm}} daemon:

{{RootCmd|/etc/init.d/php-fpm start}}

Add {{c|php-fpm}} to the default runlevel:

{{RootCmd|rc-update add php-fpm default}}

Reload {{c|nginx}} with changed configuration:

{{RootCmd|/etc/init.d/nginx reload}}

=== IP アドレスのアクセスリスト ===

The next example shows how to allow access to a particular URL (in this case {{Path|/nginx_status}}) only to:

* certain hosts (e.g. ''192.0.2.1 127.0.0.1'')
* and IP networks (e.g. ''198.51.100.0/24'')

{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling and configuring an IP access lists for /nginx_status page|1=
http {
    server { 
            location /nginx_status {
                     stub_status on;
                     allow 127.0.0.1/32;
                     allow 192.0.2.1/32;
                     allow 198.51.100.0/24;
                     deny all;
             }
     }
}
}}

=== ベーシック認証 ===

nginx allows limiting access to resources by validating the user name and password:

{{FileBox|filename=/etc/nginx/nginx.conf|title=Enabling and configuring user authentication for the / location|1=
http {
    server { 
            location / {
                   auth_basic           "Authentication failed";
                   auth_basic_user_file conf/htpasswd;
             }
     }
}
}}
 
The {{Path|htpasswd}} file can be generated using:

{{Cmd|openssl passwd}}

=== サードパーティー製モジュール ===

Download third party module source and move it to {{Path|/usr/src}}. Manually compile the selected Nginx module, then add the following line to {{Path|/etc/portage/make.conf}}:

{{FileBox|filename=/etc/portage/make.conf|title=Adding third party module|1=
NGINX_ADD_MODULES="/usr/src/nginxmodule"}}

Rebuild nginx with the third party module enabled:

{{Emerge|www-servers/nginx}}

== 使い方 ==

=== サービス操作 ===

==== OpenRC ====

nginx ウェブサーバを開始します:

{{RootCmd|rc-service nginx start}}

nginx ウェブサーバを停止します:

{{RootCmd|rc-service nginx stop}}

システム再起動時にサービスを自動で開始できるように nginx を default ランレベルに追加します:

{{RootCmd|rc-update add nginx default}}

接続を切ることなく nginx の設定を再読み込みします:

{{RootCmd|rc-service nginx reload}}

nginx サービスを再起動します: 

{{RootCmd|rc-service nginx restart}}

==== systemd ====

nginx ウェブサーバを開始します:

{{RootCmd|systemctl start nginx}}

nginx ウェブサーバを停止します:

{{RootCmd|systemctl stop nginx}}

Check the status of the service:

{{RootCmd|systemctl status nginx}}

Enable service to start automatically on system reboot:

{{RootCmd|systemctl enable nginx}}

Reload nginx configuration without dropping connections:

{{RootCmd|systemctl reload nginx}}

Restart the nginx service: 

{{RootCmd|systemctl restart nginx}}

== トラブルシューティング ==

In case of problems, the following commands can help troubleshoot the situation.

=== Validate configuration ===

Verify that the running nginx configuration has no errors:

{{RootCmd|/usr/sbin/nginx -t|output=<pre>
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
</pre>}}

By running {{c|nginx}} with the <code>-t</code> option, it will validate the configuration file without actually starting the {{c|nginx}} daemon. Use the <code>-c</code> option with the full path to the file to test configuration files in non-default locations.

=== Verify processes are running ===

Check if {{c|nginx}} processes are running:

{{Cmd|ps aux {{!}} egrep 'nginx{{!}}PID'|output=<pre>
  PID TTY      STAT   TIME COMMAND
26092 ?        Ss     0:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
26093 ?        S      0:00 nginx: worker proces
</pre>}}

=== Verify bound addresses and ports ===

Verify nginx daemon is listening on the right TCP port (such as 80 for HTTP or 443 for HTTPS):

{{RootCmd|netstat -tulpen {{!}} grep :80|output=<pre>
tcp        0      0 127.0.0.1:80            0.0.0.0:*               LISTEN      0          12336835   -26092/nginx: master
</pre>}}

== 参考 ==

* {{See also|Apache}}
* {{See also|Lighttpd}}

== 外部の情報 ==

<div class="mw-translate-fuzzy">
* [http://wiki.nginx.org/Main nginx Wiki][[Category:Web Servers]]
* [https://github.com/h5bp/server-configs-nginx H5BP nginx config][[Category:Web Servers]]
</div>

[[Category:Web Servers]]
