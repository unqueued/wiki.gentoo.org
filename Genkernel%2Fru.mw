<languages />

{{Metadata|abstract=genkernel это утилита созданная Gentoo и используется для автоматизации процесса компиляции ядра и initramfs.}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
|{{InfoBox gitweb|genkernel.git}}
|{{InfoBox github|gentoo/genkernel}}
}}

{{c|genkernel}} - это утилита созданная Gentoo и используется для автоматизации процесса сборки [[kernel/ru|ядра]] и [[initramfs|initramfs]]. Некоторые основные функций:

* конфигурация исходного кода ядра
* сборка сжатого ядра {{Path|bzImage}} и его копирование в {{Path|/boot}}
* создание initramfs и копирование ее в {{Path|/boot}}
* создание символьных ссылок в {{Path|/boot}}
* добавление настроенного вручную содержимого в initramfs, такого как файлов, связанных с шифрованием, splash images, дополнительных модулей и так далее.
* сжатие initramfs
* конфигурация [[bootloader|загрузчика]] для загрузки нового ядра и initramfs.

== Установка ==

=== USE флаги ===

{{USEflag|package=sys-kernel/genkernel}}

=== Emerge ===

Запустите установку genkernel.

{{Emerge|sys-kernel/genkernel}}

== Использование == 

Основная форма вызова команды genkernel выглядит следующим образом:

{{RootCmd|genkernel [options ...] action}}

=== Параметры === 

Поведение genkernel зависит от большого количества параметров, большинство из которых могут быть настроены в файле {{Path|/etc/genkernel.conf}} или передаваться в каждом вызове через команду {{c|genkernel}}. Параметры, переданные с помощью командной строки, имеют больший приоритет, чем те, которые определены в файле {{Path|/etc/genkernel.conf}}. Этот файл очень хорошо задокументирован, но все же некоторые из наиболее используемых параметров будут описаны в этой статье. Цель статьи ознакомить читателя с основными вызовами genkernel. Для более полного объяснения, обратитесь к комментариям в {{Path|/etc/genkernel.conf}} или выводу команды {{c|man genkernel}}.

{{Note|Некоторые из параметров имеют вариации, которые приводят к противоположному поведению. Они представлены как <code>--[no-]option_name</code>, а обратный эффект показан в квадратных скобках, как в следующем примере:
{{CodeBox|title=Включить или отключить определенный параметр|1=
--[no-]menuconfig : Activates [deactivates] ...
}}
Когда параметры обладают только обратным эффектом, приставка <code>no-</code>, и эффект работы команды, который не является опциональным в этом случае, обозначены без квадратных скобок.
}}

==== Параметры, воздействующие на взаимодействие с пользователем ====

Параметры конфигурации, перечисленные ниже, помогут решить как взаимодействовать с процессом конфигурации. Пользователи могут даже выбрать требуется или нет сохранять файл конфигурации, созданный в процессе. Ниже следуют основные параметры конфигурации:

{| class="table table-condensed"
|-
! scope="col" width="25%" | Option !! Description
|-
|-
| <code>--config=/path/to/genkernel.conf</code> || Points to the Genkernel configuration file to use (defaults to {{Path|/etc/genkernel.conf}}).
|-
| <code>--[no-]menuconfig</code> || Activates [ or deactivates] the {{c|make menuconfig}} command (which invokes an interactive configuration menu) before building the kernel.
|-
| <code>--gconfig</code> || Provides a kernel configuration utility which depends on the GTK+ libraries. The advantage of this option is that most users find it easier and clearer to configure the kernel using this tool, since it relies on the X-windowing system. The disadvantage of this option is that the X-windowing system is required to use it, so it will not work on the command line.
|-
| <code>--xconfig</code> || Provides a kernel configuration utility which depends on the QT libraries. The advantage of this option is that most users find it easier and clearer to configure the kernel using this tool, since it relies on the X-windowing system. The disadvantage of this option is that the X-windowing system is needed to use it, so it will not work on the command line.
|-
| <code>--[no-]save-config</code> || Saves [or does not save] the kernel configuration to a file in the {{Path|/etc/kernels}} directory for later use.
|-
| <code>--kernname=NickName</code> || Allows the modification of the name of the kernel and initrd images in the {{Path|/boot}} directory, so that the images produced are {{Path|kernel-NickName-version}} and {{Path|initramfs-NickName-version}}.
|}

==== Options acting on the resulting system ====

Параметры конфигурации, перечисленные здесь, определяют какие возможности будут или не будут включены в полученное ядро и образ initrd.

{| class="table table-condensed"
|-
! scope="col" width="25%" | Option !! Description
|-
| <code>--[no-]splash</code> ||  Activates [or deactivates] support for [[Fbsplash]] framebuffer splash in the genkernel-built initrd image. To override the default theme used by fbsplash, use <code>--splash=PreferredTheme</code> (where <code>PreferredTheme</code> is the title of one of the directories inside the {{Path|/etc/splash}} directory).
|-
| <code>--splash-res=PreferredResolution</code> || This option allows to select which splash screen resolutions will be supported in the initrd during the start-up of the system. This is useful for two reasons. First, to be able to select only the splash screen resolution(s) relevant to the system. Second, to avoid the unnecessary increase in the disk space required by initrd (since the initrd does not have to support resolutions that are irrelevant for the system's configuration.) However, the option is best omitted if the kernel is being compiled for an Installation CD; this allows splash support for all possible resolutions.
|-
| <code>--do-keymap-auto</code> || Force keymap selection during the boot sequence.
|-
| <code>--lvm</code> || Includes support for storage using via [http://sources.redhat.com/lvm2/ Logical Volume Management] (LVM2) from static binaries, if available to the system. Relevant (static) LVM2 binaries are compiled if they are unavailable. Be sure to install the {{Package|sys-fs/lvm2}} package on the system ({{c|emerge sys-fs/lvm2}}) before enabling this option, then review the [[LVM|LVM article]] on the Gentoo wiki.
|-
| <code>--dmraid</code> || Includes support for DMRAID; the utility which creates RAID mappings using the kernel device-mapper subsystem. [http://people.redhat.com/~heinzm/sw/dmraid/readme DMRAID] discovers, activates, deactivates and displays properties of software RAID sets (ATARAID, for example) and contained DOS partitions.
|-
| <code>--luks</code> || Includes support for Linux Unified Key Setup or [http://clemens.endorphin.org/cryptography LUKS]. This will allow to use a device encrypted by LUKS which contains the root filesystem. On the bootloader, set that encrypted device as the value of <code>crypt_root</code> (and <code>root</code> shall be the unencrypted device LUKS creates).
|-
| <code>--disklabel</code> || Adds support for disk label and UUID support to the initrd.
|-
| <code>--iscsi</code> || Adds support for iSCSI to the initrd.
|-
| <code>--multipath</code> || Adds support for [[Multipath]] to the initrd.
|-
| <code>--linuxrc=/path/to/the/linuxrc_file</code> || Specifies a user-created linuxrc — a script that is initialized during the start-up stage of the kernel, prior to the actual boot process. A default linuxrc script can be found in the {{Path|/usr/share/genkernel/}} directory. This script allows booting into a small, modularized kernel; it tries to load the minimum amount of drivers that are needed (as modules) by the system.
|-
| <code>--cachedir=/path/to/alt/dir</code> || Overrides the default cache location used while compiling the kernel.
|-
| <code>--tempdir=/path/to/new/tempdir</code> || Specifies the location of the temporary directory used by genkernel while compiling the kernel.
|-
| <code>--unionfs</code> || Includes support for the [http://www.fsl.cs.sunysb.edu/project-unionfs.html Unification File System] in the initrd image.
|-
| <code>--mountboot</code> || Detects whether or not the {{Path|/boot}} directory needs to be mounted on a separate partition. It will check {{Path|/etc/fstab}} script for instructions on how to mount the boot partition on a file system (if needed).
|}

==== Options acting on the choice of the tools used for building ====

Следующие параметры поддерживаются genkernel и передаются соответствующим приложениям во время сборки ядра. Эти параметры воздействуют на инструменты компиляции, которые используются во время компиляции ядра, но на более низком уровне.

{| class="table table-condensed"
|-
! scope="col" width="25%" | Options !! Description
|-
| <code>--kernel-cc=someCompiler</code> || Specifies the compiler employed during the kernel compilation process.
|-
| <code>--kernel-ld=someLinker</code> || Specifies the linker employed during the kernel compilation process.
|-
| <code>--kernel-as=someAssembler</code> || Specifies the assembler employed during the kernel compilation process.
|-
| <code>--kernel-make=someMake</code> || Specifies an alternative to the GNU make utility employed during the kernel compilation process.
|-
| <code>--utils-cc=someCompiler</code> || Specifies the compiler employed during the compilation of support utilities.
|-
| <code>--utils-ld=someLinker</code> || Specifies the linker employed during the compilation of support utilities.
|-
| <code>--utils-as=someAssembler</code> || Specifies the assembler employed during the compilation of support utilities.
|-
| <code>--utils-make=someMake</code> || Specifies an alternative to the GNU make utility employed during the compilation of support utilities.
|-
| <code>--makeopts=-jX</code> || Specifies the number of concurrent threads that the make utility can implement while the kernel (and utilities) are being compiled. The variable <code>X</code> is a number to be freely chosen, although the most common values are obtained by adding one (1) to the number of cores used by the system, or just use the number of cores on the system. So, for a system with one core, most common option values are <code>-j2</code> or <code>-j1</code>; a system with two cores most likely uses the <code>-j3</code> or <code>-j2</code> options, and so on. (A system with one processor that supports Hyper-Threading™ (HT) Technology can be assumed to have 2 cores, provided Symmetric Multi-Processing (SMP) support is enabled in the kernel.)
|}

==== Options acting on the compilation process ====

Следующие параметры обычно имеют эффект во время самой компиляции:

{| class="table table-condensed"
|-
! scope="col" width="25%" | Option !! Description
|-
| <code>--kerneldir=/path/to/sources/</code> || Specifies an alternative kernel source location, rather than the default {{Path|/usr/src/linux/}} location.
|-
| <code>--kernel-config=/path/to/config-file</code> || Specifies what alternative kernel configuration will be used, rather than the default {{Path|/path/to/sources/.config}} file.
|-
| <code>--module-prefix=/path/to/prefix-directory/</code> || Specifies a prefix to the directory where kernel modules will be installed (default path is the {{Path|/lib/modules}} directory.)
|-
| <code>--[no-]clean</code> || Activates [or deactivates] the {{c|make clean}} command before compiling the kernel. The make clean command removes all object files and dependencies from the kernel's source tree.
|-
| <code>--[no-]mrproper</code> || Activates [or deactivates] the {{c|make mrproper}} command before kernel compilation. Like the make clean command listed above, make mrproper removes all object files and dependencies from the kernel's source tree. However, any previous configuration files (in {{Path|/path/to/sources/.config}} or {{Path|/path/to/sources/.config.old}}) will also be purged from the kernel's source tree.
|-
| <code>--oldconfig</code> || Issues the {{c|make oldconfig}} command, which attempts to collect configuration information for the system's architecture from a generic script in {{Path|/usr/share/genkernel}}. This is a non-interactive process; no user input is entertained. Also, if <code>--oldconfig</code> is used in conjunction with <code>--clean</code>, the latter option is negated, resulting in the activation of the <code>--no-clean</code> option.
|-
| <code>--callback="echo hello"</code> || Calls the specified arguments ({{c|echo hello}}, in this case) after the kernel and the relevant modules have been built, but before building the initrd image. This may be useful when installing external modules in the initrd image by emerging the relevant item(s) with the callback feature, and then redefining a genkernel module group.
|-
| <code>--[no-]install</code> || Activates [or deactivates] the make install command, which installs the new kernel image, configuration file, initrd image and system map onto the boot partition. Any compiled modules will be installed as well. By default genkernel will attempt mount {{Path|/boot}} if it is on a separate partition before running the install command.
|-
| <code>--no-ramdisk-modules</code> || Refrains from copying any modules to the genkernel-created initrd image. This option is an exception to the rule about the <code>no-</code> prefix; omission of this prefix creates an invalid genkernel option.
|-
| <code>--all-ramdisk-modules</code> || Copies all available modules to the genkernel-created initrd image.
|-
| <code>--genzimage</code> || Creates the initrd image, prior to the kernel image (this hack currently applies only to PPC Pegasos systems).
|}

==== Параметры отладки ====

Использование параметров отладки во время компиляции ядра контролируют количество отображаемой информации, а также как представляются эти данные.

{| class="table table-condensed"
|-
! scope="col" width="25%" | Option !! Description
|-
| <code>--loglevel=<nowiki><0|1|2|3|4|5></nowiki></code> || Controls the level of verbosity for information provided by genkernel. The variable <code>&lt;verblevel&gt;</code> is an integer between 0 and 5. The level '0' represents minimal output, while '5' provides as much information as possible about genkernel's activities during the kernel compilation process.
|-
| <code>--logfile=/path/to/output_file</code> || Ignores the value set by the <code>--loglevel</code> option (above) and sends all debugging data produced by genkernel to the specified output file. Outputs to {{Path|/var/log/genkernel.log }} by default.
|-
| <code>--[no-]color</code> || Activates (or deactivates) colored output of debugging information (reported by genkernel) using escape sequences.
|-
| <code>--[no-]debug-cleanup</code> || Activates (or deactivates) the full post-run cleanup for debug purposes.
|}

=== Действия ===

Действие, переданное командной строке командой {{c|genkernel [options ...] ''action''}}, сообщает genkernel действие для выполнения. Поддерживаются следующие действия:

{| class="table table-condensed"
|-
! scope="col" width="25%" | Action !! Description
|-
| {{c|all}} || Builds all stages — the initrd, kernel image and modules.
|-
| {{c|bzImage}} || Only builds the kernel image.
|-
| {{c|kernel}} || Only builds the kernel image and modules.
|-
| {{c|initramfs}} || Only builds the initramfs/ramdisk image.
|-
| {{c|ramdisk}} || Only builds the initramfs/ramdisk image.
|}

== Конфигурация ==

=== Начав ===

Хотя существует несколько способов запустить утилиту genkernel, наименее навязчивый подход, рекомендуемый для большинства пользователей, предоставляется командой {{c|genkernel all}}. В этом примере используется общая конфигурация, которая хорошо работает для большинства используемых систем. Как было упомянуто ранее, этот подход не лишен недостатков; большинство созданных модулей бесполезны для среднестатического пользователя и могут увеличить время компиляции. Ниже проиллюстрирован более эффективный подход, достигнутый передачей определенных параметров команде genkernel под учетной записью root:

{{RootCmd|genkernel --splash --no-install --no-clean --menuconfig all}}

Вышеуказанная операция заставляет genkernel создать ядро с заставкой на кадровом буфере (<code>--splash</code>), которое нужно будет установить вручную (<code>--no-install</code>). При подготовке дерева исходных кодов ядра, genkernel воздержится от удаления каких-либо уже существующих объектных файлов, присутствующих в дереве исходных кодов (<code>--no-clean</code>). Будет отображена меню-подобная утилита конфигурации ядра, которая позволяет пользователю выбрать какие модули должны быть собраны для системы (<code>--menuconfig</code>).

Замещение <code>--no-install</code> параметром <code>--install</code> позволяет genkernel автоматически установить новое ядро в каталог {{Path|/boot}}, а затем создать символьные ссылки, если указан параметр <code>--symlink</code>. Использование параметра <code>--mountboot</code> позволяет genkernel монтировать раздел {{Path|/boot}} автоматически, если это необходимо.

{{Note|Не забывайте, что файл {{Path|/etc/genkernel.conf}} используется командой '''genkernel''' при запуске в качестве источника команд, и что любой параметр, определенный здесь, будет применен, исключая те случаи, когда параметры командной строки имеют над ним больший приоритет.}}

=== Выбор ядра ===

Первой вещью, которую надо сделать, является разрешение запуска {{c|make menuconfig}} в файле {{Path|/etc/genkernel.conf}}:

{{FileBox|filename=/etc/genkernel.conf|title=Принудительное использование меню конфигурации в /etc/genkernel.conf|lang=bash|1=
# Запустить 'make menuconfig' перед компиляцией ядра?
MENUCONFIG="yes"
}}

==== Управление файлами ====

При использовании genkernel, пользователь должен знать некоторые из аспектов, касающихся конфигурации ядра и управления файлами образа ядра, а также способ, с помощью которого исходные тексты ядра обрабатываются системой.

===== Исходные файлы =====

После запуска {{c|emerge -u gentoo-sources}}, если доступна новая версия исходных текстов, то в {{Path|/usr/src/}} создается новый каталог для сохранения исходных текстов ядра. Обычно, на активный каталог исходных текстов ядра указывает символьная ссылка {{Path|/usr/src/linux}}.

Каталог {{Path|/usr/src}} может выглядеть так:

{{Cmd|ls -l /usr/src|output=<pre>
total 16
lrwxrwxrwx  1 root root   19 21 Mar   2013 linux -> linux-3.7.10-gentoo
drwxr-xr-x 24 root root 4096 25 Aug  10:39 linux-3.10.7-gentoo
drwxr-xr-x 20 root root 4096 21 Apr  19:42 linux-3.7.10-gentoo
drwxr-xr-x 21 root root 4096 14 Mar   2013 linux-3.7.9-gentoo
</pre>}}

Символьная ссылка {{Path|/usr/src/linux}} может быть изменена разными способами. 

* Если установлен USE флаг <code>symlink</code>, то символьная ссылка {{Path|/usr/src/linux}} автоматически обновляется и будет указывать на только что установленные исходные тексты. 

* Если <code>symlink</code> USE флаг ''не'' установлен, пользователь может изменить назначение для символьной ссылки используя команду {{c|eselect kernel list}}, а затем {{c|eselect kernel set}}.

genkernel ''всегда'' (исключительно) использует исходные тексты, на которые указывает символьная ссылка {{Path|/usr/src/linux}}.

===== Файл конфигурации ядра =====

Если компиляция ядра уже запущена с активными исходными текстами ядра, в каталоге {{Path|/etc/kernels}} может находиться файл, который содержит конфигурацию ядра, которая применялась при создании последнего файла ядра bzimage. Этот файл может называться, например, {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}}, где <code>x86_64</code> может быть заменено на архитектуру системы, <code>3.7.9<code> может быть заменено на версию  используемых исходных текстов, а <code>r1</code> на выпуск (release) исходных текстов.

Это тот самый файл {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}}, который используется в качестве начальной конфигурации при запуске {{c|genkernel --menuconfig all}}.

Если genkernel первый раз вызывается с данными исходными кодами ядра, или если предыдущий результат не был сохранен, этот файл заменяется на файл конфигурации по умолчанию, который находится в {{Path|usr/share/genkernel/arch/x86_64/kernel-config}}, где x86_64 заменяется на действительную архитектуру.

{{Note|Путь к этому файлу конфигурации по умолчанию может быть изменен установкой переменной <var>DEFAULT_KERNEL_CONFIG</var> в файле {{Path|/etc/genkernel.conf}}.}}

===== Сохранение скомпилированной конфигурации =====

Если активирован параметр genkernel <code>--save-config</code>, как из командной строки, так и из {{Path|/etc/genkernel.con}}, конфигурация скомпилированного ядра сохраняется (под именем данным выше) в каталог {{Path|/etc/kernels}}. В то же время, конфигурация сохраняется в файл {{Path|.config}} в каталоге {{Path|/usr/src/linux}}, но этот файл не используется заново при следующем запуске команды {{c|genkernel all}}.

{{Warning/ru|Необходимо знать, что каждый раз при запуске genkernel с установленным параметром <code>--save-config</code>, файл конфигурации в {{Path|/etc/kernels}} перезаписывается. Таким образом, рекомендуется скопировать этот файл под новым именем ''перед'' запуском genkernel, для того чтобы его сохранить. }}

===== Установка ядра и initramfs в каталог {{Path|/boot}} =====

Использование опции <code>--install</code> при вызове genkernel, запрашивает <code>genkernel</code> установить образа ядра и initramfs в каталог {{Path|/boot}}. Для того, чтобы это сделать удобным образом, установите следующие параметры в файле {{Path|/etc/genkernel.conf}}:

{{FileBox|filename=/etc/genkernel.conf|title=Установка автосохранения ядра и initramfs|lang=bash|1=
# Примонтировать каталог BOOTDIR автоматически, если не примонтирован?
MOUNTBOOT="yes"
  
# Сохранить новую конфигурацию в /etc/kernels при успешной компиляции
SAVE_CONFIG="yes"
  
# Сделать символьные ссылки в BOOTDIR автоматически?
SYMLINK="yes"
  
# Добавить новое ядро в grub?
#BOOTLOADER="grub"
}}

* Первый параметр говорит сам за себя.

* Второй параметр сообщает genkernel, чтобы конфигурация скомпилированного ядра была сохранена в {{Path|/etc/kernels}}.

* Последние два параметра сообщают genkernel, чтобы она автоматически обновила конфигурацию загрузчика grub. На практике, происходит следующее:
** Если уже существует предыдущий образ ядра с тем же самым именем, он переименовывается путем добавления {{Path|.old}} к его имени. Автоматически создается символьная ссылка {{Path|kernel.old}}, которая указывает на него.
** Новое ядро занимает место ядра с тем же самым именем в каталоге {{Path|/boot}}. Если ядро скомпилировано в первый раз, автоматически создается символьная ссылка, которая указывает на новое ядро.

После запуска {{c|genrkernel --menuconfig all}}, каталог {{Path|/boot}} может выглядеть следующим образом:

{{Cmd|ls -al /boot|output=<pre>
total 41336
drwxr-xr-x  3 root root    4096 20 avril 17:23 .
drwxr-xr-x 24 root root    4096 15 sept. 12:31 ..
lrwxrwxrwx  1 root root       1 24 févr.  2013 boot -> .
drwxr-xr-x  2 root root    4096 24 févr.  2013 grub
lrwxrwxrwx  1 root root      40 20 avril 17:23 initramfs -> initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1314412 20 avril 17:23 initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1313548 21 mars   2013 initramfs-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 1295344 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3310324 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      44 20 avril 17:23 initramfs.old -> initramfs-genkernel-x86_64-3.7.10-gentoo.old
lrwxrwxrwx  1 root root      37 20 avril 17:23 kernel -> kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866656 20 avril 17:23 kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866560 21 mars   2013 kernel-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 4552288 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3400736 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      41 20 avril 17:23 kernel.old -> kernel-genkernel-x86_64-3.7.10-gentoo.old
</pre>}}

==== Конфигурация загрузчика ====

Символьные ссылки, приведенные выше в конфигурации загрузчика, могут быть использованы так, что даже если новое ядро не загружается, пользователь смог всегда загрузить предыдущее. 

Чтобы разрешить ядру и initrd, генерируемым genkernel, работать правильно, предоставьте необходимый минимум информации в файле конфигурации загрузчика:

* Добавьте <code>root=/dev/sdaN</code> к параметрам ядра, передаваемым образу ядра, где {{Path|/dev/sdaN}} указывает на root раздел (<code>N</code> - это номер раздела, если раздел сущестует).
* Если используется splash screen, добавьте подходящую строку режима (mode line), такую как <code>vga=0x317</code> в список параметров, передаваемых ядру и также добавьте <code>splash=verbose</code> или <code>splash=silent</code>, в зависимости от уровня вывода сообщений, требуемого в процессе загрузки.
* Добавьте информацию initrd, как это требуется загрузчиком. Обратитесь к главе [[Handbook:X86/Installation/Bootloader/ru|Конфигурация загрузчика]] Gentoo Handbook для получения подробностей о том как сделать загрузчик с поддержкой initrd.

Ниже приведено то, как может выглядеть файл {{Path|grub.conf}}.

{{FileBox|filename=/boot/grub/grub.conf|title=Пример файла grub.conf|lang=bash|1=
# Это пример файла grub.conf для использования с Genrkernel, из настольной книги Gentoo
# http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1&chap=10#doc_chap2  
# Если Вы не пользуетесь Genkernel и Вам нужна помощь при создании этого файла, Вы должны проконсультироваться с настольной книгой. Иначе, обратитесь к файлу grub.conf.sample, который включен в документацию Grub.
  
default 0 
timeout 5
splashimage=(hd1,0)/boot/grub/splash.xpm.gz 
   
title Gentoo Linux 
root (hd0,6) 
kernel /boot/kernel initrd=/dev/ram0 real_root=/dev/sda7 rootfstype=ext4  
initrd /boot/initramfs
  
title Gentoo Linux old kernel 
root (hd0,6) 
kernel /boot/kernel.old initrd=/dev/ram0 root=/dev/sda7 rootfstype=ext4 
initrd /boot/initramfs.old
}}

==== Сохранение рабочих файлов ====

Приложение genrkernel автоматически сохраняет новые изменения в файлах. Если требуется сохранить предыдущие изменения, то должны быть предприняты следующие меры.

* Первым файлом, который надо сохранить, является файл конфигурации ядра в {{Path|/etc/kernels}}. Если исходные тексты не изменились перед перекомпиляцией ядра, будет использовано имя файла, использованное ранее. Поэтому, копирование файла конфигурации под другим именем помогает сохранить информацию при сохранении файла доступным в качестве начальной точки для новой конфигурации.

* Второй важной вещью необходимо сохранить уже загружаемые образы ядра и initramfs. Способ, которым это можно выполнить, зависит от контекста:
:# Если ранее скомпилированное ядро загружается, запуск {{c|genkernel}} переименует образ этого ядра (и, также, initramfs) в {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} и создаст новый {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}. Это значит, что даже если новое ядро не загружается, пользователи всегда смогут загрузить предыдущее.
:# Если последнее скомпилированное ядро не загружается и исходные тексты не изменялись с того момента как пользователь скомпилировал загружаемое ядро, до запуска {{c|genkernel}}, сперва удалите образ нового ядра и уберите суффикс {{Path|.old}} из последнего загружаемого ядра. Без этого, если заново скомпилированное ядро не загружается во второй раз, загружаемое ядро {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} будет удалено переименованием незагружаемого {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}, приводя пользователя к незагружаемой системе. Используйте те же самые рассуждения для initramfs.

==== Использование предыдущей конфигурации ядра при изменении исходных текстов ====

Предыдущая конфигурация может использоваться через параметр <var>MENUCONFIG</var> в {{Path|/etc/genkernel.conf}} следующим образом:

{{FileBox|filename=/etc/genkernel.conf|title=Настройка make menuconfig|1=
# Запустить 'make menuconfig' передо компиляцией этого ядра?
MENUCONFIG="yes"
}}

{{Note|Нет необходимости запускать {{c|make oldconfig}} когда исользуется genkernel, даже если исходные тексты изменились с {{Path|kernel-genkernel-ARCH-version-gentoo-rx}} на {{Path|kernel-genkernel-ARCH-version-gentoo-r(x+1)}} или с {{Path|kernel-genkernel-ARCH-version-gentoo}} на {{Path|kernel-genkernel-ARCH-(version+1)-gentoo}}. Потому что команда {{c|make menuconfig}} попытается загрузить предыдущую конфигурацию в меню, настолько, насколько возможно. Тем не менее, рекомендуется осторожное ''рассмотрение'' каждого параметра и новых разделов.}}

=== Сетевая загрузка ===

==== С установочного диска ====

Утилита {{c|genkernel}} может собрать образы ядра и initrd, которые имеют поддержку сетевой загрузки, или netbooting. Если хоть немного повезет, пользователи смогут загрузить по сети какой-либо новый компьютер в среду, предоставляемую загрузочным CD.

Волшебство заключается в сценарии linuxrc утилиты genkernel: он попытается смонтировать загрузочный диск по сети используя NFS. Оттуда, сценарии инициализации загрузочного CD смогут получить контроль, как если бы CD присутствовал локально.

==== Сборка ядра и nitramfs с поддержкой сетевой загрузки ====

Для разрешения поддержки загрузки по сети, включите следующие параметры при конфигурации ядра:

{{Warning/ru|Поддержка загрузки по сети с genkernel является экспериментальной и может содержать баги. }}

Во-первых, образ ядра должен включать драйверы для сетевых карт в системе (Network Interface Cards - NIC). Обычно, драйверы для таких устройств компилируются в качестве модулей. Однако, важно (для загрузки по сети), чтобы подобные драйверы были скомпилированы прямо в образ ядра, а не как модули.

{{KernelBox|title=Конфигурация ядра серии 3.x.x для поддержки различных драйверов NIC|<pre>
Device Drivers --->
   Networking Support --->
      Ethernet (10 or 100Mbit)  --->
         [*] Ethernet (10 or 100Mbit)
         <*>   The driver(s) for each network card</pre>
}}

{{Note|Убедитесь, что выбран {{c|&lt;*&gt;}}, а не {{c|&lt;M&gt;}}.}}

Во-вторых, предполагается что включен параметр "IP: kernel level autoconfiguration", также как и "IP: DHCP support options". Это позволяет избежать лишних сложностей, так как IP-адрес и путь NFS к установочному CD могут быть сконфигурированы на DHCP-сервере. Определенно, это означает, что командная строка ядра будет оставаться постоянной для любой машины - что очень важно для etherbooting.

{{KernelBox|title=Конфигурация ядра серии 3.x.x для поддержки DHCP|<pre>
Device Drivers --->
   Networking Support --->
      Networking options
         [*] TCP/IP networking--->
         [*]   IP: kernel level autoconfiguration
         [*]     IP: DHCP support
</pre>}}

Эти параметры сообщают ядру, чтобы оно отправило DHCP-запрос при загрузке.

Кроме того, включите [[SquashFS|SquashFS]], потому что большинство современных установочных дисков Gentoo требуют этого. Поддержка SquashFS не включается в основное дерево исходных текстов ядра. Чтобы включить SquashFS, примените необходимые патчи к основным исходным текстам ядра или установите gentoo-sources.

{{KernelBox|title=Конфигурация ядра для поддержки SquashFS|<pre>
File systems--->
   Miscellaneous filesystems --->
      [*] SquashFS 2.X - Squashed file system support
</pre>}}

Как только процесс компиляции завершен, создайте сжатый архив tar (tarball - tar.gz), который содержит модули ядра. Этот шаг требуется только если версия ядра не соответствует версии образа ядра на установочном CD.

Чтобы создать архив содержащий все модули:

{{RootCmd|cd /
|tar -cf /tmp/modules-X.Y.Z.tar.gz /lib/modules/X.Y.Z/}}

В зависимости от механизма загрузки по сети, необходимо последовать одному из следующих шагов:

Для создания образа etherboot:

{{Emerge|net-misc/mknbi}}

{{RootCmd
|cd /boot
|mkelf-linux -params{{=}}"root{{=}}/dev/ram0 init{{=}}/linuxrc ip{{=}}dhcp" kernel... initrd... > etherboot.img}}

Для создания образа OpenBoot / SPARC64 TFTP:

{{Emerge|sys-apps/sparc-utils}}

{{RootCmd
|cd /boot
|elftoaout kernel... -o kernel.aout
|piggyback64 kernel.aout System.map-... initrd-...
|mv kernel.aout openboot.img}}

Файл {{Path|openboot.img}} является образом ядра.

В завершение, скопируйте это ядро на TFTP сервер. Подробности являются архитектурно-зависимыми и выходят за рамки этого руководства. Пожалуйста, обратитесь к документации для платформы.

==== Настройка NFS ====

Для настройки общего ресурса NFS, который содержит установочный CD, используйте loop-устройство, чтобы примонтировать образ ISO и затем скопировать содержимое CD в общий ресурс NFS. В качестве приятного дополнения, сценарии initrd утилиты genkernel извлекут все файлы tar.gz, расположенные в каталоге {{Path|/nfs/livecd/add/}}. Все, что требуется здесь сделать, это скопировать архив {{Path|modules-X.Y.Z.tar.gz}} в каталог {{Path|/nfs/livecd/add/}} .

Следующее предполагает что {{Path|/nfs/livecd}} является экспортируемым общим сетевым ресурсом NFS:

{{RootCmd|mount /tmp/gentoo-livecd.iso /mnt/cdrom -o loop
|cp -p /mnt/cdrom /nfs/livecd
|umount /mnt/cdrom}}

Теперь, скопируйте файл {{Path|modules.tar.gz}} в {{Path|/add}}:

{{RootCmd|mkdir /nfs/livecd/add
|cp /tmp/modules-X.Y.Z.tar.gz /nfs/livecd/add}}

==== Настройка DHCP ====

Образы netboot запросят IP у DHCP-сервера в сети, также как и опция <code>root-path</code>. Оба могут быть указаны отдельно для хоста с использованием MAC-адреса для идентификации машин:

{{FileBox|filename=/etc/dhcpd.conf|title=Образец настройки клиента dhcpd.conf|1=
# Здесь, 192.168.1.2 - это NFS сервер, тогда как 192.168.1.10 будет IP-адресом компьютера загружаемого по сети
host netbootableMachine {
         hardware ethernet 11:22:33:44:55:66;
         fixed-address 192.168.1.10;
         option root-path "192.168.1.2:/nfs/livecd";
}
}}

==== Инструкции загрузки по сети ====

Напомним, что загрузка по сети является очень платформо-зависимой. Важной деталью является указать параметры <code>ip=dhcp</code> и <code>init=/linuxrc</code> в командной строке ядра, так как это вызовет сетевой интерфейс и сообщит сценариям initrd о том, что необходимо примонтировать установочный CD через NFS. Здесь приведены несколько платформо-зависимых советов:

Для etherboot, вставьте etherboot-диск в привод и перезагрузитесь. Командная строка ядра была указана, когда собирался образ.

На Sparc64, нажмите {{Key|Stop}}+{{Key|A}} в командной строке загрузки и затем введите:

{{RootCmd|boot net ip {{=}} dhcp init {{=}} /linuxrc|prompt=ok }}

Для PXE, настройте pxelinux (часть пакета syslinux), затем создайте {{Path|pxelinux.cfg/default}} подобно тому как:

{{FileBox|filename=pxelinux.cfg/default|title=Запись по умолчанию|1=
DEFAULT gentoo
TIMEOUT 40
PROMPT 1
  
LABEL gentoo
    KERNEL kernel-X.Y.Z
    APPEND initrd=initrd-X.Y.Z root=/dev/ram0 init=/linuxrc ip=dhcp
}}

==== Загрузка initramfs, сгенерированной genkernel ====

===== Введение =====

Если initramfs установлена с помощью genkernel, то присмотритесь к следующим параметрам загрузки которые могут (или должны) быть определены в конфигурации загрузчика. Наиболее общие добавлены в это руководство.

===== Загрузка LVM или программного массива RAID =====

Если система использует LVM или программный массив RAID, initramfs должна быть собрана с использованием параметров <code>--lvm</code> и <code>--mdadm</code>. Не забудьте также включить поддержку в течение процесса загрузки. Это может быть сделано с использованием параметров dolvm и domdadm.

{{FileBox|filename=/boot/grub/grub.conf|title=Включение поддержки LVM и/или MDADM|1=
# Пример для GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 dolvm domdadm
initrd /initramfs-genkernel-x86_64-3.4.3
}}

===== Загрузка в однопользовательском режиме =====

Если по какой-то причине загрузка не происходит, все еще возможно восстановление системы с помощью загрузки в однопользовательском режиме. Это загрузит только действительно необходимые службы и затем перебросит пользователя в (root) оболочку восстановления.

{{FileBox|filename=/boot/grub/grub.conf|title=Загрузка в однопользовательском режиме|1=
# Пример для GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 init_opts=S
initrd /initramfs-genkernel-x86_64-3.4.3
}}

== Устранение проблем ==

=== compile failed: Kernel not found ===

This failure can be experienced when attempting to compile a kernel for one architecture with a kernel {{Path|.config}} file that has a target of a different architecture than the target. This could be as simple as a machine running an {{Keyword|amd64}} kernel attempting to compile for a {{Keyword|x86}} target.

This can be experienced when booting from a x86_64 LiveCD on a system that is capable of operating in 64-bits, however the target to be installed or repaired is 32-bits. After the compilation process begins, {{c|genkernel}} will attempt to automatically detect the architecture for the target based on the currently running kernel. If the currently running kernel is 64-bit, then, unless it is told otherwise, {{c|genkernel}} will presume it should be looking for a 64-bit kernel.

Suppose then that the kernel's {{Path|.config}} file has x64 disabled. The {{c|make}} command will execute and the resulting kernel binary will be placed in the associated {{Path|x86}} directory. When {{c|genkernel}} goes to install (move and rename) the kernel it cannot find the kernel because it expected a 64-bit kernel.

The solution to this failure is to set {{c|genkernel}}'s <code>--arch-override</code> option to, in this case, the {{Keyword|x86}} architecture. The final command could look like this:

{{RootCmd|genkernel --kernel-config{{=}}/usr/src/linux/.config --btrfs --install --arch-override{{=}}x86 all}}

To override the architecture choice permanently, modify the <var>ARCH_OVERRIDE</var> variable in the {{Path|/etc/genkernel.conf}} file.

== Смотрите также ==

* [[Kernel/Configuration|Manual kernel configuration]] - For the times it is necessary to to do things manually.
* [[Dracut]] - Another initramfs builder available in Gentoo.


[[Category:Kernel]]
[[Category:Initramfs]] {{Migrated|originalauthors=Tim Yamin, Jimi Ayodele, Thomas Seiler, Joshua Saddler, Sebastian Pipping, José Fournier}}
