<languages />

{{Metadata|abstract=genkernel это утилита созданная Gentoo, которая используется для автоматизации процесса компиляции ядра и initramfs.}}

{{InfoBox stack
|{{InfoBox project|Genkernel|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox gitweb|genkernel.git}}
|{{InfoBox github|gentoo/genkernel}}
}}

{{c|genkernel}} — это утилита созданная Gentoo, которая используется для автоматизации процесса сборки [[kernel/ru|ядра]] и [[initramfs|initramfs]]. Некоторые основные функции:

* конфигурация исходного кода ядра
* сборка сжатого ядра {{Path|bzImage}} и его копирование в {{Path|/boot}}
* создание initramfs и копирование его в {{Path|/boot}}
* создание символьных ссылок в {{Path|/boot}}
* добавление настроенного вручную содержимого в initramfs. Например файлов связанных с шифрованием, splash images, дополнительных модулей и так далее.
* сжатие initramfs
* конфигурация [[bootloader|загрузчика]] для загрузки нового ядра и initramfs.

{{Note|Типичное недоразумение — считать, что {{c|genkernel}} 'автоматически' создает индивидуальную конфигурацию ядра. {{c|genkernel}} автоматизирует процесс сборки ядра и собирает initramfs, но ''не'' создает индивидуальный конфигурационный файл ядра. Он использует универсальный файл конфигурации ядра, который включает в себя поддержку для типичных компонентов системы на архитектурно-зависимой основе. С подробностями установок по умолчанию для каждой архитектуры можно ознакомиться в [https://gitweb.gentoo.org/proj/genkernel.git/tree/arch upstream repository]. Выберите архитектуру, затем выберите файл конфигурации ядра.}}

== Установка ==

=== USE-флаги ===

{{USEflag|package=sys-kernel/genkernel}}

=== Emerge ===

Запустите установку genkernel.

{{Emerge|sys-kernel/genkernel}}

== Использование == 

Основная форма вызова команды genkernel выглядит следующим образом:

{{RootCmd|genkernel [options ...] action}}

=== Параметры === 

Поведение genkernel зависит от большого количества параметров, большинство из которых могут быть настроены в файле {{Path|/etc/genkernel.conf}} или передаваться в каждом вызове через команду {{c|genkernel}}. Параметры, переданные с помощью командной строки, имеют больший приоритет, чем те, которые определены в файле {{Path|/etc/genkernel.conf}}. Этот файл очень хорошо задокументирован, но все же некоторые из наиболее используемых параметров будут описаны в этой статье. Цель статьи ознакомить читателя с основными вызовами genkernel. Более подробные объяснения имеются в комментариях файла {{Path|/etc/genkernel.conf}} или в содержимом {{c|man genkernel}}.

{{Note|Некоторые из параметров имеют вариации, которые приводят к противоположному поведению. Они представлены как <code>--[no-]option_name</code>, а обратный эффект показан в квадратных скобках, как в следующем примере:
{{CodeBox|title=Включить или отключить определенный параметр|1=
--[no-]menuconfig : Activates [deactivates] ...
}}
Когда параметры обладают только обратным эффектом, приставка <code>no-</code>, и эффект работы команды, который не является опциональным в этом случае, обозначены без квадратных скобок.
}}

==== Параметры, воздействующие на взаимодействие с пользователем ====

Параметры конфигурации, перечисленные ниже, помогут решить как взаимодействовать с процессом конфигурации. Пользователи могут даже выбрать требуется или нет сохранять файл конфигурации, созданный в процессе. Ниже следуют основные параметры конфигурации:

; <code>--config=/path/to/genkernel.conf</code>
: Место откуда Genkernel будет брать конфигурационный файл (по умолчанию {{Path|/etc/genkernel.conf}}).
; <code>--[no-]menuconfig</code>
: Запускать (или не запускать) команду {{c|make menuconfig}} (которая запускает интерактивное меню для конфигурации) перед компиляцией ядра.
; <code>--gconfig</code>
: Предоставляет утилиту настройки ядра, основанную на библиотеках GTK+. Преимущество этого варианта в том, что большинству пользователей легче и понятнее настраивать ядро с помощью этого инструмента, поскольку он опирается на X-windows system. Недостатком этого варианта является то, что X-windows system должна быть установлена, чтобы использовать её, поэтому это не будет работать в командной строке.
; <code>--xconfig</code>
: Предоставляет утилиту настройки ядра, основанную на библиотеках QT. Преимущество этого варианта в том, что большинству пользователей легче и понятнее настраивать ядро с помощью этого инструмента, поскольку он опирается на X-windows system. Недостатком этого варианта является то, что X-windows system должна быть установлена, чтобы использовать её, поэтому это не будет работать в командной строке.
; <code>--[no-]save-config</code>
: Сохранить [или не сохранять] файл конфигурации ядра в каталог {{Path|/etc/kernels}} для последующего использования.
; <code>--kernname=NickName</code> 
: Производить модификацию имени файла ядра и образа initrd в каталоге {{Path|/boot}} так, что будут создаваться {{Path|kernel-NickName-version}} и {{Path|initramfs-NickName-version}}.

==== Параметры воздействующие на то, какая система получится в результате ====

Параметры конфигурации, перечисленные здесь, определяют какие возможности будут или не будут включены в полученное ядро и образ initrd.

; <code>--[no-]splash</code>
: Включает (или отключает) поддержку [[Fbsplash]] фреймбуфера в собранном genkernel образе initrd. Чтобы изменить тему по умолчанию с помощью fbsplash, используйте <code>--splash=PreferredTheme</code> (где <code>PreferredTheme</code> это название одной из директорий внутри {{Path|/etc/splash}}).
; <code>--splash-res=PreferredResolution</code>
: Эта опция позволяет выбрать какие разрешения заставки будут поддерживаться в initrd во время запуска системы. Это полезно по двум причинам. Во-первых, можно выбрать только те варианты разрешения заставки(ок), которые подходят для системы. Во-вторых, initrd не будет занимать много дискового пространства (так как initrd не должен будет поддерживать разрешения, которые не нужны для данной конфигурации системы). Тем не менее, эту опцию лучше не использовать, если ядро компилируются для установочного CD, что позволит splash поддерживать все возможные варианты разрешений.
; <code>--do-keymap-auto</code>
: Принудительный выбор раскладки клавиатуры во время загрузки.
; <code>--lvm</code>
: Включает поддержку устройств хранения использующие [http://sources.redhat.com/lvm2/ Logical Volume Management] (LVM2) с помощью статических бинарников, если они доступны в системе. Соответствующие (статические) LVM2 бинарники скомпилируются, если они недоступны. Обязательно установите в систему пакет {{Package|sys-fs/lvm2}} используя ({{c|emerge sys-fs/lvm2}}) перед включением этой опции, а также проверьте [[LVM/ru|статью LVM]] на Gentoo wiki.
; <code>--dmraid</code>
: Включает поддержку DMRAID; утилита, которая создает RAID с помощью подсистемы ядра отображения устройств. [http://people.redhat.com/~heinzm/sw/dmraid/readme DMRAID] обнаруживает, включает, отключает и отображает настройки программного RAID (например, ATARAID) и содержащихся в них DOS разделов.
; <code>--luks</code>
: Включает поддержку Linux Unified Key Setup или [https://gitlab.com/cryptsetup/cryptsetup LUKS]. Эта опция позволит использовать устройства, которые содержат корневую файловую систему и зашифрованны с помощью LUKS. В загрузчике для зашифрованного устройства задайте значение <code>crypt_root</code> (и <code>root</code> для не зашифрованных с помощью LUKS устройств).
; <code>--disklabel</code>
: Добавляет поддержку disk label и UUID в initrd.
; <code>--iscsi</code>
: Добавляет поддержку iSCSI в initrd.
; <code>--multipath</code>
: Добавляет поддержку [[Multipath]] в initrd.
; <code>--linuxrc=/path/to/the/linuxrc_file</code>
: Задает расположение созданного пользователем скрипта linuxrc, который инициализируется во время запуска ядра до начала процесса загрузки. Скрипт linuxrc по умолчанию можно найти в каталоге {{Path|/usr/share/genkernel/}}. Этот скрипт позволяет пользователю загрузить маленькое модульное ядро; которое попытается загрузить минимальное количество драйверов, которые необходимы (как модули) системы.
; <code>--cachedir=/path/to/alt/dir</code>
: Изменяет расположение каталога кэша, который будет использоваться во время компиляции ядра.
; <code>--tempdir=/path/to/new/tempdir</code>
: Изменяет расположение каталога временных файлов, который будет использаться genkernel во время компиляции ядра.
; <code>--unionfs</code>
: Добавление поддержки [http://www.fsl.cs.sunysb.edu/project-unionfs.html Unification File System] в образ initrd.
; <code>--mountboot</code>
: Определяет нужно ли или нет монтировать каталог {{Path|/boot}} на отдельный раздел. С этой опцией произойдет проверка скрипта {{Path|/etc/fstab}}, чтобы узнать как подключить boot раздел в файловой системе (если это необходимо).

==== Параметры, воздействующие на выбор инструментов, используемых для сборки ====

Следующие параметры поддерживаются genkernel и передаются соответствующим приложениям во время сборки ядра. Эти параметры воздействуют на инструменты компиляции, которые используются во время компиляции ядра, но на более низком уровне.

; <code>--kernel-cc=someCompiler</code>
: Определяет компилятор, который будет использован при сборке ядра.
; <code>--kernel-ld=someLinker</code>
: Определяет компоновщик, который будет использован при сборке ядра.
; <code>--kernel-as=someAssembler</code>
: Определяет ассемблер, который будет использован при сборке ядра.
; <code>--kernel-make=someMake</code>
: Определяет make утилиту (альтернативу GNU make), которая будет использована при сборке ядра.
; <code>--utils-cc=someCompiler</code>
: Определяет компилятор, который будет использован при сборке утилит поддержки.
; <code>--utils-ld=someLinker</code>
: Определяет компоновщик, который будет использован при сборке утилит поддержки.
; <code>--utils-as=someAssembler</code>
: Определяет ассемблер, который будет использован при сборке утилит поддержки.
; <code>--utils-make=someMake</code>
: Определяет make утилиту (альтернативу GNU make), которая будет использована при сборке утилит поддержки.
; <code>--makeopts=-jX</code>
: Определяет количество одновременных потоков, которые утилита make может запустить во время компиляции ядра (и утилит). Переменная <code>X</code> это любое число, хотя наиболее распространенные значения получаются путем добавления одного (1) к числу ядер, доступных системе, или же просто использовать количество ядер доступных системе. Так, для системы с одним ядром лучше подойдет вариант значения <code>-j2</code> или <code>-j1</code>; для систем с двумя ядрами, скорее всего подойдет значение <code>-j3</code> или <code>-j2</code> и так далее. (Для систем с одним процессором, которые поддерживают технологию Hyper-Threading ™ (HT) можно предположить, что системе доступны 2 ядра, при условии, что поддержка Symmetric Multiprocessing (SMP) включена в ядре.)

==== Параметры, воздействующие на процесс компиляции ====

Следующие параметры обычно имеют эффект во время самой компиляции:

; <code>--kerneldir=/path/to/sources/</code>
: Определяет альтернативное расположение исходных кодов ядра, а не стандартное {{Path|/usr/src/linux/}}.
; <code>--kernel-config=/path/to/config-file</code>
: Определяет, какие альтернативные конфигурации будут использованы, а не стандартная {{Path|/path/to/sources/.config}}.
; <code>--module-prefix=/path/to/prefix-directory/</code>
: Определяет префикс для директории, в которую будут устанавливаться модули (по умолчанию {{Path|/lib/modules}}.)
; <code>--[no-]clean</code>
: Активирует (или деактивирует) команду {{c|make clean}} перед сборкой ядра. {{c|make clean}} удаляет все объектные файлы и зависимости из дерева исходных кодов.
; <code>--[no-]mrproper</code>
: Активирует (или деактивирует) команду {{c|make mrproper}} перед сборкой ядра. Как и у команды {{c|make clean}}, при выполнении {{c|make mrproper}} удаляются все объектные файлы и зависимости из дерева исходных кодов. Однако, любые предыдущие конфигурационные файлы (в {{Path|/path/to/sources/.config}} или {{Path|/path/to/sources/.config.old}}) будут также вычищены из дерева. Если не желательно удалять, чтобы конфиг ядра {{Path|.config}} удалялся, то обязательно отключите эту опцию!
; <code>--oldconfig</code>
: Проблема команды {{c|make oldconfig}}, которая пытается собирать конфигурационную информацию для системной архитектуры из скрипта в {{Path|/usr/share/genkernel}}. Это не интерактивный процесс; нет пользовательского ввода. Так же, если <code>--oldconfig</code> используется вместе с <code>--clean</code>, последняя опция отпадает, что приводит к активации опции <code>--no-clean</code>.
; <code>--callback="echo hello"</code>
: Вызывает указанные аргументы ({{c|echo hello}}, в данном случае) после сборки ядра и соответствующих модулей, но перед собирает образ initrd. Это может быть полезно при установке внешних модулей в образ initrd через затягивание соответствующих элементов с обратным вызовом, и затем переопределение группы модулей genkernel.
; <code>--[no-]install</code>
: Активирует (или деактивирует) команду {{c|make install}}, которая устанавливает образ нового ядра, файл конфигурации, образ initrd и системную карту на загрузочный раздел. Любые собираемые модули будут установлены. По умолчанию genkernel пытается смонтировать {{Path|/boot}}, если он является отдельным разделом, перед выполнением команды установки.
; <code>--no-ramdisk-modules</code>
: Воздерживается от копирования каких-либо модулей в созданный genkernel образ initrd. Эта вариант является исключением из правила о <code>no-</code> префиксе;  отсутствие приставки создает недопустимый параметр для genkernel.
; <code>--all-ramdisk-modules</code>
: Копирует все доступные модули в созданный genkernel образ initrd.
; <code>--genzimage</code>
: Создает образ initrd, предшествующий образу ядра (этот прием сейчас применим только к системам PPC Pegasos).

==== Параметры отладки ====

Использование параметров отладки, во время компиляции ядра, помогут контролировать количество отображаемой информации, а также как представляются эти данные.

; <code>--loglevel=<nowiki><0|1|2|3|4|5></nowiki></code>
: Регулирует количество информации отображаемой genkernel. Переменная <code>&lt;verblevel&gt;</code> это целое число от 0 до 5. Уровень '0' отображает минимальный уровень информации, а '5' отображает как можно больше информации о работе genkernel во время процесса компиляции.
; <code>--logfile=/path/to/output_file</code>
: Игнорирует любое значение опции <code>--loglevel</code> (о которой написано выше) и отправляет всю отладочную информацию от genkernel в специальный файл. По умолчанию вывод направляется в файл {{Path|/var/log/genkernel.log}}.
; <code>--[no-]color</code>
: Включает (или отключает) цветной вывод отладочной информации (сообщений от genkernel) с помощью управляющих последовательностей терминала.
; <code>--[no-]debug-cleanup</code>
: Включает (или отключает) полную очистку отладочной информации после выполнения.

=== Действия ===

Действие, переданное командной строке командой {{c|genkernel [options ...] ''action''}}, сообщает genkernel действие для выполнения. Поддерживаются следующие действия:

{| class="table table-condensed"
|-
! scope="col" width="25%" | Действие !! Описание
|-
| {{c|all}} || Сборка всех частей — initrd, образ ядра и модулей.
|-
| {{c|bzImage}} || Сборка только образа ядра.
|-
| {{c|kernel}} || Сборка только образа ядра и модулей.
|-
| {{c|initramfs}} || Сборка только образа initramfs/ramdisk.
|-
| {{c|ramdisk}} || Сборка только образа initramfs/ramdisk.
|}

== Конфигурация ==

=== Начав ===

Хотя существует несколько способов запустить утилиту genkernel, наименее навязчивый подход, рекомендуемый для большинства пользователей, предоставляется командой {{c|genkernel all}}. В этом примере используется общая конфигурация, которая хорошо работает для большинства используемых систем. Как было упомянуто ранее, этот подход не лишен недостатков; большинство созданных модулей бесполезны для среднестатистического пользователя и могут увеличить время компиляции. Ниже проиллюстрирован более эффективный подход, достигнутый передачей определенных параметров команде genkernel под учетной записью root:

{{RootCmd|genkernel --splash --no-install --no-clean --menuconfig all}}

Вышеуказанная операция заставляет genkernel создать ядро с заставкой на кадровом буфере (<code>--splash</code>), которое нужно будет установить вручную (<code>--no-install</code>). При подготовке дерева исходных кодов ядра, genkernel воздержится от удаления каких-либо уже существующих объектных файлов, присутствующих в дереве исходных кодов (<code>--no-clean</code>). Будет отображена меню-подобная утилита конфигурации ядра, которая позволяет пользователю выбрать какие модули должны быть собраны для системы (<code>--menuconfig</code>).

Замещение <code>--no-install</code> параметром <code>--install</code> позволяет genkernel автоматически установить новое ядро в каталог {{Path|/boot}}, а затем создать символьные ссылки, если указан параметр <code>--symlink</code>. Использование параметра <code>--mountboot</code> позволяет genkernel монтировать раздел {{Path|/boot}} автоматически, если это необходимо.

{{Note|Не забывайте, что файл {{Path|/etc/genkernel.conf}} используется командой '''genkernel''' при запуске в качестве источника команд, и что любой параметр, определенный здесь, будет применен, исключая те случаи, когда параметры командной строки имеют над ним больший приоритет.}}

=== Выбор ядра ===

Первое, что надо сделать, это разрешить запуск {{c|make menuconfig}} в файле {{Path|/etc/genkernel.conf}}:

{{FileBox|filename=/etc/genkernel.conf|title=Принудительное использование меню конфигурации в /etc/genkernel.conf|lang=bash|1=
# Запустить 'make menuconfig' перед компиляцией ядра?
MENUCONFIG="yes"
}}

==== Управление файлами ====

При использовании genkernel, пользователь должен знать некоторые из аспектов, касающихся конфигурации ядра и управления файлами образа ядра, а также способ, с помощью которого исходный код ядра обрабатываются системой.

===== Файлы исходного кода =====

После запуска {{c|emerge -u gentoo-sources}}, если доступна новая версия исходного кода, то для их хранения в {{Path|/usr/src/}} создается новый каталог. Обычно, на активный каталог с исходным кодом ядра указывает символьная ссылка {{Path|/usr/src/linux}}.

Каталог {{Path|/usr/src}} может выглядеть так:

{{Cmd|ls -l /usr/src|output=<pre>
total 16
lrwxrwxrwx  1 root root   19 21 Mar   2013 linux -> linux-3.7.10-gentoo
drwxr-xr-x 24 root root 4096 25 Aug  10:39 linux-3.10.7-gentoo
drwxr-xr-x 20 root root 4096 21 Apr  19:42 linux-3.7.10-gentoo
drwxr-xr-x 21 root root 4096 14 Mar   2013 linux-3.7.9-gentoo
</pre>}}

Символьная ссылка {{Path|/usr/src/linux}} может быть изменена разными способами. 

* Если установлен USE-флаг <code>symlink</code>, то символьная ссылка {{Path|/usr/src/linux}} автоматически обновляется и будет указывать на только что установленный исходный код. 

* Если <code>symlink</code> USE-флаг ''не'' установлен, пользователь может изменить назначение для символьной ссылки используя команду {{c|eselect kernel list}}, а затем {{c|eselect kernel set}}.

genkernel ''всегда'' (исключительно) использует исходный код, на которые указывает символьная ссылка {{Path|/usr/src/linux}}.

===== Файл конфигурации ядра =====

Если компиляция ядра уже запущена с активным исходным кодом ядра, в каталоге {{Path|/etc/kernels}} может находиться файл, который содержит конфигурацию ядра, которая применялась при создании последнего файла ядра bzimage. Этот файл может называться, например, {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}}, где <code>x86_64</code> может быть заменено на архитектуру системы, <code>3.7.9</code> может быть заменено на версию  используемого исходного кода, а <code>r1</code> на выпуск (release) исходного кода.

Это тот самый файл {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}}, который используется в качестве начальной конфигурации при запуске {{c|genkernel --menuconfig all}}.

Если genkernel первый раз вызывается с данным исходным кодом ядра, или если предыдущий результат не был сохранен, этот файл заменяется на файл конфигурации по умолчанию, который находится в {{Path|usr/share/genkernel/arch/x86_64/kernel-config}}, где x86_64 заменяется на действительную архитектуру.

{{Note|Путь к этому файлу конфигурации по умолчанию может быть изменен установкой переменной <var>DEFAULT_KERNEL_CONFIG</var> в файле {{Path|/etc/genkernel.conf}}.}}

===== Сохранение конфигурации компилирования =====

Если активирован параметр genkernel <code>--save-config</code>, как из командной строки, так и из {{Path|/etc/genkernel.con}}, конфигурация скомпилированного ядра сохраняется (под именем данным выше) в каталог {{Path|/etc/kernels}}. В то же время, конфигурация сохраняется в файл {{Path|.config}} в каталоге {{Path|/usr/src/linux}}, но этот файл не используется заново при следующем запуске команды {{c|genkernel all}}.

{{Warning|Необходимо знать, что каждый раз при запуске genkernel с установленным параметром <code>--save-config</code>, файл конфигурации в {{Path|/etc/kernels}} перезаписывается. Таким образом, рекомендуется скопировать этот файл под новым именем ''перед'' запуском genkernel, для того чтобы его сохранить.}}

===== Установка ядра и initramfs в каталог {{Path|/boot}} =====

Использование опции <code>--install</code> при вызове genkernel, просит <code>genkernel</code> установить образ ядра и initramfs в каталог {{Path|/boot}}. Для того, чтобы сделать это удобным образом, установите следующие параметры в файле {{Path|/etc/genkernel.conf}}:

{{FileBox|filename=/etc/genkernel.conf|title=Установка автосохранения ядра и initramfs|lang=bash|1=
# Примонтировать каталог BOOTDIR автоматически, если не примонтирован?
MOUNTBOOT="yes"
  
# Сохранить новую конфигурацию в /etc/kernels при успешной компиляции
SAVE_CONFIG="yes"
  
# Сделать символьные ссылки в BOOTDIR автоматически?
SYMLINK="yes"
  
# Добавить новое ядро в grub2?
#BOOTLOADER="grub2"
}}

* Первый параметр говорит сам за себя.

* Второй параметр сообщает genkernel, чтобы конфигурация скомпилированного ядра была сохранена в {{Path|/etc/kernels}}.

* Последние два параметра сообщают genkernel, чтобы она автоматически обновила конфигурацию загрузчика grub. На практике, происходит следующее:
** Если уже существует предыдущий образ ядра с таким же именем, он переименовывается путем добавления {{Path|.old}} к его имени. Автоматически создается символьная ссылка {{Path|kernel.old}}, которая указывает на него.
** Новое ядро занимает место ядра с тем же самым именем в каталоге {{Path|/boot}}. Если ядро скомпилировано в первый раз, автоматически создается символьная ссылка, которая указывает на новое ядро.

После запуска {{c|genrkernel --menuconfig all}}, каталог {{Path|/boot}} может выглядеть следующим образом:

{{Cmd|ls -al /boot|output=<pre>
total 41336
drwxr-xr-x  3 root root    4096 20 avril 17:23 .
drwxr-xr-x 24 root root    4096 15 sept. 12:31 ..
lrwxrwxrwx  1 root root       1 24 févr.  2013 boot -> .
drwxr-xr-x  2 root root    4096 24 févr.  2013 grub
lrwxrwxrwx  1 root root      40 20 avril 17:23 initramfs -> initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1314412 20 avril 17:23 initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1313548 21 mars   2013 initramfs-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 1295344 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3310324 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      44 20 avril 17:23 initramfs.old -> initramfs-genkernel-x86_64-3.7.10-gentoo.old
lrwxrwxrwx  1 root root      37 20 avril 17:23 kernel -> kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866656 20 avril 17:23 kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866560 21 mars   2013 kernel-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 4552288 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3400736 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      41 20 avril 17:23 kernel.old -> kernel-genkernel-x86_64-3.7.10-gentoo.old
</pre>}}

==== Конфигурация загрузчика ====

Символьные ссылки, приведенные выше в конфигурации загрузчика, могут быть использованы так, что даже если новое ядро не загружается, пользователь смог всегда загрузить предыдущее. 

Чтобы разрешить ядру и initrd, генерируемым genkernel, работать правильно, предоставьте необходимый минимум информации в файле конфигурации загрузчика:

* Добавьте <code>root=/dev/sdaN</code> к параметрам ядра, передаваемым образу ядра, где {{Path|/dev/sdaN}} указывает на root раздел (<code>N</code> - это номер раздела, если раздел сущестует).
* Если используется splash screen, добавьте подходящую строку режима (mode line), такую как <code>vga=0x317</code> в список параметров, передаваемых ядру и также добавьте <code>splash=verbose</code> или <code>splash=silent</code>, в зависимости от уровня вывода сообщений, требуемого в процессе загрузки.
* Добавьте информацию initrd, как это требуется загрузчиком. Обратитесь к главе [[Handbook:X86/Installation/Bootloader/ru|конфигурация загрузчика]] Gentoo Handbook, чтобы узнать как настроить поддержку initrd в загрузчике.

Ниже приведено то, как может выглядеть файл {{Path|grub.conf}}.

{{FileBox|filename=/boot/grub/grub.conf|title=Пример файла grub.conf|lang=bash|1=
# Это пример файла grub.conf для использования с Genrkernel, из настольной книги Gentoo
# http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1&chap=10#doc_chap2  
# Если Вы не пользуетесь Genkernel и Вам нужна помощь при создании этого файла, Вы должны проконсультироваться с настольной книгой. Иначе, обратитесь к файлу grub.conf.sample, который включен в документацию Grub.
  
default 0 
timeout 5
splashimage=(hd1,0)/boot/grub/splash.xpm.gz 
   
title Gentoo Linux 
root (hd0,6) 
kernel /boot/kernel initrd=/dev/ram0 real_root=/dev/sda7 rootfstype=ext4  
initrd /boot/initramfs
  
title Gentoo Linux old kernel 
root (hd0,6) 
kernel /boot/kernel.old initrd=/dev/ram0 root=/dev/sda7 rootfstype=ext4 
initrd /boot/initramfs.old
}}

==== Сохранение рабочих файлов ====

Приложение genrkernel автоматически сохраняет новые изменения в файлах. Если требуется сохранить предыдущие изменения, то должны быть предприняты следующие меры.

* Первым файлом, который надо сохранить, является файл конфигурации ядра в {{Path|/etc/kernels}}. Если версия исходного кода не изменилась перед перекомпиляцией ядра, будет использовано имя файла, использованное ранее. Поэтому, копирование файла конфигурации под другим именем помогает сохранить информацию при сохранении файла доступным в качестве начальной точки для новой конфигурации.

* Второй важной вещью необходимо сохранить уже загружаемые образы ядра и initramfs. Способ, которым это можно выполнить, зависит от контекста:
:# Если ранее скомпилированное ядро загружается, запуск {{c|genkernel}} переименует образ этого ядра (и, также, initramfs) в {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} и создаст новый {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}. Это значит, что даже если новое ядро не загружается, пользователи всегда смогут загрузить предыдущее.
:# Если последнее скомпилированное ядро не загружается и исходные тексты не изменялись с того момента как пользователь скомпилировал загружаемое ядро, до запуска {{c|genkernel}}, сперва удалите образ нового ядра и уберите суффикс {{Path|.old}} из последнего загружаемого ядра. Без этого, если заново скомпилированное ядро не загружается во второй раз, загружаемое ядро {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} будет удалено переименованием незагружаемого {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}, приводя пользователя к незагружаемой системе. Используйте те же самые рассуждения для initramfs.

==== Использование предыдущей конфигурации ядра при изменении исходного кода ядра ====

Предыдущая конфигурация может использоваться через параметр <var>MENUCONFIG</var> в {{Path|/etc/genkernel.conf}} следующим образом:

{{FileBox|filename=/etc/genkernel.conf|title=Настройка make menuconfig|1=
# Запустить 'make menuconfig' перед компиляцией этого ядра?
MENUCONFIG="yes"
}}

{{Note|Нет необходимости запускать {{c|make oldconfig}} когда исользуется genkernel, даже если исходный код изменился с {{Path|kernel-genkernel-ARCH-version-gentoo-rx}} на {{Path|kernel-genkernel-ARCH-version-gentoo-r(x+1)}} или с {{Path|kernel-genkernel-ARCH-version-gentoo}} на {{Path|kernel-genkernel-ARCH-(version+1)-gentoo}}. Потому что команда {{c|make menuconfig}} попытается загрузить предыдущую конфигурацию в меню, настолько, насколько возможно. Тем не менее, рекомендуется осторожное ''рассмотрение'' каждого параметра и новых разделов.}}

=== Сетевая загрузка ===

==== С установочного диска ====

Утилита {{c|genkernel}} может собрать образ ядра и initrd, которые имеют поддержку сетевой загрузки, или netbooting. Если хоть немного повезет, пользователи смогут загрузить по сети какой-либо новый компьютер в среду, предоставляемую загрузочным CD.

Волшебство заключается в сценарии linuxrc утилиты genkernel: он попытается смонтировать загрузочный диск по сети используя NFS. Оттуда, сценарии инициализации загрузочного CD смогут получить контроль, как если бы CD присутствовал локально.

==== Сборка ядра и initramfs с поддержкой сетевой загрузки ====

Для разрешения поддержки загрузки по сети, включите следующие параметры при конфигурации ядра:

{{Warning|Поддержка загрузки по сети с genkernel является экспериментальной, поэтому могут встретиться баги.}}

Во-первых, образ ядра должен включать драйверы для сетевых карт в системе (Network Interface Cards - NIC). Обычно, драйверы для таких устройств компилируются в качестве модулей. Однако, важно (для загрузки по сети), чтобы подобные драйверы были скомпилированы прямо в образ ядра, а не как модули.

{{KernelBox|title=Конфигурация ядра серии 3.x.x для поддержки различных драйверов NIC|<pre>
Device Drivers --->
   Networking Support --->
      Ethernet (10 or 100Mbit)  --->
         [*] Ethernet (10 or 100Mbit)
         <*>   The driver(s) for each network card</pre>
}}

{{Note|Убедитесь, что выбран {{c|&lt;*&gt;}}, а не {{c|&lt;M&gt;}}.}}

Во-вторых, предполагается что включен параметр "IP: kernel level autoconfiguration", также как и "IP: DHCP support options". Это позволяет избежать лишних сложностей, так как IP-адрес и путь NFS к установочному CD могут быть сконфигурированы на DHCP-сервере. Определенно, это означает, что командная строка ядра будет оставаться постоянной для любой машины - что очень важно для etherbooting.

{{KernelBox|title=Конфигурация ядра серии 3.x.x для поддержки DHCP|<pre>
Device Drivers --->
   Networking Support --->
      Networking options
         [*] TCP/IP networking--->
         [*]   IP: kernel level autoconfiguration
         [*]     IP: DHCP support
</pre>}}

Эти параметры сообщают ядру, чтобы оно отправило DHCP-запрос при загрузке.

Кроме того, включите [[SquashFS|SquashFS]], потому что большинство современных установочных дисков Gentoo требуют этого. Поддержка SquashFS не включается в основное дерево исходных текстов ядра. Чтобы включить SquashFS, примените необходимые патчи к основному исходному коду ядра или установите gentoo-sources.

{{KernelBox|title=Конфигурация ядра для поддержки SquashFS|<pre>
File systems--->
   Miscellaneous filesystems --->
      [*] SquashFS 2.X - Squashed file system support
</pre>}}

Как только процесс компиляции завершен, создайте сжатый архив tar (tarball - tar.gz), который содержит модули ядра. Этот шаг требуется только если версия ядра не соответствует версии образа ядра на установочном CD.

Чтобы создать архив содержащий все модули:

{{RootCmd|cd /
|tar -cf /tmp/modules-X.Y.Z.tar.gz /lib/modules/X.Y.Z/}}

В зависимости от механизма загрузки по сети, необходимо последовать одному из следующих шагов:

Для создания образа etherboot:

{{Emerge|net-misc/mknbi}}

{{RootCmd
|cd /boot
|mkelf-linux -params{{=}}"root{{=}}/dev/ram0 init{{=}}/linuxrc ip{{=}}dhcp" kernel... initrd... > etherboot.img}}

Для создания образа OpenBoot/SPARC64 TFTP:

{{Emerge|sys-apps/sparc-utils}}

{{RootCmd
|cd /boot
|elftoaout kernel... -o kernel.aout
|piggyback64 kernel.aout System.map-... initrd-...
|mv kernel.aout openboot.img}}

Файл {{Path|openboot.img}} является образом ядра.

В завершение, скопируйте это ядро на TFTP сервер. Подробности являются архитектурно-зависимыми и выходят за рамки этого руководства. Пожалуйста, обратитесь к документации для платформы.

==== Настройка NFS ====

Для настройки общего ресурса NFS, который содержит установочный CD, используйте loop-устройство, чтобы примонтировать образ ISO и затем скопировать содержимое CD в общий ресурс NFS. В качестве приятного дополнения, сценарии initrd утилиты genkernel извлекут все файлы tar.gz, расположенные в каталоге {{Path|/nfs/livecd/add/}}. Все, что требуется здесь сделать, это скопировать архив {{Path|modules-X.Y.Z.tar.gz}} в каталог {{Path|/nfs/livecd/add/}}.

Следующее предполагает что {{Path|/nfs/livecd}} является экспортируемым общим сетевым ресурсом NFS:

{{RootCmd|mount /tmp/gentoo-livecd.iso /mnt/cdrom -o loop
|cp -p /mnt/cdrom /nfs/livecd
|umount /mnt/cdrom}}

Теперь, скопируйте файл {{Path|modules.tar.gz}} в {{Path|/add}}:

{{RootCmd|mkdir /nfs/livecd/add
|cp /tmp/modules-X.Y.Z.tar.gz /nfs/livecd/add}}

==== Настройка DHCP ====

Образы netboot запросят IP у DHCP-сервера в сети, а также опцию <code>root-path</code>. Оба параметра могут быть указаны отдельно для каждого хоста с использованием идентификации машин на основе MAC-адреса:

{{FileBox|filename=/etc/dhcpd.conf|title=Образец настройки для клиента в dhcpd.conf|1=
# Здесь, 192.168.1.2 - это NFS сервер, тогда как 192.168.1.10 будет IP-адресом компьютера загружаемого по сети
host netbootableMachine {
         hardware ethernet 11:22:33:44:55:66;
         fixed-address 192.168.1.10;
         option root-path "192.168.1.2:/nfs/livecd";
}
}}

==== Инструкции загрузки по сети ====

Напомним, что загрузка по сети является очень платформо-зависимой. Важной деталью является указать параметры <code>ip=dhcp</code> и <code>init=/linuxrc</code> в командной строке ядра, так как это вызовет сетевой интерфейс и сообщит сценариям initrd о том, что необходимо примонтировать установочный CD через NFS. Здесь приведены несколько платформо-зависимых советов:

Для etherboot, вставьте etherboot-диск в привод и перезагрузитесь. Командная строка ядра была указана, когда собирался образ.

На Sparc64, нажмите {{Key|Stop}}+{{Key|A}} в командной строке загрузки и затем введите:

{{RootCmd|boot net ip {{=}} dhcp init {{=}} /linuxrc|prompt=ok }}

Для PXE, настройте pxelinux (часть пакета syslinux), затем создайте {{Path|pxelinux.cfg/default}} подобно тому как:

{{FileBox|filename=pxelinux.cfg/default|title=Запись по умолчанию|1=
DEFAULT gentoo
TIMEOUT 40
PROMPT 1
  
LABEL gentoo
    KERNEL kernel-X.Y.Z
    APPEND initrd=initrd-X.Y.Z root=/dev/ram0 init=/linuxrc ip=dhcp
}}

==== Загрузка initramfs, сгенерированной genkernel ====

===== Введение =====

Если initramfs установлен с помощью genkernel, то присмотритесь к следующим параметрам загрузки которые могут (или должны) быть определены в конфигурации загрузчика. Наиболее общие добавлены в это руководство.

===== Загрузка LVM или программного RAID =====

Если система использует LVM или программный RAID, initramfs должен быть собран с использованием параметров <code>--lvm</code> и <code>--mdadm</code>. Не забудьте также включить поддержку во время процесса загрузки. Это можно сделать с помощью параметров dolvm и domdadm.

{{FileBox|filename=/boot/grub/grub.conf|title=Включение поддержки LVM и/или MDADM|1=
# Пример для GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 dolvm domdadm
initrd /initramfs-genkernel-x86_64-3.4.3
}}

===== Загрузка в однопользовательском режиме =====

Если по какой-то причине загрузка завершается с ошибкой, все еще возможно восстановление системы с помощью загрузки в однопользовательском режиме. Это загрузит только действительно необходимые службы и затем перебросит пользователя в (root) оболочку восстановления.

{{FileBox|filename=/boot/grub/grub.conf|title=Загрузка в однопользовательском режиме|1=
# Пример для GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 init_opts=S
initrd /initramfs-genkernel-x86_64-3.4.3
}}

== Устранение проблем ==

=== compile failed: Kernel not found ===

Эта ошибка может произойти при попытке собрать ядро для одной архитектуры, но используется файл {{Path|.config}} конфигурации ядра в котором определена другая архитектура. Это так же, как на машине с архитектурой {{Keyword|amd64}} пытаться собрать {{Keyword|x86}}.

Это можно проверить с помощью загрузки с x86_64 LiveCD  на железе способном работать в 64-битном режиме, однако установленная система является 32-битной. После того, как начнется процесс компиляции, {{c|genkernel}} будет пытаться автоматически определить архитектуру системы на основе текущего ядра. Если в настоящее время работает 64-бит ядро и нет никаких настроек меняющих это, то {{c|genkernel}} будет предполагать, что следует искать 64-битное ядро.

Предположим теперь, что файл {{Path|.config}} ядра x64 отключен. Команда {{c|make}} будет выполнена и полученный файл ядра будет размещен в соответствующей {{Path|x86}} директории. Когда {{c|genkernel}} переходит к установке (перемещению и переименованию) ядра, оно не может его найти, потому что ожидает 64-битное ядро.

Решением этой проблемы является использовать опцию {{c|genkernel}} <code>--arch-override</code>, в рассматриваемом примере архитектура {{Keyword|x86}}. В итоге команда может выглядеть следующим образом:

{{RootCmd|genkernel --kernel-config{{=}}/usr/src/linux/.config --btrfs --install --arch-override{{=}}x86 all}}

Чтобы изменить архитектуру на постоянной основе, измените переменную <var>ARCH_OVERRIDE</var> в файле {{Path|/etc/genkernel.conf}}.

== Смотрите также ==

* [[Kernel/Configuration/ru|Руководство по конфигурации ядра]] - Когда компиляция ядра делается вручную.
* [[Dracut]] - Другой сборщик initramfs доступный в Gentoo.


[[Category:Kernel]]
[[Category:Initramfs]] {{Migrated|originalauthors=Tim Yamin, Jimi Ayodele, Thomas Seiler, Joshua Saddler, Sebastian Pipping, José Fournier}}
