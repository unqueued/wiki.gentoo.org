<languages />
{{Lowercase title}}
{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
|{{InfoBox gdoc|genkernel}}
}}

'''genkernel''' используется для автоматизации процесса сборки [[kernel/ru|Ядра]] и [[initramfs|initramfs]]. Некоторые из общих функций включают:
* конфигурацию исходных текстов ядра
* сборку сжатого ядра {{Path|bzImage}} и его копирование в {{Path|/boot}}
* создание initramfs и копирование ее в {{Path|/boot}}
* создание символьных ссылок в {{Path|/boot}}
* добавление настроенного вручную содержимого в initramfs, такого как файлов, связанных с шифрованием, splash image, дополнительных модулей и так далее.
* сжатие initramfs
* конфигурацию [[bootloader|загрузчика]]

== Установка ==

Для установки {{Package|sys-kernel/genkernel}} сначала выберите подходящие USE-флаги.

{{USEflag|package=sys-kernel/genkernel
|crypt++no
|cryptsetup++no
|ibm++no
|selinux++no
}}

Затем можно запустить установку genkernel.

{{Emerge|genkernel}}

== Вызов genkernel ==

Основная форма вызова команды genkernel выглядит следующим образом:

{{RootCmd|<pre> genkernel [options ...] action
</pre>}}

=== Параметры === 

Поведение genkernel зависит от большого количества параметров, большинство из которых могут быть настроены в файле {{Path|/etc/genkernel.conf}} или переданы команде <code>genkernel</code>. Параметры, переданные с помощью командной строки, имеют больший приоритет, чем те, которые определены в файле {{Path|/etc/genkernel.conf}}. Этот файл очень хорошо продокументирован, но все же давайте исследуем некоторые из наиболее используемых параметров. Для более полного объяснения, обратитесь к комментариям в {{Path|/etc/genkernel.conf}} или выводу команды <code>man genkernel</code>.

{{Note/ru|Некоторые из параметров имеют вариации, которые ведут себя противоположным образом. Они обозначены как <tt>--[no-]option_name</tt>, а обратный эффект приведен в квадратных скобках, как в следующем примере:
{{Code|Включить или отключить определенный параметр|<pre>
--[no-]menuconfig : Activates [deactivates] ...
</pre> }}
Когда параметры обладают только обратным эффектом, приставка <tt>no-</tt>, и эффект работы команды, который не является опциональным в этом случае, обозначены без квадратных скобок.}}

==== Параметры воздействующие на взаимодействие с пользователем ====

Параметры конфигурации, перечисленные ниже, помогают решить как нужно взаимодействовать с процессом конфигурации. Пользователи могут даже выбрать требуется или нет сохранять файл конфигурации, созданный в процессе. Ниже следуют основные параметры конфигурации:

;<tt>--[no-]menuconfig</tt>
: Активирует [ или деактивирует ] команду <code>make menuconfig</code> (которая вызывает интерактивное меню конфигурации) перед сборкой ядра.

;<tt>--gconfig</tt>
: Предоставляет утилиту конфигурации ядра, которая зависит от библиотек GTK+. Преимуществом этого параметра является то, что большинство пользователей находят конфигурацию ядра с использованием этого инструмента более легкой и очевидной, так как она полагается на X window system. Недостаток этого параметра заключается в том что Вам необходим X сервер для того, чтобы его использовать, поэтому этот параметр не будет работать в командной строке.

;<tt>--xconfig</tt>
: Предоставляет утилиту конфигурации ядра, которая зависит от библиотек QT. Преимуществом этого параметра является то, что большинство пользователей находят конфигурацию ядра с использованием этого инструмента более легкой и очевидной, так как он полагается на X window system. Недостатком этого параметра является то, что Вам потребуется X сервер для его использования, поэтому он не будет работать в командной строке.

;<tt>--[no-]save-config</tt>
: Сохраняет [или не сохраняет] конфигурацию ядра в файл в каталоге {{Path|/etc/kernels}} для дальнейшего использования.

;<tt>--kernname=&lt;NickName&gt;</tt>: Позволяет модификацию имени ядра и образа initrd в каталоге {{Path|/boot}}, так чтобы полученные изображения имели имена {{Path|kernel-&lt;NickName&gt;-version}} и {{Path|initramfs-&lt;NickName&gt;-version}}.

==== Параметры воздействующие на систему, полученную в результате ====

Параметры конфигурации, перечисленные здесь, определяют какие возможности будут, или не будут, включены в полученные в результате ядро и образ initrd. 

;<tt>--[no-]splash</tt>
: Включает [или отключает] поддержку [http://fbsplash.berlios.de/wiki/doku.php заставки (framebuffer splash screen)] в образе собранного с помощью genkernel initrd. Чтобы переписать тему, используемую fbsplash по умолчанию, используйте <tt>--splash=&lt;PreferredTheme&gt;</tt> (где <tt>&lt;PreferredTheme&gt;</tt> - имя одного из каталогов в каталое {{Path|/etc/splash}}).

;<tt>--splash-res=&lt;PreferredResolution&gt;</tt>
: Этот параметр позволяет выбрать какие разрешения экрана будут поддерживаться в initrd в течение запуска системы. Это полезно по двум причинам. Во-первых, чтобы иметь возможность выбрать только те разрешения заставки, уместные для системы. Во-вторых, чтобы избежать излишнее увеличение дискового пространства, требуемого initrd (так как initrd не должен поддерживать разрешения, не соотносящиеся с конфигурацией Вашей системы.) Однако, этот параметр лучше всего пропустить, если ядро компилируется для установочного CD; это позволяет поддержку заставки для всех возможных разрешений.

;<tt>--do-keymap-auto</tt>
: Выбор раскладки клавиатуры в течение загрузки.

;<tt>--lvm</tt>
: Включает поддержку использования хранилища данных с помощью [http://sources.redhat.com/lvm2/ Менеджера логических томов] (LVM2) из статических двоичных файлов, если это доступно на системе. Подходящие (статические) двоичные файлы LVM2 компилируются, если они недоступны. Убедитесь, что Вы установили пакет lvm2 на систему с помощью команды emerge lvm2 перед тем, как включить этот параметр, и пересмотрите [[LVM | статью LVM]] на Gentoo wiki.

;<tt>--dmraid</tt>
: Включает поддержку DMRAID; утилиты которая создает RAID-отображения (RAID mappings), используя подсистему ядра device-mapper.
[http://people.redhat.com/~heinzm/sw/dmraid/readme DMRAID] обнаруживает, активирует, деактивирует и отображает свойства программных массивов RAID (например, ATARAID) и содержащихся DOS разделов.

;<tt>--luks</tt>
: Включает поддержку Linux Unified Key Setup, или [http://clemens.endorphin.org/cryptography LUKS]. Это позволяет использовать устройство, зашифрованное LUKS, которое содержит корневую файловую систему. Установите это зашифрованное устройство как <code>crypt_root</code> в загрузчике (а <code>real_root</code> должно быть незашифрованным устройством, созданным LUKS).

;<tt>--disklabel</tt>
: Добавляет поддержку метки диска и UUID в initrd.

;<tt>--iscsi</tt>
: Добавляет поддержку iSCSI в initrd.

;<tt>--multipath</tt>
: Добавляет поддержку [[Multipath]] в initrd.

;<tt>--linuxrc=/path/to/your/linuxrc</tt>
: Указывает созданный пользователем linuxrc - сценарий, который инициализируется в течение начальной стадии загрузки ядра, до начала действительного процесса загрузки. (Сценарий linuxrc по умолчанию должен быть в каталоге {{Path|/usr/share/genkernel/}}.) Этот сценарий позволяет загружаться в небольшое, модульное ядро и загружать драйверы, которые требуются (в качестве модулей) для системы.

;<tt>--cachedir=/path/to/alt/dir</tt>
: Перезаписывает расположение кэша по умолчанию, используемого при компиляции ядра.

;<tt>--tempdir=/path/to/new/tempdir</tt>
: Указывает расположение временного каталога используемого genkernel при компиляции ядра.

;<tt>--unionfs</tt>
: Включает поддержку [http://www.fsl.cs.sunysb.edu/project-unionfs.html файловой системы UnionFS] в образ initrd.

;<tt>--mountboot</tt>
: Обнаруживает необходимо ли монтировать каталог {{Path|/boot}} на отдельный раздел. Этот параметр проверяет сценарий {{Path|/etc/fstab}} на наличие инструкций монтирования раздела boot на файловую систему (если необходимо).

==== Параметры, воздействующие на выбор инструментов, используемых для построения ====

Следующие параметры поддерживаются genkernel, и передаются соответствующим приложениям в то время когда собирается ядро. Эти параметры воздействуют на инструменты, используемые в течение процесса компиляции ядра, хотя и на более низком уровне.

;<tt>--kernel-cc=&lt;someCompiler&gt;</tt>
: Указывает компилятор, используемый в течение процесса компиляции ядра.

;<tt>--kernel-ld=&lt;someLinker&gt;</tt>
: Указывает линкер, используемый в течение процесса компиляции ядра.

;<tt>--kernel-as=&lt;someAssembler&gt;</tt>
: Указывает ассемблер, используемый в течение процесса компиляции ядра.

;<tt>--kernel-make=&lt;someMake&gt;</tt>
: Указывает альтернативу утилиты GNU make, используемую в течение процесса компиляции ядра.

;<tt>--utils-cc=&lt;someCompiler&gt;</tt>
: Указывает компилятор, используемый в течение компиляции утилит поддержки.

;<tt>--utils-ld=&lt;someLinker&gt;</tt>
: Указывает линкер, используемый в течение компиляции вспомогательных утилит.

;<tt>--utils-as=&lt;someAssembler&gt;</tt>
: Указывает ассемблер, используемый в течение компиляции вспомогательных утилит.

;<tt>--utils-make=&lt;someMake&gt;</tt>
: Указывает альтернативу утилиты GNU make, используемую в течение компиляции вспомогательных утилит.

;<tt>--makeopts=-jX</tt>
: Указывает количество параллельных потоков, которые утилита make может реализовать во время компиляции ядра (и утилит). Переменная <code>X</code> - выбираемое свободно число, хотя наиболее общие значения получаются добавлением единицы (1) к количеству ядер используемых системой, или просто используется количество ядер на системе. Поэтому, на системе с одним ядром, наиболее общими параметрами являются <code>-j2</code> или <code>-j1</code>; система с двумя ядрами наиболее вероятно будет использовать параметры <code>-j3</code> или <code>-j2</code>, и так далее. (Система с одним процессором, которая поддерживает технологию Hyper-Threading™ (HT) может считаться системой с двумя (2) ядрами, учитывая что поддержка симметричного мультипроцессирования - Symmetric Multi-Processing (SMP) включена в ядро.)

==== Параметры, воздействующие на процесс компиляции ====

Следующие параметры обычно имеют эффект в течение действительной компиляции:

;<tt>--kerneldir=/path/to/sources/</tt>
: Указывает альтернативное расположение исходных текстов ядра, вместо расположения по умолчанию {{Path|/usr/src/linux/}}.

;<tt>--kernel-config=/path/to/config-file</tt>
: Указывает какой файл конфигурации ядра должен быть использован, вместо файла по умолчанию {{Path|/path/to/sources/.config}}.

;<tt>--module-prefix=/path/to/prefix-directory/</tt>
: Указывает путь к каталогу, где будут установлены модули ядра ( путь по умолчанию - каталог {{Path|/lib/modules}}.)

;<tt>--[no-]clean</tt>
: Активизирует [или деактивизирует] команду <code>make clean</code> перед компиляцией ядра. Команда <code>make clean</code> убирает все объектные файлы и зависимости из дерева исходных кодов ядра.

;<tt>--[no-]mrproper</tt>
: Активизирует [или деактивизирует] команду <code>make mrproper</code> перед компиляцией ядра. Так же как и команда <code>make clean</code>, <code>make mrproper</code> убирает все объектные файлы и зависимости из дерева исходных кодов ядра. Однако, любые предыдущие файлы конфигурации (в {{Path|/path/to/sources/.config}} или {{Path|/path/to/sources/.config.old}}) также будут удалены из дерева исходных кодов ядра.

;<tt>--oldconfig</tt>
: Вызывает команду <code>make oldconfig</code>, которая пытается собрать информацию о конфигурации для архитектуры системы из обобщенного сценария в {{Path|/usr/share/genkernel}}. Это неинтерактивный процесс; пользовательский ввод не требуется. Также, если <tt>--oldconfig</tt> используется в соединении с <tt>--clean</tt>, последним параметром пренебрегается, что приводит к активации параметра <tt>--no-clean</tt>.

;<tt>--callback="echo hello"</tt>
: Вызывает указанные аргументы (в данном случае, <code>echo hello</code>) после того как собрано ядро и соответствующие модули, но перед сборкой образа initrd. Это может быть полезно если Вы хотите установить внешние модули в образ initrd компилируя соответствующие элементы с параметром callback, а затем переопределяя группу модулей genkernel.

;<tt>--[no-]install</tt>
: Активирует [или деактивирует] команду make install, которая устанавливает новый образ ядра, файл конфигурации, образ initrd и файл system.map на смонтированный загрузочный раздел. Также будут установлены любые скомпилированные модули.

;<tt>--no-ramdisk-modules</tt>
: Воздержаться от копирования каких-либо модулей в образ initrd, созданный genkernel. Этот параметр является исключением из правила, связанного с приставкой <tt>no-</tt>; пропуск этой приставки создает неправильный параметр genkernel.

;<tt>--all-ramdisk-modules</tt>
: Копирует все доступные модули в образ initrd, созданный genkernel.

;<tt>--genzimage</tt>
: Создает образ initrd, предшествующий образу ядра. (Этот прием в настоящее время применим только к системам PPC Pegasos.)

==== Параметры отладки ====

Использование параметров отладки в течение процесса компиляции ядра управляет количеством отображаемой информации, а также представлением этих данных.

;<tt>--loglevel=&lt;verblevel&gt;</tt>
: Контролирует уровень избыточности информации, предоставляемой утилитой genkernel. Переменная <code>&lt;verblevel&gt;</code> - это целое число в диапазоне от 0 до 5. Уровень '0' представляет минимальный уровень вывода сообщений, в то время как '5' предоставляет настолько много информации о действиях genkernel в течение компиляции ядра, насколько возможно.

;<tt>--logfile=/path/to/outputfile</tt>
: Игнорирует значение, установленное аргументом <tt>--loglevel</tt>, и отправляет все отладочные данные, сгенерированные genkernel, в указанный файл, который по умолчанию располагается в каталоге {{Path|/var/log/genkernel.log}}.

;<tt>--[no-]color</tt>
: Активирует (или деактивирует) цветной вывод отладочной информации (генерируемой genkernel), используя управляющие последовательности.

=== Действие ===

Действие, переданное командной строке командой <code>genkernel [options ...] action</code>, сообщает <code>genkernel</code> что необходимо сделать - поддерживаются следующие действия:

;<code>all</code>
: Собрать все стадии - initrd, образ ядра и модули.

;<code>bzImage</code>
: Собрать только образ ядра

;<code>kernel</code>
: Only builds the kernel image and modules

;<code>initramfs</code>
: Only builds the initramfs/ramdisk image

;<code>ramdisk</code>
: Only builds the initramfs/ramdisk image

== Using Genkernel  ==

=== Genkernel First Invocation ===

Although there are several ways to run genkernel, the least-intrusive approach recommended for most users is provided by <code>genkernel all</code>. Here, a generic configuration which works well for most systems is used. As was mentioned earlier, this approach is not without drawbacks; most of the modules created are useless to the average user and may increase compile time. Below is an illustration of a more efficient approach, achieved by passing certain options to genkernel as root:

{{RootCmd|genkernel --splash --no-install --no-clean --menuconfig all}}

The above operation causes genkernel to create a framebuffer splash-enabled kernel (<tt>--splash</tt>) that will have to be manually installed (<tt>--no-install</tt>). While preparing the kernel source tree, genkernel will refrain from cleaning out any preexisting object files present in the source tree (<tt>--no-clean</tt>). A menu-driven kernel configuration utility will be displayed that allows the user to select which modules will be built for the system (<tt>--menuconfig</tt>).

Replacing <tt>--no-install</tt> with the <tt>--install</tt> option allows genkernel to automatically install the new kernel in the {{Path|/boot}} directory, and will create symlinks for you if <tt>--symlink</tt> is specified. Using the <tt>--mountboot</tt> option allows genkernel to mount the {{Path|/boot}} partition automatically, if necessary.

{{Note|Don't forget that the {{Path|/etc/genkernel.conf}} file is sourced by the <code>genkernel</code> command at startup, and that any option defined there, will be applied, except where a command line option takes precedence over it.}}

=== Using Genkernel to change your kernel  ===

The first thing that should be done is to allow the triggering of <code>make menuconfig</code> in the {{Path|/etc/genkernel.conf}} file:

{{File|/etc/genkernel.conf|Forcing the use of the configuration menu in /etc/genkernel.conf|<pre>
# Run 'make menuconfig' before compiling this kernel?
MENUCONFIG="yes"
</pre>}}

==== File Management by genkernel ====

While using genkernel, the user has to be aware of some aspects relating to kernel configuration and kernel image files management and the way the kernel sources are handled by the system.

===== Source Files used by genkernel =====

After an <code>emerge -u gentoo-sources</code>, whenever new sources are available, a new kernel source directory is created under {{Path|/usr/src/}} to host them. Normally, the active kernel sources directory is pointed to by the {{Path|/usr/src/linux}} symlink.

The {{Path|/usr/src}} directory might look like this:

{{Cmd|ls -l /usr/src|output=<pre>
total 16
lrwxrwxrwx  1 root root   19 21 mars   2013 linux -> linux-3.7.10-gentoo
drwxr-xr-x 24 root root 4096 25 août  10:39 linux-3.10.7-gentoo
drwxr-xr-x 20 root root 4096 21 avril 19:42 linux-3.7.10-gentoo
drwxr-xr-x 21 root root 4096 14 mars   2013 linux-3.7.9-gentoo
drwxr-xr-x  7 root root 4096 20 avril 17:06 rpm
</pre>}}

The {{Path|linux}} symlink can be changed in different ways. 

* If the <code>symlink</code> USE flag is set in {{Path|/etc/portage/make.conf}}, the {{Path|linux}} symlink is automatically updated to point to the newly emerged sources. 

* If the previous USE flag is not set, the user can change the destination of the symlink using  the <code>eselect kernel list</code> command.

Whatever it is, <code>genkernel</code> always uses the sources pointed by this symlink.

===== Kernel Configuration file used by genkernel =====

If a kernel compilation has already been run with the active kernel sources, there might be a file inside the {{Path|/etc/kernels}} directory that contains the kernel configuration that has been applied while creating the last bzimage of the kernel. This file is named, for example {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}} where x86_64 might be substituted with your architecture,  3.7.9 might be substituted with the version of the sources you are using and r1 with the release of the sources..

It is this {{Path|kernel-config-x86_64-3.7.9-gentoo-r1}} file that is used as a starting configuration when running  <code>genkernel --menuconfig all</code>}}.

If it is the first time that <code>genkernel</code> is run, or if the previous result has not been saved, this file is substituted with a default configuration file that resides at {{Path|usr/share/genkernel/arch/x86_64/kernel-config}} where x86_64 is substituted with the actual architecture.

{{Note|The path to this default configuration file, may be altered by setting the DEFAULT_KERNEL_CONFIG variable in {{Path|/etc/genkernel.conf}} file.}}

===== Saving the compiled configuration =====

If the <code>save-config</code> genkernel option  is activated, either from the command line or inside {{Path|/etc/genkernel.conf}}, the compiled kernel configuration is saved (with the name given above) into the {{Path|/etc/kernels}} directory. At the same time, the configuration is saved in the {{Path|.config}} file in {{Path|/usr/src/linux}} directory but this file is not reused on the next <code>genkernel all</code> run.

{{Warning|One has to be aware, that each time genkernel is run, with the <code>save-config</code> genkernel option set, the configuration file in {{Path|/etc/kernels}} is overridden. Thus, it is highly recommendable to copy this file under a new name before running genkernel in order to preserve it. }}

===== Installing the kernel and initramfs into the /boot directory =====

The <code>all</code> action specified when invoking genkernel, ask <code>genkernel</code> to install the kernel image and the initramfs into the {{Path|/boot}} directory. In order to do it in a convenient manner,  set the following in the {{Path|/etc/genkernel.conf}} file:

{{File|/etc/genkernel.conf|Setting up kernel and initramfs auto-saving|<pre>
# Mount BOOTDIR automatically if it is not mounted?
MOUNTBOOT="yes"
  
# Save the new configuration in /etc/kernels upon
# successful compilation
SAVE_CONFIG="yes"
  
# Make symlinks in BOOTDIR automatically?
SYMLINK="yes"
  
# Add new kernel to grub?
#BOOTLOADER="grub"
</pre>}}

* The first parameter speaks by itself.

* The second parameter tells genkernel to save the compiled kernel configuration into {{Path|/etc/kernels}}.

* The last two options tell genkernel to automatically update the grub configuration. In practice, the following happens:
** if a previous kernel image with the same name already exist, it is renamed by appending <tt>.old</tt> to its name. A symlink {{Path|kernel.old}} is automatically created that points to it.
** the new kernel takes the place of any kernel with the same name into {{Path|/boot}}. If it is the first time a kernel is compiled, a symlink kernel is automatically created that points to the new kernel.

After running <code>genkernel --menuconfig all</code>, the {{Path|/boot}} directory might look like this:

{{Cmd|ls -al /boot|output=<pre>
total 41336
drwxr-xr-x  3 root root    4096 20 avril 17:23 .
drwxr-xr-x 24 root root    4096 15 sept. 12:31 ..
lrwxrwxrwx  1 root root       1 24 févr.  2013 boot -> .
drwxr-xr-x  2 root root    4096 24 févr.  2013 grub
lrwxrwxrwx  1 root root      40 20 avril 17:23 initramfs -> initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1314412 20 avril 17:23 initramfs-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 1313548 21 mars   2013 initramfs-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 1295344 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3310324 25 févr.  2013 initramfs-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      44 20 avril 17:23 initramfs.old -> initramfs-genkernel-x86_64-3.7.10-gentoo.old
lrwxrwxrwx  1 root root      37 20 avril 17:23 kernel -> kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866656 20 avril 17:23 kernel-genkernel-x86_64-3.7.10-gentoo
-rw-r--r--  1 root root 4866560 21 mars   2013 kernel-genkernel-x86_64-3.7.10-gentoo.old
-rw-r--r--  1 root root 4552288 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo
-rw-r--r--  1 root root 3400736 25 févr.  2013 kernel-genkernel-x86_64-3.7.9-gentoo.old
lrwxrwxrwx  1 root root      41 20 avril 17:23 kernel.old -> kernel-genkernel-x86_64-3.7.10-gentoo.old
</pre>}}

==== Configuring the bootloader ====

The symlinks presented above in the bootloader's configuration can be used so that, even if the new kernel is not bootable, the user can always boot on the old one. 

To allow the kernel and intird provided by genkernel to run correctly, provide a minimum information in your bootloader configuration file :
* Add <code>real_root=/dev/sdax</code> to the kernel parameters passed to the kernel image, where {{Path|/dev/sdax}} points to the root partition.
* If splash is used, add a suitable mode line such as <code>vga=0x317</code> to the parameters passed to the kernel and also add <code>splash=verbose</code> or <code>splash=silent</code> depending on the verboseness required through the boot process.
* Add the initrd information as required by the bootloader. Consult the [http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1&chap=10 Bootloader Configuration Chapter] of the Gentoo Handbook for details on how to make your bootloader initrd-aware.

Here is how the {{Path|grub.conf}} file might look.

{{File|/boot/grub/grub.conf|An example of grub.conf file|<pre>
# This is a sample grub.conf for use with Genkernel, per the Gentoo handbook 
# http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=1&chap=10#doc_chap2 
# If you are not using Genkernel and you need help creating this file, you 
# should consult the handbook. Alternatively, consult the grub.conf.sample that 
# is included with the Grub documentation. 
  
default 0 
timeout 5
splashimage=(hd1,0)/boot/grub/splash.xpm.gz 
   
title Gentoo Linux 
root (hd0,6) 
kernel /boot/kernel initrd=/dev/ram0 real_root=/dev/sda7 rootfstype=ext4  
initrd /boot/initramfs
  
title Gentoo Linux old kernel 
root (hd0,6) 
kernel /boot/kernel.old initrd=/dev/ram0 real_root=/dev/sda7 rootfstype=ext4 
initrd /boot/initramfs.old
</pre>}}

==== Preserving your working files ====

The genkernel application automatically saves new changes to the files. If previous changes are to be preserved, then the following actions need to be taken.

* The first file to preserve is the kernel configuration file in {{Path|/etc/kernels/}}. If the source hasn't changed prior to the recompilation of the kernel, the previously used name for this file will be used. So copying the previous configuration file under a different name helps in preserving the information while keeping the file available as a starting point for a new configuration.

* The second important thing is to preserve the already bootable kernel and initramfs images. The way to accomplish this depends on the context:
:# If the last kernel compiled is bootable, running <code>genkernel</code> will rename this kernel (and similarly initramfs) image to {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} and create a new {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}. This mean that even if the new kernel is not bootable, users will always be able to boot the old one.
:# If the last kernel compiled is not bootable and sources haven't changed since the user compiled a bootable one, prior to running <code>genkernel</code>, first delete the new kernel image and remove the <tt>.old</tt> suffix from the last bootable one. Without this, if the newly compiled kernel is not bootable for the second time, the bootable {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx.old}} will be kicked out by the renaming of the non bootable {{Path|kernel-genkernel-ARCH-X.Y.Z-gentoo-rx}}, giving the user an unbootable system. Use the same reasoning for initramfs.

=== Using previous kernel configuration while changing the sources ===

The previous configuration can be used through the <code>make menuconfig</code> option in your {{Path|/etc/genkernel.conf}} as follows:

{{File|/etc/genkernel.conf|Setting up make menuconfig|<pre>
# Run 'make menuconfig' before compiling this kernel?
MENUCONFIG="yes"
</pre>}}

{{Note|There is no need to run <code>make oldconfig</code> with genkernel even if the sources are changed from {{Path|kernel-genkernel-ARCH-version-gentoo-rx}} to {{Path|kernel-genkernel-ARCH-version-gentoo-r(x+1)}} or from {{Pat|kernel-genkernel-ARCH-version-gentoo}} to {{Path|kernel-genkernel-ARCH-(version+1)-gentoo}} because <code>make menuconfig</code> will try to load the previous configuration into the menu as much as possible. Nevertheless, reviewing each option and new sections carefully is recommended.}}

== Network Booting with Genkernel ==

=== Network Booting with Genkernel from an Installation CD ===

The genkernel utility can build kernel and initrd images that provide support for network booting, or netbooting. With any luck, users should be able to netboot any recent computer into the environment provided by the Installation CD.

The magic lies in genkernel's linuxrc script: it will try to netmount the Installation CD using NFS. From there, the init scripts of the Installation CD can take over, as if the CD was present locally.

=== Building Kernel and Initrd Images with Support for Netbooting ===

To enable support for netbooting, include the following options while configuring the kernel:

{{Warning|Support for netbooting with genkernel is experimental and may contain bugs. }}

First, the kernel image must include the drivers for your Network Interface Cards (NIC). Normally, drivers for such devices will be compiled as modules. However, it is essential (for netbooting) that such drivers are compiled directly into the kernel image and not as modules.

{{Kernel|Configuring a 2.6.x series kernel to support your NIC driver|<pre>
Device Drivers --->
   Networking Support --->
      Ethernet (10 or 100Mbit)  --->
         [*] Ethernet (10 or 100Mbit)
         <*>   the driver for your network card</pre>
}}

Be sure to select <tt>&lt;*&gt;</tt> and not <tt>&lt;M&gt;</tt>.

Secondly, it is suggested that ''IP: kernel level autoconfiguration'' is enabled as well as ''IP: DHCP support options''. This avoids an unnecessary layer of complexity since the IP address and the NFS path to the Installation CD can be configured on a DHCP server. Of course, this means the kernel command line will remain constant for any machine — which is very important for etherbooting.

{{Kernel|Configuring a 2.6.x series kernel to support DHCP|<pre>
Device Drivers --->
   Networking Support --->
      Networking options
         [*] TCP/IP networking--->
         [*]   IP: kernel level autoconfiguration
         [*]     IP: DHCP support
</pre>}}

These options tell the kernel to send a DHCP request at bootup.

Additionally, enable SquashFS because most modern Gentoo Installation CDs require it. Support for SquashFS is not included with the generic kernel source tree. To enable SquashFS, apply the necessary patches to the generic kernel source or install gentoo-sources.

{{Kernel| Configuring the kernel to support SquashFS|<pre>
File systems--->
   Miscellaneous filesystems --->
      [*] SquashFS 2.X - Squashed file system support
</pre>}}

Once the compilation process is completed, create a compressed tarball (tar.gz) that contains the kernel's modules. This step is only necessary if the kernel version does not match the kernel image version on the Installation CD.

To create an archive containing all the modules:

{{RootCmd|cd /
|tar -cf /tmp/modules-X.Y.Z.tar.gz /lib/modules/X.Y.Z/}}

Depending on the network boot mechanism, one of the following steps need to be followed:

To create an etherboot image:

{{RootCmd|emerge mknbi
|cd /boot
|mkelf-linux -params{{=}}"root{{=}}/dev/ram0 init{{=}}/linuxrc ip{{=}}dhcp" kernel... initrd... > etherboot.img}}

To create a OpenBoot / SPARC64 TFTP image:

{{RootCmd|emerge sparc-utils
|cd /boot
|elftoaout kernel... -o kernel.aout
|piggyback64 kernel.aout System.map-... initrd-...
|mv kernel.aout openboot.img}}

The {{Path|openboot.img}} file is the boot image.

Finally, copy this kernel to the TFTP server. The details are architecture-dependent and are beyond the scope of this guide. Please refer to the documentation for your platform.

=== NFS setup ===

To setup a NFS share that contains the Installation CD, use the loop device to mount the ISO image and then copy the contents of the CD into the NFS share. As a nice extra, genkernel's initrd scripts will extract all tar.gz files located in the {{Path|/nfs/livecd/add/}} directory. All that needs to be done here is copy the {{Path|modules-X.Y.Z.tar.gz}} archive to the {{Path|/nfs/livecd/add/}} directory.

The following assumes that {{Path|/nfs/livecd}} is an exported NFS share:

{{RootCmd|mount /tmp/gentoo-livecd.iso /mnt/cdrom -o loop
|cp -p /mnt/cdrom /nfs/livecd
|umount /mnt/cdrom}}

Now copy the {{Path|modules.tar.gz}} file into {{Path|/add}}:

{{RootCmd|mkdir /nfs/livecd/add
|cp /tmp/modules-X.Y.Z.tar.gz /nfs/livecd/add}}

=== DHCP setup ===

The netboot images will ask the DHCP server on the network for an IP as well as a <tt>root-path</tt> parameter. Both can be specified per host using a MAC address to identify machines:

{{File|/etc/dhcpd.conf|Sample client dhcpd.conf setup|<pre>
# Here, 192.168.1.2 is the NFS server while 192.168.1.10 will be the IP address of the netbooted machine
host netbootableMachine {
         hardware ethernet 11:22:33:44:55:66;
         fixed-address 192.168.1.10;
         option root-path "192.168.1.2:/nfs/livecd";
}
</pre>}}

=== Netbooting Instructions ===

Netbooting itself is again very platform-specific. The important part is to specify the <code>ip=dhcp</code> and <code>init=/linuxrc</code> parameters on the kernel command line, as this will bring up the network interface and tell the initrd scripts to mount the Installation CD via NFS. Here are some platform-specific tips.

For etherboot, insert the etherboot disk into the drive and reboot. The kernel command line was specified when the image was constructed. 
  
With Sparc64, hit {{Key|Stop}}-{{Key|A}} at the boot prompt and enter:

{{RootCmd|boot net ip{{=}}dhcp init{{=}}/linuxrc|prompt=ok }}
  
For PXE, setup pxelinux (part of syslinux), then create a {{Path|pxelinux.cfg/default}} along the lines of:

{{File|pxelinux.cfg/default|Default entry|<pre>
DEFAULT gentoo
TIMEOUT 40
PROMPT 1
  
LABEL gentoo
    KERNEL kernel-X.Y.Z
    APPEND initrd=initrd-X.Y.Z root=/dev/ram0 init=/linuxrc ip=dhcp
</pre> }}

=== Booting a genkernel initramfs ===

==== Introduction ====

If an initramfs is installed with genkernel, then take a look at the various boot options that can (or should) be defined in the bootloader configuration. The most common ones are added to this guide.

==== Loading LVM or software-RAID ====

If the system uses LVM or software-RAID, the initramfs has to be built using the <tt>--lvm</tt> and <tt>--mdadm</tt> options. Don't forget to enable support during boot as well. This can be done using the dolvm and domdadm options.

{{File|/boot/grub/grub.conf|Enabling LVM and/or MDADM support|<pre>
# Example for GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 dolvm domdadm
initrd /initramfs-genkernel-x86_64-3.4.3
</pre> }}

==== Booting in single-user mode ====

If for some reason boot-up fails, rescuing the system by booting in the single-user mode is still possible. This will only load the really necessary services and then drop the user to a rescue (root) shell.

{{File|/boot/grub/grub.conf|Booting in single-user mode|<pre>
# Example for GRUB 1.x
title Gentoo Linux
root (hd0,0)
kernel /vmlinuz root=/dev/md3 init_opts=S
initrd /initramfs-genkernel-x86_64-3.4.3
</pre> }}

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Tim Yamin
* Jimi Ayodele 
* Thomas Seiler 
* Joshua Saddler
* Sebastian Pipping
* José Fournier

[[Category:Kernel]]
[[Category:Initramfs]]
