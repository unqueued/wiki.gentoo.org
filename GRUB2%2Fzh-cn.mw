<languages />
{{InfoBox stack
|{{InfoBox homepage|http://www.gnu.org/software/grub/|header=true}}
|{{InfoBox wikipedia|GNU_GRUB#GRUB 2}}
}}

'''GRUB2''' 是一个支持现代操作系统的引导程序。 它是为了取代旧的[[GRUB]] 引导程序而设计的 (现在被称作 "GRUB Legacy"). GRUB2 拥有一套基于传统 GRUB Legacy 的独立代码，以及丰富的特性，比如全新的具备编制脚本的 shell 风格语法。推荐当前的 GRUB Legacy 用户将系统迁移到 GRUB2 下。

要获取大体上的了解, 请查看 [[GRUB2 Quick Start]].

== 安装 ==

{{Package|sys-boot/grub}} 软件包已经纳入 Gentoo 系统中。你可以同时安装 grub-0.97 ([[GRUB|GRUB Legacy]]) 和 grub-2.00 , 但是一次只能安装一个版本的 GRUB 到 MBR 中。 本文重点关注 GRUB2。

默认情况下，GRUB2 将会在创建时探测默认的启动平台。也可以通过在 {{Path|make.conf}} 中设置<var>GRUB_PLATFORMS</var> 变量来指定特定平台。

{{FileBox|filename=/etc/portage/make.conf|title= 设置 GRUB_PLATFORMS 变量以支持 EMU, EFI, 和 PC 平台|lang=bash|1=
GRUB_PLATFORMS="emu efi-32 efi-64 pc"
}}

对于不同的 CPU，所支持的平台如下表所示：

{| class="table"
!
! colspan="7" | Target
|-
! Platform
! i386
! ia64
! mips
! mipsel
! powerpc
! spac64
! x86_64
|-
! arc
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! coreboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! efi
| {{Yes}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
|-
! emu
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! ieee1275
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{Yes}}
| style="background: PaleTurquoise;  text-align: center" | 32-bit
|-
! loongson
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! multiboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu-mips
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
|-
! pc
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
|}

使用一般的 emerge 指令安装 GRUB2 的语法：

{{Emerge|sys-boot/grub:2|params+=--newuse}}

你也可以选择通过安装 {{c|os-prober}} 工具（通过{{Package|sys-boot/os-prober}} 包提供），使得 GRUB2 可以在运行 {{c|grub2-mkconfig}} 命令时探测其他操作系统。在大多数情况下，这样可以让 GRUB2 自动探测到各类常见的操作系统（比如Windows 7, Windows 8.1, 等等）。

{{Emerge|sys-boot/os-prober|params+=--newuse}}

GRUB2（以及可选包 {{Package|sys-boot/os-prober}}）的安装程序不会自动启用引导程序，它仅仅完成操作系统相关软件的安装。要将引导程序安装到系统并负责引导操作系统启动，仍需要执行其他一些相关步骤，相关说明在 [[#Configuration|配置]] 章节中有详细描述。

== 配置 ==

配置 GRUB2 有两个主要的工作：
# 将 GRUB2 作为引导程序安装到系统上。
# 对 GRUB2 的引导程序进行配置。

GRUB2 软件的安装过程与系统的类型有关，相关描述请参考 [[#Installing the boot loader|Installing the boot loader]]。我们这里先来看看 GRUB2 引导程序自己的配置。

=== 主要配置文件 ===

{{c|grub2-mkconfig}} 脚本用于生成 grub 的配置。它综合使用 {{Path|/etc/grub.d/*}} 和 {{Path|/etc/default/grub}} 中的相关配置文件生成最终的 {{Path|/boot/grub/grub.cfg}} - GRUB2 所使用的唯一配置文件。 

{| class="table"
|-
! 文件 !! 格式 !! 推荐修改? !! 描述
|-
| {{Path|/usr/sbin/grub2-mkconfig}} || POSIX shell script || {{No}} || 作为一部分随 {{Package|sys-boot/grub}}:2 包同时安装看。完成下面所列文件的配置后，运行该脚本以生成最终的 {{Path|/boot/grub/grub.cfg}} 。
|-
| {{Path|/boot/grub/grub.cfg}} || GRUB2 shell script || {{No}} || 由 {{c|grub2-mkconfig}} 生成的文件。该文件由 GRUB2 内置的脚本解释器解析，不完全支持所有的 POSIX 命令或语法。参考 GRUB 手册中的[https://www.gnu.org/software/grub/manual/grub.html#Shell_002dlike-scripting scripting reference] 可以获知它所支持的相关特性。要注意，对该文件的修改将在下一次运行 grub2-mkconfig 脚本时被覆盖。
|-
| {{Path|/etc/grub.d/*}} || POSIX shell scripts || {{Partial|Maybe}} || {{Path|/etc/grub.d/*}} 目录下的脚本各自分别依次运行，其输出重定向到最终的 {{Path|/boot/grub/grub.cfg}} 文件（或者用户通过 {{c|grub2-mkconfig}} <code>-o</code> 选项所指定的文件）。这些脚本文件均使用当前系统外壳程序执行，因此可以使用任何外壳程序所支持的语法。理想情况下，它们都应该是 POSIX 兼容的脚本，并且输出的脚本应该与 GRUB2 解释器兼容。如果有必要，可以禁用或增加某些脚本。例如，可以增加一些不能自动生成的菜单项。
|-
| {{Path|/etc/default/grub}} || POSIX shell script || {{Yes}} || 在大多数情况下，这是唯一应该直接修改的文件。它主要是用来为{{Path|/etc/grub.d}} 中的脚本生成配置文件提供变量赋值。涉及的变量请参考 [[GRUB2/Config_Variables|GRUB2 configuration variables]] 或 [https://www.gnu.org/software/grub/manual/grub.html#Simple-configuration official reference] 。
|}

使用 GRUB2 无需管理员手动维护启动选项配置（像 [[GRUB|GRUB Legacy]] 和 [[LILO]] 等引导程序所需要那样）。相反，它可以通过使用 {{c|grub2-mkconfig}} 命令自动生成配置文件 ({{Path|/boot/grub/grub.cfg}})。该工具会综合利用 {{Path|/etc/grub.d/}} 中的脚本文件和 {{Path|/etc/default/grub}} 中的配置参数。

{{Warning|在使用软件 RAID 的情况下， {{c|grub2-mkconfig}} 不能正常工作。这种情况下就有必要手动配置 {{Path|/etc/grub.d/}} 中的脚本文件，否则完成安装后系统将停留在没有引导程序的状态下。
}}

如果修改了一个或多个设置，在运行{{c|grub2-mkconfig}} 工具时请使用 <code>-o</code> 选项将输出指定到 {{Path|/boot/grub/grub.cfg}} （这是 GRUB2 默认的输出位置）:

{{RootCmd|grub2-mkconfig -o /boot/grub/grub.cfg|output=<pre>
Generating grub.cfg ...
Found linux image: /boot/vmlinuz-3.3.0-gentoo
done
</pre>}}

每运行一次 {{c|grub2-mkconfig}} 工具都会生成一个新的配置文件。 

{{Warning|If {{c|grub2-mkconfig}} does not report any found entries then no entries were found. In this case GRUB2 will offer no boot selections when upon system restart which may be a tricky, time consuming situation to resolve. Make sure the output is satisfactory before restarting the system.}}

=== Setting configuration parameters ===

The following variables in {{Path|/etc/default/grub}} are the most common ones to set to control how GRUB2 will function:

{| class="table"
! Variable
! Explanation
! Default value
|-
| <var>GRUB_DEFAULT</var>
| Defines the default menu entry selected on boot. May be a numeric index, a menu title, or "saved". 
| Defaults to first detected entry.
|-
| <var>GRUB_TIMEOUT</var> 
| Delay (in seconds) before booting default menu entry. Set to <code>0</code> to boot immediately or <code>-1</code> to wait indefinitely. 
| The default is 5 seconds.
|-
| <var>GRUB_CMDLINE_LINUX</var>
| Parameters to be passed on the kernel command line for all Linux menu entries. For instance, to support hibernation, users will need to add <code>GRUB_CMDLINE_LINUX="resume=/dev/sdXY"</code> with {{Path|/dev/sdXY}} being the swap partition.
| 
|-
| <var>GRUB_CMDLINE_LINUX_DEFAULT</var>
| Parameters to be passed on the kernel command line for non-recovery Linux menu entries.
| 
|-
| <var>GRUB_DEVICE</var> 
| The initial root device (i.e. the kernel's <code>root=</code> parameter). Set this to override the {{c|grub2-mkconfig}} command's root device auto-detection. For example, <code>GRUB_DEVICE=/dev/ram0</code> will force <code>root=/dev/ram0</code> to be used in the kernel command line.
| 
|}

For a more complete list, please refer to the [[GRUB2/Config_Variables|GRUB2 configuration variables]] sub-page.

After modifying the parameters, regenerate the GRUB2 configuration file with {{c|grub2-mkconfig}}.

=== Enabling or disabling configuration scripts ===

The directory {{Path|/etc/grub.d/}} contains the scripts that {{c|grub2-mkconfig}} uses to generate a {{Path|grub.cfg}} file. By default the contents of this directory should be similar to the following:

{{Cmd|ls /etc/grub.d/|output=<pre>
00_header  10_linux  20_linux_xen  30_os-prober  40_custom  41_custom README
</pre>}}

GRUB2 will use all installed scripts that are marked as executable (which by default, they all are). To disable any of the scripts simply remove the executable bit from the script's file permissions using the {{c|chmod}} command. In the following example every script but {{Path|00_header}} and {{Path|10_linux}} are disabled:

{{RootCmd|chmod -x /etc/grub.d/<nowiki>{</nowiki>20_linux_xen,30_os-prober,40_custom,41_custom<nowiki>}</nowiki>}}

After modifying the scripts (or removing the executable bit), regenerate the GRUB2 configuration file using {{c|grub2-mkconfig}}.

=== Manipulating configuration scripts ===

Some features or GRUB2 functionalities are only possible to be exploited by modifying the configuration scripts. For instance, to support dual-booting with FreeBSD, the following manipulation needs to be done.

Change the {{Path|/etc/grub.d/40_custom}} script to:  

{{FileBox|filename=/etc/grub.d/40_custom|title=Adding DualBoot|<pre>
menuentry "FreeBSD" --class freebsd --class bsd --class os {
 insmod ufs2
 insmod bsd
 set root=(hd0,1)
 kfreebsd /boot/kernel/kernel
 kfreebsd_loadenv /boot/device.hints
 set kFreeBSD.vfs.root.mountfrom=ufs:/dev/ada0s1a
 set kFreeBSD.vfs.root.mountfrom.options=rw
 set kFreeBSD.hw.psm.synaptics_support=1
}
</pre>}}

{{Path|/dev/sda1}} or <code>(hd0,1)</code> is the partition in which FreeBSD resides. If the normal UFS install was used for the FreeBSD partition then {{Path|/dev/sda1}} is a container (something like a logical partition). It consists of the swap and root partition. Verify the {{Path|40_custom}} script is executable by running {{c|ls -la /etc/grub.d/40_custom}}. If the executable bit is not set then set it using the {{c|chmod u+x 40_custom}} command.  

Next install GRUB2 using the {{c|grub2-install}} command and update GRUB2's configuration file:

{{RootCmd|grub2-install /dev/sda
|grub2-mkconfig -o /boot/grub/grub.cfg}}

== Installing the boot loader ==

Installing GRUB2 as the system's boot loader depends on how the system is meant to boot (through BIOS or UEFI) and how the disk on which the boot loader should be installed is partitioned (using MBR or GPT partition layout).

This article covers the following situations:

* [[#BIOS with MBR|BIOS with MBR]]
* [[#BIOS with GPT|BIOS with GPT]]
* [[#UEFI with GPT|UEFI with GPT]]

Select the installation instructions appropriate for the system.

=== BIOS with MBR ===

{{Note|When the system is meant to dual-boot with Microsoft Windows, make sure that the system itself does ''not'' have an EFI firmware. Even when such systems are booted in 'legacy BIOS' mode, Microsoft Windows will refuse to boot.}}

Make sure that the {{Path|/boot}} location is available - if this uses a separate partition, make sure that it is mounted:

{{RootCmd|mount /boot}}

Run the {{c|grub2-install}} command to copy the relevant files to {{Path|/boot/grub}}. On the PC platform, this also installs a boot image to the Master Boot Record (MBR) or a partition's boot sector. If all goes well, after running {{c|grub2-install}} an output such as the one below is to be expected:

{{RootCmd|grub2-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

{{c|grub2-install}} accepts a <code>--target</code> option to set the CPU architecture and system platform. If unspecified, {{c|grub2-install}} will attempt to guess the proper values; on an {{Keyword|amd64}}/{{Keyword|x86}} system it will use <code>i386-pc</code> by default. {{c|grub2-install}} also accepts a <code>--boot-directory</code> option to tell the GRUB2 installer which directory to look for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

==== Partitioning for BIOS with MBR ====

Be sure to leave enough free space before the first partition. Starting the first partition at sector 2048 leaves at least 1 MiB of disk space for the master boot record. It is recommended (but not mandatory) to create an additional partition for GRUB called the ''BIOS boot partition''. This partition just needs to be defined, but not formatted.

If the [[Handbook:Main_Page|Gentoo installation instructions]] were followed, this BIOS boot partition will already be available.

=== BIOS with GPT ===

{{Note|When the system is meant to dual-boot with Microsoft Windows, make sure that the system itself does ''not'' have an EFI firmware. Even when such systems are booted in 'legacy BIOS' mode, Microsoft Windows will refuse to boot. Also, older Microsoft Windows systems might not support GPT. It is possible to use a hybrid MBR-GPT approach, see [[Hybrid partition table]].}}

If a {{Path|/boot}} partition is needed, start by mounting the {{Path|/boot}} partition:

{{RootCmd|mount /boot}}

If all goes well, after running the {{c|grub2-install}} command an output such as the one below is to be expected:

{{RootCmd|grub2-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

{{c|grub2-install}} accepts a <code>--target</code> option to set the CPU architecture and system platform. If unspecified, {{c|grub2-install}} will attempt to guess the correct at the correct values; on an {{Keyword|amd64}}/{{Keyword|x86}} system it will use <code>i386-pc</code> by default. {{c|grub2-install}} also accepts a <code>--boot-directory</code> option to tell the GRUB2 installer which directly to look for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

==== Partitioning for BIOS with GPT ====

When a GPT partition table is present on the system, a small ''BIOS boot partition'' with type <code>EF02</code> (which is different from the ''EFI System Partition (ESP)'' which has type <code>EF00</code>) will need to be available. 1 MiB will be enough to work but 2-4 MiB is a safer option. This BIOS boot partition will hold the stage 2 of the bootloader. BIOS boot partitions do not need formatted with a filesystem; the {{c|grub2-install}} command will overwrite any pre-existing filesystem with one of its own.

{{Important|Readers should be aware the BIOS boot partition is ''not'' the same partition that is commonly mounted at {{Path|/boot}}. The {{Path|/boot}} and BIOS boot different partitions and should be handled separately. BIOS boot partition should ''not'' be regularly mounted on the system (e.g. it should ''not'' be defined in {{Path|/etc/fstab}}). The {{Path|/boot}} partition ''can'' be regularly mounted with no issues and therefore can be present in the {{Path|/etc/fstab}} file.}}

To set a partition as a BIOS partition use the command line tool {{c|parted}} ({{Package|sys-block/parted}}) by typing (change <code>1</code> to the number of the partition to mark as a BIOS boot partition!):

{{RootCmd|set 1 bios_grub on|prompt=(parted) |color=white}}

With {{Package|sys-apps/gptfdisk}}'s {{c|cgdisk}} utility, this is accomplished by setting the partition type to <code>0xEF02</code> and give it a label of <code>gptbios</code>.

An EFI System Partition is not required, but it would be sensible to make sure that the BIOS boot partition is large enough to be converted to one, should the system motherboard later be upgraded to an EFI board.

The following is the output of pressing the {{Key|p}} key using the {{c|gdisk}} utility on a GPT partitioned disk with both a BIOS boot [0xEF02] partition and an EFI [0xEF00] partition:

{{RootCmd|gdisk /dev/sdc|output=<pre>
GPT fdisk (gdisk) version 0.8.1
 
Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present
 
Found valid GPT with protective MBR; using GPT.
 
Command (? for help): p
Disk /dev/sdc: 976773168 sectors, 465.8 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): AA369F4D-37A4-4C0D-A357-DC24B99A6337
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 976773134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)
 
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       828377087   395.0 GiB   8E00  Linux LVM
   2       828377088       891291647   30.0 GiB    0700  Microsoft basic data
   3       891291648       975177727   40.0 GiB    0700  Microsoft basic data
   4       975177728       976754687   770.0 MiB   8300  Linux filesystem
   5       976754688       976756735   1024.0 KiB  EF02  BIOS boot partition
   6       976756736       976773134   8.0 MiB     EF00  EFI System
 
Command (? for help): 
</pre>}}

{{Note|The <code>0x</code> hexadecimal prefix does not need to be entered for GPT when using {{c|fdisk}}.}}

Using the same setup, the {{c|parted}} utility gives an output with slightly different syntax:

{{RootCmd|parted /dev/sdc|output=<pre>
GNU Parted 3.0
Using /dev/sdc
(parted) print
...
Sector size (logical/physical): 512B/512B
Partition Table: gpt
  
Number  Start   End    Size    File system  Name                  Flags
 1      1049kB  424GB  424GB                Linux LVM             lvm
 2      424GB   456GB  32.2GB               Microsoft basic data
 3      456GB   499GB  42.9GB               Microsoft basic data
 4      499GB   500GB  807MB   ext2         Linux filesystem
 5      500GB   500GB  1049kB               BIOS boot partition   bios_grub
 6      500GB   500GB  8396kB               EFI System            boot
  
(parted)
</pre>}}

Creating partitions in {{c|gdisk}} is straight forward for users already familiar with the {{c|fdisk}} partitioning utility. After starting {{c|gdisk}}, type {{Key|n}} (for new) in the main menu, provide beginning and end sectors (if needed), then set the partition type <code>EF00</code> for an EFI system partition.

Users who have followed the [[Handbook:Main_Page|Gentoo installation instructions]] will already have the proper partitioning layout set up.

=== UEFI with GPT ===

Make sure that the {{Path|/boot}} location is available - if this uses a separate partition, make sure that it is mounted:

{{RootCmd|mount /boot}}

Run the {{c|grub2-install}} command to copy the relevant files to {{Path|/boot/grub}}. This should install Grub2 in {{Path|/boot/grub}}, copy the core image to {{Path|/boot/efi/EFI/gentoo/grubx64.efi}}, and call [[Efibootmgr|efibootmgr]] to add a boot entry.

{{RootCmd|grub2-install --efi-directory{{=}}/boot/efi|output=<pre>
Installation finished. No error reported.
</pre>}}

The above command assumes the vfat EFI System Partition (ESP) is mounted at {{Path|/boot/efi}}.  If the ESP is mounted directly at {{Path|/boot}}, use <code>--efi-directory=/boot</code>. 

{{c|grub2-install}} also accepts a <code>--target</code> option to set the CPU architecture and system platform. If unspecified, {{c|grub2-install}} will attempt to guess the proper values; on an AMD64 EFI-booted system it will use <code>x86_64-efi</code> by default. {{c|grub2-install}} also accepts a <code>--boot-directory</code> option to tell the GRUB2 installer which directory to look for GRUB2's boot files. This defaults to {{Path|/boot}} but is useful when trying to move a root partition.

==== Partitioning for UEFI with GPT ====

For UEFI GPT boot using GRUB2, the system ''must'' have a dedicated EFI partition containing a FAT filesystem.

The EFI partition can ''replace'' having a {{Path|/boot}} partition on {{Path|/dev/sda1}} by having a {{Path|/boot/efi}} partition on {{Path|/dev/sda1}}. This is to say a successful EFI boot scenario using GRUB2 ''can'' operate with two partitions total (three total if a swap partition is needed): a root partition and an EFI partition. Using this configuration, the {{Path|/boot}} ''folder'' will be located in the root {{Path|/}} ''partition'' (at {{Path|/boot}}) and the EFI ''partition'' will mount ''in'' the boot ''folder'' (at {{Path|/boot/efi}}). For further clarification, see the example {{Path|/etc/fstab}} file below.

{{FileBox|filename=/etc/fstab|title=Example of an UEFI capable {{Path|/etc/fstab}} file with a swap partition:|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
/dev/sda2		none		swap		sw		0 0
/dev/sda3		/		ext4		noatime		0 1
</pre>}}

Generating a 100MB partition for {{Path|/boot/efi}} should provide plenty of space for holding multiple {{Path|*.efi}} files (multiple entries will most likely not be needed; most systems will only use one).

Create the partition using the partitioning [[Partition#GUID_Partition_Table|tool of choice]]. The {{c|gdisk}} ({{Package|sys-apps/gptfdisk}}) and {{c|parted}} ({{Package|sys-block/parted}}) tools fit nicely for this purpose. When using the {{c|gdisk}} utility, be sure to use type <code>EF00</code>.

Proceed to create a FAT filesystem on the EFI system partition using {{c|mkdosfs}} and add it to {{Path|/etc/fstab}} by following the example below:

{{RootCmd|mkdosfs -F 32 -n efi-boot /dev/sda1
|mkdir /boot/efi}}

{{FileBox|filename=/etc/fstab|title=Adding the /boot/efi mount entry|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
</pre>}}

{{RootCmd|mount /boot/efi}}

{{Note|It is helpful to set the <var>GRUB_PLATFORMS</var> variable in {{Path|/etc/portage/make.conf}}. This will assist GRUB2 in determining what options to use when detecting the proper EFI target. For 32-bit EFI systems use <code>efi-32</code>. For 64-bit use <code>efi-64</code>.}}

{{Important|In order for GRUB2 to install properly, the EFI directory ''must'' be mounted ''and'' the <code>efivars</code> kernel module must be loaded before the {{c|grub2-install}} command will complete successfully.}}

==== Alternative: using the default UEFI firmware location ====

If the system's UEFI firmware fails to find GRUB2's EFI bootloader file, using the default boot loader location should provide a working solution. This circumvents the boot menu managed by [[Efibootmgr|efibootmgr]] and thus offers reduced functionality, but is less error prone. To do this, verify the EFI partition is mounted at {{Path|/boot/efi}} then copy the file {{Path|grubx64.efi}} located at {{Path|/boot/efi/EFI/gentoo/grubx64.efi}} to {{Path|/boot/efi/EFI/BOOT/BOOTX64.EFI}}. This example assumes a 64-bit EFI system, adjust accordingly for 32-bit EFI systems.

== Extended features ==

GRUB2 has many features that make it a very powerful boot loader. It supports:

* Booting from UEFI platforms.
* Booting from GPT partitioned drives without needing a hybrid MBR (hybrid MBR can enabled as needed for compatibility or portability).
* Booting from a [[btrfs]] formatted {{Path|/boot}} partition.
* Booting directly from a [[btrfs]] raid set without needing an [[initramfs]] for early mount setup.
* Booting directly from logical volume management (such as [[LVM|LVM2]]).
* Booting with support for DM-RAID (RAID 0, 1, 4, 5, 6, 9 and 10).
* Booting from encrypted devices (LUKS).

Some specific features are explained in more detail next.

=== Chainloading ===

GRUB2 was built with a truly improved chainload mode when compared to GRUB Legacy. To chainload another boot loader, use the <code>chainloader</code> option.

{{FileBox|filename=/boot/grub/grub.cfg|title=Chainloading another bootloader|<pre>
menuentry "Custom Super Bootloader Example" {
     insmod part_msdos
     insmod chain
     chainloader (hd1,1)+1
}
</pre>}}

For more information on chainloading, please see the [[GRUB2/Chainloading|Chainloading]] sub-page.

=== Using framebuffer display ===

To have GRUB2 use a [[framebuffer]] graphical display, re-emerge GRUB with the <code>truetype</code> USE flag enabled. This will install a default True Type font as well as a font conversion utility.

{{Emerge|--newuse sys-boot/grub:2}}

Proceed to configure the default GRUB2 configuration file located at {{Path|/etc/default/grub}}. For example:

{{FileBox|filename=/etc/default/grub|title=Framebuffer related settings|lang=bash|1=
# Set resolution and color depth
GRUB_GFXMODE=1366x768x32
 
# Keep resolution when loading the kernel
GRUB_GFXPAYLOAD_LINUX=keep
 
# Set a background image
GRUB_BACKGROUND="/boot/grub/bg.png"
 
# Use a custom font, converted using grub2-mkfont utility
GRUB_FONT="/boot/grub/fonts/roboto.pf2"
}}

In order to find out what display modes the system's graphics card supports, use the following commands on the GRUB2 shell:

{{Cmd|prompt=(grub)|color=white|insmod all_video|videoinfo}}

== Troubleshooting ==

Most of the issues can be resolved by ensuring that the partition layout is correct. Make sure enough space is available before the first partition of the disk, or optionally make sure that a ''BIOS boot partition'' is available. Also verify that {{Path|/boot/grub/grub.cfg}} was correctly generated with {{c|grub2-mkconfig}}, or generate one with a custom menu entry.

For more GRUB2 troubleshooting, please refer to the [[GRUB2/Troubleshooting|Troubleshooting]] sub-article.

== See also ==

There are a few specific GRUB2 resources available:

* In [[GRUB2/Chainloading|Chainloading]] the use of GRUB2 to boot other boot loaders is described. This is important to read when dual-booting systems, or when GRUB2 needs to be configured to boot ISO files.
* In [[GRUB2/AdvancedStorage|Advanced storage]] the necessary steps are documented on how to install and use GRUB2 on more advanced storage situations, such as software RAID, logical volumes or encrypted file systems.
* In [[GRUB2/Config_Variables|Configuration variables]] an exhaustive list of GRUB2 configuration variables, as used by {{Path|/etc/default/grub}}, is documented.
* In [[GRUB2/Troubleshooting|Troubleshooting]] a list of common GRUB2 errors (with their solutions) is presented.
* In [[Hybrid_partition_table|Hybrid partition table]] the use of a mixed MBR/GPT setup is documented, as well as how to use such hybrid partition layout with GRUB2.

== External resources ==

For more information, please see:

* [https://www.gnu.org/software/grub/manual/grub.html GNU GRUB 2 manual page]
** [https://www.gnu.org/software/grub/manual/grub.html#Network Network (PXE) section of GRUB2]
* [http://www.rodsbooks.com/gdisk/bios.html Legacy BIOS issues with GPT article]
* [http://www.rodsbooks.com/gdisk/hybrid.html GPT and Hybrid MBR article]
* [http://www.rodsbooks.com/gdisk/ GPT fdisk utility page]
* [https://wiki.archlinux.org/index.php/GRUB2 Arch Linux GRUB2 wiki article]
* [https://fedoraproject.org/wiki/GRUB_2?rd=Grub2#Encountering_the_dreaded_GRUB_2_boot_prompt Fedora GRUB2 wiki article : Encountering the dreaded GRUB2 boot prompt]
* [https://help.ubuntu.com/community/UEFIBooting ubuntu UEFI booting help]
* [http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr]


[[Category:Bootloaders]]
