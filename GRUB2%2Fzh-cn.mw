<languages />
{{InfoBox stack
|{{InfoBox homepage|http://www.gnu.org/software/grub/|header=true}}
|{{InfoBox wikipedia|GNU_GRUB#GRUB 2}}
}}

'''GRUB2''' 是一个支持现代操作系统的引导程序。 它是为了取代旧的[[GRUB]] 引导程序而设计的 (现在被称作 "GRUB Legacy"). GRUB2 拥有一套基于传统 GRUB Legacy 的独立代码，以及丰富的特性，比如全新的具备编制脚本的 shell 风格语法。推荐当前的 GRUB Legacy 用户将系统迁移到 GRUB2 下。

要获取大体上的了解, 请查看 [[GRUB2 Quick Start]].

== 安装 ==

{{Package|sys-boot/grub}} 软件包已经纳入 Gentoo 系统中。你可以同时安装 grub-0.97 ([[GRUB|GRUB Legacy]]) 和 grub-2.00 , 但是一次只能安装一个版本的 GRUB 到 MBR 中。 本文重点关注 GRUB2。

默认情况下，GRUB2 将会在创建时探测默认的启动平台。也可以通过在 {{Path|make.conf}} 中设置<var>GRUB_PLATFORMS</var> 变量来指定特定平台。

{{FileBox|filename=/etc/portage/make.conf|title= 设置 GRUB_PLATFORMS 变量以支持 EMU, EFI, 和 PC 平台|lang=bash|1=
GRUB_PLATFORMS="emu efi-32 efi-64 pc"
}}

对于不同的 CPU，所支持的平台如下表所示：

{| class="table"
!
! colspan="7" | Target
|-
! Platform
! i386
! ia64
! mips
! mipsel
! powerpc
! spac64
! x86_64
|-
! arc
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! coreboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! efi
| {{Yes}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
|-
! emu
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! ieee1275
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{Yes}}
| style="background: PaleTurquoise;  text-align: center" | 32-bit
|-
! loongson
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! multiboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu-mips
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
|-
! pc
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
|}

使用一般的 emerge 指令安装 GRUB2 的语法：

{{Emerge|sys-boot/grub:2|params+=--newuse}}

你也可以选择通过安装 {{c|os-prober}} 工具（通过{{Package|sys-boot/os-prober}} 包提供），使得 GRUB2 可以在运行 {{c|grub2-mkconfig}} 命令时探测其他操作系统。在大多数情况下，这样可以让 GRUB2 自动探测到各类常见的操作系统（比如Windows 7, Windows 8.1, 等等）。

{{Emerge|sys-boot/os-prober|params+=--newuse}}

GRUB2（以及可选包 {{Package|sys-boot/os-prober}}）的安装程序不会自动启用引导程序，它仅仅完成操作系统相关软件的安装。要将引导程序安装到系统并负责引导操作系统启动，仍需要执行其他一些相关步骤，相关说明在 [[#Configuration|配置]] 章节中有详细描述。

== 配置 ==

配置 GRUB2 有两个主要的工作：
# 将 GRUB2 作为引导程序安装到系统上。
# 对 GRUB2 的引导程序进行配置。

GRUB2 软件的安装过程与系统的类型有关，相关描述请参考 [[#安装引导程序|安装引导程序]]。我们这里先来看看 GRUB2 引导程序自己的配置。

=== 主要配置文件 ===

{{c|grub2-mkconfig}} 脚本用于生成 grub 的配置。它综合使用 {{Path|/etc/grub.d/*}} 和 {{Path|/etc/default/grub}} 中的相关配置文件生成最终的 {{Path|/boot/grub/grub.cfg}} - GRUB2 所使用的唯一配置文件。 

{| class="table"
|-
! File !! Format !! Edits recommended? !! Description
|-
| {{Path|/usr/sbin/grub2-mkconfig}} || POSIX shell script || {{No}} || Installed as part of the {{Package|sys-boot/grub}}:2 package. Run this script to generate {{Path|/boot/grub/grub.cfg}} after configuring the files described below.
|-
| {{Path|/boot/grub/grub.cfg}} || GRUB2 shell script || {{No}} || The file generated by {{c|grub2-mkconfig}}. This file is evaluated by GRUB2's built-in script interpreter and doesn't necessarily support all POSIX commands or syntax. See the [https://www.gnu.org/software/grub/manual/grub.html#Shell_002dlike-scripting scripting reference] in the GRUB manual for supported features. Be aware that modifications to this file won't persist to the next time grub2-mkconfig is run.
|-
| {{Path|/etc/grub.d/*}} || POSIX shell scripts || {{Partial|Maybe}} || Each script under {{Path|/etc/grub.d/*}} that has its execute bit set is evaluated in sequence, and the stdout is concatenated to form the final {{Path|/boot/grub/grub.cfg}} (or whatever file is given to the {{c|grub2-mkconfig}} <code>-o</code> option). These scripts use the current system shell and therefore can use any supported syntax. Ideally they should be POSIX-compatible scripts, and the output script must be compatible with the GRUB2 interpreter. It may be necessary to disable or add scripts. For instance, to add menu items that couldn't be automatically generated.
|-
| {{Path|/boot/grub/custom.cfg}} || GRUB2 shell script || {{Partial|Maybe}} || The /etc/grub.d/41_custom script will reference this file to be read in at boot time if it exists.  This file provides a place to add additional entries or commands and does not require regeneration of the main grub.cfg file.
|-
| {{Path|/etc/default/grub}} || POSIX shell script || {{Yes}} || In most cases this is the only file that should be modified directly. It is mainly used to assign variables used by the scripts in {{Path|/etc/grub.d}} to generate a working configuration file. See [[GRUB2/Config_Variables|GRUB2 configuration variables]] or the [https://www.gnu.org/software/grub/manual/grub.html#Simple-configuration official reference] for supported variables.
|}

使用 GRUB2 无需管理员手动维护启动选项配置（像 [[GRUB|GRUB Legacy]] 和 [[LILO]] 等引导程序所需要那样）。相反，它可以通过使用 {{c|grub2-mkconfig}} 命令自动生成配置文件 ({{Path|/boot/grub/grub.cfg}})。该工具会综合利用 {{Path|/etc/grub.d/}} 中的脚本文件和 {{Path|/etc/default/grub}} 中的配置参数。

{{Warning|在使用软件 RAID 的情况下， {{c|grub2-mkconfig}} 不能正常工作。这种情况下就有必要手动配置 {{Path|/etc/grub.d/}} 中的脚本文件，否则完成安装后系统将停留在没有引导程序的状态下。
}}

如果修改了一个或多个设置，在运行{{c|grub2-mkconfig}} 工具时请使用 <code>-o</code> 选项将输出指定到 {{Path|/boot/grub/grub.cfg}} （这是 GRUB2 默认的输出位置）:

{{RootCmd|grub2-mkconfig -o /boot/grub/grub.cfg|output=<pre>
Generating grub.cfg ...
Found linux image: /boot/vmlinuz-3.3.0-gentoo
done
</pre>}}

每运行一次 {{c|grub2-mkconfig}} 工具都会生成一个新的配置文件。 

{{Warning|如果 {{c|grub2-mkconfig}} 没有显示任何找到的操作系统入口，那么说明该工具没有找到任何可用操作系统。 这种情况下， 启动计算机时 GRUB2 将不会提供任何启动选项，这种情况相当棘手，将会耗费大量时间用于排除问题。所以，请在重启机器前确保该工具的输出中包含了合适的引导入口信息。}}

=== 设置配置参数 ===

以下列出了 {{Path|/etc/default/grub}} 中最常用的变量，通过设置这些变量，可以控制 GRUB2 的行为:

{| class="table"
! 变量
! 说明
! 默认值
|-
| <var>GRUB_DEFAULT</var>
| 定义启动菜单中的默认操作系统选项。可以是数字索引、菜单标题或者 "saved"。
| 默认设置为首个检测到的操作系统入口。
|-
| <var>GRUB_TIMEOUT</var> 
| 在启动默认操作系统之前的延迟时间（按秒计）。设置为 <code>0</code> 时表示立即启动，设置成 <code>-1</code> 时表示无限期等待用户输入。 
| 默认值为 5 秒钟。
|-
| <var>GRUB_CMDLINE_LINUX</var>
| 需要传递给内核的参数，对所有 Linux 系统入口起作用。例如，如需支持休眠功能，用户应该设置  <code>GRUB_CMDLINE_LINUX="resume=/dev/sdXY"</code> ，其中的 {{Path|/dev/sdXY}} 是交换分区。
| 
|-
| <var>GRUB_CMDLINE_LINUX_DEFAULT</var>
| 需要传递给内核命令行的参数，仅对非恢复 Linux 菜单项起作用。
| 
|-
| <var>GRUB_DEVICE</var> 
| 初始根设备 （类似于内核 <code>root=</code> 参数）。设置该参数，可以覆盖 {{c|grub2-mkconfig}}命令自动探测到的根设备。例如，<code>GRUB_DEVICE=/dev/ram0</code> 将强制在内核命令行中使用 <code>root=/dev/ram0</code> 作为根设备。
| 
|}

需获取更为完整的参数列表，请参考 [[GRUB2/Config_Variables|GRUB2 configuration variables]]。

配置完参数后，使用 {{c|grub2-mkconfig}} 命令重新生成 GRUB2 配置文件。

=== 启用或禁用配置脚本 ===

{{Path|/etc/grub.d/}} 目录中包含了 {{c|grub2-mkconfig}} 用来生成 {{Path|grub.cfg}} 配置文件的一系列脚本。默认情况下，该目录中看起来应该类似于下面的内容：

{{Cmd|ls /etc/grub.d/|output=<pre>
00_header  10_linux  20_linux_xen  30_os-prober  40_custom  41_custom README
</pre>}}

GRUB2 将会执行该目录中所有标记为可执行的脚本文件（默认情况下，该目录中所有脚本都被标记为可执行文件）。要禁用其中某些脚本，可以直接使用 {{c|chmod}} 命令清除它们的可执行权限位。 下面给出的例子中，禁用了除 {{Path|00_header}} 和 {{Path|10_linux}} 之外的其他脚本:

{{RootCmd|chmod -x /etc/grub.d/<nowiki>{</nowiki>20_linux_xen,30_os-prober,40_custom,41_custom<nowiki>}</nowiki>}}

修改完这些脚本（或者通过清除可执行权限禁用这些脚本）后，请使用 {{c|grub2-mkconfig}} 重新生成配置文件。

=== 调整配置脚本 ===

一些 GRUB2 的功能或特性只能通过修改配置脚本来获得。例如，要支持 FreeBSD 的双启动，应该对脚本作出如下调整。

将 {{Path|/etc/grub.d/40_custom}} 脚本修改为:  

{{FileBox|filename=/etc/grub.d/40_custom|title=增加双启动|<pre>
menuentry "FreeBSD" --class freebsd --class bsd --class os {
 insmod ufs2
 insmod bsd
 set root=(hd0,1)
 kfreebsd /boot/kernel/kernel
 kfreebsd_loadenv /boot/device.hints
 set kFreeBSD.vfs.root.mountfrom=ufs:/dev/ada0s1a
 set kFreeBSD.vfs.root.mountfrom.options=rw
 set kFreeBSD.hw.psm.synaptics_support=1
}
</pre>}}

在上面的脚本中，{{Path|/dev/sda1}} 或者 <code>(hd0,1)</code> FreeBSD 是系统所驻留的分区。 如果正常安装了 UFS 文件系统用于 FreeBSD 系统分区，那么 {{Path|/dev/sda1}} 就成为了一个容器 （有点像一个逻辑分区）。 这个容器由根分区和交换分区组成。接着使用 {{c|ls -la /etc/grub.d/40_custom}} 命令确认{{Path|40_custom}} 脚本是可执行文件。如果该脚本没有可执行权限，请使用 {{c|chmod u+x 40_custom}} 命令设置。  

下一步，将使用 {{c|grub2-install}} 命令安装 GRUB2 并更新配置文件:

{{RootCmd|grub2-install /dev/sda
|grub2-mkconfig -o /boot/grub/grub.cfg}}

==安装引导程序 ==

安装 GRUB2 作为系统的引导程序，重点考虑操作系统通过何种方式启动（通过 BIOS 还是 UEFI），以及准备安装引导程序的磁盘的分区格式是什么样的（是使用 MBR 还是 GPT 分区布局）。

本文讨论以下情况:

* [[#BIOS 引导，使用 MBR|BIOS 引导，使用 MBR]]
* [[#BIOS 引导，使用 GPT|BIOS 引导，使用 GPT]]
* [[#UEFI 引导，使用 GPT|UEFI 引导，使用 GPT]]

为操作系统选择适当的安装指令。

=== BIOS 引导，使用 MBR ===

{{Note|When the system is meant to dual-boot with Microsoft Windows, make sure that the system itself does ''not'' have an UEFI firmware. Even when such systems are booted in 'legacy BIOS' mode, Microsoft Windows will refuse to boot.}}

确认  {{Path|/boot}} 可用 - 如果该目录使用了单独的分区，请确保该分区已经挂载。

{{RootCmd|mount /boot}}

通过运行 {{c|grub2-install}} 命令将相关文件复制到 {{Path|/boot/grub}} 目录中。在 PC 平台上，这将同时安装一个引导镜像文件到主引导记录 (MBR) 或某个分区的启动扇区中。如果一切顺利，在运行了 {{c|grub2-install}} 之后，应该会有如下输出信息：

{{RootCmd|grub2-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

可以为 {{c|grub2-install}} 指定 <code>--target</code> 选项来设置 CPU 架构和系统平台。如果未明确指定， {{c|grub2-install}} 会尝试猜测适当的值；对于 {{Keyword|amd64}}/{{Keyword|x86}} 系统 它将默认采用 <code>i386-pc</code> 。还可以为 {{c|grub2-install}} 指定 <code>--boot-directory</code> 选项来告诉 GRUB2 安装器在哪里寻找 GRUB2 的启动文件。该值默认为 {{Path|/boot}} ，但是如果准备移动根分区，这个参数就变得非常有用了。

==== 为 BIOS 引导程序设置 MBR 分区 ====

应确保在首个分区前预留足够的磁盘空间。可以将第一个分区设置为从2048扇区开始，以便为主引导记录预留至少 1 MiB 空间。一般建议（但并非强制性要求）为 GRUB 创建一个称作“BIOS boot partitoin”的额外分区。该分区只需要定义，无需格式化。

如果是按照 [[Handbook:Main_Page|Gentoo installation instructions]] 中的步骤进行操作，那么该 BIOS boot partition 应该已经创建好。

=== BIOS 引导，使用 GPT ===

{{Note|When the system is meant to dual-boot with Microsoft Windows, make sure that the system itself does ''not'' have an UEFI firmware. Even when such systems are booted in 'legacy BIOS' mode, Microsoft Windows will refuse to boot. Also, older Microsoft Windows systems might not support GPT. It is possible to use a hybrid MBR-GPT approach; see [[Hybrid partition table]].}}

如果需要使用 {{Path|/boot}} 分区，首先请挂载该 {{Path|/boot}} 分区:

{{RootCmd|mount /boot}}

如果一切顺利，在运行完 {{c|grub2-install}} 命令之后，应该会出现类似于以下的信息提示:

{{RootCmd|grub2-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

可以为 {{c|grub2-install}} 指定 <code>--target</code> 选项来设置 CPU 架构和系统平台。如果未明确指定， {{c|grub2-install}} 会尝试猜测适当的值；对于 {{Keyword|amd64}}/{{Keyword|x86}} 系统 它将默认采用 <code>i386-pc</code> 。还可以为 {{c|grub2-install}} 指定 <code>--boot-directory</code> 选项来告诉 GRUB2 安装器在哪里寻找 GRUB2 的启动文件。该值默认为 {{Path|/boot}} ，但是如果准备移动根分区，这个参数就变得非常有用了。

==== 为 BIOS 引导程序设置 GPT 分区 ====

当系统使用的分区表为 GPT 时，需要设置一个类型为 <code>EF02</code> 小体量''BIOS 引导分区''（不同于 ''EFI 系统分区  (ESP)'' 的<code>EF00</code>类型）。该分区有 1 MiB 空间足矣，但建议使用 2-4 MiB 空间会更加可靠。 该 BIOS 引导分区主要用于存储引导程序的 stage 2 代码。它无需格式化为某类文件系统， {{c|grub2-install}} 命令会用自己的文件系统覆盖掉该分区上面预置的任何文件系统。

{{Important|BIOS 引导分区与常规情况下挂载的{{Path|/boot}} ''不是'' 同一个分区。{{Path|/boot}} 和 BIOS 引导区是不同的分区，应该分别处理。BIOS 引导分区一般 ''不应该'' 挂载到系统中（就是说它“不应该”在 {{Path|/etc/fstab}} 中被定义）。而 {{Path|/boot}} 分区毫无疑问 “可以” 常态地挂载到系统上，因此可以在 {{Path|/etc/fstab}} 文件中添加其定义。}}

要将某个分区设置为 BIOS 分区，可以使用命令行工具 {{c|parted}} ({{Package|sys-block/parted}})，执行以下指令即可（把其中的 <code>1</code> 修改为拟作为 BIOS 引导分区的相应编号）：

{{RootCmd|set 1 bios_grub on|prompt=(parted) |color=white}}

在使用 {{Package|sys-apps/gptfdisk}} 包的 {{c|cgdisk}} 工具时，完成这项工作，需要通过设置该分区类型为 <code>0xEF02</code> 并为其设置 <code>gptbios</code> 标签。

An EFI System Partition is not required, but it would be sensible to make sure that the BIOS boot partition is large enough to be converted to one, should the system motherboard later be upgraded to an UEFI board.

下面是在对一个 GPT 格式磁盘使用 {{c|gdisk}} 工具按下{{Key|p}} 后的输出信息，该磁盘同时包含 BIOS 引导分区 [0xEF02] 和 EFI 分区 [0xEF00] ：

{{RootCmd|gdisk /dev/sdc|output=<pre>
GPT fdisk (gdisk) version 0.8.1
 
Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present
 
Found valid GPT with protective MBR; using GPT.
 
Command (? for help): p
Disk /dev/sdc: 976773168 sectors, 465.8 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): AA369F4D-37A4-4C0D-A357-DC24B99A6337
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 976773134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)
 
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       828377087   395.0 GiB   8E00  Linux LVM
   2       828377088       891291647   30.0 GiB    0700  Microsoft basic data
   3       891291648       975177727   40.0 GiB    0700  Microsoft basic data
   4       975177728       976754687   770.0 MiB   8300  Linux filesystem
   5       976754688       976756735   1024.0 KiB  EF02  BIOS boot partition
   6       976756736       976773134   8.0 MiB     EF00  EFI System
 
Command (? for help): 
</pre>}}

{{Note|如果是使用 {{c|fdisk}}，那么无需为 GPT 类型码输入十六进制前缀 <code>0x</code>。}}

对于相同的设置， {{c|parted}} 工具的输出会稍微有些不同之处：

{{RootCmd|parted /dev/sdc|output=<pre>
GNU Parted 3.0
Using /dev/sdc
(parted) print
...
Sector size (logical/physical): 512B/512B
Partition Table: gpt
  
Number  Start   End    Size    File system  Name                  Flags
 1      1049kB  424GB  424GB                Linux LVM             lvm
 2      424GB   456GB  32.2GB               Microsoft basic data
 3      456GB   499GB  42.9GB               Microsoft basic data
 4      499GB   500GB  807MB   ext2         Linux filesystem
 5      500GB   500GB  1049kB               BIOS boot partition   bios_grub
 6      500GB   500GB  8396kB               EFI System            boot
  
(parted)
</pre>}}

对于那些已经熟悉 {{c|fdisk}} 磁盘分区工具的用户而言，通过 {{c|gdisk}} 创建磁盘分区显得更为直接。启动 {{c|gdisk}}，在主菜单下输入 {{Key|n}} （创建新分区），指定开始和结束的扇区（如果需要），然后设置磁盘类型为 <code>EF00</code> ，即 EFI 系统分区。

按照 [[Handbook:Main_Page|Gentoo 安装说明]] 操作的用户，应该已经按照要求正确地设置好了磁盘分区结构。

=== UEFI 引导，使用 GPT ===

首先确保 {{Path|/boot}} 目录可用 - 如果是使用一个单独的分区，请确保已经正确挂载到 {{Path|/boot}} ：

{{RootCmd|mount /boot}}

运行 {{c|grub2-install}} 命令复制相关文件到 {{Path|/boot/grub}} 中。这个命令将把 Grub2 安装到 {{Path|/boot/grub}} 目录中，同时复制核心镜像文件到位置 {{Path|/boot/efi/EFI/gentoo/grubx64.efi}}，然后调用 [[Efibootmgr|efibootmgr]] 来增加一个引导入口。

{{RootCmd|grub2-install --efi-directory{{=}}/boot/efi|output=<pre>
Installation finished. No error reported.
</pre>}}

以上命令假定 vfat 格式的 EFI 系统分区（ESP）是挂载在  {{Path|/boot/efi}} 目录下，如果该 ESP 直接挂载到了 {{Path|/boot}} 下，则需要在命令中使用 <code>--efi-directory=/boot</code> 参数替换相应部分。 

{{c|grub2-install}} also accepts a <code>--target</code> option to set the CPU architecture and system platform. If unspecified, {{c|grub2-install}} will attempt to guess the proper values; on an AMD64 UEFI-booted system it will use <code>x86_64-efi</code> by default. {{c|grub2-install}} also accepts a <code>--boot-directory</code> option to tell the GRUB2 installer which directory to look for GRUB2's boot files. This defaults to {{Path|/boot}} but is useful when trying to move a root partition.

==== 为 UEFI 引导程序设置 GPT 分区 ====

使用 GRUB2 引导 UEFI GPT 系统时， 系统 ''必须'' 有一个包含 FAT 文件系统的独立 EFI 分区。

The EFI partition can ''replace'' having a {{Path|/boot}} partition on {{Path|/dev/sda1}} by having a {{Path|/boot/efi}} partition on {{Path|/dev/sda1}}. This is to say a successful UEFI boot scenario using GRUB2 ''can'' operate with two partitions total (three total if a swap partition is needed): a root partition and an EFI partition. Using this configuration, the {{Path|/boot}} ''folder'' will be located in the root {{Path|/}} ''partition'' (at {{Path|/boot}}) and the EFI ''partition'' will mount ''in'' the boot ''folder'' (at {{Path|/boot/efi}}). For further clarification, see the example {{Path|/etc/fstab}} file below.

{{FileBox|filename=/etc/fstab|title=Example of an UEFI capable {{Path|/etc/fstab}} file with a swap partition:|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
/dev/sda2		none		swap		sw		0 0
/dev/sda3		/		ext4		noatime		0 1
</pre>}}

创建一个100MB的 {{Path|/boot/efi}} 分区将会有足够的空间容纳下多个 {{Path|*.efi}} 文件（当然，大部分系统只会使用一个入口，多个入口并非必须的）。

创建分区时，可以参考 [[Partition#GUID_Partition_Table|tool of choice]] 介绍的可选工具。 其中，{{c|gdisk}} ({{Package|sys-apps/gptfdisk}}) 和 {{c|parted}} ({{Package|sys-block/parted}}) 工具已经足以完成此项任务。在使用 {{c|gdisk}} 工具时，请确保为分区指定了 <code>EF00</code> 类型代码。

紧接着，请使用  {{c|mkdosfs}} 在 EFI 系统分区上创建 FAT 文件系统，并参照以下示例将该分区加入 {{Path|/etc/fstab}} 配置文件。

{{RootCmd|mkdosfs -F 32 -n efi-boot /dev/sda1
|mkdir /boot/efi}}

{{FileBox|filename=/etc/fstab|title=Adding the /boot/efi mount entry|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
</pre>}}

{{RootCmd|mount /boot/efi}}

{{Note|It is helpful to set the <var>GRUB_PLATFORMS</var> variable in {{Path|/etc/portage/make.conf}}. This will assist GRUB2 in determining what options to use when detecting the proper EFI target. For 32-bit UEFI systems use <code>efi-32</code>. For 64-bit use <code>efi-64</code>.}}

{{Important|为正确安装 GRUB2， EFI 目录 ''必须'' 正确挂载 ''并且'' 必须在 {{c|grub2-install}} 命令运行之前完成  <code>efivars</code> 内核模块的加载。}}

==== 备选方案: 使用默认的 UEFI 固件位置 ====

If the system's UEFI firmware fails to find GRUB2's EFI bootloader file, using the default boot loader location should provide a working solution. This circumvents the boot menu managed by [[Efibootmgr|efibootmgr]] and thus offers reduced functionality, but is less error prone. To do this, verify the EFI partition is mounted at {{Path|/boot/efi}} then copy the file {{Path|grubx64.efi}} located at {{Path|/boot/efi/EFI/gentoo/grubx64.efi}} to {{Path|/boot/efi/EFI/BOOT/BOOTX64.EFI}}. This example assumes a 64-bit UEFI system, adjust accordingly for 32-bit UEFI systems.

== 扩展特性 ==

GRUB2有很多特性使得其成为非常强大的启动引导器。它支持：

* 从UEFI平台引导。
* 从GPT分区的磁盘引导，不需要hybrid MBR (hybrid MBR可以出于兼容性和便携性的需求而被使能)。
* 从 [[btrfs]] 格式的 {{Path|/boot}} 引导分区引导。
* 直接从[[btrfs]]磁盘陈列引导而不需要[[initramfs]]服务于早期的挂载设置。
* 直接从逻辑管理卷引导，(如[[LVM|LVM2]])。
* 引导并支持DM-RAID (RAID 0, 1, 4, 5, 6, 9和10)。
* 从加密的设备引导(LUKS)。

一些特殊的特性在下面将被详细的解释。

=== Chainloading ===

与传统的GRUB相比，GRUB2被构建成为更好地支持了chainload模式。如要chain load另外一个启动引导器，您可以使用<code>chainloader</code> 选项。

{{FileBox|filename=/boot/grub/grub.cfg|title=Chainloading another bootloader|<pre>
menuentry "Custom Super Bootloader Example" {
     insmod part_msdos
     insmod chain
     chainloader (hd1,1)+1
}
</pre>}}

要想了解chainloading的更多信息，可以查看[[GRUB2/Chainloading|Chainloading]]子页面。

=== 使用framebuffer显示  ===

为了让GRUB2使用[[framebuffer]]图形界面显示，重新emerge GRUB，使能USE标记<code>truetype</code>。这个将会安装缺省的True Type字体以及一个字体转换工具。

{{Emerge|--newuse sys-boot/grub:2}}

执行配置缺省的GRUB2位于{{Path|/etc/default/grub}}的配置文件。例如：

{{FileBox|filename=/etc/default/grub|title=Framebuffer related settings|lang=bash|1=
# Set resolution and color depth
GRUB_GFXMODE=1366x768x32
 
# Keep resolution when loading the kernel
GRUB_GFXPAYLOAD_LINUX=keep
 
# Set a background image
GRUB_BACKGROUND="/boot/grub/bg.png"
 
# Use a custom font, converted using grub2-mkfont utility
GRUB_FONT="/boot/grub/fonts/roboto.pf2"
}}

为了找到您的系统显卡所支持的显示模式，在GRUB2的shell里使用下面的命令行：

{{Cmd|prompt=(grub)|color=white|insmod all_video|videoinfo}}

== Troubleshooting ==

大部分问题可以靠确认分区布局是正确的得以解决。请确保磁盘上第一个分区前面有足够多的空间或者确保一个''BIOS boot partition''是可用的。也请确认 {{Path|/boot/grub/grub.cfg}} 被 {{c|grub2-mkconfig}}正确地生成，或者用一个自己定制的菜单项来生成。

想要了解更多关于GRUB2排障的情况，请参考[[GRUB2/Troubleshooting|Troubleshooting]] 子文章。

== See also ==

这里有一些特别的GRUB2资源可用：

* In [[GRUB2/Chainloading|Chainloading]] 描述了使用GRUB2引导其它的boot loaders，对于双引导系统或者当GRUB2需要被配置成从ISO文件引导时是非常值得阅读的。
* In [[GRUB2/AdvancedStorage|Advanced storage]]怎样在更高级的存储条件，例如软RAID，逻辑卷或者加密文件系统中安装和使用GRUB2的必要步骤被归档在这里。
* In [[GRUB2/Config_Variables|Configuration variables]] 被{{Path|/etc/default/grub}}所使用的GRUB2配置变量的详细清单被归档在这里。
* In [[GRUB2/Troubleshooting|Troubleshooting]] GRUB2的常错误（和它们的解决方案）被列在这里。
* In [[Hybrid_partition_table|Hybrid partition table]] 如何使用一个混合的MBR/GPT设置被归档在这里，连同怎样与GRUB2一道使用这样一个混合的分区布局一起。

== 外部资源 ==

更多的信息，请参见：

* [https://www.gnu.org/software/grub/manual/grub.html GNU GRUB 2 manual page]
** [https://www.gnu.org/software/grub/manual/grub.html#Network Network (PXE) section of GRUB2]
* [http://www.rodsbooks.com/gdisk/bios.html Legacy BIOS issues with GPT article]
* [http://www.rodsbooks.com/gdisk/hybrid.html GPT and Hybrid MBR article]
* [http://www.rodsbooks.com/gdisk/ GPT fdisk utility page]
* [https://wiki.archlinux.org/index.php/GRUB2 Arch Linux GRUB2 wiki article]
* [https://fedoraproject.org/wiki/GRUB_2?rd=Grub2#Encountering_the_dreaded_GRUB_2_boot_prompt Fedora GRUB2 wiki article : Encountering the dreaded GRUB2 boot prompt]
* [https://help.ubuntu.com/community/UEFIBooting ubuntu UEFI booting help]
* [http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr]


[[Category:Bootloaders]]
