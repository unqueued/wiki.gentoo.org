<languages />
{{InfoBox stack
|{{InfoBox homepage|http://gnu.org/software/grub/|header=true}}
|{{InfoBox wikipedia|GNU_GRUB#GRUB 2}}
|{{InfoBox gitweb|http://git.savannah.gnu.org/cgit/grub.git/|raw=true}}
|{{InfoBox odoc|http://gnu.org/software/grub/grub-documentation.html}}
}}

'''GRUB2''' boot loader is a replacement for [[GRUB|GRUB version 1]], now referred to as "GRUB Legacy". GRUB2 has an entirely separate code base from GRUB Legacy, and features a new shell-like syntax for advanced scripting capabilities.

要获取大体上的了解, 请查看 [[GRUB2 Quick Start]].

If migrating from GRUB Legacy to GRUB2, see [[GRUB2 Migration]].

== 安装 ==

The {{Package|sys-boot/grub}} package is slotted. Both grub-0.97 ([[GRUB|GRUB Legacy]]) and grub-2.00 may be installed at the same time; however, only one version of GRUB may be installed in a Master Boot Record (MBR) at a time.

=== Prerequisites ===

默认情况下，GRUB2 将会在创建时探测默认的启动平台。也可以通过在 {{Path|make.conf}} 中设置<var>GRUB_PLATFORMS</var> 变量来指定特定平台。

{{FileBox|filename=/etc/portage/make.conf|title= 设置 GRUB_PLATFORMS 变量以支持 EMU, EFI, 和 PC 平台|lang=bash|1=
GRUB_PLATFORMS="emu efi-32 efi-64 pc"
}}

对于不同的 CPU，所支持的平台如下表所示：

{| class="table"
!
! colspan="7" | Target
|-
! Platform
! i386
! ia64
! mips
! mipsel
! powerpc
! spac64
! x86_64
|-
! arc
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! coreboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! efi
| {{Yes}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
|-
! emu
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! ieee1275
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{Yes}}
| style="background: PaleTurquoise;  text-align: center" | 32-bit
|-
! loongson
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! multiboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu-mips
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
|-
! pc
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
|}

{{Note|Whenever the values in the <var>GRUB_PLATFORMS</var> variable are adjusted GRUB2 will need to be re-emerged in order to build the changed binary. Be sure to use the <code>--newuse --deep</code> options as shown in the [[#Emerge|emerge section]] below.}}

The {{Keyword|amd64}} profiles enable support for EFI functionality by default. When using a BIOS-based system, set <var>GRUB_PLATFORMS</var> to "emu" to avoid unneeded dependencies.

=== Emerge ===

To install GRUB2 use the normal {{c|emerge}} syntax:

{{Emerge|sys-boot/grub:2|params+=--newuse --deep}}

=== Additional software ===

Optionally, install the {{c|os-prober}} utility (provided through the {{Package|sys-boot/os-prober}} package) to have GRUB2 probe for other operating systems when running the {{c|grub-mkconfig}} command. In most instances, this will enable GRUB2 to automatically detect other operating systems including Windows 7, 8.1, 10, other distributions of Linux, etc.

{{Emerge|sys-boot/os-prober|params+=--newuse}}

GRUB2（以及可选包 {{Package|sys-boot/os-prober}}）的安装程序不会自动启用引导程序，它仅仅完成操作系统相关软件的安装。要将引导程序安装到系统并负责引导操作系统启动，仍需要执行其他一些相关步骤，相关说明在 [[#Configuration|配置]] 章节中有详细描述。

== 配置 ==

There are two important aspects to the configuration of GRUB2:

# Installation of GRUB2 software as the boot loader of the system.
# Configuration of the GRUB2 boot loader.

GRUB2 软件的安装过程与系统的类型有关，相关描述请参考 [[#安装引导程序|安装引导程序]]。我们这里先来看看 GRUB2 引导程序自己的配置。

=== 主要配置文件 ===

The {{c|grub-mkconfig}} script is used to generate a grub configuration. It uses the scripts under {{Path|/etc/grub.d/*}} together with the {{Path|/etc/default/grub}} configuration file to generate the final {{Path|/boot/grub/grub.cfg}} - the only configuration file used by GRUB2 itself. 

{| class="table"
|-
! File !! Format !! Edits recommended? !! Description
|-
| {{Path|/usr/sbin/grub-mkconfig}} || POSIX shell script || {{No}} || Installed as part of the {{Package|sys-boot/grub}}:2 package. Run this script to generate {{Path|/boot/grub/grub.cfg}} after configuring the files described below.
|-
| {{Path|/boot/grub/grub.cfg}} || GRUB2 shell script || {{No}} || The file generated by {{c|grub-mkconfig}}. This file is evaluated by GRUB2's built-in script interpreter and doesn't necessarily support all POSIX commands or syntax. See the [https://www.gnu.org/software/grub/manual/grub.html#Shell_002dlike-scripting scripting reference] in the GRUB manual for supported features. Be aware that modifications to this file won't persist to the next time grub-mkconfig is run.
|-
| {{Path|/etc/grub.d/*}} || POSIX shell scripts || {{Partial|Maybe}} || Each script under {{Path|/etc/grub.d/*}} that has its execute bit set is evaluated in sequence, and the stdout is concatenated to form the final {{Path|/boot/grub/grub.cfg}} (or whatever file is given to the {{c|grub-mkconfig}} <code>-o</code> option). These scripts use the current system shell and therefore can use any supported syntax. Ideally they should be POSIX-compatible scripts, and the output script must be compatible with the GRUB2 interpreter. It may be necessary to disable or add scripts. For instance, to add menu items that couldn't be automatically generated.
|-
| {{Path|/boot/grub/custom.cfg}} || GRUB2 shell script || {{Partial|Maybe}} || The /etc/grub.d/41_custom script will reference this file to be read in at boot time if it exists.  This file provides a place to add additional entries or commands and does not require regeneration of the main grub.cfg file.
|-
| {{Path|/etc/default/grub}} || POSIX shell script || {{Yes}} || In most cases this is the only file that should be modified directly. It is mainly used to assign variables used by the scripts in {{Path|/etc/grub.d}} to generate a working configuration file. See [[GRUB2/Config_Variables|GRUB2 configuration variables]] or the [https://www.gnu.org/software/grub/manual/grub.html#Simple-configuration official reference] for supported variables.
|}

GRUB2 does not require the administrator to manually maintain a boot option configuration (as is the case with boot loaders such as [[GRUB|GRUB Legacy]] and [[LILO]]). Instead it can generate its configuration file ({{Path|/boot/grub/grub.cfg}}) using the {{c|grub-mkconfig}} command. This utility will use the scripts in {{Path|/etc/grub.d/}} and the settings in {{Path|/etc/default/grub}}.

{{Warning|The {{c|grub-mkconfig}} utility does not work properly when using software RAID. Manual configuration of the scripts in {{Path|/etc/grub.d/}} is necessary, as otherwise after installation the system will be left in a non-bootable state.
}}

After modifying one or more settings, run the {{c|grub-mkconfig}} utility with the <code>-o</code> option pointing to the output file located at {{Path|/boot/grub/grub.cfg}} (this is GRUB2's default output location):

{{RootCmd|grub-mkconfig -o /boot/grub/grub.cfg|output=<pre>
Generating grub.cfg ...
Found linux image: /boot/vmlinuz-3.3.0-gentoo
done
</pre>}}

Each time the {{c|grub-mkconfig}} utility is called a new configuration will be generated. 

{{Warning|If {{c|grub-mkconfig}} does not report any found entries then no entries were found. In this case GRUB2 will offer no boot selections when upon system restart which may be a tricky, time consuming situation to resolve. Make sure the output is satisfactory before restarting the system.}}

=== 设置配置参数 ===

以下列出了 {{Path|/etc/default/grub}} 中最常用的变量，通过设置这些变量，可以控制 GRUB2 的行为:

{| class="table"
! Variable
! Explanation
! Default value
|-
| <var>GRUB_DEFAULT</var>
| Defines the default menu entry selected on boot. May be a numeric index, a menu title, or "saved". 
| Defaults to first detected entry.
|-
| <var>GRUB_TIMEOUT</var> 
| Delay (in seconds) before booting default menu entry. Set to <code>0</code> to boot immediately or <code>-1</code> to wait indefinitely. 
| The default is 5 seconds.
|-
| <var>GRUB_CMDLINE_LINUX</var>
| Parameters to be passed on the kernel command line for all Linux menu entries. For instance, to support hibernation, users will need to add <code>GRUB_CMDLINE_LINUX="resume=/dev/sdXY"</code> with {{Path|/dev/sdXY}} being the swap partition.
| 
|-
| <var>GRUB_CMDLINE_LINUX_DEFAULT</var>
| Parameters to be passed on the kernel command line for non-recovery Linux menu entries.
| 
|-
| <var>GRUB_DEVICE</var> 
| The initial root device (i.e. the kernel's <code>root=</code> parameter). Set this to override the {{c|grub-mkconfig}} command's root device auto-detection. For example, <code>GRUB_DEVICE=/dev/ram0</code> will force <code>root=/dev/ram0</code> to be used in the kernel command line.
| 
|}

需获取更为完整的参数列表，请参考 [[GRUB2/Config_Variables|GRUB2 configuration variables]]。

After modifying the parameters, regenerate the GRUB2 configuration file with {{c|grub-mkconfig}}.

=== 启用或禁用配置脚本 ===

The directory {{Path|/etc/grub.d/}} contains the scripts that {{c|grub-mkconfig}} uses to generate a {{Path|grub.cfg}} file. By default the contents of this directory should be similar to the following:

{{Cmd|ls /etc/grub.d/|output=<pre>
00_header  10_linux  20_linux_xen  30_os-prober  40_custom  41_custom README
</pre>}}

GRUB2 将会执行该目录中所有标记为可执行的脚本文件（默认情况下，该目录中所有脚本都被标记为可执行文件）。要禁用其中某些脚本，可以直接使用 {{c|chmod}} 命令清除它们的可执行权限位。 下面给出的例子中，禁用了除 {{Path|00_header}} 和 {{Path|10_linux}} 之外的其他脚本:

{{RootCmd|chmod -x /etc/grub.d/<nowiki>{</nowiki>20_linux_xen,30_os-prober,40_custom,41_custom<nowiki>}</nowiki>}}

After modifying the scripts (or removing the executable bit), regenerate the GRUB2 configuration file using {{c|grub-mkconfig}}.

=== 调整配置脚本 ===

一些 GRUB2 的功能或特性只能通过修改配置脚本来获得。例如，要支持 FreeBSD 的双启动，应该对脚本作出如下调整。

将 {{Path|/etc/grub.d/40_custom}} 脚本修改为:  

{{FileBox|filename=/etc/grub.d/40_custom|title=增加双启动|<pre>
menuentry "FreeBSD" --class freebsd --class bsd --class os {
 insmod ufs2
 insmod bsd
 set root=(hd0,1)
 kfreebsd /boot/kernel/kernel
 kfreebsd_loadenv /boot/device.hints
 set kFreeBSD.vfs.root.mountfrom=ufs:/dev/ada0s1a
 set kFreeBSD.vfs.root.mountfrom.options=rw
 set kFreeBSD.hw.psm.synaptics_support=1
}
</pre>}}

在上面的脚本中，{{Path|/dev/sda1}} 或者 <code>(hd0,1)</code> FreeBSD 是系统所驻留的分区。 如果正常安装了 UFS 文件系统用于 FreeBSD 系统分区，那么 {{Path|/dev/sda1}} 就成为了一个容器 （有点像一个逻辑分区）。 这个容器由根分区和交换分区组成。接着使用 {{c|ls -la /etc/grub.d/40_custom}} 命令确认{{Path|40_custom}} 脚本是可执行文件。如果该脚本没有可执行权限，请使用 {{c|chmod u+x 40_custom}} 命令设置。  

{{Note|Users familiar with how GRUB Legacy numbered partitions should note that GRUB2 numbers partitions starting from 1, not 0.}}

Next install GRUB2 using the {{c|grub-install}} command and update GRUB2's configuration file:

{{RootCmd|grub-install /dev/sda
|grub-mkconfig -o /boot/grub/grub.cfg}}

==安装引导程序 ==

Installing GRUB2 as the system's boot loader depends on how the system is meant to boot (through [[BIOS]] or UEFI) and how the disk on which the boot loader should be installed is partitioned (using MBR or GPT partition layout).

本文讨论以下情况:

* [[#BIOS 引导，使用 MBR|BIOS 引导，使用 MBR]]
* [[#BIOS 引导，使用 GPT|BIOS 引导，使用 GPT]]
* [[#UEFI 引导，使用 GPT|UEFI 引导，使用 GPT]]

为操作系统选择适当的安装指令。

=== BIOS 引导，使用 MBR ===

{{Note|When the system is meant to dual-boot with Microsoft Windows, make sure that the system itself does ''not'' have an UEFI firmware. Even when such systems are booted in 'legacy BIOS' mode, Microsoft Windows will refuse to boot.}}

确认  {{Path|/boot}} 可用 - 如果该目录使用了单独的分区，请确保该分区已经挂载。

{{RootCmd|mount /boot}}

Run the {{c|grub-install}} command to copy the relevant files to {{Path|/boot/grub}}. On the PC platform, this also installs a boot image to the Master Boot Record (MBR) or a partition's boot sector. If all goes well, after running {{c|grub-install}} an output such as the one below is to be expected:

{{RootCmd|grub-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

{{c|grub-install}} accepts a <code>--target</code> option to set the CPU architecture and system platform. If unspecified, {{c|grub-install}} will attempt to guess the proper values; on an {{Keyword|amd64}}/{{Keyword|x86}} system it will use <code>i386-pc</code> by default. {{c|grub-install}} also accepts a <code>--boot-directory</code> option to tell the GRUB2 installer which directory to look for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

==== 为 BIOS 引导程序设置 MBR 分区 ====

Be sure to leave enough free space before the first partition. Starting the first partition at sector 2048 leaves at least 1 MiB of disk space for the master boot record. It is recommended (but not mandatory) to create an additional partition for GRUB called the ''BIOS boot partition''. This partition just needs to be defined, but not formatted. It is only needed if the system is later migrated to the GPT partition layout. When sticking with MBR, this is not needed.


如果是按照 [[Handbook:Main_Page|Gentoo installation instructions]] 中的步骤进行操作，那么该 BIOS boot partition 应该已经创建好。

=== BIOS 引导，使用 GPT ===

{{Note|When the system is meant to dual-boot with Microsoft Windows, make sure that the system itself does ''not'' have an UEFI firmware. Even when such systems are booted in 'legacy BIOS' mode, Microsoft Windows will refuse to boot. Also, older Microsoft Windows systems might not support GPT. It is possible to use a hybrid MBR-GPT approach; see [[Hybrid partition table]].}}

如果需要使用 {{Path|/boot}} 分区，首先请挂载该 {{Path|/boot}} 分区:

{{RootCmd|mount /boot}}

If all goes well, after running the {{c|grub-install}} command an output such as the one below is to be expected:

{{RootCmd|grub-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

{{c|grub-install}} accepts a <code>--target</code> option to set the CPU architecture and system platform. If unspecified, {{c|grub-install}} will attempt to guess the correct values; on an {{Keyword|amd64}}/{{Keyword|x86}} system it will use <code>i386-pc</code> by default. {{c|grub-install}} also accepts a <code>--boot-directory</code> option to tell the GRUB2 installer which directory to look in for GRUB2's boot files. This defaults to the current {{Path|/boot}} but is useful when trying to move a root partition.

==== 为 BIOS 引导程序设置 GPT 分区 ====

When a GPT partition table is present on the system, a small ''BIOS boot partition'' with type <code>EF02</code> (which is different from the ''EFI System Partition (ESP)'' which has type <code>EF00</code>) will need to be available. 1 MiB will be enough to work, but 2-4 MiB is a safer option. This BIOS boot partition will hold the stage 2 of the bootloader. BIOS boot partitions do not need to be formatted with a filesystem; the {{c|grub-install}} command will overwrite any existing filesystem with one of its own.

{{Important|BIOS 引导分区与常规情况下挂载的{{Path|/boot}} ''不是'' 同一个分区。{{Path|/boot}} 和 BIOS 引导区是不同的分区，应该分别处理。BIOS 引导分区一般 ''不应该'' 挂载到系统中（就是说它“不应该”在 {{Path|/etc/fstab}} 中被定义）。而 {{Path|/boot}} 分区毫无疑问 “可以” 常态地挂载到系统上，因此可以在 {{Path|/etc/fstab}} 文件中添加其定义。}}

要将某个分区设置为 BIOS 分区，可以使用命令行工具 {{c|parted}} ({{Package|sys-block/parted}})，执行以下指令即可（把其中的 <code>1</code> 修改为拟作为 BIOS 引导分区的相应编号）：

{{RootCmd|set 1 bios_grub on|prompt=(parted) |color=white}}

在使用 {{Package|sys-apps/gptfdisk}} 包的 {{c|cgdisk}} 工具时，完成这项工作，需要通过设置该分区类型为 <code>0xEF02</code> 并为其设置 <code>gptbios</code> 标签。

An EFI System Partition is not required, but it would be sensible to make sure that the BIOS boot partition is large enough to be converted to one, should the system motherboard later be upgraded to an UEFI board.

下面是在对一个 GPT 格式磁盘使用 {{c|gdisk}} 工具按下{{Key|p}} 后的输出信息，该磁盘同时包含 BIOS 引导分区 [0xEF02] 和 EFI 分区 [0xEF00] ：

{{RootCmd|gdisk /dev/sdc|output=<pre>
GPT fdisk (gdisk) version 0.8.1
 
Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present
 
Found valid GPT with protective MBR; using GPT.
 
Command (? for help): p
Disk /dev/sdc: 976773168 sectors, 465.8 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): AA369F4D-37A4-4C0D-A357-DC24B99A6337
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 976773134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)
 
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       828377087   395.0 GiB   8E00  Linux LVM
   2       828377088       891291647   30.0 GiB    0700  Microsoft basic data
   3       891291648       975177727   40.0 GiB    0700  Microsoft basic data
   4       975177728       976754687   770.0 MiB   8300  Linux filesystem
   5       976754688       976756735   1024.0 KiB  EF02  BIOS boot partition
   6       976756736       976773134   8.0 MiB     EF00  EFI System
 
Command (? for help): 
</pre>}}

{{Note|如果是使用 {{c|fdisk}}，那么无需为 GPT 类型码输入十六进制前缀 <code>0x</code>。}}

对于相同的设置， {{c|parted}} 工具的输出会稍微有些不同之处：

{{RootCmd|parted /dev/sdc|output=<pre>
GNU Parted 3.0
Using /dev/sdc
(parted) print
...
Sector size (logical/physical): 512B/512B
Partition Table: gpt
  
Number  Start   End    Size    File system  Name                  Flags
 1      1049kB  424GB  424GB                Linux LVM             lvm
 2      424GB   456GB  32.2GB               Microsoft basic data
 3      456GB   499GB  42.9GB               Microsoft basic data
 4      499GB   500GB  807MB   ext2         Linux filesystem
 5      500GB   500GB  1049kB               BIOS boot partition   bios_grub
 6      500GB   500GB  8396kB               EFI System            boot
  
(parted)
</pre>}}

对于那些已经熟悉 {{c|fdisk}} 磁盘分区工具的用户而言，通过 {{c|gdisk}} 创建磁盘分区显得更为直接。启动 {{c|gdisk}}，在主菜单下输入 {{Key|n}} （创建新分区），指定开始和结束的扇区（如果需要），然后设置磁盘类型为 <code>EF00</code> ，即 EFI 系统分区。

按照 [[Handbook:Main_Page|Gentoo 安装说明]] 操作的用户，应该已经按照要求正确地设置好了磁盘分区结构。

=== UEFI 引导，使用 GPT ===

首先确保 {{Path|/boot}} 目录可用 - 如果是使用一个单独的分区，请确保已经正确挂载到 {{Path|/boot}} ：

{{RootCmd|mount /boot}}

Run the {{c|grub-install}} command to copy the relevant files to {{Path|/boot/grub}}. This should install GRUB2 in {{Path|/boot/grub}}, copy the core image to {{Path|/boot/efi/EFI/gentoo/grubx64.efi}}, and call [[Efibootmgr|efibootmgr]] to add a boot entry.

{{RootCmd|grub-install --efi-directory{{=}}/boot/efi|output=<pre>
Installation finished. No error reported.
</pre>}}

The above command assumes the vfat [[EFI System Partition]] (ESP) is mounted at {{Path|/boot/efi}}.  If the ESP is mounted directly at {{Path|/boot}}, use <code>--efi-directory=/boot</code>. 

{{c|grub-install}} also accepts a <code>--target</code> option to set the CPU architecture and system platform. If unspecified, {{c|grub-install}} will attempt to guess the proper values; on an AMD64 UEFI-booted system it will use <code>x86_64-efi</code> by default. {{c|grub-install}} also accepts a <code>--boot-directory</code> option to tell the GRUB2 installer which directory to look for GRUB2's boot files. This defaults to {{Path|/boot}} but is useful when trying to move a root partition.

==== 为 UEFI 引导程序设置 GPT 分区 ====

使用 GRUB2 引导 UEFI GPT 系统时， 系统 ''必须'' 有一个包含 FAT 文件系统的独立 EFI 分区。

The EFI partition can ''replace'' having a {{Path|/boot}} partition on {{Path|/dev/sda1}} by having a {{Path|/boot/efi}} partition on {{Path|/dev/sda1}}. This is to say a successful UEFI boot scenario using GRUB2 ''can'' operate with two partitions total (three total if a swap partition is needed): a root partition and an EFI partition. Using this configuration, the {{Path|/boot}} ''folder'' will be located in the root {{Path|/}} ''partition'' (at {{Path|/boot}}) and the EFI ''partition'' will mount ''in'' the boot ''folder'' (at {{Path|/boot/efi}}). For further clarification, see the example {{Path|/etc/fstab}} file below.

{{FileBox|filename=/etc/fstab|title=Example of an UEFI capable {{Path|/etc/fstab}} file with a swap partition:|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
/dev/sda2		none		swap		sw		0 0
/dev/sda3		/		ext4		noatime		0 1
</pre>}}

创建一个100MB的 {{Path|/boot/efi}} 分区将会有足够的空间容纳下多个 {{Path|*.efi}} 文件（当然，大部分系统只会使用一个入口，多个入口并非必须的）。

Create the partition using the partitioning [[Partition#GUID_Partition_Table_.28GPT.29|tool of choice]]. The {{c|gdisk}} ({{Package|sys-apps/gptfdisk}}) and {{c|parted}} ({{Package|sys-block/parted}}) tools fit nicely for this purpose. When using the {{c|gdisk}} utility, be sure to use type <code>EF00</code>.

紧接着，请使用  {{c|mkdosfs}} 在 EFI 系统分区上创建 FAT 文件系统，并参照以下示例将该分区加入 {{Path|/etc/fstab}} 配置文件。

{{RootCmd|mkdosfs -F 32 -n efi-boot /dev/sda1
|mkdir /boot/efi}}

{{FileBox|filename=/etc/fstab|title=Adding the /boot/efi mount entry|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
</pre>}}

{{RootCmd|mount /boot/efi}}

{{Note|It is helpful to set the <var>GRUB_PLATFORMS</var> variable in {{Path|/etc/portage/make.conf}}. This will assist GRUB2 in determining what options to use when detecting the proper EFI target. For 32-bit UEFI systems use <code>efi-32</code>. For 64-bit use <code>efi-64</code>.}}

{{Important|In order for GRUB2 to install properly, the EFI directory ''must'' be mounted ''and'' the <code>efivars</code> kernel module must be loaded before the {{c|grub-install}} command will complete successfully.}}

==== 备选方案: 使用默认的 UEFI 固件位置 ====

If the system's UEFI firmware fails to find GRUB2's EFI bootloader file, using the default boot loader location should provide a working solution. This circumvents the boot menu managed by [[Efibootmgr|efibootmgr]] and thus offers reduced functionality, but is less error prone. To do this, verify the EFI partition is mounted at {{Path|/boot/efi}} then copy the file {{Path|grubx64.efi}} located at {{Path|/boot/efi/EFI/gentoo/grubx64.efi}} to {{Path|/boot/efi/EFI/BOOT/BOOTX64.EFI}}. This example assumes a 64-bit UEFI system, adjust accordingly for 32-bit UEFI systems.

== 扩展特性 ==

GRUB2有很多特性使得其成为非常强大的启动引导器。它支持：

* 从UEFI平台引导。
* 从GPT分区的磁盘引导，不需要hybrid MBR (hybrid MBR可以出于兼容性和便携性的需求而被使能)。
* 从 [[btrfs]] 格式的 {{Path|/boot}} 引导分区引导。
* 直接从[[btrfs]]磁盘陈列引导而不需要[[initramfs]]服务于早期的挂载设置。
* 直接从逻辑管理卷引导，(如[[LVM|LVM2]])。
* 引导并支持DM-RAID (RAID 0, 1, 4, 5, 6, 9和10)。
* 从加密的设备引导(LUKS)。

一些特殊的特性在下面将被详细的解释。

=== Chainloading ===

与传统的GRUB相比，GRUB2被构建成为更好地支持了chainload模式。如要chain load另外一个启动引导器，您可以使用<code>chainloader</code> 选项。

{{FileBox|filename=/etc/grub.d/40_custom|title=Chainloading another bootloader|<pre>
menuentry "Custom Super Bootloader Example" {
     insmod part_msdos
     insmod chain
     chainloader (hd1,1)+1
}
</pre>}}

要想了解chainloading的更多信息，可以查看[[GRUB2/Chainloading|Chainloading]]子页面。

=== 使用framebuffer显示  ===

为了让GRUB2使用[[framebuffer]]图形界面显示，重新emerge GRUB，使能USE标记<code>truetype</code>。这个将会安装缺省的True Type字体以及一个字体转换工具。

{{Emerge|--newuse sys-boot/grub:2}}

执行配置缺省的GRUB2位于{{Path|/etc/default/grub}}的配置文件。例如：

{{FileBox|filename=/etc/default/grub|title=Framebuffer related settings|lang=bash|1=
# Set resolution and color depth
GRUB_GFXMODE=1366x768x32
 
# Keep resolution when loading the kernel
GRUB_GFXPAYLOAD_LINUX=keep
 
# Set a background image
GRUB_BACKGROUND="/boot/grub/bg.png"
 
# Use a custom font, converted using grub-mkfont utility
GRUB_FONT="/boot/grub/fonts/roboto.pf2"
}}

为了找到您的系统显卡所支持的显示模式，在GRUB2的shell里使用下面的命令行：

{{Cmd|prompt=(grub)|color=white|insmod all_video|videoinfo}}

== Troubleshooting ==

Most of the issues can be resolved by ensuring that the partition layout is correct. Make sure enough space is available before the first partition of the disk, or optionally make sure that a ''BIOS boot partition'' is available. Also verify that {{Path|/boot/grub/grub.cfg}} was correctly generated with {{c|grub-mkconfig}}, or generate one with a custom menu entry.

想要了解更多关于GRUB2排障的情况，请参考[[GRUB2/Troubleshooting|Troubleshooting]] 子文章。

=== os-prober and UEFI in chroot ===

The {{Package|sys-boot/os-prober}} utility is used to discover alternate installs, such as Microsoft Windows. To function properly, it needs to have access to information from the live environment's udev to test for the EFI System Partition.

Run these commands in the host environment to provide the required files (example shows Gentoo mounted on {{Path|/mnt/gentoo}} like in the [[Handbook:AMD64|Handbook]]):

{{RootCmd
|mkdir -p /mnt/gentoo/run/udev
|mount -o bind /run/udev /mnt/gentoo/run/udev
|mount --make-rslave /mnt/gentoo/run/udev
}}

== See also ==

这里有一些特别的GRUB2资源可用：

* In [[GRUB2/Chainloading|Chainloading]] 描述了使用GRUB2引导其它的boot loaders，对于双引导系统或者当GRUB2需要被配置成从ISO文件引导时是非常值得阅读的。
* In [[GRUB2/AdvancedStorage|Advanced storage]]怎样在更高级的存储条件，例如软RAID，逻辑卷或者加密文件系统中安装和使用GRUB2的必要步骤被归档在这里。
* In [[GRUB2/Config_Variables|Configuration variables]] 被{{Path|/etc/default/grub}}所使用的GRUB2配置变量的详细清单被归档在这里。
* In [[GRUB2/Troubleshooting|Troubleshooting]] GRUB2的常错误（和它们的解决方案）被列在这里。
* In [[Hybrid_partition_table|Hybrid partition table]] 如何使用一个混合的MBR/GPT设置被归档在这里，连同怎样与GRUB2一道使用这样一个混合的分区布局一起。

== 外部资源 ==

更多的信息，请参见：

* [https://www.gnu.org/software/grub/manual/grub.html GNU GRUB 2 manual page]
** [https://www.gnu.org/software/grub/manual/grub.html#Network Network (PXE) section of GRUB2]
* [http://www.rodsbooks.com/gdisk/bios.html Legacy BIOS issues with GPT article]
* [http://www.rodsbooks.com/gdisk/hybrid.html GPT and Hybrid MBR article]
* [http://www.rodsbooks.com/gdisk/ GPT fdisk utility page]
* [https://wiki.archlinux.org/index.php/GRUB2 Arch Linux GRUB2 wiki article]
* [https://fedoraproject.org/wiki/GRUB_2?rd=Grub2#Encountering_the_dreaded_GRUB_2_boot_prompt Fedora GRUB2 wiki article : Encountering the dreaded GRUB2 boot prompt]
* [https://help.ubuntu.com/community/UEFIBooting ubuntu UEFI booting help]
* [http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr]
* [http://daniel-lange.com/archives/75-Securing-the-grub-boot-loader.html A blog post entry on locking specific GRUB2 boot entries with a password]


[[Category:Bootloaders]]
