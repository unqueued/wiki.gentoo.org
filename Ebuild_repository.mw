<languages />
<translate>
<!--T:1-->
'''An overlay is an additional repository that Portage takes into account when dealing with software.'''

<!--T:2-->
Within Gentoo Linux, users already have one "main" package repository, called the ''Portage Tree''. This main repository contains all the software packages (called [[Ebuild|ebuilds]]) maintained by Gentoo developers. But users can add additional repositories to the tree that are "layed over" the main tree - hence the name, ''overlays''.

<!--T:3-->
Since package repositories are nothing more (or less) than a set of files (ebuilds, metadata files, ChangeLog entries ...) these repositories can be pulled in from public repositories (git, cvs, svn ...) or downloaded as tarballs and extracted manually onto the system. It is advised to use managed repositories by ''trusted'' third parties; any installed overlay will cause Portage to look through the overlayed files when deciding which software to install. If compromised code is in the overlay, then compromised packages could be installed on the system.

== Treatment of overlays == <!--T:4-->

<!--T:5-->
Portage uses the <code>PORTDIR_OVERLAY</code> variable to link to the installed overlays on the system. This variable uses a space-delimited list of paths on the system where Portage can find the roots of the additional repositories.

=== Manually setting overlay locations === <!--T:6-->

<!--T:7-->
To make a personal overlay, create a location ({{Path|/usr/local/myportage}} for example) in which the packages Portage is to look for are located. Then add the <code>PORTDIR_OVERLAY</code> variable to the {{Path|/etc/portage/make.conf}} file containing the path to the location of the custom overlay.

<!--T:38-->
{{FileBox|filename=/etc/portage/make.conf|title=Example 1 - Adding a custom overlay|lang=bash|1=
PORTDIR_OVERLAY="/usr/local/myportage" 
}}

An example of an overlay being located in the a user's home directory:

{{FileBox|filename=/etc/portage/make.conf|title=Example 2 - Adding a custom overlay|lang=bash|1=
PORTDIR_OVERLAY="/home/user/overlay" # requires /home is readable for Portage
}}

=== Add user to Portage group === <!--T:52-->

<!--T:53-->
To add a user to the <code>portage</code> group, use the <tt>gpasswd</tt> command like so:

<!--T:54-->
{{RootCmd|gpasswd -a alice portage}}

<!--T:55-->
See also [[Knowledge_Base:Adding_a_user_to_a_group|adding a user to a group]].

=== Using crossdev === <!--T:8-->

<!--T:9-->
[[crossdev]] will automatically place the ebuilds/categories it generates into the first overlay found in <code>PORTDIR_OVERLAY</code>. You might want to prevent [[crossdev]] from disturbing [[layman]]'s overlays or your personal per-machine overlay (normally created at {{Path|/usr/local/portage}}). You can create an overlay specifically for [[crossdev]]'s use:

<!--T:39-->
{{RootCmd|mkdir -p /usr/local/portage-crossdev/profiles
|echo local-crossdev > /usr/local/portage-crossdev/profiles/repo_name}}

<!--T:10-->
Then you can instruct portage and crossdev to use this overlay:

<!--T:40-->
{{FileBox|filename=/etc/portage/make.conf|title=Let crossdev to store its ebuild in local-crossdev and indicate that the local overlay should override every other overlay|lang=bash|1=
source /var/lib/layman/make.conf
PORTDIR_OVERLAY="/usr/local/portage-crossdev ${PORTDIR_OVERLAY} /usr/local/portage"
}}

<!--T:11-->
{{FileBox|filename=/etc/portage/make.conf|title=Prevent crossdev from messing with your local overlay when not using layman|lang=bash|1=
PORTDIR_OVERLAY="/usr/local/portage-crossdev /usr/local/portage"
}}

=== Using layman === <!--T:12-->

<!--T:13-->
To make management of multiple overlays simple, a tool called [[Layman|layman]] is developed. This tool knows about popular user- and developer managed overlays and is able to install & synchronize them as well as add them to the <code>PORTDIR_OVERLAY</code> location.

=== Local overlay === <!--T:14-->

<!--T:36-->
For instructions on setting up a local overlay, see [[Overlay/Local_overlay]].

=== Overlay priorities === <!--T:16-->

<!--T:17-->
Each overlay has its unique priority. This makes sure that in the case of a specific version being found in several overlays, the resolution is unambiguous. Ebuilds from overlays with higher priorities take precedence over ebuilds from overlays with lower priorities.

<!--T:41-->
{{Note|This "natural" way of priority handling was introduced in January 2011, before that the priority resolution order was reversed, so negative numbers used to stand for high priorities}}

<!--T:42-->
The list of overlays with their priorities can be obtained through the output of the following command

<!--T:43-->
{{Cmd|emerge --info --verbose}}

<!--T:44-->
Unless the <code>PORTDIR_OVERLAY</code> variable has been modified as described [[#Setting overlay priorities|below]], the default gentoo portage tree will have a priority of -1000. That means that all other overlays take precedence. That is the default behavior, because overlays are designed to "lay over/on top" of the portage tree.

==== Setting overlay priorities ==== <!--T:18-->

<!--T:19-->
The overlay priority is calculated from the order of overlay entries in the <code>PORTDIR_OVERLAY</code> variable. Portage "walks" through the variable from left to right and increments the priority on the way. The leftmost entry starts with a priority of 1, the next entry has a priority of 2 and so on.

<!--T:45-->
{{Note|Some time ago the overlay priority could be set in {{Path|/etc/portage/repos.conf}}. This does not work anymore}}

<!--T:20-->
Unless the <code>PORTDIR_OVERLAY</code> contains the portage tree entry, the portage tree will always be assigned a priority of -1000.
This can be easily changed by putting <code>PORTDIR</code> in the <code>PORTDIR_OVERLAY</code> variable:

<!--T:21-->
{{FileBox|filename=/etc/portage/make.conf|title=Manual portage tree priority setting|lang=bash|1=
PORTDIR_OVERLAY="/home/user/overlay ${PORTDIR}"
}}

<!--T:46-->
In the example above the user overlay will be assigned a priority of 1 and the portage tree will be assigned a priority of 2. 

<!--T:22-->
{{Note|If you also use [[Layman|layman]] to manage your overlays, you may be interested in the article about [[Layman#Setting overlay priorities with layman|setting overlay priorities with layman]].}}

=== Using unsafe overlays === <!--T:23-->

<!--T:24-->
When using huge overlays or those with unknown/low quality it is best practice to hardmask the whole overlay.

<!--T:47-->
{{FileBox|filename=/etc/portage/package.mask|title=Mask all packages in an overlay|lang=bash|1=
*/*::overlay-name
}}

<!--T:48-->
After that you can unmask the packages you specifically want to emerge.

<!--T:49-->
{{FileBox|filename=/etc/portage/package.unmask|title=Unmask a specific package in an overlay|lang=bash|1=
foo/bar::overlay-name
}}

<!--T:50-->
This way nothing weird will happen on updates and it is safer than using priorities.

== Metadata cache == <!--T:25-->

=== Cache generation === <!--T:26-->

<!--T:27-->
When large overlays are installed, portage may take a long time to perform operations like dependency resolution. This is because overlays do not usually contain a metadata cache.

<!--T:28-->
You may generate a local metadata cache by running <code>emerge --regen</code> after syncing your overlays.

<!--T:29-->
{{RootCmd|layman -S
|emerge --regen}}

Be careful, because <code>emerge --regen</code> takes a lot of time and it's not recommended for rsync users as rsync updates the cache using server-side caches (most of users of portage are rsync users). Rsync users should simply run <code>emerge --sync</code> (or <code>eix-sync</code>) to regenerate the cache. It's probably only users of very large overlays should try <code>emerge --regen</code>.

=== eix integration === <!--T:30-->

==== eix-sync ==== <!--T:31-->

<!--T:32-->
eix-sync can run <code>emerge --regen</code> after syncing your overlays and portage tree.

<!--T:51-->
{{FileBox|filename=/etc/eix-sync.conf||lang=bash|1=
# Sync all overlays
*
# Regenerate overlay metadata
@emerge --regen {{!}}{{!}} true
}}

==== eix-update ==== <!--T:33-->

<!--T:34-->
eix-update can utilize the metadata cache generated by <code>emerge --regen</code> for a speedup and better accuracy. To enable this, set the <code>OVERLAY_CACHE_METHOD</code> to "<code>assign</code>" in {{Path|/etc/eixrc/01-cache}}.

<!--T:35-->
{{FileBox|filename=/etc/eixrc/01-cache|title=Setting OVERLAY_CACHE_METHOD|lang=bash|1=
OVERLAY_CACHE_METHOD="assign"
}}

</translate>

[[Category:Portage]]
