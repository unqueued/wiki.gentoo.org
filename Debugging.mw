{{Stub}}

== Don't strip symbols ==

As a first step, you may want to keep symbols in elf files by the <code>nostrip</code> [[FEATURES|FEATURE]].

That way, all functions in the code will keep their name and e.g. {{Package|sys-devel/gdb}} can then show names in a backtrace instead of function addresses only.

{{FileBox|filename=/etc/portage/make.conf|title=Keep all ELF symbols in each binary|lang=bash|1=
FEATURES="nostrip"
}}

== Install debugging information and sources for selected packages ==

To install debugging information you can use the <code>splitdebug</code> feature. Furthermore, to install the source code you can activate the <code>installsources</code> feature which in turn requires the {{Package|dev-util/debugedit}}. These features are integrated so they provide you with an environment where {{Package|sys-devel/gdb}} can find both the debugging information and the sources and lets you fully use its interactive debugging features.

If <code>nostrip</code> is in your default [[FEATURES]], <code>splitdebug</code> won't do anything!

{{FileBox|filename=[[:/etc/portage/env|/etc/portage/env/debugsyms]]|1=
CFLAGS="${CFLAGS} -ggdb"
CXXFLAGS="${CXXFLAGS} -ggdb"
FEATURES="${FEATURES} splitdebug compressdebug -nostrip"
USE="debug"
}}

{{FileBox|filename=[[:/etc/portage/env|/etc/portage/env/installsources]]|1=
FEATURES="${FEATURES} installsources"
}}

{{emerge|dev-util/debugedit sys-devel/gdb}}

Then you can activate those new "environments" for packages you need the sources and/or debug info:

{{FileBox|filename=[[:/etc/portage/package.env]]|1=
category/some-package debugsyms
category/some-library debugsyms installsources
}}

{{emerge|params+=--oneshot|category/some-package category/some-library}}


Now, if you debug program with gdb it will find the sources and debugging infos.

{{CodeBox|title=Example gdb session for debugging {{Package|dev-util/radare2}}|1=
% gdb --args r2 /bin/ls
Reading symbols from r2...Reading symbols from /usr/lib64/debug//usr/bin/radare2.debug...done.
done.
= gdb>> break main
Breakpoint 1 at 0x2e70: file radare2.c, line 372.
= gdb>> run
Starting program: /usr/bin/r2 /bin/ls

Breakpoint 1, main (argc=2, argv=0x7fffffffdd98, envp=0x7fffffffddb0) at radare2.c:372
372    int main(int argc, char **argv, char **envp) {
= gdb>> ...etc
}}

== Valgrind ==

You often need to have gcc debug information in order to run valgrind on any binary at all.

{{FileBox|filename=/etc/portage/package.env|1=
sys-libs/glibc debug
}}

It is possible that valgrind refuses to launch with an error containing the following.
<pre>
valgrind:  A must-be-redirected function                        
valgrind:  whose name matches the pattern:      strlen          
valgrind:  in an object with soname matching:   ld-linux-x86-64.so.2 
</pre>

In this case, you need to<ref>https://wwwtech.de/articles/2012/jan/valgrind-again:-strlen-redirection</ref>:

Create a copy of the glibc ebuild in a [[custom repository]], then edit the file {{Path|sys-libs/glibc/files/eblits/common.eblit}}, line 226 :

{{FileBox|filename=/path/to/overlay/.../sys-libs/glibc/files/eblits/common.eblit|1=
append-flags -O2 -fno-strict-aliasing
}}

and add <pre>-fno-builtin-strlen</pre> at the end of the line.

Also, activate the nostrip feature:

{{FileBox|filename=/etc/portage/make.conf|1=
FEATURES="nostrip"
}}

{{emerge|params+=--oneshot|sys-libs/glibc}}

You can remove or comment out the FEATURES line after glibc is merged.

== See also ==

* [[Project:Quality_Assurance/Backtraces#debug_USE_flag|Project:Quality Assurance/Backtraces 1.4 debug USE flag]]

== References ==
