Gentoo, don't officially support UEFI, but their nature makes it easy to add UEFI support to them.

You need to basically follow the [https://www.gentoo.org/doc/en/handbook/ handbook] of your architecture

The first part you need to do diverged from that guide in order to have a working, bootable system.

First, UEFI don't use MBR (Master Boot Record), you'll need to create a GPT partition table.

UEFI work reading a .efi file in a FAT32 partition, that you will need to create and mount your /boot on there.

Here is how I created my partitions. NOTE the way I wrote the mkpart commands ensures proper alignment on SSD drives. Change them at your own risk. (Can use align-check to see if you did it right):

{{RootCmd|parted /dev/sda}}
{{RootCmd|prompt=(parted)
|mkpart ESI fat32 0% 500m
|mkpart primary ext4 500m 100%
|set 1 boot on
|quit
}}
{{RootCmd
|mkfs.vfat -F 32 /dev/sda1
|mkfs.ext4 /dev/sda2
}}

{{Note|Note that the '''boot''' flag parted sets is '''NOT''' the same thing as the bootable flag in the old master boot record.  It's confusing that parted choose to use the same name, but they are different. Setting the '''boot''' flag by '''parted''' in a MBR partition marks that partition '''bootable''', while in a GPT partition it is marked as '''EFI System Partition. Also note that ESI is not a typo.'''. }}

Now continue along with the quickinstall guide.

For the kernel configuration, make sure you specify the kernel options mentioned here: [[EFI stub kernel]]

Here are my steps:
{{RootCmd|cd /usr/src/linux
|make menuconfig
|make modules_install

|mkdir /boot
|mount /dev/sda1 /boot
|mkdir -p /boot/efi/boot
|cp /usr/src/linux/arch/x86/boot/bzImage /boot/efi/boot/bootx64.efi

|emerge efibootmgr}}
{{Note|You can also copy bzImage from arch/x86_64/boot/bzImage.}}

Now the tricky part. You need to tell the UEFI Firmware about your new bootx64.efi, to do this you will use a tool called efibootmgr, but also you need to have booted the system WITH UEFI.

So you can grab any linux distribution that support boot in UEFI mode, and do the work.
Another option that does work, is if you stick your new bootx64.efi file on a USB flash stick, the laptop will automatically find that and boot it.

So insert a USB stick, we'll pretend it comes up as /dev/sdd in the following code:

{{RootCmd|parted /dev/sdd}}
{{RootCmd|prompt=(parted)
|mklabel gpt
|mkpart esi fat32 0% 500m
|set 1 boot on
|quit
}}
{{RootCmd
|mkfs.vfat -F 32 /dev/sdd1
|mkdir /mnt/tmp && mount /dev/sdd1 /mnt/tmp

|mkdir -p /mnt/tmp/efi/boot

|cp arch/x86/boot/bzImage /mnt/tmp/efi/boot/bootx64.efi
|umount /mnt/tmp}}

Now reboot the box and hit F2 (or whatever) to enter the UEFI Firmware Boot Menu on boot.

In the UEFI list, choose to boot the new USB flash stick that should be showing up.

The kernel should load up and boot your sytem.

Make sure efivars kernel module is loaded:

{{RootCmd|modprobe efivars}}

Now you can tell the UEFI Firmware about your bootx64.efi that is on the hard drive:

{{RootCmd|efibootmgr -c -d /dev/sda -p 1 -L Gentoo -l "\efi\boot\bootx64.efi"
|reboot}}

Now enter the UEFI Firmware Boot Menu again and you should see "Gentoo" in the list!

Congrats, it should now boot!

[[Category:Bootloaders]]
