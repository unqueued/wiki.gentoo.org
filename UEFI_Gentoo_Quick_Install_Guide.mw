Gentoo doesn't officially support [https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface UEFI], but it is not hard to install gentoo onto an UEFI system.  To do this you will need to basically follow the [https://www.gentoo.org/doc/en/handbook/ installation handbook] of your architecture.  The first place you will diverge from the guide is the partition setup.

UEFI doesn't use MBR (Master Boot Record), so you'll need to create a GPT partition table.  UEFI works by reading an .efi file in a FAT32 partition, that you will need to create and upon which you will mount /boot.

Here is how I created my partitions.

{{RootCmd|parted /dev/sda}}
{{RootCmd|prompt=(parted)
|mklabel gpt
|mkpart ESP fat32 0% 500m
|mkpart primary ext4 500m 100%
|set 1 boot on
|quit
}}
{{Note|The mkpart commands shown here ensure proper alignment on SSD drives; change them at your own risk.  You may use the 'align-check' parted command to verify partition alignment.}}
{{Note|The '''boot''' flag parted sets for a GPT partition is '''NOT''' the same thing as the bootable flag in a master boot record (MBR).  It is confusing that parted choose to use a similar name, but the flags are different.  Setting the '''boot''' flag by '''parted''' in an MBR partition marks that partition '''bootable''', while in a GPT partition the '''boot''' flag indicates the '''EFI System Partition''' (ESP).  Also note that '''ESP''' is not a typo.}}
{{RootCmd
|mkfs.vfat -F 32 /dev/sda1
|mkfs.ext4 /dev/sda2
}}

Now continue along with the install guide.

For the kernel configuration, make sure you specify the kernel options mentioned here: [[EFI stub kernel]]

Here are my steps:
{{RootCmd|cd /usr/src/linux
|make menuconfig
|make modules_install

|mkdir /boot
|mount /dev/sda1 /boot
|mkdir -p /boot/efi/boot
|cp /usr/src/linux/arch/x86/boot/bzImage /boot/efi/boot/bootx64.efi

|emerge efibootmgr}}
{{Note|You can also copy bzImage from arch/x86_64/boot/bzImage.}}

Now the tricky part. You need to tell the UEFI Firmware about your new bootx64.efi, to do this you will use a tool called efibootmgr, but also you need to have booted the system WITH UEFI.

So you can grab any linux distribution that support boot in UEFI mode, and do the work.
Another option that does work, is if you stick your new bootx64.efi file on a USB flash stick, the laptop will automatically find that and boot it.

So insert a USB stick, we'll pretend it comes up as /dev/sdd in the following code:

{{RootCmd|parted /dev/sdd}}
{{RootCmd|prompt=(parted)
|mklabel gpt
|mkpart esp fat32 0% 500m
|set 1 boot on
|quit
}}
{{RootCmd
|mkfs.vfat -F 32 /dev/sdd1
|mkdir /mnt/tmp && mount /dev/sdd1 /mnt/tmp

|mkdir -p /mnt/tmp/efi/boot

|cp arch/x86/boot/bzImage /mnt/tmp/efi/boot/bootx64.efi
|umount /mnt/tmp}}

Now reboot the box and hit F2 (or whatever) to enter the UEFI Firmware Boot Menu on boot.

In the UEFI list, choose to boot the new USB flash stick that should be showing up.

The kernel should load up and boot your sytem.

Make sure efivars kernel module is loaded:

{{RootCmd|modprobe efivars}}

Now you can tell the UEFI Firmware about your bootx64.efi that is on the hard drive:

{{RootCmd|efibootmgr -c -d /dev/sda -p 1 -L Gentoo -l "\efi\boot\bootx64.efi"
|reboot}}

Now enter the UEFI Firmware Boot Menu again and you should see "Gentoo" in the list!

Congrats, it should now boot!

[[Category:Bootloaders]]
