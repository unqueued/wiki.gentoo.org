<languages />

{{Metadata|abstract=SSH(보안 쉘)은 유닉스 같은 운영체제의 전통 텔넷 도구를 대체하는 암호화 터미널 프로그램입니다.}}

{{InfoBox stack
|{{InfoBox homepage|http://www.openssh.org|header=true}}
|{{InfoBox wikipedia|Secure Shell}}
}}
'''SSH'''('''S'''ecure '''SH'''ell)은 유닉스 같은 운영체제의 전통 [[wikipedia:telnet|텔넷]] 도구를 대체하는 암호화 터미널 프로그램입니다.

게다가 원격 터미널 접근은 주요 '''ssh''' 바이너리로 제공하며, SSH 프로그램 모음은 '''scp'''('''s'''ecure '''c'''o'''p'''y)와 '''sftp'''('''s'''ecure '''f'''ile '''t'''ransfer '''p'''rotocol) 같은 다른 도구를 포함하며 성장하였습니다.

원래 SSH는 free가 아니었습니다(여기서 free는 무료인지 자유인지 정확하지 않아 free로 표기했습니다. 역자 주). 그러나 오늘날 젠투에 미리 설치되어 나오는 [http://www.openbsd.org/ OpenBSD]의 OpenSSH는 가장 인기있는 프로그램이면서 SSH 구현체의 사실상 표준으로 자리잡았습니다.

== 설치 ==

대부분 배포본에는 ({{Package|net-misc/openssh}} 꾸러미를 통해) OpenSSH를 미리 설치했습니다. 이 꾸러미는 다음 USE 플래그를 사용합니다.

{{USEflag|package=net-misc/openssh
|bindist
|hpn
|pam
|tcpd
|kerberos
|ldap
|libedit
|selinux
|skey
|static
|X
|X509
}}

USE 플래그 내용을 바꾸고 나면 OpenSSH를 다시 빌드하는 것을 잊지 마십시오:

{{emerge|net-misc/openssh}}

== OpenSSH 실행 ==

=== 서버 ===

openssh를 기본 런레벨에 아직 추가하지 않았다면 추가하십시오.

{{RootCmd|rc-update add sshd default}}

다음 명령으로 sshd 데몬을 시작하십시오:

{{RootCmd|/etc/init.d/sshd start}}

OpenSSH 서버는 다른 [[OpenRC]] 관리 서비스처럼 다룰 수 있습니다:

{{RootCmd|/etc/init.d/sshd start
|/etc/init.d/sshd stop
|/etc/init.d/sshd restart}}

{{Note/ko|<code>/etc/init.d/sshd restart</code> 명령을 실행할때 서버로의 활성 SSH 연결은 남아있는 채로 영향을 받지 않습니다.}}

== 설정 ==

=== 키 생성 ===

보안 쉘을 제공하려면, SSH에서 제공하는 암호화, 복호화, 해싱 함수 기능을 관리하는데 암호화 키를 사용합니다. 

SSH 서비스를 처음 시작할때 시스템 키를 생성합니다. <code>ssh-keygen</code> 명령으로 키를 다시 생성할 수 있습니다.

{{Note/ko|예제의 <code>SecretPassphrase</code>를 여러분 자신의 암호로 바꾸십시오.}}

SSH 프로토콜 버전 1에서 사용하는 키를 만들려면(프로토콜 버전 2에서는 편의상 이런 동작을 더이상 사용할 수 없으며 오래된 방식입니다):

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N "SecretPassphrase"}}

SSH 프로토콜 버전 2의 키를 만들려면(DSA와 RSA 알고리즘):

{{RootCmd|/usr/bin/ssh-keygen -d -f /etc/ssh/ssh_host_dsa_key -N "SecretPassphrase"
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N "SecretPassphrase"}}

=== 서버 설정 ===

설정 파일의 위치 변경을 포함하는 OpenRC의 {{Path|/etc/conf.d/sshd}} 에서 더 많은 설정을 할 수 있지만,  SSH 서버는 보통 {{Path|/etc/ssh/sshd_config}} 파일에서 설정합니다. 서버 설정하는 방법에 대한 자세한 내용은 ''sshd_config'' [[man page]]를 보십시오.

보안에 중점을 둔 설정에 대해 이 [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html 안내서]도 봐두어야 합니다.

=== 클라이언트 설정 ===

'''ssh''' 클라이언트와 관련 프로그램 ('''scp''', '''sftp''', 등)은 다음 파일에서 설정할 수 있습니다.
* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

더 많은 정보는 <code>ssh_config</code> 설명서를 읽어보십시오:

{{Cmd|man ssh_config}}

=== 무 암호 인증 ===

[[git]] 서버 관리를 위한 간단한 방법입니다.

==== 클라이언트 ====

클라이언트에서 다음 명령을 실행하십시오:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.> .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== 서버 ====

사용자 계정이 서버에 있는지 확인하고 클라이언트의 {{Path|id_rsa.pub}} 파일을 {{Path|~/.ssh/authorized_keys}} 파일에 넣으십시오.

==== 단일 머신 시험 ====

위 절차를 지역 머신에서 시험할 수 있습니다:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

== 문제 해결 ==

문제를 해결하는데 도와줄 디버깅 모드 레벨은 3가지가 있습니다. ''-v'' 옵션으로 절차에 대한 디버깅 메시지를 출력합니다. 연결, 인증, 설정 문제에 대한 디버깅에 쓸모가 있습니다. 여러개의 -v 옵션은 출력 내용을 더 자세하게 보여줍니다. 최대 레벨은 3입니다.

{{Cmd|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv}}

=== 오래 연결된 상태에서 죽음 ===

수많은 인터넷 접근 장치는 네트워크 주소 변환([[NAT]])을 수행하며, 네트워크상의 단일 IP를 가지고 있음에도 불구하고 집이나 사무실같은 개인 네트워크로부터 인터넷과 같은 외부 네트워크로 접근할 수 있도로 해주는 절차를 거칩니다. 불행하게도 모든 NAT 장치가 동일하게 만들어지는 것은 아니며, SSH가 사용하는 TCP 연결과 같은 경우 어떤 장치는 오래 살아있는것처럼 잘못 보이기도 합니다. 이는, '''ssh''' 클라이언트가 아직 빠져나가지 않았음에도 불구하고 원격 서버와의 상호작용이 갑자기 중단되는 것과 같은 현상이 보일 수도 있습니다.

이 문제를 해결하려면 OpenSSH 클라이언트와 서버 사이에서 'keep alive'를 보내거나, 살아있는 연결 상태를 관리하고 확인하는데 역점을 둔 보이지 않는 메시지를 보내도록 설정할 수 있습니다.
* '''로컬 서버에 연결한 모든 클라이언트'''를 살아있는 채로 유지하려면, {{Path|/etc/ssh/sshd_config}} 파일에서 ''ClientAliveInterval 30'' (또는 초 단위의 다른 값)을 설정하십시오.
* '''로컬 클라이언트에서 연결한 모든 서버'''를 살아있는 채로 유지하려면, {{Path|/etc/ssh/ssh_config}} 파일에서 ''ServerAliveInterval 30'' (또는 초 단위의 다른 값)을 설정하십시오.

=== X11 포워팅이 포워딩 또는 터널링이 되지 않습니다! ===

<b>문제점</b>: X11 포워딩을 수락하려 설정 파일에서 필요한 내용을 바꿨지만, 찾은 X 프로그램을 서버에서 실행하는데 클라이언트로 전달이 되지 않습니다.

<b>해결책</b>: 원격 서버 또는 호스트에 SSH 로그인을 하는 동안 어떤 일이 발생하는지, SSH 세션을 설정한 다음 <code>$DISPLAY</code> 변수가 설정 해제되는지 설정 중인지 확인하십시오.

이 시나리오에 대한 시험은 원격으로 로그인 한 다음에 다음과 같은 과정을 따릅니다:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

You should get something similar to "localhost:10.0" or "localhost2.local:10.0" using server side <code>X11UseLocalhost no</code> setting.  If you're getting the usual ":0.0", check to make sure you are not unsetting or initializing the <code>$DISPLAY</code> variable within {{Path|$HOME/.bash_profile}}. If so, remove or comment your custom initialization of <code>$DISPLAY</code> or prevent {{Path|bash_profile}} from executing during SSH login:

{{Cmd|ssh -t me@localhost2 bash --noprofile}}

{{Path|bashrc}}에 alias로 지정하는 꼼수가 있습니다.

== 추가 참조 ==
* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html OpenSSH 보안]  - 젠투 개발자 문서입니다.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH 키 관리 1장] - 젠투 문서, 전부 3장이 있습니다. 
* [[Keychain|젠투 리눅스 키체인 안내서]] 
* [[autossh]] - SSH 연결을 끊고 다시 자동으로 연결하는 행위를 감지합니다.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
