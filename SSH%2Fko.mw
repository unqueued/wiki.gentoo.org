<languages />

{{Metadata|abstract=SSH(보안 쉘)은 유닉스 같은 운영체제의 전통 텔넷 도구를 대체하는 암호화 터미널 프로그램입니다.}}

{{InfoBox stack |
{{InfoBox homepage|http://www.openssh.org|header=true}} |{{InfoBox wikipedia|Secure Shell}}
|{{InfoBox ohloh|openssh}}
}}
'''SSH'''('''S'''ecure '''SH'''ell)은 유닉스 같은 운영체제의 전통 [[wikipedia:telnet|텔넷]] 도구를 대체하는 암호화 터미널 프로그램입니다.

게다가 원격 터미널 접근은 주요 '''ssh''' 바이너리로 제공하며, SSH 프로그램 모음은 '''scp'''('''s'''ecure '''c'''o'''p'''y)와 '''sftp'''('''s'''ecure '''f'''ile '''t'''ransfer '''p'''rotocol) 같은 다른 도구를 포함하며 발전했습니다.

원래 SSH는 free가 아니었습니다(여기서 free는 무료인지 자유인지 정확하지 않아 free로 표기했습니다. 역자 주). 그러나 오늘날 젠투에 미리 설치되어 나오는 [http://www.openbsd.org/ OpenBSD]의 OpenSSH는 가장 인기있는 프로그램이면서 SSH 구현체의 사실상 표준으로 자리잡았습니다.

== 설치 ==

=== 설치 검사 ===

Most deployments of Gentoo Linux will already have OpenSSH installed on the system. This can be checked by running the {{c|ssh}} command. If it is installed a usage statement should be printed:

{{Cmd|ssh|output=<pre>
usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
           [-D [bind_address:]port] [-E log_file] [-e escape_char]
           [-F configfile] [-I pkcs11] [-i identity_file]
           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-p port]
           [-Q cipher | cipher-auth | mac | kex | key]
           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] [user@]hostname [command]
</pre>}}

If no usage statement is printed {{c|ssh}} is either corrupted or not installed. It is also possible that a user is simply rebuilding OpenSSH to include a new USE configuration. Whatever the case, proceed on to view possible USE settings.

=== USE 플래그 ===

{{USEflag|package=net-misc/openssh}}

=== Emerge ===

After changing the necessary USE flags, do not forget to install (or rebuild) OpenSSH:

{{emerge|net-misc/openssh|params+=--changed-use}}

== 설정 ==

=== 키 생성 ===

In order to provide a secure shell, cryptographic keys are used to manage the encryption, decryption, and hashing functionalities offered by SSH.

On the first start of the SSH service, system keys will be generated. Keys can be (re)generated using the {{c|ssh-keygen}} command.

To generate the key used for SSH protocol version 1 (which usually is not enabled anymore; it has been deprecated in favor of protocol version 2) use:

{{RootCmd|/usr/bin/ssh-keygen -t rsa1 -b 1024 -f /etc/ssh/ssh_host_key -N ""}}

SSH 프로토콜 버전 2의 키를 만들려면(DSA와 RSA 알고리즘):

{{RootCmd|/usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N ""
|/usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""}}

=== 서버 설정 ===

설정 파일의 위치 변경을 포함하는 OpenRC의 {{Path|/etc/conf.d/sshd}} 에서 더 많은 설정을 할 수 있지만,  SSH 서버는 보통 {{Path|/etc/ssh/sshd_config}} 파일에서 설정합니다. 서버 설정하는 방법에 대한 자세한 내용은 ''sshd_config'' [[man page]]를 보십시오.

Users should study [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Sven's OpenSSH guide] for a security focused configuration.

=== 클라이언트 설정 ===

The {{c|ssh}} client and related programs ({{c|scp}}, {{c|sftp}}, etc.) can be configured using the following files:

* {{Path|~/.ssh/config}}
* {{Path|/etc/ssh/ssh_config}}

For more information read the {{Path|ssh_config}} manual:

{{Cmd|man ssh_config}}

=== 무 암호 인증 ===

[[git]] 서버 관리를 위한 간단한 방법입니다.

==== 클라이언트 ====

클라이언트에서 다음 명령을 실행하십시오:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/larry/.ssh/id_rsa.
Your public key has been saved in /home/larry/.ssh/id_rsa.pub.
The key fingerprint is:
de:ad:be:ef:15:g0:0d:13:37:15:ad:cc:dd:ee:ff:61 larry@client
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
| . .. n   .      |
|   . (: . .      |
|  o   . . : .    |
| . ..: >.) .     |
|  * ?. .         |
| o.. .. ..       |
| :. .  ! .       |
+-----------------+
</pre>}}

==== 서버 ====

Make sure an account for the user exists on the server, and then place the clients' {{Path|id_rsa.pub}} file into the server's {{Path|~/.ssh/authorized_keys}} file in the user's home directory.

==== Single machine testing ====

위 절차를 지역 머신에서 시험할 수 있습니다:

{{Cmd|ssh-keygen -t rsa|output=<pre>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/larry/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
...
</pre>}}

{{Cmd|mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys}}

{{Cmd|ssh localhost}}

=== Intrusion prevention ===

SSH is a commonly attacked service. Tools such as [[sshguard]] and [[fail2ban]] monitor logs and black list remote users who have repeatedly attempted, yet failed to login. Utilize them as needed to secure a frequently attacked system.

== Usage ==

=== Services ===

==== OpenRC ====

Add the OpenSSH daemon to the default runlevel:

{{RootCmd|rc-update add sshd default}}

Start the sshd daemon with:

{{RootCmd|rc-service sshd start}}

The OpenSSH server can be controlled like any other [[OpenRC]]-managed service:

{{RootCmd
|rc-service sshd start
|rc-service sshd stop
|rc-service sshd restart
}}

{{Note|Active SSH connections to the server remain unaffected when issuing {{c|rc-service sshd restart}}.}}

==== Systemd ====

To have the OpenSSH daemon start when the system starts:

{{RootCmd|systemctl enable sshd.service|output=<pre>
Created symlink from /etc/systemd/system/multi-user.target.wants/sshd.service to /usr/lib64/systemd/system/sshd.service.
</pre>}}

To start the OpenSSH daemon now:

{{RootCmd|systemctl start sshd.service}}

To check if the service has started:

{{RootCmd|systemctl status sshd.service}}

== Troubleshooting ==

There are 3 different levels of debug modes that can help troubleshooting issues. With the <code>-v</code> option SSH prints debugging messages about its progress. This is helpful in debugging connection, authentication, and configuration problems. Multiple <code>-v</code> options increase the verbosity. Maximum verbosity is three levels deep.

{{Cmd
|ssh example.org -v
|ssh example.org -vv
|ssh example.org -vvv
}}

=== Death of long-lived connections ===

Many internet access devices perform Network Address Translation ([[NAT]]), a process that enables devices on a private network such as that typically found in a home or business place to access foreign networks, such as the internet, despite only having a single IP address on that network. Unfortunately, not all NAT devices are created equal, and some of them incorrectly close long-lived, occasional-use TCP connections such as those used by SSH.  This is generally observable as a sudden inability to interact with the remote server, even though the {{c|ssh}} client program has not exited.

In order to resolve the issue, OpenSSH clients and servers can be configured to send a 'keep alive', or invisible message aimed at maintaining and confirming the live status of the link:

* To enable keep alive ''for all clients connecting to your local server'', set <code>ClientAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/sshd_config}} file.
* To enable keep alive ''for all servers connected to by your local client'', set <code>ServerAliveInterval 30</code> (or some other value, in seconds) within the {{Path|/etc/ssh/ssh_config}} file.

=== X11 forwarding, not forwarding, or tunneling ===

'''Problem''': After having made the necessary changes to the configuration files for permitting X11 forwarding, it is discovered X applications are executing on the server and are not being forwarded to the client.

'''Solution''': What is likely occurring during SSH login into the remote server or host, the <var>DISPLAY</var> variable is either being unset or is being set ''after'' the SSH session sets it.

Test for this scenario perform the following after logging in remotely:

{{Cmd|echo $DISPLAY|output=<pre>
localhost:10.0
</pre>}}

The output should be something similar to <code>localhost:10.0</code> or <code>localhost2.local:10.0</code> using server side <code>X11UseLocalhost no</code> setting. If the usual <code>:0.0</code> is not displayed, check to make sure the <var>DISPLAY</var> variable within {{Path|~/.bash_profile}} is not being unset or re-initializing. If it is, remove or comment out any custom initialization of the <var>DISPLAY</var>variable to prevent the code in {{Path|~/.bash_profile}} from executing during a SSH login:

{{Cmd|ssh -t larry@localhost2 bash --noprofile}}

Be sure to substitute <code>larry</code> in the command above with the proper username.

A trick that works to complete this task would be to define an alias within the users' {{Path|~/.bashrc}} file.

== See also ==

* [[Keychain|Gentoo Linux Keychain Guide]]
* [[autossh]] - Detects when SSH connections drop and auto-reconnects.
* [[SCP]] - A Secure Copy Program that comes with the SSH suite.
* [[SFTP]] - Secure File Transfer Protocol client that comes with the SSH suite.
* [[SSHFS]] - A FUSE based SSH powered mount client.

== External resources ==

* [https://dev.gentoo.org/~swift/docs/security_benchmarks/openssh.html Securing OpenSSH] - Gentoo developer documentation.
* [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml OpenSSH Key Management Part1] - Gentoo documentation, have a look at all 3 parts.


[[Category:SSH]]
[[Category:Server]]
[[Category:Daemons]]
