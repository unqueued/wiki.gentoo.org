<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

このガイドでは、Gentoo Linuxにおけるcronデーモンのセットアップと利用方法を説明します。

== cronの基礎 ==

=== cronとは何か ===

cronは<tt>crontab</tt>コマンドからの入力に基づいてスケジュールされたタスクを起動するためのデーモンです。cronは１分毎に起床し、ユーザのcrontabに実行すべきcronジョブがあるかどうかチェックします。 

{{Note/ja|<tt>crontab</tt>はcronジョブリストの名前であると同時に、このリストを編集するためのコマンド名でもあることに注意してください。}}

=== デファクトのcron ===

Portageにはいくつかのcron実装があります。これらはすべてよく似たインタフェースを持っていて、<tt>crontab</tt>もしくはそれに類似したコマンドを使用します。また、連続稼働しないシステムのcronと協調して動作するanacronと呼ばれる関連ユーティリティもあります。 

また、現在利用可能な全てのcronパッケージが{{Package|sys-process/cronbase}}に依存していることは強調すべきです。技術的には、どのcronパッケージもこのパッケージに依存していません。しかし、このパッケージは大部分のユーザに有益でcronに似た機能を提供します。 

cronを動作させる前に、適切なcron実装が選択されていなければなりません。このガイドでは、Gentoo Linuxで利用可能なcron実装を説明します。

== どのcronが適しているか? ==

=== vixie-cron ===

vixie-cronは、SysV cronベースで全ての機能を実装したcronです。ユーザ毎にcrontabを持ち、その中で環境変数を指定することが可能です。その他のcronと異なり、vixie-cronはSELinuxとPAMをサポートしています。サポートするアーキテクチャはdcronよりは少ないですが、fcronよりは多いです。 

{{Package|sys-process/vixie-cron}} の特徴 

* SELinuxのサポート
* PAMのサポート ({{Path|/etc/security/limits.conf}})
* crontabで環境変数を設定可 (PATH、SHELL、HOME等)
* ユーザ独自のcrontabを持つことが可能。{{Path|cron.allow}}と{{Path|cron.deny}}によるアクセス制御。 

=== cronie ===
cronie ({{Package|sys-process/cronie}})はvixie-cron のフォークで、[https://fedorahosted.org/cronie/wiki Fedora] で開発されました。このためcronieはオリジナルのvixie-cronと同じ特徴を持ちます。さらに、cronieは anacronの機能も実装しています。この機能を利用するには<code>anacron</code>USEフラグを有効にする必要があります。

=== dcron (Dillonのcron) ===

dcronはシンプル、エレガント、かつセキュアな実装を目指しています。 crontabでの環境変数の設定はできません。すべてのcronジョブを{{Path|/bin/sh}}から実行します。vixie-cronと同じように、それぞれのユーザがそれぞれのcrontabを持つことができます。 

{{Package|sys-process/dcron}} の特徴 

* 高速、単純、不要な仕様がない。
* <tt>crontab</tt> へのアクセスを、例えばcronグループに所属するユーザだけに制限することができる。つまり、外部機能に依存しない。

=== fcron ===

fcronはvixie-cronとanacronの置き換えを意図しています。連続稼働しないシステムで動作できるよう設計されていて、いくつかの拡張機能を持っています。それは「ジョブがスタートするための条件設定」、「ジョブのシリアライゼーション制御」、「ジョブにnice値を付与する機能」、「システム起動時に動作するジョブのスケジュール」です。さらに詳細な情報については[http://fcron.free.fr/ fcron's home page]を参照してください。 

{{Package|sys-process/fcron}}の特徴 

* 連続稼働しないシステムで動作するように設計されています。つまり、システム停止中のため動作できなかったジョブを再起動後に実行できます。
* 環境変数やその他多くのオプションをcrontabで設定できます。
* 多くの新機能と共に、拡張されたcrontab記述をサポートします。
* 各ユーザーは{{Path|cron.allow}}と{{Path|cron.deny}}でアクセス制御可能なcrontabを持つことができます。


=== bcron ===

bronはセキュアなオペレーションを念頭に置いて設計された新しいcronシステムです。これを実現するため、cronシステムはいくつかのプログラムに分割され、それぞれが別のタスクに対して責任を持つことになりました。また、それらタスク間のコミュニケーションは厳格に制御されました。ユーザインターフェースは、よく似たシステム（例 vixie-cron）の単純な置き換えですが、内部の実装は大きく異なっています。より詳細な情報についてはbcronのホームページ[http://untroubled.org/bcron http://untroubled.org/bcron]を参照してください。 

{{Package|sys-process/bcron}}の特徴 

* vixie-cronの単純置き換え
* マルチプロセス設計
* 地域毎の夏時間サポート

=== anacron ===

anacronはcronデーモンそのものではなく、cronデーモンと組み合わせて動作します。anacronは指定された間隔でコマンドを実行し、システムが連続的に稼働することを前提とせず、シャットダウンのために実行されなかったジョブをリブート後に改めて実行します。通常、anacronは毎日動作するcronデーモンに依存しています。

== cronを使う ==

=== インストール ===

目的にあった適切なcronを選択し、emergeしてください。

{{Emerge|dcron}}

選択されたcronデーモンがシステムのinitプロセスに追加されたことを確認してください。追加されていない場合、cronデーモンはジョブを開始しません。{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

オプションとして、cronデーモンのヘルパーとしてanacronをインストールすることは良い選択です。ただしfcronがインストールされていないことが条件です。 

{{Emerge|anacron}}

anacronをインストールした場合は、anacronをシステムのinitプロセスに確実に加えてください。
{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== システムcrontab ===

cronパッケージのインストール時のメッセージで<tt>crontab /etc/crontab</tt>を実行するよう促されるでしょう。 この{{Path|/etc/crontab}}ファイルは''システムcrontab''と呼ばれています。cronは{{Path|/etc/cron.{daily,hourly,weekly,monthly}}}に記載されたスクリプトを実行するために、システムcrontabと{{Package|sys-process/cronbase}}を使用します。ここで、vixie-cronとcronieだけが{{Path|/etc/crontab}}に記述するだけで自動的にジョブを実行することに留意してください。一方、dcronとfcronは{{Path|/etc/crontab}}を変更するたびに<tt>crontab /etc/crontab</tt>を実行する必要があります。

さらに、システムcrontabで予約されたジョブは、<tt>crontab -l</tt>で示されるcronジョブのリストにおそらく現れないことを注記しておきます。 

もちろんシステムcrontabをまったく使用しない選択をすることも可能です。dcronもしくはfcronの場合、<tt>crontab /etc/crontab</tt>を実行しては'''いけません'''。vixie-cron、cronie、bcronの場合は{{Path|/etc/crontab}}の全ての行をコメントアウトして下さい。 

sedコマンドでファイルの全ての行をすばやく簡単にコメントアウトできます。{{Path|etc/crontab}}に対して次のコマンドを実行してください。
{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== 信頼できるユーザーにcronへのアクセス権を与える ===

root以外でcronデーモンにアクセスする場合は、このセクションが参考になるでしょう。そうでない場合は次のセクション[[#Scheduling_cron-jobs|Scheduling cron-jobs]]に進んで下さい。 

{{Note/ja|別のユーザーにcrontabへのアクセスを許可しても、そのユーザのcronジョブをroot権限で実行することはできません。root crontabの編集権限をユーザに与えるために、<tt>sudo</tt> ({{Package|app-admin/sudo}})を一読ください。詳細については[[Sudo/ja|Gentoo Sudo(ers) Guide]]を参照してください}}

選択したcronパッケージに関わらず、あるユーザーにcrontabへのアクセスを許可する場合、そのユーザはcronグループに所属しなければなりません。例として、次のコマンドはユーザ"wepy"をcronグループに追加します。 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/ja|ユーザーをcronグループに追加した際は、そのユーザは一旦ログアウト後、再度ログインする必要があります。}}

'''dcron'''の場合、上記の手順だけでユーザーはcrontabにアクセスできるようになります。よってdcronユーザは次のセクション[[#Scheduling_cron-jobs|Scheduling cron-jobs]]に進んでください。その他のユーザーはこのまま本セクションを読み進めてください。 

'''fcron'''の場合は{{Path|/etc/fcron/fcron.deny}}と{{Path|/etc/fcron/fcron.allow}}を編集します。最もシステムを安全に保つ方法は、最初に{{Path|/etc/fcron/fcron.deny}}で全てのユーザーを拒否して、次に明らかに許可したいユーザーのみ{{Path|/etc/fcron/fcron.allow}}で許可することです。 

{{Important/ja|もし、{{Path|/etc/fcron/fcron.allow}}も{{Path|/etc/fcron/fcron.deny}}も存在しない場合、cronグループに所属する全てのユーザーがcrontabの使用を許可されます。fcronのデフォルトは{{Path|fcron.allow}}に'''allows all users'''を記述した状態であり、cronグループに所属しているユーザーはfcrontabにアクセスできます。}}

{{CodeBox|title=fcron.denyで全てのユーザーを拒否|1=
all
}}

もし、あるユーザー（ここで再度''wepy''を例にとります）が独自のcronジョブをスケジュールしたい場合、次を{{Path|/etc/fcron/fcron.allow}}に追加してください。 

{{CodeBox|title=fcron.allowでユーザーwepyを許可|1=
wepy
}}

'''vixie-cron'''か'''cronie'''の場合は、単に{{Path|/etc/cron.allow}}を編集します。 

{{Important/ja|もし{{Path|/etc/cron.allow}}しか存在しない場合、同ファイルに記載されているcronグループのユーザーのみがアクセス可能です。逆にもし空の{{Path|/etc/cron.deny}}のみが存在する場合、''すべての''cronグループユーザがアクセス可能になります。そのため、{{Path|/etc/cron.allow}}が存在しない場合は、絶対に{{Path|/etc/cron.deny}}を空にしてはいけません。}}

例として、ユーザー"wepy"にアクセス権を与える場合、以下のように{{Path|/etc/cron.allow}}に追加してください。 

{{CodeBox|title=/etc/cron.allowでユーザwepyを許可|1=
wepy
}}

=== cronジョブのスケジューリング ===

crontabの編集方法はcronパッケージ毎に異なります。しかしそれらすべては同じ基本コマンド群をサポートしています。このコマンド群を用いて、crontabを編集したり、消去したり、crontab中のジョブをリストアップしたりといったことを実行します。次のリストはそれぞれのパッケージ毎にどのようにコマンドを実行するかを示しています。 

{| class="wikitable" style="text-align: left;" 
|- 
! cronパッケージ
! crontab編集
! crontab消去
! crontab新規作成
! cronジョブの表示
|- 
| dcron
| <tt>crontab -e</tt>
| <tt>crontab -d ''[user]'' </tt>
| <tt>crontab ''file'' </tt>
| <tt>crontab -l</tt>
|- 
| fcron
| <tt>fcrontab -e</tt>
| <tt>fcrontab -r ''[user]'' </tt>
| <tt>fcrontab ''file'' </tt>
| <tt>fcrontab -l</tt>
|- 
| vixie-cron, cronie & bcron
| <tt>crontab -e</tt>
| <tt>crontab -r ''-u [user]'' </tt>
| <tt>crontab ''file'' </tt>
| <tt>crontab -l</tt>
|-
|}

{{Note/ja|引数無しで消去コマンドを使用すると、現在のユーザのcrontabを削除します。}}

{{Note/ja|fcronの場合、fcrontabはcrontabのシンボリックリンクです。}}

これらのコマンドを実施する前に、crontabそのものを理解することがまず必要です。crontab中のそれぞれの行は、次の順序で５つのフィードを持ちます。分（0～59）、時間（0～23）、日（1～31）、月（1～12）、曜日（0～7、月曜日が1で日曜日が0もしくは7）。ここで曜日と月は3文字の略称で表すこともできます。例えばmon、tue、jan、feb等です。それぞれのフィールドは範囲で表すこともできます。例えば1-5やmon-friといった記述です。カンマで分離された記述（例：1,2,3やmon,tue,wed）や刻み幅を使った範囲指定（例：1-6/2は1と3と5を示します）も可能です。 

少し混乱するかもしれませんが、いくつかの記述例を見ればそれほど複雑でないことがわかるでしょう。

{{CodeBox|title=例|1=
# /bin/false を年中にわたり毎分に実行
*     *     *     *     *        /bin/false
  
# /bin/false を 月・火・水曜と毎月4日の、1時35分に実行
35    1     4     *     mon-wed  /bin/false
  
# /bin/true を3月2日の22:25に実行
25    22    2     3     *        /bin/true
  
# /bin/false を月・水・金曜の2時0分に実行
0     2     *     *     1-5/2    /bin/false
}}

{{Note/ja|日と曜日を組み合わせて記述する場合、もし日と曜日のどちらかを*にした場合、*でない方の記述が優先されます。逆に、日と曜日の両方を*にした場合、それは毎日実行されることを意味します。}}

何がカバーされているかをテストするために、少ないcronジョブを与えて何が起こるかを確認しましょう。最初に次のファイル{{Path|crons.cron}}を作成します。 

{{FileBox|filename=crons.cron|title=crons.cronファイルを作成する|1=
#Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
}}

このcrontabファイルを上の表の"crontab新規作成"のコマンドを使って登録しましょう。 

{{RootCmd|crontab crons.cron}}

{{Note/ja|echoコマンドの出力はリダイレクトしない限り見ることができません。}}

スケジュールされたcronジョブを検証するため、上の表の"cronジョブの表示 "に記載されているコマンドを使用します。 

{{RootCmd|crontab -l}}

{{Path|crons.cron}}とよく似たリストが得られるはずです。表示されない場合は、おそらく適切でないコマンドをcrontabに与えたのでしょう。 

このcrontabは2ヶ月毎に、毎日、毎時間、毎分"I really like cron"を出力するはずです。明らかにユーザはcronが気に入ったときにそれをするのでしょう。このcrontabは、1月と2月の毎日16:30に"I like cron a little"を出力します。また1月1日の3:10に"I don't really like cron"を出力します。 

もしanacronを使っている場合は、このままガイドを読み続けてください。もし使っていない場合は、次のセクション[[#Editing_crontabs|Editing crontabs]]に進んでください。 

anacronユーザは{{Path|/etc/anacrontab}}を編集します。このファイルは4つのフィードを持っています。それぞれ「何日毎に実行するか」、「anacron実行の何分後にジョブを実行するか」、「ジョブの名前」、「ジョブの実行コマンド」となります。　 

例えば"I like anacron"を、5日毎に、かつanacronがスタートしてから10分後に出力したい場合、次を入力してください。 

{{FileBox|filename=/etc/anacrontab|1=
5 10 wasting-time /bin/echo "I like anacron"
}}

anacronは、anacrontabファイルに記載のすべてのジョブを完了後、exitします。これらのジョブが毎日実行されているかどうかを確認するために、cronデーモンが使用されます。次のセクションの最後に、これがどのように扱われるかを記載します。

=== crontabの編集 ===

現実的に、cronが毎分毎に、どれぐらいcronが好きか逐一報告されることを希望するユーザーはいないでしょう。次のステップとして、上記の表の消去コマンドに相当するものを使用して、これまで使用したサンプルのcrontabを消去しましょう。消去した後はリストコマンドを使用して、cronジョブがすでに動作していないことを確認しましょう。 

{{RootCmd|crontab -d
|crontab -l}}

<tt>crontab -l</tt>でcronジョブは出力されないはずです。もしcronジョブが残っている場合、crontabの消去が失敗しています。その場合はシステムのcronパッケージに合致した消去コマンドを使用してるかどうか確認してください。 

これでクリーンな状態になりました。何か役に立つものを'''root''' crontabに追加しましょう。多くの場合、mlocateを正しく動作させるために週単位で<tt>updatedb</tt>を動かすでしょう。システムのcrontabに追加する場合、以下のように{{Path|crons.cron}}を変更します。 

{{CodeBox|title=実際のcrontab|1=
22 2 * * 1    /usr/bin/updatedb
}}

この例では、cronは毎週月曜日の午前2:22にupdatedbを起動します。適切な新規作成コマンドを上の表から選択、実行してください。実行後、もう一度リストをチェックしましょう。 

{{RootCmd|crontab crons.cron
|crontab -l}}

これでようやくPortageツリーを最新の状態に保つために<tt>emerge --sync</tt>を日々スケジュールすべきと主張できます。これは{{Path|crons.cron}}を編集し、上の例で示したように<tt>crontab crons.cron</tt>を実行する、''もしくは''上の表で示される適切な編集コマンドでスケジュールできます。この方法で、{{Path|crons.cron}}等の外部ファイルに依存せずに、ユーザーのcrontabを今の場所で編集することができます。 

{{RootCmd|crontab -e}}

このコマンドはユーザーのcrontabをエディターで開きます。例えば、<tt>emerge --sync</tt>を毎日午前6:30に実行したい場合、crontabを以下のようにしてください。 

{{CodeBox|title=実際のcrontab|1=
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (anacronを使う場合、以下を加えてください)
30 7 * * *    /usr/sbin/anacron -s
}}

ジョブがスケジュールされたことを今一度確認するため、前述の例のようにcronジョブのリストを確認してください。もし期待しているものが全て表示された場合、システムはロックンロールの準備完了です。

== cronbaseを使う ==

最初に述べたように、すべてのcronパッケージは{{Package|sys-process/cronbase}}に依存しています。このcronbaseパッケージは{{Path|/etc/cron.{hourly,daily,weekly,monthly}}}と、{{Path|run-crons}}と呼ばれるスクリプトを生成します。デフォルトの{{Path|/etc/crontab}}は以下のようになっていることに注意してください。 

{{CodeBox|title=デフォルトのシステムcrontab|1=
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
}}

詳細に立ち入るのはやめて、これらのコマンドは毎時、毎日、毎週、毎月スクリプトを効果的に実行するとしましょう。cronジョブをスケジューリングするためのこの方法にはいくつかの重要なメリットがあります。 

* これらのジョブがスケジュールされているときにコンピューターがオフになっても、ジョブは実行されます。
* パッケージのメンテナーにとって、明確に定義された場所にスクリプトを設置することは容易です。
* 管理者はcronジョブとcrontabがどこに保存されているか、正確に知ることが可能です。これにより、これらシステム部品のバックアップおよびリストアが簡単になります。

{{Note/ja|vixie-cron、cronie、bronは自動的に{{Path|/etc/crontab}}を読み込みます。一方、dcronとfcronは読み込みません。この点については{{Path|/etc/crontab}}セクションを熟読してください。}}

== anacronを使う ==

先に記述したとおり、anacronは（ほとんどのデスクトップインストールがそうであるように）連続稼働しないシステムで使用されます。anacronのデフォルトの設定ファイルは{{Path|/etc/anacrontab}}であり、通常は以下のようになります。

{{FileBox|filename=/etc/anacrontab|1=
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# フォーマット: 間隔 遅延 ジョブ識別 コマンド
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
}}

この設定ファイルと、他の一般的なcrontabとの違いは、anacronではジョブをスケジュールするにあたり、ランとランの間の時間以外に、固定した日時を指定しないことです。anacronを起動したとき、anacronは{{Path|/var/spool/anacron}}の内容をチェックして、最後のランから期限が切れたエントリーがないかどうか計算します。もしこのようなエントリが存在した場合、そのコマンドは再度起動されます。

最後に、システムにインストールされた他のcronとオーバーラップするエントリはコメントアウトしなければなりません。例えば以下のvixie-cronのcrontabはその例です。

{{FileBox|filename=/etc/crontab|1=
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
}}

これをしない場合、日、週、月の部分は、cronデーモンとanacronによって異なる時間に実行されます。これにより二重にジョブが実行されます。

== 最後に ==

cronパッケージはそれぞれ異なり、機能的にも大きな幅を持っていることを覚えておいてください。使用しているcronデーモンにあわせて、crontab、fcrontab、anacrontab等のmanページをよく理解しましょう。 

Good luck! 

=== トラブルシューティング ===

cronが正しく動作しない場合、以下のチェックリストが役に立つかもしれません。 

==== cronは起動していますか? ====

cronが起動しているかどうかを検証するため、cronがプロセスリストに存在しているかどうかを確認してください。

{{RootCmd|<nowiki>ps ax | grep cron</nowiki>}}

==== cronは動作していますか? ====

次を試してみてください。

{{CodeBox|title=cronが動作しているかどうかを確認するためのcrontab|1=
* * * * * /bin/echo "foobar" >> /file_you_own
}}

上記を実施後、{{Path|/file_you_own}}が定期的に更新されているか確認してください。

==== そのコマンドは動作していますか? ====

上記と同様に、標準エラー出力もリダイレクトしてみましょう。

{{CodeBox|title=アプリケーションの動作を検証するためのcrontab|1=
* * * * * /bin/echo "foobar" >> /file_you_own 2>&1
}}

==== cronはジョブを起動していますか? ====

cronのログを確認してください。通常、エラーは{{Path|/var/log/cron.log}}もしくは{{Path|/var/log/messages}}に記録されます。

==== {{Path|dead.letter}}はありますか？ ====

通常、cronは何か問題が発生した際にメールを送付します。メールが届いていないか、もしくは{{Path|~/dead.letter}}が生成されていないか確認してください。

== cronの代替 ==

いくつかのホスティング会社はcronへのアクセスを許可していません。ただし、有償、無償を問わず、多くのcron代替をみつけられるでしょう。

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
