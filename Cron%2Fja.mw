<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

このガイドでは、Gentoo Linuxにおけるcronデーモンのセットアップと利用方法を説明しています。

== cronの基礎 ==

=== cronとは何か ===

cronは<tt>crontab</tt>コマンドからの入力に基づいてスケジュールされたタスクを起動するためのデーモンです。このタスクは１分毎に起床し、ユーザのcrontabに実行すべきcronジョブがあるかどうかチェックします。 

{{Note/ja|<tt>crontab</tt>はcronジョブのリストの名前であると同時に、リストを編集するためのコマンドの名前であることに注意してください。}}

=== デファクトのcron ===

Portageにはいくつかのcron実装があります。これらは全てよく似たインタフェースを持っています。つまり<tt>crontab</tt>もしくはそれに類似したコマンドを使用します。また、連続動作しないシステムのcronと協調して動作することを意図したanacronと呼ばれる関連ユーティリティもあります。 

また、現在利用可能な全てのcronパッケージが{{Package|sys-process/cronbase}}に依存していることは協調すべきです。どのcronパッケージも技術的にはこのパッケージには依存していません。しかし、このパッケージは大部分のユーザに有益なcronに似た機能を提供します。 

cronを動作させる前に、適切なcron実装が選択されていなければなりません。このガイドでは、Gentoo Linuxで利用可能なcron実装を説明します。

== どのcronが適しているか? ==

=== vixie-cron ===

vixie-cronは、SysV cronベースで全ての機能を実装したcronです。ユーザ毎にcrontabを持ち、その中で環境変数を指定することが可能です。その他のcronと異なり、vixie-cronはSELinuxとPAMをサポートします。サポートするアーキテクチャはdcronよりは少ないですが、fcronよりは多いです。 

{{Package|sys-process/vixie-cron}} の特徴 

* SELinuxのサポート
* PAMのサポート ({{Path|/etc/security/limits.conf}})
* crontabで環境変数を設定可 (PATH、SHELL、HOME等)
* ユーザ独自のcrontabを持つことが可能。{{Path|cron.allow}}と{{Path|cron.deny}}によるアクセス制御。 

=== cronie ===
cronie ({{Package|sys-process/cronie}})はvixie-cron のフォークで、[https://fedorahosted.org/cronie/wiki Fedora] で開発されました。そのためオリジナルのvixie-cronと同様の特徴を持ちます。さらに、cronie は anacron 機能も実装しています。この機能を利用するには<code>anacron</code>USEフラグを有効にする必要があります。

=== dcron (Dillonのcron) ===

dcronは単純でエレガントでセキュアな実装を目指しています。 crontabでの環境変数の設定はできません。すべてのcronジョブを{{Path|/bin/sh}}から実行します。vixie-cronと同じように、それぞれのユーザがそれぞれのcrontabを設定可能です。 

{{Package|sys-process/dcron}} の特徴 

* 速い、単純、不要な仕様がない。
* <tt>crontab</tt> へのアクセスを、例えば cron グループに所属するユーザだけに制限することができる。つまり、外部機能に依存しない。

=== fcron ===

fcronはvixie-cronとanacronの置き換えを意図しています。連続動作しないシステムで動作できるよう設計されていて、いくつかの外部機能を持っています。それは「ジョブがスタートするための条件設定」、「ジョブのシリアライゼーションの制御」、「ジョブにnice値を付与する機能」、「システム起動時に動作するジョブのスケジュール」です。さらに詳細な情報については[http://fcron.free.fr/ fcron's home page]を参照してください。 

{{Package|sys-process/fcron}}の特徴 

* 連続動作しないシステムで動作するようデザインされています。つまり、システム停止中に動作できなかったジョブは、再起動後に実行可能です。
* 環境変数やその他多くのオプションをcrontabで設定できます。
* 多くの新機能と共に拡張されたcrontab記述をサポートします。
* 各ユーザーはそれぞれ、{{Path|cron.allow}}と{{Path|cron.deny}}でアクセス制御可能なcrontabを持つことができます。


=== bcron ===

bronはセキュアなオペレーションを念頭に置いて設計された新しいcronシステムです。これを実現するため、cronシステムはいくつかのプログラムに分割され、分割されたタスクそれぞれが役割をもちました。また、それらプログラムおよびタスク間のコミュニケーションは厳格に制御されました。ユーザインターフェースは、よく似たシステム（例 vixie-cron）の単純な置き換えですが、内部の実装は大きく異なっています。より詳細な情報についてはbcronのホームページ[http://untroubled.org/bcron http://untroubled.org/bcron]を参照ください。 

{{Package|sys-process/bcron}}の特徴 

* vixie-cronの単純置き換え
* マルチプロセス設計
* 地域毎の夏時間サポート

=== anacron ===

anacronはcronデーモンそのものではなく、cronデーモンと組み合わせて動作するものです。anacronは指定された間隔でコマンドを実行し、システムが連続的に稼働することを前提とせず、シャットダウンの間に実行されるべきだったジョブを改めて実行します。通常、anacronはそれぞれの日に動作するcronデーモンに依存しています。

== cronを使う ==

=== インストール ===

目的にあった適切なcronを選択し、emergeしてください。

{{Emerge|dcron}}

選択されたcronデーモンがシステムのinitプロセスに追加されたことを確認してください。これを実行しないとcronデーモンはジョブを開始しません。{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

オプションとして、fcronがインストールしていなければ、cronデーモンのヘルパーとしてanacronをインストールすることは良い選択です。 

{{Emerge|anacron}}

再度、anacronをシステムのinitプロセスに確実に加えてください。
{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== システムcrontab ===

これらcronパッケージをインストールした後のメッセージにおいて、ユーザーは<tt>crontab /etc/crontab</tt>を実行するよう促されるでしょう。 この{{Path|/etc/crontab}}ファイルが''システムcrontab''です。cronのインストールは{{Path|/etc/cron.{daily,hourly,weekly,monthly}}}に記載されたスクリプトを実行するために、システムcrontabを{{Package|sys-process/cronbase}}と共に使用します。ここでvixie-cronとcronieだけが{{Path|/etc/crontab}}に記述するだけで自動的にジョブを実行することに留意してください。dcronとfcronのユーザーは、{{Path|/etc/crontab}}を変更するたびに<tt>crontab /etc/crontab</tt>を実行する必要があります。

さらにシステムcrontabで予約されたジョブは、<tt>crontab -l</tt>で示されるcronジョブのリストにおそらく現れないことを記載しておきます。 

もちろん、ユーザはシステムcrontabをまったく使用しない選択をすることも可能です。システムcrontabを使用しない場合、かつdcronかfcronを使用している場合は、<tt>crontab /etc/crontab</tt>を実行しては'''いけません'''。vixie-cron、cronie、bcronを使っている場合は{{Path|/etc/crontab}}の全ての行をコメントアウトして下さい。 

このコメントアウトを最も簡単に実施する方法は、以下のsedコマンドをファイルの全ての行に適用することです。次のコマンドで{{Path|etc/crontab}}の全ての行をコメントアウトして下さい。
{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== 信頼できるユーザーにcronへのアクセス権を与える ===

root以外でcronデーモンにアクセスしたいユーザーはこのセクションを参考にしてください。そうでない場合は次のセクション[[#Scheduling_cron-jobs|Scheduling cron-jobs]]に進んで下さい。 

{{Note/ja|別のユーザーにcrontabへのアクセスを許可するということは、そのユーザのcronジョブをroot権限で実行することとは異なります。root crontabの編集権限をユーザに与えるために、<tt>sudo</tt> ({{Package|app-admin/sudo}})を一読ください。詳細については[[Sudo/ja|Gentoo Sudo(ers) Guide]]を参照してください}}

選択したcronパッケージに関わらず、あるユーザーにcrontabへのアクセスを許可する場合、そのユーザはcronグループに所属しなければなりません。例としてユーザ"wepy"をグループに追加するコマンドは以下となります。 

{{RootCmd|gpasswd -a wepy cron}}

{{Note/ja|あるユーザーをcronグループに追加する時、そのユーザは一旦ログアウト後、再度ログインする必要があります。}}

'''dcron'''を使用する場合、上記の手順だけでユーザーはcrontabにアクセスできるようになります。dcronユーザは次のセクション[[#Scheduling_cron-jobs|Scheduling cron-jobs]]に進んでください。その他のユーザーはこのまま本ガイドを読み進めてください。 

'''fcron'''の場合は{{Path|/etc/fcron/fcron.deny}}と{{Path|/etc/fcron/fcron.allow}}を編集します。最もシステムを安全に保つ方法は、最初に{{Path|/etc/fcron/fcron.deny}}で全てのユーザーを拒否して、次に明らかに許可したいユーザーのみ{{Path|/etc/fcron/fcron.allow}}で許可することです。 

{{Important/ja|もし、{{Path|/etc/fcron/fcron.allow}}も{{Path|/etc/fcron/fcron.deny}}も存在しない場合、cronグループに所属する全てのユーザーがcrontabの使用を許可されます。fcronのデフォルトは{{Path|fcron.allow}}に'''allows all users'''を記述した状態であり、cronグループに所属しているユーザーはfcrontabにアクセス可能です。}}

{{CodeBox|title=fcron.denyで全てのユーザーを拒否|1=
all
}}

もし、あるユーザー（ここで再度''wepy''を例に使います）が独自のcronジョブをスケジュールしなければならない場合、次を{{Path|/etc/fcron/fcron.allow}}に追加してください。 

{{CodeBox|title=fcron.allowでユーザーwepyを許可|1=
wepy
}}

'''vixie-cron'''か'''cronie'''が選択された場合は、単に{{Path|/etc/cron.allow}}を編集します。 

{{Important/ja|もし{{Path|/etc/cron.allow}}しか存在しない場合、同ファイルに記載されているcronグループのユーザーのみがアクセス可能です。逆にもし空の{{Path|/etc/cron.deny}}のみが存在する場合、''すべての''cronグループユーザがアクセス可能になります。そのため、{{Path|/etc/cron.allow}}が存在しない場合は、絶対に{{Path|/etc/cron.deny}}を空にしてはいけません。}}

例として、ユーザー"wepy"にアクセス権を与える場合、以下のように{{Path|/etc/cron.allow}}に追加してください。 

{{CodeBox|title=/etc/cron.allowでユーザwepyを許可|1=
wepy
}}

=== cronジョブのスケジューリング ===

crontabの編集方法はcronパッケージ毎に異なります。しかしそれらすべては同じ基本コマンド群をサポートしています。このコマンド群を用いて、crontabを編集したり、消去したり、crontab中のジョブをリストアップしたりといったことを実行します。次のリストはそれぞれのパッケージ毎にどのようにコマンドを実行するかを示しています。 

{| class="wikitable" style="text-align: left;" 
|- 
! cronパッケージ
! crontab編集
! crontab消去
! crontab新規作成
! cronジョブの表示
|- 
| dcron
| <tt>crontab -e</tt>
| <tt>crontab -d ''[user]'' </tt>
| <tt>crontab ''file'' </tt>
| <tt>crontab -l</tt>
|- 
| fcron
| <tt>fcrontab -e</tt>
| <tt>fcrontab -r ''[user]'' </tt>
| <tt>fcrontab ''file'' </tt>
| <tt>fcrontab -l</tt>
|- 
| vixie-cron, cronie & bcron
| <tt>crontab -e</tt>
| <tt>crontab -r ''-u [user]'' </tt>
| <tt>crontab ''file'' </tt>
| <tt>crontab -l</tt>
|-
|}

{{Note/ja|引数無しで消去コマンドを使用すると、現在のユーザのcrontabを削除します。}}

{{Note/ja|fcronの場合、fcrontabはcrontabのシンボリックリンクです。}}

これらのコマンドを実施する前に、crontabそのものを理解することがまず必要です。crontab中のそれぞれの行は、次の順序で５つのフィードを持ちます。分（0～59）、時間（0～23）、日（1～31）、月（1～12）、曜日（0～7、月曜日が1で日曜日が0もしくは7）。ここで曜日と月は3文字の略称で表すこともできます。例えばmon、tue、jan、feb等です。それぞれのフィールドは範囲で表すこともできます。例えば1-5やmon-friといった記述です。カンマで分離された記述（例：1,2,3やmon,tue,wed）や刻み幅を使った範囲指定（例：1-6/2は1と3と5を示します）も可能です。 

少し混乱するかもしれませんが、いくつかの記述例を見ればそれほど複雑でないことがわかるでしょう。

{{CodeBox|title=例|1=
# /bin/false を年中にわたり毎分に実行
*     *     *     *     *        /bin/false
  
# /bin/false を 月・火・水曜と毎月4日の、1時35分に実行
35    1     4     *     mon-wed  /bin/false
  
# /bin/true を3月2日の22:25に実行
25    22    2     3     *        /bin/true
  
# /bin/false を月・水・金曜の2時0分に実行
0     2     *     *     1-5/2    /bin/false
}}

{{Note/ja|日と曜日を組み合わせて記述する場合、もし日と曜日のどちらかを*にした場合、*でない方の記述が優先されます。逆に、日と曜日の両方を*にした場合、それは毎日実行されることを意味します。}}

何がカバーされているかをテストするために、少ないcronジョブを与えて何が起こるかを確認しましょう。最初に次のファイル{{Path|crons.cron}}を作成します。 

{{FileBox|filename=crons.cron|title=crons.cronファイルを作成する|1=
#Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
}}

このcrontabファイルを上の表の"crontab新規作成"のコマンドを使って登録しましょう。 

{{RootCmd|crontab crons.cron}}

{{Note/ja|echoコマンドの出力はリダイレクトしない限り見ることができません。}}

スケジュールされたcronジョブを検証するため、上の表の"cronジョブの表示 "に記載されているコマンドを使用します。 

{{RootCmd|crontab -l}}

A list resembling {{Path|crons.cron}} should be displayed; if not maybe the wrong command was issued to input the crontab. 

This crontab should echo "I really like cron" every minute of every hour of every day every other month. Obviously a user would only do that if they really liked cron. The crontab will also echo "I like cron a little" at 16:30 every day in January and February. It will also echo "I don't really like cron" at 3:10 on the January 1st. 

If using anacron keep reading this section. Otherwise, proceed to the next section on [[#Editing_crontabs|Editing crontabs]]. 

Anacron users will want to edit {{Path|/etc/anacrontab}}. This file has four fields: the number of days between each run, the delay in minutes after which it runs, the name of the job, and the command to run. 

For example, to have it run <tt>echo "I like anacron"</tt> every 5 days, 10 minutes after anacron is started, enter the following: 

{{FileBox|filename=/etc/anacrontab|1=
5 10 wasting-time /bin/echo "I like anacron"
}}

Anacron exits after all of the jobs in anacrontab have finished. To check to see if these jobs should be performed every day, a cron daemon will be used. The instructions at the end of the next section explain how this should be handled.

=== crontabの編集 ===

Being realistic, no user would want their system telling them how much they like cron every minute. As a step forward, remove the previous example crontab using the corresponding ''remove command'' from the table above. Use the corresponding list command to view the cron-jobs afterward to make sure it worked. 

{{RootCmd|crontab -d
|crontab -l}}

No cron-jobs should be displayed in the output from <tt>crontab -l</tt>. If cron jobs are listed, then the remove command failed to remove the crontab; verify the correct ''remove command'' for the system's cron package. 

Now that we have a clean state, let's put something useful into the '''root''' crontab. Most people will want to run <tt>updatedb</tt> on a weekly basis to make sure that mlocate works properly. To add that to the system's crontab, first edit {{Path|crons.cron}} again so that it looks like the following: 

{{CodeBox|title=A real crontab|1=
22 2 * * 1    /usr/bin/updatedb
}}

That would make cron run updatedb at 2:22 A.M. on Monday morning every week. Now input the crontab with the proper ''new command'' from the table above, and check the list again. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Now let's say <tt>emerge --sync</tt> should be ran on a daily schedule in order to keep the Portage tree up to date. This could be done by first editing {{Path|crons.cron}} and then using <tt>crontab crons.cron</tt> as was done in the example above, ''or'' by using the proper ''edit command'' from the table above. This provides a way to edit the user's crontab in situ, without depending on external files like {{Path|crons.cron}}. 

{{RootCmd|crontab -e}}

The above command should open the user's crontab with an editor. For example, if <tt>emerge --sync</tt> is to be run every day at 6:30 A.M., make the crontab look something like this: 

{{CodeBox|title=A real crontab|1=
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
}}

Again, check the cron-jobs list as done in the previous examples to make sure the jobs are scheduled. If they are all there, then the system is ready to rock and roll.

== cronbaseを使う ==

As mentioned earlier, all of the available cron packages depend on {{Package|sys-process/cronbase}}. The cronbase package creates {{Path|/etc/cron.{hourly,daily,weekly,monthly}}}, and a script called {{Path|run-crons}}. Notice the default {{Path|/etc/crontab}} file contains something like this: 

{{CodeBox|title=Default system crontab|1=
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
}}

To avoid going into much detail, assume these commands will effectively run hourly, daily, weekly and monthly scripts. This method of scheduling cron-jobs has some important advantages: 

* They will run even if the computer was off when they were scheduled to run;
* It is easy for package maintainers to place scripts in those well defined places;
* The administrators know exactly where the cron-jobs and crontab are stored, making it easy to backup and restore these parts of their systems.

{{Note|Again, it is useful to point out that vixie-cron, cronie and bcron automatically read {{Path|/etc/crontab}}, while dcron and fcron do not. Please read the [[#System_crontab|System crontab]] section to learn more about this.}}

== anacronを使う ==

As mentioned earlier, anacron is used on systems not meant to be run continuously (like most of the desktop installations). Its default configuration file, {{Path|/etc/anacrontab}}, is usually similar to the following:

{{FileBox|filename=/etc/anacrontab|1=
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
}}

The main difference between this and other common crontabs is that with anacron there is no fixed date/hour for the job scheduling, but only the period between every run. When anacron is started, it will check the contents of a set of files in {{Path|/var/spool/anacron}} and calculate if the corresponding entry in the configuration file has expired since the last run. If it has, then the command is invoked again.

As a final note, it is important to comment out any overlapping entry in any other cron installed in the system, such as in the following vixie-cron crontab example:

{{FileBox|filename=/etc/crontab|1=
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
}}

Without doing this, the daily, weekly and monthly parts will be executed - at different times - by both the cron daemon and anacron, leading to possible double job executions.

== 最後に ==

Remember, each cron package is different and the range of features varies greatly. Be sure to consult the man pages for crontab, fcrontab or anacrontab, depending on which cron daemon has been used. 

Good luck! 

=== トラブルシューティング ===

When having problems getting cron to work properly, this quick checklist might be helpful. 

==== Is cron running? ====

To verify that cron is running, see if it shows up in the process list:

{{RootCmd|<nowiki>ps ax | grep cron</nowiki>}}

==== Is cron working? ====

Try the following:

{{CodeBox|title=crontab to see if cron is running|1=
* * * * * /bin/echo "foobar" >> /file_you_own
}}

Then check if {{Path|/file_you_own}} is modified periodically.

==== Is the command working? ====

Same as before, but perhaps redirect the standard error output as well:

{{CodeBox|title=crontab to verify application runs|1=
* * * * * /bin/echo "foobar" >> /file_you_own 2>&1
}}

==== cronはジョブを起動していますか? ====

cronのログを確認してください。通常、エラーは{{Path|/var/log/cron.log}}もしくは{{Path|/var/log/messages}}に記録されます。

==== {{Path|dead.letter}}はありますか？ ====

通常、cronは何か問題が発生した際にメールを送付します。メールが届いていないか、もしくは{{Path|~/dead.letter}}が生成されていないか確認してください。

== cronの代替 ==

いくつかのホスティング会社はcronへのアクセスを許可していません。ただし、有償、無償を問わず、多くのcron代替をみつけられるでしょう。

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
