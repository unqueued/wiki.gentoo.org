<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

このガイドでは、cron のセットアップと利用方法を説明しています。

== cron の基礎 ==

=== cron とは何か ===

Cron is a daemon that runs scheduled tasks based on input from the command <tt>crontab</tt>. It accomplishes this task by waking up every minute and checking to see if there are any cron-jobs to run in any of the user crontabs. 

{{Note|Notice that <tt>crontab</tt> is both the name of a list of cron-jobs as well as the name of the command to edit that list.}}

=== The de facto cron ===

There are a few cron implementations for you to choose from in Portage. All of them offer a similar interface, namely the use of <tt>crontab</tt> or a similar command. There is also a related utility called Anacron which is meant to work with cron on systems that are not continuously running. 

It is also worth noting that all of the available cron packages depend on {{Package|sys-process/cronbase}}. This package is not technically depended on by any of the cron packages, but it does provide cron-like functionality that most users can appreciate. 

Before we get started working with cron, you will have to choose which implementation you want to use. For your convenience, below we have collected information about each one.

== あなたにピッタリの cron は? ==

=== vixie-cron ===

Vixie-cron is a full featured cron implementation based on SysV cron. Each user has his own crontab and is allowed to specify environment variables within that crontab. Unlike the other cron variants, it also offers support for SELinux and PAM. It supports fewer architectures than Dcron, but more than Fcron. 

{{Package|sys-process/vixie-cron}} の特徴: 

* Support for SELinux;
* Support for PAM ({{Path|/etc/security/limits.conf}});
* Setting of environment variables in crontabs (PATH, SHELL, HOME, etc.);
* Each user can have a personal crontab; access is controlled by {{Path|cron.allow}} and {{Path|cron.deny}} 

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) vixie-cron のフォークで、[https://fedorahosted.org/cronie/wiki Fedora] の手により作られています。そのため特徴も、オリジナルの vixie-cron と同様ですが、 cronie は anacron 機能も実装しています。なお、この機能を利用するには ''anacron'' USEフラグを有効にする必要があります。

=== dcron (Dillon's Cron) ===

dcron は、単純でエレガントでセキュアな実装を目指しています。 crontab での環境変数の仕様を利用せずに、すべての cron ジョブを {{Path|/bin/sh}} から実行します。vixie-cron と似ていますが、それぞれのユーザがそれぞれの crontab を設定可能です。 

{{Package|sys-process/dcron}} の特徴: 

* 速い、単純、そして、不要な仕様がない
* <code>crontab</code> へのアクセスを、例えば cron グループに所属するユーザだけに制限することができる。しかも、外部機能に依存せずに。

=== fcron ===

Fcron aims at replacing vixie-cron and anacron. It is designed to work on systems that are not continuously running and it is packed with extra features. It has job startup constraints, job serialization controls, the ability to assign nice values to jobs and the ability to schedule jobs to run at system startup. See [http://fcron.free.fr/ fcron's home page] for more information. 

Features of {{Package|sys-process/fcron}}: 

* Designed to work on systems that are not continuously running, i.e. it can run a job after restarting if it was missed;
* Setting of environment variables and many other options in crontabs;
* Enhanced crontab syntax with support for many new features;
* Each user can have a personal crontab, access is controlled by {{Path|cron.allow}} and {{Path|cron.deny}}


=== bcron ===

Bcron is a new cron system designed with secure operations in mind. To do this, the system is divided into several separate programs, each responsible for a separate task, with strictly controlled communications between them. The user interface is a drop-in replacement for similar systems (such as vixie-cron), but the internals differ greatly. For more information, see the bcron homepage at [http://untroubled.org/bcron http://untroubled.org/bcron]. 

Features of {{Package|sys-process/bcron}}: 

* Drop-in replacement for vixie-cron;
* Multiprocess design;
* Native daylight savings time support.

=== anacron ===

Anacron is not a cron daemon, it is something that usually works in conjunction with one. It executes commands at intervals specified in days and it does not assume that the system is running continuously; it will run jobs that were missed while the system was down. Anacron usually relies on a cron daemon to run it each day.

== Using cron ==

=== インストール ===

Select the cron implementation you like the most, and then emerge it. 

{{Emerge|dcron}}

{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

Optionally, if Fcron has '''not''' been installed, installing Anacron as a helper to the cron daemon might be a wise choice. 

{{Emerge|anacron}}

{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== System crontab ===

The post install messages from some of these cron packages instruct the user to run <kbd>crontab /etc/crontab</kbd>. The {{Path|/etc/crontab}} file is the ''system crontab''. A cron installation can use it in conjunction with {{Package|sys-process/cronbase}} to run the scripts in {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}. Note that only vixie-cron and cronie schedule jobs in {{Path|/etc/crontab}} automatically. Dcron and fcron users will need to run <kbd>crontab /etc/crontab</kbd> every time they make changes to the {{Path|/etc/crontab}} file.

Please note that jobs scheduled in the system crontab might not show up in the list of cron-jobs displayed by running <kbd>crontab -l</kbd>. 

Of course, users can choose not to use any system crontab at all. If dcron or fcron has been chosen, do '''not''' run <kbd>crontab /etc/crontab</kbd>. If vixie-cron, cronie or bcron has been chosen comment all lines in {{Path|/etc/crontab}}. 

{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Giving trusted users access to cron ===

For users other than root to have access to the cron daemon, read this section, otherwise proceed to the next section: [[#Scheduling_cron-jobs|Scheduling cron-jobs]]. 

{{Note|Giving another user access to crontab does not let him run cron-jobs as root. For a user to be able to edit the root crontab, look into using <tt>sudo</tt> ({{Package|app-admin/sudo}}). Please read the [[Sudo|Gentoo Sudo(ers) Guide]] for more details.}}

No matter which cron package has been chosen, to allow a user to use crontab he will first have to be in the cron group. As an example, to add the user ''wepy'' to the cron group run: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note|When adding a user to the cron group, make sure that the user logs out and logs back in for the group change to take effect.}}

When using '''dcron''', the above step is all that is needed to give a user access to crontab. Dcron users may proceed to the next section [[#Scheduling_cron-jobs|Scheduling cron-jobs]], all others need to keep reading. 

When using '''fcron''', edit the {{Path|/etc/fcron/fcron.deny}} and {{Path|/etc/fcron/fcron.allow}} files. The most secure way to run a system is to first deny all users in {{Path|/etc/fcron/fcron.deny}}, and then explicitly allow users in {{Path|/etc/fcron/fcron.allow}}. 

{{Important|If neither {{Path|/etc/fcron/fcron.allow}} nor {{Path|/etc/fcron/fcron.deny}} exist then all users in the cron group will be allowed to use crontab. fcron comes with a default {{Path|fcron.allow}} which '''allows all users''' in the cron group access to fcrontab.}}

{{CodeBox|title=Permissions in fcron.deny|1=
all
}}

If a user (''wepy'' again for this example) should be able to schedule his own cron-jobs, then add him to {{Path|/etc/fcron/fcron.allow}} as follows: 

{{CodeBox|title=Permissions in fcron.allow|1=
wepy
}}

If '''vixie-cron''' or '''cronie''' has been chosen, then simply edit the {{Path|/etc/cron.allow}} file. 

{{Important|It is important to note that if only {{Path|/etc/cron.allow}} exists, then only the cron group users listed there will have access. Otherwise, if only an empty {{Path|/etc/cron.deny}} exists, then ''all'' cron group users will be allowed. Do not leave an empty {{Path|/etc/cron.deny}} if no {{Path|/etc/cron.allow}} file exists!}}

For example, to allow access to the user ''wepy'', add him to {{Path|/etc/cron.allow}} as follows: 

{{CodeBox|title=Permissions in /etc/cron.allow|1=
wepy
}}

=== Scheduling cron-jobs ===

The process of editing crontabs is different for each package, but they all support the same basic set of commands: adding and replacing crontabs, editing crontabs, deleting crontabs, and listing cron-jobs in crontabs. The following list shows you how to run those commands for each package. 

{| class="wikitable" style="text-align: left;" 
|- 
! Version
! Edit crontab
! Remove crontab
! New crontab
! List cron-jobs
|- 
| dcron
| <kbd>crontab -e</kbd>
| <kbd>crontab -d ''[user]'' </kbd>
| <kbd>crontab ''file'' </kbd>
| <kbd>crontab -l</kbd>
|- 
| fcron
| <kbd>fcrontab -e</kbd>
| <kbd>fcrontab -r ''[user]'' </kbd>
| <kbd>fcrontab ''file'' </kbd>
| <kbd>fcrontab -l</kbd>
|- 
| vixie-cron, cronie & bcron
| <kbd>crontab -e</kbd>
| <kbd>crontab -r ''-u [user]'' </kbd>
| <kbd>crontab ''file'' </kbd>
| <kbd>crontab -l</kbd>
|-
|}

{{Note|When using the remove command, if no argument is supplied, it deletes the current user's crontab.}}

{{Note|Fcron also has a symlink from crontab to fcrontab.}}

Before any of these commands can be used, first understanding of the crontab itself is needed. Each line in a crontab specifies five time fields in the following order: the minutes (0-59), hours (0-23), days of the month (1-31), months (1-12), and days of the week (0-7, Monday is day 1, Sunday is day 0 and day 7). The days of the week and months can be specified by three-letter abbreviations like mon, tue, jan, feb, etc. Each field can also specify a range of values (e.g. 1-5 or mon-fri), a comma separated list of values (e.g. 1,2,3 or mon,tue,wed) or a range of values with a ''step'' (e.g. 1-6/2 as 1,3,5). 

That sounds a little confusing, but with a few examples it is easy to see it is not as complicated as it sounds.

{{Code|例|<pre>
# /bin/false を年中にわたり毎分に実行
*     *     *     *     *        /bin/false
  
# /bin/false を 月・火・水曜と毎月4日の、1時35分に実行
35    1     4     *     mon-wed  /bin/false
  
# /bin/true を3月2日の22:25に実行
25    22    2     3     *        /bin/true
  
# /bin/false を月・水・金曜の2時0分に実行
0     2     *     *     1-5/2    /bin/false
</pre>
}}

{{Note|Notice how to specify specific days of the week and days of the month before they are combined. If * is used for only one of them, the other takes precedence, while * for both just means every day.}}

To test what was just covered go through the steps of actually inputting a few cron-jobs. First, create a file called {{Path|crons.cron}} and make it look like the this: 

{{RootCmd|nano crons.cron|output=<pre>
# Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
</pre>
}}

Now add that crontab to the system with the "new command" from the table above. 

{{RootCmd|crontab crons.cron}}

{{Note|The output from the echo commands will not be seen unless redirection is used.}}

To verify the scheduled cron-jobs, use the proper ''list command'' from the table above. 

{{RootCmd|crontab -l}}

A list resembling {{Path|crons.cron}} should be displayed; if not maybe the wrong command was issued to input the crontab. 

This crontab should echo "I really like cron" every minute of every hour of every day every other month. Obviously a user would only do that if they really liked cron. The crontab will also echo "I like cron a little" at 16:30 every day in January and February. It will also echo "I don't really like cron" at 3:10 on the January 1st. 

If using anacron keep reading this section. Otherwise, proceed to the next section on [[#Editing_crontabs|Editing crontabs]]. 

Anacron users will want to edit {{Path|/etc/anacrontab}}. This file has four fields: the number of days between each run, the delay in minutes after which it runs, the name of the job, and the command to run. 

For example, to have it run <tt>echo "I like anacron"</tt> every 5 days, 10 minutes after anacron is started, enter the following: 

{{Code|/etc/anacrontab|<pre>
5 10 wasting-time /bin/echo "I like anacron"
</pre>
}}

Anacron exits after all of the jobs in anacrontab have finished. To check to see if these jobs should be performed every day, a cron daemon will be used. The instructions at the end of the next section explain how this should be handled.

=== Editing crontabs ===

Being realistic, no user would want their system telling them how much they like cron every minute. As a step forward, remove the previous example crontab using the corresponding ''remove command'' from the table above. Use the corresponding list command to view the cron-jobs afterward to make sure it worked. 

{{RootCmd|crontab -d
|crontab -l}}

No cron-jobs should be displayed in the output from <kbd>crontab -l</kbd>. If cron jobs are listed, then the remove command failed to remove the crontab; verify the correct ''remove command'' for the system's cron package. 

Now that we have a clean state, let's put something useful into the '''root''' crontab. Most people will want to run <tt>updatedb</tt> on a weekly basis to make sure that mlocate works properly. To add that to the system's crontab, first edit {{Path|crons.cron}} again so that it looks like the following: 

{{CodeBox|title=A real crontab|1=
22 2 * * 1    /usr/bin/updatedb
}}

That would make cron run updatedb at 2:22 A.M. on Monday morning every week. Now input the crontab with the proper ''new command'' from the table above, and check the list again. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Now let's say <tt>emerge --sync</tt> should be ran on a daily schedule in order to keep the Portage tree up to date. This could be done by first editing {{Path|crons.cron}} and then using <tt>crontab crons.cron</tt> as was done in the example above, ''or'' by using the proper ''edit command'' from the table above. This gives you a way to edit your user's crontab in situ, without depending on external files like {{Path|crons.cron}}. 

{{RootCmd|crontab -e}}

That should open your user's crontab with an editor. We want to have <tt>emerge --sync</tt> run every day at 6:30 A.M., so make it look something like this: 

{{CodeBox|title=A real crontab|1=
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if you're using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
}}

Again, check the cron-jobs list as done in the previous examples to make sure the jobs are scheduled. If they are all there, then the system is ready to rock and roll.

== Using cronbase ==

As mentioned earlier, all of the available cron packages depend on {{Package|sys-process/cronbase}}. The cronbase package creates {{Path|/etc/cron.{hourly,daily,weekly,monthly}}}, and a script called {{Path|run-crons}}. Notice the default {{Path|/etc/crontab}} file contains something like this: 

{{CodeBox|title=Default system crontab|1=
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
}}

To avoid going into much detail, assume these commands will effectively run hourly, daily, weekly and monthly scripts. This method of scheduling cron-jobs has some important advantages: 

* They will run even if the computer was off when they were scheduled to run;
* It is easy for package maintainers to place scripts in those well defined places;
* The administrators know exactly where the cron-jobs and crontab are stored, making it easy to backup and restore these parts of their systems.

{{Note|Again, it is useful to point out that vixie-cron, cronie and bcron automatically read {{Path|/etc/crontab}}, while dcron and fcron do not. Please read the [[#System_crontab|System crontab]] section to learn more about this.}}

== Using anacron ==

As mentioned earlier, anacron is used on systems not meant to be run continuously (like most of the desktop installations). Its default configuration file, {{Path|/etc/anacrontab}}, is usually similar to the following:

{{File|/etc/anacrontab||<pre>
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
</pre>}}

The main difference between this and other common crontabs is that with anacron there is no fixed date/hour for the job scheduling, but only the period between every run. When anacron is started, it will check the contents of a set of files in {{Path|/var/spool/anacron}} and calculate if the corresponding entry in the configuration file has expired since the last run. If it has, then the command is invoked again.

As a final note, it is important to comment out any overlapping entry in any other cron installed in the system, such as in the following vixie-cron crontab example:

{{File|/etc/crontab||<pre>
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
</pre>}}

Without doing this, the daily, weekly and monthly parts will be executed - at different times - by both the cron daemon and anacron, leading to possible double job executions.

== Final Notes ==

Remember, each cron package is different and the range of features varies greatly. Be sure to consult the man pages for crontab, fcrontab or anacrontab, depending on which cron daemon has been used. 

Good luck! 

=== トラブルシューティング ===

When having problems getting cron to work properly, this quick checklist might be helpful. 

==== Is cron running? ====

Run <kbd>ps ax | grep cron</kbd> to make sure it shows up in the process list.

==== Is cron working? ====

Try the following:

{{CodeBox|title=crontab to see if cron is running|1=
* * * * * /bin/echo "foobar" >> /file_you_own
}}

Then check if {{Path|/file_you_own}} is modified periodically.

==== Is your command working? ====

Same as before, but perhaps redirect the standard error output as well:

{{CodeBox|title=crontab to verify application runs|1=
* * * * * /bin/echo "foobar" >> /file_you_own 2>&1
}}

==== Can cron run your job? ====

Check the cron log, usually {{Path|/var/log/cron.log}} or {{Path|/var/log/messages}} for errors.

==== Are there any {{Path|dead.letter}}s? ====

cron usually sends mail when there is a problem; check for mail and look for the creation of a {{Path|~/dead.letter}} file.

== Cronの代替 ==

cronへのアクセスが禁止されているホストもありますが、無料か有料を問わず、多くのcron代替をみつけられるでしょう。

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
