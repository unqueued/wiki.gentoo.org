<languages />

{{Metadata|abstract=这篇文章描述了升级到新版本Linux内核的步骤。}}

这篇文章[[Article descriptionːː描述了升级到新版本内核的步骤。]]

== 安装 ==

当安装新的内核源代码后，升级您的内核或许是一个很棒的主意。当您运行以下命令时，新的内核源代码有时会随着系统的更新而安装。

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse @world}}

当然，也可以使用下面的命令直接安装内核（用任何正在使用的内核版本替换“gentoo-sources”）:

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse sys-kernel/gentoo-sources}}

安装新的内核源代码并不会给使用者提供一个新的内核。从新内核源代码编译和安装一个新的内核，然后重启系统从而真正的运行新的内核是有必要的。

从新的源代码制作一个新的内核基本上和安装系统时的制作内核是一样的。不同之处在于可以基于旧内核的配置文件来为新内核制作一个配置文件。使用旧的配置文件可以让使用者不从头到尾再做一次内核选项（像 {{c|make menuconfig}} 一样）。

<div class="mw-translate-fuzzy">
内核的配置文件 {{Path|.config}} 保存在内核源代码的目录下面。一个新的内核或许会有旧内核没有的特性或选项，新内核也有可能没有现存于旧内核的特性或选项。内核配置文件指定了是否开启内核的功能和选项，要么嵌入内核，要么以模块形式构建从而允许在内核运行时被按需加载。因此，新内核的配置文件可能有新的但是旧内核的配置文件没有的选项，同时新内核的配置文件可能没有旧内核的配置文件现有的选项。
</div>

要处理配置文件的更改，旧内核的配置文件需要转换为可用于新内核的配置。本文展示了如何通过转换旧内核的配置文件来制作一个新内核。

== 为当前运行内核的配置文件制作一个备份 ==

备份内核配置是明智的，这样以前的配置就不会丢失了。毕竟许多用户花了大量的时间来配置出系统的最佳配置，同时失去内核配置是绝对不会想要的。

制作一个当前内核配置的备份很容易：

{{RootCmd|cp /usr/src/linux/.config ~/kernel-config-`uname -r`}}

在内核源代码的链接被配置正确的情况下，这复制了正在使用的内核的配置文件到了根用户的家目录下，重命名了配置文件变成 {{Path|kernel-config-}} 加上现在正在运行的内核的版本号。

== 配置 ==

=== 设置一个链接到新的内核源代码 ===

符号链接 {{Path|/usr/src/linux}} 应该始终指向正在运行的内核的源代码的目录。下面三种方法中任意一个可以实现这一点：

# 安装内核源代码时使用 <code>USE="symlink"</code>
# 用 eselect 设置链接
# 手动更新符号链接

==== 安装使用 USE Flag 的内核源代码 ====

这将会让 {{Path|/usr/src/linux}} 指向新安装的内核源代码。

如果有必要的话，也可以选择下面两种方法之一来进行稍后修改。

==== 使用 eselect 设置链接 ====

用 {{c|eselect}} 设置链接：

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
[1] linux-3.14.14-gentoo * 
[2] linux-3.16.3-gentoo
</pre>}}

这将输出可用的内核源代码。星号表示已经选择的来源。

要更改内核源，例如选第二个选项：

{{RootCmd|eselect kernel set 2}}

==== 手动更新符号链接 ====

手动设置符号链接：

{{RootCmd|ln -sf /usr/src/linux-3.16.3-gentoo /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

==== 移步到新目录 ====

现在已修改符号链接，将工作目录更改为新的内核文件夹。

{{RootCmd|cd /usr/src/linux}}

{{Note/zh-cn|即使在修改符号链接时工作目录已经是{{Path|/usr/src/linux}}，此命令仍然是必需的。在实际遵循新的符号链接之前，控制台仍将位于''旧''内核的目录中。}}

=== 复制以前的内核配置文件 ===

旧内核的配置需要被复制到新的内核中。除了在先前步骤中保存到{{Path|/root}}的备份副本之外，还可以在多个位置找到旧配置：

<div class="mw-translate-fuzzy">
* 如果在当前内核中选项''Enable access to .config through /proc/config.gz''是激活的，配置文件在[[procfs]] 文件系统：
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}
</div>

* 从老内核中提取。仅当老内核使用CONFIG_IKCONFIG被编译时可用:
:{{RootCmd|/usr/src/linux/scripts/extract-ikconfig /path/to/old/kernel >/usr/src/linux/.config}}

* 从{{Path|/boot}} 目录里获取,如果你把配置文件安装到了这里:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* 当前运行的内核的源代码目录：
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

* In the {{Path|/etc/kernels/}} directory, if <code>SAVE_CONFIG="yes"</code> is set in {{Path|/etc/genkernel.conf}} and {{c|[[genkernel]]}} was previously used:
: {{RootCmd|cp /etc/kernels/kernel-config-x86_64-3.14.14-gentoo /usr/src/linux/.config}}

<div class="mw-translate-fuzzy">
== 配置新的内核 ==
</div>

要使用适用于新内核的旧内核的配置，需要转换旧内核的配置。转换可以通过运行  {{c|make silentoldconfig}} 或者 {{c|make olddefconfig}}。只用其中一个，不要都使用。

<div class="mw-translate-fuzzy">
=== make silentoldconfig ===
</div>

{{Important|{{c|make silentoldconfig}} is being removed as of linux version 4.19, it will be replaced by {{c|make syncconfig}}.}}

下面的配置是基于类似文本的配置 {{c|make config}} 。 对于新的配置，它提供选择。例如：

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

字符串“（NEW）”在该行结束时标记该选项是新的。左边的方括号中的字符串是可能的答案：“Y”是，“N”不是，“m”模块，或者“？”显示帮助。推荐(或者说是默认)答案是大写（“Y”）。帮助说明解释了选项或驱动程序。

可惜  {{c|make silentoldconfig}}  不会在每一个选项显示太多的信息，例如上下文，因此有时候做出正确的选择比较困难。这种情况下最好的办法就是记住选项的名字，之后通过 [[Kernel/Configuration#Configuration tools|graphical kernel configuration tools]] 重新修正。

<div class="mw-translate-fuzzy">
=== 制作旧的配置 (make olddefconfig)===
</div>

如果所有的新配置选项都应该被设置成推荐 (也就是default)值就用这条命令 {{c|make olddefconfig}}:

{{RootCmd|cd /usr/src/linux
|make menuconfig}}

<div class="mw-translate-fuzzy">
make help
</div>

使用 {{c|make help}} 查看其他可用的转换方法：

{{RootCmd|make help}}

== 编译 ==

<div class="mw-translate-fuzzy">
{{Important|当外部内核模块安装 (如 NVIDIA 或 ZFS)，在制作内核前可能需要运行 {{c|make modules_prepare}} ，它被描述在 [[Kernel/Upgrade#Reinstall external kernel modules|这里]] 。一些模块在内核构建之前不能被安装或准备好。}}
</div>

{{Important|别忘了重新配置 [[Bootloader|bootloader]] 去登记新内核的名称。如果使用了initramfs，请重新制作initramfs}}

这一步请参考 [[Kernel/Configuration#Build|manual configuration]]。

=== Automated build and installation ===

It is possible to automatically build and install the newly emerged kernel using Portage hooks. While other approaches are also possible, the following is based on genkernel and gentoo-sources package. It requires the following prerequisites:

# {{c|genkernel all}} is able to build and install the kernel to which the {{Path|/usr/src/linux}} symlink points into <code>$BOOTDIR</code> and the bootloader.
# The <code>symlink</code> use flag is set for the kernel ebuild.

If those are fulfilled, simply install a <code>post_pkg_postinst</code> Portage hook as shown below.

{{FileBox|title=Automated kernel build and installation portage hook|filename=/etc/portage/env/sys-kernel/gentoo-sources|lang=bash|1=post_pkg_postinst() {
	CURRENT_KV=$(uname -r)
	# Check to see if genkernel has been run previously for the running kernel and use that config
	if [[ -f "${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" ]] ; then
		genkernel --kernel-config="${EROOT}/etc/kernels/kernel-config-${CURRENT_KV}" all
	elif [[ -f "${EROOT}/usr/src/linux-${CURRENT_KV}/.config" ]] ; then # Use latest kernel config from current kernel
		genkernel --kernel-config="${EROOT}/usr/src/linux-${CURRENT_KV}/.config" all
	elif [[ -f /proc/config.gz ]] ; then # Use known running good kernel
		zcat /proc/config.gz >> "${EROOT}/tmp/genkernel.config"
		genkernel --kernel-config="${EROOT}/tmp/genkernel.config" all
		rm "${EROOT}/tmp/genkernel.config"
	else # No valid configs known
		genkernel all
	fi
}
}}

<div class="mw-translate-fuzzy">
== 重新安装外部内核模块 ==
</div>

{{Note|The modules_prepare step is not required if building an entire kernel as this function is done as part of the standard process.}}

任何外部的内核模块，像 [[:Category:Binary kernel modules|binary kernel modules]], 需要为新的内核重新编译。如果新内核还没有编译，需要首先为编译外部内核模块做准备：

{{RootCmd|make modules_prepare}}

包含内核模块的包可以使用<code>@module-rebuild</code>命令重新编译：

{{Emerge|@module-rebuild}}

<div class="mw-translate-fuzzy">
== 解决编译的问题 ==
</div>

当重新编译当前内核的时候遇到问题，这也许有助于净化内核源代码。确保首先备份了{{Path|.config}}文件，因为操作过程会删除它。确保备份文件不要以 {{Path|.bak}} 或者 {{Path|~}} 为后缀，因为 {{c|make distclean}} 同样会删除这些文件。

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

<div class="mw-translate-fuzzy">
== 移除旧的内核 ==
</div>

参考 [[Kernel/Removal/zh-cn|移除旧的内核]]。 

== See also ==

* {{See also|Genkernel}}

== 外部资源 ==

<div class="mw-translate-fuzzy">
* [http://kernelnewbies.org/LinuxChanges kernel changelog with some explanations of new features]
</div>

[[Category:Kernel]]
