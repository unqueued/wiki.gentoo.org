{{InfoBox stack
|{{InfoBox homepage|http://linux-nfs.org/|header=true}}
|{{InfoBox wikipedia|Network File System}}
|{{InfoBox gitweb|http://git.linux-nfs.org/|raw=true}}
}}

Network File System (NFS) is a file system protocol that allows client machines to connect to network attached file shares. The newest version is version 4.

== Installation ==

=== USE flags ===

{{USEflag|package=net-fs/nfs-utils|desc=Optional USE flags for {{Package|net-fs/nfs-utils}}:
|caps
|ipv6
|kerberos
|libmount+yes++Link mount.nfs with libmount
|nfsdcld
|nfsidmap+yes
|nfsv4+yes
|selinux
|nfsv41
|tcpd
|uuid+yes
}}

=== Software ===

Install {{Package|net-fs/nfs-utils}}:

{{Emerge|net-fs/nfs-utils}}

== Configuration ==
 
The NFSv4 server configuration is mostly like configuring the version 3, with one major change all NFS shares are exported from one virtual root directory.

The server has 2 NFS shares which are: 

* {{Path|/export/home}} - directory with user homes
* {{Path|/export/data}} - directory with example data

These 2 shares are mounted on the server system at following points in the tree:

{{Cmd|df -h {{!}} egrep 'File{{!}}home{{!}}data'|output=<pre>
Filesystem      Size  Used Avail Use% Mounted on
/dev/sdb1        20G  977M   19G   5% /home
/dev/sdc1       200G   91G  110G  46% /data
</pre>}}

The client uses now TCP protocol as default, to mount NFS shares. Previous NFS versions use UDP as the default protocol.

=== Kernel ===

NFS server support is not required for NFS clients, and NFS client support is not required for NFS servers. NFSv3 is only required for compatibility with legacy clients e.g. the BusyBox mount command does not support NFSv4.

{{KernelBox|
File systems --->
  [*] Dnotify support
  [*] Network File Systems --->
        <*>   NFS client support
        <*>     NFS client support for NFS version 3
        <*>     NFS client support for NFS version 4
        <*>   NFS server support
        [*]     NFS server support for NFS version 3
        [*]     NFS server support for NFS version 4
}}

=== Server ===

==== {{Path|/export}} ====

A virtual NFS root directory needs to be created:

{{RootCmd
|cd /
|mkdir export
}}

{{Note|It is possible to substitute the name and the location of the virtual root ({{Path|/export}} in this example) with any other directory name. For example {{Path|/nfsroot}} or {{Path|/home/NFSv4root}} could be used instead of {{Path|/export}}.}}

Create two sub-directories in the {{Path|/export}} directory for NFS shares. This can be done in one fell swoop from the command-line by using the <tt>&&</tt> operator:

{{RootCmd|cd /export && mkdir {home,data} }}

==== NFS shares ====

Mount the shares to their mount points:

{{RootCmd|mount --bind /home /export/home && mount --bind /data /export/data}}

Add following two lines to [[fstab]], so NFS shares will still be available after a system reboot:

{{FileBox|filename=/etc/fstab|1=
[...]
/home    /export/home   none    bind  0  0
/data    /export/data   none    bind  0  0
[...]
}}

==== {{Path|/etc/exports}} ====

NFS shares are defined in {{Path|/etc/exports}}. This file has the following structure:

<pre>
source1         target1(option1,option2)
source2         target2(option1,option3)
</pre>

*'''source''' : Is a directory of a particular NFS share e.g. {{Path|/export/home}} or the virtual root (for NFS version 4) e.g. {{Path|/export}}.
*'''target''' : Can be a single host e.g. <code>larrysPC</code>, or a network e.g. <code>192.168.0.0/28</code>, or a wildcard e.g. <code>*</code> which means that the share can be accessed from all networks, by all hosts on all interfaces.

For {{Path|/etc/exports}} options consult following table:

{| class="table"
|-
!Option
!Description
|- 
| ro || The directory is shared read-only and the client machine will not be able to write it. This is the '''default'''.
|-
| rw || The client machine will have read and write access to the directory.
|-
| no_root_squash || This option gives the root user on the client machine the same level of access to the files on the system as root user on the server. This can have serious security implications and should '''''not''''' be specified without good reason.
|-
| no_subtree_check || If only part of a volume is exported, a routine called subtree checking verifies that a file requested by the client is in the appropriate part of the volume. If the entire volume is exported, disabling this check will speed up transfers. 
|-
| sync || This is the '''default'''. It is possible to switch to <code>async</code>.
|-
| insecure || The NFS server will use unprivileged ports (those above 1024). This may be needed when mounting NFS shares from OS X or via the {{Path|nfs:/}} kioslave in KDE.
|-
| fsid=0 || The NFS server needs to uniquely identify each file system that it exports. With NFS version 4 there is a virtual root filesystem which is the root of all exported file systems. This root is identified with <code>fsid=0</code>.

|}

Specify the virtual root {{Path|/export}} as the first entry, then define specific shares, in this particular case the file will look like in the example below:

{{FileBox|filename=/etc/exports|1=
/export                 192.168.0.0/24(rw,fsid=0,no_subtree_check)
/export/home            192.168.0.0/24(rw,nohide,insecure,no_subtree_check)
/export/data            192.168.0.0/24(rw,nohide,insecure,no_subtree_check)
}}
{{Note|Substitute the target network used in this example (<code>192.168.0.0/24</code>) with your own network}}

==== {{Path|/etc/conf.d/nfs}} ====

To provide NFS version 4 access only, specify the supported NFS versions (<code>-V 4 -V 4.1</code>) and the NFS versions that are ''not'' supported (<code>-N 2 -N 3 -N 4.2</code>) in the {{Path|/etc/conf.d/nfs}} file.

{{FileBox|filename=/etc/conf.d/nfs|lang=bash|1=
[...]
# Number of servers to be started up by default
OPTS_RPC_NFSD="8 -N 2 -N 3 -V 4 -V 4.1 -N 4.2"
[...]
}}

{{Important|To provide NFS version 3 support consider of building a separate kernel module that can be loaded in place of the version 4 module.}}

==== Starting service daemon ====

Finally start the configured NFS daemon:

{{RootCmd|/etc/init.d/nfs start
|output=<pre>
 * Starting rpcbind ...                                                                            [ ok ]
 * Starting NFS statd ...                                                                          [ ok ]
 * Starting idmapd ...                                                                             [ ok ]
 * Use of the opts variable is deprecated and will be
 * removed in the future.
 * Please use extra_commands, extra_started_commands or extra_stopped_commands.
 * Exporting NFS directories ...                                                                   [ ok ]
 * Starting NFS mountd ...                                                                         [ ok ]
 * Starting NFS daemon ...                                                                         [ ok ]
 * Starting NFS smnotify ...                                                                       [ ok ]
</pre>}}

As shown many services are started in specific order, ''rpcbind'' is started as the first service. 
If there is a need to stop the NFS service, the easiest way to stop all NFS services at once is to stop the '''rpcbind''' service itself. 

It command will shutdown each service shown in the upper starting routine example: 

{{RootCmd|/etc/init.d/rpcbind stop}}

Add the <tt>nfs</tt> script to a runlevel to be able to use it after a reboot:

{{RootCmd|rc-update add nfs default
|output=<pre>
* service nfs added to runlevel default
</pre>}}

=== Client ===

==== Mounting exported directories ====

The NFS client needs to be started before exported directories can be mounted.

{{RootCmd|/etc/init.d/nfsclient start
|output=<pre>
 * Starting rpcbind                                                       [ ok ]
 * Starting NFS statd                                                     [ ok ]
 * Starting NFS sm-notify                                                 [ ok ]</pre>}}

Mount an exported directory:

{{RootCmd|mount -t nfs4 server:/home /home}}

If the NFS server or client supports NFSv3 only, the full path to the exported directory (e.g. {{Path|/export/home}}) must be specified when mounting:

{{RootCmd|mount -t nfs server:/export/home /home}}

{{Note|Be sure to substitute the name ''server'' with the IP address or DNS name of the NFS server, and ''home'' with the name of the remote share and local mount point, respectively.}}

==== Mounting at boot time ====

Add NFS shares to the {{Path|/etc/fstab}} file.

===== Option 1 =====

Mount the NFS virtual root including all exported shares at once.

{{Important|The {{Path|/export}} directory, server exported virtual root is recognized as a root of a file system on the client side, which is simply a "/" in the example below. This is a different approach compared to NFSv3.}}

{{FileBox|filename=/etc/fstab|1=
[...]
server:/         /mnt     nfs     rw,_netdev,auto   0  0
}}


===== Option 2 =====

Define each NFS share individually, to have the ability to mount them to different local mount point:

{{FileBox|filename=/etc/fstab|1=
[...]
server:/home      /home     nfs     rw,_netdev,auto   0  0
server:/data      /data     nfs     rw,_netdev,auto   0  0
}}

Finally start the netmount service:

{{RootCmd|/etc/init.d/netmount start
|output=<pre>
 * Mounting network filesystems ...                                       [ ok ]
</pre>}}

Add nfsclient and netmount services to the default runlevel:

{{RootCmd|rc-update add nfsclient default|rc-update add netmount default}}

At this point the NFS shares should be mounted on the client. It can be verified with following command:

{{Cmd|netstat -tn {{!}} egrep '2049{{!}}Active{{!}}Pro'
|output=<pre>
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 192.168.0.10:997        192.168.0.1:2049        ESTABLISHED
</pre>
}}

Or run:

{{Cmd|df -h}}

== Troubleshooting ==
=== Shutdown process hangs when trying to unmount NFS shares ===
<!-- If you make any changes to this section, please consider changing the appropriate section in [[CIFS]] as well. -->

If the system shutdown hangs at 
<div class="cmd-box"><div><code> <span style="color:#54ff54">*</span> Unmounting network filesystems ...</code></div></div>
then users must make sure the NFS shares are unmounted properly before [[udev]] tries to stop. One way to work around this is to create [[local.d]] scripts to unmount the NFS filesystems:

{{RootCmd
|echo "umount -a -t nfs4 -f" > /etc/local.d/nfs4.stop
|chmod a+x /etc/local.d/nfs4.stop
|echo "umount -a -t nfs -f" > /etc/local.d/nfs.stop
|chmod a+x /etc/local.d/nfs.stop}}

=== Additional troubleshooting tricks and tips ===
Verifying NFS server is running and listening for connections:

{{RootCmd|netstat -tupan {{!}} egrep 'rpc{{!}}Active{{!}}Proto'
|output=<pre>
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:34950           0.0.0.0:*               LISTEN      1891/rpc.statd
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1875/rpcbind
udp        0      0 0.0.0.0:111             0.0.0.0:*                           1875/rpcbind
udp        0      0 0.0.0.0:57655           0.0.0.0:*                           1891/rpc.statd
udp        0      0 0.0.0.0:774             0.0.0.0:*                           1875/rpcbind
udp        0      0 0.0.0.0:795             0.0.0.0:*                           1891/rpc.statd
</pre>}}

Verifying which NFS specific daemons are running:

{{RootCmd|rpcinfo -p
|output=<pre>
   program vers proto   port  service
    100000    4   tcp    111  portmapper
    100000    3   tcp    111  portmapper
    100000    2   tcp    111  portmapper
    100000    4   udp    111  portmapper
    100000    3   udp    111  portmapper
    100000    2   udp    111  portmapper
    100024    1   udp  57655  status
    100024    1   tcp  34950  status
    100003    2   tcp   2049  nfs
    100003    3   tcp   2049  nfs
    100003    4   tcp   2049  nfs
    100003    2   udp   2049  nfs
    100003    3   udp   2049  nfs
    100003    4   udp   2049  nfs
    100021    1   udp  44208  nlockmgr
    100021    3   udp  44208  nlockmgr
    100021    4   udp  44208  nlockmgr
    100021    1   tcp  44043  nlockmgr
    100021    3   tcp  44043  nlockmgr
    100021    4   tcp  44043  nlockmgr
</pre>}}

Showing exported NFS shares on the server side:

{{RootCmd|exportfs -v
|output=<pre>
/export         192.168.0.0/24(rw,wdelay,root_squash,no_subtree_check,fsid=0)
/export/home    192.168.0.0/24(rw,wdelay,nohide,root_squash,no_subtree_check)
/export/data    192.168.0.0/24(rw,wdelay,nohide,root_squash,no_subtree_check)
</pre>}}

Verifying current open connections to the NFS server:

{{Cmd|netstat -tn {{!}} egrep '2049{{!}}Active{{!}}Proto'
|output=<pre>
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 192.168.0.1:2049       192.168.0.10:884        ESTABLISHED
</pre>}}

For more specific troubleshooting examples visit following links:

* http://linux-nfs.org/wiki/index.php/General_troubleshooting_recommendations
* http://nfs.sourceforge.net/nfs-howto/ar01s07.html

== External resources ==

* [http://www.ietf.org/rfc/rfc3530.txt RFC 3530]
* [https://help.ubuntu.com/community/NFSv4Howto Ubuntu Community Wiki NFSv4 article]
* [http://www.gentoo-wiki.info/HOWTO_NFSv4 Gentoo Community Wiki article article]

[[Category:Filesystems]]
[[Category:Daemons]]
