{{InfoBox stack
|{{InfoBox homepage|http://linux-nfs.org/|header=true}}
|{{InfoBox wikipedia|Network File System}}
|{{InfoBox gitweb|http://git.linux-nfs.org/|raw=true}}
}}

Network File System (NFS) is a file system protocol that allows client machines to connect to network attached file shares. The newest version is version 4.

== Installation ==

=== USE flags ===

{{USEflag|package=net-fs/nfs-utils|desc=Optional USE flags for {{Package|net-fs/nfs-utils}}:
|caps
|ipv6
|kerberos
|libmount+yes++Link mount.nfs with libmount
|nfsdcld
|nfsidmap+yes
|nfsv4+yes
|selinux
|nfsv41
|tcpd
|uuid+yes
}}

=== Software ===

Install {{Package|net-fs/nfs-utils}}:

{{Emerge|net-fs/nfs-utils}}

== Configuration ==
 
The NFSv4 server configuration is mostly like configuring the version 3, with one major change all NFS shares are exported from one virtual root directory.

The server has 2 NFS shares which are: 

* {{Path|/export/home}} - directory with user homes
* {{Path|/export/data}} - directory with example data

These 2 shares are mounted on the server system at following points in the tree:

{{Cmd|df -h {{!}} egrep 'File{{!}}home{{!}}data'|output=<pre>
Filesystem      Size  Used Avail Use% Mounted on
/dev/sdb1        20G  977M   19G   5% /home
/dev/sdc1       200G   91G  110G  46% /data
</pre>}}

The client uses now TCP protocol as default, to mount NFS shares. Previous NFS versions use UDP as the default protocol.

=== Kernel ===

NFS server support is not required for NFS clients, and NFS client support is not required for NFS servers. Dnotify support is only required for NFSv4. NFSv3 is only required for compatibility with legacy clients e.g. the BusyBox mount command does not support NFSv4.

{{KernelBox|
File systems --->
  [*] Dnotify support
  [*] Network File Systems --->
        <*>   NFS client support
        <*>     NFS client support for NFS version 3
        <*>     NFS client support for NFS version 4
        [*]   NFS client support for NFSv4.1
        <*>   NFS server support
        [*]     NFS server support for NFS version 3
        [*]     NFS server support for NFS version 4
        [*]       NFSv4.1 server support for Parallel NFS (pNFS)
}}

=== Server ===

==== Virtual root ====

The filesystems to be exported must be made available under a single directory. This directory is known as the virtual root directory, and it is required for NFSv4.
{{RootCmd|mkdir /export}}
{{Note|The {{Path|/export}} directory is used throughout this article as the virtual root directory, although any directory can be used e.g {{Path|/nfs}} or {{Path|/srv/nfs}}.}}

Create directories in the virtual root directory for the filesystems (e.g {{Path|/home}} and {{Path|/data}}) that are to be exported:
{{RootCmd
|mkdir /export/home
|mkdir /export/data
}}

The filesystems to be exported need to be made available under their respective directories in the virtual root directory. This is accomplished with the  <code>--bind</code> option of the {{c|mount}} command:
{{RootCmd
|mount --bind /home /export/home
|mount --bind /data /export/data
}}

To make the above mounts persistent, add the following to {{Path|/etc/[[fstab]]}}:
{{FileBox|filename=/etc/fstab|1=
/home    /export/home    none    bind    0    0
/data    /export/data    none    bind    0    0
}}

==== Exports ====

The filesystems to be made accessible for clients are specified in {{Path|/etc/exports}}. This file consists of the directories to be exported, the clients allowed to access those directories, and a list options for each client. Refer to <kbd>man exports</kbd> for more information about the NFS export configuration options.
{{FileBox|filename=/etc/exports|1=
/export         192.168.0.0/24(insecure,rw,sync,no_subtree_check,crossmnt,fsid=0)
/export/home    192.168.0.0/24(insecure,rw,sync,no_subtree_check)
/export/data    192.168.0.0/24(insecure,rw,sync,no_subtree_check)
}}
The above configuration grants access to the exported directories by IP network, in this case <code>192.168.0.0/24</code>. Client access can also be specified as a single host (IP address or fully qualified domain name), NIS netgroup, or with a single <code>*</code> character which grants all clients access.

The following table briefly describes the client options used in the configuration above.
{| class="table"
|-
!Option
!Description
|-
| <code>insecure</code> || The server will require that client requests originate on unprivileged ports (those above 1024). This option is required when mounting exported directories from OS X or by the {{Path|nfs:/}} kioslave in KDE. The default is to use privileged ports.
|-
| <code>rw</code> || The client will have read and write access to the exported directory. The default is to allow read-only access.
|-
| <code>sync</code> || The server must wait until filesystem changes are committed to storage before responding to further client requests. This is the default.
|-
| <code>no_subtree_check</code> || The server will not verify that a file requested by a client is in the appropriate filesystem and exported tree. This is the default.
|-
| <code>crossmnt</code> || The server will reveal filesystems that are mounted under the virtual root directory that would otherwise be hidden when a client mounts the virtual root directory.
|-
| <code>fsid=0</code> || This option is required to uniquely identify the virtual root directory.
|}

==== Daemon ====

The NFS daemon is configured via {{Path|/etc/conf.d/nfs}}.
{{FileBox|filename=/etc/conf.d/nfs|lang=bash|1=
OPTS_RPC_NFSD="8 -N 2 -V 3 -V 4 -V 4.1 -N 4.2"
}}
The option <code>8</code> is the number of NFS server threads to start. Since only one thread is started by default, the thread count should be increased for optimal performance. The options <code>-N 2</code> and <code>-N 4.2</code> disable NFS versions 2 and 4.2, while options <code>-V 3</code>, <code>-V 4</code> and <code>-V 4.1</code> enable NFS versions 3,4 and 4.1. Refer to <kbd>man nfsd</kbd> for more information about the NFS daemon configuration options.

==== Starting ====

To start the NFS server:
{{RootCmd|/etc/init.d/nfs start|output=<pre>
 * Starting rpcbind ...                                                                            [ ok ]
 * Starting NFS statd ...                                                                          [ ok ]
 * Starting idmapd ...                                                                             [ ok ]
 * Exporting NFS directories ...                                                                   [ ok ]
 * Starting NFS mountd ...                                                                         [ ok ]
 * Starting NFS daemon ...                                                                         [ ok ]
 * Starting NFS smnotify ...                                                                       [ ok ]
</pre>}}

The above output shows that many other services are also started along with the {{c|nfs}} service. To stop all services, stop the {{c|rpcbind}} service:
{{RootCmd|/etc/init.d/rpcbind stop}}

To start the NFS server at boot:
{{RootCmd|rc-update add nfs default}}

=== Client ===

==== Starting ====

Start the NFS client to mount exported directories:
{{RootCmd|/etc/init.d/nfsclient start|output=<pre>
 * Starting rpcbind                                                       [ ok ]
 * Starting NFS statd                                                     [ ok ]
 * Starting NFS sm-notify                                                 [ ok ]
</pre>}}

To start the NFS client at boot:
{{RootCmd|rc-update add nfsclient default}}

==== Mounting exports ====

Mount the exported directories:
{{RootCmd
|mount -t nfs 192.168.0.1:/home /home
|mount -t nfs 192.168.0.1:/data /data
}}

If the NFS server or client support NFSv3 only, the full path to the exported directory (e.g. {{Path|/export/home}}) needs to be specified when mounting:
{{RootCmd
|mount -t nfs 192.168.0.1:/export/home /home
|mount -t nfs 192.168.0.1:/export/data /data
}}

To make the above mounts persistent, add the following to /etc/fstab:
{{FileBox|filename=/etc/fstab|1=
192.168.0.1:/home    /home    nfs    rw,_netdev    0    0
192.168.0.1:/data    /data    nfs    rw,_netdev    0    0
}}

If the virtual root directory is mounted instead, all exported directories will be available.
{{RootCmd|mount -t nfs 192.168.0.1:/ /mnt}}

To make the above mount persistent, add the following to /etc/fstab:
{{FileBox|filename=/etc/fstab|1=
192.168.0.1:/        /mnt     nfs    rw,_netdev    0    0
}}

When using {{Path|/etc/fstab}} to mount the exported directories, add the {{c|netmount}} service to the default runlevel:
{{RootCmd|rc-update add netmount default}}

{{Note|The above uses <code>192.168.0.1</code> to represent the NFS server. Substitute that value with the IP address or hostname of the actual NFS server.}}

At this point the NFS shares should be mounted on the client. It can be verified with following command:
{{Cmd|netstat -tn {{!}} egrep '2049{{!}}Active{{!}}Pro'|output=<pre>
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 192.168.0.10:997        192.168.0.1:2049        ESTABLISHED
</pre>}}
Or run:
{{Cmd|df -h}}

== Troubleshooting ==
=== Shutdown process hangs when trying to unmount NFS shares ===
<!-- If you make any changes to this section, please consider changing the appropriate section in [[CIFS]] as well. -->

If the system shutdown hangs at 
<div class="cmd-box"><div><code> <span style="color:#54ff54">*</span> Unmounting network filesystems ...</code></div></div>
then users must make sure the NFS shares are unmounted properly before [[udev]] tries to stop. One way to work around this is to create [[local.d]] scripts to unmount the NFS filesystems:

{{RootCmd
|echo "umount -a -t nfs4 -f" > /etc/local.d/nfs4.stop
|chmod a+x /etc/local.d/nfs4.stop
|echo "umount -a -t nfs -f" > /etc/local.d/nfs.stop
|chmod a+x /etc/local.d/nfs.stop}}

=== Additional troubleshooting tricks and tips ===
Verifying NFS server is running and listening for connections:

{{RootCmd|netstat -tupan {{!}} egrep 'rpc{{!}}Active{{!}}Proto'
|output=<pre>
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:34950           0.0.0.0:*               LISTEN      1891/rpc.statd
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1875/rpcbind
udp        0      0 0.0.0.0:111             0.0.0.0:*                           1875/rpcbind
udp        0      0 0.0.0.0:57655           0.0.0.0:*                           1891/rpc.statd
udp        0      0 0.0.0.0:774             0.0.0.0:*                           1875/rpcbind
udp        0      0 0.0.0.0:795             0.0.0.0:*                           1891/rpc.statd
</pre>}}

Verifying which NFS specific daemons are running:

{{RootCmd|rpcinfo -p
|output=<pre>
   program vers proto   port  service
    100000    4   tcp    111  portmapper
    100000    3   tcp    111  portmapper
    100000    2   tcp    111  portmapper
    100000    4   udp    111  portmapper
    100000    3   udp    111  portmapper
    100000    2   udp    111  portmapper
    100024    1   udp  57655  status
    100024    1   tcp  34950  status
    100003    2   tcp   2049  nfs
    100003    3   tcp   2049  nfs
    100003    4   tcp   2049  nfs
    100003    2   udp   2049  nfs
    100003    3   udp   2049  nfs
    100003    4   udp   2049  nfs
    100021    1   udp  44208  nlockmgr
    100021    3   udp  44208  nlockmgr
    100021    4   udp  44208  nlockmgr
    100021    1   tcp  44043  nlockmgr
    100021    3   tcp  44043  nlockmgr
    100021    4   tcp  44043  nlockmgr
</pre>}}

Showing exported NFS shares on the server side:

{{RootCmd|exportfs -v
|output=<pre>
/export         192.168.0.0/24(rw,wdelay,root_squash,no_subtree_check,fsid=0)
/export/home    192.168.0.0/24(rw,wdelay,nohide,root_squash,no_subtree_check)
/export/data    192.168.0.0/24(rw,wdelay,nohide,root_squash,no_subtree_check)
</pre>}}

Verifying current open connections to the NFS server:

{{Cmd|netstat -tn {{!}} egrep '2049{{!}}Active{{!}}Proto'
|output=<pre>
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 192.168.0.1:2049       192.168.0.10:884        ESTABLISHED
</pre>}}

For more specific troubleshooting examples visit following links:

* http://linux-nfs.org/wiki/index.php/General_troubleshooting_recommendations
* http://nfs.sourceforge.net/nfs-howto/ar01s07.html

== External resources ==

* [http://www.ietf.org/rfc/rfc3530.txt RFC 3530]
* [https://help.ubuntu.com/community/NFSv4Howto Ubuntu Community Wiki NFSv4 article]
* [http://www.gentoo-wiki.info/HOWTO_NFSv4 Gentoo Community Wiki article article]

[[Category:Filesystems]]
[[Category:Daemons]]
