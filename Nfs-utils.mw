<languages />
<translate>
{{Confused|NTFS}}<!-- "NFS" redirects here, potentially confused with NTFS -->
{{lowercase title}}{{InfoBox stack
|{{InfoBox homepage|https://linux-nfs.org/|header=true}}
|{{InfoBox gitweb|https://git.linux-nfs.org/?p{{=}}steved/nfs-utils.git;a{{=}}summary|raw=true}}
|{{InfoBox wikipedia|Network_File_System}}
}}

Network File System (NFS) is [[Article description::a file system protocol that allows client machines to access network attached filesystems.]]

== Installation ==

=== Kernel ===

NFS server support is not required for NFS clients, and NFS client support is not required for NFS servers. Inotify support is only required for NFSv4. NFSv3 is only required for compatibility with legacy clients e.g. the BusyBox mount command does not support NFSv4.

{{KernelBox|title=Enabling NFS support|1=
File systems --->
  [*] Inotify support for userspace
  [*] Network File Systems --->
        <*>   NFS client support
        <*>     NFS client support for NFS version 3
        <*>     NFS client support for NFS version 4
        [*]   NFS client support for NFSv4.1
        <*>   NFS server support
        [*]     NFS server support for NFS version 3
        [*]     NFS server support for NFS version 4
        [*]       NFSv4.1 server support for Parallel NFS (pNFS)
}}

=== USE flags ===

{{USEflag|package=net-fs/nfs-utils}}

=== Emerge ===

Install {{Package|net-fs/nfs-utils}}:

{{Emerge|net-fs/nfs-utils}}

== Configuration ==

=== Server ===

The following table describes the filesystems that will be exported by the server:

{| class="table table-condensed table-striped"
|-
! Device
! Mount directory
! Description
|-
| {{Path|/dev/sdb1}}
| {{Path|/home}}
| Filesystem containing user home directories.
|-
| {{Path|/dev/sdc1}}
| {{Path|/data}}
| Filesystem containing user data.
|}

==== Virtual root ====

The filesystems to be exported can be made available under a single directory. This directory is known as the virtual root directory:

{{RootCmd|mkdir /export}}

{{Note|The {{Path|/export}} directory is used throughout this article as the virtual root directory, although any directory can be used e.g. {{Path|/nfs}} or {{Path|/srv/nfs}}}}

Create directories in the virtual root directory for the filesystems (e.g. {{Path|/home}} and {{Path|/data}}) that are to be exported:

{{RootCmd
|mkdir /export/home
|mkdir /export/data
}}

The filesystems to be exported need to be made available under their respective directories in the virtual root directory. This is accomplished with the  <code>--bind</code> option of the {{c|mount}} command:

{{RootCmd
|mount --bind /home /export/home
|mount --bind /data /export/data
}}

To make the above mounts persistent, add the following to {{Path|/etc/[[fstab]]}}:

{{FileBox|filename=/etc/fstab|1=
/home    /export/home    none    bind    0    0
/data    /export/data    none    bind    0    0
}}

==== Exports ====

The filesystems to be made accessible for clients are specified in {{Path|/etc/exports}}. This file consists of the directories to be exported, the clients allowed to access those directories, and a list options for each client. Refer to {{c|man exports}} for more information about the NFS export configuration options:

{{FileBox|filename=/etc/exports|1=
/export         192.168.0.0/24(insecure,rw,sync,no_subtree_check,crossmnt,fsid=0)
/export/home    192.168.0.0/24(insecure,rw,sync,no_subtree_check)
/export/data    192.168.0.0/24(insecure,rw,sync,no_subtree_check)
}}

The above configuration grants access to the exported directories by IP network, in this case <code>192.168.0.0/24</code>. Client access can also be specified as a single host (IP address or fully qualified domain name), NIS netgroup, or with a single <code>*</code> character which grants all clients access.

The following table briefly describes the client options used in the configuration above:

{| class="table table-condensed table-striped"
|-
! Option
! Description
|-
| <code>insecure</code>
| The server will require that client requests originate on unprivileged ports (those above 1024). This option is required when mounting exported directories from OS X or by the {{Path|nfs:/}} kioslave in KDE. The default is to use privileged ports.
|-
| <code>rw</code>
| The client will have read and write access to the exported directory. The default is to allow read-only access.
|-
| <code>sync</code>
| The server must wait until filesystem changes are committed to storage before responding to further client requests. This is the default.
|-
| <code>no_subtree_check</code>
| The server will not verify that a file requested by a client is in the appropriate filesystem and exported tree. This is the default.
|-
| <code>crossmnt</code>
| The server will reveal filesystems that are mounted under the virtual root directory that would otherwise be hidden when a client mounts the virtual root directory.
|-
| <code>fsid=0</code>
| This option is required to uniquely identify the virtual root directory.
|}

If changes are made to {{Path|/etc/exports}} after the NFS server has started, issue the following command to propagate the changes to clients:

{{RootCmd|exportfs -rv}}

{{Note|Even though the contrary is written in a lot of places, it is also possible to directly export the required directory, without creating a virtual root:
{{FileBox|filename=/etc/exports|1=
/home    192.168.0.0/24(insecure,rw,sync,no_subtree_check)
}}}}

===== Multiple IP addresses =====

To add extra interfaces or IP addresses to the shares already configured, add the them to the corresponding line in {{Path|/etc/exports}}. Below is a sample configuration using a local IPV6 address.

{{FileBox|filename=/etc/exports|1=
/export         192.168.0.0/24(insecure,rw,sync,no_subtree_check,crossmnt,fsid=0) 2000:aabb:ccdd:a::/64(insecure,rw,sync,no_subtree_check,crossmnt,fsid=0)
/export/home    192.168.0.0/24(insecure,rw,sync,no_subtree_check) 2000:aabb:ccdd:a::/64(insecure,rw,sync,no_subtree_check)
/export/data    192.168.0.0/24(insecure,rw,sync,no_subtree_check) 2000:aabb:ccdd:a::/64(insecure,rw,sync,no_subtree_check)
}}

Different client options can be defined for each each IP address/interface.

==== Daemon ====

===== OpenRC =====

The NFS daemon on OpenRC is configured via the <var>OPTS_RPC_NFSD</var> variable:

{{FileBox|filename=/etc/conf.d/nfs|lang=bash|1=
OPTS_RPC_NFSD="8 -N 2 -V 3 -V 4 -V 4.1"
}}

===== systemd =====

The NFS daemon on systemd is configured via the <var>RPCNFSDARGS</var> variable:

{{FileBox|filename=/etc/conf.d/nfs|lang=bash|1=
RPCNFSDARGS="8 -N 2 -V 3 -V 4 -V 4.1"
}}

The option <code>8</code> is the number of NFS server threads to start. Since only one thread is started by default, the thread count should be increased for optimal performance. The option <code>-N 2</code> disables NFS version 2, while options <code>-V 3</code>, <code>-V 4</code> and <code>-V 4.1</code> enable NFS versions 3, 4, and 4.1. Refer to {{c|man nfsd}} for more information about the NFS daemon configuration options.

==== Service ====

'''OpenRC'''

To start the NFS server:

{{RootCmd|/etc/init.d/nfs start|output=<pre>
 * Starting rpcbind ...                                                   [ ok ]
 * Starting NFS statd ...                                                 [ ok ]
 * Starting idmapd ...                                                    [ ok ]
 * Exporting NFS directories ...                                          [ ok ]
 * Starting NFS mountd ...                                                [ ok ]
 * Starting NFS daemon ...                                                [ ok ]
 * Starting NFS smnotify ...                                              [ ok ]
</pre>}}

The above output shows that many other services are also started along with the {{c|nfs}} service. To stop all NFS services, stop the {{c|rpcbind}} service:

{{RootCmd|rc-service rpcbind stop}}

To start the NFS server at boot:

{{RootCmd|rc-update add nfs default}}

'''systemd'''

To start the NFS server:

{{RootCmd|systemctl start rpcbind nfs-server}}

To start the NFS server at boot:

{{RootCmd|systemctl enable rpcbind nfs-server}}

=== Client ===

==== Service ====

'''OpenRC'''

To be able to mount exported directories, start the NFS client:

{{RootCmd|rc-service nfsclient start|output=<pre>
 * Starting rpcbind                                                       [ ok ]
 * Starting NFS statd                                                     [ ok ]
 * Starting NFS sm-notify                                                 [ ok ]
</pre>}}

To start the NFS client at boot:

{{RootCmd|rc-update add nfsclient default}}

'''systemd'''

The {{c|nfs-client}} service will be started automatically when systemd detects that exported directories are being mounted.

==== Mounting exports ====

{{Note|The commands and configuration files below use the IP address <code>192.168.0.1</code> to represent the NFS server.}}

Mount the exported directories:

{{RootCmd
|mount 192.168.0.1:/home /home
|mount 192.168.0.1:/data /data
}}

To make the above mounts persistent, add the following to {{Path|/etc/fstab}}:

{{FileBox|filename=/etc/fstab|1=
192.168.0.1:/home    /home    nfs    rw,_netdev    0    0
192.168.0.1:/data    /data    nfs    rw,_netdev    0    0
}}

The virtual root directory can be mounted instead of each individual exported directory. This will make all exported directories available to the client:

{{RootCmd|mount 192.168.0.1:/ /mnt}}

To make the above mount persistent, add the following to {{Path|/etc/fstab}}:

{{FileBox|filename=/etc/fstab|1=
192.168.0.1:/        /mnt     nfs    rw,_netdev    0    0
}}

When using {{Path|/etc/fstab}} to mount the exported directories, add the {{c|netmount}} service to the default runlevel:

{{RootCmd|rc-update add netmount default}}

If the NFS server or client support NFSv3 only, the ''full'' path to the exported directory (e.g. {{Path|/export/home}} or {{Path|/export/data}}) needs to be specified when mounting:

{{RootCmd
|mount 192.168.0.1:/export/home /home
|mount 192.168.0.1:/export/data /data
}}

The same applies when mounting the virtual root directory:

{{RootCmd|mount 192.168.0.1:/export /mnt}}

When mounting exported directories on an IPv6 network, enclose the IPv6 NFS server address in square brackets:

{{RootCmd
|mount [2001::215:c5ff:fb3e:e2b1]:/home /home
|mount [2001::215:c5ff:fb3e:e2b1]:/data /data
}}

When mounting a link-local IPv6 address, the network interface must also be specified:

{{RootCmd
|mount [fe80::215:c5ff:fb3e:e2b1%eth0]:/home /home
|mount [fe80::215:c5ff:fb3e:e2b1%eth0]:/data /data
}}

With NFSv4, the virtual root directory is rather 'invisible'; use relative path:

{{RootCmd
|mount -t nfs4 192.168.0.1:home /home
|mount -t nfs4 192.168.0.1:data /data
}}

=== Kerberos ===

It is possible to identify NFS client using Kerberos GSS. This will require a few modifications. In the following instruction, it is supposed that Kerberos is already installed on the same server as NFS (which hostname is ''server.domain.tld'') and that the client (''client.domain.tld'') is able to {{c|kinit}} to it. The Kerberos default realm it ''DOMAIN_REALM.TLD''.

First, enable the following kernel option (<var>CONFIG_RPCSEC_GSS_KRB5</var>) for both server and client. Note that this option may not appear if all cryptographic dependencies are not selected. See kernel option dependencies for more information:

{{KernelBox|title=Enabling Keberos for RPC|1=
File systems --->
  [*] Network File Systems --->
        <*>   Secure RPC: Kerberos V mechanism
}}

Then, create principals for the NFS service for both the server and the client. On the server, execute:

{{RootCmd
|kadmin.local add_principal -randkey nfs/server.domain.tld
|kadmin.local add_principal -randkey nfs/client.domain.tld
}}

Each computer must have its password saved in a local keytab. The easiest way to do it is (on the server):

{{RootCmd
|kadmin.local ktadd nfs/server.domain.tld
|kadmin.local ktadd -k /root/krb5.keytab nfs/client.domain.tld
}}

and then transfer the {{Path|/root/krb5.keytab}} to the client, with the name {{Path|/etc/krb5.keytab}}. Note that the file should be owned by root with <code>0600</code> mode.

The service {{c|rpc.gssd}} must run at client side. The following line must appear in {{Path|/etc/conf.d/nfsclient}} of the client:

{{FileBox|filename=/etc/conf.d/nfsclient|1=
rc_need="!rpc.statd rpc.gssd"
}}

The services {{c|rpc.idmapd}} and {{c|rpc.svcgssd}} must run at server side. The following line must appear in {{Path|/etc/conf.d/nfs}} of the server:

{{FileBox|filename=/etc/conf.d/nfs|1=
NFS_NEEDED_SERVICES="rpc.idmapd rpc.svcgssd"
}}

The {{c|rpc.idmapd}} service must be correctly configured (on the server):

{{FileBox|filename=/etc/idmapd.conf|1=
[General]

Domain = domain.tld
Local-Realms = DOMAIN_REALM.TLD
}}

Add <code>sec=krb5</code> to the export options.

{{FileBox|filename=/etc/exports|1=
/home    192.168.0.0/24(insecure,rw,sync,no_subtree_check,sec=krb5)
}}

It is also possible to increase security with <code>sec=krb5i</code> (user authentication and integrity checking) or even <code>sec=krb5p</code> (user authentication, integrity checking and NFS traffic encryption). The more security, the more resources are needed.

The same option must be added to the mount command at client side.

== Troubleshooting ==

<!-- If you make any changes to this section, please consider changing the appropriate section in [[CIFS]] as well. -->

* The system may become unresponsive during shutdown when the NFS client attempts to unmount exported directories ''after'' [[udev]] has stopped. To prevent this issue, a [[local.d]] script can be used to forcibly unmount the exported directories during shutdown:

{{FileBox|filename=/etc/local.d/nfs.stop|1=
/bin/umount -a -f -t nfs,nfs4
}}

{{RootCmd|chmod a+x /etc/local.d/nfs.stop}}

* Verify that the NFS server is running and listening for connections:

{{RootCmd|netstat -tupan {{!}} egrep 'rpc{{!}}Active{{!}}Proto'|output=<pre>
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:34950           0.0.0.0:*               LISTEN      1891/rpc.statd
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1875/rpcbind
udp        0      0 0.0.0.0:111             0.0.0.0:*                           1875/rpcbind
udp        0      0 0.0.0.0:57655           0.0.0.0:*                           1891/rpc.statd
udp        0      0 0.0.0.0:774             0.0.0.0:*                           1875/rpcbind
udp        0      0 0.0.0.0:795             0.0.0.0:*                           1891/rpc.statd
</pre>}}

* Verify which NFS daemons are running:

{{RootCmd|rpcinfo -p|output=<pre>
   program vers proto   port  service
    100000    4   tcp    111  portmapper
    100000    3   tcp    111  portmapper
    100000    2   tcp    111  portmapper
    100000    4   udp    111  portmapper
    100000    3   udp    111  portmapper
    100000    2   udp    111  portmapper
    100024    1   udp  57655  status
    100024    1   tcp  34950  status
    100003    2   tcp   2049  nfs
    100003    3   tcp   2049  nfs
    100003    4   tcp   2049  nfs
    100003    2   udp   2049  nfs
    100003    3   udp   2049  nfs
    100003    4   udp   2049  nfs
    100021    1   udp  44208  nlockmgr
    100021    3   udp  44208  nlockmgr
    100021    4   udp  44208  nlockmgr
    100021    1   tcp  44043  nlockmgr
    100021    3   tcp  44043  nlockmgr
    100021    4   tcp  44043  nlockmgr
</pre>}}

* List the exported directories from the NFS server:

{{RootCmd|exportfs -v|output=<pre>
/export       	192.168.0.0/24(rw,wdelay,crossmnt,insecure,root_squash,no_subtree_check,fsid=0,sec=sys,no_all_squash)
/export/home  	192.168.0.0/24(rw,wdelay,insecure,root_squash,no_subtree_check,sec=sys,no_all_squash)
/export/data  	192.168.0.0/24(rw,wdelay,insecure,root_squash,no_subtree_check,sec=sys,no_all_squash)
</pre>}}

* List the current open connections to the NFS server:

{{Cmd|netstat -tn {{!}} egrep '2049{{!}}Active{{!}}Proto'|output=<pre>
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 192.168.0.1:2049       192.168.0.10:884        ESTABLISHED
</pre>}}

* Verify that the exported directories are mounted by the NFS client:

{{Cmd|netstat -tn {{!}} egrep '2049{{!}}Active{{!}}Proto'|output=<pre>
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 192.168.0.10:997        192.168.0.1:2049        ESTABLISHED
</pre>}}

== See also ==

* {{See also|Samba}}

== External resources ==

* [https://tools.ietf.org/html/rfc7530 RFC 7530 - Network File System (NFS) version 4 Protocol]
* [https://help.ubuntu.com/community/NFSv4Howto Ubuntu Wiki - NFSv4Howto]
* [https://www.funtoo.org/Nfs Funtoo Wiki - NFS]
* [https://linux-nfs.org/wiki/index.php/General_troubleshooting_recommendations Linux NFS - General troubleshooting recommendations]
* [http://nfs.sourceforge.net/nfs-howto/ar01s07.html Linux NFS - HOWTO Troubleshooting]
</translate>

[[Category:Filesystems]]
[[Category:Daemons]]
