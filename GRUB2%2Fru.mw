<languages />
{{InfoBox stack
|{{InfoBox homepage|http://gnu.org/software/grub/|header=true}}
|{{InfoBox wikipedia|GNU_GRUB#GRUB 2}}
|{{InfoBox gitweb|http://git.savannah.gnu.org/cgit/grub.git/|raw=true}}
|{{InfoBox odoc|http://gnu.org/software/grub/grub-documentation.html}}
}}

'''GRUB2''' — загрузчик, замена для [[GRUB|GRUB версии 1]], который сейчас известен как "GRUB Legacy". В GRUB2 абсолютно новая, отдельная от GRUB Legacy, кодовая база, и новые возможности, такие как новый, shell-подобный синтаксис, для написания полноценных скриптов.

Для быстрого знакомства посмотрите статью [[GRUB2 Quick Start/ru|быстрое знакомство с GRUB2]]

== Установка ==

Пакет {{Package|sys-boot/grub}} слоттирован. Это значит, что grub-0.97 ([[GRUB|GRUB Legacy]]) и grub-2.00 могут быть установлены на одной машине, однако только один из них может быть установлен в Master Boot Record (MBR).

=== Предварительные требования ===

По умолчанию GRUB2 попытается угадать целевую платформу во время компиляции. Это может быть переопределено с помощью переменной <var>GRUB_PLATFORMS</var> в {{Path|make.conf}}.

{{FileBox|filename=/etc/portage/make.conf|title=Пример настройки GRUB_PLATFORMS для поддержки EMU, EFI и PC|lang=bash|1=
GRUB_PLATFORMS="emu efi-32 efi-64 pc"
}}

Следующие платформы поддерживаются, в зависимости от целевого CPU:

{| class="table"
!
! colspan="7" | Target
|-
! Platform
! i386
! ia64
! mips
! mipsel
! powerpc
! spac64
! x86_64
|-
! arc
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! coreboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! efi
| {{Yes}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
|-
! emu
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! ieee1275
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{Yes}}
| style="background: PaleTurquoise;  text-align: center" | 32-bit
|-
! loongson
| {{No}}
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
|-
! multiboot
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
! qemu-mips
| {{No}}
| {{No}}
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
|-
! pc
| {{Yes}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| {{No}}
| style="background: PaleTurquoise; text-align: center" | 32-bit
|-
|}

{{Note|Каждый раз когда значение в переменной  <var>GRUB_PLATFORMS</var> корректируется GRUB2 необходимо будет перекомпилировать для перекомпиляции измененных двоичных файлов. Убедитесь, что это делается с опцией <code>--newuse --deep</code>, как это показано в [[#Emerge|разделе emerge]] ниже.}}

Профили {{Keyword|amd64}} по умолчанию включают поддержку EFI-функциональности. В случае использования систем на базе BIOS, установите <var>GRUB_PLATFORMS</var> в значение "emu", чтобы избежать ненужных зависимостей.

=== Emerge ===

Чтобы установить GRUB2 используйте обычный для {{c|emerge}} синтаксис:

{{Emerge|sys-boot/grub:2|params+=--newuse --deep}}

=== Дополнительное программное обеспечение ===

Опционально, установите утилиту {{c|os-prober}} (она находится в пакете {{Package|sys-boot/os-prober}}), чтобы GRUB2 мог определять другие операционные системы при запуске {{c|grub-mkconfig}}. В большинстве случаев это даст GRUB2 возможность автоматически определять другие операционные системы включая Windows 7, 8.1, 10, другие дистрибутивы Linux, и так далее.

{{Emerge|sys-boot/os-prober|params+=--newuse}}

Установка GRUB2 (и, опционально, {{Package|sys-boot/os-prober}}) сама по себе не устанавливает загрузчик. Она лишь устанавливает программы на систему, а для установки загрузчика (чтобы он использовался для загрузки системы), необходимо выполнить дополнительные действия, о которых написано в разделе [[#Конфигурация|конфигурация]].

== Конфигурация ==

Есть два важных аспекта в конфигурации GRUB2:

# установка GRUB2 в качестве загрузчика системы
# настройка самого GRUB2

Установка GRUB2 специфична для каждого типа системы и описана в разделе [[#Установка загрузчика|установка загрузчика]]. Сначала рассмотрим настройку самого загрузчика.

=== Главный конфигурационный файл ===

Скрипт {{c|grub-mkconfig}} используется для генерации grub конфигурации. Он использует скрипты из каталога {{Path|/etc/grub.d/*}} и конфигурационный файл {{Path|/etc/default/grub}} для генерации {{Path|/boot/grub/grub.cfg}} файла, который используется самим GRUB2. 

{| class="table"
|-
! Файл !! Формат !! Редактирование рекомендуется? !! Описание
|-
| {{Path|/usr/sbin/grub-mkconfig}} || скрипт оболочки POSIX || {{No}} || Этот скрипт является частью пакета {{Package|sys-boot/grub}}:2. Запустите его после настройки нижеописанных файлов, чтобы сгенерировать {{Path|/boot/grub/grub.cfg}}.
|-
| {{Path|/boot/grub/grub.cfg}} || скрипт оболочки GRUB2 || {{No}} || Этот файл генерируется скриптом {{c|grub-mkconfig}}. Этот файл читается встроенным интерпретатором скриптов GRUB2 и нет гарантии, что он поддерживает все команды или синтаксис POSIX. Для того, чтобы узнать обо всех поддерживаемых возможностях, смотрите раздел [https://www.gnu.org/software/grub/manual/grub.html#Shell_002dlike-scripting scripting reference] в руководстве пользователя GRUB. Помните, что изменения в этом файле сохраняются только до следующего запуска grub-mkconfig.
|-
| {{Path|/etc/grub.d/*}} || скрипты оболочки POSIX || {{Partial|Возможно}} || Все скрипты в каталоге {{Path|/etc/grub.d/*}}, у которых установлен исполняемый бит, читаются последовательно, их стандартный вывод объединяется и из него формируется файл {{Path|/boot/grub/grub.cfg}} (или файл, указанный в качестве параметра <code>-o</code> команды {{c|grub-mkconfig}}). Эти скрипты используют текущую системную оболочку и, следовательно, могут использовать любой поддерживаемый ею синтаксис. В идеале эти скрипты должны быть POSIX-совместимыми, и скрипт вывода должен быть совместим с интерпретатором GRUB2. Возможно, возникнет необходимость выключить или добавить некоторые скрипты, например для того, чтобы добавить пункты меню, которые не удалось сгенерировать автоматически.
|-
| {{Path|/boot/grub/custom.cfg}} || скрипт оболочки GRUB2 || {{Partial|Возможно}} || Скрипт /etc/grub.d/41_custom заставит GRUB2 во время загрузки читать этот файл, если он существует. В этот файл можно добавить дополнительные пункты меню или команды. Этот файл не требует повторной генерации основного файла конфигурации grub.cfg.
|-
| {{Path|/etc/default/grub}} || скрипт оболочки POSIX || {{Yes}} || В большинстве случаев, это единственный файл, который следует редактировать. В основном, он используется для присвоения переменных, используемых скриптами в каталоге {{Path|/etc/grub.d}} для генерации рабочего конфигурационного файла. Для того, чтобы узнать, какие переменные поддерживаются, смотрите статью [[GRUB2/Config_Variables|GRUB2 configuration variables]] или [https://www.gnu.org/software/grub/manual/grub.html#Simple-configuration official reference].
|}

GRUB2 не требует ручного администрирования конфигураций загрузочных опций (как в случае с такими загрузчиками как [[GRUB|GRUB Legacy]] и [[LILO/ru|LILO]]). Вместо этого он может генерировать свой конфигурационный файл ({{Path|/boot/grub/grub.cfg}}) с помощью команды {{c|grub-mkconfig}}. Эта утилита использует скрипты из {{Path|/etc/grub.d/}} и настройки из {{Path|/etc/default/grub}}.

{{Warning|Утилита {{c|grub-mkconfig}} может работать не корректно, если используется программный RAID. Необходимо вручную сконфигурировать скрипты в {{Path|/etc/grub.d/}}, так как, в противном случае, после установки, система может не загрузится.
}}

После изменения одной или более настроек, запустите утилиту {{c|grub-mkconfig}} с опцией <code>-o</code>, которая указывает файл, куда необходимо сохранить конфигурацию {{Path|/boot/grub/grub.cfg}} (это конфигурационный файл GRUB2 по умолчанию):

{{RootCmd|grub-mkconfig -o /boot/grub/grub.cfg|output=<pre>
Generating grub.cfg ...
Found linux image: /boot/vmlinuz-3.3.0-gentoo
done
</pre>}}

Каждый раз, когда вызывается утилита {{c|grub-mkconfig}}, будет сгенерирована новая конфигурация. 

{{Warning|Если {{c|grub-mkconfig}} не сообщила о каких-либо найденных записях, то никаких записей не найдено. В этом случае, после перезагрузки системы, GRUB2 не предложит какого-либо выбора для загрузки, что весьма плохо и отнимет много времени для решения этой ситуации. Перед перезагрузкой, убедитесь, что вывод содержит записи об успешно найденном ядре.}}

=== Настройка параметров конфигурации ===

В основном, через следующие переменные из {{Path|/etc/default/grub}} настраивают функциональность GRUB2:

{| class="table"
! Переменная
! Объяснение
! Значение по умолчанию
|-
| <var>GRUB_DEFAULT</var>
| Определяет пункт меню выделенный по умолчанию. Может быть номером, названием пункиа, или "saved". 
| Первый найденный пункт.
|-
| <var>GRUB_TIMEOUT</var> 
| Задержка (в секундах) перед загрузкой стандартного пункта. Выставьте значение в <code>0</code> чтобы загружаться сразу или в <code>-1</code> чтобы отключить автоматическую загрузку. 
| 5 секунд.
|-
| <var>GRUB_CMDLINE_LINUX</var>
| Параметры, передающиеся командной строке ядра для каждого Linux пункта. Например, для поддержки гибернации пользователям надо добавить <code>GRUB_CMDLINE_LINUX="resume=/dev/sdXY"</code>, где {{Path|/dev/sdXY}} - своп-раздел.
| 
|-
| <var>GRUB_CMDLINE_LINUX_DEFAULT</var>
| Параметры, передающиеся всем не-recovery Linux-пунктам.
| 
|-
| <var>GRUB_DEVICE</var> 
| Гланое устройство (т.е. параметр ядра <code>root=</code>). Выставьте его чтобы переопределить устройство, найденное авто-детекцией {{c|grub-mkconfig}}. Например, <code>GRUB_DEVICE=/dev/ram0</code> заставит загрузчик использовать <code>root=/dev/ram0</code> в командной строке ядра.
| 
|}

Для более полного списка обратитесь к [[GRUB2/Config_Variables|списку настроек GRUB2]].

После изменения параметров пересоздайте файл настроек GRUB2 с помощью {{c|grub-mkconfig}}.

=== Включение или отключение конфигурационных скриптов ===

Каталог {{Path|/etc/grub.d/}} содержит скрипты, которые использует {{c|grub-mkconfig}} для генерации файла {{Path|grub.cfg}}. По умолчанию содержимое этого каталога должно выглядеть примерно так:

{{Cmd|ls /etc/grub.d/|output=<pre>
00_header  10_linux  20_linux_xen  30_os-prober  40_custom  41_custom README
</pre>}}

GRUB2 использует все установленные скрипты, которые помечены как выполняемые (по умолчанию они все включены). Чтобы отключить любой из этих скриптов, просто удалите бит выполнения с скрипт-файла используя команду {{c|chmod}}. В следующем примере все скрипты, кроме {{Path|00_header}} и {{Path|10_linux}}, отключены:

{{RootCmd|chmod -x /etc/grub.d/<nowiki>{</nowiki>20_linux_xen,30_os-prober,40_custom,41_custom<nowiki>}</nowiki>}}

После редактирования скриптов (или удаления бита выполнения), перегенерируйте конфигурационный файл GRUB2 используя {{c|grub-mkconfig}}.

=== Манипулирование конфигурационными скриптами ===

Некоторыми функциями или некоторой функциональностью GRUB2 возможно воспользоваться только в случаи изменений в конфигурационных скриптах. Например, для поддержки двойной загрузки с FreeBSD, необходимо выполнить следующие манипуляции.

Измените конфигурационный скрипт {{Path|/etc/grub.d/40_custom}} так:  

{{FileBox|filename=/etc/grub.d/40_custom|title=Добавление двойной загрузки|<pre>
menuentry "FreeBSD" --class freebsd --class bsd --class os {
 insmod ufs2
 insmod bsd
 set root=(hd0,1)
 kfreebsd /boot/kernel/kernel
 kfreebsd_loadenv /boot/device.hints
 set kFreeBSD.vfs.root.mountfrom=ufs:/dev/ada0s1a
 set kFreeBSD.vfs.root.mountfrom.options=rw
 set kFreeBSD.hw.psm.synaptics_support=1
}
</pre>}}

{{Path|/dev/sda1}} или <code>(hd0,1)</code> это раздел в котором находится FreeBSD. В случаи использования обычной UFS инсталляции для раздела с FreeBSD, {{Path|/dev/sda1}} это контейнер (что-то вроде логического раздела). Он содержит swap и root разделы. Проверьте скрипт {{Path|40_custom}} на возможность запуска, запустив {{c|ls -la /etc/grub.d/40_custom}}. Если бит выполнения не установлен, установите его используя команду {{c|chmod u+x 40_custom}}.  

Далее, установите GRUB2 с помощью команды {{c|grub-install}} и обновите конфигурационный файл GRUB2:

{{RootCmd|grub-install /dev/sda
|grub-mkconfig -o /boot/grub/grub.cfg}}

== Установка загрузчика ==

Установка GRUB2 в качестве системного загрузчика зависит от того, как система будет загружаться (через [[BIOS]] или UEFI) и как диск, на котором должен быть установлен загрузчик, был разбит до этого (использовалась схема MBR или GPT).

Эта статья описывает следующие ситуации:

* [[#BIOS и MBR|BIOS и MBR]]
* [[#BIOS и GPT|BIOS и GPT]]
* [[#UEFI и GPT|UEFI и GPT]]

Выберите одну из инструкций подходящую для используемой системы.

=== BIOS и MBR ===

{{Note|В случаи двойной загрузки с Microsoft Windows, убедитесь, что в системе ''нет'' UEFI-прошивки. Даже если загрузка осуществляется в режиме 'legacy BIOS', Microsoft Windows может не загрузится.}}

Удостоверьтесь, что {{Path|/boot}} существует - если для нее используется отдельный раздел, убедитесь, что он смонтирован:

{{RootCmd|mount /boot}}

Запустите команду {{c|grub-install}}, которая скопирует необходимые файлы в {{Path|/boot/grub}}. На платформе PC также установится загрузочный образ в главную загрузочную запись (MBR) или в загрузочный сектор раздела. Если все пройдет успешно, после запуска {{c|grub-install}}, то следует ожидать примерно такой вывод как показано ниже:

{{RootCmd|grub-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

В {{c|grub-install}} есть опция <code>--target</code>, которая позволяет установить архитектуру CPU и платформу. Если она не установлена, {{c|grub-install}} попытается угадать правильное значение; в системах {{Keyword|amd64}}/{{Keyword|x86}} будет использоваться <code>i386-pc</code> по умолчанию. Также в {{c|grub-install}} есть опция <code>--boot-directory</code>, чтобы сообщить установщику GRUB2 в каком каталоге он должен искать загрузочные файлы GRUB2. Этот каталог по умолчанию {{Path|/boot}}, что может быть удобно при перемещении root-раздела.

==== Разбитие для BIOS и MBR ====

Убедитесь, что оставили достаточно место перед первым разделом. Если начать первый раздел с сектора 2048, останется, по крайней мере, 1 MiB дискового пространства для MBR. Рекомендуется (но не обязательно) создать дополнительный раздел для GRUB и назвать его ''BIOS boot partition''. Этот раздел нужно просто создать, но, пока что, не форматировать. Он нужно только в том случае, если система позже будет мигрировать на схему разделов GPT. Если мигрирование не предполагается, для MBR этот раздел не требуется.


Если все делали по [[Handbook:Main_Page/ru|установочным инструкциям Gentoo]], этот BIOS boot partition раздел уже был создан.

=== BIOS и GPT ===

{{Note|Если в системе подразумевается двойная загрузка с Microsoft Windows, убедитесь, что в этой системе ''нету'' UEFI-прошивки. Даже если такая система загружается в режиме 'legacy BIOS', Microsoft Windows может не загрузится. Также, старые версии Microsoft Windows могут не поддерживать GPT. Возможно лучше использовать гибридный подход MBR-GPT; смотрите [[Hybrid partition table]].}}

Если необходим раздел {{Path|/boot}}, начните с монтирования раздела {{Path|/boot}}:

{{RootCmd|mount /boot}}

Если все прошло успешно, после выполнения команды {{c|grub-install}}, следует ожидать такой вывод, как показано ниже:

{{RootCmd|grub-install /dev/sda|output=<pre>
Installation finished. No error reported.
</pre>}}

В {{c|grub-install}} есть опция <code>--target</code>, которая позволяет установить архитектуру CPU и платформы. Если она не установлена, {{c|grub-install}} попытается угадать правильное значение; в системах {{Keyword|amd64}}/{{Keyword|x86}} будет использоваться <code>i386-pc</code> по умолчанию. Также в {{c|grub-install}} есть опция <code>--boot-directory</code>, чтобы сообщить установщику GRUB2 в каком каталоге он должен искать загрузочные файлы GRUB2. По умолчанию это каталог {{Path|/boot}}, что может быть удобно при перемещении root-раздела.

==== Разбитие для BIOS и GPT ====

В системе с GPT таблицей должен быть небольшой ''BIOS boot partition'' с типом файловой системы <code>EF02</code> (не путать с ''EFI System Partition (ESP)'' у которой тип файловой системы <code>EF00</code>). 1 MiB должно быть достаточно для работы, но 2-4 MiB будет более безопасным вариантом. Этот BIOS boot раздел будет хранить в себе 2 стадию загрузчика. BIOS boot раздел не нужно форматировать в какую-либо файловую систему; команда {{c|grub-install}} перезапишет любую файловую систему на свою собственную.

{{Important|BIOS boot раздел это ''не'' тот же самый раздел, который обычно монтируется в {{Path|/boot}}. {{Path|/boot}} и BIOS boot это разные разделы и должны обрабатываться отдельно. BIOS boot раздел ''не'' должен быть смонтирован в системе (то есть, ''не'' надо определять его в {{Path|/etc/fstab}}). Раздел {{Path|/boot}} ''может'' быть обычно смонтирован без проблем и, следовательно, может присутствовать в файле {{Path|/etc/fstab}}.}}

Чтобы установить раздел как BIOS раздел, используйте утилиту командной строки {{c|parted}} ({{Package|sys-block/parted}}) введя (измените <code>1</code> на номер необходимого раздела, который нужно сделать BIOS boot разделом!):

{{RootCmd|set 1 bios_grub on|prompt=(parted) |color=white}}

Если используется утилита {{c|cgdisk}} из {{Package|sys-apps/gptfdisk}}, этого же можно добиться, установив тип раздела в <code>0xEF02</code> и присвоив разделу метку <code>gptbios</code>.

EFI системный раздел не нужен на данный момент, но было бы целесообразно убедится, что BIOS boot раздел достаточно большой, если позже материнская плата будет обновлена до UEFI материнской платы.

Ниже приведен пример вывода нажатия клавиши {{Key|p}} в {{c|gdisk}} утилите на диске размеченным с помощью GPT с обоими разделами BIOS boot [0xEF02] и EFI [0xEF00]:

{{RootCmd|gdisk /dev/sdc|output=<pre>
GPT fdisk (gdisk) version 0.8.1
 
Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present
 
Found valid GPT with protective MBR; using GPT.
 
Command (? for help): p
Disk /dev/sdc: 976773168 sectors, 465.8 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): AA369F4D-37A4-4C0D-A357-DC24B99A6337
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 976773134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)
 
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048       828377087   395.0 GiB   8E00  Linux LVM
   2       828377088       891291647   30.0 GiB    0700  Microsoft basic data
   3       891291648       975177727   40.0 GiB    0700  Microsoft basic data
   4       975177728       976754687   770.0 MiB   8300  Linux filesystem
   5       976754688       976756735   1024.0 KiB  EF02  BIOS boot partition
   6       976756736       976773134   8.0 MiB     EF00  EFI System
 
Command (? for help): 
</pre>}}

{{Note|Не нужно вводить шестнадцатеричный префикс <code>0x</code> для GPT, если используется {{c|fdisk}}.}}

При тех же настройках утилита {{c|parted}} дает вывод с немного другим синтаксисом:

{{RootCmd|parted /dev/sdc|output=<pre>
GNU Parted 3.0
Using /dev/sdc
(parted) print
...
Sector size (logical/physical): 512B/512B
Partition Table: gpt
  
Number  Start   End    Size    File system  Name                  Flags
 1      1049kB  424GB  424GB                Linux LVM             lvm
 2      424GB   456GB  32.2GB               Microsoft basic data
 3      456GB   499GB  42.9GB               Microsoft basic data
 4      499GB   500GB  807MB   ext2         Linux filesystem
 5      500GB   500GB  1049kB               BIOS boot partition   bios_grub
 6      500GB   500GB  8396kB               EFI System            boot
  
(parted)
</pre>}}

Для пользователей знакомых с {{c|fdisk}} создание разделов в {{c|gdisk}} покажется весьма простым делом. После запуска {{c|gdisk}}, в основном меню нажмите {{Key|n}} (для нового раздела), укажите первый и последний секторы (если необходимо) и установите тип раздела в <code>EF00</code> для системного раздела EFI.

Пользователи, которые все делали по [[Handbook:Main_Page/ru|установочным инструкциям Gentoo]], уже обладают правильно схемой разбивки.

=== UEFI и GPT ===

Удостоверьтесь, что {{Path|/boot}} существует - если для нее используется отдельный раздел, убедитесь, что он смонтирован:

{{RootCmd|mount /boot}}

Запустите команду {{c|grub-install}} для копирования необходимых файлов в {{Path|/boot/grub}}. Она должна установить GRUB2 в {{Path|/boot/grub}}, скопировать основной образ в {{Path|/boot/efi/EFI/gentoo/grubx64.efi}} и вызвать [[Efibootmgr|efibootmgr]] для добавления загрузочной записи.

{{RootCmd|grub-install --efi-directory{{=}}/boot/efi|output=<pre>
Installation finished. No error reported.
</pre>}}

Команда выше подразумевает, что vfat [[EFI System Partition|системный раздел EFI]] (EFI System Partition (ESP)) смонтирован в {{Path|/boot/efi}}. Если ESP смонтирован непосредственно в {{Path|/boot}}, используйте <code>--efi-directory=/boot</code>. 

В {{c|grub-install}} есть опция <code>--target</code>, которая позволяет установить архитектуру CPU и платформы. Если она не установлена, {{c|grub-install}} попытается угадать правильное значение; в системах AMD64 загруженных с помощью UEFI будет использоваться <code>x86_64-efi</code> по умолчанию. Также в {{c|grub-install}} есть опция <code>--boot-directory</code>, чтобы сообщить установщику GRUB2 в каком каталоге он должен искать загрузочные файлы GRUB2. Этот каталог по умолчанию {{Path|/boot}}, что может быть удобно при перемещении root-раздела.

==== Разбитие для UEFI и GPT ====

Для UEFI GPT загрузки при помощи GRUB2 в системе "должен" быть отдельный EFI-раздел с файловой системой FAT.

Раздел EFI может ''заменить'' существующий  раздел {{Path|/boot}} на {{Path|/dev/sda1}} с существующим разделом {{Path|/boot/efi}} на {{Path|/dev/sda1}}. Это подразумевает, что сценарий загрузки UEFI при помощи GRUB2 ''может'' работать с двумя разделами (тремя, если нужен раздел swap): раздел root и раздел EFI. Используя такую конфигурацию, ''каталог'' {{Path|/boot}} будет расположен в ''разделе'' {{Path|/}} (в {{Path|/boot}}) и ''раздел'' EFI будет смонтирован ''в'' ''каталоге'' boot  (в {{Path|/boot/efi}}). Для уточнения, смотрите пример файла {{Path|/etc/fstab}} ниже.

{{FileBox|filename=/etc/fstab|title=Пример файла {{Path|/etc/fstab}} с UEFI и своп-разделом:|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
/dev/sda2		none		swap		sw		0 0
/dev/sda3		/		ext4		noatime		0 1
</pre>}}

Создание 100MB раздела для {{Path|/boot/efi}} должно предоставить достаточно места для хранения нескольких файлов {{Path|*.efi}} (множество записей не требуется; большинство систем используют только одну).

Создайте раздел с помощью [[Partition#GUID_Partition_Table_.28GPT.29|выбранной утилиты]]. Утилиты {{c|gdisk}} ({{Package|sys-apps/gptfdisk}}) и {{c|parted}} ({{Package|sys-block/parted}}) хорошо походят для этой цели. Если используется утилита {{c|gdisk}} utility, убедитесь, что используете тип <code>EF00</code>.

Далее, используя {{c|mkdosfs}}, создайте файловую систему FAT в системном разделе EFI и добавьте его в {{Path|/etc/fstab}} как в примере ниже:

{{RootCmd|mkdosfs -F 32 -n efi-boot /dev/sda1
|mkdir /boot/efi}}

{{FileBox|filename=/etc/fstab|title=Добавление записи для /boot/efi|<pre>
/dev/sda1		/boot/efi	vfat		noauto,noatime	1 2
</pre>}}

{{RootCmd|mount /boot/efi}}

{{Note|Будет полезно установить переменную <var>GRUB_PLATFORMS</var> в {{Path|/etc/portage/make.conf}}. Это поможет GRUB2 определить какие варианты использовать при определении подходящей цели EFI. Для 32-битных систем UEFI используйте <code>efi-32</code>. Для 64-битных используйте <code>efi-64</code>.}}

{{Important|Для того чтобы установить GRUB2 правильно, каталог EFI ''должен'' быть смонтирован ''и'' модуль ядра <code>efivars</code> должен быть загружен до выполнения команды {{c|grub-install}} для удачной установки.}}

==== Альтернативный вариант: использование обычного расположения прошивки UEFI ====

Если системной прошивки UEFI не удается найти загрузочный файл EFI в GRUB2, использование обычного расположения загрузчика должно работать. Это позволит обойти загрузочное меню [[Efibootmgr|efibootmgr]] и, таким образом, предлагает уменьшенную функциональность, а также меньше подвержено ошибкам. Чтобы это сделать, проверьте, что раздел EFI смонтирован в {{Path|/boot/efi}}, затем скопируйте файл {{Path|grubx64.efi}}, расположенный {{Path|/boot/efi/EFI/gentoo/grubx64.efi}}, в {{Path|/boot/efi/EFI/BOOT/BOOTX64.EFI}}. Этот пример подразумевает что система 64-битная UEFI; настройте соответствующим образом для 32-битной UEFI системы.

== Расширенные возможности ==

В GRUB2 есть много возможностей, которые делают GRUB2 очень мощным загрузчиком. Он поддерживает:

*Загрузку с платформ UEFI.
*Загрузку с дисков с таблицей разделов GPT без необходимости использования гибридного MBR (при необходимости, гибридный MBR можно включить для совместимости или переносимости).
*Загрузку с раздела {{Path|/boot}} с файловой системой [[btrfs]].
*Непосредственную загрузку с raid set [[btrfs/ru|btrfs]] без необходимости использования [[initramfs]] для настройки раннего монтирования.
*Непосредственную загрузку с системы управления логическими томами (например, [[LVM/ru|LVM2]]).
*Загрузку с поддержкой DM-RAID (RAID 0, 1, 4, 5, 6, 9 и 10).
*Загрузку с зашифрованных устройств (LUKS).

Некоторые возможности будут рассмотрены более детально дальше.

=== Chainloading ===

GRUB2 была улучшена поддержка режима chainload по сравнению с GRUB Legacy. Чтобы загрузить другой загрузчик с помощью chainloader используйте опцию <code>chainloader</code>.

{{FileBox|filename=/etc/grub.d/40_custom|title=Загрузка другого загрузчика с помощью chainloader|<pre>
menuentry "Custom Super Bootloader Example" {
     insmod part_msdos
     insmod chain
     chainloader (hd1,1)+1
}
</pre>}}

Для более подробной информации о chainloading, пожалуйста, смотрите статью [[GRUB2/Chainloading|Chainloading]].

=== Использование фрейбуфера ===

Чтобы GRUB2 использовал [[framebuffer]], перекомпилируйте GRUB с включенным USE-флагом <code>truetype</code>. Это установит шрифт True Type по умолчанию, а также утилиту для преобразования шрифтов.

{{Emerge|--newuse sys-boot/grub:2}}

Приступим к конфигурации конфигурационного файла по умолчанию GRUB2, который расположен в {{Path|/etc/default/grub}}. Например:

{{FileBox|filename=/etc/default/grub|title=Настройки связанные с фрейбуфером|lang=bash|1=
# настройка разрешения и глубины цвета
GRUB_GFXMODE=1366x768x32
 
# сохранить разрешение после загрузки ядра
GRUB_GFXPAYLOAD_LINUX=keep
 
# настройка фонового изображения
GRUB_BACKGROUND="/boot/grub/bg.png"
 
# использование пользовательского шрифта, конвертированного с помощью утилиты grub-mkfont
GRUB_FONT="/boot/grub/fonts/roboto.pf2"
}}

Чтобы найти какие режимы отображения поддерживаются графической картой, используйте следующую команду в шеле GRUB2:

{{Cmd|prompt=(grub)|color=white|insmod all_video|videoinfo}}

== Устранение проблем ==

Большую часть проблем можно устранить, проверив правильность таблицы разделов. Убедитесь, что перед первым разделом диска достаточно свободного места или убедитесь, что ''загрузочный раздел BIOS'' доступен. Также убедитесь в том, что файл {{Path|/boot/grub/grub.cfg}} был правильно сгенерирован командой {{c|grub-mkconfig}}, или сгенерируйте его с индивидуальным пунктом меню.

Чтобы получить больше информации по устранению ошибок в GRUB2, пожалуйста, проверьте статью [[GRUB2/Troubleshooting|Troubleshooting]].

=== os-prober и UEFI в chroot ===

Утилита {{Package|sys-boot/os-prober}} используется для поисках других установленных ОС, таких как Microsoft Windows. Чтобы она работала правильно, ей необходим доступ к информации из реального окружения udev, чтобы протестировать наличие системного раздела EFI (EFI System Partition).

Запустите эти команды в окружении реального хоста, чтобы предоставить необходимые файлы (пример подразумевает, что Gentoo смонтирована в {{Path|/mnt/gentoo}} как это было в [[Handbook:AMD64/ru|Handbook]]):

{{RootCmd
|mkdir -p /mnt/gentoo/run/udev
|mount -o bind /run/udev /mnt/gentoo/run/udev
|mount --make-rslave /mnt/gentoo/run/udev
}}

== Смотрите также ==

Здесь несколько ресурсов, специфичных для GRUB2:

*В статье [[GRUB2/Chainloading|Chainloading]] описано, как можно использовать GRUB2 для загрузки других загрузчиков. Эта статья важна для тех, кто использует системы с двойной загрузкой или хочет настроить GRUB2 для загрузки файлов ISO.
*В статье [[GRUB2/AdvancedStorage|Advanced storage]] описаны действия, необходимые для того, чтобы установить и использовать GRUB2 с более сложными системами устройств, такими как software RAID, логические тома и зашифрованные файловые системы.
*Статья [[GRUB2/Config_Variables|Configuration variables]] содержит исчерпывающий список конфигурационных переменных GRUB2, используемых файлом {{Path|/etc/default/grub}}.
*Статья [[GRUB2/Troubleshooting|Troubleshooting]] содержит перечень типичных ошибок GRUB2, а также способов их исправления.
*В статье [[Hybrid_partition_table|Hybrid partition table]] описано использование комбинированной конфигурации MBR/GPT, а также использование такой гибридной таблицы разделов с GRUB2.

== Внешние ресурсы ==

Для большей информации смотрите:

* [https://www.gnu.org/software/grub/manual/grub.html Руководство пользователя GNU GRUB 2]
** [https://www.gnu.org/software/grub/manual/grub.html#Network Раздел Network (PXE) руководства пользователя GRUB2]
* [http://www.rodsbooks.com/gdisk/bios.html Статья о проблемах Legacy BIOS с GPT]
* [http://www.rodsbooks.com/gdisk/hybrid.html Статья о GPT и гибридном MBR]
* [http://www.rodsbooks.com/gdisk/ Страница утилиты GPT fdisk]
* [https://wiki.archlinux.org/index.php/GRUB2 Статья GRUB2 на Arch Linux wiki]
* [https://fedoraproject.org/wiki/GRUB_2?rd=Grub2#Encountering_the_dreaded_GRUB_2_boot_prompt Статья GRUB2 на Fedora wiki: Encountering the dreaded GRUB2 boot prompt]
* [https://help.ubuntu.com/community/UEFIBooting ubuntu UEFI booting help]
* [http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr http://unix.stackexchange.com/questions/109272/dualboot-freebsd-gentoo-with-grub2-mbr]
* [http://daniel-lange.com/archives/75-Securing-the-grub-boot-loader.html Сообщение блога о том, как можно закрыть паролем определенные пункты загрузочного меню GRUB2]


[[Category:Bootloaders]]
