This page documents a tutorial for setting up complicated networking with the help of stacked runlevel. Along the tutorial other tricked for OpenRC are also expected.

The short version is that

{{File|rc-update manpage|stack runlevel|<pre>
If the -s, --stack option is given then we either add or remove the runlevel from the runlevel. 
This allows inheritance of run‚Äêlevels.
</pre>}}

= senario =
We have a university library which provides wireless network, with the following steps:
# associate with the AP with no authentication
# setup a [http://en.wikipedia.org/wiki/Pptp PPTP] VPN through NAT against an internal server
# using an [http://en.wikipedia.org/wiki/Http_proxy HTTP proxy] to access the websites

There are big advantages:
* [http://en.wikipedia.org/wiki/Generic_Routing_Encapsulation GRE] protocol used by [http://en.wikipedia.org/wiki/Pptp PPTP] uses source ip to identify client, thus do not support tunneling through NAT. There is enhanced GRE for such perpose, but routers has different implementations and only considered PPTP clients for Microsoft Windows and Apple Mac OS X, not for Linux[http://article.gmane.org/gmane.comp.misc.pptpclient.devel/2934].
* The author, as a server administratior, need ssh at least. http proxy, a limit gateway to the internet, sucks.

Besides complaining to library manager and network technician, then waiting forever, we can hack our own reliable way out. 

= solution =
* For Linux box not being able to use PPTP VPN through NAT, the author selected his phone to do the job. Apple's Iphone has Mac OS X, and it's PPTP client happens to work with the router in the library.

:Actually we can also use a virtual machine running Windows for the PPTP connection. That would be another story. The author's laptop is too weak to have virtual machine running smoothly.

* For pushing the limit of http proxy, the author selected [http://www.tinc-vpn.org tinc] to connect to his home router as the full functioned gateway.

= tutorial =
The solution is there. The procedures are complex and very boring and error-prone to set it up manually. OpenRC's stacked runlevel comes as a rescue.

We can make a new runlevel right away for the remaining tutorial:
{{RootCmd|mkdir /etc/runlevels/lwifi}}

Add our default runlevel into it:
{{RootCmd|rc-update -s add default lwifi}}

== iphone tethering ==
Documented at [[Iphone_USB_Tethering]] and we use static configuration instead of dhcp.
{{File|/etc/conf.d/net|static config eth1|<pre>
config_eth1="172.20.10.2/28"
routes_eth1="zzz.xxx.xxx.xxx/yy via 172.20.10.1"
dns_servers_eth1="zzz.xxx.xxx.xxx zzz.xxx.xxx.xxx"
</pre>}}
the entry in '''routes_eth1''' is the network of cellular mobile, which can be identified by [[whois]] containing '''dns_servers_eth1'''. We set this up because there is no other easily reachable DNS server. Tinc, in later step, needs DNS to query IP address of its entry node.

Now associate the library wifi with iPhone, and dail PPTP VPN. Consult your iPhone manual for details.

== socks proxy on iPhone ==
iPhone has an ill design: during tethering, packets can only be routed to cellular mobile network, even if you set up a wifi connection. Therefore we cannot just access the http proxy directly through eth1, a socks proxy server is needed to transmit it.

There are many methods to set up a socks proxy in iPhone. One way to achieve is by sshd. 

* First [https://www.google.com/#hl=en&safe=off&output=search&sclient=psy-ab&q=iphone+jailbreak+ssh&oq=iphone+jailbreak+ssh&gs_l=hp.3..0l4j0i30l6.38.5902.1.7803.22.16.1.5.5.1.993.6361.3-13j1j1j1.16.0.les%3B..0.0...1c.-DUD2Vc0f7M&psj=1&bav=on.2,or.r_gc.r_pw.r_cp.r_qf.&fp=a3f5c70ed5a0aea&biw=1278&bih=712 by all means] install an sshd in iPhone.

* Next, use public key to access the sshd on iPhone. Details [http://www.gentoo.org/doc/en/articles/openssh-key-management-p1.xml here].

* Finally, write a OpenRC initscript file.
{{File|/etc/init.d/socksIphone|OpenRC initscript ssh socks|<pre>
#!/sbin/runscript
# Copyright 1999-2012 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

description="ssh into Iphone as a socks proxy on localhost:1080"

depend() {
        need net.eth1
        before tincd.*
}

start() {
        ebegin "starting socksIphone"
        start-stop-daemon --start --make-pidfile --background --pidfile /run/socksIphone.pid --exec /usr/bin/ssh \
        -- -nN -D127.0.0.1:1080 root@172.20.10.1
        ! [ -f /run/socksIphone.pid ] && sleep 1
        eend $?
}

stop() {
        ebegin "stopping socksIphone"
        start-stop-daemon --stop --pidfile /run/socksIphone.pid
        eend $?
}
</pre>}}

and add it to our runlevel
{{RootCmd|rc-update add socksIphone lwifi}}
