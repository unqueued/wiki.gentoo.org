<languages />


Это руководство ознакомит Вас с языком Java и объяснит как использовать Java с Gentoo Linux.

== Что такое Java? ==

=== Общий обзор ===

Java - это язык программирования, разрабатываемый инженерами Sun Microsystems. Язык объектно-ориентирован и предназначен для запуска на различных платформах без необходимости перекомпиляции кода для каждой платформы. Хотя программа на Java и может быть скомпилирована в нативный код, основная популярность Java может быть приписана ее портируемости, наряду с другими особенностями, такими как сборка мусора. Чтобы сделать платформенную независимость возможной, компилятор Java компилирует Java-код в промежуточное представление, называемое байт-код Java (Java bytecode), которое запускается на JRE (среде выполнения Java), а не прямо на операционной системе. 

Для запуска байт-кода Java, необходимо наличие установленной JRE (Java Runtime Environment). JRE предоставляет доступ к основным библиотекам, платформо-зависимой виртуальной машине Java, плагинам для браузеров, в числе прочих вещей. JDK (Java Development Kit) добавляет программные инструменты, такие как компилятор в байт-код и отладчик. 

== Установка виртуальной машины ==

=== Возможности на выбор ===

Gentoo предоставляет различные JRE (среды выполнения) и JDK (пакеты средств разработки программного обеспечения). В числе текущих вариантов, имеются: 

{| class="wikitable" style="text-align: left;" 
|- 
! Vendor
! JDK
! JRE
|- 
| The IcedTea Open Java SE (ранее icedtea6-bin)
| dev-java/icedtea-bin
| 
|- 
| Oracle's Java 7 SE
| dev-java/oracle-jdk-bin
| dev-java/oracle-jre-bin
|- 
| Sun's Java 6 SE
| dev-java/sun-jdk
| dev-java/sun-jre-bin
|- 
| The IBM Java SE
| dev-java/ibm-jdk-bin
| dev-java/ibm-jre-bin
|-
|}

=== Установка JRE/JDK ===

Для установки JDK Вашего профиля по умолчанию, Вы можете запустить <code>emerge virtual/jdk</code>. Или, чтобы установить JRE Вашего профиля по умолчанию, запустите <code>emerge virtual/jre</code>. 

Некоторые JDK и JRE, включая пакеты Sun, требуют принятия пользовательского соглашения (End User License Agreement), или EULA. Если их лицензия (такая как dlj-1.1) не перечислена в переменной ACCEPT_LICENSE в {{Path|/etc/portage/make.conf}}, то Вы не сможете установить JDK/JRE. Чтобы получить больше информации о том, как добавить подходящие лицензии в {{Path|make.conf}}, пожалуйста, прочитайте [http://www.gentoo.org//doc/en/handbook/handbook-x86.xml?part=2&chap=1#doc_chap4 Настольную книгу Portage] . 

Чтобы избежать какой-либо суматохи с лицензионными ограничениями, рассмотрите установку <code>icedtea-bin</code>, который является открытой реализацией Java из проекта OpenJDK. 

{{Note/ru|JDK также включает JRE, поэтому если Вы его установили, Вам не требуется также устанавливать JRE.}}

=== Установка виртуальных машин с ограничениями на скачивание исходного кода ===

Некоторые JDK и JRE требуют, чтобы Вы преодолели несколько препятствий перед установкой. Просто запустите команду emerge как обычно. Ebuild-файлы затем проинструктируют Вас куда идти и что загрузить. 

Вам необходимо скачать отмеченные файлы в {{Path|/usr/portage/distfiles}} . По завершении, Вы сможете перезапустить команду emerge, после чего начнется установка JRE/JDK. 

== Настройка виртуальной машины ==

=== Общий обзор ===

На Gentoo, возможна установка множества разных JDK и JRE без вызова конфликтов. 

Используя инструмент <code>java-config</code>, Вы можете установить JRE и JDK для использованию по умолчанию глобально (при условии, что Вы обладаете доступом root). Пользователи также могут использовать <code>java-config</code> для установки их персональных JRE и JDK по умолчанию. 

{{Note/ru|Вы также можете пользоваться командой ''eselect'' для изменения системной и пользовательской виртуальной машины. Смотри <code>eselect java-vm help</code>.}}

=== Установка виртуальной машины по умолчанию ===

Запуск команды <code>java-config --list-available-vms</code> выведет вам список всех JRE и JDK, установленных на Вашу систему. Ниже приведен пример вывода: 

{{RootCmd|java-config --list-available-vms|output=<pre>
The following VMs are available for generation-2:
1      IcedTea-bin 1.10.4 [icedtea-bin]
2      Sun JDK 1.5.0.20 [sun-jdk-1.5] (Build Only)
*      Sun JDK 1.6.0.16 [sun-jdk-1.6]
</pre>
}}


{{Note/ru|Виртуальные машины, помеченные как Build Only, могут содержать уязвимости безопасности и/или быть неподдерживаемыми продуктами - EOL (end of life). Gentoo не рекомендует установку этих виртуальных машин в качестве системной или пользовательской машины. Пожалуйста, обратитесь к [http://www.gentoo.org/java.xml#build-only Build Only VM] для более подробной информации.}}

''*'' обозначает что эта виртуальная машина активна на данный момент (системная виртуальная машина или пользовательская виртуальная машина, когда это установлено). Имя в скобках (''[]'') является именем или идентификатором этой отдельной машины. Вы можете использовать имя или число в команде <code>java-config --set-system-vm</code>. Здесь представлен пример того как настроить системную виртуальную машину. 

Установка системной виртуальной машины с использованием имени (рекомендуемый способ):

{{RootCmd|java-config --set-system-vm sun-jdk-1.6|output=<pre>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>}}

Вы также можете выбрать ее указав число:

{{RootCmd|java-config --set-system-vm 3|output=<pre>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>
}}

Если Вы являетесь обычным пользователем, Вы можете использовать <code>java-config --set-user-vm</code>. 

{{Note/ru|Вам больше на требуется выполнять команду <code>source</code> для текущего профиля с целью выполнения обновлений пользовательской/системной машин.}}

=== Виртуальные машины Build Only ===

Некоторые виртуальные машины отмечены как build-only, вследствие завершения жизненного цикла (EOL) и/или содержания уязвимостей. Эти виртуальные машины не будут автоматически использованы Gentoo для запуска приложений, использующих запускатели приложений (launchers) Gentoo, но все еще доступны для использования средой выполнения ebuild-файлов Gentoo, так как некоторые пакеты могут их потребовать для сборки. Настройка этих виртуальных машин в качестве системной или пользовательской машины строго не рекомендуется, так как эти виртуальные машины будут в таком случае использованы при запуске исполнимых файлов {{Path|/usr/bin/{java,javac,...}}} и также будут использованы любыми пакетами, не использующими сценарии запускателей Gentoo. 

=== Предпочитаемые Build VM ===

При установке Java-пакетов, виртуальная машина используемая для сборки может иногда отличаться от той, которая установлена в качестве системной виртуальной машины. 

Переключение виртуальных машин во время установки требуется когда, например, ваша системная машина имеет номер версии 1.6, а устанавливаемый пакет требует виртуальную машину версии 1.5. При установке, он выберет для использования машину 1.5, оставив системную виртуальную машину без изменений. 

Чтобы определить какая виртуальная машина выбрана, когда требуется переключение, мы создали список поддерживаемых виртуальных машин - "default/supported VMs" для каждой архитектуры. Вы можете их найти в {{Path|/usr/share/java-config-2/config/jdk-defaults.conf}}. 

Вы можете переписать значения по умолчанию (и даже выбранную Вами системную виртуальную машину) в {{Path|/etc/java-config-2/build/jdk.conf}} и получить полный контроль над тем какая машина будет использована при установке пакета.

Например, чтобы всегда использовать <code>sun-jdk</code>:

{{File|/etc/java-config-2/build/jdk.conf|Установка sun-jdk|<pre>
*=sun-jdk
</pre>
}}

Или, чтобы всегда использовать <code>sun-jdk-1.5</code> там, где это возможно, исключая те случаи, когда явно требуется виртуальная машина версии 1.4 или 1.3:

{{File|/etc/java-config-2/build/jdk.conf|Requiring sun-jdk-1.5 for 1.5 VMs|<pre>
*=sun-jdk-1.5
</pre>
}}

Or to use different providers for different versions, such as requiring <code>sun-jdk-1.4</code> if a 1.3 (yes, 1.3) VM is asked, and fall back to <code>ibm-jdk-bin</code> otherwise:

{{File|/etc/java-config-2/build/jdk.conf|Using multiple expressions|<pre>
1.3=sun-jdk-1.4 ibm-jdk-bin
1.5=sun-jdk
</pre>
}}


{{Warning|You do not ''have'' to edit this file. If you change these options to use a unsupported VM, things could possibly break. Because of the wide variety of available VMs, we do not have the resources to test and verify every package works on all of them. Bugs reported with a unsupported VM won't be prioritized as much as bugs present within supported VMs.}}

== Compilers ==

The standard Java compiler used for building is <code>javac</code>, which comes with each JDK. In addition to configuring the VM used at build time, it is also possible configure which compiler is used. Essentially, you define a list your preference for which compiler to use in {{Path|/etc/java-config-2/build/compilers.conf}}. 

{{File|/etc/java-config-2/build/compilers.conf|Setting compiler preferences|<pre>
COMPILERS="ecj-X.Y jikes javac"
</pre>
}}

Some compilers don't support all possible -target and -source arguments. Therefore, each compiler in the list is checked to see if it can support the desired -source/-target. javac will work in all cases, so if no other suitable compiler is found, it will be used instead. 

More details about each compiler are provided below: 

{| class="wikitable" style="text-align: left;" 
|- 
! Name
! Handle
! Package
! Description
|- 
| javac
| javac
| N/A
| This is the default compiler that will be used, and comes with each JDK.
|- 
| jikes
| jikes
| dev-java/jikes
| Jikes was originally developed by IBM. Anecdotally, it is generally quicker than javac. Note however, that it is more pedantic, and will fail under a few circumstances where javac has no issue. It also does not support Java 1.5 syntax yet.
|- 
| Eclipse Compiler for Java
| ecj
| dev-java/eclipse-ecj
| ECJ is the compiler used by the Eclipse software development kit. It is very full featured, and is pretty fast. It does support Java 1.5 syntax.
|-
|}

== Setting a default CLASSPATH ==

{{Warning|The options explained in this section should be considered deprecated and will most likely be removed in the future. We strongly recommend against using these, because your Java projects or application should ideally manage their own classpaths. If you choose to specify a default CLASSPATH, some applications may behave unexpectedly, because classes they weren't expecting would be on the classpath.}}

<code>java-config</code> can also be used to set a system-wide default CLASSPATH, as well a user-specific default CLASSPATH. 

First, you will want to list available Java libraries installed on your system that might want to be put in your CLASSPATH. Here is an example of output: 

{{RootCmd|java-config --list-available-packages|output=<pre>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>
}}

Again, the names in brackets (''[]'') are the IDs that you have to pass to <code>java-config --set-system-classpath</code>. Here is an example: 


{{RootCmd|java-config --set-system-classpath log4j,xerces-2}}

{{Note|The current directory ({{Path|.}}) will not be part of the system classpath, as that should be added in your system's login profile.}}

You will have to update your environment by logging out, then in again or sourcing {{Path|/etc/profile}}. 

For users, <code>java-config --set-user-classpath</code> will create {{Path|~/.gentoo/java-env-classpath}}, which you should then source from your shell's profile. 

{{Code|Sourcing user specific classpath|<pre>
if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
       source ${HOME}/.gentoo/java-env-classpath
fi
</pre>
}}

If you really want a system wide or user default classpath you can add something like the following to your shell's profile. But we would advise against it. 

{{RootCmd|export CLASSPATH{{=}}"${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"}}

== Java Browser Plugins ==

=== Installing a plugin ===

You can install a Java plugin for your web browser by emerging a Java VM with the <code>nsplugin</code> USE flag set.

{{Note|<code>nsplugin</code> is not available for all architectures. Check for available plugins on your arch before trying to install a VM by running<code>emerge -pv <java-vm></code>.}}

Portage will allow you to install multiple versions of Java plugins, though only one will be used by your browser. You can check the list of available plugins by running: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6
   [2]   icedtea-bin
</pre>
}}

In this example, <code>sun-jre-bin</code> is selected for the browser plugin. 

{{RootCmd|eselect java-nsplugin set sun-jre-bin-1.6}}

Verify that the correct plugin was selected: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6  current
   [2]   icedtea-bin
</pre>
}}

Java.com also provides a link to [http://java.com/en/download/installed.jsp verify your installed plugin]. Additionally, if you are using a Mozilla-based browser, you can verify your Java plugin by typing <code>about:plugins</code> into the address bar. 

=== Plugins on multilib systems ===

If you are running a mixed 64-bit and 32-bit multilib system (for example, on AMD64), you can use 64-bit and 32-bit Java plugins. Unless you have a pressing need to run 32-bit Java applications, we recommend using native 64-bit plugins on 64-bit web browsers. 

There are several native 64-bit browser plugins available. The default JDK/JRE pair, <code>sun-jdk</code> and <code>sun-jre-bin</code>, both include browser plugins. Just emerge one of them with the <code>nsplugin</code> USE flag enabled. 

{{RootCmd|echo "dev-java/sun-jre-bin nsplugin" >> /etc/portage/package.use
|emerge sun-jre-bin}}

To use a 32-bit plugin on a 32-bit browser, you will need to emerge <code>emul-linux-x86-java</code> with the <code>nsplugin</code> USE flag enabled. 

{{RootCmd|echo "app-emulation/emul-linux-x86-java nsplugin" >> /etc/portage/package.use
|emerge emul-linux-x86-java}}

Next, check which plugins are available: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6
</pre>
}}

Now select the right plugin for your browsers: 

{{RootCmd|eselect java-nsplugin set 32bit emul-linux-x86-java-1.6
|eselect java-nsplugin set 64bit sun-jre-bin-1.6}}

Verify the correct plugin was selected: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6  current
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6  current
</pre>
}}

== USE flags for use with Java ==

=== Setting USE flags ===

For more information regarding USE flags, refer to the [http://www.gentoo.org//doc/en/handbook/handbook-x86.xml?part=2&chap=2 USE flags] chapter from the Gentoo Handbook. 

=== The flags ===

* The '''java''' flag adds support for Java in a variety of programs
* The '''nsplugin''' flag adds support for Mozilla-like browsers (including Firefox). You will need this for viewing Java applets in your Mozilla-like browser.
* The '''source''' flag installs a zip of the source code of a package. This is traditionally used for IDEs to 'attach' source to the libraries you are using.
* The '''jce''' flag adds support for the Java Cryptography Engine
* For Java packages, the '''doc''' flag will build API documentation using javadoc.

== Additional resources ==

=== Off-line resources ===

* java-config man page
* <code>java-config --help</code>

=== Online resources ===

* The [http://www.gentoo.org/proj/en/java/ Java Project Page] 
* The [http://news.gmane.org/gmane.linux.gentoo.java gentoo-java], [http://news.gmane.org/gmane.linux.gentoo.user gentoo-user], and [http://news.gmane.org/gmane.linux.gentoo.devel gentoo-dev] mailing list archives
* [http://www.gentoo.org/irc://irc.gentoo.org/gentoo #gentoo] and [http://www.gentoo.org/irc://irc.gentoo.org/gentoo-java #gentoo-java] on IRC
* [http://en.wikipedia.org/wiki/Java_programming_language Wikipedia's entry for Java] 
* If you have suggestions or questions regarding this document, please email the Gentoo Java team: {{Mail|java@gentoo.org}}

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Joshua Nichols
* Karl Trygve Kalleberg
* Joshua Saddler
