<languages />

{{InfoBox stack
|{{InfoBox wikipedia|Puppet (software)|header=true}}
|{{InfoBox ohloh}}
}}

'''Puppet''' - это система управления конфигурациями, написанная на языке программирования [[Ruby]]. Она может использоваться для автоматизации развертывания системы на новых машинах.

== Установка ==
Puppet предоставляется пакетом Gentoo {{Package|app-admin/puppet}}. В данный момент, не существует разницы между клиентом и сервером, поэтому основная процедура установки для них одна и та же.

Для начала, установите Puppet с помощью <tt>emerge</tt>: {{Emerge|puppet}}

== Конфигурация и настройка ==
В основном, Puppet конфигурируется через файл {{Path|/etc/puppet/puppet.conf}}, написанный в стиле формата ini. Комментарии отмечены знаком решетки (<tt>#</tt>). Файл конфигурации разбит на несколько разделов, или блоков:

* <tt>[main]</tt> содержит настройки, которые действуют по умолчанию для всех частей Puppet, до тех пор, пока они не переписываются настройками в каком-либо из следующих разделов:
** <tt>[master]</tt> используется для настроек, касающихся Puppetmaster (<tt>puppet master</tt>), или утилиты CA (<tt>puppet cert</tt>)
** <tt>[agent]</tt> используется для настроек, касающихся Puppet agent (<tt>puppet agent</tt>)

Более глубокое объяснение, вместе со списком дальнейших блоков, доступно в [http://docs.puppetlabs.com/guides/configuring.html официальной документации Puppet]. Также, существует [http://docs.puppetlabs.com/references/stable/configuration.html список всех параметров конфигурации], некоторые из которых, конечно же, имеют смысл только тогда, когда применяются или к серверу, или к клиенту.

=== Server (Puppetmaster) Setup ===
The default configuration put by the Ebuild into {{Path|puppet.conf}} can be used as-is. For Puppet 2.7.3, the server-related parts look like this:
{{File|/etc/puppet/puppet.conf|Server-related default configuration|<pre>
[main]
    # The Puppet log directory.
    # The default value is '$vardir/log'.
    logdir = /var/log/puppet

    # Место, где хранятся pid-файлы Puppet.
    # Значение по умолчанию '$vardir/run'.
    rundir = /var/run/puppet

    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
    ssldir = $vardir/ssl
</pre>}}

==== Настройка файлового сервера ====
Для того, чтобы отправить клиентам файлы, файловый сервер должен быть сконфигурирован в {{Path|/etc/puppet/fileserver.conf}}. По умолчанию, туда не включено ни одного файла.

{{File|/etc/puppet/fileserver.conf|Настройка общего <tt>файлового</tt> ресурса|<pre>
[files]
    path /var/lib/puppet/files
    allow 192.168.0.0/24
</pre>}}

Фрагмент выше настраивает общий ресурс с названием <tt>files</tt> (запомните этот идентификатор, так как на него будет необходимо сослаться в дальнейшем), осуществляющий поиск файлов в {{Path|/var/lib/puppet/files}} и доступный только для хостов сети 192.168.0.0/24. Здесь Вы можете использовать ip-адреса, бесклассовую адресацию, и имена хостов (включая шаблонные знаки, наподобие <tt>*.domain.invalid</tt>). Команда <tt>deny</tt> может использоваться для явного запрета доступа к определенным компьютерам или диапазонам IP-адресов.

==== Запуск демона Puppetmaster ====
{{Note/ru|Рекомендуется, чтобы Puppetmaster был доступен с клиентов, использующих имя хоста <tt>puppet</tt>. Однако, имя может быть переопределено, что, конечно же, требует переконфигурацию.}}

{{Important/ru|На этот момент, имя хоста, в том виде, в каком оно доступно клиентам, должно быть таким же, как и результат работы команды <tt>hostname -f</tt>. Вам может быть необходимо поправить {{Path|/etc/hosts}}, чтобы это сделать, или вручную создать новый сертификат [[#Manually generating certificates|как описано ниже]].}}

С этой базовой конфигурацией, вместе с первоначальными настройками файлового сервера, мы можем запустить демон Puppetmaster, используя его сценарий инициализации:
{{RootCmd|/etc/init.d/puppetmaster start}}

В течение первого запуска, Puppet генерирует SSL сертификат для хоста Puppetmaster и размещает его в <tt>ssldir</tt>, как показано в конфигурации выше.

Он слушает порт 8140/TCP; убедитесь, что настройки межсетевого экрана не запрещают доступ c клиентов.

==== A simple manifest ====
Manifests, in Puppet's terminology, are the files in which the client configuration is specified.
The documentation contains a [http://docs.puppetlabs.com/guides/language_guide.html comprehensive guide] about the manifest markup language.

As a simple example, let's create a ''message of the day'' (motd) file on the client. On the puppetmaster, create a file inside the <tt>files</tt> share created earlier:

{{File|/var/lib/puppet/files/motd|MOTD file on the server|<pre>
Welcome to this Puppet-managed machine!
</pre>}}

Then, we have to create the main manifest file in the <tt>manifests</tt> directory. It is called <tt>site.pp</tt>:

{{File|/etc/puppet/manifests/site.pp|Main manifest on the server|<pre>
node default {
  file { '/etc/motd':
    source => 'puppet://puppet/files/motd'
  }
}
</pre>}}

The <tt>default</tt> ''node'' (the name for a client) definition is used in case there is no specific <tt>node</tt> statement for the host.
We use a <tt>file</tt> resource and want the {{Path|/etc/motd}} file on our clients to contain the same thing as the <tt>motd</tt> file in the <tt>files</tt> share on the host <tt>puppet</tt>. If your puppetmaster is reachable only using another host name, you have to adapt the <tt>source</tt> URI accordingly.

=== Client Configuration ===
{{Important|The client '''must''' have the '''same major and minor version''' as the Puppetmaster. Using a 2.7.1 Puppetmaster with 2.7.2 clients is fine, but using 2.6 for the server and 2.7 for clients can cause unexpected issues at any time.}}

{{Note|If your puppetmaster is not reachable via <tt>puppet</tt>, set <tt>server{{=}}&lt;your hostname&gt;</tt> to the actual host name in {{Path|/etc/puppet/puppet.conf}} in the <tt>[main]</tt> section.}}

During the first execution of the Puppet agent, you have to wait for your certificate to be signed by the puppetmaster. To request a certificate, and run your first configuration run, execute:

{{RootCmd|puppet agent --test --waitforcert 60|prompt=root@client #
|output=<pre>
info: Creating a new certificate request for client
info: Creating a new SSL key at /var/lib/puppet/ssl/private_keys/client.pem
notice: Did not receive certificate
</pre>}}

Before the client can connect, you have to authorize the certificate request on the server. Our client should appear in the list of nodes requesting a certificate:
{{RootCmd|puppet cert --list
|prompt=root@server #
|output=client}}

Now, we grant the request:
{{RootCmd|puppet cert --sign client
|prompt=root@server #}}

The client will check every 60 seconds whether its certificate has already been issued. After that, it continues with the first configuration run:
{{GenericCmd|<pre>
info: Caching catalog for client
info: Applying configuration version '1317317379'
notice: /Stage[main]//Node[default]/File[/etc/motd]/ensure: defined content as '{md5}30ed97991ad6f591b9995ad749b20b00'
notice: Finished catalog run in 0.05 seconds
</pre>}}

When you're seeing this message, all went well. You can now check the contents of your {{Path|/etc/motd}} file on the client:
{{Cmd|cat /etc/motd
|prompt=user@client $
|output=Welcome to this Puppet-managed machine!}}

You can now start the puppet agent as a deamon and have it launch on boot:
{{RootCmd|/etc/init.d/puppet start
|rc-update add puppet default
|prompt=root@client #}}

== Other Topics ==

=== Manually generating certificates ===
To manually generate a certificate, you can use the <tt>puppet cert</tt> utility.
It will place all generated certificates into the <tt>ssldir</tt> as set in the puppet configuration and will sign them with the key of your local Puppet Certificate Authority (CA).

An easy case is the generation of a certificate with '''only one Common Name:'''
{{RootCmd|puppet cert --generate host1}}

If you need to have '''multiple host names''' the certificate is valid for, use the <tt>--certdnsnames</tt> parameter and separate the additional host names with a colon:
{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

This example will generate a certificate valid for the three listed host names.

=== Managing slots with puppet ===
While the default portage provider in puppet does not support slots, a [https://github.com/whatbox/PortageGT 3rd party plugin] is available to enable this functionality in puppet.

== External resources ==
* [http://puppetlabs.com/ Upstream website]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]


[[Category:Server]]
[[Category:Security]]
