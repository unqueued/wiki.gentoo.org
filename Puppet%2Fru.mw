<languages />

{{Metadata|abstract=Puppet это система управления конфигурациями, написанная на языке программирования Ruby. Она может использоваться для автоматизации развертывания системы на новых машинах.}}

{{InfoBox stack
|{{InfoBox homepage|https://puppetlabs.com/puppet/puppet-open-source|header=true}}
|{{InfoBox wikipedia|Puppet (software)}}
|{{InfoBox ohloh}}
}}

'''Puppet''' - это система управления конфигурациями, написанная на языке программирования [[Ruby]]. Она может использоваться для автоматизации развертывания системы на новых машинах.

== Installation ==

Puppet is provided by the {{Package|app-admin/puppet}} package.

Currently, there is no distinction between server and client, so the basic installation procedure is the same for both.

=== Emerge ===

Для начала, установите Puppet с помощью {{c|emerge}}:

{{Emerge|app-admin/puppet}}

== Конфигурация и настройка ==

В основном, Puppet конфигурируется через файл {{Path|/etc/puppet/puppet.conf}}, написанный в стиле формата ini. Комментарии отмечены знаком решетки (<tt>#</tt>).

Файл конфигурации разбит на несколько разделов, или блоков:

* <tt>[main]</tt> содержит настройки, которые действуют по умолчанию для всех частей Puppet, до тех пор, пока они не переписываются настройками в каком-либо из следующих разделов:
** <tt>[master]</tt> используется для настроек, касающихся Puppetmaster (<tt>puppet master</tt>), или утилиты CA (<tt>puppet cert</tt>)
** <tt>[agent]</tt> используется для настроек, касающихся Puppet agent (<tt>puppet agent</tt>)

Более глубокое объяснение, вместе со списком дальнейших блоков, доступно в [http://docs.puppetlabs.com/guides/configuring.html официальной документации Puppet]. Также, существует [http://docs.puppetlabs.com/references/stable/configuration.html список всех параметров конфигурации], некоторые из которых, конечно же, имеют смысл только тогда, когда применяются или к серверу, или к клиенту.

=== Настройка (Puppetmaster) сервера ===

Настройки по умолчанию, помещенные ebuild-файлом в {{Path|puppet.conf}} могут использоваться как есть. Для Puppet 2.7.3, части, относящиеся к серверу выглядят следующим образом:

{{FileBox|filename=/etc/puppet/puppet.conf|title=Конфигурация по умолчанию, относящаяся к серверу|lang=ini|1=
[main]
    # Каталог логов Puppet.
    # Значение по умолчанию '$vardir/log'.
    logdir = /var/log/puppet

    # Место, где хранятся pid-файлы Puppet.
    # Значение по умолчанию '$vardir/run'.
    rundir = /var/run/puppet

    # Место, где хранятся  SSL-сертификаты.
    # Значение по умолчанию '$confdir/ssl'.
    ssldir = $vardir/ssl
}}

==== Настройка файлового сервера ====

Для того, чтобы отправить клиентам файлы, файловый сервер должен быть сконфигурирован в {{Path|/etc/puppet/fileserver.conf}}. По умолчанию, туда не включено ни одного файла.

{{FileBox|filename=/etc/puppet/fileserver.conf|title=Настройка общего <tt>файлового</tt> ресурса|lang=ini|1=
[files]
    path /var/lib/puppet/files
    allow 192.168.0.0/24
}}

The snippet above sets up a share called <tt>files</tt> (remember this identifier, as it will need to be referenced later), looking for files in {{Path|/var/lib/puppet/files}} and only available for hosts with an IP from the 192.168.0.0/24 network. Any of the IP addresses, CIDR notation, and host names (including wildcards like <tt>*.domain.invalid</tt>) can be used here. The <tt>deny</tt> command can be used to explicitly deny access to certain hosts or IP ranges.

==== Starting the puppetmaster daemon ====

{{Note|It is recommended that the Puppetmaster is reachable from the clients using the host name <tt>puppet</tt>. However, the name can be overridden, which of course causes configuration effort.}}

{{Important|At this point, the host name as seen from the clients should be the same as the output of <tt>hostname -f</tt>. To achieve this, the {{Path|/etc/hosts}} file might have to be adjusted, or a new certificate can be created manually as [[#Manually generating certificates|explained below]].}}

With the basic configuration as well as an initial file server configuration, we can start the Puppetmaster daemon using its OpenRC init script:

{{RootCmd|/etc/init.d/puppetmaster start}}

В течение первого запуска, Puppet генерирует SSL сертификат для хоста Puppetmaster и размещает его в <tt>ssldir</tt>, как показано в конфигурации выше.

Он слушает порт 8140/TCP; убедитесь, что настройки межсетевого экрана не запрещают доступ клиентам.

==== A simple manifest ====

Manifests, in Puppet's terminology, are the files in which the client configuration is specified.
The documentation contains a [http://docs.puppetlabs.com/guides/language_guide.html comprehensive guide] about the manifest markup language.

В качестве простого примера, давайте создадим файл с сообщением дня (message of the day, сокращенно motd) на клиенте. На puppetmaster, создайте файл внутри общего файлового ресурса <tt>files</tt>, созданного ранее:

{{FileBox|filename=/var/lib/puppet/files/motd|title=MOTD-файл на сервере|1=
Добро пожаловать на эту машину под управлением Puppet!
}}

Затем, нам необходимо создать основной файл манифеста в каталоге <tt>manifests</tt>. Он называется <tt>site.pp</tt>:

{{FileBox|filename=/etc/puppet/manifests/site.pp|title=Основной файл манифеста на сервере|lang=ruby|1=
node default {
  file { '/etc/motd':
    source => 'puppet:///puppet/files/motd'
  }
}
}}

The <tt>default</tt> ''node'' (the name for a client) definition is used in case there is no specific <tt>node</tt> statement for the host.
We use a <tt>file</tt> resource and want the {{Path|/etc/motd}} file on our clients to contain the same thing as the <tt>motd</tt> file in the <tt>files</tt> share on the host <tt>puppet</tt>. If the puppetmaster is only reachable using another host name, adapt the <tt>source</tt> URI accordingly.

=== Client configuration ===

{{Important|The client '''must''' have the '''same major and minor version''' as the Puppetmaster. Using a 2.7.1 Puppetmaster with 2.7.2 clients is fine, but using 2.6 for the server and 2.7 for clients can cause unexpected issues at any time.}}

{{Note|If the puppetmaster is not reachable via <tt>puppet</tt>, set <tt>server{{=}}&lt;the hostname&gt;</tt> to the actual host name in {{Path|/etc/puppet/puppet.conf}} in the <tt>[main]</tt> section.}}

During the first execution of the Puppet agent, wait for the certificate to be signed by the puppetmaster. To request a certificate, and execute the first configuration run, execute:

{{RootCmd|puppet agent --test --waitforcert 60|prompt=root@client #
|output=<pre>
info: Creating a new certificate request for client
info: Creating a new SSL key at /var/lib/puppet/ssl/private_keys/client.pem
notice: Did not receive certificate
</pre>}}

Before the client can connect, authorize the certificate request on the server. The client should appear in the list of nodes requesting a certificate:

{{RootCmd|puppet cert --list
|prompt=root@server #
|output=client}}

Now, we grant the request:

{{RootCmd|puppet cert --sign client
|prompt=root@server #}}

The client will check every 60 seconds whether its certificate has already been issued. After that, it continues with the first configuration run:

{{GenericCmd|<pre>
info: Caching catalog for client
info: Applying configuration version '1317317379'
notice: /Stage[main]//Node[default]/File[/etc/motd]/ensure: defined content as '{md5}30ed97991ad6f591b9995ad749b20b00'
notice: Finished catalog run in 0.05 seconds
</pre>}}

When this message pops up, all went well. Now check the contents of the {{Path|/etc/motd}} file on the client:

{{Cmd|cat /etc/motd
|prompt=user@client $
|output=Welcome to this Puppet-managed machine!}}

==== OpenRC ====

Start the puppet agent as a deamon and have it launch on boot:

{{RootCmd|/etc/init.d/puppet start
|rc-update add puppet default
|prompt=root@client #}}

==== Systemd ====

Conversely, when running systemd:

{{RootCmd|systemctl start puppet
|systemctl enable puppet
|prompt=root@client #}}

== Other topics ==

=== Manually generating certificates ===

To manually generate a certificate, use the <tt>puppet cert</tt> utility.
It will place all generated certificates into the <tt>ssldir</tt> as set in the puppet configuration and will sign them with the key of the local Puppet Certificate Authority (CA).

An easy case is the generation of a certificate with '''only one Common Name:'''

{{RootCmd|puppet cert --generate host1}}

If the certificate has to be valid for '''multiple host names''', use the <tt>--certdnsnames</tt> parameter and separate the additional host names with a colon:

{{RootCmd|puppet cert --generate --certdnsnames puppet:puppet.domain.invalid host1.domain.invalid}}

Этот пример сгенерирует сертификат, действительный для трех перечисленных имен хоста.

=== Refreshing agent certificates ===

This is the process used to manually refresh agent certificates.

# (on master) {{RootCmd|puppet cert clean ${AGENT_HOSTNAME} }}
# (on agent) {{RootCmd|rm /etc/puppet/ssl/{certs,certificate_requests}/${AGENT_HOSTNAME}.pem}}
#* This will cause the Puppet agent to regenerate the CSR with the existing SSL key.
#* The old certificate is no longer valid, as it was nuked on the master.
#* When one of the above steps is forgotten, an error will pop up about the certificate mis-matching between agent and master.
#* To replace the SSL keys (optional): {{RootCmd|rm /etc/puppet/ssl/{public,private}_keys/${AGENT_HOSTNAME}.pem}}
# (on agent) {{RootCmd|puppet agent --onetime --no-daemonize --verbose --test --waitforcert 30}}
#* When using auto-signing, no further steps are needed.
# (on master) {{RootCmd|puppet cert list ${AGENT_HOSTNAME} }}
# Verify that the fingerprint listed in the previous two outputs matches
# (on master) {{RootCmd|puppet cert sign ${AGENT_HOSTNAME} }}
# (on agent) {{RootCmd|puppet agent --onetime --no-daemonize --verbose --test}}

=== Managing slots with puppet ===

While the default portage provider in puppet does not support slots there are puppet modules available which seek to add in this functionality.

* [https://github.com/gentoo/puppet-portage puppet-portage]
* [https://github.com/whatbox/PortageGT PortageGT]

== External resources ==

* [http://puppetlabs.com/ Upstream website]
* [http://projects.puppetlabs.com/projects/puppet/wiki Puppet Wiki]


[[Category:Server]]
[[Category:Security]]
