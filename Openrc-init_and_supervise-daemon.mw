{{InfoBox stack
|{{InfoBox header|openrc-init}}
|{{InfoBox homepage|https://github.com/OpenRC/openrc/blob/master/NEWS.md}}
|{{InfoBox header|supervise-daemon}}
|{{InfoBox homepage|https://github.com/OpenRC/openrc/blob/master/supervise-daemon-guide.md}}
|{{InfoBox manpage|http://manpages.org/supervise-daemon/8|raw=true}}
}}

OpenRC has developed itself and has gained some new features. In this article two features are highlighted:

* openrc-init, is OpenRC's own init system, and can act as a replacement for [[sysvinit]], and 
* supervise-daemon, which can supervise daemon processes. Supervise-daemon could replace start-stop-daemon, which is used by quite a few services.

{{Warning|In the source code of the current version of supervise-daemon it is still stated that it is '''experimental'''. Use supervise-daemon at own risk.}}

== openrc-init ==

Replacing sysvinit with openrc-init takes a few steps. The description that follows refers to grub.

* Pass <code>init=/sbin/openrc-init</code> on the kernel's commandline. Update {{Path|/etc/default/grub}} as follows: {{FileBox|filename=/etc/default/grub|lang=ini|1=
#GRUB_CMDLINE_LINUX_DEFAULT=""
GRUB_CMDLINE_LINUX_DEFAULT="init=/sbin/openrc-init" }} 
* Regenerate {{Path|/boot/grub/grub.cfg}}: {{RootCmd
|grub-mkconfig -o /boot/grub/grub.cfg }}
* Make sure agetty processes for tty1 to tty6 will be started under openrc-init: {{RootCmd
|cd /etc/init.d |for n in `seq 1 6`; do ln -s agetty agetty.tty$n; rc-config add agetty.tty$n default; done }}
* Reboot your system: {{RootCmd
| reboot }}

Be aware that commands like {{c|reboot}}, and {{c|shutdown}} are no longer working under openrc-init. Use {{c|openrc-shupdown -r now}}, or {{c|openrc-shutdown now}} instead.

== supervise-daemon ==

OpenRC traditionally uses {{c|start-stop-daemon}}, often called ''s-s-d'' for starting, and stopping programs. When s-s-d starts a process it saves the process' PID somewhere on permanent storage (typically under {{Path|/run/}}), and backgrounds (daemonizes) the process it started. When the time comes to stop, kill, or signal the daemon it uses the saved PID file to find the right process.

Supervising on the other hand usually keeps the started daemon as a child process of the supervisor. Backgrounding the daemon is therefore not needed, and not desired. An advantage of supervising a daemon is also that any terminal output sent to stdout and stderr can be caught by the supervisor, and sent to the system logger or to a file. Pidfiles are not needed because the supervisor process remembers the pid.

Bringing a service under supervision theoretically should be as easy as adding <code>supervisor="supervisor-daemon"</code> to its conf file in {{Path|/etc/conf.d}}. It turns out to be a little more complex in some cases.

OpenRC has the concept that services' startup code, the init files in {{Path|/etc/init.d/}} can be adjusted through configuration files in {{Path|/etc/conf.d}}. With this concept it is possible to add environment variables, or commandline options in the configuration file and not change the init file. Some init files however don't implement this concept fully and define variables in the init file that cannot be adjusted in the conf file. Examples are:

* defining a pidfile variable in an init file, e.g. in {{Path|/etc/init.d/bluetooth}}: <code>pidfile="/run/bluetoothd.pid"</code>
* defining variables in the init file, rather then in the conf file, e.g. in {{Path|/etc/init.d/iwd}}: <code>command_background="yes"</code>
* not allowing for expansion of a variable, e.g. in  {{Path|/etc/init.d/dbus}}: <code>command_args="--system"</code>
In such cases it might be needed to adjust the init file and not just the conf file.

Other cases that might need adjusting the init files are explicit references to the underlying utility s-s-d, which is not used in case of supervising.

The examples that follow for bringing a service under supervision all require that the a service is brought down prior to editing files in {{Path|/etc/conf.d}} or {{Path|/etc/init.d}}.

=== agetty ===

agetty was already brought under supervise-daemon in the previous chapter. 

{{RootCmd
|ps aux {{!}}  grep agetty 
|output=<pre>
root      1171  0.0  0.1   3020  1832 pts/1    S+   10:16   0:00 grep --colour=auto agetty
root      2666  0.0  0.1   2984  1492 ?        S    Jun08   0:00 supervise-daemon agetty-autologin.tty1 --start --pidfile /run/agetty-autologin.tty1.pid --respawn-period 60 /sbin/agetty -- --autologin hfern --noclear tty1 linux
root      2694  0.0  0.1   2984  1440 ?        S    Jun08   0:00 supervise-daemon agetty.tty2 --start --pidfile /run/agetty.tty2.pid --respawn-period 60 /sbin/agetty -- tty2 linux
root      2695  0.0  0.2   4732  2584 tty2     Ss+  Jun08   0:00 /sbin/agetty tty2 linux
root      2723  0.0  0.1   2984  1492 ?        S    Jun08   0:00 supervise-daemon agetty.tty3 --start --pidfile /run/agetty.tty3.pid --respawn-period 60 /sbin/agetty -- tty3 linux
root      2724  0.0  0.2   4732  2428 tty3     Ss+  Jun08   0:00 /sbin/agetty tty3 linux
root      2770  0.0  0.1   2984  1412 ?        S    Jun08   0:00 supervise-daemon agetty.tty4 --start --pidfile /run/agetty.tty4.pid --respawn-period 60 /sbin/agetty -- tty4 linux
root      2771  0.0  0.2   4732  2344 tty4     Ss+  Jun08   0:00 /sbin/agetty tty4 linux
root      2828  0.0  0.1   2984  1516 ?        S    Jun08   0:00 supervise-daemon agetty.tty5 --start --pidfile /run/agetty.tty5.pid --respawn-period 60 /sbin/agetty -- tty5 linux
root      2830  0.0  0.2   4732  2476 tty5     Ss+  Jun08   0:00 /sbin/agetty tty5 linux
root      2869  0.0  0.1   2984  1420 ?        S    Jun08   0:00 supervise-daemon agetty.tty6 --start --pidfile /run/agetty.tty6.pid --respawn-period 60 /sbin/agetty -- tty6 linux
root      2870  0.0  0.2   4732  2584 tty6     Ss+  Jun08   0:00 /sbin/agetty tty6 linux
</pre>}}

Careful examination shows that there are still references to pidfiles. These pidfiles refer actually to the supervise-daemon process and not to the agetty daemons. To avoid confusion it is better to remove them. 
Comment the pidfile defintion out in {{Path|/etc/init.d/agetty}} to fix it:
{{FileBox|filename=/etc/init.d/agetty|lang=ini|1=
#pidfile="/run/${RC_SVCNAME}.pid"
}}

=== acpid ===

Reviewing the man page of {{c|acpid}} reveals:

* ''.. will run as  background process ..''
* ''.. -f, --foreground .. keeps acpid in the foreground by not forking at startup, and makes it log to stderr instead of syslog.''

Edit {{Path|/etc/conf.d/acpid}} as follows to make acpid run under supervise-daemon:

{{FileBox|filename=/etc/conf.d/acpid|lang=ini|1=
#ACPID_ARGS=""
ACPID_ARGS="--foreground"
supervisor="supervise-daemon"
}}

Start up the service:
{{RootCmd|rc-service acpid start|output=<pre>
acpid                  | * Starting acpid ...                           [ ok ]
</pre>
}}

Verify if acpid is now running under supervise-daemon:

{{RootCmd|ps -ef {{!}}  grep acpid 
|output=<pre>
root      7450     1  0 15:32 ?        00:00:00 supervise-daemon acpid --start /usr/sbin/acpid -- --foreground
root      7454  7450  0 15:32 ?        00:00:01 /usr/sbin/acpid --foreground
</pre>}}

Check the logs as well:

{{RootCmd|tail /var/log/messages|output=<pre>
Jun 10 09:10:27 [supervise-daemon] Supervisor command line: supervise-daemon acpid --start /usr/sbin/acpid -- --foreground
Jun 10 09:10:27 [supervise-daemon] Child command line: /usr/sbin/acpid --foreground
</pre>}}

And when you create an acpid event, it will be logged:

{{RootCmd|tail /var/log/messages|output=<pre>
Jun 10 09:15:08 [user] ACPI event unhandled: button/mute MUTE 00000080 00000000 K
</pre>}}

Lastly, check if supervise-daemon will restart acpid when it terminates:

{{RootCmd |kill 7454 |tail /var/log/messages|output=<pre>
Jun 10 09:54:20 [supervise-daemon] /usr/sbin/acpid, pid 7454, exited with return code 0
Jun 10 09:54:20 [supervise-daemon] Child command line: /usr/sbin/acpid --foreground 
</pre>}}

{{RootCmd|ps ef {{!}}  grep acpid |output=<pre>
root      7450     1  0 15:32 ?        00:00:00 supervise-daemon acpid --start /usr/sbin/acpid -- --foreground
root      8931  7450  0 15:32 ?        00:00:01 /usr/sbin/acpid --foreground
</pre>}}

Notice the different PID.

=== avahi-daemon ===

{{Package|net-dns/avahi}} contains a service ''avahi-daemon'' for service discovery. Its init file {{Path|/etc/init.d/avahi-daemon}} does not make use of s-s-d, but calls the binary {{Path|/usr/sbin/avahi-daemon}} directly and gives it the instruction to daemonize: <code>/usr/sbin/avahi-daemon -D</code> on startup. This can be simply adjusted by defining the command variable as <code>command="/usr/sbin/avahi-daemon"</code>, and removing the start and stop functions from the file. Of course it is also needed to specify the supervisor.

Edit {{Path|/etc/init.d/avahi-daemon}} as follows:

{{CodeBox|title=/etc/init.d/avahi-daemon|lang=bash|1=
#!/sbin/openrc-run
# Copyright 1999-2016 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

extra_started_commands="reload"
command="/usr/sbin/avahi-daemon"
supervisor="supervise-daemon"

depend() {
        before netmount nfsmount
        use net
        need dbus
}

#start() {
#       ebegin "Starting avahi-daemon"
#       /usr/sbin/avahi-daemon -D
#       eend $?
#}
#
#stop() {
#       ebegin "Stopping avahi-daemon"
#       /usr/sbin/avahi-daemon -k
#       eend $?
#}

reload() {
       ebegin "Reloading avahi-daemon"
#      /usr/sbin/avahi-daemon -r
       ${command} -r
       eend $?
}
}}

Start the service back up:

{{RootCmd |rc-service avahi-daemon start|output=<pre>
avahi-daemon           | * Caching service dependencies ...                              [ ok ]
avahi-daemon           | * Starting avahi-daemon ...                                     [ ok ]
</pre>}}

Verify that the service is now supervised:

{{RootCmd |ps -ef {{!}} grep avahi|output=<pre>
root     27390     1  0 10:30 ?        00:00:00 supervise-daemon avahi-daemon --start /usr/sbin/avahi-daemon --
avahi    27392 27390  0 10:30 ?        00:00:00 avahi-daemon: running [e485.local]
avahi    27397 27392  0 10:30 ?        00:00:00 avahi-daemon: chroot helper
</pre>}}

=== bluetooth ===
{{Package|Net-wireless/bluez}} provides bluetooth services. The recipe to bring it under supervise-daemon with the following steps is as follows:
* remove the pidfile reference
* remove the background instruction
* define the supervisor

Edit {{Path|/etc/init.d/bluetooth}} as follows:
{{CodeBox|title=/etc/init.d/bluetooth|lang=bash|1=
#pidfile="/run/bluetoothd.pid"
command="/usr/libexec/bluetooth/bluetoothd"
#command_background=1
supervisor="supervise-daemon"
}}



=== cupsd ===

[https://www.cups.org/ Cups] is the well known printing system of linux. Its daemon ''cupsd'' is provided by {{Package|net-print/cups}}.

Remove the pidfile and s-s-d instructions from {{Path|/etc/init.d/cupsd}} by commenting them out, and add the supervisor declaration to bring it under supervision:

{{CodeBox|title=/etc/init.d/cupsd|lang=bash|1=
#pidfile="/var/run/cupsd.pid"
#start_stop_daemon_args="-b -m --pidfile ${pidfile}"
supervisor="supervise-daemon"

}}

=== fcron ===

{{Package|sys-process/fcron}} is a cron daemon implementation.

Edit {{Path|/etc/init.d/fcron}} as follows:

{{CodeBox|title=/etc/init.d/fcron|lang=bash|1=
#command_args="-c \"${FCRON_CONFIGFILE}\""
command_args="-c \"${FCRON_CONFIGFILE}\" ${FCRON_OPTS} --foreground"
#start_stop_daemon_args=${FCRON_SSDARGS:-"--wait 1000"}
#pidfile="$(getconfig pidfile /run/fcron.pid)"
supervisor="supervise-daemon"
}}

=== iwd ===

Iwd (iNet wireless daemon) is provided by {{Package|net-wireless/iwd}} and aims to replace {{Package|net-wireless/wpa_supplicant}}. Remove the backgrounding instruction and define the supervisor to bring ''iwd'' under supervision:

Edit {{Path|/etc/init.d/iwd}} as follows:
{{CodeBox|title=/etc/init.d/iwd|lang=ini|1=
#command_background="yes"
supervisor="supervise-daemon"
}}

=== ntpd ===
The network time protocol daemon ''ntpd'', from package {{Package|net-misc/ntp}} can be brought under supervision by editing the init file to:
* remove the pidfile reference, 
* prevent forking to background by adding "-n" to the command line to  of the ntpd daemon, 
* define the supervisor.

{{FileBox|filename=/etc/conf.d/ntpd|lang=ini|1=
#pidfile="/var/run/ntpd.pid"
command="/usr/sbin/ntpd"
#command_args="-p ${pidfile} ${NTPD_OPTS}"
command_args="-n ${NTPD_OPTS}"
#start_stop_daemon_args="--pidfile ${pidfile}"
supervisor="supervise-daemon"
}}

=== sshd ===
Sshd (Secure shell daemon) does not have a specific commandline option to run in foreground, instead it is needed to use the <code> -D </code> debug option. There may be some more text logged.

Edit {{Path|/etc/init.d/sshd}} at the beginning of the file as follows:

{{CodeBox|title=/etc/init.d/sshd|lang=ini|1=
#pidfile="${SSHD_PIDFILE}"
#command_args="${SSHD_OPTS} -o PidFile=${pidfile} -f ${SSHD_CONFIG}"
command_args="${SSHD_OPTS} -f ${SSHD_CONFIG} -D"
supervisor="supervise-daemon"

# Wait one second (length chosen arbitrarily) to see if sshd actually
# creates a PID file, or if it crashes for some reason like not being
# able to bind to the address in ListenAddress (bug 617596).
#: ${SSHD_SSD_OPTS:=--wait 1000}
#start_stop_daemon_args="${SSHD_SSD_OPTS}"
}}

All the way at the bottom of the file there is the reload function in which the s-s-d instruction should be changed to a supervise-daemon instruction:

{{CodeBox|title=/etc/init.d/sshd|lang=ini|1=

reload() {
        checkconfig {{!}}{{!}} return $?
        ebegin "Reloading ${SVCNAME}"
#       start-stop-daemon --signal HUP --pidfile "${pidfile}"
        ${supervisor} ${SVCNAME} --signal HUP
        eend $?
}

}}

=== syslog-ng ===

{{Package|app-admin/syslog-ng}} is an interesting case. Without any change, running syslog-ng under s-s-d it looks like this:
{{RootCmd|ps -ef {{!}} grep syslog-ng|output=<pre>
root      7800     1  0 09:16 ?        00:00:00 supervising syslog-ng
root      7802  7800  4 09:16 ?        00:03:56 /usr/sbin/syslog-ng --cfgfile /etc/syslog-ng/syslog-ng.conf --control /run/syslog-ng.ctl --persist-file /var/lib/syslog-ng/syslog-ng.persist --pidfile /run/syslog-ng.pid
</pre>}}

There is a process with in this case PID 7800 'supervising syslog-ng' with a parent-PID (PPID) of 1, which means its parent is the init process. There is also the process with PID 7802, which looks more like what we might expect, referencing the binary. This process' PPID is 7800, i.e. the supervising process. 

The ''supervising syslog-ng'' process is actually also the same binary of syslog-ng:

{{RootCmd|pgrep -lf syslog
|output=<pre>
7800 syslog-ng
7802 syslog-ng
</pre>}}

Syslog-ng appears to be supervising itself. What it does after startup is:

* fork, to become a background daemon process (PID 7800) and get it to be adopted by the init process (PID 1);
* fork again to create the worker process (PID 7802) as it's child process;
* rename the process (PID 7800) to "supervise syslog-ng", in the parent process, and supervise its child (PID 7802).
If and when "supervise syslog-ng" detects that it's worker process (PID 7802) has terminated it will restart it.
Syslog-ng calls this process mode "safe-background".

In order to get syslog-ng to work well under supervise-daemon it needs to run in the foreground though. There are two commandline options that will make that happen <code>--foreground</code> and <code>--process-mode=foreground</code>.

With the standard init scripts syslog-ng writes a pid file. This interferes with the operation of supervise-daemon so will have to be removed. Edit {{Path|/etc/init.d/syslog-ng}} to remove the --pidfile option in the command_args, and comment out the pidfile variable:

{{CodeBox|title=/etc/init.d/syslog-ng|lang=ini|1=
#command_args="--cfgfile \"${SYSLOG_NG_CONFIGFILE}\" --control \"${SYSLOG_NG_CONTROLFILE}\" --persist-file \"${SYSLOG_NG_STATEFILE}\" --pidfile \"${SYSLOG_NG_PIDFILE}\" ${SYSLOG_NG_OPTS}"
command_args="--cfgfile \"${SYSLOG_NG_CONFIGFILE}\" --control \"${SYSLOG_NG_CONTROLFILE}\" --persist-file \"${SYSLOG_NG_STATEFILE}\" ${SYSLOG_NG_OPTS} --foreground --process-mode=foreground"
command_user="${SYSLOG_NG_USER}:${SYSLOG_NG_GROUP}"
extra_commands="checkconfig"
extra_started_commands="reload"
#pidfile="${SYSLOG_NG_PIDFILE}"
supervisor="supervise-daemon"
}}

== Services which won't run under a supervisor ==

Unfortunately not all services are easy to run under supervisor-daemon, or other supervisors. The requirement that the daemon needs to run in foreground is not satisfied with all daemons, or it simply does not work. Sometimes there are alternatives available.

=== dcron ===

{{Package|Sys-process/dcron}} version 4.5-r1 crashes without an error message when it is run under a supervisor. Consider an alternative like {{Package|sys-process/fcron}}.

=== vixie-cron ===

Gentoo's {{Package|sys-process/vixie-cron}}has no option to run in foreground, even though in other Linux distributions the cron process would accept a -f flag. Consider an alternative like {{Package|sys-process/fcron}}.

== See also ==

* {{See also|OpenRC}}

== External resources ==

* [https://jdebp.eu/FGA/unix-daemon-design-mistakes-to-avoid.html Mistakes to avoid when designing Unix dæmon programs]
* [http://cloud9.hedgee.com./scribbles/daemon How to make daemons that will maximize sysadmin hatred]

[[Category:OpenRC]]
