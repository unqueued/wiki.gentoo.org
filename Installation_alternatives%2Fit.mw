<languages />


{{Metadata|abstract=Questa guida è pensata per essere un repository dei metodi di installazione alternativi di Gentoo, per coloro con necessità di installazione speciali come una mancanza del CD-ROM o un computer che non può avviarsi tramite CD.}}

Questa guida è pensata per essere un repository dei metodi di installazione alternativi di Gentoo, per coloro con necessità di installazione speciali come una mancanza del CD-ROM o un computer che non può avviarsi tramite CD.

== Riguardo questa guida ==

Se il metodo di installazione standard tramite avvio dal CD di installazione non funziona (o è impossibile da utilizzare, o non piace proprio), si può trovare aiuto qui. Questa guida serve per fornire un repository di tecniche di installazione alternative di Gentoo Linux a coloro che ne hanno bisogno. O, se si preferisce, funge da luogo in cui inserire metodi strambi di installazione. Se c'è un metodo di installazione che è ritenuto di aiuto, o che il lettore ritiene essere una maniera interessante con cui installare Gentoo, non esistare a scrivere qualcosa qui, in questo articolo.

== Avvio del CD di installazione con Smart BootManager ==

Scaricare Smart BootManager disponibile su [http://btmgr.sourceforge.net/download.html http://btmgr.sourceforge.net/download.html]. Sono disponibili i sorgenti Linux o i formati binari e le versioni windows in formato {{Path|.exe}}, così come molti pacchetti lingua. Tuttavia, il metodo preferito dovrebbe essere usare il formato binario, in quanto i sorgenti non si possono compilare con le versioni più recenti di NASM. 

Compilare il pacchetto dai sorgenti o scaricare i binari. Ci sono diverse opzioni utilizzabili quando si crea un floppy di avvio, come mostrato sotto. 

{{Invocation|sbminst --help|output=<pre>
sbminst [-t theme] [-d drv] [-b backup_file] [-u backup_file]
  
   -t theme       select the theme to be used, in which the theme could be:
                    us = English theme       de = German theme
                    hu = Hungarian theme     zh = Chinese theme
                    ru = Russian theme       cz = Czech theme
                    es = Spanish theme       fr = French theme
                    pt = Portuguese theme
  
   -d drv         set the drive that you want to install Smart BootManager on;
                  for Linux:
                    /dev/fd0 is the first floppy driver,
                    /dev/hda is the first IDE harddisk driver.
                    /dev/sda is the first SCSI harddisk driver.
                  for DOS:
                    0   is the first floppy drive
                    128 is the first hard drive;
  
   -c             disable CD-ROM booting feature;
  
   -b backup_file backup the data that will be overwritten for
                  future uninstallation;
  
   -u backup_file uninstall Smart BootManager, should be used alone;
  
   -y             do not ask any question or warning.
</pre>}}

Usare {{c|sbminst}} per creare il floppy di avvio:

{{RootCmd|sbminst -t us  -d /dev/fd0}}

{{Note/it|Sostituire {{Path|fd0}} con il nome del dispositivo floppy corretto.}}

Ora inserire semplicemente il floppy nel lettore floppy del computer e il CD di installazione nel lettore CD-ROM e avviare il computer. 

Comparirà la finestra di dialogo di Smart BootManager. Selezionare il CD-ROM e premere il tasto {{Key|Enter}} (Invio) per avviare il CD di installazione. Una volta avviato, procedere con le istruzioni di installazione normali. 

Ulteriori informazioni su Smart BootManager possono essere trovate su [http://btmgr.sourceforge.net/ http://btmgr.sourceforge.net/].

== Installazione da LiveCD non Gentoo ==

=== Introduzione ===

{{Important/it|Gli sviluppatori Gentoo non possono fornire supporto se va male qualcosa con un LiveCD non Gentoo, in quanto non c'è modo di risolvere i problemi o documentare ogni stranezza di ciascun LiveCD esistente. Solo i LiveCD di Gentoo sono supportati ufficialmente. Visitare per favore i [https://forums.gentoo.org/ Forum di Gentoo] per essere aiutati dalla comunità quando ci si imbatte in problemi con mezzi di installazione alternativi.}}

Gli utenti possono avviare altri LiveCD oltre ai CD forniti da Gentoo. In ogni caso, questi LiveCD forniscono un ambiente funzionale da usare mentre si compila ed installa Gentoo. Le istruzioni fornite qui dovrebbero funzionare in linea di principio con praticamente qualsiasi altro LiveCD. 

Ci sono troppi LiveCD da [https://distrowatch.com/search.php elencare], ma [http://www.knoppix.org/ Knoppix] potrebbe essere un'opzione da provare. Fornisce una scrivania basata interamente sull'interfaccia grafica, con applicazioni per ufficio, browser di rete, e giochi per tenersi occupati. Knoppix è disponibile solamente per utenti {{Keyword|x86}}, quindi a seconda dei requisiti utente potrebbe essere necessario usare altri LiveCD o metodi. 

{{Warning/it|Essere consapevoli che se si salva qualcosa nel percorso home del LiveCD mentre si aspetta che il sistema Gentoo venga installato, non sarà disponibile una volta che si è riavviato dentro Gentoo. Assicurarsi di salvare i documenti importanti sul disco rigido o in qualche altro computer!}}

=== Istruzioni di installazione ===

Avviare il LiveCD. Aprire un terminale ed eseguire {{c|su -}} così che la password possa essere cambiata. Ciò permette di impostare la password di root per il CD. Il demone sshd può ora essere configurato per il login remoto se richiesto. Successivamente, è necessario creare il punto di montaggio {{Path|/mnt/gentoo}}. 

{{RootCmd|mkdir /mnt/gentoo}}

A questo punto, si può selezionare la documentazione di installazione normale disponibile su [[Handbook:AMD64/Installation/Disks/it|Preparazione dei dischi]]. Tuttavia, quando sarà richiesto il montaggio del sistema proc, eseguire invece il seguente comando: 

{{RootCmd|mount -o bind /proc /mnt/gentoo/proc}}

Quando si scompatta lo [[stage tarball/it|stage]] in [[Handbook:AMD64/Installation/Stage/it#Scompattazione dello stage|scompattazione dello stage]], assicurarsi di usare le seguenti opzioni per il comando {{c|tar}} per far sì che siano rafforzati gli ID del gruppo corretto sullo stage scompattato: 

{{RootCmd|tar --numeric-owner --xattrs -xvjpf stage3-*.tar.bz2 -C /mnt/gentoo }}

Se viene usato Ubuntu, notare che {{Path|/dev/shm}} è un collegamento simbolico a {{Path|/run/shm}}. Deve essere collegato al punto di montaggio o si deve configurare un punto di montaggio di tmpfs in questo percorso (all'interno del percorso chroot). Per collegare il percorso al punto di montaggio, eseguire il seguente comando (prima di effettuare il chroot):

{{RootCmd|mount --rbind /run/shm /mnt/gentoo/run/shm}}

Tutto ciò viene fatto per evitare il {{Bug|496328}}, in cui Python crede che <code>sem_open()</code> sia malfunzionante (a causa della mancanza di {{Path|/dev/shm}}) e Portage lo vede come un errore (tecnicamente Python si configurerebbe con la convinzione che la variabile <var>POSIX_SEMAPHORES_NOT_ENABLED</var> sia stata abilitata, ma ciò poretebbe ad una configurazione di Python decisamente non desiderabile).

Una volta pronti per effettuare il chroot nello stage scompattato nella sezione [[Handbook:AMD64/Installation/Base/it|Installazione del sistema di base]], sarà necessario usare una sequenza di comandi di chrott diversa. In questo modo, le variabili di ambiente vengono configurate correttamente. 

{{Note/it|Alcuni LiveCD usano una configurazione dell'ambiente piuttosto curiosa, per cui si rende utile l'uso dell'opzione {{c|env -i}} per ripulirla e reimpostarla in uno stato ragionevole.}}

{{RootCmd
|chroot /mnt/gentoo /bin/env -i TERM{{=}}$TERM /bin/bash
|env-update
|source /etc/profile
|export PS1{{=}}"(chroot) $PS1"
}}

Infine, notare che alcune <var>FEATURES</var> di Portage potrebbero non funzionare nel LiveCD. In particolare, controllare i valori delle variabili <code>userpriv</code> e <code>usersandbox</code>. Se ci sono errori, provare a disabilitare tutte le <var>FEATURES</var> opzionali.

== Installazione senza disco usando PXE e kernel/initrd/squashfs dal LiveCD ==

Questo metodo è più facile da configurare rispetto ad un avvio da PXE basato su iSCSI o NFS. Più macchine possono essere avviate dallo stesso insieme di immagini distribuite tramite TFTP e possono essere facilmente estese per funzionare anche su HTTP o altri protocolli.

Altre distribuzioni, compresa Fedora, distribuiscono già le immagini necessarie per effetturare il bootstrap del CD live o di installazione. Con Gentoo, non è questo il caso. Al contrario, gli utenti devono:

# Estrarre kernel, initrd e [[SquashFS|squashfs]] dal CD live.
# Configurare i contenuti di initrd.
# Unire squashfs all'interno di initrd.

Solo ora si può configurare un bootloader basato su PXE che caricherà le immagini e avvierà il sistema live.

Salvare il seguente script, renderlo eseguibile e impostare il valore del percorso nella variabile <var>PATH</var> (o seguire i passi documentati manualmente).


{{CodeBox|title=gentoo-pxe-boot|<nowiki>
#!/bin/bash -xe

tftproot="$1"
image="$2"
tmp="./tmp"

test -z "$tftproot" -o -z "$image" && echo "Usage: $0 <tftproot> <gentoo-iso>" >&2 && exit 1
test -e "$tmp" && echo "Temporary path '$tmp' already exists." >&2 && exit 1

iso="$tmp/iso"
initrd="$tmp/initrd.dir"

# prepare directories
mkdir -p "$tmp" "$iso" "$initrd/mnt/cdrom"

# extract files from ISO image
mount -o ro,loop "$image" "$iso"
cp "$iso"/{image.squashfs,isolinux/gentoo,isolinux/gentoo.igz} "$tmp"
umount "$iso"

# rename kernel
mv "$tmp/gentoo" "$tmp/kernel"

# patch initramfs and add squashfs to it
xz -dc "$tmp/gentoo.igz" | ( cd "$initrd" && cpio -idv )
patch -d "$initrd" -p0 <<'EOF'
--- init.orig	2016-01-02 00:00:00.000000000 +0100
+++ init	2016-01-02 00:00:00.000000000 +0100
@@ -455,9 +455,9 @@
 		CHROOT=${NEW_ROOT}
 	fi
 
-	if [ /dev/nfs != "$REAL_ROOT" ] && [ sgimips != "$LOOPTYPE" ] && [ 1 != "$aufs" ]; then
-		bootstrapCD
-	fi
+#	if [ /dev/nfs != "$REAL_ROOT" ] && [ sgimips != "$LOOPTYPE" ] && [ 1 != "$aufs" ]; then
+#		bootstrapCD
+#	fi
 
 	if [ "${REAL_ROOT}" = '' ]
 	then
@@ -591,7 +591,7 @@
 		else
 			bad_msg "Block device ${REAL_ROOT} is not a valid root device..."
 			REAL_ROOT=""
-			got_good_root=0
+			got_good_root=1
 		fi
 	done
 
@@ -670,7 +670,7 @@
 	[ -z "${LOOP}" ] && find_loop
 	[ -z "${LOOPTYPE}" ] && find_looptype
 
-	cache_cd_contents
+	#cache_cd_contents
 
 	# If encrypted, find key and mount, otherwise mount as usual
 	if [ -n "${CRYPT_ROOT}" ]
EOF
cp "$tmp/image.squashfs" "$initrd/mnt/cdrom"
( cd "$initrd" && find . -print | cpio -o -H newc | gzip -9 -c - ) > "$tmp/initrd"

# prepare boot data
grub2-mknetdir -v --net-directory="$tftproot"
cat > "$tftproot/boot/grub/grub.cfg" <<'EOF'
menuentry "Gentoo Live" {
    linux /boot/kernel root=/dev/ram0 init=/linuxrc loop=/image.squashfs looptype=squashfs cdroot=1 real_root=/
    initrd /boot/initrd
}
EOF
cp "$tmp"/{kernel,initrd} "$tftproot/boot"

# cleanup
rm -rf "$tmp"
</nowiki>}}


Scaricare il [https://www.gentoo.org/downloads/ CD di installazione minimale]. Installare {{Package|net-ftp/tftp-hpa}}, assicurandosi che fornisca {{Path|/tftproot}} e avviarlo.

Eseguire lo script con i parametri appropriati.

{{RootCmd|gentoo-pxe-boot /tftproot install-amd64-minimal-20141204.iso}}

Ora il servizio di avvio TFTP è pronto, quindi il passo successivo consiste nella configurazione di un servizio DHCP. È possibile configurare un server DHCP sulla stessa macchina - assicurarsi semplicemente che le macchine avviate siano connesse ad essa. Oppure, modificare la configurazione di un router esistente.

Di seguito, è riportata la configurazione di esempio di un servizio DHCP per OpenWRT:

{{FileBox|filename=/etc/config/dhcp|1=
config boot linux                   
        option filename boot/grub/i386-pc/core.0
        option servername boot
        option serveraddress 84.246.161.86
}}

== Installazione senza disco usando l'avvio da PXE e NFS ==

=== Requisiti ===

PXE (Preboot eXecution Environment) è un metodo per avviare computer su un'interfaccia di rete che supporta PXE (e usando un BIOS che supporta PXE). Nel caso in cui il sistema non supporti l'avvio da PXE dall'interfaccia di rete o BIOS, PXE può essere usato anche come metodo di avvio da dispositivi a blocchi (come CD o USB). In tali casi, un ambiente di avvio minimale imita la scheda di rete che supporta PXE (consultare anche  [http://etherboot.org Etherboot/gPXE]). 

=== Configurazione del server di base ===

Creare i percorsi: La prima cosa da fare è creare i percorsi in cui verrà memorizzato il sistema senza disco. Creare un percorso chiamato {{Path|/diskless}} che ospita a sua volta un percorso per ciascun client senza disco. Per la parte rimanente di questa guida, il client su cui si sta lavorando sarà chiamato 'eta'. 

{{RootCmd|mkdir -p /diskless/eta}}

Configurazione di DHCP e TFTP: Il client acquisirà le informazioni di avvio usando DHCP e scaricherà tutti i file richiesti usando TFTP. 

Per dhcpcd, eseguire semplicemente {{c|emerge dhcp}} (o qualunque altro server DHCP preferito). Assicurarsi di selezionare l'interfaccia corretta in {{Path|/etc/conf.d/dhcpd}}, e configurarla di conseguenza. Successivamente, aggiungere il seguente dentro {{Path|/etc/dhcp/dhcpd.conf}}. 

{{Note/it|Ciò fornisce un indirizzo IP statico per il client e il percorso di un'immagine di avvio da PXE, qui {{Path|pxegrub}}. L'indirizzo MAC della scheda ethernet del client nell'esempio deve essere sostituito con l'indirizzo MAC corretto, così come per quanto riguarda il percorso in cui verranno posti i file del client.}}

{{FileBox|filename=dhcpd.conf|1=
option option-150 code 150 = text ;
ddns-update-style none ;
host eta {
hardware ethernet 00:00:00:00:00:00;
fixed-address ip.add.re.ss;
option option-150 "/eta/boot/grub.lst";
filename "/eta/boot/pxegrub";
}
}}

Successivamente, configurare l'interfaccia in {{Path|/etc/conf.d/net}} così che non sia cancellata all'avvio. Consultare {{Path|/usr/share/doc/openrc-*/net.example.bz2}} per ulteriori informazioni. 

{{FileBox|filename=/etc/conf.d/net|title=Assicurarsi che l'interfaccia (qui eth0 nell'esempio) non sia riconfigurata all'avvio|lang=bash|1=
config_eth0="noop"
}}

Per TFTP, installare {{Package|net-ftp/tftp-hpa}}. Configurare {{Path|/etc/conf.d/in.tftpd}} come di seguito: 

{{FileBox|filename=in.tftpd|title=|lang=bash|1=
INTFTPD_PATH="/diskless"
INTFTPD_USER="nobody"
INTFTPD_OPTS="-u ${INTFTPD_USER} -l -vvvvvv -p -c -s ${INTFTPD_PATH}"
}}

Installare GRUB:

{{Emerge|sys-boot/grub}}

Una volta che GRUB è stato compilato, creare il percorso di avvio del client senza disco:

{{RootCmd|grub2-mknetdir --net-directory{{=}}/diskless/eta}}

Il modo originale consisteva nella copia dell'immagine PXE sul client senza disco, ma sembra che il percorso non esca più.

{{RootCmd
|mkdir /diskless/eta/boot
|cp /usr/lib/grub/pxegrub /diskless/eta/boot/pxegrub
}}

Successivamente, modificare il suo file di configurazione {{Path|grub.lst}}.

{{RootCmd|nano -w /diskless/eta/boot/grub.lst}}

{{FileBox|filename=grub.lst|lang=bash|1=
default 0
timeout 30
  
title=Diskless Gentoo
root (nd)
kernel /eta/bzImage ip=dhcp root=/dev/nfs nfsroot=ip.add.re.ss:/diskless/eta
  
# Per l'opione nfsroot, l'indirizzo IP è quello del server e la directory è quella in cui risiedono i file del client senza disco (sul server).
}}

NFS è piuttosto facile da configurare. L'unica cosa da fare è aggiungere una linea nel file di configurazione {{Path|/etc/exports}}: 

{{FileBox|filename=/etc/exports|title=|lang=bash|1=
/diskless/eta eta(rw,sync,no_root_squash)
}}

One important thing to do now is to modify the {{Path|/etc/hosts}} file to fit requirements. 

{{FileBox|filename=/etc/hosts|lang=bash|1=
127.0.0.1 localhost
192.168.1.10 eta.example.com eta
192.168.1.20 sigma.example.com sigma
}}

=== Creating the system on the server ===

A next step is to reboot the server with a Gentoo installation CD (although experienced administrators can continue without if they are sufficiently versed in Gentoo installations). Follow the standard install procedure as explained in the [[Handbook:Main_Page|Gentoo Handbook]] BUT with the following differences: when mounting the file system, execute the next step (where {{Path|sdaX}} is the partition where the {{Path|/diskless}} directory was created).

{{RootCmd|mount /dev/sdaX /mnt/gentoo}}

Mounting any other partition is not needed as all of the files will reside in the {{Path|/diskless/eta}} directory. 

This example uses a stage3 tarball. Mount {{Path|/proc}} to the diskless directory and chroot into it to continue with the install. Then follow the installation manual until kernel configuration. 

{{Warning|Be very careful when extracting the stage tarball to its destination, so as to not end up extracting over an existing installation.}}

{{RootCmd
|cd /mnt/gentoo/diskless/eta/
|tar -xvjpf  /mnt/cdrom/gentoo/stage3-*.tar.bz2
|mount -t proc /proc /mnt/gentoo/diskless/eta/proc
|cp /etc/resolv.conf /mnt/gentoo/diskless/eta/etc/resolv.conf
|chroot /mnt/gentoo/diskless/eta/ /bin/bash
|env-update
|source /etc/profile
}}

When doing the {{c|make menuconfig}} of the kernel configuration, don't forget to enable the following options with the others recommended into the install guide. 

{{KernelBox|title=Necessary options for diskless installations|<pre>
- The network card device support
(In the kernel, *not* as a module!)
  
-*- Networking support --->  
  Networking options --->
    [*] TCP/IP networking
    [*] IP: kernel level autoconfiguration
    [*] IP: DHCP support
    [*] IP: BOOTP support
  
File systems --->
  [*] Network File Systems --->
    <*> NFS file system support
    [*] Provide NFSv3 client support
    [*] Root file system on NFS
</pre>}}

Save the kernel in the chrooted {{Path|/}} (not in {{Path|/boot}}) according to the pxegrub setting defined earlier. Next configure the diskless client's {{Path|/etc/fstab}}. 

{{FileBox|filename=/etc/fstab|<pre>
/dev/cdroms/cdrom0 /mnt/cdrom iso9660 noauto,ro 0 0
</pre>
}}

Now to prevent the client from running a filesystem check: 

{{RootCmd
|touch /fastboot
|echo "touch /fastboot" >> /etc/conf.d/local.start
}}

Install {{Package|net-fs/nfs-utils}} since the client will heavily depend on it: 

{{Emerge|net-fs/nfs-utils}}

Do not install another bootloader because there is already one - pxegrub. Simply finish the install and restart the server. Start the services that are needed to boot the new client: DHCP, TFTPD, and NFS. 

{{RootCmd
|service dhcp start
|service in.tftpd start
|service nfs start
}}

=== Booting the new client ===

For the new client to boot properly, the BIOS and the network card need to be configured to use PXE as the first boot method - before CD-ROM or floppy. For help with this consult the hardware manuals or manufacturers website. The network card should get an IP address using DHCP and download the GRUB PXE image using TFTP. Then, a nice black and white GRUB bootmenu should be displayed from where users can select the kernel to boot and press the {{Key|Enter}} (Return) key. If everything is okay the kernel should boot, mount the root filesystem using NFS and provide a login prompt. Enjoy.

== Installing Gentoo from an existing Linux distribution ==

=== Requirements ===

In order to install Gentoo from an existing Linux distribution it needs to have the chroot command installed, and have a copy of the Gentoo installation or ISO that's desired to install. A network connection is highly recommended as otherwise the installation can only work with the files available in the installation media. By the way, a tarball is just a file ending in {{Path|.tbz}} or {{Path|.tar.gz}}. Let's get started!

=== Overview ===

First allocate a partition to Gentoo by resizing an existing Linux partition, mount the partition, untar the tarball to the partition that is mounted, chroot inside the pseudo-system and start building. Once the bootstrap process is done, do some final configuration on the system so as to make sure it boots, then reboot and use Gentoo. 

=== How to make space for Gentoo? ===

The root partition is the filesystem mounted under {{Path|/}}. The first example shows the output of {{c|mount}} on a system. The second example uses {{c|df}} (disk free) to see how much space there is left and how it will be resized. Note that resizing the root partition is not mandatory! Anything else supported by the resizer can be resized, but let's talk about that later. 

{{RootCmd|mount|output=<pre>
/dev/sdb2 on / type ext3 (rw)
none on /proc type proc (rw)
none on /dev/pts type devpts (rw,gid=5,mode=620)
none on /dev/shm type tmpfs (rw,nodev,nosuid,noexec)
</pre>}}

{{RootCmd|df -h|output=<pre>
Filesystem           Size Used Avail Use% Mounted on
/dev/sdb2            4.0G 1.9G  2.4G  82% /
none                  38M    0   38M   0% /dev/shm
</pre>
}}

As can be seen, the partition mounted as {{Path|/}} named {{Path|/dev/sdb2}} has 2.4 GB free. In this case, it was decided to be resized as to leave 400 MB of free space, therefore allocating 2 GB for Gentoo. Not bad, it could have quite some stuff installed. However, 1 GB is deemed enough for most users. So now partition this thing!

=== Building parted to resize partition ===

{{Warning|This section is outdated and will be removed when the older parted versions have left the Gentoo Portage tree. The ability to resize partitions has been removed from parted, as explained [https://www.gnu.org/software/parted/manual/html_node/Command-explanations.html here].}}

{{Package|sys-block/parted}} is extremely useful for resizing partitions. It is included on the minimal installation CD.

{{Note|There are other tools for doing resize of partitions as well, but an elaborate description of these tools is outside the scope of this guide.}}

Look up on that page the type of file system to resize and see if {{c|parted}} can do it. If not: tough luck, some partitions might need to be destroyed to make space for Gentoo, and reinstall back. Go ahead by downloading the software and install it. In the next step, a problem arises. The Linux root partition needs to be resized, therefore a floppy disk with a minimal Linux system must be booted and to use a previously-compiled parted copied to a diskette in order to resize {{Path|/}}. If the partition can be unmounted while still running in Linux then the following steps are not needed. Just compile parted and run it on a chosen unmounted partition to resize. Here's how it was done on this system. 

{{Important|Make sure that the operations that are required for partitioning are supported by parted!}}

Get the mininux boot/root disk (a 2.4-powered mini Linux distribution on a floppy - free of charge) from [http://mininux.free.fr/uk/ http://mininux.free.fr/uk/], create a floppy as suggested in the Documentation that accompanies the software package and insert a new floppy in the drive for the next step. 

{{Note|Note again that Linux is synonym of "There's one more way to do it". The objective is to run parted on an unmounted partition so it can do its work. A boot/root diskset other than mininux can be used. This step might not even be needed to do at all: there may only be the need to umount the filesystem to repartition in the Linux session and run parted on it.}}

{{RootCmd|mkfs.minix /dev/fd0|output=<pre>
480 inodes
1440 blocks
Firstdatazone=19 (19)
Zonesize=1024
Maxsize=268966912
</pre>
}}

Proceed with the build of parted. Download and untar the utility, and {{c|cd}} into the corresponding directory. Now run the following set of commands to build the utility and copy it to the floppy disk. 

{{RootCmd
|mkdir /floppy
|mount -t minix /dev/fd0 /floppy
|export CFLAGS{{=}}"-O3 -pipe -fomit-frame-pointer -static"
|./configure
|make
|cp parted/parted /floppy
|umount /floppy
}}

Time to reboot and resize the partition. Do this only after taking a quick look at the parted documentation on the GNU website. The resize should take under 30 minutes for the largest hard-drives, be patient. Reboot the system with the mininux boot disk (just pop it inside), and once logged in, switch the disk in the drive with the utility disk that was created above and type {{c|mount /dev/fd0 /floppy}} to have parted under {{Path|/floppy}}. Run parted to be able to resize the partition. Once this lengthy process is done, continue with installing Gentoo. Reboot back into the old Linux system for now. The drive to operate on is the drive containing the partition that is going to be resized. For example, if the partition to be resized is {{Path|/dev/sda3}}, the drive is {{Path|/dev/sda}}. 

{{RootCmd|mount /dev/fd0 /floppy 
|cd /floppy
|./parted <drive>}}

{{Cmd|print|prompt=(parted) |output=<pre>
Disk geometry for /dev/sdb: 0.000-9787.148 megabytes
Disk label type: msdos
Minor    Start       End     Type      Filesystem  Flags
1          0.031   2953.125  primary   ntfs
3       2953.125   3133.265  primary   linux-swap
2       3133.266   5633.085  primary   ext3
4       5633.086   9787.148  extended
5       5633.117   6633.210  logical
6       6633.242   9787.148  logical   ext3</pre>}}

{{Cmd|help resize|prompt=(parted) |output=<pre>
(parted)  help resize 
  resize MINOR START END        resize filesystem on partition MINOR
  
        MINOR is the partition number used by Linux.  On msdos disk labels, the
        primary partitions number from 1-4, and logical partitions are 5
        onwards.
        START and END are in megabytes
</pre>}}

{{Cmd|resize 2 3133.266 4000.000|prompt=(parted) }}

{{Important|Be patient! The computer is working! Just look at the hard drive LED on the case to see its activity. This should take between 2 and 30 minutes.}}

Once the resize has finished, boot back into the old Linux as described. Then go to [[Handbook:AMD64/Installation/Disks|The Gentoo Handbook: Preparing the Disks]] and follow the instructions. When chrooting, use the following command to flush the environment: 

{{RootCmd
|env -i HOME{{=}}$HOME TERM{{=}}$TERM chroot /mnt/gentoo /bin/bash
|/usr/sbin/env-update
|source /etc/profile
}}

Enjoy!

[[Category:Core system]] {{Migrated|originalauthors=Gerald Normandin Jr., Travis Tilley, Oleg Raisky, Alex Garbutt, Alexandre Georges, Magnus Backanda, Faust A. Tanasescu, Daniel Ahlberg, Ken Nowack, Tiemo Kieft, Benny Chuang, Jonathan Smith, nightmorph}}
