{{Lowercase title}}
{{WIP|author=SwifT}}
{{InfoBox stack
|{{InfoBox homepage|http://code.google.com/p/cryptsetup/wiki/DMCrypt|header=true}}
|{{InfoBox wikipedia}}
}}

'''dm-crypt''' is a disk encryption system using the kernels crypto API framework and device mapper subsystem. With dm-crypt, administrators can encrypt entire disks, logical volumes, partitions, but also single files.

The dm-crypt subsystem supports the ''Linux Unified Key Setup (LUKS)'' structure, which allows for multiple keys to access the encrypted data, as well as manipulate the keys (such as changing the keys, adding additional passphrazes, etc.)

== Configuration ==

There are two prerequisites before one can start using dm-crypt:

# Configuration of the Linux kernel
# Installation of the {{Package|sys-fs/cryptsetup}} package

=== Kernel Configuration ===

To use dm-crypt there are a number of configuration entries that are necessary.

First of all, support for the ''device mapper'' infrastructure as well as the ''crypt target'' must be included:

{{Kernel|Enabling device mapper and crypt target|<pre>
[*] Enable loadable module support
    Device Drivers --->
        [*] Multiple devices driver support (RAID and LVM) --->
            <*> Device mapper support
            <*> Crypt target support
</pre>}}

Next, the Linux kernel needs to support the set of cryptographic APIs that the administrator wants to use for encryption. These can be found under the ''Cryptographic API'' section:

{{Kernel|Enabling cryptographic API functions|<pre>
[*] Cryptographic API --->
    <*> SHA224 and SHA256 digest algorithm
</pre>
}}

If the root file system will be encrypted as well, then an initial ram file system needs to be created in which the root filesystem is decrypted before it is mounted. Thus this requires initramfs support as well:

{{Kernel|Enabling initramfs support|<pre>
General setup  --->
    [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
</pre>}}

=== Cryptsetup installation ===

The {{Package|sys-fs/cryptsetup}} package provides the <code>cryptsetyp</code> command, which is used to open or close the encrypted storage as well as manage the passphrazes or keys associated with it.

{{Emerge|sys-fs/cryptsetup}}

== Encrypted storage ==

=== Keyfile or passphrase ===

In order to start with encrypted storage, the administrator will need to decide which method to use for the encryption key. With <code>cryptsetup</code> the choice is either a passphrase or a keyfile. In case of a keyfile, this can be any file, but it is recommended to use a file with random data which is properly protected (considering that access to this keyfile will mean access to the encrypted data).

To create a keyfile, one can use the <code>dd</code> command:

{{RootCmd|dd if{{=}}/dev/urandom of{{=}}/etc/keys/enc.key bs{{=}}1 count{{=}}4096}}

In the next sections, we will show every command for both situations - passphrase and keyfile. Of course, only one method is necessary.

=== Creating an encrypted storage platform ===

In order to create an encrypted storage platform (which can be a disk, partition, file, ...) use the <code>cryptsetup</code> command with the ''luksFormat'' option.

For instance, to have {{Path|/dev/vdb2}} as the storage medium for the encrypted data:

{{RootCmd|cryptsetup -s 512 luksFormat /dev/vdb2|output=<pre>
This will overwrite data on /dev/vdb2 irrevocably.
  
Are you sure? (Type uppercase yes): YES
Enter LUKS passphrase: ...
Verify passphrase: ...
</pre>}}

To use a keyfile instead of a passphrase:

{{RootCmd|cryptsetup -s 512 luksFormat /dev/vdb2 /etc/keys/enc.key|output=<pre>
This will overwrite data on /dev/vdb2 irrevocably.
  
Are you sure? (Type uppercase yes): YES
</pre>}}

The <code>-s 512</code> tells <code>cryptsetup</code> which keylength to use for the real encryption key (unlike the passphrase or keyfile, which are used to access this real encryption key).

=== Opening the encrypted storage ===

In order to open up the encrypted storage (i.e. make the real data accessible through transparent decryption), use the ''luksOpen'' command.

{{RootCmd|cryptsetup luksOpen /dev/vdb2 myname|output=<pre>
Enter passphrase for /dev/vdb2: ...
</pre>}}

If a keyfile is used, then the command would look like so:

{{RootCmd|cryptsetup luksOpen -d /etc/keys/enc.key /dev/vdb2 myname}}

When the command finishes succesfully, then a new device file called {{/dev/mapper/myname}} will be made available. This device file can then be mounted as a regular storage location:

{{RootCmd|mount /dev/mapper/myname /home}}

=== Closing the encrypted storage ===

In order to close the encrypted storage (i.e. ensure that the real data is no longer accessible through transparent decryption), use the ''luksClose'' command:

{{RootCmd|cryptsetup luksClose myname}}

Of course, make sure that the device is no longer in use.

== Manipulating LUKS keys ==


== Configuring Encrypted Volume ==

For this example the volume will be  a plain partition ({{Path|/dev/sda1}}).

* Load kernel modules appropriate to your setup
: {{RootCmd|modprobe {dm-mod,dm-crypt,aes,sha256,cbc} }}

* Generate key
{{Warning|{{Path|/dev/urandom}} should not be used for long-term key generation. See manpage of random(4) for further reference.}}
: {{RootCmd|dd if{{=}}/dev/random of{{=}}keyFile bs{{=}}1 count{{=}}4096}}

* Fill volume with random bits/shred (optional)
: {{RootCmd|shred -v -n 2 /dev/sda1}}
: or
: {{RootCmd|dd if{{=}}/dev/urandom of{{=}}/dev/sda1 bs{{=}}1M}}

* cryptsetup luksFormat
: For keyFile based auth
: {{RootCmd|cryptsetup luksFormat /dev/sda1 keyFile}}

: For password based auth
: {{RootCmd|cryptsetup -y luksFormat /dev/sda1}}

* cryptsetup open
: For keyFile based auth
: {{RootCmd|cryptsetup -d keyFile luksOpen /dev/sda1 encVol}}

: For password based auth
: {{RootCmd|cryptsetup luksOpen /dev/sda1 encVol}}

* mkfs, using ext4 in this case
: {{RootCmd|mkfs.ext4 /dev/mapper/encVol}}

* mount
: {{RootCmd|mount /dev/mapper/encVol MOUNTPOINT}}

== Initrd config For Wholedisk Encryption ==
The easiest option for booting an encrypted root partition is to use [[dracut]]. To configure dracut for dm-crypt make sure to include the ''crypt'' module. Follow the dracut article making sure to include the ''crypt'' module along with any others required:
{{File|/etc/portage/make.conf||<pre>
DRACUT_MODULES="... crypt ..."
</pre>}}

[[Category:Core system]]
