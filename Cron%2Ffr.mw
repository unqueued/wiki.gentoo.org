<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Ce guide explique comme configurer et utiliser ''cron''.

== Les fondamentaux de cron ==

=== Que fait cron ? ===

Cron est un démon qui exécute des tâches programmées en se basant sur une table de commandes appelée <code>crontab</code>. Il exécute ces tâches en s'éveillant toutes les minutes et en regardant s'il y a des tâches à lancer dans une ''crontab'' quelconque de l'utilisateur. 

{{Note|Notez que ''crontab'' est à la fois le nom d'une liste de ''''tâches cron''''  et le nom de la commande d'édition de cette liste.}}

=== Le cron de facto ===

Il y a plusieurs mises en œuvre de cron dans Portage parmi lesquelles vous devez faire un choix. Elles ont toutes la même interface, nommément l'utilisation de la commande  <code>crontab</code> ou d'une commande similaire. Il existe également un utilitaire appelé ''Anacron'' qui est prévu pour fonctionner avec ''cron'' sur des systèmes qui ne fonctionnent pas en permanence. 

Ça vaut la peine de noter que tous les paquets cron disponibles dépendent de <code>sys-process/cronbase</code> . Ce paquet n'est cependant  techniquement nécessaire à aucun des paquets cron, mais il procure une fonctionnalité similaire à cron que la plupart des utilisateurs apprécient. 

Avant de démarrer avec cron, vous devez choisir une mise en œuvre. Pour vous aider, nous avons rassemblé de l'information sur chacun d'elles ci-dessous.

== Quel cron est bon pour vous ? ==

=== Vixie-cron ===

Vixie cron est une mise en œuvre de cron,  basée sur SysV cron, comprenant toutes les fonctionnalités. Chaque utilisateur dispose de sa ''crontab'' et est autorisé à spécifier les variables d'environnement dans cette ''crontab''. À la différence des autres variantes de ''cron'', elle offre aussi la prise en charge de ''SELinux'' et ''PAM''. Elle supporte moins d'architectures que ''Dcron'', mais plus que ''Fcron''. 

Fonctionnalités de  <code>sys-process/vixie-cron</code> : 

* Prise en charge de  SELinux
* Prise en charge de PAM {{Path|/etc/security/limits.conf}} 
* Définition de variables d'environnement dans les crontabs (PATH, SHELL, HOME, etc.)
* Chaque utilisateur dispose de sa crontab; l'accès est contrôlé par {{Path|cron.allow}} et {{Path|cron.deny}} 

=== cronie ===
Cronie (sys-process/cronie) est un dérivé (fork) de  vixie-cron produit par [https://fedorahosted.org/cronie/wiki fedora]. Comme il s'agit d'un dérivé il possède les mêmes fonctionnalités que celles de l'original vixie-cron. En plus, cronie est fourni avec une mise en œuvre d'anacron qui doit être activé via l'option ''anacron'' de la variable USE.

=== dcron (le  Cron de Dillon) ===

Dcron cherche à rester une mise en œuvre de ''cron'', simple, élégante et sûre. Il n'autorise pas la spécification de variables d'environnement dans les ''crontabs'' et toutes les ''''tâches cron'''' sont lancées depuis {{Path|/bin/sh}}. Comme vixie-cron, chaque utilisateur dispose de sa propre ''crontab''. 

Fonctionnalités de <code>sys-process/dcron</code> : 

* Rapide, simple et débarassé de fonctionnalités inutiles
* L'accès à la  <code>crontab</code> est limité au groupe cron, i.e. il ne se fie pas à des facultés externes.

=== fcron ===

Fcron cherche à remplacer vixie-cron et anacron. Il est prévu pour fonctionner sur des systèmes qui ne sont pas toujours en marche et arrive avec des fonctionnalités supplémentaires. Il prévoit des contraintes de lancement des tâches, la sérialisation des contrôles, la possibilité d'ajouter des valeurs ''nice'' aux tâches et la possibilité de programmer les tâches à lancer au démarrage du système. Voir la [http://fcron.free.fr/ page d'accueil de fcron] pour plus d'information 

Fonctionnalités de <code>sys-process/fcron</code> : 

* Conçu pour fonctionner sur des systèmes qui ne tourne pas en permanence , i.e. il peut relancer une tâche au redémarrage de la machine si elle a été manquée.
* Définition de  variables d'environnement et de beaucoup d'autres fonctionnalités dans les  ''crontabs''
* Chaque utilisateur dispose de sa propre ''crontab'', l'accès est contrôlé par  ''cron.allow'' et  ''cron.deny''
* Syntaxe des ''crontabs'' améliorée avec prise en charge de nombreuses fonctionnalités nouvelles.

=== bcron ===

''bcron'' est un nouveau système cron conçu pour des opérations sécurisées. Pour ce faire, le système est divisé en plusieurs programmes séparés, chacun responsable d'une tâche séparée, avec une communication strictement contrôlée entre eux. L'interface utilisateur est un remplaçant dérivé de systèmes similaires (tel que vixie-cron), mais les aspects internes différent profondément. Pour une plus ample information, reportez-vous à la page de bcron à  [http://untroubled.org/bcron http://untroubled.org/bcron]  . 

Fonctionnalités de <code>sys-process/bcron</code> : 

* Remplaçant de  vixie-cron
* Conception multiprocessus
* Prise en charge native de l'heure d'été

=== anacron ===

''Anacron'' n'est pas un démon ''cron'', c'est un programme qui fonctionne en conjonction avec l'un d'eux. Il exécute des commandes à des intervalles spécifiés en jours et ne suppose pas que le système reste en marche continuellement ; il lance les tâches qui ont été manquées lorsque le système était arrêté. Ordinairement, ''Anacron'' compte sur un démon ''cron'' pour être lancé tous les jours. 

== Utiliser cron ==

=== Installation ===

Choisissez la mise en œuvre de ''cron'' que vous préférez et installez la. 

{{Emerge|dcron}}

{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

En option, si vous n'avez pas installé ''Fcron'', vous pouvez également installer ''Anacron''. 

{{Emerge|anacron}}

{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== La ''crontab'' système ===

Les messages post-installation de certains de ces paquets ''cron'' vous disent de lancer <code>crontab /etc/crontab</code> . Le fichier {{Path|/etc/crontab}} est votre ''crontab système'' . Une installation de ''cron'' peut l'utiliser en conjonction avec  <code>sys-process/cronbase</code> pour lancer les scripts  dans {{Path|/etc/cron.{quotidiennement,toutes les heures, toutes les semaines, tous les mois}}} . Notez que seul ''vixie-cron'' et ''cronie''' programment les tâches dans {{Path|/etc/crontab}} automatiquement.  Les utilisateurs de ''dcron'' et de  ''fcron'' devront lancer <code>crontab /etc/crontab</code> à chaque fois qu'ils apportent des modifications dans  {{Path|/etc/crontab}} . 

Notez que les tâches programmées dans la ''crontab système'' peuvent ne pas apparaître dans la liste des ''tâches cron'' affichée par <code>crontab -l</code> . 

Bien-sûr, vous pouvez choisir de ne pas utiliser une ''crontab système''. Si vous choisissez ''dcron'' ou ''fcron'', ''ne lancez pas''  <code>crontab /etc/crontab</code>. Si vous choisissez ''vixie-cron'', ''cronie'' ou ''bcron'', vous devriez placer toutes les lignes de {{Path|/etc/crontab}} en commentaires. 

{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Donner un accès à cron à des utilisateurs de confiance ===

Si vous voulez que des utilisateurs autres que ''root'' aient accès au démon ''cron'', lisez cette section, sinon, passez à la section suivante, [[#scheduling| Programmer des tâches cron ]]. 

{{Note|Donner l'accès à la ''crontab'' à un utilisateur ne lui permet pas de lancer des ''tâches cron'' en tant que  ''root''. Si vous voulez qu'un utilisateur soit capable d'éditer la ''crontab'' de ''root'', vous devriez regarder dans <code>sudo</code> . Reportez-vous à notre [http://www.gentoo.org//doc/fr/sudo-guide.xml Guide Gentoo pour les utilisateurs de sudo] pour plus de détails.}}

Peu importe le paquet ''cron'' que vous utilisez, si vous voulez autoriser un utilisateur à utiliser ''crontab'', il doit d'abord faire partie du groupe ''cron''. Par exemple, si vous voulez ajouter l'utilisateur ''wepy'' au groupe ''cron'', vous devez exécuter : 

{{RootCmd|gpasswd -a wepy cron}}

{{Note|Lorsque vous ajoutez un utilisateur au groupe ''cron'', assurez-vous que l'utilisateur se déconnecte et se reconnecte pour que l'ajout au groupe soit effectif.}}

If you're using '''dcron''' , that's all you have to do to give a user access to crontab. Dcron users may proceed to the next section [[#Scheduling_cron-jobs|Scheduling cron-jobs]], all others will want to keep reading. 

If you're using '''fcron''' , you'll want to edit {{Path|/etc/fcron/fcron.deny}} and {{Path|/etc/fcron/fcron.allow}} . The most secure way is to first deny everyone in {{Path|/etc/fcron/fcron.deny}} , and then explicitly allow users in {{Path|/etc/fcron/fcron.allow}} . 

{{Important|If neither {{Path|/etc/fcron/fcron.allow}} nor {{Path|/etc/fcron/fcron.deny}} exist, all users in the cron group will be allowed to use crontab . fcron comes with a default {{Path|fcron.allow}} which '''allows all users''' in the cron group access to fcrontab.}}

{{Code|Autorisation dans  fcron.deny|<pre>
all
</pre>
}}

Maintenant, supposons que l'utilisateur ''wepy'' doivent être capable de programmer ses propres ''tâches cron''. Nous l'ajouterions à  {{Path|/etc/fcron/fcron.allow}} comme ceci : 

{{Code|Autorisation dans  fcron.allow|<pre>
wepy
</pre>
}}

If you chose '''vixie-cron''' or '''cronie''', you'll probably just want to edit {{Path|/etc/cron.allow}} . 

{{Important|It is important to note that if only {{Path|/etc/cron.allow}} exists, then only the cron group users listed there will have access. Otherwise, if only an empty {{Path|/etc/cron.deny}} exists, then all cron group users will be allowed! Do not leave an empty {{Path|/etc/cron.deny}} if you have no {{Path|/etc/cron.allow}} .}}

Par exemple, si vous désiriez donner accès à l'utilisateur ''wepy'' , vous l'ajouteriez à {{Path|/etc/cron.allow}} de cette manière : 

{{Code|Autorisation dans /etc/cron.allow|<pre>
wepy
</pre>
}}

=== Programmer des  ''tâches cron'' ===

Le processus pour éditer des ''crontabs'' est différent pour chacun des paquets, mais tous prennent en charge le même jeu de commande de base ; ajouter et remplacer des ''crontabs'', effacer des ''crontabs'' et lister des ''tâches cron'' dans des ''crontabs''. La liste qui suit indique comment exécuter ces commandes pour chacun des paquets. 

{| class="wikitable" style="text-align: left;" 
|- 
! Version
! Edit crontab
! Remove crontab
! New crontab
! List cron-jobs
|- 
| dcron
| <code>crontab -e</code>
| <code>crontab -d ''[user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|- 
| fcron
| <code>fcrontab -e</code>
| <code>fcrontab -r ''[user]'' </code>
| <code>fcrontab ''file'' </code>
| <code>fcrontab -l</code>
|- 
| vixie-cron, cronie & bcron
| <code>crontab -e</code>
| <code>crontab -r ''-u [user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|-
|}

{{Note|Avec la commande ''remove'', si aucun argument n'est transmis, la ''crontab'' courante de l'utilisateur est effacée.}}

{{Note|''Fcron'' a aussi un lien symbolique de  <code>crontab</code> vers  <code>fcrontab</code> .}}

Avant que vous puissiez utiliser une quelconque de ces commandes, vous devez d'abord comprendre la ''crontab'' elle-même. Chacune des lignes dans une ''crontab'' comprend cinq champs de date/temps à documenter. Ils se présentent dans cette ordre : les minutes (0-59), les heures (0-23), les jours du mois (1-31) , les mois (1-12) et les jours de la semaine (0-7, 1 correspond à lundi et 0 et 7 correspondent à dimanche).  Le jour de la semaine et le mois peuvent être spécifiés en abrégé par trois lettres de cette manière : mon, tue,...,sun,jan,feb,...,dec. Chacun des champs peut aussi spécifier une plage de valeurs (par exemple, mon-fri), une liste de valeurs séparées par une virgule (par exemple, 1,2,3 ou mon,tue,wed) ou une plage de valeurs avec incrément (par exemple, 1-6/2 pour 1,3,5). 

Ceci peut sembler un peu compliqué, mais avec quelques exemples, vous verrez que ça ne l'est pas plus que ça. 

{{Code|Exemples|<pre>
## # Exécuter /bin/false toutes les  minutes durant toute l'année 
*     *     *     *     *        /bin/false
  
## # Exécuter /bin/false à 1:35 on les lundis, mardi, mercredi et le 4 de tous les mois
35    1     4     *     mon-wed  /bin/false
  
## # Exécuter /bin/true à 22:25 le 2 mars
25    22    2     3     *        /bin/true
  
## # Exécuter /bin/false à 2:00 chaque lundi, mercredi et vendredi 
0     2     *     *     1-5/2    /bin/false
</pre>
}}

{{Note|Notez bien comment vous devez spécifier les jours de la semaine et du mois avant de les combiner. Si vous avez * pour seulement l'un d'entre-eux, l'autre prend la priorité, tandis que * pour les deux signifie simplement ''tous les jours''. }}

Pour mettre en pratique ce que nous avons appris jusqu'à maintenant, créons réellement quelques ''tâches cron''. Tout d'abord, créez un fichier appelé {{Path|crons.cron}} et donnons-lui cet allure : 

{{RootCmd|nano crons.cron|output=<pre>
## #Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
</pre>
}}

Nous pouvons maintenant ajouter cette ''crontab'' au système avec la commande de la colonne ''Nouvelle crontab'' tirée du tableau vu plus haut. 

{{RootCmd|crontab crons.cron}}


{{Note|Vous ne verrez pas réellement les sorties de ces commandes tant que vous n'aurez pas redirigé les sorties. }}

Pour vérifier les ''tâches cron'' que vous avez programmées, nous allons utiliser la commande de la colonne ''Lister les tâches cron'' tirée du tableau vu plus haut. 

{{RootCmd|crontab -l}}

Vous devriez apercevoir une liste ressemblant à {{Path|crons.cron}}. Si ce n'est pas le cas, vous avez peut-être utilisé la mauvaise commande pour entrer votre nouvelle ''crontab''. 

Cette ''crontab'' devrait produire la sortie "I really like cron" toutes les  minutes de chaque heure de chaque jour de tous les autres mois.  Évidemment, vous ne désirerez faire ça que si vous aimez réellement cron. La ''crontab'' produira aussi la sortie  "I like cron a little" à 16:30 tous les jours de janvier et février. Elle produira aussi  "I don't really like cron" à 3:10 le premier janvier. 

If you are using anacron, you should keep reading this section. Otherwise, proceed to the next section on [[#Editing_crontabs|Editing crontabs]] . 

Les utilisateurs de Anacron pourront éditer {{Path|/etc/anacrontab}}. Ce fichier comprend quatre champs : le nombre de jours entre deux lancements de commande, le temps de retard en minutes après lequel il lance la commande, le nom de la tâche et la commande à éxécuter. 

For example, to have it run <code>echo "I like anacron"</code> every 5 days, 10 minutes after anacron is started, you would have: 

{{Code|/etc/anacrontab|<pre>
5 10 wasting-time /bin/echo "I like anacron"
</pre>
}}

Anacron se termine après que toutes les tâches de ''anacrontab'' sont terminés, aussi, si nous voulons vérifier ces tâches tous les jours, nous devons utiliser ''cron''. Les instructions à la fin de la prochaine section explique comment le faire.

=== Éditer des crontabs ===

Soyons réaliste un moment, vous ne voulez certainement pas que votre système vous dise combien vous aimez cron toutes les minutes. Pour faire encore un pas en avant, retirons la ''crontab'' en utilisant la commande de la colonne "Retirer la crontab" de notre tableau précédent. Nous listerons ensuite les ''tâches cron'' pour voir si tout s'est bien passé. 

{{RootCmd|crontab -d
|crontab -l}}

Vous ne devriez voir aucune ''tâches cron'' dans la sortie de la commande  <code>crontab -l</code>. Si vous en voyez, cela signifie que la commande de suppression de la ''crontab'' a échoué ou que vous n'avez pas entré la bonne commande. Vérifiez alors que vous utilisez bien la commande du tableau pour votre paquet ''cron''. 

Now that we have a clean state, let's put something useful into the '''root''' crontab. Most people will want to run <code>updatedb</code> on a weekly basis to make sure that <code>mlocate</code> works properly. To add that to your crontab, let's first edit {{Path|crons.cron}} again so that it looks like the following: 

{{Code|Une crontab réelle|<pre>
22 2 * * 1    /usr/bin/updatedb
</pre>
}}

Cela devrait faire que ''cron'' lance ''updatedb'' à 2:22 du matin, le lundi de chaque semaine. Vous devriez maintenant entrer la crontab avec la commande de la colonne ''Nouvelle crontab'' du tableau vu plus haut, et vérifier la liste à nouveau. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Maintenant, supposons que vous vouliez ajouter <code>emerge --sync</code> à votre programme journalier. Vous pourriez le faire  en commençant par éditer {{Path|crons.cron}} puis en utilisant <code>crontab crons.cron</code> tout comme nous l'avons fait jusqu'alors., ou vous pourriez utiliser la commande appropriée issue de la colonne ''Editer une commande'' du tableau précédent. Ceci vous donne le moyen d'éditer votre ''crontab'' utilisateur in situ, sans dépendre de fichiers externes comme <code>crons.cron</code>. 

{{RootCmd|crontab -e}}

Cela devrait ouvrir votre ''crontab'' utilisateur avec un éditeur. Nous voulons exécuter <code>emerge --sync</code> tous les jours à 6:30 du matin, c'est pourquoi nous lui donnons le contenu suivant : 

{{Code|Une  crontab réelle|<pre>
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if you're using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
</pre>
}}

Vérifiez à nouveau la liste des ''tâches cron'' comme nous l'avons fait dans les exemples précédents pour être certains que les tâches sont programmées. Si elles sont toutes là, tout va bien. 

== Utiliser cronbase ==

Comme mentionné plus haut dans ce document, tous les paquets ''cron'' disponibles dépendent de  <code>sys-process/cronbase</code>. Le paquet ''cronbase'' crée {{Path|/etc/cron.{hourly,daily,weekly,monthly}}} et un script appelé <code>run-crons</code>. Vous noterez que le  {{Path|/etc/crontab}} par défaut contient quelque chose du genre : 

{{Code| crontab système par défaut|<pre>
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>
}}

Pour éviter d'entrer dans les détails, nous supposerons simplement que  ces commandes lanceront effectivement des  scripts  toutes les heures, tous les jours, toutes les semaines et tous les mois. 

* Elles seront exécutées même si votre ordinateur est arrêté au moment de leur programmation
* C'est chose facile pour les mainteneurs de paquets de placer des scripts à ces emplacements bien définis 
* Vous savez exactement où sont stockées votre 'crontab'' et vos  ''tâches cron'', vous facilitant ainsi la sauvegarde et la restauration de cette partie de votre système.

{{Note|Again, it is useful to point out that vixie-cron, cronie and bcron automatically read {{Path|/etc/crontab}} , while dcron and fcron do not. Please read the [[#System_crontab|System crontab]] section to learn more about this.}}

== Utiliser anacron ==

Comme mentionné précédemment , anacron est utilisé sur des systèmes qui ne sont pas prévus pour tourner continuellement  (comme la plupart des installation de PC de bureau). Son fichier de configuration par défaut est {{Path|/etc/anacrontab}}. Il ressemble habituellement à ceci :

{{File|/etc/anacrontab||<pre>
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
</pre>}}

Comme vous pouvez le constater la différente principale entre ceci et d'autres crontabs, c'est qu'avec ancron, il n'y a pas de date/heure fixée pour la programmation de la tâche, mais seulement une période entre chacune des exécutions. Lorsqu'anacron est lancé, il vérifie le contenu d'un jeu de fichiers dans  {{Path|/var/spool/anacron}} et calcule si l'entrée correspondante dans le fichier de configuration a expiré depuis la dernière exécution. Si c'est le cas, la commande est invoquée de nouveau.

As a final note, it is important to comment out any overlapping entry in any other cron installed in the system, such as in the following vixie-cron crontab example:

{{File|/etc/crontab||<pre>
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
</pre>}}

Si on ne fait pas ça, les parties daily, weekly et montly seront exécutées - à des instants différents- à la fois par le démon cron et le démon anacron, conduisant à d'éventuels double exécution de tâches.

== Notes finales ==

Rappelez-vous que chacun des paquets ''cron'' est différent et que l'étendue des fonctionnalités varie beaucoup. Reportez-vous absolument aux pages ''man'' sur ''crontab'' ou ''anacrontab'', selon ce que vous utilisez. 

Bonne chance ! 

=== Dépannage ===

Si vous rencontrez des problèmes pour faire fonctionner ''cron'' correctement, vous devriez passer cette courte liste de vérifications en revue : 

==== Est-ce que  ''cron'' est lancé ? ====

Exécutez <code>ps ax | grep cron</code> et assurez-vous qu'il apparaît dans la liste !

==== Est-ce que ''cron'' fonctionne correctement ? ====

Essayez ceci :

{{Code|crontab pour vérifier que  ''cron'' fonctionne|<pre>
* * * * * /bin/echo "foobar" >> /votre_fichier
</pre>}}

Puis vérifiez que {{Path|/votre_fichier}} est modifié régulièrement.

==== Est-ce que votre commande fonctionne ? ====

Comme précédemment, mais peut-être devez-vous rediriger la sortie d'erreur standard aussi :

{{Code|crontab pour vérifier que l'application fonctionne|<pre>
* * * * * /bin/echo "foobar" >> /votre_fichier 2>&amp;1
</pre>}}

==== Est-ce que  ''cron'' lance votre tâche ? ====

Jettez un coup d'œil au  journal de cron , ordinairement {{Path|/var/log/cron.log}} ou {{Path|/var/log/messages}} pour les erreurs.

==== Y-a-t-il des  {{Path|dead.letter}}s? ====

''cron'' envoie généralement un courriel quand il y a un problème ; vérifiez votre courrier et recherchez également des {{Path|~/dead.letter}}.

== Remerciements ==

Nous tenons à remercier les auteurs et éditeurs suivants pour leur contribution à ce guide :


* Eric Brown
* Xavier Neys
* nightmorph


[[Category:Core system]]
[[Category:Daemons]]
