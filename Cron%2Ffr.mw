<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Cet article explique comment configurer et utiliser les démons ''cron'' dans Gentoo Linux.

== Les fondamentaux de cron ==

=== Que fait cron ? ===

Cron est un démon qui exécute des tâches programmées en se basant sur une table de commandes appelée {{c|crontab}}. Il exécute ces tâches en s'éveillant toutes les minutes et en regardant s'il y a des tâches à lancer dans une ''crontab'' quelconque de l'utilisateur. 

{{Note|Noter que {{c|crontab}} est à la fois le nom d'une liste de ''''tâches cron'''' et le nom de la commande d'édition de cette liste.}}

=== Le cron de facto ===

Il y a plusieurs mises en œuvre de cron dans Portage parmi lesquelles choisir. Elles ont toutes la même interface, nommément l'utilisation de la commande  {{c|crontab}} ou d'une commande similaire. Il existe également un utilitaire appelé ''Anacron'' qui est prévu pour fonctionner avec ''cron'' sur des systèmes qui ne fonctionnent pas en permanence. 

Il convient également de noter que tous les paquets cron disponibles dépendent de {{Package|sys-process/cronbase}}. Ce paquet n'est cependant pas techniquement nécessaire à aucun des paquets cron, mais il procure une fonctionnalité similaire à cron que la plupart des utilisateurs apprécient. 

Avant de démarrer avec cron, une mise en œuvre de cron doit être choisie. Dans cet article, sont rassemblées des informations sur chacune des implémentations de cron disponibles dans Gentoo Linux.

== Quel cron est le bon ? ==

{{Note|Emerger {{Package|virtual/cron}} pour installer l'implémentation cron par défaut de Gentoo.}}

=== vixie-cron ===

Vixie-cron est une mise en œuvre complète de cron, basée sur SysV cron. Chaque utilisateur dispose de sa ''crontab'' et est autorisé à spécifier les variables d'environnement dans cette ''crontab''. À la différence des autres variantes de ''cron'', elle offre aussi la prise en charge de ''SELinux'' et ''PAM''. Elle supporte moins d'architectures que ''Dcron'', mais plus que ''Fcron''. La dernière version est la 4.1 qui a été publiée en Janvier 2004.

Fonctionnalités de {{Package|sys-process/vixie-cron}} : 

* Prise en charge de SELinux;
* Prise en charge de PAM ({{Path|/etc/security/limits.conf}}); 
* Définition de variables d'environnement dans les crontabs (PATH, SHELL, HOME, etc.);
* Chaque utilisateur dispose de sa crontab personnellen ; et l'accès est contrôlé par {{Path|cron.allow}} et {{Path|cron.deny}}

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) est un fork de vixie-cron développé par [https://fedorahosted.org/cronie/wiki Fedora]. Comme il s'agit d'un fork il possède les mêmes fonctionnalités que celles de l'original vixie-cron. De plus, cronie est fourni avec une mise en œuvre d'anacron qui doit être activée via l'option <code>anacron</code> de la variable USE.

=== dcron (le Cron de Dillon) ===

[http://www.jimpryor.net/linux/dcron.html 
Dcron] cherche à rester une mise en œuvre de ''cron'', simple, élégante et sûre. Il n'autorise pas la spécification de variables d'environnement dans les ''crontabs'' et toutes les ''''tâches cron'''' sont lancées depuis {{Path|/bin/sh}}. Comme vixie-cron, chaque utilisateur dispose de sa propre ''crontab''. A partir de la version 4, il contiens des fonctionnalités similaires à anacron.

Fonctionnalités de {{Package|sys-process/dcron}} : 

* Rapide, simple et débarrassé de fonctionnalités inutiles;
* L'accès à la {{c|crontab}} est limité au groupe cron, autrement dit il ne se fie pas à des facultés externes.

=== fcron ===

Fcron cherche à remplacer vixie-cron et anacron. Il est prévu pour fonctionner sur des systèmes qui ne sont pas toujours en marche et arrive avec des fonctionnalités supplémentaires. Il prévoit des contraintes de lancement des tâches, la sérialisation des contrôles, la possibilité d'ajouter des valeurs agréables aux tâches et la possibilité de programmer les tâches à lancer au démarrage du système. Voir la [http://fcron.free.fr/ page d'accueil de fcron] pour plus d'informations. 

Fonctionnalités de {{Package|sys-process/fcron}} : 

* Conçu pour fonctionner sur des systèmes qui ne marchent pas en permanence , c'est à dire qu'il peut relancer une tâche au redémarrage de la machine si elle a été manquée;
* Définition de variables d'environnement et de beaucoup d'autres fonctionnalités dans les ''crontabs'';
* Syntaxe des ''crontab'' améliorée avec la prise en charge de plusieurs fonctionnalités nouvelles;
* Chaque utilisateur dispose de sa propre ''crontab'' et l'accès est contrôlé par {{Path|cron.allow}} et  '{{Path|cron.deny}}

=== bcron ===

''bcron'' est un nouveau système cron conçu pour des opérations sécurisées. Pour ce faire, le système est divisé en plusieurs programmes séparés, chacun responsable d'une tâche séparée, avec une communication strictement contrôlée entre eux. L'interface utilisateur est un remplacement dérivé de systèmes similaires (tel que vixie-cron), mais les aspects internes différent profondément. Pour de plus amples informations, se reporter à la page de bcron à [http://untroubled.org/bcron http://untroubled.org/bcron]. 

Fonctionnalités de {{Package|sys-process/bcron}} : 

* Remplaçant de vixie-cron;
* Conception multi-processus;
* Prise en charge native de l'heure d'été.

=== anacron ===

''Anacron'' n'est pas un démon ''cron'', c'est un programme qui fonctionne en conjonction avec l'un d'eux. Il exécute des commandes à des intervalles spécifiées en jours et ne suppose pas que le système reste en marche continuellement ; il lance les tâches qui ont été manquées lorsque le système était arrêté. Ordinairement, ''Anacron'' compte sur un démon ''cron'' pour être lancé tous les jours.

== Utiliser cron ==

=== Installation ===

Choisir la bonne mise en œuvre de ''cron'' voulue, et l'installer :

{{Emerge|dcron}}

S'assurer que le démon cron choisi a été rajouté aux processus init du système; sans cette étape le démon cron ne va pas effectuer son travail.
{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

En option, si Fcron ou dcron ''n'ont pas'' été installés, installer Anacraon comme aide au démon cron peut être sage. 

{{Emerge|anacron}}

Encore, ne pas oublier d'ajouter anacron au processus init du système.
{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== La ''crontab'' système ===

Les messages d'après installation de certains de ces paquets ''cron'' indiquent à l'utilisateur de lancer {{c|crontab /etc/crontab}}. Le fichier {{Path|/etc/crontab}} est le ''crontab système''. Une installation de ''cron'' peut l'utiliser en conjonction avec  {{Package|sys-process/cronbase}} pour lancer les scripts  dans {{Path|/etc/cron.{daily,hourly,weekly,monthly}}} . Noter que seul ''vixie-cron'' et ''cronie''' programment les tâches dans {{Path|/etc/crontab}} automatiquement.  Les utilisateurs de ''dcron'' et de  ''fcron'' devront lancer {{c|crontab /etc/crontab}} à chaque fois qu'ils apportent des modifications dans {{Path|/etc/crontab}} .

Noter que les tâches programmées dans la ''crontab système'' peuvent ne pas apparaître dans la liste des ''tâches cron'' affichée par la commande {{c|crontab -l}}. 

Bien-sûr, les utilisateurs peuvent choisir de ne pas utiliser une ''crontab système''. Si ''dcron'' ou ''fcron'' ont été choisis , ''ne pas'' lancer {{c|crontab /etc/crontab}}. Si ''vixie-cron'', ''cronie'' ou ''bcron'' ont été choisis, commenter toutes les lignes dans {{Path|/etc/crontab}}. 

Un moyen rapide et facile de commenter toutes les lignes dans un fichier est d'utiliser la commande sed. Exécuter la commande suivante pour commenter toutes les lignes dans {{Path|etc/crontab}}
{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Donner un accès à cron à des utilisateurs de confiance ===

Pour que des utilisateurs autres que ''root'' aient accès au démon ''cron'', lire cette section, sinon, passer à la section suivante, [[#Programmer_des_t.C3.A2ches_cron| Programmer des tâches cron ]]. 

{{Note|Donner l'accès à la ''crontab'' à un utilisateur ne lui permet pas de lancer des ''tâches cron'' en tant que ''root''. Pour qu'un utilisateur soit capable d'éditer la ''crontab'' de ''root'', regarder dans l'utilisation de {{c|sudo}} ({{Package|app-admin/sudo}}). Se reporter au [[Sudo/fr| Guide Gentoo pour les utilisateurs de sudo]] pour plus de détails.}}

Peu importe le paquet ''cron'' utilisé, pour autoriser un utilisateur à utiliser ''crontab'', il doit d'abord faire partie du groupe ''cron''. Par exemple, pour ajouter l'utilisateur ''wepy'' au groupe ''cron'', exécuter : 

{{RootCmd|gpasswd -a wepy cron}}

{{Note|Lorsque un utilisateur est ajouté au groupe ''cron'', s'assurer que l'utilisateur se déconnecte et se reconnecte pour que l'ajout au groupe soit effectif.}}

Si '''Dcron''' est utilisé, l'étape précédente est suffisante pour donner accès à ''crontab'' à un utilisateur. Les utilisateurs de ''Dcron'' peuvent passer à la section suivante [[#Programmer_des_t.C3.A2ches_cron|Programmer des tâches cron ]], tous les autres doivent continuer à lire. 

Si '''fcron''' est utilisé, éditer {{Path|/etc/fcron/fcron.deny}} et {{Path|/etc/fcron/fcron.allow}}. La manière la plus sûre est d'interdire tout les utilisateurs dans un premier temps dans {{Path|/etc/fcron/fcron.deny}} , puis d'autoriser explicitement des utilisateurs dans {{Path|/etc/fcron/fcron.allow}} . 

{{Important|Si, ni {{Path|/etc/fcron/fcron.allow}} ni {{Path|/etc/fcron/fcron.deny}} n'existent alors tous les utilisateurs du groupe ''cron'' seront autorisés à utiliser ''crontab''. ''fcron'' est fourni avec  {{Path|fcron.allow}} par défaut, ce qui '''autorise  tous les utilisateurs''' du groupe ''cron'' à accéder à ''fcrontab'' .}}

{{CodeBox|title=Autorisations dans fcron.deny|1=
all
}}

Si l'utilisateur ''wepy'' doit être capable de programmer ses propres ''tâches cron'', l'ajouter à {{Path|/etc/fcron/fcron.allow}} comme ceci : 

{{CodeBox|title=Autorisations dans fcron.allow|1=
wepy
}}

Si '''vixie cron'''  ou '''cronie''' ont été choisis, éditer simplement le fichier {{Path|/etc/fcron/fcron.allow}}. 

{{Important|Il est important de noter que si seul {{Path|/etc/cron.allow}} existe, alors seuls les utilisateurs du groupe ''cron'' qui y sont listés auront accès.  Autrement, si seulement un fichier {{Path|/etc/cron.deny}} vide existe, alors tous les utilisateurs du groupe ''cron''  seront autorisés. Ne pas laisser {{Path|/etc/cron.deny}} vide si le fichier {{Path|/etc/cron.allow}} n'existe pas.}}

Par exemple, pour donner accès à l'utilisateur ''wepy'' , l'ajouter à {{Path|/etc/cron.allow}} de cette manière : 

{{CodeBox|title=Autorisations dans /etc/cron.allow|1=
wepy
}}

=== Programmer des ''tâches cron'' ===

Le processus pour éditer des ''crontabs'' est différent pour chacun des paquets, mais tous prennent en charge le même jeu de commandes de base ; ajouter et remplacer des ''crontabs'', effacer des ''crontabs'' et lister les ''tâches cron'' dans les ''crontabs''. La liste qui suit indique comment exécuter diverses commandes pour chacun des paquets. 

{| class="wikitable" style="text-align: left;" 
|- 
! Version
! Éditer la crontab
! Supprimer la crontab
! Nouvelle crontab
! Lister les ''tâches cron''
|- 
| dcron
| {{c|crontab -e}}
| {{c|crontab -d ''[user]'' }}
| {{c|crontab ''file'' }}
| {{c|crontab -l}}
|- 
| fcron
| {{c|fcrontab -e}}
| {{c|fcrontab -r ''[user]'' }}
| {{c|fcrontab ''file'' }}
| {{c|fcrontab -l}}
|- 
| vixie-cron, cronie & bcron
| {{c|crontab -e}}
| {{c|crontab -r ''-u [user]'' }}
| {{c|crontab ''file'' }}
| {{c|crontab -l}}
|-
|}

{{Note|Avec la commande ''remove'', si aucun argument n'est transmis, la ''crontab'' courante de l'utilisateur est effacée.}}

{{Note|''Fcron'' possède aussi un lien symbolique de  crontab vers fcrontab.}}

Avant que ces commandes ne puissent être utilisées, il faut d'abord comprendre la ''crontab'' elle-même. Chacune des lignes dans une ''crontab'' comprend cinq champs de date/temps à documenter. Ils se présentent dans cette ordre : les minutes (0-59), les heures (0-23), les jours du mois (1-31), les mois (1-12) et les jours de la semaine (0-7, 1 correspond à lundi et 0 et 7 correspondent à dimanche). Les jours de la semaine et le mois peuvent être spécifiés en abrégé par trois lettres de cette manière : mon, tue, jan, feb, etc. Chacun des champs peut aussi spécifier une plage de valeurs (par exemple, 1-5 ou mon-fri), une liste de valeurs séparées par une virgule (par exemple, 1,2,3 ou mon,tue,wed) ou une plage de valeurs avec incrément (par exemple, 1-6/2 pour 1,3,5). 

Cela peut sembler un peu compliqué, mais avec quelques exemples, il est facile de voir que ça ne l'est pas plus que ça.

{{CodeBox|title=Exemples|1=
## # Exécuter /bin/false toutes les  minutes durant toute l'année 
*     *     *     *     *        /bin/false
  
## # Exécuter /bin/false à 01:35 on les lundis, mardi, mercredi et le 4 de tous les mois
35    1     4     *     mon-wed  /bin/false
  
## # Exécuter /bin/true à 22:25 le 2 mars
25    22    2     3     *        /bin/true
  
## # Exécuter /bin/false à 02:00 chaque lundi, mercredi et vendredi 
0     2     *     *     1-5/2    /bin/false
}}

{{Note|Bien noter comment les jours de la semaine et du mois doivent être spécifiés avant de les combiner. Si * est utilisé pour seulement l'un d'entre-eux, l'autre prend la priorité, tandis que * pour les deux signifie simplement ''tous les jours''. }}

Pour mettre en pratique ce qui vient d'être appris jusqu'à maintenant, créer réellement quelques ''tâches cron''. Tout d'abord, créer un fichier appelé {{Path|crons.cron}} et lui donner cette allure : 

{{FileBox|filename=crons.cron|title=Créer un fichier crons.cron|1=
## #Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
}}

Maintenant, ajouter cette ''crontab'' au système avec la commande de la colonne ''Nouvelle crontab'' tirée du tableau vu plus haut. 

{{RootCmd|crontab crons.cron}}

{{Note|Les sorties de ces commandes ne seront pas vues tant qu'elles ne seront pas redirigées. }}

Pour vérifier les ''tâches cron'' programmées, utiliser la commande de la colonne ''Lister les tâches cron'' tirée du tableau vu plus haut. 

{{RootCmd|crontab -l}}

Une liste ressemblant à {{Path|crons.cron}} devrait s'afficher. Si ce n'est pas le cas, peut-être que la mauvaise commande a été utilisée pour entrer la nouvelle ''crontab''. 

Cette ''crontab'' devrait produire la sortie "I really like cron" toutes les  minutes de chaque heure de chaque jour de tous les autres mois. Évidemment, un utilisateur ne voudra faire ça que s'il aime réellement cron. La ''crontab'' produira aussi la sortie  "I like cron a little" à 16:30 tous les jours de janvier et février. Elle produira aussi "I don't really like cron" à 03:10 le premier janvier. 

Si anacron est utilisé, continuer de lire cette section. Sinon, passer à la section suivante  [[#Éditer_des_crontabs| Éditer des crontabs]] 

Les utilisateurs de Anacron pourront éditer {{Path|/etc/anacrontab}}. Ce fichier comprend quatre champs : le nombre de jours entre deux lancements de commande, le temps de retard en minutes après lequel il lance la commande, le nom de la tâche et la commande à exécuter. 

Par exemple, pour qu'il lance {{c|echo "I like anacron"}} tous les 5 jours, 10 minutes après le démarrage de anacron, écrire : 

{{FileBox|filename=/etc/anacrontab|1=
5 10 wasting-time /bin/echo "I like anacron"
}}

Anacron se termine après que toutes les tâches de ''anacrontab'' sont terminés. Pour vérifier si ces tâches doivent être exécutées tous les jours, utiliser un démon ''cron''. Les instructions à la fin de la prochaine section expliquent comment le faire.

=== Éditer des crontabs ===

Il faut être réaliste, aucun utilisateur ne souhaite que leur système leur dise combien ils aiment cron toutes les minutes. Pour faire encore un pas en avant, supprimer la ''crontab'' précédente en utilisant la commande de la colonne "Retirer la crontab" du tableau. Puis, utiliser la commande pour lister les tâches de cron correspondante pour vérifier que cela a marché. 

{{RootCmd|crontab -d
|crontab -l}}

Aucune ''tâches cron'' ne devrait être affichée dans la sortie de la commande {{c|crontab -l}}. Si des tâches sont affichées, cela signifie que la commande de suppression de la ''crontab'' a échouée. Vérifier alors que vous la bonne commande du tableau soit utilisée en fonction du paquet ''cron'' utilisé par le système. 

Maintenant, placer quelque chose d'utile dans la ''crontab '' de ''root''. La plupart des gens voudra exécuter {{c|updatedb}} toutes les semaines pour être certains que mlocate fonctionne correctement. Pour ajouter cela à la ''crontab'' du système, commencer par éditer {{Path|crons.cron}} à nouveau pour qu'il contienne ce qui suit : 

{{CodeBox|title=Une crontab réelle|1=
22 2 * * 1    /usr/bin/updatedb
}}

Cela devrait faire que ''cron'' lance ''updatedb'' à 2:22 du matin, le lundi de chaque semaine. Maintenant, enregistrer la crontab avec la commande de la colonne ''Nouvelle crontab'' du tableau vu plus haut, et vérifier la liste à nouveau. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Maintenant, supposer que {{c|emerge --sync}} doit être exécuté tous les jours afin de garder l'arbre portage à jour. Il est possible de le faire en commençant par éditer {{Path|crons.cron}} puis en utilisant {{c|crontab crons.cron}}  tout comme il a été fait jusqu'alors, ''ou'' en utilisant la commande appropriée issue de la colonne ''Editer une commande'' du tableau précédent. Ceci vous donne le moyen d'éditer la ''crontab'' utilisateur sur place, sans dépendre de fichiers externes comme {{Path|crons.cron}}. 

{{RootCmd|crontab -e}}

Cela devrait ouvrir la ''crontab'' utilisateur avec un éditeur. Par exemple si la commande {{c|emerge --sync}} doit être exécutée tous les jours à 6:30 du matin, lui donner le contenu suivant : 

{{CodeBox|title=Une crontab réelle|1=
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (Si anacron est utilisé, ajouter cette ligne)
30 7 * * *    /usr/sbin/anacron -s
}}

Vérifier à nouveau la liste des ''tâches cron'' comme il a été fait dans les exemples précédents pour être certains que les tâches soient programmées. Si elles sont toutes là, tout va bien.

== Utiliser cronbase ==

Comme mentionné plus haut, tous les paquets ''cron'' disponibles dépendent de {{Package|sys-process/cronbase}}. Le paquet ''cronbase'' crée {{Path|/etc/cron.{hourly,daily,weekly,monthly}}} et un script appelé {{Path|run-crons}}. Noter que le  fichier {{Path|/etc/crontab}} par défaut contient quelque chose du genre : 

{{CodeBox|title=Crontab système par défaut|1=
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
}}

Pour éviter d'entrer dans les détails, supposer simplement que  ces commandes lanceront effectivement des scripts toutes les heures, tous les jours, toutes les semaines et tous les mois. Cette méthode de programmation de tâches cron a plusieurs avantages : 

* Elles seront exécutées même si l'ordinateur est arrêté au moment où elles devaient s'exécuter;
* Il est facile pour les mainteneurs de paquets de placer des scripts à ces emplacements bien définis;
* Les administrateurs savent exactement où la 'crontab'' et les ''tâches cron'' sont stockées , facilitant ainsi la sauvegarde et la restauration de cette partie du système.

{{Note|Il est utile de signaler à nouveau que ''vixie-cron'' et ''bcron'' lisent automatiquement {{Path|/etc/crontab}} , tandis que  ''dcron'' et  ''fcron'' ne le font pas. Lire la section [[#Systemtab_crontab|Les tables système]] pour en savoir plus à ce propos.}}

== Utiliser anacron ==

As mentioned earlier, anacron is used on systems not meant to be run continuously (like most of the desktop installations). Its default configuration file, {{Path|/etc/anacrontab}}, is usually similar to the following:

{{FileBox|filename=/etc/anacrontab|1=
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
}}

La différente principale entre cela et d'autres crontabs, c'est qu'avec anacron, il n'y a pas de date/heure fixée pour la programmation de la tâche, mais seulement une période entre chacune des exécutions. Lorsque anacron est lancé, il vérifie le contenu d'un jeu de fichiers dans  {{Path|/var/spool/anacron}} et calcule si l'entrée correspondante dans le fichier de configuration a expiré depuis la dernière exécution. Si c'est le cas, la commande est invoquée de nouveau.

Comme dernier mot, il est important de neutraliser en les commentant toutes les entrées qui se recouvrent dans tous les autres cron installés sur le système, comme dans l'exemple suivant de crontab vixie-cron :

{{FileBox|filename=/etc/crontab|1=
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
}}

Si ce n'est pas fait, les parties daily, weekly et montly seront exécutées - à des instants différents - à la fois par le démon cron et le démon anacron, conduisant à d'éventuelles double exécutions de tâches.


== Dépannage ==

Si des problèmes sont rencontrer pour faire fonctionner ''cron'' correctement, cette courte liste de vérifications peut être utile.

Chacun des paquets ''cron'' est différent et l'étendue des fonctionnalités varie beaucoup. Se reporter absolument aux pages ''man'' sur ''crontab'', ''fcrontab'' ou ''anacrontab'', selon quel démon cron est utilisé. 

==== Est-ce que ''cron'' est lancé ? ====

Exécuter <code>ps ax | grep cron</code> et s'assurer qu'il apparaît dans la liste des processus:

{{RootCmd|<nowiki>ps ax | grep cron</nowiki>}}

==== Est-ce que ''cron'' fonctionne correctement ? ====

Essayer ceci :

{{CodeBox|title=crontab pour vérifier que ''cron'' fonctionne|1=
* * * * * /bin/echo "foobar" >> /un_fichier
}}

Puis vérifier que {{Path|/un_fichier}} est modifié régulièrement.

==== Est-ce que la commande fonctionne ? ====

Comme précédemment, mais peut-être est-il nécessaire de rediriger la sortie d'erreur standard aussi :

{{CodeBox|title=crontab pour vérifier que l'application fonctionne|1=
* * * * * /bin/echo "foobar" >> /un_fichier 2>&1
}}

==== Est-ce que ''cron'' lance la tâche ? ====

Jeter un coup d'œil au journal de cron , ordinairement {{Path|/var/log/cron.log}} ou {{Path|/var/log/messages}} pour les erreurs.

==== Y-a-t-il des {{Path|dead.letter}}s? ====

cron usually sends mail when there is a problem; check for mail and look for the creation of a {{Path|~/dead.letter}} file.

== Cron Jobs Alternatives ==

Some hosting companies do not allow access to cron, but many cron jobs alternatives can be found which are free or commercially available:

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
