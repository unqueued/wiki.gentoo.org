<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Cet article explique comment configurer et utiliser les démons ''cron'' dans Gentoo Linux.

== Les fondamentaux de cron ==

=== Que fait cron ? ===

Cron est un démon qui exécute des tâches programmées en se basant sur une table de commandes appelée {{c|crontab}}. Il exécute ces tâches en s'éveillant toutes les minutes et en regardant s'il y a des tâches à lancer dans une ''crontab'' quelconque de l'utilisateur. 

{{Note|Noter que {{c|crontab}} est à la fois le nom d'une liste de ''''tâches cron'''' et le nom de la commande d'édition de cette liste.}}

=== Le cron de facto ===

Il y a plusieurs mises en œuvre de cron dans Portage parmi lesquelles choisir. Elles ont toutes la même interface, nommément l'utilisation de la commande  {{c|crontab}} ou d'une commande similaire. Il existe également un utilitaire appelé ''Anacron'' qui est prévu pour fonctionner avec ''cron'' sur des systèmes qui ne fonctionnent pas en permanence. 

Il convient également de noter que tous les paquets cron disponibles dépendent de {{Package|sys-process/cronbase}}. Ce paquet n'est cependant pas techniquement nécessaire à aucun des paquets cron, mais il procure une fonctionnalité similaire à cron que la plupart des utilisateurs apprécient. 

Avant de démarrer avec cron, une mise en œuvre de cron doit être choisie. Dans cet article, sont rassemblées des informations sur chacune des implémentations de cron disponibles dans Gentoo Linux.

== Quel cron est bon pour la tâche ? ==

{{Note|Emerge {{Package|virtual/cron}} pour installer l'implémentation cron par défaut de Gentoo.}}

=== Vixie-cron ===

Vixie cron est une mise en œuvre de cron,  basée sur SysV cron, comprenant toutes les fonctionnalités. Chaque utilisateur dispose de sa ''crontab'' et est autorisé à spécifier les variables d'environnement dans cette ''crontab''. À la différence des autres variantes de ''cron'', elle offre aussi la prise en charge de ''SELinux'' et ''PAM''. Elle supporte moins d'architectures que ''Dcron'', mais plus que ''Fcron''. La dernière version est la 4.1 qui a été publiée en Janvier 2004.

Fonctionnalités de {{Package|sys-process/vixie-cron}} : 

* Prise en charge de  SELinux;
* Prise en charge de PAM ({{Path|/etc/security/limits.conf}}); 
* Définition de variables d'environnement dans les crontabs (PATH, SHELL, HOME, etc.);
* Chaque utilisateur dispose de sa crontab personnelle; l'accès est contrôlé par {{Path|cron.allow}} et {{Path|cron.deny}}

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) est un dérivé (fork) de  vixie-cron produit par [https://fedorahosted.org/cronie/wiki Fedora]. Comme il s'agit d'un dérivé il possède les mêmes fonctionnalités que celles de l'original vixie-cron. En plus, cronie est fourni avec une mise en œuvre d'anacron qui doit être activé via l'option <code>anacron</code> de la variable USE.

=== dcron (le  Cron de Dillon) ===

[http://www.jimpryor.net/linux/dcron.html 
Dcron] cherche à rester une mise en œuvre de ''cron'', simple, élégante et sûre. Il n'autorise pas la spécification de variables d'environnement dans les ''crontabs'' et toutes les ''''tâches cron'''' sont lancées depuis {{Path|/bin/sh}}. Comme vixie-cron, chaque utilisateur dispose de sa propre ''crontab''. A partir de la version 4, il contiens des fonctionnalités similaires à anacron.

Fonctionnalités de  {{Package|sys-process/dcron}} : 

* Rapide, simple et débarassé de fonctionnalités inutiles;
* L'accès à la {{c|crontab}} est limité au groupe cron, i.e. il ne se fie pas à des facultés externes.

=== fcron ===

Fcron cherche à remplacer vixie-cron et anacron. Il est prévu pour fonctionner sur des systèmes qui ne sont pas toujours en marche et arrive avec des fonctionnalités supplémentaires. Il prévoit des contraintes de lancement des tâches, la sérialisation des contrôles, la possibilité d'ajouter des valeurs ''nice'' aux tâches et la possibilité de programmer les tâches à lancer au démarrage du système. Voir la [http://fcron.free.fr/ page d'accueil de fcron] pour plus d'information 

Fonctionnalités de {{Package|sys-process/fcron}} : 

* Conçu pour fonctionner sur des systèmes qui ne tourne pas en permanence , i.e. il peut relancer une tâche au redémarrage de la machine si elle a été manquée;
* Définition de  variables d'environnement et de beaucoup d'autres fonctionnalités dans les  ''crontabs'';
* Syntaxe des "crontab" améliorée avec prise en charge de plusieurs fonctionnalités nouvelles;
* Chaque utilisateur dispose de sa propre ''crontab'', l'accès est contrôlé par {{Path|cron.allow}} et  '{{Path|cron.deny}}

=== bcron ===

''bcron'' est un nouveau système cron conçu pour des opérations sécurisées. Pour ce faire, le système est divisé en plusieurs programmes séparés, chacun responsable d'une tâche séparée, avec une communication strictement contrôlée entre eux. L'interface utilisateur est un remplaçant dérivé de systèmes similaires (tel que vixie-cron), mais les aspects internes différent profondément. Pour une plus ample information, reportez-vous à la page de bcron à  [http://untroubled.org/bcron http://untroubled.org/bcron]  . 

Fonctionnalités de {{Package|sys-process/bcron}} : 

* Remplaçant de  vixie-cron;
* Conception multiprocessus;
* Prise en charge native de l'heure d'été.

=== anacron ===

''Anacron'' n'est pas un démon ''cron'', c'est un programme qui fonctionne en conjonction avec l'un d'eux. Il exécute des commandes à des intervalles spécifiés en jours et ne suppose pas que le système reste en marche continuellement ; il lance les tâches qui ont été manquées lorsque le système était arrêté. Ordinairement, ''Anacron'' compte sur un démon ''cron'' pour être lancé tous les jours.

== Utiliser cron ==

=== Installation ===

Choisissez la bonne mise en œuvre de ''cron'' que vous préférez et installez la.

{{Emerge|dcron}}

Assurez-vous que le démon cron choisi a été rajouté aux processus init du système; sans cette étape le démon cron ne va pas effectuer son travail.
{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

Optionally, if Fcron or dcron have '''not''' been installed, installing Anacron as a helper to the cron daemon might be a wise choice. 

{{Emerge|anacron}}

Again, do not forget to add anacron to the system's init process.
{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== La ''crontab'' système ===

The post install messages from some of these cron packages instruct the user to run {{c|crontab /etc/crontab}}. The {{Path|/etc/crontab}} file is the ''system crontab''. A cron installation can use it in conjunction with {{Package|sys-process/cronbase}} to run the scripts in {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}. Note that only vixie-cron and cronie schedule jobs in {{Path|/etc/crontab}} automatically. Dcron and fcron users will need to run {{c|crontab /etc/crontab}} every time they make changes to the {{Path|/etc/crontab}} file.

Please note that jobs scheduled in the system crontab might not show up in the list of cron-jobs displayed by running {{c|crontab -l}}. 

Of course, users can choose not to use any system crontab at all. If dcron or fcron has been chosen, do '''not''' run {{c|crontab /etc/crontab}}. If vixie-cron, cronie or bcron has been chosen comment all lines in {{Path|/etc/crontab}}. 

A quick and easy way to comment out all the lines in a file is by using the sed command. Run the following command to comment out all the lines in {{Path|etc/crontab}}
{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Donner un accès à cron à des utilisateurs de confiance ===

For users other than root to have access to the cron daemon, read this section, otherwise proceed to the next section: [[#Scheduling_cron-jobs|Scheduling cron-jobs]]. 

{{Note|Giving another user access to crontab does not let him run cron-jobs as root. For a user to be able to edit the root crontab, look into using {{c|sudo}} ({{Package|app-admin/sudo}}). Please read the [[Sudo|Gentoo Sudo(ers) Guide]] for more details.}}

No matter which cron package has been chosen, to allow a user to use crontab he will first have to be in the cron group. As an example, to add the user ''wepy'' to the cron group run: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note|When adding a user to the cron group, make sure that the user logs out and logs back in for the group change to take effect.}}

When using '''dcron''', the above step is all that is needed to give a user access to crontab. Dcron users may proceed to the next section [[#Scheduling_cron-jobs|Scheduling cron-jobs]], all others need to keep reading. 

When using '''fcron''', edit the {{Path|/etc/fcron/fcron.deny}} and {{Path|/etc/fcron/fcron.allow}} files. The most secure way to run a system is to first deny all users in {{Path|/etc/fcron/fcron.deny}}, and then explicitly allow users in {{Path|/etc/fcron/fcron.allow}}. 

{{Important|If neither {{Path|/etc/fcron/fcron.allow}} nor {{Path|/etc/fcron/fcron.deny}} exist then all users in the cron group will be allowed to use crontab. fcron comes with a default {{Path|fcron.allow}} which '''allows all users''' in the cron group access to fcrontab.}}

{{CodeBox|title=Permissions in fcron.deny|1=
all
}}

If a user (''wepy'' again for this example) should be able to schedule his own cron-jobs, then add him to {{Path|/etc/fcron/fcron.allow}} as follows: 

{{CodeBox|title=Permissions in fcron.allow|1=
wepy
}}

If '''vixie-cron''' or '''cronie''' has been chosen, then simply edit the {{Path|/etc/cron.allow}} file. 

{{Important|It is important to note that if only {{Path|/etc/cron.allow}} exists, then only the cron group users listed there will have access. Otherwise, if only an empty {{Path|/etc/cron.deny}} exists, then ''all'' cron group users will be allowed. Do not leave an empty {{Path|/etc/cron.deny}} if no {{Path|/etc/cron.allow}} file exists!}}

For example, to allow access to the user ''wepy'', add him to {{Path|/etc/cron.allow}} as follows: 

{{CodeBox|title=Permissions in /etc/cron.allow|1=
wepy
}}

=== Programmer des  ''tâches cron'' ===

The process of editing crontabs is different for each package, but they all support the same basic set of commands: adding and replacing crontabs, editing crontabs, deleting crontabs, and listing cron-jobs in crontabs. The following list shows how to run various commands for each package. 

{| class="wikitable" style="text-align: left;" 
|- 
! Version
! Edit crontab
! Remove crontab
! New crontab
! List cron-jobs
|- 
| dcron
| {{c|crontab -e}}
| {{c|crontab -d ''[user]'' }}
| {{c|crontab ''file'' }}
| {{c|crontab -l}}
|- 
| fcron
| {{c|fcrontab -e}}
| {{c|fcrontab -r ''[user]'' }}
| {{c|fcrontab ''file'' }}
| {{c|fcrontab -l}}
|- 
| vixie-cron, cronie & bcron
| {{c|crontab -e}}
| {{c|crontab -r ''-u [user]'' }}
| {{c|crontab ''file'' }}
| {{c|crontab -l}}
|-
|}

{{Note|Avec la commande ''remove'', si aucun argument n'est transmis, la ''crontab'' courante de l'utilisateur est effacée.}}

{{Note|Fcron also has a symlink from crontab to fcrontab.}}

Before any of these commands can be used, first understanding of the crontab itself is needed. Each line in a crontab specifies five time fields in the following order: the minutes (0-59), hours (0-23), days of the month (1-31), months (1-12), and days of the week (0-7, Monday is day 1, Sunday is day 0 and day 7). The days of the week and months can be specified by three-letter abbreviations like mon, tue, jan, feb, etc. Each field can also specify a range of values (e.g. 1-5 or mon-fri), a comma separated list of values (e.g. 1,2,3 or mon,tue,wed) or a range of values with a ''step'' (e.g. 1-6/2 as 1,3,5). 

That sounds a little confusing, but with a few examples it is easy to see it is not as complicated as it sounds.

{{CodeBox|title=Examples|1=
# Run /bin/false every minute year round
*     *     *     *     *        /bin/false
  
# Run /bin/false at 1:35 on the mon,tue,wed and the 4th of every month
35    1     4     *     mon-wed  /bin/false
  
# Run /bin/true at 22:25 on the 2nd of March
25    22    2     3     *        /bin/true
  
# Run /bin/false at 2:00 every Monday, Wednesday and Friday
0     2     *     *     1-5/2    /bin/false
}}

{{Note|Notice how to specify specific days of the week and days of the month before they are combined. If * is used for only one of them, the other takes precedence, while * for both just means every day.}}

To test what was just covered go through the steps of actually inputting a few cron-jobs. First, create a file called {{Path|crons.cron}} and make it look like the this: 

{{FileBox|filename=crons.cron|title=Create a crons.cron file|1=
#Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
}}

Now add that crontab to the system with the "new command" from the table above. 

{{RootCmd|crontab crons.cron}}

{{Note|The output from the echo commands will not be seen unless redirection is used.}}

To verify the scheduled cron-jobs, use the proper ''list command'' from the table above. 

{{RootCmd|crontab -l}}

A list resembling {{Path|crons.cron}} should be displayed; if not maybe the wrong command was issued to input the crontab. 

This crontab should echo "I really like cron" every minute of every hour of every day every other month. Obviously a user would only do that if they really liked cron. The crontab will also echo "I like cron a little" at 16:30 every day in January and February. It will also echo "I don't really like cron" at 3:10 on the January 1st. 

If using anacron keep reading this section. Otherwise, proceed to the next section on [[#Editing_crontabs|Editing crontabs]]. 

Les utilisateurs de Anacron pourront éditer {{Path|/etc/anacrontab}}. Ce fichier comprend quatre champs : le nombre de jours entre deux lancements de commande, le temps de retard en minutes après lequel il lance la commande, le nom de la tâche et la commande à éxécuter. 

For example, to have it run {{c|echo "I like anacron"}} every 5 days, 10 minutes after anacron is started, enter the following: 

{{FileBox|filename=/etc/anacrontab|1=
5 10 wasting-time /bin/echo "I like anacron"
}}

Anacron exits after all of the jobs in anacrontab have finished. To check to see if these jobs should be performed every day, a cron daemon will be used. The instructions at the end of the next section explain how this should be handled.

=== Éditer des crontabs ===

Being realistic, no user would want their system telling them how much they like cron every minute. As a step forward, remove the previous example crontab using the corresponding ''remove command'' from the table above. Use the corresponding list command to view the cron-jobs afterward to make sure it worked. 

{{RootCmd|crontab -d
|crontab -l}}

No cron-jobs should be displayed in the output from {{c|crontab -l}}. If cron jobs are listed, then the remove command failed to remove the crontab; verify the correct ''remove command'' for the system's cron package. 

Now that we have a clean state, let's put something useful into the '''root''' crontab. Most people will want to run {{c|updatedb}} on a weekly basis to make sure that mlocate works properly. To add that to the system's crontab, first edit {{Path|crons.cron}} again so that it looks like the following: 

{{CodeBox|title=A real crontab|1=
22 2 * * 1    /usr/bin/updatedb
}}

That would make cron run updatedb at 2:22 A.M. on Monday morning every week. Now input the crontab with the proper ''new command'' from the table above, and check the list again. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Now let's say {{c|emerge --sync}} should be ran on a daily schedule in order to keep the Portage tree up to date. This could be done by first editing {{Path|crons.cron}} and then using {{c|crontab crons.cron}} as was done in the example above, ''or'' by using the proper ''edit command'' from the table above. This provides a way to edit the user's crontab in situ, without depending on external files like {{Path|crons.cron}}. 

{{RootCmd|crontab -e}}

The above command should open the user's crontab with an editor. For example, if {{c|emerge --sync}} is to be run every day at 6:30 A.M., make the crontab look something like this: 

{{CodeBox|title=A real crontab|1=
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
}}

Again, check the cron-jobs list as done in the previous examples to make sure the jobs are scheduled. If they are all there, then the system is ready to rock and roll.

== Utiliser cronbase ==

As mentioned earlier, all of the available cron packages depend on {{Package|sys-process/cronbase}}. The cronbase package creates {{Path|/etc/cron.{hourly,daily,weekly,monthly}}}, and a script called {{Path|run-crons}}. Notice the default {{Path|/etc/crontab}} file contains something like this: 

{{CodeBox|title=Default system crontab|1=
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
}}

To avoid going into much detail, assume these commands will effectively run hourly, daily, weekly and monthly scripts. This method of scheduling cron-jobs has some important advantages: 

* They will run even if the computer was off when they were scheduled to run;
* It is easy for package maintainers to place scripts in those well defined places;
* The administrators know exactly where the cron-jobs and crontab are stored, making it easy to backup and restore these parts of their systems.

{{Note|Il est utile de signaler à nouveau que ''vixie-cron'' et ''bcron'' lisent automatiquement {{Path|/etc/crontab}} , tandis que  ''dcron'' et  ''fcron'' ne le font pas. Lisez la section [[#systemtab|Les tables système]] pour en savoir plus à ce propos.}}

== Utiliser anacron ==

As mentioned earlier, anacron is used on systems not meant to be run continuously (like most of the desktop installations). Its default configuration file, {{Path|/etc/anacrontab}}, is usually similar to the following:

{{FileBox|filename=/etc/anacrontab|1=
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
}}

The main difference between this and other common crontabs is that with anacron there is no fixed date/hour for the job scheduling, but only the period between every run. When anacron is started, it will check the contents of a set of files in {{Path|/var/spool/anacron}} and calculate if the corresponding entry in the configuration file has expired since the last run. If it has, then the command is invoked again.

Comme dernier mot, il est important de neutraliser en les  commentant toutes les entrées qui se recouvrent dans toutes les autres cron installés sur le système, comme dans l'exemple suivant de  crontab vixie-cron :

{{FileBox|filename=/etc/crontab|1=
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
}}

Si on ne fait pas ça, les parties daily, weekly et montly seront exécutées - à des instants différents- à la fois par le démon cron et le démon anacron, conduisant à d'éventuels double exécution de tâches.


== Troubleshooting ==

When having problems getting cron to work properly, this quick checklist might be helpful.

Remember, each cron package is different and the range of features varies greatly. Be sure to consult the man pages for crontab, fcrontab, or anacrontab, depending on which cron daemon has been activated! 

==== Est-ce que  ''cron'' est lancé ? ====

To verify that cron is running, see if it shows up in the process list:

{{RootCmd|<nowiki>ps ax | grep cron</nowiki>}}

==== Est-ce que ''cron'' fonctionne correctement ? ====

Essayez ceci :

{{CodeBox|title=crontab to see if cron is running|1=
* * * * * /bin/echo "foobar" >> /file_you_own
}}

Puis vérifiez que {{Path|/votre_fichier}} est modifié régulièrement.

==== Is the command working? ====

Comme précédemment, mais peut-être devez-vous rediriger la sortie d'erreur standard aussi :

{{CodeBox|title=crontab to verify application runs|1=
* * * * * /bin/echo "foobar" >> /file_you_own 2>&1
}}

==== Can cron run the job? ====

Check the cron log, usually {{Path|/var/log/cron.log}} or {{Path|/var/log/messages}} for errors.

==== Y-a-t-il des  {{Path|dead.letter}}s? ====

cron usually sends mail when there is a problem; check for mail and look for the creation of a {{Path|~/dead.letter}} file.

== Cron Jobs Alternatives ==

Some hosting companies do not allow access to cron, but many cron jobs alternatives can be found which are free or commercially available:

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
