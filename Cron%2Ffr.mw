<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Ce guide explique comme configurer et utiliser ''cron''.

== Les fondamentaux de cron ==

=== Que fait cron ? ===

Cron est un démon qui exécute des tâches programmées en se basant sur une table de commandes appelée <code>crontab</code>. Il exécute ces tâches en s'éveillant toutes les minutes et en regardant s'il y a des tâches à lancer dans une ''crontab'' quelconque de l'utilisateur. 

{{Note|Notez que ''crontab'' est à la fois le nom d'une liste de ''cron-jobs'' (tâches cron) et le nom de la commande d'édition de cette liste.}}

=== Le cron de facto ===

Il y a plusieurs mises en œuvre de cron dans Portage parmi lesquelles vous devez faire un choix. Elles ont toutes la même interface, nommément l'utilisation de la commande  <code>crontab</code> ou d'une commande similaire. Il existe également un utilitaire appelé ''Anacron'' qui est prévu pour fonctionner avec ''cron'' sur des systèmes qui ne fonctionnent pas en permanence. 

Ça vaut la peine de noter que tous les paquets cron disponibles dépendent de <code>sys-process/cronbase</code> . Ce paquet n'est cependant  techniquement nécessaire à aucun des paquets cron, mais il procure une fonctionnalité similaire à cron que la plupart des utilisateurs apprécient. 

Avant de démarrer avec cron, vous devez choisir une mise en œuvre. Pour vous aider, nous avons rassemblé de l'information sur chacun d'eux ci-dessous. 

== Quel cron est bon pour vous ? ==

=== Vixie cron ===

Vixie cron est une mise en œuvre de cron,  basée sur SysV cron, comprenant toutes les fonctionnalités. Chaque utilisateur dispose de sa ''crontab'' et est autorisé à spécifier les variables d'environnement dans cette ''crontab''. À la différence des autres variantes de cron, elle offre aussi la prise en charge de SELinux et PAM. Elle supporte moins d'architectures que Dcron, mais plus que Fcron. 

Fonctionnalités de  <code>sys-process/vixie-cron</code> : 

* Prise en charge de  SELinux
* Prise en charge de PAM {{Path|/etc/security/limits.conf}} 
* Définition de variables d'environnement dans les crontabs (PATH, SHELL, HOME, etc.)
* Chaque utilisateur dispose de sa crontab; l'accès est contrôlé par {{Path|cron.allow}} et {{Path|cron.deny}} 

=== Le  Cron de Dillon ===

Dcron cherche à rester une mise en œuvre de cron, simple, élégante et sûre. Il n'autorise pas la spécification de variables d'environnement dans les ''crontabs'' et tous les ''cron-jobs'' sont lancés depuis {{Path|/bin/sh}}. Comme Vixie cron, chaque utilisateur dispose de sa propre ''crontab''. 

Fonctionnalités de <code>sys-process/dcron</code> : 

* Rapide, simple et débarassé de fonctionnalités inutiles
* L'accès à la  <code>crontab</code> est limité au groupe cron, i.e. il ne se fie pas à des facultés externes.

=== Fcron ===

Fcron cherche à remplacer Vixie cron et Anacron. Il est prévu pour fonctionner sur des systèmes qui ne sont pas toujours en marche et arrive avec des fonctionnalités supplémentaires. Il prévoit des contraintes de lancement des tâches, la sérialisation des contrôles, la possibilité d'ajouter des valeurs ''nice'' aux tâches et la possibilité de programmer les tâches à lancer au démarrage du système. Voir la [http://fcron.free.fr/ page d'accueil de fcron] pour plus d'information 

Fonctionnalités de <code>sys-process/fcron</code> : 

* Conçu pour fonctionner sur des systèmes qui ne tourne pas en permanence , i.e. il peut relancer une tâche au redémarrage de la machine si elle a été manquée.
* Définition de  variables d'environnement et de beaucoup d'autres fonctionnalités dans les  ''crontabs''
* Chaque utilisateur dispose de sa propre crontab, l'accès est contrôlé par  cron.allow et  cron.deny
* Syntaxe des ''crontabs'' améliorée avec prise en charge de nombreuses fonctionnalités nouvelles.

=== bcron ===

''bcron'' est un nouveau système cron conçu pour des opérations sécurisées. Pour ce faire, le système est divisé en plusieurs programmes séparés, chacun responsable d'une tâche séparée, avec une communication strictement contrôlée entre eux. L'interface utilisateur est un remplaçant dérivé de systèmes similaires (tel que vixie-cron), mais les aspects internes différent profondément. Pour une plus ample information, reportez-vous à la page de bcron à [http://www.gentoo.org/ http://untroubled.org/bcron/] . 

Fonctionnalités de <code>sys-process/bcron</code> : 

* Remplaçant de  vixie-cron
* Conception multiprocessus
* Native daylight savings time support

=== Anacron ===

''Anacron'' n'est pas un démon ''cron'', c'est un programme qui fonctionne en conjonction avec l'un d'eux. Il exécute des commandes à des intervalles spécifiés en jour et ne suppose pas que le système reste en marche continuellement ; il lance les tâches qui ont été manquées lorsque le système était arrêté. Ordinairement, ''Anacron'' compte sur un démon ''cron'' pour être lancé tous les jours. 

== Utiliser cron ==

=== Installation ===

Choisissez la mise en œuvre de ''cron'' que vous préférez et installez la. 

{{Emerge|dcron}}

{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

En option, si vous n'avez pas installé ''Fcron'', vous pouvez également installer ''Anacron''. 

{{Emerge|anacron}}

{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== La ''crontab'' système ===

Les messages post-installation de certains de ces paquets ''cron'' vous disent de lancer <code>crontab /etc/crontab</code> . Le fichier {{Path|/etc/crontab}} est votre ''crontab système'' . Une installation de ''cron'' peut l'utiliser en conjonction avec  <code>sys-process/cronbase</code> pour lancer les scripts  dans {{Path|/etc/cron.{quotidiennement,toutes les heures, toutes les semaines, tous les mois}}} . Notez que seul ''Vixie-cron'' programme les tâches dans {{Path|/etc/crontab}} automatiquement.  Les utilisateurs de ''Dcron'' et de  ''Fcron'' devront lancer <code>crontab /etc/crontab</code> à chaque fois qu'ils apportent des modifications dans  {{Path|/etc/crontab}} . 

Notez que les tâches programmées dans la ''crontab système'' peuvent ne pas apparaître dans la liste des ''cron-jobs'' affichée par <code>crontab -l</code> . 

Bien-sûr, vous pouvez choisir de ne pas utiliser une ''crontab système''. Si vous choisissez ''Dcron'' ou ''Fcron'', ''ne lancez pas''  <code>crontab /etc/crontab</code>. Si vous choisissez ''vixie-cron'' ou ''bcron'', vous devriez placer toutes les lignes de {{Path|/etc/crontab}} en commentaires. 

{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Donner un accès à cron à des utilisateurs de confiance ===

Si vous voulez que des utilisateurs autres que ''root'' aient accès au démon ''cron'', lisez cette section, sinon, passez à la section suivante, [[#scheduling]]. 

{{Note|Donner l'accès à la ''crontab'' à un utilisateur ne lui permet pas de lancer des ''cron-jobs'' en tant que  ''root''. Si vous voulez qu'un utilisateur soit capable d'éditer la ''crontab'' de ''root'', vous devriez regarder dans <code>sudo</code> . Reportez-vous à notre [http://www.gentoo.org//doc/fr/sudo-guide.xml Guide Gentoo pour les utilisateurs de sudo] pour plus de détails.}}

Peu importe le paquet ''cron'' que vous utilisez, si vous voulez autoriser un utilisateur à utiliser ''crontab'', il doit d'abord faire partie du groupe ''cron''. Par exemple, si vous voulez ajouter l'utilisateur ''wepy'' au groupe ''cron'', vous devez exécuter : 

{{RootCmd|gpasswd -a wepy cron}}

{{Note|Lorsque vous ajoutez un utilisateur au groupe ''cron'', assurez-vous que l'utilisateur se déconnecte et se reconnecte pour que l'ajout au groupe soit effectif.}}

Si vous utilisez '''Dcron''', c'est suffisant pour donner accès à ''crontab'' à un utilisateur.  Les utilisateurs de ''Dcron'' peuvent lire la section suivante [[#scheduling]], tous les autres peuvent continuer à lire. 

Si vous utilisez '''Fcron''' , éditez {{Path|/etc/fcron/fcron.deny}} et {{Path|/etc/fcron/fcron.allow}} . La manière la plus sûre est d'interdire tout le monde dans un premier temps dans  {{Path|/etc/fcron/fcron.deny}} , puis d'autoriser explicitement des utilisateurs dans {{Path|/etc/fcron/fcron.allow}} . 

{{Important|Si, ni {{Path|/etc/fcron/fcron.allow}} ni {{Path|/etc/fcron/fcron.deny}} existent, tout les utilisateurs du groupe ''cron'' seront autoriser à utiliser ''crontab''. ''fcron'' est fourni avec  {{Path|fcron.allow}} par défaut, ce qui '''autorise ''' tous les utilisateurs''' du groupe ''cron'' à accéder à ''fcrontab''.}}

{{Code|Autorisation dans  fcron.deny|<pre>
all
</pre>
}}

Maintenant, supposons que l'utilisateur ''wepy'' doivent être capable de programmer ses propres ''cron-jobs''. Nous l'ajouterions à  {{Path|/etc/fcron/fcron.allow}} comme ceci : 

{{Code|Autorisation dans  fcron.allow|<pre>
wepy
</pre>
}}

Si vous avez choisi '''vixie cron''', vous devez éditer simplement  {{Path|/etc/fcron/fcron.allow}} 

{{Important|Il est important de noter que si seul {{Path|/etc/cron.allow}} existe, alors seuls les utilisateurs du groupe ''cron'' qui y sont listés auront accès.  Autrement, si seulement si un  {{Path|/etc/cron.deny}} vide existe ; alorstous les utilisateurs du groupe ''cron''  then all cron group users will be allowed! Do not leave an empty {{Path|/etc/cron.deny}} if you have no {{Path|/etc/cron.allow}} .}}

Par exemple, si vous désiriez donner accès à l'utilisateur ''wepy'' , vous l'ajouteriez à {{Path|/etc/cron.allow}} de cette manière : 

{{Code|Autorisation dans /etc/cron.allow|<pre>
wepy
</pre>
}}

=== Programmer des  cron-jobs ===

Le processus pour éditer des ''crontabs'' est différent pour chacun des paquets, mais tous prennent en charge le même jeu de commande de base ; ajouter et remplacer des ''crontabs'', effacer des ''crontabs'' et lister des ''con-jobs'' dans des ''crontabs''. La liste qui suit indique comment exécuter ces commandes pour chacun des paquets. 

{| class="wikitable" style="text-align: left;" 
|- 
! Version
! Éditer la crontab
! Retirer la crontab
! Nouvelle crontab
! Lister les  cron-jobs
|- 
| dcron
| <code>crontab -e</code>
| <code>crontab -d ''[user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|- 
| fcron
| <code>fcrontab -e</code>
| <code>fcrontab -r ''[user]'' </code>
| <code>fcrontab ''file'' </code>
| <code>fcrontab -l</code>
|- 
| vixie-cron & bcron
| <code>crontab -e</code>
| <code>crontab -r ''-u [user]'' </code>
| <code>crontab ''file'' </code>
| <code>crontab -l</code>
|-
|}

{{Note|Avec la commande ''remove'', si aucun argument n'est transmis, la ''crontab'' courante de l'utilisateur est effacée.}}

{{Note|''Fcron'' a aussi un lien symbolique de  <code>crontab</code> vers  <code>fcrontab</code> .}}

Before we can use any of these commands though, you first need to understand the crontab itself. Each line in a crontab needs to specify five time fields in the following order: the minutes (0-59), hours (0-23), days of the month (1-31), months (1-12), and days of the week (0-7, Monday is 1, Sunday is 0 and 7). The days of the weeks and months can be specified by three-letter abbreviations like mon, tue, jan, feb, etc. Each field can also specify a range of values (e.g. 1-5 or mon-fri), a comma separated list of values (e.g. 1,2,3 or mon,tue,wed) or a range of values with a ''step'' (e.g. 1-6/2 as 1,3,5). 

That sounds a little confusing, but with a few examples, you will see that it is not as complicated as it sounds. 

{{Code|Examples|<pre>
## # Run /bin/false every minute year round
*     *     *     *     *        /bin/false
  
## # Run /bin/false at 1:35 on the mon,tue,wed and the 4th of every month
35    1     4     *     mon-wed  /bin/false
  
## # Run /bin/true at 22:25 on the 2nd of March
25    22    2     3     *        /bin/true
  
## # Run /bin/false at 2:00 every Monday, Wednesday and Friday
0     2     *     *     1-5/2    /bin/false
</pre>
}}

{{Note|Notice how you have to specify specific days of the week and days of the month before they are combined. If you have * for only one of them, the other takes precedence, while * for both just means every day.}}

To test what we have just learned, let's go through the steps of actually inputting a few cron-jobs. First, create a file called {{Path|crons.cron}} and make it look like the this: 

{{RootCmd|nano crons.cron|output=<pre>
## #Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
</pre>
}}

Now we can add that crontab to the system with the "new command" from the table above. 

{{RootCmd|crontab crons.cron}}


{{Note|You won't actually see the output from these echo commands unless you use redirection.}}

To verify the cron-jobs you scheduled, we'll use the proper ''list command'' from the table above. 

{{RootCmd|crontab -l}}

You should see a list resembling {{Path|crons.cron}} , if not, maybe you used the wrong command to input your new crontab. 

This crontab should echo "I really like cron" every minute of every hour of every day every other month. Obviously you would only do that if you really liked cron. The crontab will also echo "I like cron a little" at 16:30 every day in January and February. It will also echo "I don't really like cron" at 3:10 on the January 1st. 

If you are using Anacron, you should keep reading this section. Otherwise, proceed to the next section on [[#editing]] . 

Anacron users will want to edit {{Path|/etc/anacrontab}} . This file has four fields: the number of days between each run, the delay in minutes after which it runs, the name of the job, and the command to run. 

For example, to have it run <code>echo "I like anacron"</code> every 5 days, 10 minutes after Anacron is started, you would have: 

{{Code|/etc/anacrontab|<pre>
5 10 wasting-time /bin/echo "I like anacron"
</pre>
}}

Anacron exits after all of the jobs in anacrontab are done, so if we want it to check these jobs every day, we will need to use cron. The instructions at the end of the next section tell you how to do that. 

=== Editing crontabs ===

Let's be realistic though, you don't want your system telling you how much you like cron every minute. As a step forward, let's remove that crontab using the corresponding ''remove command'' from the table above. We will also list the cron-jobs after, just to make sure it worked. 

{{RootCmd|crontab -d
|crontab -l}}

You should see no cron-jobs in the output from <code>crontab -l</code> . If you do see jobs listed, that means we failed to remove the crontab, and that you should make sure that you used the correct ''remove command'' for your cron package. 

Now that we have a clean slate, let's put something useful into the '''root''' crontab. Most people will want to run <code>updatedb</code> on a weekly basis to make sure that <code>mlocate</code> works properly. To add that to your crontab, let's first edit {{Path|crons.cron}} again so that it looks like the following: 

{{Code|A real crontab|<pre>
22 2 * * 1    /usr/bin/updatedb
</pre>
}}

That would make cron run updatedb at 2:22 A.M. on Monday morning every week. You should now input the crontab with the proper ''new command'' from the table above, and check the list again. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Now let's say that you also want to add <code>emerge --sync</code> to your daily schedule. You could do this by first editing {{Path|crons.cron}} and then using <code>crontab crons.cron</code> just as we did before, or you could use the proper ''edit command'' from the table above. This gives you a way to edit your user's crontab in situ, without depending on external files like {{Path|crons.cron}} . 

{{RootCmd|crontab -e}}

That should open your user's crontab with an editor. We want to have <code>emerge --sync</code> run every day at 6:30 A.M., so we'll make it look something like this: 

{{Code|A real crontab|<pre>
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if you're using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
</pre>
}}

Again, check the cron-jobs list as we did in the previous examples to make sure the jobs are scheduled. If they are all there, then you're all set. 

== Using cronbase ==

As mentioned earlier, all of the available cron packages depend on <code>sys-process/cronbase</code> . The cronbase package creates {{Path|/etc/cron.{hourly,daily,weekly,monthly}}} , and a script called <code>run-crons</code> . You might have noticed that the default {{Path|/etc/crontab}} contains something like this: 

{{Code|Default system crontab|<pre>
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
</pre>
}}

To avoid going into much detail, we can just assume that these commands will effectively run your hourly, daily, weekly and monthly scripts. This method of scheduling cron-jobs has some important advantages: 

* They will run even if your computer was off when they were scheduled to run
* It is easy for package maintainers to place scripts in those well defined places
* You know exactly where your cron-jobs and your crontab are stored, making it easy for you to backup and restore this part of your system

{{Note|Again, it is useful to point out that Vixie cron and bcron automatically read {{Path|/etc/crontab}} , while dcron and fcron do not. Please read the [[#systemtab]] section to learn more about this.}}

== Final Notes ==

Remember, each cron package is different and the range of features varies greatly. Be sure to consult the man pages for crontab, fcrontab or anacrontab, depending on what you use. 

Good luck! 

=== Troubleshooting ===

If you're having problems getting cron to work properly, you might want to go through this quick checklist. 

==== Is cron running? ====

Run <code>ps ax | grep cron</code> and make sure it shows up!

==== Is cron working? ====

Try the following:

{{Code|crontab to see if cron is running|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own
</pre>}}

Then check if {{Path|/file_you_own}} is modified periodically.

==== Is your command working? ====

Same as before, but perhaps redirect the standard error output as well:

{{Code|crontab to verify application runs|<pre>
* * * * * /bin/echo "foobar" >> /file_you_own 2>&amp;1
</pre>}}

==== Can cron run your job? ====

Check the cron log, usually {{Path|/var/log/cron.log}} or {{Path|/var/log/messages}} for errors

==== Are there any {{Path|dead.letter}}s? ====

cron usually sends mail when there's a problem; check your mail and also look for {{Path|~/dead.letter}} .

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Eric Brown
* Xavier Neys
* nightmorph

[[Category:Core system]]
[[Category:Daemons]]
