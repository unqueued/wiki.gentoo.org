<languages />


{{Metadata|abstract=This guide is step-by-step guide for installing spam fighting technologies for Postfix. Among them Amavisd-new using Spamassassin and ClamAV, greylisting and SPF.}}

This guide is step-by-step guide for installing spam fighting technologies for Postfix. Among them Amavisd-new using Spamassassin and ClamAV, greylisting and SPF.

== Введение ==

This guide describe step by step how to install a spam and virus filtering mail gateway. It is quite simple to adopt this to a single server solution. 

=== The big picture ===

This document describe how to setup a spam filtering mail gateway with multiple domains. This server is meant to run in front of the mail servers actually keeping the mail accounts i.e. Microsoft Exchange or Lotus Notes. 

In this setup applications with good security records and readable configuration files have been chosen. The email MTA is postfix which has a good security record and is fairly easy to setup right. Postfix will listen normally on port 25 for incoming mail. Upon reception it will forward it to Amavisd-new on port 10024. Amavisd-new will then filter the mail through different filters before passing the mail back to Postfix on port 10025 which in turn will forward the mail to the next mail server. 

Amavisd-new is a content filtering framework utilizing helper applications for virus filtering and spam filtering. In this setup we will be using two helper applications one ClamAV for filtering virus mails and Spamassassin for filtering spam. Spamassassin itself can function as yet another layer of content filtering framework and utilize the helper applications Vipul's Razor2 and DCC. 

Unlike many other spam fighting technologies like RBLs and others Spamassassin does not simply accept or reject a given email based on one single test. It uses a lot of internal tests and external helper applications to calculate a spam score for every mail passed through. This score is based on the following tests: 

* Bayesian filtering
* Static rules based on regular expressions
* Distributed and collaborative networks:
** RBLs
** Razor2
** Pyzor
** DCC

The first part (chapters 1 to 4) of the guide will describe the basic setup of a mailfiltering gateway. The next chapters can be implemented individually with no dependence between each chapter. These chapters describe how to: 

* setup special IMAP folders for learning of the Bayesian filter and for delivery of false positives
* setup greylisting with Postfix
* setup Amavisd-new to use a MySQL backend for user preferences
* setup Spamassassin to use a MySQL backend for AWL and Bayes data

{{Note|The IMAP folders will be using the maildir format. Having each mail in a separate file makes handling much simpler. If you're using mbox I propose to give maildir a try. If you're not already using maildir emerge the necessary tools with <code>emerge courier-imap</code> .}}

A planned fifth part will contain various tips regarding performance and things you may want to know (running chrooted, postfix restrictions, etc.). 

{{Note|Delegating responsibility to third parties is not without risks. You have to know and trust these third parties. In this setup only the decision to quarantine virus mails are based on a single third party. Using Spamassassin's scoring system the decision to stop spam mails are not made by a single authority except perhaps Spamassassins own static rules.}}

{{Warning|When rejecting spam mails at the MTA level you have to be very careful when selecting the RBL's you want to use, i.e. SpamCop is a bad RBL to use at the MTA level because you will experience false positives because sometimes their listing is just too aggressive. Further info at [http://www.geekcomix.com/cgi-bin/classnotes/wiki.pl?UNIX03/Realtime_Blackhole_Lists_Are_Bad Realtime Blackhole Lists Are Bad] and [http://theory.whirlycott.com/~phil/antispam/rbl-bad/rbl-bad.html The Spam Problem: Moving Beyond RBLs]}}

=== Приготовления ===

Before you start make sure that you have a working Postfix installation where you can send and receive mails also you need a backend mailserver. If you're not experienced with setting up Postfix it might quickly become too complicated if all should be set up at once. If you need help you can find it in the excellent [https://wiki.gentoo.org/wiki/Complete_Virtual_Mail_Server Complete Virtual Mail Server] in the Gentoo Wiki. 

== Установка необходимых программ ==

We start out by installing the most important programs: Amavisd-new, Spamassassin and ClamAV. 

{{RootCmd|emerge amavisd-new spamassassin clamav}}

{{Note|As previously mentioned you should already have a working <code>postfix</code> instance running on the box. Basically this shouldn't be much more than <code>emerge postfix</code> ''and'' have a basic understanding of how Postfix is working.}}

=== Настройка DNS ===

{{Note|If you're not setting up a gateway server but have the mailboxes on the same server you only have to create the MX-Record.}}

While the programs are emerging fire up another shell and create the needed DNS records. 

Start out by creating a <code>MX</code> record for the mail gateway and an <code>A</code> record for the next destination. 

{{Code|Setting up DNS|<pre>
(Create a MX record for the gateway server)
                MX      10      mailgateway.mydomain.tld.
(Create an A record for the gateway server)
mailgateway     A       mgw.ip.add.here
(Create an A record for the next hop mail server)
mail            A       ms.ip.add.here
</pre>
}}


{{Note|Some ADSL providers might block port 25 and force you to relay mail through one of their servers. Typically you have to create a secondary MX-Record like <code>MX 20 backup-mx.some-isp.tld</code>}}


=== Opening the firewall ===

In addition to allowing normal mail traffic you have to allow a few services through your firewall to allow the network checks to communicate with the servers. 

{| class="wikitable" style="text-align: left;" 
|- 
! Application
! Protocol
! Port
|- 
| DCC
| UDP
| 6277
|- 
| Razor(outgoing ping)
| TCP
| 7
|- 
| Razor
| TCP
| 2703
|-
|}

Razor uses pings to discover what servers are closest to it. 

=== Конфигурация Postfix ===

First we have to tell <code>postfix</code> to listen on port 10025 and we remove most of the restrictions as they have already been applied by the <code>postfix</code> instance listening on port 25. Also we ensure that it will only listen for local connections on port 10025. To accomplish this we have to add the following at the end of {{Path|/etc/postfix/master.cf}}  

{{Code|Changing the master.cf file|<pre>
smtp-amavis     unix -        -       n     -       2  smtp
  -o smtp_data_done_timeout=1200
  -o smtp_send_xforward_command=yes
#Equivalently when using lmtp:
#lmtp-amavis    unix -        -       n     -       2  lmtp
#   -o lmtp_data_done_timeout=1200
#   -o lmtp_send_xforward_command=yes
  
127.0.0.1:10025 inet n        -       n     -       -  smtpd
  -o content_filter=
  -o local_recipient_maps=
  -o relay_recipient_maps=
  -o smtpd_restriction_classes=
  -o smtpd_client_restrictions=
  -o smtpd_helo_restrictions=
  -o smtpd_sender_restrictions=
  -o smtpd_recipient_restrictions=permit_mynetworks,reject
  -o mynetworks=127.0.0.0/8
  -o strict_rfc821_envelopes=yes
  -o smtpd_error_sleep_time=0
  -o smtpd_soft_error_limit=1001
  -o smtpd_hard_error_limit=1000
  
#If you want to use proxy filtering instead
#smtp            inet n         -       n      -       8 smtpd
# -o smtpd_proxy_filter=127.0.0.1:10024
# -o smtpd_client_connection_count_limit=4
#If you don't want to scan outgoing mail use this
#10.0.0.2:smtp   inet n         -       n       -      - smtpd
#-o content_filter=
</pre>
}}

{{Note|The <code>smtp-amavis</code> line specifies that a maximum of two of these processes may run at any time. If you need a greater degree of concurrency tune this number to fit your needs. Remember that to match the number with <code>$max_servers</code> in {{Path|amavisd.conf}} . Keep in mind that <code>amavisd-new</code> is quite memory-intensive and raising the amount of <code>amavisd-new</code> processes too high can easily lead to memory starvation and heavy swapping, which leads to drastically reduced performance.}}

{{Note|If you want to reject spam early on in the process you can use the Before-Queue (proxy) method instead of the filter method. If you uncomment the three lines you will have to set <code>content_filter{{=}}</code> in {{Path|main.cf}} . This is not recommended for high traffic servers as the number of concurrent connections are limited to the number of amavisd instances.}}

{{Warning|The Before-Queue(proxy) method is still not properly tested.}}

{{Note|If you, for any reason whatsoever, want to send mail from this box and don't want it scanned, add another postfix instance by uncommenting the last two lines and substitute with a proper IP.}}

The file {{Path|master.cf}} tells the postfix master program how to run each individual postfix process. More info with <code>man 8 master</code> . 

Next we need the main <code>postfix</code> instance listening on port 25 to filter the mail through <code>amavisd-new</code> listening on port 10024. 

We also need to set the next hop destination for mail. Tell Postfix to filter all mail through an external content filter and enable explicit routing to let Postfix know where to forward the mail to. 

{{File|/etc/postfix/main.cf||<pre>
biff = no
empty_address_recipient = MAILER-DAEMON
queue_minfree = 120000000
  
content_filter = smtp-amavis:[127.0.0.1]:10024
#Equivalently when using lmtp:
#content_filter = lmtp-amavis:[127.0.0.1]:10024
  
# TRANSPORT MAP
#
# Insert text from sample-transport.cf if you need explicit routing.
transport_maps = hash:/etc/postfix/transport
  
relay_domains = $transport_maps
</pre>
}}

Postfix has a lot of options set in {{Path|main.cf}} . For further explanation of the file please consult <code>man 5 postconf</code> or the same online [http://www.postfix.org/postconf.5.html Postfix Configuration Parameters] . 

The format of the {{Path|transport}} file is the normal Postfix hash file. Mail to the domain on the left hand side is forwarded to the destination on the right hand side. 

{{File|/etc/postfix/transport||<pre>
mydomain.tld                          smtp:mail.mydomain.tld
</pre>
}}

After we have edited the file we need to run the <code>postmap</code> command. Postfix does not actually read this file so we have to convert it to the proper format with <code>postmap /etc/postfix/transport</code> . This creates the file {{Path|/etc/postfix/transport.db}} . There is no need to reload Postfix as it will automatically pick up the changes. 

{{Note|If the next hop mail server is not listening on the standard SMTP port 25 you can tell postfix to use a given port number, like <code>smtp:mail.mydomain.tld:25000</code> .}}

If your first attempts to send mail result in messages bouncing, you've likely made a configuration error somewhere. Try temporarily enabling <code>soft_bounce</code> while you work out your configuration issues. This prevents postfix from bouncing mails on delivery errors by treating them as temporary errors. It keeps mails in the mail queue until <code>soft_bounce</code> is disabled or removed. 

{{RootCmd|postconf -e "soft_bounce {{=}} yes"
|/etc/init.d/postfix reload}}

Once you've finished creating a working configuration, be sure to disable or remove <code>soft_bounce</code> and reload postfix.

=== Конфигурация Amavisd-new ===

Amavisd-new is used to handle all the filtering and allows you to easily glue together severel different technologies. Upon reception of a mail message it will extract the mail, filter it through some custom filters, handle white and black listing, filter the mail through various virus scanners and finally it will filter the mail using SpamAssassin. 

Amavisd-new itself has a number of extra features: 

* it identifies dangerous file attachments and has policies to handle them
* per-user, per-domain and system-wide policies for:
** whitelists
** blacklists
** spam score thresholds
** virus and spam policies

Apart from <code>postfix</code> and <code>freshclam</code> we will run all applications as the user <code>amavis</code> . 

Отредактируйте следующие строки в {{Path|/etc/amavisd.conf}}  

{{File|/etc/amavisd.conf||<pre>
# (Insert the domains to be scanned)
$mydomain = 'example.com';
# (Bind only to loopback interface)
$inet_socket_bind = '127.0.0.1';
# (Forward to Postfix on port 10025)
$forward_method = 'smtp:127.0.0.1:10025';
$notify_method = $forward_method;
# (Define the account to send virus alert emails)
$virus_admin = "virusalert\@$mydomain";
# (Always add spam headers)
$sa_tag_level_deflt  = -100;
# (Add spam detected header aka X-Spam-Status: Yes)
$sa_tag2_level_deflt = 5;
# (Trigger evasive action at this spam level)
$sa_kill_level_deflt = $sa_tag2_level_deflt;
# (Do not send delivery status notification to sender.  It does not affect
# delivery of spam to recipient. To do that, use the kill_level)
$sa_dsn_cutoff_level = 10;
# Don't bounce messages left and right, quarantine
# instead
$final_virus_destiny      = D_DISCARD;  # (defaults to D_DISCARD)
$final_banned_destiny     = D_DISCARD;  # (defaults to D_BOUNCE)
$final_spam_destiny       = D_DISCARD;  # (defaults to D_BOUNCE)
</pre>
}}

{{Note|With this line <code>$sa_tag2_level_deflt {{=}} 5;</code> you set the Spamassassin spam score to 5. This might be a bit low. As you might have noticed the Amavisd-new default is <code>6.3</code> . If you don't want to see a single spam mail in your mail folder choose <code>5</code> , but if you don't want to deal with false positives choose <code>6.3</code> .}}

Create a quarantine directory for the virus mails as we don't want these delivered to our users. 

{{RootCmd|mkdir /var/amavis/virusmails
|chown amavis:amavis /var/amavis/virusmails
|chmod 750 /var/amavis/virusmails}}

{{Note|Amavisd-new offers finer policy tuning by using policy banks.}}

=== Конфигурация ClamAV ===

As virus scanner we use ClamAV as it has a fine detection rate comparable with commercial offerings, it is very fast and it is Open Source Software. We love log files, so make <code>clamd</code> log using <code>syslog</code> and turn on verbose logging. Also do not run <code>clamd</code> as <code>root</code> . Now edit {{Path|/etc/clamd.conf}}  

{{File|/etc/clamd.conf||<pre>
# (Verbose logging with syslog)
LogSyslog
LogVerbose
LogFacility LOG_MAIL
# (Change pid file location)
PidFile /var/run/amavis/clamd.pid
# (Set the clamav socket)
LocalSocket /var/amavis/clamd
# (Close the connection when this limit is exceeded)
StreamMaxLength 10M
# (Don't run clamd as root)
User amavis
# (Newer versions require you to uncomment this)
ScanMail
ScanArchive
</pre>
}}

{{Note|Also remember to remove the Example directive to make ClamAV work}}

ClamAV comes with the <code>freshclam</code> deamon dedicated to periodical checks of virus signature updates. Instead of updating virus signatures twice a day we will make <code>freshclam</code> update virus signatures every two hours. 

{{File|/etc/freshclam.conf||<pre>
# (Syslog logging)
LogSyslog
# (Verbose logging)
LogVerbose
# (Explicitly drop root privileges)
DatabaseOwner clamav
# (Check for updates every two hours. That is the official recommendation)
Checks 12
# (Use the mirror closest to you. Replace XY with your country code
DatabaseMirror db.XY.clamav.net
</pre>
}}

Start <code>clamd</code> with <code>freshclam</code> using the init scripts by modifying {{Path|/etc/conf.d/clamd}} . 

{{File|/etc/conf.d/clamd||<pre>
START_CLAMD=yes
FRESHCLAM_OPTS="-d"
</pre>
}}

At last modify {{Path|amavisd.conf}} with the new location of the socket. 

{{File|/etc/amavisd.conf||<pre>
# (Uncomment the clamav scanner and modify socket location)
['ClamAV-clamd',
\&ask_daemon, ["CONTSCAN {}\n", "/var/amavis/clamd"],
  qr/\bOK$/, qr/\bFOUND$/,
  qr/^.*?: (?!Infected Archive)(.*) FOUND$/ ],
</pre>
}}

{{Warning|Do NOT modify the <code>$unix_socketname</code> unless you know what you're doing.}}

=== Конфигурация Vipul's Razor ===

Razor2 is a collaborative and distributed spam checksum network. Install it with <code>emerge razor</code> and create the needed configuration files. Do this as user <code>amavis</code> by running <code>su - amavis</code> followed <code>razor-admin -create</code> . 

{{RootCmd|emerge razor}}

Temporarily set amavis' shell to bash:

{{RootCmd|usermod -s /bin/bash amavis
|su - amavis}}

{{Cmd|razor-admin -create
|exit}}

Reset the shell to /bin/false:

{{RootCmd|usermod -s /bin/false amavis}}

=== Configuring Distributed Checksum Clearinghouse (dcc) ===

Like Razor2, dcc is a collaborative and distributed spam checksum network. Its philosopy is to count the number of recipients of a given mail identifying each mail with a fuzzy checksum. 

{{RootCmd|emerge dcc}}

=== Конфигурация Spamassassin ===

Amavis is using the Spamassassin Perl libraries directly so there is no need to start the service. Also this creates some confusion about the configuration as some Spamassassin settings are configured in {{Path|/etc/mail/spamassassin/local.cf}} and overridden by options in {{Path|/etc/amavisd.conf}} . 

{{File|/etc/mail/spamassassin/local.cf||<pre>
# Enable the Bayes system
use_bayes               1
  
# Enable all network checks
skip_rbl_checks         0
  
# Mail using languages used in these country codes will not be marked
# as being possibly spam in a foreign language.
# - danish english norwegian swedish
ok_languages            da en no sv
  
# Mail using locales used in these country codes will not be marked
# as being possibly spam in a foreign language.
ok_locales              en
  
# Use a sensible bayes path
bayes_path              /var/amavis/.spamassassin/bayes
</pre>
}}


{{Note|With Spamassassin version 3.1 you have to enable DCC, Razor2 by uncommenting the corresponding lines in {{Path|v310.pre}} .}}

{{Note|You can find inspiration for your {{Path|local.cf}} file by trying the [http://www.yrex.com/spam/spamconfig.php SpamAssassin Configuration Generator] .}}

{{Note|You might also want to switch the <code>ok_languages</code> and <code>ok_locales</code> .}}

== Every good rule has good exceptions as well ==

Once mail really starts passing through this mail gateway you will probably discover that the above setup is not perfect. Maybe some of your customers like to receive mails that others wouldn't. You can whitelist/blacklist envelope senders quite easily. Uncomment the following line in {{Path|amavisd.conf}} . 

{{File|amavisd.conf|do sitewide scoring|<pre>
read_hash("/var/amavis/sender_scores_sitewide"),
</pre>
}}

In the {{Path|sender_scores_sitewide}} file you put complete email addresses or just the domian parts and then note a positive/negative score to add to the spam score. 

{{File|whitelist_sender|example|<pre>
# (Whitelist all emails from the specific email address)
postmaster@example.net                -3.0
# (Whitelist all emails from the example.net excluding subdomains)
.example.net                          1.0
</pre>
}}


{{Note/ru|Для других примеров смотри файл {{Path|/etc/amavisd.conf}}.}}

{{Note/ru|Размещение этих адресов вне файла {{Path|amavisd.conf}} это более правильное и безопасное решение.}}

{{Note/ru|Кроме того, это можно сделать в конфигурационном файле Spamassassin {{Path|/etc/mail/spamassassin/local.cf}}, но, я думаю, будет лучше сделать это в {{Path|/etc/amavisd.conf}} .}}

{{Note/ru|В следующих главах я покажу, как реализовать отдельные политики для каждого пользователя с использованием MySQL.}}

While waiting for a better method you can add the following to {{Path|amavisd.conf}} to bypass spam checks for <code>postmaster</code> and <code>abuse</code> mailboxes. 

{{Code|By pass spam filters for all postmaster and abuse mails|<pre>
map { $bypass_spam_checks{lc($_)}=1 } (qw(
        postmaster@
        abuse@
));
</pre>
}}

{{Important|While we are at it we should ''never'' automatically discard mails to the <code>postmaster</code> or the <code>abuse</code> accounts. See [http://www.ietf.org/rfc/rfc2142.txt RFC 2142 MAILBOX NAMES FOR COMMON SERVICES, ROLES AND FUNCTIONS] . Otherwise your domains might end up listed in some of the evil lists over at [http://www.rfc-ignorant.org/ rfc-ignorant.org] .}}

== Добавляем больше правил ==

If you want to use more rules provided by the SARE Ninjas over at the [http://www.rulesemporium.com/ SpamAssassin Rules Emporium] you can easily add and update them using the <code>sa-update</code> mechanism included in Spamassassin. 

A brief guide to using SARE rulesets with <code>sa-update</code> can be found [http://daryl.dostech.ca/sa-update/sare/sare-sa-update-howto.txt here] . 

== Тестируем и запускаем ==

=== Тестирование установки ===

Now before you start <code>freshclam</code> you can manually verify that it works. 

{{RootCmd|freshclam|output=<pre>
ClamAV update process started at Sun May  2 09:13:41 2004
Reading CVD header (main.cvd): OK
Downloading main.cvd [*]
main.cvd updated (version: 22, sigs: 20229, f-level: 1, builder: tkojm)
Reading CVD header (daily.cvd): OK
Downloading daily.cvd [*]
daily.cvd updated (version: 298, sigs: 1141, f-level: 2, builder: diego)
Database updated (21370 signatures) from database.clamav.net (193.1.219.100).
</pre>
}}

Now you have updated virus definitions and you know that {{Path|freshclam.conf}} is working properly. 

Test freshclam and amavisd from the cli and amavisd testmails. Start <code>clamd</code> and <code>amavis</code> with the following commands: 

{{RootCmd|/etc/init.d/clamd start
|/etc/init.d/amavisd start
|/etc/init.d/postfix reload}}

If everything went well <code>postfix</code> should now be listening for mails on port 25 and for reinjected mails on port 10024. To verify this check your log file. 

{{RootCmd|tail -f /var/log/mail.log}}

{{Note/ru|В зависимости от настроек ваших логов, вполне может быть, что вам нужен файл {{Path|/var/log/messages}} .}}

Now if no strange messages appear in the log file it is time for a new test. 

Use <code>netcat</code> to manually connect to <code>amavisd</code> on port 10024 and <code>postfix</code> on port 10025. 

{{Note|Netcat can be used as an advanced replacement for <code>telnet</code> . Install it with <code>emerge netcat</code> .}}

{{Note|For some unknown reason you can not complete a manual mail injection to <code>amavisd</code> with netcat. Use <code>telnet</code> instead.}}

{{RootCmd|nc localhost 10024|output=<pre>
220 [127.0.0.1] ESMTP amavisd-new service ready
</pre>}}

{{RootCmd|nc localhost 10025|output=<pre>
220 example.com ESMTP Postfix
</pre>
}}


{{Note|If you want to see the complete output from amavisd-new start <code>amavisd debug-sa</code> as the <code>amavis</code> user and send a mail. For this to work you might have to change the default shell in {{Path|/etc/passwd}} .}}

Add <code>amavisd</code> and <code>clamd</code> to the <code>default</code> runlevel. 

{{RootCmd|rc-update add clamd default
|rc-update add amavisd default}}

{{Note/ru|Мы не добавляем <code>spamd</code> к уровню запуска по умолчанию, так как <code>amavisd</code> использует Perl-библиотеки Spamassassin явно.}}

{{Note|You might notice <code>Net::Server: Couldn't POSIX::setuid to ... []</code> lines in your log. According to [http://www.ijs.si/software/amavisd/README.chroot amavis chroot README] , if the process UID remains 0 ( <code>root</code> ), the program will terminate, otherwise you can consider the message just as informative. This is because <code>POSIX::setuid()</code> returns a string <code>0 but true</code> .}}

{{Important|If you enabled login for amavis remember to set back the login shell in {{Path|/etc/passwd}} to <code>/bin/false</code> .}}

== Autolearning and sidelining emails ==

=== Создаем пользователя spamtrap (ловушка для спама) ===

Create the spamtrap account and directories. 

{{RootCmd|useradd -m spamtrap
|maildirmake /home/spamtrap/.maildir
|chown -R spamtrap:spamtrap /home/spamtrap/.maildir}}

Give the spamtrap user a sensible password.

{{RootCmd|passwd spamtrap}}

If you manually want to check some of the mails to ensure that you have no false positives you can use the following <code>procmail</code> recipe to sideline spam found into different mail folders. 

=== Создаем .procmailrc ===

{{File|/home/spamtrap/.procmailrc||<pre>
#Set some default variables
MAILDIR=$HOME/.maildir
  
SPAM_FOLDER=$MAILDIR/.spam-found/
  
LIKELY_SPAM_FOLDER=$MAILDIR/.likely-spam-found/
  
#Sort mails with a spamscore of 7+ to the spamfolder
:0:
* ^X-Spam-Status: Yes
* ^X-Spam-Level: \*\*\*\*\*\*\*
$SPAM_FOLDER
  
#Sort mail with a spamscore between 5-7 to the likely spam folder
:0:
* ^X-Spam-Status: Yes
$LIKELY_SPAM_FOLDER
  
#Sort all other mails to the inbox
:0
*
./
</pre>
}}

{{Warning|If your mail server is going to receive a lot of mail you should NOT use the likely-spam recipe. Instead set <code>$sa_tag2_level_deflt</code> high enough to avoid false positives and filter it directly to <code>$SPAM_FOLDER</code> .}}

{{Note|If you haven't already installed <code>procmail</code> do it with <code>emerge procmail</code> .}}

Now make sure that Postfix uses <code>procmail</code> to deliver mail. 

{{File|/etc/postfix/main.cf||<pre>
mailbox_command = /usr/bin/procmail -a "DOMAIN"
</pre>
}}

=== Создаем каталоги для почты ===

Now we will create shared folders for ham and spam. 

{{RootCmd|maildirmake /var/amavis/.maildir
|maildirmake -S /var/amavis/.maildir/Bayes
|maildirmake -s write -f spam /var/amavis/.maildir/Bayes
|maildirmake -s write -f ham /var/amavis/.maildir/Bayes
|maildirmake -s write -f redeliver /var/amavis/.maildir/Bayes}}

Amavisd-new needs to be able to read these files as well as all mailusers. Therefore we add all the relevant users to the mailuser group along with amavis. 

{{RootCmd|groupadd mailusers
|usermod -G mailusers spamtrap
|chown -R amavis:mailusers /var/amavis/.maildir/
|chown amavis:mailusers /var/amavis/
|chmod -R 1733 /var/amavis/.maildir/Bayes/
|chmod g+rx /var/amavis/.maildir/
|chmod g+rx /var/amavis/.maildir/Bayes/}}

{{Warning|This grants members of the <code>mailusers</code> groups access to <code>amavis</code> mail.}}

This makes the spam and ham folders writable but not readable. This way users can safely submit their ham without anyone else being able to read it. 

Then run the following command as the <code>spamtrap</code> user: 

{{Cmd|maildirmake --add Bayes{{=}}/var/amavis/.maildir/Bayes $HOME/.maildir}}

{{Note|We have to give the group read permissions on the {{Path|Bayes}} folder in order for the mail client to be able to see the subdirectories used by IMAP.}}

=== Добавляем задачи cron ===

Now run <code>crontab -u amavis -e</code> to edit the amavis crontab to enable automatic learning of the Bayes filter every hour. 

{{File|crontab|для пользователя amavis|<pre>
#Auto learn
0 * * * *          /usr/bin/sa-learn --spam /var/amavis/.maildir/Bayes/.spam/{cur,new} \
                    > /dev/null 2>&1
0 * * * *          /usr/bin/sa-learn --ham /var/amavis/.maildir/Bayes/.ham/{cur,new} > \
                   /dev/null 2>&1
</pre>
}}

{{Note|<code>amavis</code> has to be a member of the<code>cron</code> group to run crons.}}

{{Note|It seems like the shared maildir folders will make <code>sa-learn</code> examine all messages twice. This should not be a problem. The output will also show that the maximum of messages learned from is half or less than the messages examined.}}

=== Изменяем amavisd.conf ===

Now modify amavis to redirect spam emails to the <code>spamtrap</code> account and keep spamheaders. 

{{File|/etc/amavisd.conf||<pre>
# (Define the account to send virus spam emails)
$spam_quarantine_to = "spamtrap\@$myhostname";
</pre>
}}

=== Очистка ===

We don't want to keep mail forever so we use <code>tmpwatch</code> to clean up regularily. Emerge it with <code>emerge tmpwatch</code> . Only <code>root</code> is able to run <code>tmpwatch</code> so we have to edit the <code>root</code> crontab. 

{{File|crontab|root user|<pre>
# Clean up
# Keep virusmails for a week (24*7 hours)
15 0 * * *      /usr/sbin/tmpwatch -c -f -d --quiet 168 /var/amavis/virusmails/
# Delete spam and ham learned after a week
15 0 * * *      /usr/sbin/tmpwatch -c -f -d --quiet 168 /var/amavis/.maildir/Bayes/
</pre>
}}

== Грейлистинг ==

=== Введение ===

Greylisting is one of the newer weapons in the spam fighting arsenal. As the name implies it is much like whitelisting and blacklisting. Each time an unknown mailserver tries to deliver mail the mail is rejected with a ''try again later'' message. This means that mail gets delayed but also that stupid spam bots that do not implement the RFC protocol will drop the attempt to deliver the spam and never retry. With time spam bots will probably adjust, however it will give other technologies more time to identify the spam. 

{{Note|If your ISP blocks incoming traffic on port 25 and relays all mail to you through their own mail server greylisting will not work.}}

Postfix 2.1 come with a simple Perl greylisting policy server that implements such a scheme. However it suffers from unpredictable results when the partition holding the greylisting database run out of space. There exists an improved version that do not suffer this problem. First I will show how to install the builtin greylisting support that come with Postfix and then I will show how to configure the more robust replacement. 

{{Note|There are other greylisting policy servers for Postfix around (such as [http://www.gasmi.net/gld.html Gld] , which is in Portage, and [http://sqlgrey.sourceforge.net/ SQLgrey] ). Some of them support database backends, auto whitelisting and other neat features.}}

=== Простой грейлистинг ===

{{Note|If you prefer to use the improved greylisting with postgrey you can safely skip this section.}}

We need the file {{Path|greylist.pl}} but unfortunately the ebuild does not install it as default. 

{{RootCmd|cp /usr/portage/distfiles/postfix-your-version-here.tar.gz /root/
|tar xzf postfix-your-version-here.tar.gz
|cp postfix-2.1.0/examples/smtpd-policy/greylist.pl /usr/bin/}}

Now we have the file in place we need to create the directory to hold the greylisting database: 

{{RootCmd|mkdir /var/mta
|chown nobody /var/mta}}

{{Warning|Do not create the greylisting database directory on a partition that might run out of space. While postfix can recover from no-space-left situations for the mail queue and mail box situations, this is not the case with the greylisting database. If the file becomes corrupted you may not be able to receive mail at all until you delete the file by hand.}}

=== Настройка грейлистинга ===

Now that we have all this ready all that is left is to add it to the postfix configuration. First we add the necessary information to the {{Path|master.cf}} : 

{{Code|Изменяем master.cf для использования грейлистинга|<pre>
policy-greylist  unix  -       n       n       -       -       spawn
   user=nobody argv=/usr/bin/perl /usr/bin/greylist.pl
</pre>
}}

The postfix spawn daemon normally kills its child processes after 1000 seconds but this is too short for the greylisting process so we have to increase the timelimit in {{Path|main.cf}} : 

{{File|main.cf|use greylisting|<pre>
policy-greylist_time_limit = 3600
# (Under smtpd_recipient_restrictions add:)
check_sender_access hash:/etc/postfix/sender_access
# (Later on add:)
restriction_classes = greylist
greylist = check_policy_service unix:private/policy-greylist
</pre>
}}

{{Warning|Be sure to specify <code>check_sender_access</code> AFTER <code>reject_unauth_destination</code> or else your system could become an open mail relay.}}

{{Note|The greylist database gets polluted quickly with bogus addresses. It helps if you protect greylist lookups with other restrictions that reject unknown senders and/or recipients.}}

We don't want to use greylisting for all domains but only for those frequently abused by spammers. After all it will delay mail delivery. A list of frequently forged MAIL FROM domains can be found [http://www.monkeys.com/anti-spam/filtering/sender-domain-validate.in online] . Add the domains you receive a lot of spam from to {{Path|/etc/postfix/sender_access}} : 

{{Code|Format of sender_access|<pre>
aol.com     greylist
hotmail.com greylist
bigfoot.com greylist
</pre>
}}

If you want a more extensive list: 

{{RootCmd|wget http://www.monkeys.com/anti-spam/filtering/sender-domain-validate.in
|cat sender-domain-validate.in {{!}} sort {{!}} awk {'print $1 "\t\t greylist"'} > /etc/postfix/sender_access}}

Now we only have to initialize the {{Path|sender_access}} database: 

{{RootCmd|postmap /etc/postfix/sender_access}}

Now the setup of simple greylisting is complete. 

{{Warning|I tried this on one box handling thousands of mails daily and the results were almost a complete disaster. After four days the box was bogged down with hundreds of old <code>greylist.pl</code> processes.}}

=== Конфигурация улучшенного грейлистинга с помощью postgrey ===

You can install the enhanced greylisting policy server with a simple <code>emerge</code> : 

{{RootCmd|emerge postgrey}}

After installing <code>postgrey</code> we have to edit {{Path|main.cf}} . Changes are almost exactly like the built in greylisting. 

{{File|main.cf|use greylisting|<pre>
# (Under smtpd_recipient_restrictions add:)
check_sender_access hash:/etc/postfix/sender_access
# (Later on add:)
smtpd_restriction_classes = greylist
greylist = check_policy_service inet:127.0.0.1:10030
</pre>
}}

{{Note|The Postfix SMTPD_POLICY_README only uses <code>restriction_classes</code> but that does not appear to work.}}

{{Note|If you want to greylist everything instead add <code>check_policy_service inet:127.0.0.1:10030</code> .}}

Finally, start the server and add it to the proper runlevel. 

{{RootCmd|/etc/init.d/postgrey start
|rc-update add postgrey default}}

{{Note|Some people like to get their mail fast and thus greylisting is worthless. However if you employ a backup mail server you can safely setup greylisting on that server. My limited experiences tell me that it can stop up to a third of the spam received.}}

== SPF (Sender Policy Framework) ==

=== Введение ===

SPF allows domain owners to state in their DNS records which IP addressess should be allowed to send mails from their domain. This will prevent spammers from spoofing the <code>Return-Path</code>. 

{{Note|If your ISP blocks incoming traffic on port 25 and relays all mail to you through their own mail server SPF will not work.}}

First domain owners have to create a special <code>TXT</code> DNS record. Then an SPF-enabled MTA can read this and if the mail originates from a server that is not described in the SPF record the mail can be rejected. An example entry could look like this: 

{{Code|Пример записи SPF|<pre>
example.com.  IN TXT  "v=spf1 a mx ptr -all"
</pre>
}}

The <code>-all</code> means to reject all mail by default but allow mail from the <code>A</code>( <code>a</code> ), <code>MX</code>( <code>mx</code> ) and <code>PTR</code>( <code>ptr</code> ) DNS records. For more info consult further resources below. 

{{Note|If you relay outgoing mail through your ISP you will have to add: <code>include:yourisp.com</code> .}}

Spamassassin 3.0 has support for SPF, however it is not enabled by default and the new policy daemon in Postfix supports SPF so let's install SPF support for Postfix. 

{{Note|If you want to use SPF with Spamassassin instead simply <code>emergeÂ dev-perl/Mail-SPF-Query</code> and restart Amavisd-new.}}

=== Приготовления ===

First you have to install Postfix 2.1 as described above. When you have fetched the source grab the {{Path|spf.pl}} with: 

{{RootCmd|cp postfix-<version>/examples/smtpd-policy/spf.pl /usr/local/bin/}}

{{Note|The {{Path|spf.pl}} coming with Postfix is slightly buggy so find and uncomment the following line: <code>push @HANDLERS, "sender_permitted_from"; use Mail::SPF::Query;</code> . Furthermore in about line 199 substitute <code>comemnt</code> with <code>comment</code> . Alternatively you can download a [http://spf.pobox.com/postfix-policyd.txt development version] .}}

This Perl script also needs some Perl libraries that are not in portage but it is still quite simple to install them: 

{{RootCmd|emerge Mail-SPF-Query Net-CIDR-Lite Sys-Hostname-Long}}

Now that we have everything in place all we need is to configure Postfix to use this new policy. 

{{File|master.cf|use SPF|<pre>
policy-spf  unix  -       n       n       -       -       spawn
   user=nobody argv=/usr/bin/perl /usr/local/bin/spf.pl
</pre>
}}

Now add the SPF check in {{Path|main.cf}} . Properly configured SPF should do no harm so we could check SPF for all domains: 

{{File|main.cf|use SPF|<pre>
# (Under smtpd_recipient_restrictions add:)
check_policy_service unix:private/policy-spf
</pre>
}}

{{Note|If you're experiencing problems with SPF, e.g. when using <code>fetchmail</code> , you might want to enable SPF for certain domains only.}}

== Конфигурация amavisd-new для использования MySQL ==

=== Настройка MySQL ===

{{Note|This has not been tested on versions higher than 2.2. Feedback is welcome :)}}

For large domains the default values you can set in {{Path|amavisd.conf}} might not suit all users. If you configure amavisd-new with MySQL support you can have individual settings for users or groups of users. 

{{Cmd|mysql -u root -p mysql|output=<pre>
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 78 to server version: 4.0.18-log
  
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
</pre>}}

{{Cmd|Создаем базу данных maildb;|prompt=mysql> 
|GRANT INSERT,UPDATE,DELETE,SELECT ON maildb.* TO 'mail'@'localhost' IDENTIFIED BY 'very_secret_password';
|use maildb;}}

Now that the database is created we'll need to create the necessary tables. You can cut and paste the following into the mysql prompt: 

{{Code|MySQL table layout|<pre>
CREATE TABLE users (
    id         int unsigned NOT NULL auto_increment,
    priority   int          NOT NULL DEFAULT '7',  -- 0 is low priority
    policy_id  int unsigned NOT NULL DEFAULT '1',
    email      varchar(255) NOT NULL,
    fullname   varchar(255) DEFAULT NULL,    -- not used by amavisd-new
    local      char(1),     -- Y/N  (optional field, see note further down)
    PRIMARY KEY (id),
    KEY email (email)
    );
CREATE UNIQUE INDEX users_idx_email ON users(email);
  
# (any e-mail address, external or local, used as senders in wblist)
CREATE TABLE mailaddr (
   id         int unsigned NOT NULL auto_increment,
   priority   int          NOT NULL DEFAULT '7',  -- 0 is low priority
   email      varchar(255) NOT NULL,
   PRIMARY KEY (id),
   KEY email (email)
   );
CREATE UNIQUE INDEX mailaddr_idx_email ON mailaddr(email);
  
# (-- per-recipient whitelist and/or blacklist,
# -- puts sender and recipient in relation wb)
# (white or blacklisted sender)
CREATE TABLE wblist (
   rid        int unsigned NOT NULL,     -- recipient: users.id
   sid        int unsigned NOT NULL,     -- sender:    mailaddr.id
   wb         char(1) NOT NULL, -- W or Y / B or N / space=neutral
   PRIMARY KEY (rid,sid)
   );
  
CREATE TABLE policy (
   id               int unsigned NOT NULL auto_increment,
   policy_name      varchar(32),     -- not used by amavisd-new
   virus_lover          char(1),     -- Y/N
   spam_lover           char(1),     -- Y/N  (optional field)
   banned_files_lover   char(1),     -- Y/N  (optional field)
   bad_header_lover     char(1),     -- Y/N  (optional field)
   bypass_virus_checks  char(1),     -- Y/N
   bypass_spam_checks   char(1),     -- Y/N
   bypass_banned_checks char(1),     -- Y/N  (optional field)
   bypass_header_checks char(1),     -- Y/N (optional field)
   spam_modifies_subj   char(1),     -- Y/N (optional field)
   spam_quarantine_to   varchar(64) DEFAULT NULL, -- (optional field)
   spam_tag_level  float,  -- higher score inserts spam info headers
   spam_tag2_level float DEFAULT NULL,  -- higher score inserts
               -- 'declared spam' info header fields
   spam_kill_level float,  -- higher score activates evasive actions, e.g.
               -- reject/drop, quarantine, ...
               -- (subject to final_spam_destiny setting)
   PRIMARY KEY (id)
  );
</pre>
}}

{{Note|If you have problems using copy/paste you might have to copy this somewhere else and clean out the unneeded characters.}}

{{Note|Lookups trying to match email are done with raw (rfc2821-unquoted and unbracketed) addresses as a key, i.e.: <code>John "Funny" Smith@example.com</code>}}

{{Note|Lookups are performed in the following order: <code>SQL</code> , <code>LDAP</code> , <code>hash</code> , <code>ACL</code> , <code>regexp</code> , <code>constant</code> . The first that returns a definitive answer (not <code>undef/NULL</code> ) stops the search.}}

If you wish to use whitelisting and blacklisting you must add the sender and receiver to <code>mailadr</code> after which you create the relation between the two e-mail addresses in <code>wblist</code> and state if it is whitelisting ( <code>W</code> ) or blacklisting ( <code>B</code> ). 

Now that we have created the tables let's insert a test user and a test policy: 

{{Code|Create test user and test policy|<pre>
INSERT INTO users
   SET
      id         =1,
      priority   =9,
      policy_id  =1,
      email      ="johndoe@example.com",
      fullname   ="John Doe",
      local      ="Y";
  
INSERT INTO policy
   SET
      id                     =1,
      policy_name            ="Test policy 1",
      virus_lover            ="N",
      spam_lover             ="N",
      banned_files_lover     ="N",
      bad_header_lover       ="N",
      bypass_virus_checks    ="N",
      bypass_spam_checks     ="N",
      bypass_banned_checks   ="N",
      bypass_header_checks   ="N",
      spam_modifies_subj     ="N",
      spam_quarantine_to     =NULL,
      spam_tag_level         =-50.0,
      spam_tag2_level        =7.0,
      spam_kill_level        =10.0;
</pre>
}}

{{Note|Copy this to somewhere else and adjust to suit your own environment.}}

{{Note|<code>local</code> should be set to<code>Y</code> otherwise the mail will not be scanned for spam.}}

This inserts a test user and a Test policy. Adjust these examples to fit your needs. Further explanation of the configuration names can be found in {{Path|amavisd.conf}} . 

=== Конфигурация amavisd для использования MySQL ===

Now that MySQL is ready we need to tell amavis to use it: 

{{File|amavisd.conf|Update to use MySQL|<pre>
@lookup_sql_dsn =
   ( ['DBI:mysql:maildb:host1', 'mail', 'very_secret_password']  );
  
# (For clarity uncomment the default)
$sql_select_policy = 'SELECT *,users.id FROM users,policy'.
   ' WHERE (users.policy_id=policy.id) AND (users.email IN (%k))'.
   ' ORDER BY users.priority DESC';
  
# (If you want sender white/blacklisting)
   $sql_select_white_black_list = 'SELECT wb FROM wblist,mailaddr'.
     ' WHERE (wblist.rid=?) AND (wblist.sid=mailaddr.id)'.
     '   AND (mailaddr.email IN (%k))'.
     ' ORDER BY mailaddr.priority DESC';
</pre>
}}

== Configuring Spamassassin to use MySQL ==

As of Spamassassin 3.0 it is possible to store the Bayes and AWL data in a MySQL database. We will use MySQL as the backend as it can generally outperform other databases. Also, using MySQL for both sets of data makes system management much easier. Here I will show how to easily accomplish this. 

First start out by creating the new MySQL user and then create the needed tables. 

{{RootCmd|mysql -u root -p mysql|output=<pre>
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 78 to server version: 4.0.18-log
  
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
</pre>}}

{{Cmd|create database dbname;|prompt=mysql> 
|GRANT INSERT,UPDATE,DELETE,SELECT ON dbname.* TO 'dbuser'@'localhost' IDENTIFIED BY 'another_very_secret_password';
|use dbname;}}

Now that the database is created we'll create the necessary tables. You can cut and paste the following into the mysql prompt: 

{{Code|MySQL table layout|<pre>
      CREATE TABLE bayes_expire (
          id                    int(11)         NOT NULL default '0',
          runtime               int(11)         NOT NULL default '0',
          KEY bayes_expire_idx1 (id)
          ) TYPE=MyISAM;
  
      CREATE TABLE bayes_global_vars (
          variable              varchar(30)     NOT NULL default '',
          value                 varchar(200)    NOT NULL default '',
          PRIMARY KEY           (variable)
          ) TYPE=MyISAM;
  
      INSERT INTO bayes_global_vars VALUES ('VERSION','3');
  
      CREATE TABLE bayes_seen (
          id                    int(11)         NOT NULL default '0',
          msgid                 varchar(200) binary NOT NULL default '',
          flag                  char(1)         NOT NULL default '',
          PRIMARY KEY           (id,msgid)
          ) TYPE=MyISAM;
  
      CREATE TABLE bayes_token (
          id                    int(11)         NOT NULL default '0',
          token                 char(5)         NOT NULL default '',
          spam_count            int(11)         NOT NULL default '0',
          ham_count             int(11)         NOT NULL default '0',
          atime                 int(11)         NOT NULL default '0',
          PRIMARY KEY           (id, token),
          INDEX (id, atime)
          ) TYPE=MyISAM;
  
      CREATE TABLE bayes_vars (
          id                    int(11)         NOT NULL AUTO_INCREMENT,
          username              varchar(200)    NOT NULL default '',
          spam_count            int(11)         NOT NULL default '0',
          ham_count             int(11)         NOT NULL default '0',
          token_count           int(11)         NOT NULL default '0',
          last_expire           int(11)         NOT NULL default '0',
          last_atime_delta      int(11)         NOT NULL default '0',
          last_expire_reduce    int(11)         NOT NULL default '0',
          oldest_token_age      int(11)         NOT NULL default '2147483647',
          newest_token_age      int(11)         NOT NULL default '0',
          PRIMARY KEY           (id),
          UNIQUE bayes_vars_idx1 (username)
          ) TYPE=MyISAM;
  
      CREATE TABLE awl (
          username              varchar(100)    NOT NULL default '',
          email                 varchar(200)    NOT NULL default '',
          ip                    varchar(10)     NOT NULL default '',
          count                 int(11)         default '0',
          totscore              float           default '0',
          PRIMARY KEY           (username,email,ip)
          ) TYPE=MyISAM;
</pre>
}}

{{Important|The <code>INSERT</code> line is needed otherwise Spamassassin will not work.}}

{{Note|This is also available in the source tarball in the files {{Path|awl_mysql.sql}} and {{Path|bayes_mysql.sql}} .}}

=== Configuring Spamassassin to use the MySQL backend ===

If you have an old Bayes database in the DBM database and want to keep it follow these instructions: 

{{RootCmd|su - amavis}}

{{Cmd|sa-learn --sync
|sa-learn --backup > backup.txt
|sa-learn --restore backup.txt}}

{{Note|Note that the last step should only be performed after the MySQL database and {{Path|secrets.cf}} have been updated.}}

Now give Spamassassin the required info: 

{{File|/etc/mail/spamassassin/secrets.cf||<pre>
# (Tell Spamassassin to use MySQL for bayes data
bayes_store_module              Mail::SpamAssassin::BayesStore::SQL
bayes_sql_dsn                   DBI:mysql:sa_bayes:localhost:3306
bayes_sql_username              db_name
bayes_sql_password              another_very_secret_password
  
# (Tell Spamassassin to use MySQL for AWL data
auto_whitelist_factory          Mail::SpamAssassin::SQLBasedAddrList
user_awl_dsn                    DBI:mysql:sa_bayes:localhost:3306
user_awl_sql_username           db_name
user_awl_sql_password           another_very_secret_password
</pre>
}}

Next, change its permissions for proper security: 

{{RootCmd|chmod 400 /etc/mail/spamassassin/secrets.cf}}

{{Note|To create a very secret password use <code>emerge app-admin/makepasswd</code> and <code>makepasswd -chars{{=}}8</code>}}

Now all you have to do is <code>/etc/init.d/amavisd restart</code> .

== Troubleshooting ==

=== Amavisd-new ===

To troubleshoot Amavisd-new start out by stopping it with <code>/etc/init.d/amavisd stop</code> and then start it manually in the foreground with <code>amavisd debug</code> and watch it for anomalies in the output. 

=== Spamassassin ===

To troubleshoot Spamassassin you can filter an email through it with <code>spamassassin -D < mail</code> . To ensure that the headers are intact you can move it from another machine with IMAP. 

{{Note|If you need to troubleshoot you have to enable login for the user <code>amavis</code> by changing the login shell in {{Path|/etc/passwd}} to {{Path|/bin/bash}} .}}

If you want you can make get the same information and more with Amavisd-new using <code>amavisd debug-sa</code> . 

=== Repeating tasks after installation ===

Some of the activities mentioned in this guide will need to be repeated after upgrades. For instance, the <code>chown -R amavis:mailusers</code> in the section on [[#doc_chap6]] will need to be repeated after every update of amavisd-new. 

Luckily, Gentoo provides you with the means to perform these steps automatically. In [http://www.gentoo.org//doc/en/handbook/handbook-amd64.xml?part=3&chap=6#doc_chap3 Hooking in the Emerge Process] , the Gentoo Handbook explains how to execute tasks after installations of a particular package, like so: 

{{Code|Example bashrc snippet for running the mentioned chown|<pre>
if [ "${PN}" == "amavisd-new" ] &&
   [ "${EBUILD_PHASE}" == "postinst" ]; 
then
  chown -R amavis:mailusers /var/amavis/.maildir
fi
</pre>
}}

=== Получение помощи ===

Если вам нужна помощь, то можете зайти в список рассылки amavis-user. Перед тем, как вы зададите вопрос, попробуйте поискать в [http://marc.theaimsgroup.com/?l=amavis-user архиве списка рассылки Amavis User] . Если вы не найдете там ответа, вы можете подписаться на [https://lists.sourceforge.net/lists/listinfo/amavis-user список рассылки Amavis User] 

Если ваш вопрос конкретно относится к SpamAssassin, DCC, Razor или Postfix, зайдите на их домашние страницы, описанные ниже. 

== Источники ==

=== Для более детальной информации ===

* [http://www.ijs.si/software/amavisd/INSTALL Установка Amavisd-new] 
* [http://www.ijs.si/software/amavisd/README.postfix Документация по использованию Amavisd-new с Postfix] 
* [http://www.ijs.si/software/amavisd/amavisd-new-docs.html#pbanks Документация по банку политик Amavisd-new] 
* [http://spamassassin.apache.org/full/3.0.x/dist/sql/README Документация по SQL в Spamassassin] 
* [http://www.greylisting.org Грейлистинг] 
* [http://www.postfix.org/FILTER_README.html Политики SMTPD для Postfix] 
* [http://www.unixwiz.net/techtips/postfix-HELO.html Блокирование спамеров с помощью контроля HELO Postfix] 
* [http://www.linuxjournal.com/article.php?sid=7327 Обзор] 
* [http://jimsun.linxnet.com/misc/postfix-anti-UCE.txt Подсказки от Jim Seymour по поводу Postfix Anti-UCE] 

=== Общие источники ===

* [http://www.spamassassin.org Spamassassin]
* [http://www.ijs.si/software/amavisd/ Amavisd-new]
* [http://www.ijs.si/software/amavisd/amavisd-new-docs.html Кусочки документации по Amavisd-new] 
* [http://razor.sourceforge.net/ Vipuls's Razor]
* [http://pyzor.sourceforge.net/ Pyzor]
* [http://www.rhyolite.com/anti-spam/dcc/ Distributed Checksum Clearinghouse] 
* [http://www.renaissoft.com/projects/maia/ Maia Mailguard] 

=== Другая документация ===

* [http://www.flakshack.com/anti-spam/ Достаточно защищенный анти-спам шлюз с использованием OpenBSD, Postfix, Amavisd-new, SpamAssassin, Razor и DCC] 

== Благодарности ==

Мы хотели бы поблагодарить следующих авторов и редакторов за их вклад в это руководство:


* Sune Kloppenborg Jeppesen
* Jens Hilligs
* Joshua Saddler

[[Category:Server and Security]]
