<languages />


{{Metadata|abstract=Esta guía muestra como configurar distcc para compilación cruzada entre diferentes arquitecturas de procesador.}}

Esta guía le muestras cómo configurar distcc para realizar compilación cruzada entre diferentes arquitecturas de procesador.

== Compilación cruzada con distcc ==

== Introducción ==

<code>distcc</code> es una herramienta que permite compartir la carga de compilación de software entre varios computadores en una red. Mientras todos los computadores usen las mismas herramientas de sistema
(toolchain) construidas para la misma arquitectura de procesador no hace falta ninguna configuración especial para <code>distcc</code>. Pero, ¿Qué hacer si se necesita compilar para una arquitectura diferente utilizando computadores diferentes? Esta guía le muestra cómo configurar <code>distcc</code> para compilar para diferentes arquitecturas. 

=== Hacer emerge de la utilidades necesarias ===

En primer lugar necesitará hacer emerge de <code>crossdev</code> en cada uno de los
equipos involucrados en el proceso de compilación. La herramienta <code>crossdev</code> hace más fácil la construcción de herramientas de sistema para arquitecturas de forma cruzada. Originalmente lo escribió Joshua Kinard y luego Mike
Frysinger lo reescribió desde cero. Su uso es sencillo: <code>crossdev -t sparc</code>
construirá un conjunto de herramientas de sistema cruzado para la arquitectura sparc. Esto incluye binutils, gcc, glibc y linux-headers. Si necesita más ayuda, lance <c>crossdev --help</c>. Obviamente, solo es necesario hacer emerge del conjunto de
herramientas del sistema cruzado adecuado en los equipos que asisten a la compilación.

Si desea realizar un ajuste fino de la cadena de herramientas de compilación cruzada, a continuación se muestra un guión que producirá una línea de comandos con las versiones exactas de los paquetes de desarrollo cruzado que deben ser construidos en los equipos que participan en la compilación (El guión se debe lanzar en el equipo destino).

{{CodeBox|title=Guión para realizar un ajuste fino de las herramientas de desarrollo|lang=bash|1=
#! /bin/bash
A="sys-devel/binutils" ; B=`equery l $A` ; BINUTILS_VER=`echo $B {{!}} cut -d- -f3-`
A=`/usr/bin/gcc-config -c` ; B=`echo $A {{!}} cut -d- -f5` ; GCC_VER=`equery l sys-devel/gcc {{!}} grep $B {{!}} cut -d- -f3-`
KERNEL_VER=`uname -r {{!}} sed s/-gentoo//`
A="sys-libs/glibc" ; B=`equery l $A` ; LIBC_VER=`echo $B {{!}} cut -d- -f3-`
echo "crossdev --b =$BINUTILS_VER --g =$GCC_VER --k =$KERNEL_VER --l =$LIBC_VER -t `uname -m`"
}}

A continuación necesitará hacer emerge de <code>distcc</code> en todas las máquinas involucradas en el proceso. Esto incluye la máquina en la que lanzará emerge y las máquinas con los compiladores cruzados. Por favor, lea la [[Distcc/es|Documentación sobre Distcc de Gentoo]] para obtener más información acerca de cómo configurar y usar <code>distcc</code>.

{{Note/es|Las versiones actuales de <tt>crossdev</tt> tienen un ajuste <code>-s (--stable)</code> para instalar únicamente las versiones estables de las herramientas de compilación (esto es, <tt>crossdev -t i686-pc-linux-gnu --stable --ex-gcc --ex-gdb --portage --pretend</tt>). Si esta opción, ¡<tt>crossdev</tt> instala los últimos paquetes experimentales de la herramientas de compilación! Cuando se utiliza esta opción ya no es necesario el guión de arriba a menos que se hayan desenmascarado versiones específicas de los paquetes de herramientas o ficheros de cabecera.}}

=== Notas específicas de las arquitecturas ===

{{Note/es|Se puede obtener la arquitectura echando un vistazo a la variable <code>CHOST</code> del destino de la compilación en {{Path|/etc/make.conf}}. Cuando se ensambla el nombre de arquitectura para la opción <tt>crossdev -t</tt>, <tt>crossdev</tt> intentará de buen grado instalar las herramientas utilizando el nombre de la arquitectura que se ha ensamblado para los nombres de los directorios dentro de {{Path|/usr}} (esto es, {{Path|/usr/i686-pc-linux-gnu/}}, {{Path|/usr/i686-linux-gnu/}}, ...). Para arreglar esto se debe indicar cada nombre de arquitectura ensamblado o nombre de directorio a <tt>crossdev --clean</tt> para desinstalaro o eliminar manualmente los directorios dentro del sistema.}}

==== Subarquitecturas Intel x86 ====

Si está realizando una compilación cruzada entre distintas subarquitecturas de intel X86 (por ejemplo i586 e i686), deberá construir una cadena de herramientas completa para el CHOST deseado o de lo contrario la construcción fallará. Esto es debido a que i586 e i686 son realmente CHOSTs diferentes a pesar del hecho de que ambos se consideran "x86". Por favor, recuerde esto cuando construya cadenas de herramientas de compilación cruzada. Por ejemplo, si la máquina destino es una i586 esto significa que debe construir cadenas de herramientas de compilación cruzada para i586 en sus máquinas participantes i686. 

==== SPARC ====

El uso de <code>crossdev -t sparc</code> podría fallar arrojando los siguientes errores:

{{CodeBox|title=Errores mostrados cuando se lanza crossdev -t sparc|1=
linker with -z relro support required
support for the tls_model attribute is required
this configuration requires -mlong-double-128 support
}}

Si esto sucede, intente utilizar la siguiente orden:

{{Cmd|crossdev --lenv "CC{{=}}sparc-unknown-linux-gnu-gcc" -t sparc-unknown-linux-gnu}}

=== Configurar distcc para realizar compilaciones cruzadas correctas ===

En la configuración por defecto de distcc, la compilación cruzada "no" funcionará correctamente. El problema es que muchos paquetes llaman a <code>gcc</code> en lugar de usar el nombre completo (por ejemplo,
<code>sparc-unknown-linux-gnu-gcc</code>). Cuando esta tarea de compilación se distribuye a un equipo participante, se invoca al compilador nativo en lugar del compilador cruzado. 

Por suerte, existe una solución a este pequeño problema. Lo único que se requiere es un guión o envoltorio y algunos enlaces simbólicos en el equipo que lanza la orden <code>emerge</code>. Usaremos un equipo Sparc como ejemplo. Donde quiera que vea <code>sparc-unknown-linux-gnu</code> más abajo, sustitúyalo por su propio CHOST (por ejemplo, <code>x86_64-pc-linux-gnu</code> para un equipo AMD64). Al hacer emerge de distcc, el directorio {{Path|/usr/lib/distcc/bin}} tendrá el siguiente aspecto: 

{{Note/es|Las siguientes órdenes se deben lanzar únicamente en la máquina que invoca a emerge. No realice estos pasos en el resto de máquinas participantes.}}

{{RootCmd|cd /usr/lib/distcc/bin |ls -l|output=<pre>
total 0
lrwxrwxrwx 1 root root 15 Dec 23 20:13 c++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 cc -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 g++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 gcc -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc 
</pre>
}}

Esto es lo que debe hacer: 

{{RootCmd|rm c++ g++ gcc cc}}

A continuación crearemos un guión nuevo para esta máquina. Use su editor de texto preferido y cree un archivo con el siguiente texto, luego guárdelo como {{Path|sparc-unknown-linux-gnu-wrapper}}. Recuerde
cambiar el CHOST (en este caso <code>sparc-unknown-linux-gnu</code>) a la definición de CHOST del equipo que correrá emerge. 

{{CodeBox|title=El nuevo guión envoltorio|lang=bash|1=
#!/bin/bash
exec /usr/lib/distcc/bin/sparc-unknown-linux-gnu-g${0:$[-2]} "$@"
}}

A continuación haremos que el guión sea ejecutable y crearemos los enlaces simbólicos adecuados: 

{{RootCmd|chmod a+x sparc-unknown-linux-gnu-wrapper
|ln -s sparc-unknown-linux-gnu-wrapper cc
|ln -s sparc-unknown-linux-gnu-wrapper gcc
|ln -s sparc-unknown-linux-gnu-wrapper g++
|ln -s sparc-unknown-linux-gnu-wrapper c++
}}

Cuando haya terminado, {{Path|/usr/lib/distcc/bin}} tendrá el siguiente aspecto: 

{{RootCmd|ls -l|output=<pre>
total 4
lrwxrwxrwx 1 root root 25 Jan 18 14:20 c++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx 1 root root 25 Jan 18 14:20 cc -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx 1 root root 25 Jan 18 14:20 g++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx 1 root root 25 Jan 18 14:20 gcc -> sparc-unknown-linux-gnu-wrapper lrwxrwxrwx 1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Jul 27 10:52 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc
-rwxr-xr-x 1 root root 70 Jan 18 14:20 sparc-unknown-linux-gnu-wrapper
</pre>
}}

A continuación queremos asegurarnos de que estos envoltorios están disponibles después de actualizar el paquete distcc ya que se sobrescribirán los enlaces simbólicos. Podemos hacer esto a través del fichero {{Path|/etc/portage/bashrc}} que tiene el siguiente aspecto:

{{FileBox|filename=/etc/portage/bashrc|lang=bash|1=
case ${CATEGORY}/${PN} in
    sys-devel/distcc&41;
        # ¡Eh hombre! ¿Cómo fue que ese CONFIG PROTECT no funciona?
        if [ "${EBUILD_PHASE}" == "postinst" ] {{!}}{{!}} [ "${EBUILD_PHASE}" == "postrm" ];
        then cd /usr/lib/distcc/bin
            rm cc c++ gcc g++
            ln -s sparc-unknown-linux-gnu-wrapper cc
            ln -s sparc-unknown-linux-gnu-wrapper c++
            ln -s sparc-unknown-linux-gnu-wrapper gcc
            ln -s sparc-unknown-linux-gnu-wrapper g++
        fi
    ;;
esac
}}

¡Enhorabuena!. Probablemente tenga ahora una configuración de compilación cruzada con distcc en funcionamiento.

=== Como funciona esto ===

Cuando llamamos a <code>distcc</code>, comprueba que se ha invocado (por ejemplo, como <code>i686-pc-linux-gnu-gcc</code>,
<code>sparc-unknown-linux-gnu-g++</code>, etc.). Entonces, cuando distcc
distribuya la tarea de compilación a un equipo participante, pasa también el mismo nombre con el que se llamó. El demonio distcc en el equipo participante busca un binario con el mismo nombre. Si solo
ve <code>gcc</code>, buscará <code>gcc</code>, que probablemente será el
compilador nativo en el equipo participante si la arquitectura no es la misma que el equipo que corre <code>emerge</code>. Cuando pasamos el nombre "completo" del compilador (por ejemplo <code>sparc-unknown-linux-gnu-gcc</code>), entonces no habrá confusión.


=== Troubleshooting ===

This section covers a number of common problems when using <tt>distcc</tt> for cross-compiling.

==== Remote host distccd COMPILE ERRORS ====

When receiving the message <code>COMPILE ERRORS</code> within a remote host's {{Path|/var/log/distccd.log}} file, see the above notes concerning specifying the correct architecture name (ie. <tt>crossdev -t $TARGET</tt>).

Another solution is to uninstall and re-install <tt>crossdev</tt> compiler tools, using the <tt>crossdev --clean</tt> option, or ensuring {{Path|/usr/$TARGET}} no longer exists, and then completely reinstall the cross compiler.

It might also be wise to edit the remote host's {{Path|/usr/$TARGET/etc/portage/make.conf}}, and ensure the contents of the <code>CFLAGS</code> variable are similar on all computers or hosts performing compiler operations.

==== Failed to exec $TARGET-uknown-linux-gnu-gcc: No such file or directory ====

The wrapper scripts might fail to execute, even with correct permissions:

{{CodeBox|title=Mensaje de error del guión envoltorio|1=
distcc[6195] (dcc_execvp) ERROR: failed to exec i686-unknown-linux-gnu-gcc: No such file or directory
}}

To resolve this, make sure to have the wrapper script created with the complete name of the architecture target:

{{Cmd|ls -alh /usr/lib/distcc/bin/c++|output=<pre>
/usr/lib/distcc/bin/c++ ->./i686-pc-linux-gnu-wrapper
</pre>}}


{{Migrated|originalauthors=Andrew Gaffney, Joshua Saddler}}
