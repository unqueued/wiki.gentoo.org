<languages />


{{Metadata|abstract=This guide shows you how to set up distcc for cross-compiling across different processor architectures.}}

Esta guía le muestras cómo configurar distcc para realizar compilación cruzada entre diferentes arquitecturas de procesador.

== Compilación cruzada con distcc ==

== Introducción ==

<code>distcc</code> es una herramienta que permite compartir la carga de compilación de software entre varios computadores en una red. Mientras todos los computadores usen las mismas herramientas de sistema
(toolchain) construidas para la misma arquitectura de procesador no hace falta ninguna configuración especial para <code>distcc</code>. Pero, ¿Qué hacer si se necesita compilar para una arquitectura diferente utilizando computadores diferentes? Esta guía le muestra cómo configurar <code>distcc</code> para compilar para diferentes arquitecturas. 

=== Hacer emerge de la utilidades necesarias ===

En primer lugar necesitará hacer emerge de <code>crossdev</code> en cada uno de los
equipos involucrados en el proceso de compilación. La herramienta <code>crossdev</code> hace más fácil la construcción de herramientas de sistema para arquitecturas de forma cruzada. Originalmente lo escribió Joshua Kinard y luego Mike
Frysinger lo reescribió desde cero. Su uso es sencillo: <code>crossdev -t sparc</code>
construirá un conjunto de herramientas de sistema cruzado para la arquitectura sparc. Esto incluye binutils, gcc, glibc y linux-headers. Si necesita más ayuda, lance <c>crossdev --help</c>. Obviamente, solo es necesario hacer emerge del conjunto de
herramientas del sistema cruzado adecuado en los equipos que asisten a la compilación. 

A continuación, necesitará hacer emerge de <code>distcc</code> en todos los equipos
involucrados en el proceso. Esto incluye el equipo que ejecutará emerge y los máquinas con los compiladores cruzados. Por favor, eche un vistazo a [http://www.gentoo.org//doc/es/distcc.xml La documentación de Distcc en Gentoo] para obtener más información acerca de cómo configurar y utilizar <code>distcc</code>.

=== Notas específicas de las arquitecturas ===

==== Subarquitecturas Intel x86 ====

Si está haciendo una compilación cruzada entre distintas subarquitecturas Intel x86 (por ejemplo, i586 e i686), debe construir el conjunto de herramientas de sistema cruzado para el CHOST requerido, en caso contrario la compilación fallará. Esto es debido a que i586 e i686 son CHOSTs diferentes a pesar que ambos son considerados "x86". Por favor, tenga esto en cuenta cuando construya sus herramientas de sistema cruzado. Por ejemplo, si el sistema objetivo es i586, tiene que construir las herramientas de sistema cruzado para i586 en los equipos i686 que participan en la construcción. 

==== SPARC ====

El uso de <code>crossdev -t sparc</code> podría fallar arrojando los siguientes errores:

{{Code|Errores mostrados cuando se lanza crossdev -t sparc|<pre>
linker with -z relro support required
support for the tls_model attribute is required
this configuration requires -mlong-double-128 support
</pre>
}}

Si esto sucede, intente utilizar la siguiente orden:

{{Cmd|crossdev --lenv "CC{{=}}sparc-unknown-linux-gnu-gcc" -t sparc-unknown-linux-gnu}}

=== Configurar distcc para realizar compilaciones cruzadas correctas ===

En la configuración por defecto de distcc, la compilación cruzada "no" funcionará correctamente. El problema es que muchos paquetes llaman a <code>gcc</code> en lugar de usar el nombre completo (por ejemplo,
<code>sparc-unknown-linux-gnu-gcc</code>). Cuando esta tarea de compilación se distribuye a un equipo participante, se invoca al compilador nativo en lugar del compilador cruzado. 

Por suerte, existe una solución a este pequeño problema. Lo único que se requiere es un guión tipo envoltorio y algunos enlaces
simbólicos en el equipo que lanza la orden <code>emerge</code>. Usaré mi equipo
Sparc como ejemplo. Donde quiera que vea <code>sparc-unknown-linux-gnu</code>
más abajo, sustitúyalo por su propio CHOST (por ejemplo, <code>x86_64-pc-linux-gnu</code> para un equipo AMD64). Al hacer emerge de distcc, el directorio {{Path|/usr/lib/distcc/bin}} tendrá el siguiente aspecto: 

{{Note|Las siguientes órdenes se deben lanzar únicamente en la máquina que invoca a emerge. No realice estos pasos en el resto de máquinas participantes.}}

{{RootCmd|cd /usr/lib/distcc/bin |ls -l|output=<pre>
total 0
lrwxrwxrwx 1 root root 15 Dec 23 20:13 c++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 cc -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 g++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 gcc -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc 
</pre>
}}

Esto es lo que debe hacer: 

{{RootCmd|rm c++ g++ gcc cc}}

A continuación crearemos un guión nuevo para esta máquina. Use su editor de texto preferido y cree un archivo con el siguiente texto, luego guárdelo como {{Path|sparc-unknown-linux-gnu-wrapper}}. Recuerde
cambiar el CHOST (en este caso <code>sparc-unknown-linux-gnu</code>) a la definición de CHOST del equipo que correrá emerge. 

{{Code|El nuevo guión envoltorio|<pre>
#!/bin/bash
exec /usr/lib/distcc/bin/sparc-unknown-linux-gnu-g${0:$[-2]}
"$@"
</pre>
}}

A continuación haremos que el guión sea ejecutable y crearemos los enlaces simbólicos adecuados: 

{{RootCmd|chmod a+x sparc-unknown-linux-gnu-wrapper
|ln -s sparc-unknown-linux-gnu-wrapper cc
|ln -s sparc-unknown-linux-gnu-wrapper gcc
|ln -s sparc-unknown-linux-gnu-wrapper g++
|ln -s sparc-unknown-linux-gnu-wrapper c++
}}

Cuando haya terminado, {{Path|/usr/lib/distcc/bin}} tendrá el siguiente aspecto: 

{{RootCmd|ls -l|output=<pre>
total 4
lrwxrwxrwx 1 root root 25 Jan 18 14:20 c++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx 1 root root 25 Jan 18 14:20 cc -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx 1 root root 25 Jan 18 14:20 g++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx 1 root root 25 Jan 18 14:20 gcc -> sparc-unknown-linux-gnu-wrapper lrwxrwxrwx 1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx 1 root root 15 Jul 27 10:52 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc
-rwxr-xr-x 1 root root 70 Jan 18 14:20 sparc-unknown-linux-gnu-wrapper
</pre>
}}

¡Enhorabuena! Probablemente tenga ahora una configuración de compilación cruzada con distcc en funcionamiento. 

=== Como funciona esto ===

Cuando llamamos a <code>distcc</code>, comprueba que se ha invocado (por ejemplo, como <code>i686-pc-linux-gnu-gcc</code>,
<code>sparc-unknown-linux-gnu-g++</code>, etc.). Entonces, cuando distcc
distribuya la tarea de compilación a un equipo participante, pasa también el mismo nombre con el que se llamó. El demonio distcc en el equipo participante busca un binario con el mismo nombre. Si solo
ve <code>gcc</code>, buscará <code>gcc</code>, que probablemente será el
compilador nativo en el equipo participante si la arquitectura no es la misma que el equipo que corre <code>emerge</code>. Cuando pasamos el nombre "completo" del compilador (por ejemplo <code>sparc-unknown-linux-gnu-gcc</code>), entonces no habrá confusión. 

== Agradecimientos ==

Nos gustaría dar las gracias a los siguientes autores y editores por sus contribuciones a esta guía:

* Andrew Gaffney
* Joshua Saddler
