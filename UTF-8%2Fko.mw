<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

{{Metadata|abstract=UTF-8은 가변 길이 문자 인코딩이며, 심볼당 1바이트에서 4바이트를 사용합니다. 따라서 첫번째 UTF-8 바이트는 ASCII에 대한 이전 호환성을 완전히 갖춘 문자 세트를 제공하는 ASCII 인코딩 용도로 사용합니다. UTF-8은 ASCII와 라틴 문자를 데이터의 크기를 크게 변화하지 않고도 상호 표현이 가능함을 의미하는데, 첫 번째 바이트만 활용하기 때문입니다. 상위 바이트 범위를 할당 받아 만족하지 않는 일본어권 사용자 같은 동양 문자 사용자들에게는 최대 50%의 데이터 중복을 취하게 되었습니다.}}

UTF-8은 가변 길이 문자 인코딩이며, 심볼당 1바이트에서 4바이트를 사용합니다. 따라서 첫번째 UTF-8 바이트는 ASCII에 대한 이전 호환성을 완전히 갖춘 문자 세트를 제공하는 ASCII 인코딩 용도로 사용합니다. UTF-8은 ASCII와 라틴 문자를 데이터의 크기를 크게 변화하지 않고도 상호 표현이 가능함을 의미하는데, 첫 번째 바이트만 활용하기 때문입니다. 상위 바이트 범위를 할당 받아 만족하지 않는 일본어권 사용자 같은 동방 문자 사용자들에게는 최대 50%의 데이터 중복을 취하게 되었습니다. 

== 문자 인코딩 ==

=== 문자 인코딩이란 무엇인가요? ===

컴퓨터는 인쇄한 텍스트를 자체적으로 사람이 이해하는 것처럼 이해하지 못합니다. 컴퓨터는 모든 텍스트의 문자를 숫자로 표현합니다. 옛부터 각 숫자 모음은 알파벳과 문자를 표현하는데 사용했습니다(코딩 시스템, 인코딩, 문자세트로 알려짐)만 컴퓨터 하드웨어의 제한으로, 크기의 제한을 받았습니다. 

=== 문자 인코딩 역사 ===

가장 일반적(또는 최소한 광범위하게 수용해온) 문자세트는 '''ASCII'''(정보 교환용 미 표준 코드)였습니다. 지금껏 만들어온 소프트웨어 표준에 있어 가장 성공적으로 이끌어온 ASCII야 말로 광범위하게 사용했습니다. 최신 ASCII는 1986년도에 미 국립 표준 협회에서 표준으로 제정(ANSI X3.4, RFC 20, ISO/IEC 646:1991, ECMA-6) 했습니다. 

ASCII는 7비트로 엄격하게 제한되었으며, 표현 가능한 7개의 이진수로 비트 패턴을 사용함을 의미하는데, 10진수로는 0부터 127까지의 범위를 제공합니다. 여기에는 32개의 보이지 않는 제어 문자가 있는데, 0부터 31까지의 범위에 있으며, 마지막 제어 문자는 DEL또는 delete이며, 이 제어문자는 127번에 할당되어 있습니다. 32번 부터 126번 까지는 공백 문자, 문장 부호, 라틴 문자, 숫자와 같은 눈에 보이는 문자로 구성되어 있습니다. 

ASCII의 8번째 비트는 본디 오류 검출을 위한 패리티 비트로 활용했습니다. 오류 검사를 고려하지 않으면 0으로 그대로 둡니다. ASCII에서 각 문자를 단일 바이트로 표현했음을 의미합니다. 

ASCII를 최근의 영문 의사소통을 하는데는 충분했었지만, 강세부호가 들어간 문자가 있는 다른 유럽어권의 문자에 대해서는 그렇지 않았습니다. 이런 필요성 때문에 ISO 8859 표준을 개발했습니다. ASCII와의 이전 호환성을 유지했지만 8번째 비트를 빈 채로 내버려두는 대신에 각 인코딩 주소에 다른 127개의 문자를 넣도록 했습니다. ISO 8859의 한계는 곧 다가왔고, 현재 ISO 8859 표준의 15가지 변형 표준이 있습니다. 이러한 문자 세트의 ASCII 호환 바이트 범위밖에서는 각 바이트로 표현하는 문자간의 충돌이 종종 일어났습니다. 문자 인코딩간 상호 처리를 좀 더 복잡하게 처리하기 위해 일부 마이크로소프트 윈도우 버전에서는 서유럽어권에 대해 Windows-1252 표준을 사용했습니다. 이 표준은 ISO-8859-1의 상위 집합이지만 여러모로 다른 점이 있었습니다. 이 문자세트는 ASCII 호환성을 유지했습니다. 

일본어와 한국어 같은 언어를 대상으로 사용하는 EUC(확장 유닉스 코딩)와 같은 비 라틴어 계열 문자를 대상한 완전히 다른 단일 바이트 인코딩의 개발 필요성은, 이미 다른 운영체제에서 동일한 언어에 대해 Shift-JIS, ISO-2022-JP와 같은 다른 문자셋을 이미 사용하고 있는 상황에서 더욱 혼동감을 가져왔습니다. 키릴 자모를 보려는 사용자는 러시아와 불가리아에서 사용하는 KOI8-R, 우크라이나에서 사용하는 KOI8-U, 온전치 못한 ISO 8859-5, 보통 사용하던 Windows-1251 세트 중 하나를 선택해야 했습니다. 이들 대부분의 모든 문자세트는 ASCII와의 호환성을 깨뜨렸습니다. 비록 KOI8 인코딩에서는 라틴 문자 숫서대로 키릴 문자를 배치했다는 점에 주목할 수 있지만, 이 경우 8번째 비트는 제거되었으며, 텍스트는 대소문자가 뒤집힌 음역 상태로 ASCII 터미널에서 해석 가능했습니다. 

이러한 판단 추세가 상당한 혼동을 가져왔으며, 다중 언어 의사 소통에 있어 거의 완전하게 불가능했고, 특히 다른 문자에 대해서도 불가능했습니다. 이제 유니코드로 들어가보도록 하겠습니다. 

=== 유니코드가 무엇인가요? ===

유니코드는 기존 문자세트의 단일 비트 제한을 깨버렸습니다. 최대 1,114,112 문자를 표현하기 위해, 65536 코드 포인트의 17가지 "영역"을 활용합니다. "기본 다중 언어 영역" 또는 BMP로 알려진 첫 번째 영역에서는 사용자가 필요로 하는 모든 문자를 담고 있습니다. 대부분 유니코드가 16비트 문자 세트였다는 잘못된 가정을 낳았습니다. 

유니코드는 여러가지 다른 방식으로 대응을 수행하지만, 주로 가장 많이 사용하는 방식은 '''UTF'''(유니코드 변환 형식)와 '''UCS'''(유니버설 문자 세트) 방식입니다. UTF 다음의 숫자는, 하나의 유닛에 들어가는 비트 수를 나타내며, UCS 다음에 나타나는 숫자는 총 바이트 수를 나타냅니다. 가장 널리 활용하게 된 UTF-8 은 유니코드 내용을 있는 그대로의 8비트로 표현합니다. 그러니까, UTF-8이 이 문서의 제목입니다.

=== UTF-8이 처리할 수 있는 것 ===

UTF-8은 표준 호환과 전세계적으로 통용되는 다중 언어 환경을 살려 작업할 수 있도록 하며 데이터 중복성을 비교적 최소화 합니다. UTF-8은 비 ASCII 문자를 인터넷으로, 전자 메일 또는 IRC로 전송할 때 알맞은 방법입니다. 이럼에도 불구하고, 대부분의 사용자는 온라인 소통에 대해 UTF-8 사용을 모욕적인 행위로 여기기도 합니다. ''비 ASCII'' UTF-8 을 사용하기 전에 일부 채널, 메일링 리스트, 유즈넷 그룹에서의 UTF-8에 대한 인식은 매우 긍정적입니다. 

== 젠투 리눅스에서 UTF-8 설정 ==

=== UTF-8 로캘 찾기 또는 만들기 ===

이제 유니코드의 이론을 이해했으며 UTF-8을 자체적으로 사용할 준비가 끝났습니다!

더 많은 설명에 관심있는 사용자 분들을 위해 [[Localization/Guide/ko|젠투 지역화 안내서]]에 내용을 준비했습니다. 

선택한 언어에 대해 UTF-8 로캘을 사용할 수 있는지, 로캘을 만들어야 하는 지 여부를 결정해야합니다.

{{Cmd|locale -a {{!}} grep 'en_GB'|output=<pre>
en_GB
en_GB.UTF-8
</pre>
}}

이 명령행의 출력과 같이, <code>.UTF-8</code>와 같은 접미부가 나타나야 합니다. <code>.UTF-8</code> 접미부와 유사한 결과가 나타나지 않는다면 UTF-8 호환 로캘을 만들어야 합니다. 

{{Note|사용할 언어에 대한 UTF-8 로캘이 없을 경우에만 다음 코드 예제를 실행하십시오.}}

"en_GB"를 원하는 로캘 설정으로 바꾸십시오:
{{RootCmd|localedef -i en_GB -f UTF-8 en_GB.UTF-8}}

다른 방법으로 UTF-8 로캘을 포함하려면 {{Path|/etc/locale.gen}} 파일에 추가하고 {{c|locale-gen}} 명령으로 필요한 로캘을 생성하십시오. 생성한 로캘은 {{Path|/usr/lib/locale/locale-archive}} 디렉터리에 기록합니다.

{{CodeBox|title=/etc/locale.gen의 줄|1=
en_GB.UTF-8 UTF-8
}}

{{RootCmd|locale-gen|output=<pre>
 * Generating 1 locales (this might take a while) with 1 jobs
 *  (1/1) Generating en_GB.UTF-8 ...                            [ ok ]
 * Generation complete
</pre>}}

=== 로캘 설정 ===

새 UTF-8 로캘을 사용하려고 설정해야 할 환경 변수가 하나 있습니다. <var>LC_CTYPE</var>(또는 시스템 언어도 바꾸려면 추가적으로 <var>LANG</var>도 변경)이 바로 그 변수입니다. 로캘을 설정하는 여러가지 방법이 있습니다. 어떤 시스템 관리자는 일부 사용자에게만 UTF-8 환경을 맞춰주는데, 이 경우 각 사용자에게 (본 쉘 사용자가 {{c|/bin/sh}}를 사용할 경우) {{Path|~/.profile}} 파일, (본 어게인 쉘 사용자가 {{c|/bin/bash}}를 사용할 경우) {{Path|~/.bash_profile}} 또는 {{Path|~/.bashrc}}를 사용합니다. 더 자세한 내용과 가장 적합한 실제 사용 예는 [[Localization/Guide/ko|지역화 안내서]]에서 찾아보실 수 있습니다. 

로캘을 설정하는 또 다른 선호 방식은 전체적으로 설정하는 방법입니다. {{Path|/etc/init.d/xdm}}를 사용 할 때와 같은 특정 환경의 경우 작성자에게 부분적으로 추천하는데, 초기화 스크립트가 앞서 언급한 쉘 시작 파일을 source로 등록하기 전에 디스플레이 관리자와 데스크톱을 시작합니다. 다시 말해, 환경 변수 값을 설정하기 전에 언급한 과정을 수행합니다. 

{{Path|/etc/env.d/02locale}} 파일을 사용하면 전체 로캘 설정을 할 수 있습니다. 이 파일의 내용은 다음과 같아야 합니다: 

{{CodeBox|title=/etc/env.d/02locale 예제|lang=bash|1=
## (As always, change "en_GB.UTF-8" to the appropriate locale)
LANG="en_GB.UTF-8"
}}

{{Note/ko| <var>LANG</var>을 <var>LC_CTYPE</var>으로 바꿀 수 있습니다. <var>LC_CTYPE</var> 사용에 영향을 주는 범위의 자세한 정보는 [http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html#Locale-Categories 그뉴 로캘 페이지]<sup style="color:#ff0077">en</sup>를 참고하십시오.}}

다음, 바뀐 내용으로 환경을 업데이트해야 합니다. 

{{RootCmd|env-update|output=<pre>
>>> Regenerating /etc/ld.so.cache...
 * Caching service dependencies ...
</pre>}}
{{RootCmd|source /etc/profile}}

이제 어떠한 매개변수 값도 설정하지 말고 {{c|locale}}을 실행하여 환경에 올바른 값을 설정했는지 확인하십시오: 

{{RootCmd|locale|output=<pre>
LANG=en_GB.UTF-8
LC_CTYPE="en_GB.UTF-8"
LC_NUMERIC="en_GB.UTF-8"
LC_TIME="en_GB.UTF-8"
LC_COLLATE="en_GB.UTF-8"
LC_MONETARY="en_GB.UTF-8"
LC_MESSAGES="en_GB.UTF-8"
LC_PAPER="en_GB.UTF-8"
LC_NAME="en_GB.UTF-8"
LC_ADDRESS="en_GB.UTF-8"
LC_TELEPHONE="en_GB.UTF-8"
LC_MEASUREMENT="en_GB.UTF-8"
LC_IDENTIFICATION="en_GB.UTF-8"
LC_ALL=
</pre>
}}

=== 로캘 설정할 때 대신 eselect 활용 ===
위에서 설명한 방법이 시스템을 관리하는 좋은 방법이긴 하지만, {{c|eselect}} 유틸리티로 올바른 로캘 설정을 검증할 수 있습니다.

시스템에서 사용할 수 있는 로캘 목록을 보려면 {{c|eselect}}를 사용하십시오:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX *
  [3] en_GB.utf8
  [ ] (free form)
</pre>
}}

{{c|eselect}} 명령을 사용하면 목록에 나타난 바와 마찬가지로 로캘 설정이 단순해집니다. 다음 처럼 명령을 실행하면 올바른 로캘을 결정합니다:

{{RootCmd|eselect locale set 3 |output=<pre>
Setting LANG to en_GB.utf8 ...
</pre>
}}

결과를 확인하십시오:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8 *
  [ ] (free form)
</pre>
}}

이 경우 {{Path|/etc/env.d/02locale}} 파일에 <code>.utf8</code> 대신 <code>.UTF-8</code>을 넣게 됩니다. 적당하게 {{c|eselect}} 명령을 실행하십시오:

{{RootCmd|eselect locale set en_GB.UTF-8 |output=<pre>
Setting LANG to en_GB.UTF-8 ...
</pre>
}}

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8
  [4] en_GB.UTF-8 *
  [ ] (free form)
</pre>
}}

다음 명령을 실행하면 쉘에서 변수 값을 업데이트합니다:

{{RootCmd|env-update && source /etc/profile |output=<pre>
>>> Regenerating /etc/ld.so.cache...
</pre>
}}

다 되었습니다. 이제 시스템에서는 UTF-8 로캘을 사용합니다. 다음 넘어야 할 장애물은 매일 사용하는 프로그램의 설정입니다.

== 프로그램 지원 ==

When Unicode first started gaining momentum in the software world, multibyte character sets were not well suited to languages like C, which is the base language of most commonly used programs. Even today, some programs are not able to handle UTF-8 properly. Fortunately the majority of programs, especially the common ones, are supported. 

=== 파일 이름, NTFS, FAT ===

There are several NLS options in the Linux kernel configuration menu, but it is important to not become confused. For the most part, the only thing that needs to be done is to build UTF-8 NLS support into the kernel, and change the default NLS option to utf8. 

{{KernelBox|title=UTF-8 NLS 커널 설정 단계|<pre>
File Systems -->
  Native Language Support -->
    (utf8) Default NLS Option
    <*> NLS UTF8
    ## (Also <*> other character sets that are in use in the system's FAT filesystems or Joilet CD-ROMs.)
</pre>
}}

When planning to mount NTFS partitions, users may need to specify a <code>nls=</code> option with mount. When planning on mounting FAT partitions, users may need to specify a <code>codepage=</code> option with mount. Optionally, users can also set a default codepage for FAT in the kernel configuration.

{{Note|Using the <code>codepage</code> option via the <tt>mount</tt> will override the settings used in the kernel.}}

{{KernelBox|title=커널 설정 메뉴 중 FAT 설정|<pre>
File Systems -->
  DOS/FAT/NT Filesystems  -->
    (437) Default codepage for fat
</pre>
}}

Avoid setting <code>Default iocharset for fat</code> to UTF-8; it is not recommended. Instead, pass the <code>utf8=true</code> option when mounting FAT partitions. For further information <tt>man mount</tt> or see the appropriate kernel documentation at {{Path|/usr/src/linux/Documentation/filesystems/vfat.txt}}

파일 이름 인코딩을 바꾸려면 {{Package|app-text/convmv}} 패키지를 사용할 수 있습니다. 

{{Emerge|app-text/convmv}}

The format of the <tt>convmv</tt> command is as follows:

{{RootCmd|convmv -f <current-encoding> -t utf-8 <filename>}}

Substitute iso-8859-1 with the charset being converted from:

{{RootCmd|convmv -f iso-8859-1 -t utf-8 filename}}

For changing the ''contents'' of files, use the <tt>iconv</tt> utility, it comes bundled with {{Package|sys-libs/glibc}} and should be installed on all Gentoo systems. Substitute iso-8859-1 with the charset being converted from. After running the command be sure to check for sane output:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 filename}}

To convert a file, another file must be created:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 filename > newfile}}

이 목적으로 recode({{Package|app-text/recode}}) 꾸러미도 사용할 수 있습니다.

=== 시스템 콘솔 ===

{{Important/ko|콘솔에서 유니코드를 사용하려면 {{Package|sys-apps/baselayout-1.11.9}}(이상)의 버전이 필요합니다.}}

UTF-8을 콘솔에서 사용하려면, {{Path|/etc/rc.conf}}를 편집하고, <code>unicode="yes"</code>를 설정해야 하며 파일의 주석을 읽어보아야합니다. 유니코드 문자 영역 대부분의 영역을 잘 구현한 글꼴을 보유하는 게 중요합니다. 이 문제를 해결하려면 유니코드 로캘을 제대로 만들었는지 확인하십시오. 

{{Path|/etc/conf.d/keymaps}}에 설정한 <code>keymap</code> 변수에서, Unicode 키 맵을 지정해야합니다. 

{{CodeBox|title=/etc/conf.d/keymaps 일부 예제|lang=bash|1=
## (Change "uk" to the right local layout)
keymap="uk"
}}

=== ncueses 와 slang ===

{{Note/ko|slang을 설치하지 않았거나 필요로 하지 않는다면 이 장의 slang 언급 부분은 무시하십시오.}}

It is wise to add <code>unicode</code> to the global USE flags in {{Path|/etc/portage/make.conf}}, and then to re-emerge {{Package|sys-libs/ncurses}} and {{Package|sys-libs/slang}}. Portage will do this automatically if the <code>--changed-use</code> or <code>--newuse</code> options are used. Run the following command to pull in the packages: 

{{RootCmd|emerge --update --deep --newuse world}}

이들 설정을 연결하려 꾸러미를 다시 빌드해야 하므로 이제 바꾼 USE 설정을 적용하겠습니다. 우리가 사용할 도구(<code>revdep-rebuild</code>)는 {{Package|app-portage/gentoolkit}} 꾸러미에 있습니다. 

{{RootCmd|revdep-rebuild --soname libncurses.so.5
|revdep-rebuild --soname libslang.so.1}}

=== KDE, 그놈, Xfce ===

모든 주요 데스크톱 환경은 완전한 유니코드 지원 기능을 제공하며, 이 안내서에서 이미 다룬 더 이상의 설정이 필요하지 않습니다. 왜냐면 근본적인 그래픽 툴-키트(Qt 또는 GTK+2)는 UTF-8을 인식하기 떄문입니다. 그 다음에는 이 툴키트 위에서 동작하는 모든 프로그램은 특별히 UTF-8을 인지해야 합니다. 

GTK+ 기반 프로그램에서 16진수 유니코드 입력 단축키는 {{Key|Ctrl}} + {{Key|Shift}} + {{Key|U}} + <nowiki><16진수></nowiki>입니다.

Xlib와 GTK+1 활용시 별도의 고려사항이 있습니다. GTK+1에서는 ~/.gtkrc에 iso-10646-1 FontSpec이 필요한데, <code>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</code>를 예로 들 수 있습니다. 또한 Xlib나 Xaw를 활용하는 프로그램은 동일한 FontSpec이 필요한데, 이 요건을 충족하지 않으면 동작하지 않습니다. 

{{Note|If an old gnome1 control center version is available, use that instead. Pick any iso10646-1 font from there.}}

{{CodeBox|title=유니코드 호환 글꼴을 정의하는 ~/.gtkrc (for GTK+1) 예제|1=
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
}}

프로그램에서 Qt와 GTK+2 GUI를 지원한다면, 보통 GTK+2 GUI가 유니코드를 더 잘 지원합니다.

=== X11과 글꼴 ===

TrueType fonts have support for Unicode, and most of the fonts that ship with Xorg have extensive character support, although, obviously, not every single glyph available in Unicode has been created for that font. 

Also, many font packages in Portage are Unicode aware. See the [[Fontconfig]] page for more information on recommended fonts and configuration.

=== 창 관리자와 터미널 에뮬레이터 ===

Window managers not built on GTK+ or Qt generally have very good Unicode support, as they often use the Xft library for handling fonts. If the window manager does not use Xft for fonts, then it is still possible to use the FontSpec mentioned in the previous section as a Unicode font. 

Xft를 사용하며 유니코드를 지원하는 터미널 에뮬레이터는 좀처럼 찾아보기 쉽지 않습니다. Konsole과 gnome-terminal 이외에 포티지에서 선택할 수 있는 최상의 선택지는,  {{Package|x11-terms/rxvt-unicode}}, {{Package|x11-terms/xfce4-terminal}}, {{Package|gnustep-apps/terminal}}, {{Package|x11-terms/mlterm}}, 또는 <code>unicode</code> USE 플래그를 사용할 때 uxterm으로 실행하는 {{Package|x11-terms/xterm}} 입니다.{{Package|app-misc/screen}}에서는 <code>screen -U</code> 또는 {{Path|~/.screenrc}}에 다음 명령을 넣었을 때 UTF-8을 지원합니다: 

{{CodeBox|title=UTF-8용 ~/.screenrc|1=
defutf8 on
}}

=== Vim, Emacs, Xemacs, Nano ===

[[Vim#Change_file_encoding|Vim]] provides full UTF-8 support, and also has builtin detection of UTF-8 files. For further information in [[Vim#Change_file_encoding|Vim]], use <code>:help mbyte.txt</code> . 

[[GNU Emacs]]<sup style="color:#ff0077">en</sup>은 버전 23부터, [[XEmacs]]<sup style="color:#ff0077">en</sup>은 버전 21.5부터 UTF-8을 완벽하게 지원합니다. GNU  Emacs 24 에서도 양방향성 텍스트 편집을 지원합니다: 

nano는 1.3.6부터 UTF-8을 완벽하게 지원합니다.

=== 쉘 ===

Currently, <code>bash</code> provides full Unicode support through the GNU readline library. Z Shell (<tt>zsh</tt>) offers Unicode support with the <code>unicode</code> USE flag. 

The C 쉘 <tt>tcsh</tt>와 <tt>ksh</tt>는 UTF-8을 완전히 지원하지 않습니다.

=== Irssi ===

Irssi는 사용자가 옵션을 별도로 설정해야 하지만 UTF-8을 완벽하게 지원합니다. 

{{Cmd|set term_charset UTF-8|prompt=[irssi] }}

비 UTF-8 문자 세트로 비 ASCII 문자를 자주 주고받는 채널이라면, 문자를 변환할때 <code>/recode</code> 명령을 사용하십시오. 더 많은 내용은 <code>/help recode</code>를 입력하십시오. 

=== Mutt ===

Mutt 메일 사용자 에이전트는 유니코드를 상당히 잘 지원합니다. Mutt에서 UTF-8을 사용하려면 설정 파일에 무언가를 설정할 필요가 없습니다. Mutt는 모든 설정 파일(서명 포함)을 UTF-8로 인코딩했다면 별도의 수정 없이 유니코드 환경에서 동작합니다. 

{{Note|Mutt에서 메일을 볼 때 여전히 '?'이 보일 수도 있습니다. 이 현상은 다른 사람들이 전자메일에 문자세트를 명확하게 표시하지 않는 메일 클라이언트를 사용하기 때문입니다. 그 사람들이 클라이언트를 제대로 설정하도록 이야기해주는 방법 말고 취할 수 있는 조치가 몇 있긴 합니다.}}

더 많은 내용은 [http://wiki.mutt.org/index.cgi?MuttFaq/Charset Mutt 위키]<sup style="color:#ff0077">en</sup>에 있습니다. 

=== Man ===

맨 페이지는 리눅스 머신의 통합부입니다. 맨 페이지 읽기 프로그램이 유니코드를 제대로 지원하는지 확인하려면 {{Path|/etc/man.conf}}를 편집하여 다음 줄의 내용을 바꾸십시오. 

{{CodeBox|title=유니코드 지원용 man.conf 변경|1=
## (This is the old line)
NROFF           /usr/bin/nroff -Tascii -c -mandoc
## (Replace the one above with this)
NROFF           /usr/bin/nroff -mandoc -c
}}

=== elinks와 links ===

These are commonly used text-based browsers, and we shall see how we can enable UTF-8 support on them. On <tt>elinks</tt> and <tt>links</tt>, there are two ways to go about this, one using the Setup option from within the browser or editing the config file. To set the option through the browser, open a site with <tt>elinks</tt> or <tt>links</tt> and then {{Key|Alt}}+{{Key|S}} to enter the Setup Menu then select Terminal options, or press {{Key|T}}. Scroll down and select the last option <code>UTF-8 I/O</code> by pressing {{Key|Enter}}. Then Save and exit the menu. On <tt>links</tt> one may have to do a repeat {{Key|Alt}}+{{Key|S}} and then press {{Key|S}} to save. The config file option, is shown below. 

{{CodeBox|title=Enabling UTF-8 for elinks/links|1=
## (For elinks, edit /etc/elinks/elinks.conf or ~/.elinks/elinks.conf and
add the following line)
set terminal.linux.utf_8_io = 1

## (For links, edit ~/.links/links.cfg and add the following
line)
terminal "xterm" 0 1 0 us-ascii utf-8
}}

=== Samba ===

삼바는 Mac, 리눅스, FreeBSD와 같은 UNIX 시스템에서 SMB(서버 메시지 블록) 프로토콜을 구현한 소프트웨어 모음입니다. 이 프로토콜은 일반 인터넷 파일 시스템(CIFS)처럼 참고하기도 합니다. 삼바에는 윈도우 네트워크 파일 공유에 사용하는 NetBIOS 시스템도 있습니다. 

다음 내용을 [global] 섹션에 추가하십시오:
{{RootCmd|nano -w /etc/samba/smb.conf|output=<pre>
dos charset = 1255
unix charset = UTF-8
display charset = UTF-8
</pre>
}}

=== 전체 시험하기 ===

UTF-8을 시험해볼 수 있는 웹사이트는 여러군데에 있습니다. {{Package|net-www/w3m}}, {{Package|net-www/links}}, {{Package|net-www/elinks}}, {{Package|net-www/lynx}}, 모질라 기반 브라우저(Firefox 포함)에서 UTF-8을 지원합니다. Konqueror 와 Opera도 역시 마찬가지로 UTF-8을 완벽하게 지원합니다. 

When using one of the text-only web browsers, make absolutely sure a Unicode-aware terminal is used.

If certain characters are displayed as boxes with letters or numbers inside, then the current font does not have a character for the symbol or glyph that the UTF-8 wants. Instead, it displays a box with the hex code of the UTF-8 symbol. 

* [http://unicode-table.com/en/blocks/dingbats/ unicode-table.com]
* [http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html A W3C UTF-8 Test Page] 
* [http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm A UTF-8 test page provided by the University of Frankfurt]

=== 입력기 ===

''Dead keys'' may be used to input characters in X that are not included on the keyboard. These work by pressing the right {{Key|Alt}} key (or in some countries, {{Key|AltGr}}) and an optional key from the non-alphabetical section of the keyboard to the left of the return key at once, releasing them, and then pressing a letter. The dead key should modify it. Input can be further modified by using the {{Key|Shift}} key at the same time as pressing the {{Key|AltGr}} and modifier. 

To enable dead keys in X, a layout needs to be selected that supports it. Most European layouts already have dead keys with the default variant. However, this is not true of North American layouts. Although there is a degree of inconsistency between layouts, the easiest solution seems to be to use a layout in the form "en_US" rather than "us", for example. The layout is set in {{Path|/etc/X11/xorg.conf}} like so: 

{{CodeBox|title=/etc/X11/xorg.conf 일부|lang=xorg_conf|1=
Section "InputDevice"
    Identifier "Keyboard0"
    Driver     "kbd"
    Option     "XkbLayout" "en_US" ## # Rather than just "us"
    ## (Other Xkb options here)
EndSection
}}

{{Note|The preceding change only needs to be applied when using a North American layout, or another layout where dead keys do not seem to be working. European users should have working dead keys as is.}}

This change will come into effect when the X server is restarted. To apply the change now, use the <tt>setxkbmap</tt> tool, for example, <tt>setxkbmap en_US</tt> . 

It is probably easiest to describe dead keys with examples. Although the results are locale dependent, the concepts should remain the same regardless of locale. The examples contain UTF-8, so to view them tell the browser to view the page as UTF-8, or have a UTF-8 locale already configured. 

When I press {{Key|AltGr}} and {{Key|[}} at once, release them, and then press {{Key|a}}, 'ä' is produced. When I press {{Key|AltGr}} and {{Key|[}} at once, and then press {{Key|e}}, 'ë' is produced. When I press {{Key|AltGr}} and {{Key|;}} at once, and then press {{Key|a}}, 'á' is produced, and when I press {{Key|AltGr}} and {{Key|;}} at once, release them, and then press {{Key|e}}, 'é' is produced. 

By pressing {{Key|AltGr}}, {{Key|Shift}} and {{Key|[}} at once, releasing them, and then pressing {{Key|a}}, a Scandinavian 'å' is produced. Similarly, when I press {{Key|AltGr}}, {{Key|Shift}} and {{Key|[}} at once, release ''only'' the {{Key|[}}, and then press it again, '°' is produced. Although it looks like one, this (U+02DA) is not the same as a degree symbol (U+00B0).

{{Key|AltGr}} can be used with alphabetical keys alone. For example, {{Key|AltGr}} and {{Key|m}}, a Greek lower-case letter mu is produced. {{Key|AltGr}} and {{Key|s}} produce a scharfes s or esszet, etc. As many European users would expect (because it is marked on their keyboard), {{Key|AltGr}} and {{Key|4}} (or {{Key|E}} depending on the keyboard layout) produces a Euro sign, '€'.

=== 참고 자료 ===

*  [https://en.wikipedia.org/wiki/Unicode 위키피디아 유니코드 항목] 
*  [https://en.wikipedia.org/wiki/UTF-8 위키피디아 UTF-8 항목] 
*  [http://www.unicode.org Unicode.org]
*  [http://www.utf-8.com UTF-8.com]
*  [http://www.ietf.org/rfc/rfc3629.txt RFC 3629]
*  [http://www.ietf.org/rfc/rfc2277.txt RFC 2277]
*  [http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF Characters vs. Bytes]
* [http://www.gnu.org/software/libc/manual/html_node/Locales.html 로캘 및 국제화]

== 알려진 문제 ==

=== 시스템 설정 파일 (/etc) ===

({{Path|/etc/fstab}}과 같은) 대부분의 시스템 설정 파일에서는 UTF-8을 지원하지 않습니다. 이 파일은 ASCII 문자 세트를 그대로 계속 사용하시는게 좋습니다.

[[Category:Localization]] {{Migrated|originalauthors=Thomas Martin, Alexander Simonov, Shyam Mani, nightmorph}}
