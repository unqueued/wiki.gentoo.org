<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

{{Metadata|abstract=UTF-8은 가변 길이 문자 인코딩이며, 심볼당 1바이트에서 4바이트를 사용합니다. 따라서 첫번째 UTF-8 바이트는 ASCII에 대한 이전 호환성을 완전히 갖춘 문자 세트를 제공하는 ASCII 인코딩 용도로 사용합니다. UTF-8은 ASCII와 라틴 문자를 데이터의 크기를 크게 변화하지 않고도 상호 표현이 가능함을 의미하는데, 첫 번째 바이트만 활용하기 때문입니다. 상위 바이트 범위를 할당 받아 만족하지 않는 일본어권 사용자 같은 동양 문자 사용자들에게는 최대 50%의 데이터 중복을 취하게 되었습니다.}}

UTF-8은 가변 길이 문자 인코딩이며, 심볼당 1바이트에서 4바이트를 사용합니다. 따라서 첫번째 UTF-8 바이트는 ASCII에 대한 이전 호환성을 완전히 갖춘 문자 세트를 제공하는 ASCII 인코딩 용도로 사용합니다. UTF-8은 ASCII와 라틴 문자를 데이터의 크기를 크게 변화하지 않고도 상호 표현이 가능함을 의미하는데, 첫 번째 바이트만 활용하기 때문입니다. 상위 바이트 범위를 할당 받아 만족하지 않는 일본어권 사용자 같은 동방 문자 사용자들에게는 최대 50%의 데이터 중복을 취하게 되었습니다. 

== 문자 인코딩 ==

=== 문자 인코딩이란 무엇인가요? ===

컴퓨터는 인쇄한 텍스트를 자체적으로 사람이 이해하는 것처럼 이해하지 못합니다. 컴퓨터는 모든 텍스트의 문자를 숫자로 표현합니다. 옛부터 각 숫자 모음은 알파벳과 문자를 표현하는데 사용했습니다(코딩 시스템, 인코딩, 문자세트로 알려짐)만 컴퓨터 하드웨어의 제한으로, 크기의 제한을 받았습니다. 

=== 문자 인코딩 역사 ===

가장 일반적(또는 최소한 광범위하게 수용해온) 문자세트는 '''ASCII'''(정보 교환용 미 표준 코드)였습니다. 지금껏 만들어온 소프트웨어 표준에 있어 가장 성공적으로 이끌어온 ASCII야 말로 광범위하게 사용했습니다. 최신 ASCII는 1986년도에 미 국립 표준 협회에서 표준으로 제정(ANSI X3.4, RFC 20, ISO/IEC 646:1991, ECMA-6) 했습니다. 

ASCII는 7비트로 엄격하게 제한되었으며, 표현 가능한 7개의 이진수로 비트 패턴을 사용함을 의미하는데, 10진수로는 0부터 127까지의 범위를 제공합니다. 여기에는 32개의 보이지 않는 제어 문자가 있는데, 0부터 31까지의 범위에 있으며, 마지막 제어 문자는 DEL또는 delete이며, 이 제어문자는 127번에 할당되어 있습니다. 32번 부터 126번 까지는 공백 문자, 문장 부호, 라틴 문자, 숫자와 같은 눈에 보이는 문자로 구성되어 있습니다. 

ASCII의 8번째 비트는 본디 오류 검출을 위한 패리티 비트로 활용했습니다. 오류 검사를 고려하지 않으면 0으로 그대로 둡니다. ASCII에서 각 문자를 단일 바이트로 표현했음을 의미합니다. 

ASCII를 최근의 영문 의사소통을 하는데는 충분했었지만, 강세부호가 들어간 문자가 있는 다른 유럽어권의 문자에 대해서는 그렇지 않았습니다. 이런 필요성 때문에 ISO 8859 표준을 개발했습니다. ASCII와의 이전 호환성을 유지했지만 8번째 비트를 빈 채로 내버려두는 대신에 각 인코딩 주소에 다른 127개의 문자를 넣도록 했습니다. ISO 8859의 한계는 곧 다가왔고, 현재 ISO 8859 표준의 15가지 변형 표준이 있습니다. 이러한 문자 세트의 ASCII 호환 바이트 범위밖에서는 각 바이트로 표현하는 문자간의 충돌이 종종 일어났습니다. 문자 인코딩간 상호 처리를 좀 더 복잡하게 처리하기 위해 일부 마이크로소프트 윈도우 버전에서는 서유럽어권에 대해 Windows-1252 표준을 사용했습니다. 이 표준은 ISO-8859-1의 상위 집합이지만 여러모로 다른 점이 있었습니다. 이 문자세트는 ASCII 호환성을 유지했습니다. 

일본어와 한국어 같은 언어를 대상으로 사용하는 EUC(확장 유닉스 코딩)와 같은 비 라틴어 계열 문자를 대상한 완전히 다른 단일 바이트 인코딩의 개발 필요성은, 이미 다른 운영체제에서 동일한 언어에 대해 Shift-JIS, ISO-2022-JP와 같은 다른 문자셋을 이미 사용하고 있는 상황에서 더욱 혼동감을 가져왔습니다. 키릴 자모를 보려는 사용자는 러시아와 불가리아에서 사용하는 KOI8-R, 우크라이나에서 사용하는 KOI8-U, 온전치 못한 ISO 8859-5, 보통 사용하던 Windows-1251 세트 중 하나를 선택해야 했습니다. 이들 대부분의 모든 문자세트는 ASCII와의 호환성을 깨뜨렸습니다. 비록 KOI8 인코딩에서는 라틴 문자 숫서대로 키릴 문자를 배치했다는 점에 주목할 수 있지만, 이 경우 8번째 비트는 제거되었으며, 텍스트는 대소문자가 뒤집힌 음역 상태로 ASCII 터미널에서 해석 가능했습니다. 

이러한 판단 추세가 상당한 혼동을 가져왔으며, 다중 언어 의사 소통에 있어 거의 완전하게 불가능했고, 특히 다른 문자에 대해서도 불가능했습니다. 이제 유니코드로 들어가보도록 하겠습니다. 

=== 유니코드가 무엇인가요? ===

유니코드는 기존 문자세트의 단일 비트 제한을 깨버렸습니다. 최대 1,114,112 문자를 표현하기 위해, 65536 코드 포인트의 17가지 "영역"을 활용합니다. "기본 다중 언어 영역" 또는 BMP로 알려진 첫 번째 영역에서는 사용자가 필요로 하는 모든 문자를 담고 있습니다. 대부분 유니코드가 16비트 문자 세트였다는 잘못된 가정을 낳았습니다. 

유니코드는 여러가지 다른 방식으로 대응을 수행하지만, 주로 가장 많이 사용하는 방식은 '''UTF'''(유니코드 변환 형식)와 '''UCS'''(유니버설 문자 세트) 방식입니다. UTF 다음의 숫자는, 하나의 유닛에 들어가는 비트 수를 나타내며, UCS 다음에 나타나는 숫자는 총 바이트 수를 나타냅니다. 가장 널리 활용하게 된 UTF-8 은 유니코드 내용을 있는 그대로의 8비트로 표현합니다. 그러니까, UTF-8이 이 문서의 제목입니다.

=== What UTF-8 can do ===

UTF-8 allows users to work in a standards-compliant and internationally accepted multilingual environment, with a comparatively low data redundancy. It is the preferred way for transmitting non-ASCII characters over the Internet, through Email, IRC, or almost any other medium. Despite this, many people regard UTF-8 in online communication as abusive. It is always best to be aware of the attitude towards UTF-8 in a specific channel, mailing list, or Usenet group before using ''non-ASCII'' UTF-8. 

== 젠투 리눅스에서 UTF-8 설정 ==

=== Finding or creating UTF-8 locales ===

Now that the principles behind Unicode have been laid out, get ready to start using UTF-8 locally!

For users interested in more knowledge further explanation can be found in the [[Localization/Guide|Gentoo Localization Guide]]. 

Next, the user needs to decide whether a UTF-8 locale is available for the language of choice, or whether one needs to be generated.

{{Cmd|locale -a {{!}} grep 'en_GB'|output=<pre>
en_GB
en_GB.UTF-8
</pre>
}}

From the output of the above command, look for a result with a suffix similar to <code>.UTF-8</code>. If there is no result with a similar suffix a UTF-8 compatible locale must be created. 

{{Note|Only execute the following code if the system does not have a UTF-8 locale available for the language of choice.}}

Replace "en_GB" with the desired locale setting:
{{RootCmd|localedef -i en_GB -f UTF-8 en_GB.UTF-8}}

Another way to include a UTF-8 locale is to add it to the {{Path|/etc/locale.gen}} file and generate necessary locales using the <tt>locale-gen</tt> command.  Locales will be written to the locale-archive  {{Path|/usr/lib/locale/locale-archive}}.

{{CodeBox|title=Line in /etc/locale.gen|1=
en_GB.UTF-8 UTF-8
}}

{{RootCmd|locale-gen|output=<pre>
 * Generating 1 locales (this might take a while) with 1 jobs
 *  (1/1) Generating en_GB.UTF-8 ...                            [ ok ]
 * Generation complete
</pre>}}

=== Setting the locale ===

There is one environment variable that needs to be set in order to use the new UTF-8 locales: <code>LC_CTYPE</code> (optionally modify the <code>LANG</code> variable to change the system language as well). There are also many different ways to set it; some system administrators prefer to only have a UTF-8 environment for a specific user, in which case they set them in their {{Path|~/.profile}} (<tt>/bin/sh</tt> for Bourne shell users), {{Path|~/.bash_profile}} or {{Path|~/.bashrc}} (<tt>/bin/bash</tt> for Bourne again shell users). More details and best practices can be found in the [[Localization/Guide|Localization Guide]]. 

Still others prefer to set the locale globally. One specific circumstance where the author particularly recommends doing this is when {{Path|/etc/init.d/xdm}} is in use, because this init script starts the display manager and desktop before any of the aforementioned shell startup files are sourced. In other words, this is performed before any of the variables are loaded in the environment. 

Setting the locale globally should be done using {{Path|/etc/env.d/02locale}} file. This file should look something like the following: 

{{CodeBox|title=Demonstration /etc/env.d/02locale|lang=bash|1=
## (As always, change "en_GB.UTF-8" to the appropriate locale)
LANG="en_GB.UTF-8"
}}

{{Note|It is possible to substitute <code>LC_CTYPE</code> for <code>LANG</code>. For more information on the categories affected by using <code>LC_CTYPE</code> read the [http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html#Locale-Categories GNU locale page].}}

다음, 바뀐 내용으로 환경을 업데이트해야 합니다. 

{{RootCmd|env-update|output=<pre>
>>> Regenerating /etc/ld.so.cache...
 * Caching service dependencies ...
</pre>}}
{{RootCmd|source /etc/profile}}

Now, run <tt>locale</tt> with no arguments to see if the correct variables have been loaded in the environment: 

{{RootCmd|locale|output=<pre>
LANG=en_GB.UTF-8
LC_CTYPE="en_GB.UTF-8"
LC_NUMERIC="en_GB.UTF-8"
LC_TIME="en_GB.UTF-8"
LC_COLLATE="en_GB.UTF-8"
LC_MONETARY="en_GB.UTF-8"
LC_MESSAGES="en_GB.UTF-8"
LC_PAPER="en_GB.UTF-8"
LC_NAME="en_GB.UTF-8"
LC_ADDRESS="en_GB.UTF-8"
LC_TELEPHONE="en_GB.UTF-8"
LC_MEASUREMENT="en_GB.UTF-8"
LC_IDENTIFICATION="en_GB.UTF-8"
LC_ALL=
</pre>
}}

===Alternatively, using eselect to set locales ===
Although it is good to maintain the system as described above, it is possible to verify the correct locale configured using the <tt>eselect</tt> utility.

Use <tt>eselect</tt> to list the available locales on the system:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX *
  [3] en_GB.utf8
  [ ] (free form)
</pre>
}}

Using <tt>eselect</tt> setting the locale is as simple as listing them. Once the correct locale has been determined invoke:

{{RootCmd|eselect locale set 3 |output=<pre>
Setting LANG to en_GB.utf8 ...
</pre>
}}

Check the result:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8 *
  [ ] (free form)
</pre>
}}

In case it is preferred to have {{Path|/etc/env.d/02locale}} with <code>.UTF-8</code> instead of <code>.utf8</code>, run the appropriate <tt>eselect</tt> command:

{{RootCmd|eselect locale set en_GB.UTF-8 |output=<pre>
Setting LANG to en_GB.UTF-8 ...
</pre>
}}

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8
  [4] en_GB.UTF-8 *
  [ ] (free form)
</pre>
}}

Running the following command will update the variables in the shell:

{{RootCmd|env-update && source /etc/profile |output=<pre>
>>> Regenerating /etc/ld.so.cache...
</pre>
}}

That is everything. The system is now using UTF-8 locales. The next hurdle is the configuration of the applications used from day to day.

== Application support ==

When Unicode first started gaining momentum in the software world, multibyte character sets were not well suited to languages like C, which is the base language of most commonly used programs. Even today, some programs are not able to handle UTF-8 properly. Fortunately the majority of programs, especially the common ones, are supported. 

=== 파일 이름, NTFS, FAT ===

There are several NLS options in the Linux kernel configuration menu, but it is important to not become confused. For the most part, the only thing that needs to be done is to build UTF-8 NLS support into the kernel, and change the default NLS option to utf8. 

{{KernelBox|title=Kernel configuration steps for UTF-8 NLS|<pre>
File Systems -->
  Native Language Support -->
    (utf8) Default NLS Option
    <*> NLS UTF8
    ## (Also <*> other character sets that are in use in the system's FAT filesystems or Joilet CD-ROMs.)
</pre>
}}

When planning to mount NTFS partitions, users may need to specify a <code>nls=</code> option with mount. When planning on mounting FAT partitions, users may need to specify a <code>codepage=</code> option with mount. Optionally, users can also set a default codepage for FAT in the kernel configuration.

{{Note|Using the <code>codepage</code> option via the <tt>mount</tt> will override the settings used in the kernel.}}

{{KernelBox|title=FAT settings in kernel configuration|<pre>
File Systems -->
  DOS/FAT/NT Filesystems  -->
    (437) Default codepage for fat
</pre>
}}

Avoid setting <code>Default iocharset for fat</code> to UTF-8; it is not recommended. Instead, pass the <code>utf8=true</code> option when mounting FAT partitions. For further information <tt>man mount</tt> or see the appropriate kernel documentation at {{Path|/usr/src/linux/Documentation/filesystems/vfat.txt}}

파일 이름 인코딩을 바꾸려면 {{Package|app-text/convmv}} 패키지를 사용할 수 있습니다. 

{{Emerge|app-text/convmv}}

The format of the <tt>convmv</tt> command is as follows:

{{RootCmd|convmv -f <current-encoding> -t utf-8 <filename>}}

Substitute iso-8859-1 with the charset being converted from:

{{RootCmd|convmv -f iso-8859-1 -t utf-8 filename}}

For changing the ''contents'' of files, use the <tt>iconv</tt> utility, it comes bundled with {{Package|sys-libs/glibc}} and should be installed on all Gentoo systems. Substitute iso-8859-1 with the charset being converted from. After running the command be sure to check for sane output:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 filename}}

To convert a file, another file must be created:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 filename > newfile}}

The recode ({{Package|app-text/recode}}) package can also be used for this purpose.

=== The system console ===

{{Important|The {{Package|sys-apps/baselayout}}-1.11.9 (or higher) package is needed for Unicode on the console.}}

To enable UTF-8 on the console edit {{Path|/etc/rc.conf}} Set <code>unicode="yes"</code> and read the comments -- it is important to have a font that has a good range of characters to make the most of Unicode. For this to work make sure the Unicode locale has been properly created. 

{{Path|/etc/conf.d/keymaps}}에 설정한 <code>keymap</code> 변수에서, Unicode 키 맵을 지정해야합니다. 

{{CodeBox|title=Example /etc/conf.d/keymaps snippet|lang=bash|1=
## (Change "uk" to the right local layout)
keymap="uk"
}}

=== ncueses 와 slang ===

{{Note|Ignore any mention of Slang in this section if it is not installed or unneeded.}}

It is wise to add <code>unicode</code> to the global USE flags in {{Path|/etc/portage/make.conf}}, and then to re-emerge {{Package|sys-libs/ncurses}} and {{Package|sys-libs/slang}}. Portage will do this automatically if the <code>--changed-use</code> or <code>--newuse</code> options are used. Run the following command to pull in the packages: 

{{RootCmd|emerge --update --deep --newuse world}}

이들 설정을 연결하려 꾸러미를 다시 빌드해야 하므로 이제 바꾼 USE 설정을 적용하겠습니다. 우리가 사용할 도구(<code>revdep-rebuild</code>)는 {{Package|app-portage/gentoolkit}} 꾸러미에 있습니다. 

{{RootCmd|revdep-rebuild --soname libncurses.so.5
|revdep-rebuild --soname libslang.so.1}}

=== KDE, 그놈, Xfce ===

모든 주요 데스크톱 환경은 완전한 유니코드 지원 기능을 제공하며, 이 안내서에서 이미 다룬 더 이상의 설정이 필요하지 않습니다. 왜냐면 근본적인 그래픽 툴-키트(Qt 또는 GTK+2)는 UTF-8을 인식하기 떄문입니다. 그 다음에는 이 툴키트 위에서 동작하는 모든 프로그램은 특별히 UTF-8을 인지해야 합니다. 

On GTK+ based applications, the key sequence for hexadecimal Unicode input is <kbd>Ctrl-Shift-u<hex digit></kbd>.

Xlib와 GTK+1 활용시 별도의 고려사항이 있습니다. GTK+1에서는 ~/.gtkrc에 iso-10646-1 FontSpec이 필요한데, <code>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</code>를 예로 들 수 있습니다. 또한 Xlib나 Xaw를 활용하는 프로그램은 동일한 FontSpec이 필요한데, 이 요건을 충족하지 않으면 동작하지 않습니다. 

{{Note|If an old gnome1 control center version is available, use that instead. Pick any iso10646-1 font from there.}}

{{CodeBox|title=Example ~/.gtkrc (for GTK+1) that defines a Unicode compatible font|1=
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
}}

프로그램에서 Qt와 GTK+2 GUI를 지원한다면, 보통 GTK+2 GUI가 유니코드를 더 잘 지원합니다.

=== X11 and fonts ===

TrueType fonts have support for Unicode, and most of the fonts that ship with Xorg have extensive character support, although, obviously, not every single glyph available in Unicode has been created for that font. 

Also, many font packages in Portage are Unicode aware. See the [[Fontconfig]] page for more information on recommended fonts and configuration.

=== Window managers and terminal emulators ===

Window managers not built on GTK+ or Qt generally have very good Unicode support, as they often use the Xft library for handling fonts. If the window manager does not use Xft for fonts, then it is still possible to use the FontSpec mentioned in the previous section as a Unicode font. 

Xft를 사용하며 유니코드를 지원하는 터미널 에뮬레이터는 좀처럼 찾아보기 쉽지 않습니다. Konsole과 gnome-terminal 이외에 포티지에서 선택할 수 있는 최상의 선택지는,  {{Package|x11-terms/rxvt-unicode}}, {{Package|x11-terms/xfce4-terminal}}, {{Package|gnustep-apps/terminal}}, {{Package|x11-terms/mlterm}}, 또는 <code>unicode</code> USE 플래그를 사용할 때 uxterm으로 실행하는 {{Package|x11-terms/xterm}} 입니다.{{Package|app-misc/screen}}에서는 <code>screen -U</code> 또는 {{Path|~/.screenrc}}에 다음 명령을 넣었을 때 UTF-8을 지원합니다: 

{{CodeBox|title=~/.screenrc for UTF-8|1=
defutf8 on
}}

=== Vim, emacs, xemacs and nano ===

[[Vim#Change_file_encoding|Vim]] provides full UTF-8 support, and also has builtin detection of UTF-8 files. For further information in [[Vim#Change_file_encoding|Vim]], use <code>:help mbyte.txt</code> . 

[[GNU Emacs]]<sup style="color:#ff0077">en</sup>은 버전 23부터, [[XEmacs]]<sup style="color:#ff0077">en</sup>은 버전 21.5부터 UTF-8을 완벽하게 지원합니다. GNU  Emacs 24 에서도 양방향성 텍스트 편집을 지원합니다: 

nano는 1.3.6부터 UTF-8을 완벽하게 지원합니다.

=== 쉘 ===

Currently, <code>bash</code> provides full Unicode support through the GNU readline library. Z Shell (<tt>zsh</tt>) offers Unicode support with the <code>unicode</code> USE flag. 

The C shell, <tt>tcsh</tt> and <tt>ksh</tt> do not provide UTF-8 support at all.

=== Irssi ===

Irssi는 사용자가 옵션을 별도로 설정해야 하지만 UTF-8을 완벽하게 지원합니다. 

{{Cmd|set term_charset UTF-8|prompt=[irssi] }}

비 UTF-8 문자 세트로 비 ASCII 문자를 자주 주고받는 채널이라면, 문자를 변환할때 <code>/recode</code> 명령을 사용하십시오. 더 많은 내용은 <code>/help recode</code>를 입력하십시오. 

=== Mutt ===

The Mutt mail user agent has very good Unicode support. To use UTF-8 with Mutt, nothing needs to be put in the configuration files. Mutt will work under Unicode environment without modification if all the configuration files (signature included) are UTF-8 encoded. 

{{Note|It is still possible to see '?' in mails read with Mutt. This is a result of people using a mail client which does not indicate the used charset. There is little one can do about this than to ask them to configure their client correctly.}}

더 많은 내용은 [http://wiki.mutt.org/index.cgi?MuttFaq/Charset Mutt 위키]<sup style="color:#ff0077">en</sup>에 있습니다. 

=== Man ===

Man pages are an integral part of any Linux machine. To ensure that any unicode in the man pages render correctly, edit {{Path|/etc/man.conf}} and replace a line as shown below. 

{{CodeBox|title=man.conf changes for Unicode support|1=
## (This is the old line)
NROFF           /usr/bin/nroff -Tascii -c -mandoc
## (Replace the one above with this)
NROFF           /usr/bin/nroff -mandoc -c
}}

=== links and elinks ===

These are commonly used text-based browsers, and we shall see how we can enable UTF-8 support on them. On <tt>elinks</tt> and <tt>links</tt>, there are two ways to go about this, one using the Setup option from within the browser or editing the config file. To set the option through the browser, open a site with <tt>elinks</tt> or <tt>links</tt> and then {{Key|Alt}}+{{Key|S}} to enter the Setup Menu then select Terminal options, or press {{Key|T}}. Scroll down and select the last option <code>UTF-8 I/O</code> by pressing {{Key|Enter}}. Then Save and exit the menu. On <tt>links</tt> one may have to do a repeat {{Key|Alt}}+{{Key|S}} and then press {{Key|S}} to save. The config file option, is shown below. 

{{CodeBox|title=Enabling UTF-8 for elinks/links|1=
## (For elinks, edit /etc/elinks/elinks.conf or ~/.elinks/elinks.conf and
add the following line)
set terminal.linux.utf_8_io = 1

## (For links, edit ~/.links/links.cfg and add the following
line)
terminal "xterm" 0 1 0 us-ascii utf-8
}}

=== Samba ===

삼바는 Mac, 리눅스, FreeBSD와 같은 UNIX 시스템에서 SMB(서버 메시지 블록) 프로토콜을 구현한 소프트웨어 모음입니다. 이 프로토콜은 일반 인터넷 파일 시스템(CIFS)처럼 참고하기도 합니다. 삼바에는 윈도우 네트워크 파일 공유에 사용하는 NetBIOS 시스템도 있습니다. 

다음 내용을 [global] 섹션에 추가하십시오:
{{RootCmd|nano -w /etc/samba/smb.conf|output=<pre>
dos charset = 1255
unix charset = UTF-8
display charset = UTF-8
</pre>
}}

=== 전체 시험하기 ===

UTF-8을 시험해볼 수 있는 웹사이트는 여러군데에 있습니다. {{Package|net-www/w3m}}, {{Package|net-www/links}}, {{Package|net-www/elinks}}, {{Package|net-www/lynx}}, 모질라 기반 브라우저(Firefox 포함)에서 UTF-8을 지원합니다. Konqueror 와 Opera도 역시 마찬가지로 UTF-8을 완벽하게 지원합니다. 

When using one of the text-only web browsers, make absolutely sure a Unicode-aware terminal is used.

If certain characters are displayed as boxes with letters or numbers inside, then the current font does not have a character for the symbol or glyph that the UTF-8 wants. Instead, it displays a box with the hex code of the UTF-8 symbol. 

* [http://unicode-table.com/en/blocks/dingbats/ unicode-table.com]
* [http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html A W3C UTF-8 Test Page] 
* [http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm A UTF-8 test page provided by the University of Frankfurt]

=== Input methods ===

''Dead keys'' may be used to input characters in X that are not included on the keyboard. These work by pressing the right {{Key|Alt}} key (or in some countries, {{Key|AltGr}}) and an optional key from the non-alphabetical section of the keyboard to the left of the return key at once, releasing them, and then pressing a letter. The dead key should modify it. Input can be further modified by using the {{Key|Shift}} key at the same time as pressing the {{Key|AltGr}} and modifier. 

To enable dead keys in X, a layout needs to be selected that supports it. Most European layouts already have dead keys with the default variant. However, this is not true of North American layouts. Although there is a degree of inconsistency between layouts, the easiest solution seems to be to use a layout in the form "en_US" rather than "us", for example. The layout is set in {{Path|/etc/X11/xorg.conf}} like so: 

{{CodeBox|title=/etc/X11/xorg.conf snippet|lang=xorg_conf|1=
Section "InputDevice"
    Identifier "Keyboard0"
    Driver     "kbd"
    Option     "XkbLayout" "en_US" ## # Rather than just "us"
    ## (Other Xkb options here)
EndSection
}}

{{Note|The preceding change only needs to be applied when using a North American layout, or another layout where dead keys do not seem to be working. European users should have working dead keys as is.}}

This change will come into effect when the X server is restarted. To apply the change now, use the <tt>setxkbmap</tt> tool, for example, <tt>setxkbmap en_US</tt> . 

It is probably easiest to describe dead keys with examples. Although the results are locale dependent, the concepts should remain the same regardless of locale. The examples contain UTF-8, so to view them tell the browser to view the page as UTF-8, or have a UTF-8 locale already configured. 

When I press {{Key|AltGr}} and {{Key|[}} at once, release them, and then press {{Key|a}}, 'ä' is produced. When I press {{Key|AltGr}} and {{Key|[}} at once, and then press {{Key|e}}, 'ë' is produced. When I press {{Key|AltGr}} and {{Key|;}} at once, and then press {{Key|a}}, 'á' is produced, and when I press {{Key|AltGr}} and {{Key|;}} at once, release them, and then press {{Key|e}}, 'é' is produced. 

By pressing {{Key|AltGr}}, {{Key|Shift}} and {{Key|[}} at once, releasing them, and then pressing {{Key|a}}, a Scandinavian 'å' is produced. Similarly, when I press {{Key|AltGr}}, {{Key|Shift}} and {{Key|[}} at once, release ''only'' the {{Key|[}}, and then press it again, '°' is produced. Although it looks like one, this (U+02DA) is not the same as a degree symbol (U+00B0).

{{Key|AltGr}} can be used with alphabetical keys alone. For example, {{Key|AltGr}} and {{Key|m}}, a Greek lower-case letter mu is produced. {{Key|AltGr}} and {{Key|s}} produce a scharfes s or esszet, etc. As many European users would expect (because it is marked on their keyboard), {{Key|AltGr}} and {{Key|4}} (or {{Key|E}} depending on the keyboard layout) produces a Euro sign, '€'.

=== External resources ===

* [https://en.wikipedia.org/wiki/Unicode The Wikipedia entry for Unicode] 
* [https://en.wikipedia.org/wiki/UTF-8 The Wikipedia entry for UTF-8] 
* [http://www.unicode.org Unicode.org] 
* [http://www.utf-8.com UTF-8.com] 
* [http://www.ietf.org/rfc/rfc3629.txt RFC 3629] 
* [http://www.ietf.org/rfc/rfc2277.txt RFC 2277] 
* [http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF Characters vs. Bytes]
* [http://www.gnu.org/software/libc/manual/html_node/Locales.html Locales and Internationalization]

== Reported issues and problems ==

=== System configuration files (in /etc) ===

Most system configuration files (such as {{Path|/etc/fstab}}) do not support UTF-8. It is recommended to stick with the ASCII character set for these files.

[[Category:Localization]] {{Migrated|originalauthors=Thomas Martin, Alexander Simonov, Shyam Mani, nightmorph}}
