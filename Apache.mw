<languages />
<translate>

<!--T:67-->
{{Metadata|abstract=The Apache HTTP Server is an efficient and extensible web server and one of the most popular ones used on the Internet.}}

<!--T:1-->
{{InfoBox stack
|{{InfoBox homepage|http://httpd.apache.org|header=true}}
|{{InfoBox wikipedia|Apache HTTP Server}}
|
}}

<!--T:2-->
The '''Apache HTTP Server''' is an efficient and extensible [[:Category:Web Servers|web server]] and one of the most popular ones used the Internet.

== Installation == <!--T:3-->

<!--T:4-->
{{Note|If you're only updating, check the [http://www.gentoo.org/proj/en/apache/doc/upgrading.xml upgrading guide].}}

<!--T:5-->
{{Emerge|{{Package|www-servers/apache}}}}

=== USE flags === <!--T:6-->

<!--T:7-->
{{USEflag|package=www-servers/apache
|debug
|doc
|ldap
|ssl+yes
|static
|suexec
|threads
|APACHE2_MODULES+++See {{Path|[http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/profiles/desc/apache2_modules.desc /usr/portage/profiles/desc/apache2_modules.desc]}}. Enable in your {{Path|make.conf}}.
|APACHE2_MPMS+++See {{Path|[http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/profiles/desc/apache2_mpms.desc /usr/portage/profiles/desc/apache2_mpms.desc]}}. Enable in your {{Path|make.conf}}.
}}

=== Support in other packages === <!--T:8-->

<!--T:9-->
There is a global USE flag <code>apache2</code> which enables support for Apache in other packages. This may cause {{Package|www-servers/apache}} to be pulled in automatically if such packages are used.
{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
USE="... apache2 ..."
}}

<!--T:10-->
After configuring the <code>USE</code> variable, update the system so the changes take effect:

<!--T:11-->
{{Emerge|params+=--changed-use --deep|@world}}

== Launching and restarting == <!--T:12-->

=== OpenRC === <!--T:68-->

<!--T:13-->
Start the Apache server:

<!--T:14-->
{{RootCmd|/etc/init.d/apache2 start}}

<!--T:15-->
Add Apache to the default runlevel:

<!--T:16-->
{{RootCmd|rc-update add apache2 default}}

<!--T:17-->
Restart the Apache service:

<!--T:18-->
{{RootCmd|/etc/init.d/apache2 restart}}

<!--T:76-->
Reload Apache configuration files:

<!--T:77-->
{{RootCmd|/etc/init.d/apache2 reload}}

=== systemd === <!--T:69-->

<!--T:70-->
Start the Apache server:

<!--T:71-->
{{RootCmd|systemctl start apache2}}

<!--T:72-->
Add Apache to the default runlevel: 

<!--T:73-->
{{RootCmd|systemctl enable apache2}}

<!--T:74-->
Restart the Apache service: 

<!--T:75-->
{{RootCmd|systemctl restart apache2}}

== Testing == <!--T:19-->

<!--T:20-->
Verifying IP interfaces and ports on which Apache2 is running on and listening to:

<!--T:21-->
{{RootCmd|netstat -tulpen {{!}} grep apache|output=<pre>
tcp     0     0 0.0.0.0:80      0.0.0.0:*     LISTEN     0     10932720     4544/apache2        
tcp     0     0 0.0.0.0:443     0.0.0.0:*     LISTEN     0     10932716     4544/apache2        
</pre>}}

<!--T:22-->
Testing if a connection to a Apache server is working on localhost:

<!--T:23-->
{{Cmd|telnet localhost 80|output=<pre>
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
</pre>}}

<!--T:24-->
Interrupt the connection test with {{Key|Ctrl}}+{{Key|c}} and {{Key|Enter}}.

== Configuration == <!--T:25-->

=== Configuration files === <!--T:26-->

<!--T:27-->
There are 2 main files that configure Apache2's behavior on the system: 

<!--T:28-->
* Gentoo's Apache2 init script configuration file {{path|/etc/conf.d/apache2 }}

<!--T:29-->
* Apache2 server's conventional configuration file {{path|/etc/apache2/httpd.conf}}

==== Gentoo's init script configuration file ==== <!--T:30-->

<!--T:31-->
The only active line in this file is as followÂ :

<!--T:32-->
{{FileBox|filename=/etc/conf.d/apache2|lang=bash|1=
APACHE2_OPTS="-D DEFAULT_VHOST -D INFO -D SSL -D SSL_DEFAULT_VHOST -D LANGUAGE"
}}

<!--T:33-->
This line defines options that will be interpreted by the various configuration files using  the <code><IfDefine option-name></code> statement to activate or deactivate some part of the whole configuration. We will come back to this where appropriate in the rest of this guide.

==== Apache server's conventional configuration file - httpd.conf ==== <!--T:34-->

<!--T:35-->
In fact this file is only an '''entry point''' as the whole configuration is split in many files in the {{Path|/etc/apache2/}} directory, that are assembled  together using the <code>Include</code> directive. For example, the statement <code>Include /etc/apache2/modules.d/*.conf</code>, in {{Path|httpd.conf}}, aims at including all the files in {{Path|/etc/apache2/modules.d/}} which name ends with {{Path|.conf}}. 

<!--T:36-->
Taking into account what has been said in the subsection above, and as module configuration files (files in {{Path|/etc/apache2/modules.d}}) almost always start with the <code><IfDefine module-name></code>, the content of one file inside {{Path|/ect/apache2/modules.d}}, will ONLY be assembled with the rest of the configuration, if the matching option is set using a <code>-D module-name</code> flag in the APACHE2_OPTS variable in the {{Path|/etc/conf.d/apache2 }} file. The {{Path|00_default_settings.conf}} configuration file is an exception to this rule as it doesn't start with an <code>IfDefine</code> statement and therefore is always included in the resulting configuration.

=== Default configuration === <!--T:37-->

<!--T:38-->
After a fresh install of an Apache server, the configuration resulting from the assemblage of the different configuration files is as follows. We start with the entry point {{Path|/etc/apache2/httpd.conf}}.

<!--T:39-->
{{Warning| This is ''only'' given for quick reference and to give you an overall view. You are strongly invited to review the comments included in the various files to understand the ins and out of the configuration. Please also refer to the apache manual for an  in depth understanding.}}

<!--T:40-->
{{FileBox|filename=/etc/apache2/http.conf|lang=apache|1=
ServerRoot "/usr/lib64/apache2"
  
#Module loaded unconditionally, assuming the USE flag is no unset in
# /etc/portage/make.conf or in /etc/portage/package.use
LoadModule actions_modulemodules/mod_actions.so
...
#other modules loaded that way : alias_module, auth_basic_module, authn_alias_module,
# authn_anon_module, authn_dbm_module, authn_default_module, authn_file_module, 
# authz_dbm_module, authz_default_module, authz_groupfile_module, authz_host_module, 
# authz_owner_module, authz_user_module, autoindex_module,  cgi_module,  cgid_module, 
# deflate_module, dir_module, env_module, expires_module, ext_filter_module, filter_module,
#  headers_module, include_module,  log_config_module, logio_module, mime_module,  
# mime_magic_module, negotiation_module, rewrite_module, setenvif_module, 
# speling_module,ssl_module, status_module, unique_id_module, usertrack_module, host_alias_module
  
  
#Modules loaded conditionally, assuming matching USE flag is not unset in
# /etc/portage/make.conf or in /etc/portage/package.use (flag to be set in )
<IfDefine AUTHNZ_LDAP>
LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
</IfDefine>
#other modules loaded that way : cache_module, dav_module, dav_fs_module,
# dav_lock_module,disk_cache_module,  file_cache_module, info_module, ldap_module,
# mem_cache_module, userdir_module
  
  
User apache
Group apache
  
# Supplemental configuration
#**************************************************************************************vvv
#this part is included via Include /etc/apache2/modules.d/*.conf 
  
#included from /etc/apache2/modules.d/00_default_settings.conf-------------v
#this is always included as there is not option to deactivate it.
Timeout 300
KeepAlive On
MaxKeepAliveRequests 100
KeepAliveTimeout 15
UseCanonicalName Off
AccessFileName .htaccess
ServerTokens Prod
TraceEnable off
ServerSignature On 
HostnameLookups Off
EnableMMAP On
EnableSendfile On
FileEtag INode MTime Size
ContentDigest Off
ErrorLog /var/log/apache2/error_log
LogLevel warn
  
<Directory />
	Options FollowSymLinks
	AllowOverride None
	Order deny,allow
	Deny from all
</Directory>
  
<IfModule dir_module>
	DirectoryIndex index.html index.html.var
</IfModule>
<FilesMatch "^\.ht">
	Order allow,deny
	Deny from all
</FilesMatch>
#--------------------------------------------------------------------------^
  
#included from 00_mod_info.conf--------------------------------------------v
<IfDefine INFO>
<Location /server-info>
	SetHandler server-info
	Order deny,allow
	Deny from all
	Allow from 127.0.0.1
</Location>
</IfDefine>
#--------------------------------------------------------------------------^
  
#--------------------------------------------------------------------------v
#included from 00_languages.conf
# Settings for hosting different languages.
<IfDefine LANGUAGE>
  
	AddLanguage ca .ca
	...
	AddLanguage zh-TW .zh-tw
  
	LanguagePriority en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv zh-CN zh-TW
  
	ForceLanguagePriority Prefer Fallback
  
	AddCharset us-ascii.ascii	.us-ascii
	AddCharset <nowiki>ISO-8859-1		.iso8859-1 .latin1</nowiki>
	...
	AddCharset shift_jis		.shift_jis .sjis
</IfDefine>
#---------------------------------------------------------------------------^
#**************************************************************************************^^^
  
  
#***************************************************************************************vvv
#this part is included via Include /etc/apache2/vhosts.d/*.conf 
#from 00_default_ssl_vhost.conf-----------------------------------------------------vv
<IfDefine SSL>
	<IfDefine SSL_DEFAULT_VHOST>
		<IfModule ssl_module>
			Listen 443
  
			<VirtualHost _default_:443>
				ServerName localhost
                                #------------------------------------------v
				# this part is included via Include /etc/apache2/vhosts.d/default_vhost.include
				ServerAdmin root@localhost
				DocumentRoot "/var/www/localhost/htdocs"
  
  	
				<Directory "/var/www/localhost/htdocs">
	   				Options Indexes FollowSymLinks
	   				AllowOverride All
	   				Order allow,deny
	   				Allow from all
				</Directory>
  
				<IfModule alias_module>
	   				ScriptAlias /cgi-bin/ "/var/www/localhost/cgi-bin/"
				</IfModule>
  
				<Directory "/var/www/localhost/cgi-bin">
	   				AllowOverride None
	   				Options None
	   				Order allow,deny
	   				Allow from all
				</Directory>
        			#end of Include ---------------------------^
  	
				ErrorLog /var/log/apache2/ssl_error_log
  
				<IfModule log_config_module>
					TransferLog /var/log/apache2/ssl_access_log
				</IfModule>
				SSLEngine on
				SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
				SSLCertificateFile /etc/ssl/apache2/server.crt
				SSLCertificateKeyFile /etc/ssl/apache2/server.key
  
				<FilesMatch "\.(cgi{{!}}shtml{{!}}phtml{{!}}php)$">
					SSLOptions +StdEnvVars
				</FilesMatch>
  
				<Directory "/var/www/localhost/cgi-bin">
					SSLOptions +StdEnvVars
				</Directory>
  
				<IfModule setenvif_module>
					BrowserMatch ".*MSIE.*" \
					nokeepalive ssl-unclean-shutdown \
					downgrade-1.0 force-response-1.0
				</IfModule>
  
  
				<IfModule log_config_module>
					CustomLog /var/log/apache2/ssl_request_log \
					"%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
					</IfModule>
			</VirtualHost>
		</IfModule>
	</IfDefine>
</IfDefine>
#---------------------------------------------------------------------------------^^
#from 00_default_vhost.conf-------------------------------------------------------vv
<IfDefine DEFAULT_VHOST>
	Listen 80
	NameVirtualHost *:80
  
	<VirtualHost *:80>
		ServerName localhost
  
		#---------------------------------------------------------------v
		# this part is included via Include /etc/apache2/vhosts.d/default_vhost.include
		ServerAdmin root@localhost
		DocumentRoot "/var/www/localhost/htdocs"
  
  	
		<Directory "/var/www/localhost/htdocs">
	   		Options Indexes FollowSymLinks
	   		AllowOverride All
	   		Order allow,deny
	   		Allow from all
		</Directory>
  
		<IfModule alias_module>
	   		ScriptAlias /cgi-bin/ "/var/www/localhost/cgi-bin/"
		</IfModule>
  
		<Directory "/var/www/localhost/cgi-bin">
	   		AllowOverride None
	   		Options None
	   		Order allow,deny
	   		Allow from all
		</Directory>
        	#end of Include -----------------------------------------------^
  
		<IfModule mpm_peruser_module>
			ServerEnvironment apache apache
		</IfModule>
	</VirtualHost>
</IfDefine>
#-----------------------------------------------------------------------------------^^
# end of include ****************************************************************************************^^^
}}

=== First sign of life === <!--T:41-->

<!--T:42-->
As you can see in the initial configuration above, the  pre-installed virtual host's <code>DocumentRoot</code>  directory is {{Path|/var/www/localhost/htdocs}}, its server name is ''localhost''.  In addition an index.html file is provided in the <code>DocumentRoot</code> directory, thus to check whether everything is correctly installed or not, point your browser to [http://localhost/ http://localhost/].

<!--T:43-->
You should see an "It works !" message on the page.

<!--T:101-->
{{Warning| Out of the box, Firefox has a feature designed to help people mis-typing URLs in the browser bar. If a URL fails to resolve, Firefox tries a couple of alterations of the URL to try find what you -might have- really intended, appending a .com and/or prefixing a www. to the host name portion of the URL to see if they resolve.
 
This feature, which was introduced  in the early versions of Firefox, is somewhat annoying for developers. The feature means that  when a server running on localhost fails to respond, Firefox decides to try localhost.com and/or www.localhost.com and you could end to a not found page.
 
 
To disable this âfeatureâ do the following:
 
# Enter <tt>about:config</tt> in the browser bar
# Enter <tt>browser.fixup.alternate.enabled</tt> in the search box that appears
# Right click on the <tt>browser.fixup.alternate.enabled</tt> that appears in the filtered list below and choose Toggle to set the value to false.
}}

=== Enabling Security Module === <!--T:44-->

<!--T:45-->
{{emerge|mod_security}}

<!--T:46-->
{{FileBox|filename=/etc/conf.d/apache2|lang=bash|1=
APACHE2_OPTS="... -D SECURITY"
}}

<!--T:47-->
Control this module by editing {{Path|/etc/apache2/modules.d/79_modsecurity.conf}} and {{Path|/etc/apache2/modules.d/80_modsecurity-crs.conf}} and restarting apache.

=== Enabling PHP support === <!--T:48-->

<!--T:49-->
Install [[PHP]] with the <code>apache2</code> USE flag and enable the module:

<!--T:50-->
{{FileBox|filename=/etc/conf.d/apache2|lang=bash|1=
APACHE2_OPTS="... -D PHP5"
}}

<!--T:98-->
Before testing if the PHP module works, check that the file {{Path|/etc/apache2/modules.d/70_mod_php5.conf}} exists and contains the following definition:

<!--T:99-->
{{FileBox|filename=/etc/apache2/modules.d/70_mod_php5.conf|lang=apache|1=
<IfDefine PHP5> 
        # Load the module first 
        <IfModule !mod_php5.c> 
                LoadModule php5_module    modules/libphp5.so 
        </IfModule> 
  
        # Set it to handle the files 
        <IfModule mod_mime.c> 
                AddHandler application/x-httpd-php .php .php5 .phtml 
                AddHandler application/x-httpd-php-source .phps 
        </IfModule> 
  
        DirectoryIndex index.php index.phtml 
</IfDefine>
}}

<!--T:100-->
If it doesn't exist create it yourself.

<!--T:51-->
To test if the PHP module works, create a test page:

<!--T:52-->
{{FileBox|filename=/var/www/localhost/htdocs/index.php|lang=php|1=
<html>
 <body>
  <?php phpinfo(); ?>
 </body>
</html>
}}

<!--T:53-->
Now, suppress or rename {{Path|/var/www/localhost/htdocs/index.html}} and open the test page: http://localhost/. You should see a table describing the PHP settings

=== Adding your own virtual hosts === <!--T:54-->

<!--T:78-->
For each virtual host, provide a <code>DocumentRoot</code> directory that is reachable and accessible by the Apache daemon. Add a virtual host configuration file ({{Path|myVirtualHost.conf}}) in the {{Path|/etc/apache2/vhosts.d}} directory which uses this <code>DocumentRoot</code> and the virtual host server name, and don't forget to add an entry for this domain name in {{Path|/etc/hosts}}.

<!--T:79-->
To assign the apache user/group ownership on the virtual host files, use <kbd>chown</kbd> like in the following example:

<!--T:80-->
{{RootCmd|chown apache:apache /var/www/sitename}}

<!--T:81-->
Below are two example virtual host definitions, one for domainname1.com and one for domainname2.com. Notice the different <code>DocumentRoot</code> and <code>ServerName</code> directives even though the host itself (<code>*:80</code>) remains the same:

<!--T:82-->
{{CodeBox|title=Example virtual host definitions|lang=apache|1=
<VirtualHost *:80>
    ServerAdmin email@site.com
    DocumentRoot /var/www/website1
    ServerName domainname1.com
</VirtualHost>
  
<VirtualHost *:80>
    ServerAdmin email@site.com
    DocumentRoot /var/www/website2
    ServerName domainname2.com
</VirtualHost>
}}

<!--T:83-->
It is recommended to provide an IP based virtual host definition as well. This allows the administrator to put up a message for users that try to reach a site through its IP address:

<!--T:84-->
{{CodeBox|title=IP-based virtual host|lang=apache|1=
<VirtualHost *:80>
    ServerAdmin email@site.com
    DocumentRoot /var/www/html
    ServerName xxx.xxx.xxx.xxx
</VirtualHost>
}}

<!--T:85-->
After inserting virtual hosts, the server needs to be (gracefully) restarted for the new sites to become active.

=== Enabling PHP through fcgid === <!--T:86-->

<!--T:87-->
Install {{Package|www-apache/mod_fcgid}} and {{Package|dev-lang/php}}. The PHP package requires <code>cgi</code> to be set as a USE flag:

<!--T:88-->
{{emerge|mod_fcgid php}}

<!--T:89-->
Edit the {{Path|mod_fcgid.conf}} file:

<!--T:90-->
{{FileBox|filename=/etc/apache2/modules.d/20_mod_fcgid.conf|lang=apache|1=
<IfDefine FCGID>
LoadModule fcgid_module modules/mod_fcgid.so
SocketPath /var/run/fcgidsock
SharememPath /var/run/fcgid_shm
  
AddHandler php-fcgid .php
AddType application/x-httpd-php .php
Action php-fcgid /fcgid-bin/php-fcgid-wrapper
# max request 128mb
FcgidMaxRequestLen 134217728
<Location /fcgid-bin/>
        SetHandler fcgid-script
        Options +ExecCGI
</Location>
</IfDefine>
}}

<!--T:91-->
Create the needed directory: 

<!--T:92-->
{{RootCmd|mkdir /var/www/localhost/htdocs/fcgid-bin}}

<!--T:93-->
Symlink it for the PHP wrapper:

<!--T:94-->
{{RootCmd|ln -s /usr/bin/php-cgi /var/www/localhost/htdocs/fcgid-bin/php-fcgid-wrapper}}

<!--T:95-->
Enable the fcgid module:

<!--T:96-->
{{FileBox|filename=/etc/conf.d/apache2|lang=bash|1=
APACHE2_OPTS="... -D FCGID"
}}

<!--T:97-->
Finally restart Apache and check the <code>phpinfo()</code> site created earlier. The value of <code>Server API</code> should be ''CGI/FastCGI''

=== Enabling PHP-FPM through mod_proxy_fcgi in Apache 2.4 === <!--T:102-->

<!--T:103-->
With PHP 5.3 and above, PHP supports an additional mode, FastCGI Process Manager, or FPM.

<!--T:104-->
The following method relies on the FilesMatch directive and be placed within the main server config or VirtualHosts.  The location of the UNIX socket is determined by the listen directive in the {{Path|php-fpm.conf}}, allowing for specifying separate pools per site/function.

<!--T:105-->
In the following example, it is placed within the PHP module config file.:

<!--T:106-->
{{FileBox|filename=/etc/conf.d/70_mod_php5.conf|title=Using PHP-FPM|lang=apache|1=
 <IfDefine PHP5>
        <FilesMatch "\.php$">
                SetHandler "proxy:unix:///var/run/php-fpm/www.sock{{!}}fcgi://localhost/"
        </FilesMatch>
  
	# Set it to handle the files
	<IfModule mod_mime.c>
		AddHandler application/x-httpd-php .php .php5 .phtml
		AddHandler application/x-httpd-php-source .phps
	</IfModule>
  
	DirectoryIndex index.php index.phtml
 </IfDefine>
}}

<!--T:108-->
Then enable both the PHP and proxy modules:

<!--T:109-->
{{FileBox|filename=/etc/conf.d/apache2|title=Enabling PHP and proxy modules|lang=bash|1=
APACHE2_OPTS="... -D PHP5 -D PROXY"
}}

== Troubleshooting == <!--T:57-->

<!--T:58-->
* [http://www.gentoo.org/proj/en/apache/doc/troubleshooting.xml Troubleshooting guide]
* {{Bug|www-servers/apache|search=package}}

=== Common Issues === <!--T:59-->
When starting apache, you might get the following error:

<!--T:60-->
<pre>apache2: apr_sockaddr_info_get() failed for SomeHostname</pre>

<!--T:61-->
When this occurs, add your host name to the {{Path|/etc/hosts}} file.

<!--T:62-->
{{FileBox|filename=/etc/hosts|1=
127.0.0.1 localhost SomeHostname
}}

== See also == <!--T:63-->

<!--T:64-->
* [[Lighttpd]] - a fast, lightweight web server.
* [[Nginx]] - a small, robust and high-performance HTTP server

== External resources == <!--T:65-->

<!--T:66-->
* [http://articles.slicehost.com/2010/12/2/installing-apache-on-gentoo Slicehost article: Installing Apache on Gentoo]
* [http://articles.slicehost.com/2010/12/3/apache-configuration-files-on-gentoo Slicehost article: Apache configuration files on Gentoo]
* [http://articles.slicehost.com/2010/12/3/configuring-the-apache-mpm-on-gentoo Slicehost article: Configuring the Apache MPM on Gentoo]
* [http://articles.slicehost.com/2010/12/3/apache-configuration-on-gentoo-part-1 Slicehost article: Apache configuration on Gentoo]
* [http://articles.slicehost.com/2010/12/3/apache-virtual-hosts-on-gentoo-part-1 Slicehost article: Apache Virtual Hosts on Gentoo]
* [http://articles.slicehost.com/2010/12/3/enabling-and-using-apache-s-mod_status-on-gentoo Slicehost article: Enabling and using apache's mod_status on Gentoo]
* [http://httpd.apache.org/docs/ apache.org documentation]
* [http://gentoo-en.vfose.ru/wiki/Apache2_mod_pagespeed Apache2 mod_pagespeed]

</translate>

[[Category:Web Servers]]
