{{InfoBox stack
|{{InfoBox homepage|http://www.winehq.org|header=true}}
|{{InfoBox wikipedia|Wine (software)}}
|{{InfoBox gitweb|http://source.winehq.org/git/wine.git/|raw=true}}
|{{InfoBox github|wine-mirror/wine}}
}}

'''Wine''' ('''W'''ine '''I'''s '''N'''ot an '''E'''mulator) is an application that allows Windows software to run on Linux. This article deals with installing, configuring, and maintaining a general purpose Wine environment on Gentoo.

== Installation ==

=== USE flags ===

It is likely for many users to desire Wine to support as much media as possible, in these cases be sure to enable the related flags.

{{USEflag|package=app-emulation/wine}}

=== Environmental Variables ===

Traditionally, live ebuilds support setting the repository commit as an environmental variable.  This poses some issues with an ebuild that has multiple upstream repositories.  To work around this issue, Wine's live ebuilds support 3 environmental variables for individually configuring the commit that each repository checks out.  The WineHQ repository is controlled by WINE_COMMIT, Wine-Staging repository by STAGING_COMMIT, and Ixit's Gallium Nine repository by D3D9_COMMIT.  The *_COMMIT variables may contain either a commit hash from that repository or a git tag from that repository.

For example, one could select the WineHQ tag "wine-2.0-rc5" to emerge the 2.0 RC 5.
{{RootCmd| WINE_COMMIT{{=}}"wine-2.0-rc5" emerge -av '{{=}}app-emulation/wine-9999'}}
One could additionally ping Wine-Staging to the same release by finding the appropriate tag, "v2.0-rc5" and augmenting the previous as follows:
{{RootCmd| WINE_COMMIT{{=}}"wine-2.0-rc5" STAGING_COMMIT{{=}}"v2.0-rc5" emerge -av '{{=}}app-emulation/wine-9999'}}

=== Emerge ===

Enable the USE flags of choice and {{c|emerge}} the package:

{{Emerge|{{Package|app-emulation/wine}}}}

To install the latest development version of Wine the package needs to be individually unmasked:

{{RootCmd|echo "app-emulation/wine" >> /etc/portage/package.accept_keywords}}

The above command does not apply to systems that have {{Keyword|~amd64}} defined globally in the <var>ACCEPT_KEYWORDS</var> variable located in {{Path|/etc/portage/make.conf}}

== Configuration ==

=== Disabling the Menubuilder ===

To prevent Wine from adding menu entries and desktop links, the following {{Path|.dll}} override can be used:

{{FileBox|filename=~/.bashrc|lang=bash|1=
# Prevent Wine from adding menu entries and desktop links.
export WINEDLLOVERRIDES='winemenubuilder.exe=d'
}}

Previously added entries can be deleted by removing the corresponding files from {{Path|~/.local/share/applications}}. See [http://wiki.winehq.org/FAQ#head-ddc6f242056eb1a4fe566c9434d15fd8b64606aa Wine FAQ] for examples.

=== Tools and interfaces ===

Tools such as graphical interfaces for Wine can be helpful for users who want an alternative to the command-line:

* {{Package|app-emulation/q4wine}} - Qt4 GUI configuration tool for Wine.
* {{Package|app-emulation/wine-doors}} - Wine-doors is a package manager for Wine.
* {{Package|app-emulation/winetricks}} - Easy way to install DLLs needed to work around problems in Wine.
* {{Package|app-emulation/playonlinux}} - Set of scripts to easily install and use Windows games and software.

=== Environment variables ===

The environment variables of the shell that {{c|wine}} is started from are made accessible to the Windows/DOS processes. Some very useful Wine-specific variables include, but are not limited to, <var>WINEPREFIX</var>, <var>WINEARCH</var>, and <var>WINEDEBUG</var>.

See the {{c|man wine}} and {{c|man wineserver}} manual entries for more detailed information concerning Wine's environment variables.

==== WINEPREFIX ====

To create a Wine prefix in a custom location without affecting the default:

{{Cmd|WINEPREFIX{{=}}~/wine_testi wineboot}}

The above would create the Windows installation in the home path of the user, under {{Path|~/wine_testi}}

{{Note|Once a prefix has been created, the 'bitness' (arch) can not be changed. As such, the <var>WINEARCH</var> is not required to be defined for every command, unlike the <var>WINEPREFIX</var> variable. When using a non-default prefix without exporting it, the prefix and path need to be defined for each command.}}

==== WINEARCH ====

To create a 32-bit installation instead of the default (when built) 64-bit:

{{Cmd|WINEARCH{{=}}win32 WINEPREFIX{{=}}~/wine_testi wineboot}}

The Wine executable used could be anything that runs Wine, such as {{c|winecfg}}, which often makes sense while creating a clean, new prefix.

==== WINEDEBUG ====

Essential in finding out why an application is misbehaving when the basic terminal output or messages boxes are not enough.  See [[#Debugging|Debugging]] for examples.

== Troubleshooting ==

When a user encounters a problem with an application, they should try the latest development version to see if the unwanted behavior still exists.  If Wine has been built with options such as <code>-fomit-frame-pointer</code> or <code>--hash-style=both</code>, the Wine developers will likely be unable to help with the issue, and reports including output from such builds should not be reported to the [http://bugs.winehq.org/ Wine Bugzilla].

The <code>custom-cflags</code> USE flag should be enabled for debugging builds.

For more directions on reporting bugs, see [http://wiki.winehq.org/Bugs Bugzilla and Bugs] at wiki.winehq.

=== Support ===

Users may find additional support in the [irc://irc.freenode.net/#gentoo-wine #gentoo-wine] channel on Freenode.

== See also ==

* [[Games/emulation|Game emulators]] - An article containing lists of game emulators available through Gentoo.

== External resources ==

* {{Bug|app-emulation/wine|search=package}} - Wine related bugs.
* [http://wiki.winehq.org/ WineHQ Wiki]
* [http://appdb.winehq.org/ Wine Application Database] - Search for the game or program to install here to see if it is stable.

[[Category:Emulation]]
