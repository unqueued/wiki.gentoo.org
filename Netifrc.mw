{{InfoBox stack
|{{InfoBox project|Netifrc|header=true}}
|{{InfoBox gitweb|netifrc.git}}
|{{InfoBox github|gentoo/netifrc|text=GitHub (mirror)}}
}}

netifrc is a collection of modules created to configure and manage network interfaces via individual, per-interface scripts located in the {{Path|/etc/init.d/}} directory. In Gentoo Linux netifrc comes installed as part of the system profile and is available in the stage3 tarballs on all architectures. New users beware: netifrc is powerful and convenient, but using it requires knowledge of the ''exact'' system needs; because of its modular approach it requires additional packages to be installed for what many would consider "basic functionality" for home users. The netifrc package can be uninstalled or simply left unused in favor of using another network manager.

__TOC__

== Installation ==

=== USE flags ===

OpenRC has the <code>netifrc</code> [https://packages.gentoo.org/useflags/netifrc USE flag], pulling in the package and enabling Gentoo's network stack ({{Path|net.*}} scripts).

=== Emerge ===

The netifrc modules come in standard stage3 tarballs so they should be already installed on the system. In the case they have been removed, they can be re-installed via:

{{Emerge|net-misc/netifrc||params+=--oneshot}}

== Configuration ==

=== Determine interface names ===

The first step in configuring netifrc is to get a list of the [[Handbook:Parts/Networking/Advanced#Network_interface_naming|network interfaces]] present on the system. This is possible a couple different ways. The {{c|ifconfig}} command can be used to get a comprehensive list of available interfaces. It also be an used to detect if there is byte-activity on the interfaces which helps determine connectivity:

{{Cmd|ifconfig -a}}

For more information on {{c|ifconfig}} see the man page locally ({{c|man ifconfig}}) or [http://man7.org/linux/man-pages/man8/ifconfig.8.html online].

Alternately, if {{c|dmesg}} is installed, a list of messages should be generated each time the system boots. Although the above method is better in practice, this approach can also be used to determine available network interfaces:

{{Cmd|dmesg {{!}} grep -i "network interface"}}

For more information on the use of {{c|dmesg}} see the man page locally ({{c|man dmesg}}) or [http://man7.org/linux/man-pages/man1/dmesg.1.html online].

{{Tip|If network interfaces cannot be discovered using the means above, but the physical system hardware indicates otherwise, it is likely the appropriate kernel drives for the network interface(s) have not been built for the currently running kernel or the system is lacking required firmware for interaction with the interface. Either the kernel will need to be configured to support the NIC driver and recompiled or the firmware will need to be installed; in some cases both changes will need to be performed For more information on how to perform these changes see the [[Kernel/Configuration|kernel configuration article]].}}

=== Adding interfaces ===

==== Creating symlinks ====

Provided in the {{Package|net-misc/netifrc}} package is a parent script called {{Path|net.lo}} which is installed to {{Path|/etc/init.d/net.lo}}. This parent script should be symlinked to create additional scripts for each network interface to be configured. For example, to create a script for a network interface called {{Path|eth0}}, run the following command:

{{RootCmd|ln -s /etc/init.d/net.lo /etc/init.d/net.<interface_name>}}

Replace <code><interface_name></code> with {{Path|eth0}} or whatever the interface is named.

{{Tip|Curly braces and commas can be used to speed up the process when dealing with multiple interfaces:

{{RootCmd|ln -s /etc/init.d/net.{lo,<interface_name>} }} }}

<code><interface_name></code> in the example commands above is the appropriate name for this system's network interface. Depending on the system, a number of interface names may be used including: {{Path|eno1}}, {{Path|enp2s0}}, {{Path|wlan0}}, {{Path|ethernet0}}, {{Path|wireless0}}, etc. Continue creating links for as many interfaces as needed. A system can have more than one interface connected to more than one network if the hardware is available.

Configuration of the interfaces is handled in the {{Path|/etc/conf.d/net}} file. A default (empty or missing) {{Path|/etc/conf.d/net}} will automatically use DHCP to configure any network interface(s) started by {{Path|net.*}} scripts.

==== OpenRC ====

Running the {{c|rc-update}} is the final step in the configuration process. Add each interface to the systems init process. Normally interfaces are added to the ''default'' runlevel:

{{RootCmd|rc-update add net.<interface_name> default}}

Repeat the above command for each interface. A status message should appear showing successful adds to the init process.

=== Removing interfaces ===

If interfaces are no longer desired to be loaded during the init process they need to be removed from OpenRC. Run the following command for each interface that should be removed:

{{RootCmd|rc-update del <interface_name> default}}

== Troubleshooting ==

=== Link event detection ===

If an Ethernet cable plugged in ''after'' the bootup process occurred the network interfaces will not manually refresh themselves, even when using a DHCP client to manage the connections. A new address will not be assigned until the interface is manually refreshed by running the associated init script.

Two packages are available to aid in refreshing the network interface(s) during link events:

* {{Package|sys-apps/netplug}}
* {{Package|sys-apps/ifplugd}}

The {{Package|sys-apps/ifplugd}} package appears to be more maintained and is the recommended choice:

{{Emerge|sys-apps/ifplugd}}

Once the install is complete network interfaces should be refreshed automatically whenever the system detects a link change event.

For more information please read netifrc documentation at [https://gitweb.gentoo.org/proj/netifrc.git/tree/doc/net.example.Linux.in Gentoo's GitWeb site] or locally in {{Path|/usr/share/doc/netifrc-<version_number>/net.example.bz2}}. Search "<code>Cable in/out detection</code>".

== See also ==

* [[Handbook:AMD64/Full/Networking|Networking (Gentoo Handbook)]] - The Gentoo Handbook explains netifrc scripts in a high level of detail.
* [[Eudev#Keep classic %27eth0%27 naming|Eudev: Classic interface nameing]] - How to keep classic naming instead of udev's 'predictable' naming
* [[Network_management_using_DHCPCD]] - Popular alternative to netifrc.

== External resources ==

* [https://forums.gentoo.org/viewtopic-t-1016976-start-3.html  Forum post]

[[Category:Network_management]]
