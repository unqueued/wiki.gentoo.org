{{InfoBox stack
|{{InfoBox project|Netifrc|header=true}}
|{{InfoBox package|net-misc/netifrc}}
|{{InfoBox gitweb|netifrc.git}}
|{{InfoBox github|gentoo/netifrc|text=GitHub (mirror)}}
}}

netifrc is [[Article description::a collection of modules created to configure and manage network interfaces via individual, per-interface scripts.]]

In Gentoo Linux netifrc comes installed as part of the system profile and is available in the stage3 tarballs on all architectures. New users beware: netifrc is powerful and convenient, but using it requires knowledge of the ''exact'' system needs; because of its modular approach it requires additional packages to be installed for what many users would consider "basic functionality" for home users.

The netifrc package can be uninstalled or simply left unused in favor of using another network manager.

__TOC__

== Installation ==

=== USE flags ===

The [[OpenRC]] package has the <code>netifrc</code> [https://packages.gentoo.org/useflags/netifrc USE flag], pulling in the package and enabling Gentoo's network stack ({{Path|net.*}} scripts).

=== Emerge ===

The netifrc modules come in standard stage3 tarballs so they should be already installed on the system. In the case they have been removed, they can be re-installed via:

{{Emerge|net-misc/netifrc}}

== Configuration ==

=== Services ===

Service scripts located in the {{Path|/etc/init.d/}} directory.

==== systemd ====

The systemd service which calls a wrapper script. See the sections below for more information.

=== Files ===

; {{Path|/etc/init.d/net.lo}} : {{Path|net.lo}} is a generic script used as the target (base) for symlinks. It contains logic necessary to determine what interfaces to start or stop given the appropriate command from the init system.
; {{Path|/etc/conf.d/net}} : This file is '''not''' created by default; it is created by the system administrator. Its should configuration information for each network interface to be managed by netifrc (details on content can be found below).

==== Basic examples ====

===== DHCP =====

{{FileBox|filename=/etc/conf.d/net|title=Example DHCP configuration|lang=bash|1=
# Note: DHCP is the default behavior if the /etc/conf.d/net
config_eth0="dhcp"
}}

===== Static address (CIDR notation) =====

{{FileBox|filename=/etc/conf.d/net|title=Example static IP using CIDR|lang=bash|1=
# For a static IP using CIDR notation
config_eth0="192.168.0.7/24"
routes_eth0="default via 192.168.0.1"
# The 8.8.8.8 is provided here to show that multiple DNS servers entries can be added for a single interface.
dns_servers_eth0="192.168.0.1 8.8.8.8" 
}}

===== Static address (netmask notation) =====

{{FileBox|filename=/etc/conf.d/net|title=Example static IP using netmask|lang=bash|1=
# For a static IP using netmask notation
config_eth0="192.168.0.7 netmask 255.255.255.0"
routes_eth0="default via 192.168.0.1"
dns_servers_eth0="192.168.0.1 8.8.8.8"
}}

=== Determine interface names ===

The first step in configuring netifrc is to get a list of the [[Handbook:Parts/Networking/Advanced#Network_interface_naming|network interfaces]] present on the system. This is possible a couple different ways. 

First, the {{c|ip}} command will list all available interfaces when given the {{c|link}} action.  If the -s option is passed to ip, before the action, activity statistics will also display to show connectivity:

{{Cmd|ip -s link|collapse-output=true|output=<pre>
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    RX: bytes  packets  errors  dropped overrun mcast
    0          0        0       0       0       0
    TX: bytes  packets  errors  dropped carrier collsns
    0          0        0       0       0       0
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000
    link/ether 00:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff
    RX: bytes  packets  errors  dropped overrun mcast
    236957926  2697517  0       344244  0       2595885
    TX: bytes  packets  errors  dropped carrier collsns
    9532180    91898    0       0       0       0
3: sit0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN mode DEFAULT group default qlen 1
    link/sit 0.0.0.0 brd 0.0.0.0
    RX: bytes  packets  errors  dropped overrun mcast
    0          0        0       0       0       0
    TX: bytes  packets  errors  dropped carrier collsns
    0          0        0       0       0       0
</pre>}} 

Next, the {{c|ifconfig}} command can be used to get a comprehensive list of available interfaces. It also be an used to detect if there is byte-activity on the interfaces which helps determine connectivity:

{{Cmd|ifconfig -a}}

For more information on {{c|ifconfig}} see the man page locally ({{c|man ifconfig}}) or [http://man7.org/linux/man-pages/man8/ifconfig.8.html online].

Alternately, if {{c|dmesg}} is installed, a list of messages should be generated each time the system boots. Although the above method is better in practice, this approach can also be used to determine available network interfaces:

{{Cmd|dmesg {{!}} grep -i "network interface"}}

For more information on the use of {{c|dmesg}} see the man page locally ({{c|man dmesg}}) or [http://man7.org/linux/man-pages/man1/dmesg.1.html online].

{{Tip|If network interfaces cannot be discovered using the means above, but the physical system hardware indicates otherwise, it is likely the appropriate kernel drives for the network interface(s) have not been built for the currently running kernel or the system is lacking required firmware for interaction with the interface. Either the kernel will need to be configured to support the NIC driver and recompiled or the firmware will need to be installed; in some cases both changes will need to be performed For more information on how to perform these changes see the [[Kernel/Configuration|kernel configuration article]].}}

=== Maximum transmission unit size ===

To set a specific [[wikipedia:Maximum_transmission_unit|MTU]] size for an interface edit the {{Path|/etc/conf.d/net}} file like below:

{{FileBox|filename=/etc/conf.d/net|title=MTU size|lang=bash|1=
mtu_eth0="1492"
}}

=== Adding interfaces ===

==== OpenRC ====

===== Creating symlinks =====

Provided in the {{Package|net-misc/netifrc}} package is a parent script called {{Path|net.lo}} which is installed to {{Path|/etc/init.d/net.lo}}. This parent script should be symlinked to create additional scripts for each network interface to be configured. For example, to create a script for a network interface called {{Path|eth0}}, run the following command:

{{RootCmd|ln -s /etc/init.d/net.lo /etc/init.d/net.<interface_name>}}

Replace <code><interface_name></code> with {{Path|eth0}} or whatever the interface is named.

{{Tip|Curly braces and commas can be used to speed up the process when dealing with multiple interfaces:

{{RootCmd|ln -s /etc/init.d/net.{lo,<interface_name>} }} }}

<code><interface_name></code> in the example commands above is the appropriate name for this system's network interface. Depending on the system, a number of interface names may be used including: {{Path|eno1}}, {{Path|enp2s0}}, {{Path|wlan0}}, {{Path|ethernet0}}, {{Path|wireless0}}, etc. Continue creating links for as many interfaces as needed. A system can have more than one interface connected to more than one network if the hardware is available.

Configuration of the interfaces is handled in the {{Path|/etc/conf.d/net}} file. A default (empty or missing) {{Path|/etc/conf.d/net}} will automatically use DHCP to configure any network interface(s) started by {{Path|net.*}} scripts.

===== Enable at boot =====

Running the {{c|rc-update}} is the final step in the configuration process. Add each interface to the system's init process. Normally interfaces are added to the ''default'' runlevel:

{{RootCmd|rc-update add net.<interface_name> default}}

Repeat the above command for each interface. A status message should appear showing successful adds to the init process.

==== systemd ====

The {{Path|net@.service}} unit is provided. To enable and start this unit:

{{RootCmd|systemctl --now enable net@<interface_name>.service}}

=== Removing interfaces ===

If interfaces are no longer desired to be loaded during the init process they need to be removed from OpenRC or systemd. Run the following command for each interface that should be removed:

OpenRC:

{{RootCmd|rc-update del net.<interface_name> default}}

systemd:

{{RootCmd|systemctl disable net@<interface_name>.service}}

=== Priority of network interfaces ===

When 2 or more network interfaces are up, to set their priority, as example for preferred internet access on wlan0:

{{FileBox|filename=/etc/conf.d/net|lang=ini|1=# Routing priority
metric_wlan0="90"
metric_eth0="100"}}

== Troubleshooting ==

=== Link event detection ===

If an Ethernet cable plugged in ''after'' the bootup process occurred the network interfaces will not manually refresh themselves, even when using a DHCP client to manage the connections. A new address will not be assigned until the interface is manually refreshed by running the associated init script.

Two packages are available to aid in refreshing the network interface(s) during link events:

* {{Package|sys-apps/netplug}}
* {{Package|sys-apps/ifplugd}}

The {{Package|sys-apps/ifplugd}} package appears to be more maintained and is the recommended choice:

{{Emerge|sys-apps/ifplugd}}

Once the install is complete network interfaces should be refreshed automatically whenever the system detects a link change event.

For more information please read netifrc documentation at [https://gitweb.gentoo.org/proj/netifrc.git/tree/doc/net.example.Linux.in Gentoo's GitWeb site] or locally in {{Path|/usr/share/doc/netifrc-<version_number>/net.example.bz2}}. Search "<code>Cable in/out detection</code>".

== See also ==

* [[Handbook:AMD64/Full/Networking|Networking (AMD64 Handbook)]] - The Gentoo Handbook explains netifrc scripts in a high level of detail.
* [[Eudev#Keep classic %27eth0%27 naming|Eudev: Classic interface naming]] - How to keep classic naming for network interfaces instead of udev's 'predictable' interface naming.
* [[Network_management_using_DHCPCD]] - Popular alternative to netifrc.

== External resources ==

* [https://forums.gentoo.org/viewtopic-t-1016976-start-3.html Forum post]

[[Category:Network_management]]
