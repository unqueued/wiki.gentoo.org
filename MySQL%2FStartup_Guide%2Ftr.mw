<languages />

Bu belgede MySQL kurulumu ve kullanımı hakkında bilgi verilmektedir.

== MySQL'e Başlarken ==

=== Arkaplan ===

MySQL birçok alanda kullanılan popüler bir veritabanı sunucusudur. SQL'in açılımı  (S)tructured (Q)uery (L)anguage yani "yapısal sorgulama dili"dir ve MySQL diğer uygulamalar ile bu dil üzerinden anlaşır. Ayrıca standart SQL dilinin üzerine kendisine has bazı özellikler eklemiş durumdadır. Bu belgede MySQL kurulumu, veritabanı/tabloların ayarlanması ve kullanıcı işlemlerine değineceğiz. Kurulum ile başlayalım. 

=== MySQL Kurulumu ===

Öncelikle sisteminizde MySQL'in kurulu olduğuna emin olun. MySQL'i özel bir ihtiyacınıza göre kullanacaksanız kurarken doğru USE bayraklarını seçtiğinize emin olun. 

{{Emerge|mysql}}

Kurulumun tamamlanmasının ardından şöyle bir mesaj göreceksiniz: 

{{Code|MySQL einfo bilgi mesajı|<pre>
You might want to run:
"emerge --config =dev-db/mysql-[version]"
if this is a new install.
</pre>
}}
(Eğer bu yeni bir kurulum ise "emerge --config =dev-db/mysql-[sürüm]" komutunu çalıştırmak isteyebilirsiniz.)

Bu yeni bir kurulum olduğu için, komutu çalıştırıyoruz. MySQL veritabanını yapılandırırken <code>ENTER</code>'a basmanız gerekiyor. Yapılandırma sırasında MySQL'in kendi bilgilerini (kullanıcılar, izinler gibi) tutan mysql isminde ana veritabanı oluşturulur. Yapılandırma sihirbazı mümkünse root (yönetici) parolanızı değiştirmenizi isteyecektir. Başka birisinin kolayca MySQL yöneticisi yetkilerine sahip olmaması için bunu yapmamız gerekmekte. 

{{RootCmd|emerge --config {{=}}dev-db/mysql-[version]|output=<pre>
 * MySQL DATADIR is /var/lib/mysql
 * Press ENTER to create the mysql database and set proper
 * permissions on it, or Control-C to abort now...
 
   Preparing db table
   Preparing host table
   Preparing user table
   Preparing func table
   Preparing tables_priv table
   Preparing columns_priv table
   Installing all prepared tables
 
   To start mysqld at boot time you have to copy support-files/mysql.server
   to the right place for your system
 
   PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
   To do so, issue the following commands to start the server
   and change the applicable passwords:
 
   /etc/init.d/mysql start
   /usr/bin/mysqladmin -u root -h pegasos password 'new-password'
   /usr/bin/mysqladmin -u root password 'new-password'
   Depending on your configuration, a -p option may be needed
   in the last command. See the manual for more details.
</pre>}}

Bazı bilgiler sadelik açısından çıkartılmıştır.

{{Important|mysql-4.0.24-r2 sürümünden itibaren daha güvenli olması için root parolası yapılandırma sihirbazı çalışırken alınmaktadır.}}

Sihirbaz parolayı atamamız için gerekli komutları iletmiş görülüyor, komutları çalıştıralım. 

{{RootCmd|/etc/init.d/mysql start|output=<pre>
 * Re-caching dependency info (mtimes differ)...
 * Starting mysqld (/etc/mysql/my.cnf) ...        [ ok ]
</pre>}}

{{RootCmd|/usr/bin/mysqladmin -u root -h localhost password 'yeni-parola'}}

MySQL sunucusuna girmeye çalışarak yeni parolanızı test edebilirsiniz. 

{{Cmd|mysql -u root -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 4 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

<code>-u</code> parametresi giriş yapacak olan kullanıcıyı, <code>-h</code> ise sunucuyu belirtir. Uzak bir sunucuya bağlanmıyorsanız sunucu değeri genellikle <code>localhost</code>'tur. <code>-p</code> parametresi de sunucuya giriş için bir parola gireceğinizi belirtir. Giriş yaptıktan sonra MySQL'e vereceğimiz komutları bize sağladığı <code>mysql></code> ile belirttiği ekranda vereceğiz. Yetkili kullanıcı ile MySQL'e giriş yaptığımız için artık veritabanımızı ayarlamaya başlayabiliriz. 

== Veritabanı Yapılandırma ==

=== Yeni Veritabanı Oluşturma ===

Giriş yaptık ve mysql ekranını görüyoruz. Öncelikle hangi veritabanlarının sistemde var olduğuna bakalım. Bunun için <code>SHOW DATABASES</code> komutunu kullanıyoruz. 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| mysql    |
| test     |
+----------+
2 rows in set (0.09 sec)
</pre>
}}

{{Important|Lütfen MySQL komutlarının noktalı virgül ile bittiğine dikkat edin -- <code>;</code>}}

Zaten var olan veritabanlarını görüyorsunuz. Ancak biz kendi veritabanımızı yaratacağız. Bu işlem için <code>CREATE DATABASE</code> komutunu kullanıyoruz. "gentoo" isminde bir veritabanı yaratalım. 

{{Cmd|CREATE DATABASE gentoo;|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.08 sec)
</pre>
}}

Bu tepkinin anlamı verdiğimiz komutun herhangi bir hata oluşmadan çalıştırıldığıdır. Şu anda 1 satırda değişiklik yapılmış. Bu bilgi veritabanlarının bilgisini tutan "mysql" isimli veritabanına işaret ediyor. Arkaplan ile ilgili fazla endişelenmenize gerek yok. Son bilgi ise komutun çalışmasının ne kadar sürdüğü. Oluşturmuş olduğumuz veritabanını görmek için <code>SHOW DATABASES</code> komutunu verelim. 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| gentoo   |
| mysql    |
| test     |
+----------+
3 rows in set (0.00 sec)
</pre>
}}

Veritabanımız gerçekten de oluşturulmuş görülüyor. İçerisindeki tablo yapısında değişiklikler yapabilmemiz için veritabanımızı seçili veritabanı durumuna getirmemiz gerekiyor. Bunun için de <code>USE</code> komutunu kullanmalıyız. Dilerseniz giriş sırasında <code>-D</code> parametresi ile seçili veritabanına direkt giriş de yapabilirsiniz. Şimdi "gentoo" veritabanına geçelim. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Database changed
</pre>
}}

Şu anda gentoo veritabanına giriş yaptık ve kullanıyoruz. Şimdi bazı tablolar oluşturup içlerine bilgiler girelim.

== MySQL'de Tablolar İle Çalışmak ==

=== Tablo Oluşturmak ===

MySQL'in yapısında veritabanları, tablolar, kayıtlar ve alanlar bulunmaktadır. Veritabanları tabloları, tablolar kayıtları, kayıtlar da gerçek veriyi tutan alanları barındırır. Bu yapı kullanıcının veriye dilediği gibi ulaşmasını sağlar. Şimdiye kadar sadece veritabanları ile uğraştık. Şimdi tablolara bakalım. Öncelikle, tabloların görüntülenmesi işlemi de aynı veritabanlarında olduğu gibi <code>SHOW TABLES</code> komutu ile gerçekleştirilir. Ancak henüz gentoo veritabanında bir tablomuz yok, bu yüzden şöyle bir çıktı alacağız: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
Empty set (0.00 sec)
</pre>
}}

Yani önce bazı tablolar yaratmamız gerekiyor. Bu iş için <code>CREATE TABLE</code> komutunu kullanıyoruz. Ancak bu komut <code>CREATE DATABASE</code> komutundan biraz farklı çalışıyor ve bazı değerler vermemizi istiyor. Yapısı şu şekilde: 

{{Code|CREATE TABLE Yapısı|<pre>
CREATE TABLE [tablo_adı] ([bölge_adı] [bölge_veri_türü]([boyut]));
</pre>
}}

'''tablo_adı''' bölümüne oluşturacağımız tablonun ismi. Bu örnekte tablonun ismini <code>developers</code> yapalım. Bu tabloda geliştiricilerin ismini, e-posta adresini ve mesleklerini barındıracağız. '''bölge_adı''' bilgiyi taşıyacak alanın adıdır. Bu durumda 3 tane bölgemiz olacak; isim, eposta ve meslek. '''bölge_veri_türü''' de saklayacağımız verinin türünü belirtiyor. Veri saklama formatlarını [http://dev.mysql.com/doc/mysql/en/column-types.html MySQL sütun türleri sayfası]nda bulabilirsiniz. Biz kendi amaçlarımız için tüm bölgeler için <code>VARCHAR</code> kullanacağız. Yalnızca yazı saklayacaksanız <code>VARCHAR</code> kullanabileceğiniz en basit veri türlerinden birisi. '''boyut''' ise tablodaki tek bir bölgenin alabileceği en büyük boyutu belirtiyor. Biz 128 kullanacağız. Yani her bölge en fazla 128 <code>VARCHAR</code> veri içerebilecek. Şu anda bunu "128 karakter" olarak düşünebilirsiniz. Ne yapacağımızı artık biliyoruz, hadi tabloyu oluşturalım. 

{{Cmd|CREATE TABLE developers ( isim VARCHAR(128), eposta VARCHAR(128), meslek VARCHAR(128));|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.11 sec)
</pre>
}}

Görünüşe göre tablomuz oluştu. <code>SHOW TABLES</code> komutuyla kontrol edelim: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+------------------+
| Tables_in_gentoo |
+------------------+
| developers       |
+------------------+
1 row in set (0.00 sec)
</pre>
}}

Evet, tablomuz burada ama içeriği ile ilgili pek bilgi yok. Bunun için <code>DESCRIBE</code> ("açıkla", kısa kullanım için <code>DESC</code>) komutunu kullanacağız. Bakalım developers tablosunda neler var. 

{{Cmd|DESCRIBE developers;|prompt=mysql&gt; |output=<pre>
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| isim   | varchar(128) | YES  |     | NULL    |       |
| eposta | varchar(128) | YES  |     | NULL    |       |
| meslek | varchar(128) | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
</pre>
}}

Çıktıda bölgeler ve türleri ile birlikte bu belgede değinmeyeceğimiz bazı bilgiler de bulunmakta. Daha fazla bilgi için [http://dev.mysql.com/doc/mysql/en/ MySQL belgelerini] inceleyebilirsiniz. Artık üzerinde çalışacağımız tablomuz da var. Sıra doldurmaya geldi. 

=== MySQL Veritabanını Doldurmak ===

Veri eklemek için <code>INSERT</code> komutunu kullanıyoruz. Bu komut da <code>CREATE TABLE</code> gibi özel yapıya sahip: 

{{Code|INSERT Yapısı|<pre>
INSERT INTO tablo (sütun1, sütun2, ...) VALUES('değer1', 'değer2', ...);
</pre>
}}

Bu komut bir tabloya veri girişi yapmak için kullanılır."tablo" yerine tablonun adı yazılır ve ardından verinin girilmesi istenen sütun adlarının listesi yazılabilir. <code>VALUES()</code> bölümü de bu verileri içerir. Sırasıyla birden çok değer verdiyseniz sütun isimlerini yazmayabilirsiniz. Örnek olarak developers tablosuna veri ekleyelim: 

{{Cmd|INSERT INTO developers VALUES('Joe Smith', 'joesmith@gentoo.org', 'toolchain');|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.06 sec)
## (Eğer sırayı tam olarak bilmiyorsanız veya tüm alanları doldurmayacaksanız aşağıdaki gibi de olabilir)
mysql> INSERT INTO developers (meslek, isim) VALUES('outsourced', 'Jane Doe');
Query OK, 1 row affected (0.01 sec)
</pre>
}}

Sonuca göre veri doğru şekilde yüklendi. Peki çok sayıda veri eklemek istersek? Bunun için de <code>LOAD DATA</code> komutunu kullanacağız. Bu komut sekmelerle ayrılmış veriler içeren bir dosyadan veriyi içe aktarmayı sağlar. Hadi bunu ev dizinimizde aşağıdaki içeriğe sahip {{Path|kayitlar.txt}} isimli bir dosya oluşturup deneyelim: 

{{Code|~/kayitlar.txt|<pre>
John Doe	johndoe@gentoo.org	portage
Chris White	chriswhite@gentoo.org	documentation
Sam Smith	samsmith@gentoo.org	amd64
</pre>
}}

{{Important|Burada yaptığınız işlemden emin olun. Dosya içeriğinden emin değilseniz <code>LOAD DATA</code> kullanımı sakıncalıdır!}}

<code>LOAD DATA</code> nispeten karışık bir kullanıma sahip, ancak basit bir şekilde kullanacağız. 

{{Code|LOAD DATA Yapısı|<pre>
LOAD DATA LOCAL INFILE '/dosya/yolu' INTO TABLE tablo_adi;
</pre>
}}

{{Path|/dosya/yolu}} yerine dosyamıza giden tam yolu yazıyoruz. Bizim ev dizinimizde olduğu için bu {{Path|~/kayitlar.txt}} şeklinde. 

{{Cmd|LOAD DATA LOCAL INFILE '~/kayitlar.txt' INTO TABLE developers;|prompt=mysql&gt; |output=<pre>
Query OK, 3 rows affected (0.00 sec)
Records: 3  Deleted: 0  Skipped: 0  Warnings: 0
</pre>
}}

{{Important|Eğer farklı ve garip bir davranışla karşılaştıysanız dosyanızda değerlerin sekmeler (tab) ile ayrıldığına emin olun. Farklı bir kaynaktan kopyalandığında editörler bazen sekmeleri boşluklara çevirebilmekte.}}

Bu da çalıştı. Ancak genelde birçok web uygulaması MySQL'e hızlıca veri girişi için MySQL scriptlerini kullanır. Bunlar MySQL komutları içeren dosyalardır. Böyle bir script kullanmak istiyorsanız işte yöntemi: 

{{Cmd|mysql -u root -h localhost -p < sqldosyasi}}

<code>LOAD DATA</code> gibi, burada da {{Path|sqldosyasi}} dosyasının içeriğinden emin olun. ''Hatalı işlem veritabanınıza zarar verebilir!'' Bu işlemi gerçekleştirmenin bir yolu da <code>source</code> komutu kullanmaktır. Bu komut MySQL içerisindeyken bir dosyayı içe aktarmanızı ve içerisindeki komutları çalıştırmanızı sağlar. İşte örneği: 

{{Cmd|source sqldosyasi;|prompt=mysql&gt; }}

Eğer bir web uygulaması bir script çalıştırmak istiyorsa yukarıdaki iki yöntemle işlemi yapabilirsiniz. Artık tablolarımız da dolu olduğuna göre, alanlara bir bakalım. Bunun için sorgular ile arama yapacağız. 

=== MySQL Tablolarını Sorgular ile Gezmek ===

Sorgular SQL veritabanlarının en önemli bileşenlerindendir. Tablolardaki verileri kullanışlı bilgiye çevirmeye yararlar. Çoğu sorgu <code>SELECT</code> komutuyla yapılır. <code>SELECT</code> komutu oldukça karmaşık şekillerde kullanılabilir ancak biz üç temel kullanım şekline değineceğiz. 

{{Code|SELECT sorgu çeşitleri|<pre>
## (Bir tablodaki tüm girdileri getir)
SELECT * FROM tablo;
## (Sadece belirli koşulu sağlayan verileri getir)
SELECT * FROM tablo WHERE alan=değer;
## (Belirli alanları getir)
SELECT bolge1,bolge2,bolge3 FROM tablo [WHERE alan=deger];
</pre>
}}

İlk şekline hızlıca bakalım. Nispeten basit ve tablodaki tüm verileri önünüze seren bir sorgu. Kendi tablomuzda çalıştırıp sonucu görelim. 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| isim        | eposta                | meslek         |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

Hem <code>INSERT</code> hem de <code>LOAD DATA</code> ile eklediğimiz verilerin tamamı burada. Şimdi sadece Chris White'a ait verileri getirelim. Bunun için örnekteki ikinci sorguyu kullanabiliriz. 

{{Cmd|SELECT * FROM developers WHERE isim {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+---------------+
| isim        | eposta                | meslek        |
+-------------+-----------------------+---------------+
| Chris White | chriswhite@gentoo.org | documentation |
+-------------+-----------------------+---------------+
1 row in set (0.08 sec)
</pre>
}}

Umduğumuz gibi, sadece istediğimiz kişiye ait bilgiler geldi. Şimdi de bir koşul daha ekleyerek kişinin sadece mesleğini ve e-posta adresini getirelim. Bunun için örnekteki üçüncü sorguyu kullanabiliriz. 

{{Cmd|SELECT eposta,meslek FROM developers WHERE isim {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-----------------------+---------------+
| eposta                | meslek        |
+-----------------------+---------------+
| chriswhite@gentoo.org | documentation |
+-----------------------+---------------+
1 row in set (0.04 sec)
</pre>
}}

Bu türde seçimler, özellikle büyük verilerle uğraşırken işimizi oldukça kolaylaştırmakta.

Şimdiye kadar MySQL üzerinde root kullanıcı olarak tüm yetkiler ile dilediğimizi yaptık. Ancak bir sunucu ortamında bu şekilde bir yetkilendirme mümkün olmayacaktır. Kimin neyi yapabileceğine izin verebilmek için yetki ayarları yapmamız gerekmekte. 

== MySQL Yetkileri ==

=== GRANT İle Yetki Atama ===

Yetkiler kullanıcıların veritabanlarına, tablolara ve aşağı yukarı herşeye nasıl erişim sağlayacağını belirler. Şu anda oluşturduğumuz gentoo veritabanındaki yetki dağılımına göre yalnızca erişim yapabilecek olan kullanıcı, MySQL'in root kullanıcısı. Şimdi guest ve admin isminde iki tane genel kullanıcı oluşturup bu veritabanında işlemler yapabilmeleri için yetki atamalarını yapalım. guest hesabı kısıtlı yetkiye sahip olup yalnızca var olan verilere erişebilecek, admin ise root gibi dilediği düzenlemeyi yapabilme yetkisine (yalnızca gentoo veritabanı için, ana mysql veritabanına erişimi olmadan) sahip olacaktır. Başlamadan önce kısaca <code>GRANT</code> komutunun yapısına bakalım: 

{{Code|GRANT Yapısı|<pre>
GRANT [yetkiler] ON veritabani.* TO '[kullanici]'@'[host]' IDENTIFIED BY '[parola]';
</pre>
}}

{{Note|<code>GRANT</code> kullanıcı oluşturma için de kullanılmaktadır. MySQL'in yeni sürümlerinde <code>CREATE_USER</code> fonksiyonu eklenmiştir ancak halen <code>GRANT</code> daha sık tercih edilmektedir.}}

Öncelikle atamak istediğimiz yetkilere bakalım. Şimdiye kadar öğrendiğiklerimiz kadarıyla, atayabileceğimiz bazı yetkiler şöyle: 

* <code>ALL</code> - Veritabanı için tam kontrol yetkisi
* <code>CREATE</code> - Tablo oluşturma yetkisi
* <code>SELECT</code> - Sorgulama yapma yetkisi
* <code>INSERT</code> - Tabloya veri ekleme yetkisi
* <code>SHOW DATABASES</code> - Veritabanları listesini görme yetkisi
* <code>USAGE</code> - Sadece kullanım yetkisi (özel bir yetki yok)
* <code>GRANT OPTION</code> - Farklı kullanıcılara yetki verme yetkisi

{{Note|Eğer MySQL'i bir web uygulaması ile kullanmak istiyorsanız, muhtemelen yalnızca <code>CREATE</code> , <code>SELECT</code> , <code>INSERT</code>, <code>DELETE</code> ve <code>UPDATE</code> yetkilerini vermeniz yeterli olacaktır (detaylı bilgi için [http://dev.mysql.com/doc/mysql/en/grant.html MySQL belgelerinin  GRANT ve REVOKE bölümüne] bakabilirsiniz). Birçok insan gerekli olmadığı halde tüm yetkileri sağlamakta. Belirttiğimiz yetki dizisinin uygulamanın çalışmasında bir problem oluşturmayacağından emin olmak için uygulamanın geliştiricilerine/belgelerine danışabilirsiniz.}}

admin kullanıcımız için ALL yetkileri işimizi görecektir. guest kullanıcısı için de yalnızca <code>SELECT</code> yeterli olacaktır. Aşağıdaki örnekte gentoo veritabanımızın adı, .* tüm tabloları anlamındadır. Dilerseniz her tablo için ayrı bir yetki de atayabilirsiniz. kullanıcı yerine kullanıcımızın adını, host yerine de erişim yaptığımız sunucu adresini yazıyoruz (çoğu kez bu localhost). Son olarak parola yerine kullanıcımızın parolasını ekliyoruz. Kullanıcılarımızı oluşturalım: 

{{Cmd|GRANT ALL ON gentoo.* TO 'admin'@'localhost' IDENTIFIED BY 'parola123';|prompt=mysql&gt; }}

{{Cmd|GRANT SELECT ON gentoo.* TO 'guest'@'localhost' IDENTIFIED BY 'parola456';|prompt=mysql&gt; }}

Artık kullanıcılarımız da olduğuna göre, kontrol edelim. Öncelikle <code>quit</code> komutuyla MySQL'den çıkıyoruz: 

{{Cmd|quit|prompt=mysql&gt; }}

Artık konsola geri döndük. Şimdi oluşturduğumuz kullanıcılar ile neler yapabildiğimize bakalım. 

=== Kullanıcı İzinlerini Test Etmek ===

Önce guest kullanıcısı ile giriş yapalım. Bu kullanıcı şu anda yalnızca <code>SELECT</code> yetkisine sahip. Bunun anlamı yalnızca veritabanında arama yapabilmek, fazlası değil. Girip bakalım: 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 6 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Şimdi kısıtlamalara bakalım. Öncelikle gentoo veritabanına geçelim: 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
</pre>
}}

Şimdi de yapmamamız gereken bir işlem yapalım: Tablo oluşturalım. 

{{Cmd|CREATE TABLE test (test VARCHAR(20), deneme VARCHAR(2));|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

Gördüğünüz gibi, kullanıcımızın yetkisi bu işlem için yeterli değil. Şimdi de yapabildiğimiz bir işlemi, <code>SELECT</code>'i deneyelim: 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| isim        | eposta                | meslek         |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

İzin verdiğimiz bu işlem başarılı. Ayrıca bir de admin hesabı açmıştık. Ancak tüm yetkileri de versek kullanıcıların yapamayacağı bazı şeyler var. Görebilmek için admin kullanıcısı ile giriş yapalım. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u admin -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 7 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Önce admin kullanıcımız ile yeni bir veritabanı oluşturalım. admin kullanıcısı, gentoo veritabanı üzerinde, MySQL'in root kullanıcısı gibi her istediğini yapabilecek yetkilere sahip. Bu yapacağımız işlem ile MySQL'in kendi veritabanı üzerinde bir değişikliğe sebep olup olamayacağımızı göreceğiz. Kullanıcıya izni sağlarken yalnızca gentoo veritabanının adını verdiğimizi hatırlayın. 

{{Cmd|CREATE DATABASE gentoo2;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'admin@localhost' to database 'gentoo2'
</pre>
}}

Evet, kullanıcımız gentoo veritabanı üzerinde yetkili ancak MySQL üzerinde bir veritabanı oluşturamıyor. gentoo veritabanı üzerinde işlem yapabileceğimizden emin olmak için bir veri girelim. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql> INSERT INTO developers VALUES('Bob Simmons', 'bobsimmons@gentoo.org', 'python');
Query OK, 1 row affected (0.08 sec)
</pre>
}}

admin kullanıcısı kendi veritabanında tüm yetkilere sahip. Ancak bazen bazı kullanıcılardan birtakım yetkileri geri almak isteyebiliriz. Bu, problemli bir kullanıcı veya işten ayrılmış bir çalışan olabilir. Bunun için <code>REVOKE</code> komutunu kullanacağız. 

=== Kullanıcıdan REVOKE Komutu ile Yetki Almak ===

<code>REVOKE</code> komutu bir kullanıcıya kısıtlama yapmak için kullanılır. Dilersek tek yetkiyi, dilersek tüm yetkilerini alabiliriz. Kullanımı <code>GRANT</code>'a çok benzer. 

{{Code|REVOKE Yapısı|<pre>
REVOKE [yetkiler] ON veritabani.* FROM '[kullanici]'@'[host]';
</pre>
}}

Buradaki bölümleri <code>GRANT</code> komutunu anlatırken açıklamıştık. Diyelim ki guest kullanıcısı güvenlik açısından problemlere yol açıyor ve tüm yetkilerini almaya karar verdik. root olarak giriş yapıp gerekli komutu verelim. 

{{Cmd|REVOKE ALL ON gentoo.* FROM 'guest'@'localhost';|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

{{Note|Bu örnekte kullanıcının yetkilerini tek veritabanına verdiğimiz için aynı şekilde geri almak bir problem oluşturmuyor. Ancak daha büyük yapılarda muhtemelen gentoo.* yerine *.* kullanarak kullanıcının diğer tüm veritabanlarındaki yetkilerini de almamız gerekirdi.}}

Şimdi çıkıp guest olarak giriş yapalım. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 9 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Giriş yapabiliyoruz ancak gentoo veritabanına erişim yetkimiz elimizden alındı. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

And our problematic user is no longer able to access the gentoo database. Please note that the user was still able to login. That is because they remain in the main MySQL database. Let's take a look at how to completely remove an account with <code>DELETE</code> and the MySQL user table. 

=== Removing Accounts Using DELETE ===

The MySQL user table is a listing of all users and information about them. Make sure you're logged in as root. Then go ahead and use the main MySQL database. 

{{Cmd|USE mysql;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql>
</pre>
}}

Now let's see what tables the mysql database has: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+-----------------+
| Tables_in_mysql |
+-----------------+
| columns_priv    |
| db              |
| func            |
| host            |
| tables_priv     |
| user            |
+-----------------+
6 rows in set (0.00 sec)
</pre>
}}

The user table is the table we're after. However, the user table contains 30 different fields, making it very hard to read. In order to make things easier to read, we'll go ahead and use the third version of the <code>SELECT</code> statement. The fields we're after are Host and User. 

{{Cmd|SELECT Host,User FROM user WHERE User {{=}} 'guest';|prompt=mysql&gt; |output=<pre>
+-----------+-------+
| Host      | User  |
+-----------+-------+
| localhost | guest |
+-----------+-------+
1 row in set (0.00 sec)
</pre>
}}

Now that we have our information, we can get rid of the guest user. This is done with the <code>DELETE</code> command and the syntax is shown below. 

{{Code|DELETE Syntax|<pre>
DELETE FROM table WHERE field='value';
</pre>
}}

You may notice that <code>DELETE</code> is somewhat similiar to the <code>SELECT</code> statement in its format. In this case, the field will be User, and the value guest. This will delete the record in the user table where the user is guest, successfully deleting our guest user account. Let's go ahead and do that: 

{{Cmd|DELETE FROM user WHERE User{{=}}'guest';|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.07 sec)
</pre>}}

{{Cmd|FLUSH PRIVILEGES;|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

It seems to have worked ok. Let's test by logging out and attempting to login as our guest user. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
ERROR 1045: Access denied for user: 'guest@localhost' (Using password: YES)
</pre>
}}

Our user is now successfully deleted! 

=== Conclusion ===

While this guide focuses mainly on setting up MySQL on the command line, a few alternatives are available in GUI form: 

* [http://www.phpmyadmin.net/home_page/ phpMyAdmin] - Popular php based MySQL administration tool.
* [http://sourceforge.net/projects/mysqlnavigator/ mysqlnavigator] - QT frontend to MySQL.
* [http://gmyclient.sourceforge.net/ gmyclient] - A GNOME based MySQL client.
* [http://www.knoda.org/ knoda] - A KDE MySQL client.

This ends the MySQL introductory tutorial. I hope this gives you a better understanding of the basics behind MySQL and getting a database set up.

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:

* Chris White
* Shyam Mani
* Xavier Neys
