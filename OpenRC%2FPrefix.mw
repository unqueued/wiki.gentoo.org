This work is a reponse to {{Bug|196294}}.

The following guideline applies to a Gentoo Prefix on RHEL-5.6 amd64 and on Debian 6.0 amd64, for other setups it should be similar. Feel free to documents corner cases here.

== Using heroxbd's overlay ==
This is a developer's overlay by heroxbd. The changes will be reviewed and included in the official tree gradually. As of Aug 11, 2012, the overlay includes sys-apps/portage-9999 (for keeping /etc/{init,conf}.d and fixing shebangs inside), sys-apps/openrc-9999 (for adding back Prefix support and exporting EPREFIX) and baselayout-prefix (to avoid file collision).

Let's add heroxbd's overlay with [[Layman]] from app-portage/layman,

{{Cmd|layman -a heroxbd}}

Make sure overlays from layman are effective,

{{File|${EPREFIX}/etc/portage/make.conf|populate overlay in make.conf|<pre>
...
source /gentoo/var/lib/layman/make.conf
...
</pre>}}

replace /gentoo with your own $EPREFIX.

Details for playing with layman can be found at [[Layman]].

=== install portage from the overlay ===
* Default portage in prefix removes /etc/{init,conf}.d directories with prompts like
{{Code||<pre>
* removed /etc/init.d and /etc/conf.d directories until bug #196294 has been resolved
</pre>}}

emerge portage from heroxbd's overlay to disable this behavior. 

{{Emerge|params=--autounmask-write
|{{=}}sys-apps/portage-9999}}

{{Note|sys-apps/portage-9999 is from git and provides no keyword. One easy way to unmask is autounmask feature of portage, as the command line above.}}

=== install masked version of baselayout-prefix from the main tree ===

* baselayout-prefix comes from baselayout-1, which has file-collision with openrc. emerge sys-apps/baselayout-prefix-1.12.14-r1 to remove the offending files.

{{Emerge|params=--autounmask-write
|{{=}}sys-apps/baselayout-prefix-1.12.14-r1}}

{{Note|sys-apps/baselayout-prefix-1.12.14-r1 is masked for testing. One easy way to unmask is autounmask feature of portage, as the command line above.}}

== Getting openrc-9999 emerged on prefix ==

openrc is not out of box now, first attempt gives

{{Emerge|{{=}}openrc-9999|output=<pre>
These are the packages that would be merged, in reverse order:

Calculating dependencies... done!
[ebuild  N    *] sys-apps/openrc-9999::prefix-openrc  USE="ncurses unicode -debug (-pam) (-selinux) -static-libs" 0 kB
[ebuild  N    *]  sys-libs/glibc-9999::tauon  USE="-debug -gd -glibc-omitfp (-hardened) (-multilib) -profile (-selinux) -vanilla" 0 kB
[ebuild  N     ]  virtual/init-0::gentoo  0 kB
[ebuild  N    *]   sys-apps/sysvinit-2.88-r3::gentoo  USE="(-ibm) (-selinux) -static" 104 kB
[nomerge       ] sys-libs/glibc-9999::tauon  USE="-debug -gd -glibc-omitfp (-hardened) (-multilib) -profile (-selinux) -vanilla" 
[ebuild  N     ]  sys-libs/timezone-data-2012c::gentoo  USE="nls" 334 kB
[blocks B      ] <sys-apps/util-linux-2.20 ("<sys-apps/util-linux-2.20" is blocking sys-apps/sysvinit-2.88-r3)
</pre>}}

Let's eliminate the blocks.

=== glibc and sysvinit ===
In Gentoo Prefix, glibc and sysvinit are supposed to be provided outside Prefix by host OS. Let's tell portage that we have any version of glibc and sysvinit she wants:

{{File|${EPREFIX}/etc/portage/profile/package.provided|Example for providing glibc and sysvinit from outside|<pre>
sys-libs/glibc-9999
sys-apps/sysvinit-9999
</pre>}}

now it becomes,

{{Emerge|{{=}}openrc-9999|output=<pre>
These are the packages that would be merged, in reverse order:

Calculating dependencies... done!
[ebuild  N    *] sys-apps/openrc-9999::prefix-openrc  USE="ncurses unicode -debug (-pam) (-selinux) -static-libs" 0 kB
[ebuild  N     ]  virtual/init-0::gentoo  0 kB

Total: 2 packages (2 new), Size of downloads: 0 kB

The following keyword changes are necessary to proceed:
#required by =openrc-9999 (argument)
=sys-apps/openrc-9999 **

NOTE: The --autounmask-keep-masks option will prevent emerge
      from creating package.unmask or ** keyword changes.
</pre>}}

Finally emerge openrc-9999,
{{RootCmd|emerge --autounmask-write --ask baselayout}}
Unmask openrc-9999 as guided. (This is just a temperary solution, will be integraded into openrc soon.)

=== OpenRC config ===
Use the prefix feature set in openrc,

{{File|${EPREFIX}/etc/rc.conf|select prefix|<pre>
...
# LINUX SPECIFIC OPTIONS

# This is the subsystem type. Valid options on Linux:
# ""        - nothing special
# "lxc"     - Linux Containers
# "openvz"  - Linux OpenVZ
# "prefix"  - Prefix
# "uml"     - Usermode Linux
# "vserver" - Linux vserver
# "xen0"    - Xen0 Domain
# "xenU"    - XenU Domain
# If this is commented out, automatic detection will be attempted.
# Note that autodetection will not work in a prefix environment or in a
# linux container.
#
# This should be set to the value representing the environment this file is
# PRESENTLY in, not the virtualization the environment is capable of.
rc_sys="prefix"
...
</pre>}}

remove dmesg from sysinit, because we don't manange dmesg from Preifx
{{RootCmd|rc-update del dmesg sysinit}}

== Example: tinc ==
[http://www.tinc-vpn.org tinc] is a decentralized VPN. A tinc started from Gentoo Prefix can serve as a relay node in the VPN, if tun/tap is not available for normal user.

emerge tinc, or re-emerge to get its initd and confd files back with our new portage
{{Emerge|tinc}}

=== prefixify init script ===
{{RootCmd|for d in usr var etc; do sed -i "s,/${d},${EPREFIX}/${d},g" ${EPREFIX}/etc/init.d/tincd; done}}

fix shebang in the init script,
{{RootCmd|sed -i "s,\!/sbin,\!${EPREFIX}/sbin," ${EPREFIX}/etc/init.d/tincd}}

=== fire up tincd from OpenRC ===
Make necessary changes in ${EPREFIX}/etc/conf.d/tinc.networks and ${EPREFIX}/etc/tinc according to your specific setup.

Add tincd into default runlevel
{{RootCmd|rc-update add tincd default}}

Finally we are done with
{{RootCmd|rc default|output=<pre>
 * Starting tinc VPN networks ...
 * Starting tinc network manifold ... [ ok ]
 * Starting local                     [ ok ]
</pre>}}

== Example: nginx ==
[http://nginx.org/ nginx] is a efficient lightweight http server.

emerge nginx, or re-emerge to get its initd and confd files back with our new portage
{{Emerge|nginx}}

=== prefixify init script ===
{{RootCmd|for d in usr var etc; do sed -i "s,/${d},${EPREFIX}/${d},g" ${EPREFIX}/etc/init.d/nginx; done}}
fix shebang in the init script, 
{{RootCmd|sed -i "s,\!/sbin,\!${EPREFIX}/sbin," ${EPREFIX}/etc/init.d/nginx}}

=== prefixify nginx.conf ===
{{RootCmd|for d in usr var etc; do sed -i "s,/${d},${EPREFIX}/${d}," ${EPREFIX}/etc/nginx/nginx.conf; done}}

=== normal privilege ===
* remove "user nginx nginx;" from the first line of ${EPREFIX}/etc/nginx/nginx.conf
* You cannot listen on port 80 without root privilege. Change it to 8008,

{{File|${EPREFIX}/etc/nginx/nginx.conf|listen on 8008|<pre>
...
http {
    ...
    server {
        ...
        listen [::]:8008;
        ...
    }
    ...
}
</pre>}}

=== add nginx to default runlevel and fire up ===
{{RootCmd|rc-update add nginx default}}
{{RootCmd|rc default|output=<pre>
 * Checking nginx' configuration ... [ ok ]
 * Starting nginx ...                [ ok ]
</pre>}}
{{RootCmd|netstat -nlp {{!}} grep  nginx|output=<pre>
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
tcp6       0      0 :::8008                 :::*                    LISTEN      570/nginx: master p
</pre>}}

== See also ==
* [http://www.gentoo.org/proj/en/base/openrc/ Gentoo OpenRC project page]

== External resources ==
[http://www.awa.tohoku.ac.jp/~benda/projects/openrc.html Benda's OpenRC page]
