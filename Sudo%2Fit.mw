<languages />

{{Metadata|abstract=Il comando sudo fornisce una via semplice e sicura per configurare la scalate dei privilegi, permettendo, ad esempio, agli utenti normali di eseguire certi (o tutti) comandi  come root o come un differente utente, eventualmente senza fornire alcuna password.}}

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://www.sudo.ws/|header=true}}
|{{InfoBox wikipedia|sudo}}
|{{InfoBox gitweb|http://www.sudo.ws/repos/sudo|raw=true}}
}}

Il comando {{c|sudo}} fornisce una via semplice e sicura per configurare la scalata dei privilegi, permettendo, ad esempio, agli utenti di eseguire certi (o tutti) comandi come root o come un altro utente differente, eventualmente senza fornire alcuna password.

Quando si vuole che altri utenti possano eseguire certe azioni amministrative sul proprio sistema senza concedere il totale accesso root, l'uso di <code>sudo</code> è la migliore opzione. Con sudo è possibile chi può fare e cosa può essere fatto. Questa guida offre una piccola introduzione a questo strumento.

__TOC__

Questo articolo intende essere una veloce introduzione a {{c|sudo}}. Il pacchetto {{Package|app-admin/sudo}} è molto più potente di quanto si descritto in questo documento. Infatti, ha funzionalità speciali per modificare file come differente utente ({{c|sudoedit}}), eseguire dall'interno di uno script (lanciato in background, leggere la password dallo standard-in in alternativa alla tastiera, ...), ecc. 

Per favore leggi le pagine del manuale di {{c|sudo}} e di {{c|sudoers}} per avere maggiori informazioni.

== Installazione ==

=== Flags USE ===

{{USEflag|package=app-admin/sudo}}

=== Emerge === 

{{Emerge|app-admin/sudo}}

== Configurazione == 

=== Attività di log === 

One additional advantage of {{c|sudo}} is that it can log any attempt (successful or not) to run an application. This is very useful if you want to track who made that one fatal mistake that took you 10 hours to fix :) 

=== Ottenimento dei permessi === 

Il pacchetto {{Package|app-admin/sudo}} permette all'amministratore del sistema di ottenere i permessi di altri utenti per eseguire una o più applicazioni di cui solitamente non si hanno i diritti. Diversamente dall'uso del bit <code>setuid</code> su queste applicazioni, {{c|sudo}} dà un grana di controllo molto fine su ''chi'' può eseguire certi comandi e ''quando'' questo può essere fatto. 

Con {{c|sudo}} è possibile fare una chiara lista di ''chi'' può eseguire una certa applicazione. Mentre se si usasse il bit <code>setuid</code>, ogni utente potrebbe essere autorizzato ad eseguire questa applicazione (oppure ogni utente di un certo gruppo, in base ai permessi usati). E' possibile (e probabilmente si dovrebbe) richiedere all'utente di fornire una password quando questo vuol eseguire un dato programma. 

La configurazione di {{c|sudo}} è gestita dal file {{Path|/etc/sudoers}}. Questo file non dovrebbe essere mai modificato tramite {{c|nano /etc/sudoers}} o {{c|vim /etc/sudoers}} o ogni altro editor. Quando si vuole alterare questo file, andrebbe usato il comando {{c|visudo}}. 

Questo strumento garantisce che non ci siano due amministratore che contemporaneamente stiano modificando questo file allo stesso momento, preserva i permessi del file ed esegue alcuni controlli sintattici per essere sicuro che non ci siano errori fatali nel file. 

=== Sintassi di base ===

La parte più difficile di {{c|sudo}} è la sintassi del file {{Path|/etc/sudoers}}. La sintassi di base è simile alla seguente: 

{{CodeBox|title=Sintassi di base di /etc/sudoers|1=
user  host = commands
}}

Questa sintassi dice a {{c|sudo}} che l'utente, identificato da <code>user</code> e loggato nel sistema <code>host</code> può eseguire ogni comando elencato nella clausola <code>commands</code> come utente root. Un esempio più aderente alla realtà rende questo più chiaro: permettere l'utente {{c|larry}} di eseguire il comando {{c|merge}} se è loggato nel sistema localhost: 

{{CodeBox|title=Esempio di /etc/sudoers|1=
larry  localhost = /usr/bin/emerge
}}

{{Note|L'hostname deve corrispondere con quanto ritornato dal comando {{c|hostname}}.}}

{{Warning|Do not allow a user to run an application that can allow people to elevate privileges. For instance, allowing users to execute {{c|emerge}} as root can indeed grant them full root access to the system because {{c|emerge}} can be manipulated to change the live file system to the user's advantage. If you do not trust your {{c|sudo}} users, don't grant them any rights.}}

Il nome utente può essere anche sostituito con il nome del gruppo - in questo caso il nome del gruppo andrebbe  prefissato con il segno <code>%</code>. Per esempio, per permettere ad ogni utente nel gruppo {{c|wheel}} di eseguire {{c|emerge}}: 

{{CodeBox|title=Permettere ai membri del gruppo wheel di eseguire emerge|1=
%wheel  localhost = /usr/bin/emerge
}}

You can extend the line to allow for several commands (instead of making a single entry for each command). For instance, to allow the same user to not only run {{c|emerge}} but also {{c|ebuild}} and {{c|emerge-webrsync}} as root: 

{{CodeBox|title=Comandi multipli|1=
larry  localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
}}

You can also specify a precise command and not only the tool itself. This is useful to restrict the use of a certain tool to a specified set of command options. The {{c|sudo}} tool allows shell-style wildcards (AKA meta or glob characters) to be used in path names as well as command-line arguments in the sudoers file. Note that these are ''not'' regular expressions. 

Let us put this to the test: 

{{Cmd|sudo emerge -uDN world|output=<pre>
We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:
  
    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.
  
Password: ## (Enter the user password, not root!)
</pre>
}}

The password that {{c|sudo}} requires is the user's own password. This is to make sure that no terminal that you accidentally left open to others is abused for malicious purposes. 

You should know that {{c|sudo}} does not alter the <code>${PATH}</code> variable: any command you place after {{c|sudo}} is treated from ''your'' environment. If you want the user to run a tool in for instance {{Path|/sbin}} he should provide the full path to {{c|sudo}}, like so: 

{{Cmd|sudo /usr/sbin/emerge-webrsync}}

=== Basic syntax with LDAP === 

The <code>ldap</code> and <code>pam</code> USE flags are needed for the LDAP support.

When using sudo with LDAP, sudo will read configuration from LDAP Server as well.
So you will need to edit two files.

{{FileBox|filename=/etc/ldap.conf.sudo|title=Please chmod 400 when done|1=
# See ldap.conf(5) and README.LDAP for details
# This file should only be readable by root
  
# supported directives: host, port, ssl, ldap_version
# uri, binddn, bindpw, sudoers_base, sudoers_debug
# tls_{checkpeer,cacertfile,cacertdir,randfile,ciphers,cert,key
  
host ldap.example.com
port 389
  
base dc=example,dc=com
  
uri ldap://ldap.example.com/
#uri ldapi://%2fvar%2frun%2fopenldap%2fslapd.sock
  
ldap_version 3
#ssl start_tls
  
sudoers_base ou=SUDOers,dc=example,dc=com
#sudoers_debug 2
  
bind_policy soft
}}

{{FileBox|filename=/etc/nsswitch.conf|title=Please add the sudoers line|1=
sudoers:     ldap files
}}

Also you will need to add in the following LDAP Entry for Sudo.

{{Note|It was design so that the Sudoers branch are on top of the tree for security reason. So you can have a different access right from ldap to read/write to this branch}}

{{CodeBox|title=Ldap Entry for Sudo|lang=ldif|1=
version: 1
DN: ou=SUDOers,dc=example,dc=com
objectClass: organizationalUnit
objectClass: top
objectClass: domainRelatedObject
associatedDomain: example.com
ou: SUDOers
  
DN: cn=defaults,ou=SUDOers,dc=example,dc=com
objectClass: top
objectClass: sudoRole
cn: defaults
description: Default sudoOption's go here
sudoOption: env_reset
  
DN: cn=root,ou=SUDOers,dc=example,dc=com
objectClass: top
objectClass: sudoRole
cn: root
sudoCommand: ALL
sudoHost: ALL
sudoUser: root
  
DN: cn=%wheel,ou=SUDOers,dc=example,dc=com
objectClass: top
objectClass: sudoRole
cn: %wheel
sudoCommand: ALL
sudoHost: ALL
sudoOption: !authenticate
sudoUser: %wheel
}}

{{CodeBox|title=Ldap Entry for wheel Group|lang=ldif|1=
version: 1
DN: cn=wheel,ou=Group,dc=example,dc=com
objectClass: top
objectClass: posixGroup
cn: wheel
description: Wheel Group
gidNumber: 10
memberUid: useradmin1
memberUid: root
}}

The configuration on the sudoer on LDAP are similar to files with some different. Please read more about Sudo with LDAP on the link below.<ref name="test">[http://www.sudo.ws/sudo/sudoers.ldap.man.html]Sudoers LDAP man Page</ref>

<references />

=== Using aliases ===

In larger environments having to enter all users over and over again (or hosts, or commands) can be a daunting task. To ease the administration of {{Path|/etc/sudoers}} you can define ''aliases''. The format to declare aliases is quite simple: 

{{CodeBox|title=Declaring aliases in /etc/sudoers|1=
Host_Alias hostalias = hostname1, hostname2, ...
User_Alias useralias = user1, user2, ...
Cmnd_Alias cmndalias = command1, command2, ...
}}

One alias that always works, for any position, is the <code>ALL</code> alias (to make a good distinction between aliases and non-aliases it is recommended to use capital letters for aliases). As you might undoubtedly have guessed, the <code>ALL</code> alias is an alias to all possible settings. 

A sample use of the <code>ALL</code> alias to allow ''any'' user to execute the {{c|shutdown}} command if he is logged on locally is: 

{{CodeBox|title=Allowing any user to execute shutdown|lang=bash|1=
ALL  localhost = /sbin/shutdown
}}

Another example is to allow the user {{c|larry}} to execute the {{c|emerge}} command as root, regardless of where he is logged in from: 

{{CodeBox|title=Allowing a user to run an application regardless of his location|1=
larry   ALL = /usr/bin/emerge
}}

More interesting is to define a set of users who can run software administrative applications (such as {{c|emerge}} and {{c|ebuild}}) on the system and a group of administrators who can change the password of any user, except root! 

{{CodeBox|title=Using aliases for users and commands|1=
User_Alias  SOFTWAREMAINTAINERS = larry, john, danny
User_Alias  PASSWORDMAINTAINERS = larry, sysop
Cmnd_Alias  SOFTWARECOMMANDS    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  PASSWORDCOMMANDS    = /usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root
  
SOFTWAREMAINTAINERS  localhost = SOFTWARECOMMANDS
PASSWORDMAINTAINERS  localhost = PASSWORDCOMMANDS
}}

=== Non-root execution ===

It is also possible to have a user run an application as a different, non-root user. This can be very interesting if you run applications as a different user (for instance {{c|apache}} for the web server) and want to allow certain users to perform administrative steps as that user (like killing zombie processes). 

Inside {{Path|/etc/sudoers}} you list the user(s) in between <code>(</code> and <code>)</code> before the command listing: 

{{CodeBox|title=Non-root execution syntax|1=
users  hosts = (run-as) commands
}}

For instance, to allow {{c|larry}} to run the {{c|kill}} tool as the {{c|apache}} or {{c|gorg}} user: 

{{CodeBox|title=Non-root execution example|1=
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill
  
larry   ALL = (apache, gorg) KILL
}}

With this set, the user can run {{c|sudo -u}} to select the user he wants to run the application as: 

{{Cmd|sudo -u apache pkill apache}}

You can set an alias for the user to run an application as using the <code>Runas_Alias</code> directive. Its use is identical to the other <code>_Alias</code> directives we have seen before. 

=== Passwords and default settings ===

By default, {{c|sudo}} asks the user to identify himself using his own password. Once a password is entered, {{c|sudo}} remembers it for 5 minutes, allowing the user to focus on his tasks and not repeatedly re-entering his password. 

Of course, this behavior can be changed: you can set the <code>Defaults:</code> directive in {{Path|/etc/sudoers}} to change the default behavior for a user. 

For instance, to change the default 5 minutes to 0 (never remember): 

{{CodeBox|title=Changing the timeout value|1=
Defaults:larry  timestamp_timeout=0
}}

A setting of <code>-1</code> would remember the password indefinitely (until the system reboots). 

A different setting would be to require the password of the user that the command should be run as and not the users' personal password. This is accomplished using <code>runaspw</code>. In the following example we also set the number of retries (how many times the user can re-enter a password before {{c|sudo}} fails) to <code>2</code> instead of the default 3: 

{{CodeBox|title=Requiring the root password instead of the user's password|1=
Defaults:john   runaspw, passwd_tries=2
}}

Another interesting feature is to keep the <code>DISPLAY</code> variable set so that you can execute graphical tools: 

{{CodeBox|title=Keeping the DISPLAY variable alive|1=
Defaults:john env_keep=DISPLAY
}}

You can change dozens of default settings using the <code>Defaults:</code> directive. Fire up the {{c|sudoers}} manual page and search for <code>Defaults</code>. 

If you however want to allow a user to run a certain set of commands without providing any password whatsoever, you need to start the commands with <code>NOPASSWD:</code>, like so: 

{{CodeBox|title=Allowing emerge to be ran as root without asking for a password|1=
larry     localhost = NOPASSWD: /usr/bin/emerge
}}

=== Bash completion ===

Users that want bash completion with sudo need to run this once.

{{Cmd|sudo echo "complete -cf sudo" >> $HOME/.bashrc}}

=== Zshell completion ===

Users that want zsh completion for sudo can set the following in {{Path|.zprofile}} and {{Path|.zshrc}} respectively

{{FileBox|filename=.zprofile|title=Adding zshell completion|lang=bash|1=
if [[ $EUID != 0 ]]; then
    typeset -xT SUDO_PATH sudo_path
    typeset -U sudo_path 
    sudo_path=({,/usr/local,/usr}/sbin(N-/))
    alias sudo="sudo env PATH=\"SUDO_PATH:$PATH\""
fi
}}

{{FileBox|filename=.zshrc|title=Adding zshell completion|lang=bash|1=
zstyle ':completion:*:sudo:*' environ PATH="$SUDO_PATH:$PATH"
}}

With the above change, all commands in the {{Path|/sbin}}, {{Path|/usr/sbin}} and {{Path|/usr/local/sbin}} locations will be available to the shell for completion when the command is prefaced with 'sudo'.

== Usage ==

=== Listing privileges ===

To inform yourself what your capabilities are, run {{c|sudo -l}} : 

{{Cmd|sudo -l|output=<pre>
User larry may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z0-9_-]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
</pre>
}}

If you have any command in {{Path|/etc/sudoers}} that does not require you to enter a password, it will not require a password to list the entries either. Otherwise you might be asked for your password if it isn't remembered. 

=== Prolonging password timeout ===

By default, if a user has entered their password to authenticate their self to {{c|sudo}}, it is remembered for 5 minutes. If the user wants to prolong this period, he can run {{c|sudo -v}} to reset the time stamp so that it will take another 5 minutes before {{c|sudo}} asks for the password again. 

{{Cmd|sudo -v}}

The inverse is to kill the time stamp using {{c|sudo -k}}. 


[[Category:Software]]
