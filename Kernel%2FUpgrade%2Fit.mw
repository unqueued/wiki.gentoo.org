<languages />

{{Metadata|abstract=Questo articolo descrive i passi necessari per aggiornare ad un nuovo kernel.}}

Questo articolo descrive la procedura per l'aggiornamento ad un nuovo [[kernel]].

== Installazione ed uso di un nuovo kernel ==

L'aggiornamento del kernel potrebbe essere una buona idea quando dei nuovi sorgenti sono stati rilasciati. I nuovi sorgenti del kernel sono a volte installati durante l'aggiornamento del sistema tramite il seguente comando

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse @world}}

Ovviamente i sorgenti del kernel possono essere installati direttamente usando il seguente comando (si sostituisca "gentoo-sources" con "hardened-sources" quando si sta usando un profilo hardened):

{{RootCmd|emerge --ask --update --deep --with-bdeps{{=}}y --newuse sys-kernel/gentoo-sources}}

L'installazione di nuovi sorgenti del kernel non fornisce all'utente un nuovo kernel. E' necessario produrre ed installare un nuovo kernel dai nuovi sorgenti e quindi riavviare il sistema per eseguire effettivamente il nuovo kernel.

La generazione di un nuovo kernel dai nuovi sorgenti è lo stesso processo di creazione di un kernel durante l'installazione del sistema. La differenza è che si potrebbe usare la configurazione del vecchio kernel per creare la configurazione del nuovo kernel. L'uso della vecchia configurazione permette l'utente di evitare di  esplorare tutte le opzioni del kernel nuovamente (come {{c|make menuconfig}})

La configurazione del kernel è salvata in un file nominato {{Path|.config}} nella directory che contiene il kernel stesso. Un nuovo kernel potrebbe avere opzioni e funzionalità che un vecchio kernel non possedeva, o potrebbe non avere funzionalità o opzioni possedute da un vecchio kernel. La configurazione del kernel specifica quali funzionalità e opzioni di un kernel debbano essere abilitate o meno, quali includere nel kernel, o quali dovranno essere incluse come moduli che potranno essere caricate in un kernel in esecuzione on demand. Quindi il file di configurazione di un nuovo kernel potrebbe avere nuove voci di configurazioni non presenti nel vecchio kernel, e potrebbe non avere alcune voci presenti invece nel file di configurazione del vecchio kernel.

Per far fronte a tali cambiamenti del file di configurazione, il file di configurazione del vecchio kernel deve essere convertito in una configurazione utilizzabile con il nuovo. Questo articolo mostra come creare un nuovo kernel da nuovi sorgenti del kernel con la conversione del file di configurazione provenienti dal vecchio kernel.

== Creare un backup della configurazione del kernel corrente ==

E' importante fare un backup della configurazione del kernel in modo che le configurazioni precedenti non siano perse. Dopo tutto, molti utenti dedicano molto tempo a definire la migliore configurazione per il sistema, e perdere queste informazioni non è sicuramente desiderato.

Generare un backup della configurazione corrente del kernel è facile:

{{RootCmd|cd /usr/src/linux
|cp .config ~/kernel-config-`uname -r`|}}

A condizione che il collegamento simbolico ai sorgenti del kernel sia stato creato correttamente, questo comando copia lla configurazione del kernel correntemente usato nella home directory dell'utente root, rinominando il file di configurazione in {{Path| kernel-config-}} seguito dalla versione del kernel Linux attualmente in esecuzione.

== Impostare il link simbolico ai sorgenti del nuovo kernel ==

Il link simbolico{{Path|/usr/src/linux}} dovrebbe sempre puntare alla directory contenente i sorgenti del kernel attualmente in esecuzione. Questo può essere fatto in uno dei tre dei seguenti modi:

# Installare i sorgenti del kernel con la clausola <code>USE="symlink"</code>
# Impostare il link con <code>eselect</code>
# Aggiornare manualmente il link simbolico

=== Installare i sorgenti del kernel con la USE flag "symlink" ===

Questo implicherà che {{Path|/usr/src/linux}} punti alla directory dei sorgenti del nuovo kernel.

Se necessario, il link può essere comunque modificato successivamente con uno degli altri due metodi.

=== Configurazione del link con eselect ===

To set the symlink with {{c|eselect}}:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
 [1] linux-3.14.14-gentoo *
 [2] linux-3.16.3-gentoo
</pre>}}

This outputs the available kernel sources. The asterisk indicates the chosen sources.

To change the kernel sources, e.g. to the second entry, do:

{{RootCmd|eselect kernel set 2}}

=== Manually updating the symbolic link ===

To set the symbolic link manually:

{{RootCmd|ln -sf /usr/src/linux-3.16.3 /usr/src/linux
|ls -l /usr/src/linux|output=<pre>
lrwxrwxrwx 1 root root 19 Oct  4 10:21 /usr/src/linux -> linux-3.16.3-gentoo
</pre>}}

== Copy previous kernel configuration ==

The configuration of the old kernel needs to be copied to the new one. It can be found in several places:

* In the [[procfs]] filesystem, if the kernel option ''Enable access to .config through /proc/config.gz'' was activated in the present kernel:
: {{RootCmd|zcat /proc/config.gz > /usr/src/linux/.config}}

* In the {{Path|/boot}} directory, if the configuration was installed there:
: {{RootCmd|cp /boot/config-3.14.14-gentoo /usr/src/linux/.config}}

* In the kernel directory of the currently-running kernel:
: {{RootCmd|cp /usr/src/linux-3.14.14-gentoo/.config /usr/src/linux/}}

* In the {{Path|/etc/kernels/}} directory, if <code>SAVE_CONFIG="yes"</code> is set in {{Path|/etc/genkernel.conf}} and {{c|[[genkernel]]}} was previously used:
: {{RootCmd|cp /etc/kernels/kernel-config-x86_64-3.14.14-gentoo /usr/src/linux/.config}}

== Configure the new kernel ==

To use the configuration of the old kernel with the new kernel, it needs to be converted.  The conversion can be done by running either {{c|make silentoldconfig}} or {{c|make olddefconfig}}. Use either, not both.

=== make silentoldconfig ===

The following configuration is like the text based configuration with {{c|make config}}.  For new configuration options, the user is asked for a decision. For example:

{{RootCmd|cd /usr/src/linux
|make silentoldconfig|output=<pre>
Anticipatory I/O scheduler (IOSCHED_AS) [Y/n/m/?] (NEW)
</pre>}}

The string ''(NEW)'' at the end of the line marks this option as new. Left to the string in square brackets are the possible answers: ''Y''es, ''n''o, ''m''odule or ''?'' to show the help. The recommend (i.e. default) answer is capitalized (here ''Y''). The help explains the option or driver.

Unfortunately {{c|make silentoldconfig}} doesn't show a lot more information for each option, such as the context, so it is sometimes difficult to give the right answer. In this case the best way to go is to remember the option name and revise it afterwards through one of the [[Kernel/Configuration#Configuration tools|graphical kernel configuration tools]].

=== make olddefconfig ===

If all new configuration options should be set to their recommended (i.e. default) values use {{c|make olddefconfig}}:

{{RootCmd|cd /usr/src/linux
|make olddefconfig}}

=== make help ===

Use {{c|make help}} to see other conversion methods available:

{{RootCmd|make help}}

== Build ==

{{Important|When external kernel modules are installed (like nvidia or zfs), it may be necessary to run {{c|make modules_prepare}} as described [[Kernel/Upgrade#Reinstall external kernel modules|below]] before building the kernel. Some modules cannot be installed or prepared before the kernel has been built.}}

{{Important|Do not forget to reconfigure the [[Bootloader|bootloader]] to account for the new kernel filenames, and rebuild the initramfs if one is used as well.}}

For this step, follow the steps in the [[Kernel/Configuration#Build|manual configuration]] article.

== Reinstalling external kernel modules ==

Any external kernel modules, such as [[:Category:Binary kernel modules|binary kernel modules]], need to be rebuilt for each new kernel. If the kernel has not been built yet, it has to first be prepared for the building of the external kernel modules:

{{RootCmd|make modules_prepare}}

Packages containing kernel modules can be rebuilt using the <code>@module-rebuild</code> set:

{{Emerge|@module-rebuild}}

== Solving build problems ==

When experiencing build problems while rebuilding the current kernel, it might help to sanitize the kernel sources. Make sure to backup the {{Path|.config}} file first, as the operation will remove it. Make sure not to use a {{Path|.bak}} or {{Path|~}} suffix as backup as {{c|make distclean}} will clean those up as well.

{{RootCmd|cp .config /usr/src/kernel_config_bk
|make distclean
|mv /usr/src/kernel_config_bk .config}}

== Rimozione dei vecchi kernel ==

Si veda l'articolo [[Kernel/Removal|Rimozione del kernel]]. 

== Risorse esterne ==

* [http://kernelnewbies.org/LinuxChanges kernel changelog con alcune spiegazioni in merito alle nuove funzionalità]

[[Category:Kernel]]
