<noinclude>{{:{{ROOTPAGENAME}}/TOC}}</noinclude>

Cross-compile a kernel for your system with flair!

== Sources ==

First install the relevant kernel sources. You can use a package from the Gentoo portage tree or fetch your own from https://www.kernel.org/ or some other kernel source. The method for actually compiling the kernel is all the same.

You should install the kernel into the sysroot so that if you want to cross-compile packages which include kernel modules, the process will be transparent. Otherwise, the actual place where you build the kernel does not matter. Some people build all their kernels in {{Path|/usr/src/}} for example.

== Setup cross-compiling ==

There are two fundamental variables that the kernel uses to select the target architecture. Normally these values are guessed based on your build environment, but of course that environment here does not match our target embedded system, so we'll need to override them. The variables in question are <var>ARCH</var> and <var>CROSS_COMPILE</var>. The default values for both are found in the toplevel Makefile and the values of both may be overriden on the command line.

The <var>ARCH</var> variable is the architecture you're targetting as the kernel knows it. So while portage and other people may use "x86", the kernel uses "i386". Peek in the arch/ subdirectory real quick to figure out what you want to use.

Hopefully the <var>CROSS_COMPILE</var> variable is pretty self-explanatory. Set this to the prefix of your toolchain (including the trailing dash "-"). So if your toolchain is invoked as say {{c|x86_64-pc-linux-gnu-gcc}}, just chop off that trailing {{c|gcc}} and that's what you use: {{c|x86_64-pc-linux-gnu-}}.

There is an additional variable, <var>INSTALL_MOD_PATH</var>, which defines where the {{Path|/lib}} directory will be created, and all the modules stored. While you don't have to transfer the kernel sources to your target device, if you build any modules, you'll want this directory.

There are really two ways you can setup the system. You can modify the toplevel {{Path|Makefile}} or you can override the relevant variables on the command line. How you do it is largely a matter of taste, so we'll cover both. Pick one of the following.

{{FileBox|filename=Makefile|title=The vanilla Makefile|lang=makefile|1=
ARCH            ?= $(SUBARCH)
CROSS_COMPILE   ?= 
}}

{{FileBox|filename=Makefile|title=Set the <var>ARCH</var> and <var>CROSS_COMPILE</var> default values|lang=makefile|1=
ARCH            ?= arm
CROSS_COMPILE   ?= arm-unknown-linux-gnu-
}}

Overriding on the command-line (instead of in the {{Path|Makefile}}) would look something like this:

{{RootCmd|make ARCH{{=}}arm CROSS_COMPILE{{=}}arm-unknown-linux-gnu-}}

You can use a little helper script if you need to hop between different kernel trees at the same time. We'll call this script {{c|xkmake}}:

{{FileBox|filename=xkmake|lang=sh|1=
#!/bin/sh
exec make ARCH="arm" CROSS_COMPILE="arm-unknown-linux-gnu-" INSTALL_MOD_PATH="${SYSROOT}" "$@"
}}

So now when you want to build a kernel or do anything else, you just execute {{c|xkmake}} in place of {{c|make}}.

== Configure and compile ==

At this point, configuring and compiling the kernel is like any other kernel, so we won't go into depth as there are plenty of HOWTOs and guides out there which can treat the subject in much greater detail.

{{RootCmd
|cd "${SYSROOT}/usr/src/linux"
|xkmake menuconfig
|xkmake
}}

<noinclude>{{migrated|originalauthors=Mike Frysinger, Ned Ludd, Robin H. Johnson, Alex Tarkovsky, Alexey Shvetsov, Ra√∫l Porcel, Joshua Saddler on April 28, 2013.}}</noinclude>
