{{InfoBox stack
|{{InfoBox todo|[[#Network bridge|Network bridge]]|header=true}}
}}

This article describes some of the options useful for configuring [[QEMU]] virtual machines. For the most up to date options for the current QEMU install run {{c|man qemu}} at a terminal. It is important to note that the command has changed from {{c|qemu}} to {{c|qemu-system-x86_64}} to launch [[QEMU]] as a 64-bit virtual machine.


== Display options ==

There are a few available options to specify the kind of display to use in QEMU.

* <code>-display sdl</code> - Display video output via SDL (usually in a separate graphics window).

* <code>-display curses</code> - Displays video output via curses.

* <code>-display none</code> - Do not display video output. This option is different than the <code>-nographic</code> option. See the man page for more information.

* <code>-display gtk</code> - Display video output in a GTK window. This is probably the option most users are looking for.

* <code>-vnc 127.0.0.1:<X></code> - Start a VNC server on display X (accepts an argument (X) for the display number). Substitute X for the number of the display (0 will then listen on 5900, 1 on 5901, etc).

For example to have QEMU send the display to a GTK window add the following option to the list:

{{Cmd|-display gtk}}

== Machine ==

* <code>-machine type=q35,accel=kvm</code> - Modern chipset (PCIe, AHCI, ...) and hardware virtualization acceleration

* <code>-object rng-random,id=rng0,filename=/dev/urandom -device virtio-rng-pci,rng=rng0</code> - Pass-through for host random number generator. Accelerates startup of e.g. Debian VMs because of missing entropy.

== Processor ==

* <code>-cpu <CPU></code> - Specify a processor architecture to emulate. To see a list of supported architectures, run: {{c|qemu-system-x86_64 -cpu ?}}

* <code>-cpu host</code> - (Recommended) Emulate the host processor.

* <code>-smp <NUMBER></code> - Specify the number of cores the guest is permitted to use. The number can be higher than the available cores on the host system. Use <code>-smp $(nproc)</code> to use all currently available cores.

== RAM ==

* <code>-m MEMORY</code> - Specify the amount of memory (default: 128 MB). For instance: {{c|-m 256M}} (''M'' stands for Megabyte, ''G'' for Gigabyte).

== Hard drive ==

* <code>-hda IMAGE.img</code> - Set a virtual hard drive and use the specified image file for it.

* <code>-drive</code> - Advanced configuration of a virtual hard drive:

:* <pre>-device virtio-scsi-pci,id=scsi0 -drive file=/dev/your/block,if=none,format=raw,discard=unmap,aio=native,cache=none,id=someid -device scsi-hd,drive=someid,bus=scsi0.0</pre> Very fast Virtio SCSI emulation for block discards ([https://en.wikipedia.org/wiki/Trim_(computing) TRIM]), native command queuing ([http://en.wikipedia.org/wiki/Native_Command_Queuing NCQ]). You need at least one <code>virtio-scsi</code>-controller and for each block device a <code>-drive</code> and <code>-device scsi-hd</code> pair.

:* <code>-drive file=IMAGE.img,if=virtio</code> - Set a virtual VirtIO-BLK hard drive and use the specified image file for it.

:* <code>-drive file=/dev/sdX#,cache=none,if=virtio</code> - Set a virtual VirtIO-BLK hard drive and use the specified partition for it.

:* <code>-drive id=disk,file=IMAGE.img,if=none -device ahci,id=ahci -device ide-drive,drive=disk,bus=ahci.0</code> - Set emulation layer for an ICH-9 AHCI controller and use the specified image file for it. The AHCI emulation supports [http://en.wikipedia.org/wiki/Native_Command_Queuing NCQ], so multiple read or write requests can be outstanding at the same time.

== Optical drives ==

* <code>-cdrom IMAGE.iso</code> - Set a virtual CDROM drive and use the specified image file for it.

* <code>-cdrom /dev/cdrom</code> - Set a virtual CDROM drive and use the host drive for it.

* <code>-drive</code> - Advanced configuration of a virtual CDROM drive:

:* <code>-drive file=IMAGE.iso,media=cdrom</code> - Set a virtual CDROM drive and use the specified image file for it. With this syntax you can set multiple drives.

== Boot order ==

* <code>-boot c</code> - Boot the first virtual hard drive.

* <code>-boot d</code> - Boot the first virtual CD-ROM drive.

* <code>-boot n</code> - Boot from virtual network.

== Graphics card ==

QEMU can emulate several graphics cards:

* <code>-vga cirrus</code> - Simple graphics card. Every guest OS has a built-in driver.

* <code>-vga std</code> - Support resolutions >= 1280x1024x16. Linux, Windows XP and newer guest have a built-in driver.

* <code>-vga vmware</code> - VMware SVGA-II, more powerful graphics card. Install {{Package|x11-drivers/xf86-video-vmware}} in Linux guests, VMware Tools in Windows XP and newer guests.

* <code>-vga qxl</code> - More powerful graphics card for use with [[Wikipedia:SPICE (protocol)|SPICE]].

To get more performance use the same color depth for your host as you use in the guest.

== PCI pass-through ==

{{Note|This will NOT work for GPUs. It's completely different. Take a look [https://bbs.archlinux.org/viewtopic.php?id{{=}}162768 here] and [https://wiki.installgentoo.com/index.php/PCI_passthrough here]}}

{{KernelBox|title=For Intel processors:|1=<pre>
Device Drivers --->
    [*] IOMMU Hardware Support  --->
        [*]   Support for Intel IOMMU using DMA Remapping Devices
Bus options (PCI etc.)  --->
    <M>   PCI Stub driver
</pre>}}

{{KernelBox|title=For AMD processors:|1=<pre>
Device Drivers --->
    [*] IOMMU Hardware Support  --->
        [*]   AMD IOMMU support
Bus options (PCI etc.)  --->
    <M>   PCI Stub driver
</pre>}}

Find the host PCI device:

{{RootCmd|lspci -nn|output=<pre>
00:1b.0 Audio device [0403]: Intel Corporation 82801H (ICH8 Family) HD Audio Controller [8086:284b] (rev 02)
</pre>}}

Note down the device (00:1b.0) and vendor (8086:284b) ID.

Unbind it:

{{RootCmd
|echo "8086 284b" > /sys/bus/pci/drivers/pci-stub/new_id
|echo "0000:00:1b.0" > /sys/bus/pci/devices/0000:00:1b.0/driver/unbind
|echo "0000:00:1b.0" > /sys/bus/pci/drivers/pci-stub/bind
}}

And bind it to guest:

<code>-device pci-assign,host=00:1b.0</code>

== Networking ==

Default - without any <code>-netdev</code> option - is '''Pass-through'''.

{{Important|Pass-through method only works for TCP and UDP connections.
Thus, {{c|ping}} is not a suitable tool to test networking connectivity because it uses ICMP.
Try using {{c|curl}} or other UDP or TCP/IP software for testing.}}

=== Pass-through ===

* <code>-netdev user</code> - The QEMU process will create TCP and UDP connections for each connection in the VM. The virtual machine does not have an address reachable from the outside.

* <code>-device virtio-net,netdev=vmnic -netdev user,id=vmnic</code> - (Recommended) Pass-through with VirtIO support.

* <code>-netdev user,id=vmnic,hostfwd=tcp:127.0.0.1:9001-:22</code> - Let QEMU listen on port 9001. Connections to that port will be relayed to the VM on port 22. <code>ssh -p 9001 localhost</code> will thus log into the VM.


=== Virtual network cable (TAP) ===

* <code>-device virtio-net,netdev=vmnic -netdev tap,id=vmnic,ifname=vnet0,script=no,downscript=no</code> - A new device (<code>vnet0</code>) is created by QEMU on the host, the other end of the "cable" is at the VM. 


=== Network bridge ===

With this setup, we create a TAP interface (see above) and connect it to a virtual switch (the bridge).

Please first read about [[Network_bridge|network bridging]] and [[QEMU|QEMU]] about configuring kernel to support bridging.

Create the bridge:
{{FileBox|filename=/etc/systemd/network/vmbridge.netdev|lang=ini|1=
[NetDev]
Name=vmbridge
Kind=bridge
}}

Configure the bridge's address:
{{FileBox|filename=/etc/systemd/network/10-vmbridge.network|lang=ini|1=
[Match]
Name=vmbridge

[Network]
Description=Your awesome VM bridge
Address=10.0.42.1/24
}}

{{FileBox|filename=/your/path/to/qemu/stuff/addtobridge.sh|lang=bash|1=
#!/usr/bin/env bash
# Bring the QEMU TAP device up and add it to the bridge
ip link set "$1" master vmbridge
ip link set "$1" up
}}

Now we can run VM with the TAP networking option:

<code>-device virtio-net-pci,netdev=n0,mac=13:37:yourchoice:42 -netdev tap,id=n0,ifname=vmtap,script=/your/path/to/qemu/stuff/addtobridge.sh,downscript=no</code>

When the VM boots, the script will add the newly created device to the bridge. When you start another VM, both devices are in the bridge and the VMs can communicate with each other.

{{Note|To successfully run VM you need permission for configure /dev/net/tun}}



A more advanced networking concept is outlined below, which enables guest access to an external network and also works with both wired and wireless adapters on the host.  If desired, a DHCP server can also be setup on the host to allow for dynamic guest IP configurations.  There are many different tutorials available online to further understand these concepts.[https://blog.san-ss.com.ar/2016/04/setup-nat-network-for-qemu-macosx][https://shanetomlinson.com/2009/bridging-a-wireless-card-in-kvmqemu/][https://forums.gentoo.org/viewtopic-t-987790-start-0.html][https://superuser.com/questions/694929/wireless-bridge-on-kvm-virtual-machine][http://www.dedoimedo.com/computers/kvm-bridged.html]
[[File:Qemu_network_diag.png|center]]

==== Required packages ====

This example networking configuration needs some extra software installed:

{{Emerge|net-firewall/iptables}}

==== Host configuration ====

===== Creating TUN/TAP device =====

This allows the guest to communicate with the bridge. QEMU's default group is <code>kvm</code>, ensure that the correct group is given permissions to control the TAP. Enabling promiscuous mode (<code>promisc</code>) for the adapter might be unnecessary.

{{RootCmd
|ip tuntap add dev tap0 mode tap group kvm
|ip link set dev tap0 up promisc on
|ip addr add 0.0.0.0 dev tap0
}}

===== Create network bridge =====

Creating a network bridge seems necessary, even if only 1 guest is configured. Create the bridge and add each TAP to it. Spanning tree protocol (<code>stp</code>) is disabled because there is only 1 bridge.[https://en.wikibooks.org/wiki/QEMU/Networking#TAP_interfaces]

{{RootCmd
|ip link add br0 type bridge
|ip link set br0 up
|ip link set tap0 master br0
|echo 0 > /sys/class/net/br0/bridge/stp_state
|ip addr add 10.0.1.1/24 dev br0
}}

===== Packet forwarding and NAT =====

Allows for proper packet routing (be sure to replace <code>eth1</code> with an appropriate network interface name):

{{RootCmd
|sysctl net.ipv4.conf.tap0.proxy_arp{{=}}1
|sysctl net.ipv4.conf.eth1.proxy_arp{{=}}1
|sysctl net.ipv4.ip_forward{{=}}1
}}

{{RootCmd
|iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE
|iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
|iptables -A FORWARD -i br0 -o eth1 -j ACCEPT
}}

==== Guest configuration ====

The following should be added to the configuration:

{{CodeBox
|-device virtio-net,netdev{{=}}network0 -netdev tap,id{{=}}network0,ifname{{=}}tap0,script{{=}}no,downscript{{=}}no
}}

or, with QEMU 2.12.0 or newer:

{{CodeBox
|-nic tap,ifname{{=}}tap0,script{{=}}no,downscript{{=}}no
}}

After starting the guest, the IP should be configured to be on the vlan and the gateway should be the IP given to the bridge.  The exact process will vary based on OS.

== QEMU's built-in SMB server ==

{{Note|This will only work if you are using [[#Pass-through|Networking Pass-through]]}}

If the host system has a [[Samba|SMB]] server installed, QEMU can emulate a virtual SMB server for the guest system using the <code>-smb</code> optionː 

* <code>-smb /usr/local/public</code> - specify the folder to be shared, and it will be available to the guest as {{Path|\\10.0.2.4\qemu}}.

Automatically generated {{Path|smb.conf}} file located at {{Path|/tmp/qemu-smb.pid-0/smb.conf}}

== USB ==

* <code>-usbdevice tablet</code> - (Recommended) Use a USB tablet instead of the default PS/2 mouse. Recommend, because the tablet sends the mouse cursor's position to match the host mouse cursor.

* <code>-usbdevice host:VENDOR-ID:PRODUCT-ID</code> - Pass-through of a host USB device to the virtual machine. Determine with {{c|[[Hardware detection|lsusb]]}} the device's vendor and product ID, e.g.:
{{Cmd|lsusb|output=<pre>
Bus 001 Device 006: ID: 08ec:2039 M-Systems Flash Disk Pioneers
</pre>}}

: <code>08ec</code> is the vendor ID, <code>2039</code> is the product ID.

== Keyboard layout ==

* <code>-k LAYOUT</code> - Set the keyboard layout, e.g. ''de'' for german keyboards. Recommend for VNC connections.

== Snapshot ==

* <code>-snapshot</code> - Temporary snapshot: write all changes to temporary files instead of hard drive image.

* <code>-hda OVERLAY.img</code> - Overlay snapshot: write all changes to an overlay image instead of hard drive image. The original image is kept unmodified. To create the overlay image:
{{Cmd|qemu-img create -f qcow2 -b ORIGINAL.img  OVERLAY.img}}

[[Category:Virtualization]]
