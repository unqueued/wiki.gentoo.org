<languages />

<translate>

<!--T:35-->
{{Metadata|abstract=This guide shows you how to set up distcc for cross-compiling across different processor architectures.}}

<!--T:1-->
This guide shows you how to set up distcc for cross-compiling across different processor architectures.

== Cross-compiling with distcc == <!--T:2-->

=== Introduction === <!--T:3-->

<!--T:4-->
{{c|distcc}} is a tool that lets you share the burden of software compiling across several networked computers. As long as the networked boxes are all using the same toolchain built for the same processor architecture, no special {{c|distcc}} setup is required. 

<!--T:53-->
'''This guide provides instructions on how to configure distcc to compile for different architectures.''' 

=== Emerge the needed utilities === <!--T:5-->

<!--T:6-->
First, you will need to emerge {{c|crossdev}} on all the machines that will be involved in the compiling process. {{c|crossdev}} is a tool that makes building cross-architecture toolchains easy. Its usage is straightforward: {{c|crossdev -t sparc}} will build a full cross-toolchain targeting the Sparc architecture. This includes binutils, gcc, glibc, and linux-headers. 

<!--T:54-->
You will need to emerge the proper cross-toolchain on all the helper boxes. If you need more help, try running {{c|crossdev --help}}.

<!--T:7-->
If you want to fine tune the cross-toolchain, here is a script that will produce a command line with the exact versions of the cross development packages to be built on the helper boxes (the script is to be run on the target box).

<!--T:8-->
{{CodeBox|title=Script to fine-tune cross development tools|lang=bash|1=
#! /bin/bash
A="binutils" ; B=`eselect $A show` ; BINUTILS_VER=`echo $B {{!}} cut -d- -f5-` 
A=`/usr/bin/gcc-config -c` ; B=`echo $A {{!}} cut -d- -f5` ; GCC_VER=`equery l sys-devel/gcc {{!}} grep $B {{!}} cut -d- -f3-`
A="sys-kernel/linux-headers" ; B=`equery l $A` ; KERNEL_VER=`echo $B {{!}} cut -d- -f4-`
A="sys-libs/glibc" ; B=`equery l $A` ; LIBC_VER=`echo $B {{!}} cut -d- -f3-`
echo "crossdev --b =$BINUTILS_VER --g =$GCC_VER --k =$KERNEL_VER --l =$LIBC_VER -t $(portageq envvar CHOST)"
}}

<!--T:9-->
Next, you will need to emerge {{c|distcc}} on all the machines that will be involved in the process. This includes the box that will run emerge and the boxes with the cross-compilers. Please see the [[Distcc|Gentoo Distcc Documentation]] for more information on setting up and using {{c|distcc}}.

<!--T:40-->
{{Note|Current versions of {{c|crossdev}} have a <code>-S</code> (<code>--stable</code>) flag for installing only stable versions of compiler tools.  (ie. {{c|crossdev -t i686-pc-linux-gnu --stable --ex-gcc --ex-gdb --portage --pretend}}). Without this option, {{c|crossdev}} installs the latest experimental compiler tools packages! Otherwise, the above script is no longer needed, unless specific versions of package tools and/or headers have been unmasked.}}

=== Arch-specific notes === <!--T:36-->

<!--T:41-->
{{Note|Obtain the architecture name by looking at the compile target's <var>CHOST</var> variable within {{Path|/etc/make.conf}}. When mangling the architecture name for the {{c|crossdev -t}} option, {{c|crossdev}} will merrily guess and install tools using the mangled architecture name for folder names within {{Path|/usr}} (ie. {{Path|/usr/i686-pc-linux-gnu/}}, {{Path|/usr/i686-linux-gnu/}}, ...). To resolve this, specify each mangled architecture/folder name to {{c|crossdev --clean}} for uninstalling, or manually remove the folders from the system.}}

==== Intel x86 subarchitectures ==== <!--T:29-->

<!--T:37-->
If you are cross-compiling between different subarchitectures for Intel {{Keyword|x86}} (e.g. i586 and i686), you must still build a full cross-toolchain for the desired <var>CHOST</var>, or else the compilation will fail. This is because i586 and i686 are actually different CHOSTs, despite the fact that they are both considered "x86." Please keep this in mind when you build your cross-toolchains. For example, if the target box is i586, this means that you must build i586 cross-toolchains on your i686 helper boxes. 

==== SPARC ==== <!--T:30-->

<!--T:31-->
Using {{c|crossdev -t sparc}} might fail with one of the following errors:

<!--T:32-->
{{CodeBox|title=Errors displayed when running crossdev -t sparc|1=
linker with -z relro support required
support for the tls_model attribute is required
this configuration requires -mlong-double-128 support
}}

<!--T:33-->
If this happens, try using the following command instead:

<!--T:34-->
{{Cmd|crossdev --lenv "CC{{=}}sparc-unknown-linux-gnu-gcc" -t sparc-unknown-linux-gnu}}

=== Configuring distcc to cross-compile correctly === <!--T:10-->

<!--T:11-->
In the default distcc setup, cross-compiling will ''not'' work properly. The problem is that many builds just call {{c|gcc}} instead of the full compiler name (e.g. {{c|sparc-unknown-linux-gnu-gcc}}). When this compile gets distributed to a distcc helper box, the native compiler gets called instead of your shiny new cross-compiler. 

<!--T:12-->
Fortunately, there is a workaround for this little problem. All it takes is a wrapper script and a few symlinks on the box that will be running {{c|emerge}}. We'll use a Sparc box as an example. Wherever you see <code>sparc-unknown-linux-gnu</code> below, you will want to insert your own <var>CHOST</var> value (<code>x86_64-pc-linux-gnu</code> for an AMD64 box, for example). When you first emerge distcc, the {{Path|/usr/lib/distcc/bin}} directory looks like this: 

<!--T:13-->
{{Note|The following instructions are to be performed only on the box running the emerge. Do not perform these steps on the helper boxes.}}

<!--T:14-->
{{RootCmd|cd /usr/lib/distcc/bin
|ls -l|output=<pre>
total 0
lrwxrwxrwx  1 root root 15 Dec 23 20:13 c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 cc -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 gcc -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc
</pre>
}}

<!--T:15-->
Here is what you want to do: 

<!--T:16-->
{{RootCmd|rm c++ g++ gcc cc}}

<!--T:17-->
Next, we'll create the new script on this box. Fire up your favorite editor and create a file with the following text in it, then save it as {{Path|sparc-unknown-linux-gnu-wrapper}}. Remember to change the <var>CHOST</var> value (in this case, <code>sparc-unknown-linux-gnu</code>) to the actual <var>CHOST</var> of the box that will be running the emerge. 

<!--T:18-->
{{CodeBox|title=The new wrapper script|lang=bash|1=
#!/bin/bash
exec /usr/lib/distcc/bin/sparc-unknown-linux-gnu-g${0:$[-2]} "$@"
}}

<!--T:19-->
Next, we'll make the script executable and create the proper symlinks: 

<!--T:20-->
{{RootCmd|chmod a+x sparc-unknown-linux-gnu-wrapper
|ln -s sparc-unknown-linux-gnu-wrapper cc
|ln -s sparc-unknown-linux-gnu-wrapper gcc
|ln -s sparc-unknown-linux-gnu-wrapper g++
|ln -s sparc-unknown-linux-gnu-wrapper c++}}

<!--T:21-->
When you're done, {{Path|/usr/lib/distcc/bin}} will look like this: 

<!--T:22-->
{{RootCmd|ls -l|output=<pre>
total 4
lrwxrwxrwx  1 root root 25 Jan 18 14:20 c++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 cc -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 g++ -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 gcc -> sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-c++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-g++ -> /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Jul 27 10:52 sparc-unknown-linux-gnu-gcc -> /usr/bin/distcc
-rwxr-xr-x  1 root root 70 Jan 18 14:20 sparc-unknown-linux-gnu-wrapper
</pre>
}}

<!--T:60-->
{{Note|With new distcc versions, the following steps are unnecessaryâ€”you can emerge distcc on the client with the <code>crossdev</code> USE flag set instead to achieve the same result.}}

<!--T:38-->
Next we want to make sure that these wrappers stay available after upgrading the distcc package as it will overwrite the symbolic links. We can do this through a {{Path|/etc/portage/bashrc}} file that looks like so:

<!--T:39-->
{{FileBox|filename=/etc/portage/bashrc|lang=bash|1=
case ${CATEGORY}/${PN} in
<pre>                 sys-devel/distcc | sys-devel/gcc | sys-devel/clang)</pre>
			if [ "${EBUILD_PHASE}" == "postinst" ]; then
				/usr/local/sbin/distcc-fix &
			fi
		;;
esac
}}

<!--T:56-->
Then create this file:

<!--T:57-->
{{FileBox|filename=/usr/local/sbin/distcc-fix|lang=bash|1=
<pre>#!/bin/bash                     
 
sleep 20
# We extract $TUPLE from make.conf to avoid editing the script for each architecture.
TUPLE=$(portageq envvar CHOST)
GCC_VER=$(gcc-config -c|cut -d "-" -f5)
cd /usr/lib/distcc/bin
rm cc c++ gcc g++ gcc-${GCC_VER} g++-${GCC_VER} ${TUPLE}-wrapper
echo '#!/bin/bash' > ${TUPLE}-wrapper
echo "exec ${TUPLE}-g\${0:\$[-2]}" "\"\$@\"" >> ${TUPLE}-wrapper
chmod 755 ${TUPLE}-wrapper
ln -s ${TUPLE}-wrapper cc
ln -s ${TUPLE}-wrapper c++
ln -s ${TUPLE}-wrapper gcc
ln -s ${TUPLE}-wrapper g++
ln -s ${TUPLE}-wrapper gcc-${GCC_VER}
ln -s ${TUPLE}-wrapper g++-${GCC_VER}</pre>
}}

<!--T:58-->
Give it the proper permissions:

<!--T:59-->
{{RootCmd|chmod 755 /usr/local/sbin/distcc-fix}}

<!--T:23-->
Congratulations; you (hopefully) now have a working cross-distcc setup.

=== How this works === <!--T:24-->

<!--T:25-->
When {{c|distcc}} is called, it checks to see what it was called as (e.g. <code>i686-pc-linux-gnu-gcc</code>, <code>sparc-unknown-linux-gnu-g++</code>, etc.) When distcc then distributes the compile to a helper box, it passes along the name it was called as. The distcc daemon on the other helper box then looks for a binary with that same name. If it sees just {{c|gcc}}, it will look for {{c|gcc}}, which is likely to be the native compiler on the helper box, if it is not the same architecture as the box running {{c|emerge}}. When the ''full'' name of the compiler is sent (e.g. <code>sparc-unknown-linux-gnu-gcc</code>), there is no confusion.

=== Troubleshooting === <!--T:42-->

<!--T:43-->
This section covers a number of common problems when using {{c|distcc}} for cross-compiling.

==== Remote host distccd COMPILE ERRORS ==== <!--T:44-->

<!--T:45-->
When receiving the message <code>COMPILE ERRORS</code> within a remote host's {{Path|/var/log/distccd.log}} file, see the above notes concerning specifying the correct architecture name (ie. {{c|crossdev -t $TARGET}}).

<!--T:46-->
Another solution is to uninstall and re-install {{c|crossdev}} compiler tools, using the {{c|crossdev --clean}} option, or ensuring {{Path|/usr/$TARGET}} no longer exists, and then completely reinstall the cross compiler.

<!--T:47-->
It might also be wise to edit the remote host's {{Path|/usr/$TARGET/etc/portage/make.conf}}, and ensure the contents of the <var>CFLAGS</var> variable are similar on all computers or hosts performing compiler operations. Also make sure the <var>USE</var> flags for the cross compiler are sufficient: if you built GCC with <code>USE=graphite</code> on the client, you need a line like <code>cross-i686-pc-linux-gnu/gcc graphite</code> in {{Path|/etc/portage/package.use}} too.

==== Failed to exec $TARGET-unknown-linux-gnu-gcc: No such file or directory ==== <!--T:48-->

<!--T:49-->
The wrapper scripts might fail to execute, even with correct permissions:

<!--T:50-->
{{CodeBox|title=Error message from wrapper|1=
distcc[6195] (dcc_execvp) ERROR: failed to exec i686-unknown-linux-gnu-gcc: No such file or directory)
}}

<!--T:51-->
To resolve this, make sure to have the wrapper script created with the complete name of the architecture target:

<!--T:52-->
{{Cmd|ls -alh /usr/lib/distcc/bin/c++|output=<pre>
/usr/lib/distcc/bin/c++ ->./i686-pc-linux-gnu-wrapper
</pre>}}

</translate>
[[Category:Compilation]]
{{Migrated|originalauthors=Andrew Gaffney, Joshua Saddler}}
