<languages />

<translate>

<!--T:102-->
{{Metadata|abstract=This guide introduces the reader to Java and explains how to use Java with Gentoo Linux.}}

<!--T:1-->
This guide introduces the reader to Java and explains how to use Java with Gentoo Linux.

== What is Java? == <!--T:2-->

=== Overview === <!--T:3-->

<!--T:4-->
Java is a programming language developed by engineers of Sun Microsystems. The language is object-oriented and designed to run on multiple platforms without the need of recompiling code for each platform. Although Java can be compiled as a native program, much of Java's popularity can be attributed to its portability, along with other features such as garbage collection. To make platform independence possible the Java compiler compiles the Java code to an intermediate representation called "Java bytecode" that runs on a JRE (Java Runtime Environment) and not directly on the operating system. 

<!--T:5-->
In order to run Java bytecode, one needs to have a JRE (Java Runtime Environment) installed. A JRE provides core libraries, a platform dependent Java Virtual Machine, plugins for browsers, among other things. A JDK (Java Development Kit) adds programming tools, such as a bytecode compiler and a debugger. 

== Installing a Virtual Machine == <!--T:6-->

=== The choices === <!--T:7-->

<!--T:8-->
Gentoo provides numerous Runtime Environments (JREs) and Development Kits (JDKs). The current choices include: 

<!--T:9-->
{| class="table" style="text-align: left;" 
|- 
! Vendor
! JDK
! JRE
|- 
| The IcedTea Open Java SE (formerly icedtea6-bin)
| {{Package|dev-java/icedtea-bin}}
| 
|- 
| Oracle's Java 7 SE
| {{Package|dev-java/oracle-jdk-bin}}
| {{Package|dev-java/oracle-jre-bin}}
|- 
| Sun's Java 6 SE (masked, inactive after Oracle acquired Sun)
| {{Package|dev-java/sun-jdk}}
| {{Package|dev-java/sun-jre-bin}}
|- 
| The IBM Java SE
| {{Package|dev-java/ibm-jdk-bin}}
| {{Package|dev-java/ibm-jre-bin}}
|-
|}

=== Installing a JRE/JDKs === <!--T:10-->

<!--T:11-->
To install the profile's default '''JDK''' run <kbd>emerge virtual/jdk</kbd>. Or run <kbd>emerge virtual/jre</kbd> to install the profile's default '''JRE'''. 

<!--T:12-->
Some JDKs and JREs, including the Sun packages, require accepting an End User License Agreement, or EULA. If its license (such as dlj-1.1) is not listed in the <code>ACCEPT_LICENSE</code> variable (found in {{Path|/etc/portage/make.conf}}), then  the JDK/JRE will be unable to be installed. For more information on how to add acceptable licenses to {{Path|make.conf}} read the [[Handbook:X86/Working/Portage#Licenses|Licenses chapter]] of the Portage Handbook. 

<!--T:13-->
To avoid any restrictive license hassle, consider installing icedtea-bin, which is an open Java implementation from the OpenJDK project. 

<!--T:14-->
{{Note|Be aware each ''JDK'' will include a ''JRE''; installing a JRE is not necessary if a JDK has been emerged.}}

=== Installing fetch-restricted virtual machines === <!--T:15-->

<!--T:16-->
Some of the JDKs and JREs require a few extra steps in their configurations. Emerge the packages as normal. If additional steps are required the ebuilds will provide instruction for the user on where to go and what to download.

<!--T:17-->
Download the indicated file(s) into {{Path|/usr/portage/distfiles}} Once the files are in the right directories, rerun the <tt>emerge</tt> command, at which point the JRE/JDK will be begin to install. 

== Configuring your virtual machine == <!--T:18-->

=== Overview === <!--T:19-->

<!--T:20-->
Gentoo has the ability to have multiple JDKs and JREs installed without causing conflicts. 

<!--T:21-->
Using the <tt>java-config</tt> tool with root privileges, a system-wide default java virtual machine (VM) can be set. Users can also use java-config to custom set their personal VM on a user-by-user basis. 

<!--T:22-->
{{Note|<tt>eselect</tt> can also be used to change the system and user VM. See <kbd>eselect java-vm help</kbd>.}}

=== Setting a default virtual machine === <!--T:23-->

<!--T:24-->
Running the <kbd>java-config --list-available-vms</kbd> command will output a list of all JREs and JDKs installed on the system. Here is an example of the output: 

<!--T:25-->
{{RootCmd|java-config --list-available-vms|output=<pre>
The following VMs are available for generation-2:
1)      IcedTea-bin 1.10.4 [icedtea-bin]
2)      Sun JDK 1.5.0.20 [sun-jdk-1.5] (Build Only)
*)      Sun JDK 1.6.0.16 [sun-jdk-1.6]
</pre>
}}

<!--T:26-->
{{Note|VMs marked as 'Build Only' may contain security vulnerabilities and/or be end of life (EOL). Gentoo recommends not setting these VMs as the system's ''or'' the user's VM. Please see [[Java#Build_Only_VM|Build Only VM]] for more information.}}

<!--T:27-->
The ''*'' indicates this is the current active JVM (system-vm or user-vm when set). The name in the brackets (''[]'') is the handle or ID for that particular VM. The handle or the number to <kbd>java-config --set-system-vm</kbd> can be used to set the VM. The following text provides an example of how to set the system VM.

<!--T:28-->
Setting the system VM by handle (preferred):

<!--T:29-->
{{RootCmd|java-config --set-system-vm sun-jdk-1.6|output=<pre>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>}}

<!--T:30-->
Alternate method: select VM by number handle number:

<!--T:31-->
{{RootCmd|java-config --set-system-vm 3|output=<pre>
Now using sun-jdk-1.6 as your generation-2 system JVM
</pre>
}}

<!--T:32-->
As a regular user, use java-config <code>--set-user-vm</code>. 

<!--T:33-->
{{Note|<tt>source</tt>-ing the profile is no longer needed for updates to the user's or the system's VM.}}

=== Build Only VM === <!--T:34-->

<!--T:35-->
Some virtual machines are flagged as build-only due to being EOL and/or containing security vulnerabilities. These virtual machines will not automatically be used by Gentoo for the running of applications using Gentoo launchers (run-java-tool script designed for switching VMs), but will still be available for use by Gentoo's build environment as some packages may require them for building. The setting of these virtual machines as either your system or user VM is strongly discouraged as these VMs will then be used when running the {{Path|/usr/bin/{java,javac,..}}} executables, as well as used by any packages not using Gentoo's launcher scripts. 

=== Preferred Build VM === <!--T:36-->

<!--T:37-->
While merging Java packages, the VM used for building can sometimes be different from the one currently set as the system VM. 

<!--T:38-->
This merge time VM switching is needed when, for example, the system-vm is set to a 1.6 VM and the package being merge requires a 1.5 VM. While merging it will select and use a 1.5 VM, leaving the system-vm choice intact. 

<!--T:39-->
To define which VM is selected when a switch is needed, a list of ''default/supported VMs'' per arch has been created. It can be found in {{Path|/usr/share/java-config-2/config/jdk-defaults.conf}}. 

<!--T:40-->
These defaults can be over written (even the selected system VM) in {{Path|/etc/java-config-2/build/jdk.conf}} for complete control over which VM will get used for merging.

<!--T:41-->
For example, to always use a sun-jdk:

<!--T:42-->
{{FileBox|filename=/etc/java-config-2/build/jdk.conf|title=Requiring sun-jdk|1=
*=sun-jdk
}}

<!--T:43-->
Or, to always use sun-jdk-1.5 wherever possible, except for when a 1.4 or 1.3 VM is explicitly required:

<!--T:44-->
{{FileBox|filename=/etc/java-config-2/build/jdk.conf|title=Requiring sun-jdk-1.5 for 1.5 VMs|1=
*=sun-jdk-1.5
}}

<!--T:45-->
Or to use different providers for different versions, such as requiring <code>sun-jdk-1.4</code> if a 1.3 (yes, 1.3) VM is asked, and fall back to ibm-jdk-bin otherwise:

<!--T:46-->
{{FileBox|filename=/etc/java-config-2/build/jdk.conf|title=Using multiple expressions|1=
1.3=sun-jdk-1.4 ibm-jdk-bin
1.5=sun-jdk
}}


<!--T:47-->
{{Warning|This file does not ''have'' to be edited. If these options are changed to use a unsupported VM, things could possibly break. Because of the wide variety of available VMs, the resources are not available to test and verify every package works on all of them. Bugs reported with a unsupported VM will not be prioritized as much as bugs present within supported VMs.}}

== Compilers == <!--T:48-->

<!--T:49-->
The standard Java compiler used for building is <tt>javac</tt>, which comes with each JDK. In addition to configuring the VM used at build time, it is also possible configure which compiler is used. Essentially, define a list with preference for which compiler to use in {{Path|/etc/java-config-2/build/compilers.conf}}. 

<!--T:50-->
{{FileBox|filename=/etc/java-config-2/build/compilers.conf|title=Setting compiler preferences|1=
COMPILERS="ecj-X.Y jikes javac"
}}

<!--T:51-->
Some compilers do not support all possible <code>-target</code> and <code>-source</code> arguments. Therefore, each compiler in the list is checked to see if it can support the desired <code>-source</code>/<code>-target</code>. javac will work in all cases, so if no other suitable compiler is found, it will be used instead. 

<!--T:52-->
More details about each compiler are provided below: 

<!--T:53-->
{| class="table" style="text-align: left;" 
|- 
! Name
! Handle
! Package
! Description
|- 
| javac
| javac
| N/A
| This is the default compiler that will be used, and comes with each JDK.
|- 
| jikes
| jikes
| dev-java/jikes
| Jikes was originally developed by IBM. Anecdotally, it is generally quicker than javac. Note however, that it is more pedantic, and will fail under a few circumstances where javac has no issue. It also does not support Java 1.5 syntax yet.
|- 
| Eclipse Compiler for Java
| ecj
| dev-java/eclipse-ecj
| ECJ is the compiler used by the Eclipse software development kit. It is very full featured, and is pretty fast. It does support Java 1.5 syntax.
|-
|}

== Setting a default CLASSPATH == <!--T:54-->

<!--T:55-->
{{Warning|The options explained in this section should be considered deprecated and will most likely be removed in the future. It is strongly recommended against using these, because Java projects or applications should ideally manage their own classpaths. When choosing to specify a default CLASSPATH, some applications may behave unexpectedly, because classes they were not expecting to be on the classpath.}}

<!--T:56-->
<tt>java-config</tt> can also be used to set a system-wide default CLASSPATH, as well a user-specific default CLASSPATH. 

<!--T:57-->
First, list available Java libraries installed on the system to possibly put in the <code>CLASSPATH</code> variable. Here is an example of output: 

<!--T:58-->
{{RootCmd|java-config --list-available-packages|output=<pre>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>
}}

<!--T:59-->
Again, the names in brackets ([]) are the IDs to pass to java-config --set-system-classpath. Here is an example: 


<!--T:60-->
{{RootCmd|java-config --set-system-classpath log4j,xerces-2}}

<!--T:61-->
{{Note|The current directory ({{Path|.}}) will not be part of the system classpath, as that should be added to the system's login profile.}}

<!--T:62-->
Update the environment by logging out, then in again or by typing <kbd>source {{Path|/etc/profile}}</kbd>. 

<!--T:63-->
For users, java-config --set-user-classpath will create {{Path|~/.gentoo/java-env-classpath}}, which should then source from the shell's profile. 

<!--T:64-->
{{CodeBox|title=Sourcing user specific classpath|1=
if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
       source ${HOME}/.gentoo/java-env-classpath
fi
}}

<!--T:65-->
If desiring a system wide or user default classpath add something like the following to the shell's profile. This is advised against: 

<!--T:66-->
{{RootCmd|export CLASSPATH{{=}}"${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"}}

== Java Browser Plugins == <!--T:67-->

=== Installing a plugin === <!--T:68-->

<!--T:69-->
It is possible to install a Java plugins for a web browsers by emerging a Java VM with the <code>nsplugin</code> USE flag set.

<!--T:70-->
{{Note|<code>nsplugin</code> is not available for all architectures. Check for available plugins for the specific arch before trying to install a VM by running <kbd>emerge -pv <java-vm></kbd>.}}

<!--T:71-->
Portage will allow installations of multiple Java plugins versions, though only one will be used by the web browser. Check the list of available plugins by running: 

<!--T:72-->
{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6
   [2]   icedtea-bin
</pre>
}}

<!--T:73-->
In this example, <tt>sun-jre-bin</tt> is selected for the browser plugin. 

<!--T:74-->
{{RootCmd|eselect java-nsplugin set sun-jre-bin-1.6}}

<!--T:75-->
Verify that the correct plugin was selected: 

<!--T:76-->
{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6  current
   [2]   icedtea-bin
</pre>
}}

<!--T:77-->
Java.com also provides a link to [http://java.com/en/download/installed.jsp verify the installed plugin]. Additionally, if a Mozilla-based browser is being used, verification of the Java plugin can be performed by typing <kbd>about:plugins</kbd> into the address bar.

=== Plugins on multilib systems === <!--T:78-->

<!--T:79-->
If running a mixed 64-bit and 32-bit multilib system (for example, on AMD64), use both 64-bit and 32-bit Java plugins. Unless there is a pressing need to run 32-bit Java applications, users have been recommended to use native 64-bit plugins on 64-bit web browsers. 

<!--T:80-->
There are several native 64-bit browser plugins available. The default JDK/JRE pair, <code>sun-jdk</code> and <code>sun-jre-bin</code>, both include browser plugins. Just emerge one of them with <code>nsplugin</code> USE enabled. 

<!--T:81-->
{{RootCmd|echo "dev-java/sun-jre-bin nsplugin" >> /etc/portage/package.use
|emerge sun-jre-bin}}

<!--T:82-->
To use a 32-bit plugin on a 32-bit browser, the {{Package|app-emulation/emul-linux-x86-java}} package will need to be emerged with <code>nsplugin</code> USE enabled. 

<!--T:83-->
{{RootCmd|echo "app-emulation/emul-linux-x86-java nsplugin" >> /etc/portage/package.use
|emerge emul-linux-x86-java}}

<!--T:84-->
Next, check which plugins are available: 

<!--T:85-->
{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6
</pre>
}}

<!--T:86-->
Now select the right plugin for the browser: 

<!--T:87-->
{{RootCmd|eselect java-nsplugin set 32bit emul-linux-x86-java-1.6
|eselect java-nsplugin set 64bit sun-jre-bin-1.6}}

<!--T:88-->
Verify the correct plugin was selected: 

<!--T:89-->
{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6  current
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6  current
</pre>
}}

== USE flags for use with Java == <!--T:90-->

=== Setting USE flags === <!--T:91-->

<!--T:92-->
For more information regarding USE flags, refer to the [[Handbook:X86/Working/USE|USE flags]] chapter from the Gentoo Handbook. 

=== The USE flags === <!--T:93-->

<!--T:94-->
* The <code>java</code> flag adds support for Java in a variety of programs;
* The <code>nsplugin</code> flag adds support for Mozilla-like browsers (including Firefox). This is needed for viewing Java applets in a Mozilla-like browser;
* The <code>source</code> flag installs a zip of the source code of a package. This is traditionally used for IDEs to 'attach' source to the libraries that are being use;
* The <code>jce</code> flag adds support for the Java Cryptography Engine;
* For Java packages, the <code>doc</code> flag will build API documentation using javadoc.

== Additional resources == <!--T:95-->

=== Off-line resources === <!--T:96-->

<!--T:97-->
* <kbd>man java-config</kbd>
* <kbd>java-config --help</kbd>

=== Online resources === <!--T:98-->

<!--T:99-->
* The [http://www.gentoo.org/proj/en/java/ Java Project Page] 
* The [http://news.gmane.org/gmane.linux.gentoo.java gentoo-java], [http://news.gmane.org/gmane.linux.gentoo.user gentoo-user], and [http://news.gmane.org/gmane.linux.gentoo.devel gentoo-dev] mailing list archives
* [irc://chat.freenode.net/gentoo #gentoo] and [irc://chat.freenode.net/gentoo-java #gentoo-java] on IRC
* [[Wikipedia:Java_programming_language|Wikipedia's entry for Java]]
* If you have suggestions or questions regarding this document, please email the Gentoo Java team: {{Mail|java@gentoo.org}}
</translate>

{{Migrated|originalauthors=Joshua Nichols, Karl Trygve Kalleberg, Joshua Saddler}}
