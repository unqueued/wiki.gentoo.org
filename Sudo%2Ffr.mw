<languages />

{{Lowercase title}}
{{InfoBox stack
|{{InfoBox homepage|http://www.sudo.ws/|header=true}}
|{{InfoBox wikipedia|sudo}}
}}

La commande '''sudo''' procure un moyen sûr et simple de configurer une escalade de privilèges, par exemple, permettre à des utilisateurs normaux d'exécuter certaines (ou toutes les) commandes en tant que ''root'' ou au nom d'un autre utilisateur, sans qu'ils aient à connaitre le mot de passe de l'utilisateur auquel ils se substituent.

Lorsque vous voulez que certaines personnes accomplissent certaines tâches administratives sans leur donner un accès total en tant que ''root'', utiliser ''sudo'' est votre meilleure option. Avec ''sudo'' vous pouvez contrôler qui peut faire quoi. Ce guide est une petite introduction à ce merveilleux outil.

== À propos de Sudo ==

=== Accorder des autorisations ===

Le paquet <code>app-admin/sudo</code> permet à l'administrateur du système d'accorder des autorisations à d'autres utilisateurs pour exécuter une ou plusieurs applications qu'ils n'auraient normalement pas le droit d'exécuter. À la différence de l'utilisation du bit ''setuid'' sur ces applications, <code>sudo</code> permet un contrôle plus fin sur ''qui'' peut exécuter une certaine commande et sur ''quand'' il peut le faire. 

Avec <code>sudo</code> vous pouvez établir une liste claire de ''qui'' peut exécuter une application donnée. Si vous utilisiez le bit ''setuid'', n'importe quel utilisateur ( ou n'importe quel utilisateur d'un groupe donné, selon l'autorisation accordée) serait capable d'exécuter cette application. Vous pouvez (et devriez probablement) demander à l'utilisateur de fournir un mot de passe lorsqu'il désire exécuter l'application concernée. 

=== Journalisation ===

Un avantage supplémentaire de <code>sudo</code>, c'est qu'elle peut tenir un journal de toutes les tentatives (réussies ou pas) d'exécution d'une application. Ceci est très utile si vous voulez garder la trace de qui a commis l'erreur fatale qui vous a demandé 10 heures à réparer. 

=== Configurer sudo ===

La configuration de <code>sudo</code> est gérée par le fichier {{Path|/etc/sudoers}}. Ce fichier ne devrait jamais être édité via <code>nano /etc/sudoers</code> ou <code>vim /etc/sudoers</code> ou n'importe quel autre éditeur. Lorsque vous désirez changer ce fichier, vous devriez utiliser <code>visudo</code> . 

Cet outil garantit que deux administrateurs ne sont pas en train d'éditer ce fichier au même moment, conserve les autorisations sur ce fichier et assure une vérification de la syntaxe pour être certain que vous n'avez pas laissé d'erreur fatale dedans. 

=== À propos de ce guide ===

Ce guide ne prétend être qu'une introduction rapide. Le paquet <code>sudo</code> est beaucoup plus puissant que ce que nous décrivons ici. Il possède des fonctionnalités spéciales pour éditer des fichiers en tant qu'un autre utilisateur (<code>sudoedit</code> ), depuis un script (de telle manière qu'il puisse fonctionner en arrière-plan, lire le mot de passe depuis l'entrée standard plutôt que du clavier,...), etc. 

Reportez-vous aux pages de manuel de  <code>sudo</code> et de <code>sudoers</code> pour une information plus complète. 

== Syntaxe de sudoers ==

=== Syntaxe de base ===

La partie la plus difficile de <code>sudo</code>, c'est la syntaxe du fichier {{Path|/etc/sudoers}}. La syntaxe de base ressemble à ceci : 

{{Code|Syntaxe de base de /etc/sudoers |<pre>
user  host = commands
</pre>
}}

Cette syntaxe indique à <code>sudo</code> que l'utilisateur, identifié par ''user'' et connecté au système ''host'' peut exécuter n'importe quelle commande listée dans ''commands'' en tant qu'utilisateur ''root''. Un exemple plus réel pourrait rendre cela plus clair : autoriser l'utilisateur ''swift'' à exécuter <code>emerge</code> s'il est connecté à l'hôte local : 

{{Code|Exemple réaliste de /etc/sudoers |<pre>
swift  localhost = /usr/bin/emerge
</pre>
}}

{{Note|Le nom d'hôte doit corresponde à ce que retourne la commande <code>hostname</code>.}}

Un gros '''avertissement''' est cependant de mise : n'autorisez pas un utilisateur à exécuter une application  qui lui permette d'élever ses autorisations. Par exemple, autoriser des utilisateurs à exécuter <code>emerge</code>  en tant que ''root'' peut en effet leur donner un accès complet au système en tant que ''root'' parce qu'<code>emerge</code> peut être manipulé pour changer le système de fichier actif à l'avantage de l'utilisateur. Si vous ne faites pas confiance à vos utilisateurs de  <code>sudo</code>, ne leur donnez aucune autorisation. 

Le nom d'utilisateur peut aussi être remplacé par un nom de groupe. Dans ce cas, vous devriez commencer le nom du groupe avec un signe <code>%</code>. Par exemple, pour autoriser n'importe quel utilisateur du groupe <code>wheel</code> à exécuter <code>emerge</code> : 

{{Code|Autoriser les membres du groupe wheel à éxecuter emerge|<pre>
%wheel  localhost = /usr/bin/emerge
</pre>
}}

Vous pouvez étendre la ligne pour autoriser plusieurs commandes (au lieu de faire une entrée simple pour chacune des commandes). Par exemple, pour autoriser le même utilisateur à exécuter, pas seulement  <code>emerge</code> ,mais aussi <code>ebuild </code> et  <code>emerge-webrsync</code>  en tant que ''root'' : 

{{Code|Commandes multiples |<pre>
swift  localhost = /usr/bin/emerge, /usr/bin/ebuild, /usr/sbin/emerge-webrsync
</pre>
}}

Vous pouvez aussi spécifier une commande précise et pas seulement un outil. Ceci est utile pour restreindre l'utilisation d'un outil donné à un certain jeu d'options de commande. L'outil <code>sudo</code>  autorise les passe-partout du style shell (aussi connu sous le nom de meta caractères ou de caractères glob) à être utilisés dans les noms de fichiers ou dans les arguments de la ligne de 
commande dans le fichier ''sudoers''. Notez qu'il ne s'agit ''pas'' d'expressions régulières. 

Testons cela : 

{{Cmd|sudo emerge -uDN world|output=<pre>
We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:
  
    #1- Respect the privacy of others.
    #2- Think before you type.
    #3- With great power comes great responsibility.
  
Password: ## (Enter the user password, not root!)
</pre>
}}

Le mot de passe requis par  <code>sudo</code> est le propre mot de passe de l'utilisateur, pas celui de ''root''. Ceci garantit qu'aucun terminal que vous avez laissé accidentellement ouvert aux autres ne pourra être utilisé par des gens mal intentionnés. 

Vous devriez savoir que <code>sudo</code> ne modifie pas la variable <code>${PATH}</code> : toute commande placée après <code>sudo</code> est traitée dans ''votre'' environnement. Si vous voulez que l'utilisateur exécute un outil dans {{Path|/sbin}} par exemple, il devrait fournir le chemin complet à <code>sudo</code> de cette manière : 

{{Cmd|sudo /usr/sbin/emerge-webrsync}}

=== Utiliser des alias  ===

Dans des environnements plus étendus, avoir à entrer tous les utilisateurs encore et encore (ou des hôtes, ou des commandes) peut sembler très rébarbatif. Pour faciliter l'administration de  {{Path|/etc/sudoers}}, vous pouvez définir des ''alias''. Le format pour déclarer un alias est très simple : 

{{Code|Déclarer des alias dans  /etc/sudoers|<pre>
Host_Alias hostalias = hostname1, hostname2, ...
User_Alias useralias = user1, user2, ...
Cmnd_Alias cmndalias = command1, command2, ...
</pre>
}}

Un alias qui marche toujours, pour toute position, est l'alias <code>ALL</code> (pour faire une distinction claire entre ce qui est un alias et ce qui ne l'est pas, il est recommandé d'utiliser des lettres capitales  dans les alias). Comme vous l'avez sans doute déduit, l'alias <code>ALL</code> est un alias représentant tout ce qui est possible en matière de réglage. 

Un exemple d'utilisation de l'alias <code>ALL</code> pour autoriser n'importe quel utilisateur à exécuter la commande <code>shutdown</code> lorsqu'il est connecté localement est : 

{{Code|Autoriser n'importe quel utilisateur à éxecuter shutdown|<pre>
ALL  localhost = /sbin/shutdown
</pre>
}}

Un autre exemple consiste à autoriser l'utilisateur <code>swift</code> à exécuter la commande <code>emerge</code> en tant que ''root'' sans tenir compte de l'hôte auquel il est connecté : 

{{Code|Autoriser un utilisateur à exécuter une application sans tenir compte de l'hôte auquel il est connecté|<pre>
swift   ALL = /usr/bin/emerge
</pre>
}}

Plus intéressant encore, consiste à définir un jeu d'utilisateurs qui peuvent exécuter des programmes d'administration (tels que  <code>emerge</code> et <code>ebuild</code> ) sur le système et un groupe d'administrateurs qui peuvent changer le mot de passe de n'importe quel utilisateur, exception faite de ''root'' ! 

{{Code|Utiliser des alias pour des utilisateurs et des commandes|<pre>
User_Alias  SOFTWAREMAINTAINERS = swift, john, danny
User_Alias  PASSWORDMAINTAINERS = swift, sysop
Cmnd_Alias  SOFTWARECOMMANDS    = /usr/bin/emerge, /usr/bin/ebuild
Cmnd_Alias  PASSWORDCOMMANDS    = /usr/bin/passwd [a-zA-Z0-9_-]*, !/usr/bin/passwd root
  
SOFTWAREMAINTAINERS  localhost = SOFTWARECOMMANDS
PASSWORDMAINTAINERS  localhost = PASSWORDCOMMANDS
</pre>
}}

=== Exécution ''non root'' ===

Il est aussi possible d'autoriser un utilisateur à exécuter une application au nom d'un autre utilisateur autre que ''root''. Ceci peut être très intéressant si vous exécutez des applications au nom d'un autre utilisateur (par exemple <code>apache</code> pour le serveur  web ) et voulez autoriser certains utilisateurs à accomplir des tâches d'administration au nom de l'utilisateur ( comme tuer des processus zombie). 

Dans le fichier  {{Path|/etc/sudoers}} vous listez les utilisateur entre <code>(</code> et <code>)</code> avant la liste des commandes : 

{{Code|Syntaxe pour une exécution non-root|<pre>
users  hosts = (run-as) commands
</pre>
}}

Par exemple, pour autoriser  <code>swift</code> à exécute l'outil  <code>kill</code> au nom de l'utilisateur <code>apache</code> ou <code>gorg</code> : 

{{Code|Exemple d'exécution non root|<pre>
Cmnd_Alias KILL = /bin/kill, /usr/bin/pkill
  
swift   ALL = (apache, gorg) KILL
</pre>
}}

Avec ceci de défini, l'utilisateur peut exécuter <code>sudo -u</code> pour choisir le nom de l'utilisateur au nom de qui il veut exécuter l'application : 

{{Cmd|sudo -u apache pkill apache}}

Vous pouvez définir un alias pour que l'utilisateur puisse exécuter une application comme utilisant la directive <code>Runas_Alias</code>. Son utilisation est identique à celle des autres directives <code>_Alias</code>  que nous avons vues précédemment. 

=== Mots de passe et réglages par défaut ===

Par défaut,  <code>sudo</code> demande à l'utilisateur de s'identifier en utilisant son propre mot de passe. Une fois de mot de passe saisi, <code>sudo</code> s'en souvient pendant cinq minutes, permettant à l'utilisateur de se focaliser sur ce qu'il veut faire et de ne pas avoir à rentrer son mot de passe à tout bout de champ. 

Bien-entendu, ce comportement peut être modifié : vous pouvez définir la directive <code>Default:</code> dans {{Path|/etc/sudoers}} pour changer le comportement par défaut pour un utilisateur. 

Par exemple, pour changer le temps de mémorisation de 5 minutes à 0 (pas de mémorisation du mot de passe) : 

{{Code|Changer la valeur de temps de mémorisation|<pre>
Defaults:swift  timestamp_timeout=0
</pre>
}}

Une valeur fixée à <code>-1</code> étendrait ce temps à l'infini (jusqu'au redémarrage du système). 

Un réglage différent, pourrait être de requérir le mot de passe de l'utilisateur au nom duquel la commande devrait être exécutée et pas celui de l'utilisateur. Ceci est possible en utilisant <code>runaspw</code>. Dans l'exemple suivant, nous définissons aussi le nombre de tentatives de saisie du mot de passe autorisé avant que la commande <code>sudo</code>  n'échoue à <code>2</code> au lieu de 3 par défaut : 

{{Code|Requérant le mot de passe de  ''root'' plutôt que celui de l'utilisateur|<pre>
Defaults:john   runaspw, passwd_tries=2
</pre>
}}

Une autre fonctionnalité intéressante est de conserver la variable  <code>DISPLAY</code>  définie de manière à permettre l'utilisation d'outils graphiques : 

{{Code|Laisser la variable  DISPLAY active|<pre>
Defaults:john env_keep=DISPLAY
</pre>
}}

Vous pouvez changer des douzaines de réglages par défaut en utilisant la directive <code>Defaults:</code>. Ouvrez la page de manuel de <code>sudo</code> et cherchez <code>Defaults:</code>. 

Si, cependant, vous voulez autoriser un utilisateur à exécuter un certain jeu de commandes sans entrer un quelconque mot de passe, vous devez démarrer les commandes par <code>NOPASSWD:</code>, comme ceci : 

{{Code|Autoriser  emerge à être exécutée par un utilisateur donné en tant que ''root'' sans demander de mot de passe|<pre>
swift     localhost = NOPASSWD: /usr/bin/emerge
</pre>
}}

== Utiliser sudo ==

=== Lister les privilèges ===

Pour connaître vos propres autorisations, exécutez la commande <code>sudo -l</code> : 

{{Cmd|sudo -l|output=<pre>
User swift may run the following commands on this host:
    (root)   /usr/libexec/xfsm-shutdown-helper
    (root)   /usr/bin/emerge
    (root)   /usr/bin/passwd [a-zA-Z0-9_-]*
    (root)   !/usr/bin/passwd root
    (apache) /usr/bin/pkill
    (apache) /bin/kill
</pre>
}}

Si des commandes se trouvent dans {{Path|/etc/sudoers}} qui ne requièrent pas que vous saisissiez un mot de passe, il ne sera pas non plus nécessaire de saisir un mot de passe pour lister les entrées. Autrement, on pourrait vous demander votre mot de passe s'il n'est pas mémorisé. 

=== Prolonger le temps de mémorisation du mot de passe  ===

Par défaut, si un utilisateur a saisi son mot de passe pour s'identifier auprès de <code>sudo</code>, ce mot de passe est mémorisé 5 minutes. Si l'utilisateurs désire prolonger ce bail, il peut exécuter  <code>sudo -v</code> pour remettre à zéro le compteur de temps de manière telle qu'il dispose d'encore 5 minutes avant que  <code>sudo</code> ne lui réclame à nouveau son mot de passe 

{{Cmd|sudo -v}}

L'inverse consiste à tuer le compteur avec <code>sudo -k</code>. 

== Améliorations de sudo  ==

=== Auto-complétion dans Bash ===

Les utilisateurs qui désirent une auto-complétion dans bash doivent exécuter ceci une fois.

{{Cmd|sudo echo "complete -cf sudo" >> $HOME/.bashrc}}


[[Category:Software]]
