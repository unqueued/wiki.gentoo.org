<languages />

{{Metadata|abstract=이 문서는 시스템에 있는 CHOST 변수 값을 바꾸는 방법을 설명합니다.}}

이 문서는 시스템에 있는 <var>[[CHOST/ko|CHOST]]</var> 변수 값을 바꾸는 방법을 설명합니다.

== 도입부 ==

<var>CHOST</var> 값을 바꾸는 일은 시스템 전체를 이상하게 꼬이게 할 수 있는 큰 문제입니다 - 그러니까 왜 그 대혼란을 야기할 문제가 안내서에 있냐고요? 

<var>CHOST</var> 값을 어쩔 수 없이 바꿨을때 몇가지 상황이 발생하는데, 예컨대, nptl만 지원하는 glibc 2.4를 업그레이드 하려 하는데  CHOST 값을 nptl 사용이 불가능한 i386으로 설정한 경우를 찾을 때가 있습니다. 이 경우, 상당히 많은 옵션을 보유하지 않아, 이 옵션 중 CHOST 값을 바꿔야 합니다. 

이 절차를 따르더라도 문제가 발생할 수 있으니, 매우 조심스럽게 읽고 실행에 옮겼는지 확인 하십시오. 이 경우 <var>CHOST</var> 값이 i386에서 i686 으로 바뀌며, 개인적인 상황에 따라 다른 값을 바꿨을 경우 그에 따라 명령도 바꿉니다. 

== CHOST 변수 값 바꾸기 ==

===  꾸러미 빌드 ===

<var>CHOST</var> 값 바꾸기를 시작하려면, {{Path|/etc/portage/make.conf}} 파일을 편집하여 필요에 따라 <var>CHOST</var> 값을 바꾸십시오. 다음 순서를 통해 다음 꾸러미를 다시 빌드하십시오: 

{{Emerge|binutils gcc glibc}}

{{Important/ko|<var>CHOST</var> 값을 바꾸면서 gcc 주 버전을 업그레이드할 때(예: CHOST i386 값의 gcc 3.3에서 CHOST i686 값의 gcc 4.1로 업그레이드 할 때) 여러가지 부작용을 유발할 수 있습니다. 이렇게 되기는 불가능하겠지만, 잠재적인 문제가 일어날지 여부는 장담이 힘들어 이 안내서에 문서로 남겨두는건 거의 불가능합니다. 결과적으로, [[Upgrading_GCC/ko|GCC 업그레이드 안내서]]를 따라 GCC를 먼저 업그레이드 한 후, CHOST 값을 바로 다음에 바꾸십시오. 시스템에 <var>CHOST</var> 값을 i386으로 설정했다면 GCC를 업그레이드 하는 동안 glibc 2.4(이상)는 i386과는 사용할 수 없기 때문에 사용하지 않으므로 가려야 하고, 이 과정이 끝난 후에 glibc 2.4(이상)의 가림을 풀어야 합니다. 바뀐 값을 제대로 수행하고 나면 마스크를 해제하십시오.}}

{{Note/ko|gcc를 컴파일하기 전에 {{c|binutils-config}} 를 실행해야 할지도 모릅니다.}}

=== 동작 확인 ===

이제 {{c|gcc-config}}와 {{c|binutils-config}} 설정이 온전한지 확인하고 {{Path|/etc/env.d/}}에서 나머지 요소를 날릴 때입니다. 

{{c|gcc-config}}와 {{c|binutils-config}} 출력은 다음과 같아야 합니다:

{{Note/ko|gcc 버전과 <var>CHOST</var> 값에 따라 다를 수 있으며, 여기는 GCC 4.1.1과 i686에 해당합니다}} 

{{RootCmd|gcc-config -l|output=<pre>
 [1] i686-pc-linux-gnu-4.1.1 *</pre>}}

{{RootCmd|gcc-config -c|output=<pre>
i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|binutils-config -l|output=<pre>
 [1] i686-pc-linux-gnu-2.16.1 *
# binutils-config -c
i686-pc-linux-gnu-2.16.1
</pre>
}}

다음, 이전 <var>CHOST</var> 변수 값을 {{Path|/etc/env.d/}}에서 참조하는지 확인하십시오: 

{{RootCmd|cd /etc/env.d/
|grep 386 *|output=<pre>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>
}}

{{Note/ko|대부분의 경우 아무 일도 안일어납니다만 이 경우 {{Path|05gcc-i386-pc-linux-gnu}}에 오래된 <var>CHOST</var> 값 참조가 들어있습니다. 어떤 <var>CHOST</var> 값으로 바꾸느냐에 따라 시스템이 달라볼 수 있거나 그 상태로 괜찮을 수 있습니다. 어떤 경우에는 남아있는 참조가 없을 수도 있습니다. 이름은 {{Path|05gcc-your_new_CHOST-pc-linux-gnu}}여야 합니다.}}

파일을 지우기 전에 업데이트한 <var>CHOST</var> 값이 파일에 붙었는지 확인하도록 하겠습니다: 

{{RootCmd|grep 686 *|output=<pre>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>
}}

여기서는 {{Path|/etc/env.d/}}의 ({{Path|05gcc}}를 예로 들어)<code>gcc</code>에 대해서만 결과가 잘 나온것처럼 보이니, 잘못된 참조가 들어간 파일을 삭제하도록 하겠습니다: 

{{RootCmd|rm 05gcc-i386-pc-linux-gnu}}

이 같은 설정은 {{Path|binutils}}에도 적용합니다 - 추가 요소가 있을 경우 오래된 요소를 찾아 삭제하십시오. 다음 {{Path|/etc/env.d/binutils/}} 디렉터리를 확인하십시오:

{{RootCmd|cd /etc/env.d/binutils/
|ls -la|output=<pre>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1
</pre>}}

{{RootCmd|cat config-i686-pc-linux-gnu|output=<pre>
CURRENT=2.16.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-2.16.1|output=<pre>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>
}}

보기 좋아보이는군요, 실제로 두 파일이 위치해 있습니다. 이제 {{Path|gcc/}} 디렉터리로 이동할 때입니다. 

{{RootCmd|cd /etc/env.d/gcc|output=<pre>
# ls -la
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1
</pre>}}

{{RootCmd|cat config|output=<pre>
CURRENT=i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat config-i386-pc-linux-gnu|output=<pre>
CURRENT=i386-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-4.1.1|output=<pre>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>
}}

{{Path|config}}와 {{Path|i686-pc-linux-gnu-4.1.1}}은 괜찮지만 제거해야 할 {{Path|config-i386-pc-linux-gnu}}가 남아있습니다. 

{{Note|Again, the name of the file containing references to an outdated gcc version may have a different name, e.g. {{Path|config-i686-pc-linux-gnu}} even though the system is being changed to (in this case) i686. It is important to identify the file on its content, not only the name.}}

{{RootCmd|rm config-i386-pc-linux-gnu}}

Now run the following commands to update the environment: 

{{RootCmd|env-update && source /etc/profile}}

모든 문제를 고쳤는지 확인하십시오: 

{{RootCmd|grep -r 386 /etc/env.d/}}

If there are still files found, try to track it down before going on.

=== 값 바꾸기 끝내기 ===

Now it is necessary to re-emerge {{Package|sys-devel/libtool}} and run {{c|fix_libtool_files.sh}} which can be found in {{Path|/usr/share/gcc-data/''$CHOST''/''<gcc-version>''/}}. Make sure to use the correct gcc version (the current one, 4.1.1 here) and pass the old architecture (i386 here) as argument. Replace <code>$CHOST</code> with the new <var>CHOST</var> value, and <code><gcc-version></code> with the gcc version. This example assumes a <var>CHOST</var> value applicable to i686. 

{{Emerge|libtool}}

{{RootCmd|/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu}}

It is now possible to rebuild all the packages: 

{{RootCmd|emerge -e world}}

In theory, it should not be necessary to do so, but it cannot be 100% guaranteed that this is actually the case.

The following set of packages really need to be rebuilt: 

{{Emerge|python}}

All packages using perl install to the <var>CHOST</var> directory and hence need rebuilding. In case {{c|qfile}} is not available on the system yet, install {{Package|app-portage/portage-utils}} first.

{{Emerge|portage-utils}}

Now rebuild all packages that have files installed in any {{Path|/usr/lib/perl*}} location:

{{RootCmd|emerge -av1 `qfile /usr/lib/perl* -Cq {{!}} sort -u`}}

When encountering other packages that need recompiling, please let us know through the [[{{TALKPAGENAME}}|discussion page]] of this guide.

=== 일반적인 문제 ===

When upgrading from gcc 3.3 to 4.1 at the same time as changing the <var>CHOST</var> variable (please don't do that anyway), a couple of users reported broken packages that need recompiling, such as {{Package|sys-apps/groff}} and {{Package|mail-mta/courier}}: 

{{CodeBox|title=Error messsage|1=
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
}}

This happens because during the upgrade, the <var>CHOST</var> variable doesn't exactly match the <var>CTARGET</var> variable value, making the compiler assume that the system is using cross-compiling. As a consequence, <var>LDPATH</var> isn't inserted into {{Path|ld.so.conf}}, resulting in this error. 

Please see the [[Upgrading GCC|GCC upgrade guide]] for what needs to be rebuilt after a GCC upgrade. 

In some rare cases, this can break old versions of python, too. This may be fixed by adding {{Path|/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6}} (change accordingly to the old <var>CHOST</var> and gcc version) to {{Path|/etc/ld.so.conf}}, running {{c|ldconfig}} and then {{c|emerge libstdc++-v3}}. However, as can be seen, this situation needs to be avoided - don't change <var>CHOST</var> and gcc at the same time.

=== 피드백 ===

That should be all, feedback (both if it worked, failed or other problems were encountered) is welcome, please use the [[{{TALKPAGENAME}}|discussion page]] or post to [https://forums.gentoo.org/viewtopic-t-494147.html this forum thread]. Much in this guide comes from vapier, thanks for your help!


{{Migrated|originalauthors=Wernfried Haas, Mike Frysinger, Chris White}}
