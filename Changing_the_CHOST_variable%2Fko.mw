<languages />

{{Metadata|abstract=이 문서는 시스템에 있는 CHOST 변수 값을 바꾸는 방법을 설명합니다.}}

이 문서는 시스템에 있는 <var>[[CHOST/ko|CHOST]]</var> 변수 값을 바꾸는 방법을 설명합니다.

== 도입부 ==

<var>CHOST</var> 값을 바꾸는 일은 시스템 전체를 이상하게 꼬이게 할 수 있는 큰 문제입니다 - 그러니까 왜 그 대혼란을 야기할 문제가 안내서에 있냐고요? 

<var>CHOST</var> 값을 어쩔 수 없이 바꿨을때 몇가지 상황이 발생하는데, 예컨대, nptl만 지원하는 glibc 2.4를 업그레이드 하려 하는데  CHOST 값을 nptl 사용이 불가능한 i386으로 설정한 경우를 찾을 때가 있습니다. 이 경우, 상당히 많은 옵션을 보유하지 않아, 이 옵션 중 CHOST 값을 바꿔야 합니다. 

이 절차를 따르더라도 문제가 발생할 수 있으니, 매우 조심스럽게 읽고 실행에 옮겼는지 확인 하십시오. 이 경우 <var>CHOST</var> 값이 i386에서 i686 으로 바뀌며, 개인적인 상황에 따라 다른 값을 바꿨을 경우 그에 따라 명령도 바꿉니다.

== CHOST 변수 값 바꾸기 ==

=== Updating make.conf ===

To start out with the <var>CHOST</var> variable change, edit the {{Path|/etc/portage/make.conf}} file and add/change the <var>CHOST</var> value to suit the requirements.

{{FileBox|filename=/etc/portage/make.conf|1=
CHOST="i686-pc-linux-gnu"
}}

Please note that if you are planning to use another value of CHOST than the profile default, you may need to update the ''CHOST_${ABI}'' variable as well. You can query the current value of these variable via ''portageq'' tool:

{{Cmd|1=portageq envvar ABI|output=x86}}
{{Cmd|1=portageq envvar CHOST_x86|output=i686-pc-linux-gnu}}

If this value is equal to your CHOST, you're good. Otherwise, you should override it as well, e.g.:

{{FileBox|filename=/etc/portage/make.conf|1=
CHOST_x86="i686-pc-linux-gnu"
}}

===  꾸러미 빌드 ===

{{Important|It is generally a good idea to rebuild the packages '''to the same versions''' as before the CHOST switch, i.e. avoiding combining upgrades with it. If you have multiple slots installed, either uninstall extraneous slots or rebuild all of them. If you can't do that, please upgrade the packages first (with old CHOST). While it may not be impossible to do so, it is hard to predict which potential problems may arise and almost impossible to document them in this guide.}}

{{Tip|On a system with <var>CHOST</var> set to an i386 value, mask glibc 2.4 (or newer) during the gcc upgrade as it cannot be used with i386. Unmask it once the change has been performed completely.}}

Rebuild the following packages in this order:

{{Emerge|sys-devel/binutils|params+=--oneshot}}

{{Note/ko|gcc를 컴파일하기 전에 {{c|binutils-config}} 를 실행해야 할지도 모릅니다.}}

{{Emerge|sys-devel/gcc|params+=--oneshot}}
{{Emerge|sys-libs/glibc|params+=--oneshot}}

=== 동작 확인 ===

이제 {{c|gcc-config}}와 {{c|binutils-config}} 설정이 온전한지 확인하고 {{Path|/etc/env.d/}}에서 나머지 요소를 날릴 때입니다. 

{{c|gcc-config}}와 {{c|binutils-config}} 출력은 다음과 같아야 합니다:

{{Note/ko|gcc 버전과 <var>CHOST</var> 값에 따라 다를 수 있으며, 여기는 GCC 4.1.1과 i686에 해당합니다}} 

{{RootCmd|gcc-config -l|output=<pre>
 [1] i686-pc-linux-gnu-4.1.1 *</pre>}}

{{RootCmd|gcc-config -c|output=<pre>
i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|binutils-config -l|output=<pre>
 [1] i686-pc-linux-gnu-2.16.1 *
# binutils-config -c
i686-pc-linux-gnu-2.16.1
</pre>
}}

다음, 이전 <var>CHOST</var> 변수 값을 {{Path|/etc/env.d/}}에서 참조하는지 확인하십시오: 

{{RootCmd|cd /etc/env.d/
|grep 386 *|output=<pre>
05gcc-i386-pc-linux-gnu:PATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
05gcc-i386-pc-linux-gnu:ROOTPATH="/usr/i386-pc-linux-gnu/gcc-bin/4.1.1"
</pre>
}}

{{Note/ko|대부분의 경우 아무 일도 안일어납니다만 이 경우 {{Path|05gcc-i386-pc-linux-gnu}}에 오래된 <var>CHOST</var> 값 참조가 들어있습니다. 어떤 <var>CHOST</var> 값으로 바꾸느냐에 따라 시스템이 달라볼 수 있거나 그 상태로 괜찮을 수 있습니다. 어떤 경우에는 남아있는 참조가 없을 수도 있습니다. 이름은 {{Path|05gcc-your_new_CHOST-pc-linux-gnu}}여야 합니다.}}

파일을 지우기 전에 업데이트한 <var>CHOST</var> 값이 파일에 붙었는지 확인하도록 하겠습니다: 

{{RootCmd|grep 686 *|output=<pre>
05binutils:MANPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/man
05binutils:INFOPATH=/usr/share/binutils-data/i686-pc-linux-gnu/2.16.1/info
05binutils:LDPATH=/usr/i686-pc-linux-gnu/lib
05gcc:PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
05gcc:MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
05gcc:INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
05gcc:LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
</pre>
}}

여기서는 {{Path|/etc/env.d/}}의 ({{Path|05gcc}}를 예로 들어)<code>gcc</code>에 대해서만 결과가 잘 나온것처럼 보이니, 잘못된 참조가 들어간 파일을 삭제하도록 하겠습니다: 

{{RootCmd|rm 05gcc-i386-pc-linux-gnu}}

이 같은 설정은 {{Path|binutils}}에도 적용합니다 - 추가 요소가 있을 경우 오래된 요소를 찾아 삭제하십시오. 다음 {{Path|/etc/env.d/binutils/}} 디렉터리를 확인하십시오:

{{RootCmd|cd /etc/env.d/binutils/
|ls -la|output=<pre>
total 8
-rw-r--r-- 1 root root  15 Sep  3 13:48 config-i686-pc-linux-gnu
-rw-r--r-- 1 root root 126 Sep  3 13:48 i686-pc-linux-gnu-2.16.1
</pre>}}

{{RootCmd|cat config-i686-pc-linux-gnu|output=<pre>
CURRENT=2.16.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-2.16.1|output=<pre>
TARGET="i686-pc-linux-gnu"
VER="2.16.1"
LIBPATH="/usr/lib/binutils/i686-pc-linux-gnu/2.16.1"
FAKE_TARGETS="i686-pc-linux-gnu"
</pre>
}}

보기 좋아보이는군요, 실제로 두 파일이 위치해 있습니다. 이제 {{Path|gcc/}} 디렉터리로 이동할 때입니다. 

{{RootCmd|cd /etc/env.d/gcc|output=<pre>
# ls -la
total 12
-rw-r--r-- 1 root root  32 Sep  3 16:43 config
-rw-r--r-- 1 root root  32 Aug  3 14:25 config-i386-pc-linux-gnu
-rw-r--r-- 1 root root 292 Sep  3 16:43 i686-pc-linux-gnu-4.1.1
</pre>}}

{{RootCmd|cat config|output=<pre>
CURRENT=i686-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat config-i386-pc-linux-gnu|output=<pre>
CURRENT=i386-pc-linux-gnu-4.1.1</pre>}}

{{RootCmd|cat i686-pc-linux-gnu-4.1.1|output=<pre>
PATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/4.1.1"
LDPATH="/usr/lib/gcc/i686-pc-linux-gnu/4.1.1"
GCCBITS="32"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/info"
STDCXX_INCDIR="g++-v4"
</pre>
}}

{{Path|config}}와 {{Path|i686-pc-linux-gnu-4.1.1}}은 괜찮지만 제거해야 할 {{Path|config-i386-pc-linux-gnu}}가 남아있습니다. 

{{Note/ko|다시 말해 오래된 GCC 버전 참조가 들어있는 파일 이름은 i686으로 바꾸더라도 {{Path|config-i686-pc-linux-gnu}} 처럼 다를 수 있습니다. 이름 뿐만 아니라 파일의 내용을 확인하는 것도 중요합니다.}}

{{RootCmd|rm config-i386-pc-linux-gnu}}

이제 환경을 업데이트하려면 다음 명령을 실행하십시오: 

{{RootCmd|env-update && source /etc/profile}}

모든 문제를 고쳤는지 확인하십시오: 

{{RootCmd|grep -r 386 /etc/env.d/}}

여전이 파일이 남아있다면, 계속 진행하기 전에 쭉 살펴보십시오.

=== 값 바꾸기 끝내기 ===

이제 {{Package|sys-devel/libtool}}를 다시 이머지하고 {{Path|/usr/share/gcc-data/''$CHOST''/''<gcc-version>''/}}에 있는 {{c|fix_libtool_files.sh}}를 실행해야 합니다. 올바른 gcc 버전을 사용중이며(현재 여기서는 4.1.1) 이전 아키텍처(i386)를 매개변수로 넘겼는지 확인하십시오. <code>$CHOST</code> 값을 새 <var>CHOST</var> 값으로 바꾸고 <code><gcc-version></code>를 현재 gcc 버전으로 바꾸십시오. 이 예제에서는 CHOST 값을 i686으로 설정했음을 가정합니다. 

{{Emerge|libtool|params+=--oneshot}}

{{RootCmd|/usr/share/gcc-data/i686-pc-linux-gnu/4.1.1/fix_libtool_files.sh 4.1.1 --oldarch i386-pc-linux-gnu}}

이제 모든 꾸러미를 다시 빌드할 수 있습니다: 

{{RootCmd|emerge -e world}}

In theory, it should not be necessary to do so, but it cannot be 100% guaranteed that this is actually the case. Alternatively, you can manually rebuild all the known problematic packages:
* multilib packages using CHOST prefixing or header wrapping,
* Perl, Python and other tools that store configured compiler path.

{{Emerge|params+=--oneshot|/usr/bin/i386-pc-linux-gnu-* /usr/include/i386-pc-linux-gnu /usr/lib/llvm/*/bin/i386-pc-linux-gnu-* dev-lang/perl dev-lang/python}}

Note that you may need to remove paths that do not apply to your system from the above invocation.

When encountering other packages that need recompiling, please let us know through the [[Talk:Changing_the_CHOST_variable|discussion page]] of this guide.

=== 일반적인 문제 ===

<var>CHOST</var> 값을 바꾼 후 GCC 3.3에서 4.1로 업그레이드 할 때(어쨌든 이렇게 하지 마십시오), 꽤 많은 사람이 {{Package|sys-apps/groff}} 와 {{Package|mail-mta/courier}}같은 꾸러미가 깨져 다시 컴파일해야 한다고 보고했습니다: 

{{CodeBox|title=오류 메시지|1=
error while loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory
}}

이 일은 업그레이드 도중에 <var>CHOST</var> 값이 <var>CTARGET</var>과 일치하지 않고, 컴파일러가 크로스컴파일하는걸로 간주하기 때문에 일어나는 일입니다. 결과적으로 <var>LDPATH</var> 값을 {{Path|ld.so.conf}}에 넣지 않아 이 오류가 나타납니다. 

GCC 업그레이드 후 다시 빌드해야 할 꾸러미의 정보는 [[Upgrading_GCC/ko|GCC 업그레이드 안내서]]를 참고하십시오. 

어떤 드문 경우에는 오래된 버전의 파이선도 깰 수 있습니다. {{Path|/usr/lib/gcc-lib/i386-pc-linux-gnu/3.3.6}}(이전 <var>CHOST</var> 값에 따라 바꾸십시오)를 {{Path|/etc/ld.so.conf}} 에 추가하고 {{c|ldconfig}}를 실행한 다음 {{c|emerge libstdc++-v3}}를 실행하면 문제를 해결할 수 있습니다. 그러나 보신 바와 같이 이 문제에 직면하는걸 제대로 막아야 합니다. <var>CHOST</var> 값과 GCC 버전을 동시에 바꾸지 마십시오.

=== 피드백 ===

That should be all, feedback (both if it worked, failed or other problems were encountered) is welcome, please use the [[Talk:Changing_the_CHOST_variable|discussion page]] or post to [https://forums.gentoo.org/viewtopic-t-494147.html this forum thread]. Much in this guide comes from vapier, thanks for your help!

{{Migrated|originalauthors=Wernfried Haas, {{Dev|vapier}}, Chris White}}
