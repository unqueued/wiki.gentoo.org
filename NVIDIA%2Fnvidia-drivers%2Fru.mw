<languages />

{{Metadata|abstract=nvidia-drivers — это проприетарный графический драйвер для видеокарт nVidia. Альтернативой с открытым исходным кодом является nouveau.}}

{{Package|x11-drivers/nvidia-drivers}} — это проприетарный графический драйвер для видеокарт nVidia. Альтернативой с открытым исходным кодом является [[nouveau]].

Драйвера {{Package|x11-drivers/nvidia-drivers}} в дереве Portage выпускаются nVidia и собираются для ядра Linux. Они содержат блоб (от англ. binary linked object — объект двоичной компоновки), который берет на себя основную работу по взаимодействию с платой. Драйвера состоят из двух частей: модуля ядра и драйвера X11. Обе части включаются в один пакет. Вследствие особенностей упаковки драйверов nVidia, необходимо сделать некоторый выбор перед установкой драйверов.

Пакет {{Package|x11-drivers/nvidia-drivers}} включает в себя последние драйвера от nVidia с поддержкой ''всех'' плат. Имеется в наличии несколько версий пакета в зависимости от того, насколько у вас старая плата. Этот пакет использует eclass для обнаружения типа используемой платы, чтобы установить подходящую версию.

== Аппаратная совместимость ==

Пакет {{Package|x11-drivers/nvidia-drivers}} поддерживает целый диапазон доступных плат nVidia. В зависимости от видеокарты, которая имеется в системе, для установки доступно большое число версий. Прочитайте официальную документацию nVidia [http://www.nvidia.com/object/IO_32667.html Что такое устаревший драйвер?], для того, чтобы узнать, какую версию пакета {{Package|x11-drivers/nvidia-drivers}} лучше использовать. Достаточно подходящий способ узнать это с помощью интерактивной формы предложенной [http://www.nvidia.com/Download/Find.aspx здесь]. Введите видеокарту (учитывая параметр Legacy в поле 'Product Type'), и форма отобразит наилучшую поддерживаемую версию.

Если карта определилась как устаревшая, замаскируйте свежие выпуски {{Package|nvidia-drivers}}, т. е.

{{FileBox|filename=/etc/portage/package.mask|title=Masking drivers with version higher than 174|1=
>x11-drivers/nvidia-drivers-174
}}

Заметьте, что Gentoo не предоставляет версии 71.86.xx. Если в системе установлена видеокарта, которой необходимы эти драйвера, то рекомендуется использовать драйвер [[nouveau]].

== Установка ==

=== Ядро ===

Как упоминалось выше, драйвер ядра nVidia устанавливается и работает на текущем ядре. Он собирается в виде модуля, поэтому ядро должно поддерживать загрузку модулей ядра (смотрите ниже).

Модуль ядра ({{Path|nvidia.ko}}) состоит из проприетарной части (широко известной как ''двоичный блоб''), которая управляет графическими чипами, и части с открытым исходным кодом (клей — англ. ''glue''), которая во время исполнения работает как посредник между проприетарной частью и ядром. Они должны работать вместе слаженно, иначе вы можете столкнуться с потерей данных (из-за паники ядра, сбоя X-сервера с несохраненными данными в X-приложениях) и даже повреждением аппаратного обеспечения (перегрев и другие проблемы с управлением питания тут же приходят на ум).

==== Совместимость ядра ====

Время от времени, новый релиз ядра изменяет внутренний двоичный интерфейс приложений (англ. ABI, application binary interface) для драйверов, что означает, что все драйвера, которые используют этот интерфейс, должны быть соответствующим образом изменены. Для драйверов с открытым исходным кодом, особенно распространяемых с ядром, эти изменения практически тривиальны для исправления, так как цепочка вызовов между драйверами и другими частями ядра может быть просмотрена достаточно легко. Для проприетарных драйверов типа nvidia.ko, это далеко не так. При изменении внутреннего двойчного интерфейса приложений, невозможно просто исправить используемый ''клей'', потому что неизвестно как этот клей используется проприетарной частью. Если удастся наладить работу и все будет работать исправно, вы все еще рискуете тем, что работа nvidia.ko в новом, неподдерживаемом ядре приведет к потере данных и аппаратному сбою.

Когда выпускается новая, несовместимая версия ядра, лучше некоторое время оставаться на последнем поддерживаемом ядре. Обычно, Nvidia требуется несколько недель для подготовки нового проприетарного релиза, который, по их мнению, подходит для общего использования. Просто будьте терпеливы. Если же обновление совершенно необходимо, ebuild-файл nvidia-drivers поддерживает команду epatch_user из класса eutils.class: это позволит вам исправить nvidia-drivers для их совместимости с последним, неподдерживаемым релизом ядра. Однако заметьте, что ни мейнтейнеры пакета nvidia-drivers, ни Nvidia не оказывают тех. поддержки, в данной ситуации. Гарантия на аппаратное обеспечение, скорее всего, будет аннулирована. Мейнтейнеры Gentoo не смогут исправить ваши проблемы, так как это проприетарный драйвер, который может быть отлажен только Nvidia. Мейнтейнеры ядра (как пакета Gentoo, так и разработчики самого ядра), определенно не будут поддерживать проприетарные драйвера или, любую ''испорченную'' систему, которая может вызвать проблемы.

Если для конфигурации ядра был использован <tt>genkernel all</tt>, тогда все в порядке. Если нет, дважды проверьте конфигурацию ядра, так чтобы поддержка загружаемых модулей была включена:

{{KernelBox|title=Включить поддержку загружаемых модулей|1=
[*] Enable loadable module support --->
}}

Также включите в ядро поддержку диапазонных регистров типа памяти (англ. Memory Type Range Register - MTRR):

{{KernelBox|title=Включить поддержку MTRR|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

Если у вас видеокарта AGP, вы можете дополнительно включить в ядро поддержку драйвера agpgart, встроенного в ядро, или в качестве модуля. Если модуль apggart не используется, то драйверы будут использовать собственную реализацию apggart, называемую NvAGP. На определенных системах, это приводит к лучшей производительности, чем встроенный в ядро agpgart, а на некоторых, к худшей. Оцените оба варианта на своей собственной системе для достижения наилучшей производительности. Если вы не уверены что делать, используйте встроенный в ядро agpgart:

{{KernelBox|title=Включение поддержки agpgart|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note|На amd64 настройками agpgart управляет IOMMU.}}

{{Important|For x86 and AMD64 processors, the in-kernel [[framebuffer]] driver conflicts with the binary driver provided by nVidia. When compiling the kernel for these CPUs, completely remove support for the in-kernel driver as shown:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Now make sure the nouveau driver is disabled:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        <*> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
            < > Nouveau (nVidia) cards
}}
}}

A framebuffer alternative is [[uvesafb]], which can be installed parallel to {{Package|x11-drivers/nvidia-drivers}}. 

For (U)EFI systems, uvesafb will not work. Be warned that enabling ''efifb'' support in kernel (<code>CONFIG_FB_EFI=y</code>) causes intermittent problems with the initialization of the nvidia drivers. There is no known alternative framebuffer for (U)EFI systems.

The '''nvidia-drivers''' ebuild automatically discovers the kernel version based on the {{Path|/usr/src/linux}} symlink. Please ensure that this symlink is pointing to the correct sources and that the kernel is correctly configured. Please refer to the "Configuring the Kernel" section of the [[Handbook:Main_Page|Gentoo Handbook]] for details on configuring the kernel.

First, choose the right kernel source using <tt>eselect</tt>. When using <tt>gentoo-sources-3.7.10</tt>, the kernel listing might look something like this:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the symlinked kernel.

If the symlink is not pointing to the correct sources, update the link by selecting the number of the desired kernel sources, as in the example above.

{{RootCmd|eselect kernel set 1}}

== Конфигурация ==

=== Драйвера === 

Теперь самое время установить драйвера. Сперва, следуйте [[Xorg/Guide/ru|
Xorg/Руководство]] и установите <code>VIDEO_CARDS="nvidia"</code> в {{Path|/etc/portage/make.conf}}. Во время установки X-сервера, он установит правильную версию {{Package|x11-drivers/nvidia-drivers}}.

{{Note|Драйвера могут быть установлены с USE-флагом <code>gtk</code>, прописанным в {{Path|/etc/portage/make.conf}}. Это установит пакет {{Package|media-video/nvidia-settings}}, удобный графический инструмент для мониторинга и конфигурации нескольких аспектов платы nVidia.}}

{{Important|Каждый раз, когда [[Kernel/Upgrade/ru|компилируется ядро]], необходимо переустановить модули ядра, принадлежащих nVidia. Простым способом пересборки модулей, установленных ebuild-файлами (такими как {{Package|x11-drivers/nvidia-drivers}}), является запуск  <tt>emerge @module-rebuild</tt>.}}

После завершения установки, запустите <tt>modprobe nvidia</tt> для загрузки модуля ядра в память. Если вы обновляете ядро, то сначала удалите предыдущий модуль.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Чтобы, не загружать модуль вручную, после каждой перезагрузки.
Добавьте <code>nvidia</code> в {{Path|/etc/conf.d/modules}}, для его автоматической загрузки, при старте системы.

{{Important|Если <code>agpgart</code> скомпилирован как модуль, также добавьте и его в {{Path|/etc/conf.d/modules}}.}}

=== Подпись модулей ядра (опционально) ===

{{Note|The information in this section in unnecessary for systems that do not implement signed kernel modules. Feel free to skip it.}}

If you are using secure boot kernel signing then you will need to sign the Nvidia kernel modules before they can be loaded.

You do this by using the kernel provided <tt>perl</tt> script as follows.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

As of driver version 358.09 a new module has been made to handle monitor mode setting and for this driver version this module must also be signed.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Once you have signed these modules then the driver will load as expected on boot up. This module signing method can be used to sign other modules not only your nvidia-drivers. You would have to modify the path and corresponding module accordingly.

=== The X server ===

Once the appropriate drivers are installed, configure the X server to use the <tt>nvidia</tt> driver instead of the default <tt>nv</tt> driver.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Run <tt>eselect</tt> so that the X server uses the nVidia GLX libraries:

{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Enabling global nvidia support ===

Some tools, such as {{Package|media-video/mplayer}} and {{Package|media-libs/xine-lib}}, use a local USE flag called <code>xvmc</code> which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in <code>xvmc</code> in the USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to {{Package|media-video/mplayer}} and/or {{Package|media-libs/xine-lib}} in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the <code>nvidia</code> USE flag, so it might be a good idea to add it to {{Path|/etc/portage/make.conf}}.

Then, run {{c|emerge -uD --newuse @world}} to rebuild the applications that benefit from the USE flag change.

=== Using the nVidia settings tool ===

nVidia also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as {{Package|media-video/nvidia-settings}}. As mentioned earlier, it will be pulled in automatically when installing the drivers with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== Включение OpenGL/OpenCL ===

To enable OpenGL and OpenCL though the device, run:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Make sure that the Xorg server is not running during these changes.

== Usage ==

=== Testing the card ===

Для того, чтобы протестировать вашу видеокарту, запустите X и введите команду <tt>glxinfo</tt>, которая является частью пакета {{Package|x11-apps/mesa-progs}}. Она должна сообщить, что direct rendering активирован:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Для проверки кадровой частоты — FPS, запустите <tt>glxgears</tt>.

== Устранение неполадок ==

* {{Bug|nvidia-drivers|search=package}}

=== Драйвер не инициализируется, если включены прерывания MSI ===

Драйвер NVIDIA в Linux по умолчанию использует Message Signaled Interrupts (прерывания инициируемые сообщениями, MSI). В результате этого мы получаем совместимость и расширяемость, в основном из-за отсутствия необходимости разделения IRQ. На некоторых системах наблюдаются проблемы с поддержкой MSI, хотя они хорошо работают с прерываниями virtual wire (виртуальные провода). Это приводит к невозможности запустить X вместе с драйвером NVIDIA, либо к проблемам инициализации CUDA.

Прерывания MSI можно запретить параметром модуля ядра NVIDIA <code>NVreg_EnableMSI=0</code>. Это можно сделать в командной строке при загрузке модуля, либо (более правильно) через файлы конфигурации модулей дистрибутива (например, через те, что находятся в {{Path|/etc/modprobe.d/}}).

Например:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Поддержка драйверов Nvidia
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# Следующие параметры можно менять. Помните, что
# нужно быть осторожным, так как из-за них может возникнуть нестабильность!
# Более детальная информация находится в файле /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! ВНИМАНИЕ, ПО ПОВОДУ БЕЗОПАСНОСТИ !!!
# НЕ МЕНЯЙТЕ И НЕ УДАЛЯЙТЕ НАСТРОЙКИ УСТРОЙСТВА, ЕСЛИ ТОЛЬКО
# ВЫ НЕ УВЕРЕНЫ В ТОМ, ЧТО ДЕЛАЕТЕ.
# ДОБАВЛЯЙТЕ ТОЛЬКО ДОВЕРЕННЫХ ПОЛЬЗОВАТЕЛЕЙ В ГРУППУ VIDEO, ТАК КАК ОНИ МОГУТ 
# УМЕРЕННО ИЛИ НЕОБРАТИМО ИСПОРТИТЬ КОМПЬЮТЕР.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Работа с 2D ускорением на машинах с 4 Гб памяти и больше. ===

Если вы испытываете проблемы с ускорением 2D графики nVidia, скорее всего системе не удалось настроить диапазон совмещения записи (write-combining range) в MTRR. Чтобы это проверить, пересмотрите содержимое следующих файлов
{{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Каждая строка должна содержать <tt>write-back</tt> или <tt>write-combining</tt>. При появлении строки со словом <tt>uncachable</tt>, необходимо изменить настройки BIOS, чтобы это исправить.

Перезагрузитесь и войдите в BIOS, затем найдите настройки MTRR (возможно, под ''CPU Settings''). Измените настройки с <tt>continuous</tt> на <tt>discrete</tt> и перезагрузитесь обратно в Linux. Теперь записи со словом <tt>uncachable</tt> больше нет и 2D-ускорение работает без каких-либо неполадок.

=== ''no such device'', при попытке загрузить модуль ядра ===

Это обычно вызвано одной из следующих проблем:

# В системе отсутствует, какая лиюл видеокарта nVidia. Проверьте вывод <tt>lspci</tt>, чтобы убедиться, что видеокарта nVidia подключена и обнаружена.
# Установленная версия {{Package|x11-drivers/nvidia-drivers}} не поддерживает подключенную модель видеокарты. Проверьте файл README в {{Path|/usr/share/nvidia-drivers-*/}} на наличие списка поддерживаемых устройств, или используйте поиск драйверов в [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Карта используется другим драйвером ядра. Проверьте, с помощью <tt>lspci -k</tt>, если другой драйвер, вроде "nouveau", привязан к текущей карте. Если да, то отключите его или добавте в черный список.

=== Xorg сообщает, что не может найти какие-либо экраны ===

Когда после загрузки системы, вместо графического интерфейса пользователя, вы получаете черный экран или командную строку в консоли; нажмите {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}}, чтобы вызвать командную строку (если она отсутствует). Затем запустите:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

чтобы увидеть вывод работы Xorg. Если одной из первых ошибок идет сообщение о том, что Xorg не может найти какие-либо экраны, следуйте следующим инструкциям, чтобы разрешить проблему.

Должно быть достаточно запуска следующей команды перед перезагрузкой:

{{Cmd| /opt/bin/nvidia-xconfig}}

Но если это не работает, запустите <tt>lspci</tt> и найдите вашу видеокарту, начинающуюся примерно так:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: модель вашей видеокарты
 . . . 
</pre>
}}

Возьмите первую часть, <code>01.00.0</code> и поместите ее в {{Path|/etc/X11/xorg.conf}} вместе с параметром <code>BusID</code>:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# это не целый файл, а только часть, которая должна быть отредактирована
# файл уже должен существовать, после запуска nvidia-xconfig

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering не активирован ===

Если direct rendering не работает, это может быть потому, что Direct Rendering Manager включен в ядро, что вызывает конфликт с драйвером. Проверьте статус Direct Rendering следуя инструкциям раздела [[#Тестирование видеокарты|Тестирование видеокарты]].

Во-первых, отключите Direct Rendering Manager (<code>CONFIG_DRM</code>) в ядре :

{{KernelBox|title=Отключение Direct Rendering Manager|1=

Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Далее, соберите заново {{Package|x11-drivers/nvidia-drivers}}, так как драйвер мог быть пересобран с DRM-символами ядра. Это должно исправить проблему.

=== Замедленное или заикающееся проигрывание видео ===

В последнее время можно наблюдать сбои с проигрыванием некоторых типов видео на бинарных драйверах NVidia, вызывающие медленное воспроизведение или значительное заикание. Эта проблема происходит при замене для определенных процессоров общего ACPI метода холостого хода на метод от Intel.

Отключите метод холостого хода для процессора Intel, используя <code>intel_idle.max_cstate=0</code> в методе загрузки командной строки ядра, что должно дать основание для ядра автоматически откатится до нормального или более старого ACPI метода холостого хода процессора. Также, отключение NVidia Powermizer, или установка Powermizer на максимальную производительность с <tt>nvidia-settings</tt>, также может помочь. Хотя метод холостого хода для процессора Intel был представлен как стандарт для процессоров i5 и i7 (против использования ACPI метода), есть серьезная причина. Этот метод существенно решает проблему, однако некоторые небольшие заикания или медленное воспроизведение встречаются при включенном деинтерлейсинге; это происходит когда видео уже деинтерлейсировано (т.е. псевдоним <tt>mplayer-nodeint</tt> с чем-то похожим для <tt>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</tt>).

=== No vertical synchronization (no VSync, tearing) in OpenGL applications ===

Adding the following option to the screen section prevents tearing on GTX 660, 660 Ti, and probably some other GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== Тонкая настройка ==

=== Документация ===

Пакет {{Package|x11-drivers/nvidia-drivers}} также поставляется с исчерпывающей документацией. Она устанавливается в каталог {{Path|/usr/share/doc}} и может быть просмотрена с помощью следующей команды:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Параметры модуля ядра ===

Модуль ядра <tt>nvidia</tt> принимает набор параметров (options), которые позволяют настроить поведение драйвера. Большинство из них упомянуто в документации. Для того, чтобы добавить или изменить значения этих параметров, отредактируйте файл {{Path|/etc/modprobe.d/nvidia.conf}}. Не забудьте запустить <tt>update-modules</tt> после изменения этого файла и помните, что вам потребуется перезагрузить модуль <code>nvidia</code>  перед тем, как новые настройки вступят в силу.

Отредактируйте {{Path|/etc/modprobe.d/nvidia.conf}}:

{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Обновите информацию о модулях:

{{RootCmd|update-modules}}

Выгрузите модуль <tt>nvidia</tt>...

{{RootCmd|modprobe -r nvidia}}

...и загрузите его снова:

{{RootCmd|modprobe nvidia}}

=== Расширенная конфигурация X-сервера ===

GLX-интерфейс также имеет огромное количество параметров, которые можно настроить. Они управляют конфигурацией выхода TV, одновременным выводом на два монитора, определением частоты монитора, и так далее. Опять же, все доступные параметры подробно описаны в документации.

Чтобы использовать какие-либо из этих параметров, необходимо перечислить их в соответственном разделе Device в файле конфигурации X (обычно находящемся в {{Path|/etc/X11/xorg.conf}}). Например, чтобы отключить всплывающий логотип — splash logo:

{{FileBox|filename=/etc/X11/xorg.conf|title=Отключение splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== Смотрите также ==

* [[nouveau & nvidia-drivers switching]] - Hybrid graphics mode using open-source drivers.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configure a system to use closed-source drivers for hybrid graphics (modesetting).

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
