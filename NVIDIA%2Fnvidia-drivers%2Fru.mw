<languages />

{{Metadata|abstract=nvidia-drivers — это проприетарный графический драйвер для видеокарт nVidia. Альтернативой с открытым исходным кодом является nouveau.}}

{{Package|x11-drivers/nvidia-drivers}} — это проприетарный графический драйвер для видеокарт nVidia. Альтернативой с открытым исходным кодом является [[nouveau]].

Драйвера {{Package|x11-drivers/nvidia-drivers}} в дереве портежей выпускаются nVidia и собираются для ядра Linux. Они содержат блоб (от англ. binary linked object — объект двоичной компоновки), который берет на себя основную работу по взаимодействию с платой. Драйвера состоят из двух частей: модуля ядра и драйвера X11. Обе части включаются в один пакет. Вследствие особенностей упаковки драйверов nVidia, вам придётся сделать некоторый выбор перед установкой драйверов.

Пакет {{Package|x11-drivers/nvidia-drivers}} включает в себя последние драйвера от nVidia с поддержкой ''всех'' плат. Имеется в наличии несколько версий пакета в зависимости от того, насколько у вас старая плата. Этот пакет использует eclass для обнаружения типа используемой платы, чтобы установить подходящую версию.

== Hardware compatibility ==

The {{Package|x11-drivers/nvidia-drivers}} package supports a range of available nVidia cards. Multiple versions are available for installation, depending on the card(s) that the system has. See the official nVidia documentation, [http://www.nvidia.com/object/IO_32667.html What's a legacy driver?], to find out what version of {{Package|x11-drivers/nvidia-drivers}} should be used. A pretty decent way to find this out through [http://www.nvidia.com/Download/Find.aspx  an interactive form]. Enter the graphics card that is used by the system (mind the Legacy option in the 'Product Type' field) and the form should end up with the best supported version.

Если ваша карта определилась как устаревшая, замаскируйте свежие выпуски {{Package|nvidia-drivers}}, т. е.

{{FileBox|filename=/etc/portage/package.mask|Masking drivers with version higher than 174|1=
>x11-drivers/nvidia-drivers-174
}}

Заметьте, что Gentoo не предоставляет версии 71.86.xx. Если вашей карте требуются эти драйвера, рекомендуется использовать драйвер [[nouveau]] .

== Kernel ==

As mentioned above, the nVidia kernel driver installs and runs against the current kernel. It builds as a module, so the kernel must support the loading of kernel modules (see below).

Модуль ядра (nvidia.ko) состоит из проприетарной части (широко известной как ''двоичный блоб''), которая управляет графическими чипами, и части с открытым исходным кодом (клей — англ. ''glue''), которая во время исполнения работает как посредник между проприетарной частью и ядром. Они должны работать вместе слаженно, иначе вы можете столкнуться с потерей данных (из-за паники ядра, сбоя X-сервера с несохраненными данными в X-приложениях) и даже повреждением аппаратного обеспечения (перегрев и другие проблемы с управлением питания тут же приходят на ум).

=== Kernel compatibility ===

From time to time, a new kernel release changes the internal ABI for drivers, which means all drivers that use those ABIs must be changed accordingly. For open source drivers, especially those distributed with the kernel, these changes are nearly trivial to fix since the entire chain of calls between drivers and other parts of the kernel can be reviewed quite easily. For proprietary drivers like nvidia.ko, it doesn't work quite the same. When the internal ABIs change, then it is not possible to merely fix the "glue", because nobody knows how the glue is used by the proprietary part. Even after managing to patch things up to have things seem to work nicely, the user still risks that running nvidia.ko in the new, unsupported kernel will lead to data loss and hardware failure.

When a new, incompatible kernel version is released, it is probably best to stick with the newest supported kernel for a while. Nvidia usually takes a few weeks to prepare a new proprietary release they think is fit for general use. Just be patient. If absolutely necessary, then it is possible to use the epatch_user command with the nvidia-drivers ebuilds: this allows the user to patch nvidia-drivers to somehow fit in with the latest, unsupported kernel release. Do note that neither the nvidia-drivers maintainers nor Nvidia will support this situation. The hardware warranty will most likely be void, Gentoo's maintainers cannot begin to fix the issues since it's a proprietary driver that only Nvidia can properly debug, and the kernel maintainers (both Gentoo's and upstream) will certainly not support proprietary drivers, or indeed any "tainted" system that happens to run into trouble.

=== Required kernel options ===

If <tt>genkernel all</tt> was used to configure the kernel, then everything is all set. If not, double check the kernel configuration so that this support is enabled:

{{KernelBox|title=Enable loadable module support|1=
[*] Enable loadable module support --->
}}

Также включите в ядро поддержку диапазонных регистров типа памяти (англ. Memory Type Range Register - MTRR):

{{KernelBox|title=Enable MTRR support|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

Если у вас видеокарта AGP, вы можете дополнительно включить в ядро поддержку драйвера <tt>apggart</tt>, встроенного в ядро, или в качестве модуля. Если модуль <tt>apggart</tt> не используется, то драйверы будут использовать собственную реализацию <tt>apggart</tt>, называемую <tt>NvAGP</tt>. На определенных системах, это приводит к лучшей производительности, чем встроенный в ядро <tt>agpgart</tt>, а на некоторых, к худшей. Оцените оба варианта на своей собственной системе для достижения наилучшей производительности. Если вы не уверены что делать, используйте встроенный в ядро <tt>agpgart</tt>:

{{KernelBox|title=Enable agpgart support|1=
Device Drivers --->
    Graphics support --->
        -*- /dev/agpgart (AGP Support) --->
}}

{{Note/ru|На amd64 настройками agpgart управляет IOMMU.}}

{{Important/ru|Для процессоров архитектуры x86 и AMD64, встроенный в ядро драйвер [[framebuffer]] конфликтует с двоичным драйвером, предоставляемым nVidia. Когда вы компилируете ядро для этих процессоров, полностью уберите поддержку встроенных в ядро драйверов, как показано ниже:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
}}

Альтернативой для кадрового буфера является [[uvesafb]], который может быть установлен вместе с {{Package|x11-drivers/nvidia-drivers}}.

Ebuild-файл '''nvidia-drivers''' автоматически обнаруживает версию вашего ядра, основываясь на символьной ссылке {{Path|/usr/src/linux}}. Пожалуйста, убедитесь, что эта символьная ссылка указывает на корректные исходные коды и что ваше ядро сконфигурировано правильно. Обратитесь к разделу «Конфигурация ядра» [[Handbook:Main_Page/ru|Настольной книги Gentoo]] для получения подробностей по конфигурации ядра.

Сперва, выберите правильные исходные тексты ядра используя <kbd>eselect</kbd>. Если вы используете <tt>gentoo-sources-3.7.10</tt>, список доступных ядер может выглядеть следующим образом:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

В результате, приведенном выше, заметьте, что ядро <tt>linux-3.7.10-gentoo</tt> помечено звездочкой (<code>*</code>), для того, чтобы продемонстрировать, что это то ядро, на которое указывает символьная ссылка.

Если символьная ссылка не указывает на корректные исходные тексты, обновите ее, выбирая номер требуемых вами исходных текстов ядра, как в приведенном далее примере.

{{RootCmd|eselect kernel set 1}}

== Драйвера == 

Теперь самое время установить драйвера. Сперва, следуйте [[Xorg/Configuration/ru|Описание настройки X-сервера]] и установите <code>VIDEO_CARDS="nvidia"</code> в {{Path|/etc/portage/make.conf}}. Во время установки X-сервера, он установит правильную версию {{Package|x11-drivers/nvidia-drivers}}.

{{Note/ru|Драйвера могут быть установлены с USE-флагом <code>gtk</code>, прописанным в {{Path|/etc/portage/make.conf}}. Это установит пакет {{Package|media-video/nvidia-settings}}, удобный графический инструмент для мониторинга и конфигурации нескольких аспектов платы nVidia.}}

{{Important/ru|Каждый раз, когда [[Kernel/Upgrade/ru|компилируется ядро]], необходимо переустановить модули ядра, принадлежащих nVidia. Простым способом пересборки модулей, установленных ebuild-файлами (такими как {{Package|x11-drivers/nvidia-drivers}}), является запуск  <kbd>emerge @module-rebuild</kbd>.}}

После завершения установки, запустите <kbd>modprobe nvidia</kbd> для загрузки модуля ядра в память. Если вы обновляете ядро, то сначала удалите предыдущий модуль.

== Драйвера ==
Теперь самое время установить драйвера. Вы можете это сделать сначала следуя [http://www.gentoo.org/doc/en/xorg-config.xml Описанию настройки X-сервера], и, затем, установив '''VIDEO_CARDS="nvidia"''' в {{Path|/etc/portage/make.conf}}. После того, как Вы установите X-сервер,, он затем установит правильную версию '''nvidia-drivers''' для Вас.

Чтобы, не загружать модуль вручную, после каждой перезагрузки.
Добавьте <code>nvidia</code> в {{Path|/etc/conf.d/modules}}, для его автоматической загрузки, при старте системы.

{{Important/ru|Если <code>agpgart</code> скомпилирован как модуль, также добавьте и его в {{Path|/etc/conf.d/modules}}.}}

=== The X server ===

Once the appropriate drivers are installed, configure the X server to use the <tt>nvidia</tt> driver instead of the default <tt>nv</tt> driver.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Запустите <kbd>eselect</kbd>, чтобы X-сервер использовал GLX библиотеки nVidia:

{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===

{{VIDEO_CARDS/Permissions|nvidia}}

== Testing the card ==

To test the nVidia card, fire up X and run <kbd>glxinfo</kbd>, which is part of the {{Package|x11-apps/mesa-progs}} package. It should say that direct rendering is activated:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Для проверки кадровой частоты — FPS, запустите <kbd>glxgears</kbd>.

== Enabling nvidia support ==

Some tools, such as {{Package|media-video/mplayer}} and {{Package|media-libs/xine-lib}}, use a local USE flag called <code>xvmc</code> which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in <code>xvmc</code> in the USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to <code>media-video/mplayer</code> and/or <code>media-libs/xine-lib</code> in {{Path|/etc/portage/package.use}}.

Серии GeForce 8 и более поздние GPU выходят с поддержкой VDPAU, которая заменила собой поддержку XvMCNVIDIA. Смотри статью [[VDPAU]] для включения поддержки VDPAU.

Также есть несколько приложений, которые используют USE-флаг <code>nvidia</code>, поэтому было бы неплохо добавить его в файл {{Path|/etc/portage/make.conf}}.

Затем, запустите <kbd>emerge -uD --newuse @world</kbd> для пересборки приложений, которые выигрывают от изменения этого USE-флага.

=== Using the nVidia settings tool ===

nVidia also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as {{Package|media-video/nvidia-settings}}. As mentioned earlier, it will be pulled in automatically when installing the drivers with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== Включение OpenGL/OpenCL ===

Для включения OpenGL и OpenCL.

{{RootCmd|eselect opengl set nvidia}}
{{RootCmd|eselect opencl set nvidia}}

Убедитесь, что сервер Xorg не запущен во время проведения этих изменений.

== Troubleshooting ==

* {{Bug|nvidia-drivers|search=package}}

=== Драйвер не инициализируется, если включены прерывания MSI ===

Драйвер NVIDIA в Linux по умолчанию использует Message Signaled Interrupts (прерывания инициируемые сообщениями, MSI). В результате этого мы получаем совместимость и расширяемость, в основном из-за отсутствия необходимости разделения IRQ. На некоторых системах наблюдаются проблемы с поддержкой MSI, хотя они хорошо работают с прерываниями virtual wire (виртуальные провода). Это приводит к невозможности запустить X вместе с драйвером NVIDIA, либо к проблемам инициализации CUDA.

Прерывания MSI можно запретить параметром модуля ядра NVIDIA <code>NVreg_EnableMSI=0</code>. Это можно сделать в командной строке при загрузке модуля, либо (более правильно) через файлы конфигурации модулей дистрибутива (например, через те, что находятся в {{Path|/etc/modprobe.d/}}).

Например:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Поддержка драйверов Nvidia
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# Следующие параметры можно менять. Помните, что
# нужно быть осторожным, так как из-за них может возникнуть нестабильность!
# Более детальная информация находится в файле /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! ВНИМАНИЕ, ПО ПОВОДУ БЕЗОПАСНОСТИ !!!
# НЕ МЕНЯЙТЕ И НЕ УДАЛЯЙТЕ НАСТРОЙКИ УСТРОЙСТВА, ЕСЛИ ТОЛЬКО
# ВЫ НЕ УВЕРЕНЫ В ТОМ, ЧТО ДЕЛАЕТЕ.
# ДОБАВЛЯЙТЕ ТОЛЬКО ДОВЕРЕННЫХ ПОЛЬЗОВАТЕЛЕЙ В ГРУППУ VIDEO, ТАК КАК ОНИ МОГУТ 
# УМЕРЕННО ИЛИ НЕОБРАТИМО ИСПОРТИТЬ КОМПЬЮТЕР.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Getting 2D acceleration to work on machines with 4GB memory or more ===

When nVidia 2D acceleration is giving problems, then it is likely that the system is unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Каждая строка должна содержать <tt>write-back</tt> или <tt>write-combining</tt>. При появлении строки со словом <tt>uncachable</tt>, необходимо изменить настройки BIOS, чтобы это исправить.

Перезагрузитесь и войдите в BIOS, затем найдите настройки MTRR (возможно, под ''CPU Settings''). Измените настройки с <tt>continuous</tt> на <tt>discrete</tt> и перезагрузитесь обратно в Linux. Теперь записи со словом <tt>uncachable</tt> больше нет и 2D-ускорение работает без каких-либо неполадок.

=== "no such device" appears when trying to load the kernel module ===

This is usually caused by one of the following issues:

# В системе отсутствует, какая лиюл видеокарта nVidia. Проверьте вывод <kbd>lspci</kbd>, чтобы убедиться, что видеокарта nVidia подключена и обнаружена.
# Установленная версия {{Package|x11-drivers/nvidia-drivers}} не поддерживает подключенную модель видеокарты. Проверьте файл README в {{Path|/usr/share/nvidia-drivers-*/}} на наличие списка поддерживаемых устройств, или используйте поиск драйверов в [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Карта используется другим драйвером ядра. Проверьте, с помощью <kbd>lspci -k</kbd>, если другой драйвер, вроде "nouveau", привязан к текущей карте. Если да, то отключите его или добавте в черный список.

=== Xorg says it can't find any screens ===

When after booting the system, it ends up with a black screen or a console prompt instead of the GUI; then press {{Key|Ctrl+Alt+F2}} to bring up a console prompt. Next, run:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

to see the output of Xorg. If one of the first errors is that Xorg can't find any screens, then follow the following steps to resolve the issue.

It should be enough to run the following command before rebooting:

{{Cmd| /opt/bin/nvidia-xconfig}}

But if that doesn't work, run <kbd>lspci</kbd> and notice that the video card starts off like this:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

Take the first bit, <code>01.00.0</code> and put it in the {{Path|/etc/X11/xorg.conf}} file with the <code>BusID</code> option:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering не активирован ===

Если direct rendering не работает, это может быть потому, что Direct Rendering Manager включен в ядро, что вызывает конфликт с драйвером. Проверьте статус Direct Rendering следуя инструкциям раздела [[#Тестирование видеокарты|Тестирование видеокарты]].

First, disable Direct Rendering Manager (<code>CONFIG_DRM</code>) in the kernel :

{{KernelBox|title=Disabling Direct Rendering Manager|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Next, rebuild {{Package|x11-drivers/nvidia-drivers}} since the driver may have built against the kernel DRM symbols. It should fix the problem.

== Expert configuration ==

=== Documentation ===

The {{Package|x11-drivers/nvidia-drivers}} package also comes with comprehensive documentation. This is installed into {{Path|/usr/share/doc}} and can be viewed with the following command:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Kernel module parameters ===

The <tt>nvidia</tt> kernel module accepts a number of parameters (options) which can be used to tweak the behaviour of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run <kbd>update-modules</kbd> after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

Edit {{Path|/etc/modprobe.d/nvidia.conf}}:

{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Update module information:

{{RootCmd|update-modules}}

Unload the <tt>nvidia</tt> module...

{{RootCmd|modprobe -r nvidia}}

...and load it once again:

{{RootCmd|modprobe nvidia}}

=== Advanced X configuration ===

The GLX layer also has a plethora of options which can be configured. These control the configuration of TV out, dual displays, monitor frequency detection, etc. Again, all of the available options are detailed in the documentation.

Чтобы использовать какие-либо из этих параметров, необходимо перечислить их в соответственном разделе Device в файле конфигурации X (обычно находящемся в {{Path|/etc/X11/xorg.conf}}). Например, чтобы отключить всплывающий логотип — splash logo:

{{FileBox|filename=/etc/X11/xorg.conf|title=Отключение splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== See also ==

== Благодарности ==
Мы хотим поблагодарить следующих авторов и редакторов за их вклад в это руководство: Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni.

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
