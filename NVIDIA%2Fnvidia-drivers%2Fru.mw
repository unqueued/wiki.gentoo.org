<languages />
'''x11-drivers/nvidia-drivers''' - это проприетарный графический драйвер для видеокарт nVidia. Альтернативой с открытым исходным кодом является [[nouveau]].

Драйвера nVidia в дереве портежей выпускаются nVidia и встраиваются в ядро Linux. Они содержат блоб (от англ. binary linked object - объект двоичной компоновки), который берет на себя основную работу по взаимодействию с платой. Драйвера состоят из двух частей: модуля ядра и драйвера X11. Обе части включаются в один пакет. Вследствие особенностей упаковки драйверов nVidia, Вам потребуется сделать некоторый выбор перед установкой драйверов.

Пакет '''nvidia-drivers''' включает в себя последние драйвера от nVidia с поддержкой ''всех'' плат. Имеется в наличии несколько версий в зависимости от того, насколько у Вас старая плата. Этот пакет использует eclass для обнаружения типа используемой платы, чтобы установить подходящую версию.

== Аппаратная совместимость ==
Пакет {{Package|x11-drivers/nvidia-drivers}} поддерживает диапазон доступных плат nVidia. В зависимости от платы, которая у Вас есть, для установки доступно большое число версий. Прочитайте официальную документацию nVidia [http://www.nvidia.com/object/IO_32667.html Что такое устаревший драйвер?], для того, чтобы узнать, какую версию пакета nvidia-drivers Вы должны использовать. Достаточно подходящий способ узнать это с помощью интерактивной формы предложен [http://www.nvidia.com/Download/Find.aspx здесь]. Введите Вашу видеокарту (учитывая параметр Legacy в поле 'Product Type'), и Вы должны получить наилучшую поддерживаемую версию, отображенную под формой.

Если Ваша карта определилась как устаревшая, Вам необходимо замаскировать наиболее поздние выпуски {{Package|nvidia-drivers}}, т.е. 
{{RootCmd|echo ">x11-drivers/nvidia-drivers-174" >> /etc/portage/package.mask}}

Заметьте, что Gentoo не предусматривает версии 71.86.xx. Если Вашей карте требуются эти драйвера, Вам рекомендуется использовать драйвер [[nouveau]] .

== Ядро ==
Как упомянуто выше, драйвер ядра nVidia устанавливается и работает на текущем ядре. Он собирается в виде модуля, поэтому ядро должно поддерживать загрузку модулей ядра (смотри ниже).

Модуль ядра (nvidia.ko) состоит из проприетарной части (широко известной как ''двоичный блоб''), которая управляет графическими чипами, и части с открытым исходным кодом (клей - англ. ''glue''), которая во время исполнения работает как посредник между проприетарной частью и ядром. Они должны работать вместе слаженно, иначе Вы столкнетесь с потерей данных (из-за паники ядра, сбоя X-сервера с несохраненными данными в X-приложениях) и даже повреждением аппаратного обеспечения (перегрев и другие проблемы с управлением питания тут же приходят на ум).

=== Совместимость ядра ===
Время от времени, новый релиз ядра изменяет внутренний двоичный интерфейс приложений (англ. ABI, application binary interface) для драйверов, что означает, что все драйвера, которые используют этот интерфейс, должны быть соответствующим образом изменены. Для драйверов с открытым исходным кодом, особенно распространяемых с ядром, эти изменения практически тривиальны для исправления, так как целая цепочка вызовов между драйверами и другими частями ядра может быть просмотрена достаточно легко. Для проприетарных драйверов типа nvidia.ko, это далеко не так. При изменении внутреннего двойчного интерфейса приложений, Вы не можете просто исправить используемый ''клей'', потому что Вам неизвестно как этот клей используется проприетарной частью. Если Вам удастся наладить работу и все будет работать исправно, Вы все еще рискуете тем, что работа nvidia.ko в новом, неподдерживаемом ядре приведет к потере данных и аппаратному сбою.

Когда выпускается новая, несовместимая версия ядра, возможно, некоторое время лучше всего придерживаться новейшего поддерживаемого ядра. Обычно, Nvidia требуется несколько недель для подготовки нового проприетарного релиза, который, по их мнению, подходит для общего использования. Просто будьте терпеливы. Если Вы хотите отбросить все предосторожности, ebuild-файл nvidia-drivers поддерживает команду epatch_user из класса eutils.class: это позволит Вам исправить nvidia-drivers для их совместимости с последним, неподдерживаемым релизом ядра, с которым Вы хотите работать. Однако заметьте, что ни сопроводители пакета nvidia-drivers, ни Nvidia не окажут Вам поддержки, как только у Вас появятся проблемы. Ваша гарантия на аппаратное обеспечение, возможно, будет аннулирована. Мейнтейнеры Gentoo не смогут начать исправлять Ваши проблемы, так как это проприетарный драйвер, который может быть отлажен только Nvidia. Мейнтейнеры ядра (как пакета Gentoo, так и разработчики самого ядра), определенно не будут поддерживать проприетарные драйвера, или, в самом деле, любую ''испорченную'' систему, которая может вызвать проблемы.

=== Требуемые параметры ядра ===
Если Вы используете '''genkernel all''' для конфигурации ядра, тогда все в порядке. Если нет, дважды проверьте конфигурацию ядра, так чтобы поддержка загружаемых модулей была включена:
{{Kernel/ru||<pre> 
Loadable module support --->
 [*] Enable loadable module support 
</pre> 
}}

Вам также нужно включить в ядро поддержку диапазонных регистров типа памяти (англ. Memory Type Range Register - MTRR)
{{Kernel/ru||<pre> 
Processor and Features --->
 [*] MTRR (Memory Type Range Register) support 
</pre>}}

Также, если у Вас видеокарта AGP, Вы можете дополнительно включить в ядро поддержку драйвера '''apggart''', как встроенного в ядро, так и в качестве модуля. Если Вы не используете встроенный в ядро apggart, то драйверы будут использовать собственную реализацию '''apggart''', называемую '''NvAGP'''. На определенных системах, это приводит к лучшей производительности, чем встроенный в ядро agpgart, а на некоторых, выполняется хуже. Вам потребуется оценить это на своей собственной системе для получения лучшей производительности. Если Вы не уверены что делать, используйте встроенный в ядро agpgart:
{{Kernel||<pre> 
Device Drivers --->
 Graphics Support --->
  -*- /dev/agpgart (AGP Support) ---> 
</pre>}}

{{Note/ru|На amd64, настройками agpgart управляет IOMMU.}}

{{Important/ru|Для процессоров архитектуры x86 и AMD64, встроенный в ядро драйвер [[framebuffer]] конфликтует с двоичным драйвером, предоставляемым nVidia. Если Вы компилируете ядро для этих CPU, Вы должны полностью убрать поддержку встроенных в ядро драйверов, как показано ниже:
{{Kernel||<pre> 
Device Drivers ---> 
    Graphics Support ---> 
        <*> Support for frame buffer devices ---> 
        < > nVidia Framebuffer Support 
        < > nVidia Riva support 
</pre>}} 
}}

Альтернативой для кадрового буфера является [[uvesafb]], который может быть установлен вместе с nvidia-drivers.

Ebuild-файл '''nvidia-drivers''' автоматически обнаруживает версию Вашего ядра, основываясь на символьной ссылке {{Path|/usr/src/linux}}. Пожалуйста, убедитесь, что эта символьная ссылка указывает на корректные исходные коды и что Ваше ядро сконфигурировано правильно. Пожалуйста, обратитесь к разделу "Конфигурация ядра" [http://www.gentoo.org/doc/ru/handbook/ Настольной книги Gentoo] для подробностей конфигурации ядра.

Сперва, Вам необходимо выбрать правильные исходные тексты ядра используя '''eselect'''. Если Вы используете '''gentoo-sources-3.7.10''', список доступных ядер может выглядеть следующим образом:
{{RootCmd|eselect kernel list|output=<pre> 
Available kernel symlink targets: 
 [1] linux-3.7.10-gentoo * 
 [2] linux-3.7.9-gentoo 
</pre>}}

В результате, приведенном выше, заметно, что ядро '''linux-3.7.10-gentoo''' помечено звездочкой ('''*'''), для того, чтобы показать, что это ядро, на которое указывает символьная ссылка.

Если символьная ссылка не показывает на корректные исходные тексты, Вы можете ее обновить, выбирая номер требуемых Вами исходных текстов ядра, как в приведенном далее примере.
{{RootCmd|eselect kernel set 1}}

== Драйвера ==
Теперь, самое время установить драйвера. Вы можете это сделать сначала следуя [http://www.gentoo.org/doc/en/xorg-config.xml Описанию настройки X-сервера], и, затем, установив '''VIDEO_CARDS="nvidia"''' в {{Path|/etc/portage/make.conf}}. После того, как Вы установите X-сервер,, он затем установит правильную версию '''nvidia-drivers''' для Вас.

{{Note/ru|Драйвера могут быть установлены с USE-флагом '''gtk''', прописанным в {{Path|/etc/portage/make.conf}}. Это установит пакет '''media-video/nvidia-settings''', удобный графический инструмент для мониторинга и конфигурации нескольких аспектов Вашей платы nVidia.}}

{{Important/ru|Каждый раз, когда Вы [http://www.gentoo.org/doc/en/kernel-upgrade.xml компилируете новое ядро], или перекомпилируете то, которым пользуетесь в данный момент, Вам необходима переустановка модулей ядра, принадлежащих nVidia. Простым способом отслеживания модулей, устанавливаемых ebuild-файлами (такими как '''nvidia-drivers'''), является установка пакета '''sys-kernel/module-rebuild'''. Как только Вы его установили, просто запустите '''module-rebuild populate''' для заполнения его базы данных списком пакетов для сборки. После завершения компиляции или перекомпиляции ядра, просто запустите команду '''module-rebuild rebuild''' для перекомпилирования драйверов для нового ядра.}}

Как только Вы завершили установку, запустите '''modprobe nvidia''' для загрузки модуля ядра в память. Если Вы обновляете ядро, Вы сначала должны удалить предыдущий модуль.
{{RootCmd 
|lsmod {{!}} grep nvidia 
|rmmod nvidia 
|modprobe nvidia 
}}

Для того, чтобы предотвратить загрузку модулей вручную с каждой запуском системы, Вы, возможно, хотите, чтобы это происходило автоматически каждый раз, когда Вы ее загружаете. Поэтому, отредактируйте {{Path|/etc/conf.d/modules}} и добавьте туда '''nvidia'''.

{{Important/ru|Если Вы скомпилировали '''agpart''' как модуль, Вам также потребуется добавить и его в {{Path|/etc/conf.d/modules}}.}}

=== X-сервер ===
После установки подходящих драйверов, Вам надо сконфигурировать X-сервер для использования драйвера '''nvidia''' вместо драйвера по умолчанию '''nv'''.
{{VIDEO_CARDS/xorg.conf|nvidia}}

Запустите '''eselect''', так чтобы X-сервер использовал GLX библиотеки nVidia:
{{RootCmd|eselect opengl set nvidia}}

=== Разрешения ===
{{VIDEO_CARDS/Permissions|nvidia}}

== Тестирование платы ==
Для того, чтобы протестировать Вашу плату, запустите X и введите команду '''glxinfo''', которая является частью пакета '''mesa-progs'''. Она должна сообщить, что direct rendering активирован:
{{Cmd|glxinfo {{!}} grep direct|output=<pre> 
direct rendering: Yes 
</pre>}}

Для проверки кадровой частоты - FPS, запустите '''glxgears'''.

== Включение поддержки nvidia ==
Некоторые инструменты, такие как '''mplayer''' и '''xine-lib''', используют локальный USE-флаг, называемый '''xvmc''', включающий поддержку XvMCNVIDIA. Это полезно при просмотре видео высокого разрешения. Добавьте '''xvmc''' в список USE-флагов в {{Path|/etc/portage/make.conf}}, или добавьте его как USE-флаг в '''media-video/mplayer''' и/или '''media-libs/xine-lib''' в файле {{Path|/etc/portage/package.use}}.

Серии GeForce 8 и более поздние GPU выходят с поддержкой VDPAU, которая заменила собой поддержку XvMCNVIDIA. Смотри статью [[VDPAU]] для включения поддержки VDPAU.

Также есть несколько приложений, которые используют USE-флаг '''nvidia''', поэтому Вы можете пожелать добавить его в файл {{Path|/etc/portage/make.conf}}.

Then, run '''emerge -uD --newuse @world''' to rebuild the applications that benefit from the USE flag change.

=== Using NVidia Settings Tool ===
nVidia also provides you with a settings tool. This tool allows you to monitor and change graphical settings without restarting the X server and is available through Portage as '''media-video/nvidia-settings'''. As mentioned earlier, it will be pulled in automatically if you install the drivers with the '''gtk''' USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== Enable Opengl/Opencl ===

To enable opengl and opencl.

{{RootCmd|eselect opengl set nvidia}}
{{RootCmd|eselect opencl set nvidia}}

Setting opengl will require your systems x11 to not be running.

== Troubleshooting ==
* {{Bug|nvidia-drivers|search=package}}

=== Getting 2D to work on machines with 4Gb or more memory ===
If you are having troubles with the nVidia 2D acceleration it is likely that you are unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:
{{RootCmd|cat /proc/mtrr}}

Every line should contain "write-back" or "write-combining". If you see a line with "uncachable" in it you will need to change a BIOS setting to fix this.

Reboot and enter the BIOS, then find the MTRR settings (probably under "CPU Settings"). Change the setting from "continuous" to "discrete" and boot back into Linux. You will now find out that there is no "uncachable" entry anymore and 2D acceleration now works without any glitches.

=== When I attempt to load the kernel module, I receive a "no such device" ===
This is usually caused by one of the following issues:

1.  You don't have an nVidia card at all.  Check '''lspci''' output to confirm that you have an nVidia graphics card installed and detected.

2.  The currently installed version of x11-drivers/nvidia-drivers does not support your graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at http://www.geforce.com/drivers.  See the [[NVidia/nvidia-drivers#Which_version.3F|Which Version]] section above.

3.  Another kernel driver has control of the hardware.  Check '''lspci -k''' to see if another driver like "nouveau" is bound to the graphics card.  If so, you will need to disable or blacklist this driver.

=== Xorg says it can't find any screens ===
When you boot up your computer and end up with a black screen or a console prompt instead of your GUI; you can press Ctrl+Alt+F2 to bring up a console prompt if you don't already have one. Then you can run:
{{RootCmd| /etc/init.d/xdm stop}}
{{Cmd| startx}}
to see the output of Xorg. If one of the first errors is that Xorg can't find any screens, then follow these steps to resolve your issue.<br />
It should be enough to run the following command before rebooting:
{{Cmd| nvidia-xconfig}}
But if that doesn't work, run lspci and you'll find your video card starts off like this:
01:00.0 VGA compatible controller: make and model of videocard <br />
Take the first bit, ''01.00.0'' and put it in your /etc/X11/xorg.conf with the BusID option:
{{File|/etc/X11/xorg.conf||<pre>
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
</pre>}}

== Expert Configuration ==

=== Documentation ===
The nVidia driver package also comes with comprehensive documentation. This is installed into '''/usr/share/doc''' and can be viewed with the following
command:
{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.gz}}

=== Kernel module parameters ===
The '''nvidia''' kernel module accepts a number of parameters (options) which you can use to tweak the behaviour of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file '''/etc/modprobe.d/nvidia.conf'''. Remember to run '''update-modules''' after modifying this file, and bear in mind that you will need to reload the '''nvidia''' module before the new settings take effect.

Edit /etc/modprobe.d/nvidia.conf in your favourite editor:
{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Update module information:
{{RootCmd|update-modules}}

Unload the nvidia module...
{{RootCmd|modprobe -r nvidia}}

...and load it once again:
{{RootCmd|modprobe nvidia}}

=== Advanced X configuration ===
The GLX layer also has a plethora of options which can be configured. These control the configuration of TV out, dual displays, monitor frequency detection, etc. Again, all of the available options are detailed in the documentation.

If you wish to use any of these options, you need to list them in the relevant Device section of your X config file (usually '''/etc/X11/xorg.conf'''). For example, suppose I wanted to disable the splash logo:

{{File|/etc/X11/xorg.conf|Disable the splash logo|<pre>
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
</pre>}}

== Acknowledgements ==
We would like to thank the following authors and editors for their contributions to this guide: Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni.

== See also ==
* [[nouveau & nvidia-drivers switching]]

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
