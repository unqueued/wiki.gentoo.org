<languages />

{{Metadata|abstract=nvidia-drivers содержит проприетарный графический драйвер для видеокарт NVIDIA. Альтернативой с открытым исходным кодом является nouveau.}}

[[Article description::Пакет {{Package|x11-drivers/nvidia-drivers}} содержит проприетарный графический драйвер для видеокарт NVIDIA.]] Альтернативой с открытым исходным кодом является [[nouveau/ru|nouveau]].

В проприентарном драйвере содержатся некоторые функции-обвертки, которые скомпилируют для текущего ядра блоб (от англ. binary linked object — объект двоичной компоновки), который берет на себя основную работу по взаимодействию с платой. Драйвер состоит из двух частей: модуля ядра и драйвера X11. Обе части находятся в одном пакете. Вследствие особенностей упаковки драйверов, необходимо сделать некоторый выбор ''перед'' их установкой.

Пакет включает в себя последние драйвера от NVIDIA с поддержкой большинства видеокарт NVIDIA. Имеется несколько версий пакета зависящие от старости карты. Пакет использует eclass для обнаружения типа используемой видеокарты, чтобы установить подходящую версию.

== USE-флаги ==
{{USEflag|package=x11-drivers/nvidia-drivers}}

== Аппаратная совместимость ==


Пакет {{Package|x11-drivers/nvidia-drivers}} поддерживает целый диапазон доступных видеокарт NVIDIA. В зависимости от видеокарты, которая имеется в системе, для установки доступно большое число версий. Прочитайте официальную документацию NVIDIA [http://www.nvidia.com/object/IO_32667.html Что такое устаревший драйвер?], для того, чтобы узнать, какую версию пакета {{Package|x11-drivers/nvidia-drivers}} лучше использовать. Достаточно подходящий способ узнать это с помощью интерактивной формы предложенной [http://www.nvidia.com/Download/Find.aspx здесь]. Введите видеокарту (учитывая параметр Legacy в поле 'Product Type'), и форма отобразит наилучшую поддерживаемую версию.

<div class="mw-translate-fuzzy">
Если карта определилась как устаревшая, замаскируйте свежие выпуски {{Package|nvidia-drivers}}, то есть
</div>

{{FileBox|filename=/etc/portage/package.mask|title=Маскировка драйверов версии выше 174|1=
>x11-drivers/nvidia-drivers-174
}}

Заметьте, что Gentoo не предоставляет версии 71.86.xx. Если в системе установлена видеокарта, которой необходимы эти драйвера, то рекомендуется использовать драйвер [[nouveau/ru|nouveau]].

== Установка ==

=== Ядро ===

Как упоминалось выше, драйвер ядра NVIDIA устанавливается и работает на текущем ядре. Он собирается в виде модуля, поэтому ядро должно поддерживать загрузку модулей ядра (смотрите ниже).

Модуль ядра ({{Path|nvidia.ko}}) состоит из проприетарной части (широко известной как ''двоичный блоб''), которая управляет графическими чипами, и части с открытым исходным кодом (клей — англ. ''glue''), которая во время исполнения работает как посредник между проприетарной частью и ядром. Они должны работать вместе слаженно, иначе можно столкнуться с потерей данных (из-за паники ядра, сбоя X-сервера с несохраненными данными в X-приложениях) и даже повреждением аппаратного обеспечения (перегрев и другие проблемы с управлением питания тут же приходят на ум).

==== Совместимость ядра ====

Время от времени, новый релиз ядра изменяет внутренний двоичный интерфейс приложений (англ. ABI, application binary interface) для драйверов, что означает, что все драйвера, которые используют этот интерфейс, должны быть соответствующим образом изменены. Для драйверов с открытым исходным кодом, особенно распространяемых с ядром, эти изменения практически тривиальны для исправления, так как цепочка вызовов между драйверами и другими частями ядра может быть просмотрена достаточно легко. Для проприетарных драйверов типа nvidia.ko, это далеко не так. При изменении внутреннего двойчного интерфейса приложений, невозможно просто исправить используемый ''клей'', потому что неизвестно как этот клей используется проприетарной частью. Если удастся наладить работу и все будет работать исправно, вы все еще рискуете тем, что работа nvidia.ko в новом, неподдерживаемом ядре приведет к потере данных и аппаратному сбою.

Когда выпускается новая, несовместимая версия ядра, лучше некоторое время оставаться на последнем поддерживаемом ядре. Обычно, NVIDIA требуется несколько недель для подготовки нового проприетарного релиза, который, по их мнению, подходит для общего использования. Просто будьте терпеливы. Если же обновление совершенно необходимо, ebuild-файл nvidia-drivers поддерживает команду epatch_user из класса eutils.class: это позволит вам исправить nvidia-drivers для их совместимости с последним, неподдерживаемым релизом ядра. Однако заметьте, что ни мейнтейнеры пакета nvidia-drivers, ни NVIDIA не оказывают тех. поддержки, в данной ситуации. Гарантия на аппаратное обеспечение, скорее всего, будет аннулирована. Мейнтейнеры Gentoo не смогут исправить ваши проблемы, так как это проприетарный драйвер, который может быть отлажен только NVIDIA. Мейнтейнеры ядра (как пакета Gentoo, так и разработчики самого ядра), определенно не будут поддерживать проприетарные драйвера или, любую ''испорченную'' систему, которая может вызвать проблемы.

Если для конфигурации ядра был использован {{c|genkernel all}}, тогда все в порядке. Если нет, дважды проверьте конфигурацию ядра, так чтобы поддержка загружаемых модулей была включена:

{{KernelBox|title=Включить поддержку загружаемых модулей|1=
[*] Enable loadable module support --->
}}

Также включите в ядро поддержку диапазонных регистров типа памяти (англ. Memory Type Range Register - MTRR):

{{KernelBox|title=Включить поддержку MTRR|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

With at least some if not all driver versions it may also be required to enable VGA Arbitration and the IPMI message handler:

{{KernelBox|title=Enable VGA Arbitration|1=
Device Drivers --->
   Graphics support --->
      [*] VGA Arbitration
}}
{{KernelBox|title=Enable IPMI message handler|1=
Device Drivers --->
   Character devices --->
      [*] IPMI top-level message handler
}}

<div class="mw-translate-fuzzy">
Если у вас видеокарта AGP, вы можете дополнительно включить в ядро поддержку драйвера agpgart, встроенного в ядро, или в качестве модуля. Если модуль apggart не используется, то драйверы будут использовать собственную реализацию apggart, называемую NvAGP. На определенных системах, это приводит к лучшей производительности, чем встроенный в ядро agpgart, а на некоторых, к худшей. Оцените оба варианта на своей собственной системе для достижения наилучшей производительности. Если вы не уверены что делать, используйте встроенный в ядро agpgart:
</div>

{{KernelBox|title=Включение поддержки agpgart|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note|На amd64 настройками agpgart управляет [[Wikipedia:Input%E2%80%93output_memory_management_unit|IOMMU]].}}

{{Important|Для процессоров архитектур x86 и AMD64, встроенный в ядро [[framebuffer]] драйвер конфликтует с бинарным драйвером от NVIDIA. При компиляции ядра для этих процессоров полностью отключите поддержку этого драйвера:
{{KernelBox|title=Отключение поддержки встроенного в ядро драйвера кадрового буфера|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Теперь убедитесь, что драйвер nouveau отключен:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
      < > Nouveau (nVidia) cards
}}
}}

Альтернативой для кадрового буфера является [[uvesafb]], который может быть установлен вместе с {{Package|x11-drivers/nvidia-drivers}}. 

{{Important|На процессорах x86 и AMD64 драйвер [[uvesafb]] конфликтует с бинарным драйвером выше версии 361.28 предоставляемый NVIDIA.}}

<div class="mw-translate-fuzzy">
Для UEFI систем uvesafb не работает. Предупреждаем, что включение поддержки "efifb" в ядре (<code>CONFIG_FB_EFI=y</code>) приводит к непостоянным(иногда появляется, иногда нет) проблемам с запуском драйверов NVIDIA. На данный момент не существует альтернативного кадрового буфера для UEFI систем.
</div>

{{KernelBox|title=Enable simple framebuffer|1=
Bus options (PCI etc.)  --->
   [*] Mark VGA/VBE/EFI FB as generic system framebuffer
Device Drivers --->
   Graphics support --->
        Frame buffer Devices --->
            [*] Simple framebuffer support
}}

Ebuild-файл '''nvidia-drivers''' автоматически обнаруживает версию вашего ядра, основываясь на символьной ссылке {{Path|/usr/src/linux}}. Пожалуйста, убедитесь, что эта символьная ссылка указывает на корректные исходные коды и что ваше ядро сконфигурировано правильно. Обратитесь к разделу «Конфигурация ядра» [[Handbook:Main_Page/ru|Настольной книги Gentoo]] для получения подробностей по конфигурации ядра.

Для начала, выберите правильный исходный код ядра используя {{c|eselect}}. Когда, например, выбран {{Package|sys-kernel/gentoo-sources}} версии 3.7.10, список ядер будет выглядеть приблизительно так:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

В результате, приведенном выше, заметьте, что ядро linux-3.7.10-gentoo помечено звездочкой (<code>*</code>), для того, чтобы продемонстрировать, что это то ядро, на которое указывает символьная ссылка.

Если символьная ссылка не указывает на корректные исходные тексты, обновите ее, выбирая номер требуемых вами исходных текстов ядра, как в приведенном далее примере.

{{RootCmd|eselect kernel set 1}}

== Конфигурация ==

=== Драйвера === 

Теперь самое время установить драйвера. Сперва, следуйте [[Xorg/Guide/ru|Xorg/Руководство]] и установите <code>VIDEO_CARDS="nvidia"</code> в {{Path|/etc/portage/make.conf}}. Во время установки X-сервера, он установит правильную версию {{Package|x11-drivers/nvidia-drivers}}.

{{Note|Драйвера могут быть установлены с USE-флагом <code>tools</code>. Это установит {{c|nvidia-settings}}, удобный графический инструмент для мониторинга и конфигурации некоторых аспектов видеокарты NVIDIA.}}

{{Important|Каждый раз, когда [[Kernel/Upgrade/ru|компилируется ядро]], необходимо переустановить модули ядра, принадлежащих NVIDIA. Простым способом пересборки модулей, установленных ebuild-файлами (такими как {{Package|x11-drivers/nvidia-drivers}}), является запуск  {{c|emerge @module-rebuild}}.}}

После завершения установки, запустите {{c|modprobe nvidia}} для загрузки модуля ядра в память. Если это было обновление (пакета {{Package|x11-drivers/nvidia-drivers}}), то сначала удалите предыдущий модуль.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

<div class="mw-translate-fuzzy">
Чтобы, не загружать модуль вручную, после каждой перезагрузки.
Добавьте <code>nvidia</code> в {{Path|/etc/conf.d/modules}}, для его автоматической загрузки, при старте системы.
</div>

<div class="mw-translate-fuzzy">
{{Important|Если <code>agpgart</code> скомпилирован как модуль, также добавьте и его в {{Path|/etc/conf.d/modules}}.}}
</div>

=== Подпись модулей ядра (опционально) ===

{{Note|Информация в этом разделе не имеет отношения к системам без подписанных модулей ядра. Пропустите её.}}

В случае использования подписи для безопасной загрузки ядра, нужно подписать модули ядра NVIDIA перед их загрузкой.

Это можно сделать с помощью {{c|perl}}-скрипта в ядре.

{{RootCmd|/usr/src/linux/scripts/sign-file sha512 /usr/src/linux/certs/signing_key.priv /usr/src/linux/certs/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|/usr/src/linux/scripts/sign-file sha512 /usr/src/linux/certs/signing_key.priv /usr/src/linux/certs/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

Начиная с версии драйвера 358.09, был сделан новый модуль для работы с настройками режима монитора. В таких версиях драйвера также нужно подписать этот модуль.

{{RootCmd|/usr/src/linux/scripts/sign-file sha512 /usr/src/linux/certs/signing_key.priv /usr/src/linux/certs/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

После подписи модулей, драйвер будет загружаться должным образом. Этот метод подписания модуля может быть использован для подписи других модулей; не только для драйверов nvidia. Просто измените путь к соответствующему модулю.

=== X-сервер ===

Как только подходящие драйвера установленны, настройте X-сервер для использования драйвера <code>nvidia</code> вместо драйвера по умолчанию <code>nv</code>.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Запустите {{c|eselect}}, чтобы X-сервер использовал GLX библиотеки NVIDIA:

{{RootCmd|eselect opengl set nvidia}}

=== Разрешения ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Включение глобальной поддержки nvidia ===

Некоторые инструменты, такие как {{Package|media-video/mplayer}} и {{Package|media-libs/xine-lib}}, используют локальный USE-флаг, называемый <code>xvmc</code>, включающий поддержку XvMCNVIDIA. Это полезно при просмотре видео высокого разрешения. Добавьте <code>xvmc</code> в список USE-флагов в {{Path|/etc/portage/make.conf}}, или добавьте его как USE-флаг в  {{Package|media-video/mplayer}} и/или {{Package|media-libs/xine-lib}} в файле {{Path|/etc/portage/package.use}}.

Серии GeForce 8 и более поздние GPU выходят с поддержкой VDPAU, которая заменила собой поддержку XvMCNVIDIA. Смотри статью [[VDPAU]] для включения поддержки VDPAU.

Также есть несколько приложений, которые используют USE-флаг <code>nvidia</code>, поэтому было бы неплохо добавить его в файл {{Path|/etc/portage/make.conf}}.

Затем, запустите {{c|emerge -uD --newuse @world}} для пересборки тех приложений, на которые влияет изменение этого USE-флага.

=== Использование инструмента управления настройками от nVidia ===

NVIDIA также предоставляет инструмент для управления настройками. Этот инструмент разрешает пользователю просматривать и изменять настройки графики без перезапуска X-сервера; он доступен в Portage как часть пакета {{Package|x11-drivers/nvidia-drivers}} с включенным USE-флагом <code>tools</code>.

=== Включение OpenGL/OpenCL ===

Для включения OpenGL и OpenCL выполните:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Убедитесь, что сервер Xorg не запущен во время проведения этих изменений.

== Использование ==

=== Тестирование видеокарты ===

Для того, чтобы протестировать NVIDIA видеокарту, запустите X и введите команду {{c|glxinfo}}, которая является частью пакета {{Package|x11-apps/mesa-progs}}. Она должна сообщить, что direct rendering активирован:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Для проверки кадровой частоты — FPS, запустите {{c|glxgears}}.

== Устранение проблем ==

Чтобы получить список ошибок для пакета {{Package|x11-drivers/nvidia-drivers}}, открытых на данный момент, взгляните на {{Bug|nvidia-drivers|search=package}}.

=== FATAL: modpost: GPL-incompatible module *.ko uses GPL-only symbol ===

Когда ebuild жалуется о 'mutex_destroy' GPL-only symbol:

{{RootCmd|emerge nvidia-drivers|output=<pre>
FATAL: modpost: GPL-incompatible module nvidia.ko uses GPL-only symbol 'mutex_destroy' 
</pre>}}

Убедитесь, что отключили <var>CONFIG_DEBUG_MUTEXES</var> в файле конфигурации ядра {{Path|.config}}, как обсуждалось в [https://forums.gentoo.org/viewtopic-p-7964326.html этой ветке форума].

=== Драйвер не инициализируется, если включены прерывания MSI ===

Драйвер NVIDIA в Linux по умолчанию использует Message Signaled Interrupts (прерывания инициируемые сообщениями, MSI). В результате этого мы получаем совместимость и расширяемость, в основном из-за отсутствия необходимости разделения IRQ. На некоторых системах наблюдаются проблемы с поддержкой MSI, хотя они хорошо работают с прерываниями virtual wire (виртуальные провода). Это приводит к невозможности запустить X вместе с драйвером NVIDIA, либо к проблемам инициализации CUDA.

Прерывания MSI можно запретить параметром модуля ядра NVIDIA <code>NVreg_EnableMSI=0</code>. Это можно сделать в командной строке при загрузке модуля, либо (более правильно) через файлы конфигурации модулей дистрибутива (например, через те, что находятся в {{Path|/etc/modprobe.d/}}).

Например:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Поддержка драйверов Nvidia
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# Следующие параметры можно менять. Помните, что
# нужно быть осторожным, так как из-за них может возникнуть нестабильность!
# Более детальная информация находится в файле /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! ВНИМАНИЕ, ПО ПОВОДУ БЕЗОПАСНОСТИ !!!
# НЕ МЕНЯЙТЕ И НЕ УДАЛЯЙТЕ НАСТРОЙКИ УСТРОЙСТВА, ЕСЛИ ТОЛЬКО
# ВЫ НЕ УВЕРЕНЫ В ТОМ, ЧТО ДЕЛАЕТЕ.
# ДОБАВЛЯЙТЕ ТОЛЬКО ДОВЕРЕННЫХ ПОЛЬЗОВАТЕЛЕЙ В ГРУППУ VIDEO, ТАК КАК ОНИ МОГУТ 
# УМЕРЕННО ИЛИ НЕОБРАТИМО ИСПОРТИТЬ КОМПЬЮТЕР.
options nvidia NVreg_DeviceFileMode=0660 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Работа с 2D ускорением на машинах с 4 Гб памяти и больше. ===

Если есть проблемы с 2D-ускорением графики на NVIDIA, то скорее всего системе не удалось настроить диапазон совмещения записи (write-combining range) в MTRR. Чтобы это проверить, пересмотрите содержимое следующих файлов
{{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Каждая строка должна содержать <code>write-back</code> или <code>write-combining</code>. При появлении строки со словом <code>uncachable</code>, необходимо изменить настройки BIOS, чтобы это исправить.

Перезагрузитесь и войдите в BIOS, затем найдите настройки MTRR (возможно, под ''CPU Settings''). Измените настройки с <code>continuous</code> на <code>discrete</code> и перезагрузитесь обратно в Linux. Теперь записи со словом <code>uncachable</code> больше нет и 2D-ускорение работает без каких-либо неполадок.

=== ''no such device'', при попытке загрузить модуль ядра ===

Это обычно вызвано одной из следующих проблем:

<div class="mw-translate-fuzzy">
# В системе отсутствует какая-либо видеокарта NVIDIA. Проверьте вывод {{c|lspci}}, чтобы убедиться, что видеокарта NVIDIA подключена и обнаружена.
# Установленная версия {{Package|x11-drivers/nvidia-drivers}} не поддерживает подключенную модель видеокарты. Проверьте файл README в {{Path|/usr/share/nvidia-drivers-*/}} на наличие списка поддерживаемых устройств, или используйте поиск драйверов в [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Карта используется другим драйвером ядра. Проверьте, с помощью {{c|lspci -k}}, если другой драйвер, вроде "nouveau", привязан к текущей карте. Если да, то отключите его или добавьте в черный список.
</div>

=== Xorg сообщает, что не может найти какие-либо экраны ===

Если после загрузки системы, вместо графического интерфейса пользователя виден черный экран или командная строка консоли; нажмите {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}}, чтобы вызвать виртуальную консоль (если она отсутствует). Затем запустите:

<div class="mw-translate-fuzzy">
{{RootCmd| /etc/init.d/xdm stop}}
</div>

{{Cmd| startx}}

чтобы увидеть вывод работы Xorg. Если одной из первых ошибок идет сообщение о том, что Xorg не может найти какие-либо экраны, следуйте следующим инструкциям, чтобы разрешить проблему.

Должно быть достаточно запуска следующей команды перед перезагрузкой:

{{RootCmd|/opt/bin/nvidia-xconfig}}

Но если это не работает, запустите {{c|lspci}} и найдите вашу видеокарту, начинающуюся примерно так:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: модель вашей видеокарты
 . . . 
</pre>
}}

Возьмите первую часть, <code>01.00.0</code> и поместите ее в {{Path|/etc/X11/xorg.conf}} вместе с параметром <code>BusID</code>:

<div class="mw-translate-fuzzy">
{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# это не целый файл, а только часть, которая должна быть отредактирована
# файл уже должен существовать, после запуска nvidia-xconfig

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}
</div>

=== Direct rendering не активирован ===

Если direct rendering не работает, это может быть потому, что Direct Rendering Manager включен в ядро, что вызывает конфликт с драйвером. Проверьте статус Direct Rendering следуя инструкциям раздела [[#Тестирование видеокарты|Тестирование видеокарты]].

Во-первых, отключите Direct Rendering Manager (<code>CONFIG_DRM</code>) в ядре :

{{KernelBox|title=Отключение Direct Rendering Manager|1=

Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Далее, соберите заново {{Package|x11-drivers/nvidia-drivers}}, так как драйвер мог быть пересобран с DRM-символами ядра. Это должно исправить проблему.

=== Замедленное или заикающееся проигрывание видео ===

В последнее время можно наблюдать сбои с проигрыванием некоторых типов видео на бинарных драйверах NVIDIA, вызывающие медленное воспроизведение или значительное заикание. Эта проблема происходит при замене для определенных процессоров общего ACPI метода холостого хода на метод от Intel.

Отключите метод холостого хода для процессора Intel, используя <code>intel_idle.max_cstate=0</code> в методе загрузки командной строки ядра, что должно дать основание для ядра автоматически откатится до нормального или более старого ACPI метода холостого хода процессора. Также, отключение NVIDIA Powermizer, или установка Powermizer на максимальную производительность с {{c|nvidia-settings}}, также может помочь. Хотя метод холостого хода для процессора Intel был представлен как стандарт для процессоров i5 и i7 (против использования ACPI метода), есть серьезная причина. Этот метод существенно решает проблему, однако некоторые небольшие заикания или медленное воспроизведение встречаются при включенном деинтерлейсинге; это происходит когда видео уже деинтерлейсировано (т.е. псевдоним <code>mplayer-nodeint</code> с чем-то похожим для <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code>).

If you're using GRUB2 as your bootloader, you can add this kernel parameter to <code>/etc/default/grub</code> like so:
{{FileBox|filename=/etc/default/grub|title=Adding intel_idle.max_cstate kernel parameter in GRUB2|1=
GRUB_CMDLINE_LINUX_DEFAULT="intel_idle.max_cstate=0"
}}
Don't forget to run <code>grub-mkconfig -o /boot/grub/grub.cfg</code> after making the change, so that the new configuration is generated (see [https://wiki.gentoo.org/wiki/GRUB2#Main_configuration_file the GRUB2 page] for further details).

After you have rebooted, you can verify that the change is active:
{{Cmd|cat /sys/module/intel_idle/parameters/max_cstate <pre>
0</pre>}}

=== Отсутствует вертикальная синхронизация (no VSync, tearing) в OpenGL приложениях ===

Добавление следующей опции в раздел экрана предотвращает разрывы на GTX 660, 660 Ti, и, возможно, других GPU ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ источник]):

<div class="mw-translate-fuzzy">
{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}
</div>

== Тонкая настройка ==

=== Документация ===

Пакет {{Package|x11-drivers/nvidia-drivers}} также поставляется с исчерпывающей документацией. Она устанавливается в каталог {{Path|/usr/share/doc}} и может быть просмотрена с помощью следующей команды:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Параметры модуля ядра ===

Модуль ядра <code>nvidia</code> принимает набор параметров (options), которые позволяют настроить поведение драйвера. Большинство из них упомянуто в документации. Для того, чтобы добавить или изменить значения этих параметров, отредактируйте файл {{Path|/etc/modprobe.d/nvidia.conf}}. Не забудьте запустить {{c|update-modules}} после изменения этого файла и помните, что также потребуется перезагрузить модуль <code>nvidia</code> перед тем, как новые настройки вступят в силу.

{{Warning|Уделите пристальное внимание этому разделу, так как эти параметры ядра могут включать возможности, которые не поддерживаются устройством. Эти параметры не снисходительны, поэтому будьте осторожны. Перед внесением изменений еще раз убедитесь в том, что эти изменения необходимы.}}

{| class="table table-condensed table-striped"
|-
! Атрибут !! Значение по умолчанию !! Описание
|-
| <code>NVreg_DeviceFileUID</code> || <code>0</code> || Изменяет идентификатор пользователя (user ID) файла устройства. Значение по умолчанию устанавливает его в значение пользователя {{c|root}}. Установка этого параметра в значение другого идентификатора пользователя заставит модуль драйвера создать файл устройства с доступом для этого пользователя.
|-
| <code>NVreg_DeviceFileGID</code> || <code>27</code> || Изменяет идентификатор группы (Group ID) файла устройства. Значение по умолчанию устанавливает этот параметр в значение идентификатора группы {{c|video}}.
|-
| <code>NVreg_DeviceFileMode</code> || Не определено || Устанавливает права доступа для файла устройства. Значение 0660 предоставляет владельцу и группе доступ для чтения-записи. Другие пользователи не имеют доступа к файлу устройства.
|-
| <code>NVreg_ModifyDeviceFiles</code> || <code>1</code> || Включает или выключает динамическое управление файлом устройства.
|-
| <code>NVreg_EnablePCIeGen3</code> || <code>0</code> || Включает поддержку PCIe Gen 3.x. Если система поддерживает эту высокоскоростную шину 8GT, тогда включите ее с помощью этого параметра. Если этот параметр включен, но система не поддерживает Gen 3.0, тогда система может повести себя странно и нестабильно. Некоторые пользователи даже сообщали о повреждении устройства вследствие включения этого параметра при отсутствующей надлежащей поддержке. По умолчанию драйвер Nvidia использует PCIe Gen 2.x из соображений совместимости.
|-
| <code>NVreg_UsePageAttributeTable</code> || <code>0</code> || Это один из последних и новейших параметров драйвера Nvidia. Он позволяет драйверу извлечь максимум из технологии PAT — нового метода выделения памяти, заменяющего более старый метод Memory Type Range Register (MTRR). Метод PAT создает таблицу типа раздела, расположенную по определенному адресу, указанному в регистре, и использует архитектуру памяти и набор инструкций быстрее и эффективнее. Этот параметр можно включить, если компьютер поддерживает PAT и эта возможность включена в ядре. Включение этого параметра при отсутствующей поддержке PAT может привести к нестабильной работе и даже сбоям системы, поэтому будьте осторожны.
|-
| <code>NVreg_EnableVia4x</code> || <code>0</code> || Включает режим AGP 4x в драйвере NVIDIA на системах с чипсетом Via. Некоторые из этих аппаратных конфигураций работают неправильно в режиме AGP 4x. Значение по умолчанию устанавливает режим AGP 2x.
|-
| <code>NVreg_EnableALiAGP</code> || <code>0</code> || На чипсетах ALi1541 и ALi1647, драйвера NVIDIA по умолчанию выключают поддержку AGP. Значение этого параметра устанавливает множитель скорости, так что значения 1, 2, 4 и 8 соответствуют AGP 1x, 2x, 4x и 8x. NVIDIA не рекомендует изменять это значение, так как это может привести к нестабильной работе системы.
|-
| <code>NVreg_ReqAGPRate</code> || Не установлено || Форсирует режим AGP в драйвере. Например, значение 1 означает AGP 1x, а значение 4 — AGP 4x.
|-
| <code>NVreg_NvAGP</code> || || Изменяет значение режима AGP Gart. Возможные значения: <code>0</code> (выключено), <code>1</code> (включает использование внутреннего AGP-Gart NVIDIA), <code>2</code> (включает использование AGP-Gart ядра Linux) и <code>3</code> (включает и использует любой из доступных вариантов, но сначала пытается включить внутренний AGP Gart NVIDIA).
|-
| <code>NVreg_EnableAGPSBA</code> || <code>0</code> || Выключает (<code>0</code>) и включает (<code>1</code>) AGP Side Banding. Из соображений стабильности, этот параметр по умолчанию выключен, но его можно включить в целях тестирования и отладки. Однако это не поддерживается NVIDIA.
|-
| <code>NVreg_EnableAGPFW</code> || <code>0</code> || Установка этого параметра в значение <code>1</code> включает AGP Fast-Writes. В зависимости от чипсета системы, включение этого параметра может привести к нестабильной работе системы.
|-
| <code>NVreg_Mobile</code> || <code>0</code> || С помощью этого параметра можно форсировать информацию EDID на определенных системах. Это обходное решение было добавлено для мобильных GPU, на которых информация EDID или не работает, или выключена. Возможные значения: <code>0</code> (автоопределение правильного значения), <code>1</code> (ноутбуки Dell), <code>2</code> (non-Compa1 ноутбуки Toshiba), <code>3</code> (прочие ноутбуки), <code>4</code> (Compa1 ноутбуки Toshiba) и <code>5</code> (Gateway machines).
|-
| <code>NVreg_RemapLimit</code> || <code>60</code> || Максимальное количество перераспределяемой памяти. Этот параметр определяет количество памяти, которое драйвер может перераспределить через IOMMU/SWIOTLB на 64-битной системе. Используйте его только тогда, когда IOMMU или SMIOTLB больше 64Мб. NVIDIA рекомендует вычитать 4МБ из общего количества используемой памяти. Например, по умолчанию используется значение 60, что на самом деле означает 64Мб. Чтобы установить его в 128МБ, установите значение параметра в 124.
|-
|<code>NVreg_UpdateMemoryTypes</code> || <code>0</code> || Настраивает использование атрибутов таблицы страниц. Возможные значения: <code>0</code> (механизм логики Nvidia), <code>1</code> (включает использование измененных атрибутов таблицы страниц) и <code>2</code> (выключает использование атрибутов таблицы страниц).
|-
|<code>NVreg_InitializeSystemMemoryAllocations</code> || <code>1</code> || Заставляет драйвер NVIDIA очищать системную память перед использованием ее для GPU. Выключение этого параметра может несколько повысить производительность, но ценой повышенного риска с точки зрения безопасности. По умолчанию драйвер очищает выделенную память, обнуляя ее содержимое.
|-
| <code>NVreg_UseVBios</code> || <code>1</code> || Включает и выключает использование кода int10 видео-BIOS. Для его выключения установите этот параметр в <code>0</code>.
|-
| <code>NVreg_RMEdgeIntrCheck</code> || Не установлено || Включает и выключает проверку на edge-triggered прерывания.
|-
| <code>NVreg_EnableMSI</code> || <code>0</code> || Включает и выключает возможности PCIe-MSI. Включите этот параметр для того, чтобы использовать прерывания MSI вместо wired прерываний.
|-
| <code>NVreg_MapRegistersEarly</code> || <code>0</code> || Если этот параметр установлен в <code>1</code>, то драйвер осуществляет распределение областей памяти на ранней стадии загрузки, когда система осуществляет определение устройств, тогда как по умолчанию это распределение осуществляется драйвером после того, как он был загружен с помощью {{c|modprobe}} или во время запуска команды {{c|startx}}. Эта возможность является отладочной.
|-
| <code>NVreg_RegisterForACPIEvents</code> || <code>1</code> || Регистрирует драйвер в ACPI системы для получения событий ACPI. Этот параметр можно выключить (<code>0</code>) при появлении проблем с ACPI или при отладке проблемы. 
|}

Отредактируйте файл {{Path|/etc/modprobe.d/nvidia.conf}} и обновите информацию о модулях:

{{RootCmd|update-modules}}

Выгрузите модуль <code>nvidia</code>...

{{RootCmd|modprobe -r nvidia}}

...и загрузите его снова:

{{RootCmd|modprobe nvidia}}

=== Расширенная конфигурация X-сервера ===

GLX-интерфейс также имеет огромное количество параметров, которые можно настроить. Они управляют конфигурацией выхода TV, одновременным выводом на два монитора, определением частоты монитора, и так далее. Опять же, все доступные параметры подробно описаны в документации.

Чтобы использовать какие-либо из этих параметров, необходимо перечислить их в соответственном разделе Device в файле конфигурации X (обычно находящемся в {{Path|/etc/X11/xorg.conf}}). Например, чтобы отключить всплывающий логотип — splash logo:

<div class="mw-translate-fuzzy">
{{FileBox|filename=/etc/X11/xorg.conf|title=Отключение splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}
</div>

== Смотрите также ==

* [[nouveau & nvidia-drivers switching]] - Гибридный графический режим с использованием открытых драйверов.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Настройка системы для использования проприетарных драйверов для гибридной графики (переключение видеорежима).

{{Migrated|originalauthors={{Dev|SwifT}}, {{Dev|nightmorph}}, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
