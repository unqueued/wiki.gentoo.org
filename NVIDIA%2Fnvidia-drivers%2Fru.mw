<languages />

{{Metadata|abstract=nvidia-drivers — это проприетарный графический драйвер для видеокарт nVidia. Альтернативой с открытым исходным кодом является nouveau.}}

{{Package|x11-drivers/nvidia-drivers}} — это проприетарный графический драйвер для видеокарт nVidia. Альтернативой с открытым исходным кодом является [[nouveau]].

Драйвера {{Package|x11-drivers/nvidia-drivers}} в дереве портежей выпускаются nVidia и собираются для ядра Linux. Они содержат блоб (от англ. binary linked object — объект двоичной компоновки), который берет на себя основную работу по взаимодействию с платой. Драйвера состоят из двух частей: модуля ядра и драйвера X11. Обе части включаются в один пакет. Вследствие особенностей упаковки драйверов nVidia, вам придётся сделать некоторый выбор перед установкой драйверов.

Пакет {{Package|x11-drivers/nvidia-drivers}} включает в себя последние драйвера от nVidia с поддержкой ''всех'' плат. Имеется в наличии несколько версий пакета в зависимости от того, насколько у вас старая плата. Этот пакет использует eclass для обнаружения типа используемой платы, чтобы установить подходящую версию.

== Аппаратная совместимость ==

Пакет {{Package|x11-drivers/nvidia-drivers}} поддерживает целый диапазон доступных плат nVidia. В зависимости от видеокарты, которой вы обладаете, для установки доступно большое число версий. Прочитайте официальную документацию nVidia [http://www.nvidia.com/object/IO_32667.html Что такое устаревший драйвер?], для того, чтобы узнать, какую версию пакета {{Package|x11-drivers/nvidia-drivers}} вы должны использовать. Достаточно подходящий способ узнать это с помощью интерактивной формы предложен [http://www.nvidia.com/Download/Find.aspx здесь]. Введите вашу видеокарту (учитывая параметр Legacy в поле 'Product Type'), и вы должны получить наилучшую поддерживаемую версию, отображенную под формой.

Если ваша карта определилась как устаревшая, замаскируйте свежие выпуски {{Package|nvidia-drivers}}, т. е.

{{FileBox|filename=/etc/portage/package.mask|Маскировка драйверов версии выше 174|1=
>x11-drivers/nvidia-drivers-174
}}

Заметьте, что Gentoo не предоставляет версии 71.86.xx. Если вашей карте требуются эти драйвера, рекомендуется использовать драйвер [[nouveau]] .

== Ядро ==

Как упоминалось выше, драйвер ядра nVidia устанавливается и работает на текущем ядре. Он собирается в виде модуля, поэтому ядро должно поддерживать загрузку модулей ядра (смотрите ниже).

Модуль ядра (nvidia.ko) состоит из проприетарной части (широко известной как ''двоичный блоб''), которая управляет графическими чипами, и части с открытым исходным кодом (клей — англ. ''glue''), которая во время исполнения работает как посредник между проприетарной частью и ядром. Они должны работать вместе слаженно, иначе вы можете столкнуться с потерей данных (из-за паники ядра, сбоя X-сервера с несохраненными данными в X-приложениях) и даже повреждением аппаратного обеспечения (перегрев и другие проблемы с управлением питания тут же приходят на ум).

=== Совместимость ядра ===

Время от времени, новый релиз ядра изменяет внутренний двоичный интерфейс приложений (англ. ABI, application binary interface) для драйверов, что означает, что все драйвера, которые используют этот интерфейс, должны быть соответствующим образом изменены. Для драйверов с открытым исходным кодом, особенно распространяемых с ядром, эти изменения практически тривиальны для исправления, так как цепочка вызовов между драйверами и другими частями ядра может быть просмотрена достаточно легко. Для проприетарных драйверов типа nvidia.ko, это далеко не так. При изменении внутреннего двойчного интерфейса приложений, не возможно просто исправить используемый ''клей'', потому что неизвестно как этот клей используется проприетарной частью. Если удастся наладить работу и все будет работать исправно, вы все еще рискуете тем, что работа nvidia.ko в новом, неподдерживаемом ядре приведет к потере данных и аппаратному сбою.

When a new, incompatible kernel version is released, it is probably best to stick with the newest supported kernel for a while. Nvidia usually takes a few weeks to prepare a new proprietary release they think is fit for general use. Just be patient. If absolutely necessary, then it is possible to use the epatch_user command with the nvidia-drivers ebuilds: this allows the user to patch nvidia-drivers to somehow fit in with the latest, unsupported kernel release. Do note that neither the nvidia-drivers maintainers nor Nvidia will support this situation. The hardware warranty will most likely be void, Gentoo's maintainers cannot begin to fix the issues since it's a proprietary driver that only Nvidia can properly debug, and the kernel maintainers (both Gentoo's and upstream) will certainly not support proprietary drivers, or indeed any "tainted" system that happens to run into trouble.

=== Требуемые параметры ядра ===

Если для конфигурации ядра был использован <tt>genkernel all</tt>, тогда все в порядке. Если нет, дважды проверьте конфигурацию ядра, так чтобы поддержка загружаемых модулей была включена:

{{KernelBox|title=Включить поддержку загружаемых модулей|1=
[*] Enable loadable module support --->
}}

Также включите в ядро поддержку диапазонных регистров типа памяти (англ. Memory Type Range Register - MTRR):

{{KernelBox|title=Включить поддержку MTRR|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

Если у вас видеокарта AGP, вы можете дополнительно включить в ядро поддержку драйвера <tt>apggart</tt>, встроенного в ядро, или в качестве модуля. Если модуль <tt>apggart</tt> не используется, то драйверы будут использовать собственную реализацию <tt>apggart</tt>, называемую <tt>NvAGP</tt>. На определенных системах, это приводит к лучшей производительности, чем встроенный в ядро <tt>agpgart</tt>, а на некоторых, к худшей. Оцените оба варианта на своей собственной системе для достижения наилучшей производительности. Если вы не уверены что делать, используйте встроенный в ядро <tt>agpgart</tt>:

{{KernelBox|title=Включить поддержку agpgart|1=
Device Drivers --->
    Graphics support --->
        -*- /dev/agpgart (AGP Support) --->
}}

{{Note/ru|На amd64 настройками agpgart управляет IOMMU.}}

{{Important/ru|Для процессоров архитектуры x86 и AMD64, встроенный в ядро драйвер [[framebuffer]] конфликтует с двоичным драйвером, предоставляемым nVidia. Когда вы компилируете ядро для этих процессоров, полностью уберите поддержку встроенных в ядро драйверов, как показано ниже:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
}}

Альтернативой для кадрового буфера является [[uvesafb]], который может быть установлен вместе с {{Package|x11-drivers/nvidia-drivers}}.

Ebuild-файл '''nvidia-drivers''' автоматически обнаруживает версию вашего ядра, основываясь на символьной ссылке {{Path|/usr/src/linux}}. Пожалуйста, убедитесь, что эта символьная ссылка указывает на корректные исходные коды и что ваше ядро сконфигурировано правильно. Обратитесь к разделу «Конфигурация ядра» [[Handbook:Main_Page/ru|Настольной книги Gentoo]] для получения подробностей по конфигурации ядра.

Сперва, выберите правильные исходные тексты ядра используя <kbd>eselect</kbd>. Если вы используете <tt>gentoo-sources-3.7.10</tt>, список доступных ядер может выглядеть следующим образом:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

В результате, приведенном выше, заметьте, что ядро <tt>linux-3.7.10-gentoo</tt> помечено звездочкой (<code>*</code>), для того, чтобы продемонстрировать, что это то ядро, на которое указывает символьная ссылка.

Если символьная ссылка не указывает на корректные исходные тексты, обновите ее, выбирая номер требуемых вами исходных текстов ядра, как в приведенном далее примере.

{{RootCmd|eselect kernel set 1}}

== Драйвера == 

Теперь самое время установить драйвера. Сперва, следуйте [[Xorg/Configuration/ru|Описание настройки X-сервера]] и установите <code>VIDEO_CARDS="nvidia"</code> в {{Path|/etc/portage/make.conf}}. Во время установки X-сервера, он установит правильную версию {{Package|x11-drivers/nvidia-drivers}}.

{{Note/ru|Драйвера могут быть установлены с USE-флагом <code>gtk</code>, прописанным в {{Path|/etc/portage/make.conf}}. Это установит пакет {{Package|media-video/nvidia-settings}}, удобный графический инструмент для мониторинга и конфигурации нескольких аспектов платы nVidia.}}

{{Important/ru|Каждый раз, когда [[Kernel/Upgrade/ru|компилируется ядро]], необходимо переустановить модули ядра, принадлежащих nVidia. Простым способом пересборки модулей, установленных ebuild-файлами (такими как {{Package|x11-drivers/nvidia-drivers}}), является запуск  <kbd>emerge @module-rebuild</kbd>.}}

После завершения установки, запустите <kbd>modprobe nvidia</kbd> для загрузки модуля ядра в память. Если вы обновляете ядро, то сначала удалите предыдущий модуль.

== Драйвера ==
Теперь самое время установить драйвера. Вы можете это сделать сначала следуя [http://www.gentoo.org/doc/en/xorg-config.xml Описанию настройки X-сервера], и, затем, установив '''VIDEO_CARDS="nvidia"''' в {{Path|/etc/portage/make.conf}}. После того, как Вы установите X-сервер,, он затем установит правильную версию '''nvidia-drivers''' для Вас.

Чтобы, не загружать модуль вручную, после каждой перезагрузки.
Добавьте <code>nvidia</code> в {{Path|/etc/conf.d/modules}}, для его автоматической загрузки, при старте системы.

{{Important/ru|Если <code>agpgart</code> скомпилирован как модуль, также добавьте и его в {{Path|/etc/conf.d/modules}}.}}

=== X-сервер ===

Как только подходящие драйвера установленны, настройте X-сервер для использования драйвера <tt>nvidia</tt> вместо драйвера по умолчанию <tt>nv</tt>.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Запустите <kbd>eselect</kbd>, чтобы X-сервер использовал GLX библиотеки nVidia:

{{RootCmd|eselect opengl set nvidia}}

=== Разрешения ===

{{VIDEO_CARDS/Permissions|nvidia}}

== Тестирование видеокарты ==

To test the nVidia card, fire up X and run <kbd>glxinfo</kbd>, which is part of the {{Package|x11-apps/mesa-progs}} package. It should say that direct rendering is activated:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Для проверки кадровой частоты — FPS, запустите <kbd>glxgears</kbd>.

== Включение поддержки nvidia ==

Некоторые инструменты, такие как {{Package|media-video/mplayer}} и {{Package|media-libs/xine-lib}}, используют локальный USE-флаг, называемый <code>xvmc</code>, включающий поддержку XvMCNVIDIA. Это полезно при просмотре видео высокого разрешения. Добавьте <code>xvmc</code> в список USE-флагов в {{Path|/etc/portage/make.conf}}, или добавьте его как USE-флаг в  <code>media-video/mplayer</code> и/или  <code>media-libs/xine-lib</code> в файле {{Path|/etc/portage/package.use}}.

Серии GeForce 8 и более поздние GPU выходят с поддержкой VDPAU, которая заменила собой поддержку XvMCNVIDIA. Смотри статью [[VDPAU]] для включения поддержки VDPAU.

Также есть несколько приложений, которые используют USE-флаг <code>nvidia</code>, поэтому было бы неплохо добавить его в файл {{Path|/etc/portage/make.conf}}.

Затем, запустите <kbd>emerge -uD --newuse @world</kbd> для пересборки приложений, которые выигрывают от изменения этого USE-флага.

=== Использование инструмента управления настройками от NVidia ===

nVidia также предоставляет вам инструмент для управления настройками. Этот инструмент разрешает вам просматривать и изменять настройки графики без перезапуска X-сервера и доступен через Portage как {{Package|media-video/nvidia-settings}}. Как упомянуто ранее, он будет установлен автоматически, если вы установили драйвера с USE-флагом <code>gtk</code>, прописанным в файле {{Path|/etc/portage/make.conf}} или в {{Path|/etc/portage/package.use}}.

=== Включение OpenGL/OpenCL ===

Для включения OpenGL и OpenCL.

{{RootCmd|eselect opengl set nvidia}}
{{RootCmd|eselect opencl set nvidia}}

Убедитесь, что сервер Xorg не запущен во время проведения этих изменений.

== Устранение неполадок ==

* {{Bug|nvidia-drivers|search=package}}

=== Драйвер не инициализируется, если включены прерывания MSI ===

Драйвер NVIDIA в Linux по умолчанию использует Message Signaled Interrupts (прерывания инициируемые сообщениями, MSI). В результате этого мы получаем совместимость и расширяемость, в основном из-за отсутствия необходимости разделения IRQ. На некоторых системах наблюдаются проблемы с поддержкой MSI, хотя они хорошо работают с прерываниями virtual wire (виртуальные провода). Это приводит к невозможности запустить X вместе с драйвером NVIDIA, либо к проблемам инициализации CUDA.

Прерывания MSI можно запретить параметром модуля ядра NVIDIA <code>NVreg_EnableMSI=0</code>. Это можно сделать в командной строке при загрузке модуля, либо (более правильно) через файлы конфигурации модулей дистрибутива (например, через те, что находятся в {{Path|/etc/modprobe.d/}}).

Например:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Поддержка драйверов Nvidia
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# Следующие параметры можно менять. Помните, что
# нужно быть осторожным, так как из-за них может возникнуть нестабильность!
# Более детальная информация находится в файле /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! ВНИМАНИЕ, ПО ПОВОДУ БЕЗОПАСНОСТИ !!!
# НЕ МЕНЯЙТЕ И НЕ УДАЛЯЙТЕ НАСТРОЙКИ УСТРОЙСТВА, ЕСЛИ ТОЛЬКО
# ВЫ НЕ УВЕРЕНЫ В ТОМ, ЧТО ДЕЛАЕТЕ.
# ДОБАВЛЯЙТЕ ТОЛЬКО ДОВЕРЕННЫХ ПОЛЬЗОВАТЕЛЕЙ В ГРУППУ VIDEO, ТАК КАК ОНИ МОГУТ 
# УМЕРЕННО ИЛИ НЕОБРАТИМО ИСПОРТИТЬ КОМПЬЮТЕР.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Работа с 2D ускорением на машинах с 4 Гб памяти и больше. ===

Если вы испытываете проблемы с ускорением 2D графики nVidia, скорее всего системе не удалось настроить диапазон совмещения записи (write-combining range) в MTRR. Чтобы это проверить, пересмотрите содержимое следующих файлов
{{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Каждая строка должна содержать <tt>write-back</tt> или <tt>write-combining</tt>. При появлении строки со словом <tt>uncachable</tt>, необходимо изменить настройки BIOS, чтобы это исправить.

Перезагрузитесь и войдите в BIOS, затем найдите настройки MTRR (возможно, под ''CPU Settings''). Измените настройки с <tt>continuous</tt> на <tt>discrete</tt> и перезагрузитесь обратно в Linux. Теперь записи со словом <tt>uncachable</tt> больше нет и 2D-ускорение работает без каких-либо неполадок.

=== ''no such device'', при попытке загрузить модуль ядра ===

Это обычно вызвано одной из следующих проблем:

# В системе отсутствует, какая лиюл видеокарта nVidia. Проверьте вывод <kbd>lspci</kbd>, чтобы убедиться, что видеокарта nVidia подключена и обнаружена.
# Установленная версия {{Package|x11-drivers/nvidia-drivers}} не поддерживает подключенную модель видеокарты. Проверьте файл README в {{Path|/usr/share/nvidia-drivers-*/}} на наличие списка поддерживаемых устройств, или используйте поиск драйверов в [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Карта используется другим драйвером ядра. Проверьте, с помощью <kbd>lspci -k</kbd>, если другой драйвер, вроде "nouveau", привязан к текущей карте. Если да, то отключите его или добавте в черный список.

=== Xorg сообщает, что не может найти какие-либо экраны ===

Когда после загрузки системы, вместо графического интерфейса пользователя, вы получаете черный экран или командную строку в консоли; нажмите {{Key|Ctrl+Alt+F2}}, чтобы вызвать командную строку (если она отсутствует). Затем запустите:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

чтобы увидеть вывод работы Xorg. Если одной из первых ошибок идет сообщение о том, что Xorg не может найти какие-либо экраны, следуйте следующим инструкциям, чтобы разрешить проблему.

Должно быть достаточно запуска следующей команды перед перезагрузкой:

{{Cmd| /opt/bin/nvidia-xconfig}}

Но если это не работает, запустите <kbd>lspci</kbd> и найдите вашу видеокарту, начинающуюся примерно так:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: модель вашей видеокарты
 . . . 
</pre>
}}

Возьмите первую часть, <code>01.00.0</code> и поместите ее в {{Path|/etc/X11/xorg.conf}} вместе с параметром <code>BusID</code>:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# это не целый файл, а только часть, которая должна быть отредактирована
# файл уже должен существовать, после запуска nvidia-xconfig

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering не активирован ===

Если direct rendering не работает, это может быть потому, что Direct Rendering Manager включен в ядро, что вызывает конфликт с драйвером. Проверьте статус Direct Rendering следуя инструкциям раздела [[#Тестирование видеокарты|Тестирование видеокарты]].

Во-первых, отключите Direct Rendering Manager (<code>CONFIG_DRM</code>) в ядре :

{{KernelBox|title=Отключение Direct Rendering Manager|1=

Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Далее, соберите заново {{Package|x11-drivers/nvidia-drivers}}, так как драйвер мог быть пересобран с DRM-символами ядра. Это должно исправить проблему.

== Тонкая настройка ==

=== Документация ===

Пакет {{Package|x11-drivers/nvidia-drivers}} также поставляется с исчерпывающей документацией. Она устанавливается в каталог {{Path|/usr/share/doc}} и может быть просмотрена с помощью следующей команды:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Параметры модуля ядра ===

Модуль ядра <tt>nvidia</tt> принимает набор параметров (options), которые позволяют настроить поведение драйвера. Большинство из них упомянуто в документации. Для того, чтобы добавить или изменить значения этих параметров, отредактируйте файл {{Path|/etc/modprobe.d/nvidia.conf}}. Не забудьте запустить <kbd>update-modules</kbd> после изменения этого файла и помните, что вам потребуется перезагрузить модуль <code>nvidia</code>  перед тем, как новые настройки вступят в силу.

Отредактируйте {{Path|/etc/modprobe.d/nvidia.conf}}:

{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Обновите информацию о модулях:

{{RootCmd|update-modules}}

Выгрузите модуль <tt>nvidia</tt>...

{{RootCmd|modprobe -r nvidia}}

...и загрузите его снова:

{{RootCmd|modprobe nvidia}}

=== Расширенная конфигурация X-сервера ===

GLX-интерфейс также имеет огромное количество параметров, которые можно настроить. Они управляют конфигурацией выхода TV, одновременным выводом на два монитора, определением частоты монитора, и так далее. Опять же, все доступные параметры подробно описаны в документации.

Чтобы использовать какие-либо из этих параметров, необходимо перечислить их в соответственном разделе Device в файле конфигурации X (обычно находящемся в {{Path|/etc/X11/xorg.conf}}). Например, чтобы отключить всплывающий логотип — splash logo:

{{FileBox|filename=/etc/X11/xorg.conf|title=Отключение splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== Смотрите также ==

== Благодарности ==
Мы хотим поблагодарить следующих авторов и редакторов за их вклад в это руководство: Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni.

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
