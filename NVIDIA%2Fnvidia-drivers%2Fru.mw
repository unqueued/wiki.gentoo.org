<languages />

{{Metadata|abstract=nvidia-drivers — это проприетарный графический драйвер для видеокарт NVIDIA. Альтернативой с открытым исходным кодом является nouveau.}}

{{Package|x11-drivers/nvidia-drivers}} — это проприетарный графический драйвер для видеокарт NVIDIA. Альтернативой с открытым исходным кодом является [[nouveau/ru|nouveau]].

Драйвера {{Package|x11-drivers/nvidia-drivers}} в дереве Portage выпускаются NVIDIA и собираются для ядра Linux. Они содержат блоб (от англ. binary linked object — объект двоичной компоновки), который берет на себя основную работу по взаимодействию с платой. Драйвера состоят из двух частей: модуля ядра и драйвера X11. Обе части включаются в один пакет. Вследствие особенностей упаковки драйверов NVIDIA, необходимо сделать некоторый выбор перед установкой драйверов.

Пакет {{Package|x11-drivers/nvidia-drivers}} включает в себя последние драйвера от NVIDIA с поддержкой ''большинства'' видеокарт. Имеется в наличии несколько версий пакета в зависимости от того, насколько у вас старая плата. Этот пакет использует eclass для обнаружения типа используемой платы, чтобы установить подходящую версию.

== Аппаратная совместимость ==

Пакет {{Package|x11-drivers/nvidia-drivers}} поддерживает целый диапазон доступных плат NVIDIA. В зависимости от видеокарты, которая имеется в системе, для установки доступно большое число версий. Прочитайте официальную документацию NVIDIA [http://www.nvidia.com/object/IO_32667.html Что такое устаревший драйвер?], для того, чтобы узнать, какую версию пакета {{Package|x11-drivers/nvidia-drivers}} лучше использовать. Достаточно подходящий способ узнать это с помощью интерактивной формы предложенной [http://www.nvidia.com/Download/Find.aspx здесь]. Введите видеокарту (учитывая параметр Legacy в поле 'Product Type'), и форма отобразит наилучшую поддерживаемую версию.

Если карта определилась как устаревшая, замаскируйте свежие выпуски {{Package|nvidia-drivers}}, т. е.

{{FileBox|filename=/etc/portage/package.mask|title=Маскировка драйверов версии выше 174|1=
>x11-drivers/nvidia-drivers-174
}}

Заметьте, что Gentoo не предоставляет версии 71.86.xx. Если в системе установлена видеокарта, которой необходимы эти драйвера, то рекомендуется использовать драйвер [[nouveau]].

== Установка ==

=== Ядро ===

Как упоминалось выше, драйвер ядра NVIDIA устанавливается и работает на текущем ядре. Он собирается в виде модуля, поэтому ядро должно поддерживать загрузку модулей ядра (смотрите ниже).

Модуль ядра ({{Path|nvidia.ko}}) состоит из проприетарной части (широко известной как ''двоичный блоб''), которая управляет графическими чипами, и части с открытым исходным кодом (клей — англ. ''glue''), которая во время исполнения работает как посредник между проприетарной частью и ядром. Они должны работать вместе слаженно, иначе вы можете столкнуться с потерей данных (из-за паники ядра, сбоя X-сервера с несохраненными данными в X-приложениях) и даже повреждением аппаратного обеспечения (перегрев и другие проблемы с управлением питания тут же приходят на ум).

==== Совместимость ядра ====

Время от времени, новый релиз ядра изменяет внутренний двоичный интерфейс приложений (англ. ABI, application binary interface) для драйверов, что означает, что все драйвера, которые используют этот интерфейс, должны быть соответствующим образом изменены. Для драйверов с открытым исходным кодом, особенно распространяемых с ядром, эти изменения практически тривиальны для исправления, так как цепочка вызовов между драйверами и другими частями ядра может быть просмотрена достаточно легко. Для проприетарных драйверов типа nvidia.ko, это далеко не так. При изменении внутреннего двойчного интерфейса приложений, невозможно просто исправить используемый ''клей'', потому что неизвестно как этот клей используется проприетарной частью. Если удастся наладить работу и все будет работать исправно, вы все еще рискуете тем, что работа nvidia.ko в новом, неподдерживаемом ядре приведет к потере данных и аппаратному сбою.

Когда выпускается новая, несовместимая версия ядра, лучше некоторое время оставаться на последнем поддерживаемом ядре. Обычно, NVIDIA требуется несколько недель для подготовки нового проприетарного релиза, который, по их мнению, подходит для общего использования. Просто будьте терпеливы. Если же обновление совершенно необходимо, ebuild-файл nvidia-drivers поддерживает команду epatch_user из класса eutils.class: это позволит вам исправить nvidia-drivers для их совместимости с последним, неподдерживаемым релизом ядра. Однако заметьте, что ни мейнтейнеры пакета nvidia-drivers, ни NVIDIA не оказывают тех. поддержки, в данной ситуации. Гарантия на аппаратное обеспечение, скорее всего, будет аннулирована. Мейнтейнеры Gentoo не смогут исправить ваши проблемы, так как это проприетарный драйвер, который может быть отлажен только NVIDIA. Мейнтейнеры ядра (как пакета Gentoo, так и разработчики самого ядра), определенно не будут поддерживать проприетарные драйвера или, любую ''испорченную'' систему, которая может вызвать проблемы.

Если для конфигурации ядра был использован {{c|genkernel all}}, тогда все в порядке. Если нет, дважды проверьте конфигурацию ядра, так чтобы поддержка загружаемых модулей была включена:

{{KernelBox|title=Включить поддержку загружаемых модулей|1=
[*] Enable loadable module support --->
}}

Также включите в ядро поддержку диапазонных регистров типа памяти (англ. Memory Type Range Register - MTRR):

{{KernelBox|title=Включить поддержку MTRR|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

Если у вас видеокарта AGP, вы можете дополнительно включить в ядро поддержку драйвера agpgart, встроенного в ядро, или в качестве модуля. Если модуль apggart не используется, то драйверы будут использовать собственную реализацию apggart, называемую NvAGP. На определенных системах, это приводит к лучшей производительности, чем встроенный в ядро agpgart, а на некоторых, к худшей. Оцените оба варианта на своей собственной системе для достижения наилучшей производительности. Если вы не уверены что делать, используйте встроенный в ядро agpgart:

{{KernelBox|title=Включение поддержки agpgart|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note|На amd64 настройками agpgart управляет IOMMU.}}

{{Important|Для процессоров архитектур x86 и AMD64, встроенный в ядро [[framebuffer]] драйвер конфликтует с бинарным драйвером от NVIDIA. При компиляции ядра для этих процессоров полностью отключите поддержку этого драйвера:
{{KernelBox|title=Отключение поддержки встроенного в ядро драйвера кадрового буфера|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Теперь убедитесь, что драйвер nouveau отключен:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
      < > Nouveau (nVidia) cards
}}
}}

Альтернативой для кадрового буфера является [[uvesafb]], который может быть установлен вместе с {{Package|x11-drivers/nvidia-drivers}}. 

{{Important|For x86 and AMD64 processors, the [[uvesafb]] driver conflicts with the binary driver provided by NVIDIA above 361.28 versions.}}

For (U)EFI systems, uvesafb will not work. Be warned that enabling ''efifb'' support in kernel (<code>CONFIG_FB_EFI=y</code>) causes intermittent problems with the initialization of the NVIDIA drivers. There is no known alternative framebuffer for (U)EFI systems.

Ebuild-файл '''nvidia-drivers''' автоматически обнаруживает версию вашего ядра, основываясь на символьной ссылке {{Path|/usr/src/linux}}. Пожалуйста, убедитесь, что эта символьная ссылка указывает на корректные исходные коды и что ваше ядро сконфигурировано правильно. Обратитесь к разделу «Конфигурация ядра» [[Handbook:Main_Page/ru|Настольной книги Gentoo]] для получения подробностей по конфигурации ядра.

Для начала, выберите правильный исходный код ядра используя {{c|eselect}}. Когда, например, выбран {{Package|sys-kernel/gentoo-sources}} версии 3.7.10, список ядер будет выглядеть приблизительно так:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the kernel that the symbolic link points to.

Если символьная ссылка не указывает на корректные исходные тексты, обновите ее, выбирая номер требуемых вами исходных текстов ядра, как в приведенном далее примере.

{{RootCmd|eselect kernel set 1}}

== Конфигурация ==

=== Драйвера === 

Теперь самое время установить драйвера. Сперва, следуйте [[Xorg/Guide/ru|
Xorg/Руководство]] и установите <code>VIDEO_CARDS="nvidia"</code> в {{Path|/etc/portage/make.conf}}. Во время установки X-сервера, он установит правильную версию {{Package|x11-drivers/nvidia-drivers}}.

{{Note|The drivers can be installed with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}}. This will install {{Package|media-video/nvidia-settings}}, a handy graphical tool for monitoring and configuring several aspects of the NVIDIA card.}}

{{Important|Every time a [[Kernel/Upgrade|kernel is built]], it is necessary to reinstall the NVIDIA kernel modules. An easy way to rebuild the modules installed by ebuilds (such as {{Package|x11-drivers/nvidia-drivers}}) is to run {{c|emerge @module-rebuild}}.}}

После завершения установки, запустите {{c|modprobe nvidia}} для загрузки модуля ядра в память. Если это было обновление (пакета {{Package|x11-drivers/nvidia-drivers}}), то сначала удалите предыдущий модуль.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Чтобы, не загружать модуль вручную, после каждой перезагрузки.
Добавьте <code>nvidia</code> в {{Path|/etc/conf.d/modules}}, для его автоматической загрузки, при старте системы.

{{Important|Если <code>agpgart</code> скомпилирован как модуль, также добавьте и его в {{Path|/etc/conf.d/modules}}.}}

=== Подпись модулей ядра (опционально) ===

{{Note|Информация в этом разделе не имеет отношения к системам без подписанных модулей ядра. Пропустите её.}}

If secure boot kernel signing is used, then the NVIDIA kernel modules need to be signed before they can be loaded.

This can be accomplished by using the kernel-provided {{c|perl}} script as follows.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

Начиная с версии драйвера 358.09, новый модуль был сделан для обработки настройки режима монитора и для этого версия драйвера так же должна быть подписана.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Once the modules are signed, the driver will load as expected on boot up. This module signing method can be used to sign other modules too - not only the nvidia-drivers. Just modify the path and corresponding module accordingly.

=== X-сервер ===

Как только подходящие драйвера установленны, настройте X-сервер для использования драйвера <code>nvidia</code> вместо драйвера по умолчанию <code>nv</code>.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Run {{c|eselect}} so that the X server uses the NVIDIA GLX libraries:

{{RootCmd|eselect opengl set nvidia}}

=== Разрешения ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Включение глобальной поддержки nvidia ===

Некоторые инструменты, такие как {{Package|media-video/mplayer}} и {{Package|media-libs/xine-lib}}, используют локальный USE-флаг, называемый <code>xvmc</code>, включающий поддержку XvMCNVIDIA. Это полезно при просмотре видео высокого разрешения. Добавьте <code>xvmc</code> в список USE-флагов в {{Path|/etc/portage/make.conf}}, или добавьте его как USE-флаг в  {{Package|media-video/mplayer}} и/или {{Package|media-libs/xine-lib}} в файле {{Path|/etc/portage/package.use}}.

Серии GeForce 8 и более поздние GPU выходят с поддержкой VDPAU, которая заменила собой поддержку XvMCNVIDIA. Смотри статью [[VDPAU]] для включения поддержки VDPAU.

Также есть несколько приложений, которые используют USE-флаг <code>nvidia</code>, поэтому было бы неплохо добавить его в файл {{Path|/etc/portage/make.conf}}.

Затем, запустите {{c|emerge -uD --newuse @world}} для пересборки тех приложений, на которые влияет изменение этого USE-флага.

=== Использование инструмента управления настройками от nVidia ===

NVIDIA also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as {{Package|media-video/nvidia-settings}}. As mentioned earlier, it will be pulled in automatically when installing the drivers with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== Включение OpenGL/OpenCL ===

Для включения OpenGL и OpenCL выполните:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Убедитесь, что сервер Xorg не запущен во время проведения этих изменений.

== Использование ==

=== Тестирование видеокарты ===

To test the NVIDIA card, fire up X and run {{c|glxinfo}}, which is part of the {{Package|x11-apps/mesa-progs}} package. It should say that direct rendering is activated:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Для проверки кадровой частоты — FPS, запустите {{c|glxgears}}.

== Устранение проблем ==

For an overview of the currently open bugs reported against the {{Package|x11-drivers/nvidia-drivers}} page, take a look at the {{Bug|nvidia-drivers|search=package}}.

=== Драйвер не инициализируется, если включены прерывания MSI ===

Драйвер NVIDIA в Linux по умолчанию использует Message Signaled Interrupts (прерывания инициируемые сообщениями, MSI). В результате этого мы получаем совместимость и расширяемость, в основном из-за отсутствия необходимости разделения IRQ. На некоторых системах наблюдаются проблемы с поддержкой MSI, хотя они хорошо работают с прерываниями virtual wire (виртуальные провода). Это приводит к невозможности запустить X вместе с драйвером NVIDIA, либо к проблемам инициализации CUDA.

Прерывания MSI можно запретить параметром модуля ядра NVIDIA <code>NVreg_EnableMSI=0</code>. Это можно сделать в командной строке при загрузке модуля, либо (более правильно) через файлы конфигурации модулей дистрибутива (например, через те, что находятся в {{Path|/etc/modprobe.d/}}).

Например:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=0660 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Работа с 2D ускорением на машинах с 4 Гб памяти и больше. ===

When NVIDIA 2D acceleration is giving problems, then it is likely that the system is unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Каждая строка должна содержать <code>write-back</code> или <code>write-combining</code>. При появлении строки со словом <code>uncachable</code>, необходимо изменить настройки BIOS, чтобы это исправить.

Перезагрузитесь и войдите в BIOS, затем найдите настройки MTRR (возможно, под ''CPU Settings''). Измените настройки с <code>continuous</code> на <code>discrete</code> и перезагрузитесь обратно в Linux. Теперь записи со словом <code>uncachable</code> больше нет и 2D-ускорение работает без каких-либо неполадок.

=== ''no such device'', при попытке загрузить модуль ядра ===

Это обычно вызвано одной из следующих проблем:

# The system does not have a NVIDIA card at all.  Check {{c|lspci}} output to confirm that the system has a NVIDIA graphics card installed and detected.
# The currently installed version of {{Package|x11-drivers/nvidia-drivers}} does not support the installed graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Another kernel driver has control of the hardware. Check {{c|lspci -k}} to see if another driver like "nouveau" is bound to the graphics card. If so, disable or blacklist this driver.

=== Xorg сообщает, что не может найти какие-либо экраны ===

Если после загрузки системы, вместо графического интерфейса пользователя виден черный экран или командная строка консоли; нажмите {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}}, чтобы вызвать виртуальную консоль (если она отсутствует). Затем запустите:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

чтобы увидеть вывод работы Xorg. Если одной из первых ошибок идет сообщение о том, что Xorg не может найти какие-либо экраны, следуйте следующим инструкциям, чтобы разрешить проблему.

Должно быть достаточно запуска следующей команды перед перезагрузкой:

{{RootCmd|/opt/bin/nvidia-xconfig}}

Но если это не работает, запустите {{c|lspci}} и найдите вашу видеокарту, начинающуюся примерно так:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: модель вашей видеокарты
 . . . 
</pre>
}}

Возьмите первую часть, <code>01.00.0</code> и поместите ее в {{Path|/etc/X11/xorg.conf}} вместе с параметром <code>BusID</code>:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# это не целый файл, а только часть, которая должна быть отредактирована
# файл уже должен существовать, после запуска nvidia-xconfig

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering не активирован ===

Если direct rendering не работает, это может быть потому, что Direct Rendering Manager включен в ядро, что вызывает конфликт с драйвером. Проверьте статус Direct Rendering следуя инструкциям раздела [[#Тестирование видеокарты|Тестирование видеокарты]].

Во-первых, отключите Direct Rendering Manager (<code>CONFIG_DRM</code>) в ядре :

{{KernelBox|title=Отключение Direct Rendering Manager|1=

Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Далее, соберите заново {{Package|x11-drivers/nvidia-drivers}}, так как драйвер мог быть пересобран с DRM-символами ядра. Это должно исправить проблему.

=== Замедленное или заикающееся проигрывание видео ===

Lately there seems to be some breaking with playback of some types of video with the NVIDIA binary drivers, causing slow video playback or significant stuttering. This problem seems to be occurring within the Intel CPU Idle replacement instead of the common ACPI CPU idling method for certain CPU's.

Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVIDIA Powermizer feature, or setting Powermizer to maximum performance within {{c|nvidia-settings}} has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <code>mplayer-nodeint</code> with something similar to <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> as a work around.)

=== Отсутствует вертикальная синхронизация (no VSync, tearing) в OpenGL приложениях ===

Добавление следующей опции в раздел экрана предотвращает разрывы на GTX 660, 660 Ti, и, возможно, других GPU ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ источник]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== Тонкая настройка ==

=== Документация ===

Пакет {{Package|x11-drivers/nvidia-drivers}} также поставляется с исчерпывающей документацией. Она устанавливается в каталог {{Path|/usr/share/doc}} и может быть просмотрена с помощью следующей команды:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Параметры модуля ядра ===

The <code>nvidia</code> kernel module accepts a number of parameters (options) which can be used to tweak the behavior of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run {{c|update-modules}} after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

{{Warning|Pay close attention to this section as these kernel options can enable features that the hardware may or may not support. These options are not forgiving, so be careful with the parameters. Do not made any changes without validating and double-checking that the change is needed.}}

{| class="table table-condensed table-striped"
|-
! Attribute !! Default !! Description
|-
| <code>NVreg_DeviceFileUID</code> || <code>0</code> || Modify the user ID for the device file. The default value sets it to the {{c|root}} user. Setting this to another user ID will make the driver module create the device file with access available to that user ID.
|-
| <code>NVreg_DeviceFileGID</code> || <code>27</code> || Modify the Group ID for the device file. The default value sets it to the {{c|video}} group.
|-
| <code>NVreg_DeviceFileMode</code> || Undefined || Set the permissions for the device file. A value of 0660 grants the owner and group-owner read-write access while other users cannot access the device file.
|-
| <code>NVreg_ModifyDeviceFiles</code> || <code>1</code> || Instruct the driver to enable or disable dynamic device file management.
|-
| <code>NVreg_EnablePCIeGen3</code> || <code>0</code> || Enable PCIe Gen 3.x support. If the system supports this 8GT high speed bus then enable it with this module option flag. When this is enabled but the system does not support Gen 3.0, the behavior of the system can become irratic and unstable. Some have even reported damage to hardware enabling this when it is not properly supported. By default the Nvidia driver is set to use PCIe Gen 2.x for compatibility reasons.
|-
| <code> NVreg_UsePageAttributeTable</code> || <code>0</code> || This is one of the latest and newest additions to the Nvidia driver modules option. It allows the driver to take full advantage of the PAT technology - a newer way of allocating memory, replacing the older Memory Type Range Register (MTRR) method. The PAT method creates a partition type table at a specific address mapped inside the register and utilizes the memory architecture and instruction set more efficiently and faster. If the computer supports PAT and the feature is enabled in the kernel then this flag can be enabled. Without PAT support, users may experience unstable performance and even crashes if this is enabled. So be careful with these options.
|-
| <code>NVreg_EnableVia4x</code> || <code>0</code> || Enable AGP 4x mode in the the NVIDIA driver on Via-chipset-powered systems. Some of these hardware configurations would not work properly in AGP 4x mode when others would. The default leaves it at AGP 2x mode.
|-
| <code>NVreg_EnableALiAGP</code> || <code>0</code> || On ALi1541 and ALi1647 chipsets, AGP support is by default disabled by the NVIDIA drivers. The value specifies the speed factor to use, so the values 1, 2, 4 and 8 represent AGP 1x, 2x, 4x and 8x respectively. NVIDIA does not recommend changing the value as it may lead to unstable systems.
|-
| <code>NVreg_ReqAGPRate</code> || Unspecified || Forces the AGP mode on the driver. For instance, a value of 1 means AGP 1x, while a value of 4 means AGP 4x.
|-
| <code>NVreg_NvAGP</code> || || Changes the AGP Gart mode setting. Possible values are: <code>0</code> (Disable), <code>1</code> (Enable using NVIDIAs internal AGP-Gart), <code>2</code> (Enable using the Linux kernel AGP-Gart) and <code>3</code> (Enable and use any available, but try th NVIDIA internal one first).
|-
| <code>NVreg_EnableAGPSBA</code> || <code>0</code> || Disables (<code>0</code>) or enables (<code>1</code>) AGP Side Banding. For stability reasons, the setting is by default disabled, but the setting can be enabled for testing and debugging purposes. This is not supported by NVIDIA though.
|-
| <code>NVreg_EnableAGPFW</code> || <code>0</code> || Enables AGP Fast-Writes when set to <code>1</code>. Depending on the system's chipset this may cause stability issues if enabled.
|-
| <code>NVreg_Mobile</code> || <code>0</code> || Through this setting, users can force the EDID information for particular systems. This workaround is provided for mobile GPU's where EDID information is either non-functional or disabled. Potential values are <code>0</code> (Auto detection of the correct setting), <code>1</code> (Dell notebooks), <code>2</code> (non-Compa1 Toshiba laptops), <code>3</code> (All other notebooks/laptops), <code>4</code> (Compa1 Toshiba laptops) or <code>5</code> (Gateway machines).
|-
| <code>NVreg_RemapLimit</code> || <code>60</code> || Maximum amount of system memory remapping. It specifies the amount of memory that the driver will be allowed to remap through the IOMMU/SWIOTLB on a 64-bit system. Only use it if the IOMMU or SMIOTLB is larger than 64mb. NVIDIA recommends to subtract 4mb from the total amount of memory to use. For instance, the default value is <code>60</code> which is in fact 64mb. To set it to 128mb, set the value to <code>124</code>.
|-
|<code>NVreg_UpdateMemoryTypes</code> || <code>0</code> || Tweak the use of page table attributes. Possible values are: <code>0</code> (Nvidias logic mechanism), <code>1</code> (Enable the use of changed page table attributes) and <code>2</code> (Disable the use of page table attributes).
|-
|<code>NVreg_InitializeSystemMemoryAllocations</code> || <code>1</code> || Tell the NVIDIA driver to clear system memory allocations prior to using it for the GPUs. Disabling can give a slight performance boost but at the cost of increased security risks. By default the driver will wipe the allocated by zeroing out its content.
|-
| <code>NVreg_UseVBios</code> || <code>1</code> || Enable or disable the use of the video BIOS int10 code. Set to <code>0</code> to disable.
|-
| <code>NVreg_RMEdgeIntrCheck</code> || Unspecified || Enable or disable checking for edge-triggered interrupts.
|-
| <code>NVreg_EnableMSI</code> || <code>0</code> || Enable or disable PCIe-MSI capabilities. Enable this to use MSI interrupts instead of wired interrupts.
|-
| <code>NVreg_MapRegistersEarly</code> || <code>0</code> || If set to <code>1</code>, allow the driver to map the memory locations early when the system is probing the hardware instead of the default option of doing this when loaded by {{c|modprobe}} or during {{c|startx}}. This is a debugging feature.
|-
| <code>NVreg_RegisterForACPIEvents</code> || <code>1</code> || Enable the driver to register with the ACPI of the system to receive ACPI events. This can be disabled (<code>0</code>) when issues occur with ACPI or while debugging an issue. 
|}

Edit the {{Path|/etc/modprobe.d/nvidia.conf}} file, and afterwards update the module information:

{{RootCmd|update-modules}}

Выгрузите модуль <code>nvidia</code>...

{{RootCmd|modprobe -r nvidia}}

...и загрузите его снова:

{{RootCmd|modprobe nvidia}}

=== Расширенная конфигурация X-сервера ===

GLX-интерфейс также имеет огромное количество параметров, которые можно настроить. Они управляют конфигурацией выхода TV, одновременным выводом на два монитора, определением частоты монитора, и так далее. Опять же, все доступные параметры подробно описаны в документации.

Чтобы использовать какие-либо из этих параметров, необходимо перечислить их в соответственном разделе Device в файле конфигурации X (обычно находящемся в {{Path|/etc/X11/xorg.conf}}). Например, чтобы отключить всплывающий логотип — splash logo:

{{FileBox|filename=/etc/X11/xorg.conf|title=Отключение splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== Смотрите также ==

* [[nouveau & nvidia-drivers switching]] - Гибридный графический режим с использованием открытых драйверов.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Настройка системы для использования проприетарных драйверов для гибридной графики (переключение видеорежима).

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
