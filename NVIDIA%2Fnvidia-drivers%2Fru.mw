<languages />

{{Metadata|abstract=nvidia-drivers — это проприетарный графический драйвер для видеокарт nVidia. Альтернативой с открытым исходным кодом является nouveau.}}

{{Package|x11-drivers/nvidia-drivers}} — это проприетарный графический драйвер для видеокарт nVidia. Альтернативой с открытым исходным кодом является [[nouveau]].

Драйвера {{Package|x11-drivers/nvidia-drivers}} в дереве Portage выпускаются nVidia и собираются для ядра Linux. Они содержат блоб (от англ. binary linked object — объект двоичной компоновки), который берет на себя основную работу по взаимодействию с платой. Драйвера состоят из двух частей: модуля ядра и драйвера X11. Обе части включаются в один пакет. Вследствие особенностей упаковки драйверов nVidia, необходимо сделать некоторый выбор перед установкой драйверов.

Пакет {{Package|x11-drivers/nvidia-drivers}} включает в себя последние драйвера от nVidia с поддержкой ''всех'' плат. Имеется в наличии несколько версий пакета в зависимости от того, насколько у вас старая плата. Этот пакет использует eclass для обнаружения типа используемой платы, чтобы установить подходящую версию.

== Аппаратная совместимость ==

Пакет {{Package|x11-drivers/nvidia-drivers}} поддерживает целый диапазон доступных плат nVidia. В зависимости от видеокарты, которая имеется в системе, для установки доступно большое число версий. Прочитайте официальную документацию nVidia [http://www.nvidia.com/object/IO_32667.html Что такое устаревший драйвер?], для того, чтобы узнать, какую версию пакета {{Package|x11-drivers/nvidia-drivers}} лучше использовать. Достаточно подходящий способ узнать это с помощью интерактивной формы предложенной [http://www.nvidia.com/Download/Find.aspx здесь]. Введите видеокарту (учитывая параметр Legacy в поле 'Product Type'), и форма отобразит наилучшую поддерживаемую версию.

Если карта определилась как устаревшая, замаскируйте свежие выпуски {{Package|nvidia-drivers}}, т. е.

{{FileBox|filename=/etc/portage/package.mask|title=Маскировка драйверов версии выше 174|1=
>x11-drivers/nvidia-drivers-174
}}

Заметьте, что Gentoo не предоставляет версии 71.86.xx. Если в системе установлена видеокарта, которой необходимы эти драйвера, то рекомендуется использовать драйвер [[nouveau]].

== Установка ==

=== Ядро ===

Как упоминалось выше, драйвер ядра nVidia устанавливается и работает на текущем ядре. Он собирается в виде модуля, поэтому ядро должно поддерживать загрузку модулей ядра (смотрите ниже).

Модуль ядра ({{Path|nvidia.ko}}) состоит из проприетарной части (широко известной как ''двоичный блоб''), которая управляет графическими чипами, и части с открытым исходным кодом (клей — англ. ''glue''), которая во время исполнения работает как посредник между проприетарной частью и ядром. Они должны работать вместе слаженно, иначе вы можете столкнуться с потерей данных (из-за паники ядра, сбоя X-сервера с несохраненными данными в X-приложениях) и даже повреждением аппаратного обеспечения (перегрев и другие проблемы с управлением питания тут же приходят на ум).

==== Совместимость ядра ====

Время от времени, новый релиз ядра изменяет внутренний двоичный интерфейс приложений (англ. ABI, application binary interface) для драйверов, что означает, что все драйвера, которые используют этот интерфейс, должны быть соответствующим образом изменены. Для драйверов с открытым исходным кодом, особенно распространяемых с ядром, эти изменения практически тривиальны для исправления, так как цепочка вызовов между драйверами и другими частями ядра может быть просмотрена достаточно легко. Для проприетарных драйверов типа nvidia.ko, это далеко не так. При изменении внутреннего двойчного интерфейса приложений, невозможно просто исправить используемый ''клей'', потому что неизвестно как этот клей используется проприетарной частью. Если удастся наладить работу и все будет работать исправно, вы все еще рискуете тем, что работа nvidia.ko в новом, неподдерживаемом ядре приведет к потере данных и аппаратному сбою.

Когда выпускается новая, несовместимая версия ядра, лучше некоторое время оставаться на последнем поддерживаемом ядре. Обычно, Nvidia требуется несколько недель для подготовки нового проприетарного релиза, который, по их мнению, подходит для общего использования. Просто будьте терпеливы. Если же обновление совершенно необходимо, ebuild-файл nvidia-drivers поддерживает команду epatch_user из класса eutils.class: это позволит вам исправить nvidia-drivers для их совместимости с последним, неподдерживаемым релизом ядра. Однако заметьте, что ни мейнтейнеры пакета nvidia-drivers, ни Nvidia не оказывают тех. поддержки, в данной ситуации. Гарантия на аппаратное обеспечение, скорее всего, будет аннулирована. Мейнтейнеры Gentoo не смогут исправить ваши проблемы, так как это проприетарный драйвер, который может быть отлажен только Nvidia. Мейнтейнеры ядра (как пакета Gentoo, так и разработчики самого ядра), определенно не будут поддерживать проприетарные драйвера или, любую ''испорченную'' систему, которая может вызвать проблемы.

Если для конфигурации ядра был использован {{c|genkernel all}}, тогда все в порядке. Если нет, дважды проверьте конфигурацию ядра, так чтобы поддержка загружаемых модулей была включена:

{{KernelBox|title=Включить поддержку загружаемых модулей|1=
[*] Enable loadable module support --->
}}

Также включите в ядро поддержку диапазонных регистров типа памяти (англ. Memory Type Range Register - MTRR):

{{KernelBox|title=Включить поддержку MTRR|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

Если у вас видеокарта AGP, вы можете дополнительно включить в ядро поддержку драйвера agpgart, встроенного в ядро, или в качестве модуля. Если модуль apggart не используется, то драйверы будут использовать собственную реализацию apggart, называемую NvAGP. На определенных системах, это приводит к лучшей производительности, чем встроенный в ядро agpgart, а на некоторых, к худшей. Оцените оба варианта на своей собственной системе для достижения наилучшей производительности. Если вы не уверены что делать, используйте встроенный в ядро agpgart:

{{KernelBox|title=Включение поддержки agpgart|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note|На amd64 настройками agpgart управляет IOMMU.}}

{{Important|Для процессоров архитектур x86 и AMD64, встроенный в ядро [[framebuffer]] драйвер конфликтует с бинарным драйвером от nVidia. При компиляции ядра для этих процессоров полностью отключите поддержку этого драйвера:
{{KernelBox|title=Отключение поддержки встроенного в ядро драйвера кадрового буфера|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Теперь убедитесь, что драйвер nouveau отключен:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        <*> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
            < > Nouveau (nVidia) cards
}}
}}

Альтернативой для кадрового буфера является [[uvesafb]], который может быть установлен вместе с {{Package|x11-drivers/nvidia-drivers}}. 

{{Important|For x86 and AMD64 processors, the [[uvesafb]] driver conflicts with the binary driver provided by nVidia above 361.28 versions.}}


Для UEFI систем uvesafb не работает. Предупреждаем, что включение поддержки "efifb" в ядре (<code>CONFIG_FB_EFI=y</code>) приводит к непостоянным(иногда появляется, иногда нет) проблемам с запуском драйверов nvidia. На данный момент не существует альтернативного кадрового буфера для UEFI систем.

Ebuild-файл '''nvidia-drivers''' автоматически обнаруживает версию вашего ядра, основываясь на символьной ссылке {{Path|/usr/src/linux}}. Пожалуйста, убедитесь, что эта символьная ссылка указывает на корректные исходные коды и что ваше ядро сконфигурировано правильно. Обратитесь к разделу «Конфигурация ядра» [[Handbook:Main_Page/ru|Настольной книги Gentoo]] для получения подробностей по конфигурации ядра.

Для начала, выберите правильный исходный код ядра используя {{c|eselect}}. Когда, например, выбран {{Package|sys-kernel/gentoo-sources}} версии 3.7.10, список ядер будет выглядеть приблизительно так:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

В результате, приведенном выше, заметьте, что ядро linux-3.7.10-gentoo помечено звездочкой (<code>*</code>), для того, чтобы продемонстрировать, что это то ядро, на которое указывает символьная ссылка.

Если символьная ссылка не указывает на корректные исходные тексты, обновите ее, выбирая номер требуемых вами исходных текстов ядра, как в приведенном далее примере.

{{RootCmd|eselect kernel set 1}}

== Конфигурация ==

=== Драйвера === 

Теперь самое время установить драйвера. Сперва, следуйте [[Xorg/Guide/ru|
Xorg/Руководство]] и установите <code>VIDEO_CARDS="nvidia"</code> в {{Path|/etc/portage/make.conf}}. Во время установки X-сервера, он установит правильную версию {{Package|x11-drivers/nvidia-drivers}}.

{{Note|Драйвера могут быть установлены с USE-флагом <code>gtk</code>, прописанным в {{Path|/etc/portage/make.conf}}. Это установит пакет {{Package|media-video/nvidia-settings}}, удобный графический инструмент для мониторинга и конфигурации нескольких аспектов платы nVidia.}}

{{Important|Каждый раз, когда [[Kernel/Upgrade/ru|компилируется ядро]], необходимо переустановить модули ядра, принадлежащих nVidia. Простым способом пересборки модулей, установленных ebuild-файлами (такими как {{Package|x11-drivers/nvidia-drivers}}), является запуск  {{c|emerge @module-rebuild}}.}}

После завершения установки, запустите {{c|modprobe nvidia}} для загрузки модуля ядра в память. Если это было обновление (пакета {{Package|x11-drivers/nvidia-drivers}}), то сначала удалите предыдущий модуль.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

Чтобы, не загружать модуль вручную, после каждой перезагрузки.
Добавьте <code>nvidia</code> в {{Path|/etc/conf.d/modules}}, для его автоматической загрузки, при старте системы.

{{Important|Если <code>agpgart</code> скомпилирован как модуль, также добавьте и его в {{Path|/etc/conf.d/modules}}.}}

=== Подпись модулей ядра (опционально) ===

{{Note|Информация в этом разделе не имеет отношения к системам без подписанных модулей ядра. Пропустите её.}}

Если вы используете подпись для безопасной загрузки ядра, значит вам нужно подписать модули ядра Nvidia перед их загрузкой.

Вы сделаете это через использование {{c|perl}} скрипта в ядре.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

Начиная с версии драйвера 358.09, новый модуль был сделан для обработки настройки режима монитора и для этого версия драйвера так же должна быть подписана.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Когда вы подпишите эти модули, драйвер будет загружаться должным образом. Этот метод подписания модуля может быть использован для подписи других модулей не только драйверов nvidia. Вам нужно будет изменить путь к соответствующему модулю.

=== X-сервер ===

Как только подходящие драйвера установленны, настройте X-сервер для использования драйвера <code>nvidia</code> вместо драйвера по умолчанию <code>nv</code>.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Запустите {{c|eselect}}, чтобы X-сервер использовал GLX библиотеки nVidia:

{{RootCmd|eselect opengl set nvidia}}

=== Разрешения ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Включение глобальной поддержки nvidia ===

Некоторые инструменты, такие как {{Package|media-video/mplayer}} и {{Package|media-libs/xine-lib}}, используют локальный USE-флаг, называемый <code>xvmc</code>, включающий поддержку XvMCNVIDIA. Это полезно при просмотре видео высокого разрешения. Добавьте <code>xvmc</code> в список USE-флагов в {{Path|/etc/portage/make.conf}}, или добавьте его как USE-флаг в  {{Package|media-video/mplayer}} и/или {{Package|media-libs/xine-lib}} в файле {{Path|/etc/portage/package.use}}.

Серии GeForce 8 и более поздние GPU выходят с поддержкой VDPAU, которая заменила собой поддержку XvMCNVIDIA. Смотри статью [[VDPAU]] для включения поддержки VDPAU.

Также есть несколько приложений, которые используют USE-флаг <code>nvidia</code>, поэтому было бы неплохо добавить его в файл {{Path|/etc/portage/make.conf}}.

Затем, запустите {{c|emerge -uD --newuse @world}} для пересборки тех приложений, на которые влияет изменение этого USE-флага.

=== Использование инструмента управления настройками от nVidia ===

nVidia также предоставляет инструмент для управления настройками. Этот инструмент разрешает пользователю просматривать и изменять настройки графики без перезапуска X-сервера; он доступен в Portage как {{Package|media-video/nvidia-settings}}. Как упомянуто ранее, он будет установлен автоматически, если драйвер был установлен с USE-флагом <code>gtk</code>, прописанным в файле {{Path|/etc/portage/make.conf}} или в {{Path|/etc/portage/package.use}}.

=== Включение OpenGL/OpenCL ===

Для включения OpenGL и OpenCL выполните:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Убедитесь, что сервер Xorg не запущен во время проведения этих изменений.

== Использование ==

=== Тестирование видеокарты ===

Для того, чтобы протестировать вашу видеокарту, запустите X и введите команду {{c|glxinfo}}, которая является частью пакета {{Package|x11-apps/mesa-progs}}. Она должна сообщить, что direct rendering активирован:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

Для проверки кадровой частоты — FPS, запустите {{c|glxgears}}.

== Устранение неполадок ==

* {{Bug|nvidia-drivers|search=package}}

=== Драйвер не инициализируется, если включены прерывания MSI ===

Драйвер NVIDIA в Linux по умолчанию использует Message Signaled Interrupts (прерывания инициируемые сообщениями, MSI). В результате этого мы получаем совместимость и расширяемость, в основном из-за отсутствия необходимости разделения IRQ. На некоторых системах наблюдаются проблемы с поддержкой MSI, хотя они хорошо работают с прерываниями virtual wire (виртуальные провода). Это приводит к невозможности запустить X вместе с драйвером NVIDIA, либо к проблемам инициализации CUDA.

Прерывания MSI можно запретить параметром модуля ядра NVIDIA <code>NVreg_EnableMSI=0</code>. Это можно сделать в командной строке при загрузке модуля, либо (более правильно) через файлы конфигурации модулей дистрибутива (например, через те, что находятся в {{Path|/etc/modprobe.d/}}).

Например:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=Setting nvidia NVreg_EnableMSI|1=<nowiki>
# Поддержка драйверов Nvidia
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# Следующие параметры можно менять. Помните, что
# нужно быть осторожным, так как из-за них может возникнуть нестабильность!
# Более детальная информация находится в файле /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! ВНИМАНИЕ, ПО ПОВОДУ БЕЗОПАСНОСТИ !!!
# НЕ МЕНЯЙТЕ И НЕ УДАЛЯЙТЕ НАСТРОЙКИ УСТРОЙСТВА, ЕСЛИ ТОЛЬКО
# ВЫ НЕ УВЕРЕНЫ В ТОМ, ЧТО ДЕЛАЕТЕ.
# ДОБАВЛЯЙТЕ ТОЛЬКО ДОВЕРЕННЫХ ПОЛЬЗОВАТЕЛЕЙ В ГРУППУ VIDEO, ТАК КАК ОНИ МОГУТ 
# УМЕРЕННО ИЛИ НЕОБРАТИМО ИСПОРТИТЬ КОМПЬЮТЕР.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== Работа с 2D ускорением на машинах с 4 Гб памяти и больше. ===

Если есть проблемы с 2D-ускорением графики на nVidia, то скорее всего системе не удалось настроить диапазон совмещения записи (write-combining range) в MTRR. Чтобы это проверить, пересмотрите содержимое следующих файлов
{{Path|/proc/mtrr}}:

{{RootCmd|cat /proc/mtrr}}

Каждая строка должна содержать <code>write-back</code> или <code>write-combining</code>. При появлении строки со словом <code>uncachable</code>, необходимо изменить настройки BIOS, чтобы это исправить.

Перезагрузитесь и войдите в BIOS, затем найдите настройки MTRR (возможно, под ''CPU Settings''). Измените настройки с <code>continuous</code> на <code>discrete</code> и перезагрузитесь обратно в Linux. Теперь записи со словом <code>uncachable</code> больше нет и 2D-ускорение работает без каких-либо неполадок.

=== ''no such device'', при попытке загрузить модуль ядра ===

Это обычно вызвано одной из следующих проблем:

# В системе отсутствует какая-либо видеокарта nVidia. Проверьте вывод {{c|lspci}}, чтобы убедиться, что видеокарта nVidia подключена и обнаружена.
# Установленная версия {{Package|x11-drivers/nvidia-drivers}} не поддерживает подключенную модель видеокарты. Проверьте файл README в {{Path|/usr/share/nvidia-drivers-*/}} на наличие списка поддерживаемых устройств, или используйте поиск драйверов в [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Карта используется другим драйвером ядра. Проверьте, с помощью {{c|lspci -k}}, если другой драйвер, вроде "nouveau", привязан к текущей карте. Если да, то отключите его или добавьте в черный список.

=== Xorg сообщает, что не может найти какие-либо экраны ===

Если после загрузки системы, вместо графического интерфейса пользователя виден черный экран или командная строка консоли; нажмите {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}}, чтобы вызвать виртуальную консоль (если она отсутствует). Затем запустите:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

чтобы увидеть вывод работы Xorg. Если одной из первых ошибок идет сообщение о том, что Xorg не может найти какие-либо экраны, следуйте следующим инструкциям, чтобы разрешить проблему.

Должно быть достаточно запуска следующей команды перед перезагрузкой:

{{Cmd| /opt/bin/nvidia-xconfig}}

Но если это не работает, запустите {{c|lspci}} и найдите вашу видеокарту, начинающуюся примерно так:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: модель вашей видеокарты
 . . . 
</pre>
}}

Возьмите первую часть, <code>01.00.0</code> и поместите ее в {{Path|/etc/X11/xorg.conf}} вместе с параметром <code>BusID</code>:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# это не целый файл, а только часть, которая должна быть отредактирована
# файл уже должен существовать, после запуска nvidia-xconfig

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== Direct rendering не активирован ===

Если direct rendering не работает, это может быть потому, что Direct Rendering Manager включен в ядро, что вызывает конфликт с драйвером. Проверьте статус Direct Rendering следуя инструкциям раздела [[#Тестирование видеокарты|Тестирование видеокарты]].

Во-первых, отключите Direct Rendering Manager (<code>CONFIG_DRM</code>) в ядре :

{{KernelBox|title=Отключение Direct Rendering Manager|1=

Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

Далее, соберите заново {{Package|x11-drivers/nvidia-drivers}}, так как драйвер мог быть пересобран с DRM-символами ядра. Это должно исправить проблему.

=== Замедленное или заикающееся проигрывание видео ===

В последнее время можно наблюдать сбои с проигрыванием некоторых типов видео на бинарных драйверах NVidia, вызывающие медленное воспроизведение или значительное заикание. Эта проблема происходит при замене для определенных процессоров общего ACPI метода холостого хода на метод от Intel.

Отключите метод холостого хода для процессора Intel, используя <code>intel_idle.max_cstate=0</code> в методе загрузки командной строки ядра, что должно дать основание для ядра автоматически откатится до нормального или более старого ACPI метода холостого хода процессора. Также, отключение NVidia Powermizer, или установка Powermizer на максимальную производительность с {{c|nvidia-settings}}, также может помочь. Хотя метод холостого хода для процессора Intel был представлен как стандарт для процессоров i5 и i7 (против использования ACPI метода), есть серьезная причина. Этот метод существенно решает проблему, однако некоторые небольшие заикания или медленное воспроизведение встречаются при включенном деинтерлейсинге; это происходит когда видео уже деинтерлейсировано (т.е. псевдоним <code>mplayer-nodeint</code> с чем-то похожим для <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code>).

=== Отсутствует вертикальная синхронизация (no VSync, tearing) в OpenGL приложениях ===

Добавление следующей опции в раздел экрана предотвращает разрывы на GTX 660, 660 Ti, и, возможно, других GPU ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ источник]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== Тонкая настройка ==

=== Документация ===

Пакет {{Package|x11-drivers/nvidia-drivers}} также поставляется с исчерпывающей документацией. Она устанавливается в каталог {{Path|/usr/share/doc}} и может быть просмотрена с помощью следующей команды:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Параметры модуля ядра ===

Модуль ядра <code>nvidia</code> принимает набор параметров (options), которые позволяют настроить поведение драйвера. Большинство из них упомянуто в документации. Для того, чтобы добавить или изменить значения этих параметров, отредактируйте файл {{Path|/etc/modprobe.d/nvidia.conf}}. Не забудьте запустить {{c|update-modules}} после изменения этого файла и помните, что также потребуется перезагрузить модуль <code>nvidia</code> перед тем, как новые настройки вступят в силу.

Отредактируйте {{Path|/etc/modprobe.d/nvidia.conf}}:

{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Обновите информацию о модулях:

{{RootCmd|update-modules}}

Выгрузите модуль <code>nvidia</code>...

{{RootCmd|modprobe -r nvidia}}

...и загрузите его снова:

{{RootCmd|modprobe nvidia}}

=== Расширенная конфигурация X-сервера ===

GLX-интерфейс также имеет огромное количество параметров, которые можно настроить. Они управляют конфигурацией выхода TV, одновременным выводом на два монитора, определением частоты монитора, и так далее. Опять же, все доступные параметры подробно описаны в документации.

Чтобы использовать какие-либо из этих параметров, необходимо перечислить их в соответственном разделе Device в файле конфигурации X (обычно находящемся в {{Path|/etc/X11/xorg.conf}}). Например, чтобы отключить всплывающий логотип — splash logo:

{{FileBox|filename=/etc/X11/xorg.conf|title=Отключение splash logo|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== Смотрите также ==

* [[nouveau & nvidia-drivers switching]] - Гибридный графический режим с использованием открытых драйверов.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Настройка системы для использования проприетарных драйверов для гибридной графики (переключение видеорежима).

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
