<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

Questo articolo descrive come impostare ed utilizzare i demoni cron nel Linux Gentoo.

== Basi di cron ==

=== Cosa fa cron ===

Cron è un demone che esegue le attività in base all'input dal comando {{c|crontab}}. Svolge questo compito attivandosi ogni minuto e controllando se ci sono lavori di cron da eseguire in una qualsiasi crontab dell'utente. 

{{Note|Notare che {{c|crontab}} è sia il nome di una lista di lavori cron che il nome del comando per modificare tale lista.}}

=== Il cron de facto ===

Ci sono alcune implementazioni cron da scegliere dal Portage. Tutte loro offrono una interfaccia simile, ovvero l'uso di {{c|crontab}} o di un comando simile. C'è anche un'utilità correlata chiamata Anacron che è destinata a lavorare con cron nei sistemi che non sono in continuo funzionamento. 

E' anche importante notare che tutti i pacchetti disponibili di cron dipendono da {{Package|sys-process/cronbase}}. Questo pacchetto non è tecnicamente dipendenza di ogni pacchetto cron, ma fornisce funzioni simili a cron che molti utenti possono apprezzare. 

Prima di iniziare a lavorare con cron, una sua corretta implementazione deve essere selezionata. In questo articolo vengono fornite informazioni per ogni implementazione cron disponibile nel Linux Gentoo.

== Qual'è il cron giusto per lavorare? ==

{{Note|Emerge {{Package|virtual/cron}} per installare l'implementazione cron di default di Gentoo.}}

=== vixie-cron ===

Vixie-cron è un'implementazione con piene funzionalità basata sul cron SysV. Ogni utente ha il suo proprio crontab ed è consentito di specificare variabili d'ambiente all'interno di tale crontab. Diversamente dalle altre varianti di cron, questa offre supporto anche per SELinux e per PAM. Essa supporta meno architetture che Dcron, ma più rispetto a Fcron. L'ultima versione è la 4.1 rilasciata a gennaio 2004.

Caratteristiche di {{Package|sys-process/vixie-cron}}: 

* Supporto per SELinux;
* Supporto per PAM ({{Path|/etc/security/limits.conf}});
* Impostazione di variabili di ambiente su crontabs (PATH, SHELL, HOME, etc.);
* Ogni utente può avere un crontab personale; l'accesso è controllato da {{Path|cron.allow}} e da {{Path|cron.deny}}

=== cronie ===
Cronie ({{Package|sys-process/cronie}}) è un fork di vixie-cron creato da [https://fedorahosted.org/cronie/wiki Fedora]. A causa del fatto che è un fork, esso ha le stesse impostazioni tipiche fornite sull'originale vixie-cron. In aggiunta, cronie ha un'implementazione anacron che deve essere abilitata tramite la USE flag <code>anacron</code>.

=== dcron (Dillon's Cron) ===

L'intento di [http://www.jimpryor.net/linux/dcron.html Dcron] è quello di essere una semplice, elegante e sicura implementazione di cron. Essa non consente la specificazione delle variabili d'ambiente in crontabs e tutti i lavori di cron sono eseguiti da {{Path|/bin/sh}}. Come vixie-cron, ogni utente ha il suo proprio crontab. A partire dalla versione 4 sono presenti le caratteristiche simili di anacron.

Caratteristiche di {{Package|sys-process/dcron}}: 

* Veloce, semplice e senza caratteristiche inutili;
* L'accesso a {{c|crontab}} è limitato al gruppo cron, per esempio non si basa su altre facoltà esterne.

=== fcron ===

Fcron mira a rimpiazzare vixie-cron e anacron. E' creato per lavorare in sistemi che non sono continuamente in funzione ed è equipaggiato di caratteristiche extra. Tra tali caratteristiche c'è quella di abilitare lavori di avvio forzati, lavori di controllo di serializzazione, abilità di assegnare buone utilità ai lavori e abilità di programmare i lavori da eseguire all'avvio del sistema. Vedere [http://fcron.free.fr/ fcron's home page] per maggiori informazioni. 

Caratteristiche di {{Package|sys-process/fcron}}: 

* Disegnato per lavorare in sistemi che non sono continuamente in funzione, per esempio può eseguire un lavoro dopo il riavvio se tale lavoro era stato perso;
* Variabili di impostazione di ambiente e molte altre opzioni in crontabs;
* Sintassi di crontab migliorata con supporto per molte nuove caratteristiche;
* Ogni utente può avere un crontab personale, l'accesso è controllato da {{Path|cron.allow}} e da {{Path|cron.deny}}

=== bcron ===

Bcron è un sistema cron nuovo, progettato avendo in mente operazioni di sicurezza. Per fare ciò, il sistema è diviso in svariati programmi separati, ognuno responsabile di un compito separato, con le comunicazioni tra di loro strettamente controllate. L'interfaccia utente è una copia di quella di sistemi simili (come vixie-cron), ma internamente differisce molto. Per maggiori informazioni vedere l'homepage di bcron su [http://untroubled.org/bcron http://untroubled.org/bcron]. 

Caratteristiche di {{Package|sys-process/bcron}}: 

* Rimpiazzo di vixie-cron;
* Desig multiprocesso;
* Supporto nativo dell'ora legale.

=== anacron ===

Anacron non è un demone cron ma è qualcosa che usualmente ci lavora in congiunzione. Esso esegue comandi a intervalli specificati in giorni e non presuppone che il sistema sia continuamente in funzione; esso eseguirà i lavori che erano stati persi mentre il sistema era in spegnimento. Anacron usualmente, per eseguire questo tutti i giorni, si basa su un demone cron.

== Utilizzare cron ==

=== Installazione ===

Scegliere la giusta soluzione per il lavoro da svolgere ed emergerla:

{{Emerge|dcron}}

Controllare che il demone cron scelto sia stato aggiunto al processo di init del sistema; senza questo passo il demone cron non svolgerà il suo lavoro.
{{RootCmd|/etc/init.d/dcron start
|rc-update add dcron default}}

Opzionalmente, se Fcron o dcron '''non''' sono stati installati, installare Anacron come helper  al demone cron potrebbe essere una scelta saggia. 

{{Emerge|anacron}}

Di nuovo non dimenticare di aggiungere anacron al processo di init del sistema.
{{RootCmd|/etc/init.d/anacron start
|rc-update add anacron default}}

=== Sistema crontab ===

Il messaggio post-installazione di qualcuno di questi pacchetti di cron richiede all'utente di eseguire {{c|crontab /etc/crontab}}. Il file {{Path|/etc/crontab}} è il "system crontab". Una installazione cron può utilizzarlo in associazione con {{Package|sys-process/cronbase}} per eseguire lo script in {{Path|/etc/cron.{daily,hourly,weekly,monthly}}}. Notare che solo vixie-cron e cronie pianificano i lavori automaticamente in {{Path|/etc/crontab}}. Gli utenti di dcron e di fcron dovranno eseguire {{c|crontab /etc/crontab}} ogni volta che apportano variazioni al file {{Path|/etc/crontab}}.

Notare che i lavori pianificati nel sistema di crontab potrebbero non apparire nella lista dei lavori cron visualizzata tramite il comando {{c|crontab -l}}. 

Ovviamente gli utenti possono scegliere di non utilizzare affatto nessun sistema crontab. Se viene optato per utilizzare dcron o fcron, '''non''' va eseguito {{c|crontab /etc/crontab}}. Se invece viene optato per utilizzare vixie-cron, cronie o bcron bisogna commentare tutte le righe in {{Path|/etc/crontab}}. 

Una via facile e veloce per commentare tutte le linee nel file è quella di utilizzare il comando sed. Eseguire il seguente comando per commentare tutte le righe in {{Path|etc/crontab}}
{{RootCmd|sed -i -e "s/^/#/" /etc/crontab}}

=== Dare i permessi di accesso a cron agli utenti ===

Per ottenere l'accesso al demone cron per gli utenti diversi da root, leggere questa sezione, altrimenti procedere alla prossima: [[#Scheduling_cron-jobs|Scheduling cron-jobs]]. 

{{Note|Dare accesso al crontab ad un altro utente non permette l'esecuzione dei cron-jobs come root. Per abilitare un utente a modificare il crontab di root bisogna utilizzare {{c|sudo}} ({{Package|app-admin/sudo}}). Leggere la [[Sudo|Gentoo Sudo(ers) Guida]] per maggiori dettagli.}}

Qualsiasi pacchetto cron sia stato scelto, per permettere ad un utente di utilizzare crontab bisogna prima aggiungerlo al gruppo cron. Ad esempio, per aggiungere l'utente "wepy" al gruppo cron, eseguire: 

{{RootCmd|gpasswd -a wepy cron}}

{{Note|Quando si aggiunge un utente al gruppo cron, accertarsi che l'utente si scolleghi e si ricolleghi all'ambiente, affinchè l'aggiunta al gruppo abbia effetto.}}

Se si utilizza '''dcron''', il passaggio di cui sopra necessita l'accesso a crontab da parte dell'utente. Gli utenti Dcron possono procedere alla prossima sezione [[#Scheduling_cron-jobs|Scheduling cron-jobs]], tutti gli altri devono continuare con la lettura. 

Se si utilizza '''fcron''', modificare i files {{Path|/etc/fcron/fcron.deny}} e {{Path|/etc/fcron/fcron.allow}}. Il modo più sicuro per eseguire un sistema è, per prima cosa, negare tutti gli utenti in {{Path|/etc/fcron/fcron.deny}}, e permettere solo gli utenti specificati su {{Path|/etc/fcron/fcron.allow}}. 

{{Important|Se né {{Path|/etc/fcron/fcron.allow}} né {{Path|/etc/fcron/fcron.deny}} esistono, allora tutti gli utenti del gruppo cron saranno ammessi ad utilizzare crontab. fcron nasce con un {{Path|fcron.allow}} di default il quale '''include tutti gli utenti''' ad accedere al gruppo cron di fcrontab.}}

{{CodeBox|title=Permessi in fcron.deny|1=
all
}}

Se un utente ("wepy" anche per questo esempio) deve essere in grado di pianificare i propri lavori cron, allora bisogna aggiungerlo su {{Path|/etc/fcron/fcron.allow}} come segue: 

{{CodeBox|title=Permessi in fcron.allow|1=
wepy
}}

Se si utilizzano '''vixie-cron''' o '''cronie''', invece, editare semplicemente il file {{Path|/etc/cron.allow}}. 

{{Important|E' importante notare che se esiste solo il file {{Path|/etc/cron.allow}}, solo gli utenti elencati nel gruppo cron saranno abilitati. Altrimenti, se esiste il file {{Path|/etc/cron.deny}} vuoto, ''tutti'' gli utenti del gruppo cron saranno abilitati. Non lasciare il file {{Path|/etc/cron.deny}} vuoto se non esiste il file {{Path|/etc/cron.allow}}!}}

Per esempio, per abilitare l'utente "wepy", aggiungerlo su {{Path|/etc/cron.allow}} come segue: 

{{CodeBox|title=Permessi in /etc/cron.allow|1=
wepy
}}

=== Programmare i lavori cron ===

Il processo di modifica dei crontabs è differente per ogni pacchetto, ma tutti i pacchetti supportano le stesse impostazioni base dei comandi: aggiungere e sostituire crontabs, modificare crontabs, cancellare crontabs ed elencare i lavori cron in crontabs. La seguente lista mostra come eseguire i vari comandi per ogni pacchetto. 

{| class="wikitable" style="text-align: left;" 
|- 
! Versione
! Modificare crontab
! Rimuovere crontab
! Nuovo crontab
! Elencare i lavori cron
|- 
| dcron
| {{c|crontab -e}}
| {{c|crontab -d ''[user]'' }}
| {{c|crontab ''file'' }}
| {{c|crontab -l}}
|- 
| fcron
| {{c|fcrontab -e}}
| {{c|fcrontab -r ''[user]'' }}
| {{c|fcrontab ''file'' }}
| {{c|fcrontab -l}}
|- 
| vixie-cron, cronie & bcron
| {{c|crontab -e}}
| {{c|crontab -r ''-u [user]'' }}
| {{c|crontab ''file'' }}
| {{c|crontab -l}}
|-
|}

{{Note|Quando si utilizza il comando per rimuovere crontab, se non viene aggiunto nessun argomento, vengono cancellati i correnti utenti di crontab.}}

{{Note|Anche fcron ha un symlink da crontab a fcrontab.}}

Prima di utilizzare ognuno di questi comandi, è necessario comprendere crontab. Ogni riga in crontab specifica cinque campi nel seguente ordine: minuti (0-59), ore (0-23), giorni del mese (1-31), mesi (1-12) e giorni della settimana (0-7, lunedi è il giorno 1, domenica è il giorno 0 e il giorno 7). I giorni della settimana e i mesi possono essere specificati da un'abbreviazione di tre lettere, per esempio mon, tue, jan, feb, ecc.... Ogni campo può specificare anche un intervallo di valori (ad esempio 1-5 oppure mon-fri), una lista di valori separata da virgole (ad esempio 1,2,3 oppure mon,tue,wed) o un intervallo di valori a "step" (ad esempio 1-6/2 come 1,3,5 ovvero a intervallo di 2). 

Questo può sembrare complesso, ma con qualche esempio sarà facile da capire, non è complicato.

{{CodeBox|title=Esempi|1=
# Run /bin/false every minute year round
*     *     *     *     *        /bin/false
  
# Run /bin/false at 1:35 on the mon,tue,wed and the 4th of every month
35    1     4     *     mon-wed  /bin/false
  
# Run /bin/true at 22:25 on the 2nd of March
25    22    2     3     *        /bin/true
  
# Run /bin/false at 2:00 every Monday, Wednesday and Friday
0     2     *     *     1-5/2    /bin/false
}}

{{Note|Notare come impostare giorni specifici della settimana e giorni del mese prima di combinarli. Se * è utilizzato solamente per uno di essi, gli altri hanno la precedenza, mentre * per tutti significa ogni giorno.}}

Per verificare ciò che è stato appena impostato immettere qualche lavoro cron. Per prima cosa creare un file chiamato {{Path|crons.cron}} come segue: 

{{FileBox|filename=crons.cron|title=Creare un file crons.cron|1=
#Mins  Hours  Days   Months  Day of the week
10     3      1      1       *       /bin/echo "I don't really like cron"
30     16     *      1,2     *       /bin/echo "I like cron a little"
*      *      *      1-12/2  *       /bin/echo "I really like cron"
}}

Ora aggiungere questo crontab al sistema con il "nuovo comando" della tabella di cui sopra. 

{{RootCmd|crontab crons.cron}}

{{Note|L'output del comando echo non si vedrà se non si utilizza il reindirizzamento.}}

Per verificare i lavori cron programmati, utilizzare il corretto ''list command'' della tabella di cui sopra. 

{{RootCmd|crontab -l}}

Dovrebbe essere visualizzato un elenco simile a {{Path|crons.cron}}; se questo non avviene, forse è stato utilizzato il comando sbagliato per inserire il crontab. 

Questo crontab dovrebbe ripetere "I really like cron" ogni minuto di ogni ora di ogni giorno ogni due mesi. Ovviamente un utente fa questo solo se veramente gli piace cron. Il crontab ripeterà anche "I like cron a little" alle 16:30 di ogni giorno di gennaio e di febbraio. Ripeterà anche "I don't really like cron" alle 3:10 del primo gennaio. 

Se si utilizza anacron continuare la lettura di questa sezione. Altrimenti procedere alla prossima sezione su [[#Editing_crontabs|Modificare crontabs]]. 

Gli utenti anacron dovranno modificare {{Path|/etc/anacrontab}}. Questo file ha quattro campi: il numero di giorni tra ogni esecuzione, il ritardo in minuti dopo il quale esso viene eseguito, il nome del lavoro e il comando per fare eseguire. 

For example, to have it run {{c|echo "I like anacron"}} every 5 days, 10 minutes after anacron is started, enter the following: 

{{FileBox|filename=/etc/anacrontab|1=
5 10 wasting-time /bin/echo "I like anacron"
}}

Anacron exits after all of the jobs in anacrontab have finished. To check to see if these jobs should be performed every day, a cron daemon will be used. The instructions at the end of the next section explain how this should be handled.

=== Modificare crontabs ===

Being realistic, no user would want their system telling them how much they like cron every minute. As a step forward, remove the previous example crontab using the corresponding ''remove command'' from the table above. Use the corresponding list command to view the cron-jobs afterward to make sure it worked. 

{{RootCmd|crontab -d
|crontab -l}}

No cron-jobs should be displayed in the output from {{c|crontab -l}}. If cron jobs are listed, then the remove command failed to remove the crontab; verify the correct ''remove command'' for the system's cron package. 

Now that we have a clean state, let's put something useful into the '''root''' crontab. Most people will want to run {{c|updatedb}} on a weekly basis to make sure that mlocate works properly. To add that to the system's crontab, first edit {{Path|crons.cron}} again so that it looks like the following: 

{{CodeBox|title=A real crontab|1=
22 2 * * 1    /usr/bin/updatedb
}}

That would make cron run updatedb at 2:22 A.M. on Monday morning every week. Now input the crontab with the proper ''new command'' from the table above, and check the list again. 

{{RootCmd|crontab crons.cron
|crontab -l}}

Now let's say {{c|emerge --sync}} should be ran on a daily schedule in order to keep the Portage tree up to date. This could be done by first editing {{Path|crons.cron}} and then using {{c|crontab crons.cron}} as was done in the example above, ''or'' by using the proper ''edit command'' from the table above. This provides a way to edit the user's crontab in situ, without depending on external files like {{Path|crons.cron}}. 

{{RootCmd|crontab -e}}

The above command should open the user's crontab with an editor. For example, if {{c|emerge --sync}} is to be run every day at 6:30 A.M., make the crontab look something like this: 

{{CodeBox|title=A real crontab|1=
22 2 * * 1    /usr/bin/updatedb
30 6 * * *    /usr/bin/emerge --sync
## (if using anacron, add this line)
30 7 * * *    /usr/sbin/anacron -s
}}

Again, check the cron-jobs list as done in the previous examples to make sure the jobs are scheduled. If they are all there, then the system is ready to rock and roll.

== Using cronbase ==

As mentioned earlier, all of the available cron packages depend on {{Package|sys-process/cronbase}}. The cronbase package creates {{Path|/etc/cron.{hourly,daily,weekly,monthly}}}, and a script called {{Path|run-crons}}. Notice the default {{Path|/etc/crontab}} file contains something like this: 

{{CodeBox|title=Default system crontab|1=
*/15 * * * *     test -x /usr/sbin/run-crons && /usr/sbin/run-crons
0  *  * * *      rm -f /var/spool/cron/lastrun/cron.hourly
0  3  * * *      rm -f /var/spool/cron/lastrun/cron.daily
15 4  * * 6      rm -f /var/spool/cron/lastrun/cron.weekly
30 5  1 * *      rm -f /var/spool/cron/lastrun/cron.monthly
}}

To avoid going into much detail, assume these commands will effectively run hourly, daily, weekly and monthly scripts. This method of scheduling cron-jobs has some important advantages: 

* They will run even if the computer was off when they were scheduled to run;
* It is easy for package maintainers to place scripts in those well defined places;
* The administrators know exactly where the cron-jobs and crontab are stored, making it easy to backup and restore these parts of their systems.

{{Note|Again, it is useful to point out that vixie-cron, cronie and bcron automatically read {{Path|/etc/crontab}}, while dcron and fcron do not. Please read the [[#System_crontab|System crontab]] section to learn more about this.}}

== Using anacron ==

As mentioned earlier, anacron is used on systems not meant to be run continuously (like most of the desktop installations). Its default configuration file, {{Path|/etc/anacrontab}}, is usually similar to the following:

{{FileBox|filename=/etc/anacrontab|1=
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# format: period delay job-identifier command
1       5       cron.daily      run-parts /etc/cron.daily
7       10      cron.weekly     run-parts /etc/cron.weekly
30      15      cron.monthly    run-parts /etc/cron.monthly
}}

The main difference between this and other common crontabs is that with anacron there is no fixed date/hour for the job scheduling, but only the period between every run. When anacron is started, it will check the contents of a set of files in {{Path|/var/spool/anacron}} and calculate if the corresponding entry in the configuration file has expired since the last run. If it has, then the command is invoked again.

As a final note, it is important to comment out any overlapping entry in any other cron installed in the system, such as in the following vixie-cron crontab example:

{{FileBox|filename=/etc/crontab|1=
# for vixie-cron
# $Header: /var/cvsroot/gentoo-x86/sys-process/vixie-cron/files/crontab-3.0.1-r4,v 1.3 2011/09/20 15:13:51 idl0r Exp $
  
# Global variables
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
  
# check scripts in cron.hourly, cron.daily, cron.weekly and cron.monthly
59  *  * * *    root    rm -f /var/spool/cron/lastrun/cron.hourly
#9  3  * * *    root    rm -f /var/spool/cron/lastrun/cron.daily
#19 4  * * 6    root    rm -f /var/spool/cron/lastrun/cron.weekly
#29 5  1 * *    root    rm -f /var/spool/cron/lastrun/cron.monthly
#*/10  *  * * * root    test -x /usr/sbin/run-crons && /usr/sbin/run-crons @hourly root nice -n 19 run-parts --report /etc/cron.hourly
}}

Without doing this, the daily, weekly and monthly parts will be executed - at different times - by both the cron daemon and anacron, leading to possible double job executions.


== Troubleshooting ==

When having problems getting cron to work properly, this quick checklist might be helpful.

Remember, each cron package is different and the range of features varies greatly. Be sure to consult the man pages for crontab, fcrontab, or anacrontab, depending on which cron daemon has been activated! 

==== Is cron running? ====

To verify that cron is running, see if it shows up in the process list:

{{RootCmd|<nowiki>ps ax | grep cron</nowiki>}}

==== Is cron working? ====

Try the following:

{{CodeBox|title=crontab to see if cron is running|1=
* * * * * /bin/echo "foobar" >> /file_you_own
}}

Then check if {{Path|/file_you_own}} is modified periodically.

==== Is the command working? ====

Same as before, but perhaps redirect the standard error output as well:

{{CodeBox|title=crontab to verify application runs|1=
* * * * * /bin/echo "foobar" >> /file_you_own 2>&1
}}

==== Can cron run the job? ====

Check the cron log, usually {{Path|/var/log/cron.log}} or {{Path|/var/log/messages}} for errors.

==== Are there any {{Path|dead.letter}}s? ====

cron usually sends mail when there is a problem; check for mail and look for the creation of a {{Path|~/dead.letter}} file.

== Cron Jobs Alternatives ==

Some hosting companies do not allow access to cron, but many cron jobs alternatives can be found which are free or commercially available:

* [https://www.easycron.com/ EasyCron]

[[Category:Core system]]
[[Category:Daemons]] {{Migrated|originalauthors=Eric Brown, Xavier Neys, nightmorph}}
