== RBAC in SELinux ==

The implementation of ''Role Based Access Control (RBAC)'' in SELinux is as follows.

[[File:SELinux_users.png|link=]]

# A user is mapped to a SELinux user, which defines the clearance of that user
# The SELinux user is allowed one or more roles, effectively restricting which roles a particular user can participate in (segregation of duties)
# Roles are allowed certain domains, run-time privileges for one or more applications

It is through the domain permissions that the privileges of a user are controlled. Consider the privileges to administer the web server. A role that isn't allowed a domain with these privileges will not have the ability to run the necessary applications, effectively restricting the ability of the user to administer the web server.

=== Assigning roles to users ===

Because a role depends on the SELinux user, and a Linux user is mapped to a SELinux user, assigning roles begins with mapping a Linux user to a SELinux user. As SELinux users are immutable, it is important to differentiate based on role requirements: if two users have different role requirements (user1 needs roleA and roleB, and user2 needs roleB and roleC) then they should ''not'' be mapped to the same SELinux user, as this would meant that those users can access a role they are not allowed to.

=== Assigning permissions to roles and domains ===

In order to assign a domain (or multiple domains) to a role, the SELinux policy needs to be updated to reflect this. For instance, to allow a role <code>oper_r</code> to manage the Zabbix monitoring infrastructure, the following policy would be defined:

{{Code|Enabling zabbix administration to the oper_r role|<pre>
zabbix_admin(oper_t, oper_r)
</pre>}}

This simple call allows the <code>oper_t</code> user domain (the default domain that users in the <code>oper_r</code> have as their logon or runtime domain) to administer the Zabbix environment, as well as stop/start/restart the service and edit the Zabbix infrastructure resources.

=== Permissions or domain transitions ===

Depending on the purpose and the policy design, either the permissions of a user domain are enhanced (such as with the <code>zabbix_admin</code> example), or the role is allowed to transition to another domain. The latter is in use more when applications are granted (in which case a domain transition is allowed towards the application domain).
