<languages />
<translate>
{{InfoBox stack
|{{InfoBox homepage|http://www.php.net|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox ohloh}}
}}

'''PHP''' is a general-purpose server-side scripting language to produce dynamic web pages.

== Installation ==

=== USE flags ===

Portage knows the global <code>php</code> USE flag for enabling support for PHP in other packages. Enabling this USE flag will pull in the {{Package|dev-lang/php}} package automatically upon updating the deep dependencies in the @world set. First set the global use flag in {{Path|/etc/portage/make.conf}}:

{{FileBox|filename=/etc/portage/make.conf|title=Adding php as global USE flag|lang=bash|1=
USE="php"
}}

The most important USE flags of the PHP package, the SAPI (Server API) USE flags, are {{c|apache2}}, {{c|cgi}}, and {{c|fpm}}. Alongside these flags, there is an elaborate list of flags to enable various features of the PHP interpreter:

{{USEflag|package=dev-lang/php}}

By default the ebuild installs the development {{Path|php.ini}} version. To install the production version add the following to the {{Path|make.conf}}:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
PHP_INI_VERSION="production"
}}

Both versions of {{Path|php.ini}} can be found in {{Path|/usr/share/doc/php-*}}.

After changing the preferred version of {{Path|php.ini}}, PHP should be reinstalled using the command in the [[#Emerge|Emerge section]] below.

=== Extensions ===

To install extensions, first decide which versions of PHP to compile the extensions for. This is done by setting the <var>PHP_TARGETS</var> variable:

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
PHP_TARGETS="php5-6"
}}

More than one version can be defined. Note that the php slot is named "5.6" and the corresponding <var>PHP_TARGETS</var> value is <code>php5-6</code>. This is due to current restrictions on USE names.

=== Emerge ===

After making the above USE flag configurations it is necessary to update the system so the changes take effect:

{{Emerge|params+=--update --changed-use --deep|@world}}

=== Web servers ===

To use PHP in a server-side fashion, a web server needs to be installed and configured to use PHP. A number of popular web servers are briefly touched upon next.

==== Nginx ====

To install [[Nginx]] simply emerging it: 

{{Emerge|www-servers/nginx}}

{{Warning|If custom <var>NGINX_MODULES_HTTP</var> values have been set, make sure that the <code>fastcgi</code> module has been enabled.}}

Once Nginx has been installed, modify the server section of {{Path|/etc/nginx/nginx.conf}} to look something like this: 

{{FileBox|filename=/etc/nginx/nginx.conf|1=
<snip>
        server {
                listen 127.0.0.1;
                server_name localhost;
 
                access_log /var/log/nginx/localhost.access_log main;
                error_log /var/log/nginx/localhost.error_log info;
 
                root /var/www/localhost/htdocs;
 
                location ~ .php$ {
                        fastcgi_pass 127.0.0.1:9000;
                        include fastcgi.conf;
                }
        }
<snip>
}}

Now start the related services to have a working site 

{{RootCmd
|service nginx start
|service php-fpm start
}}

==== lighttpd ====

{{Warning|Do not enable the <code>php</code> USE flag for {{Package|www-servers/lighttpd}}. It could actually break the build.}}

Make sure that lighttpd is built with support for <code>fastcgi</code> and that the <code>php</code> USE flag is disabled:

{{FileBox|filename=/etc/portage/package.use|1=
www-servers/lighttpd fastcgi -php
}}

Lighttpd ships with a default FastCGI config file, but unfortunately, it is written to work with the old PHP FCGI SAPI only, instead of a general FCGI setup. Since the <code>php</code> USE flag has been disabled, it will not be included, and rightly so. However it does provide a good foundation for a configuration file that can be used with FPM. 

Edit {{Path|/etc/lighttpd/mod_fastcgi.conf}} to look something like this: 

{{FileBox|filename=/etc/lighttpd/mod_fastcgi.conf|lang=lua|1=
server.modules += ("mod_fastcgi")
fastcgi.server = ( ".php" =>
  ( "localhost" =>
    (
      "host" => "127.0.0.1",
      "port" => "9000"
    )
  )
)
}}

Note the <code>host</code> and <code>port</code> parts. 

Since Gentoo ships with a perfectly working copy of a {{Path|php-fpm.ini}} file, located in {{Path|/etc/php/fpm-php5/php-fpm.ini}}, and init script, starting the services is all that is needed: 

{{RootCmd
|/etc/init.d/php-fpm start
|/etc/init.d/lighttpd start
}}

==== Apache (mod_php) ====

To configure Apache to load the PHP5 module (mod_php), add <code>-D PHP</code> to <var>APACHE2_OPTS</var> variable in {{Path|/etc/conf.d/apache2}}.

{{Important|1=With >=app-eselect/eselect-php-0.8.1, the <var>APACHE2_OPTS</var> variable changed to <code>-D PHP</code> instead of <code>-D PHP5</code>. This allows for future major versions to flow smoothly.}}

{{FileBox|filename=/etc/conf.d/apache2|title=Configure Apache to load mod_php|lang=bash|1=
## (settings for PHP5 and above)
APACHE2_OPTS="-D PHP"
}}

{{Note|PHP must be compiled with <code>apache2</code> use flag to serve PHP pages.}}

{{Note|Apache can only use one PHP version at a time.}}

If for some reason the system is missing the PHP module integration file {{Path|/etc/apache2/modules.d/70_mod_php.conf}}, currently provided by {{Package|app-eselect/eselect-php}} when installed with <code>apache2</code> USE flag set, manually insert it. Its current content is displayed below.

{{FileBox|filename=/etc/apache2/modules.d/70_mod_php.conf|lang=apache|1=
<IfDefine PHP>
	# The mod_php.so symlink is controlled by
	# eselect-php. However, the module name changed from
	# php5_module to php7_module so we can't blindly load whatever
	# is there. Instead we let eselect-php manage a small
	# configuration file that loads the appropriate module.
	#
	# This is relative to ServerRoot (see httpd.conf).
	Include ../../../var/lib/eselect-php/mod_php.conf
 
	# Tell apache that mod_php should handle PHP files.
	#
	# NOTE: Avoiding AddHandler/AddType for security (bug
	# #538822). Please read the related news item!
	<FilesMatch "\.(php{{!}}php[57]{{!}}phtml)$">
		SetHandler application/x-httpd-php
	</FilesMatch>
 
	# PHP source files which are meant to be displayed as
	# syntax-highlighted source code.
	<FilesMatch "\.phps$">
		SetHandler application/x-httpd-php-source
	</FilesMatch>
 
	DirectoryIndex index.php index.phtml
</IfDefine>}}

== Running multiple versions of PHP ==

One of the great advantages of using Gentoo for PHP development is the version slotting. It is very simple to swap between multiple versions of PHP as well as run multiple versions simultaneously. This is all done with the {{c|eselect}} command provided by the {{Package|app-eselect/eselect-php}} package which should get pulled in automatically by installing PHP. For example, eselecting different versions of PHP can allow a systems to run PHP 7.0 for the cli SAPI but PHP 5.6 for the system's web server. It also allows to quickly test an application on different versions of PHP.

To list the available versions for the '''cli''' SAPI use:

{{RootCmd|eselect php list cli|output=<pre>
 [1]   php5.5 
 [2]   php5.6 *   
 [3]   php7.0
</pre>}}

The version marked with the * is the current active version, and to check the other SAPIs simply replace <code>cli</code> with <code>fpm</code>,<code>cgi</code>, <code>apache2</code>.

To swap versions use:

{{RootCmd|eselect php set cli 3}}

Where <code>3</code> in the output above corresponds to the number in the output of <code>show</code>.

PHP 7.0 is now running on the command-line:

{{RootCmd|php -v|output=<pre>
PHP 7.0.10-pl0-gentoo (cli) (built: Aug 23 2016 12:38:44) ( NTS )
</pre>}}

== Configuration ==

The PHP configuration is in {{Path|/etc/php}}, which contains one subdirectory for each SAPI for each PHP version, e.g. configuration files for the PHP-5.6 apache2 SAPI are installed in {{Path|/etc/php/apache2-php5.6}}.

To setup Apache to use PHP, see the [[Apache#Enabling PHP support|Apache]] article.

== Updating to PHP 5.6 ==

Set the <var>PHP_TARGETS</var> variable.

{{FileBox|filename=/etc/portage/make.conf|lang=bash|1=
PHP_TARGETS="php5-6"
}}

=== Installation ===

Install PHP 5.6:

{{Emerge|dev-lang/php:5.6}}

=== Replacing APC ===

To build with the <code>opcache</code> USE flag (the default) while allowing the use of APC userland functions such as <code>apc_fetch()</code>, install APCu, which emulates APC but only has user caching functions. This may be necessary for older projects that rely on APC for caching.

If necessary, unmask it:

{{RootCmd|echo 'dev-php/pecl-apcu ~amd64' >> /etc/portage/package.accept_keywords}}

Install APCu:

{{Emerge|dev-php/pecl-apcu}}

For PHP 7 compatibility:

{{Emerge|dev-php/pecl-apcu_bc}}

=== Switch to PHP 5.6 ===

Switch to it using {{c|eselect}} for all SAPIs:

{{RootCmd
|eselect php set cli php5.6
|eselect php set fpm php5.6
}}

To have other SAPIs, be sure to run {{c|eselect}} for those as well.

=== Re-install compatible extensions ===

Since changing <var>PHP_TARGETS</var> is technically a USE flag change, it suffices to simply {{c|emerge @world}} with flags checking for new USE flags and all extensions should re-build.

{{Emerge|params+=--changed-use --deep|@world}}

=== Uninstall incompatible extensions ===

Remove all old extensions that do not build for PHP 5.6. I recommend using {{c|eix}} for this task. Note that when piping to emerge, interactive mode cannot be used so <code>--ask</code> on the {{c|emerge}} command is not applicable here.

{{Emerge|app-portage/eix}}

{{RootCmd|eix -I -C dev-php --use php_targets_php5-5 --not --use php_targets_php5-6 --only-names {{!}} xargs emerge -c}}

Be sure to migrate USE flags if versions have been specified in the {{Path|package.use}} file(s).

Now that extensions have been removed, it may be useful to run a dependency clean up at this point for older ones that are no longer compatible.

{{RootCmd|emerge --ask --depclean|}}

=== Migrate the configuration files ===

The different slots have different configuration paths. Please take care to migrate the configuration files before making use of a new slot.

=== Uninstall old PHP versions ===

For example, to remove PHP 5.5:
{{Emerge|params+=-vc|dev-lang/php:5.5}}

=== Restart PHP-FPM ===

Restart PHP-FPM if applicable:

{{RootCmd|/etc/init.d/php-fpm restart}}

[[Category:Programming language]]
</translate>
