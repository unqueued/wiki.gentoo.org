<languages />


{{Metadata|abstract=Esta guia tiene como objetivo explicar el funcionamiento de Java con Gentoo Linux.}}

Esta guia tiene como objetivo explicar el funcionamiento de Java con Gentoo Linux.

== ¿Que es Java? ==

=== Visión general ===

Java es un lenguaje de programación desarrollado por ingenieros de Sun Microsystems. El lenguaje es totalmente orientado a objetos y diseñado para ser ejecutado en multiples plataformas sin la necesidad de recompilar el codigo para cada una de ellas. Aunque Java puede ser compilado como un lenguaje nativo, mucha de la popularidad de Java se atribuye a su portabilidad, junto con otras caracteristicas como recolección de basura. Para hacer posible esta independencia de plataforma, el compilador de Java compila el codigo Java hacia una representación intermedia denominada "Java bytecode" que es ejecutado en un JRE (Java Runtime Environment) y no directamente sobre el sistema operativo. 

Para ejecutar Java bytecode, es necesario tener un entorno JRE (Java Runtime Environment) instalado. Un JRE proporciona bibliotecas centrales, una maquina virtual de Java dependiente de plataforma, y extensiones para navegadores web entre otras cosas. Por otro lado un JDK (Java Development Kit) agrega herramientas de programación, tales como compilador de bytecode y un depurador de codigo. 

== Instalando una Máquina Virtual ==

=== Opciones ===

Gentoo proporciona una variedad de entornos de ejecución (JREs) y kits de desarrollo (JDKs). Entre las opciones actuales, existen: 

{| class="wikitable" style="text-align: left;" 
|- 
! Vendor
! JDK
! JRE
|- 
| Open Java SE de IcedTea (anteriormente icedtea6-bin)
| dev-java/icedtea-bin
| 
|- 
| Java 7 SE de Oracle
| dev-java/oracle-jdk-bin
| dev-java/oracle-jre-bin
|- 
| Java 6 SE de Sun
| dev-java/sun-jdk
| dev-java/sun-jre-bin
|- 
| Java SE de IBM
| dev-java/ibm-jdk-bin
| dev-java/ibm-jre-bin
|-
|}

=== Instalando un JRE/JDK ===

Para instalar el JDK por defecto en el perfil instalado, basta con ejecutar <code>emerge virtual/jdk</code>. O para instalar el JRE por defecto se puede ejecutar <code>emerge virtual/jre</code>. 

Algunos JDKs y JREs, incluyendo los paquetes de Sun, requieren que el usuario acepte un Acuerdo de Licencia de Usuario o Eula. En el caso que esta licencia (por ejemplo dlj-1.1) no este incluida en ACCEPT_LICENSE dentro de {{Path|/etc/portage/make.conf}} no sera posible instalar el JDK/JRE. Para mayor información de como agregar licencias aceptadas en {{Path|make.conf}} pude consultarse el [http://www.gentoo.org//doc/es/handbook/handbook-x86.xml?part=2&chap=1#doc_chap4 Manual de Portage]. 

Para evitar cualquier restriccion de licencias, considerese instalar <code>icedtea-bin</code>, el cual es una implementación abierta de Java del proyecto OpenJDK. 

{{Note|JDK incluye tambien un JRE, por lo tanto si un JDK es instalado no es necesario instalar tambien un JRE.}}

=== Instalando maquinas virtuales con descarga restringida ===

Algunos JDKs y JREs requieren que el usuario siga algunos links antes de ser instalados. En este caso el emerge debe ser ejecutado de forma normal. Asi, los ebuils proveeran las instrucciones necesarias acerca de donde ir y realizar las descargas. 

Los archivos indicados deben ser colocados en {{Path|/usr/portage/distfiles}}. Luego, el comando emerge puede ser ejecutado nuevamente y es en este punto que la instalación de JRE/JDK iniciara. 

== Configurando la máquina virtual ==

=== Visión general ===

Gentoo posee la habilidad de instalar multiples JDKs y JREs sin causar conflictos. 

Utilizando la herramienta <code>java-config</code> es posible establecer una configuración para todo el sistema (requiere acceso como root). Los usuarios normales tambien pueden utilizar <code>java-config</code> para establecer su propia preferencia. 

{{Note|Es posible tambien utilizar ''eselect'' para cambiar la máquina virtual del sistema y del usuario. Mayor información con <code>eselect java-vm help</code>.}}

=== Estableciendo una maquina virtual por defecto ===

Al ejecutar el comando <code>java-config --list-available-vms</code> es posible obtener un listado de todas las JREs y JDKs instaladas en el sistema. La salida es similar a la siguiente: 

{{RootCmd|java-config --list-available-vms|output=<pre>
The following VMs are available for generation-2:
1)      IcedTea-bin 1.10.4 [icedtea-bin]
2)      Sun JDK 1.5.0.20 [sun-jdk-1.5] (Build Only)
*)      Sun JDK 1.6.0.16 [sun-jdk-1.6]
</pre>
}}


{{Note| Las maquinas virtuales marcadas como Build Only pueden contener vulnerabilidades y/o estar en el final de su ciclo de vida. Gentoo recomienda no utilizar ninguna de estas, tanto para usuario como para sistema. Puede verificarse [http://www.gentoo.org/java.xml#build-only Build Only VM] para más información.}}

El "*" indica cual es la maquina virtual activa (system-vm o user-vm cuando ha sido configurada). El nombre dentro de las llaves  (''[]'') es el identificador de la maquina virtual en particular. Puede ser utilizado el ID o el numero en <code>java-config --set-system-vm</code>. Por ejemplo, para establecer la maquina virtual del sistema. 

Estableciendo la maquina virtual manualmente (modo preferido):

{{RootCmd|java-config --set-system-vm sun-jdk-1.6|output=<pre> Now using sun-jdk-1.6 as your generation-2 system JVM </pre>}}

La misma puede ser seleccionada también por numero:

{{RootCmd|java-config --set-system-vm 3|output=<pre> Now using sun-jdk-1.6 as your generation-2 system JVM </pre> }}

Así también, como usuario regular puede utilizarse <code>java-config --set-user-vm</code>. 

{{Note|Actualmente ya no es necesario ejecutar <code>source</code> sobre el perfil para que la actualización de maquina virtual sea realizada.}}

=== Maquina virtual marcada como Build Only ===

Algunas maquinas virtuales estar marcadas como build-only ya sea por estar en el fin de su ciclo de vida de soporte y/o por contener vulnerabilidades de seguridad. Estas máquinas virtuales no serán utilizadas automáticamente por Gentoo para aquellas aplicaciones en ejecución utilizando los lanzadores de Gentoo, sin embargo seguirán disponibles para los entornos de compilación de Gentoo ya que algunos paquetes pueden necesitarlas para ser compiladas. Configurar estas maquinas virtuales tanto para usuario como para el sistema es no recomendada ya que en este caso serán utilizadas al ejecutar los ejecutables {{Path|/usr/bin/{java,javac,..}}} y serán utilizadas por cualquier otro paquete que no utilice los lanzadores de Gentoo. 

=== Maquina virtual preferida para compilación ===

Al instalar paquetes Java, la máquina virtual utilizada puede ser diferente de la configurada actualmente como máquina virtual del sistema. 

This merge time VM switching is needed when, for example, your system-vm is set to a 1.6 VM and the package you are merging requires a 1.5 VM. While merging it will select and use a 1.5 VM, leaving your system-vm choice intact. 

To define which VM is selected when a switch is needed, we have created a list of ''default/supported VMs'' per arch. You can find them in {{Path|/usr/share/java-config-2/config/jdk-defaults.conf}}. 

You can override these defaults (and even your selected system VM) in {{Path|/etc/java-config-2/build/jdk.conf}} and have complete control over which VM will get used for merging.

For example, to always use a <code>sun-jdk</code>:

{{File|/etc/java-config-2/build/jdk.conf|Requiring sun-jdk|<pre>
*=sun-jdk
</pre>
}}

Or, always use <code>sun-jdk-1.5</code> wherever possible, except for when a 1.4 or 1.3 VM is explicitly required:

{{File|/etc/java-config-2/build/jdk.conf|Requiring sun-jdk-1.5 for 1.5 VMs|<pre>
*=sun-jdk-1.5
</pre>
}}

Or to use different providers for different versions, such as requiring <code>sun-jdk-1.4</code> if a 1.3 (yes, 1.3) VM is asked, and fall back to <code>ibm-jdk-bin</code> otherwise:

{{File|/etc/java-config-2/build/jdk.conf|Using multiple expressions|<pre>
1.3=sun-jdk-1.4 ibm-jdk-bin
1.5=sun-jdk
</pre>
}}


{{Warning|You do not ''have'' to edit this file. If you change these options to use a unsupported VM, things could possibly break. Because of the wide variety of available VMs, we do not have the resources to test and verify every package works on all of them. Bugs reported with a unsupported VM won't be prioritized as much as bugs present within supported VMs.}}

== Compilers ==

The standard Java compiler used for building is <code>javac</code>, which comes with each JDK. In addition to configuring the VM used at build time, it is also possible configure which compiler is used. Essentially, you define a list your preference for which compiler to use in {{Path|/etc/java-config-2/build/compilers.conf}}. 

{{File|/etc/java-config-2/build/compilers.conf|Setting compiler preferences|<pre>
COMPILERS="ecj-X.Y jikes javac"
</pre>
}}

Some compilers don't support all possible -target and -source arguments. Therefore, each compiler in the list is checked to see if it can support the desired -source/-target. javac will work in all cases, so if no other suitable compiler is found, it will be used instead. 

More details about each compiler are provided below: 

{| class="wikitable" style="text-align: left;" 
|- 
! Name
! Handle
! Package
! Description
|- 
| javac
| javac
| N/A
| This is the default compiler that will be used, and comes with each JDK.
|- 
| jikes
| jikes
| dev-java/jikes
| Jikes was originally developed by IBM. Anecdotally, it is generally quicker than javac. Note however, that it is more pedantic, and will fail under a few circumstances where javac has no issue. It also does not support Java 1.5 syntax yet.
|- 
| Eclipse Compiler for Java
| ecj
| dev-java/eclipse-ecj
| ECJ is the compiler used by the Eclipse software development kit. It is very full featured, and is pretty fast. It does support Java 1.5 syntax.
|-
|}

== Setting a default CLASSPATH ==

{{Warning|The options explained in this section should be considered deprecated and will most likely be removed in the future. We strongly recommend against using these, because your Java projects or application should ideally manage their own classpaths. If you choose to specify a default CLASSPATH, some applications may behave unexpectedly, because classes they weren't expecting would be on the classpath.}}

<code>java-config</code> can also be used to set a system-wide default CLASSPATH, as well a user-specific default CLASSPATH. 

First, you will want to list available Java libraries installed on your system that might want to be put in your CLASSPATH. Here is an example of output: 

{{RootCmd|java-config --list-available-packages|output=<pre>
[xerces-2] The next generation of high performance, fully compliant XML parsers in the Apache Xerces family (/usr/share/xerces-2/package.env)
[junit] Simple framework to write repeatable tests (/usr/share/junit/package.env)
[bsh] BeanShell: A small embeddable Java source interpreter (/usr/share/bsh/package.env)
[bcel] The Byte Code Engineering Library: analyze, create, manipulate Java class files (/usr/share/bcel/package.env)
[log4j] A low-overhead robust logging package for Java (/usr/share/log4j/package.env)
...
</pre>
}}

Again, the names in brackets (''[]'') are the IDs that you have to pass to <code>java-config --set-system-classpath</code>. Here is an example: 


{{RootCmd|java-config --set-system-classpath log4j,xerces-2}}

{{Note|The current directory ({{Path|.}}) will not be part of the system classpath, as that should be added in your system's login profile.}}

You will have to update your environment by logging out, then in again or sourcing {{Path|/etc/profile}}. 

For users, <code>java-config --set-user-classpath</code> will create {{Path|~/.gentoo/java-env-classpath}}, which you should then source from your shell's profile. 

{{Code|Sourcing user specific classpath|<pre>
if [[ -f "${HOME}/.gentoo/java-env-classpath" ]]; then
       source ${HOME}/.gentoo/java-env-classpath
fi
</pre>
}}

If you really want a system wide or user default classpath you can add something like the following to your shell's profile. But we would advise against it. 

{{RootCmd|export CLASSPATH{{=}}"${CLASSPATH}:$(java-config --classpath log4j,xerces-2)"}}

== Java Browser Plugins ==

=== Installing a plugin ===

You can install a Java plugin for your web browser by emerging a Java VM with the <code>nsplugin</code> USE flag set.

{{Note|<code>nsplugin</code> is not available for all architectures. Check for available plugins on your arch before trying to install a VM by running<code>emerge -pv <java-vm></code>.}}

Portage will allow you to install multiple versions of Java plugins, though only one will be used by your browser. You can check the list of available plugins by running: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6
   [2]   icedtea-bin
</pre>
}}

In this example, <code>sun-jre-bin</code> is selected for the browser plugin. 

{{RootCmd|eselect java-nsplugin set sun-jre-bin-1.6}}

Verify that the correct plugin was selected: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
   [1]   sun-jre-bin-1.6  current
   [2]   icedtea-bin
</pre>
}}

Java.com also provides a link to [http://java.com/en/download/installed.jsp verify your installed plugin]. Additionally, if you are using a Mozilla-based browser, you can verify your Java plugin by typing <code>about:plugins</code> into the address bar. 

=== Plugins on multilib systems ===

If you are running a mixed 64-bit and 32-bit multilib system (for example, on AMD64), you can use 64-bit and 32-bit Java plugins. Unless you have a pressing need to run 32-bit Java applications, we recommend using native 64-bit plugins on 64-bit web browsers. 

There are several native 64-bit browser plugins available. The default JDK/JRE pair, <code>sun-jdk</code> and <code>sun-jre-bin</code>, both include browser plugins. Just emerge one of them with the <code>nsplugin</code> USE flag enabled. 

{{RootCmd|echo "dev-java/sun-jre-bin nsplugin" >> /etc/portage/package.use
|emerge sun-jre-bin}}

To use a 32-bit plugin on a 32-bit browser, you will need to emerge <code>emul-linux-x86-java</code> with the <code>nsplugin</code> USE flag enabled. 

{{RootCmd|echo "app-emulation/emul-linux-x86-java nsplugin" >> /etc/portage/package.use
|emerge emul-linux-x86-java}}

Next, check which plugins are available: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6
</pre>
}}

Now select the right plugin for your browsers: 

{{RootCmd|eselect java-nsplugin set 32bit emul-linux-x86-java-1.6
|eselect java-nsplugin set 64bit sun-jre-bin-1.6}}

Verify the correct plugin was selected: 

{{RootCmd|eselect java-nsplugin list|output=<pre>
Available 32-bit Java browser plugins
  [1]   emul-linux-x86-java-1.5
  [2]   emul-linux-x86-java-1.6  current
Available 64-bit Java browser plugins
  [1]   icedtea-bin
  [2]   sun-jre-bin-1.6  current
</pre>
}}

== USE flags for use with Java ==

=== Setting USE flags ===

For more information regarding USE flags, refer to the [http://www.gentoo.org//doc/en/handbook/handbook-x86.xml?part=2&chap=2 USE flags] chapter from the Gentoo Handbook. 

=== The flags ===

* The '''java''' flag adds support for Java in a variety of programs
* The '''nsplugin''' flag adds support for Mozilla-like browsers (including Firefox). You will need this for viewing Java applets in your Mozilla-like browser.
* The '''source''' flag installs a zip of the source code of a package. This is traditionally used for IDEs to 'attach' source to the libraries you are using.
* The '''jce''' flag adds support for the Java Cryptography Engine
* For Java packages, the '''doc''' flag will build API documentation using javadoc.

== Additional resources ==

=== Off-line resources ===

* java-config man page
* <code>java-config --help</code>

=== Online resources ===

* The [http://www.gentoo.org/proj/en/java/ Java Project Page] 
* The [http://news.gmane.org/gmane.linux.gentoo.java gentoo-java], [http://news.gmane.org/gmane.linux.gentoo.user gentoo-user], and [http://news.gmane.org/gmane.linux.gentoo.devel gentoo-dev] mailing list archives
* [http://www.gentoo.org/irc://irc.gentoo.org/gentoo #gentoo] and [http://www.gentoo.org/irc://irc.gentoo.org/gentoo-java #gentoo-java] on IRC
* [http://en.wikipedia.org/wiki/Java_programming_language Wikipedia's entry for Java] 
* If you have suggestions or questions regarding this document, please email the Gentoo Java team: {{Mail|java@gentoo.org}}

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Joshua Nichols
* Karl Trygve Kalleberg
* Joshua Saddler
