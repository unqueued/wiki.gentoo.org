<languages />
{{InfoBox stack
|{{InfoBox homepage|http://freedesktop.org/wiki/Software/systemd|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox gitweb|http://cgit.freedesktop.org/systemd/systemd/|raw=true}}
}}

'''systemd'''는 리눅스 시스템용 최신 SysV 방식의 init 및 rc(run command)<ref>Eric S. Raymond. http://www.catb.org/jargon/html/R/rc-file.html Retrieved on June 27th, 2015</ref>를 대체하는 시스템입니다. 젠투에서는 대안 init 시스템으로 지원합니다.
<!--
다음 설정 디렉터리는 OpenRC와 systemd에서 사용합니다:
* {{Path|/etc/modules-load.d}},
* {{Path|/etc/sysctl.d}},
* {{Path|/etc/binfmt.d}}
-->

== 설치 전 설정 ==

{{Note/ko|<{{=}}sys-apps/systemd-203에서 업그레이드 한다면 [[Systemd/upgrade|업그레이드 하위 페이지]]를 참고하십시오.}}

=== 커널 ===

systemd에서는 최신 리눅스 커널 기능의 대부분을 사용할 수 있습니다. 이제 최소 커널 지원 버전은 2.6.39입니다. 최근의 {{Package|sys-kernel/gentoo-sources}} 에서는 systemd용 필수, 선택 커널 옵션을 선택하는 간편한 수단을 도입했습니다:

{{KernelBox|title=gentoo-sources의 간편 설정|<pre>
Gentoo Linux --->
        Support for init systems, system and service managers --->
                [*] systemd
</pre>}}

커널 옵션({{Package|sys-kernel/gentoo-sources}}를 사용하지 않는 경우의 옵션)을 직접 설정하려면 다음 커널 옵션이 필요하거나 추천합니다:

<!-- See http://cgit.freedesktop.org/systemd/systemd/plain/README -->
{{KernelBox|title=필수 옵션|<pre>
General setup  --->
	[*] Control Group support
	[*] open by fhandle syscalls
	[ ] Enable deprecated sysfs features to support old userspace tools
	[*] Configure standard kernel features (expert users)  --->
		[*] Enable eventpoll support
		[*] Enable signalfd() system call
		[*] Enable timerfd() system call
[*] Networking support --->
Device Drivers  --->
	Generic Driver Options  --->
		[*] Maintain a devtmpfs filesystem to mount at /dev
File systems  --->
	[*] Inotify support for userspace
	Pseudo filesystems  --->
		[*] /proc file system support
		[*] sysfs file system support
</pre>}}

{{KernelBox|title=추천 옵션|<pre>
General setup  --->
	[*] Namespaces support  --->
		[*] Network namespace
[*] Enable the block layer  --->
	[*] Block layer SG support v4
Processor type and features  --->
	[*] Enable seccomp to safely compute untrusted bytecode
Networking support --->
	Networking options --->
		<*> The IPv6 protocol
Device Drivers  --->
	Generic Driver Options  --->
		()  path to uevent helper
		[ ] Fallback user-helper invocation for firmware loading
Firmware Drivers  --->
	[*] Export DMI identification via sysfs to userspace
File systems --->
	<*> Kernel automounter version 4 support (also supports v3)
	Pseudo filesystems --->
		[*] Tmpfs virtual memory file system support (former shm fs)
		[*]   Tmpfs POSIX Access Control Lists
		[*]   Tmpfs extended attributes
</pre>}}

UEFI 시스템에서는 다음 옵션을 활성화하십시오:

{{KernelBox|title=UEFI 지원|<pre>
[*] Enable the block layer  --->
	Partition Types  --->
		[*] Advanced partition selection
		[*]   EFI GUID Partition support
Processor type and features  --->
	[*] EFI runtime service support
Firmware Drivers  --->
        EFI (Extensible Firmware Interface) Support -->
	        <*> EFI Variable Support via sysfs
</pre>}}

시스템에서 BFQ 스케쥴러를 사용한다면 "Enable the block layer -> IO Schedulers"의 BFQ 업스트림에서 "BFQ hierarchical scheduling support" 활성화를 추천합니다.

최신 목록은, 업스트림 [http://cgit.freedesktop.org/systemd/systemd/tree/README README] 파일에서 "REQUIREMENTS" 섹션을 참고하십시오.

=== {{Path|/run}} 디렉터리 ===

{{Path|/run}} 디렉터리는 systemd가 사용하며 또한 기타 프로그램의 경우{{Path|pid}} 파일, 소켓, 상태 파일과 같은 실행 시간 데이터를 저장하는 반영구 저장소로 활용합니다.

systemd 꾸러미에서는 자체적으로 {{Path|/run}} 디렉터리를 만듭니다. 그러나 이러한 변경 동작은 [[OpenRC]] 에서도 마찬가지로 자동 마운트와 타 프로그램 꾸러미에서의 해당 파일 시스템 사용에  영향을 준다는 점을 참고하셨으면 합니다.

==={{Path|/etc/mtab}}===

업스트림에서는 {{Path|/proc/self/mounts}}로 연결하는 {{Path|/etc/mtab}} 심볼릭 링크 파일만 지원합니다. 이 심볼릭 링크를 만들지 않으면 {{c|mount}} ({{bug|434090}})와 {{c|df}} ({{bug|477240}})에서 문제가 발생합니다. 예전에는 일부 프로그램에서 (마운트 옵션과 같은) 정보를 {{Path|/etc/mtab}}에 써서 일반 파일이었습니다. 이제 모든 프로그램이 이 문제를 해결하도록 지원합니다. 여전히, 이 파일을 심볼릭 링크로 만들기 전에 보고된 문제점으로 하여금 시스템이 영향을 받는지 알아보려면 {{bug|477498}} 버그를 확인해보십시오.

심볼릭 링크를 만들려면 다음 명령을 실행하십시오:

{{RootCmd|ln -sf /proc/self/mounts /etc/mtab}}

=== 부팅 시간에 /usr이 나타나는지 확인하기 ===

{{Path|/usr}} 설정을 나누려면 [[initramfs]]를 활용하여 systemd를 시작하기 전에 {{Path|/usr}}를 마운트하십시오. 절차는 [[Initramfs/Guide|Initramfs 젠투 안내서]]를 참고하십시오.

=== LVM2 와 Initramfs 사용하기===

[[LVM|sys-fs/lvm2]]를 사용하여 시스템을 initramfs로 부팅하려 할 때, {{Package|sys-kernel/genkernel-next}}의 다음 명령을 사용하면 initramfs를 만듭니다:

{{RootCmd|genkernel --udev --lvm <target>}}

<code><target></code>은 <code>initramfs</code>나 initramfs 생성 결과인 기타 genkernel 타겟 중 하나입니다. 자세한 내용은 {{c|genkernel --help}} 출력 내용을 살펴보십시오:

{{Cmd|genkernel --help}}

LVM을 사용한다면, 이에 따라 {{c|lvmetad}} 데몬을 시작해야 합니다. 그렇지 않으면 systemd에서 LVM 볼륨을 마운트할 수 없습니다. {{c|lvmetad}} 데몬은 {{Path|/etc/lvm/lvm.conf}}에서 활성화할 수 있습니다:

{{FileBox|filename=/etc/lvm/lvm.conf|title=lvm.conf에서 바꿀 필요가 있는 부분|lang=ini|1=
# Set use_lvmetad to '1' for systemd
use_lvmetad {{=}} 1
}}

{{Note/ko|{{Path|/etc/lvm/lvm.conf}}를 수정하는 대신, {{Path|lvmetad.service}}를 활성화하는  {{Path|lvmetad.socket}} 유닛으로도 해결할 수 있을지 모르겠지만, 아직까지는 {{Package|sys-fs/lvm2}}에서 지원하지 않습니다.}}

== 설치 ==

{{Package|sys-apps/systemd}}에 udev가 있습니다. 일단 설치하면, {{Package|virtual/udev}}의 프로바이더가 systemd가 되므로 {{Package|sys-fs/udev}}를 제거할 수 있습니다.

<code>systemd</code> USE  플래그를({{Path|make.conf}}에서) 전체적으로 활성화하십시오. {{c|systemd-logind}} 서비스와 충돌하는 현상을 막으려면  <code>consolekit</code> USE 플래그를 비활성해야합니다. 분명한 USE 플래그를 기본으로 사용하려 systemd 하위 프로파일로 전환할 수도 있는데, 이런 경우 {{Path|make.conf}}의 설정을 바꿀 필요는 없습니다.

{{RootCmd|eselect profile list}}

마지막으로 새 플래그로 시스템을 업데이트하십시오:

{{RootCmd|emerge -avDN @world}}

의존성 문제가 발생하면({{Package|sys-apps/systemd}}를 막는 {{Package|sys-fs/udev}}), {{Package|sys-fs/udev}}가 world 파일에 등록한 상태일수도 있습니다. 선택을 취소하여 이 문제를 해결해보십시오:

{{RootCmd|emerge --deselect sys-fs/udev}}

== systemd로 부팅 ==

In order to run systemd, switch the {{c|init}} that the executable kernel (or the initramfs) uses.

{{Warning/ko|이전 서비스 관리자용 설정 서비스는 자동으로 시작하지 않습니다. 시스템이 다른 서비스 관리자로 전환하기 때문입니다. 네트워크 또는 로그인 관리자와 같은 기능을 정상적인 기능을 하도록 되돌리려면, 이 서비스들 또한 활성화해야 합니다. 이에 대한 더 많은 정보는 이 글의 서비스 장에 있습니다.}}

{{Note/ko|마이그레이션을 멈춘 상태로 두면, init 변경 과정의 실행을 취소하고 되돌려서 기본 서비스 관리자(OpenRC)로 돌아가서 언제든 부팅할 수 있습니다. 이 동작은 이 글의 마지막 문제 해결 장을 통해 어떤 문제를 해결할 수 있도록 합니다.}}

다음 하위 장에서는 부팅 관리자 또는 커널에서 {{c|init}} 설정을 바꾸는 방법을 언급합니다.

=== 이전 Grub 버전 (0.x) ===

<code>init=/usr/lib/systemd/systemd</code> 매개 변수 값을 커널 명령줄에 추가하십시오. {{Path|grub.conf}}에서 온 예제는 다음과 같습니다:

{{FileBox|filename=/boot/grub/grub.conf|title=systemd용 GRUB 설정|1=
title=Gentoo with systemd
root (hd0,0)
kernel /vmlinuz root=/dev/sda2 init=/usr/lib/systemd/systemd
}}

OpenRC로 시스템을 부팅할 경우 <code>init</code> 대신 <code>real_init</code> 를 사용하십시오.

=== Grub 2 ===

{{c|grub2-mkconfig}}를 사용할 때,  init 옵션을 <var>GRUB_CMDLINE_LINUX</var> 에 붙여넣으십시오:

{{Note/ko|systemd에서 {{c|dracut}}이 만든 initramfs를 사용할 경우에는 initramfs 에서 이미 systemd를 시작했으므로 필요하지 않습니다.}}

{{FileBox|filename=/etc/default/grub|title=systemd용 GRUB 2 설정|lang=bash|1=
# Append parameters to the linux kernel command line
GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"
}}

GRUB 2 설정 파일을 직접 작성할 경우(전문가에게만 해당),  <code>init=</code> 매개 변수를 <code>linux</code> 또는 <code>linux16</code> 명령에 추가하십시오.

{{FileBox|filename=/boot/grub/grub.cfg|title=GRUB2 설정 일부 예제|1=
linux /vmlinuz-3.10.9 root=UUID=508868e4-54c6-4e6b-84b0-b3b28b1656b6 init=/usr/lib/systemd/systemd
}}

genkernel-next의 Initrd를 활용할 경우 <code>init</code> 대신 <code>real_init</code>를 사용하십시오.

{{Note/ko|<code>real_init</code> 지시어는 오래되어 genkernel-next에서 필요하지 않습니다.}}

=== 커널 설정 ===

init 설정은 커널 설정으로 하드코딩할 수 있습니다. "Processor type and features -> Built-in kernel command line" 부분을 참고하십시오. 이 기법은 {{c|grub}} 과 {{c|grub2}}에서 동작합니다.

=== 루트 암호 설정 ===

여기서 시스템 루트 암호 설정을 잊지 마십시오. 뭔가 잘못됐다면 systemd에서 관리 모드로 진입할 루트 암호를 물어봅니다.

== 설치 후 설정 ==

systemd에서는 대부분의 기본 시스템 세부 정보 설정할 몇가지 시스템 설정 파일을 지원합니다.

{{Note/ko|어떤 시스템 설정 매개 변수는 적당한 설정 파일을 수정해서 업데이트 할 수 있습니다만 대부분의 설정은 systemd 동작이 필요한 유틸리티로 관리합니다. 이 경우 systemd로 안전하게 다시 부팅한 후 필요한 대로 {{c|hostnamectl}}, {{c|localectl}}, {{c|timedatectl}}을 활용하십시오.}}

=== 호스트 이름 ===

호스트 이름을 설정하려면 {{Path|/etc/hostname}}를 만들거나 편집하여 원하는 호스트 이름을 넣으십시오.

systemd로 부팅할 때, {{Path|/etc/hostname}}와 {{Path|/etc/machine-info}}를 편집하는  {{c|hostnamectl}} 도구가 있습니다. 호스트 이름을 바꾼다면, 다음처럼 명령을 실행하십시오.

{{RootCmd|hostnamectl set-hostname <HOSTNAME>}}

더 많은 옵션은 {{c|man hostnamectl}}를 참고하십시오.

<!--
{{FileBox|filename=/etc/machine-info|title=로컬 머신 정보 입력용 설정 파일.|lang=bash|1=
PRETTY_NAME="Larry's Computer"
ICON_NAME="computer-laptop"
}}
-->

=== 로캘 ===

보통 로캘은 systemd를 설치할 때 OpenRC에서 적절하게 가져옵니다. 필요하다면 젠투 핸드북에 언급된 절차대로 {{Path|/etc/locale.conf}}에서 설정할 수 있습니다.

{{FileBox|filename=/etc/locale.conf|title=System locale configuration|lang=bash|1=
LANG="en_US.utf8"
}}

Once booted with systemd, the tool {{c|localectl}} is used to set locale and console or X11 keymaps. To change the system locale, run the following command:

{{RootCmd|localectl set-locale LANG<nowiki>=</nowiki><LOCALE>}}

가상 콘솔 키 배치를 바꾸려면:

{{RootCmd|localectl set-keymap <KEYMAP>}}

마지막으로 X11 배치를 설정하려면:

{{RootCmd|localectl set-x11-keymap <LAYOUT>}}

모델에서 필요하다면, 변수 및 옵션 값을 설정할 수 있습니다:

{{RootCmd|localectl set-x11-keymap <LAYOUT> <MODEL> <VARIANT> <OPTIONS>}}

=== 날짜와 시간 ===

Time and date can be set using the {{c|timedatectl}} utility. That will also allow users to set up synchronization without needing to rely on {{Package|net-misc/ntp}} or other providers than systemd's own implementation.

{{c|timedatectl}} 사용 방법을  알아보려면 간단하게 다음처럼 실행하십시오:

{{RootCmd|timedatectl --help}}

=== 자동 모듈 불러오기 ===

Automatic module loading is configured in a different file, or rather directory of files. The configuration files are stored in {{Path|/etc/modules-load.d}}. On boot every file with a list of modules will be loaded. The file format is a list of modules separated by newlines and can have any name as long as it ends with {{Path|.conf}}. The module loading can be separated by program, service or whatever way that fits personal preference. An example {{Path|virtualbox.conf}} is listed below:

{{FileBox|filename=/etc/modules-load.d/virtualbox.conf|title=virtualbox 모듈용 예제 파일|1=
vboxdrv
vboxnetflt
vboxnetadp
vboxpci
}}

=== 네트워크 ===

==== systemd-networkd ====

systemd-networkd는 유선 네트워크 인터페이스를 설정할 때 쓸만합니다. 기본적으로는 비활성화 상태입니다.

systemd-networkd를 설정하려면 {{Path|/etc/systemd/network}}의 {{Path|*.network}} 파일을 만드십시오. [http://www.freedesktop.org/software/systemd/man/systemd.network.html systemd.network(5)]를 참고하십시오. 간단한 DHCP 설정을 예로 아래에 보여드립니다:

{{FileBox|filename=/etc/systemd/network/50-dhcp.network
|1=[Match]
Name=en*
 
[Network]
DHCP=yes}}

{{RootCmd|systemctl enable systemd-networkd.service
|systemctl start systemd-networkd.service}}

systemd-networkd는 기본적으로 {{Path|resolv.conf}}를 업데이트 하지 ㅇ낳습니다. systemd에서 DNS 설정을 관리하려면 {{Path|resolv.conf}}를 심볼릭 링크로 바꾸고 systemd-resolved를 시작하십시오.

{{RootCmd|ln -snf /run/systemd/resolve/resolv.conf /etc/resolv.conf
|systemctl enable systemd-resolved.service
|systemctl start systemd-resolved.service}}

==== NetworkManager ====

NetworkManager는 주로 네트워크를 설정할 때 사용합니다. 이 용도로, X11 기반으로 동작하는 데스크톱을 사용한다면 간단하게 다음 명령을 실행하십시오.

{{RootCmd|nm-connection-editor}}

If that is not the case and the network needs to be configured from console, give [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Using_the_NetworkManager_Command_Line_Tool_nmcli.html nmcli] a try, or follow a guided configuration process through {{c|nmtui}}:

{{RootCmd|nmtui}}

[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Networking_Config_Using_nmtui.html nmtui]은 콘솔에서 실행할 경우, 사용자에게 설정 과정을 안내하는 curses 프론트엔드입니다.

=== 로그 파일 처리 ===

systemd has its own way of handling log files without needing to rely on any external log system (like {{Package|app-admin/syslog-ng}} or {{Package|app-admin/rsyslog}}). Messages can now be read with {{c|journalctl}}. It can still be configured to use a preferred external tool for handling them. See {{c|man journald.conf}} to learn how to configure journald to suit personal needs.

{{c|journalctl}} 옵션의 일부는 다음과 같습니다:

{| class="table table-striped table-condensed"
|-
! {{c|journalctl}} 명령줄 옵션 !! 결과
|-
| {{c|journalctl}} 옵션 제외 || 모든 로그를 시작 순서대로 보여줍니다.
|-
| <code>-b</code>, <code>--boot</code> || 부팅 과정의 모든 기록을 표시합니다.
|-
| <code>-r</code>, <code>--reverse</code> || 나중에 뜬 항목 먼저.
|-
| <code>-f</code>, <code>--follow</code> || 최근 일부 항목을 보여주고 새 기록 항목은 나타나는대로 바로 표시합니다.
|-
| <code>-p</code>, <code>--priority=</code> || 메시지 표시 (최소) 우선순위를 다음 중 하나로 지정합니다: "emerg" (0), "alert" (1), "crit" (2), "err" (3), "warning" (4), "notice" (5), "info" (6), "debug" (7).
|-
| <code>--since=</code>, <code>--until=</code> || 시간에 따라 항목을 제한합니다. "YYYY-MM-DD hh:mm:ss" 형식 또는 "yesterday", "today", "tomorrow" 문자열을 허용합니다.
|-
| <code>-n</code>, <code>--lines=</code> || 항목 갯수 제한.
|-
| <code>-k</code>, <code>--dmesg</code> || 커널 메시지만 표시.
|-
| <code>-u</code>, <code>--unit=</code> || 지정 Systemd 유닛으로 제한.
|}

더 많은 옵션은 {{c|man journalctl}}을 살펴보십시오.

=== tmpfs에 있는 /tmp ===

{{Path|/etc/fstab}}에서 {{Path|/tmp}}에 어떤 다른 파일 시스템을 마운트하지 않으면 systemd에서는 {{Path|/tmp}}를 tmpfs로 마운트합니다. 이는 매번 부팅할 때마다 비어있고 시스템에 장착한 RAM 용량의  50%로 제한된 상태임을 의미합니다. 왜 이런 동작이 타당한지, 이 설정을 어떻게 수정하는지 알아보려면 [http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ API File Systems]를 살펴보십시오.

=== 부팅 과정 세부 설정 ===

systemd로 이전하는 과정에서 사용자 여러분은 보통 부팅 과정 출력 내용 규모가 다르다는걸 눈치챕니다:

* <code>quiet</code> 부팅 옵션은 커널 출력에만 영향을 줄 뿐만 아니라, systemd 자체에도 영향을 줍니다. 머신에 systemd를 설정한다면, 언제든 일어나는 오류를 쉽게 살펴보려면 이 옵션을 치워놓으십시오. 오류를 다 해결하고 다시 추가하면 잠잠한(그리고 빠른) 부팅 과정을 진행할 수 있습니다.
* <code>quiet</code> 부팅 옵션을 전달해도, 어차피 systemd 에서는 <code>systemd.show_status=1</code> 설정을 전달하여 상태를 표시하도록 설정할 수 있습니다.
* <code>quiet</code> 부팅 옵션을 설정하지 않으면, 일부 메시지를 콘솔에 겹쳐 출력할 수 있습니다. 이는 커널 설정에 기인합니다({{c|man 5 proc}}의 {{Path|/proc/sys/kernel/printk}} 참조). 이 설정을 조절하려면, <code>loglevel=5</code> 부팅 매개 변수를 커널에 전달하십시오(그리고 설정에 따라 값을 업데이트 하십시오. 예를 들어, 가장 작은 값은 1입니다.).

== 서비스 ==

At some point the system will need to be rebooted in order to get systemd running (in system mode). Be sure to read all of this document to ensure systemd is configured as completely as possible before rebooting. Note that {{c|journalctl}} works with systemd not running, but that {{c|systemctl}} will not do anything useful without systemd running. Complete the service configuration (enabling and starting of services) after logging in to the system running systemd.

=== OpenRC 서비스 ===

systemd가 근본적으로 이전 Init.d 스크립트 동작을 지원하도록 의도했지만, 지원 기능이 독립기반 OpenRC에 적합하지 않기 때문에 젠투에서는 완전히 먹통입니다. OpenRC는 OpenRC를 시스템 부팅 과정에서 사용하지 않았을 경우 init.d 스크립트를 실행할 수 없는지 확인(그렇지 않으면 결과를 예상할 수 없습니다)하는 추가 도구를 제공합니다.

=== 존재 서비스 목록 ===

All available service units can be listed using the <code>list-units</code> argument of {{c|systemctl}}:

{{RootCmd|systemctl list-units|output=<pre>
UNIT                               LOAD   ACTIVE SUB       DESCRIPTION
boot.automount                     loaded active waiting   EFI System Partition Automount
proc-sys-fs-binfmt_misc.automount  loaded active waiting   Arbitrary Executable File Formats File System Automount Point
...
</pre>}}

다음 파일 접미부 항목은 자주 사용하는 요소입니다:

{| class="table"
! 접미부
! 설명
|-
| {{Path|.service}}
| 일반 서비스 파일 (예. 데몬을 직접 실행),
|-
| {{Path|.socket}}
| 소켓 리스너 (''inetd''와 유사),
|-
| {{Path|.path}}
| 서비스용 파일 시스템 트리거(파일을 바꾸는 등의 동작이 일어날 때 실행하는 서비스).
|}

Alternatively the {{c|systemctl}} tool can be used to list all services (including implicit ones):

{{RootCmd|systemctl --all --full}}

그리고 마지막으로 시작에 실패한 서비스를 점검하려면:

{{RootCmd|systemctl --failed}}

=== 서비스 활성화, 비활성화, 시작, 중단 ===

일반적인 서비스 활성화 방식은 다음 명령을 사용합니다:

{{RootCmd|systemctl enable foo.service}}

서비스는 다음과 같이 비활성화 할 수 있습니다:

{{RootCmd|systemctl disable foo.service}}

이 명령은 기본 대상의 기본 이름으로 서비스를 활성화합니다(각각의 내용은 서비스 파일의 "Install" 섹션에 설정했습니다). 그러나 가끔 서비스는 이런 정보 또는 사용자가 원하는 다른 이름/타겟을 제공하지 않기도 합니다.

이 명령은 다음에 시스템을 부팅할 때 유닛을 활성화, 비활성화 할 수 있습니다. 지금 서비스를 시작하려면 다음 명령을 사용하십시오:

{{RootCmd|systemctl start foo.service}}

다음과 같이 서비스를 멈출 수 있습니다:

{{RootCmd|systemctl stop foo.service}}

=== 개별 유닛 설치 ===

Custom unit files can be placed in {{Path|/etc/systemd/system}}, where they will be recognized after running {{c|systemctl daemon-reload}}:

{{RootCmd|systemctl daemon-reload}}

{{Path|/usr/lib/systemd/system}}는 꾸러미 관리자에서 설치한 서비스 파일용으로 예약되어 있습니다.

=== 유닛 파일 개별 설정 ===

유닛의 중요하지 않은 설정을 바꿀 필요가 있다면, {{Path|/etc/systemd/system}}에서 원래 유닛 파일의 완전한 사본을 만들 필요가 없습니다. 원본 유닛 이름 뒤에 {{Path|*.d}}가 붙은 디렉터리에서 해당 설정 파일을 넣으면 유닛에서 제공하는 꾸러미 관리 설정을 바꿀 수 있습니다.

{{FileBox|filename=/etc/systemd/system/apache2.d/mem-limit.conf|title=서비스 파일에 설정 추가/덮어쓰기 예제|lang=ini|1=
[Service]
MemoryLimit{{=}}1G
}}

바뀐 내용을 systemd 에 알리려면 systemd를 다시 불러와야합니다:

{{RootCmd|systemctl daemon-reload}}

이제  바뀐 내용을 적용하려면 서비스를 다시 시작해야 합니다:

{{RootCmd|systemctl restart apache2}}

서비스에 바뀐 속성을 적용했는지 확인하십시오:

{{RootCmd|systemctl show --property{{=}}MemoryLimit apache2|output=<pre>MemoryLimit=1074000000</pre>}}

=== 개별 설정 이름으로 서비스 활성화 ===

유닛의 "[Install]" 섹션에 "Alias"에서 제공하는 이름이 없어 기대한 조건에 일치하지 않고 [[#.EC.9C.A0.EB.8B.9B_.ED.8C.8C.EC.9D.BC_.EA.B0.9C.EB.B3.84_.EC.84.A4.EC.A0.95|개별 설정]]을 통해 이 이름을 완전한 새 값으로 제공하고 싶지 않다면, {{Path|/etc/systemd/system/*.wants/}}에 직접 심볼릭 링크로 만들 수 있습니다. {{Path|*.wants}} 디렉터리의 이름은 타겟 또는 사로운 요소에 의존할 다른 서비스를 지정할 수 있습니다.

예를 들어 {{Path|mysqld.service}}를 {{Path|multi-user.target}}에 {{Path|db.service}}로 설치하려면:

{{RootCmd|ln -s /usr/lib/systemd/system/mysqld.service /etc/systemd/system/multi-user.target.wants/db.service}}

서비스를 비활성화하려면, 심볼릭 링크를 제거하기만 하시면 됩니다:

{{RootCmd|rm /etc/systemd/system/multi-user.target.wants/db.service}}

=== 자체 서비스 ===

일부 젠투 꾸러미는 이미 systemd 유닛 파일을 설치합니다. 이 서비스들은 충분히 활성화 할 요건을 갖추었습니다. 꾸러미 설치 유닛 파일의 간단한 요약 정보는 [http://qa-reports.gentoo.org/output/eclass-usage/systemd.txt systemd eclass users list]에서 살펴볼 수 있습니다.

OpenRC의 서비스와 일치하는 systemd 서비스는 다음 테이블 목록과 같습니다:

{| class="table" style="text-align: center;"
|+ Migration chart
|-
! scope="col" | 젠투 꾸러미
! scope="col" | OpenRC 서비스
! scope="col" | systemd 유닛
! scope="col" | 참고
|-
! scope="row" rowspan="28" | {{Package|sys-apps/openrc}}
| bootmisc || systemd-tmpfiles-setup.service || 항상 활성화 상태이며, {{Path|tmpfiles.d}} 활용
|-
| consolefont || systemd-vconsole-setup.service || 항상 활성화 상태이며, {{Path|vconsole.conf}} 활용
|-
| devfs ||  || 
|-
| dmesg ||  || 
|-
| fsck || fsck*.service || 마운트 프로그램에서 암묵적으로 끌어옴(실행함)
|-
| functions.sh || See note || {{Bug|373219}}
|-
| hostname || (builtin) || {{Path|/etc/hostname}}
|-
| hwclock || See note || systemd의 일부로 항상 활성화(구워져 나온 상태이며 유닛이 아님). <br />(역자 주: '구워져 나온 상태'라는건 빌드할 때 포함했다는 의미)
|-
| keymaps || systemd-vconsole-setup.service || 항상 활성화 상태이며, {{Path|vconsole.conf}} 활용
|-
| killprocs ||  || 
|-
| local ||  || 
|-
| localmount || local-fs.target || 실제 유닛은 fstab에서 만듬
|-
| modules || systemd-modules-load.service || 항상 활성화 상태이며, {{Path|/etc/modules-load.d/*.conf}} 활용
|-
| mount-ro ||  || 
|-
| mtab ||  || 
|-
| netmount || remote-fs.target || 
|-
| numlock ||  || 
|-
| procfs || (builtin) || 
|-
| root || remount-rootfs.service || 
|-
| savecache || n/a || OpenRC 내부 전용 스크립트
|-
| staticroute ||  || 
|-
| swap || swap.target || 실제 유닛은 fstab에서 만듬
|-
| swclock ||  || 
|-
| sysctl || systemd-sysctl.service || {{Path|sysctl.conf}}, {{Path|sysctl.d/}}
|-
| sysfs || (builtin) || 
|-
| termencoding || systemd-vconsole-setup.service || 항상 활성화 상태이며 {{Path|vconsole.conf}} 활용
|-
| scope="row" rowspan="2" | urandom
| systemd-random-seed-load.service || 
|-
| systemd-random-seed-save.service || 
|-
! scope="row" | {{Package|app-admin/rsyslog}}
| rsyslog || rsyslog.service || 
|-
! scope="row" | {{Package|app-admin/syslog-ng}}
| syslog-ng || syslog-ng.service || 
|-
! scope="row" rowspan="2" | {{Package|media-sound/alsa-utils}}
| scope="row" rowspan="2" | alsasound
| alsa-store.service || (기본으로 활성화)
|-
| alsa-restore.socket || (기본으로 활성화)
|-
! scope="row" | {{Package|net-misc/dhcpcd}}
| dhcpcd || dhcpcd.service || 
|-
! scope="row" rowspan="5" | {{Package|net-misc/netifrc}} 
| scope="row" rowspan="5" | net.*
| net@.service || net.* 스크립트용 systemd 래퍼 (net-misc/netifrc 에서 딸려옴)
|-
| netctl@.service || net-misc/netctl는 원래 아치 리눅스 도구입니다.
|-
| NetworkManager.service || networkmanager-0.9.8.4 미만 버전에서는 dispatcher.d 스크립트가 동작하려면 NetworkManager-dispatcher.service 를 활성화 하십시오.<br /> NetworkManager-wait-online.service를 활성화하면<br /> 시스템이 활성 인터넷에 연결한 상태인지 확인합니다.<br />기타 네트워크 관리자(e.g., wicd, dhcpcd)와 wpa_supplicant는 비활성화 하십시오.
|-
| dhcpcd.service || net-misc/dhcpcd에서 제공
|-
| systemd.networkd.service || systemd의 일부
|-
! scope="row" | {{Package|net-misc/openntpd}}
| ntpd || ntpd.service ||
|-
! scope="row" rowspan="2" | {{Package|net-misc/openssh}}
| scope="row" rowspan="2" | sshd
| sshd.service || sshd 를 데몬으로 실행
|-
| sshd.socket || inetd 유사 기반으로 sshd 실행 (들어오는 연결 별로)
|-
! scope="row" rowspan="2" | {{Package|net-misc/wpa_supplicant}}
| scope="row" rowspan="2" | wpa-supplicant
| wpa_supplicant.service || D-Bus 에서 제어하는 데몬 (e.g. for NetworkManager)
|-
| wpa_supplicant@.service || 인터페이스별 wpa_supplicant ({{Path|wpa_supplicant@wlan0.service}} 처럼 사용)
|-
! scope="row" rowspan="3" | {{Package|net-print/cups}}
| scope="row" rowspan="3" | cupsd
| cups.service || 기존 방식의 부팅 시작 서비스
|-
| cups.socket
| scope="row" rowspan="2" | 소켓, 경로 활성화(요청 기반으로만 cups 시작)
|-
| cups.path
|-
! scope="row" | {{Package|net-wireless/bluez}}
| bluetooth || bluetooth.service || 
|-
! scope="row" rowspan="2" | {{Package|sys-apps/dbus}}
| scope="row" rowspan="2" | dbus
| dbus.service || 
|-
| dbus.socket || 
|-
! scope="row" | {{Package|sys-apps/irqbalance}}
| irqbalance || irqbalance.service || 데몬 모드만 지원
|-
! scope="row" | {{Package|sys-apps/microcode-ctl}}
| microcode_ctl ||  || ''microcode''를 '''module'''로 설정하여 마이크로 코드 자체를 불러오도록 합니다. "Processor type and features" -> "CPU microcode loading support" 로 이동하여 Intel 또는 AMD 프로세서에 따른 필요한 옵션 추가를 잊지 마십시오.
|-
! scope="row" rowspan="4" | {{Package|sys-fs/udev}}
| udev || udev.service || 
|-
| udev-mount || (builtin) || {{Path|/dev}} 를 tmpfs 로 마운트
|-
| udev-postmount || udev-trigger.service || 
|-
| || udev-settle.service || 
|-
! scope="row" | {{Package|sys-power/acpid}}
| acpid || acpid.service || 대부분의 기능은 systemd 자체에서 구현이 완료됐으니 이 항목의 활성화 고려를 그만 두셔도 좋습니다
|-
! scope="row" | {{Package|x11-apps/xdm}}
| (xdm) || xdm.service || OpenRC 는 {{Package|x11-base/xorg-server}}에서 설치한 xdm 를 사용합니다. systemd 에서는 각각의 디스플레이 관리자에서 제공하는 관련 파일(gdm.service, kdm.service...)을 활성화해야합니다
|-
! scope="row" rowspan="2" | {{Package|net-firewall/iptables}}
| scope="row" rowspan="2" | iptables
| iptables-store.service || 
|-
| iptables-restore.service || 
|-
|}

=== 타이머 서비스 ===

197 버전 부터 systemd에서는 타이머를 지원하는데 systemd 시스템에서 크론을 필요없게 만듭니다. 212 버전 부터는 영속 서비스를 지원하며 anacron을 대체합니다. 영속 타이머는 시스템의 전원이 꺼진 상태에서 타이머 작업이 계획 상태일 경우 다음 기회에 실행합니다.

다음 예제는 사용자 관점에서 실행하는 간단한 타이머를 만드는 방법을 보여줍니다. 사용자가 로그인 상태가 아니어도 실행합니다. 모든 timed 서비스에서는 타이머가 필요하며 서비스 파일은 다음과 같이 타이머가 활성화합니다.

{{FileBox|filename=~/.local/share/systemd/user/backup-work.timer|title=매일 동작하는 타이머 예제|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=no
 
[Timer]
Persistent=false
OnCalendar=Mon-Fri *-*-* 11:30:00
Unit=backup-work.service
 
[Install]
WantedBy=default.target
}}

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=백업을 실행하는 서비스 예제|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

우선 systemd에 서비스 파일을 다시 검색하라고 요청하십시오:

{{Cmd|systemctl --user daemon-reload}}

다음 명령을 통해 직접 백업을 실행할 수 있습니다:

{{Cmd|systemctl --user start backup-work.service}}

다음과 같이 타이머를 직접 시작하고 멈춰보십시오.

{{Cmd|systemctl --user start backup-work.timer}}
{{Cmd|systemctl --user stop backup-work.timer}}

마지막으로, 매번 시스템을 시작할 때마다 타이머를 활성화하려면, 다음 명령을 실행하십시오:

{{Cmd|systemctl --user enable backup-work.timer}}

서비스 실행 최종 결과를 확인하려 한다면:

{{Cmd|systemctl --user list-timers}}

=== 전자메일 처리 실패 ===

timed 서비스가 동작중이면, 사용자 또는 관리자에게 시스템 정보를 보낼 수 있는 전자메일 처리에 실패합니다. 서비스 동작에 실패할 경우의 "OnFailure" 상태일 가능성이 있습니다. 이러한 실패 현상은 스크립트 실행 후 비-제로 반환 값으로 나타납니다.

문제를 해결하려면 다음과 같이 스크립트 내용을 바꾸십시오:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=백업 실행 서비스 예제|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
OnFailure=failure-email@%i.service
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

이 문제를 해결하려면 {{Path|failure-email@.service}} 설치가 필요하며, [https://github.com/kylemanna/systemd-utils/tree/master/onfailure kylemanna's systemd-utils repository]에서 찾아볼 수 있습니다.

==== 크론 바꾸기 ====

상단의 타이머와 서비스 파일은 시스템 전체에서 사용할 수 있도록 {{Path|/usr/lib/systemd/system}} 에 추가할 수 있습니다. 시스템을 시작할 때 서비스를 활성화하려면 설치 섹션에 <code>WantedBy=multi-user.target</code>를 적어두어야 합니다.

그러나, 크론은  {{Path|/etc/cron.daily}} 또는 기타 위치의 스크립트를 실행하기도 합니다. 다양한 꾸러미에서는 매일마다 실행하려는 여러가지 스크립트를 해당 위치에 놓습니다. 이 동작은 {{Package|sys-process/systemd-cron}}을 설치해서 systemd에서 시험해 볼 수 있습니다. 그 다음 다음 명령을 통해 새 크론을 활성화합니다:

{{RootCmd|systemctl enable cron.target}}
{{RootCmd|systemctl start cron.target}}

== 문제 해결 ==

* {{Bug|systemd|search=package}}
* {{Bug|systemd|search=product|site=fdo}}
* [http://freedesktop.org/wiki/Software/systemd/Debugging 업스트림 디버깅 안내서]

=== 임의의 위치에서 열리는 그래픽 세션 ===

기본적으로 systemd는 사용하려는 {{c|getty}} 프로세스만 실행합니다. 때문에 일부 (GDM 같은) 디스플레이 관리자 프로그램에서 필요할 때마다 열려있는 그래픽 세션에 대한 기존의 tty를 사용하게 하는데, 이 때문에 콘솔과 그래픽 세션이 사용 순서에 따라 임의대로 배치되는 결과를 초래할 수 있습니다.

좀더 "기존의" 동작과 가깝게 (예: 콘솔은 {{Path|tty1}} 부터 {{Path|tty6}}까지의 프로세스에 위치하며 그래픽 세션은 남아있는 tty를 활용) 항상 {{c|getty}}를 실행하도록 강제하려면:

{{RootCmd|systemctl enable getty@tty{2,3,4,5,6}.service}}

=== lvm ===

OpenRC에서 systemd로 넘어오면서 시스템 볼륨을 올바르게 마운트하려 lvm이 필요한 경우 lvm 서비스를 활성화하십시오:

{{RootCmd|systemctl enable lvm2-monitor.service}}

(lvm이 initramfs에 들어갔다면) 루트 볼륨 활성화가 따로 필요한건 아니겠지만, 서비스를 시작하기 전에는 다른 lvm 볼륨이 동작하지 않을지도 모릅니다.

=== systemd-bootchart ===

{{KernelBox|title=systemd-bootchart 기능 지원|1=<pre>
File systems  --->
	Pseudo filesystems --->
	[*] /proc file system support
Kernel hacking  --->
	[*] Kernel debugging
	[*] Collect scheduler debugging info
	[*] Collect scheduler statistics
</pre>}}

systemd-bootchart가 {{Path|/sbin/init}}를 시작하려 하므로, systemd를 대신 실행하도록 다시 설정하십시오:

{{FileBox|filename=/etc/systemd/bootchart.conf|lang=bash|1=
...
Init=/usr/lib/systemd/systemd
...
}}

부팅 차트 결과는 {{Path|/run/log/}}에 SVG 형식으로 보고합니다.

=== syslog-ng 와 systemd의 충돌 ===

systemd에서는 {{Path|/dev/log}}를 데이터그램 소켓 <ref>Jose Pedro Oliveira. [https://bugzilla.redhat.com/show_bug.cgi?id=770810#c10 Note about custom syslog-ng configurations files], [https://bugzilla.redhat.com/ Red Hat Bugzilla], January 11, 2012. Retrieved on January 12th, 2015</ref> <ref>[https://fedoraproject.org/wiki/Common_F16_bugs#systemd-syslog-ng-problems Systemd and syslog-ng interaction problems: system freezes / syslog-ng fails to start], [https://fedoraproject.org/wiki/Fedora_Project_Wiki Fedora Project Wiki]. Retrieved on January 12th, 2015</ref> 으로 만들므로 systlog-ng 에서 "잘못된" 스트림을 사용하는 현상을 막으려면 ''unix-stream'' 대신 ''unix-dgram''에서 불러오도록 설정해야합니다.

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# By default syslog-ng uses unix-stream. Comment this out and add unix-dgram instead.
# unix-stream('/dev/log');
unix-dgram('/dev/log');
}}

=== sys-fs/cryptsetup 설정  ===

systemd에서 {{Path|/etc/conf.d/dmcrypt}}를 고려하는 것 같지 않으므로({{bug|429966}} 참고) {{Path|/etc/crypttab}} 파일로 설정해야합니다:

{{FileBox|filename=/etc/crypttab|title=암호화 블록 장치 설정 파일|1=
crypt-home UUID=c25dd0f3-ecdd-420e-99a8-0ff2eaf3f391 -
}}

{{Path|/etc/crypttab}} 파일에서 새 서비스 파일을 만들어야합니다.  {{Package|sys-apps/systemd}}를 이머지할 때 <code>cryptsetup</code> USE 플래그를 활성화하십시오. 이렇게 하면 {{Path|/usr/lib/systemd/system-generators/systemd-cryptsetup-generator}}를 설치합니다. {{Path|/usr/lib/systemd/system-generators/systemd-cryptsetup-generator}}를 실행하면, {{Path|/tmp/}}에 서비스 파일을 만들며, 해당 서비스 파일을 {{Path|/etc/systemd/system}}에 복사하고, 직접 수정하며, 적당한 런레벨에 추가할 수 있습니다.

=== 시작에 실패한 유닛 점검 ===

시작에 실패한 유닛을 점검하려면 다음 명령을 실행하십시오:

{{RootCmd|systemctl --failed}}

=== 디버깅 모드 활성화 ===

자세한 내용은 {{Path|/etc/systemd/system.conf}}의 다음 부분을 참고하십시오:

{{FileBox|filename=/etc/systemd/system.conf|lang=bash|1=
LogLevel=debug
}}

또는 tty9에서 터미널을 여는 debug-shell을 활성화하십시오. 부팅 과정을 진행하는 동안 디버깅 서비스 동작을 돕습니다.

{{RootCmd|systemctl enable debug-shell.service}}

=== e4rat 사용법 ===

{{Path|/etc/e4rat.conf}}를 편집하여 'init'를 {{Path|/usr/lib/systemd/systemd}}로 설정하는 것을 잊지 마십시오. 그렇지 않으면 OpenRC로 부팅합니다.

=== GRSecurity 강화 ===

grsecurity를 활성화하면, systemd-networkd에서 다음 오류를 로그로 남깁니다:

{{CodeBox|title=systemd-networkd 오류|1=could not find udev device: Permission denied}}

비 루트 사용자가 grsecurity를 사용하는 상황에서 각 사용자에게 {{Path|/sys}} 파일 시스템 구조에 완전히 접근하려는 시도를 막기 때문에 systemd-networkd에서 오류가 발생합니다. 이 옵션을 비활성화하려면 <var>CONFIG_GRKERNSEC_SYSFS_RESTRICT</var> 커널 옵션을 비활성화하십시오.

== 추가 참조 ==

* [[Comparison of init systems]] - 젠투 Init 시스템과의 차이점을 반영한 게시글.
* [[Sakaki's_EFI_Install_Guide|Sakaki's EFI Install Guide]] -  [[Sakaki's_EFI_Install_Guide/Configuring_systemd_and_Installing_Necessary_Tools|Configuring systemd and installing necessary tools]] 만 참고하세요.
* [[OpenRC to Systemd Cheatsheet]]

== 외부 자료 ==

* [http://www.freedesktop.org/wiki/Software/systemd/FrequentlyAskedQuestions FAQ]
* [http://www.freedesktop.org/wiki/Software/systemd/TipsAndTricks Tips and tricks]

== 참고 자료 ==

{{reflist}}

[[Category:Init systems]]
