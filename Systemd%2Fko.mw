<languages />
{{InfoBox stack
|{{InfoBox homepage|http://freedesktop.org/wiki/Software/systemd|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox gitweb|http://cgit.freedesktop.org/systemd/systemd/|raw=true}}
}}

'''systemd'''는 리눅스 시스템용 최신 SysV 방식의 init 및 rc(run command)<ref>Eric S. Raymond. http://www.catb.org/jargon/html/R/rc-file.html Retrieved on June 27th, 2015</ref>를 대체하는 시스템입니다. 젠투에서는 대안 init 시스템으로 지원합니다.
<!--
다음 설정 디렉터리는 OpenRC와 systemd에서 사용합니다:
* {{Path|/etc/modules-load.d}},
* {{Path|/etc/sysctl.d}},
* {{Path|/etc/binfmt.d}}
-->

== 설치 전 설정 ==

{{Note/ko|<{{=}}sys-apps/systemd-203에서 업그레이드 한다면 [[/upgrade|업그레이드 하위 페이지]]를 참고하십시오.}}

=== 커널 ===

systemd에서는 최신 리눅스 커널 기능의 대부분을 사용할 수 있습니다. 이제 최소 커널 지원 버전은 2.6.39입니다. 최근의 {{Package|sys-kernel/gentoo-sources}} 에서는 systemd용 필수, 선택 커널 옵션을 선택하는 간편한 수단을 도입했습니다:

{{KernelBox|title=gentoo-sources의 간편 설정|<pre>
Gentoo Linux --->
        Support for init systems, system and service managers --->
                [*] systemd
</pre>}}

커널 옵션({{Package|sys-kernel/gentoo-sources}}를 사용하지 않는 경우의 옵션)을 직접 설정하려면 다음 커널 옵션이 필요하거나 추천합니다:

<!-- See http://cgit.freedesktop.org/systemd/systemd/plain/README -->
{{KernelBox|title=필수 옵션|<pre>
General setup  --->
	[*] Control Group support
	[*] open by fhandle syscalls
	[ ] Enable deprecated sysfs features to support old userspace tools
	[*] Configure standard kernel features (expert users)  --->
		[*] Enable eventpoll support
		[*] Enable signalfd() system call
		[*] Enable timerfd() system call
[*] Networking support --->
Device Drivers  --->
	Generic Driver Options  --->
		[*] Maintain a devtmpfs filesystem to mount at /dev
File systems  --->
	[*] Inotify support for userspace
	Pseudo filesystems  --->
		[*] /proc file system support
		[*] sysfs file system support
</pre>}}

{{KernelBox|title=추천 옵션|<pre>
General setup  --->
	[*] Namespaces support  --->
		[*] Network namespace
[*] Enable the block layer  --->
	[*] Block layer SG support v4
Processor type and features  --->
	[*] Enable seccomp to safely compute untrusted bytecode
Networking support --->
	Networking options --->
		<*> The IPv6 protocol
Device Drivers  --->
	Generic Driver Options  --->
		()  path to uevent helper
		[ ] Fallback user-helper invocation for firmware loading
Firmware Drivers  --->
	[*] Export DMI identification via sysfs to userspace
File systems --->
	<*> Kernel automounter version 4 support (also supports v3)
	Pseudo filesystems --->
		[*] Tmpfs virtual memory file system support (former shm fs)
		[*]   Tmpfs POSIX Access Control Lists
		[*]   Tmpfs extended attributes
</pre>}}

UEFI 시스템에서는 다음 옵션을 활성화하십시오:

{{KernelBox|title=UEFI 지원|<pre>
[*] Enable the block layer  --->
	Partition Types  --->
		[*] Advanced partition selection
		[*]   EFI GUID Partition support
Processor type and features  --->
	[*] EFI runtime service support
Firmware Drivers  --->
        EFI (Extensible Firmware Interface) Support -->
	        <*> EFI Variable Support via sysfs
</pre>}}

시스템에서 BFQ 스케쥴러를 사용한다면 "Enable the block layer -> IO Schedulers"의 BFQ 업스트림에서 "BFQ hierarchical scheduling support" 활성화를 추천합니다.

최신 목록은, 업스트림 [http://cgit.freedesktop.org/systemd/systemd/tree/README README] 파일에서 "REQUIREMENTS" 섹션을 참고하십시오.

=== {{Path|/run}} 디렉터리 ===

{{Path|/run}} 디렉터리는 systemd가 사용하며 또한 기타 프로그램의 경우{{Path|pid}} 파일, 소켓, 상태 파일과 같은 실행 시간 데이터를 저장하는 반영구 저장소로 활용합니다.

systemd 꾸러미에서는 자체적으로 {{Path|/run}} 디렉터리를 만듭니다. 그러나 이러한 변경 동작은 [[OpenRC]] 에서도 마찬가지로 자동 마운트와 타 프로그램 꾸러미에서의 해당 파일 시스템 사용에  영향을 준다는 점을 참고하셨으면 합니다.

==={{Path|/etc/mtab}}===

업스트림에서는 {{Path|/proc/self/mounts}}로 연결하는 {{Path|/etc/mtab}} 심볼릭 링크 파일만 지원합니다. 이 심볼릭 링크를 만들지 않으면 <tt>mount</tt> ({{bug|434090}})와 <tt>df</tt> ({{bug|477240}})에서 문제가 발생합니다. 예전에는 일부 프로그램에서 (마운트 옵션과 같은) 정보를 {{Path|/etc/mtab}}에 써서 일반 파일이었습니다. 이제 모든 프로그램이 이 문제를 해결하도록 지원합니다. 여전히, 이 파일을 심볼릭 링크로 만들기 전에 보고된 문제점으로 하여금 시스템이 영향을 받는지 알아보려면 {{bug|477498}} 버그를 확인해보십시오.

심볼릭 링크를 만들려면 다음 명령을 실행하십시오:

{{RootCmd|ln -sf /proc/self/mounts /etc/mtab}}

=== 부팅 시간에 /usr이 나타나는지 확인하기 ===

{{Path|/usr}} 설정을 나누려면 [[initramfs]]를 활용하여 systemd를 시작하기 전에 {{Path|/usr}}를 마운트하십시오. 절차는 [[Initramfs/Guide|Initramfs 젠투 안내서]]를 참고하십시오.

=== LVM2 와 Initramfs 사용하기===

[[LVM|sys-fs/lvm2]]를 사용하여 시스템을 initramfs로 부팅하려 할 때, {{Package|sys-kernel/genkernel-next}}의 다음 명령을 사용하면 initramfs를 만듭니다:

{{RootCmd|genkernel --udev --lvm <target>}}

<code><target></code>은 <code>initramfs</code>나 initramfs 생성 결과인 기타 genkernel 타겟 중 하나입니다. 자세한 내용은 <tt>genkernel --help</tt> 출력 내용을 살펴보십시오:

{{Cmd|genkernel --help}}

LVM을 사용한다면, 이에 따라 <tt>lvmetad</tt> 데몬을 시작해야 합니다. 그렇지 않으면 systemd에서 LVM 볼륨을 마운트할 수 없습니다. <tt>lvmetad</tt>은 {{Path|/etc/lvm/lvm.conf}}에서 활성화할 수 있습니다:

{{FileBox|filename=/etc/lvm/lvm.conf|title=lvm.conf에서 바꿀 필요가 있는 부분|lang=ini|1=
# Set use_lvmetad to '1' for systemd
use_lvmetad {{=}} 1
}}

{{Note/ko|{{Path|/etc/lvm/lvm.conf}}를 수정하는 대신, {{Path|lvmetad.service}}를 활성화하는  {{Path|lvmetad.socket}} 유닛으로도 해결할 수 있을지 모르겠지만, 아직까지는 {{Package|sys-fs/lvm2}}에서 지원하지 않습니다.}}

== 설치 ==

{{Package|sys-apps/systemd}}에 udev가 있습니다. 일단 설치하면, {{Package|virtual/udev}}의 프로바이더가 systemd가 되므로 {{Package|sys-fs/udev}}를 제거할 수 있습니다.

<code>systemd</code> USE  플래그를({{Path|make.conf}}에서) 전체적으로 활성화하십시오. <tt>systemd-logind</tt> 서비스와 충돌하는 현상을 막으려면  <code>consolekit</code> USE 플래그를 비활성해야합니다. 분명한 USE 플래그를 기본으로 사용하려 systemd 하위 프로파일로 전환할 수도 있는데, 이런 경우 {{Path|make.conf}}의 설정을 바꿀 필요는 없습니다.

{{RootCmd|eselect profile list}}

마지막으로 새 플래그로 시스템을 업데이트하십시오:

{{RootCmd|emerge -avDN @world}}

의존성 문제가 발생하면({{Package|sys-apps/systemd}}를 막는 {{Package|sys-fs/udev}}), {{Package|sys-fs/udev}}가 world 파일에 등록한 상태일수도 있습니다. 선택을 취소하여 이 문제를 해결해보십시오:

{{RootCmd|emerge --deselect sys-fs/udev}}

== systemd로 부팅 ==

systemd를 실행하려면, 실행 커널(또는 initramfs)이 활용하는 <tt>init</tt>을 전환해야합니다.

{{Warning/ko|이전 서비스 관리자용 설정 서비스는 자동으로 시작하지 않습니다. 시스템이 다른 서비스 관리자로 전환하기 때문입니다. 네트워크 또는 로그인 관리자와 같은 기능을 정상적인 기능을 하도록 되돌리려면, 이 서비스들 또한 활성화해야 합니다. 이에 대한 더 많은 정보는 이 글의 서비스 장에 있습니다.}}

{{Note/ko|마이그레이션을 멈춘 상태로 두면, init 변경 과정의 실행을 취소하고 되돌려서 기본 서비스 관리자(OpenRC)로 돌아가서 언제든 부팅할 수 있습니다. 이 동작은 이 글의 마지막 문제 해결 장을 통해 어떤 문제를 해결할 수 있도록 합니다.}}

다음 하위 장에서는 부팅 관리자 또는 커널에서 <tt>init</tt> 설정을 바꾸는 방법을 언급합니다.

=== 이전 Grub 버전 (0.x) ===

<code>init=/usr/lib/systemd/systemd</code> 매개 변수 값을 커널 명령줄에 추가하십시오. {{Path|grub.conf}}에서 온 예제는 다음과 같습니다:

{{FileBox|filename=/boot/grub/grub.conf|title=systemd용 GRUB 설정|1=
title=Gentoo with systemd
root (hd0,0)
kernel /vmlinuz root=/dev/sda2 init=/usr/lib/systemd/systemd
}}

OpenRC로 시스템을 부팅할 경우 <code>init</code> 대신 <code>real_init</code> 를 사용하십시오.

=== Grub 2 ===

{{c|grub2-mkconfig}}를 사용할 때,  init 옵션을 <var>GRUB_CMDLINE_LINUX</var> 에 붙여넣으십시오:

{{Note/ko|systemd에서 {{c|dracut}}이 만든 initramfs를 사용할 경우에는 initramfs 에서 이미 systemd를 시작했으므로 필요하지 않습니다.}}

{{FileBox|filename=/etc/default/grub|title=systemd용 GRUB 2 설정|lang=bash|1=
# Append parameters to the linux kernel command line
GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"
}}

GRUB 2 설정 파일을 직접 작성할 경우(전문가에게만 해당),  <code>init=</code> 매개 변수를 <code>linux</code> 또는 <code>linux16</code> 명령에 추가하십시오.

{{FileBox|filename=/boot/grub/grub.cfg|title=GRUB2 설정 일부 예제|1=
linux /vmlinuz-3.10.9 root=UUID=508868e4-54c6-4e6b-84b0-b3b28b1656b6 init=/usr/lib/systemd/systemd
}}

genkernel-next의 Initrd를 활용할 경우 <code>init</code> 대신 <code>real_init</code>를 사용하십시오.

=== 커널 설정 ===

init 설정은 커널 설정으로 하드코딩할 수 있습니다. "Processor type and features -> Built-in kernel command line" 부분을 참고하십시오. 이 기법은 <tt>grub</tt> 과 <tt>grub2</tt>에서 동작합니다.

=== 루트 암호 설정 ===

여기서 시스템 루트 암호 설정을 잊지 마십시오. 뭔가 잘못됐다면 systemd에서 관리 모드로 진입할 루트 암호를 물어봅니다.

== 설치 후 설정 ==

systemd에서는 대부분의 기본 시스템 세부 정보 설정할 몇가지 시스템 설정 파일을 지원합니다.

{{Note/ko|어떤 시스템 설정 매개 변수는 적당한 설정 파일을 수정해서 업데이트 할 수 있습니다만 대부분의 설정은 systemd 동작이 필요한 유틸리티로 관리합니다. 이 경우 systemd로 안전하게 다시 부팅한 후 필요한 대로 <tt>hostnamectl</tt>, <tt>localectl</tt>, <tt>timedatectl</tt>를 활용하십시오.}}

=== 호스트 이름 ===

호스트 이름을 설정하려면 {{Path|/etc/hostname}}를 만들거나 편집하여 원하는 호스트 이름을 넣으십시오.

systemd로 부팅할 때, {{Path|/etc/hostname}}와 {{Path|/etc/machine-info}}를 편집하는  {{c|hostnamectl}} 도구가 있습니다. 호스트 이름을 바꾼다면, 다음처럼 명령을 실행하십시오.

{{RootCmd|hostnamectl set-hostname <HOSTNAME>}}

더 많은 옵션은 {{c|man hostnamectl}}를 참고하십시오.

<!--
{{FileBox|filename=/etc/machine-info|title=로컬 머신 정보 입력용 설정 파일.|lang=bash|1=
PRETTY_NAME="Larry's Computer"
ICON_NAME="computer-laptop"
}}
-->

=== 로캘 ===

보통 로캘은 systemd를 설치할 때 OpenRC에서 적절하게 가져옵니다. 필요하다면 젠투 핸드북에 언급된 절차대로 {{Path|/etc/locale.conf}}에서 설정할 수 있습니다.

{{FileBox|filename=/etc/locale.conf|title=System locale configuration|lang=bash|1=
LANG="en_US.utf8"
}}

systemd로 부팅 했다면 <tt>localectl</tt> 도구로 로캘, 콘솔, X11 키 배치를 설정할 수 있습니다. 시스템 로캘을 바꾸려면, 다음 명령을 실행하십시오:

{{RootCmd|localectl set-locale LANG<nowiki>=</nowiki><LOCALE>}}

가상 콘솔 키 배치를 바꾸려면:

{{RootCmd|localectl set-keymap <KEYMAP>}}

마지막으로 X11 배치를 설정하려면:

{{RootCmd|localectl set-x11-keymap <LAYOUT>}}

모델에서 필요하다면, 변수 및 옵션 값을 설정할 수 있습니다:

{{RootCmd|localectl set-x11-keymap <LAYOUT> <MODEL> <VARIANT> <OPTIONS>}}

=== 날짜와 시간 ===

날짜와 시간은 <tt>timedatectl</tt> 유틸리티로 설정할 수 있습니다. 이 유틸리티에서는 {{Package|net-misc/ntp}} 또는 systemd의 자체 구현체가 아닌 다른 구현체 없이 시간 동기화를 처리하도록 설정할 수 있습니다.

<tt>timedatectl</tt> 사용 방법을  알아보려면 간단하게 다음처럼 실행하십시오:

{{RootCmd|timedatectl --help}}

=== 자동 모듈 불러오기 ===

자동 모듈 불러오기는 파일의 디렉리가 아닌, 각자 다른 파일에 설정합니다. 설정 파일은 {{Path|/etc/modules-load.d}} 에 있습니다. 부팅 과정에서 모듈 목록에 있는 파일을 불러옵니다. 파일 형식은 개행 문자로 구분한 모듈 목록이며, {{Path|.conf}}를 붙여 파일 이름이 길어질 수 있습니다. 모듈 불러오기 동작은 프로그램, 서비스 또는 개인으 취향에 따른 방직으로 나눌 수 있습니다.  하단의 예제를 통해 <tt>virtualbox.conf</tt>를 보여드리겠습니다:

{{FileBox|filename=/etc/modules-load.d/virtualbox.conf|title=virtualbox 모듈용 예제 파일|1=
vboxdrv
vboxnetflt
vboxnetadp
vboxpci
}}

=== 네트워크 ===

==== systemd-networkd ====

systemd-networkd는 유선 네트워크 인터페이스를 설정할 때 쓸만합니다. 기본적으로는 비활성화 상태입니다.

systemd-networkd를 설정하려면 {{Path|/etc/systemd/network}}의 {{Path|*.network}} 파일을 만드십시오. [http://www.freedesktop.org/software/systemd/man/systemd.network.html systemd.network(5)]를 참고하십시오. 간단한 DHCP 설정을 예로 아래에 보여드립니다:

{{FileBox|filename=/etc/systemd/network/50-dhcp.network
|1=[Match]
Name=en*
 
[Network]
DHCP=yes}}

{{RootCmd|systemctl enable systemd-networkd.service
|systemctl start systemd-networkd.service}}

systemd-networkd는 기본적으로 {{Path|resolv.conf}}를 업데이트 하지 ㅇ낳습니다. systemd에서 DNS 설정을 관리하려면 {{Path|resolv.conf}}를 심볼릭 링크로 바꾸고 systemd-resolved를 시작하십시오.

{{RootCmd|ln -snf /run/systemd/resolve/resolv.conf /etc/resolv.conf
|systemctl enable systemd-resolved.service
|systemctl start systemd-resolved.service}}

==== NetworkManager ====

NetworkManager는 주로 네트워크를 설정할 때 사용합니다. 이 용도로, X11 기반으로 동작하는 데스크톱을 사용한다면 간단하게 다음 명령을 실행하십시오.

{{RootCmd|nm-connection-editor}}

이 경우가 아니라 콘솔에서 네트워크를 설정해야 한다면,  [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Using_the_NetworkManager_Command_Line_Tool_nmcli.html nmcli]를 사용해보시거나, <tt>nmtui</tt>를 통해 설정 안내 과정을 따라가십시오:

{{RootCmd|nmtui}}

[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Networking_Config_Using_nmtui.html nmtui]은 콘솔에서 실행할 경우, 사용자에게 설정 과정을 안내하는 curses 프론트엔드입니다.

=== 로그 파일 처리 ===

systemd에는 ({{Package|app-admin/syslog-ng}} 나 {{Package|app-admin/rsyslog}} 같은) 외부 로그 시스템에 의존할 필요 없이 로그 파일을 자체적으로 처리하는 수단을 지니고 있습니다. 이제 메시지는 <tt>journalctl</tt>로 읽어볼 수 있습니다. 허나 로그를 처리하는데 적당한 외부 도구로도 설정할 수 있습니다. 개인적인 요구에 맞춘 journald 설정 방법을 알아보려면 <kbd>man journald.conf</kbd>를 입력하십시오.

=== tmpfs에 있는 /tmp ===

{{Path|/etc/fstab}}에서 {{Path|/tmp}}에 어떤 다른 파일 시스템을 마운트하지 않으면 systemd에서는 {{Path|/tmp}}를 tmpfs로 마운트합니다. 이는 매번 부팅할 때마다 비어있고 시스템에 장착한 RAM 용량의  50%로 제한된 상태임을 의미합니다. 왜 이런 동작이 타당한지, 이 설정을 어떻게 수정하는지 알아보려면 [http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ API File Systems]를 살펴보십시오.

=== 부팅 과정 세부 설정 ===

systemd로 이전하는 과정에서 사용자 여러분은 보통 부팅 과정 출력 내용 규모가 다르다는걸 눈치챕니다:

* <code>quiet</code> 부팅 옵션은 커널 출력에만 영향을 줄 뿐만 아니라, systemd 자체에도 영향을 줍니다. 머신에 systemd를 설정한다면, 언제든 일어나는 오류를 쉽게 살펴보려면 이 옵션을 치워놓으십시오. 오류를 다 해결하고 다시 추가하면 잠잠한(그리고 빠른) 부팅 과정을 진행할 수 있습니다.
* <code>quiet</code> 부팅 옵션을 전달해도, 어차피 systemd 에서는 <code>systemd.show_status=1</code> 설정을 전달하여 상태를 표시하도록 설정할 수 있습니다.
* <code>quiet</code> 부팅 옵션을 설정하지 않으면, 일부 메시지를 콘솔에 겹쳐 출력할 수 있습니다. 이는 커널 설정에 기인합니다(<kbd>man 5 proc</kbd>의 {{Path|/proc/sys/kernel/printk}} 참조). 이 설정을 조절하려면, <code>loglevel=5</code> 부팅 매개 변수를 커널에 전달하십시오(그리고 설정에 따라 값을 업데이트 하십시오. 예를 들어, 가장 작은 값은 1입니다.).

== 서비스 ==

시스템에서 어떨 때는 systemd를 (시스템 모드로) 동작하게 하려 다시 부팅할 필요가 있을 수도 있습니다. 다시 부팅하기 전에는, 가능한한 완벽하게 systemd를 설정했는지 확인하려는 목적으로 이 문서를 전반적으로 읽어내려가십시오. 참고로 <tt>journalctl</tt>은 systemd가 동작하지 않아도 동작하지만, <tt>systemctl</tt>은 systemd가 동작하지 않으면 무용지물입니다. systemd가 동작하는 시스템에 로그인 한 후 서비스 설정(서비스 활성화 및 시작)을 완료하십시오.

=== OpenRC 서비스 ===

systemd가 근본적으로 이전 Init.d 스크립트 동작을 지원하도록 의도했지만, 지원 기능이 독립기반 OpenRC에 적합하지 않기 때문에 젠투에서는 완전히 먹통입니다. OpenRC는 OpenRC를 시스템 부팅 과정에서 사용하지 않았을 경우 init.d 스크립트를 실행할 수 없는지 확인(그렇지 않으면 결과를 예상할 수 없습니다)하는 추가 도구를 제공합니다.

=== 존재 서비스 목록 ===

존재하는 모든 서비스 유닛은 <tt>systemctl</tt>에 <code>list-units</code> 매개 변수를 붙여 목록을 확인할 수 있습니다:

{{RootCmd|systemctl list-units|output=<pre>
UNIT                               LOAD   ACTIVE SUB       DESCRIPTION
boot.automount                     loaded active waiting   EFI System Partition Automount
proc-sys-fs-binfmt_misc.automount  loaded active waiting   Arbitrary Executable File Formats File System Automount Point
...
</pre>}}

다음 파일 접미부 항목은 자주 사용하는 요소입니다:

{| class="table"
! 접미부
! 설명
|-
| {{Path|.service}}
| 일반 서비스 파일 (예. 데몬을 직접 실행),
|-
| {{Path|.socket}}
| 소켓 리스너 (''inetd''와 유사),
|-
| {{Path|.path}}
| 서비스용 파일 시스템 트리거(파일을 바꾸는 등의 동작이 일어날 때 실행하는 서비스).
|}

Alternatively the <tt>systemctl</tt> tool can be used to list all services (including implicit ones):

{{RootCmd|systemctl --all --full}}

And finally check for services that failed to start:

{{RootCmd|systemctl --failed}}

=== 서비스 활성화, 비활성화, 시작, 중단 ===

일반적인 서비스 활성화 방식은 다음 명령을 사용합니다:

{{RootCmd|systemctl enable foo.service}}

서비스는 다음과 같이 비활성화 할 수 있습니다:

{{RootCmd|systemctl disable foo.service}}

이 명령은 기본 대상의 기본 이름으로 서비스를 활성화합니다(각각의 내용은 서비스 파일의 "Install" 섹션에 설정했습니다). 그러나 가끔 서비스는 이런 정보 또는 사용자가 원하는 다른 이름/타겟을 제공하지 않기도 합니다.

Note that these commands only enable or disable the system to be started on a next boot; to start the service right now, use:

{{RootCmd|systemctl start foo.service}}

Services can be stopped likewise:

{{RootCmd|systemctl stop foo.service}}

=== 개별 유닛 설치 ===

개별 유닛 파일은 <tt>systemctl daemon-reload</tt>를 실행한 후 systemd에서 인식할 {{Path|/etc/systemd/system}}에 놓을 수 있습니다:

{{RootCmd|systemctl daemon-reload}}

{{Path|/usr/lib/systemd/system}}는 꾸러미 관리자에서 설치한 서비스 파일용으로 예약되어 있습니다.

=== 유닛 파일 개별 설정 ===

유닛의 중요하지 않은 설정을 바꿀 필요가 있다면, {{Path|/etc/systemd/system}}에서 원래 유닛 파일의 완전한 사본을 만들 필요가 없습니다. 원본 유닛 이름 뒤에 {{Path|*.d}}가 붙은 디렉터리에서 해당 설정 파일을 넣으면 유닛에서 제공하는 꾸러미 관리 설정을 바꿀 수 있습니다.

{{FileBox|filename=/etc/systemd/system/apache2.d/mem-limit.conf|title=서비스 파일에 설정 추가/덮어쓰기 예제|lang=ini|1=
[Service]
MemoryLimit{{=}}1G
}}

바뀐 내용을 systemd 에 알리려면 systemd를 다시 불러와야합니다:

{{RootCmd|systemctl daemon-reload}}

이제  바뀐 내용을 적용하려면 서비스를 다시 시작해야 합니다:

{{RootCmd|systemctl restart apache2}}

서비스에 바뀐 속성을 적용했는지 확인하십시오:

{{RootCmd|systemctl show --property{{=}}MemoryLimit apache2|output=<pre>MemoryLimit=1074000000</pre>}}

=== 개별 설정 이름으로 서비스 활성화 ===

When the name provided by "Alias" in the unit's "[Install]" section does not meet the expectations and providing a permanent new value for this through a [[#Customizing unit files|customization]] is not desired, a symlink can be created manually in {{Path|/etc/systemd/system/*.wants/}}. The name of the {{Path|*.wants}} directory can either specify a target or another service which will depend on the new one.

For example, to install {{Path|mysqld.service}} as {{Path|db.service}} in the {{Path|multi-user.target}}:

{{RootCmd|ln -s /usr/lib/systemd/system/mysqld.service /etc/systemd/system/multi-user.target.wants/db.service}}

To disable the service, just remove the symlink:

{{RootCmd|rm /etc/systemd/system/multi-user.target.wants/db.service}}

=== 자체 서비스 ===

Some of Gentoo packages already install systemd unit files. For these services, it is enough to enable them. A quick summary of packages installing unit files can be seen on [http://qa-reports.gentoo.org/output/eclass-usage/systemd.txt systemd eclass users list].

The following table lists systemd services matching OpenRC ones:

{| class="table" style="text-align: center;"
|+ Migration chart
|-
! scope="col" | Gentoo package
! scope="col" | OpenRC service
! scope="col" | systemd unit 
! scope="col" | Notes
|-
! scope="row" rowspan="28" | {{Package|sys-apps/openrc}}
| bootmisc || systemd-tmpfiles-setup.service || always enabled, uses {{Path|tmpfiles.d}}
|-
| consolefont || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| devfs ||  || 
|-
| dmesg ||  || 
|-
| fsck || fsck*.service || pulled in implicitly by mounts
|-
| functions.sh || See note || {{Bug|373219}}
|-
| hostname || (builtin) || {{Path|/etc/hostname}}
|-
| hwclock || See note || always enabled as part of systemd (ie It is baked in and is not a unit)
|-
| keymaps || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| killprocs ||  || 
|-
| local ||  || 
|-
| localmount || local-fs.target || actual units are created implicitly from fstab
|-
| modules || systemd-modules-load.service || always enabled, uses {{Path|/etc/modules-load.d/*.conf}}
|-
| mount-ro ||  || 
|-
| mtab ||  || 
|-
| netmount || remote-fs.target || 
|-
| numlock ||  || 
|-
| procfs || (builtin) || 
|-
| root || remount-rootfs.service || 
|-
| savecache || n/a || OpenRC internals
|-
| staticroute ||  || 
|-
| swap || swap.target || actual units are created implicitly from fstab
|-
| swclock ||  || 
|-
| sysctl || systemd-sysctl.service || {{Path|sysctl.conf}} and {{Path|sysctl.d/}}
|-
| sysfs || (builtin) || 
|-
| termencoding || systemd-vconsole-setup.service || always enabled, uses {{Path|vconsole.conf}}
|-
| scope="row" rowspan="2" | urandom
| systemd-random-seed-load.service || 
|-
| systemd-random-seed-save.service || 
|-
! scope="row" | {{Package|app-admin/rsyslog}}
| rsyslog || rsyslog.service || 
|-
! scope="row" | {{Package|app-admin/syslog-ng}}
| syslog-ng || syslog-ng.service || 
|-
! scope="row" rowspan="2" | {{Package|media-sound/alsa-utils}}
| scope="row" rowspan="2" | alsasound
| alsa-store.service || (enabled by default)
|-
| alsa-restore.socket || (enabled by default)
|-
! scope="row" | {{Package|net-misc/dhcpcd}}
| dhcpcd || dhcpcd.service || 
|-
! scope="row" rowspan="5" | {{Package|net-misc/netifrc}} 
| scope="row" rowspan="5" | net.*
| net@.service || systemd wrapper for net.* scripts (comes with net-misc/netifrc)
|-
| netctl@.service || net-misc/netctl is originally an Arch Linux tool.
|-
| NetworkManager.service || For &lt;networkmanager-0.9.8.4 : enable NetworkManager-dispatcher.service for dispatcher.d scripts to work. <br/> Enable NetworkManager-wait-online.service to detect that the system has a working internet connection.<br/>Disable all other managers (e.g., wicd, dhcpcd) and wpa_supplicant.
|-
| dhcpcd.service || Provided by net-misc/dhcpcd
|-
| systemd.networkd.service || Part of systemd
|-
! scope="row" | {{Package|net-misc/openntpd}}
| ntpd || ntpd.service ||
|-
! scope="row" rowspan="2" | {{Package|net-misc/openssh}}
| scope="row" rowspan="2" | sshd
| sshd.service || runs sshd as a daemon
|-
| sshd.socket || runs sshd on a inetd-like basis (for each incoming connection)
|-
! scope="row" rowspan="2" | {{Package|net-misc/wpa_supplicant}}
| scope="row" rowspan="2" | wpa-supplicant
| wpa_supplicant.service || D-Bus controlled daemon (e.g. for NetworkManager)
|-
| wpa_supplicant@.service || interface-specific wpa_supplicant (used like {{Path|wpa_supplicant@wlan0.service}})
|-
! scope="row" rowspan="3" | {{Package|net-print/cups}}
| scope="row" rowspan="3" | cupsd
| cups.service || classic on-boot start up service
|-
| cups.socket
| scope="row" rowspan="2" | socket and path activation (cups only started on-demand)
|-
| cups.path
|-
! scope="row" | {{Package|net-wireless/bluez}}
| bluetooth || bluetooth.service || 
|-
! scope="row" rowspan="2" | {{Package|sys-apps/dbus}}
| scope="row" rowspan="2" | dbus
| dbus.service || 
|-
| dbus.socket || 
|-
! scope="row" | {{Package|sys-apps/irqbalance}}
| irqbalance || irqbalance.service || supports daemon mode only
|-
! scope="row" | {{Package|sys-apps/microcode-ctl}}
| microcode_ctl ||  || Configure ''microcode'' as a '''module''' to let it load the microcode itself. Go to "Processor type and features" -> "CPU microcode loading support" and remember to add the option you need depending on you having intel or amd processor.
|-
! scope="row" rowspan="4" | {{Package|sys-fs/udev}}
| udev || udev.service || 
|-
| udev-mount || (builtin) || <tt>/dev</tt> is mounted as tmpfs
|-
| udev-postmount || udev-trigger.service || 
|-
| || udev-settle.service || 
|-
! scope="row" | {{Package|sys-power/acpid}}
| acpid || acpid.service || Most of its functionality is done by systemd itself, then, maybe you could consider to stop enabling this
|-
! scope="row" | {{Package|x11-apps/xdm}}
| (xdm) || xdm.service || OpenRC uses common xdm init.d installed by {{Package|x11-base/xorg-server}}. With systemd you will need to enable corresponding unit file for each DM (gdm.service, kdm.service...)
|-
! scope="row" rowspan="2" | {{Package|net-firewall/iptables}}
| scope="row" rowspan="2" | iptables
| iptables-store.service || 
|-
| iptables-restore.service || 
|-
|}

=== 타이머 서비스 ===

Since version 197 systemd supports timers, making cron unnecessary on a systemd system. Since version 212 persistent services are supported, replacing even anacron. Persistent timers are run at the next opportunity if the system was powered down when the timer was scheduled.

The following is an example on how to make a simple timer that runs in the context of a user. It will even run if the user is not logged in. Every timed service needs a timer and a service file that is activated by the timer as follows:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.timer|title=매일 동작하는 타이머 예제|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=no
 
[Timer]
Persistent=false
OnCalendar=Mon-Fri *-*-* 11:30:00
Unit=backup-work.service
 
[Install]
WantedBy=default.target
}}

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=백업을 실행하는 서비스 예제|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

우선 systemd에 서비스 파일을 다시 검색하라고 요청하십시오:

{{Cmd|systemctl --user daemon-reload}}

다음 명령을 통해 직접 백업을 실행할 수 있습니다:

{{Cmd|systemctl --user start backup-work.service}}

다음과 같이 타이머를 직접 시작하고 멈춰보십시오.

{{Cmd|systemctl --user start backup-work.timer}}
{{Cmd|systemctl --user stop backup-work.timer}}

마지막으로, 매번 시스템을 시작할 때마다 타이머를 활성화하려면, 다음 명령을 실행하십시오:

{{Cmd|systemctl --user enable backup-work.timer}}

To check the last results of running the service:

{{Cmd|systemctl --user list-timers}}

=== 전자메일 처리 실패 ===

If a timed service runs and fails an e-mail can be send out to inform the user or administrator. This is possible with the "OnFailure" stanza which specifies what should happen if a service fails. A failure is detected by a non-zero return code of the invoked script.

For that change the script as follows:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Example of a service triggering backup|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
OnFailure=failure-email@%i.service
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

This requires to have the service {{Path|failure-email@.service}} installed, which can be found in 
[https://github.com/kylemanna/systemd-utils/tree/master/onfailure kylemanna's systemd-utils repository].

==== Replacing cron ====

The above timer and service files can also be added to {{Path|/usr/lib/systemd/system}} to make them available system-wide. The install section should then say <code>WantedBy=multi-user.target</code> to enable the service at system start.

However, cron also runs the scripts in {{Path|/etc/cron.daily}} and other locations. Several packages place scripts there that they expect to be run daily. This behavior can be emulated with systemd by installing {{Package|sys-process/systemd-cron}}. Then activate the new cron replacement with the following commands:

{{RootCmd|systemctl enable cron.target}}
{{RootCmd|systemctl start cron.target}}

== Troubleshooting ==

* {{Bug|systemd|search=package}}
* {{Bug|systemd|search=product|site=fdo}}
* [http://freedesktop.org/wiki/Software/systemd/Debugging Upstream debugging guide]

=== Graphical sessions opened in random places ===

By default systemd only launches a <tt>getty</tt> process when it's going to be used. This causes some display managers (like GDM) to use the remaining TTYs for opening graphical sessions on demand, which can result in having consoles and graphical sessions placed randomly depending on the order they were used.

To stick with a more "classical" behavior (i.e, consoles placed from {{Path|tty1}} to {{Path|tty6}} and graphical sessions using the remaining TTYs) force it to always launch <tt>getty</tt> on those:

{{RootCmd|systemctl enable getty@tty{2,3,4,5,6}.service}}

=== lvm ===

When switching from OpenRC to systemd and lvm is needed to properly mount the system volumes, activate the lvm service:

{{RootCmd|systemctl enable lvm2-monitor.service}}

While it might not be needed for activation of the root volume (if lvm is integrated into the initramfs) it might not work for other lvm volumes, unless the service is activated.

=== systemd-bootchart ===

{{KernelBox|title=systemd-bootchart support|1=<pre>
File systems  --->
	Pseudo filesystems --->
	[*] /proc file system support
Kernel hacking  --->
	[*] Kernel debugging
	[*] Collect scheduler debugging info
	[*] Collect scheduler statistics
</pre>}}

As systemd-bootchart attempts to start {{Path|/sbin/init}}, reconfigure it to invoke systemd instead:

{{FileBox|filename=/etc/systemd/bootchart.conf|lang=bash|1=
...
Init=/usr/lib/systemd/systemd
...
}}

The result of the bootchart is a report in SVG format located in {{Path|/run/log/}}.

=== syslog-ng conflicts with systemd ===

systemd creates {{Path|/dev/log}} as datagram socket <ref>Jose Pedro Oliveira. [https://bugzilla.redhat.com/show_bug.cgi?id=770810#c10 Note about custom syslog-ng configurations files], [https://bugzilla.redhat.com/ Red Hat Bugzilla], January 11, 2012. Retrieved on January 12th, 2015</ref> <ref>[https://fedoraproject.org/wiki/Common_F16_bugs#systemd-syslog-ng-problems Systemd and syslog-ng interaction problems: system freezes / syslog-ng fails to start], [https://fedoraproject.org/wiki/Fedora_Project_Wiki Fedora Project Wiki]. Retrieved on January 12th, 2015</ref> so syslog-ng needs to be told to read from a ''unix-dgram'' instead of a ''unix-stream'' as otherwise syslog-ng would be using a "wrong" stream:

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# By default syslog-ng uses unix-stream. Comment this out and add unix-dgram instead.
# unix-stream('/dev/log');
unix-dgram('/dev/log');
}}

=== sys-fs/cryptsetup configuration ===

systemd does not seem to respect {{Path|/etc/conf.d/dmcrypt}} (see {{bug|429966}}) so it needs to be configured through the {{Path|/etc/crypttab}} file:

{{FileBox|filename=/etc/crypttab|title=Configuration file for encrypted block devices|1=
crypt-home UUID=c25dd0f3-ecdd-420e-99a8-0ff2eaf3f391 -
}}

You may need to create a new service file from your {{Path|/etc/crypttab}} file.
To do this, enable the <code>cryptsetup</code> USE flag for {{Package|sys-apps/systemd}}. It will install {{Path|/usr/lib/systemd/system-generators/systemd-cryptsetup-generator}}. Executing it will create a service file in {{Path|/tmp/}}, which you can now copy to {{Path|/etc/systemd/system}}, adjust manually and add to the desired runlevel.

=== Check for units that failed to start ===

Check for units that failed to start with:

{{RootCmd|systemctl --failed}}

=== 디버깅 모드 활성화 ===

자세한 내용은 {{Path|/etc/systemd/system.conf}}의 다음 부분을 참고하십시오:

{{FileBox|filename=/etc/systemd/system.conf|lang=bash|1=
LogLevel=debug
}}

또는 tty9에서 터미널을 여는 debug-shell을 활성화하십시오. 부팅 과정을 진행하는 동안 디버깅 서비스 동작을 돕습니다.

{{RootCmd|systemctl enable debug-shell.service}}

=== e4rat 사용법 ===

{{Path|/etc/e4rat.conf}}를 편집하여 'init'를 {{Path|/usr/lib/systemd/systemd}}로 설정하는 것을 잊지 마십시오. 그렇지 않으면 OpenRC로 부팅합니다.

=== GRSecurity 강화 ===

grsecurity를 활성화하면, systemd-networkd에서 다음 오류를 로그로 남깁니다:

{{CodeBox|title=systemd-networkd 오류|1=could not find udev device: Permission denied}}

비 루트 사용자가 grsecurity를 사용하는 상황에서 각 사용자에게 {{Path|/sys}} 파일 시스템 구조에 완전히 접근하려는 시도를 막기 때문에 systemd-networkd에서 오류가 발생합니다. 이 옵션을 비활성화하려면 <code>CONFIG_GRKERNSEC_SYSFS_RESTRICT</code> 커널 옵션을 비활성화하십시오.

== 추가 참조 ==

* [[Comparison of init systems]] - 젠투 Init 시스템과의 차이점을 반영한 게시글.
* [[Sakaki's_EFI_Install_Guide|Sakaki's EFI Install Guide]] -  [[Sakaki's_EFI_Install_Guide/Configuring_systemd_and_Installing_Necessary_Tools|Configuring systemd and installing necessary tools]] 만 참고하세요.
* [[OpenRC to Systemd Cheatsheet]]

== 외부 자료 ==

* [http://www.freedesktop.org/wiki/Software/systemd/FrequentlyAskedQuestions FAQ]
* [http://www.freedesktop.org/wiki/Software/systemd/TipsAndTricks Tips and tricks]

== 참고 자료 ==

{{reflist}}

[[Category:Init systems]]
