<languages />

{{Metadata|abstract=В этом документе описано использование общих ключей SSH вместе с программой keychain. Предполагается базовое знание криптографии с открытым ключом.}}

В этом документе описано использование общих ключей SSH вместе с программой keychain. Предполагается базовое знание криптографии с открытым ключом.

== Основы ==

=== Рассматриваемая проблема ===

Необходимость вводить логин и пароль для каждого в каждой системе неудобна, особенно если под управлением находится множество систем. У некоторых администраторов, возможно, даже имеется скрипт или cron-задача, которые упрощают использование ssh соединения. Так или иначе, у этой проблемы есть решение, и оно начинается с аутентификации с открытым ключом. 

=== Как работает аутентификация с открытым ключом? ===

Предположим, что клиент хочет соединиться с демоном ssh на сервере. Клиент сначала генерирует пару ключей и пересылает открытый ключ на сервер. Затем, каждый раз, когда клиент попытается подключиться к серверу, тот отправит зашифрованный открытым ключом запрос. Только обладатель соответствующего закрытого ключа (то есть клиент) способен его расшифровать, так что правильный ответ приведёт к успешной аутентификации. 

== Как использовать аутентификацию с открытым ключом ==

=== Генерация ключевой пары ===

Сперва необходимо создать ключевую пару. Для этого воспользуйтесь командой {{c|ssh-keygen}}: 

{{Cmd|ssh-keygen}}

Оставьте все значения по умолчанию и удостоверьтесь, что ввели надежную ключевую фразу.

{{Warning|Убедитесь, что выбрали надежную ключевую фразу, особенно если этот ключ используется для входа в качестве пользователя root!}}

После завершения генерации закрытый ключ будет находиться в {{Path|~/.ssh/id_rsa}}, а открытый ключ — в {{Path|~/.ssh/id_rsa.pub}}. Открытый ключ готов для копирования на удаленный узел.

=== Подготовка сервера ===

Файл {{Path|~/.ssh/id_rsa.pub}} необходимо скопировать на сервер, на котором запущен {{c|sshd}}. Он должен быть добавлен в файл {{Path|~/.ssh/authorized_keys}}, который принадлежит соединяющемуся пользователю на удаленном сервере. После предоставления персоналом инфраструктуры {{c|ssh}} доступа к серверу, следующие шаги могут быть использованы для настройки автоматического входа с использованием открытого ключа на удаленный сервер:

{{Cmd|scp ~/.ssh/id_rsa.pub server_user@server:~/myhost.pub
|ssh server_user@server "cat ~/myhost.pub &gt;&gt; ~/.ssh/authorized_keys"
|ssh server_user@server "cat ~/.ssh/authorized_keys"}}

Вывод команды из последней строки должен отобразить содержимое файла {{Path|~/.ssh/authorized_keys}}. Убедитесь, что этот вывод выглядит корректно.

=== Тестирование настройки ===

В теории, если всё прошло успешно, а {{c|ssh-демон}} на сервере это позволяет (что может быть настраиваться отдельно), беспарольное подключение по {{c|ssh}} к серверу должен быть уже доступен. Закрытый ключ клиента всё равно будет необходимо дешифровать ключевой фразой, указанной ранее, однако не следует её путать с паролем учетной записи пользователя на сервере.

{{Cmd|ssh <server_user>@<server>}}

Такая команда должна запросить фразу-пароль для {{Path|id_rsa}}, а затем предоставить доступ к серверу через {{c|ssh}} как пользователю <code><server_user></code>. Если это не так, зайдите как <code><server_user></code>, и проверьте содержимое в {{Path|~/.ssh/authorized_keys}}, что каждая запись (публичный ключ) находится на отдельной строке. Также будет хорошей идеей проверить конфигурацию sshd для того, чтобы убедиться что он позволяет использование авторизации с открытым ключом, когда это доступно.

В этом месте, читающий возможно подумает: "Какая разница, я просто заменил один пароль на другой?!" Успокойтесь, в следующем разделе будет продемонстрировано, как мы можем использовать это, чтобы вводить фразу-пароль только один раз и повторно использовать (расшифрованный) ключ для многократного входа.

== Как сделать аутентификацию с открытым ключом удобной ==

=== Обычное управление ключами с помощью ssh-agent ===

Далее необходимо расшифровать закрытый ключ(и) один раз, и получить возможность свободно соединяться по ssh, без каких-либо паролей. Это как раз то, для чего предназначена программа {{c|ssh-agent}}. 

{{c|ssh-agent}} обычно запускается вначале X-сессии, или из сценария запуска оболочки, например {{Path|~/.bash_profile}} . Она работает путем создания доменного сокета Unix и регистрации подходящих переменных среды, так чтобы все последующие приложения могли воспользоваться ее сервисами, подсоединяясь к этому сокету. Очевидно, имеет смысл запускать ее только в родительском процессе X-сессии для использования набора расшифрованных закрытых ключей во всех последующих X-приложениях. 

{{Cmd|eval `ssh-agent`}}

{{Note|Этот {{c|ssh-agent}} будет хранить ключи расшифрованными пока он работает. Чтобы установить время существования ключей, используйте параметр <code>-t</code>, как описано в {{c|man ssh-agent}}.}}

При запуске, {{c|ssh-agent}} он должен сообщить PID запущенного ssh-agent, и также установить несколько переменных среды, а именно <var>SSH_AUTH_SOCK</var> и <var>SSH_AGENT_PID</var>. Он также должен автоматически добавить {{Path|~/.ssh/id_rsa}} к своему набору и запросить у пользователя соответствующую фразу-пароль. Если есть другие закрытые ключи, которые необходимо добавить к запущенному ssh-agent, то используйте команду {{c|ssh-add}}: 

{{Cmd|ssh-add somekeyfile}}

А теперь начинается магия. С готовым расшифрованным закрытым ключом, наконец, можно получить доступ к серверу (с настроенным открытым ключом) по ssh без ввода какого-либо пароля: 

{{Cmd|ssh server}}

Для того, чтобы выключить SSH-агент (после чего снова потребуется вводить фразу-пароль позже):

{{Cmd|ssh-agent -k}}

{{Note|Возможно, несколько процессов {{c|ssh-agent}} остались запущенными, особенно, если все делалось в первый раз, что требует приложить некоторые усилия. Эти процессы, как и другие, могут быть завершены, если запустить {{c|killall ssh-agent}}.}}

Чтобы с ssh-agent было еще более удобней работать, продолжайте читать следующую главу, описывающую использование keychain. Убедитесь, что завершили запущенный ssh-agent, так как keychain обрабатывает сессии {{c|ssh-agent}} самостоятельно.

=== Выжимание последней капли удобства из ssh-agent ===

Keychain позволит использовать ssh-agent заново между входами в систему, и, дополнительно, запрашивать фразу-пароль каждый раз, когда входит пользователь. Давайте сначала установим его:

{{Emerge|net-misc/keychain}}

Если предположить, что установка прошла успешно, то {{c|keychain}} уже можно использовать. Добавьте следующее в файл {{Path|~/.bash_profile}}, для того, чтобы включить его: 

{{CodeBox|title=Обеспечение доступа к keychain в .bash_profile|<pre>
keychain ~/.ssh/id_rsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>
}}

{{Note|Большее количество закрытых ключей можно добавить  в командной строке, по желанию. Также, если хотите чтобы запрашивало фразу-пароль каждый раз, когда открывается оболочка, добавьте параметр <code>--clear</code>.}}

{{Note|Если не используется оболочка bash, проверьте раздел '''EXAMPLES''' {{c|man keychain}} для поиска примеров использования в других оболочках. Основной идеей является запуск этих команд каждый раз, когда используется оболочка.}}

Теперь протестируем это. Сперва, убедитесь, что завершен процесс ssh-agent из предыдущего раздела, затем откройте новую оболочку, обычно простым входом, или открытием нового эмулятора терминала. Должен быть запрошен пароль для каждого ключа, который был указан в командной строке. Все оболочки открытые после этого, должны использовать ssh-agent заново, позволяя использовать беспарольное ssh соединение снова и снова. 

=== Использование keychain с KDE ===

KDE пользователи, вместо использования {{Path|~/.bash_profile}}, могут позволить KDE управлять программой ssh-agent за место них. Для того, чтобы это сделать, необходимо отредактировать файл {{Path|/etc/kde/startup/agent-startup.sh}}, который читается во время запуска KDE, и {{Path|/etc/kde/shutdown/agent-shutdown.sh}}, который запускается во время закрытия KDE. Здесь показано, как можно отредактировать эти файлы: 

{{CodeBox|title=Редактирование /etc/kde/startup/agent-startup.sh|1=
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
}}

{{CodeBox|title=Редактирование /etc/kde/shutdown/agent-shutdown.sh|1=
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
}}

Теперь, все, что необходимо сделать, это запустить эмулятор терминала по вкусу, например Konsole, и загрузить нужную связку ключей для использования. Например: 

{{Cmd|keychain ~/.ssh/id_rsa}}

Ключи будут запомнены до окончания KDE сессии (или пока не завершите процесс ssh-agent вручную).

=== Использование keychain с Plasma 5 ===

Как и выше для KDE4, за исключением необходимости заменить {{Path|/etc/kde}} на {{Path|/etc/plasma}}.

== Завершающие примечания ==

=== Соображения безопасности ===

Конечно же, использование ssh-agent может немного ухудшить безопасность системы. Если бы другой пользователь получил доступ к запущенной командной оболочке, он смог бы войти на все серверы без пароля. В результате, это является риском для серверов, и пользователи должны быть уверены в том, что они проконсультировались с местной политикой безопасности. Будьте уверены в том, что приняли все необходимые меры для обеспечения безопасности во всех сессиях. 

=== Устранение проблем ===

Большинство из описанного должно работать хорошо, но если все-таки столкнулись с проблемами, то следующие пункты могут помочь. 

* Если не можете соединиться без {{c|ssh-agent}}, попробуйте использовать ssh с опцией <code>-vvv</code>, чтобы узнать что произошло. Иногда, сервер не настроен для использования аутентификации с открытым ключом, иногда он настроен на запрашивание локальных паролей в любом случае! Если это как раз тот самый случай, попробуйте использовать с {{c|ssh}} параметр <code>-o</code>, или изменить файл конфигурации {{Path|sshd_config}} на сервере.
* Если подключение при использовании {{c|ssh-agent}} или {{c|keychain}} не работает, то это может быть потому что используемая командная оболочка не понимает используемые команды. Проконсультируйтесь с man-страницами для программ ssh-agent и keychain для поиска подробностей по работе с другими оболочками.

== Внешние ресурсы ==

* [http://www.funtoo.org/Keychain Официальная страница проекта Keychain] на Funtoo.org
* [http://www.funtoo.org/OpenSSH_Key_Management,_Part_1 Серия статей IBM developerWorks] описывающая концепции, стоящие за Keychain.


{{Migrated|originalauthors=Eric Brown, Marcelo Goes, nightmorph}}

[[Category:Server and Security]] 
[[Category:SSH]]
