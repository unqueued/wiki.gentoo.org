<languages />

{{Metadata|abstract=В этом документе описано использование общих ключей SSH вместе с программой keychain. Предполагается базовое знание криптографии с открытым ключом.}}

В этом документе описано использование общих ключей SSH вместе с программой keychain. Предполагается базовое знание криптографии с открытым ключом.

== Основы ==

=== Рассматриваемая проблема ===

Необходимость вводить логин и пароль для каждого в каждой системе неудобна, особенно если под управлением находится множество систем. У некоторых администраторов, возможно, даже имеется скрипт или cron-задача, которые упрощают использование ssh соединения. Так или иначе, у этой проблемы есть решение, и оно начинается с аутентификации с открытым ключом. 

=== Как работает аутентификация с открытым ключом? ===

Предположим, что клиент хочет соединится с ssh демоном на сервере. Клиент сначала генерирует пару ключей и пересылает открытый ключ на сервер. Затем, когда бы клиент ни пытался соединиться с сервером, сервер отправляет послание, которое зашифровано с помощью открытого ключа. Только обладатель соответствующего закрытого ключа (т.е. клиент) способен его расшифровать, так что, правильный ответ ведет к успешной аутентификации. 

== Как использовать аутентификацию с открытым ключом ==

=== Генерация ключевой пары ===

The first step is to create a key pair. To do this, use the {{c|ssh-keygen}} command: 

{{Cmd|ssh-keygen}}

Примите значения по умолчанию, и удостоверьтесь, что ввели надежную фразу-пароль.

{{Warning|Be sure to choose a strong passphrase, especially if this key is used for root logins!}}

После завершения генерации закрытый ключ должен быть в {{Path|~/.ssh/id_rsa}} и открытый ключ в {{Path|~/.ssh/id_rsa.pub}}. Открытый ключ теперь готов для копирования на удаленный хост.

=== Подготовка сервера ===

The {{Path|~/.ssh/id_rsa.pub}} file needs to be copied over to the server running {{c|sshd}}. It has to be added to the {{Path|~/.ssh/authorized_keys}} file that belongs the connecting user on the remote server. After {{c|ssh}} access to the server has been granted by infrastructure personnel, the following steps can be used to setup automatic login using a public key on the remote server:

{{Cmd|scp ~/.ssh/id_rsa.pub server_user@server:~/myhost.pub
|ssh server_user@server "cat ~/myhost.pub &gt;&gt; ~/.ssh/authorized_keys"
|ssh server_user@server "cat ~/.ssh/authorized_keys"}}

Вывод команды из последней строки должен отобразить содержимое файла {{Path|~/.ssh/authorized_keys}}. Убедитесь, что этот вывод выглядит корректно.

=== Тестирование настройки ===

Theoretically, if all went well, and the {{c|sshd}} daemon on the server allows it (as this can be configured), {{c|ssh}} access without entering a password should now be possible on the server. The private key on the client will still need to be decrypted with the passphrase used previously, but this should not be confused with the password of the user account on the server.

{{Cmd|ssh <server_user>@<server>}}

It should have asked for a passphrase for {{Path|id_rsa}}, and then grant access via {{c|ssh}} as the user <code><server_user></code> on the server. If not, login as <code><server_user></code>, and verify that the contents of {{Path|~/.ssh/authorized_keys}} has each entry (which is a public key) on a single line. It is also a good idea to check the sshd configuration to make sure that it allows to use public key authorization when available.

В этом месте, читающий возможно подумает: "Какая разница, я просто заменил один пароль на другой?!" Успокойтесь, в следующем разделе будет продемонстрировано, как мы можем использовать это, чтобы вводить фразу-пароль только один раз и повторно использовать (расшифрованный) ключ для многократного входа.

== Как сделать аутентификацию с открытым ключом удобной ==

=== Обычное управление ключами с помощью ssh-agent ===

The next step is to decrypt the private key(s) once, and gain the ability to ssh freely, without any passwords. That is exactly what the program {{c|ssh-agent}} is for. 

{{c|ssh-agent}} is usually started at the beginning of the X session, or from a shell startup script like {{Path|~/.bash_profile}}. It works by creating a unix-socket, and registering the appropriate environment variables so that all subsequent applications can take advantage of its services by connecting to that socket. Clearly, it only makes sense to start it in the parent process of an X session to use the set of decrypted private keys in all subsequent X applications. 

{{Cmd|eval `ssh-agent`}}

{{Note|This {{c|ssh-agent}} will keep keys decrypted until it is killed. To set a lifetime for the keys, use the <code>-t</code> argument as described in {{c|man ssh-agent}}.}}

When running {{c|ssh-agent}}, it should output the PID of the running ssh-agent, and also set a few environment variables, namely <var>SSH_AUTH_SOCK</var> and <var>SSH_AGENT_PID</var>. It should also automatically add {{Path|~/.ssh/id_rsa}} to it's collection and ask the user for the corresponding passphrase. If other private keys exist which need to be added to the running ssh-agent, use the {{c|ssh-add}} command: 

{{Cmd|ssh-add somekeyfile}}

А теперь начинается магия. С готовым расшифрованным закрытым ключом, наконец, можно получить доступ к серверу (с настроенным открытым ключом) по ssh без ввода какого-либо пароля: 

{{Cmd|ssh server}}

Для того, чтобы выключить SSH-агент (после чего снова потребуется вводить фразу-пароль позже):

{{Cmd|ssh-agent -k}}

{{Note|It is possible to have multiple {{c|ssh-agent}} processes running, especially when configuring it initially took some effort and trials. These processes can be killed like any other process by running {{c|killall ssh-agent}}.}}

Чтобы с ssh-agent было еще более удобней работать, продолжайте читать следующую главу, описывающую использование keychain. Убедитесь, что завершили запущенный ssh-agent, так как keychain обрабатывает сессии {{c|ssh-agent}} самостоятельно.

=== Выжимание последней капли удобства из ssh-agent ===

Keychain позволит использовать ssh-agent заново между входами в систему, и, дополнительно, запрашивать фразу-пароль каждый раз, когда входит пользователь. Давайте сначала установим его:

{{Emerge|net-misc/keychain}}

Если предположить, что установка прошла успешно, то {{c|keychain}} уже можно использовать. Добавьте следующее в файл {{Path|~/.bash_profile}}, для того, чтобы включить его: 

{{CodeBox|title=Обеспечение доступа к keychain в .bash_profile|<pre>
keychain ~/.ssh/id_rsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>
}}

{{Note|Большее количество закрытых ключей можно добавить  в командной строке, по желанию. Также, если хотите чтобы запрашивало фразу-пароль каждый раз, когда открывается оболочка, добавьте параметр <code>--clear</code>.}}

{{Note|Если не используется оболочка bash, проверьте раздел '''EXAMPLES''' {{c|man keychain}} для поиска примеров использования в других оболочках. Основной идеей является запуск этих команд каждый раз, когда используется оболочка.}}

Теперь протестируем это. Сперва, убедитесь, что завершен процесс ssh-agent из предыдущего раздела, затем откройте новую оболочку, обычно простым входом, или открытием нового эмулятора терминала. Должен быть запрошен пароль для каждого ключа, который был указан в командной строке. Все оболочки открытые после этого, должны использовать ssh-agent заново, позволяя использовать беспарольное ssh соединение снова и снова. 

=== Использование keychain с KDE ===

KDE пользователи, вместо использования {{Path|~/.bash_profile}}, могут позволить KDE управлять программой ssh-agent за место них. Для того, чтобы это сделать, необходимо отредактировать файл {{Path|/etc/kde/startup/agent-startup.sh}}, который читается во время запуска KDE, и {{Path|/etc/kde/shutdown/agent-shutdown.sh}}, который запускается во время закрытия KDE. Здесь показано, как можно отредактировать эти файлы: 

{{CodeBox|title=Редактирование /etc/kde/startup/agent-startup.sh|1=
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
}}

{{CodeBox|title=Редактирование /etc/kde/shutdown/agent-shutdown.sh|1=
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
}}

Теперь, все, что необходимо сделать, это запустить эмулятор терминала по вкусу, например Konsole, и загрузить нужную связку ключей для использования. Например: 

{{Cmd|keychain ~/.ssh/id_rsa}}

Ключи будут запомнены до окончания KDE сессии (или пока не завершите процесс ssh-agent вручную).

=== Using keychain with Plasma 5 ===

As above for KDE 4 except replace {{Path|/etc/kde}} with {{Path|/etc/plasma}}.

== Завершающие примечания ==

=== Соображения безопасности ===

Конечно же, использование ssh-agent может немного ухудшить безопасность системы. Если бы другой пользователь получил доступ к запущенной командной оболочке, он смог бы войти на все серверы без пароля. В результате, это является риском для серверов, и пользователи должны быть уверены в том, что они проконсультировались с местной политикой безопасности. Будьте уверены в том, что приняли все необходимые меры для обеспечения безопасности во всех сессиях. 

=== Устранение проблем ===

Большинство из описанного должно работать хорошо, но если все-таки столкнулись с проблемами, то следующие пункты могут помочь. 

* Если не можете соединиться без {{c|ssh-agent}}, попробуйте использовать ssh с опцией <code>-vvv</code>, чтобы узнать что произошло. Иногда, сервер не настроен для использования аутентификации с открытым ключом, иногда он настроен на запрашивание локальных паролей в любом случае! Если это как раз тот самый случай, попробуйте использовать с {{c|ssh}} параметр <code>-o</code>, или изменить файл конфигурации {{Path|sshd_config}} на сервере.
* Если подключение при использовании {{c|ssh-agent}} или {{c|keychain}} не работает, то это может быть потому что используемая командная оболочка не понимает используемые команды. Проконсультируйтесь с man-страницами для программ ssh-agent и keychain для поиска подробностей по работе с другими оболочками.

== Внешние ресурсы ==

* [http://www.funtoo.org/Keychain The official Keychain project page] at Funtoo.org.
* [http://www.funtoo.org/OpenSSH_Key_Management,_Part_1 IBM developerWorks article series] introducing the concepts behind Keychain.


{{Migrated|originalauthors=Eric Brown, Marcelo Goes, nightmorph}}

[[Category:Server and Security]] 
[[Category:SSH]]
