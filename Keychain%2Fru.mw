<languages />

{{Metadata|abstract=В этом документе описано использование общих ключей SSH вместе с программой keychain. Предполагается базовое знание криптографии с открытым ключом.}}

В этом документе описано использование общих ключей SSH вместе с программой keychain. Предполагается базовое знание криптографии с открытым ключом.

== Основы ==

=== Рассматриваемая проблема ===

Необходимость вводить логин и пароль для каждого в каждой системе неудобна, особенно если под управлением находится множество систем. У некоторых администраторов, возможно, даже имеется скрипт или cron-задача, которые упрощают использование ssh соединения. Так или иначе, у этой проблемы есть решение, и оно начинается с аутентификации с открытым ключом. 

=== Как работает аутентификация с открытым ключом? ===

Предположим, что клиент хочет соединиться с демоном ssh на сервере. Клиент сначала генерирует пару ключей и пересылает открытый ключ на сервер. Затем, каждый раз, когда клиент попытается подключиться к серверу, тот отправит запрос зашифрованный этим открытым ключом. Только обладатель соответствующего закрытого ключа (то есть клиент) способен его расшифровать, так что правильный ответ приведёт к успешной аутентификации. 

== Как использовать аутентификацию с открытым ключом ==

=== Генерация ключевой пары ===

Сперва необходимо создать ключевую пару. Для этого воспользуйтесь командой {{c|ssh-keygen}}: 

{{Cmd|ssh-keygen}}

Оставьте все значения по умолчанию и удостоверьтесь, что ввели надежную ключевую фразу.

{{Warning|Убедитесь, что выбрали надежную ключевую фразу, особенно если этот ключ используется для входа в качестве пользователя root!}}

После завершения генерации закрытый ключ будет находиться в {{Path|~/.ssh/id_rsa}}, а открытый ключ — в {{Path|~/.ssh/id_rsa.pub}}. Открытый ключ готов для копирования на удаленный хост.

=== Подготовка сервера ===

Файл {{Path|~/.ssh/id_rsa.pub}} необходимо скопировать на сервер, на котором запущен {{c|sshd}}. Он должен быть добавлен в файл {{Path|~/.ssh/authorized_keys}}, который принадлежит соединяющемуся пользователю на удаленном сервере. После предоставления персоналом инфраструктуры {{c|ssh}} доступа к серверу, следующие шаги могут быть использованы для настройки автоматического входа с использованием открытого ключа на удаленный сервер:

{{Cmd|scp ~/.ssh/id_rsa.pub server_user@server:~/myhost.pub
|ssh server_user@server "cat ~/myhost.pub &gt;&gt; ~/.ssh/authorized_keys"
|ssh server_user@server "cat ~/.ssh/authorized_keys"}}

Вывод команды из последней строки должен отобразить содержимое файла {{Path|~/.ssh/authorized_keys}}. Убедитесь, что этот вывод выглядит корректно.

=== Тестирование настройки ===

В теории, если всё прошло успешно, а {{c|ssh}}-демон на сервере это позволяет (как это может быть настроено), безпарольное подключение по {{c|ssh}} к серверу должно быть уже возможно. Закрытый ключ клиента всё равно будет необходимо дешифровать ключевой фразой, указанной ранее, однако не следует её путать с паролем учетной записи пользователя на сервере.

{{Cmd|ssh <server_user>@<server>}}

Будет запрошена ключевая фраза для {{Path|id_rsa}}, после чего будет предоставлен доступ к серверу по {{c|ssh}} для пользователя <code><server_user></code>. Если этого не произошло, подключитесь под пользователем <code><server_user></code> и проверьте, что в {{Path|~/.ssh/authorized_keys}} каждая запись (открытый ключ) находится на отдельной строке. Также неплохо будет проверить конфигурацию sshd и убедиться, что он позволяет использование авторизации с открытым ключом, если тот доступен.

В этому моменту читатель, возможно, подумает: «А в чём смысл, я же просто заменил один пароль на другой!» Не переживайте, в следующем разделе мы покажем, как можно вводить ключевую фразу всего один раз, а затем повторно использовать расшифрованный ключ для многократных подключений.

== Как сделать аутентификацию с открытым ключом удобной ==

=== Обычное управление ключами с помощью ssh-agent ===

Следующим шагом будет единовременная расшифровка одного или нескольких закрытых ключей, после чего появится возможность свободно пользоваться ssh, не вводя никаких паролей. Именно для этого и предназначена программа {{c|ssh-agent}}. 

{{c|ssh-agent}} обычно запускается вначале X-сессии или из сценария запуска оболочки (например, {{Path|~/.bash_profile}}). Она работает путем создания Unix-сокета и регистрации подходящих переменных среды, чтобы все последующие приложения могли воспользоваться её услугами, подсоединяясь к этому сокету. Очевидно, имеет смысл запускать её в родительском процессе X-сессии, чтобы набор расшифрованных закрытых ключей стал доступным для всех последующих X-приложений. 

{{Cmd|eval `ssh-agent`}}

{{Note|Этот экземпляр {{c|ssh-agent}} будет хранить ключи расшифрованными до тех пор, пока он работает. Чтобы установить время существования ключей, используйте параметр <code>-t</code>, как описано в {{c|man ssh-agent}}.}}

При запуске {{c|ssh-agent}} должен сообщить PID запущенного экземпляра, а также установить несколько переменных среды, а именно <var>SSH_AUTH_SOCK</var> и <var>SSH_AGENT_PID</var>. Он также должен автоматически добавить {{Path|~/.ssh/id_rsa}} к своему набору и запросить у пользователя соответствующую  ключевую фразу. Если есть другие закрытые ключи, которые необходимо добавить к запущенному ssh-agent, воспользуйтесь командой {{c|ssh-add}}: 

{{Cmd|ssh-add somekeyfile}}

А теперь начинается магия. С готовым расшифрованным закрытым ключом можно получить ssh-доступ к серверу (у которого настроен открытый ключ) без ввода какого-либо пароля: 

{{Cmd|ssh server}}

Следующая команда останавливает ssh-agent (после чего при подключении понадобится вводить ключевую фразу):

{{Cmd|ssh-agent -k}}

{{Note|Возможно, в системе ещё осталось несколько запущенных процессов {{c|ssh-agent}} (особенно, если всё делалось впервые). Эти процессы как, и другие, можно завершить командой {{c|killall ssh-agent}}.}}

Если вы хотите, чтобы с ssh-agent можно было работать ещё удобней, продолжите чтение со следующей главы, описывающей использование keychain. Убедитесь, что завершили запущенный ssh-agent, так как keychain обрабатывает сессии {{c|ssh-agent}} самостоятельно.

=== Выжимание последней капли удобства из ssh-agent ===

Keychain позволит использовать ssh-agent заново между входами в систему, а также запрашивать ключевую фразу при каждом входе пользователя в систему. Давайте сначала установим его:

{{Emerge|net-misc/keychain}}

После успешной установки {{c|keychain}} готов к использованию. Добавьте следующие строки в файл {{Path|~/.bash_profile}} для того, чтобы включить его: 

{{CodeBox|title=Включение keychain в .bash_profile|<pre>
keychain ~/.ssh/id_rsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>
}}

{{Note|По желанию можно добавить ещё несколько закрытых ключей. Если вы хотите, чтобы ключевая фраза запрашивалась каждый раз при запуске командной оболочки, добавьте параметр <code>--clear</code>.}}

{{Note|Если используется не оболочка bash, обратитесь к разделу '''EXAMPLES''' из {{c|man keychain}} для примеров использования в других оболочках. Основной идеей является запуск этих команд каждый раз, когда используется оболочка.}}

Теперь протестируем это. Сперва убедитесь, что ssh-agent из предыдущего раздела завершён, а затем с помощью входа в систему откройте новую оболочку или откройте новый эмулятор терминала. Должен появиться запрос пароля на каждый ключ, указанный в командной строке. Все открытые после этого оболочки будут повторно использовать ssh-agent, что позволит использовать беспарольное ssh-подключение снова и снова. 

=== Использование keychain с KDE ===

Пользователи KDE вместо использования {{Path|~/.bash_profile}} могут позволить KDE управлять программой ssh-agent. Для этого необходимо отредактировать файлы {{Path|/etc/kde/startup/agent-startup.sh}} (который читается при запуске KDE) и {{Path|/etc/kde/shutdown/agent-shutdown.sh}} (который читается при остановке KDE). Ниже показано, как они могут выглядеть: 

{{CodeBox|title=Редактирование /etc/kde/startup/agent-startup.sh|1=
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
}}

{{CodeBox|title=Редактирование /etc/kde/shutdown/agent-shutdown.sh|1=
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
}}

Теперь всё, что необходимо сделать, — это запустить любимый эмулятор терминала, например Konsole, и загрузить нужную связку ключей для использования. Например: 

{{Cmd|keychain ~/.ssh/id_rsa}}

Ключи будут запомнены до окончания сеанса KDE (или пока процесс ssh-agent не будет завершён вручную).

=== Использование keychain с Plasma 5 ===

Единственным отличием от KDE 4 является другое расположение файлов: вместо {{Path|/etc/kde}} следует использовать {{Path|/etc/plasma}}.

== Завершающие примечания ==

=== Соображения безопасности ===

Конечно же, использование ssh-agent может немного ухудшить безопасность системы. Если другой пользователь сможет получить доступ к запущенной командной оболочке, он сможет подключиться ко всем серверам без использования пароля. В итоге это является угрозой для серверов, поэтому пользователям следует свериться с местной политикой безопасности. Удостоверьтесь, что приняли все необходимые меры для того, чтобы обеспечить достаточную безопасность для всех сессий. 

=== Устранение проблем ===

Большинство из описанного должно работать без особых проблем, но если вы с ними всё-таки столкнулись, то следующие пункты могут помочь их решить. 

* Если подключение без {{c|ssh-agent}} не работает, попробуйте добавить к команде ssh параметр <code>-vvv</code>, чтобы выяснить, что происходит. Иногда бывает, сервер не настроен на использование аутентификации с открытым ключом, иногда он может запрашивать локальный пароль в любом случае! В таком случае попробуйте запустить {{c|ssh}} с параметром <code>-o</code> или измените конфигурационный файл {{Path|sshd_config}} на сервере.
* Если подключение с {{c|ssh-agent}} или {{c|keychain}} не работает, то причина может быть в том, что используемая командная оболочка не понимает используемые команды. Сверьтесь с man-страницами программ ssh-agent и keychain для поиска подробностей по работе с другими оболочками.

== Внешние ресурсы ==

* [http://www.funtoo.org/Keychain Официальная страница проекта Keychain] на Funtoo.org
* [http://www.funtoo.org/OpenSSH_Key_Management,_Part_1 Серия статей IBM developerWorks] описывающая концепции, стоящие за Keychain.


{{Migrated|originalauthors=Eric Brown, Marcelo Goes, nightmorph}}

[[Category:Server and Security]] 
[[Category:SSH]]
