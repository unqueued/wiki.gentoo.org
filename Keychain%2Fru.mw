<languages />

В этом документе описано использование общих ключей SSH вместе с программой для управления ими. Предполагается базовое знание криптографии с открытым ключом.

== Основы ==

=== Рассматриваемая проблема ===

Итак, Вы обладаете всеми эти прекрасными компьютерами с Gentoo, с запущенным <code>sshd</code>, но Вам немного неудобно печатать все эти пароли для входа, верно? Или, может быть, Вы имеете сценарий или cron-задачу, которым необходим удобный способ использования ssh соединения. Так или иначе, у этой проблемы есть решение, и оно начинается с аутентификации с открытым ключом. 

=== Как работает аутентификация с открытым ключом? ===

Предположим, у нас есть клиент, который хочет соединиться с сервером через sshd. Клиент сначала генерирует пару ключей и пересылает открытый ключ на сервер. Затем, когда бы клиент ни пытался соединиться с сервером, сервер отправляет послание, которое зашифровано с помощью открытого ключа. Только обладатель соответствующего закрытого ключа (т.е. клиент) способен его расшифровать, так что, как Вы уже догадались, правильный ответ ведет к успешной аутентификации. 

== Как использовать аутентификацию с открытым ключом ==

=== Генерация ключевой пары ===

Первым шагом является создание Вашей пары ключей. Для того, чтобы это сделать, мы будем использовать команду <code>ssh-keygen</code>, как то: 

{{Cmd|ssh-keygen -t dsa}}

Просто примите значения по умолчанию, и удостоверьтесь, что Вы ввели надежный пароль.

{{Warning/ru|Убедитесь, что Вы выбрали надежный пароль, особенно если этот ключ используется для учетной записи администратора!}}

Теперь у Вас должен быть закрытый ключ в {{Path|~/.ssh/id_dsa}} и открытый ключ в {{Path|~/.ssh/id_dsa.pub}} . Мы готовы скопировать открытый ключ на удаленный компьютер. 

=== Подготовка сервера ===

Мы скопируем файл {{Path|~/.ssh/id_dsa.pub}} на сервер, на котором запущен sshd. Мы также добавим его в файл {{Path|~/.ssh/authorized_keys}}, который принадлежит соединяющемуся пользователю на этом сервере. Здесь приведен пример того, как это сделать если Вы уже обладаете доступом к серверу по ssh: 

{{Cmd|scp ~/.ssh/id_dsa.pub server_user@server:~/myhost.pub
|ssh server_user@server "cat ~/myhost.pub &gt;&gt; ~/.ssh/authorized_keys"
|ssh server_user@server "cat ~/.ssh/authorized_keys"}}

Результат, показанный на последней строке, должен отобразить содержимое файла {{Path|~/.ssh/authorized_keys}}. Убедитесь, что он выглядит правильно. 

=== Тестирование установки ===

В теории, если все прошло правильно, и ssh-демон на сервере это позволяет, сейчас мы должны быть способны получить доступ к серверу по ssh без пароля. Мы все еще должны расшифровать закрытый ключ на клиенте паролем, который мы использовали ранее, но он не должен быть перепутан с паролем от учетной записи пользователя на этом сервере. 

{{Cmd|ssh server_user@server}}

Надеемся, у Вас был запрошен пароль для id_dsa, и Вы смогли получить доступ к серверу по ssh как server_user. Если это не так, войдите как server_user, и проверьте содержимое {{Path|~/.ssh/authorized_keys}} для того чтобы убедиться, кто каждая запись находится на отдельной строке. Вы также можете проверить конфигурацию sshd для того, чтобы убедиться что предпочитается использование авторизации с открытым ключом, когда это доступно. 

В этом месте, Вы возможно подумаете: "Какая разница, я просто заменил один пароль другим?!" Успокойтесь, в следующем разделе Вам будет продемонстрировано точно, как мы можем использовать это, чтобы сохранить наше драгоценное время. 

== Как сделать аутентификацию с открытым ключом удобной ==

=== Обычное управление ключами с помощью ssh-agent ===

Если Вы подробно следуете руководству, Вы возможно уже подумали, как было бы хорошо если бы мы смогли как-нибудь расшифровать наши закрытые ключи/ключ один раз, и получить возможность свободно соединяться по ssh, без каких-либо паролей. Вам повезло, это как раз то, для чего предназначена программа <code>ssh-agent</code> . 

Программа <code>ssh-agent</code> обычно запускается вначале вашей X-сессии, или из сценария запуска оболочки, например {{Path|~/.bash_profile}} . Она работает путем создания доменного сокета Unix и регистрации подходящих переменных среды, так чтобы все последующие приложения могли воспользоваться ее сервисами, подсоединяясь к этому сокету. Очевидно, имеет смысл запускать ее только в родительском процессе Вашей X-сессии, если Вы хотите использовать набор расшифрованных закрытых ключей во всех последующих X-приложениях. 

{{Cmd|eval `ssh-agent`}}

{{Note/ru|Этот ssh-agent будет хранить ключи расшифрованными, пока Вы его не завершите. Если Вы хотите установить время существования ключей, используйте параметр -t, как описано в <code>man ssh-agent</code> .}}

При запуске, ssh-agent должен сообщить Вам PID запущенного ssh-agent, и также установить несколько переменных среды, а именно <code>SSH_AUTH_SOCK</code> и <code>SSH_AGENT_PID</code> . Он также должен автоматически добавить {{Path|~/.ssh/id_dsa}} к своему набору и запросить соответствующую парольную фразу. Если Вы имеете другие закрытые ключи, Вы можете пожелать добавить их к запущенному ssh-agent, для этого Вы можете использовать команду <code>ssh-add</code>, как то: 

{{Cmd|ssh-add somekeyfile}}

А теперь начинается магия. Так как у Вас уже есть расшифрованный закрытый ключ, Вы можете получить доступ к серверу по ssh без ввода какого-либо пароля: 

{{Cmd|ssh server}}

It would be nice to know how to shut down ssh-agent in case you need to, right? 

{{Cmd|ssh-agent -k}}

{{Note|If you had problems getting ssh-agent to work, it might still be running. You can kill it like any other process by running <code>killall ssh-agent</code> .}}

If you want even more convenience from ssh-agent, proceed to the next section on using keychain. Be sure to kill the running ssh-agent as in the example above if you decide to do so.

=== Squeezing the last drop of convenience out of ssh-agent ===

Keychain will allow you to reuse an ssh-agent between logins, and optionally prompt for passphrases each time the user logs in. Before we get ahead of ourselves though, let's emerge it first. 

{{Emerge|keychain}}

Assuming that was successful, we can now use keychain freely. Add the following to your {{Path|~/.bash_profile}} to enable it: 

{{Code|Enabling keychain in .bash_profile|<pre>
keychain ~/.ssh/id_dsa
. ~/.keychain/$HOSTNAME-sh
. ~/.keychain/$HOSTNAME-sh-gpg
</pre>
}}

{{Note|You can add more private keys to the command line as you desire. Also, if you want it to ask for passphrases each time you spawn a shell, add the --clear option.}}

{{Note|If you are not using bash, check the '''EXAMPLES''' section of <code>man keychain</code> for examples of use in other shells. The idea is to get those commands to run each time you use a shell.}}

Let's test it. First make sure we killed the ssh-agent from the previous section, then start up a new shell, usually by just logging in, or spawning a new terminal. It should prompt you for the password for each key you specified on the command line. All shells opened after that point should reuse the ssh-agent, allowing you to make passwordless ssh connections over and over. 

=== Using keychain with KDE ===

If you are a KDE user, instead of using {{Path|~/.bash_profile}} , you can let KDE manage ssh-agent for you. In order to do so, you will have to edit {{Path|/etc/kde/agent-startup.sh}} , which is read during KDE's startup, and {{Path|/etc/kde/shutdown/agent-shutdown.sh}} , which is executed during KDE's shutdown. Here is how you could edit those files: 

{{Code|Editing /etc/kde/agent-startup.sh|<pre>
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi
</pre>
}}

{{Code|Editing /etc/kde/shutdown/agent-shutdown.sh|<pre>
if [ -n "${SSH_AGENT_PID}" ]; then
  eval "$(ssh-agent -k)"
fi
</pre>
}}

Now, all you have to do is launch a term of your choice, like Konsole, and load the keys you would like to use. For example: 

{{Cmd|keychain ~/.ssh/id_dsa}}

Your keys will be remembered until you end your KDE session or kill the ssh-agent manually. 

== Concluding remarks ==

=== Security considerations ===

Of course, the use of ssh-agent may add a bit of insecurity to your system. If another user were to use your shell while you were in the bathroom, he could login to all of your servers without passwords. As a result, it is a risk to the servers you are connecting to, and you should be sure to consult the local security policy. If you do use it, be sure to take the appropriate measures to ensure the security of your sessions. 

=== Troubleshooting ===

Most of this should work pretty well, but if you encounter problems, you'll certainly want to know a few useful things. 

* If you are unable to connect without ssh-agent, consider using ssh with the arguments -vvv to find out what's happening. Sometimes the server is not configured to use public key authentication, sometimes it is configured to ask for local passwords anyway! If that is the case, you may want to also use the -o option with ssh, or change the server sshd_config.
* If you are having problems with ssh-agent or keychain, it may be that you are not using a shell that understands the commands they use. Consult the man pages for ssh-agent and keychain for details on working with other shells.
* You may also want to visit the [https://github.com/funtoo/keychain keychain homepage] for more usage tips.

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Eric Brown
* Marcelo Goes
* nightmorph

[[Category:Server and Security]]
