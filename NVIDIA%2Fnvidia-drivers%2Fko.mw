<languages />

{{Metadata|abstract=nvidia-drivers는 nVidia 그래픽 카드용 상용 그래픽 드라이버입니다. 대신 사용하는 오픈 소스는 nouveao가 있습니다.}}

'''x11-drivers/nvidia-drivers'''는 nVidia 그래픽 카드용 상용 그래픽 드라이버입니다. 대신 사용하는 오픈 소스는 [[nouveau]]가 있습니다.

트리에 있는 엔비디아 드라이버는 nVidia가 출시하며 리눅스 커널에 대응하여 빌드합니다. 카드와의 엄청난 양의 데이터를 주고받는 바이너리 블롭이 포함되어 있습니다. 드라이버는 두 부분으로 나뉘는데 하나는 커널 모듈이고 다른 하나는 X11 드라이버 입니다. 두 부분은 단일 패키지에 포함되어 있습니다. nVidia가 자체적으로 드라이버를 꾸러미에 담아두므로 드라이버를 설치하기 전에 어떤걸 사용할지 선택해야 합니다.

'''nvidia-drivers''' 패키지에는 엔비디아의 ''모든'' 카드를 지원하는 최신 드라이버와 카드가 얼마나 오래됐는지의 여부에 따라 다양한 버전이 들어있습니다. 어떤 카드를 사용하는지 감지하는 eclass를 사용하므로 적당한 버전을 설치합니다.

== 하드웨어 호환성 ==
{{Package|x11-drivers/nvidia-drivers}} 꾸러미에서는 다양한 엔비디아 카드를 지원합니다. 가지고 있는 카드에 따라 설치할 여러가지 버전이 존재합니다. 어떤 nvidia-drivers 버전을 사용해야 하는지에 대해서는 [http://www.nvidia.com/object/IO_32667.html 구형 드라이버란 무엇인가?] 라는 공식 엔비디아 문서를 보십시오. [http://www.nvidia.com/Download/Find.aspx 여기] 에서 제공하는 대화형 양식을 통해 꽤 괜찮은 방법으로 이 문서를 찾아 볼 수도 있습니다. 가지고 있는 그래픽 카드를 입력('제품 형식' 필드에 Legacy 옵션이 있습니다) 하면 양식 하단에서 지원하는 가장 최상의 버전을 찾을 수 있습니다.

가지고 있는 카드가 구형 카드임을 확인했다면 {{Package|nvidia-drivers}}의 최근 릴리즈를 가려야 합니다. 예를 들자면: 
{{RootCmd|echo ">x11-drivers/nvidia-drivers-174" >> /etc/portage/package.mask}}

젠투에서는 71.86.xx 버전을 제공하지 않음을 참고하십시오. 이 드라이버가 필요하다면 [[nouveau]] 드라이버를 사용하시는것이 낫습니다.

== 커널 ==
위에 말한 바와 같이 엔비디아 커널 드라이버는 현재 설치한 커널에 대해 빌드하고 실행합니다. 모듈로 빌드하기 때문에 커널에서 모듈 불러오기를 지원해야 합니다 (하단 참조).

커널 모듈(nvidia.ko)은 그래픽 칩을 다루는 상업용 부분(일반적으로 "바이너리 블롭"이라고 함)과 바이너리 블롭과 커널간을 실행 시간에 중재하는 오픈소스 부분("접착제"역할)이 있습니다. 함께 제대로 동작해야 하는데 그렇지 않으면 데이터 손실(커널 망가짐, X 프로그램에서 데이터를 저장하지 않은 채로 X 서버 깨짐)에 직면하게 되고 심지어는 하드웨어 동작 실패 현상이 일어나기도 합니다(과열되거나 전원 관리 관련 문제가 떠오를 것입니다).

=== 커널 호환성 ===
때때로, 새 커널 릴리스에는 드라이버에 대한 내부 ABI가 바뀌는데, 이들 ABI를 사용하는 모든 드라이버는 즉시 바뀌어야 함을 의미합니다. 오픈소스 드라이버에서는 특히 커널에 배포하는 드라이버의 경우 드라이버들간의 호출 매개를 연결하는 전체적인 부분을 수정해야 함은 자명한 사실이며 커널의 다른 부분은 쉽게 검토해볼 수 있습니다. nvidia.ko와 같은 상업용 드라이버는 조금 동일하게 동작하는 것이 아닙니다. 내부 ABI가 바뀌면 "붙어 있는 요소"를 거의 수정할 수 없는데 상업 코드 부분에서 사용하는 고정물이 어떻게 사용되는지 알 수 없기 때문입니다. 이런 문제를 패치하기 위해 관리하고 제대로 동작하게끔 하려면 지원하지 않는 새 커널에서 nvidia.ko를 실행하는데 있어 위험성을 감수해야 하며, 데이터를 잃을 수 있고, 하드웨어가 망가질 수 있습니다.

비호환 새 커널버전이 출시되면 아마도 당분간은 새로 지원하는 커널에 그대로 의지하는 것이 좋을 것입니다. Nvidia 에서는 보통 사용하는데 적합하다고 생각하는 새로운 상업 릴리스를 준비하는데 몇 주가 걸립니다. 그냥 기다리십시오. 혼란속에 모든 위험성을 내던지고 싶은 여러분들을 위해 nvidia-drivers 이빌드는 eutils.eclass에서 지원하는 epatch_user 명령을 실행합니다. 이 명령으로 최신의 비 지원 커널 릴리스에 맞춰 nvidia-drivers를 패치할 수 있습니다. 문제 상황에 직면했을때 nvidia-drivers 메인테이너, Nvidia 회사 양측 그 어느 누구도 지원하지 않음을 참고하십시오. 하드웨어 보증이 무효가 될 수 있고, 젠투 메인테이너는 Nvidia만이 제대로 디버그 할 수 있는 상업용 드라이버를 수정할 수 없으며, 커널 메인테이너(젠투와 업스트림) 역시 상업용 드라이버 또는 문제 상황으로 치달아 "망가진" 시스템으로 간주된 대상은 지원하지 않습니다.

=== 요구 커널 옵션===
커널을 설정하는데 '''genkernel all''' 옵션을 사용했다면, 모든 항목이 설정되어 있습니다만, 그렇지 않다면 지원 기능을 활성화 했는지 커널 설정을 다시 확인하십시오:
{{Kernel||<pre>
 Loadable module support --->
    [*] Enable loadable module support 
</pre>
}}

커널에서 ''Memory Type Range Register''도 활성화해야 합니다:
{{Kernel||<pre>
 Processor and Features --->
      [*] MTRR (Memory Type Range Register) support
</pre>
}}

또한 AGP 그래픽 카드를 보유학 있다면, 추가적으로 커널에서 커널에 컴파일 하여 포함한 방식 또는 모듈로 '''agpgart''' 지원을 활성화 할 수 있습니다. 커널에 포함한 agpgart를 사용하지 않으면 드라이버에서는 '''NvAGP'''라는 자체 '''agpgart''' 구현체를 활용합니다. 어떤 시스템에서는 커널에 포함한 agpgart보다 더욱 우수한 성능을 보이며, 그렇지 않은 경우 그 반대의 성능을 보입니다. 여러분은 최상의 성능을 취하기 위해 드라이버를 시험해보려 할 것입니다. 무엇이 어떤지 확실하게 판단이 되지 않으면 커널에 있는 agpgart를 사용하십시오:
{{Kernel||<pre>
 Device Drivers --->
     Graphics Support --->
         -*- /dev/agpgart (AGP Support) --->
</pre>}}

{{Note|amd64에서는 IOMMU가 agpgart 설정을 관리합니다.}}

{{Important/ko|x86과 amd64 프로세서에서는 커널에 포함한 [[framebuffer]] 드라이버가 nVidia에서 제공하는 바이너리 드라이버와 충돌합니다. 이 CPU에 대한 커널을 컴파일 한다면 다음과 같이 커널에 포함한 드라이버 지원을 완전히 제거해야 합니다:
{{Kernel||<pre>
 Device Drivers --->
     Graphics Support --->
         <*> Support for frame buffer devices --->
             < > nVidia Framebuffer Support
             < > nVidia Riva support
</pre>}}
}}

대신 사용하는 프레임버퍼 드라이버는 nvidia-drivers와 나란히 설치할 수 있는 [[uvesafb]]입니다.

'''nvidia-drivers''' 이빌드에서는 {{Path|/usr/src/linux}} 심볼릭 링크에 따라 자동으로 커널 버전을 찾습니다. 커널을 올바르게 설정한 올바른 소스로 심볼릭 링크를 연결했는지 확인하십시오. 커널 설정에 대한 자세한 내용은 [http://www.gentoo.org/doc/en/handbook/ 젠투 핸드북]의 "커널 설정하기" 장을 참고하십시오.

먼저 '''eselect''' 명령으로 올바른 커널 소스를 선택해야 합니다. '''gentoo-sources-3.7.10'''을 사용한다면, 아마 커널 목록은 다음 처럼 보일지도 모릅니다:
{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1] linux-3.7.10-gentoo *
  [2] linux-3.7.9-gentoo
</pre>}}

위의 출력 내용을 보시면 '''linux-3.7.10-gentoo''' 커널에 심볼릭 링크로 연결되었음을 나타내려고 별표('''*''')로 표시했음을 볼 수 있습니다.

심볼릭 링크가 올바른 소스를 가리키는 것이 아니면, 위 예에서 보신바와 같이 결정한 커널 소스의 번호를 선택하여 업데이트해야 합니다.
{{RootCmd|eselect kernel set 1}}

== 드라이버 == 

이제 드라이버를 설치할 차례입니다. 먼저 [http://www.gentoo.org/doc/en/xorg-config.xml X서버 설정하기 방법]을 먼저 따르고 {{Path|/etc/portage/make.conf}}에 '''VIDEO_CARDS="nvidia"''' 설정을 넣으십시오. 그러면 X 서버를 설치할 때 올바른 버전의 '''nvidia-drivers'''를 알아서 설치합니다.

{{Note/ko|{{Path|/etc/portage/make.conf}}에 '''gtk''' USE 플래그를 설정하여 드라이버를 설치할 수 있습니다. 이렇게 설치하면 '''media-video/nvidia-settings'''를 함께 설치하는데 이 꾸러미는 nVidia 카드의 전반적인 측면을 보고 설정할 수 있게 하는 간편한 그래픽 도구입니다.}}

{{Important/ko|[http://www.gentoo.org/doc/en/kernel-upgrade.xml 새 커널 컴파일]을 하거나 현재 커널을 컴파일 하는 언제든지, nVidia 커널 모듈을 다시 설치해야 합니다. 이빌드로 설치한 ('''nvidia-drivers'''같은)모듈을 쉽게 다시 빌드하려면 '''emerge @module-rebuild'''를 실행하십시오.}}

설치가 끝나면, '''modprobe nvidia'''를 실행하여 메모리로 커널 모듈을 불러내십시오. 업그레이드라면 이전 모듈을 먼저 제거해야 합니다.
{{Rootcmd|
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

부팅할 때마다 모듈을 수동으로 하나하나 불러오는 일을 피하려 시스템을 매번 부팅할 때 자동으로 처리하려 할테니, {{Path|/etc/conf.d/modules}}를 편집하여 '''nvidia'''를 추가하십시오.

{{Important/ko|<code>agpgart</code>를 모듈로 컴파일하면 {{Path|/etc/conf.d/modules}}에 추가해야 합니다.}}

=== X 서버 ===
알맞은 드라이버를 설치하면 기본 '''nv'''드라이버 대신 '''nvidia'''드라이버를 사용하도록 X 서버를 설정해야 합니다.
{{VIDEO_CARDS/xorg.conf|nvidia}}

'''eselect'''를 실행하여 X 서버에서 nVidia GLX 라이브러리를 사용하도록 하십시오:
{{RootCmd|eselect opengl set nvidia}}

=== 권한 ===
{{VIDEO_CARDS/Permissions|nvidia}}

== 카드 시험하기 ==
nVidia 카드를 시험하려면, X를 실행 후 '''mesa-progs''' 꾸러미에 있는 '''glxinfo'''를 실행하십시오. 이 프로그램에서 DRM을 활성화했는지 나와야 합니다.

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering:  Yes
</pre>}}

FPS를 확인하려면 '''glxgears'''를 실행하십시오.

== nVidia 지원 활성화 ==
'''mplayer'''나 '''xine-lib''' 같은 도구에서는 XvMCNVIDIA 지원을 활성화하는 '''xvmc''' USE 플래그를 사용하는데, 이 플래그는 고해상도 동영상을 감상할때 유용합니다. {{Path|/etc/portage/make.conf}}의 USE 변수에 '''xvmc'''를 추가하거나, {{Path|/etc/portage/package.use}}에  '''media-video/mplayer''' 혹은 '''media-libs/xine-lib'''에 USE 플래그로 추가하십시오.

지포스 8 시리즈 이수의 GPU에서는 XvMCNVIDIA를 대신하는 VDPAU를 지원합니다. VDPAU 지원 활성화 내용은 [[VDPAU]] 내용을 살펴보십시오.

'''nvidia''' USE 플래그를 사용하는 일부 프로그램이 있으므로 {{Path|/etc/portage/make.conf}}에 추가하시는 것이 좋습니다.

그 다음 '''emerge -uD --newuse @world''' 명령을 실행하여 바뀐 USE 플래그의 효과를 보기 위해 여러 프로그램을 다시 빌드하십시오.

=== NVidia 설정 도구 사용 ===
nVidia는 설정 도구도 함께 제공합니다. 이 도구는 X 서버를 다시 시작하지 않고도 그래픽 설정을 보고 바꿀 수 있게 하며 '''media-video/nvidia-settings''' 이름으로 포티지 트리에서 제공합니다. 이미 말씀드렸다시피, {{Path|/etc/portage/make.conf}} 또는 {{Path|/etc/portage/package.use}} 에서 '''gtk''' USE 플래그 설정 후 드라이버를 설치하면 도구가 자동으로 따라옵니다.

=== OpenGL/OpenCL 활성화 ===

OpenGL과 OpenCL을 활성화 하십시오.

{{RootCmd|eselect opengl set nvidia}}
{{RootCmd|eselect opencl set nvidia}}

위 사항을 바꾸는 동안 Xorg 서버가 동작중이 아닌지 반드시 확인해야 합니다.

== 문제 해결 ==
* {{Bug|nvidia-drivers|search=package}}

== MSI 인터럽트를 활성화 하면 드라이버 초기화에 실패하네요 �==

리눅스 NVIDIA 드라이버는 메시지 신호 인터럽트(MSI)를 기본으로 사용합니다. 이 기능은 호환성과 확장성의 장점을 제공하는데, 주된 이유라면 IRQ 공유를 막기 위해서입니다. 어떤 시스템에서는 가상 연결 인터럽트로 제대로 동작하지만, 일부 시스템에서는 MSI 지원에 문제가 있어보입니다. 이 문제는 NVIDIA 드라이버로 X를 시작하는데 있어서 불가능한 것으로 보이며, 또는 CUDA 초기화 문제로 보이기도 합니다.

MSI 인터럽트는 NVIDIA 커널 모듈 매개변수에 <code>NVreg_EnableMSI=0</code> 값을 부여하여 비활성화 할 수 있습니다. 이 값은 모듈을 불러오는 과정에서, 또는 배포본에서 제공하는 커널 모듈 설정 파일({{Path|/etc/modprobe.d/}} 같은 디렉터리에 있음)에서 설정할 수 있습니다.�

예를 들자면:

{{File|/etc/modprobe.d/nvidia.conf|Setting nvidia NVreg_EnableMSI|<pre>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</pre>}}

=== 4GB 이상 용량의 메모리를 가진 머신에서 2D 가속 활성화하기 ===
nVidia 2D 가속에 문제가 있다면 아마도 MTRR의 라이트-컴바이닝 범위를 설정할 수 없는 경우일지도 모릅니다. 원인을 확인하려면  다음 명령으로 {{Path|/proc/mtrr}}의 내용을 확인하십시오: {{RootCmd|cat /proc/mtrr}}

모든 줄에 "write-back" 또는 "write-combining"이 있어야 합니다. "uncachable"이 있다면, 이 문제를 고치기 위해 BIOS 설정을 바꾸어야 합니다.

다시 부팅하고 BIOS로 들어가신 다음 MTRR 설정을 찾으십시오(아마 "CPU 설정"에 있을겁니다). "continuous"에서 "discrete"로 설정을 바꾸고 리눅스로 돌아가십시오. 더이상 "uncachable"이 없고, 튐 현상 없이 2D 가속이 잘 동작하는걸 보실 수 있습니다.

=== 커널 모듈을 불러오려는데 "no such device" 메시지를 받았습니다 ===
보통 다음 문제 중 하나가 원인입니다:

1. 어쨌거나 nVidia 카드를 가지고 있지 않습니다. '''lspci''' 출력을 보고 nVidia 그래픽 카드를 설치했고 감지했는지 확인하십시오.

2. x11-drivers/nvidia-drivers 현재 설치 버전이 그래픽 카드 모델을 지원하지 않습니다. /usr/share/nvidia-drivers-*/ 의 README 파일에서 지원 장치 목록을 보시거나 http://www.geforce.com/drivers 에서 드라이버를 검색하십시오. [[NVidia/nvidia-drivers#Which_version.3F|지원 버전]] 장을 확인하십시오.

3. 다른 커널 드라이버에서 하드웨어를 제어합니다. '''lspci -k''' 출력을 확인해서 그래픽 카드를 담당하는 "nouveau" 드라이버 같은게 있는지 확인하십시오. 그렇다면, 이 드라이버를 비활성화 하거나 블랙리스트에 넣어야 합니다.

=== Xorg 에서 어떤 화면도 찾을 수 없다고 함 ===
컴퓨터를 부팅하고나서 GUI 화면 대신 어두컴컴한 화면이나 콘솔 프롬프트로 돌아가는 경우가 있습니다. GUI로 부팅하지 못했을 때Ctrl+Alt+F2키를 눌러서 콘솔 프롬프트로 갈 수 있습니다. 그런 후 다음 명령을 실행할 수 있습니다:
{{RootCmd| /etc/init.d/xdm stop}}
Xorg 출력을 보려면 {{Cmd| startx}} 를 실행하십시오. 처음 나타나는 오류가 Xorg에서 어떤 화면도 찾을 수 없다는 문제라면, 이 문제를 해결하기 위해 다음 단계를 따르십시오.<br />
다시 부팅하기 전에 다음 명령을 확실하게 실행해야 합니다: {{Cmd| nvidia-xconfig}}
다만 동작하지 않으면, lspci를 실행하여 다음과 같이 비디오 카드가 시작되는 내용을 찾아야 합니다:
01:00.0 VGA compatible controller: make and model of videocard <br />
처음 부분 ''01.00.0''을 찾아서 /etc/X11/xorg.conf 의 BusID 옵션에 넣으십시오:

{{File|/etc/X11/xorg.conf||<pre>
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
Section "Device"
    Identifier "Device0"
    Driver "nvidia"
    VendorName "NVIDIA Corporation"
    BusID "PCI:1:0:0" 
EndSection 
</pre>}}

=== 직접 렌더링이 활성화 되지 않음 ===

If Direct rendering does not work, it may be because you have Direct Rendering Manager enabled in the kernel, which conflicts with the driver. You can see Direct rendering Status by following instructions in the section "Testing your card".

먼저 직접 렌더링 관리자(CONFIG_DRM)을 커널에서 비활성화 하십시오:

{{Kernel||<pre>
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
</pre>
}}

그리고 커널 DRM 심볼에 대해 드라이버를 빌드했을터이니 '''x11-drivers/nvidia-drivers'''를 다시 빌드하십시오. 이리 하면 문제를 해결할 수 있습니다.

== 전문가 설정 ==

=== 문서 ===
nVidia 드라이버 꾸러미에는 실용적인 문서가 있습니다. 이 문서는 '''/usr/share/doc'''에 있으며 다음 명령으로 살펴볼 수 있습니다:
{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== 커널 모듈 매개 변수 ===
'''nvidia''' 커널 모듈은 드라이버의 동작을 세밀하게 설정할 수 있는 몇가지 매개 변수(옵션)를 받아들입니다. 대부분 이 매개 변수 설명은 문서에 있습니다. 이 매개 변수의 값을 추가하거나 바꾸려면 '''/etc/modprobe.d/nvidia.conf''' 파일을 편집하십시오. 이 파일을 편집한 다음 '''update-modules'''실행을 잊지 마시고, 새 설정을 적용하기 전에 '''nvidia''' 모듈을 다시 불러와야 함도 잊지 마십시오.

원하는 편집기에서 /etc/modprobe.d/nvidia.conf를 편집하십시오:
{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

모듈 정보를 업데이트하십시오:
{{RootCmd|update-modules}}

nvidia 모듈을 불러온 상태를 취소하십시오...
{{RootCmd|modprobe -r nvidia}}

...그리고 다시 불러오십시오:
{{RootCmd|modprobe nvidia}}

=== 고급 X 설정 ===
GLX 계층에는 설정 가능한 상당히 많은 옵션이 있습니다. TV 출력, 듀얼 디스플레이, 모니터 주파수 감지 등의 설정을 다룰 수 있습니다. 다시 말씀드리지만, 여기에 있는 모든 옵션은 문서에 자세히 설명되어 있습니다.

이 옵션을 사용하려면 X  설정 파일의 관련 장치 섹션에 있는 목록을 살펴봐야 합니다(보통 '''/etc/X11/xorg.conf'''에 있음). 가령, 스플래시 로고를 비활성화 하려는 상황을 가정해보겠습니다.

{{File|/etc/X11/xorg.conf|Disable the splash logo|<pre> 
Section "Device"
   Identifier "nVidia Inc. GeForce2"
   Driver "nvidia"
   Option "NoLogo" "true"
   VideoRam 65536
EndSection
</pre>}}

== 감사문 ==
이 안내서에 제공한 노고에 대해 다음 작성자와 편집자분들께 감사의 말을 전하고자 합니다: Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni.

== 추가 참조 ==
* [[nouveau & nvidia-drivers switching]]
* [[NVIDIA Driver with Optimus Laptops]]

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
