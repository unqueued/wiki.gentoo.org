<languages />

{{Metadata|abstract=nvidia-drivers는 nVidia 그래픽 카드용 상용 그래픽 드라이버입니다. 대신 사용하는 오픈 소스는 nouveao가 있습니다.}}

'''x11-drivers/nvidia-drivers'''는 nVidia 그래픽 카드용 상용 그래픽 드라이버입니다. 대신 사용하는 오픈 소스는 [[nouveau]]가 있습니다.

트리에 있는 엔비디아 드라이버는 nVidia가 출시하며 리눅스 커널에 대응하여 빌드합니다. 카드와의 엄청난 양의 데이터를 주고받는 바이너리 블롭이 포함되어 있습니다. 드라이버는 두 부분으로 나뉘는데 하나는 커널 모듈이고 다른 하나는 X11 드라이버 입니다. 두 부분은 단일 패키지에 포함되어 있습니다. nVidia가 자체적으로 드라이버를 꾸러미에 담아두므로 드라이버를 설치하기 전에 어떤걸 사용할지 선택해야 합니다.

'''nvidia-drivers''' 패키지에는 엔비디아의 ''모든'' 카드를 지원하는 최신 드라이버와 카드가 얼마나 오래됐는지의 여부에 따라 다양한 버전이 들어있습니다. 어떤 카드를 사용하는지 감지하는 eclass를 사용하므로 적당한 버전을 설치합니다.

== 하드웨어 호환성 ==
{{Package|x11-drivers/nvidia-drivers}} 꾸러미에서는 다양한 엔비디아 카드를 지원합니다. 가지고 있는 카드에 따라 설치할 여러가지 버전이 존재합니다. 어떤 nvidia-drivers 버전을 사용해야 하는지에 대해서는 [http://www.nvidia.com/object/IO_32667.html 구형 드라이버란 무엇인가?] 라는 공식 엔비디아 문서를 보십시오. [http://www.nvidia.com/Download/Find.aspx 여기] 에서 제공하는 대화형 양식을 통해 꽤 괜찮은 방법으로 이 문서를 찾아 볼 수도 있습니다. 가지고 있는 그래픽 카드를 입력('제품 형식' 필드에 Legacy 옵션이 있습니다) 하면 양식 하단에서 지원하는 가장 최상의 버전을 찾을 수 있습니다.

가지고 있는 카드가 구형 카드임을 확인했다면 {{Package|nvidia-drivers}}의 최근 릴리즈를 가려야 합니다. 예를 들자면: 
{{RootCmd|echo ">x11-drivers/nvidia-drivers-174" >> /etc/portage/package.mask}}

젠투에서는 71.86.xx 버전을 제공하지 않음을 참고하십시오. 이 드라이버가 필요하다면 [[nouveau]] 드라이버를 사용하시는것이 낫습니다.

== 커널 ==
위에 말한 바와 같이 엔비디아 커널 드라이버는 현재 설치한 커널에 대해 빌드하고 실행합니다. 모듈로 빌드하기 때문에 커널에서 모듈 불러오기를 지원해야 합니다 (하단 참조).

커널 모듈(nvidia.ko)은 그래픽 칩을 다루는 상업용 부분(일반적으로 "바이너리 블롭"이라고 함)과 바이너리 블롭과 커널간을 실행 시간에 중재하는 오픈소스 부분("접착제"역할)이 있습니다. 함께 제대로 동작해야 하는데 그렇지 않으면 데이터 손실(커널 망가짐, X 프로그램에서 데이터를 저장하지 않은 채로 X 서버 깨짐)에 직면하게 되고 심지어는 하드웨어 동작 실패 현상이 일어나기도 합니다(과열되거나 전원 관리 관련 문제가 떠오를 것입니다).

=== 커널 호환성 ===
때때로, 새 커널 릴리스에는 드라이버에 대한 내부 ABI가 바뀌는데, 이들 ABI를 사용하는 모든 드라이버는 즉시 바뀌어야 함을 의미합니다. 오픈소스 드라이버에서는 특히 커널에 배포하는 드라이버의 경우 드라이버들간의 호출 매개를 연결하는 전체적인 부분을 수정해야 함은 자명한 사실이며 커널의 다른 부분은 쉽게 검토해볼 수 있습니다. nvidia.ko와 같은 상업용 드라이버는 조금 동일하게 동작하는 것이 아닙니다. 내부 ABI가 바뀌면 "붙어 있는 요소"를 거의 수정할 수 없는데 상업 코드 부분에서 사용하는 고정물이 어떻게 사용되는지 알 수 없기 때문입니다. 이런 문제를 패치하기 위해 관리하고 제대로 동작하게끔 하려면 지원하지 않는 새 커널에서 nvidia.ko를 실행하는데 있어 위험성을 감수해야 하며, 데이터를 잃을 수 있고, 하드웨어가 망가질 수 있습니다.

비호환 새 커널버전이 출시되면 아마도 당분간은 새로 지원하는 커널에 그대로 의지하는 것이 좋을 것입니다. Nvidia 에서는 보통 사용하는데 적합하다고 생각하는 새로운 상업 릴리스를 준비하는데 몇 주가 걸립니다. 그냥 기다리십시오. 혼란속에 모든 위험성을 내던지고 싶은 여러분들을 위해 nvidia-drivers 이빌드는 eutils.eclass에서 지원하는 epatch_user 명령을 실행합니다. 이 명령으로 최신의 비 지원 커널 릴리스에 맞춰 nvidia-drivers를 패치할 수 있습니다. 문제 상황에 직면했을때 nvidia-drivers 메인테이너, Nvidia 회사 양측 그 어느 누구도 지원하지 않음을 참고하십시오. 하드웨어 보증이 무효가 될 수 있고, 젠투 메인테이너는 Nvidia만이 제대로 디버그 할 수 있는 상업용 드라이버를 수정할 수 없으며, 커널 메인테이너(젠투와 업스트림) 역시 상업용 드라이버 또는 문제 상황으로 치달아 "망가진" 시스템으로 간주된 대상은 지원하지 않습니다.

=== 요구 커널 옵션===
커널을 설정하는데 '''genkernel all''' 옵션을 사용했다면, 모든 항목이 설정되어 있습니다만, 그렇지 않다면 지원 기능을 활성화 했는지 커널 설정을 다시 확인하십시오:
{{Kernel||<pre>
 Loadable module support --->
    [*] Enable loadable module support 
</pre>
}}

커널에서 ''Memory Type Range Register''도 활성화해야 합니다:
{{Kernel||<pre>
 Processor and Features --->
      [*] MTRR (Memory Type Range Register) support
</pre>
}}

Also, if you have an AGP graphics card, you can optionally enable '''agpgart''' support to your kernel, either compiled in or as a module. If
you do not use the in-kernel agpgart, then the drivers will use their own '''agpgart''' implementation, called '''NvAGP'''.  On certain systems, this
performs better than the in-kernel agpgart, and on others, it performs worse. You will need to evaluate this on your own system to get the best performance. If you are unsure what to do, use the in-kernel agpgart:
{{Kernel||<pre>
Device Drivers --->
    Graphics Support --->
        -*- /dev/agpgart (AGP Support) --->
</pre>}}

{{Note|amd64에서는 IOMMU가 agppart 설정을 관리합니다.}}

{{Important|For x86 and AMD64 processors, the in-kernel [[framebuffer]] driver conflicts with the binary driver provided by nVidia. If you will be compiling your kernel for these CPUs,you must completely remove support for the in-kernel driver as shown:
{{Kernel||<pre>
Device Drivers --->
    Graphics Support --->
        <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
</pre>}}
}}

A framebuffer alternative is [[uvesafb]], which can be installed parallel to nvidia-drivers.

The '''nvidia-drivers''' ebuild automatically discovers your kernel version based on the {{Path|/usr/src/linux}} symlink. Please ensure that you have
this symlink pointing to the correct sources and that your kernel is correctly configured. Please refer to the "Configuring the Kernel" section of the [http://www.gentoo.org/doc/en/handbook/ Gentoo Handbook] for details on configuring your kernel.

First, you'll need to choose the right kernel source using '''eselect'''. If you are using '''gentoo-sources-3.7.10''', your kernel listing might look something like this:
{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, you'll notice that the '''linux-3.7.10-gentoo''' kernel is marked with an asterisk ('''*''') to show that it is the symlinked kernel.

If the symlink is not pointing to the correct sources, you must update the link by selecting the number of your desired kernel sources, as in the example above.
{{RootCmd|eselect kernel set 1}}

== 드라이버 == 

Now it's time to install the drivers. You can do this by first following the [http://www.gentoo.org/doc/en/xorg-config.xml X Server Configuration HOWTO] and setting '''VIDEO_CARDS="nvidia"''' in {{Path|/etc/portage/make.conf}}. When you install the X server, it will then install the right version of
'''nvidia-drivers''' for you.

{{Note|The drivers can be installed with the '''gtk''' USE flag set in {{Path|/etc/portage/make.conf}}. This will install '''media-video/nvidia-settings''', a handy graphical tool for monitoring and configuring several aspects of your nVidia card.}}

{{Important|Every time you [http://www.gentoo.org/doc/en/kernel-upgrade.xml compile a new kernel] or recompile the current one, you will need to reinstall the nVidia kernel modules. An easy way to rebuild the modules installed by ebuilds (such as '''nvidia-drivers''') is to run '''emerge @module-rebuild'''.}}

Once the installation has finished, run '''modprobe nvidia''' to load the kernel module into memory. If this is an upgrade, you should remove the
previous module first.
{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

To prevent you having to manually load the module on every bootup, you probably want to have this done automatically each time you boot your system, so edit {{Path|/etc/conf.d/modules}} and add '''nvidia''' to it.

{{Important|If you compiled '''agpgart''' as a module, you will need to add it to {{Path|/etc/conf.d/modules}} as well.}}

=== The X Server ===
Once the appropriate drivers are installed you need to configure your X Server to use the '''nvidia''' driver instead of the default '''nv''' driver.
{{VIDEO_CARDS/xorg.conf|nvidia}}

Run '''eselect''' so that the X Server uses the nVidia GLX libraries:
{{RootCmd|eselect opengl set nvidia}}

=== 권한 ===
{{VIDEO_CARDS/Permissions|nvidia}}

== Testing your Card ==
To test your nVidia card, fire up X and run '''glxinfo''', which is part of the '''mesa-progs''' package. It should say that direct rendering is activated:
{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering: Yes
</pre>}}

To monitor your FPS, run '''glxgears'''.

== Enabling nvidia Support ==
Some tools, such as '''mplayer''' and '''xine-lib''', use a local USE flag called '''xvmc''' which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in '''xvmc''' in your USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to '''media-video/mplayer''' and/or '''media-libs/xine-lib''' in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the '''nvidia''' USE flag, so you may want to add it to {{Path|/etc/portage/make.conf}}.

Then, run '''emerge -uD --newuse @world''' to rebuild the applications that benefit from the USE flag change.

=== Using NVidia Settings Tool ===
nVidia also provides you with a settings tool. This tool allows you to monitor and change graphical settings without restarting the X server and is available through Portage as '''media-video/nvidia-settings'''. As mentioned earlier, it will be pulled in automatically if you install the drivers with the '''gtk''' USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== OpenGL/OpenCL 활성화 ===

OpenGL과 OpenCL을 활성화 하십시오.

{{RootCmd|eselect opengl set nvidia}}
{{RootCmd|eselect opencl set nvidia}}

위 사항을 바꾸는 동안 Xorg 서버가 동작중이 아닌지 반드시 확인해야 합니다.

== 문제 해결 ==
* {{Bug|nvidia-drivers|search=package}}

=== Getting 2D acceleration to work on machines with 4GB memory or more ===
If you are having trouble with the nVidia 2D acceleration it is likely that you are unable to set up a write-combining range with MTRR. To verify, check the contents of {{Path|/proc/mtrr}}:
{{RootCmd|cat /proc/mtrr}}

Every line should contain "write-back" or "write-combining". If you see a line with "uncachable" in it you will need to change a BIOS setting to fix this.

Reboot and enter the BIOS, then find the MTRR settings (probably under "CPU Settings"). Change the setting from "continuous" to "discrete" and boot back into Linux. You will now find out that there is no "uncachable" entry anymore and 2D acceleration now works without any glitches.

=== When I attempt to load the kernel module, I receive a "no such device" ===
This is usually caused by one of the following issues:

1.  You don't have an nVidia card at all.  Check '''lspci''' output to confirm that you have an nVidia graphics card installed and detected.

2.  The currently installed version of x11-drivers/nvidia-drivers does not support your graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at http://www.geforce.com/drivers.  See the [[NVidia/nvidia-drivers#Which_version.3F|Which Version]] section above.

3.  Another kernel driver has control of the hardware.  Check '''lspci -k''' to see if another driver like "nouveau" is bound to the graphics card.  If so, you will need to disable or blacklist this driver.

=== Xorg says it can't find any screens ===
When you boot up your computer and end up with a black screen or a console prompt instead of your GUI; you can press Ctrl+Alt+F2 to bring up a console prompt if you don't already have one. Then you can run:
{{RootCmd| /etc/init.d/xdm stop}}
{{Cmd| startx}}
to see the output of Xorg. If one of the first errors is that Xorg can't find any screens, then follow these steps to resolve your issue.<br />
It should be enough to run the following command before rebooting:
{{Cmd| nvidia-xconfig}}
But if that doesn't work, run lspci and you'll find your video card starts off like this:
01:00.0 VGA compatible controller: make and model of videocard <br />
Take the first bit, ''01.00.0'' and put it in your /etc/X11/xorg.conf with the BusID option:
{{File|/etc/X11/xorg.conf||<pre>
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
</pre>}}

=== Direct rendering is not enabled ===

If Direct rendering does not work, it may be because you have Direct Rendering Manager enabled in the kernel, which conflicts with the driver. You can see Direct rendering Status by following instructions in the section "Testing you card".

First, disable Direct Rendering Manager (CONFIG_DRM) in the kernel :

{{Kernel||<pre>
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
</pre>
}}

And rebuild '''x11-drivers/nvidia-drivers''' since the driver may have built against the kernel DRM symbols. It should fix your problem.

== Expert Configuration ==

=== Documentation ===
The nVidia driver package also comes with comprehensive documentation. This is installed into '''/usr/share/doc''' and can be viewed with the following
command:
{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== Kernel module parameters ===
The '''nvidia''' kernel module accepts a number of parameters (options) which you can use to tweak the behaviour of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file '''/etc/modprobe.d/nvidia.conf'''. Remember to run '''update-modules''' after modifying this file, and bear in mind that you will need to reload the '''nvidia''' module before the new settings take effect.

Edit /etc/modprobe.d/nvidia.conf in your favourite editor:
{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

Update module information:
{{RootCmd|update-modules}}

Unload the nvidia module...
{{RootCmd|modprobe -r nvidia}}

...and load it once again:
{{RootCmd|modprobe nvidia}}

=== Advanced X configuration ===
The GLX layer also has a plethora of options which can be configured. These control the configuration of TV out, dual displays, monitor frequency detection, etc. Again, all of the available options are detailed in the documentation.

If you wish to use any of these options, you need to list them in the relevant Device section of your X config file (usually '''/etc/X11/xorg.conf'''). For example, suppose I wanted to disable the splash logo:

{{File|/etc/X11/xorg.conf|Disable the splash logo|<pre>
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
</pre>}}

== Acknowledgements ==
We would like to thank the following authors and editors for their contributions to this guide: Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni.

== See also ==
* [[nouveau & nvidia-drivers switching]]
* [[NVIDIA Driver with Optimus Laptops]]

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
