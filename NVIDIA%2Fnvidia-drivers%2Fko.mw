<languages />

{{Metadata|abstract=nvidia-drivers는 nVidia 그래픽 카드용 상용 그래픽 드라이버입니다. 대신 사용하는 오픈 소스는 nouveau가 있습니다.}}

{{Package|x11-drivers/nvidia-drivers}}는 엔비디아 그래픽 카드용 상용 그래픽 드라이버입니다. 대신 사용하는 오픈 소스는 [[nouveau]]가 있습니다.

트리에 있는 {{Package|x11-drivers/nvidia-drivers}}는 엔비디아가 출시하며 리눅스 커널에 대응하여 빌드합니다. 카드와 엄청난 양의 데이터를 주고받는 바이너리 블롭이 들어 있습니다. 드라이버는 두 부분으로 나뉘는데 하나는 커널 모듈이고 다른 하나는 X11 드라이버 입니다. 두 부분은 단일 꾸러미에 들어있습니다. 엔비디아가 자체적으로 드라이버를 꾸러미에 담아두므로 드라이버를 설치하기 전에 어떤 드라이버 사용할지 선택해야 합니다.

{{Package|x11-drivers/nvidia-drivers}} 꾸러미에는 엔비디아의 ''모든'' 카드를 지원하는 최신 드라이버와 카드가 얼마나 오래됐는지의 여부에 따라 다양한 버전이 들어있습니다. 어떤 카드를 사용하는지 감지하는 eclass를 사용하므로 적당한 버전을 설치합니다.

== 하드웨어 호환성 ==

{{Package|x11-drivers/nvidia-drivers}} 꾸러미에서는 다양한 엔비디아 카드를 지원합니다. 가지고 있는 카드에 따라 설치할 여러가지 버전이 존재합니다. 어떤 nvidia-drivers 버전을 사용해야 하는지에 대해서는 [http://www.nvidia.com/object/IO_32667.html 구형 드라이버란 무엇인가?] 라는 공식 엔비디아 문서를 보십시오. [http://www.nvidia.com/Download/Find.aspx 여기] 에서 제공하는 대화형 양식을 통해 꽤 괜찮은 방법으로 이 문서를 찾아 볼 수도 있습니다. 가지고 있는 그래픽 카드를 입력('제품 형식' 필드에 Legacy 옵션이 있습니다) 하면 양식 하단에서 지원하는 가장 최상의 버전을 찾을 수 있습니다.

가지고 있는 카드가 구형 카드임을 확인했다면 {{Package|nvidia-drivers}}의 최근 릴리즈를 가려야 합니다. 예를 들자면:

{{FileBox|filename=/etc/portage/package.mask|title=Masking drivers with version higher than 174|1=
>x11-drivers/nvidia-drivers-174
}}

젠투에서는 71.86.xx 버전을 제공하지 않음을 참고하십시오. 이 드라이버가 필요하다면 [[nouveau]] 드라이버를 사용하시는것이 낫습니다.

== Installation ==

=== Kernel ===

위에 말한 바와 같이 엔비디아 커널 드라이버는 현재 설치한 커널에 대해 빌드하고 실행합니다. 모듈로 빌드하기 때문에 커널에서 모듈 불러오기를 지원해야 합니다 (하단 참조).

The kernel module ({{Path|nvidia.ko}}) consists of a proprietary part (commonly known as the "binary blob") which drives the graphics chip(s), and an open source part (the "glue") which at runtime acts as intermediary between the proprietary part and the kernel. These all need to work nicely together as otherwise the user might be faced with data loss (through kernel panics, X servers crashing with unsaved data in X applications) and even hardware failure (overheating and other power management related issues should spring to mind).

==== Kernel compatibility ====

때때로 새 커널 릴리스에는 드라이버에 대한 내부 ABI가 바뀌는데, 모든 드라이버가 이 ABI를 사용하도록 즉시 바꾸어야 합니다. 오픈소스 드라이버에서는 특히 커널에 배포하는 드라이버의 경우 드라이버간의 호출 매개를 연결하는 전체적인 부분을 수정해야 함은 자명한 사실이며 커널의 다른 부분은 쉽게 검토해볼 수 있습니다. nvidia.ko와 같은 상업용 드라이버는 조금 다르게 동작합니다. 내부 ABI가 바뀌면 "붙어 있는 요소"를 거의 수정할 수 없는데 상업 코드 부분에서 사용하는 고착 부분을 어떻게 활용하는지 알 수 없기 때문입니다. 심지어 그럴싸하게 동작하도록 패치하고 난 후 지원하지 않는 새 커널에서 위험을 감수해가며 nvidia.ko를 실행하면, 데이터를 잃을 수 있고, 하드웨어가 망가질 수 있습니다.

비호환 새 커널버전이 출시되면 당분간은 새로 지원하는 커널에 그대로 의지하는 것이 좋습니다. Nvidia 에서는 보통 사용하는데 적합하다고 간주하는 새 상업 릴리스를 준비하는데 몇 주가 걸립니다. 그냥 기다리십시오. 정말 필요하다면 nvidia-drivers 이빌드의 epatch_user 명령을 활용할 수 있습니다. 지원하지 않는 최신 커널 릴리즈에 맞춰 사용자가 패치할 수 있습니다. 참고로 nvidia-drivers 메인테이너나 nVidia 이 부분을 지원하지 않습니다. 하드웨어 보증이 날라가며, nVidia 만 버그를 제대로 발견할 수 있는 상업용 드라이버이기 때문에 젠투 메인테이너가 문제를 수정할 수 없고, 커널 메인테이너(젠투 및 업스트림)는 분명히 상업용 드라이버 또는 문제 상황으로 치달아 "꼬여버린" 시스템을 지원하지 않습니다.

If {{c|genkernel all}} was used to configure the kernel, then everything is all set. If not, double check the kernel configuration so that this support is enabled:

{{KernelBox|title=Enable loadable module support|1=
[*] Enable loadable module support --->
}}

커널에서 ''Memory Type Range Register''도 활성화해야 합니다:

{{KernelBox|title=MTRR 지원 활성화|1=
Processor type and features --->
    [*] MTRR (Memory Type Range Register) support
}}

If the system has an AGP graphics card, then optionally enable agpgart support to the kernel, either compiled in or as a module. If the in-kernel agpgart module is not used, then the drivers will use its own agpgart implementation, called NvAGP.  On certain systems, this performs better than the in-kernel agpgart, and on others, it performs worse. Evaluate either choice on the system to get the best performance. When uncertain what to do, use the in-kernel agpgart:

{{KernelBox|title=Enable agpgart support|1=
Device Drivers --->
   Graphics support --->
      -*- /dev/agpgart (AGP Support) --->
}}

{{Note|amd64에서는 IOMMU가 agpgart 설정을 관리합니다.}}

{{Important|For x86 and AMD64 processors, the in-kernel [[framebuffer]] driver conflicts with the binary driver provided by nVidia. When compiling the kernel for these CPUs, completely remove support for the in-kernel driver as shown:
{{KernelBox|title=Disable support for the in-kernel driver|1=
Device Drivers --->
    Graphics support --->
        Frame buffer Devices --->
            <*> Support for frame buffer devices --->
            < >   nVidia Framebuffer Support
            < >   nVidia Riva support
}}
Now make sure the nouveau driver is disabled:
{{KernelBox|
Device Drivers  --->
    Graphics support  --->
        < > Nouveau (nVidia) cards
}}
}}

A framebuffer alternative is [[uvesafb]], which can be installed parallel to {{Package|x11-drivers/nvidia-drivers}}. 

{{Important|For x86 and AMD64 processors, the [[uvesafb]] driver conflicts with the binary driver provided by nVidia above 361.28 versions.}}


For (U)EFI systems, uvesafb will not work. Be warned that enabling ''efifb'' support in kernel (<code>CONFIG_FB_EFI=y</code>) causes intermittent problems with the initialization of the nvidia drivers. There is no known alternative framebuffer for (U)EFI systems.

The '''nvidia-drivers''' ebuild automatically discovers the kernel version based on the {{Path|/usr/src/linux}} symlink. Please ensure that this symlink is pointing to the correct sources and that the kernel is correctly configured. Please refer to the "Configuring the Kernel" section of the [[Handbook:Main_Page|Gentoo Handbook]] for details on configuring the kernel.

First, choose the right kernel source using {{c|eselect}}. When using {{Package|sys-kernel/gentoo-sources}} version 3.7.10 for instance, the kernel listing might look something like this:

{{RootCmd|eselect kernel list|output=<pre>
Available kernel symlink targets:
  [1]   linux-3.7.10-gentoo *
  [2]   linux-3.7.9-gentoo
</pre>}}

In the above output, notice that the linux-3.7.10-gentoo kernel is marked with an asterisk (<code>*</code>) to show that it is the symlinked kernel.

If the symlink is not pointing to the correct sources, update the link by selecting the number of the desired kernel sources, as in the example above.

{{RootCmd|eselect kernel set 1}}

== Configuration ==

=== Drivers === 

이제 드라이버를 설치할 차례입니다. 먼저 [[Xorg/Guide|X서버 설정 안내서]]를 따른 후, {{Path|/etc/portage/make.conf}}에 <code>VIDEO_CARDS="nvidia"</code> 설정을 넣으십시오. 그러면 X 서버를 설치할 때 올바른 버전의 {{Package|x11-drivers/nvidia-drivers}}를 알아서 설치합니다.

{{Note/ko|{{Path|/etc/portage/make.conf}}에 '''gtk''' USE 플래그를 설정하여 드라이버를 설치할 수 있습니다. 이렇게 설치하면 {{Package|media-video/nvidia-settings}}를 함께 설치하는데 이 꾸러미는 nVidia 카드의 전반적인 측면을 보고 설정할 수 있게 하는 간편한 그래픽 도구입니다.}}

{{Important|Every time a [[Kernel/Upgrade|kernel is built]], it is necessary to reinstall the nVidia kernel modules. An easy way to rebuild the modules installed by ebuilds (such as {{Package|x11-drivers/nvidia-drivers}}) is to run {{c|emerge @module-rebuild}}.}}

Once the installation has finished, run {{c|modprobe nvidia}} to load the kernel module into memory. If this is an upgrade, remove the previous module first.

{{RootCmd
|lsmod {{!}} grep nvidia
|rmmod nvidia
|modprobe nvidia
}}

부팅할 때마다 모듈을 수동으로 하나하나 불러오는 일을 피하려 시스템을 매번 부팅할 때 자동으로 처리하려 할테니, {{Path|/etc/conf.d/modules}}를 편집하여 <code>nvidia</code>를 추가하십시오.

{{Important/ko|<code>agpgart</code>를 모듈로 컴파일하면, 마찬가지로 {{Path|/etc/conf.d/modules}}에 추가해야 합니다.}}

=== Kernel module signing (optional) ===

{{Note|The information in this section in unnecessary for systems that do not implement signed kernel modules. Feel free to skip it.}}

If you are using secure boot kernel signing then you will need to sign the Nvidia kernel modules before they can be loaded.

You do this by using the kernel provided {{c|perl}} script as follows.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-uvm.ko}}

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia.ko}}

As of driver version 358.09 a new module has been made to handle monitor mode setting and for this driver version this module must also be signed.

{{RootCmd|perl /usr/src/linux/scripts/sign-file sha512 /usr/src/linux/signing_key.priv /usr/src/linux/signing_key.x509 /lib/modules/Kernel-Version-modules-path/video/nvidia-modeset.ko}}

Once you have signed these modules then the driver will load as expected on boot up. This module signing method can be used to sign other modules not only your nvidia-drivers. You would have to modify the path and corresponding module accordingly.

=== The X server ===

Once the appropriate drivers are installed, configure the X server to use the <code>nvidia</code> driver instead of the default <code>nv</code> driver.

{{VIDEO_CARDS/xorg.conf|nvidia}}

Run {{c|eselect}} so that the X server uses the nVidia GLX libraries:

{{RootCmd|eselect opengl set nvidia}}

=== Permissions ===

{{VIDEO_CARDS/Permissions|nvidia}}

=== Enabling global nvidia support ===

Some tools, such as {{Package|media-video/mplayer}} and {{Package|media-libs/xine-lib}}, use a local USE flag called <code>xvmc</code> which enables XvMCNVIDIA support, useful when watching high resolution movies. Add in <code>xvmc</code> in the USE variable in {{Path|/etc/portage/make.conf}} or add it as USE flag to {{Package|media-video/mplayer}} and/or {{Package|media-libs/xine-lib}} in {{Path|/etc/portage/package.use}}.

GeForce 8 series and later GPUs do come with VDPAU support which superseded XvMCNVIDIA support. See the [[VDPAU]] article for enabling VDPAU support.

There are also some applications that use the <code>nvidia</code> USE flag, so it might be a good idea to add it to {{Path|/etc/portage/make.conf}}.

Then, run {{c|emerge -uD --newuse @world}} to rebuild the applications that benefit from the USE flag change.

=== Using the nVidia settings tool ===

nVidia also provides a settings tool. This tool allows the user to monitor and change graphical settings without restarting the X server and is available through Portage as {{Package|media-video/nvidia-settings}}. As mentioned earlier, it will be pulled in automatically when installing the drivers with the <code>gtk</code> USE flag set in {{Path|/etc/portage/make.conf}} or in {{Path|/etc/portage/package.use}}.

=== OpenGL/OpenCL 활성화 ===

To enable OpenGL and OpenCL though the device, run:

{{RootCmd
|eselect opengl set nvidia
|eselect opencl set nvidia
}}

Make sure that the Xorg server is not running during these changes.

== Usage ==

=== Testing the card ===

To test the nVidia card, fire up X and run {{c|glxinfo}}, which is part of the {{Package|x11-apps/mesa-progs}} package. It should say that direct rendering is activated:

{{Cmd|glxinfo {{!}} grep direct|output=<pre>
direct rendering:  Yes
</pre>}}

To monitor the FPS, run {{c|glxgears}}.

== 문제 해결 ==

* {{Bug|nvidia-drivers|search=package}}

== MSI 인터럽트를 활성화 하면 드라이버 초기화에 실패하네요 ==

리눅스 NVIDIA 드라이버는 메시지 신호 인터럽트(MSI)를 기본으로 사용합니다. 이 기능은 호환성과 확장성의 장점을 제공하는데, 주된 이유라면 IRQ 공유를 막기 위해서입니다. 어떤 시스템에서는 가상 연결 인터럽트로 제대로 동작하지만, 일부 시스템에서는 MSI 지원에 문제가 있어보입니다. 이 문제는 NVIDIA 드라이버로 X를 시작하는데 있어서 불가능한 것으로 보이며, 또는 CUDA 초기화 문제로 보이기도 합니다.

MSI 인터럽트는 NVIDIA 커널 모듈 매개변수에 <code>NVreg_EnableMSI=0</code> 값을 부여하여 비활성화 할 수 있습니다. 이 값은 모듈을 불러오는 과정에서, 또는 배포본에서 제공하는 커널 모듈 설정 파일({{Path|/etc/modprobe.d/}} 같은 디렉터리에 있음)에서 설정할 수 있습니다.

예를 들자면:

{{FileBox|filename=/etc/modprobe.d/nvidia.conf|title=nVidia NVreg_EnableMSI 설정|1=<nowiki>
# Nvidia drivers support
alias char-major-195 nvidia
alias /dev/nvidiactl char-major-195
  
# To tweak the driver the following options can be used, note that
# you should be careful, as it could cause instability!! For more 
# options see /usr/share/doc/nvidia-drivers-337.19/README 
#
# !!! SECURITY WARNING !!!
# DO NOT MODIFY OR REMOVE THE DEVICE FILE RELATED OPTIONS UNLESS YOU KNOW
# WHAT YOU ARE DOING.
# ONLY ADD TRUSTED USERS TO THE VIDEO GROUP, THESE USERS MAY BE ABLE TO CRASH,
# COMPROMISE, OR IRREPARABLY DAMAGE THE MACHINE.
options nvidia NVreg_DeviceFileMode=432 NVreg_DeviceFileUID=0 NVreg_DeviceFileGID=27 NVreg_ModifyDeviceFiles=1 NVreg_EnableMSI=0
</nowiki>}}

=== 4GB 이상 용량의 메모리를 가진 머신에서 2D 가속 활성화하기 ===

nVidia 2D 가속에 문제가 있다면 MTRR의 write-combining 범위를 설정할 수 없는 경우일지도 모릅니다. 원인을 확인하려면  다음 명령으로 {{Path|/proc/mtrr}}의 내용을 확인하십시오:

{{RootCmd|cat /proc/mtrr}}

Every line should contain <code>write-back</code> or <code>write-combining</code>. When a line shows up with <code>uncachable</code> in it then it is necessary to change a BIOS setting to fix this.

Reboot and enter the BIOS, then find the MTRR settings (probably under "CPU Settings"). Change the setting from <code>continuous</code> to <code>discrete</code> and boot back into Linux. There is now no <code>uncachable</code> entry anymore and 2D acceleration now works without any glitches.

=== 커널 모듈을 불러오려는데 "no such device" 메시지를 받았습니다 ===

보통 다음 문제 중 하나가 원인입니다:

# The system does not have a nVidia card at all.  Check {{c|lspci}} output to confirm that the system has a nVidia graphics card installed and detected.
# The currently installed version of {{Package|x11-drivers/nvidia-drivers}} does not support the installed graphics card model.  Check the README file in /usr/share/nvidia-drivers-*/ for a list of supported devices, or use the driver search at [http://www.geforce.com/drivers http://www.geforce.com/drivers].
# Another kernel driver has control of the hardware. Check {{c|lspci -k}} to see if another driver like "nouveau" is bound to the graphics card. If so, disable or blacklist this driver.

=== Xorg 에서 어떤 화면도 찾을 수 없다고 함 ===

컴퓨터를 부팅하고나서 GUI 화면 대신 어두컴컴한 화면이나 콘솔 프롬프트로 돌아가는 경우가 있습니다. GUI로 부팅하지 못했을 때 {{Key|Ctrl}}+{{Key|Alt}}+{{Key|F2}}키를 눌러서 가상 콘솔로 갈 수 있습니다. 그런 후 다음 명령을 실행하십시오:

{{RootCmd| /etc/init.d/xdm stop}}

{{Cmd| startx}}

{{Cmd| startx}}를 실행하여 Xorg 출력을 살펴보십시오. 처음 나타나는 오류가 Xorg에서 어떤 화면도 찾을 수 없다는 문제라면, 이 문제를 해결하기 위해 다음 단계를 따르십시오.

다시 부팅하기 전에 다음 명령을 확실하게 실행해야 합니다:

{{Cmd| /opt/bin/nvidia-xconfig}}

But if that doesn't work, run {{c|lspci}} and notice that the video card starts off like this:

{{RootCmd|lspci|output=<pre>
 . . .
01:00.0 VGA compatible controller: make and model of videocard
 . . . 
</pre>
}}

처음 부분 <code>01.00.0</code>을 찾아서 {{Path|/etc/X11/xorg.conf}} 의 <code>BusID</code> 옵션에 넣으십시오:

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
# this is not the whole file, only the part that needs edited
# the file should already exist after running nvidia-xconfig
 
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:1:0:0"
EndSection
}}

=== 직접 렌더링이 활성화되지 않아요 ===

직접 렌더링이 동작하지 않는다면, 드라이버와 충돌하게끔 커널에서 직접 렌더링 관리자를 활성화했기 때문일 수도 있습니다. [[#.EC.B9.B4.EB.93.9C_.EC.8B.9C.ED.97.98.ED.95.98.EA.B8.B0|카드 시험하기]] 장의 절차를 따라 직접 렌더링 상태를 볼 수 있습니다.

먼저 직접 렌더링 관리자(<code>CONFIG_DRM</code>)를 커널에서 비활성화 하십시오:

{{KernelBox|title=직접 렌더링 관리자(DRM) 비활성화|1=
Device drivers --->
    Graphics support --->
        < > Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)
}}

그리고 커널 DRM 심볼에 대해 드라이버를 빌드했을터이니 {{Package|x11-drivers/nvidia-drivers}}를 다시 빌드하십시오. 이리 하면 문제를 해결할 수 있습니다.

=== 동영상 재생이 버벅거리고 느린데요 ===

최근 NVidia 바이너리 드라이버에서 느린 동영상 재생이라든지 점진적으로 버벅이는 현상을 야기하여 몇가지 형식의 동영상 재생이 멈추는 것 같습니다. 이 문제는 아마도 일부 CPU에서 일반적인 ACPI CPU 대기 정책 대신에 인텔 CPU 전력 대기 정책으로 대신 처리 과정에서  발생하는 것 같습니다.

Disable the Intel CPU idling method using <code>intel_idle.max_cstate=0</code> on the kernel command line boot method, which should cause the kernel to automatically fall back to the normal or older ACPI CPU idling method. Also, disabling the NVidia Powermizer feature, or setting Powermizer to maximum performance within {{c|nvidia-settings}} has been said to help. Although the Intel CPU idling method recently was introduced as the default CPU idling method for i5 and i7 CPUs (versus using ACPI CPU idling) is the root cause here. This idling method significantly solves the problem, however some minimal stuttering or slow video is encountered if deinterlacing was enabled; this is when the video is likely already deinterlaced (ie. alias <code>mplayer-nodeint</code> with something similar to <code>mplayer -vo vdpau:deint=0:denoise=0:nochroma-deint:colorspace=0:hqscaling=1, video.mpg</code> as a work around.)

=== No vertical synchronization (no VSync, tearing) in OpenGL applications ===

Adding the following option to the screen section prevents tearing on GTX 660, 660 Ti, and probably some other GPUs ([https://devtalk.nvidia.com/default/topic/543305/linux/screen-video-tearing-gtx6xx-7xx-kepler-9xx-maxwell-in-almost-all-applications-including-desktop/post/3958593/ reference]):

{{FileBox|filename=/etc/X11/xorg.conf|lang=xorg_conf|1=
Section "Section"
     . . .
    Option         "metamodes" "nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
     . . .
EndSection
}}

== 전문가 설정 ==

=== 문서 ===

 {{Package|x11-drivers/nvidia-drivers}} 꾸러미에는 실용적인 문서가 있습니다. 이 문서는 {{Path|/usr/share/doc}}에 있으며 다음 명령으로 살펴볼 수 있습니다:

{{Cmd|less /usr/share/doc/nvidia-drivers-*/README.bz2}}

=== 커널 모듈 매개 변수 ===

The <code>nvidia</code> kernel module accepts a number of parameters (options) which can be used to tweak the behaviour of the driver. Most of these are mentioned in the documentation. To add or change the values of these parameters, edit the file {{Path|/etc/modprobe.d/nvidia.conf}}. Remember to run {{c|update-modules}} after modifying this file, and bear in mind to reload the <code>nvidia</code> module before the new settings take effect.

편집기에서 {{Path|/etc/modprobe.d/nvidia.conf}}를 편집하십시오:

{{RootCmd|nano -w /etc/modprobe.d/nvidia.conf}}

모듈 정보를 업데이트하십시오:

{{RootCmd|update-modules}}

Unload the <code>nvidia</code> module...

{{RootCmd|modprobe -r nvidia}}

...그리고 다시 불러오십시오:

{{RootCmd|modprobe nvidia}}

=== 고급 X 설정 ===

GLX 계층에는 설정 가능한 상당히 많은 옵션이 있습니다. TV 출력, 듀얼 디스플레이, 모니터 주파수 감지 등의 설정을 다룰 수 있습니다. 다시 말씀드리지만, 여기에 있는 모든 옵션은 문서에 자세히 설명되어 있습니다.

이 옵션을 사용하려면 X 설정 파일의 관련 장치 섹션에 있는 목록을 살펴봐야 합니다(보통 '''/etc/X11/xorg.conf'''에 있음). 가령, 스플래시 로고를 비활성화 하려는 상황을 가정해보겠습니다.

{{FileBox|filename=/etc/X11/xorg.conf|title=스플래시 로고 비활성화|lang=xorg_conf|
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  Option     "NoLogo" "true"
  VideoRam   65536
EndSection
}}

== 추가 참조 ==

* [[nouveau & nvidia-drivers switching]] - Hybrid graphics mode using open-source drivers.
* [[NVIDIA/Optimus|NVIDIA Optimus]] - Configure a system to use closed-source drivers for hybrid graphics (modesetting).

{{Migrated|originalauthors=Sven Vermeulen, Joshua Saddler, M Curtis Napier and Chris Gianelloni}}

[[Category:Graphics Adapters]]
[[Category:Binary kernel modules]]
