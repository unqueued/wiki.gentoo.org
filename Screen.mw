{{InfoBox stack
|{{InfoBox homepage|http://www.gnu.org/software/screen/|header=true}}
|{{InfoBox wikipedia|GNU Screen}}
|{{InfoBox ohloh|screen}}
}}
'''GNU Screen''' is a program that enables the user to create sessions and have several virtual consoles.

== Installation ==
Full-screen window manager that multiplexes physical terminals between several processes.<br>
{{Package|app-misc/screen}} is available on Gentoo Linux and supports the following USE flags:
{{USEflag
|package=app-misc/screen
|debug++no
|nethack
|pam
|selinux
|multiuser
}}

You can install Screen using the following command:
{{Emerge|app-misc/screen}}

The configuration files are located in {{Path|/etc/screenrc}} and {{Path|~/.screenrc}}.

== Usage ==
General usage of Screen.

=== Start Session ===
Screen can be started with the following command:
{{Cmd|screen}}
Once started is will create a socket for the session in /var/run/screen/S-<username>
You can use any key combination within the session except of {{Key|Ctrl}}+{{Key|a}} which initiates the ''Command-Mode''.<br>
Give the session a reasonable name on startup:
{{Cmd|screen -t portage}}
Start a command in a screen session without attaching to it (like a daemon):
{{Cmd|screen -t portage -d -m emerge -DuN world}}

=== Commands ===
In ''Command Mode'' (after pressing {{Key|Ctrl}}+{{Key|a}}) the following key combinations can be used:

==== General ====
* {{Key|?}} = show quick help 
* {{Key|d}} = detach from the current session, all windows will continue running in the background

==== Creating/Managing windows ====
* {{Key|c}} = create another window
* {{Key|n}} or {{Key|Space}} = switch to the next window
* {{Key|p}} or {{Key|Backspace}} = switch to the previous window
* {{Key|0}} = switch to window 0 (similar for 1-9)
* {{Key|'}}, then a number or title = switch to window with given number or title, used to reach windows numbered above 9
* {{Key|Ctrl}}+{{Key|a}} = switch to last used window
* {{Key|Shift}}+{{Key|a}} = set title for window
* {{Key|"}} = display a list of windows, which can be navigated with arrow keys and selected with {{Key|Enter}} or {{Key|Space}}
* {{Key|w}} = display a non-interactive list of windows at the bottom of screen (see [[#Hardstatus_Customization|Hardstatus Customization]])

==== Copy, Paste and Scroll operations ====
* {{Key|Esc}} = begin "copy mode", which allows scrolling and copying of window contents with following keys
** {{Key|Ctrl}}+{{Key|B}} = scroll up in copy mode
** {{Key|Ctrl}}+{{Key|F}} = scroll down in copy mode
** arrow keys = move the curser in copy mode
** {{Key|Space}} or {{Key|Enter}} = begin/end copying
* {{Key|]}} = paste the text copied in copy mode

==== Logging, Monitoring ====
* {{Key|Shift}}+{{Key|h}} = start/stop logging everything displayed on current window. log will be saved as a file "screenlog.X" under the directory in which screen was run
* {{Key|h}} = (disabled in default configuration) dump the current contents of the current window to a file named "hardcopy.X" under the directory in which screen was run 
* {{Key|Shift}}+{{Key|m}} = start/stop monitoring current window for activity, any output produced by a program will cause an alert
* {{Key|_}} = start/stop monitoring for inactivity (i.e. a long and output producing command finishes runnning)

=== Resume Session ===
After the session is detached, all the active terminals remain active and so do commands that didn't finish yet. To list existing sessions:
{{Cmd|screen -ls
|output=<pre>There is a screen on:
        30014.pts-1.disi-bigtop (Detached)
1 Socket in /var/run/screen/S-disi.
</pre>}}
To resume this session:
{{Cmd|screen -r 30014.pts-1.disi-bigtop}}

=== Session within Session Recursion ===
You can use a Screen within a Screen session.&nbsp; This occurs when you connect to a another host's Screen session from within your Screen session.

To signal the secondary (remote) Screen session with the Meta key, you issue the key twice to signal the second (remote) Session.

{|
|{{Key|Ctrl}}+{{Key|a}}||Your normal meta key usage on your local screen
|-
|{{Key|Ctrl}}+{{Key|aa}}||Signals the second (remote) Session
|-
|{{Key|Ctrl}}+{{Key|aaa}}||Signals the third (remote) Session
|-
|{{Key|Ctrl}}+{{Key|aaaa}}||Signals the fourth (remote) Session, and so on
|}

Some tend to remap the Meta key on the other terminals so they don't have to count.&nbsp; However, if you use the console/terminal often, there tends to be a shortage of keys on the keyboard.

== Hardstatus Customization ==
Customizing the status line, or hardstatus line in GNU Screen terminology is quite common.  The following will get you started.

{{File|$HOME/.screenrc||<pre>
hardstatus alwayslastline
hardstatus string '%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{+b m}(%{W}%n*%f%t%?(%u)%?%{m})%{-b w}%?%+Lw%?%?%= %{g}][%{c} %D %M %d %{g}%c %{g}]'
</pre>}}

Screenshot of what my hardstatus line looks like using the above hardstatus incantation, along with nine additional terminal titles (ie. screen -t bash 7  bash --noprofile") defined within the .screenrc file.&nbsp; Each terminal gives me Calendar (calcurse), HTop (htop), startx (manual startx/DWM WM), Root (su), WWW (elinks), EMail (mutt) and a multitude of additional (bash) shells for working in.&nbsp; (This screenshot unfortunately omits color.)
{{Cmd|<pre>[ localhost2 ][ 0$ Calendar  1$ HTop  2$ startx  3$ Root  4$ bash  5-$ bash  (6*$bash) ][ Tue Nov 15  3:02 ]</pre>}}

== Solutions to Common Problems ==
'''After quitting an editor like [[Vim]], contents of the edited file remain in the screen window'''

Add the following line to screen preferences file
{{File|$HOME/.screenrc||<pre>
altscreen on
</pre>}}

'''Programs with too much output make older window contents scrolled away'''

You can increase the scrollback buffer size with following line in your preferences file
{{File|$HOME/.screenrc||<pre>
defscrollback 10000
</pre>}}

== TTY Autologin with a GNU Screen Session ==
The following will allow your system to auto login as your user, and automatically initiate a GNU Screen session on tty2.&nbsp; A good scenario for this; You're off the network, secluded from society, and you find entering a password is a bit redundant.&nbsp; The following demonstrates using the BASH Shell.

{{Warning|Take heed of the obvious possible security implications this has!}}

MinGetty will give you autologin capability along without having to use a password.
{{Emerge|net-dialup/mingetty}}

Comment-out the second TTY (ie. c2, or terminal number of your choosing) and add mingetty with autologin capability.
{{File|/etc/inittab||<pre>
-- c2:2345:respawn:/sbin/agetty 38400 tty2 linux
++ #c2:2345:respawn:/sbin/agetty 38400 tty2 linux
++ scr2:4:respawn:/sbin/mingetty --autologin USER_NAME tty2 linux
</pre>}}
Replace the above "USER_NAME" with your login name!

Add a line within your boot loader's configuration file to specify loading the init #4 level.&nbsp; (Referencing the "scr2:4" level specified within the above inittab file.)&nbsp; Also, utilize the "nox" option as well.&nbsp; (As I can recall, the line ending with "4" specifies runlevel four in correspondence to the above inittab entry.&nbsp; And the nox avoids XDM starting(?)&nbsp; If something needs further documenting here for clarification, please do so!)

The following configuration states, use framebuffer at the specified screen size using nox and start init level 4.
{{File|/boot/grub/menu.lst||<pre>
title Gentoo - No X using Framebuffer - GNU Screen Console
# Default Entry
#:0
    root (hd0,1)
    kernel (hd0,1)/boot/vmlinuz quiet root=/dev/sda2 video=uvesafb:nocrtc,ywrap,mtrr:3,1280x1024-16@60 nox 4
</pre>}}

At this point, your system can now auto login on TTY2 with your default shell.&nbsp; Assuming you're using the BASH shell, you can start GNU Screen automatically by adding the "screen" command to your $HOME/.bash_profile file.&nbsp; This file is executed automatically when you first login.&nbsp; (Make sure you start any subsequent BASH shells using the "bash --no-profile" switch, including shells started within the $HOME/.screenrc files!)

{{File|$HOME/.bash_profile||<pre>
# You don't need the "if/fi" statements.&nbsp; I only make mention to give you the idea of using a shared $HOME/.bash_profile.
# if [ $HOSTNAME = "localhost1.local" ]; then

    # Insert any $VARIABLES you want exported to the environment before GNU Screen is executed.

    # Insert any commands you want started on initial login before screen is executed.

    # vico/case checks if we're running from only a virtual tty
    vico="$(tty | grep -oE ....$)"
    case "$vico" in
        tty2) screen -wipe; ionice -c 2 -n 0 screen -RD ;;
    esac
    # Nothing further is executed after "screen -RD" unless you use "&"

# elif [ $HOSTNAME = "localhost2.local" ]; then
# fi
</pre>}}

With a little further scripting within $HOME/.bash_profile and a second entry within /etc/inittab, you could specify runlevel 5 for auto logging in and starting your favorite graphical desktop.&nbsp; (ie. XFCE4, Gnome, KDE, ...)&nbsp; And, while still spawning a GNU Screen session onto the desktop.&nbsp; But this is getting a little off topic of this GNU Screen Wiki.

== See also ==
* [[tmux]] - An alternative to GNU screen
* [[screenie]] - A GNU screen wrapper
* [[byobu]] - Profiles and configuration utilities for GNU screen

[[Category:Software]]
