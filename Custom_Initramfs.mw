{{WIP|author=frostschutz}}

''initramfs'' is a root filesystem which is embedded into the kernel and loaded at an early stage of the boot process. It is the successor of ''initrd''. It provides early userspace which lets you do things that the kernel can't easily do by itself during the boot process.

Using ''initramfs'' is optional. By default, the kernel initializes hardware using built-in drivers, mounts the specified root partition, loads the init system of the installed Linux distribution. The init system then loads additional modules and starts services until it finally allows you to log in. This is a good default behaviour and sufficient for many users. ''initramfs'' is for users with advanced requirements, for users who need to do things as early as possible, before the root partition is mounted.

Here are some examples of what you can do with ''initramfs'':

* Customize the boot process (e.g. print a welcome message, boot splash, ...)
* Load modules (e.g. a third party driver that can not be integrated into the kernel directly)
* Mount the root partition (for encrypted, logical, and otherwise special partitions)
* Provide a minimalistic rescue shell (if something goes wrong)
* Anything the kernel can't do (as long as you can do it in user space, e.g. by executing commands) 

If you don't have advanced requirements, you do not need ''initramfs''.

== Prerequisites ==

There are countless ways to make an ''initramfs''. You can choose not to create an ''initramfs'' at all but let other apps, such as [[Genkernel]] or [[Dracut]], do the work for you. If you are lucky, one of them does what you want out of the box, and you don't need to bother with how ''initramfs'' works and what it does anymore. If you're unlucky, they don't do what you want and you have to extend their functionality, or even build an ''initramfs'' all by yourself.

The ''initramfs'' usually contains at least one file, {{Path|/init}}. This file is executed by the kernel as the main init process (PID 1). It has to do all the work. In addition, there can be any number of additional files and directories that are required by {{Path|/init}}. They are usually files you will also find on any other root filesystem, such as {{Path|/dev}} for device nodes, {{Path|/proc}} for kernel information, {{Path|/bin}} for binaries, and so on. The structure of the ''initramfs'' can be simple, or it can be complicated, depending on what you are planning to do.

When the kernel mounts the ''initramfs'', your target root partition is not yet mounted, so you can't access any of your files. That means there is nothing but the ''initramfs''. So everything you need, everything you want, you have to include it in your ''initramfs''. If you want a shell, you have to include it in your ''initramfs''. If you want to mount something, you need a mount utility. If you need to load a module, your ''initramfs'' has to provide both the module, as well as a utility to load it. If the utility depends on libraries in order to work, you have to include the libraries as well. This seems complicated, and it is, because the ''initramfs'' has to function independently.

== Basics ==
=== Directory Structure ===
==== Device Nodes ====
=== Applications ===
==== Busybox ====
=== Init ===
=== Packaging Your Initramfs ===
==== Kernel Configuration ====
==== Embedding into the Kernel ====
==== Creating a Separate File ====
=== Finalizing ===
== Functionality ==
=== Rescue Shell ===
==== Remote Rescue Shell ====
=== Dynamic Devices ===
==== devtmpfs ====
==== mdev ====
=== LVM ===
=== DM-Crypt ===
==== GnuPG ====
==== Loop Device ====
=== Software RAID ===
==== mdadm ====
=== Networking ===
==== Static IP ====
==== DHCP ====
==== DNS ====
=== Kernel Modules ===
=== UUID/LABEL Root Mounting ===
=== Bootsplash ===
=== Bootchart ===
=== Systemd === 
== Troubleshooting ==
=== Multiple initramfs ===
=== Static vs. Dynamic binaries ===
=== Kernel panics ===
=== Job Control ===
=== Salvaging ===
==== Dismantling the Kernel ====
==== Extracting the cpio archive ====
=== Files in initramfs unreachable ===
=== Integrated initramfs doesn't always update ===
== Resources ==
