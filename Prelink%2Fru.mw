<languages />

{{Metadata|abstract=В этом руководстве рассказывается, как использовать поддержку prelink в Portage 2.0.46 и более поздних версиях.}}

В этом руководстве рассказывается, как использовать поддержку prelink в Portage 2.0.46 и более поздних версиях.

== Введение ==

=== Что такое Prelink и как он может помочь? ===

В большинстве распространенных приложений используются общие библиотеки. Эти разделяемые библиотеки должны быть загружены в память во время выполнения, при этом различные символьные ссылки должны быть вычислены. Для большинства небольших программ эта динамическая компоновка очень быстрая. Но для программ, написанных на C++ и имеющих множество зависимостей между библиотеками, динамическое связывание может занимать достаточно много времени. 

В большинстве систем библиотеки не изменяются очень часто, и когда программа запускается, операции, предпринятые для связывания программы, каждый раз одинаковы. Prelink использует это, выполняя привязку и сохраняя ее в исполняемом файле, по сути предварительно привязывая ее. 

Предварительное связывание может сократить время запуска приложений. Например, типичное время загрузки программы KDE можно сократить на целых 50%. Единственное, что необходимо сделать - повторно выполненить prelink каждый раз, когда библиотека обновляется для предварительно связанного исполняемого файла. 

{{Warning|Prelink не будет работать с Hardened Gentoo. Это связано с тем, что оба проекта пытаются изменить отображение адресных пространств для общих библиотек. Но prelink с опцией -R рандомизирует базовые адреса библиотеки, обеспечивая некоторую степень усиленной защиты.}}

=== Обобщение ===

* Prelinking is done via a program called, surprisingly, <code>prelink</code> . It changes the binary to make it start faster.
* If an application's dependent libraries change after you have prelinked it, you need to re-prelink the application, otherwise you lose the speed advantage. This is to say, everytime you update a package via portage that updates libraries, they need to be re-prelinked.
* The change to the binary is fully reversible. <code>prelink</code> has an undo function.
* Current versions of Portage can handle, via <code>prelink</code> , the changing MD5sums and mtimes of the binaries.
* You do not need to set <code>FEATURES="prelink"</code> in your {{Path|make.conf}} file; Portage will automatically support prelink if it can find the prelink binary.

== Настройка Prelink ==

=== Установка программ ===

First you need to install the <code>prelink</code> tool. The emerge process automatically verifies that your system can prelink safely. 

{{Emerge|prelink}}

Ряд людей получают ошибки в при установке prelink из-за неудавшихся тестов. Тесты были введены из соображений безопасности, поведение prelink не предсказуемо, если вы отключите их. Ошибки emerge обычно зависят только от основных пакетов; Binutils, gcc и glibc. Попробуйте повторно пересобрать эти пакеты в этом случае. 

{{Note:Совет: если вы получаете ошибку, попробуйте собрать и протестировать <code>prelink</code> самостоятельно (<code>./configure</code>; <code>make</code>; <code>make check</Code>). При сбое, вы можете просмотреть файлы *.log в каталоге testsuite. Они могут предоставить вам полезные подсказки.}}

Если у вас есть набор шагов, которые приводят к такой же ошибке emerge на другой системе, пожалуйста проверьте [http://bugzilla.gentoo.org Bugzilla] и создайте отчет об ошибке, если о ней еще не сообщалось. 

=== Подготовка системы ===

Также убедитесь, что вы "не" установили -fPIC в «CFLAGS/CXXFLAGS». Если вы это сделали, вам нужно будет полностью пересобрать всю систему без него. 

=== Конфигурация ===

Запуск <code>env-update</code> создаст файл {{Path|/etc/prelink.conf}}, который сообщает {{Path|prelink}}, какие файлы должны быть предварительно связаны. 

{{RootCmd|env-update}}

К сожалению, вы не можете предварительно связать файлы, которые были скомпилированы старыми версиями binutils. Большинство таких приложений поставляются только в виде предварительно скомпилированных бинарных пакетов, которые установлены в {{Path|/opt}}. Создание следующего файла укажет prelink не пытаться связать их. 

{{FileBox|filename=/etc/env.d/60prelink|lang=bash|1=
PRELINK_PATH_MASK="/opt"
}}

{{Note|Вы можете добавить больше или меньше каталогов в виде разделенного двоеточиями списка.}}

== Prelinking ==

=== Использование Prelink ===

Я использую следующую команду для связывания всех двоичных файлов в каталогах, заданных {{Path|/etc/prelink.conf}}. 

{{RootCmd|prelink -amR}}

{{Warning|Было замечено, что если вы располагаете маленьким количеством свободного места на диске и вы подвергаете предварительному связыванию всю свою систему, существует вероятность того, что ваши двоичные файлы могут быть усечены. В результате вы получите сломанную систему. Используйте команду <code>file</code> или <code>readelf</code>, чтобы проверить состояние двоичного файла. Кроме того, заранее проверьте количество свободного места на жестком диске с помощью <code>df -h</code>.}}

{| class="wikitable" style="text-align: left;" 
|- 
! The options explained:
|- 
! -a
| "All": prelinks all the binaries
|- 
! -m
| Conserve the virtual memory space. This is needed if you have a lot of libraries that need to be prelinked.
|- 
! -R
| Random -- randomize the address ordering, this enhances security against buffer overflows.
|-
|}

{{Note|Дополнительные опции и подробности смотрите в <code>man prelink</code>.}}

=== Задание Cron для Prelink ===

Установите <Code>sys-devel/prelink-20060213</code>, а затем установите задание cron в {{Path|/etc/cron.daily/prelink}}. Чтобы включить его, отредактируйте файл конфигурации {{Path|/etc/conf.d/prelink}}. Он будет запускать prelink ежедневно в фоновом режиме, спасая вас от необходимости запуска команды вручную. 

=== Ускорение KDE после предварительного связывания ===

Время загрузки KDE может быть значительно уменьшено после предварительного связывания. Если вы сообщите KDE, что он был предварительно связан, это отключит загрузку <code>kdeinit</code> (поскольку он больше не требуется), что еще больше ускорит KDE. 

Установите <code>KDE_IS_PRELINKED=1</code> в {{Path|/etc/env.d/*kdepaths*}}, чтобы сообщить KDE о предварительном связывании.

=== Удаление prelink ===

Если вы передумаете использовать предварительное связывание, прежде чем удалять prelink, сначала нужно удалить prelink cronjob из {{Path|/etc/cron.daily}} и {{Path|/etc/conf.d/prelink}}. Затем вам придется удалить предварительное связывание из всех двоичных файлов: 

{{RootCmd|prelink -au}}

Наконец, удалите сам пакет <code>prelink</code>: 

{{RootCmd|emerge -c prelink}}

== Known Problems and Fixes ==

=== "Cannot prelink against non-PIC shared library" ===

The cause of this problem is from badly compiled shared libraries that were compiled without the -fPIC gcc option for all their object files. 

Here are the libraries that haven't been fixed or cannot be fixed: 

* The libraries in the wine package, including winex. Prelinking wouldn't speed up MS Windows executables anyway.
* The library in media-video/mjpegtools, {{Path|/usr/lib/liblavfile-1.6.so.0}} .
* Nvidia OpenGl libraries, {{Path|/usr/lib/opengl/nvidia/lib/libGL.so.*}} . Due to performance reasons they were compiled without PIC support.

If your problem library was not listed please report it with, preferably, a patch to add <code>-fPIC</code> to the relevant CFLAGS. 

=== When I prelink my system some static binaries don't work anymore ===

Where glibc is concerned, there is no such thing as a 100% static binary. If you statically compile a binary with glibc, it may still depend on other system files. Below is an explanation by Dick Howell, 

"I suppose the idea is that everything will be in the downloaded file, so nothing depends on the local libraries on the target system. Unfortunately with Linux, and I think anything else using GLIBC, this still isn't quite true. There's this "libnss" (name service switch, some people seem to call it network security system) which provides functions for accessing various databases for authentication, network information, and other things. It's supposed to make application programs independent of the separately configured actual network environment of the machine. A nice idea, but changes to GLIBC can lead to problems loading it. And you can't statically link "libnss", since it is configured for each machine individually. The problem comes, I think, mainly from statically linking other GLIBC libraries, notably "libpthread", "libm", and "libc", from which come incompatible calls to "libnss" functions." 

=== Prelink aborts with "prelink: dso.c:306: fdopen_dso: Assertion `j == k' failed." ===

This a known problem, kindly diagnosed [http://bugs.gentoo.org/show_bug.cgi?id=13878 here] . Prelink cannot cope with UPX-compressed executables. As of prelink-20021213 there is no fix except to hide the executables while you are prelinking. See the section above for an easy way to do this. 

=== I use grsecurity and it seems that prelinking doesn't work. ===

In order to prelink on a system with grsecurity using a randomized mmap() base, it is necessary to turn "randomized mmap() base" OFF for {{Path|/lib/ld-2.3.*.so}} . This can be done with the <code>chpax</code> utility, but it must be done when the file is not in use (f.i. boot from a rescue CD). 

=== Prelink fails with error "prelink: Can't walk directory tree XXXX: Too many levels of symbolic links" ===

Your symlinks are nested too deeply. This happens when a symlink points to itself. For example, {{Path|/usr/lib/lib -> lib}} is the most common. To fix this, you can find the symlink manually or use the utility provided by the <code>symlinks</code> package: 

{{RootCmd|emerge symlinks
|symlinks -drv /}}

More details can be found at [http://bugs.gentoo.org/show_bug.cgi?id=82117 Bugzilla] and this [http://forums.gentoo.org/viewtopic-t-458144-highlight-prelink.html forum post] . 

== Заключение ==

Prelinking can drastically speed up the start up times for a number of large applications. Support is built into Portage. Prelinking is also safe as you can always undo the prelinking for any binary if you come across any problems. Just remember that when you update glibc or other libraries that you prelinked with, you need to rerun {{Path|prelink}} ! In short good luck! 

{{Migrated|originalauthors=Stefan Jones, John P. Davis, Jorge Paulo, Erwin, nightmorph}}

[[Category:Portage]]
