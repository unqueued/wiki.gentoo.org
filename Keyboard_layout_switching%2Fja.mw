<languages />
キーボードレイアウトはキーボードからのスキャンコードをアプリケーションに送信される文字へと変換します。またキーボードレイアウトは、それ自体は文字を出力しませんがその後のキーの出力を変更するいわゆるデッドキーを通じて、より複雑な変換を行うこともできます。ASCII集合以外の文字を入力するためにQWERTYキーボードと非QWERTYキーボードの両方をサポートするには、適切なキーボードレイアウトが必要です。

== テキストモード ==

=== OpenRC ===

デフォルトのコンソールキーマップは {{Path|/etc/conf.d/keymaps}} で適切なキーマップを <var>keymap</var> の値に割り当てることによって設定されています。keymap の値は {{Path|/usr/share/keymaps}} で定義されており、ほとんどのユーザーは {{Path|/usr/share/keymaps/i386/qwerty/}} にある値を使うことになるでしょう。必要に応じて、{{Path|/usr/share/keymaps/i386/include}} のような適切なインクルードディレクトリから <var>extended_keymaps</var> 変数に値を設定します。たとえば多くのキーボードで E と C となっている位置を Alt-Gr と同時に押すことでユーロとセント(訳註: の通貨記号)が得られるようにするには、extended_keymaps="euro2" を設定します。

{{FileBox|filename=/etc/conf.d/keymaps|title=設定例|1=
keymap="us"
extended_keymaps=""
}}

最後に {{Path|/etc/init.d/keymaps}} を boot ランレベルに追加します。

{{RootCmd|rc-update add keymaps boot}}

変更を適用するために <var>keymaps</var> を再起動します。
{{RootCmd|rc-service keymaps restart}}

ターミナルに非ASCII文字を表示する必要がある場合は {{Path|/etc/conf.d/consolefont}} を編集してフォントを変更しなければなりません

{{FileBox|filename=/etc/conf.d/consolefont|title=キリル文字フォント向けの設定例|1=
consolefont="cyr-sun16"
}}

<var>consolefont</var> を再起動します
{{RootCmd|rc-service consolefont restart}}

また、boot ランレベルに追加します
{{RootCmd|rc-update add consolefont boot}}

==== カスタムキーマップ ====

カスタムキーマップを作るには {{Path|/usr/share/keymaps}} 内の既存のキーマップを参照します:

{{Cmd|vi <keymap file>.map
|gzip <keymap file>.map}}

{{RootCmd|mv <keymap file>.map /usr/share/keymaps/<some directory>}}

これはスラッシュとアポストロフィーのキーが入れ替わっている以外は U.S. QWERTY キーマップと同様のカスタムキーマップの例です:

{{FileBox|filename=/usr/share/keymaps/i386/qwerty/swap_slash_apostrophe.map.gz|title=キーマップの例|1=
include "us.map"
 
keycode  40 = slash            question
keycode  53 = apostrophe       quotedbl
}}

{{Warning|キーコードはシステムによって異なるかもしれません。}}

キーに対応付けられているキーコードを見つけるには {{c|dumpkeys}} の出力を見ます:

{{Cmd|dumpkeys -l}}

上のコマンドを使ってもキーが見つけられない場合、以下を実行します:

{{Cmd|showkey}}

キーを押すとそのキーコードが表示されます。終わったら、数秒待てば {{c|showkey}} は終了します。

=== systemd ===

[[systemd]] は {{Path|/etc/vconsole.conf}} を使用してターミナルフォントとキーボードレイアウト設定の両方を読み込みますが、OpenRC にあるような詳細な設定はありません。有効な値は OpenRC が対応する変数でサポートしているものと同様のはずです。

{{FileBox|filename=/etc/vconsole.conf|title=設定例|1=
KEYMAP=pl2
FONT=LatArCyrHeb-16
}}

== X11 ==

現代の X11 アプリケーションは通常 libXklavier (「klavier」は「keyboard」にあたるドイツ語です)を使っており、 {{c|setxkbmap}} を使用して設定することができます。さらに、X11 は仮想ターミナルでサポートされているものよりずっと広範なキーボードレイアウトをサポートしています。しっかりしたデスクトップ環境は自らキーボードレイアウトを管理していることを覚えておくべきでしょう。先述したアプリケーションを直接使う必要はありませんが、キーボードレイアウトの管理が壊れていたり無い場合には役に立つかもしれません。

=== KDE4 / Plasma ===

{{Path|System Settings}} を開き {{Path|Input Devices}} モジュールへ移動します。

sddm ログインマネージャーで追加の言語を利用できるようにするには、{{Path|[[/usr/share/sddm/scripts/Xsetup]]/}} ファイルを編集して setxkbmap コマンドと選択肢にしたい言語のコンマ区切りリストを追加します。

たとえばドイツ語をデフォルトとして有効化し、また US をもーボードレイアウトとして示すには以下を追加します:

{{FileBox|filename=/usr/share/sddm/scripts/Xsetup|1=
#!/bin/sh
# Xsetup - run as root before the login dialog appears
setxkbmap de,us
}}

=== 一般的なデスクトップ環境 ===

{{Path|~/.xprofile}} を編集して {{c|setxkbmap}} をそこから実行するか、Xorg の設定ファイルでキーボードをセットアップします(例は[[#一般的な X11|下を見てください]])。

{{Note|GNOME 3 の最近のバージョンはもはや libXklavier を使用していないため、この方法はまったく動作しないか、またはおそらく GNOME によって上書きされるでしょう。同様に他のデスクトップ環境も初期化やレイアウト変更の一環として libXklavier の設定を上書きするかもしれません。}}

{{Warning|{{Path|~/.xprofile}} はサポートしているディスプレイマネージャー(GDM、KDM、LightDM、LXDM、SDDMでのみテストされています)経由でログインした時にのみ読み込まれる非標準のファイルであり、ディストリビューション固有です。もっとも、このファイルはすべての一般的なディストリビューションでサポートされているようです。}}

=== lxpanel のキーボードレイアウトハンドラー ===

{{Package|lxde-base/lxpanel}} はキーボードレイアウトハンドラーをパネルアイテムとして提供します。

[[File:Lxpanel_kyboard_layout_handler.png]]

=== 一般的な X11 ===

==== setxkbmap を使用する ====

これらの変更は永続的ではなく、ユーザーが X11 を再起動するまでの間のみ保持されます。もちろん、このコマンドをスタートアップスクリプトから呼び出して X サーバーが起動するたびに適切なパラメーターがセットされるようにすることもできます。

既存の設定を調べるには:

{{Cmd|setxkbmap -query}}

キーボードレイアウトの設定:

{{Cmd|setxkbmap lv}}

キーボードレイアウト、バリエーション、モデルの設定:

{{Cmd|setxkbmap lv apostrophe -model logiultrax}}

2つのキーボードレイアウトと LED 表示のセットアップ:

{{Cmd|setxkbmap -layout us,ru -option grp:shifts_toggle -option grp_led:caps}}

キーボードの設定オプションの完全なリストについては <code>xkeyboard-config</code> マニュアルを読むことをおすすめします:

{{Cmd|LESS{{=}}--chop-long-lines man xkeyboard-config}}

サポートされているレイアウト、バリエーション、またはその他の xkb プロパティの値をこのアプリケーションで調べることはできないようですが、それらのほとんどは {{Path|/usr/share/X11/xkb/rules/base.lst}} ファイルに列挙されています。最も網羅的なリストは {{Path|/usr/share/X11/xkb/}} 内の他のファイルを調べることでのみ得られるようです。設定を正常に保つために、適切なデスクトップ環境のキーボードレイアウト管理を用いることをおすすめします。

==== システム全体のレイアウト設定とショートカットを使用する ====

この方法はデスクトップ環境がない構成、言い換えるとウィンドウマネージャを使った単なる X11 におすすめです。{{Path|[[Xorg/Guide#Configuring_the_keyboard|10-keyboard.conf]]}} ファイルを作成して適切なキーボード設定を構成します。

{{FileBox|filename=/etc/X11/xorg.conf.d/10-keyboard.conf|title=US とブラジル語レイアウトの例|lang=xorg.conf|1=
Section "InputClass"
    Identifier "keyboard-all"
    Driver "evdev"
    Option "XkbLayout" "us,br"
    Option "XkbVariant" ",abnt2"
    Option "XkbOptions" "grp:shift_toggle,grp_led:scroll"
    MatchIsKeyboard "on"
EndSection
}}

上の例は {{Key|Left Shift}}+{{Key|Right Shift}} を切り替えのショートカットとして US とブラジル語のキーボードレイアウトを構成しています。ブラジル語レイアウトはキーボードのスクロールロック LED によって示されます。

===== 可能な追加設定 =====

キーボードマッピングの設定の際に使えるバリエーションや選択肢は数多くあります。これらの多くは {{Path|/usr/share/X11/xkb/rules/base.lst}} ファイルで見つけることができます。

たとえば、<code>altgr-intl</code> バリエーションを使うといくつかの国際文字を出力できる US レイアウトを構成できます:

{{FileBox|filename=/etc/X11/xorg.conf.d/10-keyboard.conf|title=US レイアウトの AltGr-international バリエーション|lang=xorg.conf|1=
...
    Option "XkbLayout" "us,br"
    Option "XkbVariant" "altgr-intl,abnt2"
...
}}

これで {{Key|Right Alt}} を国際文字を入力するための修飾キーとして使うことができます。

Xorg はコンポジション、すなわち ''コンポーズキー''に続けて一連の文字を押すことによって国際文字や様々なシンボル文字を入力するオプションを提供しています。コンポジションを有効化するには <code>compose:<compose_key></code> オプションを追加します:

{{FileBox|filename=/etc/X11/xorg.conf.d/10-keyboard.conf|title=キーコンポジションを有効にする|lang=xorg.conf|1=
...
Option "XkbOptions" "grp:shift_toggle,grp_led:scroll,compose:sclk"
...
}}

上の <code>compose:sclk</code> オプションは {{Key|Scroll Lock}} をコンポーズキーに設定します。この設定では:

* 度の記号 '°' を入力するには {{Key|Scroll Lock}} を押してから 'oo' とタイプします
* 著作権記号 '©' を入力するには {{Key|Scroll Lock}} を押してから 'oc' とタイプします
* 笑顔 '☺' を入力するには {{Key|Scroll Lock}} を押してから ':)' とタイプします
* 上付き文字の2 ('²') を入力するには {{Key|Scroll Lock}} を押してから '^2' とタイプします
* 下付き文字の2 ('₂') を入力するには {{Key|Scroll Lock}} を押してから '_2' とタイプします
* 直径記号 '⌀' を入力するには {{Key|Scroll Lock}} を押してから 'di' とタイプします

...などなど。{{Path|/usr/share/X11/locale/compose.dir}} ファイルには使用可能なすべてのコンポジションの情報源が列挙されています。

=== X のキーボードレイアウトを強化する ===

キー割当ての追加やファンクションキーへのアクションの追加などのより広範囲な変更をキーボードレイアウトに加える必要がある場合、この方法が必要です。こうした変更は実際のところパッケージのソースファイルの強化にあたるので、パッケージを次にアップデートしたときに変更が保持されるように[[_/etc/portage/patches|ユーザーパッチの仕組み]]を使用することをおすすめします。

==== 基本 ====

関連する Gentoo パッケージは {{Package|x11-misc/xkeyboard-config}} です。X でのキーボード設定は仮想コンソールでのそれよりも複雑です。関連する設定ファイルは {{Path|/usr/share/X11/xkb}} のサブディレクトリにあります:

; {{Path|keycodes}}
: これらのファイルはキーコードをシンボル名に関連付けます。これを変更したくなることはおそらくないでしょう。
; {{Path|geometry}}
: これはキーボードの物理的な形状で、キーボードの図を描画するようなソフトウェアによって使用されます。これも変更したくなる可能性は低いでしょう。
; {{Path|types}}
: ここにあるファイル群は「タイプ」を作成します。タイプはキーの宣言で使用され、そのキーとどのシフトキーの組み合わせが使用できるかを指定します。
; {{Path|symbols}}
: これらのファイルは実際のキー割当てを指定します。
; {{Path|compat}}
: ここにあるファイル群はキーに割り当てられる「アクション」(たとえば仮想ターミナルへの切り替えなど)を指定し、名前を与えます。
; {{Path|rules}}
: これらのファイルはキーボードタイプや言語といった引数を受け取り、他のディレクトリの適切な仕様を有効化します。

これらのディレクトリ内のファイルについてのより完全な説明は [http://www.charvolant.org/~doug/xkb/html/index.html An Unreliable Guide to XKB Configuration by Doug Palmer] にあります。これは名前が示すよりもずっと高品質です。さらなるドキュメンテーションは xkeyboard-config のホームページ [http://www.freedesktop.org/wiki/Software/XKeyboardConfig/ freedesktop.org] にあります。

Xkb はキーの名前を「<AC01>」のように表します。これは「英数字 ('''A'''lphanumeric) 領域の '''C''' 行(すなわち下から3番目の行、CapsLock のある行です)のキー番号 '''01''' 、行の1番左のキー」という意味です。このキーは英語レイアウトでは {{Key|A}} です。他の領域のキーは、{{Key|F5}} が「<FK05>」、左コントロールキーが「<LCTL>」というように異なった名前を持っています。

==== キー割当ての追加 ====

例としてこの節ではイギリス英語キーボードレイアウトを、{{Key|AltGr}} と共に {{Key|a}}、{{Key|o}}、{{Key|u}} とタイプするとドイツ語のウムラウト文字 ä、ö、ü が生成されるように強化します。また大文字版についても適切に扱えるようにする必要があります。強化するキーは {{Key|A}} (<AC01>)、{{Key|O}} (<AD09>)、{{Key|U}} (<AD07>) になります。(ß の文字は既に {{Key|AltGr}}+{{Key|S}} に割り当てられています。)

xkb におけるウムラウト付き文字の名前は「adiaeresis」といった具合になります。これらの名前は {{Path|/usr/include/X11/keysymdef.h}} ファイルにありますが、名前を得るには先頭の「XK_」を取り除く必要があります。

{{Path|symbols}} ディレクトリから正しいファイルを特定してください。これらのファイルのほとんどは2文字の国名コード(グレートブリテンなら {{Path|gb}} のような)から名付けられているので、現在 X で選択されているキーボードレイアウトと同じものを推測します。この例では {{Path|symbols/gb}} を強化します。

上の情報を使い、{{Path|symbols/gb}} の既存のスキーマをコピーして新しいエントリを作成します。この例ではこれらのエントリを「basic」セクション内に追加します。内容から容易に想像できるとおり、各キーのエントリの波括弧と角括弧に囲まれた4つの項目は順に通常(キーの組み合わせなし)、{{Key|Shift}}、{{Key|AltGr}}、{{Key|Shift}}+{{Key|AltGr}} です:

{{FileBox|filename=/usr/share/X11/xkb/symbols/gb|title=典型的なキーエントリ|1=
    key <AE02>	{ [         2,   quotedbl,  twosuperior,    oneeighth]	};
}}

After making the additions, the section looks like this:

{{FileBox|filename=/usr/share/X11/xkb/symbols/gb|title=Example for enhancing the British English keyboard|1=
default  partial alphanumeric_keys
xkb_symbols "basic" {
 
    // Describes the differences between a very simple en_US
    // keyboard and a very simple U.K. keyboard layout defined by
    // the SVR4 European Language Supplement and sometimes also
    // known as the IBM 166 layout.
 
    include "latin"
 
    name[Group1]="English (UK)";
 
    key <AE02>	{ [         2,   quotedbl,  twosuperior,    oneeighth ]	};
    key <AE03>	{ [         3,   sterling, threesuperior,    sterling ]	};
    key <AE04>	{ [         4,     dollar,     EuroSign,   onequarter ]	};
 
    key <AC11>	{ [apostrophe,         at, dead_circumflex, dead_caron]	};
    key <TLDE>	{ [     grave,    notsign,          bar,          bar ]	};
 
    key <BKSL>	{ [numbersign, asciitilde,   dead_grave,   dead_breve ]	};
    key <LSGT>	{ [ backslash,        bar,          bar,    brokenbar ]	};
 
// Keys inserted by ACM, 2015-10-23.
    key <AD07>  { [         u,          U,   udiaeresis,   Udiaeresis ] };
    key <AD09>  { [         o,          O,   odiaeresis,   Odiaeresis ] };
    key <AC01>  { [         a,          A,   adiaeresis,   Adiaeresis ] };
// End of insertion 2015-10-23
    include "level3(ralt_switch_multikey)"
};
}}

Having saved this file, restart X Windows. A typical desktop environment, XFCE, re-reads the above configuration files each time it starts. Should there be errors, error messages will be written to the normal {{Path|stderr}} - if X Windows is started from the command line, {{Path|stderr}} will be the virtual terminal it was started from.

==== Adding actions to function keys ====

As an example, add the actions "switch to virtual terminal n" (where n > 12) to the function keys {{Key|F1}} - {{Key|F12}} when {{Key|Ctrl}}, {{Key|Alt}}, and {{Key|Shift}} are all selected. The same effect should also occur when {{Key|AltGr}} and {{Key|Fn}} are selected.

First, search for the file in the {{Path|symbols}} directory which handles the existing assignments for the Function keys. This file is {{Path|symbols/srvr_ctrl}}. The entry in this file for {{Key|F1}}, which is intended to be modified, is:

{{FileBox|filename=/usr/share/X11/xkb/symbols/srvr_ctrl|title=Existing entry for {{Key|F1}}|1=
    key <FK01> {
	type="CTRL+ALT",
	symbols[Group1]= [ F1, F1, F1, F1, XF86_Switch_VT_1 ]
    };
}}

There are two things to note with this entry:
* It is of type "CTRL+ALT"; it thus takes the standard four shift key settings with {{Key|Shift}} and {{Key|AltGr}}, plus a fifth setting of {{Key|Ctrl}}+{{Key|Alt}}. Since the goal is to use {{Key|Ctrl}}+{{Key|Alt}}+{{Key|Shift}}, and there is no suitable existing type, a new one needs to be created.
* The "action" <code>XF86_Switch_VT_1</code> is just a defined symbol in the xkb system. Its semantics are given to it by an entry in a file in the {{Path|compat}} directory, namely {{Path|compat/xfree86}}. There is no symbol <code>XF86_Switch_VT_13</code> (or higher) - instead, steal the otherwise unused existing symbols F13, F14, ..., F24.

===== Creating the new type CTRL+ALT+SHIFT =====

Having located "CTRL+ALT" in {{Path|types/pc}}, it is easy enough to copy it, rename the copy to "CTRL+ALT+SHIFT" and extend this to allow the modifier key combination {{Key|Ctrl}}+{{Key|Alt}}+{{Key|Shift}}. The result looks like this:

{{FileBox|filename=/usr/share/X11/xkb/types/pc|title=Creating a new type|1=
    type "CTRL+ALT+SHIFT" {
        modifiers = Control+Alt+Shift+LevelThree;
        map[None] = Level1;
        map[Shift] = Level2;
        map[LevelThree] = Level3;
        map[Shift+LevelThree] = Level4;
        map[Control+Alt] = Level5;
        map[Shift+Control+Alt] = Level6;
        preserve[Shift] = Shift;
        preserve[Shift+LevelThree] = Shift;
        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
        level_name[Level5] = "Ctrl+Alt";
        level_name[Level6] = "Ctrl+Alt+Shift";
    };
}}

===== Activating the symbols F13, ..., F24 =====

The symbol <code>XF86_Switch_VT_1</code> is swiftly located in {{Path|compat/xfree86}}. It is a simple matter to copy its form, creating assignments for the symbols F13, ..., F24. The definition for the first of these symbols, F13, in {{Path|compat/xfree86}} then looks like:

{{FileBox|filename=/usr/share/X11/xkb/compat/xfree86|title=Assigning an action
to a symbol|1=
    interpret  F13 {
        action = SwitchScreen(Screen=13, !SameServer);
    };
}}

Analogous definitions for F14, ..., F24 should also be put into the file.

===== Amending the entries in symbols for keys {{Key|F1}}, ..., {{Key|F12}} =====

Now that the new type CTRL+ALT+SHIFT and definitions for the symbols F13, ..., F24 are defined, amend the key definitions for the function keys in {{Path|symbols/srvr_ctrl}}. The one for {{Key|F1}} is mentioned below, analogous definitions also need to be inserted for the other function keys:

{{FileBox|filename=/usr/share/X11/xkb/symbols/srvr_ctrl|title=Redefinition of
function key|1=
    key <FK01> {
	type="CTRL+ALT+SHIFT",
	symbols[Group1]= [ F1, F1, F13, F1, XF86_Switch_VT_1, F13 ]
    };
}}

After making these changes to {{Path|types/pc}}, {{Path|compat/xfree86}}, and {{Path|symbols/srvr_ctrl}}, and restarting the X server, switching from X directly to virtual terminals 13 and above is now possible - provided that these have been configured in the [[Handbook:AMD64/Working/Initscripts#How_init_works|/etc/inittab]] (or systemd equivalent) of course.
