<languages/>

== 도입부 ==

With security and privacy being a increasingly important issue nowadays, Using SSL to secure the server seems like a no-brainer. Apache, Courier-imap and postfix all can be secured using SSL.

== SSL 설치 ==

SSL is a dependency and a compile time option to most packages. {{Package|dev-libs/openssl}} being the key ingredient, should be pulled in from the <code>ssl</code> USE flag. If it wasn't set before enable it and update all packages using it:

{{Emerge|params=--newuse|@world}}

== SNI ==

There are a few issues that arise when using multiple domains on a single IP. Apache has solved this issue using [http://wiki.apache.org/httpd/NameBasedSSLVHostsWithSNI SNI] that makes it possible to have several certificates on a single IP. Both the browser and the server need to support this however. IMAP (and POP3) nor SMTP really support this. The only real way to support multiple hosts on a single IP is have a certificate, that covers all domains. Not pretty but can work.

== SSL 인증서 취득 ==

There are currently 2 and a half ways to obtain an SSL certificate. Purchase a certificate from one of the [[Wikipedia:DigiNotar#Issuance of fraudulent certificates|reputable]] providers is an option. Using a self-signed certificate can also be done, though may have implications with warnings on users clients. The half option, which is the recommended option when not using a bought certificate is using a certificate from [//cacert.org cacert.org]. They are working hard on getting their certificate included into the main browsers and operating systems, but most of all, it is free and gratis.

=== 자체 서명 ===

Most applications pre-generate self signed certificates and tend to install then into {{Path|/etc/ssl}}. A new self-signed certificate can be easily created using OpenSSL:

{{RootCmd|mkdir -p /etc/ssl/postfix/|cd /etc/ssl/postfix/|/etc/ssl/misc/CA.pl -newca|/etc/ssl/misc/CA.pl -newreq-nodes|/etc/ssl/misc/CA.pl -sign}}

This should have created three files: {{Path|/etc/ssl/postfix/newkey.pem}}, {{Path|/etc/ssl/postfix/newreq.pem}}, {{Path|/etc/ssl/postfix/newcert.pem}} and it's accompanying CA Root certificate {{Path|/etc/ssl/postfix/demoCA/cacert.pem}}. It is probably advised to rename them to something more logical.

=== CACert.org 서명 ===

CACert.org offers a simple script to assist with generating SSL certificates. The [//wiki.cacert.org/CSRGenerator csr] script should be downloaded and executed. In this example, the mail server will be called imap but will have aliases configured in DNS for mail, pop, pop3, pop3s, imaps and foo. More can be added of course as fit. Note that foo was added because that is the name of the system offering the imap service. It is not named foo because the postfix or web or any other server is named foo.

{{Cmd|sh csr|output=<pre>
Private Key and Certificate Signing Request Generator
This script was designed to suit the request format needed by
the CAcert Certificate Authority. www.CAcert.org
 
Short Hostname (ie. imap big_srv www2): foo
FQDN/CommonName (ie. www.example.com) : foo.example.com
Type SubjectAltNames for the certificate, one per line. Enter a blank line to finish
SubjectAltName: DNS:mail.example.com
SubjectAltName: DNS:smtp.example.com
SubjectAltName: DNS:smtps.example.com
SubjectAltName: DNS:imap.example.com
SubjectAltName: DNS:imaps.example.com
SubjectAltName: DNS:pop.example.com
SubjectAltName: DNS:pop3.example.com
SubjectAltName: DNS:pop3s.example.com
SubjectAltName: DNS:mail.example.net
SubjectAltName: DNS:imap.example.net
SubjectAltName: DNS:imaps.example.net
SubjectAltName: DNS:pop.example.net
SubjectAltName: DNS:pop3.example.net
SubjectAltName: DNS:pop3s.example.net
SubjectAltName: DNS:
Running OpenSSL...
Generating a 2048 bit RSA private key
.................+++
..................................+++
writing new private key to '/root/imap.example.com_privatekey.pem'
-----
Copy the following Certificate Request and paste into CAcert website to obtain a Certificate.
When you receive your certificate, you 'should' name it something like foo.example.com_server.pem
 
-----BEGIN CERTIFICATE REQUEST-----
MIIDHTsdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfsdfasdf
<snip>
asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfpyqT
-----END CERTIFICATE REQUEST-----
 
 
The Certificate request is also available in /root/foo_csr.pem
The Private Key is stored in /root/foo_privatekey.pem
</pre>}}

This has generated a ''certificate sign request'', which can be used by any root CA to sign with, not only CACert.org. In the case of CACert.org however, under ''Server Certificates'' there is a link named ''New'' which opens an edit box for the above certificate request. The bit including <code>-----BEGIN CERTIFICATE REQUEST-----</code> until, including <code>-----END CERTIFICATE REQUEST-----</code> needs to be pasted into the edit field and then submitted via the submit button. The server will then verify the request and upon that generate the certificate. The certificate then needs to be copied and pasted, including the <code>BEGIN</code> and <code>END</code> markers again into a new file, named {{Path|foo.example.com_crt.pem}}. A link to the certificate will also be e-mailed to the e-mail address bound to the ca-cert.org account.

{{RootCmd|cat > foo.example.com_crt.pem|output=<pre>
-----BEGIN CERTIFICATE-----
MIIGhzClkjhlkjhlkjhkljhkljhkljhkljhkljhkljhlkjhkljhkljhlkjhkljhk
<snip>
kljhlkjhkljhlkjhlkjhlkjhkljhkljhlkjhlkjhkljhk==
-----END CERTIFICATE-----
</pre>}}

This should leave 3 files, {{Path|foo.example.com_&#91;privatekey, csr, crt&#93;.pem}}. This will also be the naming convention followed during the rest of this document.

{{Note|Before requesting a certificate an account must be created on [//www.cacert.org/index.php CAcert website]. Once logged in, the domain name for the certificate must be registered. After the registration is completed, the certificate request can be pasted in the Server Certificates (New) page.
}}

== Apache ==

Setting up [[Apache]] is already very well described elsewhere and yields a working SSL enabled webserver. Postfixadmin, if used externally, should ideally be secured such that it only works over https. Roundcube or webmail in general, can also be setup to be secured by SSL, but should or can be still open to plain HTTP.

Roundcube has one nice option for this however, to force all incoming requests over HTTPS. This means that when a users opens http://webmail.example.com, he will get immediately redirected to https://webmail.example.com. If using a proper SSL certificate this is strongly recommended. When using a self-signed certificate, or a CA-cert.org certificate that does not have the root installed to all users, this should remain off however.

{{FileBox|filename=/var/www/webmail.example.com/htdocs/roundcube/config/main.inc.php|title=Force https|lang=php|1=
$rcmail_config['force_https'] = true;
}}

== Courier-imap ==

If anything, securing IMAP with SSL is extremely recommended. Using a secure connection for IMAP, means that if the password is sent in plain text, this is still done over the secured IMAP connection so no security issue comes up.

=== 자체 서명 인증서 만들기 ===

Courier-imap comes with two easy scripts to generate self-signed SSL certificates, <tt>mkpop3dcert</tt> and <tt>mkimapdcert</tt>. These scripts parse {{Path|/etc/courier-imap/pop3d.cnf}} and {{Path|/etc/courier-imap/imapd.cnf}} respectively. It may be an idea to first use self-signed certificates and then swap those out for signed certificates as it can make testing a little bit easier. If self-signed certificates are a must, edit the aforementioned files, otherwise the defaults will suffice.

{{RootCmd|mkpop3dcert|mkimapdcert}}

{{Warning|Currently, as mentioned in gentoo bug [https://bugs.gentoo.org/show_bug.cgi?id&#61;251047 &#35;251047], config files use an incorrect format and thus an error may occur. See the bug for more details.}}

{{Note|The two generated certificates are named {{Path|/etc/courier-imap/pop3d.pem}} and {{Path|/etc/courier-imap/imapd.pem}}. If self-signed certificates are insisted upon, the default paths in the config files pointing to these files should be checked as mentioned below.}}

=== CACert.org  서명 인증서 만들기 ===

The <tt>mkimapdcert</tt> script creates a self-signed certificate and combines them into one file as Courier-imap does actually not use the three separate files as most applications do and needs them specially formatted.

The file starts with the private key.

{{Note|If no courier-imap directory exists in {{Path|/etc/ssl}}, it needs to be manually created. {{RootCmd|mkdir -p /etc/ssl/courier-imap/}}
}}

{{RootCmd|cat foo.example.com_privatekey.pem > /etc/ssl/courier-imap/foo.example.com.pem}}

그 다음 서명 인증서를 따릅니다:

{{RootCmd|cat foo.example.com_crt.pem >> /etc/ssl/courier-imap/foo.example.com.pem}}

마지막으로 Diffie-Hellman 매개변수를 추가했습니다:

{{RootCmd|openssl gendh 1024 >> /etc/ssl/courier-imap/foo.example.com.pem}}

The resulting file should have a contents like this:

{{FileBox|filename=/etc/ssl/courier-imap/foo.example.com.pem|title=imap 인증서|1=
-----BEGIN PRIVATE KEY-----
MIIEvaasdfasdfSfasdfadfasdfasdfasdfasdfasdfasdfasdfasdsahdahhgfh
<snip>
asdfasdfasdfsdfsdf
-----BEGIN CERTIFICATE REQUEST-----
MIIDHTsdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfsdfasdf
<snip>
asdfasdfasdfasdfaswYEdpa+rdFfs=
-----END PRIVATE KEY-----
-----END CERTIFICATE REQUEST-----
-----BEGIN CERTIFICATE-----
MIIGhzClkjhlkjhlkjhkljhkljhkljhkljhkljhkljhlkjhkljhkljhlkjhkljhk
<snip>
kljhlkjhkljhlkjhlkjhlkjhkljhkljhlkjhlkjhkljhk==
-----END CERTIFICATE-----
-----BEGIN DH PARAMETERS-----
MIGHAoGBAPF7fJnfw+VPPev9FAkf2XJNFimn4ik+zkXXuHD5t9Oke1Yx224WTocq
KJ+Zv9onecK0MPYRUj8PPqqy+Q00pScW9+qPSr9T2sEG/meKjLqqA3XQf4Gwzqco
SUG0PEjiYNNfe966p9E1vp6yN5+gSyu6zv9Vn+cfYY2q7d3a4x9rAgEC
-----END DH PARAMETERS-----
}}

=== SSL 설정 ===

As noted above, the certificate entails both pop3 as imap hostnames and it is thus assumed pop3 and imap are running on the same IP/host. This is not required however, pop3 could be very well a different machine with the same (not advised) or its own certificate.

==== POP3 ====

{{FileBox|filename=/etc/courier-imap/pop3d-ssl|title=인증서 설정|1=
##NAME: POP3DSSLSTART:0
POP3DSSLSTART=YES
 
##NAME: TLS_CERTFILE:0
TLS_CERTFILE=/etc/ssl/courier-imap/foo.example.com.pem
}}

Starting this server should allow pop3 to work through SSL:

{{RootCmd|/etc/init.d/courier-pop3-ssl restart}}

==== IMAP ====

{{FileBox|filename=/etc/courier-imap/imapd-ssl|title=인증서 설정|1=
##NAME: IMAPDSSLSTART:0
IMAPDSSLSTART=YES
 
##NAME: TLS_CERTFILE:0
TLS_CERTFILE=/etc/ssl/courier-imap/foo.example.com.pem
}}

서버를 시작할 때 IMAP이 SSL에서 동작하도록 해야합니다:

{{RootCmd|/etc/init.d/courier-imapd-ssl restart}}

=== SSL 시험 ===

Testing becomes more difficult, as telnet can not be used anymore. The best option is to start up a mail-client such as thunderbird, configure a normal connection first to verify everything works, which should as telnet worked properly before and then enable the SSL option for the account and see if it is still working. The default imap-ssl port is 993. <code>STARTTLS</code> can be checked whether it is enabled only, via telnet, by checking for the STARTTLS Capability.

{{Note|Some email clients are not complete in the TLS implementation, to help these clients out you can change the value of <code>TLS_STARTTLS_PROTOCOL</code> in {{Path|/etc/courier-imap/imapd-ssl}} from TLS1 to SSL3.}}

If SSL secured services now work as expected, they can be added to the default runlevel:

{{RootCmd|rc-update add courier-pop3d-ssl default|rc-update add courier-imapd-ssl default}}

{{Note|As mentioned before, only add pop3 if it is really needed.}}

== SSL로 SMTP 보안 처리 ==

The certificates for use with postfix should be stored in {{Path|/etc/ssl/postfix/}} or if using the same certificates as with courier-imap they should be stored in {{Path|/etc/ssl/postfix/}}. If using CACert.org, then its root certificate needs to be used. Gentoo pre-installs the CACert.org root certificate and should be used.

{{FileBox|filename=/etc/postfix/main.cf|title=SMTP 인증서 설정|1=
# SSL Authentication
smtpd_tls_security_level = may
smtpd_tls_auth_only = no
smtpd_tls_loglevel = 3
smtpd_tls_key_file = /etc/ssl/postfix/foo.example.com_privatekey.pem
smtpd_tls_cert_file = /etc/ssl/postfix/foo.example.com_crt.pem
smtpd_tls_CAfile = /etc/ssl/certs/cacert.org_root.pem
smtpd_tls_received_header = yes
smtpd_tls_session_cache_timeout = 3600s
tls_random_source = dev:/dev/urandom
}}

{{Note|For debugging purposes <code>smtpd_tls_loglevel</code> has been increased to ''3''. Also <code>smtpd_tls_auth_only &#35; no</code> means users (and webmail) can still log in insecurely. Putting this option to yes forces all clients to use only authenticated connections.}}

{{Note|The CaCert file is renamed in {{Path|/etc/ssl/certs/cacert.org_root.pem}}, it used to be named as {{Path|/etc/ssl/certs/cacert.org.pem}}.}}

Now STARTTLS can be used to use an authenticated connection over port 25. '''SSL/TLS''' support on port ''465'' (smtp'''s''') however should be enabled as well. Courier-imap did this automatically, postfix needs a change to {{Path|master.cf}}:

{{FileBox|filename=/etc/postfix/master.cf|title=smtps 지원 활성화|1=
smtps     inet  n       -       n       -       -       smtpd
  -o smtpd_tls_wrappermode=yes
}}

Restart postfix to start the SSL secured daemons:

{{RootCmd|/etc/init.d/postfix restart}}

== 시험 ==

Telnet can only be minimally used for testing. Actually it can only be used to verify supported options. ''STARTTLS'' should be listed as one of the supported options:

{{Cmd|telnet foo.example.com 25|output=<pre>
220 foo.example.com ESMTP Postfix
EHLO example.com
250-mail.example.com
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-STARTTLS
250-AUTH LOGIN PLAIN
250-ENHANCEDSTATUSCODES
250-8BITMIME
250 DSN
quit
221 2.0.0 Bye
Connection closed by foreign host.
</pre>}}

To test if all connections work as wanted, a recent version of Thunderbird works best. When adding a new account, Thunderbird will try to connect using STARTTLS on the default port. If that would fail, or if a manual connection is tried, it's possible to use SSL/TLS via the 993 and 465 ports and hit the re-test button. This should allow the account to be created using secure connections.

== 서버간 연결 보안 ==

Postfix can try to use secure connections for sending mails to other SMTP servers. Although it may not be supported by all servers, it makes sense to activate it.

{{FileBox|filename=/etc/postfix/main.cf|title=전자메일 전송시 TLS 사용 시도|1=
# Enable TLS for sending mails if supported by other server
smtp_tls_security_level = may
smtp_tls_CApath = /etc/ssl/certs
smtp_tls_loglevel = 3
}}

{{Note|For debugging purposes <code>smtp_tls_loglevel</code> has been increased to ''3''. <code>smtp_tls_security_level</code> can be set to "encrypt" to only send mails over TLS connections. But this is not recommended, because many mail servers on the internet do not support TLS at all or are not compatible.}}

다음 postfix를 다시 시작하십시오:

{{RootCmd|/etc/init.d/postfix restart}}

To test if it works, a mail can be sent to an address, which uses a server that supports TLS. The log should then contain a line like this:

{{Cmd|tail -n 10 /var/log/mail/mailinfo.log |output=<pre>
...
postfix/smtp[15209]: Trusted TLS connection established to mx.example.com[x.x.x.x]:25: TLSv1 with cipher AES256-SHA (256/256 bits)
...
</pre>}}

== 마무리 ==

Once everything is working as expected, logging can be disabled again:

{{FileBox|filename=/etc/postfix/main.cf|title=로깅 비활성화|1=
smtpd_tls_loglevel = 0
smtp_tls_loglevel = 0
}}

[[Category:Mail Servers]]
