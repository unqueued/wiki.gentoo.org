<languages />


{{Metadata|abstract=本文档将指导用户完成GCC的升级。}}

本文档将指导用户完成GCC的升级。

== 快速开始 ==

=== 介绍 ===

这篇文章讲述 ''升级'' GCC。GCC降级可能会有不愿看到的副作用。对于一些报告中常见的问题请查阅[[#故障排除|故障排除]]一节。 

下一节将给出GCC升级的快速指南（这件事太容易了）。如果你想要阅读升级GCC背后冗长的材料，请继续阅读[[#GCC升级详解|GCC升级详解]]。

=== 简明版 ===

如果你正在升级GCC，那么你需要做的事情只有改变编译器版本和重新构建libtool。 

{{RootCmd|emerge -u sys-devel/gcc
|gcc-config -l|output=<pre>
[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3
</pre>}}

{{RootCmd|gcc-config 2
|env-update && source /etc/profile
|emerge --oneshot libtool}}

如果你从GCC 3.4.0（3.x系列）或4.1之前的版本升级，你还需要运行<code>revdep-rebuild</code>： 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

检查当前版本并卸载旧版本
{{RootCmd|gcc --version
|emerge -C &#61;sys-devel/gcc-4.4.5}}

这样就完成了！ 

== GCC升级详解 ==

=== 介绍 ===

GCC upgrading has always been mystified, with suggestions ranging from "You do not need to do anything" up to "You will need to rebuild your entire system twice". Most of this FUD comes from the confusion surrounding ABI incompatibility. But first a quick pointer towards <code>libtool</code>.

=== libtool 和 fix_libtool_files.sh ===

早前在 Gentoo 上安装 GCC 需要你运行一个叫 <code>fix_libtool_files.sh</code> 的特定命令。一段时间之后，安装包（通过 toolchain eclass）集成了自动执行这个命令，因此用户不需要再手动执行。 

在升级 gcc 版本之后我们需要重新编译 libtool 的原因在于它的主要目的：“libtool” 是一个工具集，通过一个通用的接口聚合了特定平台的代码，允许应用程序使用共享库进行构建，无需应对平台相关的共享库。为能正确实现这一功能，<code>libtool</code> 脚本使用的各种库的定位都包含了 GCC 版本硬编码信息。

=== ABI Changes ===

An ABI, or ''Application Binary Interface'', is a set of conventions used by all tools that deal with binary representation of programs, including compilers, assemblers, linkers and language runtime support (source: [http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html GCC Binary Compatibility]). When the ABI used for binary applications and libraries is changed, you will risk getting linker errors or malfunctioning programs unless you rebuild all libraries that use C++ code. Yes, C++, since most incompatibilities occur within the C++ ABI. This is also why we use the <code>revdep-rebuild</code> command against the {{Path|libstdc++.so.5}} library. 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

So why is this only needed up to GCC 3.4.0/4.1? That's because from that version onwards, GCC uses a forward compatible ABI, which removes the need for rebuilding applications and libraries. Of course, guarantees can never be given indefinitely, but when an incompatibility occurs again, we'll definitely document it here. In that case, the version of the {{Path|libstdc++.so}} library will probably be increased.

=== Rebuilding Everything ===

Some people swear that they need to rebuild every single package on their system when a new GCC version is made available. Of course, that doesn't make sense, since there are many applications that are not using GCC for their build and install process anyhow, so they would never be affected by such changes. 

That however doesn't mean they are completely incorrect: newer GCC versions often include better support for the processors' instruction set, which might influence the performance of some applications in a positive way. Although it is expected that this improvement is generally only marginally, in some cases (especially CPU intensive applications) this might yield notable improvements. 

There are also known cases where packages need to be built with the same compiler. Although these packages are usually bumped by Gentoo simultaneously (so that they are always built with the same GCC version) cherry-picking reinstalls on these packages might prove to be troublesome. The various {{Path|qt-*}} packages are a nice example on this matter. 

== 故障排除 ==

=== libstdc++.so.6: version `GLIBCXX_3.4.15' not found ===

During updates, you might encounter an error like the following: 

{{Code|GLIBCXX_x.y.z not found|<pre>
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found 
</pre>
}}

This means that you are trying to build a package with an ''older'' GCC version than with which some depending libraries were built. Remember when we told that the C++ ABI if forward-compatible? That is true, but it ensures only that ''higher'' (or same) GCC versions can be used when building applications and linking libraries (compared to the GCC version used to build those libraries).

To rebuild all the packages depending on libstdc++ the next bash script can be executed.

{{Code|Script to rebuild libstdc++ depending packages|<pre>
#!/bin/bash
while read i ; do
  [ -n "$(ldd -r $i | grep 'libstdc++')" ] && qfile "$i" >> rebuild.packages
done < $(find $(echo $PATH | tr ':' ' ') -type f -executable)
cut -d ' ' -f1 rebuild.packages | sort -u -o rebuild.packages
emerge -1av $(cat rebuild.packages)
</pre>
}}

=== Which packages are known to need a rebuild? ===

The following table gives the packages that, ''if installed'', need to be rebuild and why. 

{| class="wikitable" style="text-align: left;" 
|- 
! Package
! Rebuild needed because ...
|- 
| {{Package|sys-devel/libtool}}
| libtool application has hardcoded paths towards GCC internal libraries
|-
|}

== Resources ==

=== Gentoo Guides and Resources ===

*  [https://wiki.gentoo.org/wiki/Upgrade_GCC_up_to_4.1 GCC Upgrading up to 4.1], the previous version of this document


[[Category:Core system]]
