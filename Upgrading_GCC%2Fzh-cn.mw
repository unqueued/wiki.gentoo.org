<languages />


{{Metadata|abstract=本文档将指导用户完成GCC的升级。}}

本文档将指导用户完成GCC的升级。

== 快速开始 ==

=== 介绍 ===

这篇文章讲述 ''升级'' GCC。GCC降级可能会有不愿看到的副作用。对于一些报告中常见的问题请查阅[[#故障排除|故障排除]]一节。 

下一节将给出GCC升级的快速指南（这件事太容易了）。如果你想要阅读升级GCC背后冗长的材料，请继续阅读[[#GCC升级详解|GCC升级详解]]。

=== Short version ===

如果你正在升级GCC，那么你需要做的事情只有改变编译器版本和重新构建libtool。 

{{RootCmd|emerge -u sys-devel/gcc
|gcc-config -l|output=<pre>
[1] i686-pc-linux-gnu-4.4.5 *
[2] i686-pc-linux-gnu-4.5.3
</pre>}}

{{RootCmd|gcc-config 2
|env-update && source /etc/profile
|emerge --oneshot libtool}}

If you upgrade GCC from a version earlier than 3.4.0 (for the 3.x series) or 4.1, you will need to run <tt>revdep-rebuild</tt> as well: 

{{RootCmd|revdep-rebuild --library libstdc++.so.5}}

检查当前版本并卸载旧版本
{{RootCmd|gcc --version
|emerge -C &#61;sys-devel/gcc-4.4.5}}

这样就完成了！ 

== GCC upgrading explained ==

=== 介绍 ===

GCC upgrading has always been mystified, with suggestions ranging from "You do not need to do anything" up to "You will need to rebuild your entire system twice". Most of this FUD comes from the confusion surrounding ABI incompatibility. But first a quick pointer towards <tt>libtool</tt>.

=== libtool 和 fix_libtool_files.sh ===

早前在 Gentoo 上安装 GCC 需要你运行一个叫 <code>fix_libtool_files.sh</code> 的特定命令。一段时间之后，安装包（通过 toolchain eclass）集成了自动执行这个命令，因此用户不需要再手动执行。 

The reason we need to rebuild libtool after the upgrade of <tt>gcc</tt> versions is because of its main purpose: ''libtool'' is a toolset that aggregates platform-specific code in a generic interface, allowing applications to build against shared libraries without needing to deal with the platform specific aspects of shared libraries. To fulfill its function properly, the <tt>libtool</tt> script uses various library locations that have hard-coded <tt>gcc</tt> version information in them.

=== ABI changes ===

An ABI, or [https://en.wikipedia.org/wiki/Application_binary_interface ''Application Binary Interface''], is a set of conventions used by all tools that deal with binary representation of programs, including compilers, assemblers, linkers and language runtime support (source: [http://gcc.gnu.org/onlinedocs/gcc/Compatibility.html GCC Binary Compatibility]). When the ABI used for binary applications and libraries is changed, you will risk getting linker errors or malfunctioning programs unless you rebuild all libraries that use C++ code. 

Yes, C++, since most incompatibilities occur within the C++ ABI. If you are upgrading to GCC 4.1, or GCC 5.1, you would probably encounter ABI issues. This is also why we use the <tt>revdep-rebuild</tt> command against the {{Path|libstdc++.so.5}} (from GCC 3 to GCC 4.1), or {{Path|libstdc++.so.6}} (from GCC 4 to GCC 5.1).

{{RootCmd|revdep-rebuild --library "libstdc\+\+\.so\.6"}}

So why is this only needed up to GCC 3.4.0/4.1/5.1? That's because from that version onward, GCC uses a forward compatible ABI, which removes the need for rebuilding applications and libraries. Of course, guarantees can never be given indefinitely, but when an incompatibility occurs again, we'll definitely document it here. In that case, the version of the {{Path|libstdc++.so}} library will probably be increased.

=== Rebuilding everything ===

一些人认为当新版本的GCC安装好之后,他们需要重新编译他们系统上的已经安装过的应用,当然,这被认为是没有意义的,因为这里有很多应用在编译和构建的时候并没有用到GCC,所以更新不会影响到它们. 

然而并不能说安装好新的GCC并更新应用这种做法是错误的,因为新的GCC版本往往会对进程提供更好的指令集支持,这些支持可能会在某些方面提高一些程序的性能,当然这些影响可能都是轻微的,甚至在某些方面(尤其是特别消耗CPU的应用)并不会提高性能. 

There are also known cases where packages need to be built with the same compiler. Although these packages are usually bumped by Gentoo simultaneously (so that they are always built with the same GCC version) cherry-picking re-installs on these packages might prove to be troublesome. The various {{Path|qt-*}} packages are a nice example on this matter. 

== 故障排除 ==

=== libstdc++.so.6: version `GLIBCXX_3.4.15' not found ===

在升级过程中,你或许会遇到以下面这些错误: 

{{CodeBox|title=GLIBCXX_x.y.z not found|1=
cmake_bootstrap_28021_test: /usr/lib/gcc/i486-pc-linux-gnu/4.1.2/libstdc++.so.6:
version `GLIBCXX_3.4.11' not found 
}}

这意味着你正在用一个"较老版本"(新版本指的是那些已经构建好这些依赖库的版本)的GCC来构建这些包.请记住所谓的C++ABI 向前兼容指的是:假设你可以用某个版本的GCC成功构建程序和连接库文件,那么你可以用比这个版本更高版本GCC去构建这些程序,而不是用更低版本GCC来构建这些程序.

To rebuild all the packages depending on libstdc++ the next bash script can be executed.

{{CodeBox|title=Script to rebuild libstdc++ dependent packages|lang=bash|1=
#!/bin/bash
 
IFS=: read -ra pathComponents <<<"$PATH"
while IFS= read -rd '' x; do
    ldd -r -- "$x" {{!}} grep -q libstdc++ && bins+=("$x")
done < <(find "${pathComponents[@]}" -type f -executable -print0)
 
typeset -A pkgs
while read -r x; do
    : ${x:+"${pkgs[=${x}]=}"}
done < <(equery -q b "${bins[@]}")
emerge -av1 "${!pkgs[@]}"
}}

=== Which packages are known to need a rebuild? ===

The following table gives the packages that, ''if installed'', need to be rebuild and why. 

{| class="table" style="text-align: left;" 
|- 
! Package
! Rebuild needed because ...
|- 
| {{Package|sys-devel/libtool}}
| libtool application has hardcoded paths towards GCC internal libraries
|-
|}

== See also ==

*  [https://wiki.gentoo.org/wiki/Upgrade_GCC_up_to_4.1 GCC Upgrading up to 4.1], the previous version of this document


[[Category:Core system]]
