<languages />
{{InfoBox stack
|{{InfoBox homepage|https://freedesktop.org/wiki/Software/systemd|header=true}}
|{{InfoBox wikipedia}}
|{{InfoBox github|https://github.com/systemd/systemd/|raw=true}}
}}

{{c|systemd}} — это современная замена для SysV-подобных init и {{c|rc}} (run command)<ref>Eric S. Raymond. http://www.catb.org/jargon/html/R/rc-file.html Retrieved on June 27th, 2015</ref> для Linux-систем. Она поддерживается Gentoo в качестве альтернативной системы инициализации.
<!--
Следующие директории используются как OpenRC, так и systemd:
* {{Path|/etc/modules-load.d}},
* {{Path|/etc/sysctl.d}},
* {{Path|/etc/binfmt.d}}
-->

== Установка ==

{{Note|При обновлении с <{{=}}sys-apps/systemd-203 обратите внимание на [[Systemd/upgrade|статью по обновлению]].}}

=== Ядро ===

systemd позволяет использовать многие современные возможности ядра Linux. На данный момент минимальная требуемая версия ядра — 2.6.39. В свежих версиях {{Package|sys-kernel/gentoo-sources}} поддерживается удобный способ включения обязательных и опциональных параметров ядра для systemd (смотрите [[Kernel/Configuration/ru|Ядро/Конфигурация]] для получения дополнительной информации):

{{KernelBox|title=Быстрая настройка, если используется gentoo-sources|<pre>
Gentoo Linux --->
        Support for init systems, system and service managers --->
                [*] systemd
</pre>}}

При конфигурации ядра вручную (единственный способ, если не используется {{Package|sys-kernel/gentoo-sources}}), следующие параметры конфигурации ядра необходимы или рекомендуются:

<!-- See https://cgit.freedesktop.org/systemd/systemd/plain/README -->
{{KernelBox|title=Обязательные опции|<pre>
General setup  --->
	[*] open by fhandle syscalls
	[*] Control Group support --->
	[ ] Enable deprecated sysfs features to support old userspace tools
	[*] Configure standard kernel features (expert users)  --->
		[*] Enable eventpoll support
		[*] Enable signalfd() system call
		[*] Enable timerfd() system call
[*] Networking support --->
Device Drivers  --->
	Generic Driver Options  --->
		[*] Maintain a devtmpfs filesystem to mount at /dev
File systems  --->
	[*] Inotify support for userspace
	Pseudo filesystems  --->
		[*] /proc file system support
		[*] sysfs file system support
</pre>}}

{{KernelBox|title=Рекомендуемые опции|<pre>
General setup  --->
        [*] Checkpoint/restore support
	[*] Namespaces support  --->
		[*] Network namespace
[*] Enable the block layer  --->
	[*] Block layer SG support v4
Processor type and features  --->
	[*] Enable seccomp to safely compute untrusted bytecode
Networking support --->
	Networking options --->
		<*> The IPv6 protocol
Device Drivers  --->
	Generic Driver Options  --->
		()  path to uevent helper
		[ ] Fallback user-helper invocation for firmware loading
Firmware Drivers  --->
	[*] Export DMI identification via sysfs to userspace
File systems --->
	<*> Kernel automounter version 4 support (also supports v3)
	Pseudo filesystems --->
		[*] Tmpfs virtual memory file system support (former shm fs)
		[*]   Tmpfs POSIX Access Control Lists
		[*]   Tmpfs extended attributes
</pre>}}

Для UEFI систем, включите следующие:

{{KernelBox|title=Поддержка UEFI|<pre>
[*] Enable the block layer  --->
	Partition Types  --->
		[*] Advanced partition selection
		[*]   EFI GUID Partition support
Processor type and features  --->
	[*] EFI runtime service support
Firmware Drivers  --->
        EFI (Extensible Firmware Interface) Support -->
	        <*> EFI Variable Support via sysfs
</pre>}}

Для систем, использующих планировщик BFQ, рекомендуется включить опцию "BFQ hierarchical scheduling support", находящуюся в блоке "Enable the block layer -> IO Schedulers".

Наиболее актуальный список необходимых опций можно найти в разделе "REQUIREMENTS" файла [https://cgit.freedesktop.org/systemd/systemd/tree/README README].

==={{Path|/etc/mtab}}===

Последние версии поддерживают файл {{Path|/etc/mtab}} только в качестве символьной ссылки на {{Path|/proc/self/mounts}}. Отсутствие этой ссылки также может вызвать проблемы, связанные с {{c|mount}} ({{bug|434090}}) и {{c|df}} ({{bug|477240}}). Раньше некоторые утилиты записывали информацию (вроде опций монтирования) в {{Path|/etc/mtab}}, и потому предполагалось, что он является обычным файлом; сейчас программное обеспечение не должно иметь проблем, связанных с этим. Последнее: прежде чем сделать {{Path|/etc/mtab}} символьной ссылкой, взгляните на {{bug|477498}}, чтобы удостовериться, что система не подвержена ни одной из описанных проблем.

Чтобы создать символьную ссылку, запустите:

{{RootCmd|ln -sf /proc/self/mounts /etc/mtab}}

=== Убедитесь, что /usr доступен во время загрузки ===

Если {{Path|/usr}} расположен на отдельном разделе, используйте [[initramfs]] для монтирования {{Path|/usr}} до запуска systemd. На данный момент это означает использование {{Package|sys-kernel/dracut}} или {{Package|sys-kernel/genkernel-next}} до поддержки {{Path|/usr}} в {{Package|sys-kernel/genkernel}}. Выделите время для миграции:

{{Emerge|params+=--unmerge|sys-kernel/genkernel}}
{{Emerge|sys-kernel/dracut}}
{{Emerge|sys-kernel/genkernel-next}}

Если используете dracut, включите модуль usrmount, если он не включен автоматически, для монтирования {{Path|/usr}}.

{{FileBox|filename=/etc/dracut/dracut.conf|lang=bash|1=
# Включение модуля для dracut
add_dracutmodules+="usrmount"
}}

Если используется genkernel-next, то до того, как пересобрать ядро, удостоверьтесь в установке значения <code>yes</code> для переменной <var>UDEV</var> в файле конфигурации {{c|genkernel}}. Это затянет {{path|/usr}} в initramfs:

{{FileBox|filename=/etc/genkernel.conf|lang=bash|1=
# Использование udev вместо mdev в качестве стандартного менеджера устройств для initramfs.
# Если используется systemd и, возможно, lvm, тогда это необходимо включить.
UDEV="yes"
}}

{{RootCmd|genkernel --install all}}

Смотрите [[Initramfs/Guide/ru|гайд по initramfs]] для других альтернатив.

=== Использование LVM и initramfs ===

Если система загружена с использованием initramfs, и используется [[LVM|sys-fs/lvm2]], initramfs должна быть создана с использованием {{Package|sys-kernel/genkernel-next}}. Для этого запустите:

{{RootCmd|genkernel --udev --lvm <target>}}

<code><target></code> — это <code>initramfs</code> или любой другой genkernel target, реализующий создание initramfs. Чтобы получить дополнительную информацию, смотрите {{c|genkernel --help}}:

{{Cmd|genkernel --help}}

При использовании LVM должен быть запущен демон {{c|lvmetad}}. В противном случае systemd не сможет монтировать LVM-разделы. {{c|lvmetad}} может быть включен в {{Path|/etc/lvm/lvm.conf}}:

{{FileBox|filename=/etc/lvm/lvm.conf|title=Необходимые изменения lvm.conf|lang=ini|1=
# Set use_lvmetad to '1' for systemd
use_lvmetad {{=}} 1
}}

{{Note|Вместо изменения {{Path|/etc/lvm/lvm.conf}} этого можно было бы достичь с помощью юнита {{Path|lvmetad.socket}}, который активирует сервис {{Path|lvmetad.service}}, но текущие версии {{Package|sys-fs/lvm2}} пока не поддерживают такую возможность.}}

=== USE-флаги ===

{{USEflag|package=sys-apps/systemd}}

=== Установка ===

Активируйте USE-флаг <code>systemd</code> глобально (в файле {{Path|make.conf}}). USE-флаг <code>consolekit</code> должен быть отключен, чтобы избежать конфликтов с сервисом {{c|systemd-logind}}. Также можно переключиться на субпрофиль systemd, чтобы использовать стандартный набор флагов (в этом случае отпадает необходимость ручной правки {{Path|make.conf}}):

{{RootCmd|eselect profile list}}

Обновите систему с новым профилем:

{{RootCmd|emerge -avDN @world}}

Причиной проблем с зависимостями (например, {{Package|sys-fs/udev}} блокирует {{Package|sys-apps/systemd}}), может быть то, что {{Package|sys-fs/udev}} зарегистрирован в файле world. Попробуйте решить эту проблему, отменив его:

{{Package|sys-apps/systemd}} содержит udev. После установки systemd, пакет {{Package|sys-fs/udev}} может быть удалён, так как systemd разрешает зависимость {{Package|virtual/udev}}.

{{RootCmd|emerge --deselect sys-fs/udev}}

=== Загрузчик ===

Чтобы загрузиться с systemd, измените {{c|init}}, который запускает ядро (или initramfs).

{{Warning|Сервисы, настроенные для менеджера сервисов, который использовался ранее, не будут запускаться автоматически. Это обусловлено переходом на другой менеджер сервисов. Чтобы восстановить функциональность таких сервисов, как сетевые сервисы или login-менеджер, необходимо снова активировать эти сервисы. Больше информации об этом можно найти в секции сервисы далее в этой статье.}}

{{Note|Если переход на systemd вызывает проблемы, всегда можно вернуться к стандартному менеджеру сервисов (OpenRC), изменив init. Это позволяет откатиться к исходному состоянию системы и перейти к решению проблем, руководствуясь соответствующей секцией этой статьи.}}

Следующие главы этой статьи покажут, как переключить {{c|init}} в некоторых загрузчиках или непосредственно в самом ядре.

==== GRUB Legacy (0.x) ====

Необходимо добавить агрумент <code>init=/usr/lib/systemd/systemd</code> в командную строку ядра. Соответствующий отрывок {{Path|grub.conf}} будет выглядеть примерно так:

{{FileBox|filename=/boot/grub/grub.conf|title=Пример конфигурационного файла GRUB для systemd|1=
title=Gentoo with systemd
root (hd0,0)
kernel /vmlinuz root=/dev/sda2 init=/usr/lib/systemd/systemd
}}

Если система всё-таки загружается с OpenRC, попробуйте использовать <code>real_init</code> вместо <code>init</code>.

==== GRUB 2 ====

При использовании {{c|grub-mkconfig}} добавьте опцию init в <var>GRUB_CMDLINE_LINUX</var>:

{{Note|В этом нет необходимости, если используется initramfs, сгенерированную {{c|dracut}} с systemd внутри, так как initramfs запускает systemd.}}

{{FileBox|filename=/etc/default/grub|title=Настройка GRUB2 для systemd|lang=bash|1=
# Добавление параметров в командную строку ядра linux
GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"
}}

Если конфигурационный файл GRUB 2 написан вручную (только для опытных пользователей), добавьте параметр <code>init=</code> для команд <code>linux</code> или <code>linux16</code>.

{{FileBox|filename=/boot/grub/grub.cfg|title=Фрагмент примера конфигурации GRUB2|1=
linux /vmlinuz-3.10.9 root=UUID=508868e4-54c6-4e6b-84b0-b3b28b1656b6 init=/usr/lib/systemd/systemd
}}

При использовании initrd, который сгенерирован genkernel-next, используйте <code>real_init</code> вместо <code>init</code>.

{{Note|Использование устаревшего <code>real_init</code> не является необходимым для стабильных версий genkernel-next.}}

==== В конфигурации ядра ====

Конфигурация init также может быть жёстко сконфигурирована в ядре. Смотрите {{Path|Processor type and features -> Built-in kernel command line}}. Обратите внимание, что это работает и для {{c|grub}}, и для {{c|grub2}}.

== Конфигурация ==

systemd поддерживает несколько конфигурационных файлов для настройки базовых параметров системы.

{{Note|В то время, как некоторые параметры системной конфигурации могут быть обновлены путем внесения изменений в соответствующие им файлы, большинство настроек настраиваются с помощью утилит, которым необходим запущенный systemd. В этом случае, необходимо аккуратно перезагрузить компьютер в systemd и использовать требуемые утилиты {{c|hostnamectl}}, {{c|localectl}} и {{c|timedatectl}}.}}

=== Machine ID ===

Создайте machine ID работы журналирования. Это можно сделать следующей командой:

{{RootCmd|systemd-machine-id-setup}}

=== Имя хоста ===

Чтобы установить имя хоста, создайте или измените {{Path|/etc/hostname}}, просто прописав в нем желаемое имя.

Когда система загружена с systemd, используйте утилиту {{c|hostnamectl}} для редактирования {{Path|/etc/hostname}} и {{Path|/etc/machine-info}}. Чтобы изменить имя хоста, выполните:

{{RootCmd|hostnamectl set-hostname <HOSTNAME>}}

Проверьте {{c|man hostnamectl}}, если необходима информация о других опциях.

<!--{{FileBox|filename=/etc/machine-info|title=Конфигурационный файл с информацией о локальной машине|lang=bash|1=
PRETTY_NAME="Larry's Computer"
ICON_NAME="computer-laptop"
}}
-->

=== Локаль ===

При установке systemd, как правило, локали правильно переносятся из OpenRC. Когда требуется, локаль можно установить в {{Path|/etc/locale.conf}} согласно инструкциям из настольной книги Gentoo:

{{FileBox|filename=/etc/locale.conf|title=Настройка системной локали|lang=bash|1=
LANG="en_US.utf8"
}}

Загрузившись с systemd, можно использовать {{c|localectl}} для настройки локали и раскладок в консоли или X11. Чтобы изменить системную локаль, используйте следующую команду:

{{RootCmd|localectl set-locale LANG<nowiki>=</nowiki><LOCALE>}}

Для изменения раскладки виртуальной консоли:

{{RootCmd|localectl set-keymap <KEYMAP>}}

И, наконец, установка раскладки в X11:

{{RootCmd|localectl set-x11-keymap <LAYOUT>}}

Если необходимо, то модель, вариант и опции можно определить так:

{{RootCmd|localectl set-x11-keymap <LAYOUT> <MODEL> <VARIANT> <OPTIONS>}}

=== Время и дата ===

Время и дату можно установить с помощью {{c|timedatectl}}. Эта утилита так же позволит пользователям настроить синхронизацию без необходимости устанавливать {{Package|net-misc/ntp}} или другого пакет, полагаясь только на средства systemd.

Чтобы понять, как использовать {{c|timedatectl}}, просто запустите:

{{RootCmd|timedatectl --help}}

=== Автоматическая загрузка модулей ===

Автоматическая загрузка модулей настраивается с помощью разных файлов, или, скорее, каталога с файлами. Файлы настроек расположены в {{Path|/etc/modules-load.d}}. При старте системы каждый такой файл со списком модулей будет загружен. Формат файла - это список модулей, каждый из которых начинается с новой строки, а сам файл может иметь любое имя, любой длины, но заканчивается на {{Path|.conf}}. Загрузочные модули можно разделить на модули для программ, сервисов или иные пользовательские предпочтения. В качестве примера ниже файл {{Path|virtualbox.conf}} содержит:

{{FileBox|filename=/etc/modules-load.d/virtualbox.conf|title=Пример файла для модулей virtualbox|1=
vboxdrv
vboxnetflt
vboxnetadp
vboxpci
}}

=== Сеть ===

==== systemd-networkd ====

Сервис systemd-networkd подойдет для простой настройки интерфейсов проводной сети. По умолчанию он выключен.

Для настройки systemd-networkd создайте файл {{Path|*.network}} в директории {{Path|/etc/systemd/network}}. Смотрите [https://www.freedesktop.org/software/systemd/man/systemd.network.html systemd.network(5)] в качестве подробного источника. Простая DHCP конфигурация дана ниже:

{{FileBox|filename=/etc/systemd/network/50-dhcp.network
|lang=ini|1=
[Match]
Name=en*
 
[Network]
DHCP=yes
}}

{{RootCmd
|systemctl enable systemd-networkd.service
|systemctl start systemd-networkd.service
}}

Заметьте, по умолчанию systemd-networkd не обновляет информацию в {{Path|resolv.conf}}. Чтобы systemd управлял настройками DNS, замените {{Path|resolv.conf}} на символическую ссылку и запустите systemd-resolved.

{{RootCmd
|ln -snf /run/systemd/resolve/resolv.conf /etc/resolv.conf
|systemctl enable systemd-resolved.service
|systemctl start systemd-resolved.service
}}

==== NetworkManager ====

Довольно часто для конфигурации сетевых настроек используется NetworkManager. Для того чтобы сделать это просто запустите следующую команду, если используется рабочий стол X11:

{{RootCmd|nm-connection-editor}}

Если это не тот случай и сеть необходимо настроить через консоль, то посмотрите [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Using_the_NetworkManager_Command_Line_Tool_nmcli.html nmcli] или следуйте руководству по настройке через {{c|nmtui}}:

{{RootCmd|nmtui}}

[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Networking_Config_Using_nmtui.html nmtui] - это интерфейс на основе curses, запускаемый в консоле, который может помочь пользователям с настройкой сетевых интерфейсов.

=== Обработка лог-файлов ===

systemd имеет возможность обрабатывать лог-файлы без обращения к сторонним системам журналирования ({{Package|app-admin/syslog-ng}} или {{Package|app-admin/rsyslog}}). Сообщения могут быть прочитаны через {{c|journalctl}}. Конечно, все еще можно настроить использование предпочтительного стороннего средства. Смотрите {{c|man journald.conf}} для изучения способов конфигурации journald.

Некоторые общие опции {{c|journalctl}}:

{| class="table table-striped table-condensed"
|-
! Опции командной строки {{c|journalctl}} !! Результат
|-
| {{c|journalctl}} без опций || Отобразить все записи, начиная с самых ранних.
|-
| <code>-b</code>, <code>--boot</code> || Отобразить все записи с начала этой загрузки.
|-
| <code>-r</code>, <code>--reverse</code> || Сначала новейшие записи.
|-
| <code>-f</code>, <code>--follow</code> || Отобразить некоторые последние записи и отобразить новые записи по мере их появления.
|-
| <code>-p</code>, <code>--priority=</code> || Определить (минимум) приоритет отображения сообщений, выбирая из: "emerg" (0), "alert" (1), "crit" (2), "err" (3), "warning" (4), "notice" (5), "info" (6), "debug" (7).
|-
| <code>--since=</code>, <code>--until=</code> || Ограничить записи по времени. Формат "YYYY-MM-DD hh:mm:ss", либо "yesterday", "today" и "tomorrow".
|-
| <code>-n</code>, <code>--lines=</code> || Ограничить количество записей.
|-
| <code>-k</code>, <code>--dmesg</code> || Ограничиться только сообщениями от ядра.
|-
| <code>-u</code>, <code>--unit=</code> || Ограничиться определенным юнитом Systemd.
|}

Для более детальной информации обратитесь к {{c|man journalctl}}.

=== /tmp теперь в tmpfs ===

Если какая-либо другая файловая система не настроена на монтирование к {{Path|/tmp}} в {{Path|/etc/fstab}}, то systemd смонтирует {{Path|/tmp}} как tmpfs. Это значит, что она будет стираться при каждой загрузке и её размер будет ограничен 50% от объема физической оперативной памяти. Чтобы узнать, почему этот алгоритм предпочтителен и как его изменить, посетите [https://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ API File Systems].

=== Настройка процесса загрузки ===

При переходе на systemd пользователи обычно могут заметить различия в уровне оповещений во время загрузки:

* Опция загрузки <code>quiet</code> влияет не только на вывод ядра, но и на systemd. Пока systemd настраивается на машине, отбросьте эту опцию, чтобы увидеть любые возникающие ошибки. После этого, верните обратно для «тихой» (и более быстрой) загрузки.
* Даже с опцией <code>quiet</code>, systemd еще может выводить свой статус через <code>systemd.show_status=1</code>.
* Когда не используется <code>quiet</code>, некоторые сообщения могут перезаписать старые в консоли. Это обусловлено конфигурацией ядра (см. {{c|man 5 proc}} и {{Path|/proc/sys/kernel/printk}}). Для корректировки вставьте <code>loglevel=5</code> в загрузку ядра (и обновите значение в соответствии с предпочтением, к примеру, самое маленькое возможное значение равно 1).

== Сервисы ==

В некоторых случаях систему необходимо перезагрузить, что бы дать systemd запуститься (в системном режиме). Будьте уверены, что прочитали весь этот документ и настроили systemd насколько это возможно до перезагрузки системы. Учтите, что {{c|journalctl}} можно пользоваться при не запущенном systemd, но {{c|systemctl}} ничего не сможет сделать без запущенного systemd. Закончите настройку сервисов (включение и запуск сервисов) после входа в систему с запущенным systemd.

=== Сервисы OpenRC ===

Несмотря на то, что изначально systemd предназначен для поддержки запуска старых init.d скриптов, эта поддержка не лучшим образом подходит к RC, таким как OpenRC, и полностью отключена на Gentoo. OpenRC осуществляет дополнительные меры, чтобы обеспечивать защиту от запуска init.d скриптов, когда OpenRC не был использован для загрузки (в противном случае результаты непредсказуемы).

=== Просмотр доступных сервисов ===

Все доступные сервисы могут быть представлены в виде списка через аргумент <code>list-units</code> для {{c|systemctl}}:

{{RootCmd|systemctl list-units|output=<pre>
UNIT                               LOAD   ACTIVE SUB       DESCRIPTION
boot.automount                     loaded active waiting   EFI System Partition Automount
proc-sys-fs-binfmt_misc.automount  loaded active waiting   Arbitrary Executable File Formats File System Automount Point
...
</pre>}}

Следующие окончания файлов представляют интерес:

{| class="table table-striped table-condensed"
! Окончание
! Описание
|-
| {{Path|.service}}
| простые файлы описывающие сервис (например, те что запускают процесс-демона напрямую),
|-
| {{Path|.socket}}
| «прослушка» сокетов (как ''inetd''),
|-
| {{Path|.path}}
| триггеры файловой системы для сервисов (запускают сервисы когда файлы изменены и т.д.).
|}

В качестве альтернативы утилита {{c|systemctl}} может быть использована для отображения списка сервисов (включая скрытые):

{{RootCmd|systemctl --all --full}}

И, наконец, проверьте сервисы, которые не смогли запуститься:

{{RootCmd|systemctl --failed}}

=== Включение, отключение, запуск и остановка сервисов ===

Обычный способ включить сервис, это использовать следующую команду:

{{RootCmd|systemctl enable foo.service}}

Сервис также можно отключить:

{{RootCmd|systemctl disable foo.service}}

Эти команды включают сервисы, используя свое имя как цель по умолчанию (как это определенно в разделе "Install" в файле описывающий сервис). Однако, иногда такие файлы сериса не содержат данной информации или пользователи предпочитают использовать другое имя/цель.

Заметьте, что упомянутые команды только включают или выключают сервисы, для запуска их только при следующей загрузке; чтобы запустить сервис сразу, используйте:

{{RootCmd|systemctl start foo.service}}

Сервисы также могут быть остановлены:

{{RootCmd|systemctl stop foo.service}}

=== Установка пользовательских unit-файлов ===

Пользовательские unit-файлы могут быть размещены в {{Path|/etc/systemd/system}}, где они распознаются после запуска {{c|systemctl daemon-reload}}:

{{RootCmd|systemctl daemon-reload}}

Путь {{Path|/usr/lib/systemd/system}} зарезервирован для файлов, описывающих сервис, которые установлены с помощью пакетного менеджера.

=== Пользовательская настройка unit-файлов ===

Когда необходимо внести только небольшие изменения в unit-файл, нет нужды в создании полной копии оригинального unit-файла в {{Path|/etc/systemd/system}}. Переопределение настроек в управлении пакетами позволяет достигнуть этого перемещением файлов в каталог заканчивающийся на {{Path|*.d}} после имени оригинального unit-файла (например {{Path|apache2.d}}) в {{Path|/etc/systemd/system/}}.

{{FileBox|filename=/etc/systemd/system/apache2.d/mem-limit.conf|title=Пример добавления/переопределения настроек в файле описывающий сервис|lang=ini|1=
[Service]
MemoryLimit{{=}}1G
}}

Перезагрузка systemd необходима для принятия изменений:

{{RootCmd|systemctl daemon-reload}}

После сервис так же должен быть перезапущен для принятия изменений:

{{RootCmd|systemctl restart apache2}}

Проверьте, что изменения были применены к сервису:

{{RootCmd|systemctl show --property{{=}}MemoryLimit apache2|output=<pre>MemoryLimit=1074000000</pre>}}

=== Включение сервиса под другим именем ===

Когда имя, определенное в "Alias" секции "[Install]" unit-файла, не соответствует ожиданиям и определение постоянного нового значения для этого через [[#.D0.9F.D0.BE.D0.BB.D1.8C.D0.B7.D0.BE.D0.B2.D0.B0.D1.82.D0.B5.D0.BB.D1.8C.D1.81.D0.BA.D0.B0.D1.8F_.D0.BD.D0.B0.D1.81.D1.82.D1.80.D0.BE.D0.B9.D0.BA.D0.B0_unit-.D1.84.D0.B0.D0.B9.D0.BB.D0.BE.D0.B2|пользовательскую настройку]] не требуется, можно создать символическую ссылку в {{Path|/etc/systemd/system/*.wants/}}. Имя директории {{Path|*.wants}} может указывать на цель загрузки (target), либо на другой сервис, который будет зависеть от нового.

Например, чтобы установить {{Path|mysqld.service}} как {{Path|db.service}} в {{Path|multi-user.target}}:

{{RootCmd|ln -s /usr/lib/systemd/system/mysqld.service /etc/systemd/system/multi-user.target.wants/db.service}}

Для отключения сервиса просто удалите символическую ссылку:

{{RootCmd|rm /etc/systemd/system/multi-user.target.wants/db.service}}

=== Нативные сервисы ===

Некоторые пакеты Gentoo устанавливают systemd unit-файлы. Такие сервисы уже сразу можно включить. Общая информация о таких пакетах находится по адресу [https://qa-reports.gentoo.org/output/eclass-usage/systemd.txt systemd eclass users list].

В следующей таблице приводится список сопоставление сервисов systemd и OpenRC:

{| class="table table-striped table-condensed" style="text-align: left;"
|+ Схема перемещений
|-
! scope="col" | Пакет Gentoo
! scope="col" | OpenRC сервис
! scope="col" | systemd unit
! scope="col" | Примечание
|-
! scope="row" rowspan="28" | {{Package|sys-apps/openrc}}
| bootmisc || systemd-tmpfiles-setup.service || всегда включен, используя {{Path|tmpfiles.d}}
|-
| consolefont || systemd-vconsole-setup.service || всегда включен, используя {{Path|vconsole.conf}}
|-
| devfs ||  || 
|-
| dmesg ||  || 
|-
| fsck || fsck*.service || загружается косвенным образом при монтировании
|-
| functions.sh || Смотрите примечание || {{Bug|373219}}
|-
| hostname || (встроен в systemd) || {{Path|/etc/hostname}}
|-
| hwclock || Смотрите примечание || всегда включен как часть systemd (т.е. это не unit)
|-
| keymaps || systemd-vconsole-setup.service || всегда включен, используя {{Path|vconsole.conf}}
|-
| killprocs ||  || 
|-
| local ||  || 
|-
| localmount || local-fs.target || актуальные unit-файлы создаются косвенно из {{Path|/etc/fstab}}
|-
| modules || systemd-modules-load.service || всегда включен, используя {{Path|/etc/modules-load.d/*.conf}}
|-
| mount-ro ||  || 
|-
| mtab ||  || 
|-
| netmount || remote-fs.target || 
|-
| numlock ||  || 
|-
| procfs || (встроен в systemd) || 
|-
| root || remount-rootfs.service || 
|-
| savecache || n/a || внутри OpenRC
|-
| staticroute ||  || 
|-
| swap || swap.target || актуальные unit-файлы создаются косвенно из {{Path|/etc/fstab}}
|-
| swclock ||  || 
|-
| sysctl || systemd-sysctl.service || {{Path|sysctl.conf}} и {{Path|sysctl.d/}}
|-
| sysfs || (встроен в systemd) || 
|-
| termencoding || systemd-vconsole-setup.service || всегда включен, используя {{Path|vconsole.conf}}
|-
| scope="row" rowspan="2" | urandom
| systemd-random-seed-load.service || 
|-
| systemd-random-seed-save.service || 
|-
! scope="row" | {{Package|app-admin/rsyslog}}
| rsyslog || rsyslog.service || 
|-
! scope="row" | {{Package|app-admin/syslog-ng}}
| syslog-ng || syslog-ng.service || 
|-
! scope="row" rowspan="2" | {{Package|media-sound/alsa-utils}}
| scope="row" rowspan="2" | alsasound
| alsa-store.service || (по умолчанию включен)
|-
| alsa-restore.socket || (по умолчанию включен)
|-
! scope="row" | {{Package|net-misc/dhcpcd}}
| dhcpcd || dhcpcd.service || 
|-
! scope="row" rowspan="5" | {{Package|net-misc/netifrc}} 
| scope="row" rowspan="5" | net.*
| net@.service || systemd обертка для net.* скриптов (вместе с {{Package|net-misc/netifrc}})
|-
| netctl@.service || {{Package|net-misc/netctl}} изначально инструмент из Arch Linux.
|-
| NetworkManager.service || Для &lt;networkmanager-0.9.8.4 : включить NetworkManager-dispatcher.service для dispatcher.d рабочих скриптов. <br /> Включить NetworkManager-wait-online.service для определения рабочего интернет-соединения.<br />Отключить все остальные менеджеры (например, wicd, dhcpcd) и wpa_supplicant.
|-
| dhcpcd.service || Пакет {{Package|net-misc/dhcpcd}}
|-
| systemd.networkd.service || Часть systemd
|-
! scope="row" | {{Package|net-misc/openntpd}}
| ntpd || ntpd.service ||
|-
! scope="row" rowspan="2" | {{Package|net-misc/openssh}}
| scope="row" rowspan="2" | sshd
| sshd.service || запускает sshd как процесс-демон
|-
| sshd.socket || запускает sshd на inetd-подобной основе (для каждого входящего соединения)
|-
! scope="row" rowspan="2" | {{Package|net-wireless/wpa_supplicant}}
| scope="row" rowspan="2" | wpa-supplicant
| wpa_supplicant.service || D-Bus контролирующий процесс-демон (например, для [[NetworkManager#Systemd|NetworkManager]])
|-
| wpa_supplicant@.service || интерфейс wpa_supplicant (используется как {{Path|wpa_supplicant@wlan0.service}})
|-
! scope="row" rowspan="3" | {{Package|net-print/cups}}
| scope="row" rowspan="3" | cupsd
| cups.service || сервис с классическим запуском при загрузке
|-
| cups.socket
| scope="row" rowspan="2" | сокет и активация (только запущенный по требованию cups)
|-
| cups.path
|-
! scope="row" | {{Package|net-wireless/bluez}}
| bluetooth || bluetooth.service || 
|-
! scope="row" rowspan="2" | {{Package|sys-apps/dbus}}
| scope="row" rowspan="2" | dbus
| dbus.service || 
|-
| dbus.socket || 
|-
! scope="row" | {{Package|sys-apps/irqbalance}}
| irqbalance || irqbalance.service || поддерживает только режим демона
|-
! scope="row" | {{Package|sys-apps/microcode-ctl}}
| microcode_ctl ||  || Настройте ''microcode'' как '''module''' для его загрузки по микрокоду. Перейдите на "Processor type and features" -> "CPU microcode loading support" и не забудьте добавить настройку зависимости от процессора Intel или AMD.
|-
! scope="row" rowspan="4" | {{Package|sys-fs/udev}}
| udev || udev.service || 
|-
| udev-mount || (builtin) || {{Path|/dev}} смонтирован как tmpfs
|-
| udev-postmount || udev-trigger.service || 
|-
| || udev-settle.service || 
|-
! scope="row" | {{Package|sys-power/acpid}}
| acpid || acpid.service || Большая часть функциональности заключена в самом systemd, возможно поэтому вы решить отключить его
|-
! scope="row" | {{Package|x11-apps/xdm}}
| (xdm) || xdm.service || OpenRC использует общий xdm init.d, установленный вместе с пакетом {{Package|x11-base/xorg-server}}. С systemd вам необходимо включить соответствующий файл модуля для каждого дисплейного менеджера (gdm.service, kdm.service...)
|-
! scope="row" rowspan="2" | {{Package|net-firewall/iptables}}
| scope="row" rowspan="2" | iptables
| iptables-store.service || 
|-
| iptables-restore.service || 
|-
|}

=== Сервисы таймеров ===

Начиная с версии 197, systemd поддерживает таймеры, делающие cron ненужным на системе с systemd. Начиная с версии 212 стал доступен постоянный сервис, который заменяет anacron. Постоянные таймеры запустятся при следующей возможности, если система была выключена, когда таймер был запланирован.

Следующий пример показывает, как создать простой таймер, который запустится в контексте пользователя. Он запустится даже если пользователь не вошел в систему. Каждый раз, когда сервис нуждается в таймере, файл сервиса активируется через таймер. Например:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.timer|title=Пример как запускать таймер каждый рабочий день|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=no
 
[Timer]
Persistent=false
OnCalendar=Mon-Fri *-*-* 11:30:00
Unit=backup-work.service
 
[Install]
WantedBy=default.target
}}

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Пример триггера для запуска сервиса резервного копирования|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

Во-первых, скажите systemd заново прочитать файлы описывающие сервис:

{{Cmd|systemctl --user daemon-reload}}

Можно вручную вызвать срабатывание триггера, запустив следующую команду:

{{Cmd|systemctl --user start backup-work.service}}

Запустите и остановите таймер вручную:

{{Cmd|systemctl --user start backup-work.timer}}
{{Cmd|systemctl --user stop backup-work.timer}}

Наконец, включите таймер на каждый запуск системы:

{{Cmd|systemctl --user enable backup-work.timer}}

Чтобы проверить последние результаты запущенного сервиса:

{{Cmd|systemctl --user list-timers}}

==== Электронная почта о сбоях ====

Если сервис был запущен и дал сбой, то может быть отправлено электронное письмо с уведомлением об этом пользователя или администратора. Эта возможность осуществляется через строфу "OnFailure", определяющую действия на случай сбоя сервиса. Сбой распознается по ненулевому возвращенному коду от вызванного скрипта.

Для этого изменим скрипт как показано ниже:

{{FileBox|filename=~/.local/share/systemd/user/backup-work.service|title=Пример триггера для запуска сервиса резервного копирования|lang=ini|1=
[Unit]
Description=daily backup work
RefuseManualStart=no
RefuseManualStop=yes
OnFailure=failure-email@%i.service
 
[Service]
Type=oneshot
ExecStart=/home/<user>/scripts/backup-work.sh
}}

Для этого нужно установить сервис {{Path|failure-email@.service}}, которую можно найти в [https://github.com/kylemanna/systemd-utils/tree/master/onfailure kylemanna's systemd-utils repository].

==== Замена cron ====

Вышеуказанные таймер и файлы, описывающие сервис, также могут быть добавлены в {{Path|/usr/lib/systemd/system}} для того, чтобы сделать их доступными в масштабах всей системы. Для запуска сервиса вместе с системой нужно прописать в секцию install <code>WantedBy=multi-user.target</code>.

Однако, cron также может быть запущен через скрипты в {{Path|/etc/cron.daily}} и других директориях. Некоторые пакеты помещают скрипты туда, откуда они будут запускаться ежедневно. Это поведение может быть эмулировано с systemd, установив {{Package|sys-process/systemd-cron}}. Далее, активируйте новую замену cron следующими командами:

{{RootCmd|systemctl enable cron.target}}
{{RootCmd|systemctl start cron.target}}

== Устранение проблем ==

* {{Bug|systemd|search=package}}
* {{Bug|systemd|search=product|site=fdo}}
* [https://freedesktop.org/wiki/Software/systemd/Debugging/ Upstream debugging guide]

=== Буфер /dev/kmsg переполнен, некоторые сообщения потеряны ===

; Проблема: Когда при загрузке системы на экран выводится бесконечный цикл <code>/dev/kmsg buffer overrun, some messages lost</code>. Консольный экран входа никогда не появится пока система не перестанет зацикливаться в процессе загрузки.

; Решение: В большинстве случаев такая ошибка возникает когда в ядре включена опция <var>CONFIG_POWER_SUPPLY_DEBUG</var>. Обходной путь состоит в отключении этой опции и пересборке нового ядра. Решение так же может быть найдено на [https://forums.gentoo.org/viewtopic-t-977530-postdays-0-postorder-asc-start-0.html форуме Gentoo]. Для одного пользователя форума эта проблема была обнаружена при использовании I2C EEPROM на встроенной системе <ref>https://forums.gentoo.org/viewtopic-t-977530-postdays-0-postorder-asc-start-25.html 12 Марта, 2016</ref>. Решение заключалось в отключении опции ядра <var>CONFIG_I2C_DEBUG_CORE</var>.

=== Графические сессии, запущенные в разных местах ===

По умолчанию, systemd запускает процесс {{c|getty}} только тогда, когда он будет использоваться. Это приводит к тому, что некоторые менеджеры экрана (например GDM), используют оставшиеся TTY для открытия графических сессий по требованию, что в результате дает хаотичное размещение консолей и графических сессий в зависимости от порядка, в котором они используются.

Для того, чтобы придерживаться более классического поведения (т. е. консоли размещаются от {{Path|tty1}} до {{Path|tty6}}, а графические сессии занимают оставшиеся TTY) принудительно включите {{c|getty}}:

{{RootCmd|systemctl enable getty@tty{2,3,4,5,6}.service}}

=== LVM ===

Когда переключаетесь с OpenRC на systemd и LVM необходим для правильного подключения системных томов, то включите LVM сервис:

{{RootCmd|systemctl enable lvm2-monitor.service}}

Пока это не нужно для корневого тома (если LVM интегрирован в initramfs), это может не работать для остальных LVM томов, если сервис запущен.

=== systemd-bootchart ===

Убедитесь, что <var>CONFIG_DEBUG_KERNEL</var>, <var>CONFIG_SCHED_DEBUG</var> и <var>CONFIG_SCHEDSTATS</var> включены.

{{KernelBox|title=Включение поддержки systemd-bootchart|1=<pre>
File systems  --->
	Pseudo filesystems --->
	[*] /proc file system support
Kernel hacking  --->
	[*] Kernel debugging
	[*] Collect scheduler debugging info
	[*] Collect scheduler statistics
</pre>}}

Далее, включите {{Path|systemd-bootchart.service}}:

{{RootCmd|systemctl enable systemd-bootchart}}

Все изменения будут помещены в bootchart-отчет в формате SVG файла, который размещается в {{Path|/run/log/}} после каждой загрузки. Его можно открыть в любом современном веб-браузере.

В качестве альтернативы systemd-bootchart, загрузку сервисов также можно визуализировать следующим образом:

{{RootCmd|systemd-analyze plot > plot.svg}}

=== syslog-ng для systemd ===

Не нужно добавлять <code>unix-dgram('/dev/log');</code> в файл {{Path|/etc/syslog-ng/syslog-ng.conf}}. Это приведет к сбою {{c|syslog-ng}} (как минимум в syslog-ng-3.7.2). Измените строку <code>source src { ...; };</code> как упомянуто в [[Syslog-ng#Sources|статье Syslog-ng]]:

{{FileBox|filename=/etc/syslog-ng/syslog-ng.conf|1=
# для openrc
#source src { system(); internal(); };
 
# systemd
source src { systemd-journal(); internal(); };
}}

=== Настройка sys-fs/cryptsetup ===

systemd не совсем коректно работает с {{Path|/etc/conf.d/dmcrypt}} (см. {{bug|429966}}), так что его необходимо настроить в файле {{Path|/etc/crypttab}}:

{{FileBox|filename=/etc/crypttab|title=Файл настройки для зашифрованного блочного устройства|1=
crypt-home UUID=c25dd0f3-ecdd-420e-99a8-0ff2eaf3f391 -
}}

Убедитесь, что включен флаг <code>cryptsetup</code> для {{Package|sys-apps/systemd}}. Это установит {{Path|/usr/lib/systemd/system-generators/systemd-cryptsetup-generator}}, который автоматически создаст сервис  (<code>cryptsetup@crypt-home.service</code> для примера выше) для каждой записи при загрузке.

=== Проверьте unit, которые не смогли запуститься ===

Проверьте unit, которые не смогли запуститься с помощью команды:

{{RootCmd|systemctl --failed}}

=== Включение режима отладки ===

Для получения более детальной информации в {{Path|/etc/systemd/system.conf}} настройте следующее:

{{FileBox|filename=/etc/systemd/system.conf|lang=bash|1=
LogLevel=debug
}}

Или включите отладочную оболочку (debug-shell), которая откроет терминал на tty9. Этот терминал поможет отладить сервисы во время загрузки.

{{RootCmd|systemctl enable debug-shell.service}}

=== Использование e4rat ===

Пожалуйста, не забудьте отредактировать {{Path|/etc/e4rat.conf}}, установив 'init' в {{Path|/usr/lib/systemd/systemd}}, иначе OpenRC по прежнему будет загружаться в качестве init.

=== GRSecurity ===

С включенным grsecurity, systemd-networkd может выдать ошибку:

{{CodeBox|title=Ошибка systemd-networkd|1=could not find udev device: Permission denied}}

Ошибка возникает из-за работающего под не root пользователем systemd-networkd, в связи с чем grsecurity отказывает в доступе к полной структуре {{Path|/sys}} для таких пользователей. Для отключения этой опции отмените выбор <var>CONFIG_GRKERNSEC_SYSFS_RESTRICT</var> в настройке ядра.

У logind также есть некоторые тонкости с разрешением доступа, если включена опция <var>CONFIG_GRKERNSEC_PROC</var>; смотрите {{Bug|472098}}.

=== shutdown -rF не форсирует fsck ===

Сервис {{c|systemd-fsck}} отвечает за запуск {{c|fsck}}, когда это необходимо. Он не обращает внимания на опцию <code>-rF</code> команды {{c|shutdown}}, но для него имеют значение следующие параметры загрузки ядра.

{| class="table table-striped table-condensed" style="text-align: left; width: auto;" 
|-
! scope="col" width="15%" | Параметр загрузки
! scope="col" width="15%" | Поддерживаемые опции
! Описание
|-
| <code>fsck.mode</code>
| <code>auto</code><br /><code>force</code><br /><code>skip</code>
| Контролирует режим операции. Значение по умолчанию — <code>auto</code>, в этом режиме проверяется, что все проверки ФС выполняются, когда это необходимо. <code>force</code> вызывает безусловную полную проверку ФС. <code>skip</code> пропускает любые проверки файловой системы.
|-
| <code>fsck.repair</code>
| <code>preen</code><br /><code>yes</code><br /><code>no</code>
| Контролирует режим операции. Значение по умолчанию — <code>preen</code>, в этом режиме автоматически решаются все проблемы, избавиться от которых можно безопасно.  <code>yes</code> ответит утвердительно на все запросы fsck, а <code>no</code> ответит на все запросы отрицательно.
|}

== Смотрите также ==

* [[Comparison of init systems]] - В статье сравниваются системы инициализации Gentoo.
* [[Sakaki's_EFI_Install_Guide|Sakaki's EFI Install Guide]] - [[Sakaki's_EFI_Install_Guide/Configuring_systemd_and_Installing_Necessary_Tools|Configuring systemd and installing necessary tools]]
* [[OpenRC to Systemd Cheatsheet]]

=== Внешние источники ===

* [https://www.freedesktop.org/wiki/Software/systemd/FrequentlyAskedQuestions/ FAQ]
* [https://www.freedesktop.org/wiki/Software/systemd/TipsAndTricks/ Советы и хитрости]

== Ссылки ==

{{reflist}}

[[Category:Init systems]]
