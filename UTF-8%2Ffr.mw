<languages />

{{InfoBox stack
|{{InfoBox wikipedia|header=true}}
}}

{{Metadata|abstract=UTF-8 is a variable-length character encoding, which in this instance means that it uses 1 to 4 bytes per symbol. So, the first UTF-8 byte is used for encoding ASCII, giving the character set full backwards compatibility with ASCII. UTF-8 means that ASCII and Latin characters are interchangeable with little increase in the size of the data, because only the first byte is used. Users of Eastern alphabets such as Japanese, who have been assigned a higher byte range are unhappy, as this results in as much as a 50% redundancy in their data.}}

UTF-8 est un encodage des caractères de longueur variable qui, dans ce cas, signifie qu'il utilise 1 à 4 octets par symbole. Le premier octet sert à encoder les caractères ASCII, donnant ainsi au jeu de caractères une totale compatibilité avec ASCII. UTF-8 signifie que les caractères ASCII et latins sont interchangeables moyennant un petit accroissement de la taille des données, parce que seul le premier chiffre binaire est utilisé. Les utilisateurs d'alphabets de l'est asiatique, comme les japonais, à qui ont a attribué une plage plus élevée d'octets sont insatisfaits, car cela conduit à plus de 50% de redondance dans leurs données. 

== Encodage des caractères ==

=== Qu'est-ce que l'encodage des caractères ? ===

Les ordinateurs ne comprennent eux-mêmes pas les textes imprimés comme les humains. Pour les ordinateurs, chaque caractère est représenté par un nombre. Traditionnellement, chaque jeu de nombres utilisé pour représenter les alphabets et les caractères (connus sous le nom de système de codage, encodage, ou jeu de caractères) était limité en taille à cause de la limitation même du matériel constituant les ordinateurs. 

=== L'histoire de l'encodage des caractères ===

Le plus courant (ou du moins le plus largement accepté) des jeux de caractères est l''''ASCII''' (American Standard Code for Information Interchange). Il est largement reconnu que l'ASCII est la norme logicielle la plus réussie jamais créée. L'ASCII moderne a été normalisé en 1986 (ANSI X3.4, RFC 20, ISO/IEC 646:1991, ECMA-6) par l'American National Standards Institute. 

ASCII, a strictement parler, est encodé sur 7 chiffres binaires, ce qui signifie qu'il utilise des motifs de chiffres représentables avec 7 chiffres binaires. Ce qui correspond à la plage 0 à 127 en décimal. Ceci inclut 32 caractères de contrôle non visualisables, en majorité entre 0 et 31, auxquels s'ajoute le caractère de contrôle final, DEL ou delete, dont la représentation est 127. Tous les caractères entre 32 et 126 inclus, sont visualisables : l'espace, les marques de ponctuation, les lettres latines et les chiffres. 

Le huitième bit en ASCII était à l'origine utilisé comme bit de parité pour la détection d'erreurs. Si la détection d'erreurs n'est pas souhaitée, on peut le laisser à 0. Ceci signifie que, avec l'ASCII, chaque caractère est représenté par un seul octet. 

Bien que l'ASCII soit suffisant pour communiquer en anglais moderne, dans d'autres langues européenes qui comprennent des caractères accentués, les choses ne sont pas aussi simples. Les normes ISO 8859 ont été développées pour satisfaire ces besoins. Elles sont rétro-compatibles avec l'ASCII, mais au lieu de laisser le huitième chiffre binaire à 0, elles l'utilisent pour former un autre ensemble de 127 caractères dans chacun des encodages. Les limitations des normes ISO 8859 sont apparues très vite, et il y a aujourd'hui 15 variantes de la norme ISO 8859 (8859-1 à 8859-15). En dehors de la plage compatible avec l'ASCII, il y a souvent des conflits entre les lettres représentées par chacun des octets. Pour compliquer encore l'interopérabilité entre versions, Windows-1252 est utilisée à leur place dans certaines versions de Microsoft Windows pour les langues européennes. Il s'agit d'un jeu étendu de ISO-8859-1, cependant il en diffère de plusieurs façons. Tous ces jeux restent néanmoins compatibles avec ASCII. 

The necessary development of completely different single-byte encodings for non-Latin alphabets, such as EUC (Extended Unix Coding) which is used for Japanese and Korean (and to a lesser extent Chinese) created more confusion. Other operating systems still used different character sets for the same languages, for example, Shift-JIS and ISO-2022-JP. Users wishing to view cyrillic glyphs had to choose between KOI8-R for Russian and Bulgarian or KOI8-U for Ukrainian, as well as all the other cyrillic encodings such as the unsuccessful ISO 8859-5, and the common Windows-1251 set. All of these character sets broke most compatibility with ASCII. Although it should be mentioned KOI8 encodings place cyrillic characters in Latin order, so in case the eighth bit is stripped, text is still decipherable on an ASCII terminal through case-reversed transliteration. 

Tout cela conduisait à la confusion générale, et à une presque totale incapacité à communiquer dans plusieurs langues; en particulier à travers des alphabets différents. C'est là qu'Unicode entre en scène. 

=== Qu'est-ce qu'Unicode ? ===

La norme Unicode jette aux orties la limite traditionnelle d'un octet pour les jeux de caractères. Elle utilise 17 ''plans'' de 65 536 points de code pour décrire un maximum de 1 114 112 caractères. Comme le premier plan, aussi connu sous le nom de ''Basic Multilingual Plane (Plan Multilingue de Base)'' ou BMP, contient presque tous les caractères dont un utilisateur aura jamais besoin, beaucoup ont fait la supposition fausse que l'Unicode était un jeu de caractères encodé sur 16 chiffres binaires. 

Unicode a été cartographié de différentes manières, mais les deux plus courantes sont '''UTF''' (Unicode Transformation Format pour Format de transformation d'Unicode) et '''UCS''' (Universal Character Set pour Jeu de caractères universel). Le nombre après UTF indique le nombre de chiffres binaires dans chacun des éléments, tandis que le nombre après UCS indique le nombre d'octets. UTF-8 est devenu le moyen le plus répandu pour l'échange de texte Unicode en raison de sa nature 8 chiffres binaires pure; C'est de ce fait l'objet de ce document.

=== Ce que UTF-8 peut faire ===

UTF-8 permet aux utilisateurs de travailler dans un environnement multilingue conforme aux normes et reconnu internationalement, avec une redondance des données comparativement faible. UTF-8 est le moyen privilégié pour transmettre les caractères non ASCII sur Internet, via des courriels, l'IRC, ou presque n'importe quel autre médium. En dépit de cela, beaucoup de gens considèrent la communication en ligne en UTF-8 comme abusive. Il est toujours bon d'être conscient de cela sur certains canaux, listes de diffusion, ou groupes Usenet avant d'employer des caractères non ASCII en UTF-8. 

== Installer l'UTF-8 sur Gentoo Linux ==

=== Trouver ou créer des locales UTF-8 ===

Maintenant que les principes d'Unicode ont été établis, préparez-vous à utiliser UTF-8 sur votre système.

Pour les utilisateurs qui veulent en savoir plus, une explication détaillée peut-être trouvée dans le [[Localization/Guide|Gentoo Localization Guide]]. 

Ensuite, l'utilisateur doit décider si une locale UTF-8 est déjà disponible pour la langue choisie, ou si elle doit être générée.

{{Cmd|locale -a {{!}} grep 'en_GB'|output=<pre>
en_GB
en_GB.utf8
</pre>
}}

De la sortie de la commande ci-dessus, cherchez un résultat avec un suffixe similaire à <code>.utf8</code>. S'il n'y a aucun résultat avec un suffixe similaire, une locale compatible UTF-8 doit être créée. 

{{Note|N'exécutez le code suivant que si le système ne possède pas de locale UTF-8 disponible pour la langue choisie.}}

Remplacez "en_GB" avec le code de locale souhaité :
{{RootCmd|localedef -i en_GB -f UTF-8 en_GB.UTF-8}}

Une autre façon d'inclure une locale UTF-8 est de l'ajouter au fichier {{Path|/etc/locale.gen}} et de générer les locales nécessaires en utilisant la commande {{c|locale-gen}}. Les locales seront écrites dans le fichier {{Path|/usr/lib/locale/locale-archive}}.

{{CodeBox|title=Ligne dans /etc/locale.gen|1=
en_GB.UTF-8 UTF-8

}}

{{RootCmd|locale-gen|output=<pre>
 * Generating 1 locales (this might take a while) with 1 jobs
 *  (1/1) Generating en_GB.UTF-8 ...                            [ ok ]
 * Generation complete
</pre>}}

=== Définir la locale ===

Il y a une variable d'environnement qui doit être définie de manière à ce que le système utilise les nouvelles locales UTF-8 : <var>LC_CTYPE</var> (optionnellement, modifiez la variable <var>LANG</var> pour également changer la langue du système). Il y a aussi différentes manières de la définir ; certains administrateurs systèmes préfèrent avoir un environnement UTF-8 pour un utilisateur donné, auquel cas ils la définissent dans leur fichier {{Path|~/.profile}} ({{Path|/bin/sh}} pour les utilisateurs de Bourne shell), {{Path|~/.bash_profile}} ou {{Path|~/.bashrc}} ({{Path|/bin/bash}} pour les utilisateurs de Bourne again shell). Plus de détails et de bonnes pratiques sont disponibles dans le [[Localization/Guide/fr|Localization Guide]]. 

D'autres encore préfèrent la définir globalement. Une circonstance particulière où l'auteur recommande fortement de procéder de cette manière est quand {{Path|/etc/init.d/xdm}} est utilisé, parce que ce script d'initialisation lance le gestionnaire d'écran et le bureau avant qu'aucun des scripts de démarrage mentionnés précédemment ne soit évalués. En d'autre termes, l'action est performée avant qu'aucune des variables ne soit chargée dans l'environnement. 

Setting the locale globally should be done using {{Path|/etc/env.d/02locale}} file. This file should look something like the following: 

{{CodeBox|title=Demonstration /etc/env.d/02locale|lang=bash|1=
## (As always, change "en_GB.utf8" to the appropriate locale value; each language has a different value!)
LANG="en_GB.utf8"
}}

{{Note|It is possible to substitute the <var>LC_CTYPE</var> variable for the <var>LANG</var> variable. For more information on the categories affected by using <var>LC_CTYPE</var> read the [http://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html#Locale-Categories GNU locale page].}}

Next, the environment must be updated by running the following command: 

{{RootCmd|env-update|output=<pre>
>>> Regenerating /etc/ld.so.cache...
</pre>}}
{{RootCmd|source /etc/profile}}

Now, run {{c|locale}} with no arguments to see if the correct variables have been loaded in the environment: 

{{RootCmd|locale|output=<pre>
LANG=en_GB.utf8
LC_CTYPE="en_GB.utf8"
LC_NUMERIC="en_GB.utf8"
LC_TIME="en_GB.utf8"
LC_COLLATE="en_GB.utf8"
LC_MONETARY="en_GB.utf8"
LC_MESSAGES="en_GB.utf8"
LC_PAPER="en_GB.utf8"
LC_NAME="en_GB.utf8"
LC_ADDRESS="en_GB.utf8"
LC_TELEPHONE="en_GB.utf8"
LC_MEASUREMENT="en_GB.utf8"
LC_IDENTIFICATION="en_GB.utf8"
LC_ALL=
</pre>
}}

===Alternatively, using eselect to set locales ===
Although it is good to maintain the system as described above, it is possible to verify the correct locale configured using the {{c|eselect}} utility.

Use {{c|eselect}} to list the available locales on the system:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX *
  [3] en_GB.utf8
  [ ] (free form)
</pre>
}}

Using {{c|eselect}} setting the locale is as simple as listing them. Once the correct locale has been determined invoke:

{{RootCmd|eselect locale set 3 |output=<pre>
Setting LANG to en_GB.utf8 ...
</pre>
}}

Check the result:

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8 *
  [ ] (free form)
</pre>
}}

In case it is preferred to have {{Path|/etc/env.d/02locale}} with <code>.UTF-8</code> instead of <code>.utf8</code>, run the appropriate {{c|eselect}} command:

{{RootCmd|eselect locale set en_GB.UTF-8 |output=<pre>
Setting LANG to en_GB.UTF-8 ...
</pre>
}}

{{RootCmd|eselect locale list |output=<pre>
  [1] C
  [2] POSIX
  [3] en_GB.utf8
  [4] en_GB.UTF-8 *
  [ ] (free form)
</pre>
}}

Running the following command will update the variables in the shell:

{{RootCmd|env-update && source /etc/profile |output=<pre>
>>> Regenerating /etc/ld.so.cache...
</pre>
}}

That is everything. The system is now using UTF-8 locales. The next hurdle is the configuration of the applications used from day to day.

== Application support ==

When Unicode first started gaining momentum in the software world, multibyte character sets were not well suited to languages like C, which is the base language of most commonly used programs. Even today, some programs are not able to handle UTF-8 properly. Fortunately the majority of programs, especially the common ones, are supported. 

=== Noms de fichiers, NTFS, et FAT ===

There are several NLS options in the Linux kernel configuration menu, but it is important to not become confused. For the most part, the only thing that needs to be done is to build UTF-8 NLS support into the kernel, and change the default NLS option to utf8. 

{{KernelBox|title=Kernel configuration steps for UTF-8 NLS|<pre>
File Systems -->
  Native Language Support -->
    (utf8) Default NLS Option
    <*> NLS UTF8
    ## (Also <*> other character sets that are in use in the system's FAT filesystems or Joilet CD-ROMs.)
</pre>
}}

When planning to mount NTFS partitions, users may need to specify a <code>nls=</code> option with mount. When planning on mounting FAT partitions, users may need to specify a <code>codepage=</code> option with mount. Optionally, users can also set a default codepage for FAT in the kernel configuration.

{{Note|Using the <code>codepage</code> option via the {{c|mount}} will override the settings used in the kernel.}}

{{KernelBox|title=FAT settings in kernel configuration|<pre>
File Systems -->
  DOS/FAT/NT Filesystems  -->
    (437) Default codepage for fat
</pre>
}}

Avoid setting <code>Default iocharset for fat</code> to UTF-8; it is not recommended. Instead, pass the <code>utf8=true</code> option when mounting FAT partitions. For further information {{c|man mount}} or see the appropriate kernel documentation at {{Path|/usr/src/linux/Documentation/filesystems/vfat.txt}}

For changing the encoding of filenames, {{Package|app-text/convmv}} can be used. 

{{Emerge|app-text/convmv}}

The format of the {{c|convmv}} command is as follows:

{{RootCmd|convmv -f <current-encoding> -t utf-8 <filename>}}

Substitute iso-8859-1 with the charset being converted from:

{{RootCmd|convmv -f iso-8859-1 -t utf-8 filename}}

For changing the ''contents'' of files, use the {{c|iconv}} utility, it comes bundled with {{Package|sys-libs/glibc}} and should be installed on all Gentoo systems. Substitute iso-8859-1 with the charset being converted from. After running the command be sure to check for sane output:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 filename}}

To convert a file, another file must be created:

{{RootCmd|iconv -f iso-8859-1 -t utf-8 filename > newfile}}

The recode ({{Package|app-text/recode}}) package can also be used for this purpose.

=== The system console ===

To enable UTF-8 on the console edit {{Path|/etc/rc.conf}}. Set <code>unicode="yes"</code> and read the comments -- it is important to have a font that has a good range of characters to make the most of Unicode. For this to work make sure the Unicode locale has been properly created. 

The <var>keymap</var> variable, set in {{Path|/etc/conf.d/keymaps}}, should have a Unicode keymap specified. 

{{CodeBox|title=Example /etc/conf.d/keymaps snippet|lang=bash|1=
## (Change "uk" to the right local layout)
keymap="uk"
}}

=== Ncurses et Slang ===

{{Note|Ignore any mention of Slang in this section if it is not installed or unneeded.}}

It is wise to add [https://packages.gentoo.org/useflags/unicode <code>unicode</code>] to the global [[USE flag]]s in {{Path|[[:/etc/portage/make.conf#USE|/etc/portage/make.conf]]}}, and then to re-emerge {{Package|sys-libs/ncurses}} and {{Package|sys-libs/slang}}. Portage will do this automatically if the <code>--changed-use</code> or <code>--newuse</code> options are used. Run the following command to pull in the packages: 

{{RootCmd|emerge --update --deep --newuse world}}

We also need to rebuild packages that link to these, now the USE changes have been applied. The tool we use ({{c|revdep-rebuild}}) is part of the {{Package|app-portage/gentoolkit}} package. 

{{RootCmd|revdep-rebuild --soname libncurses.so.5
|revdep-rebuild --soname libslang.so.1}}

=== KDE, GNOME, and Xfce ===

Tous les environnements de bureau majeurs prennent totalement en charge l'Unicode, et ne nécessitent pas d'autres étapes de configuration que celles décrites dans ce guide. Ceci est dû au fait que les boîtes à outils graphiques sous-jacentes  (Qt ou GTK+2) sont prédisposées UTF-8 et que, par conséquent, les applications qui s'appuient sur ces boîtes à outils le sont également dès l'installation. 

{{:Input_methods/key_sequence}}

Les exceptions à cette règle surviennent avec Xlib et GTK+1. GTK+1 requiert une spécification de police de caractères iso-10646-1 dans ~/.gtkrc, par exemple, <code>-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1</code>. C'est pourquoi, les applications utilisant Xlib ou Xaw doivent recevoir une spécification de police de caractères similaire ; autrement elles ne fonctionnent pas. 

{{Note|If an old gnome1 control center version is available, use that instead. Pick any iso10646-1 font from there.}}

{{CodeBox|title=Example ~/.gtkrc (for GTK+1) that defines a Unicode compatible font|1=
style "user-font"
{
    fontset="-misc-fixed-*-*-*-*-*-*-*-*-*-*-iso10646-1"
}
widget_class "*" style "user-font"
}}

Dans les applications qui prennent en charge les interfaces graphiques Qt et GTK+2, l'interface GTK+2 donnera en général de meilleurs résultats avec Unicode.

=== X11 and fonts ===

TrueType fonts have support for Unicode, and most of the fonts that ship with Xorg have extensive character support, although, obviously, not every single glyph available in Unicode has been created for that font. 

Also, many font packages in Portage are Unicode aware. See the [[Fontconfig]] page for more information on recommended fonts and configuration.

=== Window managers and terminal emulators ===

Window managers not built on GTK+ or Qt generally have very good Unicode support, as they often use the Xft library for handling fonts. If the window manager does not use Xft for fonts, then it is still possible to use the FontSpec mentioned in the previous section as a Unicode font. 

Terminal emulators that use Xft and support Unicode are harder to come by. Aside from Konsole and gnome-terminal, the best options in Portage are {{Package|x11-terms/rxvt-unicode}}, {{Package|x11-terms/xfce4-terminal}}, {{Package|gnustep-apps/terminal}}, {{Package|x11-terms/mlterm}}, or plain {{Package|x11-terms/xterm}} when built with the <code>unicode</code> USE flag and invoked as <code>uxterm</code>. {{Package|app-misc/screen}} supports UTF-8 too, when invoked as {{c|screen -U}} or the following is put into the {{Path|~/.screenrc}}: 

{{CodeBox|title=~/.screenrc for UTF-8|1=
defutf8 on
}}

=== Vim, emacs, xemacs, and nano ===

[[Vim#Change_file_encoding|Vim]] provides full UTF-8 support, and also has builtin detection of UTF-8 files. For further information in [[Vim#Change_file_encoding|Vim]], use <code>:help mbyte.txt</code>. 

[[GNU Emacs]] depuis la  version 23 et [[XEmacs]] version 21.5 prennent totalement en charge l'UTF-8. GNU Emacs 24 prend aussi en charge l'édition de textes bidirectionnels. 

Nano fournit une prise en charge totale de l'UTF-8 depuis la version 1.3.6.

=== Shells ===

Currently, {{c|[[bash]]}} provides full Unicode support through the GNU readline library. Z Shell ({{c|[[zsh]]}}) offers Unicode support with the <code>unicode</code> USE flag. 

The C shell, {{c|tcsh}} and {{c|ksh}} do not provide UTF-8 support at all.

=== Irssi ===

Irssi dispose d'une prise en charge totale de l'UTF-8, bien que cela nécessite la définition d'une option par l'utilisateur. 

{{Cmd|set term_charset UTF-8|prompt=[irssi] }}

For channels where non-ASCII characters are often exchanged in non-UTF-8 charsets, the {{c|/recode}} command may be used to convert the characters. Type {{c|/help recode}} for more information.

=== Mutt ===

The Mutt mail user agent has very good Unicode support. To use UTF-8 with Mutt, nothing needs to be put in the configuration files. Mutt will work under Unicode environment without modification if all the configuration files (signature included) are UTF-8 encoded. 

{{Note|It is still possible to see '?' in mails read with Mutt. This is a result of people using a mail client which does not indicate the used charset. There is little one can do about this than to ask them to configure their client correctly.}}

Une information complémentaire est disponible sur [http://wiki.mutt.org/index.cgi?MuttFaq/Charset Mutt Wiki] . 

=== Man ===

Man pages are an integral part of any Linux machine. To ensure that any unicode in the man pages render correctly, edit {{Path|/etc/man.conf}} and replace a line as shown below. This is only needed when {{Package|sys-apps/man}} is used instead of {{Package|sys-apps/man-db}}.

{{CodeBox|title=man.conf changes for Unicode support|1=
## (This is the old line)
NROFF           /usr/bin/nroff -Tascii -c -mandoc
## (Replace the one above with this)
NROFF           /usr/bin/nroff -mandoc -c
}}

=== links and elinks ===

These are commonly used text-based browsers, and we shall see how we can enable UTF-8 support on them. On {{c|elinks}} and {{c|links}}, there are two ways to go about this, one using the Setup option from within the browser or editing the config file. To set the option through the browser, open a site with {{c|elinks}} or {{c|links}} and then {{Key|Alt}}+{{Key|S}} to enter the Setup Menu then select Terminal options, or press {{Key|T}}. Scroll down and select the last option <code>UTF-8 I/O</code> by pressing {{Key|Enter}}. Then Save and exit the menu. On {{c|links}} one may have to do a repeat {{Key|Alt}}+{{Key|S}} and then press {{Key|S}} to save. The config file option, is shown below. 

{{CodeBox|title=Enabling UTF-8 for elinks/links|1=
## (For elinks, edit /etc/elinks/elinks.conf or ~/.elinks/elinks.conf and add the following line)
set terminal.linux.utf_8_io = 1
## (For links, edit ~/.links/links.cfg and add the following line)
terminal "xterm" 0 1 0 us-ascii utf-8
}}

=== Samba ===

Samba est une suite logicielle qui met en œuvre le protocole SMB (Server Message Block) pour les systèmes UNIX tels que les Macs, Linux et FreeBSD. Le protocole est aussi parfois appelé le Common Internet File System (CIFS). Samba inclut aussi le système NetBIOS - utilisé pour le partage de fichiers à travers des réseaux windows. 

Ajoutez ce qui suit sous la section [global] :
{{RootCmd|nano -w /etc/samba/smb.conf|output=<pre>
dos charset = 1255
unix charset = UTF-8
display charset = UTF-8
</pre>
}}

=== Test complet ===

There are numerous UTF-8 test websites around and most of the popular [https://packages.gentoo.org/categories/www-client browsers in Gentoo] have full UTF-8 support. 

When using one of the text-only web browsers, make absolutely sure a Unicode-aware terminal is used.

If certain characters are displayed as boxes with letters or numbers inside, then the current [[fonts|font]] does not have glyphs for those characters. Instead, it displays a box with the hex code of the UTF-8 symbol. 

* [http://unicode-table.com/en/ unicode-table.com]
* [http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html A W3C UTF-8 Test Page] 
* [http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm A UTF-8 test page provided by the University of Frankfurt]

== Reported issues and problems ==

=== System configuration files (in /etc) ===

Most system configuration files (such as {{Path|/etc/fstab}}) do not support UTF-8. It is recommended to stick with the ASCII character set for these files.

== External resources ==

* [https://en.wikipedia.org/wiki/Unicode The Wikipedia entry for Unicode] 
* [https://en.wikipedia.org/wiki/UTF-8 The Wikipedia entry for UTF-8] 
* [http://www.unicode.org Unicode.org] 
* [http://www.utf-8.com UTF-8.com] 
* [https://www.ietf.org/rfc/rfc3629.txt RFC 3629] 
* [https://www.ietf.org/rfc/rfc2277.txt RFC 2277] 
* [https://www.tbray.org/ongoing/When/200x/2003/04/26/UTF Characters vs. Bytes]
* [http://www.gnu.org/software/libc/manual/html_node/Locales.html The GNU C Library: Locales and Internationalization]
* [http://unifoundry.com/unicode-tutorial Unifoundry.com - Unicode Tutorial]
* [https://packages.gentoo.org/useflags/unicode unicode USE flag description]

[[Category:Localization]] {{Migrated|originalauthors=Thomas Martin, Alexander Simonov, Shyam Mani, nightmorph}}
