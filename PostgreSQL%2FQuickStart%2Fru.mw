<languages />


{{Metadata|abstract=Это краткая инструкция к PostgreSQL. Она охватывает установку PostgreSQL и ее конфигурацию. Она является дополнением к официальной документации, но не заменяет ее.}}

Это краткая инструкция к PostgreSQL. Она охватывает установку PostgreSQL и ее конфигурацию. Она является дополнением к официальной документации, но не заменяет ее.

== Введение ==

=== Краткое описание PostgreSQL ===

[http://www.postgresql.org PostgreSQL] - это свободная система управления реляционными базами данных (RDBMS, или СУРБД) с открытым исходным кодом. Она поддерживает такие вещи как транзакции, схемы и внешние ключи, и часто позиционируется как более строго соответствующая стандартам SQL и более безопасная, по умолчанию, чем любая другая база данных, коммерческая или иная. 

Посетите страницу [http://www.postgresql.org/about About] на postgresql.org для более подробной информации.

=== Что охватывает эта статья? ===

Эта статья проведет Вас через характерные для Gentoo шаги для установки СУРБД PostgreSQL. 

Ebuild-файлы, охватываемые этой статьей: [http://packages.gentoo.org/package/dev-db/postgresql-docs dev-db/postgresql-docs], [http://packages.gentoo.org/package/dev-db/postgresql-base dev-db/postgresql-base] и [http://packages.gentoo.org/package/dev-db/postgresql-server dev-db/postgresql-server] . 

В этой статье предполагается, что Вы будете устанавливать последнюю, стабильную версию PostgreSQL; на время написания, этой версией является 9.0.3. Исправьте команды в этой статье так, как это требуется для Вашей определенной версии. 

{{Important/ru|Ветвь 8.2 перестанет поддерживаться разработчиками самого пакета (upstream-ом) в декабре 2011. Начинайте планировать переход заранее.}}


=== О ebuild-файлах ===

Ebuild-файлы PostgreSQL в портеже отличаются номерами слотов, основанными на главной версии. Это позволяет Вам иметь две главных версии PostgreSQL действующих одновременно; библиотеки и сервера версий 8.4 и 9.0 могут устанавливаться и обслуживаться в одно и то же время. Это полезно в тех обстоятельствах, когда Вам нужно перенести данные из старой базы данных в новую, или требуется иметь рабочую и тестовую базу данных на одной и той же машине. Также, это предотвращает перезаписывание базы данных, соответствующих библиотек или исполняемых файлов несовместимым обновлением. Это требует миграции, которая описана в данном руководстве. 

Вдобавок, исправления багов и уязвимостей безопасности, которые поставляются через обновления младших версий, могут применяться без страха повреждения базы данных или самой сборки PostgreSQL; 9.0.2 может обновляться до 9.0.3, так как гарантируется их совместимость и они не требуют от Вас большего, чем установка и перезапуск серверного процесса. Ни миграция, ни повторная конфигурация, ни инициализация не являются необходимыми. 

За подробностями обратитесь к [http://www.postgresql.org/support/versioning PostgreSQL Versioning Policy] . 

=== Что эта статья не охватывает ===

Большая часть информации не будет описана. [http://www.postgresql.org/docs/ Официальная документация] находится где-то во окрестностях 2000 страниц. Поэтому, в этом кратком руководстве большинство подробностей будет пропущено. Будут описаны только проблемы, характерные для Gentoo, и некоторые основные рекомендации по конфигурации. 

== Установка ==

=== Устаревшие ebuild-файлы ===

Если у Вас установлены какие-либо из следующих ebuild-файлов, то у Вас устаревшая Gentoo-сборка PostgreSQL, и вы должны мигрировать сейчас: dev-db/postgresql-libs, dev-db/postgresql-client, dev-db/libpq и/или dev-db/postgresql. 

Эта статья описывает миграцию со старых ebuild-файлов к новым. 

=== USE-флаги ===

{| class="wikitable" style="text-align: left;" 
|- 
! USE-флаг
! Значение
|- 
| doc
| Включить [http://www.postgresql.org/docs/ документацию онлайн] для хранения на Вашей системе
|- 
| kerberos
| Поддержка использования Kerberos для аутентификации.
|- 
| ldap
| Поддержка использования аутентификации LDAP поиска параметра соединения (connection parameter lookup).
|- 
| nls
| Включить возможность отображения сообщений на языке, отличном от Английского. Используется в связке с переменной Portage LINGUAS.
|- 
| pam
| Поддержка использования Подключаемых Модулей Аутентификации (PAM) для аутентификации.
|- 
| perl
| Включение поддержки использования Perl для написания функций и триггеров.
|- 
| pg-intdatetime (Deprecated)
| Использование более нового 64-битного целочисленного метода с высоким разрешением для форматирования временных меток (timestamps) вместо более старого метода с плавающей запятой. Если Вы только не имели предыдущую сборку, которая использовала устаревший метод, оставьте это включенным. (См. заметку.)
|- 
| pg_legacytimestamp
| Использование более старого, метода с плавающей запятой для форматирования временных меток вместо 64-битного целочисленного метода с высоким разрешением. Если только Вы не имели предыдующую сборку, которая использовала этот устаревший метод, оставьте этот USE-флаг отключенным. (См. заметку.)
|- 
| python
| Включение поддержки использования Python для написания функций и триггеров.
|- 
| readline
| Вы на самом деле хотите это включить. Отключение уберет редактирование в командной строке и историю в psql.
|- 
| selinux
| Установить подходящую политику безопасности SELinux. Это может быть включено только использованием профиля SELinux.
|- 
| ssl
| Включение поддержки SSL-соединений.
|- 
| tcl
| Включение поддержки использования Tcl для написания функций и триггеров.
|- 
| threads
| Сделать клиентские библиотеки потокобезопасными. Остальная часть системы должна быть также потокобезопасной.
|- 
| uuid
| Включение поддержки генерации 128-битного случайного уникального идентификатора. Это полезно для слияния баз данных вместе, чтобы вероятности коллизий стали чрезвычайно малы.
|- 
| xml
| Включение поддержки SQL/XML.
|- 
| zlib
| Поддержка сжатых архивов в pg_dump and pg_restore.
|-
|}

{{Note/ru|Переключение 'pg-intdatetime' или 'pg_legacytimestamp' потребует, чтобы Вы сделали дамп и восстановление, если какие-нибудь из Ваших баз данных используют метки времени (англ. timestamps). Два этих способа несовместимы друг с другом.}}

=== Начало Установки ===

{{Emerge|dev-db/postgresql-server|output=<pre>
[ebuild N ] dev-db/postgresql-docs-9.0.3 0 kB
[ebuild N ]dev-db/postgresql-base-9.0.3 USE="doc nls pam readline ssl zlib
  -kerberos -ldap -pg_legacytimestamp -threads" LINGUAS="-af -cs -de -es -fa -fr
  -hr -hu -it -ko -nb -pl -pt_BR -ro -ru -sk -sl -sv -tr -zh_CN -zh_TW" 0 kB
[ebuild N ] dev-db/postgresql-server-9.0.3 USE="doc nls perl python
  -pg_legacytimestamp (-selinux) -tcl -uuid -xml" LINGUAS="-af -cs -de -es -fa
  -fr -hr -hu -it -ko -nb -pl -pt_BR -ro -ru -sk -sl -sv -tr -zh_CN -zh_TW" 0 kB
</pre>
}}

Вы можете получить уведомление по поводу того, что какие-либо их вышеперечисленных пакетов заблокированы одним или всеми из следующих пакетов: dev-db/postgresql-libs, dev-db/postgresql-client, dev-db/libpq или dev-db/postgresql. Эти пакеты '''не поддерживаются''' и являются устаревшими. Обратитесь к разделу по миграции с предыдущих ebuild-файлов к новым чтобы узнать как справиться с этой ситуацией. 

=== Подготовка к Инициализации Кластера Баз Данных ===

Как только пакеты завершили установку, Вы можете пожелать отредактировать {{Path|/etc/conf.d/postgresql-9.0}} . Существуют три строки, которые затрагивают значения сервера по умолчанию и '''не могут''' быть изменены позже без удаления каталога, который содержит кластер базы данных и повторной инициализации. 

''PGDATA'' определяет где размещать файлы настроек. ''DATA_DIR'' определяет где создавать кластер базы данных и сопутствующие файлы. ''PG_INITDB_OPTS'' может хранить [http://www.postgresql.org/docs/current/static/app-initdb.html любые дополнительные параметры], которые Вы можете пожелать установить. Установка дополнительных параметров '''не''' требуется, так как разумные значения по умолчанию, кхм, разумны. 

В следующем примере, ''PGDATA'' определяет, что файлы настроек должны быть расположены в {{Path|/etc/postgresql-9.0/}} . ''DATA_DIR'' определяет, что кластер базы данных должен быть установлен в {{Path|/var/lib/postgresql/9.0/data/}} , который является каталогом по умолчанию. Если Вы решите отклониться от значений по умолчанию, держите в уме, что '''очень хорошей идеей''' будет хранить номер старшей версии в пути. ''PG_INITDB_OPTS'' определяет, что локалью по умолчанию должна быть ''en_US.UTF-8'' . То есть, U.S. English упорядочивание и форматирование, и кодировка символов UTF-8. 

{{File|/etc/conf.d/postgresql-9.0|Example content|<pre>
# Размещение файлов конфигурации
PGDATA="/etc/postgresql-9.0/"
  
# Где размещается/должен быть создан каталог с данными
DATA_DIR="/var/lib/postgresql/9.0/data"
  
# Дополнительные параметры для передачи в initdb.
# См. 'man initdb' для перечисления доступных параметров.
PG_INITDB_OPTS="--locale=en_US.UTF-8"
</pre>
}}


{{Note/ru|Это только определяет локаль и кодировку символов по умолчанию. Вы можете указать разные локали и/или кодировки символов во время создания базы данных (<code>CREATE DATABASE</code> ) в одном и том же кластере базы данных.}}

Существуют шесть параметров локали, которые могут быть установлены для переопределения ''--locale='' . Следующая таблица перечисляет шесть этих параметров, которые, если используются, должны быть отформатированы как: <code>--option=lo_LO.ENCODING</code>. 

{| class="wikitable" style="text-align: left;" 
|- 
! Параметр
! Действия
|- 
| lc-collate
| Порядок сортировки строк
|- 
| lc-ctype
| Классификация символов (Что является буквой? Ее эквивалент в верхнем регистре?)
|- 
| lc-messages
| Язык сообщений
|- 
| lc-monetary
| Форматирование количеств денежных сумм
|- 
| lc-numeric
| Форматирование чисел
|- 
| lc-time
| Форматирование даты и времени
|-j
|}

Таким образом, если Вы хотите в качестве языка по умолчанию взять Английский, но сообщения должны быть, скажем, на Шведском, то Ваши ''PG_INITDB_OPTS'' будут выглядеть так:

{{Code|Установка PG_INITDB_OPTS|<pre>
PG_INITDB_OPTS="--locale=en_US.UTF-8 --lc-messages=sv_SE.UTF-8"
</pre>
}}

Полный список кодировок языков и символов, поддерживаемых сервером, может быть найден в документации, но Ваша система также должна поддерживать соответственные языки и кодировки символов. Сравните вывод <code>locale -a</code> с [http://www.postgresql.org/docs/current/static/multibyte.html кодировками] в документации. 

Вы можете изменить Ваши локаль и набор кодировок во [http://www.postgresql.org/docs/currrent/static/sql-createdatabase.html время создания базы данных.] Для того, чтобы изменить локаль для базы данных после того, как Вы ее создали, Вы должны удалить базу данных и начать все сначала. 

{{RootCmd|emerge --config dev-db/postgresql-server:9.0}}

Это создаст кластер базы данных и сохранит все принадлежащие серверу файлы в ''PGDATA'' и ''DATA_DIR'' . 

== Конфигурация ==

=== Где размещаются файлы конфигурации ===

На этот раз мы сосредоточимся на файлах в каталоге ''PGDATA'', {{Path|/etc/postgresql-9.0}}, с основным фокусом на файлах {{Path|postgresql.conf}} и {{Path|pg_hba.conf}}. 

=== postgresql.conf ===

Это основной файл конфигурации. Строкой, которая может немедленно показаться Вам интересной, является ''listen-addresses''. Эта переменная определяет к каким адресам PostgreSQL будет осуществлять привязку. По умолчанию, привязаны только localhost и доменный сокет Unix. Изменения ''listen_addresses'' недостаточно для разрешения удаленных соединений. Это будет описано в следующем разделе. [http://www.postgresql.org/docs/current/static/runtime-config.html Официальная документация] довольно легка для понимания и всесторонне охватывает все доступные настройки. Вам следует прочесть ее в дополнение к тому что описано здесь, так как некоторые вещи могут измениться. 

Второстепенным вопросом является место назначения логирования. По умолчанию, все пишется в {{Path|postmaster.log}} в каталоге ''DATA_DIR''. Имеется целый подраздел {{Path|postgresql.conf}}, который охватывает большое количество вариантов того как, что и куда нужно логировать. Подраздел обозначен как: ERROR REPORTING AND LOGGING. 

Кроме ''listen_addresses'' и параметров логирования, остальная часть значений по умолчанию в {{Path|postgresql.conf}} довольно приемлема для начала. 

=== pg_hba.conf ===

The {{Path|pg_hba.conf}} file states who is allowed to connect to the database server and which authentication method must be used to establish the connection. Again, the documentation is quite exhaustive on the settings and what they all mean, but a few things are covered here for clarification. 

{{File|pg_hba.conf|Настройки по умолчанию|<pre>
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
  
# "local" - только для соединений с доменного сокета Unix
local   all         all                               trust
# локальные соединения IPv4:
host    all         all         127.0.0.1/32          trust
# Локальные соединения IPv6:
host    all         all         ::1/128               trust
</pre>
}}

As has been mentioned before, by default the server is secure. Kind of. There is only one database role that is available for log in by default: ''postgres'' . And, the only way to initiate a connection to the database is through the {{Path|/var/run/postgresql/.s.PGSQL.5432}} Unix socket, which is owned by the ''postgres'' system user and system group, or via localhost. Now for the "kind of" bit: Any user on the system can make a connection to the database through the localhost. Even as the ''postgres'' database superuser. 

To make a connection through the Unix socket, however, the users including the users for other services such as ''apache'' must be in the ''postgres'' system group. Use <code>gpasswd -a ''user'' postgres</code> to add ''user'' to the ''postgres'' group. Users not in the ''postgres'' group will be rejected with "Permission denied". 

{{Warning|Never disable the Unix socket entirely. The initscripts require access to it in order to operate properly. The method can be changed freely.}}

The ''trust'' method is what allows any user to log on as any user without a password. It specifies just what it implies: Trust all connections for the given type to the given database from the given database user (but not the system user) from the given location without a password. This is what allows any user on the system to log on as any user through the localhost connection from the get go. This is not as dangerous as it seems, but does pose a serious security risk in most circumstances. 

The two methods you will most likely use are: ''password'' and ''md5'' . The password method only specifies that a password is required to start the connection and the password is sent "in-the-clear". This method is fine when such information will never leave the machine, such as connecting via the Unix socket or localhost. The md5 method is like password, but protects the password by using an md5 hash. This is what you want to use whenever the password is going to traverse a network. 

At this point, this author would like to bring your attention to the last two lines, four lines including comments, of the {{Path|pg_hba.conf}} file. PostgreSQL has native support for IPv6 regardless of your desires for such support. Additionally, IPv4 addresses are automatically mapped to IPv6 addresses, ''i.e.'' , 127.0.0.1 will be mapped to ::FFFF:127.0.0.1 and as "pure" IPv6 ::FFFF:7F00:0001. 

There seems to be some misunderstanding, though, as to how host names are mapped to IP addresses. Let us take a look at the {{Path|/etc/hosts}} file. 

{{File|/etc/hosts||<pre>
# IPv4 and IPv6 localhost aliases
127.0.0.1       localhost
::1             localhost
</pre>
}}

From the example above you can see that both an IPv4 and an IPv6 IP address are mapped to localhost. When <code>psql</code> refers to this file, it will grab the first match and use that as the address; in this case 127.0.0.1. When PostgreSQL parses this, it will match the IPv6 formatted address as well, e.g. ::ffff:127.0.0.1. If, however, the IPv6 address appears first, then <code>psql</code> will map to ::1 alone; ::1 is not the same as ::ffff:127.0.0.1. As such, if you do not have ::1 as a permitted means of access, <code>psql</code> will not be able to establish a connection. Furthermore, your kernel needs to support the IPv6 protocol. 

So, it is better to specify IP addresses alone to <code>psql</code> and in {{Path|pg_hba.conf}} rather than to rely on {{Path|/etc/hosts}} to be ordered properly, and it removes any doubt as to which IP addresses are allowed or to which server you will connect. 

== Starting the Server ==

=== Give It a Go! ===

Now start PostgreSQL and set the password for the database superuser ''postgres'' . The commands are to be performed as 'root' in the following code listing: 

Change 'trust' to 'password' for the localhost connections.

{{RootCmd|nano -w /etc/postgresql-9.0/pg_hba.conf}}

Now start the database:

{{RootCmd|/etc/init.d/postgresql-9.0 start|output=<pre>
postgresql-9.0  | * Starting PostgreSQL ...                             [ ok ]
</pre>}}

Open a connection to the server and set the password:

{{RootCmd|psql -U postgres|output=<pre>
psql (9.0.3)
Type "help" for help.
</pre>}}

{{Cmd|\password|prompt=postgres{{=}}# |output=<pre>
Enter new password:
Enter it again:
</pre>}}

{{Cmd|\q|prompt=postgres{{=}}# }}

Change 'trust' to 'password' for the local connection:

{{RootCmd|nano -w /etc/postgresql-9.0/pg_hba.conf}}

Now restart the database:

{{RootCmd|/etc/init.d/postgresql-9.0 reload|output=<pre>
postgresql-9.0 | * Reloading PostgreSQL configuration ...               [ ok ]
# rc-update add postgresql-9.0 default
 * service postgresql-9.0 added to runlevel default
</pre>
}}

At this point you are ready to continue on with the official [http://www.postgresql.org/docs/current/static/tutorial.html PostgreSQL Tutorial] . The tutorial will guide you through creating roles, databases, schemata and all that fun and useful stuff. 

== Migrating PostgreSQL ==

=== When You Need to Migrate ===

There are only two reasons you would need to perform a migration: When moving from one major version to another, ''e.g.'' , from PostgreSQL 8.4.7 to 9.0.3, but not from 9.0.2 to 9.0.3; or when switching from the deprecated floating-point timestamp format to the new 64-bit integer timestamp format. 

{{Note|You will need to migrate your database when you move from the obsolete ebuilds dev-db/libpq, dev-db/postgresql, dev-db/postgresql-libs, and dev-db/postgresql-client to the new ebuilds dev-db/postgresql-docs, dev-db/postgresql-base and dev-db/postgresql-server.}}


=== Post-9.0 Migration ===

''pg_upgrade'' , a new utility that comes along with 9.0 and later, simplifies the migration process rather drastically. 

However, there are two caveats with using pg_upgrade. Firstly, it does not support configuration files being in a different directory than where the data is stored. This can be resolved by using symbolic links. Lastly, you can only use it to migrate from a database from 8.3 or newer. If you have an older database you will need to follow the instructions to migrate from pre-9.0 deployments.

Stop the servers you're going to migrate from and to:

{{RootCmd|/etc/init.d/postgresql-8.4 stop
|/etc/init.d/postgresql-9.0 stop
|ln -s /etc/postgresql-8.4/*.conf /var/lib/postgresql/8.4/data/
|ln -s /etc/postgresql-9.0/*.conf /var/lib/postgresql/9.0/data/}}

Check available versions, then select yours:

{{RootCmd|eselect postgresql list
|eselect postgresql set 9.0}}

Change the method of database user 'postgres' to trust on local connections on all databases:

{{RootCmd|nano -w /etc/postgresql-8.4/pg_hba.conf
|nano -w /etc/postgresql-9.0/pg_hba.conf}}

You may need to change the permissions of '/var/lib/postgresql/' before you perform the next step.

{{RootCmd|su - postgres}}

{{Cmd|pg_upgrade -u postgres \
-d /var/lib/postgresql/8.4/data -D /var/lib/postgresql/9.0/data \
-b /usr/lib/postgresql-8.4/bin -B /usr/lib/postgresql-9.0/bin}}

Perform the tasks pg_upgrade tells you to do , if any.

{{Cmd|logout}}

Remove the symbolic links  we created earlier:

{{RootCmd|rm /var/lib/postgresql/8.4/data/*.conf
|rm /var/lib/postgresql/9.0/data/*.conf
|/etc/init.d/postgresql-9.0 start}}

=== Pre-9.0 Migration: With the New Ebuilds ===

Because the new ebuilds feature a more advanced slotting method than the previous ones, the downtime is quite minimal, most likely minutes rather than hours. 

In the following examples, it is assumed that you are using the default locations and port settings, and that you are migrating from 8.3 to 8.4. Adjust accordingly if you have deviated from the default. 

If you have not already done so, follow the installation instructions before starting the migration. Such a compile may hamper performance on the database server but it can keep going. 

A couple of files need to be tweaked before beginning the migration. Edit ''PGPORT'' in the {{Path|/etc/conf.d/postgresql-8.4}} configuration file to 6543. (Any port number other than what your old installation is bound to will do.) 

Next, edit {{Path|/etc/postgresql-8.3/pg_hba.conf}} so that only the database superuser ''postgres'' can access the database cluster via the Unix socket. 

{{RootCmd|cp -p /etc/postgresql-8.3/pg_hba.conf /etc/postgresql-8.4/}}

The following should be safe. Read the documentation to be sure.

{{RootCmd|cp -p /etc/postgresql-8.3/postgresql.conf /etc/postgresql-8.4/}}

Don't forget to copy over any other configuration files that you may need.

{{RootCmd|/etc/init.d/postgresql-8.3 reload
|/etc/init.d/postgresql-8.4 start}}

Begin piping the data from the old cluster to the new cluster.

{{RootCmd|pg_dumpall -U postgres -p 5432 {{!}} psql -U postgres -d postgres -p 6543
|/etc/init.d/postgresql-8.3 stop
|/etc/init.d/postgresql-8.4 stop}}

Edit PGPORT back to 5432.

{{RootCmd|nano -w /etc/conf.d/postgresql-8.4}}

Allow users access once more.

{{RootCmd|nano -w /etc/postgresql-8.4/pg_hba.conf
|/etc/init.d/postgresql-8.4 start
|rc-update del postgresql-8.3 && rc-update add postgresql-8.4 default}}

Hopefully everything went according to plan and you have a successfully updated server that contains precisely the same data, bit for bit, as the old server. 

=== Pre-9.0 Migration: From the Obsolete Ebuilds ===

You will need to schedule some downtime for your server. The old ebuilds '''cannot''' be installed at the same time as the new ebuilds. As such, assume that the server will have to be down for a few hours. Maybe for the weekend, even. 

Before starting, you will need to deny access to the server, so that no changes are made. You may also want to backup your {{Path|postgresql.conf}} and {{Path|pg_hba.conf}} and any other configuration file that you deem important. 

{{RootCmd|pg_dumpall -U postgres > backup_file
|/etc/init.d/postgresql stop
|emerge -C dev-db/postgresql dev-db/libpq dev-db/postgresql-client dev-db/postgresql-client}}

Follow the steps detailed in this article for installing and configuring the server.

{{RootCmd|/etc/init.d/postgresql-8.4 start
|psql -f backup_file postgres}}

You may break some packages that were built against those packages, but once you have installed dev-db/postgresql-base and/or dev-db/postgresql-server you can run <code>revdep-rebuild</code> to reemerge any packages that may have been broken. 

== Utilities ==

=== pgAdmin III ===

[http://www.pgadmin.org/ pgAdmin III] is a graphical utility for managing PostgreSQL. 

== Troubleshooting ==

=== Server Lacks Instrumentation Functions ===

This problem is easy to solve, with the solution depending on the version you are using. What is difficult about it is finding the answer. What is required is an import from a file that already exists on the storage drive: {{Path|adminpack.sql}} . To resolve this issue, run the command appropriate to the version you have: 

{{Cmd|psql -U postgres --file /usr/share/postgresql-9.0/contrib/adminpack.sql
|psql -U postgres -c "CREATE EXTENSION adminpack;"}}

== Acknowledgements ==

We would like to thank the following authors and editors for their contributions to this guide:


* Aaron W. Swenson
* Mikkel A. Clausen

[[Category:Database]]
