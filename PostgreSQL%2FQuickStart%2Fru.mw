<languages />


{{Metadata|abstract=Это краткая инструкция к PostgreSQL. Она охватывает установку PostgreSQL и ее конфигурацию. Она является дополнением к официальной документации, но не заменяет ее.}}

Это краткая инструкция к PostgreSQL. Она охватывает установку PostgreSQL и ее конфигурацию. Она является дополнением к официальной документации, но не заменяет ее.

== Введение ==

=== Краткое описание PostgreSQL ===

[http://www.postgresql.org PostgreSQL] — это свободная система управления реляционными базами данных (RDBMS, или СУРБД) с открытым исходным кодом. Она поддерживает такие вещи как транзакции, схемы и внешние ключи, и часто позиционируется как более строго соответствующая стандартам SQL и более безопасная, по умолчанию, чем любая другая база данных, коммерческая или иная. 

Посетите страницу [http://www.postgresql.org/about About] на postgresql.org для более подробной информации.

=== Что охватывает эта статья? ===

Эта статья проведет Вас через специфичные для Gentoo шаги по установке СУРБД PostgreSQL. 

Ebuild-файлы, охватываемые этой статьей: [http://packages.gentoo.org/package/dev-db/postgresql-docs dev-db/postgresql-docs], [http://packages.gentoo.org/package/dev-db/postgresql-base dev-db/postgresql-base] и [http://packages.gentoo.org/package/dev-db/postgresql-server dev-db/postgresql-server] . 

В этой статье предполагается, что Вы будете устанавливать последнюю, стабильную версию PostgreSQL; на время написания, этой версией является 9.0.3. Исправьте команды в этой статье так, как это требуется для Вашей определенной версии. 

{{Important/ru|Ветвь 8.4 перестанет поддерживаться разработчиками самого пакета (upstream-ом) в июле 2014. Начинайте планировать переход заранее.}}


=== О ebuild-файлах ===

Ebuild-файлы PostgreSQL в портеже отличаются номерами слотов, основанными на главной версии. Это позволяет Вам иметь две главных версии PostgreSQL действующих одновременно; библиотеки и сервера версий 8.4 и 9.0 могут устанавливаться и обслуживаться в одно и то же время. Это полезно в тех обстоятельствах, когда Вам нужно перенести данные из старой базы данных в новую, или требуется иметь рабочую и тестовую базу данных на одной и той же машине. Также, это предотвращает перезаписывание базы данных, соответствующих библиотек или исполняемых файлов несовместимым обновлением. Это требует миграции, которая описана в данном руководстве. 

Вдобавок, исправления багов и уязвимостей безопасности, которые поставляются через обновления младших версий, могут применяться без страха повреждения базы данных или самой сборки PostgreSQL; 9.0.2 может обновляться до 9.0.3, так как гарантируется их совместимость и они не требуют от Вас большего, чем установка и перезапуск серверного процесса. Ни миграция, ни повторная конфигурация, ни инициализация не являются необходимыми. 

За подробностями обратитесь к [http://www.postgresql.org/support/versioning PostgreSQL Versioning Policy] . 

=== Что эта статья не охватывает ===

Большая часть информации не будет описана. [http://www.postgresql.org/docs/ Официальная документация] находится где-то во окрестностях 2000 страниц. Поэтому в этом кратком руководстве большинство подробностей будет пропущено. Будут описаны только проблемы характерные для Gentoo и некоторые основные рекомендации по конфигурации. 

== Установка ==

=== Устаревшие ebuild-файлы ===

Если у Вас установлены какие-либо из следующих ebuild-файлов, то у Вас устаревшая Gentoo-сборка PostgreSQL, и вы должны мигрировать сейчас: dev-db/postgresql-libs, dev-db/postgresql-client, dev-db/libpq и/или dev-db/postgresql. 

Эта статья описывает миграцию со старых ebuild-файлов к новым. 

=== USE-флаги ===

{| class="wikitable" style="text-align: left;" 
|- 
! USE-флаг
! Значение
|- 
| doc
| Включить [http://www.postgresql.org/docs/ документацию онлайн] для хранения на Вашей системе
|- 
| kerberos
| Поддержка использования Kerberos для аутентификации.
|- 
| ldap
| Поддержка использования аутентификации LDAP и поиска параметра соединения (connection parameter lookup).
|- 
| nls
| Включить возможность отображения сообщений на языке, отличном от Английского. Используется в связке с переменной Portage LINGUAS.
|- 
| pam
| Поддержка использования Подключаемых Модулей Аутентификации (PAM) для аутентификации.
|- 
| perl
| Включение поддержки использования Perl для написания функций и триггеров.
|- 
| pg-intdatetime (Deprecated)
| Использование более нового 64-битного целочисленного метода с высокой точностью для форматирования временных меток (timestamps) вместо более старого метода с плавающей запятой. Если Вы только не имели предыдущую сборку, которая использовала устаревший метод, оставьте это включенным. (См. заметку.)
|- 
| pg_legacytimestamp
| Использование более старого метода с плавающей запятой для форматирования временных меток вместо 64-битного целочисленного метода с высокой точностью. Если только Вы не имели предыдующую сборку, которая использовала этот устаревший метод, оставьте этот USE-флаг отключенным. (См. заметку.)
|- 
| python
| Включение поддержки использования Python для написания функций и триггеров.
|- 
| readline
| Вы на самом деле хотите это включить. Отключение уберет редактирование в командной строке и историю в psql.
|- 
| selinux
| Установить подходящую политику безопасности SELinux. Это может быть включено только использованием профиля SELinux.
|- 
| ssl
| Включение поддержки SSL-соединений.
|- 
| tcl
| Включение поддержки использования Tcl для написания функций и триггеров.
|- 
| threads
| Сделать клиентские библиотеки потокобезопасными. Остальная часть системы должна быть также потокобезопасной.
|- 
| uuid
| Включение поддержки генерации 128-битного случайного уникального идентификатора. Это полезно для слияния баз данных вместе, чтобы вероятности коллизий стали чрезвычайно малы.
|- 
| xml
| Включение поддержки SQL/XML.
|- 
| zlib
| Поддержка сжатых архивов в pg_dump и pg_restore.
|-
|}

{{Note/ru|Переключение 'pg-intdatetime' или 'pg_legacytimestamp' потребует чтобы Вы сделали дамп и восстановление, если какие-нибудь из Ваших баз данных используют временные метки (англ. timestamps). Два этих способа несовместимы друг с другом.}}

=== Начало установки ===

{{Emerge|dev-db/postgresql-server|output=<pre>
[ebuild N ] dev-db/postgresql-docs-9.0.3 0 kB
[ebuild N ]dev-db/postgresql-base-9.0.3 USE="doc nls pam readline ssl zlib
  -kerberos -ldap -pg_legacytimestamp -threads" LINGUAS="-af -cs -de -es -fa -fr
  -hr -hu -it -ko -nb -pl -pt_BR -ro -ru -sk -sl -sv -tr -zh_CN -zh_TW" 0 kB
[ebuild N ] dev-db/postgresql-server-9.0.3 USE="doc nls perl python
  -pg_legacytimestamp (-selinux) -tcl -uuid -xml" LINGUAS="-af -cs -de -es -fa
  -fr -hr -hu -it -ko -nb -pl -pt_BR -ro -ru -sk -sl -sv -tr -zh_CN -zh_TW" 0 kB
</pre>
}}

Вы можете получить уведомление по поводу того, что какие-либо из вышеперечисленных пакетов заблокированы одним или всеми из следующих пакетов: dev-db/postgresql-libs, dev-db/postgresql-client, dev-db/libpq или dev-db/postgresql. Эти пакеты '''не поддерживаются''' и являются устаревшими. Обратитесь к разделу по миграции с предыдущих ebuild-файлов к новым чтобы узнать как справиться с этой ситуацией. 

=== Подготовка к инициализации кластера баз данных ===

Как только пакеты завершили установку, Вы можете пожелать отредактировать {{Path|/etc/conf.d/postgresql-9.0}} . Существуют три строки, которые затрагивают значения сервера по умолчанию и '''не могут''' быть изменены позже без удаления каталога, который содержит кластер базы данных, и повторной инициализации. 

''PGDATA'' определяет где размещать файлы настроек. ''DATA_DIR'' определяет где создавать кластер базы данных и сопутствующие файлы. ''PG_INITDB_OPTS'' может хранить [http://www.postgresql.org/docs/current/static/app-initdb.html любые дополнительные параметры], которые Вы можете пожелать установить. Установка дополнительных параметров '''не''' требуется, так как разумные значения по умолчанию, кхм, разумны. 

В следующем примере, ''PGDATA'' определяет что файлы настроек должны быть расположены в {{Path|/etc/postgresql-9.0/}} . ''DATA_DIR'' определяет, что кластер базы данных должен быть установлен в {{Path|/var/lib/postgresql/9.0/data/}} , который является каталогом по умолчанию. Если Вы решите отклониться от значений по умолчанию, держите в уме, что '''очень хорошей идеей''' будет хранить номер старшей версии в пути. ''PG_INITDB_OPTS'' определяет, что локалью по умолчанию должна быть ''en_US.UTF-8'' . То есть, U.S. English упорядочивание и форматирование, и кодировка символов UTF-8. 

{{File|/etc/conf.d/postgresql-9.0|Примерное содержимое|<pre>
# Размещение файлов конфигурации
PGDATA="/etc/postgresql-9.0/"
  
# Где размещается/должен быть создан каталог с данными
DATA_DIR="/var/lib/postgresql/9.0/data"
  
# Дополнительные параметры для передачи в initdb.
# См. 'man initdb' для перечисления доступных параметров.
PG_INITDB_OPTS="--locale=en_US.UTF-8"
</pre>
}}


{{Note/ru|Это только определяет локаль и кодировку символов по умолчанию. Вы можете указать разные локали и/или кодировки символов во время создания базы данных (<code>CREATE DATABASE</code> ) в одном и том же кластере базы данных.}}

Существуют шесть параметров локали, которые могут быть установлены для переопределения ''--locale='' . Следующая таблица перечисляет шесть этих параметров, которые, если используются, должны быть отформатированы как: <code>--option=lo_LO.ENCODING</code>. 

{| class="wikitable" style="text-align: left;" 
|- 
! Параметр
! Действия
|- 
| lc-collate
| Порядок сортировки строк
|- 
| lc-ctype
| Классификация символов (Что является буквой? Ее эквивалент в верхнем регистре?)
|- 
| lc-messages
| Язык сообщений
|- 
| lc-monetary
| Форматирование количеств денежных сумм
|- 
| lc-numeric
| Форматирование чисел
|- 
| lc-time
| Форматирование даты и времени
|-
|}

Таким образом, если Вы хотите в качестве языка по умолчанию взять английский, но сообщения должны быть на русском, то Ваши ''PG_INITDB_OPTS'' будут выглядеть так:

{{Code|Установка PG_INITDB_OPTS|<pre>
PG_INITDB_OPTS="--locale=en_US.UTF-8 --lc-messages=ru_RU.UTF-8"
</pre>
}}

Полный список кодировок языков и символов, поддерживаемых сервером, может быть найден в документации, но и Ваша система также должна поддерживать соответственные языки и кодировки символов. Сравните вывод <code>locale -a</code> с [http://www.postgresql.org/docs/current/static/multibyte.html кодировками] в документации. 

Вы можете изменить Ваши локаль и набор кодировок во [http://www.postgresql.org/docs/currrent/static/sql-createdatabase.html время создания базы данных.] Для того, чтобы изменить локаль для базы данных после того, как Вы ее создали, Вы должны удалить базу данных и начать все сначала. 

{{RootCmd|emerge --config dev-db/postgresql-server:9.0}}

Это создаст кластер базы данных и сохранит все принадлежащие серверу файлы в ''PGDATA'' и ''DATA_DIR'' . 

== Конфигурация ==

=== Где размещаются файлы конфигурации ===

На этот раз мы сосредоточимся на файлах в каталоге ''PGDATA'', {{Path|/etc/postgresql-9.0}}, с основным фокусом на файлах {{Path|postgresql.conf}} и {{Path|pg_hba.conf}}. 

=== postgresql.conf ===

Это основной файл конфигурации. Строкой, которая немедленно может Вас заинтересовать, является ''listen-addresses''. Эта переменная определяет к каким адресам PostgreSQL будет осуществлять привязку. По умолчанию, привязаны только localhost и доменный сокет Unix. Изменения ''listen_addresses'' недостаточно для разрешения удаленных соединений. Это будет описано в следующем разделе. [http://www.postgresql.org/docs/current/static/runtime-config.html Официальная документация] довольно легка для понимания и всесторонне охватывает все доступные настройки. Вам следует прочесть ее в дополнение к тому что описано здесь, так как некоторые вещи могут измениться. 

Второстепенным вопросом является место назначения логирования. По умолчанию, все пишется в {{Path|postmaster.log}} в каталоге ''DATA_DIR''. Имеется целый подраздел {{Path|postgresql.conf}}, который охватывает большое количество вариантов того как, что и куда нужно логировать. Подраздел обозначен как: ERROR REPORTING AND LOGGING. 

Кроме ''listen_addresses'' и параметров логирования, остальная часть значений по умолчанию в {{Path|postgresql.conf}} довольно приемлема для начала. 

=== pg_hba.conf ===

Файл {{Path|pg_hba.conf}} определяет кому разрешается подключаться к серверу баз данных и какой метод аутентификации должен быть использован для установки соединения. Опять же, документация по настройкам и тому что они означают является довольно исчерпывающей, но несколько вещей здесь описаны для разъяснения. 

{{File|pg_hba.conf|Настройки по умолчанию|<pre>
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
  
# "local" - только для соединений с доменного сокета Unix
local   all         all                               trust
# локальные соединения IPv4:
host    all         all         127.0.0.1/32          trust
# Локальные соединения IPv6:
host    all         all         ::1/128               trust
</pre>
}}

Как было упомянуто ранее, сервер по умолчанию сконфигурирован безопасно. В своем роде. Существует только одна роль базы данных, которая доступна для входа по умолчанию: ''postgres''. И только одним способом инициировать соединение к базе данных является соединение через сокет Unix {{Path|/var/run/postgresql/.s.PGSQL.5432}}, который принадлежит системному пользователю и группе ''postgres'', или установка соединения через localhost. Теперь вернемся к ''в своем роде''. Любой пользователь системы может подсоединиться к базе данных через localhost. Даже в качестве суперпользователя базы данных ''postgres''. 

Однако же, чтобы подсоединиться через доменный сокет Unix, пользователи, включая пользователей других служб, таких как ''apache'', должны принадлежать системной группе ''postgres''.  Используйте <code>gpasswd -a ''user'' postgres</code>, чтобы добавить ''user'' в группу ''postgres''. Пользователи, которые не входят в группу ''postgres'', будут отклонены сообщением ''Permission denied''. 

{{Warning/ru|Никогда не отключайте доменный сокет Unix полностью. Сценарии инициализации требуют к нему доступ, чтобы функционировать должным образом. Этот метод может быть свободно изменен.}}

Метод ''trust'' - это то, что позволяет любому пользователю входить от имени любого пользователя без пароля. Он обозначает только то, что он подразумевает: доверять всем соединениям для определенного типа к определенной базе данных от определенного пользователя базы данных (но не системного пользователя) из определенного местонахождения без пароля. Это то, что изначально позволяет любому пользователю системы входить от имени любого пользователя через соединение localhost. Это не настолько опасно, как кажется, но представляет серьезный риск для безопасности в большинстве обстоятельств. 

Два метода, которые Вы наиболее вероятно будете использовать, это ''password'' и ''md5'' . Метод ''password'' только указывает, что для установления соединения требуется пароль и пароль отправляется в виде простого текста. Этот метод хорош тогда, когда такого рода информация никогда не покинет машину, как, например, при соединении через доменный сокет Unix или localhost. Метод ''md5'' схож с ''password'', но защищает пароль использованием хэша md5. Это то, что Вам потребуется использовать, когда бы пароль ни был отправлен через сеть. 

В данный момент автор хотел бы обратить Ваше внимание на последние две строчки и четыре строчки, включающие комментарии, в файле {{Path|pg_hba.conf}} . PostgreSQL имеет нативную поддержку IPv6, независимо от того, желаете ли Вы такую поддержку или нет. Вдобавок, адреса IPv4 автоматически отображаются в адреса IPv6, т.е., 127.0.0.1 будет отображен в ::FFFF:127.0.0.1 и, как ''чистый'' IPv6, ::FFFF:7F00:0001. 

Хотя, кажется, есть некоторое непонимание того как имена хостов отображаются в IP-адреса. Давайте рассмотрим файл {{Path|/etc/hosts}} . 

{{File|/etc/hosts||<pre>
# псевдонимы localhost для IPv4 and IPv6
127.0.0.1       localhost
::1             localhost
</pre>
}}

Из примера выше Вы можете видеть, что оба адреса IPv4 и IPv6 отображаются на localhost. Когда <code>psql</code> обратится к этому файлу, она захватит первое совпадение и использует его в качестве адреса; в этом случае 127.0.0.1. Когда Postgresql его проанализирует, он также будет соответствовать адресу в формате IPv6, например, ::ffff:127.0.0.1. Если, однако же, адрес IPv6 появится первым, то тогда <code>psql</code> отобразит его только в один ::1; ::1 - это не то же самое, что ::ffff:127.0.0.1. Таким образом, если Вы не имеете ::1 в качестве разрешенных средств доступа, <code>psql</code> не будет способна установить соединение. Кроме того, Ваше ядро должно поддерживать протокол IPv6. 

Поэтому, лучше будет указать только одни IP адреса для <code>psql</code> и в файле {{Path|pg_hba.conf}}, вместо того чтобы полагаться на то, что {{Path|/etc/hosts}} упорядочен должным образом. Это устраняет любые сомнения по поводу того какие IP-адреса разрешены или к какому серверу Вы будете подключаться. 

== Запуск сервера ==

=== Поехали! ===

Теперь, запустите PostgreSQL и установите пароль для суперпользователя базы данных ''postgres'' . Эти команды должны быть запущены под 'root' в следующем листинге кода. 

Измените 'trust' на 'password' для соединений с localhost.

{{RootCmd|nano -w /etc/postgresql-9.0/pg_hba.conf}}

Теперь запустите базу данных:

{{RootCmd|/etc/init.d/postgresql-9.0 start|output=<pre>
postgresql-9.0  | * Starting PostgreSQL ...                             [ ok ]
</pre>}}

Откройте соединение к серверу и установите пароль:

{{RootCmd|psql -U postgres|output=<pre>
psql (9.0.3)
Type "help" for help.
</pre>}}

{{Cmd|\password|prompt=postgres{{=}}# |output=<pre>
Enter new password:
Enter it again:
</pre>}}

{{Cmd|\q|prompt=postgres{{=}}# }}

Измените 'trust' на 'password' для локальных соединений:

{{RootCmd|nano -w /etc/postgresql-9.0/pg_hba.conf}}

Теперь попросите базу данных перезагрузить настройки:

{{RootCmd|Перезагрузка /etc/init.d/postgresql-9.0|output=<pre>
postgresql-9.0 | * Reloading PostgreSQL configuration ...               [ ok ]
</pre>
}}

Затем, когда все работает так, как нужно, включите загрузку PostgreSQL при старте системы:
{{RootCmd|# rc-update add postgresql-9.0 default|output=<pre>
 * service postgresql-9.0 added to runlevel default
</pre>
}}

На данный момент Вы готовы продолжать с официальным [http://www.postgresql.org/docs/current/static/tutorial.html Руководством PostgreSQL]. Это руководство проведет Вас через создание ролей, баз данных, схем и все эти интересные и полезные вещи.

== Миграция PostgreSQL ==

=== Когда Вам требуется миграция ===

Существуют только две причины по которым Вам необходимо выполнить миграцию: при переходе от одной главной версии к другой, например, от PostgreSQL 8.4.7 к 9.0.3, но не от 9.0.2 к 9.0.3; или при переключении с устаревшего формата временных меток с плавающей точкой к новому 64-битному целочисленному формату временных меток. 

{{Note/ru|Вам потребуется выполнить миграцию базы данных когда Вы переходите от старых ebuild-файлов dev-db/libpq, dev-db/postgresql, dev-db/postgresql-libs и dev-db/postgresql-client к новым ebuild-файлам dev-db/postgresql-docs, dev-db/postgresql-base и dev-db/postgresql-server.}}


=== Миграция после версии 9.0 ===

''pg_upgrade'', новая утилита, которая поставляется с версиями 9.0 и позже, радикально упрощает процесс миграции. 

Однако, имеются два предостережения при использовании утилиты pg_upgrade. Во-первых, она не поддерживает файлы конфигурации, находящиеся в каталоге, отличном от того, где хранятся данные. Это может быть разрешено использованием символьных ссылок. Во-вторых, Вы можете использовать ее только для миграции с базы данных начинающейся с версии 8.3 или более новой. Если Вы имеете более старую базу данных, Вам нужно следовать инструкциям по миграции с установок, предшествующих версии 9.0.

Не забудьте инициализировать новую базу данных:
{{RootCmd|emerge --config {{=}}dev-db/postgresql-server-9.0}}

Остановите серверы с которых и на которые Вы собираетесь мигрировать:

{{RootCmd|/etc/init.d/postgresql-8.4 stop
|/etc/init.d/postgresql-9.0 stop
|ln -s /etc/postgresql-8.4/*.conf /var/lib/postgresql/8.4/data/
|ln -s /etc/postgresql-9.0/*.conf /var/lib/postgresql/9.0/data/}}

Проверьте доступные версии и затем выберите Вашу:

{{RootCmd|eselect postgresql list
|eselect postgresql set 9.0}}

Измените метод аутентификации пользователя базы данных 'postgres' так, чтобы доверять локальным соединениям на всех базах данных:

{{RootCmd|nano -w /etc/postgresql-8.4/pg_hba.conf
|nano -w /etc/postgresql-9.0/pg_hba.conf}}

Вам может потребоваться изменить разрешения на '/var/lib/postgresql/' перед выполнением следующего шага.

{{RootCmd|su - postgres}}

{{Cmd|pg_upgrade -u postgres \
-d /var/lib/postgresql/8.4/data -D /var/lib/postgresql/9.0/data \
-b /usr/lib/postgresql-8.4/bin -B /usr/lib/postgresql-9.0/bin}}

Выполните команды, которые pg_upgrade требует запустить, если таковые имеются.

{{Cmd|logout}}

Удалите символьные ссылки, которые мы создали ранее:

{{RootCmd|rm /var/lib/postgresql/8.4/data/*.conf
|rm /var/lib/postgresql/9.0/data/*.conf
|/etc/init.d/postgresql-9.0 start}}

=== Миграция перед версией 9.0: с помощью новых ebuild-файлов ===

По той причине, что новые ebuild-файлы предлагают более совершенный метод слоттинга, чем предыдущие, время простоя довольно мало, скорее всего это будут минуты, нежели часы. 

В следующих примерах предполагается, что Вы используете местоположения и настройки портов по умолчанию, и что Вы мигрируете с 8.3 на 8.4. Отрегулируйте их соответствующим образом, если Вы отклонились от значений по умолчанию. 

Если Вы еще этого не сделали, следуйте инструкциям по установке перед началом миграции. Такая компиляция может повлиять негативным образом на производительность сервера баз данных, но, тем не менее, она может выполняться. 

Необходимо отредактировать пару файлов перед началом миграции. Установите ''PGPORT'' в файле конфигурации {{Path
/etc/conf.d/postgresql-8.4}} на 6543. (Подойдет любой порт отличный от того, который привязан к предыдущей установке.) 

Затем, отредактируйте {{Path|/etc/postgresql-8.3/pg_hba.conf}} так, чтобы только суперпользователь базы данных ''postgres'' мог получить доступ к кластеру базы данных через доменный сокет Unix. 

{{RootCmd|cp -p /etc/postgresql-8.3/pg_hba.conf /etc/postgresql-8.4/}}

Следующие инструкции должны быть безопасны. Прочтите документацию, чтобы быть в этом уверенными.

{{RootCmd|cp -p /etc/postgresql-8.3/postgresql.conf /etc/postgresql-8.4/}}

Не забудьте скопировать любые файлы конфигурации, которые могут Вам понадобиться.

{{RootCmd|/etc/init.d/postgresql-8.3 reload
|/etc/init.d/postgresql-8.4 start}}

Начинайте переправлять данные со старого кластера на новый кластер.

{{RootCmd|pg_dumpall -U postgres -p 5432 {{!}} psql -U postgres -d postgres -p 6543
|/etc/init.d/postgresql-8.3 stop
|/etc/init.d/postgresql-8.4 stop}}

Установите PGPORT обратно на 5432.

{{RootCmd|nano -w /etc/conf.d/postgresql-8.4}}

Разрешите пользователям доступ еще один раз.

{{RootCmd|nano -w /etc/postgresql-8.4/pg_hba.conf
|/etc/init.d/postgresql-8.4 start
|rc-update del postgresql-8.3 && rc-update add postgresql-8.4 default}}

Надеемся, все прошло по плану и Вы успешно обновили сервер, который содержит те же самые данные, точь-в-точь, как и старый сервер. 

=== Миграция перед версией 9.0: со старых ebuild-файлов ===

Вам потребуется запланировать некоторое время простоя для Вашего сервера. Старые ebuild-файлы '''не могут''' быть установлены в то же самое время, что и новые. Таким образом, заранее предположите, что сервер будет остановлен в течение нескольких часов. Даже, может быть, на все выходные. 

Перед началом, Вам понадобится запретить доступ к серверу, так, чтобы не сделать изменений. Вы также можете пожелать сделать резервное копирование {{Path|postgresql.conf}} и {{Path|pg_hba.conf}} и любого другого файла конфигурации, который Вы считаете важным. 

{{RootCmd|pg_dumpall -U postgres > backup_file
|/etc/init.d/postgresql stop
|emerge -C dev-db/postgresql dev-db/libpq dev-db/postgresql-client dev-db/postgresql-libs}}

Следуйте шагам по установке и конфигурации сервера, описанным в подробностях в этой статье.

{{RootCmd|/etc/init.d/postgresql-8.4 start
|psql -f backup_file postgres}}

Вы можете повредить некоторые пакеты, которые были собраны с этими пакетами, но как только Вы установили dev-db/postgresql-base и/или dev-db/postgresql-server, Вы можете запустить <code>revdep-rebuild</code> , чтобы заново установить любые пакеты, которые могут быть повреждены.

== Утилиты ==

=== pgAdmin III ===

[http://www.pgadmin.org/ pgAdmin III] - это графическая утилита для управления PostgreSQL. 

== Устранение проблем ==

=== Сообщение "Server Lacks Instrumentation Functions" ===

Эту проблему легко решить, с решением, зависящим от версии, которую Вы используете. Что сложно, так это найти ответ. То, что потребуется - это импорт из файла, который уже существует на запоминающем устройстве: {{Path|adminpack.sql}}. Чтобы решить эту проблему, запустите команду, соответствующую имеющейся версии: 

{{Cmd|psql -U postgres --file /usr/share/postgresql-9.0/contrib/adminpack.sql
|psql -U postgres -c "CREATE EXTENSION adminpack;"}}

== Благодарности ==

Мы хотели бы поблагодарить следующих авторов и редакторов за их вклад в это руководство:


* Aaron W. Swenson
* Mikkel A. Clausen

[[Category:Database]]
