<languages />

{{Metadata|abstract=이 문서는 MySQL 설치 및 사용을 돕는 문서입니다.}}

이 문서는 MySQL 설치 및 사용을 돕는 문서입니다.

== MySQL 시작하기 ==

=== 배경 ===

MySQL은 다양한 프로그램에 사용하는 유명한 데이터베이스 서버입니다. SQL은 (S)tructured (Q)uery (L)anguage(구조 질의 언어)를 의미하며, MySQL이 다른 프로그램과 의사소통할 때 사용하는 언어입니다. 무엇보다도 MySQL은 자체 확장 SQL 함수가 있어 사용자에게 추가 기능을 제공합니다. 이 문서에서는 초기 MySQL 설치, 데이터베이스 및 테이블 설정, 새 사용자 추가 방법을 살펴보겠습니다. 설치 단계부터 시작해보겠습니다. 

=== MySQL 설치 ===

우선 MySQL을 시스템에 설치했는지부터 확인하십시오. MySQL의 개별 기능이 필요한 경우 설치 과정에서 세부 설정을 가능하도록 돕는데 필요한 USE 플래그를 활성화했는지 확인하십시오. 

{{Emerge|mysql}}

설치가 끄나면 다음 안내 메시지가 뜹니다: 

{{CodeBox|title=MySQL einfo 메시지|1=
You might want to run:
"emerge --config =dev-db/mysql-[version]"
if this is a new install.
}}

이 문서에서 새로 설치했으니 명령을 실행하겠습니다. MySQL 데이터베이스를 설정하는 동안 프롬프트가 뜨면 {{Key|Enter}} 키를 누르시면 됩니다. 설정 단계에서는 관리하는데 필요한 데이터베이스, 테이블, 사용자 등의 정보가 들어있는 MySQL 주 데이터베이스를 설정합니다. 설정 단계에서는 가능한한 빨리 루트 암호를 바꾸는 것이 좋습니다. 이 부분을 분명하게 짚고 넘어가겠으며, 과정을 거치지 않으면 누군가가 기회를 잡고 들어와서 MySQL 서버의 기본 설정을 건드립니다. 

{{RootCmd|emerge --config {{=}}dev-db/mysql-[version]|output=<pre>
 * MySQL DATADIR is /var/lib/mysql
 * Press ENTER to create the mysql database and set proper
 * permissions on it, or Control-C to abort now...
 
   Preparing db table
   Preparing host table
   Preparing user table
   Preparing func table
   Preparing tables_priv table
   Preparing columns_priv table
   Installing all prepared tables
 
   To start mysqld at boot time you have to copy support-files/mysql.server
   to the right place for your system
 
   PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
   To do so, issue the following commands to start the server
   and change the applicable passwords:
 
   /etc/init.d/mysql start
   /usr/bin/mysqladmin -u root -h pegasos password 'new-password'
   /usr/bin/mysqladmin -u root password 'new-password'
   Depending on your configuration, a -p option may be needed
   in the last command. See the manual for more details.
</pre>}}

{{Note|호스트 이름 설정을 localhost로 설정하여 이전 명령이 멈췄다면 ''gentoo'' 같은 다른 이름으로 호스트를 설정하십시오. {{Path|/etc/conf.d/hostname}} 파일을 업데이트하시고 {{Path|/etc/init.d/hostname}}를 재시작하십시오.}}

MySQL의 비 이빌드 관련 정보를 지워 이 문서의 내용과 최대한 일관성을 유지하십시오.

{{Important|mysql-4.0.24-r2의 설정 단계에서는 루트 암호 항목을 더 안전하게 입력합니다.}}

실행하여 암호를 설정할 스크립트 명령이 나타났으니 이 명령을 실행해보겠습니다. 

OpenRC를 사용한다면 이 명령을 실행하십시오:

{{RootCmd|/etc/init.d/mysql start|output=<pre>
 * Re-caching dependency info (mtimes differ)...
 * Starting mysqld (/etc/mysql/my.cnf) ...        [ ok ]
</pre>}}

systemd를 사용한다면 다음 명령을 대신 실행하십시오:

{{RootCmd|systemctl restart mysqld.service}}

다음 루트 암호를 설정하십시오:

{{RootCmd|/usr/bin/mysqladmin -u root -h localhost password 'new-password'}}

입력한 루트 암호를 제대로 설정했는지 MySQL 서버에 로그인하여 확인할 수 있습니다: 

{{Cmd|mysql -u root -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 4 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

<code>-u</code> 스위치는 로그인할 사용자를 설정합니다. <code>-h</code> 스위치는 호스트를 설정합니다. 보통 원격 서버를 설정하기 전까지는 <code>localhost</code>가 됩니다. 마지막으로 <code>-p</code>는 mysql 클라이언트에게 데이터베이스를 접근할 암호를 입력하겠다고 알립니다. 명령을 실행하면<code>mysql></code> 프롬프트를 봅니다. 여기가 바로 명령을 입력할 부분이빈다. 이제 루트 사용자 권한으로 mysql 프롬프트로 들어왔으니 데이터베이스 설정을 시작할 수 있습니다.

{{Important|기본 mysql 설치 요건은 개발 시스템을 의도했습니다. 더 안전한 기본 환경을 설정하려면 /usr/bin/mysql_secure_installation을 실행하십시오}}

== 데이터베이스 설정 ==

=== 데이터베이스 만들기 ===

로그인하여 mysql 프롬프트를 띄웠습니다. 우선 우리가 설정한 데이터베이스를 살펴보겠습니다. 데이터베이스를 살펴보기 위해 <code>SHOW DATABASES</code> 명령을 사용하겠습니다. 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| mysql    |
| test     |
+----------+
2 rows in set (0.09 sec)
</pre>
}}

{{Important| MySQL 명령은 세미콜론 -- <code>;</code> 으로 끝나야 함을 기억하십시오.}}

이미 시험용 데이터베이스를 만들었으에도 불구, 그래도 자체 데이터베이스를 만들겠습니다. <code>CREATE DATABASE</code> 명령을 사용하여 데이터베이스를 만듭니다. ''gentoo''라는 데이터베이스를 만들겠습니다. 

{{Cmd|CREATE DATABASE gentoo;|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.08 sec)
</pre>
}}

응답을 통해 어떤 오류 없이 명령을 실행했음을 알 수 있습니다. 이 경우 1열을 수정했습니다. 이 결과는 전체 데이터베이스 목록을 보유하고 있는 mysql 주 데이터베이스의 참고 사항입니다. 뒤에서 무슨 일이 일어나고 있는지는 그다지 신경쓰지 않아도 됩니다. 마지막 숫자는 요청을 얼마나 빨리 처리했는지 보여줍니다. <code>SHOW DATABASES</code> 명령을 다시 사용하면 우리가 만든 데이터베이스를 확인해볼 수 있습니다. 

{{Cmd|SHOW DATABASES;|prompt=mysql&gt; |output=<pre>
+----------+
| Database |
+----------+
| gentoo   |
| mysql    |
| test     |
+----------+
3 rows in set (0.00 sec)
</pre>
}}

데이터베이스를 분명하게 만들었습니다. 이 데이터베이스에 테이블을 만들려면 방금 만든 데이터베이스를 현재 데이터베이스로 선택해야합니다. 따라서 <code>USE</code> 명령을 사용하겠습니다. <code>USE</code> 명령은 해당 이름을 지닌 데이터베이스를 현재 데이터베이스로 사용하겠다는 의미입니다. 다른 선택지가 있다면 실제 명령줄에 <code>-D</code>스위치를 쓰는것입니다. 이제 gentoo 데이터베이스로 전환해보겠습니다. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Database changed
</pre>
}}

그리고 현재 데이터베이스는 앞서 만들었던 gentoo 데이터베이스가 되었습니다. 이제 이 데이터베이스를 활용하여 테이블을 만들고 정보를 넣어보겠습니다.

== MySQL 테이블 작업하기 ==

=== 테이블 만들기 ===

MySQL 구조상, 데이터베이스, 테이블, 레코드, 필드가 있습니다. 데이터베이스는 테이블을 관리하고, 테이블은 레코드를, 레코드는 필드를 관리하며, 필드에는 정보가 들어있습니다. 이 구조는 사용자로 하여금 정보에 접근하는 방식을 선택할 수 있게 해줍니다. 지금까지는 데이터베이스를 다루었으며, 이제는 테이블을 다루겠습니다. 우선, 테이블은 데이터베이스와 유사하게 <code>SHOW TABLES</code> 명령으로 확인할 수 있습니다. 지금은 명령을 실행하여 나타난 결과와 같이 gentoo 데이터베이스에 테이블이 없습니다: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
Empty set (0.00 sec)
</pre>
}}

이는 테이블을 만들어야 함을 의미합니다. 테이블을 만들기 위해 <code>CREATE TABLE</code> 명령을 사용하겠습니다. 허나 이 명령은 단순한 <code>CREATE DATABASE</code> 명령과는 조금 다릅니다. 이 명령은 인자 목록을 취합니다. 형식은 다음과 같습니다: 

{{CodeBox|title=CREATE TABLE 문법|lang=sql|1=
CREATE TABLE [table_name] ([field_name] [field_data_type]([size]));
}}

'''table_name'''은 우리가 만들고자 하는 테이블 이름입니다. 이 경우 <code>developers</code> 테이블을 만들겠습니다. 이 테이블에는 개발자 이름, 전자메일 주소, 직급이 들어갑니다.

'''field_name'''은 필드 이름이 들어갑니다. 여기서 우리는 name, email, job을 넣겠습니다.

'''field_data_type'''은 어떤 형식의 정보를 넣을지를 말합니다. 각각의 다른 형식은 [http://dev.mysql.com/doc/mysql/en/column-types.html MySQL 컬럼 형식 페이지]<sup style="color:#ff0077">en</sup>에서 찾아보실 수 있습니다. 모든 필드에 대해 <code>VARCHAR</code> 데이터 형식을 사용하겠습니다. <code>VARCHAR</code>는 문자열을 다룰 때 사용하는 간단한 데이터 형식 중 하나입니다. 

'''size'''는 데이터 단일 필드 갯수를 얼마나할 지 정합니다. 이 경우 128 값을 사용하겠습니다. 하나의 데이터 필드에서 사용하는 <code>VARCHAR</code> 데이터 형식의 크기가 128 바이트라는 의미입니다. 위 사이트에 여러분께 기술적으로 증명할 건덕지가 있지만, 시간이 아무리 흐르고 흘러도 128개의 문자 정도면 안전하다 생각하셔도 됩니다. 이제 테이블을 어떻게 만드는지 알아볼 시간입니다. 계속 진행해보습니다. 

{{Cmd|CREATE TABLE developers ( name VARCHAR(128), email VARCHAR(128), job VARCHAR(128));|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.11 sec)
</pre>
}}

테이블을 잘 만든 것 같습니다. <code>SHOW TABLES</code> 명령으로 확인해보겠습니다: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+------------------+
| Tables_in_gentoo |
+------------------+
| developers       |
+------------------+
1 row in set (0.00 sec)
</pre>
}}

테이블이 있군요. 그런데 설정한 필드 형식에 맞춘 어떤 정보도 없는 것 같습니다. <code>DESCRIBE</code> 명령 (또는 줄여서 <code>DESC</code>) 명령을 사용하여 어떤 테이블 이름과 인자를 가지고 있는지 살펴보겠습니다. developers 테이블이 어떻게 생겼는지 살펴보도록 하겠습니다. 

{{Cmd|DESCRIBE developers;|prompt=mysql&gt; |output=<pre>
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| name  | varchar(128) | YES  |     | NULL    |       |
| email | varchar(128) | YES  |     | NULL    |       |
| job   | varchar(128) | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
</pre>
}}

화면에서는 각자 다른 필드와 형식을 보여줍니다. 또한 일부 추가 속성을 보여주는데, 이 내용은 설명서의 설명 범위를 벗어납니다. 그 밖의 내용은 알아서 [http://dev.mysql.com/doc/mysql/en/ MySQL 참조 설명서]<sup style="color:#ff0077">en</sup>를 보세요. :P 이제 건드려볼 테이블이 만들어졌습니다. 여기에 데이터를 넣어보겠습니다.

=== MySQL 데이터베이스 데이터 배치 ===

<code>INSERT</code> 명령으로 테이블의 내용을 늘리(거나 데이터 추가)도록 해보겠습니다. <code>CREATE TABLE</code> 명령과 같이, 개별적인 형식이 있습니다: 

{{CodeBox|title=INSERT 문법|lang=sql|1=
INSERT INTO table (col1, col2, ...) VALUES('value1', 'value2', ...);
}}

이 명령은 테이블에 레코드를 넣을때 사용합니다. 테이블에는 우리가 정보를 넣고자 하는 레코드가 들어갑니다. 테이블 이름 다음에는 컬럼 이름 목록이 들어가며  <code>VALUES()</code> 에는 테이블에 넣고자 하는 값이 들어갑니다. 각 필드에 정의한 컬럼 순서를 맞춰 값을 넣는다면 컬럼 목록 이름을 생략해도 됩니다. 이 경우 developers 테이블에 데이터를 넣어 보겠습니다. 예제 레코드를 삽입하도록 하죠: 

{{Cmd|INSERT INTO developers VALUES('Joe Smith', 'joesmith@gentoo.org', 'toolchain');|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.06 sec)
## (If you don't know the order of the columns in the table or want to insert an incomplete record)
mysql> INSERT INTO developers (job, name) VALUES('outsourced', 'Jane Doe');
Query OK, 1 row affected (0.01 sec)
</pre>
}}

According to our return result, it appears that the record was inserted correctly. What if we want to input more information than just one record? That's where the <code>LOAD DATA</code> command comes into play. This loads records from a tab separated file. Let's try that by editing a file in our home directory with the records. We'll call this file {{Path|records.txt}} . Here's a sample: 

{{CodeBox|title=~/records.txt|1=
John Doe	johndoe@gentoo.org	portage
Chris White	chriswhite@gentoo.org	documentation
Sam Smith	samsmith@gentoo.org	amd64
}}

{{Important|Be sure you know what data you're dealing with. It's very unsafe to use <code>LOAD DATA</code> when you are uncertain of the file's contents!}}

Now the <code>LOAD DATA</code> command has a somewhat elongated definition, but we'll use the simplest form here. 

{{CodeBox|title=LOAD DATA 문법|lang=sql|1=
LOAD DATA LOCAL INFILE '/path/to/filename' INTO TABLE table;
}}

{{Path|/path/to/filename}} is the directory and filename that will be used. table is the name of our table. In this case, our file is {{Path|~/records.txt}} and the table is developers. 

{{Cmd|LOAD DATA LOCAL INFILE '~/records.txt' INTO TABLE developers;|prompt=mysql&gt; |output=<pre>
Query OK, 3 rows affected (0.00 sec)
Records: 3  Deleted: 0  Skipped: 0  Warnings: 0
</pre>
}}

{{Important|If you come up with any strange behavior, make sure your fields are separated by tabs. If you paste information into your infile from another source, it may convert your tabs to spaces.}}

That worked well. However, this simply inserts records, and does not give you any sort of control over MySQL. Many web applications use sql scripts in order to setup MySQL quickly and easily. If you want to use an sql script, you'll need to run mysql in batch mode, or source the file. Here's an example of running mysql in batch mode: 

{{Cmd|mysql -u root -h localhost -p < sqlfile}}

Like <code>LOAD DATA</code> , be sure you can tell what {{Path|sqlfile}} does. ''Failure to do so may cause your database to be compromised!'' Another way you can accomplish this is to use the <code>source</code> command. This command will run mysql commands from an sql file while in the mysql interactive mode. Here is how to source an sql file: 

{{Cmd|source sqlfile;|prompt=mysql&gt; }}

If you see a web application wanting you to run an sql file, the two above commands can be used to accomplish that task. We have our table setup, so how do we check our fields? We do this by searching our table with queries. 

=== 쿼리로 MySQL 테이블 탐색하기 ===

Queries are one of the main features of any SQL database. They help us turn data in our tables into something useful. Most queries are done with the <code>SELECT</code> command. The <code>SELECT</code> command is fairly complex, and we're only going to look at three main forms of the command in this document. 

{{CodeBox|title=SELECT forms|lang=sql|1=
## (Select all entries in a table)
SELECT * FROM table;
## (Select specific entries in a table)
SELECT * FROM table WHERE field=value;
## (Select specific fields)
SELECT field1,field2,field3 FROM table [WHERE field=value];
}}

Let's take a quick look at the first form. It's relatively simple and gives you an overall look of your table. We'll go ahead and run it to see what data we have so far. 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

We see both the data we inserted through <code>INSERT</code> and those inserted by <code>LOAD DATA</code> present. Now, let's say that we just want to see the record for Chris White. We can do so with the second form of select as shown below. 

{{Cmd|SELECT * FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+---------------+
| name        | email                 | job           |
+-------------+-----------------------+---------------+
| Chris White | chriswhite@gentoo.org | documentation |
+-------------+-----------------------+---------------+
1 row in set (0.08 sec)
</pre>
}}

As expected, the specific entry that we were looking for has been selected. Now, let's say we only wanted to know the person's job and email address, not their name. We can do so with the third form of <code>SELECT</code> as shown here. 

{{Cmd|SELECT email,job FROM developers WHERE name {{=}} 'Chris White';|prompt=mysql&gt; |output=<pre>
+-----------------------+---------------+
| email                 | job           |
+-----------------------+---------------+
| chriswhite@gentoo.org | documentation |
+-----------------------+---------------+
1 row in set (0.04 sec)
</pre>
}}

This method of selection is a lot easier to manage, expecially with larger amounts of information, as we'll see later on. Right now, being the root mysql user, we have unlimited permissions to do what we wish with the MySQL database. In a server environment, a user with such privileges can be quite problematic. In order to control who does what with the databases, we setup privileges. 

== MySQL 권한 ==

=== GRANT 구문으로 권한 부여하기 ===

Privileges are what kind of access users have to databases, tables, pretty much anything. Right now in the gentoo database, the MySQL root account is the only account that can access it, given its permissions. Now, let's create two somewhat generic users, guest and admin, who will access the gentoo database and work with the information in it. The guest account will be a restricted one. All it will be able to do is get information from the database, and that's it. admin will have the same control as root, but only for the gentoo database (not the main mysql databases). Before we start on that, let's have a closer look at this somewhat simplified format of the <code>GRANT</code> command. 

{{CodeBox|title=GRANT 문법|lang=sql|1=
GRANT [privileges] ON database.* TO '[user]'@'[host]' IDENTIFIED BY '[password]';
}}

{{Note|<code>GRANT</code> is considered to be the way to create a user. Later versions of MySQL, however, do contain a<code>CREATE_USER</code> function, though<code>GRANT</code> is still preferred.}}

First we have the privileges we wish to assign. With what we've learned so far, here are some of the privileges you can set: 

* <code>ALL</code> - Gives the all privilege control for the database
* <code>CREATE</code> - Allows users to create tables
* <code>SELECT</code> - Allows users to query tables
* <code>INSERT</code> - Allows users to insert data into a table
* <code>SHOW DATABASES</code> - Allows users to see a list of databases
* <code>USAGE</code> - User has no privileges
* <code>GRANT OPTION</code> - Allows users to grant privileges

{{Note|If you're running MySQL to communicate data to a web application, <code>CREATE</code> , <code>SELECT</code> , <code>INSERT</code> (discussed here), <code>DELETE</code> and <code>UPDATE</code> (for further infomation look up the [http://dev.mysql.com/doc/mysql/en/grant.html MySQL Reference Manual - GRANT and REVOKE Syntax] section) are the only permissions you will most likely need. A lot of people make the mistake of granting all permissions when it's not really necessary. Check with the application developers to see if such permissions will cause issues with general operation.}}

For our admin user, ALL will do. For the guest user, <code>SELECT</code> will be sufficient for read only access. '''database''' is the database we wish the user to have these permissions on. In this example, gentoo is the database. The .* means all tables. If you wanted to, you could apply per table access. '''user''' is the name of the user and '''host''' is the hostname the user will be accessing from. In most cases, this will be localhost. Finally, '''password''' is the user's password. Given the information, let's go ahead and create our users. 

{{Cmd|GRANT ALL ON gentoo.* TO 'admin'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

{{Cmd|GRANT SELECT ON gentoo.* TO 'guest'@'localhost' IDENTIFIED BY 'password';|prompt=mysql&gt; }}

Now that we have the users setup, let's test them out. First we quit mysql by typing <code>quit</code> at the command prompt: 

{{Cmd|quit|prompt=mysql&gt; }}

이제 콘솔로 돌아왔습니다. 사용자 설정을 처리했으니 사용자가 무얼 할 수 있는지 보도록 하겠습니다.

=== 사용자 권한 시험 ===

이제 guest 사용자로 로그인해보겠습니다. 현재 guest 사용자는 <code>SELECT</code> 명령에 대해서만 권한을 쥐고 있습니다. 기본적으로는 검색 이외의 것은 할 수 없습니다. guest 계정으로 로그인하러 가보겠습니다. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 6 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Now we should test the user restriction(s). Let's switch to the gentoo database: 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
</pre>
}}

Now let's try to do something we are not supposed to. We'll attempt to create a table. 

{{Cmd|CREATE TABLE test (test VARCHAR(20), foobar VARCHAR(2));|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

As you can see, this function fails, as our user does not have the appropriate access. However, one access we did grant is the <code>SELECT</code> statement. Let's go ahead and try that: 

{{Cmd|SELECT * FROM developers;|prompt=mysql&gt; |output=<pre>
+-------------+-----------------------+----------------+
| name        | email                 | job            |
+-------------+-----------------------+----------------+
| Joe Smith   | joesmith@gentoo.org   | toolchain      |
| John Doe    | johndoe@gentoo.org    | portage        |
| Chris White | chriswhite@gentoo.org | documentation  |
| Sam Smith   | samsmith@gentoo.org   | amd64          |
| Jane Doe    | NULL                  | Outsourced job |
+-------------+-----------------------+----------------+
5 rows in set (0.00 sec)
</pre>
}}

The command succeeds, and we're given a glimpse of what user permissions can do. We did, however, create an admin account as well. This was created to show that even all permissions granted users can still have limitations. Go ahead and quit MySQL and login as the admin. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u admin -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 7 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

To begin, we'll try creating a new database with our admin user. This admin user will have access similiar to the root MySQL account, and will be able to do any kind of modification to the gentoo database it chooses. This will test the user's access to the main MySQL database. Remember ealier that we only set permissions to a specific database. 

{{Cmd|CREATE DATABASE gentoo2;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'admin@localhost' to database 'gentoo2'
</pre>
}}

Indeed, the admin user cannot create databases on the main MySQL database, despite all his permissions on the gentoo database. However, we're still able to use the admin account to modify the gentoo database, as shown here by this example data insertion. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql> INSERT INTO developers VALUES('Bob Simmons', 'bobsimmons@gentoo.org', 'python');
Query OK, 1 row affected (0.08 sec)
</pre>
}}

The admin user can access the database as they please. Now sometimes, we need to get rid of user permissions. This could be anything from a problematic user to a retired employee. Let's take a look at how to disable user permissions with the <code>REVOKE</code> command. 

=== Removing User Access With The REVOKE Command ===

The <code>REVOKE</code> command lets us deny access to a user. We can either deny full access, or specific access. In fact, the format is very similiar to <code>GRANT</code> . 

{{CodeBox|title=REVOKE Syntax|lang=sql|1=
REVOKE [privileges] ON database.* FROM '[user]'@'[host]';
}}

Options here are explained in the <code>GRANT</code> command section. In this section however, we're going to deny full access to a user. Let's say we find out the guest account is causing some problems security wise. We decide to revoke all privileges. We login as root and do the needful. 

{{Cmd|REVOKE ALL ON gentoo.* FROM 'guest'@'localhost';|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

{{Note|In this case, user access is simple, so per database revoking is not a problem. However, in larger cases, you would most likely be using *.* instead of gentoo.* to remove user access to all other databases.}}

Now let's quit and attempt to login as a guest user. 

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 9 to server version: 4.0.25
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql>
</pre>
}}

Although we're able to login, our access to gentoo is now gone. 

{{Cmd|USE gentoo;|prompt=mysql&gt; |output=<pre>
ERROR 1044: Access denied for user: 'guest@localhost' to database 'gentoo'
</pre>
}}

And our problematic user is no longer able to access the gentoo database. Please note that the user was still able to login. That is because they remain in the main MySQL database. Let's take a look at how to completely remove an account with <code>DELETE</code> and the MySQL user table. 

=== Removing Accounts Using DELETE ===

The MySQL user table is a listing of all users and information about them. Make sure you're logged in as root. Then go ahead and use the main MySQL database. 

{{Cmd|USE mysql;|prompt=mysql&gt; |output=<pre>
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
mysql>
</pre>
}}

Now let's see what tables the mysql database has: 

{{Cmd|SHOW TABLES;|prompt=mysql&gt; |output=<pre>
+-----------------+
| Tables_in_mysql |
+-----------------+
| columns_priv    |
| db              |
| func            |
| host            |
| tables_priv     |
| user            |
+-----------------+
6 rows in set (0.00 sec)
</pre>
}}

The user table is the table we're after. However, the user table contains 30 different fields, making it very hard to read. In order to make things easier to read, we'll go ahead and use the third version of the <code>SELECT</code> statement. The fields we're after are Host and User. 

{{Cmd|SELECT Host,User FROM user WHERE User {{=}} 'guest';|prompt=mysql&gt; |output=<pre>
+-----------+-------+
| Host      | User  |
+-----------+-------+
| localhost | guest |
+-----------+-------+
1 row in set (0.00 sec)
</pre>
}}

Now that we have our information, we can get rid of the guest user. This is done with the <code>DELETE</code> command and the syntax is shown below. 

{{CodeBox|title=DELETE Syntax|lang=sql|1=
DELETE FROM table WHERE field='value';
}}

You may notice that <code>DELETE</code> is somewhat similiar to the <code>SELECT</code> statement in its format. In this case, the field will be User, and the value guest. This will delete the record in the user table where the user is guest, successfully deleting our guest user account. Let's go ahead and do that: 

{{Cmd|DELETE FROM user WHERE User{{=}}'guest';|prompt=mysql&gt; |output=<pre>
Query OK, 1 row affected (0.07 sec)
</pre>}}

{{Cmd|FLUSH PRIVILEGES;|prompt=mysql&gt; |output=<pre>
Query OK, 0 rows affected (0.00 sec)
</pre>
}}

It seems to have worked ok. Let's test by logging out and attempting to login as our guest user. 

{{Cmd|quit|prompt=mysql&gt; |output=<pre>
Bye</pre>}}

{{Cmd|mysql -u guest -h localhost -p|output=<pre>
Enter password:
ERROR 1045: Access denied for user: 'guest@localhost' (Using password: YES)
</pre>
}}

Our user is now successfully deleted! 

=== Conclusion ===

While this guide focuses mainly on setting up MySQL on the command line, a few alternatives are available in GUI form: 

* [http://www.phpmyadmin.net/home_page/ phpMyAdmin] - Popular php based MySQL administration tool.
* [http://sourceforge.net/projects/mysqlnavigator/ mysqlnavigator] - QT frontend to MySQL.
* [http://gmyclient.sourceforge.net/ gmyclient] - A GNOME based MySQL client.
* [http://www.knoda.org/ knoda] - A KDE MySQL client.

This ends the MySQL introductory tutorial. I hope this gives you a better understanding of the basics behind MySQL and getting a database set up.

[[Category:Database]]  {{Migrated|originalauthors=Chris White, Shyam Mani, Xavier Neys}}
