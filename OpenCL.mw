<languages />
<translate>
{{Confused|OpenCT}}

Open Computing Language (OpenCL) is a framework for writing programs that execute across heterogeneous computing platforms (CPUs, GPUs, DSPs, FPGAs, ASICs, ...).

== Overview ==

The point of this article is to deal with Gentoo implementation and quirks so the overview will be short.
For a better overview of the theoretical aspects, see [http://en.wikipedia.org/wiki/OpenCL the OpenCL wikipedia article].

OpenCL presents itself as a library with a simple interface:
* standardized API headers (eg. <tt>#include CL/cl.h</tt>) for C and C++
* the OpenCL library (eg. <tt>libOpenCL.so</tt>)

The standard is made to provide many OpenCL ''platforms'' on one system, and each platform can see various ''devices''.
Each ''device'' has a certain compute characteristics (number of compute units, optimal vector size, memory limits, ...).
The OpenCL standard allows to load OpenCL ''kernels'' which are pieces of C99-like code that is JIT-compiled by the OpenCL implementations (most of them rely on LLVM to work), and execute these kernels on the target hardware.
Functions are provided to compile the kernels, load them, transfer data back and forth from the target devices, etc.

Hardware vendors can benefit from this standard by implementing the OpenCL primitives for their hardware.

Installing an OpenCL implementation means adding a library implementing the OpenCL API, and a reference to the library path in the ICD (Installable Client Driver) database, as a file in <tt>/etc/OpenCL/vendors</tt>.

There is an ICD loader which can be provided by a generic loader or one of the implementations. For most uses of OpenCL one of these must be selected using <tt>eselect opencl</tt>.

The OpenCL host and device API calls, the memory hierarchy are standard, but it doesn't mean that code which is ''portable'' to different implementations will be ''efficient'' on all of them. Often, code has to be tested on one implementation to eliminate issues. See the [[#Implementation Validation|implementation validation]] and [[#Implementation Tuning|implementation tuning]] sections..

== Implementations on Linux ==

Here are upstream projects that provide an implementation of OpenCL.

* pocl is an OpenSource, LLVM-based OpenCL implementation for the CPU which is not necessarily the fastest, but is educational
* mesa has a WIP implementation which works on some GPU
* AMD provides its AMD APP SDK [http://developer.amd.com/tools-and-sdks/opencl-zone/amd-accelerated-parallel-processing-app-sdk/] which contains an OpenCL library
* nVidia provides its CUDA toolkit [https://developer.nvidia.com/cuda-toolkit] which contains an OpenCL library
* Intel, on Linux, has an implementation for CPU devices, and another for GPU devices ("Beignet")

The implementations will be developed in further subsections.

=== ICD ===

The {{Package|dev-libs/ocl-icd}} package provides a layer of indirection to enable different OpenCL implementations,
and also provides the ''OpenCL.pc'' pkg-config descriptor.

=== pocl ===

As of 2015-03-15:

* the {{Package|dev-lang/pocl}} package is available in portage.

=== Mesa (clover) ===

As of 2016, installing {{Package|media-libs/mesa}} with the ''opencl'' USE flag will get you an OpenCL 1.1 installation that works on almost all AMD GPUs. For a full list of features see the [http://dri.freedesktop.org/wiki/GalliumCompute/ GalliumCompute Matrix].

=== Intel - CPU ===

The Intel CPU SDK is provided by the {{Package|dev-util/intel-ocl-sdk}} which is in portage.

As of 2014-09-15:

* Use version 2.* if the 4.* dies on you.


=== Intel - GPU ===

The GPU implementation from Intel is [https://freedesktop.org/wiki/Software/Beignet/ Beignet].
Beignet supports Ivy Bridge and later processors.

The {{Package|dev-libs/beignet}} package is available in portage.

Linux kernels 3.15 and 3.16 may require the following workaround:
{{FileBox|filename=/etc/local.d/01-opencl-beignet-workaround.start|title=local.d workaround for OpenCL on intel|lang=bash|1=
#!/bin/sh

echo 0 > /sys/module/i915/parameters/enable_cmd_parser # OpenCL
}}

{{Note|Starting in Q1â€™2018, Beignet [https://01.org/beignet has been deprecated] in favor of [https://01.org/compute-runtime NEO OpenCL driver], but it is not in portage.}}

=== AMD ===

The driver is provided by the [https://github.com/gentoo/sci/tree/master/dev-util/amdapp/ dev-util/amdapp] package, which is maintained in the Science overlay.
There also exists {{Package|dev-libs/amdgpu-pro-opencl}} -package which provides '''''closed source''''' OpenCL libraries from Ubuntu AMDGPU-PRO driver package. These libraries are ''normally'' used with the closed source [[AMDGPU-PRO]] drivers, but this package helps users to try ''if'' they can use them with open source [[AMDGPU]] drivers.{{Important|Mixing closed source OpenCL libraries with open source drivers isn't offically supported in any way. However there have been success at some levels<ref>[https://www.reddit.com/r/Gentoo/comments/693gvj/amdgpu_and_opencl/dh52z2m/ AMDGPU and OpenCL] - Reddit</ref><ref>[https://forums.gentoo.org/viewtopic-p-8087132.html#8087132 Post 8087132] - Gentoo Forums</ref>. Users who encounter problems are encouraged to ask help from the forums and not report it as a bug.}}

=== nVidia ===

The driver is provided by the {{Package|dev-util/nvidia-cuda-toolkit}} package which is in portage.

== Usage Notes ==

=== Implementation Validation ===

An implementation (especially the experimental ones) can be checked by running test suites such as:

* [http://cgit.freedesktop.org/piglit/ piglit]: Open Source OpenGL/OpenCL test suite. Check [http://dri.freedesktop.org/wiki/GalliumCompute/#index4h3 GalliumCompute] for simple piglit tests

=== Implementation Tuning ===

The main vendors will provide some form of advanced documentation to use their hardware to the maximum:

* nVidia: For developers targetting nVidia hardware, nVidia provides a [http://www.nvidia.com/content/cudazone/CUDABrowser/downloads/papers/NVIDIA_OpenCL_BestPracticesGuide.pdf Best Practices Guide].
* AMD: For developers targetting AMD hardware, AMD provides an [http://developer.amd.com/tools-and-sdks/opencl-zone/opencl-tools-sdks/amd-accelerated-parallel-processing-app-sdk/opencl-optimization-guide/ Optimization Guide].
* Beignet: For developers targetting the opensource OpenCL implementation for Intel GPU hardware, the Beignet projects provide a brief [http://www.freedesktop.org/wiki/Software/Beignet/optimization-guide/ optimization guide]

Some characteristics are not straightforward to find, and benchmarks are one way to find out.

TODO detail

=== LLVM DLL Hell ===

LLVM is starting to become a central library, and it is used by most of the implementations. If the user/implementer is not careful, linkage issues can occur (symbol collisions, constructors getting called multiple times and not handled, etc.). This is something that can be noticed with many implementations also.

TODO example
</translate>
